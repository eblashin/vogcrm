
&НаКлиенте
Процедура ТаблицаУспешноПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаСервере
Процедура СформироватьЗаголовки(СписокКолонок = Неопределено)
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
		Если ВалютаУправленческогоУчета.Код = "643" Тогда
			// Рубль
			ВалютаПредставление = Символ("8381");
		ИначеЕсли ВалютаУправленческогоУчета.Код = "978" Тогда
			// Евро
			ВалютаПредставление = Символ("8364");
		ИначеЕсли ВалютаУправленческогоУчета.Код = "840" Тогда
			// Доллар
			ВалютаПредставление = Символ("36");
		Иначе
			ВалютаПредставление = ВалютаУправленческогоУчета.Наименование;
		КонецЕсли;
	Иначе
		ВалютаПредставление = "";
	КонецЕсли;
	Период = ОтборСозданы.НайтиПоЗначению(ПериодОтбора);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ВоронкаПродаж", ВоронкаПродаж);
	Запрос.УстановитьПараметр("ЕстьПериод", Период.Пометка);
	Запрос.УстановитьПараметр("ЕстьКанал", ЗначениеЗаполнено(ПоискИсточникПривлечения));

	Запрос.УстановитьПараметр("ДатаНачала", ПериодОтбора.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодОтбора.ДатаОкончания);
	Запрос.УстановитьПараметр("Партнер", ПоискКлиент);
	Запрос.УстановитьПараметр("ТипУслуги", ПоискТипУслуги);
	Запрос.УстановитьПараметр("ОтборТегиВключен", ОтборВключен);
	Запрос.УстановитьПараметр("СсылкиНаОбъектыСтегами", СсылкиНаОбъектыСтегами);
	Запрос.УстановитьПараметр("СтрокаПоискаОтбор", "%"+СтрокаПоискаОтбор+"%");
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникиПервичногоИнтересаСрезПоследних.Период КАК Период,
	|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
	|	ИсточникиПервичногоИнтересаСрезПоследних.Сделка КАК Сделка
	|ПОМЕСТИТЬ тмпОбъекты
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних КАК ИсточникиПервичногоИнтересаСрезПоследних
	|//ДопОтборКанал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ОбъектыАРМ.Объект) КАК Количество,
	|	СУММА(CRM_ОбъектыАРМ.Объект.ОжидаемаяВыручка) КАК Сумма
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
	|ГДЕ
	|	CRM_ОбъектыАРМ.НаименованиеАРМ = ""МоиПродажи""
	|	И CRM_ОбъектыАРМ.СостояниеИнтереса В (&СостояниеИнтереса)
	|	И CRM_ОбъектыАРМ.Пользователь = &Пользователь
	|	И ВЫБОР
	|			КОГДА НЕ &ОтображатьПисьма
	|				ТОГДА НЕ CRM_ОбъектыАРМ.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ОтображатьЗвонки
	|				ТОГДА НЕ CRM_ОбъектыАРМ.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|			ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	//ДопОтборСтрока
	|	//ДопОтбор
	|	И ВЫБОР
	|			КОГДА &ОтборТегиВключен
	|				ТОГДА CRM_ОбъектыАРМ.Объект В (&СсылкиНаОбъектыСтегами)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьПериод
	|				ТОГДА CRM_ОбъектыАРМ.КрайнийСрок <= &ДатаОкончания
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьКанал
	|				ТОГДА  CRM_ОбъектыАРМ.Объект В
	|			(ВЫБРАТЬ
	|				тмпОбъекты.Сделка
	|			ИЗ
	|				тмпОбъекты КАК тмпОбъекты)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ;

	|		////////////////////////////////////////////////////////////////////////////////
	|		УНИЧТОЖИТЬ тмпОбъекты";
	СтруктураОбновления = Новый Структура;
	Запрос.УстановитьПараметр("ОтображатьЗвонки", НЕ ОтображатьЗвонки);
	Запрос.УстановитьПараметр("ОтображатьПисьма", НЕ ОтображатьПисьма);
	Если ТипЗнч(СписокКолонок) = Тип("СписокЗначений") Тогда
		Для Каждого ЗначениеКолонки Из СписокКолонок Цикл
			СтрокаДопОтборов = "";
			Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
				СтрокаДопОтборов = СтрокаДопОтборов +" И CRM_ОбъектыАРМ.Заголовок Подобно &СтрокаПоискаОтбор
				|";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборСтрока", СтрокаДопОтборов);
			Если ЗначениеКолонки.Значение = "НеРазобрано" Тогда
				СостояниеИнтереса = Новый СписокЗначений;
				СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
				Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтереса);
				
				
				Выборка = Запрос.Выполнить().Выбрать();
				СтруктураКолонки = Новый Структура;
				Если Выборка.Следующий() Тогда
					//ДекорацияНеРазобрано1 = "Не разобрано ("+Выборка.Количество+")";
					//СтруктураКолонки.Вставить("Название", "Не разобрано");
					СтруктураКолонки.Вставить("Сумма", "("+Выборка.Количество+")");
					//Элементы.ДекорацияНеРазобрано.Заголовок = "Не разобрано ("+Выборка.Количество+")";
				Иначе
					//СтруктураКолонки.Вставить("Название", "Не разобрано");
					СтруктураКолонки.Вставить("Сумма", "(0)");
					//Элементы.ДекорацияНеРазобрано.Заголовок = "Не разобрано (0)";
				КонецЕсли;
				СтруктураОбновления.Вставить("Этап_НеРазобрано", СтруктураКолонки);
			КонецЕсли;	
			СтрокаДопОтборов = "";
			Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
				Запрос.УстановитьПараметр("КаналПервичногоИнтереса", ПоискИсточникПривлечения);
				СтрокаДопОтборов = СтрокаДопОтборов +" ГДЕ
				|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса = &КаналПервичногоИнтереса
				|";
			КонецЕсли;	
			Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
				Запрос.УстановитьПараметр("ИсточникПервичногоИнтереса", ПоискЗначениеИсточникаПривлечения);
				СтрокаДопОтборов = СтрокаДопОтборов +" И ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса = &ИсточникПервичногоИнтереса
				|";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборКанал", СтрокаДопОтборов);	
			СтрокаДопОтборов = "";
			Если НЕ ПоискКлиент.Пустая() Тогда
				СтрокаДопОтборов = СтрокаДопОтборов +" И CRM_ОбъектыАРМ.Объект.Партнер = &Партнер
				|";
			КонецЕсли;	
			Если НЕ ПоискТипУслуги.Пустая() Тогда
				СтрокаДопОтборов = СтрокаДопОтборов +" И CRM_ОбъектыАРМ.Объект.ТипУслуги = &ТипУслуги
				|";
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтбор", СтрокаДопОтборов);
			//СтруктураКолонки = Новый Структура;
			//Если ЗначениеКолонки.Значение = "ТаблицаНеудачно" Тогда
			//	
				//СостояниеИнтереса = Новый СписокЗначений;
				//СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ИнтересПотерян);
				//Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтереса);
				//Выборка = Запрос.Выполнить().Выбрать();
				//Если Выборка.Следующий() Тогда
					//СтруктураКолонки.Вставить("Название", "Завершено неудачно");
					//СтруктураКолонки.Вставить("Сумма", "");
					//Элементы.ДекорацияНеудачно.Заголовок = "Завершено неудачно ("+Выборка.Количество+")";
					//Элементы.ДекорацияНеудачноСумма.Заголовок = ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление);
				//Иначе
				//	СтруктураКолонки.Вставить("Название", "Завершено неудачно (0)");
				//	СтруктураКолонки.Вставить("Сумма", "Нет интересов");
				//	//Элементы.ДекорацияНеудачно.Заголовок = "Завершено неудачно (0)";
				//	//Элементы.ДекорацияНеудачноСумма.Заголовок = "Нет интересов";
				//КонецЕсли;
				//СтруктураОбновления.Вставить("Этап_Неудачно", СтруктураКолонки);
			//КонецЕсли;
			//СтруктураКолонки = Новый Структура;
			//Если ЗначениеКолонки.Значение = "ТаблицаУспешно" Тогда
				
				//СостояниеИнтереса = Новый СписокЗначений;
				//СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
				//Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтереса);
				//Выборка = Запрос.Выполнить().Выбрать();
				//Если Выборка.Следующий() Тогда
					//СтруктураКолонки.Вставить("Название", "Завершено успешно");
					//СтруктураКолонки.Вставить("Сумма", "");
					//Элементы.ДекорацияУспешно.Заголовок = "Завершено успешно ("+Выборка.Количество+")";
					//Элементы.ДекорацияУспешноСумма.Заголовок = ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление);
				//Иначе
				//	СтруктураКолонки.Вставить("Название", "Завершено успешно (0)");
				//	СтруктураКолонки.Вставить("Сумма", "Нет интересов");
				//	//Элементы.ДекорацияУспешно.Заголовок = "Завершено успешно (0)";
				//	//Элементы.ДекорацияУспешноСумма.Заголовок = "Нет интересов";
				//КонецЕсли;
				//СтруктураОбновления.Вставить("Этап_Успешно", СтруктураКолонки);
			//КонецЕсли;
			
			Если ЗначениеКолонки.Значение <> "НеРазобрано" и ЗначениеКолонки.Значение <> "ТаблицаНеудачно" и ЗначениеКолонки.Значение <> "ТаблицаУспешно" Тогда
				СтруктураКолонки = Новый Структура;
				Этап = ПолучитьЭтапВоронки(ЗначениеКолонки.Значение);
				ИдентификаторЭтапа = СтрЗаменить(Строка(Этап.УникальныйИдентификатор()),"-","_");
			
				//ИдентификаторЭтапа = "Этап_"+ИдентификаторЭтапа;
				
				ИмяРеквизита = "Декорация_Этап_"+ИдентификаторЭтапа;
				ДекорацияНазвание = Элементы.Найти("Декорация_Этап_"+ИдентификаторЭтапа); 
				ДекорацияСумма = Элементы.Найти("ДекорацияСумма_Этап_"+ИдентификаторЭтапа); 
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Ссылка", Этап);
				Строка = ТаблицаЭтапы.НайтиСтроки(ПараметрыПоиска);
				
				Запрос.УстановитьПараметр("СостояниеИнтереса", Строка[0].СписокСостояний);
				
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтруктураКолонки.Вставить("Название", Этап.Наименование);
					СтруктураКолонки.Вставить("Сумма", ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление)+" ("+Выборка.Количество+")");
					//ДекорацияНазвание.Заголовок = Этап.Наименование+" ("+Выборка.Количество+")";
					//ДекорацияСумма.Заголовок =  ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление);
				Иначе
					СтруктураКолонки.Вставить("Название", Этап.Наименование);
					СтруктураКолонки.Вставить("Сумма", "Нет интересов");
					//ДекорацияНазвание.Заголовок = Этап.Наименование+" (0)";
					//ДекорацияСумма.Заголовок = "Нет интересов";
				КонецЕсли;
				СтруктураОбновления.Вставить("Этап_"+ИдентификаторЭтапа, СтруктураКолонки);
			КонецЕсли;	
		КонецЦикла;	
	Иначе	
		СостояниеИнтереса = Новый СписокЗначений;
		СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
		Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтереса);
		
		СтрокаДопОтборов = "";
		Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
			СтрокаДопОтборов = СтрокаДопОтборов +" И CRM_ОбъектыАРМ.Заголовок Подобно &СтрокаПоискаОтбор
			|";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборСтрока", СтрокаДопОтборов);
		Выборка = Запрос.Выполнить().Выбрать();
		СтруктураКолонки = Новый Структура;
		Если Выборка.Следующий() Тогда
			СтруктураКолонки.Вставить("Название", "Не разобрано");
			СтруктураКолонки.Вставить("Сумма", "("+Выборка.Количество+")");
			//ДекорацияНеРазобрано1 = "Не разобрано ("+Выборка.Количество+")";
			//Элементы.ДекорацияНеРазобрано.Заголовок = "Не разобрано ("+Выборка.Количество+")";
		Иначе
			//ДекорацияНеРазобрано1 = "Не разобрано (0)";
			//Элементы.ДекорацияНеРазобрано.Заголовок = "Не разобрано (0)";
			СтруктураКолонки.Вставить("Название", "Не разобрано");
			СтруктураКолонки.Вставить("Сумма", "(0)");
		КонецЕсли;
		СтруктураОбновления.Вставить("Этап_НеРазобрано", СтруктураКолонки);
		СтрокаДопОтборов = "";
		Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
			Запрос.УстановитьПараметр("КаналПервичногоИнтереса", ПоискИсточникПривлечения);
			СтрокаДопОтборов = СтрокаДопОтборов +" ГДЕ
			|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса = &КаналПервичногоИнтереса
			|";
		КонецЕсли;	
		Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
			Запрос.УстановитьПараметр("ИсточникПервичногоИнтереса", ПоискЗначениеИсточникаПривлечения);
			СтрокаДопОтборов = СтрокаДопОтборов +" И ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса = &ИсточникПервичногоИнтереса
			|";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборКанал", СтрокаДопОтборов);	
		СтрокаДопОтборов = "";
		Если НЕ ПоискКлиент.Пустая() Тогда
			СтрокаДопОтборов = СтрокаДопОтборов +" И CRM_ОбъектыАРМ.Объект.Партнер = &Партнер
			|";
		КонецЕсли;	
		Если НЕ ПоискТипУслуги.Пустая() Тогда
			СтрокаДопОтборов = СтрокаДопОтборов +" И CRM_ОбъектыАРМ.Объект.ТипУслуги = &ТипУслуги
			|";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтбор", СтрокаДопОтборов);
		//СостояниеИнтереса = Новый СписокЗначений;
		//СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ИнтересПотерян);
		//Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтереса);
		//Выборка = Запрос.Выполнить().Выбрать();
		//СтруктураКолонки = Новый Структура;
		//Если Выборка.Следующий() Тогда
		//	СтруктураКолонки.Вставить("Название", "Завершено неудачно ("+Выборка.Количество+")");
		//	СтруктураКолонки.Вставить("Сумма", ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление));
		//	//Элементы.ДекорацияНеудачно.Заголовок = "Завершено неудачно ("+Выборка.Количество+")";
		//	//Элементы.ДекорацияНеудачноСумма.Заголовок = ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление);
		//Иначе
			//Элементы.ДекорацияНеудачно.Заголовок = "Завершено неудачно (0)";
			//Элементы.ДекорацияНеудачноСумма.Заголовок = "Нет интересов";
			//СтруктураКолонки.Вставить("Название", "Завершено неудачно");
			//СтруктураКолонки.Вставить("Сумма", "");
		//КонецЕсли;
		//СтруктураОбновления.Вставить("Этап_Неудачно", СтруктураКолонки);
		//СостояниеИнтереса = Новый СписокЗначений;
		//СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
		//Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтереса);
		//Выборка = Запрос.Выполнить().Выбрать();
		//СтруктураКолонки = Новый Структура;
		//Если Выборка.Следующий() Тогда
		//	
		//	СтруктураКолонки.Вставить("Название", "Завершено успешно ("+Выборка.Количество+")");
		//	СтруктураКолонки.Вставить("Сумма", ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление));
		//	//Элементы.ДекорацияУспешно.Заголовок = "Завершено успешно ("+Выборка.Количество+")";
		//	//Элементы.ДекорацияУспешноСумма.Заголовок = ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление);
		//Иначе
			//Элементы.ДекорацияУспешно.Заголовок = "Завершено успешно (0)";
			//Элементы.ДекорацияУспешноСумма.Заголовок = "Нет интересов";
			//СтруктураКолонки.Вставить("Название", "Завершено успешно");
			//СтруктураКолонки.Вставить("Сумма", "");
		//КонецЕсли;
		//СтруктураОбновления.Вставить("Этап_Успешно", СтруктураКолонки);
		Для Каждого Строка Из ТаблицаЭтапы Цикл
			СтруктураКолонки = Новый Структура;
			ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()),"-","_");
			
			ИмяРеквизита = "Декорация_Этап_"+ИдентификаторЭтапа;
			ДекорацияНазвание = Элементы.Найти("Декорация_Этап_"+ИдентификаторЭтапа); 
			ДекорацияСумма = Элементы.Найти("ДекорацияСумма_Этап_"+ИдентификаторЭтапа); 
			
			
			Запрос.УстановитьПараметр("СостояниеИнтереса", Строка.СписокСостояний);
			
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураКолонки.Вставить("Название", Строка.Ссылка.Наименование);
					СтруктураКолонки.Вставить("Сумма", ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление)+" ("+Выборка.Количество+")");
				//ДекорацияНазвание.Заголовок = Строка.Ссылка.Наименование+" ("+Выборка.Количество+")";
				//ДекорацияСумма.Заголовок =  ?(Выборка.Сумма = NULL, "Нет интересов",Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление);
			Иначе
				СтруктураКолонки.Вставить("Название", Строка.Ссылка.Наименование);
				СтруктураКолонки.Вставить("Сумма", "Нет интересов"+" (0)");
				//ДекорацияНазвание.Заголовок = Строка.Ссылка.Наименование+" (0)";
				//ДекорацияСумма.Заголовок = "Нет интересов";
			КонецЕсли;	
			СтруктураОбновления.Вставить("Этап_"+ИдентификаторЭтапа, СтруктураКолонки);
		КонецЦикла;	
	КонецЕсли;	
	
	СтруктураОбновленияКолонок = СтруктураОбновления; 
	//Возврат СтруктураОбновления;
КонецПроцедуры	

&НаСервере
Процедура ДобавитьЭтапыВоронкиНаСервере()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ТаблицаСписок, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ТаблицаСписок, "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.НеРазобрано, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.НеРазобрано, "ПустаяДата", Дата('00010101'), Истина);

	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()),"-","_");
		
		ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
		Элемент = Элементы.Найти(ИмяРеквизита);
		
		Если Элемент = Неопределено Тогда
			МассивРеквизитов = Новый Массив;
			МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДинамическийСписок"),,"Поле таблицы"));
			ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
			
			ЭтотОбъект[ИмяРеквизита].ТекстЗапроса = "ВЫБРАТЬ
			|	CRM_ОбъектыАРМ.Объект,
			|	CRM_ОбъектыАРМ.Объект.КонтактноеЛицо КАК КонтактноеЛицо,
			|	ВЫБОР
			|		КОГДА CRM_ОбъектыАРМ.Объект.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|			ТОГДА CRM_ОбъектыАРМ.Объект.ПотенциальныйКлиент
			|		ИНАЧЕ CRM_ОбъектыАРМ.Объект.Партнер
			|	КОНЕЦ КАК Партнер,
			|	CRM_ОбъектыАРМ.НаименованиеАРМ,
			|	CRM_ОбъектыАРМ.ИзмерениеАРМ,
			|	CRM_ОбъектыАРМ.СостояниеИнтереса,
			|	CRM_ОбъектыАРМ.Пользователь,
			|	CRM_ОбъектыАРМ.Заголовок,
			|	ВЫБОР
			|		КОГДА CRM_ОбъектыАРМ.КрайнийСрок < &ПериодПросроченных
			|				И CRM_ОбъектыАРМ.КрайнийСрок > &ПустаяДата
			|			ТОГДА ВЫБОР
			|					КОГДА CRM_ОбъектыАРМ.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес)
			|						ТОГДА 1
			|					ИНАЧЕ 2
			|				КОНЕЦ
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК Просрочено,
			|	ВЫБОР
			|	КОГДА CRM_ОбъектыАРМ.КрайнийСрок < &ПериодПросроченных
			|			И CRM_ОбъектыАРМ.КрайнийСрок > &ПустаяДата
			|		ТОГДА 1
			|	ИНАЧЕ 2
			|	КОНЕЦ КАК ПросроченоДляСортировки,
			|	CRM_ОбъектыАРМ.ДатаДляСортировки,
			|	CRM_ОбъектыАРМ.День,
			|	CRM_ОбъектыАРМ.Время,
			|	CRM_ОбъектыАРМ.Избранный,
			|	CRM_ОбъектыАРМ.ОписаниеИнтереса,
			|	"""" КАК ПустаяЯчейка,
			|	CRM_ОбъектыАРМ.Объект.ТипУслуги КАК ТипУслуги,
			|	CRM_ОбъектыАРМ.КрайнийСрок,
			|	CRM_ОбъектыАРМ.КрайнийСрок КАК КрайнийСрокОкончание,
			|	ВложенныйЗапрос.ИсточникПервичногоИнтереса,
			|	ВложенныйЗапрос.КаналПервичногоИнтереса
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ИсточникиПервичногоИнтересаСрезПоследних.Период КАК Период,
			|			ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
			|			ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
			|			ИсточникиПервичногоИнтересаСрезПоследних.Сделка КАК Сделка
			|		ИЗ
			|			РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних КАК ИсточникиПервичногоИнтересаСрезПоследних) КАК ВложенныйЗапрос
			|		ПО CRM_ОбъектыАРМ.Объект = ВложенныйЗапрос.Сделка";
			ЭтотОбъект[ИмяРеквизита].ОсновнаяТаблица = "РегистрСведений.CRM_ОбъектыАРМ";
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "ПустаяДата", Дата('00010101'), Истина);
			УО = ЭтотОбъект[ИмяРеквизита].УсловноеОформление.Элементы;
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Избранный");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = Истина; //Жирный
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 211, 194));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 1; //красный
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 2; //желтый
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(191, 238, 191));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 3; //зеленый
			
	
			
			ГруппаЭлемент = Элементы.Добавить("Группа_"+ИмяРеквизита, Тип("ГруппаФормы"), Элементы.ГруппаСоставКолонок);
			ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
			ДекорацияНазвание = Элементы.Добавить("Декорация_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлемент);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияНазвание.Заголовок = Строка.Ссылка.Наименование;
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
			ДекорацияНазвание.Подсказка = Строка.Ссылка.Наименование;
			ДекорацияНазвание.Высота = 1;
			ДекорацияНазвание.РастягиватьПоГоризонтали = Истина;
			ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
			ДекорацияНазвание.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
			
			ДекорацияНазвание.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Истина);
			ДекорацияНазвание = Элементы.Добавить("ДекорацияСумма_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлемент);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияНазвание.Заголовок = Строка.Ссылка.Наименование;
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
			ДекорацияНазвание.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Истина);
			Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаЭлемент);
			
			Элемент.РежимВыделенияСтроки =РежимВыделенияСтрокиТаблицы.Строка;
			Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			Элемент.РежимВыбора = Истина;
			Элемент.ОтображениеСостоянияПросмотра.Видимость = Ложь;
			Элемент.ОтображениеСтрокиПоиска.Видимость = Ложь;
			Элемент.КоманднаяПанель.Видимость = Ложь;
			Элемент.ПутьКДанным = ИмяРеквизита;
			Элемент.РазрешитьПеретаскивание = Истина;
			Элемент.Видимость = Истина;
			Элемент.Шапка = Ложь;
			Элемент.ГоризонтальныеЛинии = Ложь;
			Элемент.ВертикальныеЛинии = Ложь;
			Элемент.УстановитьДействие("Выбор", "ТаблицаОбработкаВыбор");
			Элемент.УстановитьДействие("Перетаскивание", "ТаблицаОбработкаПеретаскивание");
			Элемент.УстановитьДействие("ПередУдалением", "ТаблицаОбработкаПередУдалением");
			Элемент.УстановитьДействие("НачалоПеретаскивания", "ТаблицаОбработкаНачалоПеретаскивания");
			Элемент.УстановитьДействие("ПроверкаПеретаскивания", "ТаблицаОбработкаПроверкаПеретаскивания");
			Элемент.УстановитьДействие("ПередНачаломДобавления", "НеРазобраноПередНачаломДобавления");
			Элемент.УстановитьДействие("ПриАктивизацииСтроки", "НеРазобраноПриАктивизацииСтроки");
			Элемент.Заголовок = Строка.Ссылка.Наименование;
			Элемент.КонтекстноеМеню.Видимость = Ложь;
			Элемент.ТолькоПросмотр = Истина;
			Элемент.Высота = 4;
			Элемент.РастягиватьПоВертикали = Истина;
			//Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
			//КолонкаКод = Элементы.Добавить("Объект" + ИмяРеквизита, Тип("ПолеФормы"), Элементы[ИмяРеквизита]);
			//КолонкаКод.Вид = ВидПоляФормы.ПолеВвода;
			//КолонкаКод.ПутьКДанным = ИмяРеквизита + ".Объект";
			//КолонкаНаименование = Элементы.Добавить("Пользователь" + ИмяРеквизита, Тип("ПолеФормы"), Элементы[ИмяРеквизита]);
			//КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			//КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Пользователь";
			ГруппаКолонок = Элементы.Добавить("ГруппаКолонок_" + ИмяРеквизита, Тип("ГруппаФормы"), Элементы[ИмяРеквизита]);
			ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.ОтображатьЗаголовок = Ложь;
			
			КолонкаНаименование = Элементы.Добавить("Заголовок" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Заголовок";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ГиперссылкаЯчейки = Истина;
			КолонкаНаименование.ЦветФона = WebЦвета.ДымчатоБелый;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Ложь,Ложь,Истина);
			КолонкаНаименование.ЦветТекста = WebЦвета.КоролевскиГолубой;
			
			//КолонкаНаименование = Элементы.Добавить("КонтактноеЛицо" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			//КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			//КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".КонтактноеЛицо";
			//КолонкаНаименование.ОтображатьВШапке = Ложь;
			//КолонкаНаименование.ЦветФона = WebЦвета.ДымчатоБелый;
			
			КолонкаНаименование = Элементы.Добавить("Партнер" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Партнер";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ЦветФона = WebЦвета.ДымчатоБелый;
			
			КолонкаНаименование = Элементы.Добавить("ОписаниеИнтереса" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ОписаниеИнтереса";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ЦветФона = WebЦвета.ДымчатоБелый;
			
			КолонкаНаименование = Элементы.Добавить("ПустаяЯчейка" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ПустаяЯчейка";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ЦветФона = WebЦвета.Белый;
		Иначе
			
			//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "ИзмерениеАРМ", Строка.Ссылка.Наименование, Истина);
			//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "СостояниеИнтереса", Строка.СписокСостояний, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "Пользователь", ТекущийПользователь, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита], "ПустаяДата", Дата('00010101'), Истина);
			Элемент = Элементы.Найти("Группа_"+ИмяРеквизита);
			Элемент.Видимость = Истина;
			//Элементы[ИмяРеквизита].Обновить();
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект["НеРазобрано"], "Пользователь", ТекущийПользователь, Истина);
	//Элементы.НеРазобрано.Обновить();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект["ТаблицаНеудачно"], "Пользователь", ТекущийПользователь, Истина);
	//Элементы.ТаблицаНеудачно.Обновить();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект["ТаблицаУспешно"], "Пользователь", ТекущийПользователь, Истина);
	//Элементы.ТаблицаУспешно.Обновить();
	//СформироватьЗаголовки();
	//ВывестиЗавершенные();
	// если реквизит создан ранее меняем его видимость на форме
КонецПроцедуры

&НаСервере
Процедура УдалитьЭтапыВоронкиНаСервере()
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()),"-","_");
		
		ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
		Элемент = Элементы.Найти("Группа_"+ИмяРеквизита);
		Если Элемент <> Неопределено Тогда
			
			Элемент.Видимость = Ложь;
			
		КонецЕсли;
	КонецЦикла;
	// если реквизит создан ранее меняем его видимость на форме
КонецПроцедуры

&НаСервере
Процедура ПользовательПриИзмененииНаСервере()
	Для Каждого ЭлементСпискаВиджетов Из СписокВиджетовПользователя Цикл
		тВиджет = ЭлементСпискаВиджетов.Значение;
		тИндекс = ЭлементСпискаВиджетов.Представление; 
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь 	= Пользователи.АвторизованныйПользователь();
		МенеджерЗаписи.Виджет 			= тВиджет;
		МенеджерЗаписи.ИндексВиджета 	= тИндекс;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ЗначениеАналитики = ТекущийПользователь;
			МенеджерЗаписи.Записать(Истина);
			CRM_РаботаСВиджетамиВызовСервера.ОбновитьТекущийВиджет(ЭтотОбъект, тИндекс);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ОбновитьОтборы();
	ПользовательПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВоронкаПродажПриИзмененииНаСервере()
	УдалитьЭтапыВоронкиНаСервере();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ВоронкиПродажСостав.Ссылка,
	|	Истина КАК Выведено
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
	|ГДЕ
	|	CRM_ВоронкиПродажСостав.Ссылка.Родитель = &ВоронкаПродаж
	|	И CRM_ВоронкиПродажСостав.ТочкаМаршрута ССЫЛКА Справочник.CRM_СостоянияИнтересов
	|	И НЕ CRM_ВоронкиПродажСостав.Ссылка.ПометкаУдаления
	|	И НЕ CRM_ВоронкиПродажСостав.ТочкаМаршрута.ПометкаУдаления
	|	И НЕ CRM_ВоронкиПродажСостав.ТочкаМаршрута = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт)
	|	И НЕ CRM_ВоронкиПродажСостав.ТочкаМаршрута = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересПотерян)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ВоронкиПродажСостав.Ссылка.РеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("ВоронкаПродаж", ВоронкаПродаж);
	ТаблицаЭтапы.Очистить();
	ТабВоронка = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлементВоронки Из ТабВоронка Цикл
		Стр = ТаблицаЭтапы.Добавить();
		Стр.Ссылка = ЭлементВоронки.Ссылка;
		Стр.Выведено = ЭлементВоронки.Выведено;
		Спс = Новый СписокЗначений;
		Для Каждого Строка Из ЭлементВоронки.Ссылка.Состав Цикл
			Спс.Добавить(Строка.ТочкаМаршрута);	
		КонецЦикла;	
		Стр.СписокСостояний = Спс;
	КонецЦикла;	
	ДобавитьЭтапыВоронкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВоронкаПродажПриИзменении(Элемент)
	Элементы.ГруппаСоставКолонок.Видимость = Ложь;
	ВоронкаПродажПриИзмененииНаСервере();
	ОбновитьОтборы();
	Элементы.ГруппаСоставКолонок.Видимость = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть АРМ ""Мои продажи"". Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		Если Отказ Тогда Возврат конецЕсли;
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ВоронкиПродажСостав.Ссылка.Родитель КАК Воронка
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
	|ГДЕ
	|	CRM_ВоронкиПродажСостав.ТочкаМаршрута ССЫЛКА Справочник.CRM_СостоянияИнтересов";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.Воронка.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Воронка); 
	КонецЦикла;
	ВоронкаИнтересы = Элементы.Воронка.СписокВыбора.НайтиПоЗначению(Справочники.CRM_ВоронкиПродаж.Интересы);
	Если ВоронкаИнтересы <> Неопределено Тогда
		ВоронкаПродаж = ВоронкаИнтересы.Значение;
	Иначе
		ВоронкаПродаж = ?(Элементы.Воронка.СписокВыбора.Количество() <> 0, Элементы.Воронка.СписокВыбора[0].Значение, Неопределено);
	КонецЕсли;
	
	СохраненныйСписокВиджетов = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ВиджетыПользователя");
	Если СохраненныйСписокВиджетов = Неопределено Тогда
		СписокВиджетовПользователя.Добавить(Справочники.CRM_Виджеты.Продажи, "01");
		СписокВиджетовПользователя.Добавить(Справочники.CRM_Виджеты.ПроведениеВстреч, "02");
		СписокВиджетовПользователя.Добавить(Справочники.CRM_Виджеты.Взаимодействия, "03")
	Иначе
		СписокВиджетовПользователя = СохраненныйСписокВиджетов;
	КонецЕсли;
	КоличествоВиджетовНаФорме = СписокВиджетовПользователя.Количество();
	CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты", Истина);
	ВидАРМ = "Канбан";
	ВидимостьВиджетов = ХранилищеОбщихНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПанельВиджетов");
	Элементы.ГруппаВиджеты.Видимость = ?(ВидимостьВиджетов <> Неопределено, ВидимостьВиджетов, Ложь);
	
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект, Истина);
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Элементы.ОтборТеги.Видимость = Ложь;
		Элементы.ЗначенияОтбораТеги.Видимость = Ложь;
	Иначе
		ОтборПодразделениеДляТегов = Пользователи.АвторизованныйПользователь().Подразделение;
		СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов, Истина));
		
		ОбновитьЗначенияОтбораТегов();
	КонецЕсли; 
	ОтбиратьОбъектыБезТегов = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ТаблицаСписок, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.ТаблицаСписок, "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.НеРазобрано, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.НеРазобрано, "ПустаяДата", Дата('00010101'), Истина);
	//ВоронкаПродажПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока)
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Объект", ВыбраннаяСтрока.Объект);
	Возврат СтруктураОбъекта;
КонецФункции


&НаКлиенте
Процедура ТаблицаОбработкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураСтроки = ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока);
	ПоказатьЗначение(,СтруктураСтроки.Объект);
КонецПроцедуры

&НаСервере
Функция ПолучитьЭтапВоронки(ИДЭтапа)
	Возврат Справочники.CRM_ВоронкиПродаж.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДЭтапа));
КонецФункции

&НаСервере
Функция ПолучитьОбъектЗаписи(ВыбраннаяСтрока)
	Возврат ВыбраннаяСтрока.Объект;
КонецФункции

&НаСервере
Функция ПолучитьСруктуруПереноса(ИДЭтапа, ВыбраннаяСтрока)
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Этап", ПолучитьЭтапВоронки(ИДЭтапа));
	СтруктураОбъекта.Вставить("Объект", ПолучитьОбъектЗаписи(ВыбраннаяСтрока));
	СтруктураОбъекта.Вставить("СостояниеИнтереса", ВыбраннаяСтрока.СостояниеИнтереса);
	Возврат СтруктураОбъекта;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСостоянияИнтересаПоВоронке(ЭтапВоронки)
	СписокСостояний = Новый СписокЗначений;
	Для Каждого СтрокаТЧ Из ЭтапВоронки.Состав Цикл
		Если ТипЗнч(СтрокаТЧ.ТочкаМаршрута) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
			СписокСостояний.Добавить(СтрокаТЧ.ТочкаМаршрута);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокСостояний;
КонецФункции

&НаКлиенте
Процедура ТаблицаОбработкаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда Возврат КонецЕсли;
	Если Найти(Элемент.Имя, "НеРазобрано") > 0 Тогда Возврат КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение[0];
	Иначе
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение;
	КонецЕсли;	
	ИДЭтапа = Элемент.Имя;
	ИДЭтапа = СтрЗаменить(ИДЭтапа, "Этап_",""); 
	ИДЭтапа = СтрЗаменить(ИДЭтапа, "_","-"); 
	Если ТекущийЭтап = "НеРазобрано" Тогда
		СписокСостояний = ПолучитьСостоянияИнтересаПоВоронке(ПолучитьЭтапВоронки(ИДЭтапа));
		ДополнительныеПараметры = Новый Структура("Ссылка, ТекущееИзмерение, НовоеИзмерение, НачалоПериода", ПолучитьОбъектЗаписи(ОбрабатываемаяЗапись), "Не разобрано", ПолучитьЭтапВоронки(ИДЭтапа), ТекущаяДата());
		Если СписокСостояний.Количество() > 1 Тогда
			ВыборСостоянияЗавершение = Новый ОписаниеОповещения("ВыборСостоянияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаВыбораСостояния", Новый Структура("СписокСостояний", СписокСостояний), ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,,ВыборСостоянияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли СписокСостояний.Количество() = 1 Тогда
			ВыборСостоянияЗавершение(СписокСостояний[0].Значение, ДополнительныеПараметры); 
		КонецЕсли;
		Возврат;
	Иначе	
		СтруктураЭтап = ПолучитьСруктуруПереноса(ИДЭтапа, ОбрабатываемаяЗапись);
		Задача = ПолучитьТекущуюЗадачуИнтереса(СтруктураЭтап);
		СписокСостояний = ?(ЗначениеЗаполнено(Задача), ПолучитьСписокСостоянийСервер(СтруктураЭтап.Объект, Задача), Неопределено);
		Если ИДЭтапа <> ТекущийЭтап Тогда
			Если ЗначениеЗаполнено(Задача) Тогда
				МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(Задача, , Истина);
				Если МассивОшибок.Количество() > 0 Тогда
					Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
					КонецЦикла;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			// Добавить открытие формы для перенаправления интереса.
			ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект, Новый Структура("Ссылка, ТекущееИзмерение, НовоеИзмерение, Период", СтруктураЭтап.Объект, ПолучитьЭтапВоронки(ТекущийЭтап), ПолучитьЭтапВоронки(ИДЭтапа), ТекущаяДата()));
			ПараметрыФормы = Новый Структура("Интерес, ЭтапВоронки, Задача, СписокСостояний", СтруктураЭтап.Объект, ПолучитьЭтапВоронки(ИДЭтапа), Задача, СписокСостояний);
			ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ПереносИнтересаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСостоянийСервер(Интерес, Задача)
	
	СписокСостояний = Новый СписокЗначений;
		
	РазрешеноПеремещатьЭтап			= Задача.БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
	РазрешеноДосрочноеЗавершение	= Задача.БизнесПроцесс.КартаМаршрута.РазрешеноДосрочноеЗавершение;
	
	НеФормируемЗадачи = Ложь;
	CRM_БизнесПроцессыСервер.ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
	
	СоответствиеЭтаповВариантам = Новый Соответствие;
	
	СписокЭтапов = Новый СписокЗначений;
	МассивЭтапов = Новый Массив;
	МассивЭтапов.Добавить(Задача.CRM_ТочкаМаршрута);
	
	МассивТочекЗавершения = Новый Массив;
	
	Если НЕ НеФормируемЗадачи ИЛИ РазрешеноПеремещатьЭтап Тогда
		
		СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
		
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
			ВариантВыполнения = 0;
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,ВариантВыполнения);
			Для Каждого СтруктураИсхточки ИЗ МассивИсходящихТочек Цикл
				СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
				МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
				Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
					МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ЭлементСписка ИЗ СтруктураВариантовВыполнения.СписокВариантов Цикл
				ВариантВыполнения = ЭлементСписка.Значение;
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,ВариантВыполнения);
				Для Каждого СтруктураИсхточки ИЗ МассивИсходящихТочек Цикл
					СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
					МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
						МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокЭтапов.ЗагрузитьЗначения(МассивЭтапов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",Интерес);
	Запрос.УстановитьПараметр("МассивЭтапов",МассивЭтапов);
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК Этап,
	|	ЕСТЬNULL(CRM_НастройкиЭтаповБизнесПроцессов.Состояние, ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)) КАК Состояние
	|ПОМЕСТИТЬ НастройкиЭтапов
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|		ПО CRM_БизнесПроцесс.Ссылка = CRM_НастройкиЭтаповБизнесПроцессов.Объект
	|ГДЕ
	|	CRM_БизнесПроцесс.Интерес = &Интерес
	|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления";
	Если НЕ РазрешеноПеремещатьЭтап Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута В(&МассивЭтапов)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_СостоянияИнтересов.Ссылка,
	|	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
	|	CRM_СостоянияИнтересов.Наименование,
	|	ЕСТЬNULL(НастройкиЭтапов.Этап, ЗНАЧЕНИЕ(Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка)) КАК Этап
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиЭтапов КАК НастройкиЭтапов
	|		ПО CRM_СостоянияИнтересов.Ссылка = НастройкиЭтапов.Состояние
	|ГДЕ
	|	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
	|	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Интерес)
	|	И НЕ НастройкиЭтапов.Этап ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВероятностьСделки";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Этап) Тогда
			
			Если СписокЭтапов.НайтиПоЗначению(Выборка.Этап) = Неопределено Тогда
				ВариантВыполнения=Неопределено;
				СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),Истина);
				СписокСостояний.Добавить(СтруктураСостояния, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%), "+ Выборка.Этап);
			Иначе
				ВариантВыполнения = СоответствиеЭтаповВариантам.Получить(Выборка.Этап);
				СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),(НеФормируемЗадачи И РазрешеноПеремещатьЭтап));
				СписокСостояний.Добавить(СтруктураСостояния, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%), "+ Выборка.Этап);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьНеудачныйВариант = Ложь;
	Для Каждого ТочкаЗавершения ИЗ МассивТочекЗавершения Цикл
		ВариантВыполнения	= СоответствиеЭтаповВариантам.Получить(ТочкаЗавершения);
		Состояние			= ?(ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
		Справочники.CRM_СостоянияИнтересов.ИнтересПотерян,
		Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
		СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,ТочкаЗавершения, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), (НеФормируемЗадачи И РазрешеноПеремещатьЭтап));
		СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "+ ТочкаЗавершения);
		Если НЕ ЕстьНеудачныйВариант Тогда
			ЕстьНеудачныйВариант = (ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
		КонецЕсли;
	КонецЦикла;
	
	Если РазрешеноПеремещатьЭтап Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец",Задача.БизнесПроцесс.КартаМаршрута);
		Запрос.УстановитьПараметр("НомерВерсии",Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
		Запрос.УстановитьПараметр("МассивЭтапов",МассивТочекЗавершения);
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
		|ГДЕ
		|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии";
		Если МассивТочекЗавершения.Количество() > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута В(&МассивЭтапов)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Завершение)";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВариантВыполнения	=Неопределено;
			Состояние			= ?(Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
			Справочники.CRM_СостоянияИнтересов.ИнтересПотерян,
			Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,Выборка.ТочкаМаршрута, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), Истина);
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "+ Выборка.ТочкаМаршрута);
			Если НЕ ЕстьНеудачныйВариант Тогда
				ЕстьНеудачныйВариант = (Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьНеудачныйВариант И РазрешеноДосрочноеЗавершение Тогда
			ВариантВыполнения	=Неопределено;
			Состояние			= Справочники.CRM_СостоянияИнтересов.ИнтересПотерян;
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние, Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка(), ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), Истина);
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), Досрочное завершение");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокСостояний;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущуюЗадачуИнтереса(СтруктураЭтап)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",СтруктураЭтап.Объект);
	Запрос.УстановитьПараметр("CRM_СостояниеИнтереса",СтруктураЭтап.СостояниеИнтереса);
	Запрос.УстановитьПараметр("Исполнитель", ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
	|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
	|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаОбработкаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда 
		Если ПараметрыПеретаскивания.Значение.Количество() > 1 Тогда
			Выполнение = Ложь;
		КонецЕсли;
	КонецЕсли;	
	Если Найти(Элемент.Имя, "НеРазобрано") > 0 Тогда               
		ТекущийЭтап = "НеРазобрано";
	Иначе 
		ИДЭтапа = Элемент.Имя;
		ИДЭтапа = СтрЗаменить(ИДЭтапа, "Этап_",""); 
		ИДЭтапа = СтрЗаменить(ИДЭтапа, "_","-");
		ТекущийЭтап = ИДЭтапа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура СкрытьОбъектВАРМ(Ссылка)
	Если Ссылка.Пустая() Тогда Возврат КонецЕсли;
	Об = Ссылка.ПолучитьОбъект();
	Об.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
	Об.CRM_СкрытьВАРМ = Истина;
	Об.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИнтересЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Успех Тогда
			Если ДополнительныеПараметры <> Неопределено Тогда
				Если ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок")
					ИЛИ ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
					СкрытьОбъектВАРМ(ДополнительныеПараметры.Ссылка);
				КонецЕсли;
				// перенести в другой статус
			КонецЕсли;
			//ОбновитьПланировщик();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
		КонецЕсли;
	КонецЕсли;
	//СпсТаблиц = Новый СписокЗначений;
	//СпсТаблиц.Добавить(ТекущийЭтап);
	//СпсТаблиц.Добавить(ИДЭтапа);
	
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Откуда, Куда)
	//Элементы["Таблица"+Откуда].Обновить();
	//Элементы["Таблица"+Куда].Обновить();
	//ОбновитьЗаголовкиТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьВиджеты" Тогда
		CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты");
	ИначеЕсли ИмяСобытия = "ОбновитьАРМ" Тогда
		ОбновитьТаблицы();
	ИначеЕсли ИмяСобытия = "ПослеЗаписиТега" Или ИмяСобытия = "ПослеЗаписиСегмента" Тогда
		ОбновитьЗначенияОтбораТегов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСостоянияЗавершение(СостояниеИнтереса, ДополнительныеПараметры) Экспорт
	Если СостояниеИнтереса <> Неопределено Тогда
		ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект, Новый Структура("Ссылка, ТекущееИзмерение, НовоеИзмерение, Период", ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ТекущееИзмерение, ДополнительныеПараметры.НовоеИзмерение, ДополнительныеПараметры.НачалоПериода));
		ПараметрыФормы = Новый Структура;
		Если ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			ПараметрыФормы.Вставить("ТелефонныйЗвонок", ДополнительныеПараметры.Ссылка);
			МассивСсылок = Новый Массив;
			ПараметрыФормы.Вставить("МассивСсылок",	МассивСсылок);		
			ПараметрыФормы.Вставить("НомерТелефона", CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Ссылка, "АбонентКакСвязаться"));
		ИначеЕсли ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СообщениеМессенджера", ДополнительныеПараметры.Ссылка);
		ИначеЕсли ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заявка", ДополнительныеПараметры.Ссылка);	
		Иначе
			ПараметрыФормы.Вставить("ПисьмоВходящее", ДополнительныеПараметры.Ссылка);
			ПараметрыФормы.Вставить("ПереданаТолькоСсылкаПисьма", Истина);
		КонецЕсли;
		ПараметрыФормы.Вставить("СостояниеИнтереса", СостояниеИнтереса);
		ПараметрыФормы.Вставить("УстановитьНовоеСостояниеИнтереса", Истина);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ПереносИнтересаЗавершение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПериодОбновленияВиджетаНаСервере(Виджет, Индекс)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь 	= ТекущийПользователь;
	МенеджерЗаписи.Виджет 			= Виджет;
	МенеджерЗаписи.ИндексВиджета 	= Индекс;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат ?(ЗначениеЗаполнено(МенеджерЗаписи.ПериодОбновления), МенеджерЗаписи.ПериодОбновления, 3600);
	Иначе
		Если Виджет.ИсточникДанных.КонтролируемыйПоказатель = "" Тогда
			Возврат 3600;
		Иначе	
			Возврат Виджет.ИсточникДанных.ПериодОбновления;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавитьВиджетЗавершениеНаСервере(Виджет)
	
	//Если Виджет = Неопределено ИЛИ (Виджет.ИсточникДанных.ТипПоказателя = Перечисления.bpmТипыПоказателей.Динамика И НЕ ЗначениеЗаполнено(Виджет.ИсточникДанных.ПлановыйПоказатель)) Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ИндексВиджета = Формат(СписокВиджетовПользователя.Количество()+1, "ЧЦ=2; ЧДЦ=; ЧВН=");
	НовыйЭлемент = СписокВиджетовПользователя.Добавить(Виджет, ИндексВиджета);
	CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты");
	КоличествоВиджетовНаФорме = СписокВиджетовПользователя.Количество();
	
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВиджетыПользователя", СписокВиджетовПользователя);
	
	// Записать в регистр настройки нового виджета по умолчанию.
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь 		= ТекущийПользователь;
	МенеджерЗаписи.Виджет 				= Виджет;
	МенеджерЗаписи.ИндексВиджета 		= ИндексВиджета;
	МенеджерЗаписи.ПериодОбновления 	= Виджет.ИсточникДанных.ПериодОбновления;
	МенеджерЗаписи.ТипАналитики 		= Перечисления.CRM_ВидыРазверткиПоказателей.Аналитика1;
	МенеджерЗаписи.ЗначениеАналитики 	= ТекущийПользователь;
	МенеджерЗаписи.Записать();
	
	Возврат Новый Структура("Виджет, ИндексВиджета, ПериодОбновленияВиджета", Виджет, ИндексВиджета, Виджет.ИсточникДанных.ПериодОбновления);
	
КонецФункции

// Открывает форму настройки виджета формы.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//   ИндексВиджета - Строка - индекс настраиваемого виджета в форме.
//
&НаСервере
Процедура УдалитьВиджетФормы(ИндексВиджета)
	
	тЭлемент = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетовПользователя, ИндексВиджета);
	
	Если тЭлемент <> Неопределено Тогда
		// Удаляем из регистра запись с настройками текущего виджета.
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь 		= ТекущийПользователь;
		МенеджерЗаписи.Виджет 				= тЭлемент.Значение;
		МенеджерЗаписи.ИндексВиджета 		= ИндексВиджета;
		МенеджерЗаписи.Удалить();
		
		СписокВиджетовПользователя.Удалить(тЭлемент);
		
		// Пересчет порядковых номеров.
		Для Сч = Число(ИндексВиджета) По СписокВиджетовПользователя.Количество() Цикл
			ЭлементСписка = СписокВиджетовПользователя[Сч-1];
			ЭлементСписка.Представление = Формат(Сч, "ЧЦ=2; ЧДЦ=; ЧВН=");
			МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь 		= ТекущийПользователь;
			МенеджерЗаписи.Виджет 				= ЭлементСписка.Значение;
			МенеджерЗаписи.ИндексВиджета 		= Формат(Сч+1, "ЧЦ=2; ЧДЦ=; ЧВН=");
			МенеджерЗаписи.Прочитать();
			Если ЗначениеЗаполнено(МенеджерЗаписи.Пользователь) Тогда
				МенеджерЗаписи.ИндексВиджета 	= Формат(Сч, "ЧЦ=2; ЧДЦ=; ЧВН=");
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		
		
		CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты");
		КоличествоВиджетовНаФорме = СписокВиджетовПользователя.Количество();
		
		CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВиджетыПользователя", СписокВиджетовПользователя);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает индекс текущего виджета по выделенному элементу форму.
// Если по выделенному элементу невозможно определить индекс виджета, то
// возвращается пустая строка.
//
&НаКлиенте
Функция ИндексТекущегоВиджета()
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ИндексТекущегоВиджета = Прав(ТекущийЭлемент.Имя,2);
	
	Возврат ИндексТекущегоВиджета;
	
КонецФункции

&НаСервере
Функция ПолучитьИсточникДанныхВиджета(Виджет)
	Возврат Виджет.ИсточникДанных;
КонецФункции


&НаКлиенте
Процедура Подключаемый_HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИндексВиджета = ИндексТекущегоВиджета();
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "УдалитьВиджет") Тогда
		УдалитьВиджетФормы(ИндексВиджета);
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "ОткрытьПоказатель") Тогда
		тЭлемент = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетовПользователя, ИндексВиджета);
		Если тЭлемент <> Неопределено Тогда
			ПоказатьЗначение( ,тЭлемент.Значение);
		КонецЕсли;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "НастройкаВиджета") Тогда
		тЭлемент = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетовПользователя, ИндексВиджета);
		Если тЭлемент <> Неопределено Тогда
			ОповещениеНастройкаВиджета = Новый ОписаниеОповещения("НастройкаВиджетаЗавершение", ЭтотОбъект, Новый Структура("Индекс", ИндексВиджета));
			ПараметрыФормы = Новый Структура("Виджет, ИндексВиджета", тЭлемент.Значение, тЭлемент.Представление);
			ОткрытьФорму("Справочник.CRM_Виджеты.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеНастройкаВиджета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Расшифровать") Тогда
		тЭлемент = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетовПользователя, ИндексВиджета);
		Если тЭлемент <> Неопределено Тогда
			Показатель = ПолучитьИсточникДанныхВиджета(тЭлемент.Значение);
			//МассивПользователей = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьМассивПользователей(Истина);
			ЗначениеАналитики = CRM_РаботаСВиджетамиВызовСервера.ПолучитьЗначениеАналитикиИзНастроекВиджета(тЭлемент.Значение, ИндексВиджета, ТекущийПользователь);
			Если ТипЗнч(ЗначениеАналитики) = Тип("СправочникСсылка.Пользователи") Тогда
				МассивПользователей = Новый Массив;
				МассивПользователей.Добавить(ЗначениеАналитики);
			Иначе
				МассивПользователей = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьМассивПользователей(Истина);
			КонецЕсли;			CRM_УправлениеЦелевымиПоказателямиКлиент.ОткрытьРасшифровкуПоказателя(Показатель, МассивПользователей);
		КонецЕсли;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Обновить") Тогда
		ОбновитьВиджетыНаСервере();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьНовыйВиджетНажатие(Элемент)
	Если КоличествоВиджетовНаФорме = 99 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавитьВиджетЗавершение", ЭтотОбъект);
	
	//ПараметрыФормы = Новый Структура("Виджеты, СписокОткрытыхВиджетов", Истина, СписокВиджетовПользователя.ВыгрузитьЗначения());
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокОткрытыхВиджетов", СписокВиджетовПользователя);
	ПараметрыФормы.Вставить("ФормаВиджеты", Истина);
	ОткрытьФорму("Справочник.CRM_Виджеты.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВиджетЗавершение(Виджет, ДополнительныеПараметры) Экспорт
	
	Если Виджет = Неопределено Тогда Возврат конецЕсли;
	ДанныеВиджета = ДобавитьВиджетЗавершениеНаСервере(Виджет);
	
	Если ДанныеВиджета <> Неопределено Тогда
		Если Число(ДанныеВиджета.ИндексВиджета) <= 4 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДанныеВиджета.ИндексВиджета, ДанныеВиджета.ПериодОбновленияВиджета);
		ИначеЕсли Число(ДанныеВиджета.ИндексВиджета) = 5 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_Прочие", 3600);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВиджетаЗавершение(НовыеНастройки, ДополнительныеПараметры) Экспорт
	
	Если НовыеНастройки <> Неопределено Тогда
		Если НовыеНастройки = Ложь Тогда
			УдалитьВиджетФормы(ДополнительныеПараметры.Индекс);
			Возврат;
		КонецЕсли;
		ОбновитьВиджетНаСервере(ДополнительныеПараметры.Индекс);
		Если Число(ДополнительныеПараметры.Индекс) <= 4 Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДополнительныеПараметры.Индекс);
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДополнительныеПараметры.Индекс, НовыеНастройки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_01()
	ОбновитьВиджетНаСервере("01");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_02()
	ОбновитьВиджетНаСервере("02");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_03()
	ОбновитьВиджетНаСервере("03");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_04()
	ОбновитьВиджетНаСервере("04");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_Прочие()
	ОбновитьВиджетНаСервере("Прочие");
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетНаСервере(ИндексВиджета)
	CRM_РаботаСВиджетамиВызовСервера.ОбновитьТекущийВиджет(ЭтотОбъект, ИндексВиджета);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетыНаСервере()
	CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьВиджеты(Команда)
	Элементы.ГруппаВиджеты.Видимость = НЕ Элементы.ГруппаВиджеты.Видимость;
	СохранитьНастройкуПоказыватьВиджеты(ЭтотОбъект.ИмяФормы, Элементы.ГруппаВиджеты.Видимость);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкуПоказыватьВиджеты(КлючОбъекта, Настройка)
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ПоказыватьПанельВиджетов", Настройка);  
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУспешноПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТекущийЭтап = "НеРазобрано" Тогда Возврат КонецЕсли;
	ФормаОбработки = "Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтересаЗавершенУспешно";
	ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Интерес, Задача", ПолучитьОбъектЗаписи(ПараметрыПеретаскивания.Значение), ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка"));
	ОткрытьФорму(ФормаОбработки, ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ПереносИнтересаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Возврат;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаНеудачноПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаНеудачноПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТекущийЭтап = "НеРазобрано" Тогда Возврат КонецЕсли;
	ФормаОбработки = "Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтересаЗавершенНеудачно";
	ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Интерес, Задача", ПолучитьОбъектЗаписи(ПараметрыПеретаскивания.Значение), ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка"));
	ОткрытьФорму(ФормаОбработки, ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ПереносИнтересаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Возврат;
КонецПроцедуры


&НаСервере
Процедура ПерезаполнитьАРМНаСервере()
	CRM_РаботаАРМСервер.ПервоначальноеЗаполнениеАРМ();
КонецПроцедуры


&НаКлиенте
Процедура ПерезаполнитьАРМ(Команда)
	ПерезаполнитьАРМНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВид(Команда)
	Если ВидАРМ = "Канбан" Тогда
		Элементы.ГруппаВоронка.Видимость = Истина;
		Элементы.ГруппаСписок.Видимость = Ложь;
	Иначе
		Элементы.ГруппаВоронка.Видимость = Ложь;
		Элементы.ГруппаСписок.Видимость = Истина;
	КонецЕсли;
	//Элементы.ГруппаАРМ.Видимость = (ВидАРМ = "СделатьСегодня");
	//Элементы.ГруппаСписок.Видимость = НЕ Элементы.ГруппаАРМ.Видимость;
	//ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура Анализ(Команда)
	ОткрытьФорму("Обработка.CRM_ВоронкаПродаж.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеОтборы(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборы(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериод(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияОтбораТегов()
	ОбновитьЗначенияОтбораТеговСервер(ОтборПодразделениеДляТегов, СписокВышестоящихПодразделений.ВыгрузитьЗначения());
КонецПроцедуры


&НаКлиенте
Процедура ОтборВключатьПросроченныеПриИзменении(Элемент)
	
	ОбновитьТаблицы("Просроченные");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для Каждого ЭлементСписка Из СписокВиджетовПользователя Цикл
		Если Число(ЭлементСписка.Представление) <= 4 Тогда
			ПериодОбновленияВиджета = ПолучитьПериодОбновленияВиджетаНаСервере(ЭлементСписка.Значение, ЭлементСписка.Представление);
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ЭлементСписка.Представление, ПериодОбновленияВиджета);
		ИначеЕсли Число(ЭлементСписка.Представление) = 5 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_Прочие", 3600);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ПоискКлиент, ПоискТипУслуги, ПоискИсточникПривлечения, ПоискЗначениеИсточникаПривлечения);
	
	Если НЕ ЗначениеЗаполнено(ВариантПериода) Тогда
		ВариантПериода = "Неделя"
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОтборВключатьПросроченные) Тогда
		ОтборВключатьПросроченные = 2;
	КонецЕсли;
	//ВоронкаПродажПриИзмененииНаСервере();
	//ОбработатьСменуПериодаОтбора(ВариантПериода, 1);
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	Элемент = 1;
	Период = ОтборСозданы[НомерПериода];
	ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
	Если Элемент<>Неопределено Тогда
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Не Период.Пометка;
		КонецЕсли;
		
		// Вариант периода может быть выбран только один.
		Для Индекс = 0 По ОтборСозданы.Количество()-1 Цикл
			
			ЭлементСпискаПериодов = ОтборСозданы[Индекс];
			Если ЭлементСпискаПериодов <> Период Тогда
				ЭлементСпискаПериодов.Пометка = Ложь;
			КонецЕсли;
			
			Если Индекс = 0 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыПроизвольныйПериод;
				Если НЕ ЭлементСпискаПериодов.Пометка Тогда
					ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
				КонецЕсли;
			ИначеЕсли Индекс = 1 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыСегодня;
			ИначеЕсли Индекс = 2 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗа3Дня;
			ИначеЕсли Индекс = 3 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаНеделю;
			ИначеЕсли Индекс = 4 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаМесяц;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭлементСпискаПериодов.Пометка Тогда
				Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
					ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
				КонецЕсли;
			Иначе
				ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
			КонецЕсли;
			
		КонецЦикла;
		
		CRM_ТегиКлиент.СформироватьЗаголовокВариантаОтбора(Элементы.ОтборПериод, 0);
		
	КонецЕсли;
	ПредставлениеПериода = ВариантПериода;
	ВоронкаПродажПриИзмененииНаСервере();
	ОбновитьОтборы();
	ОбновитьТаблицы();
	//ВоронкаПродажПриИзмененииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()


&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ПоискКлиент = Настройки.Получить("ПоискКлиент");
	Если ЗначениеЗаполнено(ПоискКлиент) Тогда
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ПоискКлиент, Истина);
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокЗавершенные, "Партнер", ПоискКлиент, Истина);
	Иначе	
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокЗавершенные, "Партнер");
	КонецЕсли;
	
	ПоискИсточникПривлечения = Настройки.Получить("ПоискИсточникПривлечения");
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ИсточникПривлечения", ПоискИсточникПривлечения, Истина);
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокЗавершенные, "ИсточникПривлечения", ПоискИсточникПривлечения, Истина);
	Иначе	
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ИсточникПривлечения");
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокЗавершенные, "ИсточникПривлечения");
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) И НЕ (ТипПВХ(ПоискИсточникПривлечения) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Истина;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Ложь;
	Иначе
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Ложь;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Истина;
	КонецЕсли;
	
	ПоискЗначениеИсточникаПривлечения = Настройки.Получить("ПоискЗначениеИсточникаПривлечения");
	Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ЗначениеИсточникаПривлечения", ПоискЗначениеИсточникаПривлечения, Истина);
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокЗавершенные, "ЗначениеИсточникаПривлечения", ПоискЗначениеИсточникаПривлечения, Истина);
	Иначе	
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ЗначениеИсточникаПривлечения");
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокЗавершенные, "ЗначениеИсточникаПривлечения");
	КонецЕсли;
	
	ПоискТипУслуги = Настройки.Получить("ПоискТипУслуги");
	Если ЗначениеЗаполнено(ПоискТипУслуги) Тогда
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипУслуги", ПоискТипУслуги, Истина);
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокЗавершенные, "ТипУслуги", ПоискТипУслуги, Истина);
	Иначе	
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипУслуги");
		//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокЗавершенные, "ТипУслуги");
	КонецЕсли;
	
	ВариантПериода = Настройки.Получить("ВариантПериода");
	ПериодОтбора =  Настройки.Получить("ПериодОтбора");
	ОтборСозданы[0].Значение = ПериодОтбора;
	
	ОтборВключатьПросроченные = Настройки.Получить("ОтборВключатьПросроченные");
	Если ВоронкаПродаж.Пустая() Тогда
		ВоронкаПродаж = Справочники.CRM_ВоронкиПродаж.Интересы;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТегОтборОчистить(Команда)
	Элемент = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Очистить");
	Пометка = ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент, Истина);	
	ОбновитьЗначенияОтбораТегов();
	ОбновитьОтборы("Тег");
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыСегодняНажатие(Элемент)
	ВариантПериода = "Сегодня";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	ВариантПериода = "3 дня";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	
	ВариантПериода = "Неделя";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	
	ВариантПериода = "Месяц";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	
	ВариантПериода = "ПроизвольныйПериод";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОчиститьНажатие(Элемент)
	ВариантПериода = "";
	
	
	Для Индекс = 0 По ЭтаФорма.ОтборСозданы.Количество()-1 Цикл
		
		ЭлементСпискаПериодов = ЭтаФорма.ОтборСозданы[Индекс];
		ЭлементСпискаПериодов.Пометка = Ложь;
		
		Если Индекс = 0 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыПроизвольныйПериод;
			ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
		ИначеЕсли Индекс = 1 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыСегодня;
		ИначеЕсли Индекс = 2 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗа3Дня;
		ИначеЕсли Индекс = 3 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗаНеделю;
		ИначеЕсли Индекс = 4 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗаМесяц;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСпискаПериодов.Пометка Тогда
			//ЭлементОтображенияПериода.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоЗначенияОтбора");
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
			
		Иначе
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	Период = ОтборСозданы[0];
	ПериодОтбора = ОтборСозданы[0].Значение;
	ПредставлениеПериода = ПредставлениеПериода(ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания, );
	ОбновитьОтборы();
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
	Результат = Ложь;
	
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	
	Период = ОтборСозданы[НомерПериода];
	ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
	Если Элемент<>Неопределено Тогда
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Не Период.Пометка;
		КонецЕсли;
		
		// Вариант периода может быть выбран только один.
		Для Индекс = 0 По ОтборСозданы.Количество()-1 Цикл
			
			ЭлементСпискаПериодов = ОтборСозданы[Индекс];
			Если ЭлементСпискаПериодов <> Период Тогда
				ЭлементСпискаПериодов.Пометка = Ложь;
			КонецЕсли;
			
			Если Индекс = 0 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыПроизвольныйПериод;
				Если НЕ ЭлементСпискаПериодов.Пометка Тогда
					ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
				КонецЕсли;
			ИначеЕсли Индекс = 1 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыСегодня;
			ИначеЕсли Индекс = 2 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗа3Дня;
			ИначеЕсли Индекс = 3 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаНеделю;
			ИначеЕсли Индекс = 4 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаМесяц;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭлементСпискаПериодов.Пометка Тогда
				Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
					ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
				КонецЕсли;
			Иначе
				ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
			КонецЕсли;
			
		КонецЦикла;
		
		CRM_ТегиКлиент.СформироватьЗаголовокВариантаОтбора(Элементы.ОтборПериод, 0);
		
	КонецЕсли;
	ПредставлениеПериода = ВариантПериода;  //КрайнийСрок
	ОбновитьОтборы("Период");
КонецПроцедуры


&НаКлиенте
Процедура ПоискКлиентПриИзменении(Элемент)
	ОбновитьОтборы("Клиент");	
КонецПроцедуры


&НаКлиенте
Процедура ПоискТипУслугиПриИзменении(Элемент)
	ОбновитьОтборы("ТипУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицы(ВидОтборов = "Все", СписокКолонок = Неопределено)
	Если ТипЗнч(СписокКолонок) = Тип("СписокЗначений") Тогда
		МассивТаблиц = Новый Массив;
		Для Каждого СтрЭтапа Из СписокКолонок Цикл
			Если СтрЭтапа.Значение = "НеРазобрано" или СтрЭтапа.Значение = "ТаблицаНеудачно" или СтрЭтапа.Значение = "ТаблицаУспешно" Тогда
				МассивТаблиц.Добавить(СтрЭтапа.Значение);
			Иначе
				ИдентификаторЭтапа = СтрЗаменить(СтрЭтапа.Значение,"-","_");
				
				ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
				МассивТаблиц.Добавить(ИмяРеквизита);
			КонецЕсли;	
		КонецЦикла;	
	Иначе	
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить("НеРазобрано");
		МассивТаблиц.Добавить("ТаблицаНеудачно");
		МассивТаблиц.Добавить("ТаблицаУспешно");
		МассивТаблиц.Добавить("ТаблицаСписок");
		
		Для Каждого Строка Из ТаблицаЭтапы Цикл
			ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()),"-","_");
			
			ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
			МассивТаблиц.Добавить(ИмяРеквизита);
		КонецЦикла;
	КонецЕсли;
	Если ВидОтборов = "Просроченные" или ВидОтборов = "Все" Тогда
		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			ЭлементыПользовательскихНастроек = ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
			Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
				Если ТипЗнч(Элемент) = ТипЗнч(ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.Настройки.Порядок) Тогда
					Элемент.Элементы.Очистить();
					Если ИмяТаблицы <> "НеРазобрано" И ИмяТаблицы <> "ТаблицаНеудачно" И ИмяТаблицы <> "ТаблицаУспешно" Тогда
						УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
						УсловиеСортировки.ТипУпорядочивания = ?(ОтборВключатьПросроченные = 2, НаправлениеСортировкиКомпоновкиДанных.Возр, НаправлениеСортировкиКомпоновкиДанных.Убыв);
						УсловиеСортировки.Использование = Истина;
					КонецЕсли;
					УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
					УсловиеСортировки.Использование = Истина;
					УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
					Если ИмяТаблицы = "НеРазобрано" или ИмяТаблицы = "ТаблицаУспешно" или ИмяТаблицы = "ТаблицаНеудачно" Тогда
						УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
					Иначе
						УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
					КонецЕсли;	
				КонецЕсли;    
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].Обновить();
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
	КонецЦикла;
	СформироватьЗаголовки(СписокКолонок);  
	ОбновитьКолонкиНаКлиенте(СтруктураОбновленияКолонок);
	СформироватьЗаголовок();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКолонкиНаКлиенте(СтруктураОбновления)
	Для Каждого ЭлементСтруктуры Из СтруктураОбновления Цикл
		//Элементы["Декорация_"+ЭлементСтруктуры.Ключ].Заголовок = ЭлементСтруктуры.Значение.Название;
		//Элементы["ДекорацияСумма_"+ЭлементСтруктуры.Ключ].Подсказка = ЭлементСтруктуры.Значение.Название;
		Элементы["ДекорацияСумма_"+ЭлементСтруктуры.Ключ].Заголовок = ЭлементСтруктуры.Значение.Сумма;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьОтборыНаСервере(ВидОтборов)
	МассивТаблиц = Новый СписокЗначений;
	МассивТаблиц.Добавить("НеРазобрано","НеРазобрано");
	МассивТаблиц.Добавить("ТаблицаНеудачно","ТаблицаНеудачно");
	МассивТаблиц.Добавить("ТаблицаУспешно","ТаблицаУспешно");
	МассивТаблиц.Добавить("ТаблицаСписок","ТаблицаСписок");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.НеРазобрано, "ОтображатьЗвонки", НЕ ОтображатьЗвонки, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект.НеРазобрано, "ОтображатьПисьма", НЕ ОтображатьПисьма, Истина);
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()),"-","_");
		
		ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
		МассивТаблиц.Добавить(Строка.СписокСостояний,ИмяРеквизита);
	КонецЦикла;
	Период = ОтборСозданы.НайтиПоЗначению(ПериодОтбора);
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Если ВидОтборов = "СтрокаПоиска" ИЛИ ВидОтборов = "Все" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "Заголовок", "%"+СтрокаПоискаОтбор+"%", ВидСравненияКомпоновкиДанных.Подобно, ,  ЗначениеЗаполнено(СтрокаПоискаОтбор), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
		КонецЕсли;	
		Если ВидОтборов = "Период" ИЛИ ВидОтборов = "Все" Тогда
			//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "КрайнийСрок", ПериодОтбора.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ,  Период.Пометка, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "КрайнийСрокОкончание", ПериодОтбора.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, , Период.Пометка, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		КонецЕсли;	
		Если ВидОтборов = "Все" Тогда
			//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Значение], "СостояниеИнтереса", ВоронкаПродаж, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "Пользователь", ТекущийПользователь, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		КонецЕсли;
		Если ИмяТаблицы.Представление <> "НеРазобрано" и ИмяТаблицы.Представление <> "ТаблицаНеудачно" и ИмяТаблицы.Представление <> "ТаблицаУспешно" и ИмяТаблицы.Представление <> "ТаблицаСписок" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "СостояниеИнтереса", ИмяТаблицы.Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		КонецЕсли;
		Если ИмяТаблицы.Представление <> "НеРазобрано" Тогда
			Если ВидОтборов = "Тег" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "Объект", СсылкиНаОбъектыСтегами, ВидСравненияКомпоновкиДанных.ВСписке, ,  ОтборВключен, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
			КонецЕсли;		
			Если ВидОтборов = "Клиент" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "Партнер", ПоискКлиент, ВидСравненияКомпоновкиДанных.Равно, ,  ЗначениеЗаполнено(ПоискКлиент), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
			КонецЕсли;	
			Если ВидОтборов = "ТипУслуги" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "ТипУслуги", ПоискТипУслуги, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ПоискТипУслуги), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			КонецЕсли;	
			Если ВидОтборов = "Источник" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "ИсточникПервичногоИнтереса", ПоискЗначениеИсточникаПривлечения, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			КонецЕсли;	
			Если ВидОтборов = "Канал" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление], "КаналПервичногоИнтереса", ПоискИсточникПривлечения, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ПоискИсточникПривлечения), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборы(ВидОтборов = "Все")
	ОбновитьОтборыНаСервере(ВидОтборов);
	СформироватьЗаголовки();  
	ОбновитьКолонкиНаКлиенте(СтруктураОбновленияКолонок);
	СформироватьЗаголовок();
	

	//ОбновитьТаблицы(ВидОтборов);
КонецПроцедуры	

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ОбновитьОтборы("СтрокаПоиска");
КонецПроцедуры

&НаКлиенте
Процедура ПоискИсточникПривлеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	ПоискИсточникПривлечения);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоискИсточникПривлеченияПриИзменении(Элемент)
	ПоискЗначениеИсточникаПривлечения = Неопределено;
	Элементы.ПоискЗначениеИсточникаПривлечения.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПоискИсточникПривлечения, "ТипЗначения"));
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) И НЕ (ТипПВХ(ПоискИсточникПривлечения) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Истина;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Ложь;
	Иначе
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Ложь;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Истина;
	КонецЕсли;
	ОбновитьОтборы("Канал");
КонецПроцедуры

&НаКлиенте
Процедура ПоискЗначениеИсточникаПривлеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
		Если ТипПВХ(ПоискИсточникПривлечения)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ПоискЗначениеИсточникаПривлечения);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			// ПОДЛЕЖИТ ИСПРАВЛЕНИЮ FEDL: вопрос так и не решили, по какому бизнес региону фильтровать.
			//Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			//	БизнесРегионПартнера			= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "БизнесРегион"); 
			//	Если ЗначениеЗаполнено(БизнесРегионПартнера) Тогда
			//		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			//		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_Регион");
			//		ЭлементОтбора.ПравоеЗначение	= БизнесРегионПартнера;
			//		ЭлементОтбора.Использование		= Истина;
			//	КонецЕсли;
			//КонецЕсли;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			//ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) И (ТипЗнч(ПоискЗначениеИсточникаПривлечения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПоискЗначениеИсточникаПривлечения, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.Партнеры") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			//ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);	
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.Пользователи") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			//ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискЗначениеИсточникаПривлеченияПриИзменении(Элемент)
	ОбновитьОтборы("Источник");
КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеДляТеговПриИзменении(Элемент)
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеДляТеговПриИзмененииНаСервере()
	СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов, Истина));	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияОтбораТеговСервер(Подразделение = Неопределено, СписокВышестоящийхПодразделений = Неопределено, ИспользоватьТегНет = Ложь)
	
	ЭтотОбъект.ОтборТеги.Очистить();
	
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы Цикл
		Если Лев(Элемент.Имя, 4) = "Тег_" Или Лев(Элемент.Имя, 11) = "СтрокаТегов" Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Теги.Ссылка,
		|	Теги.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА Теги.Владелец = &ПодразделениеПользователя
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.CRM_Теги КАК Теги
		|ГДЕ
		|	Теги.ПометкаУдаления = ЛОЖЬ
		|	И Теги.Владелец В(&СписокВышестоящийхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Представление";
		
	Запрос.УстановитьПараметр("ПодразделениеПользователя", Подразделение);
	Запрос.УстановитьПараметр("СписокВышестоящийхПодразделений", СписокВышестоящийхПодразделений);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 0;
	ТекущаяДлинаСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если СтрДлина(Выборка.Представление) > 15 Тогда
			ПредставлениеТега = Лев(Выборка.Представление, 15) + "...";
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + 15 + 2;
		Иначе
			ПредставлениеТега = Выборка.Представление;
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + СтрДлина(ПредставлениеТега) + 2;
		КонецЕсли;
		
		СтрокаОтбораТегов = ЭтотОбъект.ОтборТеги.Добавить(Выборка.Ссылка, ПредставлениеТега);
		
		Если НомерСтрокиЭлементов = 0 Или ТекущаяДлинаСтроки > 85 Тогда
			
			ТекущаяДлинаСтроки = СтрДлина(ПредставлениеТега) + 2;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаТегов = Элементы.Добавить("СтрокаТегов" + НомерСтрокиЭлементов, Тип("ГруппаФормы"), Элементы.ЗначенияОтбораТеги);
			ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаТегов.ОтображатьЗаголовок = Ложь;
			ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТегов.РастягиватьПоВертикали = Ложь;
			ГруппаТегов.Высота = 1;
			
		КонецЕсли;
		
		ЭлементТег = Элементы.Добавить("Тег_" + СтрокаОтбораТегов.ПолучитьИдентификатор(), Тип("ПолеФормы"), ГруппаТегов);
		ЭлементТег.Вид = ВидПоляФормы.ПолеНадписи;
		ЭлементТег.ПутьКДанным = "ОтборТеги[" + НомерЭлемента + "].Представление";
		ЭлементТег.Гиперссылка = Истина;
		ЭлементТег.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементТег.Подсказка = Выборка.Представление;
		ЭлементТег.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементТег.Ширина = СтрДлина(ПредставлениеТега);
		ЭлементТег.РастягиватьПоГоризонтали = Ложь;
		ЭлементТег.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");
		
		НомерЭлемента = НомерЭлемента + 1;
		
	КонецЦикла;
	
	Если ИспользоватьТегНет И НомерЭлемента > 0 Тогда
		ЭлементДляОтбораБезТегов = Элементы.Добавить("Тег_Нет", Тип("ДекорацияФормы"), Элементы.ЗначенияОтбораТеги);
		ЭлементДляОтбораБезТегов.Вид = ВидДекорацииФормы.Надпись;
		ЭлементДляОтбораБезТегов.Гиперссылка = Истина;
		ЭлементДляОтбораБезТегов.Заголовок = "[нет тегов]";
		ЭлементДляОтбораБезТегов.Видимость = Истина;
		ЭлементДляОтбораБезТегов.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ЭлементДляОтбораБезТегов.Ширина = 12;
		ЭлементДляОтбораБезТегов.Высота = 1;
		ЭлементДляОтбораБезТегов.РастягиватьПоГоризонтали = Ложь;	
		ЭлементДляОтбораБезТегов.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");	
	КонецЕсли; 
	
	ЭлементДляОчистки = Элементы.Добавить("Тег_Очистить", Тип("КнопкаФормы"), Элементы.ЗначенияОтбораТеги);
	ЭлементДляОчистки.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементДляОчистки.Картинка = БиблиотекаКартинок.Очистить;
	ЭлементДляОчистки.Отображение 	= ОтображениеКнопки.Картинка;
	ЭлементДляОчистки.ИмяКоманды = "ТегОтборОчистить";
	ЭлементДляОчистки.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	//ЭлементДляОчистки.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");
	
КонецПроцедуры

&НаКлиенте
Функция ТегОтборНажатие(ОбъектМетаданных, Форма, ИмяСписка, Элемент = Неопределено, СтандартнаяОбработка,
		ЗаписатьСсылкиВСписок = Ложь, СписокОбъектов = Неопределено,ОтбиратьПоТегам = Ложь,
		ОтбиратьОбъектыБезТегов = Ложь, СписокВышестоящихПодразделений = Неопределено)
	
	Если Элемент <> Неопределено Тогда	
		Если Лев(Элемент.Имя, 4) <> "Тег_" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	   	Если Элемент.Имя = "Тег_Очистить" Тогда
			Теги  = Новый Массив;
			
			// Не имеет значения ЭлементСписка для тега очистки, поэтому берем первый.
			//ЭлементСписка = Форма.ОтборТеги[0];
			ЭлементСписка = Неопределено;
			
			Элемент.Видимость = Ложь;
			
		// тег для отбора объектов без тега
		ИначеЕсли Элемент.Имя = "Тег_Нет" Тогда
			
			Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);		
			
			// не имеет значения ЭлементСписка для тега очистки, поэтому берем первый
			ЭлементСписка = Форма.ОтборТеги[0];
			
		// остальные теги	
		Иначе
			ТегИД = Сред(Элемент.Имя, 5);
			ЭлементСписка = Форма.ОтборТеги.НайтиПоИдентификатору(ТегИД);
			ЭлементСписка.Пометка = НЕ ЭлементСписка.Пометка;
			Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);
		КонецЕсли; 
	Иначе
		Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);
	КонецЕсли;
	
	//СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОтборТеги, Теги.Количество());
	
	Объекты = Новый Массив;
	//Если Теги.Количество() > 0  Тогда
	Если Теги.Количество() > 0 ИЛИ ОтбиратьОбъектыБезТегов Тогда
		Если ЗаписатьСсылкиВСписок Тогда
			СписокОбъектов.ЗагрузитьЗначения(CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам(ОбъектМетаданных, Теги, ОтбиратьОбъектыБезТегов, СписокВышестоящихПодразделений));
		Иначе
			СсылкиНаОбъектыСтегами.ЗагрузитьЗначения(CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам(ОбъектМетаданных, Теги));
		КонецЕсли;
		ОтборВключен = Истина;
	Иначе
		СсылкиНаОбъектыСтегами.Очистить();
		ОтборВключен = Ложь;
	КонецЕсли;
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма[ИмяСписка], "Ссылка", СсылкиНаОбъектыСтегами, ВидСравненияКомпоновкиДанных.ВСписке, , ОтборВключен);
	Если НЕ ЗаписатьСсылкиВСписок Тогда
		CRM_ТегиКлиент.СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОтборТеги, Теги.Количество());
	Иначе
		ОтбиратьПоТегам = ОтборВключен;
	КонецЕсли;
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭлементСписка.Пометка;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлементДляОчистки = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Очистить");	
	
	ЭлементДляОтбораБезТегов = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Нет");
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ОтбиратьОбъектыБезТегов = НЕ ОтбиратьОбъектыБезТегов;	
	КонецЕсли; 	
	
	Пометка = ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент, СтандартнаяОбработка);	
	//CRM_ТегиКлиент.ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "СписокЗавершенные", , СтандартнаяОбработка);	

	// Поведение при нажатии на кнопку очистки отборов по тегам.
	Если Элемент = ЭлементДляОчистки Тогда
		ОбновитьЗначенияОтбораТегов();
		ОбновитьОтборы();
		Возврат;
	КонецЕсли; 
	
	// Поведение при нажатии на кнопку отбора [нет тегов].
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ИзменитьЦветЭлементаСервер(ОтбиратьОбъектыБезТегов, ЭлементДляОтбораБезТегов.Имя);
		Если ОтбиратьОбъектыБезТегов Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 	
	
	Если НЕ Пометка = Неопределено И Элемент <> ЭлементДляОтбораБезТегов  Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
		Если Пометка Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	ОбновитьОтборы("Тег");
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЭлементаСервер(Пометка, ИмяЭлемента)
	CRM_Теги.ИзменитьЦветЭлементаОтбора(ЭтотОбъект, Пометка, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура СкрытьПисьмоИзАРМНаСервере(ЕстьЛиды, ПричинаОтказа=Неопределено, Комментарий="")
	Если Элементы.НеРазобрано.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого  ТекСтрока Из Элементы.НеРазобрано.ВыделенныеСтроки Цикл
			Если ТекСтрока <> Неопределено Тогда
				Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_Заявка") Тогда
					
					Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ТекСтрока.Объект) Тогда
						РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ТекСтрока.Объект, Справочники.CRM_СостоянияЛидов.Отклонен, ПричинаОтказа, Комментарий); 
					КонецЕсли;
					
					Об = ТекСтрока.Объект.ПолучитьОбъект();
					Об.CRM_СкрытьВАРМ = Истина;
					Об.Записать();
					
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЕстьЛидыВВыбранныхСтроках()
	МассивСсылок = Новый Массив;
	Для Каждого  ТекСтрока Из Элементы.НеРазобрано.ВыделенныеСтроки Цикл
		МассивСсылок.Добавить(ТекСтрока.Объект);
	КонецЦикла;
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЕстьЛидыВМассивеСсылок(МассивСсылок, Истина);
КонецФункции

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщик(Команда)
	ЕстьЛиды = ЕстьЛидыВВыбранныхСтроках();
	Если ЕстьЛиды Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкрытьПисьмоИзАРМПланировщикЗавершение", ЭтотОбъект, ЕстьЛиды);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		СкрытьПисьмоИзАРМНаСервере(ЕстьЛиды);
		ОбновитьТаблицы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщикЗавершение(Результат, ЕстьЛиды) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		СкрытьПисьмоИзАРМНаСервере(ЕстьЛиды, Результат.ПричинаОтказа, Результат.Комментарий);
		ОбновитьТаблицы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовок()
	Заголовок = НСтр("ru = 'Мои продажи'")+" / "+ ТекущийПользователь +" / " + ПредставлениеПериода; 
КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноПриАктивизацииСтроки(Элемент)
	МассивТаблиц = Новый Массив;
	Если Элемент.Имя <> "НеРазобрано" Тогда
	
		МассивТаблиц.Добавить("НеРазобрано");
	КонецЕсли;
	МассивТаблиц.Добавить("ТаблицаНеудачно");
	МассивТаблиц.Добавить("ТаблицаУспешно");
	МассивТаблиц.Добавить("ТаблицаСписок");
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()),"-","_");
		
		ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
		МассивТаблиц.Добавить(ИмяРеквизита);
	КонецЦикла;
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноПриАктивизацииЯчейки(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПисьмаПриИзменении(Элемент)
	ОбновитьОтборыНаСервере("Все");
	СформироватьЗаголовки();  
	ОбновитьКолонкиНаКлиенте(СтруктураОбновленияКолонок);
	СформироватьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗвонкиПриИзменении(Элемент)
	ОбновитьОтборыНаСервере("Все");
	СформироватьЗаголовки();  
	ОбновитьКолонкиНаКлиенте(СтруктураОбновленияКолонок);
	СформироватьЗаголовок();
КонецПроцедуры
