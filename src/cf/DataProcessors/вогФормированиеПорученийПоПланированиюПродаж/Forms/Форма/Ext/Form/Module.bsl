
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Подразделение 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь,
		"Подразделение",
		Истина);
	// +++ Кулаков П.Л. CRM-523
	НаправлениеДеятельности 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь,
		"CRM_НаправлениеДеятельности",
		Истина);
	СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаЦелыйГод;
	СценарийПланированияПриИзмененииНаСервере();
	// --- Кулаков П.Л.
	
	ИнициализироватьСхемуКомпоновки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоручения(Команда)
	//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848
	//Если Не ЗначениеЗаполнено(ПериодПланирования) Тогда
	Если Не ЗначениеЗаполнено(СценарийПланирования) Тогда
	//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000848	
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Сценарий планирования"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьПорученияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьСхемуКомпоновки()
	
	СхемаКомпоновкиДанных 		= Документы.вогПланПродаж.ПолучитьМакет("СхемаЗаполнения");
	АдресСхемыКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Для Каждого ПараметрСКД Из СхемаКомпоновкиДанных.Параметры Цикл
		ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
	КонецЦикла;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	НастройкиСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	
	СтатусТТ_УИН 	= Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8");
	СтатусТТ 		= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(СтатусТТ_УИН);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"СтатусТТ",
		СтатусТТ,
		ВидСравненияКомпоновкиДанных.НеРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); // ++ VOG Солодов В.В. 10.04.2020 CRM-549
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); // ++ VOG Солодов В.В. 10.04.2020 CRM-549
	
	// ++ VOG Солодов В.В. 08.04.2020 CRM-549
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"ТРТ.Розничный",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"Не розничный",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	// -- VOG Солодов В.В. 08.04.2020
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПорученияНаСервере()
	
	НастройкиКомпоновкиДанных 		= КомпоновщикНастроек.ПолучитьНастройки();
	АдресНастроекКомпоновкиДанных 	= 
		ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("АдресСхемыКомпоновкиДанных", 	АдресСхемыКомпоновкиДанных);
	СтруктураНастроек.Вставить("АдресНастроекКомпоновкиДанных", АдресНастроекКомпоновкиДанных);
	// ++ VOG Солодов В.В. 10.04.2020 CRM-549
	СтруктураНастроек.Вставить("НаправлениеДеятельности", 		НаправлениеДеятельности);
	// До изменения
	//СтруктураНастроек.Вставить("НаправлениеДеятельности", 		СценарийПланирования.НаправлениеДеятельности);
	// -- VOG Солодов В.В. 10.04.2020
	//Кайдашов 27/02/20
	СтруктураНастроек.Вставить("ПериодПланирования", 			ПериодПланирования);
	// ++ VOG Солодов В.В. 25.10.2019 
	//СтруктураНастроек.Вставить("ПериодПланирования", 			СценарийПланирования.ПериодПланирования);
	// -- VOG Солодов В.В. 25.10.2019
	
	ТаблицаРезультат = Документы.вогПланПродаж.ПолучитьРезультатВыполненияСКД(СтруктураНастроек);
	
	// ++ VOG Солодов В.В. 10.04.2020 CRM-549
	Если ТаблицаРезультат.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для планирования.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 10.04.2020
	
	МассивМенеджеров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаРезультат.ВыгрузитьКолонку("Менеджер"));
	
	Для Каждого ЭлементМенеджер Из МассивМенеджеров Цикл
		
		//ЕстьДокументПланирования = Ложь;
		
		РеквизитыШапки = Новый Структура;
		РеквизитыШапки.Вставить("Дата", 					ТекущаяДатаСеанса());
		//Кайдашов 27/02/20
		РеквизитыШапки.Вставить("НаправлениеДеятельности", 	НаправлениеДеятельности);
		РеквизитыШапки.Вставить("ПериодПланирования", 		ПериодПланирования);
		РеквизитыШапки.Вставить("СценарийПланирования",     СценарийПланирования);
		РеквизитыШапки.Вставить("ВерсияСценария",           ВерсияСценария);
		РеквизитыШапки.Вставить("ИдентификаторДокумента", 	Новый УникальныйИдентификатор());
		РеквизитыШапки.Вставить("Статус", 					Справочники.вогШаблоныСтатусов.Зарегистрирован);
		РеквизитыШапки.Вставить("Автор", 					ТекущийПользователь);
		РеквизитыШапки.Вставить("Ответственный", 			ЭлементМенеджер);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиКомпоновкиДанных.Отбор,
			"Менеджер",
			ЭлементМенеджер,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); // ++ VOG Солодов В.В. 10.04.2020 CRM-549
		
		РеквизитыШапки.Вставить("ХранилищеНастроекКомпоновкиДанных", Новый ХранилищеЗначения(НастройкиКомпоновкиДанных));
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		МассивСтрок = Новый Массив;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Менеджер", ЭлементМенеджер);
		
		НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаМенеджер Из НайденныеСтроки Цикл
			
			//Если СтрокаМенеджер.ЕстьДокументПланирования Тогда
			//	
			//	ЕстьДокументПланирования = Истина;
			//	ШаблонСообщения = НСтр("ru = 'Для менеджера %1 за указанный период ранее создавался документ План продаж.
			//	|Будет создан новый документ с торговыми точками, которые не попали в предыдущий документ План продаж.'");
			//	
			//	Продолжить;
			//	
			//КонецЕсли;
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Регион", 				СтрокаМенеджер.Регион);
			СтруктураСтроки.Вставить("МуниципальныйРайон", 	СтрокаМенеджер.МуниципальныйРайон);
			СтруктураСтроки.Вставить("НаселенныйПункт", 	СтрокаМенеджер.НаселенныйПункт);
			СтруктураСтроки.Вставить("Партнер", 			СтрокаМенеджер.Партнер);
			СтруктураСтроки.Вставить("ТРТ", 				СтрокаМенеджер.ТРТ);
			СтруктураСтроки.Вставить("Вид", 				СтрокаМенеджер.Вид);
			СтруктураСтроки.Вставить("СредняяЗаТекущийГод", СтрокаМенеджер.СредняяЗаТекущийГод);
			СтруктураСтроки.Вставить("СтатусТТ", 			СтрокаМенеджер.СтатусТТ);
			// ++ VOG Солодов В.В. 31.10.2019 
			СтруктураСтроки.Вставить("Бренд", 				СтрокаМенеджер.Бренд);
			// -- VOG Солодов В.В. 31.10.2019
			
			МассивСтрок.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		Если МассивСтрок.Количество() = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Для менеджера %1 за указанный период ранее создавался документ План продаж по всем торговым точкам.
			|Создать новый невозможно. Если требуется создать новый План продаж за указанный период,
			|то установите документу статус «Не согласован».'");
		КонецЕсли;
		
		//Если ЕстьДокументПланирования Тогда
		//	
		//	ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭлементМенеджер);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		//	
		//	Если МассивСтрок.Количество() = 0 Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Планирование", МассивСтрок);
		
		ДокументПланирование = Документы.вогПланПродаж.СоздатьДокумент();
		ДокументПланирование.Заполнить(ДанныеЗаполнения);
			
		Попытка
				
			НачатьТранзакцию();
			
			ДокументПланирование.Записать(РежимЗаписиДокумента.Запись);
			
			// Создание задач
			УстановитьПривилегированныйРежим(Истина);
			РезультатОбработки = Ложь;
			
			КартаМаршрута 									= Справочники.CRM_КартыМаршрутов.Поручение;
			СписокТочекСтарта 								= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
			Автор 											= Пользователи.ТекущийПользователь();
			
			БизнесПроцессОбъект 							= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			БизнесПроцессОбъект.Автор 						= Автор;
			БизнесПроцессОбъект.Дата 						= ТекущаяДата();
			БизнесПроцессОбъект.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			БизнесПроцессОбъект.Предмет 					= ДокументПланирование.Ссылка;
			БизнесПроцессОбъект.Ответственный 				= Автор;
			БизнесПроцессОбъект.Подразделение 				= Подразделение;
			БизнесПроцессОбъект.КартаМаршрута 				= КартаМаршрута;
			БизнесПроцессОбъект.ТочкаСтарта 				= СписокТочекСтарта[0].Значение;
			БизнесПроцессОбъект.ДатаСтарта 					= ТекущаяДата();
			БизнесПроцессОбъект.Наименование 				= СтрШаблон("%1 (%2)", КартаМаршрута, БизнесПроцессОбъект.Предмет);
			БизнесПроцессОбъект.вогДолжностнаяПозиция 		= Автор.CRM_ДолжностнаяПозиция;
			БизнесПроцессОбъект.НомерВерсииКартыМаршрута	= КартаМаршрута.НомерВерсии;
			БизнесПроцессОбъект.Описание 					= НСтр("ru = 'Необходимо заполнить и провести документ Планирования продаж.'");
			
			БизнесПроцессОбъект.Записать();
			
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
			НаборЭтапов.Прочитать();
			
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
			НаборИсполнителей.Прочитать();
			
			Для Каждого СтрокаНабора ИЗ НаборИсполнителей Цикл
				
				Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
					
					СтрокаНабора.Исполнитель 				= ЭлементМенеджер;
					НаборЭтапов[0].ДатаВыполнения 			= ТекущаяДата() + 432000; // 5 дней
					НаборЭтапов[0].ВариантВыполнения 		= 1;
					НаборЭтапов[0].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(
						НаборЭтапов[0].ТочкаМаршрута,
						НаборЭтапов[0].ВариантВыполнения,
						БизнесПроцессОбъект.НомерВерсииКартыМаршрута);
					
				ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
					
					НаборЭтапов[1].ДатаВыполнения 		= ТекущаяДата() + 518400; // 6 дней
					НаборЭтапов[1].Используется 		= Истина;
					СтрокаНабора.Исполнитель 			= Автор;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЭтапов.Записать();
			НаборИсполнителей.Записать();
			
			БизнесПроцессОбъект.Старт();
			
			ЗафиксироватьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Выдано поручение ""Планирование продаж"" для пользователя %1'");
			ТекстСообщения 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементМенеджер);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбновитьНумерациюОбъектов();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 
&НаКлиенте
Процедура СценарийПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//НаправлениеДеятельности = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "CRM_НаправлениеДеятельности");
	//Если ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
	//	СтандартнаяОбработка = ложь;
	//	ПараметрыОтбора = Новый Структура;
	//	ПараметрыОтбора.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
	//	
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	//	ОкончаниеВыбораСценария = Новый ОписаниеОповещения("ВыборСценарияЗавершение", ЭтотОбъект);
	//	ОткрытьФорму("Справочник.вогСценарииПланирования.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОкончаниеВыбораСценария);	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ВыборСценарияЗавершение(ВыбЗначение,ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбЗначение) Тогда
		СценарийПланирования = ВыбЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СценарийПланированияПриИзмененииНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогВерсииСценариевПланирования.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.вогВерсииСценариевПланирования КАК вогВерсииСценариевПланирования
	               |ГДЕ
	               |	вогВерсииСценариевПланирования.Владелец = &Владелец
	               |	И НЕ вогВерсииСценариевПланирования.ПометкаУдаления
	               |	И вогВерсииСценариевПланирования.Наименование = ""Основная""";
	Запрос.УстановитьПараметр("Владелец", СценарийПланирования);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ВерсияСценария = Выборка.Ссылка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПланированияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(СценарийПланирования) Тогда
		СценарийПланированияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000848
#КонецОбласти
