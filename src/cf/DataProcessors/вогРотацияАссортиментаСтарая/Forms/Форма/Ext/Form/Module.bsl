
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("БрендЗона") И ЗначениеЗаполнено(Параметры.БрендЗона) Тогда
		ЗаполнитьТаблицуСтендов(Параметры.БрендЗона);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	КоличествоТаблицСтендов = 0;
	Корзина = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьКартинкуИЗаголовокКорзины();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуИЗаголовокКорзины()
	
	КоличествоАртикулов = ТаблицаАртикуловДляУдаления.Количество();
	Если КоличествоАртикулов > 0 Тогда
		ИндексКартинки = 1;
	Иначе
		ИндексКартинки = 0;
	КонецЕсли;
	
	ЗаголовокКорзины = "Количество артикулов: " + КоличествоАртикулов;
	Элементы.Корзина.Заголовок = ЗаголовокКорзины;
	Корзина = ИндексКартинки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСтендов(БрендЗона)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтендыВБрендЗонахСрезПоследних.Стенд КАК Стенд,
		|	СтендыВБрендЗонахСрезПоследних.НомерСтендаВБрендЗоне КАК НомерСтенда,
		|	СтендыВБрендЗонахСрезПоследних.Стенд.ТипСтенда КАК ТипСтенда,
		|	СтендыВБрендЗонахСрезПоследних.Стенд.КоличествоМестНаСтенде КАК КоличествоМестНаСтенде
		|ИЗ
		|	РегистрСведений.СтендыВБрендЗонах.СрезПоследних(
		|			&Период,
		|			АктивныйСтенд
		|				И БрендЗона = &БрендЗона) КАК СтендыВБрендЗонахСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтенда";
	
	Запрос.УстановитьПараметр("БрендЗона", БрендЗона);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Стенды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);	
		Попытка
			НоваяСтрока.Порядок = Число(НоваяСтрока.НомерСтенда);
		Исключение
			НоваяСтрока.Порядок = 99;
		КонецПопытки;
	КонецЦикла;
	Стенды.Сортировать("Порядок");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиВТабличнуюЧасть(Таблица,Двустороний)
	
	ТаблицаРеквизитов = Объект.АртикулыНаСтендах.Выгрузить(,"Стенд, Позиция, Сторона, Артикул, Стиль, Статус, СтатусБренд, ПродажиКлиент");
	
	Для Каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
		
		НовыйРеквизит = Элементы.Добавить(Таблица.Имя + Колонка.Имя, Тип("ПолеФормы"), Таблица);
		НовыйРеквизит.Заголовок = Колонка.Имя;
		Если Колонка.Имя = "ПродажиКлиент" Тогда 
			НовыйРеквизит.Заголовок = "Sell out";
		КонецЕсли;
		НовыйРеквизит.Вид = ВидПоляФормы.ПолеВвода;
		НовыйРеквизит.ПутьКДанным = "Объект.АртикулыНаСтендах." + Колонка.Имя;
		Если НовыйРеквизит.Заголовок = "Стенд" ИЛИ НовыйРеквизит.Заголовок = "НомерСтенда" Тогда 
			НовыйРеквизит.Видимость = Ложь;
		КонецЕсли;
		
		Если НЕ Двустороний И НовыйРеквизит.Заголовок = "Сторона" Тогда
			НовыйРеквизит.Видимость = Ложь;
		КонецЕсли;
		
		Если НовыйРеквизит.Заголовок = "Позиция" Тогда
			НовыйРеквизит.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		
		Если НовыйРеквизит.Заголовок = "СтатусБренд" Тогда
			НовыйРеквизит.Заголовок = "Статус по бренду";
		КонецЕсли;
		
		Если НовыйРеквизит.Заголовок = "Статус" Тогда
			НовыйРеквизит.Заголовок = "Статус по холдингу";
		КонецЕсли;
		
		Если НовыйРеквизит.Заголовок = "Артикул" Тогда
		//	НовыйРеквизит.ТолькоПросмотр = Истина;
		//Иначе
			//НовыйРеквизит.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбора");
			
			//НовыйРеквизит.УстановитьДействие("НачалоВыбора", 	"Подключаемый_НачалоВыбора");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКолонкуСтороны(Стенд)
	
	Если Стенд.Двусторонний Тогда
		Элементы.АртикулыНаСтендахСторона.Видимость = Истина;
	Иначе
		Элементы.АртикулыНаСтендахСторона.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтендыФлагПриИзменении(Элемент)
	
	ПерерисоватьТаблицуАртикулов();
	
КонецПроцедуры

&НаСервере
Процедура ПерерисоватьТаблицуАртикулов()
	
	Для Каждого Строка Из Стенды Цикл
		УдалитьТаблицуАртикуловНаСтендах(Строка.Стенд);
	КонецЦикла;
	
	КоличествоТаблицСтендов = 0;
	
	Для Каждого Строка Из Стенды Цикл
		
		Если НЕ Строка.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьТаблицуАртикуловНаСтендах(Строка.Стенд,Строка.НомерСтенда);
		ЗаполнитьТаблицуАртикуловНаСтендах(Строка.Стенд,Строка.НомерСтенда);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТаблицуАртикуловНаСтендах(Стенд)
	
	ТаблицаФормы = Элементы.Найти("Стенд" + Стенд.Код);
	Если ТаблицаФормы <> Неопределено Тогда
		Элементы.Удалить(ТаблицаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуАртикуловНаСтендах(Стенд,НомерСтенда)
	
	ТаблицаФормы = Элементы.Найти("Стенд" + Стенд.Код);
	Если ТаблицаФормы <> Неопределено Тогда
		ТаблицаФормы.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	ГруппаСтендов = Элементы.Найти("ГруппаСтенд" + (Цел(КоличествоТаблицСтендов / 2) + 1));
	Если ГруппаСтендов = Неопределено И КоличествоТаблицСтендов % 2 = 0 Тогда
		ГруппаСтендов = Элементы.Добавить("ГруппаСтенд" + (КоличествоТаблицСтендов / 2 + 1),Тип("ГруппаФормы"),ЭтаФорма);
		ГруппаСтендов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтендов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаСтендов.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтендов.РастягиватьПоВертикали = Ложь;
	КонецЕсли; 
	
	ТаблицаСтенды = Элементы.Добавить("Стенд" + Стенд.Код,Тип("ТаблицаФормы"),ГруппаСтендов);
	ТаблицаСтенды.ПутьКДанным = "Объект.АртикулыНаСтендах";
	ТаблицаСтенды.Отображение = ОтображениеТаблицы.Список;
	ТаблицаСтенды.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ТаблицаСтенды.ИзменятьСоставСтрок = Ложь;
	ТаблицаСтенды.АвтоМаксимальнаяШирина = Ложь;
	ТаблицаСтенды.МаксимальнаяШирина = 84;
	ТаблицаСтенды.Ширина = 84;
	ТаблицаСтенды.Заголовок = "Стенд №" + НомерСтенда + " на " + Стенд.КоличествоМестНаСтенде + " SKU";
	Элементы["Стенд" + Стенд.Код + "КоманднаяПанель"].Видимость = Ложь;
	Элементы["Стенд" + Стенд.Код].ОтборСтрок = Новый ФиксированнаяСтруктура("Стенд",Стенд);
	ТаблицаСтенды.УстановитьДействие("ОкончаниеПеретаскивания", "Подключаемый_ОкончаниеПеретаскивания");
	ТаблицаСтенды.УстановитьДействие("Перетаскивание", "Подключаемый_Перетаскивание");
	ТаблицаСтенды.УстановитьДействие("Выбор", "Подключаемый_Выбор");
	ТаблицаСтенды.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбора");
	
	ДобавитьКолонкиВТабличнуюЧасть(ТаблицаСтенды,Стенд.Двусторонний);
	
	КоличествоТаблицСтендов = КоличествоТаблицСтендов + 1;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуАртикуловНаСтендах(Стенд,НомерСтенда)
	
	НайденныеСтроки = Объект.АртикулыНаСтендах.НайтиСтроки(Новый Структура("Стенд",Стенд));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(вогАртикулыНаСтендахСрезПоследних.Период) КАК Период
		|ПОМЕСТИТЬ вт_Период
		|ИЗ
		|	РегистрСведений.вогАртикулыНаСтендах.СрезПоследних(&Период, Стенд = &Стенд) КАК вогАртикулыНаСтендахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вогАртикулыНаСтендахСрезПоследних.Стенд КАК Стенд,
		|	вогАртикулыНаСтендахСрезПоследних.Сторона КАК Сторона,
		|	вогАртикулыНаСтендахСрезПоследних.Артикул КАК Артикул,
		|	вогНоменклатурныеПозиции.Дизайн.СтильРисункаОбои КАК Стиль,
		|	СтатусыНоменклатурныхПозицийОбоевСрезПоследних.СтатусПродажПоХолдингу КАК Статус,
		|	СтендыВБрендЗонахСрезПоследних.НомерСтендаВБрендЗоне КАК НомерСтенда,
		|	вогАртикулыНаСтендахСрезПоследних.Позиция КАК Позиция,
		|	вогАртикулыНаСтендахСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.вогАртикулыНаСтендах.СрезПоследних(&Период, Стенд = &Стенд) КАК вогАртикулыНаСтендахСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Период КАК вт_Период
		|		ПО вогАртикулыНаСтендахСрезПоследних.Период = вт_Период.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНоменклатурныеПозиции КАК вогНоменклатурныеПозиции
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатурныхПозицийОбоев.СрезПоследних(&Период, ) КАК СтатусыНоменклатурныхПозицийОбоевСрезПоследних
		|			ПО (СтатусыНоменклатурныхПозицийОбоевСрезПоследних.НоменклатурнаяПозиция = вогНоменклатурныеПозиции.Ссылка)
		|		ПО вогАртикулыНаСтендахСрезПоследних.Артикул.НоменклатурнаяПозиция = вогНоменклатурныеПозиции.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтендыВБрендЗонах.СрезПоследних(&Период, Стенд = &Стенд) КАК СтендыВБрендЗонахСрезПоследних
		|		ПО вогАртикулыНаСтендахСрезПоследних.Стенд = СтендыВБрендЗонахСрезПоследних.Стенд";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Стенд", Стенд);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	КоличествоСтендов = РезультатЗапроса.Количество();
	
	ТаблицаЗначений = Объект.АртикулыНаСтендах.Выгрузить();
	ТаблицаЗначений.Очистить();
	
	МассивОтсутствующихПозиций = Новый Массив;
	Для Индекс = 1 По Стенд.КоличествоМестНаСтенде Цикл
		НайденнаяСтрока = РезультатЗапроса.Найти(Индекс,"Позиция");
		Если НайденнаяСтрока <> Неопределено Тогда
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
		Иначе
			МассивОтсутствующихПозиций.Добавить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если Стенд.Двусторонний Тогда
		Если Стенд.КоличествоМестНаСтенде <> 0 Тогда
			НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Стенд,Сторона",Стенд,Перечисления.вогСтороныСтендов.СторонаА));
			НомерСтроки = 0;
			Для Индекс = НайденныеСтроки.Количество() По Стенд.КоличествоМестНаСтенде / 2 - 1 Цикл
				НоваяСтрока = ТаблицаЗначений.Вставить(МассивОтсутствующихПозиций[НомерСтроки]);
				НоваяСтрока.Стенд = Стенд;
				НоваяСтрока.НомерСтенда = НомерСтенда;
				НоваяСтрока.Сторона = Перечисления.вогСтороныСтендов.СторонаА;
				НоваяСтрока.Позиция = МассивОтсутствующихПозиций[НомерСтроки];
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
			НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Стенд,Сторона",Стенд,Перечисления.вогСтороныСтендов.СторонаБ));
			Для Индекс = НайденныеСтроки.Количество() По Стенд.КоличествоМестНаСтенде / 2 - 1 Цикл
				НоваяСтрока = ТаблицаЗначений.Вставить(МассивОтсутствующихПозиций[НомерСтроки]);
				НоваяСтрока.Стенд = Стенд;
				НоваяСтрока.НомерСтенда = НомерСтенда;
				НоваяСтрока.Сторона = Перечисления.вогСтороныСтендов.СторонаБ;
				НоваяСтрока.Позиция = МассивОтсутствующихПозиций[НомерСтроки];
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Для Каждого Индекс Из МассивОтсутствующихПозиций Цикл
			НоваяСтрока = ТаблицаЗначений.Вставить(Индекс-1);
			НоваяСтрока.Стенд = Стенд;
			НоваяСтрока.НомерСтенда = НомерСтенда;
			НоваяСтрока.Сторона = Перечисления.вогСтороныСтендов.СторонаА;
			НоваяСтрока.Позиция = Индекс;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Объект.АртикулыНаСтендах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АртикулыНаСтендахАртикулПриИзмененииНаСервере(НомерСтроки)
	
	Артикул = Объект.АртикулыНаСтендах[НомерСтроки].Артикул;
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
				"ВЫБРАТЬ
				|	вогНоменклатурныеПозиции.Дизайн.СтильРисункаОбои КАК Стиль,
				|	Номенклатура.Ссылка КАК Артикул,
				|	СтатусыНоменклатурныхПозицийОбоевСрезПоследних.СтатусПродажПоХолдингу КАК Статус,
				|	СтатусыНоменклатурныхПозицийОбоевСрезПоследних.СтатусПродажПоБренду КАК СтатусБренд
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНоменклатурныеПозиции КАК вогНоменклатурныеПозиции
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатурныхПозицийОбоев.СрезПоследних(, ) КАК СтатусыНоменклатурныхПозицийОбоевСрезПоследних
				|			ПО вогНоменклатурныеПозиции.Ссылка = СтатусыНоменклатурныхПозицийОбоевСрезПоследних.НоменклатурнаяПозиция
				|		ПО Номенклатура.НоменклатурнаяПозиция = вогНоменклатурныеПозиции.Ссылка
				|ГДЕ
				|	Номенклатура.Ссылка = &Артикул";
		
		Запрос.УстановитьПараметр("Артикул", Артикул);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			Объект.АртикулыНаСтендах[НомерСтроки].Стиль = ВыборкаДетальныеЗаписи.Стиль;
			Объект.АртикулыНаСтендах[НомерСтроки].Статус = ВыборкаДетальныеЗаписи.Статус;
			Объект.АртикулыНаСтендах[НомерСтроки].СтатусБренд = ВыборкаДетальныеЗаписи.СтатусБренд;
		КонецЕсли;;
		
	КонецЕсли;
	
	//Объект.АртикулыНаСтендах.Сортировать("НомерСтроки");
	
КонецПроцедуры

&НаКлиенте
Процедура АртикулыНаСтендахАртикулПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АртикулыНаСтендах.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	АртикулыНаСтендахАртикулПриИзмененииНаСервере(ТекущиеДанные.НомерСтроки - 1);
	
КонецПроцедуры

&НаКлиенте                                                                  
Процедура СтендыБуферОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(СтрокаТаблицы) = Тип("ДанныеФормыЭлементКоллекции")
					И СтрокаТаблицы.Свойство("Стенд") 
					И СтрокаТаблицы.Свойство("Артикул") Тогда
				СтандартнаяОбработка = Ложь;
				СтендыБуфер.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтендыБуферПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда 
		Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(СтрокаТаблицы) = Тип("ДанныеФормыЭлементКоллекции")
					И СтрокаТаблицы.Свойство("Стенд") 
					И СтрокаТаблицы.Свойство("Артикул") Тогда
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Артикул) Тогда 
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = СтендыБуфер.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда 
		ПерваяСтрока = Истина;
		Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(СтрокаТаблицы) = Тип("ДанныеФормыЭлементКоллекции")
					И СтрокаТаблицы.Свойство("Артикул") Тогда
				Если ПерваяСтрока Тогда
					СтрокаЗаполнения = Объект.АртикулыНаСтендах.НайтиПоИдентификатору(Строка);
					НомерСтроки = СтрокаЗаполнения.НомерСтроки-1;
					ИсходныйНомерСтроки = СтрокаЗаполнения.НомерСтроки-1;
					ПерваяСтрока = Ложь;
					Стенд = СтрокаЗаполнения.Стенд;
				Иначе
					СтрокаЗаполнения = Неопределено;
					Пока СтрокаЗаполнения = Неопределено И НомерСтроки < Объект.АртикулыНаСтендах.Количество() Цикл
						НомерСтроки = НомерСтроки + 1;
						Если НомерСтроки = Объект.АртикулыНаСтендах.Количество() Тогда
							Для Индекс = 0 По ИсходныйНомерСтроки Цикл 
								СтрокаЗаполнения = Объект.АртикулыНаСтендах[Индекс];
								Если НЕ ЗначениеЗаполнено(СтрокаЗаполнения.Артикул) И СтрокаЗаполнения.Стенд = Стенд Тогда
									СтрокаЗаполнения = Объект.АртикулыНаСтендах[Индекс];
									Прервать;
								Иначе
									СтрокаЗаполнения = Неопределено;
								КонецЕсли;
							КонецЦикла;
						Иначе
							СтрокаЗаполнения = Объект.АртикулыНаСтендах[НомерСтроки];
						КонецЕсли;
						
						Если СтрокаЗаполнения <> Неопределено И (ЗначениеЗаполнено(СтрокаЗаполнения.Артикул) ИЛИ СтрокаЗаполнения.Стенд <> Стенд) Тогда
							СтрокаЗаполнения = Неопределено;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СтрокаЗаполнения = Неопределено Тогда
					Прервать;
				Иначе
					Если СтрокаТаблицы.Свойство("Сторона") Тогда
						ЗаполнитьЗначенияСвойств(СтрокаЗаполнения,СтрокаТаблицы,,"Стенд,Сторона,НомерСтенда,Позиция");
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаЗаполнения,СтрокаТаблицы,,"Стенд,НомерСтенда");
					КонецЕсли;
					Если НЕ СтрокаТаблицы.Свойство("Стиль") ИЛИ НЕ СтрокаТаблицы.Свойство("Статус") Тогда
						АртикулыНаСтендахАртикулПриИзмененииНаСервере(СтрокаЗаполнения.НомерСтроки-1);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТаблицы) = Тип("Число") Тогда
				СтрокаЗаполнения = Объект.АртикулыНаСтендах.НайтиПоИдентификатору(Строка);
				СтрокаИсточник = Объект.АртикулыНаСтендах.НайтиПоИдентификатору(СтрокаТаблицы);
				Если ЗначениеЗаполнено(СтрокаЗаполнения.Артикул) Тогда
					НоваяСтрока = СтендыБуфер.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗаполнения);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаЗаполнения,СтрокаИсточник,,"Стенд,Сторона,НомерСтенда,Позиция");
				Если НЕ СтрокаИсточник.Свойство("Стиль") ИЛИ НЕ СтрокаИсточник.Свойство("Статус") Тогда
					АртикулыНаСтендахАртикулПриИзмененииНаСервере(СтрокаЗаполнения.НомерСтроки-1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(СтрокаТаблицы) = Тип("ДанныеФормыЭлементКоллекции") 
					И СтрокаТаблицы.Свойство("Артикул") Тогда
				СтрокаТаблицы.Стиль = ПредопределенноеЗначение("Справочник.вогСтилиРисункаОбоев.ПустаяСсылка");
				СтрокаТаблицы.Статус = ПредопределенноеЗначение("Перечисление.СтатусыABC.ПустаяСсылка");
				СтрокаТаблицы.СтатусБренд = ПредопределенноеЗначение("Перечисление.СтатусыABC.ПустаяСсылка");
				СтрокаТаблицы.ПродажиКлиент = "";
				СтрокаТаблицы.Артикул = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если СтендыБуфер.Количество() > 0 Тогда 
		Сообщить("Таблица буфера должна быть пустая");
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	Период = ТекущаяДата();
	ТаблицаСтендов = Объект.АртикулыНаСтендах.Выгрузить(,"Стенд");
	ТаблицаСтендов.Свернуть("Стенд");
	Для Каждого СтрокаСтенда Из ТаблицаСтендов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСтенда.Стенд) Тогда
			Продолжить;
		КонецЕсли;

		НаборЗаписи = РегистрыСведений.вогАртикулыНаСтендах.СоздатьНаборЗаписей();
		НаборЗаписи.Отбор.Период.Установить(НачалоДня(Период));
		НаборЗаписи.Отбор.Стенд.Установить(СтрокаСтенда.Стенд);
		НаборЗаписи.Прочитать();
		НаборЗаписи.Очистить();
		
		НайденныеСтроки = Объект.АртикулыНаСтендах.НайтиСтроки(Новый Структура("Стенд",СтрокаСтенда.Стенд));
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(Строка.Артикул) Тогда
				НоваяЗапись = НаборЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись,Строка);
				НоваяЗапись.Период = Период;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда 
		СтандартнаяОбработка = Ложь;
		ПерваяСтрока = Истина;
		Для Каждого Артикул Из ВыбранноеЗначение Цикл
			Если ПерваяСтрока Тогда
				СтрокаЗаполнения = Элемент.ТекущиеДанные;
				НомерСтроки = Элемент.ТекущиеДанные.НомерСтроки - 1;
				ИсходныйНомерСтроки = Элемент.ТекущиеДанные.НомерСтроки - 1;
				ПерваяСтрока = Ложь;
				Стенд = Элемент.ТекущиеДанные.Стенд;
			Иначе
				СтрокаЗаполнения = Неопределено;
				Пока СтрокаЗаполнения = Неопределено И НомерСтроки < Объект.АртикулыНаСтендах.Количество() Цикл
					НомерСтроки = НомерСтроки + 1;
					Если НомерСтроки = Объект.АртикулыНаСтендах.Количество() Тогда
						Для Индекс = 0 По ИсходныйНомерСтроки Цикл 
							СтрокаЗаполнения = Объект.АртикулыНаСтендах[Индекс];
							Если НЕ ЗначениеЗаполнено(СтрокаЗаполнения.Артикул) И СтрокаЗаполнения.Стенд = Стенд Тогда
								СтрокаЗаполнения = Объект.АртикулыНаСтендах[Индекс];
								Прервать;
							Иначе
								СтрокаЗаполнения = Неопределено;
								Продолжить;
							КонецЕсли;
						КонецЦикла;
					Иначе
						СтрокаЗаполнения = Объект.АртикулыНаСтендах[НомерСтроки];
					КонецЕсли;
					
					Если СтрокаЗаполнения <> Неопределено И (ЗначениеЗаполнено(СтрокаЗаполнения.Артикул) ИЛИ СтрокаЗаполнения.Стенд <> Стенд) Тогда
						СтрокаЗаполнения = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаЗаполнения = Неопределено Тогда
				Прервать;
			Иначе
				СтрокаЗаполнения.Артикул = Артикул;
				АртикулыНаСтендахАртикулПриИзмененииНаСервере(СтрокаЗаполнения.НомерСтроки-1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	ПараметрыФормы.Вставить("РежимВыбора"		,Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр"	,Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
	ПараметрыФормы.Вставить("Ротация"			,Истина);
	
	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаВыбора",
		ПараметрыФормы,
		Элемент,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			НоваяСтрока = ТаблицаАртикуловДляУдаления.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		КонецЦикла;
		УстановитьКартинкуИЗаголовокКорзины();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТаблицаАртикуловДляУдаления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СписокАртикулов = Новый Массив;
	Для Каждого Строка Из ТаблицаАртикуловДляУдаления Цикл
		СтруктураСтроки = Новый Структура("Стенд,Артикул,НомерСтенда");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,Строка);
		СписокАртикулов.Добавить(СтруктураСтроки);
	КонецЦикла;
	ПараметрыФормы = Новый Структура("СписокАртикулов",СписокАртикулов);
	ОткрытьФорму("Обработка.вогРотацияАссортимента.Форма.ФормаРедактированияКорзины",ПараметрыФормы,ЭтаФорма,,,, Новый ОписаниеОповещения("КорзинаНажатиеЗавершение", ЭтаФорма),  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Свойство("СписокАртикулов") Тогда
		КорзинаНажатиеЗавершениеНаСервере(Результат.СписокАртикулов);
		УстановитьКартинкуИЗаголовокКорзины();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КорзинаНажатиеЗавершениеНаСервере(СписокАртикулов)
	
	НоваяТаблицаАртикулов = Новый ТаблицаЗначений;
	НоваяТаблицаАртикулов.Колонки.Добавить("Стенд");
	НоваяТаблицаАртикулов.Колонки.Добавить("Артикул");
	НоваяТаблицаАртикулов.Колонки.Добавить("НомерСтенда");
	Для Каждого Строка Из СписокАртикулов Цикл
		НоваяСтрока = НоваяТаблицаАртикулов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	МассивКУдалению = Новый Массив;
	Для Каждого Строка Из ТаблицаАртикуловДляУдаления Цикл
		НайденныеСтроки = НоваяТаблицаАртикулов.НайтиСтроки(Новый Структура("Стенд,Артикул",Строка.Стенд,Строка.Артикул));
		Если НайденныеСтроки.Количество() = 0 Тогда
			МассивКУдалению.Добавить(Строка);
			НоваяСтрока = СтендыБуфер.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из МассивКУдалению Цикл
		ТаблицаАртикуловДляУдаления.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура КорзинаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) <> Тип("ТаблицаФормы") ИЛИ Этаформа.ТекущийЭлемент.ОтборСтрок = Неопределено ИЛИ Не Этаформа.ТекущийЭлемент.ОтборСтрок.Свойство("Стенд") Тогда
		Сообщить("Необходимо выбрать расстановку стенда");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Сохранение",Истина);
	ОткрытьФорму("Обработка.вогРотацияАссортимента.Форма.ФормаНастроек",ПараметрыФормы,ЭтаФорма,,,, Новый ОписаниеОповещения("СохранитьНастройкуЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Свойство("НаименованиеНастройки") Тогда
		ЗаписатьНастройкуВРегистр(Результат.НаименованиеНастройки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуВРегистр(НаименованиеНастройки)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	НаборЗаписей = РегистрыСведений.вогНастройкиРасстановкиСтендаВБрендЗоне.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь); 
	НаборЗаписей.Отбор.ИмяНастройки.Установить(НаименованиеНастройки);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Стенд = Этаформа.ТекущийЭлемент.ОтборСтрок.Стенд;
	ТаблицаАртикулов = Объект.АртикулыНаСтендах.Выгрузить(Новый Структура("Стенд",Стенд));
	Для Каждого Строка Из ТаблицаАртикулов Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Пользователь = ТекущийПользователь;
		НоваяСтрока.ИмяНастройки = НаименованиеНастройки;
		НоваяСтрока.Артикул = Строка.Артикул;
		НоваяСтрока.Позиция = Строка.Позиция;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНастройке(Команда)
	
	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) <> Тип("ТаблицаФормы") ИЛИ Этаформа.ТекущийЭлемент.ОтборСтрок = Неопределено ИЛИ Не Этаформа.ТекущийЭлемент.ОтборСтрок.Свойство("Стенд") Тогда
		Сообщить("Необходимо выбрать стенд");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Выбор",Истина);
	ОткрытьФорму("Обработка.вогРотацияАссортимента.Форма.ФормаНастроек",ПараметрыФормы,ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьПоНастройкеЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНастройкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Свойство("НаименованиеНастройки") Тогда
		ЗаполнитьТаблицуПоНастройке(Результат.НаименованиеНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПоНастройке(НаименованиеНастройки)
	
	Стенд = Этаформа.ТекущийЭлемент.ОтборСтрок.Стенд;
	НайденныеСтроки = Объект.АртикулыНаСтендах.НайтиСтроки(Новый Структура("Стенд",Стенд));
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы.Стиль = ПредопределенноеЗначение("Справочник.вогСтилиРисункаОбоев.ПустаяСсылка");
		СтрокаТаблицы.Статус = ПредопределенноеЗначение("Перечисление.СтатусыABC.ПустаяСсылка");
		СтрокаТаблицы.ПродажиКлиент = "";
		СтрокаТаблицы.Артикул = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогНастройкиРасстановкиСтендаВБрендЗоне.Пользователь КАК Пользователь,
		|	вогНастройкиРасстановкиСтендаВБрендЗоне.ИмяНастройки КАК ИмяНастройки,
		|	вогНастройкиРасстановкиСтендаВБрендЗоне.Артикул КАК Артикул,
		|	вогНастройкиРасстановкиСтендаВБрендЗоне.Позиция КАК Позиция
		|ИЗ
		|	РегистрСведений.вогНастройкиРасстановкиСтендаВБрендЗоне КАК вогНастройкиРасстановкиСтендаВБрендЗоне
		|ГДЕ
		|	вогНастройкиРасстановкиСтендаВБрендЗоне.Пользователь = &Пользователь
		|	И вогНастройкиРасстановкиСтендаВБрендЗоне.ИмяНастройки = &ИмяНастройки";
	
	Запрос.УстановитьПараметр("ИмяНастройки", НаименованиеНастройки);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из РезультатЗапроса Цикл
		НайденныеСтроки = Объект.АртикулыНаСтендах.НайтиСтроки(Новый Структура("Стенд,Позиция",Стенд,СтрокаТаблицы.Позиция));
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденныеСтроки[0].Артикул = СтрокаТаблицы.Артикул;
			АртикулыНаСтендахАртикулПриИзмененииНаСервере(НайденныеСтроки[0].НомерСтроки-1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
