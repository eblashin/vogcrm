
&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачалоПериода = РезультатВыбора.НачалоПериода;
	КонецПериода = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидКарты = 1;
	
	НачальноеЗаполнение();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновки = ОбработкаОбъект.ПолучитьМакет("СхемаКомпоновкиДанных");
	ИнициализироватьСхемуКомпоновки(СхемаКомпоновки);
	
КонецПроцедуры

&НаСервере
Процедура НачальноеЗаполнение()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ВидКарты = 1 Тогда
		МакетHTML = ОбработкаОбъект.ПолучитьМакет("HTMLYandex");
	Иначе
		МакетHTML = ОбработкаОбъект.ПолучитьМакет("HTMLGoogle");
	КонецЕсли;
	ТекстДокумента = МакетHTML.ПолучитьТекст();
	
	// +++ VOG Кулаков П.Л. 11.01.2021 DEV-60
	ЯндексКлючJavaAPI 	= вогГеокодированиеСерверПовтИсп.ПолучитьКлючЯндекс();
	//ЯндексКлючJavaAPI 	= "811c9840-7435-4a52-8f46-f1247610d1ed";
	// --- VOG Кулаков П.Л.
	ТекстДокумента 		= СтрЗаменить(ТекстДокумента,"<ваш API-ключ>",ЯндексКлючJavaAPI);
	
	Объект.ПолеHTMLДокумента = ТекстДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуКомпоновки(СхемаКомпоновки)
	
	АдресСхемыКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор());
	НастройкиСКД 				= СхемаКомпоновки.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	
КонецПроцедуры

&НаКлиенте                                    
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьЛегенду = Истина;
	ПодключитьОбработчикОжидания("ДобавитьЛегендуНаКарту",1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЛегендуНаКарту()
	
	Если ВидКарты = 1 Тогда
		Элементы.Карта.Документ.defaultView.CreateLegend(ОтобразитьЛегенду);
	Иначе
		Элементы.Карта.Документ.defaultView.initMap();
		Если ОтобразитьЛегенду Тогда
			Элементы.Карта.Документ.defaultView.CreateLegend();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СериализоватьВJSON(СериализуемыйОбъект)
    
    #Если ВебКлиент Тогда    
        СтрокаJSON = СериализоватьВJSONНаСервере(СериализуемыйОбъект);
    #Иначе
        ЗаписьJSON = Новый ЗаписьJSON; 
        ЗаписьJSON.УстановитьСтроку();
        НастройкиСериализации = Новый НастройкиСериализацииJSON();
        НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Ложь;
        ЗаписатьJSON(ЗаписьJSON, СериализуемыйОбъект, НастройкиСериализации, "ПреобразованиеВJSON", ЭтотОбъект); 
        СтрокаJSON = ЗаписьJSON.Закрыть();
    #КонецЕсли
    
    Возврат СтрокаJSON; 

КонецФункции 

&НаСервереБезКонтекста
Функция СериализоватьВJSONНаСервере(СериализуемыйОбъект)
    
    ЗаписьJSON = Новый ЗаписьJSON; 
    ЗаписьJSON.УстановитьСтроку();
    НастройкиСериализации = Новый НастройкиСериализацииJSON();
    НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Ложь;
    ЗаписатьJSON(ЗаписьJSON, СериализуемыйОбъект); 
    СтрокаJSON = ЗаписьJSON.Закрыть();
        
    Возврат СтрокаJSON; 

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразованиеВJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
    
    // Данная функция вызывается для всех свойств, тип которых не поддерживает преобразование в формат JSON напрямую.
    // Они нам не нужны, поэтому всегда отказ от их записи.
    Отказ = Истина;    
    
КонецФункции

&НаКлиенте
Функция ДесериализоватьИзJSON(СтрокаJSON)
    
    #Если ВебКлиент Тогда
        ДесериализованныйОбъект = ДесериализоватьИзJSONНаСервере(СтрокаJSON);
    #Иначе
        ЧтениеJSON = Новый ЧтениеJSON(); 
        ЧтениеJSON.УстановитьСтроку(СтрокаJSON); 
        ДесериализованныйОбъект = ПрочитатьJSON(ЧтениеJSON); 
        ЧтениеJSON.Закрыть();
    #КонецЕсли    
    
    Возврат ДесериализованныйОбъект;
    
КонецФункции

&НаСервереБезКонтекста
Функция ДесериализоватьИзJSONНаСервере(СтрокаJSON)
    
    ЧтениеJSON = Новый ЧтениеJSON(); 
    ЧтениеJSON.УстановитьСтроку(СтрокаJSON); 
    ДесериализованныйОбъект = ПрочитатьJSON(ЧтениеJSON); 
    ЧтениеJSON.Закрыть();
    
    Возврат ДесериализованныйОбъект;
    
КонецФункции

&НаКлиенте
Процедура ПоказатьНаКарте(Команда)
	
	ДобавитьЛегендуНаКарту();
	
	ПараметрыТочек = СформироватьПараметрыНаСервере();
	Если ПараметрыТочек.Количество() = 0 Тогда
		Сообщить("У клиента нет данных по расположению торговых точек");
		Возврат;
	КонецЕсли;
	JSONПараметры = СериализоватьВJSON(ПараметрыТочек);
	Элементы.Карта.Документ.defaultView.CreateMarker(JSONПараметры);
	
КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыНаСервере()
	
	МассивОписаниеТорговыхТочек = Новый Массив;
		
	СхемаКомпоновкиДанных 		= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	НастройкиКомпоновкиДанных 	= КомпоновщикНастроек.ПолучитьНастройки();
	
	ТаблицаРезультат 			= Новый ТаблицаЗначений;
	
	// +++ VOG Кулаков П.Л. 24.12.2020 DEV-40
	УИДФорматТРТ = Новый УникальныйИдентификатор("47b0ee76-ada2-11e7-80ce-08606e7382bc");
	ФорматТРТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(УИДФорматТРТ);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, "ФорматТРТ", ФорматТРТ);
	
	УИДСтатусТТ = Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
	СтатусТТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(УИДСтатусТТ);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, "СтатусТТ", СтатусТТ);
	// --- VOG Кулаков П.Л.
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновкиДанных,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(255);
	
	Для Каждого Строка Из ТаблицаРезультат Цикл
		
		СтруктураТорговойТочки = Новый Структура("lat,lng,title,content,label,color");
		
		НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(Новый Структура("Долгота,Широта",Строка.Долгота,Строка.Широта));
		Если НайденныеСтроки.Количество() <> 0 Тогда 
			СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, 100);
			СтруктураТорговойТочки.lat = Строка.Долгота + СлучайноеЧисло/1000000;
			СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, 100);
			СтруктураТорговойТочки.lng = Строка.Широта + СлучайноеЧисло/1000000;
		Иначе
			СтруктураТорговойТочки.lat = Строка.Долгота;
			СтруктураТорговойТочки.lng = Строка.Широта;
		КонецЕсли;
		
		// +++ VOG Кулаков П.Л. 24.12.2020 DEV-40
		ТекстРынок = "";
		Если ЗначениеЗаполнено(Строка.Рынок) Тогда
			ТекстРынок = "<p>Рынок: " + Строка.Рынок + "</p>" 
						+ "<p>Расположение на рынке: " + Строка.Павильон + "</p>";
		КонецЕсли;
			
		СтруктураТорговойТочки.title = Строка.Наименование;
		СтруктураТорговойТочки.color = ПолучитьЦветПоНаправлениюДеятельности(Строка.Ссылка);
		//СтруктураТорговойТочки.label = "'" + Формат(ВыборкаДетальныеЗаписи.Количество,"ЧДЦ=2") + "'";
		СтруктураТорговойТочки.content = "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01//EN"" ""http://www.w3.org/TR/html4/strict.dtd"">
							|<html>
							| <head>
							|  <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
							|  <title>Абсолютная ссылка</title>
							| </head>
							| <body>
							|  <p>Торговая точка: <a href=""" + Строка.Ссылка.УникальныйИдентификатор() +  """>" + Строка.Наименование + "</a></p>
							|  <p>Клиент: <a href=""" + Строка.Клиент.УникальныйИдентификатор() +  """>" + Строка.КлиентНаименование + "</a></p>
							|  <p>Статус: " + Строка.СтатусТТ + "</p>
							|  <p>Вид: " + Строка.Вид + "</p>
							|  <p>Формат: " + Строка.ФорматТРТ + "</p>" 
							+ ТекстРынок + 
							" </body>
							|</html>";
		МассивОписаниеТорговыхТочек.Добавить(СтруктураТорговойТочки);
		
		// --- VOG Кулаков П.Л.
		
	КонецЦикла;
	
	Возврат МассивОписаниеТорговыхТочек;
	
КонецФункции

&НаСервере
Функция ПолучитьЦветПоНаправлениюДеятельности(ТорговаяТочка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогТорговыеТочкиНаправления.Ссылка КАК Ссылка,
		|	вогТорговыеТочкиНаправления.Направление КАК Направление
		|ИЗ
		|	Справочник.вогТорговыеТочки.Направления КАК вогТорговыеТочкиНаправления
		|ГДЕ
		|	вогТорговыеТочкиНаправления.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТорговаяТочка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	// +++ VOG Кулаков П.Л. 23.12.2020 DEV-40
	Если РезультатЗапроса.Количество() > 1 Тогда
		Если ВидКарты = 1 Тогда
			//Цвет = "islands#yellowDotIcon";
			Цвет = "islands#yellowStretchyIcon";
		Иначе 
			Цвет = "http://maps.google.com/mapfiles/ms/icons/yellow-dot.png";
		КонецЕсли;
	ИначеЕсли РезультатЗапроса.Количество() = 1 Тогда 
		Если РезультатЗапроса[0].Направление = Справочники.НаправленияДеятельности.Обои Тогда
			Если ВидКарты = 1 Тогда
				//Цвет = "islands#darkGreenDotIcon";
				Цвет = "islands#darkGreenStretchyIcon";
			Иначе 
				Цвет = "http://maps.google.com/mapfiles/ms/icons/green-dot.png";
			КонецЕсли;
		Иначе
			Если ВидКарты = 1 Тогда
				//Цвет = "islands#blueDotIcon";
				Цвет = "islands#blueStretchyIcon";
			Иначе
				Цвет = "http://maps.google.com/mapfiles/ms/icons/blue-dot.png";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ВидКарты = 1 Тогда
			//Цвет = "islands#pinkDotIcon";
			Цвет = "islands#pinkStretchyIcon";
		Иначе
			Цвет = "http://maps.google.com/mapfiles/ms/icons/pink-dot.png";
		КонецЕсли;
	КонецЕсли;
	// --- VOG Кулаков П.Л.

	Возврат Цвет;
	
КонецФункции

&НаКлиенте
Процедура КартаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Свойство("Href") И ТипЗнч(ДанныеСобытия.Href) = Тип("Строка") Тогда
		СтрокаУИД = СтрЗаменить(ДанныеСобытия.Href,Элемент.Документ.baseURI,"");
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаУИД) Тогда
			СтандартнаяОбработка = Ложь;
			Ссылка = ПолучитьСсылкуОбъекта(СтрокаУИД);
			Если Ссылка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПоказатьЗначение(,Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуОбъекта(СтрокаУИД)
	
	УИД = Новый УникальныйИдентификатор(СтрокаУИД);
	СсылкаНаОбъект = Справочники.вогТорговыеТочки.ПолучитьСсылку(УИД);
	Если СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
		СсылкаНаОбъект = Справочники.Партнеры.ПолучитьСсылку(УИД);
		Если СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
			СсылкаНаОбъект = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат СсылкаНаОбъект;
	
КонецФункции

&НаКлиенте
Процедура ПечатьКарты(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ИмяФайла = ПолучитьИмяВременногоФайла(".html");
	ТекстовыйДокумент.УстановитьТекст(Элементы.Карта.Документ.documentElement.outerHTML);
	ТекстовыйДокумент.Записать(ИмяФайла,КодировкаТекста.UTF8,Символы.ВК + Символы.ПС);
	ЗапуститьПриложение(ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКартыПриИзменении(Элемент)
	
	ОтобразитьЛегенду = Истина;
	ПодключитьОбработчикОжидания("ДобавитьЛегендуНаКарту",1,Истина);
	
	НачальноеЗаполнение();
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 23.12.2020 DEV-40
&НаКлиенте
Процедура СохранитьКарту(Команда)
	
	//Открываем стандартный диалог Windows выбора каталога/файла в режиме выбора файла на сохранение - ДиалогВыбораФайла 1С
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Файл csv(*.csv)|*.csv";
	
	Диалог.Показать(Новый ОписаниеОповещения("СохранитьКартуЗавершение", ЭтаФорма));
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 23.12.2020 DEV-40
&НаКлиенте
Процедура СохранитьКартуЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = СохранитьКартуНаСервере();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ВыбранныеФайлы[0]);
	Сообщить("Сохранен файл: " + ВыбранныеФайлы[0])

КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 23.12.2020 DEV-40
&НаСервере
Функция СохранитьКартуНаСервере()
	
	СхемаКомпоновкиДанных 		= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	НастройкиКомпоновкиДанных 	= КомпоновщикНастроек.ПолучитьНастройки();
	
	УИДФорматТРТ = Новый УникальныйИдентификатор("47b0ee76-ada2-11e7-80ce-08606e7382bc");
	ФорматТРТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(УИДФорматТРТ);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, "ФорматТРТ", ФорматТРТ);
	
	УИДСтатусТТ = Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
	СтатусТТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(УИДСтатусТТ);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, "СтатусТТ", СтатусТТ);
	
	ТаблицаРезультат 			= Новый ТаблицаЗначений;
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновкиДанных,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИмяФайлаНаСервере = ПолучитьИмяВременногоФайла(".csv");
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаНаСервере);
	
	Для Каждого Строка Из ТаблицаРезультат Цикл
		
		ТекстРынок = "";
		Если ЗначениеЗаполнено(Строка.Рынок) Тогда
			ТекстРынок = ". Рынок: " + СтрЗаменить(Строка.Рынок,",",".") + ". Расположение на рынке: " + СтрЗаменить(Строка.Павильон,",",".");
		КонецЕсли;
		
		ТекстОписанияТТ = Формат(Строка.Долгота,"ЧРД=.") 
		+ "," 
		+ Формат(Строка.Широта,"ЧРД=.") 
		+ "," 
		+ "Торговая точка: " + СтрЗаменить(Строка.Наименование,",",".")
		+ ". Клиент: " + СтрЗаменить(Строка.КлиентНаименование,",",".")
		+ ". Статус: " + Строка.СтатусТТ
		+ ". Вид: " + Строка.Вид 
		+ ". Формат: " + Строка.ФорматТРТ
		+ ТекстРынок
		+ "," 
		+ Строка.Наименование;
		
		ЗаписьТекста.ЗаписатьСтроку(ТекстОписанияТТ);
		
	КонецЦикла;
	
	ЗаписьТекста.Закрыть();
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаНаСервере);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла,Новый УникальныйИдентификатор());
	Возврат АдресХранилища;
	
КонецФункции // --- VOG Кулаков П.Л.
