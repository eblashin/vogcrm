
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Подразделение 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь,
		"Подразделение",
		Истина);
	ИнициализироватьСхемуКомпоновки();
	
	НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка;
	
	РольОтветственного = Справочники.РолиКонтактныхЛицПартнеров.Менеджер;
	
	ВариантОпроса = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("8c0cb7bb-b454-11ea-b7d5-005056bc3fe8"));
	
	МассивСтатусов = Новый Массив;
	
	СтатусТТНовая_УИН 	= Новый УникальныйИдентификатор("047f780f-8b44-11e9-9b11-005056bcd3e3");
	СтатусТТНовая 		= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(СтатусТТНовая_УИН);
	МассивСтатусов.Добавить(СтатусТТНовая);
	
	СтатусТТАКБ_УИН 	= Новый УникальныйИдентификатор("f84779ae-9a73-11e8-89fa-005056bc3fe8");
	СтатусТТАКБ 		= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(СтатусТТАКБ_УИН);
	МассивСтатусов.Добавить(СтатусТТАКБ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"СтатусТТ",
		МассивСтатусов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	МассивВидовТТ = Новый Массив;
	МассивВидовТТ.Добавить(Справочники.вогВидыТорговыхТочек.ТРТД);
	МассивВидовТТ.Добавить(Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"ТорговаяТочка.Вид",
		МассивВидовТТ,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоручения(Команда)
	
	Отказ = Ложь;	
	Если НЕ ЗначениеЗаполнено(НаправлениеДеятельности) тогда
		Сообщить("Не указано направление деятельности");	
		Отказ = Истина;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РольОтветственного) тогда
		Сообщить("Не указана роль ответственного");	
		Отказ = Истина;	
	КонецЕсли;
	Если НЕ  ЗначениеЗаполнено(ВариантОпроса) тогда
		Сообщить("Не указан вариант опроса");	
		Отказ = Истина;	
	КонецЕсли;
	Если Не Отказ тогда
		СоздатьПорученияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьПараметрыСКД(СхемаКомпоновкиДанных, СтруктураНастроек)
	
	ПараметрыСКД = СхемаКомпоновкиДанных.Параметры;
	
	ПараметрКлассификатор = ПараметрыСКД.Найти(Новый ПараметрКомпоновкиДанных("Классификатор"));
	
	Если ПараметрКлассификатор <> Неопределено Тогда
		
		КлассификаторУИН 	= Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
		Классификатор 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторУИН);
		ПараметрКлассификатор.Значение = Классификатор;
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ИнициализироватьСхемуКомпоновки()
	
	//СхемаКомпоновкиДанных 		= Обработки.вогФормированиеПорученийПоЗаполнениюАнкет.ПолучитьМакет("СхемаЗаполнения");
	Обработка =  РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("СхемаЗаполнения");
	СхемаКомпоновкиДанных 		= Макет;
	АдресСхемыКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Для Каждого ПараметрСКД Из СхемаКомпоновкиДанных.Параметры Цикл
		ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
	КонецЦикла;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	НастройкиСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПорученияНаСервере()
	
	СхемаКомпоновкиДанных 	= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	ТаблицаРезультат 		= Новый ТаблицаЗначений;
	
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("Роль"));
	П.Значение = РольОтветственного;
	
	ВыручкаТТУИД 	= Новый УникальныйИдентификатор("2f590087-586f-11ea-87ff-005056bc3fe8");
	ВыручкаТТ 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(ВыручкаТТУИД);
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("ВыручкаТТКлассификатор"));
	П.Значение = ВыручкаТТ;
	
	ПлощадьОтделаУИД 	= Новый УникальныйИдентификатор("aa8de7b3-1aec-11e8-92c3-005056bcf152");
	ПлощадьОтдела 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(ПлощадьОтделаУИД);
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("ПлощадьОтделаКлассификатор"));
	П.Значение = ПлощадьОтдела;
	
	ТЗвТТУИД 	= Новый УникальныйИдентификатор("b1107e35-b727-11e8-a684-005056bc3fe8");
	ТЗвТТ 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(ТЗвТТУИД);
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("ТЗвТТКлассификатор"));
	П.Значение = ТЗвТТ;
	
	КлассификацияТТУИД 	= Новый УникальныйИдентификатор("b3d84c6b-7581-11ea-87ff-005056bc3fe8");
	КлассификацияТТ 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификацияТТУИД);
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("КлассификацияТТКлассификатор"));
	П.Значение = КлассификацияТТ;
	
	ФорматТРТУИД 	= Новый УникальныйИдентификатор("47b0ee76-ada2-11e7-80ce-08606e7382bc");
	ФорматТРТ 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(ФорматТРТУИД);
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("ФорматТРТКлассификатор"));
	П.Значение = ФорматТРТ;

	СтатусТТ_УИД 	= Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
	СтатусТТ 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(СтатусТТ_УИД);
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("СтатусТТКлассификатор"));
	П.Значение = СтатусТТ;
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		КомпоновщикНастроек.Настройки,                                                                                       
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивМенеджеров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаРезультат.ВыгрузитьКолонку("Менеджер"));
	
	Если МассивМенеджеров.Количество() = 0 Тогда 
		Сообщить("Все торговые точки заполнены");
	КонецЕсли;
	
	Для Каждого ЭлементМенеджер Из МассивМенеджеров Цикл
		НачатьТранзакцию();
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			РезультатОбработки = Ложь;
			
			ТаблицаРезультатПоМенеджеру = ТаблицаРезультат.Скопировать(Новый Структура("Менеджер",ЭлементМенеджер));
			Анкета = СоздатьАнкетуНаСервере(ВариантОпроса,ЭлементМенеджер,НаправлениеДеятельности,ТаблицаРезультатПоМенеджеру);
			КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("e5083b1e-b60b-11ea-8f2a-005056bcd3e3"));
			
			// Создание задач
			СписокТочекСтарта 								= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
			Автор 											= Пользователи.ТекущийПользователь();
			
			БизнесПроцессОбъект 							= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			БизнесПроцессОбъект.Автор 						= Автор;
			БизнесПроцессОбъект.Дата 						= ТекущаяДата();
			БизнесПроцессОбъект.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			БизнесПроцессОбъект.Предмет 					= Анкета;
			БизнесПроцессОбъект.вогАнкета 					= Анкета;
			БизнесПроцессОбъект.Ответственный 				= Автор;
			БизнесПроцессОбъект.Подразделение 				= Подразделение;
			БизнесПроцессОбъект.КартаМаршрута 				= КартаМаршрута;
			БизнесПроцессОбъект.ТочкаСтарта 				= СписокТочекСтарта[0].Значение;
			БизнесПроцессОбъект.ДатаСтарта 					= ТекущаяДата();
			БизнесПроцессОбъект.Наименование 				= СтрШаблон("%1 (%2)", КартаМаршрута, БизнесПроцессОбъект.Предмет);
			БизнесПроцессОбъект.вогДолжностнаяПозиция 		= Автор.CRM_ДолжностнаяПозиция;
			БизнесПроцессОбъект.НомерВерсииКартыМаршрута	= КартаМаршрута.НомерВерсии;
			БизнесПроцессОбъект.Описание 					= НСтр("ru = 'Необходимо заполнить и провести Анкету '" + ВариантОпроса);
			
			БизнесПроцессОбъект.Записать();
			
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
			НаборЭтапов.Прочитать();
			
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
			НаборИсполнителей.Прочитать();
			
			Для Каждого СтрокаНабора ИЗ НаборИсполнителей Цикл
				
				Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда		// точка действия "Выполнить"
					СтрокаНабора.Исполнитель 				= ЭлементМенеджер;
					НаборЭтапов[1].ДатаВыполнения 			= ТекущаяДата() + 432000; // 5 дней
					НаборЭтапов[1].ВариантВыполненияСтрокой = "Заполнить " + Анкета;
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЭтапов.Записать();
			НаборИсполнителей.Записать();
			
			БизнесПроцессОбъект.Старт();
			
			ЗафиксироватьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Выдано поручение ""Заполнение Анкеты "" для пользователя %1'");
			ТекстСообщения 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементМенеджер);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			         
		Исключение
			
			ОтменитьТранзакцию();
			ТекстОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбновитьНумерациюОбъектов();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьАнкетуНаСервере(ВариантОпроса,Респондент,НаправлениеДеятельности,ТаблицаРезультат)
	// Вставить содержимое обработчика.
	
	АнкетаОбъект = Документы.вогАнкета.СоздатьДокумент();
	АнкетаОбъект.Дата=ТекущаяДата();
	АнкетаОбъект.Автор = Пользователи.ТекущийПользователь();
	АнкетаОбъект.ВариантОпроса = ВариантОпроса;
	АнкетаОбъект.Респондент = Респондент;
	АнкетаОбъект.Статус = Справочники.вогШаблоныСтатусов.НаСогласовании;
	нЭлВопрос = АнкетаОбъект.Состав.Добавить();
	нЭлВопрос.ЭлементарныйВопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПолучитьСсылку(Новый УникальныйИдентификатор("3184fc96-b478-11ea-b7d5-005056bc3fe8"));
	нЭлВопрос.Ответ = НаправлениеДеятельности;

	Таблица = АнкетаОбъект.СоставОпроса;
	Для каждого Строка из ТаблицаРезультат цикл
		
		ИдСтроки  = Новый УникальныйИдентификатор;
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Вопрос = Справочники.вогВопросы.ПолучитьСсылку(Новый УникальныйИдентификатор("2401407b-b457-11ea-b7d5-005056bc3fe8"));
		СтрокаТаблицы.ИдентификаторСтроки = идСтроки;
		СтрокаТаблицы.ОбъектОпроса = Строка.ТорговаяТочка;
		
		// Населенный пункт
		СтрокаДопИнфо = АнкетаОбъект.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос = СтрокаТаблицы.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДопИнфо.Свойство = ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(Новый УникальныйИдентификатор("c3f19a1b-b45e-11ea-b7d5-005056bc3fe8"));
		СтрокаДопИнфо.Значение = Строка.НаселенныйПункт;
		
		// Формат ТРТ
		СтрокаДопИнфо = АнкетаОбъект.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос = СтрокаТаблицы.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДопИнфо.Свойство = ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(Новый УникальныйИдентификатор("d002493b-b45e-11ea-b7d5-005056bc3fe8"));
		СтрокаДопИнфо.Значение = Строка.ФорматТРТ;
		
		// Площадь отдела
		СтрокаДопИнфо = АнкетаОбъект.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос = СтрокаТаблицы.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДопИнфо.Свойство = ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(Новый УникальныйИдентификатор("ebc1dcdb-b45e-11ea-b7d5-005056bc3fe8"));
		СтрокаДопИнфо.Значение = Строка.ПлощадьОтдела;
		
		// ТЗ в ТТ
		СтрокаДопИнфо = АнкетаОбъект.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос = СтрокаТаблицы.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДопИнфо.Свойство = ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(Новый УникальныйИдентификатор("f621cebb-b45e-11ea-b7d5-005056bc3fe8"));
		СтрокаДопИнфо.Значение = Строка.ТЗвТТ;
		
		// Выручка ТТ
		СтрокаДопИнфо = АнкетаОбъект.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос = СтрокаТаблицы.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДопИнфо.Свойство = ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(Новый УникальныйИдентификатор("03b8f6cb-b45f-11ea-b7d5-005056bc3fe8"));
		СтрокаДопИнфо.Значение = Строка.ВыручкаТТ;
		
		// Классификация
		СтрокаДопИнфо = АнкетаОбъект.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос = СтрокаТаблицы.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДопИнфо.Свойство = ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(Новый УникальныйИдентификатор("01982af4-75a6-11ea-87ff-005056bc3fe8"));
		СтрокаДопИнфо.Значение = Строка.Классификация;
		
	КонецЦикла;	
	АнкетаОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат АнкетаОбъект.Ссылка;
	
КонецФункции

