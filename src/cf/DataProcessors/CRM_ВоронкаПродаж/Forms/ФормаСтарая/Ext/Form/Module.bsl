
///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеГруппировкаНеГруппировать()
	Возврат НСтр("ru = 'Не группировать'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеГруппировкаПользователи()
	Возврат НСтр("ru = 'Пользователи'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеГруппировкаПодразделения()
	Возврат НСтр("ru = 'Подразделения'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПолеВОтборе(ЭлементыОтбора, Поле)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайденныйЭлемент = НайтиПолеВОтборе(ЭлементОтбора.Элементы, Поле);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		Иначе
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеВОтборе(Отбор, Имя, ВидСравнения, Значение, Использование, ДоступныеПоля = Неопределено, СоздатьГруппуЭлементов = Ложь)
	Если ДоступныеПоля <> Неопределено Тогда
		Если ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Имя)) = Неопределено Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	Если НЕ СоздатьГруппуЭлементов Тогда
		ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя);
		ЭлементОтбора = НайтиПолеВОтборе(Отбор.Элементы, ПолеОтбораЛевоеЗначение);
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = ПолеОтбораЛевоеЗначение;
		Иначе
			Возврат;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ВидСравнения;
		ЭлементОтбора.ПравоеЗначение = Значение;
		ЭлементОтбора.Использование = Использование;
	Иначе
		ГруппаОтбора				= Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.Использование	= Использование;
		
		Для Каждого СтруктураОтбора ИЗ Значение Цикл
			
			ПолеОтбораЛевоеЗначение			= Новый ПолеКомпоновкиДанных(СтруктураОтбора.ИмяПоляОтбора);
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= ПолеОтбораЛевоеЗначение;
			ЭлементОтбора.ВидСравнения		= ВидСравнения;
			ЭлементОтбора.ПравоеЗначение	= СтруктураОтбора.ЗначениеОтбора;
			ЭлементОтбора.Использование		= Использование;
			
		КонецЦИкла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьИВидимостьФормы(Форма)
	
	Форма.Элементы.ГруппаРезультатыВыполненияПлана.Видимость = Форма.ОтображатьПлановыеПоказатели;
	Форма.Элементы.ПоискИсточникПривлечения.Видимость = (Форма.ЕстьЭтапыПоИнтересам И НЕ Форма.ЕстьЭтапыПоДокументам И НЕ Форма.ЕстьЭтапыПоКартамМаршрута);
	Форма.Элементы.ПоискЗначениеИсточникаПривлечения.Видимость = (Форма.ЕстьЭтапыПоИнтересам И НЕ Форма.ЕстьЭтапыПоДокументам И НЕ Форма.ЕстьЭтапыПоКартамМаршрута);
	
	//Форма.Элементы.РежимВоронки.Видимость = (НЕ Форма.Воронка = ПредопределенноеЗначение("Справочник.CRM_ВоронкиПродаж.ПоДокументам"));
	//Если Форма.Воронка = ПредопределенноеЗначение("Справочник.CRM_ВоронкиПродаж.ПоДокументам") Тогда
	//	Форма.РежимВоронки = "Все";
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦветовуюГамму()
	
	ЦветоваяГамма = Новый Массив;
	ЦветоваяГамма.Добавить(Новый Цвет( 165, 155, 200 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 187, 206, 211 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 189, 207, 204 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 191, 207, 196 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 193, 208, 187 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 196, 208, 178 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 200, 208, 169 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 204, 208, 158 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 209, 208, 145 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 216, 208, 131 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 222, 208, 117 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 229, 208, 104 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 234, 207, 93 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 239, 204, 87 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 243, 197, 86 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 245, 188, 86 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 248, 178, 87 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 250, 167, 92 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 251, 157, 96 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 252, 149, 100 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 168, 155, 202 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 171, 155, 204 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 174, 155, 204 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 177, 155, 206 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 180, 155, 208 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 187, 206, 211 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 189, 207, 209 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 189, 207, 207 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 189, 207, 204 ));

	ЦветоваяГамма.Добавить(Новый Цвет( 191, 207, 202 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 191, 207, 200 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 191, 207, 298 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 191, 207, 196 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 193, 208, 194 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 193, 208, 192 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 193, 208, 190 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 193, 208, 187 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 196, 208, 184 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 196, 208, 182 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 196, 208, 180 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 196, 208, 178 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 200, 208, 176 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 200, 208, 174 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 200, 208, 172 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 200, 208, 169 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 202, 208, 166 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 202, 208, 162 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 204, 208, 160 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 204, 208, 158 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 206, 208, 156 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 206, 208, 154 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 206, 208, 152 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 206, 208, 150 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 209, 208, 148 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 209, 208, 145 ));
	
	
	ЦветоваяГамма.Добавить(Новый Цвет( 211, 208, 142 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 212, 208, 140 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 213, 208, 138 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 214, 208, 136 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 215, 208, 134 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 216, 208, 131 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 217, 208, 128 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 218, 208, 125 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 219, 208, 122 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 220, 208, 119 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 222, 208, 117 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 223, 208, 114 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 224, 208, 111 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 225, 208, 108 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 226, 208, 105 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 229, 208, 104 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 230, 207, 101 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 231, 207, 99 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 232, 207, 97 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 233, 207, 95 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 234, 207, 93 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 235, 204, 92 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 236, 204, 91 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 237, 204, 90 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 238, 204, 89 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 239, 204, 87 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 240, 197, 86 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 241, 197, 86 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 242, 197, 86 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 243, 197, 86 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 245, 188, 86 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 246, 178, 87 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 247, 178, 87 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 248, 178, 87 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 250, 167, 90 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 250, 167, 92 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 251, 157, 94 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 251, 157, 96 ));
	
	ЦветоваяГамма.Добавить(Новый Цвет( 252, 149, 97 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 252, 149, 98 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 252, 149, 99 ));
	ЦветоваяГамма.Добавить(Новый Цвет( 252, 149, 100 ));
	
КонецПроцедуры

&НаСервере
Процедура РаскраситьСерии()
	
	ЦветУдачнойСерии = WebЦвета.БледноЗеленый;
	
	Диаграмма.АвтоТранспонирование = Ложь;
	Диаграмма.Обновление = Ложь;
	
	//Если РежимВоронки = "Активные" Тогда
	//	
	//	КоличествоТочек = Диаграмма.КоличествоТочек;
	//	НачальнаяТочка = 1;
	//	КонечнаяТочка = КоличествоТочек-2;
	//	КолТочек = КонечнаяТочка - НачальнаяТочка + 1;
	//	Если КоличествоТочек = 0 Тогда
	//		Возврат;
	//	ИначеЕсли КоличествоТочек = 1 Тогда
	//		Точка = Диаграмма.Точки.Получить(0);
	//		Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//			Точка.Цвет = ЦветоваяГамма.Получить(0).Значение;
	//		КонецЕсли;
	//		Возврат;
	//	ИначеЕсли КоличествоТочек = 2 Тогда
	//		Точка = Диаграмма.Точки.Получить(1);
	//		Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//			Точка.Цвет = ЦветоваяГамма.Получить(0).Значение;
	//		КонецЕсли;
	//		Точка = Диаграмма.Точки.Получить(0);
	//		Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//			Точка.Цвет = ЦветоваяГамма.Получить(ЦветоваяГамма.Количество()-1).Значение;
	//		КонецЕсли;
	//		Возврат;
	//	КонецЕсли; 
	//	Точка = Диаграмма.Точки.Получить(0);
	//	Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//		Точка.Цвет = Новый Цвет( 186, 206, 216 );
	//	КонецЕсли;
	//	КоличествоЦветов = ЦветоваяГамма.Количество();
	//	Узлы = Новый Массив;
	//	Узлы.Добавить(Новый Структура("номУзла,КолТочек,номЦвета",0,1,КоличествоЦветов-1));
	//	Если КолТочек >= КоличествоЦветов-3 Тогда
	//		Шаг = Цел(КолТочек/(КоличествоЦветов-2));
	//		НомЦвета = КоличествоЦветов-3;
	//		Для инд=0 По КоличествоЦветов-3 Цикл
	//			номВершины = Шаг*инд+НачальнаяТочка;
	//			Узлы.Добавить(Новый Структура("номУзла,КолТочек,номЦвета",номВершины,Шаг,НомЦвета));
	//			НомЦвета = НомЦвета-1;
	//		КонецЦикла;
	//		
	//		Остаток = КолТочек -Шаг*(КоличествоЦветов-2);
	//		ТекущаяТочка = НачальнаяТочка;
	//		Пока Остаток Цикл
	//			
	//			Узел = Узлы[ТекущаяТочка];
	//			Узел.КолТочек = Узел.КолТочек + 1;
	//			Остаток = Остаток-1;
	//			ТекущаяТочка = ТекущаяТочка + 1;
	//			
	//		КонецЦикла;
	//		
	//	Иначе
	//		
	//		Коэф = Цел(КоличествоЦветов/КоличествоТочек);
	//		ОсталосьТочек = КоличествоТочек-1;
	//		инд = 1;
	//		Для ТекТочка = НачальнаяТочка По КонечнаяТочка Цикл
	//			
	//			Узлы.Добавить(Новый Структура("номУзла,КолТочек,номЦвета",ТекТочка,1,КоличествоЦветов - Коэф*ТекТочка-1));
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	Узлы.Добавить(Новый Структура("номУзла,КолТочек,номЦвета",КоличествоТочек-1,1,0));
	//	
	//	бОбратныйОбходСерий = (		ТипДиаграммыЗначение = "ГистограммаГоризонтальнаяОбъемная"
	//	ИЛИ ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная");
	//	//
	//	Если бОбратныйОбходСерий Тогда
	//		ТекущаяТочка = 0;
	//	Иначе
	//		ТекущаяТочка = Диаграмма.Точки.Количество() - 1;
	//	КонецЕсли;
	//	Для Каждого Узел Из Узлы Цикл
	//		Для ст = 0 По Узел.КолТочек - 1 Цикл
	//			Точка = Диаграмма.Точки[ТекущаяТочка];
	//			
	//			Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//				Точка.Цвет = ЦветоваяГамма.Получить(Узел.номЦвета).Значение;
	//			КонецЕсли;
	//			
	//			Если бОбратныйОбходСерий Тогда
	//				ТекущаяТочка = ТекущаяТочка + 1;
	//			Иначе
	//				ТекущаяТочка = ТекущаяТочка - 1;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//	
	//Иначе
		
		КоличествоСерий = Диаграмма.КоличествоСерий;
		НачальнаяСерия = 1;
		КонечнаяСерия = КоличествоСерий/2-2;
		КолСерий = Диаграмма.КоличествоТочек;
		Если КоличествоСерий = 0 Тогда
			Возврат;
		ИначеЕсли КоличествоСерий = 2 Тогда
			Серия = Диаграмма.Серии.Получить(1);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(0).Значение;
			КонецЕсли;
			Серия = Диаграмма.Серии.Получить(0);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(0).Значение;
			КонецЕсли;
			Возврат;
		ИначеЕсли КоличествоСерий = 4 Тогда
			Серия = Диаграмма.Серии.Получить(3);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(0).Значение;
			КонецЕсли;
			Серия = Диаграмма.Серии.Получить(2);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(0).Значение;
			КонецЕсли;
			Серия = Диаграмма.Серии.Получить(1);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(ЦветоваяГамма.Количество()-1).Значение;
			КонецЕсли;
			Серия = Диаграмма.Серии.Получить(0);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(ЦветоваяГамма.Количество()-1).Значение;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		КоличествоЦветов = ЦветоваяГамма.Количество();
		Узлы = Новый Массив;
		Узлы.Добавить(Новый Структура("номУзла,КолСерий,номЦвета",0,1,КоличествоЦветов-1));
		Если КолСерий >= КоличествоЦветов-3 Тогда
			Шаг = Цел(КолСерий/(КоличествоЦветов-2));
			НомЦвета = КоличествоЦветов-3;
			Для инд=0 По КоличествоЦветов-3 Цикл
				номВершины = Шаг*инд+НачальнаяСерия;
				Узлы.Добавить(Новый Структура("номУзла,КолСерий,номЦвета",номВершины,Шаг,НомЦвета));
				НомЦвета = НомЦвета-1;
			КонецЦикла;
			
			Остаток = КолСерий -Шаг*(КоличествоЦветов-2);
			ТекущаяСерия = НачальнаяСерия;
			Пока Остаток Цикл
				
				Узел = Узлы[ТекущаяСерия];
				Узел.КолСерий = Узел.КолСерий + 1;
				Остаток = Остаток-1;
				ТекущаяСерия = ТекущаяСерия+1;
				
			КонецЦикла;
			
		Иначе
			
			Коэф = Цел(КоличествоЦветов/(КоличествоСерий/2));
			ОсталосьСерий = КоличествоСерий/2-1;
			инд = 1;
			Для ТекСерия = НачальнаяСерия По КонечнаяСерия Цикл
				
				Узлы.Добавить(Новый Структура("номУзла,КолСерий,номЦвета",текСерия,1,КоличествоЦветов - Коэф*ТекСерия-1));
				
			КонецЦикла;
			
		КонецЕсли;
		Узлы.Добавить(Новый Структура("номУзла,КолСерий,номЦвета",КоличествоСерий/2-1,1,0));
		
		//бОбратныйОбходСерий = (		ТипДиаграммыЗначение = "ГистограммаГоризонтальнаяОбъемная"
		//ИЛИ ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная");
		бОбратныйОбходСерий = (		ТипДиаграммыЗначение = "ГистограммаГоризонтальнаяОбъемная"
									Или	ТипДиаграммыЗначение = "ГистограммаГоризонтальная"
									ИЛИ	ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальная"
									ИЛИ	ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная"
									ИЛИ	ТипДиаграммыЗначение = "ГистограммаНормированнаяГоризонтальная"
									ИЛИ	ТипДиаграммыЗначение = "ГистограммаНормированнаяГоризонтальнаяОбъемная");
		
		//
		Если бОбратныйОбходСерий Тогда
			ТекущаяСерия = 0;
		Иначе
			ТекущаяСерия = Диаграмма.Серии.Количество() - 1;
		КонецЕсли;
		Для Каждого Узел Из Узлы Цикл
			Для ст = 0 По Узел.КолСерий Цикл
				Серия = Диаграмма.Серии[ТекущаяСерия];
				
				Если бОбратныйОбходСерий Тогда
					ТекущаяСерия = ТекущаяСерия + 1;
				Иначе
					ТекущаяСерия = ТекущаяСерия - 1;
				КонецЕсли;
				
				Если Серия.Цвет = WebЦвета.СеребристоСерый Тогда
					Продолжить;
				КонецЕсли;
				
				Если Серия.Цвет = WebЦвета.СветлоЗолотистый Тогда
					Продолжить;
				КонецЕсли;
				
				Если Серия.Цвет = ЦветУдачнойСерии Тогда
					Продолжить;
				КонецЕсли;
				
				Серия.Цвет = ЦветоваяГамма.Получить(Узел.номЦвета).Значение;
			КонецЦикла;
		КонецЦикла;
	//КонецЕсли;
	
	Диаграмма.АвтоТранспонирование = Истина;
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РаскраситьСерииВТабличномДокументе(ТабДиаграмма)
	
	ЦветУдачнойСерии = WebЦвета.БледноЗеленый;
	
	ТабДиаграмма.АвтоТранспонирование = Ложь;
	ТабДиаграмма.Обновление = Ложь;
	
	//Если РежимВоронки = "Активные" Тогда
	//	
	//	КоличествоТочек = ТабДиаграмма.КоличествоТочек;
	//	НачальнаяТочка = 1;
	//	КонечнаяТочка = КоличествоТочек-2;
	//	КолТочек = КонечнаяТочка - НачальнаяТочка + 1;
	//	Если КоличествоТочек = 0 Тогда
	//		Возврат;
	//	ИначеЕсли КоличествоТочек = 1 Тогда
	//		Точка = ТабДиаграмма.Точки.Получить(0);
	//		Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//			Точка.Цвет = ЦветоваяГамма.Получить(0).Значение;
	//		КонецЕсли;
	//		Возврат;
	//	ИначеЕсли КоличествоТочек = 2 Тогда
	//		Точка = ТабДиаграмма.Точки.Получить(1);
	//		Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//			Точка.Цвет = ЦветоваяГамма.Получить(0).Значение;
	//		КонецЕсли;
	//		Точка = ТабДиаграмма.Точки.Получить(0);
	//		Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//			Точка.Цвет = ЦветоваяГамма.Получить(ЦветоваяГамма.Количество()-1).Значение;
	//		КонецЕсли;
	//		Возврат;
	//	КонецЕсли; 
	//	Точка = ТабДиаграмма.Точки.Получить(0);
	//	Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//		Точка.Цвет = Новый Цвет( 186, 206, 216 );
	//	КонецЕсли;
	//	КоличествоЦветов = ЦветоваяГамма.Количество();
	//	Узлы = Новый Массив;
	//	Узлы.Добавить(Новый Структура("номУзла,КолТочек,номЦвета",0,1,КоличествоЦветов-1));
	//	Если КолТочек >= КоличествоЦветов-3 Тогда
	//		Шаг = Цел(КолТочек/(КоличествоЦветов-2));
	//		НомЦвета = КоличествоЦветов-3;
	//		Для инд=0 По КоличествоЦветов-3 Цикл
	//			номВершины = Шаг*инд+НачальнаяТочка;
	//			Узлы.Добавить(Новый Структура("номУзла,КолТочек,номЦвета",номВершины,Шаг,НомЦвета));
	//			НомЦвета = НомЦвета-1;
	//		КонецЦикла;
	//		
	//		Остаток = КолТочек -Шаг*(КоличествоЦветов-2);
	//		ТекущаяТочка = НачальнаяТочка;
	//		Пока Остаток Цикл
	//			
	//			Узел = Узлы[ТекущаяТочка];
	//			Узел.КолТочек = Узел.КолТочек + 1;
	//			Остаток = Остаток-1;
	//			ТекущаяТочка = ТекущаяТочка + 1;
	//			
	//		КонецЦикла;
	//		
	//	Иначе
	//		
	//		Коэф = Цел(КоличествоЦветов/КоличествоТочек);
	//		ОсталосьТочек = КоличествоТочек-1;
	//		инд = 1;
	//		Для ТекТочка = НачальнаяТочка По КонечнаяТочка Цикл
	//			
	//			Узлы.Добавить(Новый Структура("номУзла,КолТочек,номЦвета",ТекТочка,1,КоличествоЦветов - Коэф*ТекТочка-1));
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	Узлы.Добавить(Новый Структура("номУзла,КолТочек,номЦвета",КоличествоТочек-1,1,0));
	//	
	//	бОбратныйОбходСерий = (		ТипДиаграммыЗначение = "ГистограммаГоризонтальнаяОбъемная"
	//	ИЛИ ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная");
	//	//
	//	Если бОбратныйОбходСерий Тогда
	//		ТекущаяТочка = 0;
	//	Иначе
	//		ТекущаяТочка = ТабДиаграмма.Точки.Количество() - 1;
	//	КонецЕсли;
	//	Для Каждого Узел Из Узлы Цикл
	//		Для ст = 0 По Узел.КолТочек - 1 Цикл
	//			Точка = ТабДиаграмма.Точки[ТекущаяТочка];
	//			
	//			Если Точка.Цвет <> WebЦвета.СеребристоСерый Тогда
	//				Точка.Цвет = ЦветоваяГамма.Получить(Узел.номЦвета).Значение;
	//			КонецЕсли;
	//			
	//			Если бОбратныйОбходСерий Тогда
	//				ТекущаяТочка = ТекущаяТочка + 1;
	//			Иначе
	//				ТекущаяТочка = ТекущаяТочка - 1;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//	
	//Иначе
		
		КоличествоСерий = ТабДиаграмма.КоличествоСерий;
		НачальнаяСерия = 1;
		КонечнаяСерия = КоличествоСерий/2-2;
		КолСерий = ТабДиаграмма.КоличествоТочек;
		Если КоличествоСерий = 0 Тогда
			Возврат;
		ИначеЕсли КоличествоСерий = 2 Тогда
			Серия = ТабДиаграмма.Серии.Получить(1);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(0).Значение;
			КонецЕсли;
			Серия = ТабДиаграмма.Серии.Получить(0);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(0).Значение;
			КонецЕсли;
			Возврат;
		ИначеЕсли КоличествоСерий = 4 Тогда
			Серия = ТабДиаграмма.Серии.Получить(3);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(0).Значение;
			КонецЕсли;
			Серия = ТабДиаграмма.Серии.Получить(2);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(0).Значение;
			КонецЕсли;
			Серия = ТабДиаграмма.Серии.Получить(1);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(ЦветоваяГамма.Количество()-1).Значение;
			КонецЕсли;
			Серия = ТабДиаграмма.Серии.Получить(0);
			Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
				Серия.Цвет = ЦветоваяГамма.Получить(ЦветоваяГамма.Количество()-1).Значение;
			КонецЕсли;
			Возврат;
		КонецЕсли; 
		Серия = ТабДиаграмма.Серии.Получить(0);
		Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
			Серия.Цвет = Новый Цвет( 186, 206, 216 );
		КонецЕсли;
		КоличествоЦветов = ЦветоваяГамма.Количество();
		Узлы = Новый Массив;
		Узлы.Добавить(Новый Структура("номУзла,КолСерий,номЦвета",0,1,КоличествоЦветов-1));
		Если КолСерий >= КоличествоЦветов-3 Тогда
			Шаг = Цел(КолСерий/(КоличествоЦветов-2));
			НомЦвета = КоличествоЦветов-3;
			Для инд=0 По КоличествоЦветов-3 Цикл
				номВершины = Шаг*инд+НачальнаяСерия;
				Узлы.Добавить(Новый Структура("номУзла,КолСерий,номЦвета",номВершины,Шаг,НомЦвета));
				НомЦвета = НомЦвета-1;
			КонецЦикла;
			
			Остаток = КолСерий -Шаг*(КоличествоЦветов-2);
			ТекущаяСерия = НачальнаяСерия;
			Пока Остаток Цикл
				
				Узел = Узлы[ТекущаяСерия];
				Узел.КолСерий = Узел.КолСерий + 1;
				Остаток = Остаток-1;
				ТекущаяСерия = ТекущаяСерия+1;
				
			КонецЦикла;
			
		Иначе
			
			Коэф = Цел(КоличествоЦветов/(КоличествоСерий/2));
			ОсталосьСерий = КоличествоСерий/2-1;
			инд = 1;
			Для ТекСерия = НачальнаяСерия По КонечнаяСерия Цикл
				
				Узлы.Добавить(Новый Структура("номУзла,КолСерий,номЦвета",текСерия,1,КоличествоЦветов - Коэф*ТекСерия-1));
				
			КонецЦикла;
			
		КонецЕсли;
		Узлы.Добавить(Новый Структура("номУзла,КолСерий,номЦвета",КоличествоСерий/2-1,1,0));
		
		//бОбратныйОбходСерий = (		ТипДиаграммыЗначение = "ГистограммаГоризонтальнаяОбъемная"
		//ИЛИ ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная");
		бОбратныйОбходСерий = (		ТипДиаграммыЗначение = "ГистограммаГоризонтальнаяОбъемная"
									Или	ТипДиаграммыЗначение = "ГистограммаГоризонтальная"
									ИЛИ	ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальная"
									ИЛИ	ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная"
									ИЛИ	ТипДиаграммыЗначение = "ГистограммаНормированнаяГоризонтальная"
									ИЛИ	ТипДиаграммыЗначение = "ГистограммаНормированнаяГоризонтальнаяОбъемная");
		
		//
		Если бОбратныйОбходСерий Тогда
			ТекущаяСерия = 0;
		Иначе
			ТекущаяСерия = ТабДиаграмма.Серии.Количество() - 1;
		КонецЕсли;
		Для Каждого Узел Из Узлы Цикл
			Для ст = 0 По Узел.КолСерий Цикл
				Серия = ТабДиаграмма.Серии[ТекущаяСерия];
				
				Если бОбратныйОбходСерий Тогда
					ТекущаяСерия = ТекущаяСерия + 1;
				Иначе
					ТекущаяСерия = ТекущаяСерия - 1;
				КонецЕсли;
				
				Если Серия.Цвет = WebЦвета.СеребристоСерый Тогда
					Продолжить;
				КонецЕсли;
				
				Если Серия.Цвет = WebЦвета.СветлоЗолотистый Тогда
					Продолжить;
				КонецЕсли;
				
				Если Серия.Цвет = ЦветУдачнойСерии Тогда
					Продолжить;
				КонецЕсли;
				
				Серия.Цвет = ЦветоваяГамма.Получить(Узел.номЦвета).Значение;
			КонецЦикла;
		КонецЦикла;
	//КонецЕсли;
	
	ТабДиаграмма.АвтоТранспонирование = Истина;
	ТабДиаграмма.Обновление = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ СЕРВЕР

&НаСервереБезКонтекста
Функция ПолучитьМассивДокументовПланированиеВоронкиПродаж(ВоронкаПродаж, ОбъектПланирования, Этап, ЗначениеОбъектаПланирования)
	СтрУсловие = "";
	Если ЗначениеЗаполнено(ЗначениеОбъектаПланирования) Тогда
		СтрУсловие = СтрУсловие + " И ЗначениеОбъектаПланирования = &ЗначениеОбъектаПланирования";
	КонецЕсли;
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПланыПоВоронкамПродаж.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.CRM_ПланыПоВоронкамПродаж.СрезПоследних(&Период, ВоронкаПродаж = &ВоронкаПродаж И ОбъектПланирования = &ОбъектПланирования И Этап = &Этап " + СтрУсловие + ") КАК ПланыПоВоронкамПродаж
	|СГРУППИРОВАТЬ ПО
	|	ПланыПоВоронкамПродаж.Регистратор
	|");
	Запрос.УстановитьПараметр("Период",								CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("ВоронкаПродаж",						ВоронкаПродаж);
	Запрос.УстановитьПараметр("ОбъектПланирования",					ОбъектПланирования);
	Запрос.УстановитьПараметр("Этап",								Этап);
	Если ЗначениеЗаполнено(ЗначениеОбъектаПланирования) Тогда
		Запрос.УстановитьПараметр("ЗначениеОбъектаПланирования",	ЗначениеОбъектаПланирования);
	КонецЕсли;
	ТаблицаДанные = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанные.Количество() = 0 И ЗначениеЗаполнено(ЗначениеОбъектаПланирования) Тогда
		СтрУсловие = "";
		Если ТипЗнч(ЗначениеОбъектаПланирования) = Тип("СправочникСсылка.Пользователи") Тогда
			СтрУсловие = СтрУсловие + " И ЗначениеОбъектаПланирования = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
		ИначеЕсли ТипЗнч(ЗначениеОбъектаПланирования) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			СтрУсловие = СтрУсловие + " И ЗначениеОбъектаПланирования = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		Иначе
			Возврат ТаблицаДанные.ВыгрузитьКолонку("Регистратор");
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ПланыПоВоронкамПродаж.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.CRM_ПланыПоВоронкамПродаж.СрезПоследних(&Период, ВоронкаПродаж = &ВоронкаПродаж И ОбъектПланирования = &ОбъектПланирования И Этап = &Этап " + СтрУсловие + ") КАК ПланыПоВоронкамПродаж
		|СГРУППИРОВАТЬ ПО
		|	ПланыПоВоронкамПродаж.Регистратор
		|");
		Запрос.УстановитьПараметр("Период",								CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		Запрос.УстановитьПараметр("ВоронкаПродаж",						ВоронкаПродаж);
		Запрос.УстановитьПараметр("ОбъектПланирования",					ОбъектПланирования);
		Запрос.УстановитьПараметр("Этап",								Этап);
		
		ТаблицаДанные = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаДанные.ВыгрузитьКолонку("Регистратор");
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	ОтборПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц);
	
	ВосстановленныеНастройки = CRM_ХранилищеНастроек.Загрузить("Обработка.CRM_ВоронкаПродаж.Форма", "НастройкиФормы");
	Если ТипЗнч(ВосстановленныеНастройки) = Тип("Структура") Тогда
		Если ИспользоватьБизнесПроцессы Тогда
			Если ВосстановленныеНастройки.Свойство("Воронка") И ТипЗнч(ВосстановленныеНастройки.Воронка) = Тип("СправочникСсылка.CRM_ВоронкиПродаж") Тогда
				Если НЕ ВосстановленныеНастройки.Воронка.ПометкаУдаления Тогда
					Воронка = ВосстановленныеНастройки.Воронка;
					Попытка
						ОбъектВоронка = Воронка.ПолучитьОбъект();
						Если ОбъектВоронка = Неопределено Тогда
							Воронка = Справочники.CRM_ВоронкиПродаж.Интересы;
						КонецЕсли;
					Исключение
						Воронка = Справочники.CRM_ВоронкиПродаж.Интересы;
					Конецпопытки;
				Иначе
					Воронка = Справочники.CRM_ВоронкиПродаж.Интересы;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Воронка = Справочники.CRM_ВоронкиПродаж.Интересы;
		КонецЕсли;
		Если ВосстановленныеНастройки.Свойство("ОтборПериод") И ТипЗнч(ВосстановленныеНастройки.ОтборПериод) = Тип("СтандартныйПериод") Тогда
			ОтборПериод = ВосстановленныеНастройки.ОтборПериод;
		КонецЕсли;
	КонецЕсли;
	
	РежимВоронки = "Активные";
	
	ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная";
	
	Показатель = "Количество";
	ГруппировкаЗначение = ПредставлениеГруппировкаНеГруппировать();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	СтруктураНастройки = Новый Структура();
	
	СтруктураНастройки.Вставить("Воронка", Воронка);
	СтруктураНастройки.Вставить("ОтборПериод", ОтборПериод);
	
	CRM_ХранилищеНастроек.Сохранить("Обработка.CRM_ВоронкаПродаж.Форма", "НастройкиФормы", СтруктураНастройки);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоЗадачам()
	ЭтапСобытия = Неопределено;
	ТочкаМаршрутаСобытия = Неопределено;
	
	бЕстьСобытие = Ложь;
	
	// Создание и настройка схемы компоновки данных
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанныхЗадачи";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанныхСобытия";
	НаборДанных.ИсточникДанных = "ИсточникДанныхЗадачи";
	
	НаборДанных.Запрос = CRM_ВоронкиПродажСервер.ВоронкаПродажПолучитьТекстЗапроса(ЭтотОбъект);
	
	НастройкиСКД = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанные));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// Пропускаем системные поля
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
	КонецЦикла;
	
	КартыИТочкиМаршрутаВоронки = ПолучитьВсеКартыИТочкиМаршрутаВоронки();
	
	ДатаНачалаПериода = ?(ЗначениеЗаполнено(ОтборПериод.ДатаНачала), НачалоДня(ОтборПериод.ДатаНачала), '00010101');
	ДатаОкончанияПериода = ?(ЗначениеЗаполнено(ОтборПериод.ДатаОкончания), КонецДня(ОтборПериод.ДатаОкончания), КонецДня(ТекущаяДатаСеанса()));
	
	ГоризонтВоронки = ДатаОкончанияПериода;
	ГоризонтВоронкиПрогноз = ГоризонтВоронки;
	
	ДатаКонецПериода = ?(ЗначениеЗаполнено(ОтборПериод.ДатаОкончания), КонецДня(ОтборПериод.ДатаОкончания), КонецДня(ТекущаяДатаСеанса()));
	
	// Установка обязательных параметров запроса
	НастройкиСКД.ПараметрыДанных.Элементы.Очистить();
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекущаяДата");
	Параметр.Значение = НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Воронка");
	Параметр.Значение = Воронка;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода");
	Параметр.Значение = ДатаНачалаПериода;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода");
	Параметр.Значение = ДатаКонецПериода;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронки");
	Параметр.Значение = ГоризонтВоронки;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронкиПрогноз");
	Параметр.Значение = ГоризонтВоронкиПрогноз;
	Параметр.Использование = Истина;
	
	////Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	////Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ПользовательПодразделение");
	////Параметр.Значение = ПользовательПодразделение;
	////Параметр.Использование = Истина;
	//
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ОтборПодразделение");
	Параметр.Значение = ОтборПодразделение;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ОтборОтветственные");
	Параметр.Значение = ОтборОтветственные;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Календарь");
	Параметр.Значение = ?(ОтборПодразделение.ГрафикРаботы.Пустая(), Константы.ОсновнойКалендарьПредприятия.Получить(), ОтборПодразделение.ГрафикРаботы);
	Параметр.Использование = Истина;
	
	Если ЕстьЭтапыПоДокументам Тогда
		Для Каждого ЭтапВоронки ИЗ ЭтапыТекущейВоронки Цикл
			Если ЭтапВоронки.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
				
				ИмяПараметраЭтапа = "_"+СтрЗаменить(ЭтапВоронки.Этап.УникальныйИдентификатор(),"-","_");
				
				Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
				Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметраЭтапа);
				Параметр.Значение = ЭтапВоронки.Этап;
				Параметр.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОтбиратьПоТегам Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("СписокОбъектовСТегами");
		Параметр.Значение = СписокОбъектовСТегами;
		Параметр.Использование = Истина;
	КонецЕсли;
	
	СписокПараметровРасшифровки.Очистить();
	СписокПараметровРасшифровки.Добавить(ДатаНачалаПериода, "ПараметрНачалоПериода"); 
	СписокПараметровРасшифровки.Добавить(ДатаКонецПериода, "ПараметрКонецПериода");
	СписокПараметровРасшифровки.Добавить(ГоризонтВоронки, "ПараметрГоризонтВоронки");
	СписокПараметровРасшифровки.Добавить(ГоризонтВоронкиПрогноз, "ПараметрГоризонтВоронкиПрогноз");
	СписокПараметровРасшифровки.Добавить(РежимВоронки, "ПараметрТипВоронки");
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КартыМаршрута");
	Параметр.Значение = КартыИТочкиМаршрутаВоронки.Карты;
	Параметр.Использование = Истина;
	
	// Отбор
	НастройкиСКД.Отбор.Элементы.Очистить();
	
	Если ЕстьЭтапыПоИнтересам Тогда
		МассивСсылокОтбора = ПолучитьДанныеДинСписка(ОтборИнтересов, "Ссылка").ВыгрузитьКолонку("Ссылка");
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "ОтборИнтерес", ВидСравненияКомпоновкиДанных.ВСписке, МассивСсылокОтбора, Истина);
	КонецЕсли;
	Если ЕстьЭтапыПоКартамМаршрута Тогда
		МассивСсылокОтбора = ПолучитьДанныеДинСписка(ОтборБизнесПроцессов, "Ссылка").ВыгрузитьКолонку("Ссылка");
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "ОтборБизнесПроцесс", ВидСравненияКомпоновкиДанных.ВСписке, МассивСсылокОтбора, Истина);
	КонецЕсли;
	Если ЕстьЭтапыПоДокументам Тогда
		ОтборДокументы.ТекстЗапроса = CRM_ВоронкиПродажСервер.ВоронкаПродажПолучитьТекстЗапросаФильтраДокументов(ЭтотОбъект);
		МассивСсылокОтбора = ПолучитьДанныеДинСписка(ОтборДокументы, "Ссылка").ВыгрузитьКолонку("Ссылка");
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "ОтборДокумент", ВидСравненияКомпоновкиДанных.ВСписке, МассивСсылокОтбора, Истина);
	КонецЕсли;
	
	Если (ОтборОтветственные.Количество()>0 ИЛИ ЗначениеЗаполнено(ОтборПодразделение))
	И ЗначениеЗаполнено(СравнитьСПользовательПодразделение) И НЕ СравнитьСПользовательПодразделение = "Плановые показатели" Тогда
		
		Если ЗначениеЗаполнено(ОтборПодразделение) И ТипЗнч(СравнитьСПользовательПодразделение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			ИмяПоляОтбора = "Подразделение";
			
			СписокОтбор = Новый СписокЗначений();
			СписокОтбор.Добавить(ОтборПодразделение);
			СписокОтбор.Добавить(СравнитьСПользовательПодразделение);
			УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, ИмяПоляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, СписокОтбор, Истина);
			
		ИначеЕсли ЗначениеЗаполнено(ОтборПодразделение) Тогда
			
			МассивЗначений = Новый Массив;
			СтруктураОтбора = Новый Структура("ИмяПоляОтбора, ЗначениеОтбора","Подразделение",ОтборПодразделение);
			МассивЗначений.Добавить(СтруктураОтбора);
			
			Если ТипЗнч(СравнитьСПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
				СтруктураОтбора = Новый Структура("ИмяПоляОтбора, ЗначениеОтбора","Пользователь",СравнитьСПользовательПодразделение);
			Иначе
				СтруктураОтбора = Новый Структура("ИмяПоляОтбора, ЗначениеОтбора","Подразделение",СравнитьСПользовательПодразделение);
			КонецЕсли;
			МассивЗначений.Добавить(СтруктураОтбора);
			
			УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "ПользовательПодразделение", ВидСравненияКомпоновкиДанных.Равно, МассивЗначений, Истина,,Истина);
			
		ИначеЕсли ОтборОтветственные.Количество() > 0 И ТипЗнч(СравнитьСПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ИмяПоляОтбора = "Пользователь";
			
			СписокОтбор = Новый СписокЗначений();
			Для Каждого ЭлементСписка ИЗ ОтборОтветственные Цикл
				СписокОтбор.Добавить(ЭлементСписка.Значение);
			КонецЦИкла;
			СписокОтбор.Добавить(СравнитьСПользовательПодразделение);
			УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, ИмяПоляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, СписокОтбор, Истина);
			
		ИначеЕсли ОтборОтветственные.Количество() > 0 Тогда
			
			МассивЗначений = Новый Массив;
			Для Каждого ЭлементСписка ИЗ ОтборОтветственные Цикл
				СтруктураОтбора = Новый Структура("ИмяПоляОтбора, ЗначениеОтбора","Пользователь",ЭлементСписка.Значение);
				МассивЗначений.Добавить(СтруктураОтбора);
			КонецЦикла;
			
			Если ТипЗнч(СравнитьСПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
				СтруктураОтбора = Новый Структура("ИмяПоляОтбора, ЗначениеОтбора","Пользователь",СравнитьСПользовательПодразделение);
			Иначе
				СтруктураОтбора = Новый Структура("ИмяПоляОтбора, ЗначениеОтбора","Подразделение",СравнитьСПользовательПодразделение);
			КонецЕсли;
			МассивЗначений.Добавить(СтруктураОтбора);
			
			УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "ПользовательПодразделение", ВидСравненияКомпоновкиДанных.Равно, МассивЗначений, Истина,,Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОфис) Тогда
		ИмяПоляОтбора = "Офис";
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, ИмяПоляОтбора, ВидСравненияКомпоновкиДанных.Равно, ОтборОфис, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтветственные) Тогда
		ИмяПоляОтбора = "Пользователь";
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, ИмяПоляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, ОтборОтветственные, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		ИмяПоляОтбора = "Подразделение";
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, ИмяПоляОтбора, ВидСравненияКомпоновкиДанных.Равно, ОтборПодразделение, Истина);
	КонецЕсли;
	
	Если ОтборТипыУслуг.Количество() > 0 Тогда
		ИмяПоляОтбора = "ТипУслуги";
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, ИмяПоляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, ОтборТипыУслуг, Истина);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанные, НастройкиСКД,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Возврат РезультатТаблица;
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляФормированияВоронки()
	
	Возврат ПолучитьДанныеПоЗадачам();
	
КонецФункции

&НаСервере
Функция ПолучитьПлановыеДанные()
	СтрУсловие = "";
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		
		СтрУсловие = " И ОбъектПланирования = ЗНАЧЕНИЕ(Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение)";
		
	ИначеЕсли ОтборОтветственные.Количество()>0 Тогда
		
		СтрУсловие = " И ОбъектПланирования = ЗНАЧЕНИЕ(Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер)";
		
	Иначе
		
		СтрУсловие = " И ОбъектПланирования = ЗНАЧЕНИЕ(Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Предприятие)";
		
	КонецЕсли;
	//Если ЗначениеЗаполнено(ПользовательПодразделение) Тогда
	//	Если ГруппировкаЗначение = ПредставлениеГруппировкаПользователи() Тогда
	//		СтрУсловие = " И ОбъектПланирования = ЗНАЧЕНИЕ(Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер)";
	//	ИначеЕсли ГруппировкаЗначение = ПредставлениеГруппировкаПодразделения() Тогда
	//		СтрУсловие = " И ОбъектПланирования = ЗНАЧЕНИЕ(Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение)";
	//	Иначе
	//		Если ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
	//			СтрУсловие = " И ОбъектПланирования = ЗНАЧЕНИЕ(Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер)";
	//		ИначеЕсли ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
	//			СтрУсловие = " И ОбъектПланирования = ЗНАЧЕНИЕ(Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение)";
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ГруппировкаЗначение = ПредставлениеГруппировкаНеГруппировать() Тогда
	//	СтрУсловие = " И ОбъектПланирования = ЗНАЧЕНИЕ(Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Предприятие)";
	//КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланыПоВоронкамПродаж.ОбъектПланирования			КАК ОбъектПланирования,
	|	ПланыПоВоронкамПродаж.ЗначениеОбъектаПланирования	КАК ЗначениеОбъектаПланирования,
	|	ПланыПоВоронкамПродаж.Этап							КАК Этап,
	|	СУММА(ПланыПоВоронкамПродаж.Количество)				КАК Количество,
	|	СУММА(ПланыПоВоронкамПродаж.Сумма)					КАК Сумма,
	|	СУММА(ПланыПоВоронкамПродаж.СуммаПотенциальная)		КАК СуммаПотенциальная
	|ИЗ
	|	РегистрСведений.CRM_ПланыПоВоронкамПродаж.СрезПоследних(
	|			&Период,
	|			ВоронкаПродаж = &ВоронкаПродаж
	|				И Регистратор.ВариантПланирования = &ВариантПланирования" + СтрУсловие + ") КАК ПланыПоВоронкамПродаж
	|	
	|СГРУППИРОВАТЬ ПО
	|	ПланыПоВоронкамПродаж.ОбъектПланирования,
	|	ПланыПоВоронкамПродаж.ЗначениеОбъектаПланирования,
	|	ПланыПоВоронкамПродаж.Этап
	|";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период",			CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("ВоронкаПродаж",	Воронка);
	Запрос.УстановитьПараметр("ВариантПланирования",?(РежимВоронки="Активные",Перечисления.CRM_ВариантыПланированияВоронки.Эталон,Перечисления.CRM_ВариантыПланированияВоронки.ПоКоличеству));
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаДанные = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДанные;
КонецФункции

&НаСервере
Функция ПолучитьМассивСуществующихВоронок()
	//Если ИспользоватьБизнесПроцессы Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ВоронкиПродаж
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВоронкиПродаж.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания ВОЗР
		|");
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	//Иначе
	//	МассивРезультат = Новый Массив();
	//	МассивРезультат.Добавить(Справочники.CRM_ВоронкиПродаж.ПоДокументам);
	//	Возврат МассивРезультат;
	//КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьВсеКартыИТочкиМаршрутаВоронки()
	МассивКарты = Новый Массив();
	МассивТочки = Новый Массив();
	
	Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
		Для Каждого СтрокаСостав Из СтрокаЭтап.Состав Цикл
			Если МассивКарты.Найти(СтрокаСостав.КартаМаршрута) = Неопределено Тогда
				МассивКарты.Добавить(СтрокаСостав.КартаМаршрута);
			КонецЕсли;
			Если МассивТочки.Найти(СтрокаСостав.ТочкаМаршрута) = Неопределено Тогда
				МассивТочки.Добавить(СтрокаСостав.ТочкаМаршрута);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("Карты,Точки", МассивКарты, МассивТочки);
КонецФункции

&НаСервере
Функция РассчитатьПоказательПлан(ДанныеПлан, Этап, Знач ВидПоказателя = Неопределено, ЗначениеТекущейГруппировки = Неопределено, ОбъектПланирования = Неопределено)
	Если Не ЗначениеЗаполнено(ВидПоказателя) Тогда
		ВидПоказателя = Показатель;
	КонецЕсли;
	СтруктураПоиска = Новый Структура("Этап", Этап);
	
	ЗначениеОбъектаПланирования = Неопределено;
	Если ЗначениеЗаполнено(ЗначениеТекущейГруппировки) Тогда
		ЗначениеОбъектаПланирования = ЗначениеТекущейГруппировки;
	ИначеЕсли ОтборОтветственные.Количество()>0 ИЛИ ЗначениеЗаполнено(ОтборПодразделение) Тогда
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			ЗначениеОбъектаПланирования = ОтборПодразделение;
		Иначе
			Если ОтборОтветственные.Количество()=1 Тогда
				ЗначениеОбъектаПланирования = ОтборОтветственные[0].Значение;
			Иначе
				ЗначениеОбъектаПланирования = ОтборОтветственные;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ТипЗнч(ЗначениеОбъектаПланирования) = Тип("СписокЗначений")) И ЗначениеЗаполнено(ЗначениеОбъектаПланирования) Тогда
		СтруктураПоиска.Вставить("ЗначениеОбъектаПланирования", ЗначениеОбъектаПланирования);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектПланирования) Тогда
		Если ОтборОтветственные.Количество()>0 ИЛИ ЗначениеЗаполнено(ОтборПодразделение) Тогда
			Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
				ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение;
			Иначе
				ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ОбъектПланирования", ОбъектПланирования);
	
	ЗначениеПоказателя = 0;
	
	НайденныеСтроки = ДанныеПлан.НайтиСтроки(СтруктураПоиска);
	//Если НайденныеСтроки.Количество() = 0 И ЗначениеЗаполнено(ЗначениеОбъектаПланирования) Тогда
	//	Если ЗначениеЗаполнено(ОбъектПланирования) Тогда
	//		Если ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер Тогда
	//			СтруктураПоиска.ЗначениеОбъектаПланирования = Справочники.Пользователи.ПустаяСсылка();
	//		ИначеЕсли ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение Тогда
	//			СтруктураПоиска.ЗначениеОбъектаПланирования = Справочники.СтруктураПредприятия.ПустаяСсылка();
	//		Иначе
	//			СтруктураПоиска.ЗначениеОбъектаПланирования = Неопределено;
	//		КонецЕсли;
	//	Иначе
	//		Если ТипЗнч(ЗначениеОбъектаПланирования) = Тип("СправочникСсылка.Пользователи") Тогда
	//			СтруктураПоиска.Вставить("ОбъектПланирования", Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер);
	//			СтруктураПоиска.ЗначениеОбъектаПланирования = Справочники.Пользователи.ПустаяСсылка();
	//		ИначеЕсли ТипЗнч(ЗначениеОбъектаПланирования) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
	//			СтруктураПоиска.Вставить("ОбъектПланирования", Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение);
	//			СтруктураПоиска.ЗначениеОбъектаПланирования = Справочники.СтруктураПредприятия.ПустаяСсылка();
	//		КонецЕсли;
	//	КонецЕсли;
	//	НайденныеСтроки = ДанныеПлан.НайтиСтроки(СтруктураПоиска);
	//КонецЕсли;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если ТипЗнч(ЗначениеОбъектаПланирования) = Тип("СписокЗначений") Тогда
			Если ЗначениеОбъектаПланирования.НайтиПоЗначению(НайденнаяСтрока.ЗначениеОбъектаПланирования) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидПоказателя = "Количество" Тогда
			ЗначениеПоказателя = ЗначениеПоказателя + НайденнаяСтрока.Количество;
		ИначеЕсли ВидПоказателя = "Сумма" Тогда
			ЗначениеПоказателя = ЗначениеПоказателя + НайденнаяСтрока.Сумма;
		ИначеЕсли ВидПоказателя = "СуммаПотенциальная" Тогда
			ЗначениеПоказателя = ЗначениеПоказателя + НайденнаяСтрока.СуммаПотенциальная;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеПоказателя;
КонецФункции

&НаСервере
Функция РассчитатьПроцентВыполнения(Знач ЗначениеПлан, Знач ЗначениеФакт)
	ПроцентВыполнения = 0;
	Если ЗначениеФакт = 0 И ЗначениеПлан = 0 Тогда
		ПроцентВыполнения = 100;
	ИначеЕсли ЗначениеФакт = 0 И ЗначениеПлан < 0 Тогда
		ПроцентВыполнения = 100;
	ИначеЕсли ЗначениеФакт > 0 И ЗначениеПлан = 0 Тогда
		ПроцентВыполнения = 100;
	ИначеЕсли ЗначениеФакт < 0 И ЗначениеПлан = 0 Тогда
		ПроцентВыполнения = 0;
	Иначе
		ПроцентВыполнения = Окр(ЗначениеФакт / ЗначениеПлан * 100, 2);
	КонецЕсли;
	
	Если ПроцентВыполнения > 79 Тогда
		ЦветПроцента = WebЦвета.Зеленый;
	ИначеЕсли ПроцентВыполнения > 49 Тогда
		ЦветПроцента = WebЦвета.Золотистый;
	Иначе
		ЦветПроцента = WebЦвета.Красный;
	КонецЕсли;
	
	Возврат Новый Структура("ПроцентЗначение,ПроцентПредставление,Цвет",
		ПроцентВыполнения, Формат(ПроцентВыполнения, "ЧН=0; ЧГ=") + "%", ЦветПроцента);
КонецФункции

&НаСервере
Функция РассчитатьПоказательДляЭтапа(ДанныеТекущие, Этап, ВидПоказателя = Неопределено, ЗначениеТекущейГруппировки = Неопределено, ИмяТекущейГруппировки = Неопределено, Успешные = Неопределено, Активные = Ложь)
	
	РассчитанныеПоказатели = Новый Структура("Показатель,ПоказательКоличество,ПоказательСумма,ПоказательСуммаПотенциальная,ПоказательПроцент",0,0,0,0,"");
	
	СтруктураПоиска = Новый Структура("Этап");
	Если ЗначениеЗаполнено(ИмяТекущейГруппировки) Тогда
		Если ТипЗнч(ЗначениеТекущейГруппировки) = Тип("СправочникСсылка.Пользователи") Тогда
			СтруктураПоиска.Вставить("Пользователь", ЗначениеТекущейГруппировки);
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеТекущейГруппировки) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			СтруктураПоиска.Вставить("Подразделение", ЗначениеТекущейГруппировки);
		КонецЕсли;
		
		//СтруктураПоиска.Вставить(ИмяТекущейГруппировки);
		//СтруктураПоиска[ИмяТекущейГруппировки] = ЗначениеТекущейГруппировки;
	КонецЕсли;
	
	СтруктураПоискаСтатистика = Новый Структура("Этап");
	
	ЗначениеПоказателя = 0;
	ЗначениеАктивные = 0;
	ЗначениеУспешные = 0;
	ЗначениеНеудачные = 0;
	ЗначениеВсеЗадачи = 0;
	ОбщееКоличествоОбработанныхЗадач = 0;
	
	СтруктураПоиска.Этап = Этап;
	СтруктураПоискаСтатистика.Этап = Этап;
	
	ЭтоСобытия = Ложь;
	//Для Каждого тЭл Из Этап.Состав Цикл
	//	Если тЭл.ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
	//		// это первый этап, на котором учитываются события - для первого конверсия считается по всем завершенным БП, а не по завершенным этого этапа
	//		ЭтоСобытия = Истина;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВидПоказателя) Тогда
		ВидПоказателя = Показатель;
	КонецЕсли;
	
	НайденныеСтроки = ДанныеТекущие.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если ТипЗнч(ЗначениеТекущейГруппировки) = Тип("СписокЗначений") Тогда
			Если ИмяТекущейГруппировки = "Пользователь" Тогда
				Если ЗначениеТекущейГруппировки.НайтиПоЗначению(НайденнаяСтрока.Пользователь) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ЗначениеТекущейГруппировки.НайтиПоЗначению(НайденнаяСтрока.Подразделение) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//ЗначениеПоказателя	= ЗначениеПоказателя + НайденнаяСтрока.СуммаАктивные+НайденнаяСтрока.СуммаУспешно+НайденнаяСтрока.СуммаНеудачно;
		
		Если РежимВоронки = "Активные" Тогда
			ЗначениеПоказателя	= ЗначениеПоказателя + НайденнаяСтрока.СуммаАктивные;
			ЗначениеАктивные = ЗначениеАктивные + НайденнаяСтрока.СуммаАктивные;
			ЗначениеУспешные = 0;
			ЗначениеНеудачные = 0;
		ИначеЕсли РежимВоронки = "Закрытые" Тогда
			ЗначениеПоказателя	= ЗначениеПоказателя + НайденнаяСтрока.СуммаУспешно + НайденнаяСтрока.СуммаНеудачно;
			ЗначениеАктивные = 0;
			ЗначениеУспешные = ЗначениеУспешные + НайденнаяСтрока.СуммаУспешно;
			ЗначениеНеудачные = ЗначениеНеудачные + НайденнаяСтрока.СуммаНеудачно;
		ИначеЕсли РежимВоронки = "Все" Тогда
			ЗначениеПоказателя	= ЗначениеПоказателя + НайденнаяСтрока.СуммаАктивные+НайденнаяСтрока.СуммаУспешно+НайденнаяСтрока.СуммаНеудачно;
			ЗначениеАктивные = ЗначениеАктивные + НайденнаяСтрока.СуммаАктивные;
			ЗначениеУспешные = ЗначениеУспешные + НайденнаяСтрока.СуммаУспешно;
			ЗначениеНеудачные = ЗначениеНеудачные + НайденнаяСтрока.СуммаНеудачно;
		КонецЕсли;
		
		Если Активные Тогда
			РассчитанныеПоказатели.ПоказательКоличество = РассчитанныеПоказатели.ПоказательКоличество + НайденнаяСтрока.КоличествоАктивные;
			РассчитанныеПоказатели.ПоказательСумма		= РассчитанныеПоказатели.ПоказательСумма + НайденнаяСтрока.СуммаАктивные;
		Иначе
			РассчитанныеПоказатели.ПоказательКоличество = РассчитанныеПоказатели.ПоказательКоличество + ?(Успешные = Неопределено,
																										НайденнаяСтрока.КоличествоАктивные+НайденнаяСтрока.КоличествоУспешно+НайденнаяСтрока.КоличествоНеудачно,
																										?(Успешные, НайденнаяСтрока.КоличествоУспешно, НайденнаяСтрока.КоличествоНеудачно));
			РассчитанныеПоказатели.ПоказательСумма		= РассчитанныеПоказатели.ПоказательСумма + ?(Успешные = Неопределено,
																								   НайденнаяСтрока.СуммаАктивные+НайденнаяСтрока.СуммаУспешно+НайденнаяСтрока.СуммаНеудачно,
																								   ?(Успешные, НайденнаяСтрока.СуммаУспешно, НайденнаяСтрока.СуммаНеудачно));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидПоказателя = "Количество" Тогда
		РассчитанныеПоказатели.Показатель = РассчитанныеПоказатели.ПоказательКоличество;
	ИначеЕсли ВидПоказателя = "Сумма" Тогда
		
		РассчитанныеПоказатели.Показатель = РассчитанныеПоказатели.ПоказательСумма;
		
	КонецЕсли;
	
	Возврат РассчитанныеПоказатели;
КонецФункции

&НаСервере 
Процедура ОбновитьЗаголовокОтборов()

	ТекстЗаголовка = "";
	
	Если ОтборОтветственные.Количество() > 0 Тогда
		Для каждого ТекОтветственный Из ОтборОтветственные Цикл
			ТекстЗаголовка = ТекстЗаголовка + " " + ТекОтветственный.Значение + ",";	
		КонецЦикла; 		 		
	КонецЕсли; 	

	Если НЕ ОтборПодразделение.Пустая() > 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " " + ОтборПодразделение + ",";	
	КонецЕсли; 
	
	Если НЕ ОтборОфис.Пустая() > 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " " + ОтборОфис + ",";
	КонецЕсли; 
	
	ТекстЗаголовка = ТекстЗаголовка + " " + Формат(ОтборПериод.ДатаНачала, "ДФ=dd.MM.yyyy") + "-";	
	ТекстЗаголовка = ТекстЗаголовка +  Формат(ОтборПериод.ДатаОкончания, "ДФ=dd.MM.yyyy") + ",";
	
	Если ОтборТипыУслуг.Количество() > 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " тип услуги:";
		Для каждого ТекТипУслуги Из ОтборТипыУслуг Цикл
			ТекстЗаголовка = ТекстЗаголовка + " " + ТекТипУслуги.Значение + ",";	
		КонецЦикла;
	КонецЕсли; 
	
	Если ОтборТеги.Количество() > 0 Тогда
		ОтмеченТег = Ложь;
		ТекстЗаголовкаТеги = " Теги:";
		Для каждого ТекТег Из ОтборТеги Цикл
			Если ТекТег.Пометка Тогда
				ОтмеченТег = Истина;
				ТекстЗаголовкаТеги = ТекстЗаголовкаТеги + " " + ТекТег.Значение + ",";
			КонецЕсли; 				
		КонецЦикла;
		Если ОтмеченТег Тогда
			ТекстЗаголовка = ТекстЗаголовка + ТекстЗаголовкаТеги;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Прав(ТекстЗаголовка, 1) = "," Тогда
		ТекстЗаголовка = Лев(ТекстЗаголовка, СтрДлина(ТекстЗаголовка)-1);
	КонецЕсли; 
	
	Элементы.Отборы.Заголовок = "Отборы: " + ТекстЗаголовка;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграммуНаСервере()
	
	Если Не ЗначениеЗаполнено(Воронка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана воронка продаж!'"),,"Воронка");
		Возврат;
	КонецЕсли;
	
	ОбновитьЗаголовокОтборов();
	
	ЦветУдачнойСерии = WebЦвета.БледноЗеленый;
	//ЗаполнитьТаблицуЭтапыТекущейВоронкиИСоответствиеТочекМаршрута();
	
	Если ЕстьЭтапыПоДокументам ИЛИ ЕстьЭтапыПоКартамМаршрута Тогда
		ОбновитьЗначенияОтбораТегов();
	КонецЕсли;
	
	ДанныеТекущие = ПолучитьДанныеДляФормированияВоронки();
	
	Если ОтображатьПлановыеПоказатели Тогда
		ДанныеПлан		= ПолучитьПлановыеДанные();
	КонецЕсли;
	
	ПолеГруппировки = "";
	Если ГруппировкаЗначение = ПредставлениеГруппировкаПользователи() Тогда
		ПолеГруппировки = "Пользователь";
	ИначеЕсли ГруппировкаЗначение = ПредставлениеГруппировкаПодразделения() Тогда
		ПолеГруппировки = "Подразделение";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолеГруппировки) Тогда
		
		Если ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
			Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
				ПолеГруппировки = "Подразделение";
			ИначеЕсли ОтборОтветственные.Количество() > 0 Тогда
				ПолеГруппировки = "Пользователь";
			КонецЕсли;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ПользовательПодразделение) И ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
		//	Если ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
		//		ПолеГруппировки = "Пользователь";
		//	Иначе
		//		ПолеГруппировки = "Подразделение";
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	КоличествоУспешноВсего = 0;
	КоличествоНеудачноВсего = 0;
	КоличествоАктивныеВсего = 0;
	
	Если ДанныеТекущие.Количество() > 0 Тогда
		КоличествоНеудачноВсего = ?(ЗначениеЗаполнено(ДанныеТекущие[0].НеудачноИтог), ДанныеТекущие[0].НеудачноИтог, 0);
		КоличествоУспешноВсего = ?(ЗначениеЗаполнено(ДанныеТекущие[0].УспешноИтог), ДанныеТекущие[0].УспешноИтог, 0);
		ДлительностьНеудачноВсего = ?(ЗначениеЗаполнено(ДанныеТекущие[0].НеудачноДлительность), ДанныеТекущие[0].НеудачноДлительность, 0);
		ДлительностьУспешноВсего = ?(ЗначениеЗаполнено(ДанныеТекущие[0].УспешноДлительность), ДанныеТекущие[0].УспешноДлительность, 0);
	КонецЕсли;
	
	Если КоличествоУспешноВсего = 0 ИЛИ (КоличествоУспешноВсего + КоличествоНеудачноВсего) <= 0 Тогда
		ОбщаяКонверсияПоКомпании = 0;
		ОбщаяДлительность = 0;
	Иначе
		ОбщаяКонверсияПоКомпании = 100*(КоличествоУспешноВсего / (КоличествоУспешноВсего + КоличествоНеудачноВсего));
		ОбщаяДлительность = Окр((ДлительностьНеудачноВсего + ДлительностьУспешноВсего) / (КоличествоУспешноВсего + КоличествоНеудачноВсего), 0);
	КонецЕсли;
	
	Элементы.ДекорацияОбщийПоказательКонверсии.Заголовок = НСтр("ru = 'Общая конверсия - '")+ Формат(ОбщаяКонверсияПоКомпании,"ЧЦ=3; ЧДЦ=; ЧН=0") + "%";
	
	Элементы.ДекорацияСредняяДлительностьИнтересов.Заголовок = НСтр("ru = 'Средняя длительность - '")+ Строка(ОбщаяДлительность)+ НСтр("ru = ' дней'");
	Элементы.ДекорацияСредняяДлительностьИнтересов.Видимость = ЕстьЭтапыПоИнтересам ИЛИ ЕстьЭтапыПоКартамМаршрута;
	
	Если ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			ПолеГруппировки = "Подразделение";
		ИначеЕсли ОтборОтветственные.Количество() > 0 Тогда
			ПолеГруппировки = "Пользователь";
		КонецЕсли;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ПользовательПодразделение) И ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
	//	Если ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
	//		ПолеГруппировки = "Пользователь";
	//	Иначе
	//		ПолеГруппировки = "Подразделение";
	//	КонецЕсли;
	//КонецЕсли;
	
	ОписаниеТиповЭтап			= Новый ОписаниеТипов("СправочникСсылка.CRM_ВоронкиПродаж, Строка");
	ОписаниеТиповЧислоЦелое		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ОписаниеТиповГруппировка	= Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.СтруктураПредприятия, СписокЗначений, Неопределено");
	ОписаниеТиповСумма			= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ОписаниеТиповСтрока			= Новый ОписаниеТипов("Строка");
	
	Если Показатель = "Количество" Тогда
		ОписаниеТиповПоказателя = ОписаниеТиповЧислоЦелое;
	ИначеЕсли Показатель = "Сумма" Или Показатель = "СуммаПотенциальная" Тогда
		ОписаниеТиповПоказателя = ОписаниеТиповСумма;
	Иначе
		ОписаниеТиповПоказателя = ОписаниеТиповЧислоЦелое;
	КонецЕсли;
	
	ТаблицаТочки = Новый ТаблицаЗначений();
	ТаблицаТочки.Колонки.Добавить("Текст",		ОписаниеТиповСтрока);
	ТаблицаТочки.Колонки.Добавить("Подсказка",	ОписаниеТиповСтрока);
	ТаблицаТочки.Колонки.Добавить("Значение",	ОписаниеТиповЭтап);
	ТаблицаТочки.Колонки.Добавить("Точка",		ОписаниеТиповЧислоЦелое);
	ТаблицаТочки.Колонки.Добавить("Серия",		ОписаниеТиповСтрока);
	ТаблицаТочки.Колонки.Добавить("ЭтоПлан",	Новый ОписаниеТипов("Булево"));
	ТаблицаТочки.Колонки.Добавить("Группировка",ОписаниеТиповГруппировка);
	
	ТаблицаСерии = Новый ТаблицаЗначений();
	
	ТаблицаСерии.Колонки.Добавить("Точка",					ОписаниеТиповЧислоЦелое);
	ТаблицаСерии.Колонки.Добавить("Серия",					ОписаниеТиповЧислоЦелое);
	ТаблицаСерии.Колонки.Добавить("Текст",					ОписаниеТиповСтрока);
	ТаблицаСерии.Колонки.Добавить("Подсказка",				ОписаниеТиповСтрока);
	ТаблицаСерии.Колонки.Добавить("Значение",				ОписаниеТиповЭтап);
	ТаблицаСерии.Колонки.Добавить("Показатель",				ОписаниеТиповПоказателя);
	ТаблицаСерии.Колонки.Добавить("Группировка",			ОписаниеТиповГруппировка);
	ТаблицаСерии.Колонки.Добавить("ЭтоПлан",				Новый ОписаниеТипов("Булево"));
	ТаблицаСерии.Колонки.Добавить("Порядок",				ОписаниеТиповЧислоЦелое);
	ТаблицаСерии.Колонки.Добавить("ПоказательКоличество",	ОписаниеТиповЧислоЦелое);
	ТаблицаСерии.Колонки.Добавить("ПоказательСумма",		ОписаниеТиповСумма);
	ТаблицаСерии.Колонки.Добавить("ПоказательСуммаПотенциальная",	ОписаниеТиповСумма);
	ПредставлениеПоказателя = "";
	ПоказательЗначениеВСписке = Элементы.Показатель.СписокВыбора.НайтиПоЗначению(Показатель);
	Если ПоказательЗначениеВСписке <> Неопределено Тогда
		ПредставлениеПоказателя = ПоказательЗначениеВСписке.Представление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеГруппировки) Тогда
		
		ТаблицаЗначенияГруппировки = Новый ТаблицаЗначений;
		ТаблицаЗначенияГруппировки.Колонки.Добавить("ЗначениеГруппировки",Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.СтруктураПредприятия, СписокЗначений"));
		
		Если ОтборОтветственные.Количество() = 1 Тогда
			НоваяСтрока = ТаблицаЗначенияГруппировки.Добавить();
			НоваяСтрока.ЗначениеГруппировки = ОтборОтветственные[0].Значение;
		ИначеЕсли ОтборОтветственные.Количество() > 1 Тогда
			НоваяСтрока = ТаблицаЗначенияГруппировки.Добавить();
			НоваяСтрока.ЗначениеГруппировки = ОтборОтветственные;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			НоваяСтрока = ТаблицаЗначенияГруппировки.Добавить();
			НоваяСтрока.ЗначениеГруппировки = ОтборПодразделение;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ПользовательПодразделение) Тогда
		//	НоваяСтрока = ТаблицаЗначенияГруппировки.Добавить();
		//	НоваяСтрока.ЗначениеГруппировки = ПользовательПодразделение;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СравнитьСПользовательПодразделение) И НЕ СравнитьСПользовательПодразделение = "Плановые показатели" Тогда
			НоваяСтрока = ТаблицаЗначенияГруппировки.Добавить();
			НоваяСтрока.ЗначениеГруппировки = СравнитьСПользовательПодразделение;
		КонецЕсли;
		
		Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
			
			Если ОтображатьПлановыеПоказатели Тогда
				
				ТочкаПлан = ТаблицаТочки.Добавить();
				ТочкаПлан.Текст = Строка(СтрокаЭтап.Этап) + НСтр("ru = ' (план)'");
				ТочкаПлан.Подсказка = Строка(СтрокаЭтап.Этап) + НСтр("ru = ' (план)'");
				ТочкаПлан.Значение = СтрокаЭтап.Этап;
				ТочкаПлан.Серия = ПредставлениеПоказателя + НСтр("ru = ' (план)'");
				ТочкаПлан.ЭтоПлан = Истина;
				
				СерияПлан			= ТаблицаСерии.Добавить();
				СерияПлан.Текст		= ПредставлениеПоказателя + НСтр("ru = ' (план)'");
				СерияПлан.ЭтоПлан	= Истина;
				СерияПлан.Точка		= ТаблицаТочки.Индекс(ТочкаПлан);
				СерияПлан.Значение	= ТочкаПлан.Значение;
				
			КонецЕсли;
			
			Для Каждого СтрокаЗначениеГруппировки Из ТаблицаЗначенияГруппировки Цикл
				Если ТаблицаЗначенияГруппировки.Количество() > 1 Тогда
					ТекстТочки =  СокрЛП(Строка(СтрокаЗначениеГруппировки.ЗначениеГруппировки)) + "
					|" + СокрЛП(Строка(СтрокаЭтап.Этап)) + " ("+СокрЛП(Строка(СтрокаЭтап.Этап.Оценка)) + "% )";
				Иначе
					ТекстТочки = СокрЛП(Строка(СтрокаЭтап.Этап)) + " ("+СокрЛП(Строка(СтрокаЭтап.Этап.Оценка)) + "% )";
				КонецЕсли;
				
				Точка				= ТаблицаТочки.Добавить();
				Точка.Текст			= ТекстТочки;
				Точка.Подсказка		= ТекстТочки;
				Точка.Значение		= СтрокаЭтап.Этап;
				Точка.Серия			= ПредставлениеПоказателя;
				Точка.Группировка	= СтрокаЗначениеГруппировки.ЗначениеГруппировки;
				
				
				Если ОтборОтветственные.Количество() > 0 ИЛИ ЗначениеЗаполнено(ОтборПодразделение) Тогда
					ПараметрГруппировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
				Иначе
					ПараметрГруппировка = Неопределено;
				КонецЕсли;
				
				ПараметрПолеГруппировки = ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено);
				
				Если РежимВоронки = "Активные" Тогда
					СерияАктивные = ТаблицаСерии.Добавить();
					СерияАктивные.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, ПараметрГруппировка, ПараметрПолеГруппировки,, Истина);
					//РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, ДанныеСтатистика, Точка.Значение,, ?(ЗначениеЗаполнено(ПользовательПодразделение), СерияАктивные.Группировка, Неопределено), ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено),, Истина);
					СерияАктивные.Показатель					= РассчитанныеПоказатели.Показатель;
					СерияАктивные.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
					СерияАктивные.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
					СерияАктивные.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
					СерияАктивные.Точка = ТаблицаТочки.Индекс(Точка);
					СерияАктивные.Текст = НСтр("ru = 'Активные'") + РассчитанныеПоказатели.ПоказательПроцент;
					СерияАктивные.Значение = Точка.Значение;
					СерияАктивные.Подсказка = НСтр("ru = 'Активные: '") + Строка(СерияАктивные.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
					СерияАктивные.Порядок = 1;
					
					СерияДостроенные = ТаблицаСерии.Добавить();
					СерияДостроенные.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					СерияДостроенные.Показатель = 0;
					СерияДостроенные.Точка = ТаблицаТочки.Индекс(Точка);
					СерияДостроенные.Текст = НСтр("ru = 'Достроенные'");
					СерияДостроенные.Значение = Точка.Значение;
					СерияДостроенные.Подсказка = НСтр("ru = 'Достроенные: '") + Строка(0);
					СерияДостроенные.Порядок = 0;
				КонецЕсли;
				
				Если РежимВоронки = "Закрытые" Тогда
					СерияНеудачно = ТаблицаСерии.Добавить();
					СерияНеудачно.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, ПараметрГруппировка, ПараметрПолеГруппировки, Ложь);
					//РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, ДанныеСтатистика, Точка.Значение,, ?(ЗначениеЗаполнено(ПользовательПодразделение), СерияНеудачно.Группировка, Неопределено), ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено), Ложь);
					СерияНеудачно.Показатель					= РассчитанныеПоказатели.Показатель;
					СерияНеудачно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
					СерияНеудачно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
					СерияНеудачно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
					СерияНеудачно.Точка = ТаблицаТочки.Индекс(Точка);
					СерияНеудачно.Текст = НСтр("ru = 'Неудачно'") + РассчитанныеПоказатели.ПоказательПроцент;
					СерияНеудачно.Значение = Точка.Значение;
					СерияНеудачно.Подсказка = НСтр("ru = 'Неудачно: '") + Строка(СерияНеудачно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
					СерияНеудачно.Порядок = 1;
					
					СерияУспешно = ТаблицаСерии.Добавить();
					СерияУспешно.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, ПараметрГруппировка, ПараметрПолеГруппировки, Истина);
					//РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, ДанныеСтатистика, Точка.Значение,, ?(ЗначениеЗаполнено(ПользовательПодразделение), СерияУспешно.Группировка, Неопределено), ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено), Истина);
					СерияУспешно.Показатель					= РассчитанныеПоказатели.Показатель;
					СерияУспешно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
					СерияУспешно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
					СерияУспешно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
					СерияУспешно.Точка = ТаблицаТочки.Индекс(Точка);
					СерияУспешно.Текст = НСтр("ru = 'Успешно'") + РассчитанныеПоказатели.ПоказательПроцент;
					СерияУспешно.Значение = Точка.Значение;
					СерияУспешно.Подсказка = НСтр("ru = 'Успешно: '") + Строка(СерияУспешно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
					СерияУспешно.Порядок = 2;
					
					СерияДостроенные = ТаблицаСерии.Добавить();
					СерияДостроенные.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					СерияДостроенные.Показатель = 0;
					СерияДостроенные.Точка = ТаблицаТочки.Индекс(Точка);
					СерияДостроенные.Текст = НСтр("ru = 'Достроенные'");
					СерияДостроенные.Значение = Точка.Значение;
					СерияДостроенные.Подсказка = НСтр("ru = 'Достроенные: '") + Строка(0);
					СерияДостроенные.Порядок = 0;
				КонецЕсли;
				
				Если РежимВоронки = "Все" Тогда
					СерияНеудачно = ТаблицаСерии.Добавить();
					СерияНеудачно.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, ПараметрГруппировка, ПараметрПолеГруппировки, Ложь);
					//РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, ДанныеСтатистика, Точка.Значение,, ?(ЗначениеЗаполнено(ПользовательПодразделение), СерияНеудачно.Группировка, Неопределено), ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено), Ложь);
					СерияНеудачно.Показатель					= РассчитанныеПоказатели.Показатель;
					СерияНеудачно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
					СерияНеудачно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
					СерияНеудачно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
					СерияНеудачно.Точка = ТаблицаТочки.Индекс(Точка);
					СерияНеудачно.Текст = НСтр("ru = 'Неудачно'") + РассчитанныеПоказатели.ПоказательПроцент;
					СерияНеудачно.Значение = Точка.Значение;
					СерияНеудачно.Подсказка = НСтр("ru = 'Неудачно: '") + Строка(СерияНеудачно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
					СерияНеудачно.Порядок = 2;
					
					СерияУспешно = ТаблицаСерии.Добавить();
					СерияУспешно.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, ПараметрГруппировка, ПараметрПолеГруппировки, Истина);
					//РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, ДанныеСтатистика, Точка.Значение,, ?(ЗначениеЗаполнено(ПользовательПодразделение), СерияУспешно.Группировка, Неопределено), ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено), Истина);
					СерияУспешно.Показатель					= РассчитанныеПоказатели.Показатель;
					СерияУспешно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
					СерияУспешно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
					СерияУспешно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
					СерияУспешно.Точка = ТаблицаТочки.Индекс(Точка);
					СерияУспешно.Текст = НСтр("ru = 'Успешно'") + РассчитанныеПоказатели.ПоказательПроцент;
					СерияУспешно.Значение = Точка.Значение;
					СерияУспешно.Подсказка = НСтр("ru = 'Успешно: '") + Строка(СерияУспешно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
					СерияУспешно.Порядок = 3;
					
					СерияАктивные = ТаблицаСерии.Добавить();
					СерияАктивные.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, ПараметрГруппировка, ПараметрПолеГруппировки, Ложь, Истина);
					//РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, ДанныеСтатистика, Точка.Значение,, ?(ЗначениеЗаполнено(ПользовательПодразделение), СерияАктивные.Группировка, Неопределено), ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено), Ложь, Истина);
					СерияАктивные.Показатель					= РассчитанныеПоказатели.Показатель;
					СерияАктивные.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
					СерияАктивные.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
					СерияАктивные.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
					СерияАктивные.Точка = ТаблицаТочки.Индекс(Точка);
					СерияАктивные.Текст = НСтр("ru = 'Активные'") + РассчитанныеПоказатели.ПоказательПроцент;
					СерияАктивные.Значение = Точка.Значение;
					СерияАктивные.Подсказка = НСтр("ru = 'Активные: '") + Строка(СерияАктивные.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
					СерияАктивные.Порядок = 1;
					
					СерияДостроенные = ТаблицаСерии.Добавить();
					СерияДостроенные.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					СерияДостроенные.Показатель = 0;
					СерияДостроенные.Точка = ТаблицаТочки.Индекс(Точка);
					СерияДостроенные.Текст = НСтр("ru = 'Достроенные'");
					СерияДостроенные.Значение = Точка.Значение;
					СерияДостроенные.Подсказка = НСтр("ru = 'Достроенные: '") + Строка(0);
					СерияДостроенные.Порядок = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
			Если ОтображатьПлановыеПоказатели Тогда
				ТочкаПлан = ТаблицаТочки.Добавить();
				ТочкаПлан.Текст = Строка(СтрокаЭтап.Этап) + НСтр("ru = ' (план)'");
				ТочкаПлан.Подсказка = Строка(СтрокаЭтап.Этап) + НСтр("ru = ' (план)'");
				ТочкаПлан.Значение = СтрокаЭтап.Этап;
				ТочкаПлан.Серия = ПредставлениеПоказателя + НСтр("ru = ' (план)'");
				ТочкаПлан.ЭтоПлан = Истина;
			КонецЕсли;
			
			Точка = ТаблицаТочки.Добавить();
			Точка.Текст = Строка(СтрокаЭтап.Этап) + " ("+Строка(СтрокаЭтап.Этап.Оценка) + "% )";
			Точка.Подсказка = Строка(СтрокаЭтап.Этап) + " ("+Строка(СтрокаЭтап.Этап.Оценка) + "% )";
			Точка.Значение = СтрокаЭтап.Этап;
			
			Если РежимВоронки = "Активные" Тогда
				СерияАктивные = ТаблицаСерии.Добавить();
				РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,,,,,Истина);
				СерияАктивные.Показатель					= РассчитанныеПоказатели.Показатель;
				СерияАктивные.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
				СерияАктивные.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
				СерияАктивные.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
				СерияАктивные.Точка = ТаблицаТочки.Индекс(Точка);
				СерияАктивные.Текст = НСтр("ru = 'Активные'") + РассчитанныеПоказатели.ПоказательПроцент;
				СерияАктивные.Значение = Точка.Значение;
				СерияАктивные.Подсказка = НСтр("ru = 'Активные: '") + Строка(СерияАктивные.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
				СерияАктивные.Порядок = 1;
				
				СерияДостроенные = ТаблицаСерии.Добавить();
				СерияДостроенные.Показатель = 0;
				СерияДостроенные.Точка = ТаблицаТочки.Индекс(Точка);
				СерияДостроенные.Текст = НСтр("ru = 'Достроенные'");
				СерияДостроенные.Значение = Точка.Значение;
				СерияДостроенные.Подсказка = НСтр("ru = 'Достроенные: '") + Строка(0);
				СерияДостроенные.Порядок = 0;
			КонецЕсли;
			
			Если РежимВоронки = "Закрытые" Тогда
				СерияНеудачно = ТаблицаСерии.Добавить();
				РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,,,,Ложь);
				СерияНеудачно.Показатель					= РассчитанныеПоказатели.Показатель;
				СерияНеудачно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
				СерияНеудачно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
				СерияНеудачно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
				СерияНеудачно.Точка = ТаблицаТочки.Индекс(Точка);
				СерияНеудачно.Текст = НСтр("ru = 'Неудачно'") + РассчитанныеПоказатели.ПоказательПроцент;
				СерияНеудачно.Значение = Точка.Значение;
				СерияНеудачно.Подсказка = НСтр("ru = 'Неудачно: '") + Строка(СерияНеудачно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
				СерияНеудачно.Порядок = 1;
				
				СерияУспешно = ТаблицаСерии.Добавить();
				РассчитанныеПоказатели						= РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,,,, Истина);
				СерияУспешно.Показатель						= РассчитанныеПоказатели.Показатель;
				СерияУспешно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
				СерияУспешно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
				СерияУспешно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
				СерияУспешно.Точка = ТаблицаТочки.Индекс(Точка);
				СерияУспешно.Текст = НСтр("ru = 'Успешно'") + РассчитанныеПоказатели.ПоказательПроцент;
				СерияУспешно.Значение = Точка.Значение;
				СерияУспешно.Подсказка = НСтр("ru = 'Успешно: '") + Строка(СерияУспешно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
				СерияУспешно.Порядок = 2;
				
				СерияДостроенные = ТаблицаСерии.Добавить();
				СерияДостроенные.Показатель = 0;
				СерияДостроенные.Точка = ТаблицаТочки.Индекс(Точка);
				СерияДостроенные.Текст = НСтр("ru = 'Достроенные'");
				СерияДостроенные.Значение = Точка.Значение;
				СерияДостроенные.Подсказка = НСтр("ru = 'Достроенные: '") + Строка(0);
				СерияДостроенные.Порядок = 0;
			КонецЕсли;
			
			Если РежимВоронки = "Все" Тогда
				СерияНеудачно = ТаблицаСерии.Добавить();
				РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,,,, Ложь);
				СерияНеудачно.Показатель					= РассчитанныеПоказатели.Показатель;
				СерияНеудачно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
				СерияНеудачно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
				СерияНеудачно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
				СерияНеудачно.Точка = ТаблицаТочки.Индекс(Точка);
				СерияНеудачно.Текст = НСтр("ru = 'Неудачно'") + РассчитанныеПоказатели.ПоказательПроцент;
				СерияНеудачно.Значение = Точка.Значение;
				СерияНеудачно.Подсказка = НСтр("ru = 'Неудачно: '") + Строка(СерияНеудачно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
				СерияНеудачно.Порядок = 2;
				
				СерияУспешно = ТаблицаСерии.Добавить();
				РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,,,, Истина);
				СерияУспешно.Показатель					= РассчитанныеПоказатели.Показатель;
				СерияУспешно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
				СерияУспешно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
				СерияУспешно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
				СерияУспешно.Точка = ТаблицаТочки.Индекс(Точка);
				СерияУспешно.Текст = НСтр("ru = 'Успешно'") + РассчитанныеПоказатели.ПоказательПроцент;
				СерияУспешно.Значение = Точка.Значение;
				СерияУспешно.Подсказка = НСтр("ru = 'Успешно: '") + Строка(СерияУспешно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
				СерияУспешно.Порядок = 3;
				
				СерияАктивные = ТаблицаСерии.Добавить();
				РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,,,, Ложь,Истина);
				СерияАктивные.Показатель					= РассчитанныеПоказатели.Показатель;
				СерияАктивные.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
				СерияАктивные.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
				СерияАктивные.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
				СерияАктивные.Точка = ТаблицаТочки.Индекс(Точка);
				СерияАктивные.Текст = НСтр("ru = 'Активные'") + РассчитанныеПоказатели.ПоказательПроцент;
				СерияАктивные.Значение = Точка.Значение;
				СерияАктивные.Подсказка = НСтр("ru = 'Активные: '") + Строка(СерияАктивные.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
				СерияАктивные.Порядок = 1;
				
				СерияДостроенные = ТаблицаСерии.Добавить();
				СерияДостроенные.Показатель = 0;
				СерияДостроенные.Точка = ТаблицаТочки.Индекс(Точка);
				СерияДостроенные.Текст = НСтр("ru = 'Достроенные'");
				СерияДостроенные.Значение = Точка.Значение;
				СерияДостроенные.Подсказка = НСтр("ru = 'Достроенные: '") + Строка(0);
				СерияДостроенные.Порядок = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеГруппировки) Тогда
		
		Для Каждого СтрокаЗначениеГруппировки Из ТаблицаЗначенияГруппировки Цикл
			
			ПоказательВсего						= 0;
			ПоказательКоличествоВсего			= 0;
			ПоказательСуммаВсего				= 0;
			ПоказательСуммаПотенциальнаяВсего	= 0;
			
			Если РежимВоронки = "Закрытые" Тогда
				Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
					СтрокаТочки = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
					
					Если НЕ СтрокаТочки.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаТочки.Текст = "Достроенные"Тогда
						
						СтрокаТочки.Показатель						= ПоказательВсего;
						СтрокаТочки.ПоказательКоличество			= ПоказательКоличествоВсего;
						СтрокаТочки.ПоказательСумма					= ПоказательСуммаВсего;
						СтрокаТочки.ПоказательСуммаПотенциальная	= ПоказательСуммаПотенциальнаяВсего;
						СтрокаТочки.Подсказка						= НСтр("ru = 'Достроенные: '") + Строка(ПоказательВсего);
						
						ВыполнятьЦикл = Истина;
						Пока ВыполнятьЦикл Цикл
							нИндекс = нИндекс + 1;
							
							Если (ТаблицаСерии.Количество()-1) < нИндекс Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
							
							СтрокаТочки_1 = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
							
							Если СтрокаТочки_1.Значение.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
								Если СтрокаТочки_1.Текст = "Неудачно" ИЛИ СтрокаТочки_1.Текст = "Успешно" Тогда
									ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
									ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
									ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
									ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
								КонецЕсли;
							//ИначеЕсли НЕ СтрокаТочки_1.Значение.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
							Иначе
								Если СтрокаТочки_1.Текст = "Неудачно" Тогда
									ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
									ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
									ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
									ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ СтрокаТочки.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
							
							Если СтрокаТочки_1.Текст = "Достроенные" Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РежимВоронки = "Активные" Тогда
				Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
					СтрокаТочки = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
					
					Если НЕ СтрокаТочки.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаТочки.Текст = "Достроенные" Тогда
						
						СтрокаТочки.Показатель						= ПоказательВсего;
						СтрокаТочки.ПоказательКоличество			= ПоказательКоличествоВсего;
						СтрокаТочки.ПоказательСумма					= ПоказательСуммаВсего;
						СтрокаТочки.ПоказательСуммаПотенциальная	= ПоказательСуммаПотенциальнаяВсего;
						СтрокаТочки.Подсказка						= НСтр("ru = 'Достроенные: '") + Строка(ПоказательВсего);
						
						ВыполнятьЦикл = Истина;
						Пока ВыполнятьЦикл Цикл
							нИндекс = нИндекс + 1;
							
							Если (ТаблицаСерии.Количество()-1) < нИндекс Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
							
							СтрокаТочки_1 = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
							Если СтрокаТочки_1.Текст = "Активные" Тогда
								ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
								ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
								ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
								ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
							КонецЕсли;
							
							Если НЕ СтрокаТочки.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
							
							Если СтрокаТочки_1.Текст = "Достроенные" Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РежимВоронки = "Все" Тогда
				Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
					СтрокаТочки = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
					
					Если НЕ СтрокаТочки.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаТочки.Текст = "Достроенные" Тогда
						
						СтрокаТочки.Показатель						= ПоказательВсего;
						СтрокаТочки.ПоказательКоличество			= ПоказательКоличествоВсего;
						СтрокаТочки.ПоказательСумма					= ПоказательСуммаВсего;
						СтрокаТочки.ПоказательСуммаПотенциальная	= ПоказательСуммаПотенциальнаяВсего;
						СтрокаТочки.Подсказка						= НСтр("ru = 'Достроенные: '") + Строка(ПоказательВсего);
						
						ВыполнятьЦикл = Истина;
						Пока ВыполнятьЦикл Цикл
							нИндекс = нИндекс + 1;
							
							Если (ТаблицаСерии.Количество()-1) < нИндекс Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
							
							СтрокаТочки_1 = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
							
							Если СтрокаТочки_1.Значение.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
								Если НЕ СтрокаТочки_1.Текст = "Достроенные" Тогда
									ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
									ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
									ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
									ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
								КонецЕсли;
							//ИначеЕсли НЕ СтрокаТочки_1.Значение.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
							Иначе
								Если СтрокаТочки_1.Текст = "Неудачно" ИЛИ СтрокаТочки_1.Текст = "Активные" Тогда
									ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
									ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
									ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
									ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ СтрокаТочки.Группировка = СтрокаЗначениеГруппировки.ЗначениеГруппировки Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
							
							Если СтрокаТочки_1.Текст = "Достроенные" Тогда
								нИндекс = нИндекс - 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		ПоказательВсего						= 0;
		ПоказательКоличествоВсего			= 0;
		ПоказательСуммаВсего				= 0;
		ПоказательСуммаПотенциальнаяВсего	= 0;
		
		Если РежимВоронки = "Закрытые" Тогда
			Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
				СтрокаТочки = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
				
				Если СтрокаТочки.Текст = "Достроенные"Тогда
					
					СтрокаТочки.Показатель						= ПоказательВсего;
					СтрокаТочки.ПоказательКоличество			= ПоказательКоличествоВсего;
					СтрокаТочки.ПоказательСумма					= ПоказательСуммаВсего;
					СтрокаТочки.ПоказательСуммаПотенциальная	= ПоказательСуммаПотенциальнаяВсего;
					СтрокаТочки.Подсказка						= НСтр("ru = 'Достроенные: '") + Строка(ПоказательВсего);
					
					Попытка
						СледующаяСтрока		= ТаблицаСерии[ТаблицаСерии.Количество() - 1 - (нИндекс+3)];
						ВидЭтапаСледующий	= СледующаяСтрока.Значение.ВидЭтапа;
					Исключение
						СледующаяСтрока = Неопределено;
						ВидЭтапаСледующий	= Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПустаяСсылка();
					КонецПопытки;
					
					ВыполнятьЦикл = Истина;
					Пока ВыполнятьЦикл Цикл
						нИндекс = нИндекс + 1;
						
						Если (ТаблицаСерии.Количество()-1) < нИндекс Тогда
							нИндекс = нИндекс - 1;
							Прервать;
						КонецЕсли;
						
						СтрокаТочки_1 = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
						
						Если СтрокаТочки_1.Значение.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
							Если СтрокаТочки_1.Текст = "Неудачно" ИЛИ СтрокаТочки_1.Текст = "Успешно" Тогда
								ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
								ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
								ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
								ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
							КонецЕсли;
						Иначе
							Если ВидЭтапаСледующий = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
								ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
								ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
								ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
								ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
							//ИначеЕсли НЕ ВидЭтапаСледующий = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
							Иначе
								Если СтрокаТочки_1.Текст = "Неудачно" Тогда
									ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
									ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
									ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
									ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если СтрокаТочки_1.Текст = "Достроенные" Тогда
							нИндекс = нИндекс - 1;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РежимВоронки = "Активные" Тогда
			Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
				СтрокаТочки = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
				
				Если СтрокаТочки.Текст = "Достроенные" Тогда
					
					СтрокаТочки.Показатель						= ПоказательВсего;
					СтрокаТочки.ПоказательКоличество			= ПоказательКоличествоВсего;
					СтрокаТочки.ПоказательСумма					= ПоказательСуммаВсего;
					СтрокаТочки.ПоказательСуммаПотенциальная	= ПоказательСуммаПотенциальнаяВсего;
					СтрокаТочки.Подсказка						= НСтр("ru = 'Достроенные: '") + Строка(ПоказательВсего);
					
					ВыполнятьЦикл = Истина;
					Пока ВыполнятьЦикл Цикл
						нИндекс = нИндекс + 1;
						
						Если (ТаблицаСерии.Количество()-1) < нИндекс Тогда
							нИндекс = нИндекс - 1;
							Прервать;
						КонецЕсли;
						
						СтрокаТочки_1 = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
						Если СтрокаТочки_1.Текст = "Активные" Тогда
							ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
							ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
							ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
							ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
						КонецЕсли;
						
						Если СтрокаТочки_1.Текст = "Достроенные" Тогда
							нИндекс = нИндекс - 1;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РежимВоронки = "Все" Тогда
			Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
				СтрокаТочки = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
				
				Если СтрокаТочки.Текст = "Достроенные" Тогда
					
					СтрокаТочки.Показатель						= ПоказательВсего;
					СтрокаТочки.ПоказательКоличество			= ПоказательКоличествоВсего;
					СтрокаТочки.ПоказательСумма					= ПоказательСуммаВсего;
					СтрокаТочки.ПоказательСуммаПотенциальная	= ПоказательСуммаПотенциальнаяВсего;
					СтрокаТочки.Подсказка						= НСтр("ru = 'Достроенные: '") + Строка(ПоказательВсего);
					
					Попытка
						СледующаяСтрока		= ТаблицаСерии[ТаблицаСерии.Количество() - 1 - (нИндекс+4)];
						ВидЭтапаСледующий	= СледующаяСтрока.Значение.ВидЭтапа;
					Исключение
						СледующаяСтрока = Неопределено;
						ВидЭтапаСледующий	= Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПустаяСсылка();
					КонецПопытки;
					
					ВыполнятьЦикл = Истина;
					Пока ВыполнятьЦикл Цикл
						нИндекс = нИндекс + 1;
						
						Если (ТаблицаСерии.Количество()-1) < нИндекс Тогда
							нИндекс = нИндекс - 1;
							Прервать;
						КонецЕсли;
						
						СтрокаТочки_1 = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
						
						Если СтрокаТочки_1.Значение.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
							Если НЕ СтрокаТочки_1.Текст = "Достроенные" Тогда
								ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
								ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
								ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
								ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
							КонецЕсли;
							
						Иначе
							Если ВидЭтапаСледующий = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
								ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
								ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
								ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
								ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
							//ИначеЕсли НЕ ВидЭтапаСледующий = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
							Иначе
								Если СтрокаТочки_1.Текст = "Неудачно"  ИЛИ СтрокаТочки_1.Текст = "Активные" Тогда
									ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
									ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
									ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
									ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если СтрокаТочки_1.Текст = "Достроенные" Тогда
							нИндекс = нИндекс - 1;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСерии.Сортировать("Точка Возр, Группировка Возр, Порядок Возр");
	
	ВремТаблица = ДанныеТекущие.Скопировать();
	
	Если ВремТаблица.Количество() = 0 Тогда
		ВсегоПроцессов		= 0;
		ВсегоАктивных		= 0;
		ВсегоАктивныхСумма	= 0;
		ВсегоУспешных		= 0;
		ВсегоУспешныхСумма	= 0;
		ВсегоНеудачных		= 0;
		ВсегоНеудачныхСумма	= 0;
	Иначе
		ВремТаблица.Сортировать("ИтогоСделок Убыв, АктивныеИтог Убыв");
		
		//Если НЕ Воронка = ПредопределенноеЗначение("Справочник.CRM_ВоронкиПродаж.ПоДокументам") Тогда
			ВремТаблица.Сортировать("АктивныеИтог Убыв");
			ВсегоАктивных		= ВремТаблица[0].АктивныеИтог;
			ВсегоАктивныхСумма	= ВремТаблица[0].АктивныеСуммаИтог;
			
			ВремТаблица.Сортировать("УспешноИтог Убыв");
			ВсегоУспешных		= ВремТаблица[0].УспешноИтог;
			ВсегоУспешныхСумма	= ВремТаблица[0].УспешноСуммаИтог;
				
			ВремТаблица.Сортировать("НеудачноИтог Убыв");
			ВсегоНеудачных		= ВремТаблица[0].НеудачноИтог;
			ВсегоНеудачныхСумма	= ВремТаблица[0].НеудачноСуммаИтог;
		//КонецЕсли;
	КонецЕсли;
	
	//Если Воронка = ПредопределенноеЗначение("Справочник.CRM_ВоронкиПродаж.ПоДокументам") Тогда
	//	Элементы.ГруппаПодвал.Видимость = Ложь;
	//Иначе
		ПредставлениеУспешноЗавершенных = НСтр("ru = 'Успешно: '") + Формат(ВсегоУспешных,"ЧЦ=4; ЧДЦ=; ЧН=0")+НСтр("ru = ' на сумму '")+Формат(ВсегоУспешныхСумма,"ЧЦ=15; ЧДЦ=; ЧН=0") + " "+ ВалютаУправленческогоУчета;
		ПредставлениеОтказа = НСтр("ru = 'Неудачно: '") + Формат(ВсегоНеудачных,"ЧЦ=4; ЧДЦ=; ЧН=0")+НСтр("ru = ' на сумму '")+Формат(ВсегоНеудачныхСумма,"ЧЦ=15; ЧДЦ=; ЧН=0") + " "+ ВалютаУправленческогоУчета;
		
		Элементы.ГруппаПодвал.Видимость = Истина;
	//КонецЕсли;
	
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.Очистить();
	
	Диаграмма.СерииВСтроках = Истина;
	
	Диаграмма.АвтоУстановкаТекстаСерий = Ложь;
	Диаграмма.АвтоУстановкаТекстаТочек = Ложь;
	
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.Анимация = АнимацияДиаграммы.НеИспользовать;
	
	Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.СерияЗначение;
	Диаграмма.РазделительПодписей	= "; ";
	Диаграмма.ПоложениеПодписей = ПоложениеПодписейКДиаграмме.КрайАвто;
	Диаграмма.РежимПробелов = РежимПробеловДиаграммы.ПоловинаШирины;
	
	Диаграмма.ОтображатьЗаголовок = Ложь;
	
	Диаграмма.ТипДиаграммы = ТипДиаграммы[ТипДиаграммыЗначение];
	
	Диаграмма.ШрифтПодписей = ШрифтыСтиля.КрупныйШрифтТекста;
	
	Диаграмма.Ориентация = ОриентацияДиаграммы.ЮгВосток;
	
	// обход ошибки когда область построения не растягивается на всю ширину поля диаграммы
	Диаграмма.ОбластьПостроения.Верх	= 0;
	Диаграмма.ОбластьПостроения.Лево	= 0;
	Диаграмма.ОбластьПостроения.Низ		= 1;
	Диаграмма.ОбластьПостроения.Право	= 1;
	
	// +заполнение свойств диаграммы табличного документа (нужно для печати воронки)
	Макет = Обработки.CRM_ВоронкаПродаж.ПолучитьМакет("МакетДляПечати");
		
	ДокументРезультат.Очистить();
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	СтрокаПериода = ?(ЗначениеЗаполнено(ОтборПериод.ДатаНачала), "За период: с " + Строка(Формат(ОтборПериод.ДатаНачала,"ДЛФ=ДД")) + " по " + Строка(Формат(ОтборПериод.ДатаОкончания,"ДЛФ=ДД")),"");
	ОбластьЗаголовка.Параметры.ПериодСтр = СтрокаПериода;
	ДокументРезультат.Вывести(ОбластьЗаголовка);
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбластьДиаграммы"));
	табДиаграмма = ДокументРезультат.Рисунки.Диаграмма.Объект;
	табДиаграмма.Обновление 			= Ложь;		
	табДиаграмма.Очистить();
	табДиаграмма.ТипДиаграммы			= ТипДиаграммы[ТипДиаграммыЗначение];
	табДиаграмма.ВидПодписей			= ВидПодписейКДиаграмме.СерияЗначение;
	табДиаграмма.ОтображатьЛегенду		= Ложь;
	табДиаграмма.Анимация 				= АнимацияДиаграммы.НеИспользовать;
	табДиаграмма.РазделительПодписей	= "; ";
	табДиаграмма.ПоложениеПодписей		= ПоложениеПодписейКДиаграмме.КрайАвто;
	табДиаграмма.РежимПробелов			= РежимПробеловДиаграммы.ПоловинаШирины;
	табДиаграмма.Ориентация 			= ОриентацияДиаграммы.ЮгВосток;
	табДиаграмма.СерииВСтроках 			= Истина;
	табДиаграмма.ОтображатьЗаголовок 	= Ложь;	
	
	табДиаграмма.АвтоУстановкаТекстаСерий = Ложь;
	табДиаграмма.АвтоУстановкаТекстаТочек = Ложь;
	
	табДиаграмма.ОбластьПостроения.Верх		= 0;
	табДиаграмма.ОбластьПостроения.Лево		= 0;
	табДиаграмма.ОбластьПостроения.Низ		= 1;
	табДиаграмма.ОбластьПостроения.Право	= 1;
	
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	// -заполнение свойств диаграммы табличного документа
	
	бОбратныйОбходСерий = (		ТипДиаграммыЗначение = "ГистограммаГоризонтальнаяОбъемная"
							Или	ТипДиаграммыЗначение = "ГистограммаГоризонтальная"
							ИЛИ	ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальная"
							ИЛИ	ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная"
							ИЛИ	ТипДиаграммыЗначение = "ГистограммаНормированнаяГоризонтальная"
							ИЛИ	ТипДиаграммыЗначение = "ГистограммаНормированнаяГоризонтальнаяОбъемная");
							
	//
	бОбратныйОбходТочек = бОбратныйОбходСерий;
	
	Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
		СтрокаСерия = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
		Серия = Диаграмма.Серии.Добавить();
		Серия.Значение = СтрокаСерия.Значение;
		
		Если Найти(СтрокаСерия.Текст, НСтр("ru = 'Неудачно'")) > 0 Тогда
			Серия.Цвет = WebЦвета.СеребристоСерый;
		КонецЕсли;
		
		Если Найти(СтрокаСерия.Текст, НСтр("ru = 'Успешно'")) > 0 Тогда
			Серия.Цвет = ЦветУдачнойСерии;
		КонецЕсли;
		
		Если Найти(СтрокаСерия.Текст, НСтр("ru = 'Достроенные'")) > 0 Тогда
			Серия.Цвет = WebЦвета.СветлоЗолотистый;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаСерии.НайтиСтроки(Новый Структура("Значение, Текст", СтрокаСерия.Значение, СтрокаСерия.Текст));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Серия = Диаграмма.Серии.Индекс(Серия);
		КонецЦикла;
	КонецЦикла;
	
	// +Повторяем процесс, но только для диаграммы в табличном документе
	Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
		СтрокаСерия = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
		Серия = табДиаграмма.Серии.Добавить();
		Серия.Значение = СтрокаСерия.Значение;
		
		Если Найти(СтрокаСерия.Текст, НСтр("ru = 'Неудачно'")) > 0 Тогда
			Серия.Цвет = WebЦвета.СеребристоСерый;
		КонецЕсли;
		
		Если Найти(СтрокаСерия.Текст, НСтр("ru = 'Успешно'")) > 0 Тогда
			Серия.Цвет = ЦветУдачнойСерии;
		КонецЕсли;
		
		Если Найти(СтрокаСерия.Текст, НСтр("ru = 'Достроенные'")) > 0 Тогда
			Серия.Цвет = WebЦвета.СветлоЗолотистый;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаСерии.НайтиСтроки(Новый Структура("Значение, Текст", СтрокаСерия.Значение, СтрокаСерия.Текст));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Серия = табДиаграмма.Серии.Индекс(Серия);
		КонецЦикла;
	КонецЦикла;
	// -Повторяем процесс, но только для диаграммы в табличном документе
	
	Для нИндекс = 0 По ТаблицаТочки.Количество() - 1 Цикл
		Если бОбратныйОбходТочек Тогда
			СтрокаТочка = ТаблицаТочки[ТаблицаТочки.Количество() - 1 - нИндекс]
		Иначе
			СтрокаТочка = ТаблицаТочки[нИндекс];
		КонецЕсли;
		
		Точка = Диаграмма.Точки.Добавить();
		Точка.Текст = СтрокаТочка.Текст;
		Точка.Значение = СтрокаТочка.Значение;
		
		НайденныеСерии = ТаблицаСерии.НайтиСтроки(Новый Структура("Значение,Группировка", Точка.Значение, СтрокаТочка.Группировка));
		//НайденныеСерии = ТаблицаСерии.НайтиСтроки(Новый Структура("Значение", Точка.Значение));
		Для Каждого СтрокаСерия Из НайденныеСерии Цикл
			
			Серия = Диаграмма.Серии[СтрокаСерия.Серия];
			
			Если НайденныеСерии.Найти(СтрокаСерия) <> Неопределено Тогда
				
				Серия.Расшифровка = СтрокаСерия.Показатель;
				СтрокаПодсказка = СтрокаСерия.Подсказка;
				Если НЕ СтрокаСерия.Текст = "Достроенные" Тогда
					СтруктураРасшифровки = Новый Структура("Точка, Серия, АктивныеУспешноНеудачно", Серия.Значение, Точка.Значение,?(СтрокаСерия.Текст = НСтр("ru = 'Успешно'"),1,?(СтрокаСерия.Текст = НСтр("ru = 'Неудачно'"),0,2)));
				Иначе
					СтруктураРасшифровки = Неопределено;
				КонецЕсли;
				
				Если ОтображатьПлановыеПоказатели И Найти(СтрокаТочка.Текст, НСтр("ru = 'план'")) > 0 Тогда
					тГруппировкаЗначение = ?(ЗначениеЗаполнено(ПользовательПодразделение), СтрокаСерия.Группировка, Неопределено);
					тГруппировкаИмя = ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено);
					//Если СтрокаСерия.Текст = НСтр("ru = 'Активные'") Тогда
						тПоказательПлан = РассчитатьПоказательПлан(ДанныеПлан, СтрокаТочка.Значение, , тГруппировкаЗначение);
						РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, тГруппировкаЗначение, тГруппировкаИмя,,Истина);
						тПоказательФакт = РассчитанныеПоказатели.Показатель;
						тПроцент = РассчитатьПроцентВыполнения(тПоказательПлан, тПоказательФакт);
						Серия.Расшифровка = тПоказательПлан;
						СтрокаПодсказка = Показатель + " (" + НСтр("ru = 'план'") + "): " + тПоказательПлан + НСтр("ru = ' | Выполнение плана: '") + тПроцент.ПроцентПредставление;
					//ИначеЕсли СтрокаСерия.Текст = НСтр("ru = 'Успешно'") Тогда
					//	тПоказательПлан = РассчитатьПоказательПлан(ДанныеПлан, СтрокаТочка.Значение, , тГруппировкаЗначение);
					//	РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, тГруппировкаЗначение, тГруппировкаИмя, Истина);
					//	тПоказательФакт = РассчитанныеПоказатели.Показатель;
					//	тПроцент = РассчитатьПроцентВыполнения(тПоказательПлан, тПоказательФакт);
					//	Серия.Расшифровка = тПоказательПлан;
					//	СтрокаПодсказка = Показатель + " (" + НСтр("ru = 'план'") + "): " + тПоказательПлан + НСтр("ru = ' | Выполнение плана: '") + тПроцент.ПроцентПредставление;
					//Иначе
					//	Серия.Расшифровка = 0;
					//	СтрокаПодсказка = "";
					//КонецЕсли;
				КонецЕсли;
				
				Диаграмма.УстановитьЗначение(Точка, Серия, Серия.Расшифровка, СтруктураРасшифровки, СтрокаПодсказка);
				
				Если СтрокаСерия.Текст = НСтр("ru = 'Успешно'") Тогда
					Для Каждого тСерия Из ТаблицаСерии Цикл
						Если тСерия.Текст = НСтр("ru = 'Успешно'") И тСерия.Группировка = СтрокаСерия.Группировка И тСерия <> СтрокаСерия Тогда
							Серия = Диаграмма.Серии[тСерия.Серия];
							Диаграмма.УстановитьЗначение(Точка, Серия, 0, СтруктураРасшифровки, СтрокаПодсказка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаСерия.Текст = НСтр("ru = 'Неудачно'") Тогда
					Для Каждого тСерия Из ТаблицаСерии Цикл
						Если тСерия.Текст = НСтр("ru = 'Неудачно'") И тСерия.Группировка = СтрокаСерия.Группировка И тСерия <> СтрокаСерия Тогда
							Серия = Диаграмма.Серии[тСерия.Серия];
							Диаграмма.УстановитьЗначение(Точка, Серия, 0, СтруктураРасшифровки, СтрокаПодсказка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаСерия.Текст = НСтр("ru = 'Достроенные'") Тогда
					Для Каждого тСерия Из ТаблицаСерии Цикл
						Если тСерия.Текст = НСтр("ru = 'Достроенные'") И тСерия.Группировка = СтрокаСерия.Группировка И тСерия <> СтрокаСерия Тогда
							Серия = Диаграмма.Серии[тСерия.Серия];
							Диаграмма.УстановитьЗначение(Точка, Серия, 0, СтруктураРасшифровки, СтрокаПодсказка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтрокаСерия.Текст = НСтр("ru = 'Активные'") Тогда
					Для Каждого тСерия Из ТаблицаСерии Цикл
						Если тСерия.Текст = НСтр("ru = 'Активные'") И тСерия.Группировка = СтрокаСерия.Группировка И тСерия <> СтрокаСерия Тогда
							Серия = Диаграмма.Серии[тСерия.Серия];
							Диаграмма.УстановитьЗначение(Точка, Серия, 0, СтруктураРасшифровки, СтрокаПодсказка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// +Повторяем процесс, но только для диаграммы в табличном документе
	Для нИндекс = 0 По ТаблицаТочки.Количество() - 1 Цикл
		Если бОбратныйОбходТочек Тогда
			СтрокаТочка = ТаблицаТочки[ТаблицаТочки.Количество() - 1 - нИндекс]
		Иначе
			СтрокаТочка = ТаблицаТочки[нИндекс];
		КонецЕсли;
		
		Точка = табДиаграмма.Точки.Добавить();
		Точка.Текст = СтрокаТочка.Текст;
		Точка.Значение = СтрокаТочка.Значение;
		
		НайденныеСерии = ТаблицаСерии.НайтиСтроки(Новый Структура("Значение,Группировка", Точка.Значение, СтрокаТочка.Группировка));
		//НайденныеСерии = ТаблицаСерии.НайтиСтроки(Новый Структура("Значение", Точка.Значение));
		Для Каждого СтрокаСерия Из НайденныеСерии Цикл
			
			Серия = табДиаграмма.Серии[СтрокаСерия.Серия];
			
			Если НайденныеСерии.Найти(СтрокаСерия) <> Неопределено Тогда
				
				Серия.Расшифровка = СтрокаСерия.Показатель;
				СтрокаПодсказка = СтрокаСерия.Подсказка;
				Если НЕ СтрокаСерия.Текст = "Достроенные" Тогда
					СтруктураРасшифровки = Новый Структура("Точка, Серия, АктивныеУспешноНеудачно", Серия.Значение, Точка.Значение,?(СтрокаСерия.Текст = НСтр("ru = 'Успешно'"),1,?(СтрокаСерия.Текст = НСтр("ru = 'Неудачно'"),0,2)));
				Иначе
					СтруктураРасшифровки = Неопределено;
				КонецЕсли;
				Если ОтображатьПлановыеПоказатели И Найти(СтрокаТочка.Текст, НСтр("ru = 'план'")) > 0 Тогда
					тГруппировкаЗначение = ?(ЗначениеЗаполнено(ПользовательПодразделение), СтрокаСерия.Группировка, Неопределено);
					тГруппировкаИмя = ?(ПолеГруппировки <> "", ПолеГруппировки, Неопределено);
					Если СтрокаСерия.Текст = НСтр("ru = 'Активные'") Тогда
						тПоказательПлан = РассчитатьПоказательПлан(ДанныеПлан, СтрокаТочка.Значение, , тГруппировкаЗначение);
						РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, тГруппировкаЗначение, тГруппировкаИмя,,Истина);
						тПоказательФакт = РассчитанныеПоказатели.Показатель;
						тПроцент = РассчитатьПроцентВыполнения(тПоказательПлан, тПоказательФакт);
						Серия.Расшифровка = тПоказательПлан;
						СтрокаПодсказка = Показатель + " (" + НСтр("ru = 'план'") + "): " + тПоказательПлан + НСтр("ru = ' | Выполнение плана: '") + тПроцент.ПроцентПредставление;
					ИначеЕсли СтрокаСерия.Текст = НСтр("ru = 'Успешно'") Тогда
						тПоказательПлан = РассчитатьПоказательПлан(ДанныеПлан, СтрокаТочка.Значение, , тГруппировкаЗначение);
						РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, Точка.Значение,, тГруппировкаЗначение, тГруппировкаИмя, Истина);
						тПоказательФакт = РассчитанныеПоказатели.Показатель;
						тПроцент = РассчитатьПроцентВыполнения(тПоказательПлан, тПоказательФакт);
						Серия.Расшифровка = тПоказательПлан;
						СтрокаПодсказка = Показатель + " (" + НСтр("ru = 'план'") + "): " + тПоказательПлан + НСтр("ru = ' | Выполнение плана: '") + тПроцент.ПроцентПредставление;
					Иначе
						Серия.Расшифровка = 0;
						СтрокаПодсказка = "";
					КонецЕсли;
				КонецЕсли;
				
				табДиаграмма.УстановитьЗначение(Точка, Серия, Серия.Расшифровка, СтруктураРасшифровки, СтрокаПодсказка);
				
				Если СтрокаСерия.Текст = НСтр("ru = 'Неудачно'") Тогда
					Для Каждого тСерия Из ТаблицаСерии Цикл
						Если тСерия.Текст = НСтр("ru = 'Неудачно'") И тСерия.Группировка = СтрокаСерия.Группировка И тСерия <> СтрокаСерия Тогда
							Серия = табДиаграмма.Серии[тСерия.Серия];
							табДиаграмма.УстановитьЗначение(Точка, Серия, 0, СтруктураРасшифровки, СтрокаПодсказка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// -Повторяем процесс, но только для диаграммы в табличном документе
	
	Диаграмма.Обновление = Истина;
	ТабДиаграмма.Обновление = Истина;
	РаскраситьСерии();
	// +Раскрашиваем серии в табличном документе
	РаскраситьСерииВТабличномДокументе(ТабДиаграмма);
	// -Раскрашиваем серии в табличном документе	
	
	Если ОтображатьПлановыеПоказатели Тогда
		СоответствиеЭтапыЦвета = Новый Соответствие();
		//Если РежимВоронки = "Активные" Тогда
		//	Для Каждого Точка Из Диаграмма.Точки Цикл
		//		СоответствиеЭтапыЦвета.Вставить(Точка.Значение, Точка.Цвет);
		//	КонецЦикла;
		//Иначе
			Для Каждого Серия Из Диаграмма.Серии Цикл
				Если Серия.Цвет <> WebЦвета.СеребристоСерый Тогда
					//СоответствиеЭтапыЦвета.Вставить(Серия.Значение, Серия.Цвет);
					СоответствиеЭтапыЦвета.Вставить(Серия.Значение, WebЦвета.Зеленый);
				КонецЕсли;
			КонецЦикла;
		//КонецЕсли;
	КонецЕсли;
	
	// Таблица и панель показателей плана / факта
	Если ОтображатьПлановыеПоказатели Тогда
		МассивУдаляемыхЭлементов = Новый Массив();
		Для Каждого ПодчЭлемент Из Элементы.ГруппаРезультатыВыполненияПлана.ПодчиненныеЭлементы Цикл
			Если ПодчЭлемент.Имя = "ГруппаЭтапВыполненияПланаШаблон" Тогда
				Продолжить;
			КонецЕсли;
			МассивУдаляемыхЭлементов.Добавить(ПодчЭлемент);
		КонецЦикла;
		Для н = 0 По МассивУдаляемыхЭлементов.ВГраница() Цикл
			УдаляемыйЭлемент = МассивУдаляемыхЭлементов[н];
			МассивУдаляемыхЭлементов[н] = Неопределено;
			Элементы.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаИнформация.Очистить();
	
	Если ЗначениеЗаполнено(ПолеГруппировки) И ТаблицаЗначенияГруппировки.Количество() > 1 Тогда
		Для Каждого СтрокаЗначениеГруппировки Из ТаблицаЗначенияГруппировки Цикл
			
			СтруктураПоиска			= Новый Структура("Этап");
			Если ТипЗнч(СтрокаЗначениеГруппировки.ЗначениеГруппировки) = Тип("СправочникСсылка.Пользователи") Тогда
				СтруктураПоиска.Вставить("Пользователь", СтрокаЗначениеГруппировки.ЗначениеГруппировки);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаЗначениеГруппировки.ЗначениеГруппировки) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				СтруктураПоиска.Вставить("Подразделение", СтрокаЗначениеГруппировки.ЗначениеГруппировки);
			КонецЕсли;
			
			СтруктураПоискаПоСериям	= Новый Структура("Значение,Группировка,Текст");
			
			КоличествоВсегоДляКонверсии = 0;
			Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
				СтруктураПоискаПоСериям.Значение	= СтрокаЭтап.Этап;
				СтруктураПоискаПоСериям.Группировка	= СтрокаЗначениеГруппировки.ЗначениеГруппировки;
				СтруктураПоискаПоСериям.Текст		= "Достроенные";
				
				СтруктураПоиска.Этап				= СтрокаЭтап.Этап;
				
				НайденныеСтрокиТекущие		= ДанныеТекущие.НайтиСтроки(СтруктураПоиска);
				НайденныеСерии				= ТаблицаСерии.НайтиСтроки(СтруктураПоискаПоСериям);
				
				Достроено		= НайденныеСерии[0].ПоказательКоличество;
				ДостроеноСумма	= НайденныеСерии[0].ПоказательСумма;
				
				СтруктураТекущиеПоказатели = Новый Структура("Количество,Сумма,СуммаПотенциальная", 0, 0, 0);
				Если НайденныеСтрокиТекущие.Количество() > 0 Тогда
					НоваяСтрока						= ТаблицаИнформация.Добавить();
					НоваяСтрока.Этап				= СтрокаЭтап.Этап;
					НоваяСтрока.ЭтапПредставление	= Строка(СтрокаЭтап.Этап) + " ("+Строка(СтрокаЭтап.Этап.Оценка) + "% )";
					НоваяСтрока.Группировка			= СтрокаЗначениеГруппировки.ЗначениеГруппировки;
					
					Для Каждого НайденнаяСтрока Из НайденныеСтрокиТекущие Цикл
						НоваяСтрока.Активно		= НоваяСтрока.Активно + НайденнаяСтрока.КоличествоАктивные;
						НоваяСтрока.Удачно		= НоваяСтрока.Удачно + НайденнаяСтрока.КоличествоУспешно;
						НоваяСтрока.Неудачно	= НоваяСтрока.Неудачно + НайденнаяСтрока.КоличествоНеудачно;
						
						Если РежимВоронки = "Активные" Тогда
							НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаАктивные;
							НоваяСтрока.Количество = НоваяСтрока.Количество + НайденнаяСтрока.КоличествоАктивные;
							НоваяСтрока.Дней = НоваяСтрока.Дней + ?(ЗначениеЗаполнено(НайденнаяСтрока.ВремяВыполненияВДняхАктивные), НайденнаяСтрока.ВремяВыполненияВДняхАктивные, 0);
						ИначеЕсли РежимВоронки = "Закрытые" Тогда
							НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаНеудачно + НайденнаяСтрока.СуммаУспешно;
							НоваяСтрока.Количество = НоваяСтрока.Количество + НайденнаяСтрока.КоличествоНеудачно + НайденнаяСтрока.КоличествоУспешно;
							НоваяСтрока.Дней = НоваяСтрока.Дней + НайденнаяСтрока.ВремяВыполненияВДняхНеудачно + НайденнаяСтрока.ВремяВыполненияВДняхУспешно;
						ИначеЕсли РежимВоронки = "Все" Тогда
							НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаАктивные + НайденнаяСтрока.СуммаНеудачно + НайденнаяСтрока.СуммаУспешно;
							НоваяСтрока.Количество = НоваяСтрока.Количество + НайденнаяСтрока.КоличествоАктивные + НайденнаяСтрока.КоличествоНеудачно + НайденнаяСтрока.КоличествоУспешно;
							НоваяСтрока.Дней = НоваяСтрока.Дней + НайденнаяСтрока.ВремяВыполненияВДняхНеудачно + НайденнаяСтрока.ВремяВыполненияВДняхУспешно + НайденнаяСтрока.ВремяВыполненияВДняхАктивные;
						КонецЕсли;
					КонецЦикла;
					
					Если НоваяСтрока.Количество>0 Тогда
						НоваяСтрока.ДнейСреднее = Окр(НоваяСтрока.Дней/НоваяСтрока.Количество, 0);
					КонецЕсли;
					
					НоваяСтрока.Сумма				= НоваяСтрока.Сумма + ДостроеноСумма;
					НоваяСтрока.КоличествоВсего		= НоваяСтрока.Количество + Достроено;
					НоваяСтрока.СуммаПотенциальная	= (НоваяСтрока.Сумма * СтрокаЭтап.Этап.Оценка)/100;
					
					Если КоличествоВсегоДляКонверсии = 0 Тогда
						КоличествоВсегоДляКонверсии = НоваяСтрока.КоличествоВсего;
					КонецЕсли;
					
					Если КоличествоВсегоДляКонверсии = 0 Тогда
						КонверсияЭтапа = 0;
					Иначе
						КонверсияЭтапа								= (НоваяСтрока.КоличествоВсего*100)/КоличествоВсегоДляКонверсии;
					КонецЕсли;
					НоваяСтрока.КоэффициентВероятности				= КонверсияЭтапа;
					НоваяСтрока.КоэффициентВероятностиПредставление	= Формат(КонверсияЭтапа, "ЧДЦ=; ЧН=0") + "%";
					
					Если НоваяСтрока.КоличествоВсего = 0 Тогда
						ПроцентПотерьЭтапа = 0;
					Иначе
						ПроцентПотерьЭтапа							= (НоваяСтрока.Неудачно*100)/НоваяСтрока.КоличествоВсего;
					КонецЕсли;
					НоваяСтрока.ПроцентПотерь						= ПроцентПотерьЭтапа;
					НоваяСтрока.ПроцентПотерьПредставление			= Формат(ПроцентПотерьЭтапа, "ЧДЦ=; ЧН=0") + "%";
					
					ЗаполнитьЗначенияСвойств(СтруктураТекущиеПоказатели, НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Элементы.ТаблицаИнформация.ОтборСтрок = Новый ФиксированнаяСтруктура("Группировка", ПользовательПодразделение);
		Элементы.ТаблицаИнформация.Обновить();
	Иначе
		СтруктураПоиска = Новый Структура("Этап");
		Если (ОтборОтветственные.Количество()>0 ИЛИ ЗначениеЗаполнено(ОтборПодразделение))
		И Не ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
		
		//Если ЗначениеЗаполнено(ПользовательПодразделение) И Не ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
			Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
				СтруктураПоиска.Вставить("Подразделение", ПользовательПодразделение);
			ИначеЕсли ОтборОтветственные.Количество()=1 Тогда
				СтруктураПоиска.Вставить("Пользователь", ОтборОтветственные[0].Значение);
			КонецЕсли;
		КонецЕсли;
		СчетчикИмен = 0;
		
		СтруктураПоискаПоСериям = Новый Структура("Значение,Текст");
		
		КоличествоВсегоДляКонверсии = 0;
		
		Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
			СтруктураПоискаПоСериям.Значение	= СтрокаЭтап.Этап;
			СтруктураПоискаПоСериям.Текст		= "Достроенные";
			
			СтруктураПоиска.Этап				= СтрокаЭтап.Этап;
			
			НайденныеСтрокиТекущие		= ДанныеТекущие.НайтиСтроки(СтруктураПоиска);
			НайденныеСерии				= ТаблицаСерии.НайтиСтроки(СтруктураПоискаПоСериям);
			
			Достроено		= НайденныеСерии[0].ПоказательКоличество;
			ДостроеноСумма	= НайденныеСерии[0].ПоказательСумма;
			
			СтруктураТекущиеПоказатели = Новый Структура("Количество,Сумма,СуммаПотенциальная", 0, 0, 0);
			Если НайденныеСтрокиТекущие.Количество() > 0 Тогда
				НоваяСтрока						= ТаблицаИнформация.Добавить();
				НоваяСтрока.Этап				= СтрокаЭтап.Этап;
				НоваяСтрока.ЭтапПредставление	= Строка(СтрокаЭтап.Этап) + " ("+Строка(СтрокаЭтап.Этап.Оценка) + "% )";
				Для Каждого НайденнаяСтрока Из НайденныеСтрокиТекущие Цикл
					
					//Если ОтборОтветственные.Количество() > 1 ИЛИ НЕ ЗначениеЗаполнено(ОтборПодразделение) Тогда
					Если ОтборОтветственные.Количество() > 1 Тогда
						Если ОтборОтветственные.НайтиПоЗначению(НайденнаяСтрока.Пользователь) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.Активно		= НоваяСтрока.Активно + НайденнаяСтрока.КоличествоАктивные;
					НоваяСтрока.Удачно		= НоваяСтрока.Удачно + НайденнаяСтрока.КоличествоУспешно;
					НоваяСтрока.Неудачно	= НоваяСтрока.Неудачно + НайденнаяСтрока.КоличествоНеудачно;
					
					Если РежимВоронки = "Активные" Тогда
						НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаАктивные;
						НоваяСтрока.Количество = НоваяСтрока.Количество + НайденнаяСтрока.КоличествоАктивные;
						НоваяСтрока.Дней = НоваяСтрока.Дней + ?(ЗначениеЗаполнено(НайденнаяСтрока.ВремяВыполненияВДняхАктивные), НайденнаяСтрока.ВремяВыполненияВДняхАктивные, 0);
					ИначеЕсли РежимВоронки = "Закрытые" Тогда
						НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаНеудачно + НайденнаяСтрока.СуммаУспешно;
						НоваяСтрока.Количество = НоваяСтрока.Количество + НайденнаяСтрока.КоличествоНеудачно + НайденнаяСтрока.КоличествоУспешно;
						НоваяСтрока.Дней = НоваяСтрока.Дней + НайденнаяСтрока.ВремяВыполненияВДняхНеудачно + НайденнаяСтрока.ВремяВыполненияВДняхУспешно;
					ИначеЕсли РежимВоронки = "Все" Тогда
						НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаАктивные + НайденнаяСтрока.СуммаНеудачно + НайденнаяСтрока.СуммаУспешно;
						НоваяСтрока.Количество = НоваяСтрока.Количество + НайденнаяСтрока.КоличествоАктивные + НайденнаяСтрока.КоличествоНеудачно + НайденнаяСтрока.КоличествоУспешно;
						НоваяСтрока.Дней = НоваяСтрока.Дней + НайденнаяСтрока.ВремяВыполненияВДняхНеудачно + НайденнаяСтрока.ВремяВыполненияВДняхУспешно + НайденнаяСтрока.ВремяВыполненияВДняхАктивные;
					КонецЕсли;
				КонецЦикла;
				
				Если НоваяСтрока.Количество>0 Тогда
					НоваяСтрока.ДнейСреднее = Окр(НоваяСтрока.Дней/НоваяСтрока.Количество, 0);
				КонецЕсли;
				
				НоваяСтрока.Сумма				= НоваяСтрока.Сумма + ДостроеноСумма;
				НоваяСтрока.КоличествоВсего		= НоваяСтрока.Количество + Достроено;
				НоваяСтрока.СуммаПотенциальная	= (НоваяСтрока.Сумма * СтрокаЭтап.Этап.Оценка)/100;
				
				Если КоличествоВсегоДляКонверсии = 0 Тогда
					КоличествоВсегоДляКонверсии = НоваяСтрока.КоличествоВсего;
				КонецЕсли;
				
				Если КоличествоВсегоДляКонверсии = 0 Тогда
					КонверсияЭтапа = 0;
				Иначе
					КонверсияЭтапа								= (НоваяСтрока.КоличествоВсего*100)/КоличествоВсегоДляКонверсии;
				КонецЕсли;
				НоваяСтрока.КоэффициентВероятности				= КонверсияЭтапа;
				НоваяСтрока.КоэффициентВероятностиПредставление	= Формат(КонверсияЭтапа, "ЧДЦ=; ЧН=0") + "%";
				
				Если НоваяСтрока.КоличествоВсего = 0 Тогда
					ПроцентПотерьЭтапа = 0;
				Иначе
					ПроцентПотерьЭтапа							= (НоваяСтрока.Неудачно*100)/НоваяСтрока.КоличествоВсего;
				КонецЕсли;
				НоваяСтрока.ПроцентПотерь						= ПроцентПотерьЭтапа;
				НоваяСтрока.ПроцентПотерьПредставление			= Формат(ПроцентПотерьЭтапа, "ЧДЦ=; ЧН=0") + "%";
				
				ЗаполнитьЗначенияСвойств(СтруктураТекущиеПоказатели, НоваяСтрока);
			КонецЕсли;
			
			Если ОтображатьПлановыеПоказатели Тогда
				ОбъектПланирования = Неопределено;
				Если ГруппировкаЗначение = ПредставлениеГруппировкаПользователи() Тогда
					ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер;
				ИначеЕсли ГруппировкаЗначение = ПредставлениеГруппировкаПодразделения() Тогда
					ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение;
				КонецЕсли;
				
				//Если ЗначениеЗаполнено(ПользовательПодразделение) И ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
				//	ЗначениеПоказателяПлан1 = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, ПользовательПодразделение, ОбъектПланирования);
				//	ЗначениеПоказателяПлан2 = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, СравнитьСПользовательПодразделение, ОбъектПланирования);
				//	ЗначениеПоказателяПлан = ЗначениеПоказателяПлан1 + ЗначениеПоказателяПлан2;
				//Иначе
				//	ЗначениеПоказателяПлан = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, ПользовательПодразделение, ОбъектПланирования);
				//КонецЕсли;
				Если (ОтборОтветственные.Количество()>0 ИЛИ ЗначениеЗаполнено(ОтборПодразделение)) И ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
					
					Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
						ЗначениеПоказателяПлан1 = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, ОтборПодразделение, ОбъектПланирования);
					Иначе
						ЗначениеПоказателяПлан1 = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, ОтборОтветственные, ОбъектПланирования);
					КонецЕсли;
					
					ЗначениеПоказателяПлан2 = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, СравнитьСПользовательПодразделение, ОбъектПланирования);
					ЗначениеПоказателяПлан = ЗначениеПоказателяПлан1 + ЗначениеПоказателяПлан2;
					
				ИначеЕсли (ОтборОтветственные.Количество()>0 ИЛИ ЗначениеЗаполнено(ОтборПодразделение)) Тогда
					
					Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
						ЗначениеПоказателяПлан1 = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, ОтборПодразделение, ОбъектПланирования);
					Иначе
						ЗначениеПоказателяПлан1 = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, ОтборОтветственные, ОбъектПланирования);
					КонецЕсли;
					
				Иначе
					ЗначениеПоказателяПлан = РассчитатьПоказательПлан(ДанныеПлан, СтрокаЭтап.Этап,, Неопределено, ОбъектПланирования);
				КонецЕсли;
				
				ДопКИмени = Формат(СчетчикИмен, "ЧДЦ=0; ЧН=0; ЧГ=");
				ЭлементГруппа = Элементы.Добавить("_ГруппаПоказательЭтапаПлана" + ДопКИмени, Тип("ГруппаФормы"), Элементы.ГруппаРезультатыВыполненияПлана);
				ЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ЗаполнитьЗначенияСвойств(ЭлементГруппа, Элементы.ГруппаЭтапВыполненияПланаШаблон,
					"Группировка,Отображение,ОтображатьЗаголовок,Заголовок,Подсказка,Ширина,Высота,РастягиватьПоГоризонтали,РастягиватьПоВертикали");
				//
				
				ЭлементДекорация = Элементы.Добавить("_ДекорацияПоказательЭтапаПлана" + ДопКИмени, Тип("ДекорацияФормы"), ЭлементГруппа);
				ЗаполнитьЗначенияСвойств(ЭлементДекорация, Элементы.ДекорацияЭтапВыполненияПланаЗаголовокШаблон,
					"Вид,Гиперссылка,Шрифт,Ширина,Высота,РастягиватьПоГоризонтали,РастягиватьПоВертикали,ГоризонтальноеПоложение,ВертикальноеПоложение");
				//
				ЭлементДекорация.Заголовок = Строка(СтрокаЭтап.Этап) + " -";
				ЭлементДекорация.ЦветТекста = СоответствиеЭтапыЦвета[СтрокаЭтап.Этап];
				
				СтруктураПроцент = РассчитатьПроцентВыполнения(ЗначениеПоказателяПлан, СтруктураТекущиеПоказатели[Показатель]);
				
				ЭлементДекорация = Элементы.Добавить("_ДекорацияПоказательЭтапаПланаПроцент" + ДопКИмени, Тип("ДекорацияФормы"), ЭлементГруппа);
				ЗаполнитьЗначенияСвойств(ЭлементДекорация, Элементы.ДекорацияЭтапВыполненияПланаПроцентШаблон,
					"Вид,Гиперссылка,Шрифт,Ширина,Высота,РастягиватьПоГоризонтали,РастягиватьПоВертикали,ГоризонтальноеПоложение,ВертикальноеПоложение");
				//
				ЭлементДекорация.Заголовок = СтруктураПроцент.ПроцентПредставление;
				ЭлементДекорация.ЦветТекста = СтруктураПроцент.Цвет;
				
				СчетчикИмен = СчетчикИмен + 1;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ТаблицаИнформация.ОтборСтрок = Неопределено;
		
		Элементы.ТаблицаИнформацияСумма.ТекстПодвала = Формат(ТаблицаИнформация.Итог("Сумма"), "ЧДЦ=2");
		//Элементы.ТаблицаИнформацияКоличество.ТекстПодвала = Формат(ТаблицаИнформация.Итог("Количество"), "ЧДЦ=0");
		Элементы.ТаблицаИнформацияСуммаПотенциальная.ТекстПодвала = Формат(ТаблицаИнформация.Итог("СуммаПотенциальная"), "ЧДЦ=2");
	КонецЕсли;
	
	Элементы.ТаблицаИнформацияКоэффициентВероятностиПредставление.Видимость	= (РежимВоронки = "Закрытые" И Показатель = "Количество");
	Элементы.ТаблицаИнформацияПроцентПотерьПредставление.Видимость			= (РежимВоронки = "Закрытые" И Показатель = "Количество");
	Элементы.ТаблицаИнформацияКоличествоВсего.Видимость						= (Показатель = "Количество");
	Элементы.ТаблицаИнформацияДнейСреднее.Видимость = ЕстьЭтапыПоИнтересам ИЛИ ЕстьЭтапыПоКартамМаршрута;
	
	
		// +Заполняем таблицу этапов в табличном документе для печати
	Для Каждого СтрокаТаблицы Из ТаблицаИнформация Цикл
		Если ЗначениеЗаполнено(ПользовательПодразделение) И НЕ СтрокаТаблицы.Группировка = ПользовательПодразделение Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьСтроки.Параметры,СтрокаТаблицы);
		ДокументРезультат.Вывести(ОбластьСтроки);
	КонецЦикла;	
	
	//ОбластьИтог = Макет.ПолучитьОбласть("Итого");
	//ОбластьИтог.Параметры.Количество		= ТаблицаИнформация.Итог("Количество");
	//ОбластьИтог.Параметры.Сумма				= ТаблицаИнформация.Итог("Сумма");
	//// +Итог по вероятности не считаем
	////ОбластьИтог.Параметры.КВероятности		= ТаблицаИнформация.Итог("КоэффициентВероятности");		
	//// -Итог по вероятности не считаем	
	//ОбластьИтог.Параметры.СуммаПотенц		= ТаблицаИнформация.Итог("СуммаПотенциальная");
	//ДокументРезультат.Вывести(ОбластьИтог);
	// -Заполняем таблицу этапов в табличном документе для печати
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ КЛИЕНТ

&НаСервере
Процедура ЗаполнитьТаблицуЭтапыТекущейВоронкиИСоответствиеТочекМаршрута()
	
	ЭтапыТекущейВоронки.Очистить();
	СоответствиеТочекМаршрута.Очистить();
	
	ЕстьЭтапыПоДокументам		= Ложь;
	ЕстьЭтапыПоИнтересам		= Ложь;
	ЕстьЭтапыПоКартамМаршрута	= Ложь;
		
	Если Не ЗначениеЗаполнено(Воронка) Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка,
	|	ВидЭтапа
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж
	|ГДЕ
	|	Родитель = &Воронка
	|	И НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания ВОЗР, Ссылка ВОЗР
	|");
	Запрос.УстановитьПараметр("Воронка", Воронка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("ТочкаМаршрута,Этап");
	
	Пока Выборка.Следующий() Цикл
		СтрокаЭтап = ЭтапыТекущейВоронки.Добавить();
		СтрокаЭтап.Этап = Выборка.Ссылка;
		
		Для Каждого СтрокаТаблицы Из Выборка.Ссылка.Состав Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.КартаМаршрута) Или Не ЗначениеЗаполнено(СтрокаТаблицы.ТочкаМаршрута) Тогда Продолжить; КонецЕсли;
			
			НоваяСтрока = СтрокаЭтап.Состав.Добавить();
			НоваяСтрока.КартаМаршрута		= СтрокаТаблицы.КартаМаршрута;
			НоваяСтрока.ТочкаМаршрута		= СтрокаТаблицы.ТочкаМаршрута;
			НоваяСтрока.ВариантСчетаНаОплату= СтрокаТаблицы.ВариантСчетаНаОплату;
			
			СтруктураПоиска.ТочкаМаршрута = НоваяСтрока.ТочкаМаршрута;
			СтруктураПоиска.Этап = СтрокаЭтап.Этап;
			НайденныеСтроки = СоответствиеТочекМаршрута.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаСоответствие = СоответствиеТочекМаршрута.Добавить();
				СтрокаСоответствие.ТочкаМаршрута = НоваяСтрока.ТочкаМаршрута;
				СтрокаСоответствие.Этап = СтрокаЭтап.Этап;
			КонецЕсли;
			
			Если Выборка.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
				
				ЕстьЭтапыПоДокументам = Истина;
				
			КонецЕсли;
			
			Если Выборка.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
				
				ЕстьЭтапыПоИнтересам = Истина;
				
			КонецЕсли;
			
			Если Выборка.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоЭтапам Тогда
				
				ЕстьЭтапыПоКартамМаршрута = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеВоронки()
	
	ЗаполнитьТаблицуЭтапыТекущейВоронкиИСоответствиеТочекМаршрута();
	
	Если ЕстьЭтапыПоДокументам ИЛИ ЕстьЭтапыПоКартамМаршрута Тогда
		ОтборТипыУслуг.Очистить();
	КонецЕсли;
	
	НастроитьДоступностьИВидимостьФормы(ЭтотОбъект);
	
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();
	
	ОбновитьДиаграммуНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидЭтапа(Этап)
	
	Возврат Этап.ВидЭтапа;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровОткрытияФормыРасшифровки(ЗначениеСерии, ЗначениеТочки, ЭтоПлан = Ложь)
	
	ЭтапСобытия = Неопределено;
	ЭтапСобытия = ПредопределенноеЗначение("Справочник.CRM_ВоронкиПродаж.ПустаяСсылка");
	
	КартыИТочкиМаршрутаВоронки = ПолучитьВсеКартыИТочкиМаршрутаВоронки();
	
	ПараметрыСтруктура = Новый Структура;
	
	Если ЭтоПлан Тогда
		Для Каждого тЭл Из СписокПараметровРасшифровкиСтатистика Цикл
			ПараметрыСтруктура.Вставить(тЭл.Представление, тЭл.Значение);
		КонецЦикла;
	Иначе
		Для Каждого тЭл Из СписокПараметровРасшифровки Цикл
			ПараметрыСтруктура.Вставить(тЭл.Представление, тЭл.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыСтруктура.Вставить("ПараметрВоронка", Воронка);
	ПараметрыСтруктура.Вставить("ПараметрЭтапСобытия", ЭтапСобытия);
	ПараметрыСтруктура.Вставить("ПараметрКартыМаршрута", КартыИТочкиМаршрутаВоронки.Карты);
	ПараметрыСтруктура.Вставить("Этап", ЗначениеСерии);
	ПараметрыСтруктура.Вставить("ВидЭтапа", ПолучитьВидЭтапа(ЗначениеСерии));
	
	Если НЕ ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
		
		Если ЗначениеЗаполнено(ОтборОтветственные) Тогда
			ПараметрыСтруктура.Вставить("Пользователь", ОтборОтветственные);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			ПараметрыСтруктура.Вставить("Подразделение", ОтборПодразделение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборОфис) Тогда
			ПараметрыСтруктура.Вставить("Офис", ОтборОфис);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборТипыУслуг) Тогда
			ПараметрыСтруктура.Вставить("ТипУслуги", ОтборТипыУслуг);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборРегион) Тогда
		ПараметрыСтруктура.Вставить("БизнесРегион", ОтборРегион);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСегментКлиентов) Тогда
		ПараметрыСтруктура.Вставить("СегментКлиентов", ОтборСегментКлиентов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
		ПараметрыСтруктура.Вставить("ИсточникПривлечения", ПоискИсточникПривлечения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
		ПараметрыСтруктура.Вставить("ЗначениеИсточника", ПоискЗначениеИсточникаПривлечения);
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ПользовательПодразделение) И Не ЗначениеЗаполнено(СравнитьСПользовательПодразделение) Тогда
	//	Если ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
	//		ПараметрыСтруктура.Вставить("Пользователь", ПользовательПодразделение);
	//	ИначеЕсли ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
	//		ПараметрыСтруктура.Вставить("Подразделение", ПользовательПодразделение);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеТочки) Тогда
		Если ТипЗнч(ЗначениеТочки) = Тип("СправочникСсылка.Пользователи") И Не ПараметрыСтруктура.Свойство("Пользователь") Тогда
			ПараметрыСтруктура.Вставить("Пользователь", ЗначениеТочки);
		ИначеЕсли ТипЗнч(ЗначениеТочки) = Тип("СправочникСсылка.СтруктураПредприятия") И Не ПараметрыСтруктура.Свойство("Подразделение") Тогда
			ПараметрыСтруктура.Вставить("Подразделение", ЗначениеТочки);
		КонецЕсли;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	Для Каждого СтрокаЭтапВоронки Из ЭтапыТекущейВоронки Цикл
		
		СтруктураЭтапа = Новый Структура("Этап,Состав",СтрокаЭтапВоронки.Этап,Новый Массив);
		
		Для Каждого ЭлементСостава ИЗ СтрокаЭтапВоронки.Состав Цикл
			
			СтруктураСостава = Новый  Структура("КартаМаршрута,ТочкаМаршрута,ВариантСчетаНаОплату",
												 ЭлементСостава.КартаМаршрута,ЭлементСостава.ТочкаМаршрута,ЭлементСостава.ВариантСчетаНаОплату);
			СтруктураЭтапа.Состав.Добавить(СтруктураСостава);
		КонецЦикла;
		
		МассивСтруктур.Добавить(СтруктураЭтапа);
	КонецЦикла;
	
	ПараметрыСтруктура.Вставить("ЭтапыТекущейВоронки"		, МассивСтруктур);
	ПараметрыСтруктура.Вставить("ЕстьЭтапыПоДокументам"		, ЕстьЭтапыПоДокументам);
	ПараметрыСтруктура.Вставить("ЕстьЭтапыПоИнтересам"		, ЕстьЭтапыПоИнтересам);
	ПараметрыСтруктура.Вставить("ЕстьЭтапыПоКартамМаршрута"	, ЕстьЭтапыПоКартамМаршрута);
	
	МассивЭтапы = Новый Массив();
	Для Каждого СтрокаЭтапВоронки Из ЭтапыТекущейВоронки Цикл
		МассивЭтапы.Добавить(СтрокаЭтапВоронки.Этап);
	КонецЦикла;
	ПараметрыСтруктура.Вставить("ЭтапыВоронки", МассивЭтапы);
	
	Если ФиксированныйОтборПоПользователюПодразделению Тогда
		ПараметрыСтруктура.Вставить("ФиксированныйОтборПоПользователюПодразделению", ФиксированныйОтборПоПользователюПодразделению);
	КонецЕсли;
	
	Возврат ПараметрыСтруктура;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРасшифровки(СтруктураПараметрыФормы)
	
	Форма = ПолучитьФорму("Обработка.CRM_ВоронкаПродаж.Форма.ФормаРасшифровки", СтруктураПараметрыФормы, ЭтотОбъект);
	Если Форма <> Неопределено Тогда
		Форма.Заголовок = Строка(Воронка);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВоронкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивСуществующихВоронок());
	ТекЗначение = СписокВыбора.НайтиПоЗначению(Воронка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВоронкаНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент, ТекЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ВоронкаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Воронка = ВыбранноеЗначение.Значение;
		ПриСменеВоронки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВоронкаПриИзменении(Элемент)
	
	ПриСменеВоронки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВоронкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВоронкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПриИзменении(Элемент)
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ПользовательПодразделение"
//
Процедура ПользовательПодразделениеПриИзменении()
	
	Если НЕ ЗначениеЗаполнено(ПользовательПодразделение) Тогда
		Если СравнитьСПользовательПодразделение <> НСтр("ru = 'Плановые показатели'") Тогда
			СравнитьСПользовательПодразделение = Неопределено;
		КонецЕсли;
		ГруппировкаЗначение = НСтр("ru = 'Не группировать'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПользовательПодразделение) Тогда
		Если ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ОтборПодразделение = ПользовательПодразделение;
			ОтборОтветственные = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
			ОтборПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
			ОтборОтветственные = ПользовательПодразделение;
		КонецЕсли;
	Иначе
		ОтборПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ОтборОтветственные = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();
	
	ОбновитьДиаграммуНаСервере();
	НастроитьДоступностьИВидимостьФормы(ЭтотОбъект);
	
КонецПроцедуры // ПользовательПодразделениеПриИзменении()

&НаКлиенте
Процедура ОтборОтветственныйОчистка(Элемент, СтандартнаяОбработка)
	ПользовательПодразделение = Неопределено;
	ПользовательПодразделениеПриИзменении();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ПользовательПодразделение"
//
Процедура ПользовательПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПользовательПодразделение) Тогда
		РезультатСтруктура = Новый Структура("Значение", ?(ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.Пользователи"), "Пользователи", "Подразделения"));
		ВыборОтбораЗавершение(РезультатСтруктура, Неопределено);
	Иначе
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Пользователи",НСтр("ru ='Пользователи'"));
		СписокВыбора.Добавить("Подразделения",НСтр("ru ='Подразделения'"));
		ВыборОтбораЗавершение = Новый ОписаниеОповещения("ВыборОтбораЗавершение", ЭтотОбъект);
		СписокВыбора.ПоказатьВыборЭлемента(ВыборОтбораЗавершение);
	КонецЕсли;	
КонецПроцедуры // ПользовательПодразделениеНачалоВыбора()

&НаКлиенте
Процедура ВыборОтбораЗавершение(Результат, Дополнительно) Экспорт
	ВыборОтбораИзСправочникаЗавершение = Новый ОписаниеОповещения("ВыборОтбораИзСправочникаЗавершение", ЭтотОбъект);
	Если Результат <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",				Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",		Ложь);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока",			ПользовательПодразделение);
		Если Результат.Значение = "Пользователи" Тогда
			ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ВыборОтбораИзСправочникаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли Результат.Значение = "Подразделения" Тогда
			ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ВыборОтбораИзСправочникаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборОтбораИзСправочникаЗавершение(Отбор, Дополнительно) Экспорт
	Если Отбор <> Неопределено Тогда
		ПользовательПодразделение = Отбор;
		Если ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.Пользователи") Тогда
			ГруппировкаЗначение = НСтр("ru = 'Пользователи'");
		ИначеЕсли ТипЗнч(ПользовательПодразделение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ГруппировкаЗначение = НСтр("ru = 'Подразделения'");
		КонецЕсли;
		ПользовательПодразделениеПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСПользовательПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	
	Если РежимВоронки = "Активные" ИЛИ РежимВоронки = "Закрытые" Тогда
		СписокВыбора.Добавить("План",НСтр("ru ='Плановые показатели'"));
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ПользовательПодразделение) Тогда
	Если ОтборОтветственные.Количество()>0 ИЛИ ЗначениеЗаполнено(ОтборПодразделение) Тогда
		СписокВыбора.Добавить("Пользователи",НСтр("ru ='Пользователи'"));
		СписокВыбора.Добавить("Подразделения",НСтр("ru ='Подразделения'"));
	КонецЕсли;
	
	Если СписокВыбора.Количество() > 0 Тогда
		ВыборПоказателяЗавершение = Новый ОписаниеОповещения("ВыборПоказателяЗавершение", ЭтотОбъект);
		СписокВыбора.ПоказатьВыборЭлемента(ВыборПоказателяЗавершение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПоказателяЗавершение(Результат, Дополнительно) Экспорт
	Если Результат <> Неопределено Тогда
		ВыборСравненияИзСправочникаЗавершение = Новый ОписаниеОповещения("ВыборСравненияИзСправочникаЗавершение", ЭтотОбъект);
		Если Результат.Значение = "План" Тогда
			СравнитьСПользовательПодразделение = Результат;
			ОтображатьПлановыеПоказатели = Истина;
			ОбновитьДиаграммуНаСервере();
			НастроитьДоступностьИВидимостьФормы(ЭтотОбъект);
		ИначеЕсли Результат.Значение = "Пользователи" Тогда
			ОтображатьПлановыеПоказатели = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",				Истина);
			ПараметрыФормы.Вставить("МножественныйВыбор",		Ложь);
			ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Истина);
			ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ВыборСравненияИзСправочникаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли Результат.Значение = "Подразделения" Тогда
			ОтображатьПлановыеПоказатели = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",				Истина);
			ПараметрыФормы.Вставить("МножественныйВыбор",		Ложь);
			ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Истина);
			ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", , ЭтотОбъект, , , , ВыборСравненияИзСправочникаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСравненияИзСправочникаЗавершение(Показатель, Дополнительно) Экспорт
	Если Показатель <> Неопределено Тогда
		СравнитьСПользовательПодразделение = Показатель;
		ОбновитьДиаграммуНаСервере();
	КонецЕсли;
	НастроитьДоступностьИВидимостьФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСПользовательПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	ОтображатьПлановыеПоказатели = Ложь;
	СравнитьСПользовательПодразделение = Неопределено;
	ОбновитьДиаграммуНаСервере();
	НастроитьДоступностьИВидимостьФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлементОтбораПоИдентификаторуПользовательскойНастройки(НастройкиКомпоновщика, Идентификатор)
	Для Каждого ЭлементОтбора Из НастройкиКомпоновщика.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляОтчета(ПереданныеПараметры)
	
	// Создание и настройка схемы компоновки данных
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанныхЗадачи";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанныхСобытия";
	НаборДанных.ИсточникДанных = "ИсточникДанныхЗадачи";
	
	
	ТекстЗапроса = CRM_ВоронкиПродажСервер.ВоронкаПродажПолучитьТекстЗапросаРасшифрокиПоСостояниямИнтересов();
	
	//Если ТипЗнч(ПереданныеПараметры.ПараметрУспешно) = Тип("СписокЗначений") Тогда
	Если ТипЗнч(ПереданныеПараметры.ПараметрУспешно) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_СОСТОЯНИЯМ", "ВсеИнтересы.АктивнаяУспешноНеУдачно В (&АктивнаяУспешноНеУдачно)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_СОСТОЯНИЯМ", "ВсеИнтересы.АктивнаяУспешноНеУдачно = &АктивнаяУспешноНеУдачно");
	КонецЕсли;
	
	НаборДанных.Запрос = ТекстЗапроса;
	
	НастройкиСКД = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанные));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// Пропускаем системные поля
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
	КонецЦикла;
	
	// Настройка настроек СКД по параметрам формы
	НастройкиСКД.ПараметрыДанных.Элементы.Очистить();
	Если ПереданныеПараметры.Свойство("ПараметрВоронка") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Воронка");
		Параметр.Значение = ПереданныеПараметры.ПараметрВоронка;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если ПереданныеПараметры.Свойство("ПараметрКартыМаршрута") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КартыМаршрута");
		Параметр.Значение = ПереданныеПараметры.ПараметрКартыМаршрута;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если ПереданныеПараметры.Свойство("ПараметрЭтапСобытия") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ЭтапСобытия");
		Параметр.Значение = ПереданныеПараметры.ПараметрЭтапСобытия;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если ПереданныеПараметры.Свойство("ПараметрНачалоПериода") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода");
		Параметр.Значение = ПереданныеПараметры.ПараметрНачалоПериода;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если ПереданныеПараметры.Свойство("ПараметрКонецПериода") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода");
		Параметр.Значение = ПереданныеПараметры.ПараметрКонецПериода;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если ПереданныеПараметры.Свойство("ПараметрГоризонтВоронки") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронки");
		Параметр.Значение = ПереданныеПараметры.ПараметрГоризонтВоронки;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если ПереданныеПараметры.Свойство("ПараметрГоризонтВоронкиПрогноз") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронкиПрогноз");
		Параметр.Значение = ПереданныеПараметры.ПараметрГоризонтВоронкиПрогноз;
		Параметр.Использование = Истина;
	КонецЕсли;
	
	Если ПереданныеПараметры.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов 
	ИЛИ ПереданныеПараметры.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
		
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("АктивнаяУспешноНеУдачно");
		Параметр.Значение = ПереданныеПараметры.ПараметрУспешно;
		Параметр.Использование = Истина;
		
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Этап");
		Параметр.Значение = ПереданныеПараметры.Этап;
		Параметр.Использование = Истина;
	КонецЕсли;
	
	Если ПереданныеПараметры.Свойство("Этап") И ЗначениеЗаполнено(ПереданныеПараметры.Этап) Тогда
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Этап", ВидСравненияКомпоновкиДанных.Равно, ПереданныеПараметры.Этап, Истина);
	КонецЕсли;
	
	Если ПереданныеПараметры.Свойство("Пользователь") И ЗначениеЗаполнено(ПереданныеПараметры.Пользователь) Тогда
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Пользователь", ВидСравненияКомпоновкиДанных.ВСписке, ПереданныеПараметры.Пользователь, Истина);
	КонецЕсли;
	
	Если ПереданныеПараметры.Свойство("Подразделение") И ЗначениеЗаполнено(ПереданныеПараметры.Подразделение) Тогда
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Подразделение", ВидСравненияКомпоновкиДанных.Равно, ПереданныеПараметры.Подразделение, Истина);
	КонецЕсли;
	
	Если ПереданныеПараметры.Свойство("Офис") И ЗначениеЗаполнено(ПереданныеПараметры.Офис) Тогда
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Офис", ВидСравненияКомпоновкиДанных.Равно, ПереданныеПараметры.Офис, Истина);
	КонецЕсли;
	
	Если ПереданныеПараметры.Свойство("ТипУслуги") И ЗначениеЗаполнено(ПереданныеПараметры.ТипУслуги) Тогда
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "ТипУслуги", ВидСравненияКомпоновкиДанных.ВСписке, ПереданныеПараметры.ТипУслуги, Истина);
	КонецЕсли;
	
	Если ПереданныеПараметры.Свойство("БизнесРегион") И ЗначениеЗаполнено(ПереданныеПараметры.БизнесРегион) Тогда
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "БизнесРегион", ВидСравненияКомпоновкиДанных.Равно, ПереданныеПараметры.БизнесРегион, Истина);
	КонецЕсли;
	
	Если ПереданныеПараметры.Свойство("СегментКлиентов") И ЗначениеЗаполнено(ПереданныеПараметры.СегментКлиентов) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПартнерыСегмента.Партнер
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|ГДЕ
		|	ПартнерыСегмента.Сегмент = &СегментКлиентов";
		Запрос.УстановитьПараметр("СегментКлиентов", ПереданныеПараметры.СегментКлиентов);
		Выборка = Запрос.Выполнить().Выбрать();
		СписокПартнеров = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			СписокПартнеров.Добавить(Выборка.Партнер);
		КонецЦикла;	
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Клиент", ВидСравненияКомпоновкиДанных.ВСписке, СписокПартнеров, Истина);
	КонецЕсли;
	
	Если ПереданныеПараметры.Свойство("ИсточникПривлечения") И ЗначениеЗаполнено(ПереданныеПараметры.ИсточникПривлечения) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсточникиПервичногоИнтересаСрезПоследних.Сделка
		|ИЗ
		|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних КАК ИсточникиПервичногоИнтересаСрезПоследних
		|ГДЕ
		|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса = &КаналПервичногоИнтереса
		|	"+?(ПереданныеПараметры.Свойство("ЗначениеИсточника") И ЗначениеЗаполнено(ПереданныеПараметры.ЗначениеИсточника), "И ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса = &ИсточникПервичногоИнтереса", "");
		Запрос.УстановитьПараметр("КаналПервичногоИнтереса", ПереданныеПараметры.ИсточникПривлечения);
		Если ПереданныеПараметры.Свойство("ЗначениеИсточника") И ЗначениеЗаполнено(ПереданныеПараметры.ЗначениеИсточника) Тогда
			Запрос.УстановитьПараметр("ИсточникПервичногоИнтереса", ПереданныеПараметры.ЗначениеИсточника);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		СписокДокументов = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			СписокДокументов.Добавить(Выборка.Сделка);
		КонецЦикла;	
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Документ", ВидСравненияКомпоновкиДанных.ВСписке, СписокДокументов, Истина);
	КонецЕсли;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанные, НастройкиСКД,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "РасшифровкаВоронкиПродаж");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("РасшифровкаВоронкиПродаж", Истина);
	СписокЗавершен = Новый СписокЗначений;
	СписокЗавершен.Добавить(Истина);
	СписокЗавершен.Добавить(Ложь);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИнтересЗавершен", СписокЗавершен);
	
	СписокИнтересов = Новый СписокЗначений;
	СписокИнтересов.ЗагрузитьЗначения(РезультатТаблица.ВыгрузитьКолонку("Документ"));
	
	Отбор.Вставить("Ссылка", СписокИнтересов);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	//ПараметрыФормы.Вставить("Расшифровка", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ПолучитьОценкуТочки(Точка)
	
	Возврат Точка.Оценка;
	
КонецФункции

&НаКлиенте
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗНч(Расшифровка) = Тип("Структура") Тогда
		ЗначениеТочки = Неопределено;
		ЗначениеСерии = Неопределено;
		Расшифровка.Свойство("Точка", ЗначениеТочки);
		Расшифровка.Свойство("Серия", ЗначениеСерии);
		
		СтруктураПараметрыФормы = ПолучитьСтруктуруПараметровОткрытияФормыРасшифровки(ЗначениеСерии, ЗначениеТочки, Расшифровка.Свойство("ЭтоПлан"));
		Если Расшифровка.Свойство("ЭтоПлан") Тогда
			ЗначениеПользователь = Неопределено;
			ЗначениеПодразделение = Неопределено;
			СтруктураПараметрыФормы.Свойство("Пользователь", ЗначениеПользователь);
			СтруктураПараметрыФормы.Свойство("Подразделение", ЗначениеПодразделение);
			Если ЗначениеЗаполнено(ЗначениеПользователь) Тогда
				ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер");
				ЗначениеОбъектаПланирования = ЗначениеПользователь;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеПодразделение) Тогда
				ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение");
				ЗначениеОбъектаПланирования = ЗначениеПодразделение;
			Иначе
				ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Предприятие");
			КонецЕсли;
			МассивДокументов = ПолучитьМассивДокументовПланированиеВоронкиПродаж(Воронка, ОбъектПланирования, СтруктураПараметрыФормы.Этап, ЗначениеОбъектаПланирования);
			Если МассивДокументов.Количество() = 1 Тогда
				Форма = ПолучитьФорму("Документ.CRM_ПланированиеВоронкиПродаж.ФормаОбъекта", Новый Структура("Ключ", МассивДокументов[0]), ЭтотОбъект);
				Если Форма <> Неопределено Тогда
					Форма.Открыть();
				КонецЕсли;
			ИначеЕсли МассивДокументов.Количество() > 1 Тогда
				СписокОтбор = Новый СписокЗначений();
				СписокОтбор.ЗагрузитьЗначения(МассивДокументов);
				СтруктураОтбор = Новый Структура("Ссылка", СписокОтбор);
				СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
				//Форма = ПолучитьФорму("ЖурналДокументов.CRM_Планирование.ФормаСписка", СтруктураПараметры, ЭтотОбъект);
				//Если Форма <> Неопределено Тогда
				//	Форма.Открыть();
				//КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтруктураПараметрыФормы.ВидЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов") Тогда
				
				Если Расшифровка.Свойство("АктивныеУспешноНеудачно") Тогда
					СтруктураПараметрыФормы.Вставить("ПараметрУспешно", Расшифровка.АктивныеУспешноНеудачно);
				КонецЕсли;
				
				ПараметрыФормы = ПолучитьПараметрыДляОтчета(СтруктураПараметрыФормы);
				
				ФормаРасшифровки = ПолучитьФорму("Отчет.УдалитьCRM_КонтрольРуководителя_РасшифровкаВоронки.Форма", ПараметрыФормы, ЭтотОбъект);
				ФормаРасшифровки.Заголовок = НСтр("ru = 'Список интересов по состоянию:'") + " " + Строка(Расшифровка.Точка) + " ("+Строка(ПолучитьОценкуТочки(Расшифровка.Точка)) + "% )";
				ФормаРасшифровки.Открыть();	
				
			Иначе
				Если Расшифровка.Свойство("АктивныеУспешноНеудачно") Тогда
					СтруктураПараметрыФормы.Вставить("ПараметрУспешно", Расшифровка.АктивныеУспешноНеудачно);
				КонецЕсли;
				ОткрытьФормуРасшифровки(СтруктураПараметрыФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "ТаблицаИнформация"
//
Процедура ТаблицаИнформацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтруктураПараметрыФормы = ПолучитьСтруктуруПараметровОткрытияФормыРасшифровки(Элемент.ТекущиеДанные.Этап, Элемент.ТекущиеДанные.Этап, Ложь);
	
	//СписокРежимов = Новый СписокЗначений;
	СписокРежимов = Новый массив;
	Если РежимВоронки = "Активные" Тогда
		СписокРежимов.Добавить(2);
	ИначеЕсли РежимВоронки = "Закрытые" Тогда
		СписокРежимов.Добавить(0);
		СписокРежимов.Добавить(1);
	ИначеЕсли РежимВоронки = "Все" Тогда
		СписокРежимов.Добавить(0);
		СписокРежимов.Добавить(1);
		СписокРежимов.Добавить(2);
	КонецЕсли;
	
	СтруктураПараметрыФормы.Вставить("ПараметрУспешно", СписокРежимов);
	
	Если СтруктураПараметрыФормы.ВидЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов") Тогда
		ПараметрыФормы = ПолучитьПараметрыДляОтчета(СтруктураПараметрыФормы);
		
		ФормаРасшифровки = ПолучитьФорму("Отчет.УдалитьCRM_КонтрольРуководителя_РасшифровкаВоронки.Форма", ПараметрыФормы, ЭтотОбъект);
		ФормаРасшифровки.Заголовок = НСтр("ru = 'Список интересов по состоянию:'") + " " + Элемент.ТекущиеДанные.ЭтапПредставление;
		ФормаРасшифровки.Открыть();
	Иначе
		ОткрытьФормуРасшифровки(СтруктураПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры // ТаблицаИнформацияВыбор()

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура КомандаОбновить(Команда)
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаРасшифровка(Команда)
	ИмяКоманды = Команда.Имя;
	
	Поз = Найти(ИмяКоманды, "_");
	ИмяКоманды = Сред(ИмяКоманды, Поз + 1);
	
	Поз = Найти(ИмяКоманды, "_");
	ИндексВТаблице = Число(Лев(ИмяКоманды, Поз - 1));
	
	ИмяКоманды = Сред(ИмяКоманды, Поз + 1);
	
	СтруктураПараметрыФормы = ПолучитьСтруктуруПараметровОткрытияФормыРасшифровки(ТаблицаИнформация[ИндексВТаблице].Этап, Неопределено);
	СтруктураПараметрыФормы.Вставить("Вариант", ИмяКоманды);
	ОткрытьФормуРасшифровки(СтруктураПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеВернутьАдрес(ДокументРезультат, УникальныйИдентификатор)
	
	Возврат ПоместитьВоВременноеХранилище(ДокументРезультат, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	
	АдресВХран = ПоместитьВоВременноеХранилищеВернутьАдрес(ДокументРезультат, УникальныйИдентификатор);
	
	ОткрытьФорму("Обработка.CRM_ВоронкаПродаж.Форма.Печать",Новый Структура("АдресТабличногоДокумента", АдресВХран),ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	//ОтборОтветственныйПриИзмененииНаСервере();
	//ОтборПодразделениеПриИзменении(Неопределено);
	Если ОтборОтветственные.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			ГруппировкаЗначение = НСтр("ru = 'Подразделения'");
		Иначе
			ГруппировкаЗначение = НСтр("ru = 'Не группировать'");
		КонецЕсли;
	Иначе
		ГруппировкаЗначение = НСтр("ru = 'Пользователи'");
	КонецЕсли;
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.БыстрыеОтборы, Элементы.ЗначенияБыстрыеОтборы);
	ОбновитьДиаграммуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		ГруппировкаЗначение = НСтр("ru = 'Подразделения'");
	Иначе
		Если ОтборОтветственные.Количество() > 0 Тогда
			ГруппировкаЗначение = НСтр("ru = 'Пользователи'");
		Иначе
			ГруппировкаЗначение = НСтр("ru = 'Не группировать'");
		КонецЕсли;
	КонецЕсли;
	
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();

	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.БыстрыеОтборы, Элементы.ЗначенияБыстрыеОтборы);
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеДляТеговПриИзмененииНаСервере()
	СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов, Истина));	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияОтбораТегов()
	
	Если ЕстьЭтапыПоИнтересам И НЕ ЕстьЭтапыПоДокументам И НЕ ЕстьЭтапыПоКартамМаршрута Тогда
		CRM_Теги.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, ,ОтборПодразделениеДляТегов, СписокВышестоящихПодразделений.ВыгрузитьЗначения(), Истина);
		Элементы.ОтборТеги.Видимость = Истина;
	Иначе
		Элементы.ОтборТеги.Видимость = Ложь;
		CRM_Теги.ОбновитьЗначенияОтбораТегов(ЭтотОбъект,,,,);
		Элементы.ОтборТеги.Заголовок = НСтр("ru = 'Теги'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	//элементы с нестандатртным поведением	
	ЭлементДляОчистики = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Очистить");
	ЭлементДляОтбораБезТегов = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Нет");
	
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ОтбиратьОбъектыБезТегов = НЕ ОтбиратьОбъектыБезТегов;
	КонецЕсли; 
	
	СписокОбъектовСТегами.Очистить();
	
	Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "ОтборИнтересов", Элемент, СтандартнаяОбработка);
	
	// поведение при нажатии на кнопку очистки отборов по тегам
	Если Элемент = ЭлементДляОчистики Тогда
		ОтбиратьПоТегам = Ложь;
		ОтбиратьОбъектыБезТегов = Ложь;
		ОбновитьЗначенияОтбораТегов();
		ОбновитьДиаграммуНаСервере();
		Возврат;
	КонецЕсли; 
	
	// поведение при нажатии на кнопку отбора [нет тегов]
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ИзменитьЦветЭлементаСервер(ОтбиратьОбъектыБезТегов, ЭлементДляОтбораБезТегов.Имя);
		Если ОтбиратьОбъектыБезТегов Тогда			
			Если ЭлементДляОчистики <> Неопределено Тогда
				ЭлементДляОчистики.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	// поведение при нажатии на теги
	Если НЕ Пометка = Неопределено И Элемент <> ЭлементДляОтбораБезТегов Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
		Если Пометка Тогда			
			Если ЭлементДляОчистики <> Неопределено Тогда
				ЭлементДляОчистики.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	ОбновитьДиаграммуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЭлементаСервер(Пометка, ИмяЭлемента)
	
	CRM_Теги.ИзменитьЦветЭлементаОтбора(ЭтотОбъект, Пометка, ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть воронку продаж. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ЗаполнитьСписокВыбораТипДиаграммы();
	
	ВалютаУправленческогоУчета = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	
	ИспользоватьБизнесПроцессы = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы");
	
	ЗагрузитьНастройкиФормы();
	
	Если НЕ Пользователи.РолиДоступны("CRM_АнализПродажИВзаиморасчетовСКлиентами, ПолныеПрава") Тогда
		Элементы.ОтборОтветственные.Доступность = Ложь;
		ОтборОтветственные.Очистить();
		ОтборОтветственные.Добавить(Пользователи.ТекущийПользователь());
		ФиксированныйОтборПоПользователюПодразделению	= Истина;
	КонецЕсли;
	
	ЗаполнитьЦветовуюГамму();
	
	ОбновитьЗначенияОтбораПериодов();
	ВариантПериода = "ТекущийМесяц";
	ОтборПериод = ОтборСозданы[1].Значение;
	
	Если ЗначениеЗаполнено(Воронка) Тогда
		ЗаполнитьТаблицуЭтапыТекущейВоронкиИСоответствиеТочекМаршрута();
	КонецЕсли;
	
	НастроитьДоступностьИВидимостьФормы(ЭтотОбъект);
	
	Элементы.ТаблицаИнформацияСумма.Заголовок = НСтр("ru = 'Сумма ('") + ВалютаУправленческогоУчета +")";
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Элементы.ЗначенияОтбораТеги.Видимость = Ложь;
		ОтбиратьПоТегам = Ложь;
	Иначе
		ОтбиратьОбъектыБезТегов = Ложь;
		ОтборПодразделениеДляТегов = Пользователи.АвторизованныйПользователь().Подразделение;
		ОтборПодразделениеДляТеговПриИзмененииНаСервере();
		ОбновитьЗначенияОтбораТегов();
	КонецЕсли;
	Элементы.ОтборОтветственные.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОсновныеОтборы;	
	ОсновныеОтборы(Элементы.ОсновныеОтборы);
	
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.БыстрыеОтборы, Элементы.ЗначенияБыстрыеОтборы);
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.ОсновныеОтборы, Элементы.ЗначенияОсновныеОтборы);
	
	Если ЗначениеЗаполнено(ВариантПериода) Тогда
		CRM_ТегиКлиент.ОтборПоПеридуНажатие(ОтборСозданы, ВариантПериода, Элементы.ОтборПериод, Элементы.ЗначенияОтбораПериод);
		ОтборИнтересов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
		ОтборБизнесПроцессов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
		ОтборДокументы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
		CRM_ТегиКлиент.УстановитьОтборПоПериоду(ЭтотОбъект, "ОтборДокументы", ОтборСозданы, ВариантПериода);
	КонецЕсли;
	
	ОтборИнтересов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборБизнесПроцессов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборДокументы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);

	Если ЗначениеЗаполнено(Воронка) Тогда
		ПриСменеВоронки()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПоискИсточникПривлечения = Настройки.Получить("ПоискИсточникПривлечения");
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "ИсточникПривлечения", ПоискИсточникПривлечения, Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) И НЕ (ТипПВХ(ПоискИсточникПривлечения) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Истина;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Ложь;
	Иначе
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Ложь;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Истина;
	КонецЕсли;
	
	ПоискЗначениеИсточникаПривлечения = Настройки.Получить("ПоискЗначениеИсточникаПривлечения");
	Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "ЗначениеИсточникаПривлечения", ПоискЗначениеИсточникаПривлечения, Истина);
	КонецЕсли;
	ОтборСегментКлиентов = Настройки.Получить("ОтборСегментКлиентов");
	Если ЗначениеЗаполнено(ОтборСегментКлиентов) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "Сегмент", ОтборСегментКлиентов, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборБизнесПроцессов, "Сегмент", ОтборСегментКлиентов, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборДокументы, "Сегмент", ОтборСегментКлиентов, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	ОтборРегион = Настройки.Получить("ОтборРегион");
	Если ЗначениеЗаполнено(ОтборРегион) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "БизнесРегион", ОтборРегион, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборБизнесПроцессов, "БизнесРегион", ОтборРегион, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборДокументы, "БизнесРегион", ОтборРегион, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	ОтборТолькоНовые = Настройки.Получить("ОтборТолькоНовые");
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "НовыйКлиент", Истина, ОтборТолькоНовые);
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборБизнесПроцессов, "НовыйКлиент", Истина, ОтборТолькоНовые);
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборДокументы, "НовыйКлиент", Истина, ОтборТолькоНовые);

	
	ВариантПериода = Настройки.Получить("ВариантПериода");
	ПроизвольныйПериод =  Настройки.Получить("ПроизвольныйПериод");
	ОтборСозданы[0].Значение = ПроизвольныйПериод;
	Для каждого Период из ОтборСозданы Цикл
		Если ВариантПериода = Период.Представление Тогда
			ОтборПериод = Период.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
// Серверный обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытииНаСервере()
	СохранитьНастройкиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РежимВоронкиПриИзменении(Элемент)
	
	//ТипДиаграммыЗначение = "ГистограммаСНакоплениемГоризонтальнаяОбъемная";
	
	Если РежимВоронки = "Все" Тогда
		ОтображатьПлановыеПоказатели = Ложь;
		Если СравнитьСПользовательПодразделение = "Плановые показатели" Тогда
			СравнитьСПользовательПодразделение = Неопределено;
		КонецЕсли;
		НастроитьДоступностьИВидимостьФормы(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОфисПриИзменении(Элемент)
	
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.БыстрыеОтборы, Элементы.ЗначенияБыстрыеОтборы);
	ОбновитьДиаграммуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипыУслугПриИзменении(Элемент)
	
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.БыстрыеОтборы, Элементы.ЗначенияБыстрыеОтборы);
	ОбновитьДиаграммуНаСервере();
	
КонецПроцедуры

#Область Отборы

&НаСервере
Процедура ОбновитьЗначенияОтбораПериодов()
	
	ОтборСозданы.Очистить();
	ОтборСозданы.Добавить(, "ПроизвольныйПериод");
	
	ПериодМесяц = ОтборСозданы.Добавить(, "ТекущийМесяц");
	ПериодМесяц.Значение.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	
	ПериодМесяц = ОтборСозданы.Добавить(, "ПрошлыйМесяц");
	ПериодМесяц.Значение.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеОтборы(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбораДанных(Элементы.ГруппаКомандыОтбора, Элемент, Элементы.ЗначенияОсновныеОтборы);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборы(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбораДанных(Элементы.ГруппаКомандыОтбора, Элемент, Элементы.ЗначенияБыстрыеОтборы);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериод(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбораДанных(Элементы.ГруппаКомандыОтбора, Элемент, Элементы.ЗначенияОтбораПериод);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбораДанных(Элементы.ГруппаКомандыОтбора, Элемент, Элементы.ЗначенияОтбораТеги);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТекущийМесяцНажатие(Элемент)
	Если CRM_ТегиКлиент.ОтборПоПеридуНажатие(ОтборСозданы, "ТекущийМесяц", Элементы.ОтборПериод, Элементы.ЗначенияОтбораПериод, Элемент) Тогда
		ВариантПериода = "ТекущийМесяц";
		ОтборПериод = ОтборСозданы[1].Значение;
		ПроизвольныйПериод = Новый СтандартныйПериод;
	Иначе
		ОтборПериод = Новый СтандартныйПериод;
		ВариантПериода = "";
	КонецЕсли;
	ОтборИнтересов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборБизнесПроцессов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборДокументы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	CRM_ТегиКлиент.УстановитьОтборПоПериоду(ЭтотОбъект, "ОтборДокументы", ОтборСозданы, "ТекущийМесяц");
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПрошлыйМесяцНажатие(Элемент)
	Если CRM_ТегиКлиент.ОтборПоПеридуНажатие(ОтборСозданы, "ПрошлыйМесяц", Элементы.ОтборПериод, Элементы.ЗначенияОтбораПериод, Элемент) Тогда
		ВариантПериода = "ПрошлыйМесяц";
		ОтборПериод = ОтборСозданы[2].Значение;
		ПроизвольныйПериод = Новый СтандартныйПериод;
	Иначе
		ОтборПериод = Новый СтандартныйПериод;
		ВариантПериода = "";
	КонецЕсли;
	ОтборИнтересов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборБизнесПроцессов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборДокументы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	CRM_ТегиКлиент.УстановитьОтборПоПериоду(ЭтотОбъект, "ОтборДокументы", ОтборСозданы, "ПрошлыйМесяц");
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	Если CRM_ТегиКлиент.ОтборПоПеридуНажатие(ОтборСозданы, "ПроизвольныйПериод", Элементы.ОтборПериод, Элементы.ЗначенияОтбораПериод, Элемент) Тогда
		ВариантПериода = "ПроизвольныйПериод";
	Иначе
		ВариантПериода = "";
	КонецЕсли;
	ОтборПериод = ОтборСозданы[0].Значение;
	ОтборИнтересов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборБизнесПроцессов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборДокументы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	CRM_ТегиКлиент.УстановитьОтборПоПериоду(ЭтотОбъект, "ОтборДокументы", ОтборСозданы, "ПроизвольныйПериод");
	ПроизвольныйПериод = ОтборПериод;
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОчиститьНажатие(Элемент)
	ВариантПериода = "";
	CRM_ТегиКлиент.ОчиститьОтборПоПеридуНажатие(ОтборСозданы, Элементы.ОтборПериод, Элементы.ЗначенияОтбораПериод);
	ОтборПериод = Новый СтандартныйПериод;
	ОтборИнтересов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборБизнесПроцессов.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	ОтборДокументы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ОтборПериод.ДатаНачала);
	CRM_ТегиКлиент.УстановитьОтборПоПериоду(ЭтотОбъект, "ОтборДокументы", ОтборСозданы, "ПроизвольныйПериод");
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеДляТеговПриИзменении(Элемент)
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборТолькоНовыеПриИзменении(Элемент)
	
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "НовыйКлиент", Истина, ОтборТолькоНовые);
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборБизнесПроцессов, "НовыйКлиент", Истина, ОтборТолькоНовые);
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборДокументы, "НовыйКлиент", Истина, ОтборТолькоНовые);
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.ОсновныеОтборы, Элементы.ЗначенияОсновныеОтборы);
	ОбновитьДиаграммуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискИсточникПривлеченияПриИзменении(Элемент)
	ПоискЗначениеИсточникаПривлечения = Неопределено;
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "ЗначениеИсточникаПривлечения");
	Элементы.ПоискЗначениеИсточникаПривлечения.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПоискИсточникПривлечения, "ТипЗначения"));
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "ИсточникПривлечения", ПоискИсточникПривлечения, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "ИсточникПривлечения");
	КонецЕсли;
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.ОсновныеОтборы, Элементы.ЗначенияОсновныеОтборы);
	ОбновитьДиаграммуНаСервере();
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) И НЕ (ТипПВХ(ПоискИсточникПривлечения) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Истина;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Ложь;
	Иначе
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Ложь;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
Процедура ПоискЗначениеИсточникаПривлеченияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "ЗначениеИсточникаПривлечения", ПоискЗначениеИсточникаПривлечения, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "ЗначениеИсточникаПривлечения");
	КонецЕсли;
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.ОсновныеОтборы, Элементы.ЗначенияОсновныеОтборы);
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КаналПервичногоИнтереса".
//
Процедура ПоискИсточникПривлеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	//ПараметрыФормы.Вставить("ТекущаяСтрока",	ПоискИсточникПривлечения);
	//ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры // КаналПервичногоИнтересаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ИсточникПервичногоИнтереса".
//
Процедура ПоискЗначениеИсточникаПривлеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
		Если ТипПВХ(ПоискИсточникПривлечения)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ПоискЗначениеИсточникаПривлечения);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) И (ТипЗнч(ПоискЗначениеИсточникаПривлечения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПоискЗначениеИсточникаПривлечения, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.Партнеры") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			//ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			//Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) И (ТипЗнч(ПоискЗначениеИсточникаПривлечения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
			//	ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПоискЗначениеИсточникаПривлечения, "Владелец"));
			//КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , );
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.Пользователи") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			//ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			//Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) И (ТипЗнч(ПоискЗначениеИсточникаПривлечения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
			//	ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПоискЗначениеИсточникаПривлечения, "Владелец"));
			//КонецЕсли;	
			ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , );	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // ИсточникПервичногоИнтересаНачалоВыбора()

&НаКлиенте
Процедура ОтборСегментКлиентовПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборСегментКлиентов) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "Сегмент", ОтборСегментКлиентов, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборБизнесПроцессов, "Сегмент", ОтборСегментКлиентов, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборДокументы, "Сегмент", ОтборСегментКлиентов, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "Сегмент");
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборБизнесПроцессов, "Сегмент");
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборДокументы, "Сегмент");
	КонецЕсли;
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.ОсновныеОтборы, Элементы.ЗначенияОсновныеОтборы);
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборРегионПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборРегион) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "БизнесРегион", ОтборРегион, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборБизнесПроцессов, "БизнесРегион", ОтборРегион, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборДокументы, "БизнесРегион", ОтборРегион, Истина, ВидСравненияКомпоновкиДанных.ВИерархии);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборИнтересов, "БизнесРегион");
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборБизнесПроцессов, "БизнесРегион");
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ОтборДокументы, "БизнесРегион");
	КонецЕсли;
	CRM_ТегиКлиент.ЗначенияОтборовИзменение(ЭтотОбъект, Элементы.ОсновныеОтборы, Элементы.ЗначенияОсновныеОтборы);
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДинСписка(ДинСписок, СтрокаПолей) Экспорт
 
    СКД = Новый СхемаКомпоновкиДанных;
    Источник = СКД.ИсточникиДанных.Добавить();
    Источник.Имя = "ЛокальнаяБаза";
    Источник.СтрокаСоединения     = "";
    Источник.ТипИсточникаДанных = "Local";
    
    // скопируем текст запроса из динамического списка
 
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Имя = "Основной";
    НаборДанных.ИсточникДанных = "ЛокальнаяБаза";
    НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
    НаборДанных.Запрос = ДинСписок.ТекстЗапроса;
    ТекстЗапроса = ДинСписок.ТекстЗапроса;
    СКД.НаборыДанных.Основной.Запрос = ТекстЗапроса;
    
    // добавляем поля
 
    МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПолей);
    Для каждого Поле Из МассивПолей Цикл
        ПолеСКД = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
        ПолеСКД.Заголовок     = Поле;
        ПолеСКД.ПутьКДанным = Поле;
        ПолеСКД.Поле         = Поле;
    КонецЦикла;
    
     НастройкиКомпоновкиДанных     = СКД.НастройкиПоУмолчанию;
    //добавим поля в группировку детальных записей
 
    ГруппировкаДетальная        = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    Для каждого Поле Из МассивПолей Цикл
        ВыбранноеПоле = ГруппировкаДетальная.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Заголовок     = Поле;
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле            = Новый ПолеКомпоновкиДанных(Поле);
    КонецЦикла; 
    
    // подготовим таблицу и процессор вывода результата СКД в таблицу значений
 
    Таб = Новый ТаблицаЗначений;    
    ПроцессорВыводаВТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;    
    ПроцессорВыводаВТЗ.УстановитьОбъект(Таб);    
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
    
    // загрузим настройки из настроек динамического списка
 
    Для Каждого ЭлементОтбораДС Из ДинСписок.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбораДС) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭлементОтбораСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        	ЗаполнитьЗначенияСвойств(ЭлементОтбораСКД, ЭлементОтбораДС);
		Иначе
			ЭлементОтбораСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбораДС));
        	ЗаполнитьЗначенияСвойств(ЭлементОтбораСКД, ЭлементОтбораДС);
			Для каждого ЭлементГруппыОтбораДС из ЭлементОтбораДС.Элементы Цикл
				ЭлементГруппыОтбораСКД = ЭлементОтбораСКД.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	        	ЗаполнитьЗначенияСвойств(ЭлементГруппыОтбораСКД, ЭлементГруппыОтбораДС);
			КонецЦикла;
		КонецЕсли;
    КонецЦикла;    
    
    Для Каждого ЗначениеПараметраДС Из ДинСписок.Параметры.Элементы Цикл
        ЗначениеПараметраСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Добавить();
        ЗаполнитьЗначенияСвойств(ЗначениеПараметраСКД, ЗначениеПараметраДС);
    КонецЦикла;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;    
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
    
    Таб = ПроцессорВыводаВТЗ.Вывести(ПроцессорКомпоновкиДанных);    
    
    Возврат Таб;
 
КонецФункции // ПолучитьДанныеДинСписка()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ

&НаСервере
Процедура ЗаполнитьСписокВыбораТипДиаграммы()
	
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Очистить();
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("Гистограмма", 										НСтр("ru = 'Гистограмма'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаГоризонтальная", 						НСтр("ru = 'Гистограмма горизонтальная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаГоризонтальнаяОбъемная", 				НСтр("ru = 'Гистограмма горизонтальная объемная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаНормированная", 						НСтр("ru = 'Гистограмма нормированная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаНормированнаяГоризонтальная",			НСтр("ru = 'Гистограмма нормированная горизонтальная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаНормированнаяГоризонтальнаяОбъемная",	НСтр("ru = 'Гистограмма нормированная горизонтальная объемная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаНормированнаяОбъемная", 				НСтр("ru = 'Гистограмма нормированная объемная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаОбъемная", 								НСтр("ru = 'Гистограмма объемная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаСНакоплением", 							НСтр("ru = 'Гистограмма с накоплением'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаСНакоплениемГоризонтальная",			НСтр("ru = 'Гистограмма с накоплением горизонтальная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаСНакоплениемГоризонтальнаяОбъемная", 	НСтр("ru = 'Гистограмма с накоплением горизонтальная объемная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ГистограммаСНакоплениемОбъемная",					НСтр("ru = 'Гистограмма с накоплением объемная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("Измерительная",									НСтр("ru = 'Измерительная'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("Изометрическая",									НСтр("ru = 'Изометрическая'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ИзометрическаяПирамида",							НСтр("ru = 'Изометрическая пирамида'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("Круговая",											НСтр("ru = 'Круговая'"));
	Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("КруговаяОбъемная",									НСтр("ru = 'Круговая объемная'"));
	//Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("Воронка",											НСтр("ru = 'Воронка'"));
	//Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ВоронкаОбъемная",									НСтр("ru = 'Воронка объемная'"));
	//Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ВоронкаНормированная",								НСтр("ru = 'Воронка нормированная'"));
	//Элементы.ТипДиаграммыЗначение.СписокВыбора.Добавить("ВоронкаНормированнаяОбъемная",						НСтр("ru = 'Воронка нормированная объемная'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДиаграммыЗначениеПриИзменении(Элемент)
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТегОтборОчистить(Команда)
	Элемент = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Очистить");
	Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "ОтборИнтересов", Элемент, Истина);	
	СписокОбъектовСТегами.Очистить();
	ОтбиратьПоТегам = Ложь;
	ОтбиратьОбъектыБезТегов = Ложь;
	ОбновитьЗначенияОтбораТегов();
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры
