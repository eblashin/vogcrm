
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПолучитьЗначениеПоляРасшифровки(Расшифровка)
	СтруктураРасшифровки = Новый Структура;
	
	ДанныеРасшифровкиИзХранилища = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровкиИзХранилища.Элементы.Получить(Расшифровка);
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ЗначениеПоляРасшифровки Из ЭлементРасшифровки.ПолучитьПоля() Цикл 
			СтруктураРасшифровки.Вставить(ЗначениеПоляРасшифровки.Поле, ЗначениеПоляРасшифровки.Значение);
		КонецЦикла;  
		Возврат СтруктураРасшифровки;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ЭтоСсылка(ПереданныйТип)
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ПереданныйТип);
	
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПоляРасшифровки = ПолучитьЗначениеПоляРасшифровки(Расшифровка);
	
	Попытка
		Для Каждого КлючЗначение Из ЗначениеПоляРасшифровки Цикл
			//Если ЗначениеЗаполнено(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]) Тогда
			Если ЗначениеЗаполнено(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]) И ЭтоСсылка(ТипЗнч(ЗначениеПоляРасшифровки[КлючЗначение.Ключ])) Тогда
				
				//Если ТипЗнч(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]) = Тип("СправочникСсылка.Партнеры") Тогда
				//	ОткрытьЗначение(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]);
				//ИначеЕсли ТипЗнч(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") 
				//	ИЛИ ТипЗнч(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]) = Тип("ДокументСсылка.CRM_Событие")Тогда
				//	ОткрытьЗначение(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]);
				//Иначе
				//	ПереобработатьОбработкуРасшифровки(Расшифровка);
				//КонецЕсли;
				
				ПоказатьЗначение(, ЗначениеПоляРасшифровки[КлючЗначение.Ключ]);
			//Иначе
			//	ПереобработатьОбработкуРасшифровки(Расшифровка);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры

//&НаКлиенте
//Процедура ПереобработатьОбработкуРасшифровки(Расшифровка)
//	Для Сч = 1 По 9 Цикл
//		ЗначениеПоляРасшифровки = ПолучитьЗначениеПоляРасшифровки(Расшифровка-Сч);
//		Для Каждого КлючЗначение Из ЗначениеПоляРасшифровки Цикл
//			Если ТипЗнч(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") 
//				ИЛИ ТипЗнч(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]) = Тип("ДокументСсылка.CRM_Событие")Тогда
//				ОткрытьЗначение(ЗначениеПоляРасшифровки[КлючЗначение.Ключ]);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
//КонецПроцедуры

&НаСервере
Процедура ОбновитьРезультат()
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемаКомпоновкиДанных);
	
	Данныерасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Если ВоронкаПродаж <> ПредопределенноеЗначение("Справочник.CRM_ВоронкиПродаж.ПоДокументам")  И ЗначениеЗаполнено(ОтборПользователь) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	//		НастройкиКомпоновщика.Настройки.Отбор, "ПринятаКИсполнению", Истина, ВидСравненияКомпоновкиДанных.Равно);
	//	//
	//КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика.ПолучитьНастройки(), Данныерасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(Данныерасшифровки, УникальныйИдентификатор);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.ОтображатьСетку 	 	= Ложь;
	ДокументРезультат.ОтображатьЗаголовки	= Ложь;
	ДокументРезультат.ТолькоПросмотр 	 	= Истина;
	
	Результат.Очистить();
	Результат.Вывести(ДокументРезультат);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НастройкиКомпоновщикаПользовательскиеНастройкиПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Настройка = "Этап" Тогда
		Элементы.НастройкиКомпоновщикаПользовательскиеНастройкиЗначение.СписокВыбора.Очистить();
		Элементы.НастройкиКомпоновщикаПользовательскиеНастройкиЗначение.РежимВыбораИзСписка = Истина;
		
		Для Каждого СтрокаЭтапВоронки Из ЭтапыВоронки Цикл
			Элементы.НастройкиКомпоновщикаПользовательскиеНастройкиЗначение.СписокВыбора.Добавить(СтрокаЭтапВоронки.Значение);
		КонецЦикла;
	Иначе
		Элементы.НастройкиКомпоновщикаПользовательскиеНастройкиЗначение.СписокВыбора.Очистить();
		Элементы.НастройкиКомпоновщикаПользовательскиеНастройкиЗначение.РежимВыбораИзСписка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКомпоновщикаПользовательскиеНастройкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ОбновитьРезультат();
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура КомандаОбновить(Команда)
	ОбновитьРезультат();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Функция ПолучитьЭлементОтбораПоИдентификаторуПользовательскойНастройки(Идентификатор)
	Для Каждого ЭлементОтбора Из НастройкиКомпоновщика.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура УстановитьЗначениеВПользовательскомОтборе(ИмяПоля, ВидСравнения, Значение)
	ПользовательскийОтбор = Неопределено;
	бУстановленоВБыстромОтборе = Ложь;
	Для Каждого ЭлементНастройки Из НастройкиКомпоновщика.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭлементВОтборе = ПолучитьЭлементОтбораПоИдентификаторуПользовательскойНастройки(ЭлементНастройки.ИдентификаторПользовательскойНастройки);
			Если ТипЗнч(ЭлементВОтборе) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементВОтборе.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				ЭлементНастройки.Использование = Ложь;
				ЭлементНастройки.ВидСравнения = ВидСравнения;
				ЭлементНастройки.ПравоеЗначение = Значение;
				ЭлементНастройки.Использование = Истина;
				
				бУстановленоВБыстромОтборе = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") И ПользовательскийОтбор = Неопределено Тогда
			ПользовательскийОтбор = ЭлементНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Если Не бУстановленоВБыстромОтборе И ПользовательскийОтбор <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПользовательскийОтбор, ИмяПоля, Значение, ВидСравнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Параметры.Свойство("ПараметрВоронка") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВоронкаПродаж = Параметры.ПараметрВоронка;
	
	Если Параметры.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
		
		ТекстЗапроса = CRM_ВоронкиПродажСервер.ВоронкаПродажПолучитьТекстЗапросаРасшифрокиПоДокументам(Параметры.Этап);
		
		//Если ТипЗнч(Параметры.ПараметрУспешно) = Тип("СписокЗначений") Тогда
		Если ТипЗнч(Параметры.ПараметрУспешно) = Тип("Массив") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_СОСТОЯНИЯМ", " В (&АктивнаяУспешноНеУдачно)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_СОСТОЯНИЯМ", " = &АктивнаяУспешноНеУдачно");
		КонецЕсли;
		
		СхемаКомпоновкиДанных = Обработки.CRM_ВоронкаПродаж.ПолучитьМакет("СхемаКомпоновкиДанныхРасшифровкаДиаграммыПоДокументам");
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
		
	//ИначеЕсли Параметры.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
	//	
	//	СхемаКомпоновкиДанных = Обработки.CRM_ВоронкаПродаж.ПолучитьМакет("СхемаКомпоновкиДанныхРасшифровкаДиаграммыПоСостояниямИнтересов");
	//	
	ИначеЕсли Параметры.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоЭтапам Тогда
		
		СхемаКомпоновкиДанных = Обработки.CRM_ВоронкаПродаж.ПолучитьМакет("СхемаКомпоновкиДанныхРасшифровкаДиаграммы");
		
		// добавление условий в зависимости от типа воронки
		Если Параметры.Свойство("ПараметрТипВоронки") Тогда
			ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
			Если Параметры.ПараметрТипВоронки = "Активные" Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_ЗАДАЧАМ", "И (ЗадачаИсполнителя.БизнесПроцесс.Стартован И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен)
																				  |И (НЕ ЗадачаИсполнителя.Выполнена)
																				  |И ЗадачаИсполнителя.СрокИсполнения <= &ГоризонтВоронки
																				  |И ЗадачаИсполнителя.Дата <= &КонецПериода");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_СОБЫТИЯМ","И (Событие.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Запланировано)
																				  |ИЛИ Событие.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.ВРаботе))
																				  |И Событие.Дата <= &ГоризонтВоронки");
			ИначеЕсли Параметры.ПараметрТипВоронки = "Закрытые" Тогда
				Если Параметры.Свойство("ПараметрУспешно") И НЕ ТипЗнч(Параметры.ПараметрУспешно) = Тип("Массив") И Параметры.ПараметрУспешно = 1 Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_ЗАДАЧАМ", "И ЗадачаИсполнителя.Выполнена
																					  |И ЗадачаИсполнителя.ДатаИсполнения МЕЖДУ &НачалоПериода И &КонецПериода
																					  |И ВЫБОР
																					  |	КОГДА ЗадачаИсполнителя.БизнесПроцесс.Завершен И ЗадачаИсполнителя.БизнесПроцесс.ВариантЗавершения = ЗНАЧЕНИЕ(Справочник.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно) ТОГДА ЛОЖЬ
																					  |	ИНАЧЕ ИСТИНА
																					  |	КОНЕЦ
																					  |");
				Иначе
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_ЗАДАЧАМ", "И ЗадачаИсполнителя.Выполнена
																					  |И ЗадачаИсполнителя.ДатаИсполнения МЕЖДУ &НачалоПериода И &КонецПериода");
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_СОБЫТИЯМ","И (Событие.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Завершено)
																				  |ИЛИ Событие.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Отменено))
																				  |И Событие.Дата МЕЖДУ &НачалоПериода И &КонецПериода");
			ИначеЕсли Параметры.ПараметрТипВоронки = "Все" Тогда
				Если Параметры.Свойство("ПараметрУспешно") И НЕ ТипЗнч(Параметры.ПараметрУспешно) = Тип("Массив") И Параметры.ПараметрУспешно = 1 Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_ЗАДАЧАМ", "И (
																				  |((ЗадачаИсполнителя.БизнесПроцесс.Стартован И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен)
																				  |И (НЕ ЗадачаИсполнителя.Выполнена)
																				  |И ЗадачаИсполнителя.СрокИсполнения <= &ГоризонтВоронки
																				  |И ЗадачаИсполнителя.Дата <= &КонецПериода)
																				  |ИЛИ
																				  |(ЗадачаИсполнителя.Выполнена
																				  |И ЗадачаИсполнителя.ДатаИсполнения МЕЖДУ &НачалоПериода И &КонецПериода)
																				  |)
																				  |И ВЫБОР
																				  |	КОГДА ЗадачаИсполнителя.БизнесПроцесс.Завершен И ЗадачаИсполнителя.БизнесПроцесс.ВариантЗавершения = ЗНАЧЕНИЕ(Справочник.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно) ТОГДА ЛОЖЬ
																				  |	ИНАЧЕ ИСТИНА
																				  |	КОНЕЦ
																				  |");
				Иначе
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_ЗАДАЧАМ", "И (
																				  |((ЗадачаИсполнителя.БизнесПроцесс.Стартован И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен)
																				  |И (НЕ ЗадачаИсполнителя.Выполнена)
																				  |И ЗадачаИсполнителя.СрокИсполнения <= &ГоризонтВоронки
																				  |И ЗадачаИсполнителя.Дата <= &КонецПериода)
																				  |ИЛИ
																				  |(ЗадачаИсполнителя.Выполнена
																				  |И ЗадачаИсполнителя.ДатаИсполнения МЕЖДУ &НачалоПериода И &КонецПериода)
																				  |)");
				КонецЕсли;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%УСЛОВИЯ_ПО_СОБЫТИЯМ","И (
																				  |((Событие.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Запланировано)
																				  |ИЛИ Событие.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.ВРаботе))
																				  |И Событие.Дата <= &ГоризонтВоронки)
																				  |ИЛИ
																				  |((Событие.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Завершено)
																				  |ИЛИ Событие.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Отменено))
																				  |И Событие.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
																				  |)");
			КонецЕсли;
			СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Вариант") И ТипЗнч(Параметры.Вариант) = Тип("Строка") И ЗначениеЗаполнено(Параметры.Вариант) Тогда
		НастройкиСКД = СхемаКомпоновкиДанных.ВариантыНастроек[Параметры.Вариант].Настройки;
	Иначе
		НастройкиСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	ЭтапыТекущейВоронки			= Параметры.ЭтапыТекущейВоронки;
	ЕстьЭтапыПоДокументам		= Параметры.ЕстьЭтапыПоДокументам;
	ЕстьЭтапыПоИнтересам		= Параметры.ЕстьЭтапыПоИнтересам;
	ЕстьЭтапыПоКартамМаршрута	= Параметры.ЕстьЭтапыПоКартамМаршрута;
	
	АдресСхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	НастройкиКомпоновщика.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемаКомпоновкиДанных));
	
	// Настройка настроек СКД по параметрам формы
	НастройкиСКД.ПараметрыДанных.Элементы.Очистить();
	Если Параметры.Свойство("ПараметрВоронка") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Воронка");
		Параметр.Значение = Параметры.ПараметрВоронка;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПараметрКартыМаршрута") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КартыМаршрута");
		Параметр.Значение = Параметры.ПараметрКартыМаршрута;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПараметрЭтапСобытия") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ЭтапСобытия");
		Параметр.Значение = Параметры.ПараметрЭтапСобытия;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПараметрНачалоПериода") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода");
		Параметр.Значение = Параметры.ПараметрНачалоПериода;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПараметрКонецПериода") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода");
		Параметр.Значение = Параметры.ПараметрКонецПериода;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПараметрГоризонтВоронки") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронки");
		Параметр.Значение = Параметры.ПараметрГоризонтВоронки;
		Параметр.Использование = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПараметрГоризонтВоронкиПрогноз") Тогда
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронкиПрогноз");
		Параметр.Значение = Параметры.ПараметрГоризонтВоронкиПрогноз;
		Параметр.Использование = Истина;
	КонецЕсли;
	
	Если Параметры.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
		
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("АктивнаяУспешноНеУдачно");
		Параметр.Значение = Параметры.ПараметрУспешно;
		Параметр.Использование = Истина;
		
		Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Этап");
		Параметр.Значение = Параметры.Этап;
		Параметр.Использование = Истина;
		
	КонецЕсли;
	
	НастройкиКомпоновщика.ЗагрузитьНастройки(НастройкиСКД);
	
	Если Параметры.Свойство("ЭтапыВоронки") И ТипЗнч(Параметры.ЭтапыВоронки) = Тип("Массив") Тогда
		ЭтапыВоронки.ЗагрузитьЗначения(Параметры.ЭтапыВоронки);
	КонецЕсли;
	
	Если Параметры.Свойство("Этап") И ЗначениеЗаполнено(Параметры.Этап) Тогда
		УстановитьЗначениеВПользовательскомОтборе("Этап", ВидСравненияКомпоновкиДанных.Равно, Параметры.Этап);
	КонецЕсли;
	
	Если Параметры.Свойство("Пользователь") И ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		УстановитьЗначениеВПользовательскомОтборе("Пользователь", ВидСравненияКомпоновкиДанных.ВСписке, Параметры.Пользователь);
		ОтборПользователь = Параметры.Пользователь;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		УстановитьЗначениеВПользовательскомОтборе("Подразделение", ВидСравненияКомпоновкиДанных.Равно, Параметры.Подразделение);
	КонецЕсли;
	
	Если Параметры.Свойство("Офис") И ЗначениеЗаполнено(Параметры.Офис) Тогда
		УстановитьЗначениеВПользовательскомОтборе("Офис", ВидСравненияКомпоновкиДанных.Равно, Параметры.Офис);
	КонецЕсли;
	
	Если Параметры.Свойство("ФиксированныйОтборПоПользователюПодразделению") И Параметры.ФиксированныйОтборПоПользователюПодразделению = Истина Тогда
		Для Каждого ЭлементОтбора Из НастройкиКомпоновщика.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Пользователь")
				ИЛИ	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				Элементы.НастройкиКомпоновщикаПользовательскиеНастройки.ВысотаВСтрокахТаблицы = Элементы.НастройкиКомпоновщикаПользовательскиеНастройки.ВысотаВСтрокахТаблицы - 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьРезультат();
	
КонецПроцедуры
