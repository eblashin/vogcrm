#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Схема");
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
	НастройкиХранилищаНастроек = ПрочитатьНастройкиКомпоновки();
	Если НастройкиХранилищаНастроек <> Неопределено Тогда 
		Компоновщик.ЗагрузитьНастройки(НастройкиХранилищаНастроек);
		Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
		
	Иначе
		Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КонецЕсли;
	
	
	//В ТЗ указано "Должна быть возможность выбрать другого пользователя"
	//Т.о. при открытии обработка всегда формирует отчет по текущему пользователю
	//Если он был изменен то при следующем открытии это изменение не сохраняетя
	//но возможность формирования по любому пользователю есть.
	Пользователь = Пользователи.ТекущийПользователь();
	
	//+Рабочий стол
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	//-Рабочий стол
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
	СохранитьНастройкиКомпоновки();	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиПорядокПриИзменении(Элемент)
	СохранитьНастройкиКомпоновки();
КонецПроцедуры


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	СформироватьДиаграмму();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция РассчитатьДатуОкончанияЭтапа(Ссылка)
	
	Возврат Документы.CRM_ЭтапКалендарногоПлана.ПолучитьДатуОкончанияЭтапа(Ссылка);
	
КонецФункции

&НаСервере
Процедура СформироватьДиаграмму()
	//Подготовка 
	Диаграмма.Очистить();
	СерияДиаграммы = Диаграмма.Серии.Добавить(); // серия одна
	
	//Формирование текста запроск к БД
	Компоновщик.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Пользователь", Пользователь);
	Настройки = Компоновщик.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(ПолучитьИзВременногоХранилища(АдресСКД), Настройки);
	Запрос = Новый Запрос;
	Запрос.Текст = Макет.НаборыДанных[Макет.НаборыДанных.Количество()-1].Запрос;
	
	СтрокаПорядок = "";
	Для Каждого ЭлементПорядок Из Настройки.Порядок.Элементы Цикл 
		Если ЭлементПорядок.Использование Тогда 
			СтрокаПорядок = СтрокаПорядок + "," + ЭлементПорядок.Поле + ?(ЭлементПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв, " убыв", "");
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаПорядок) Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	Упорядочить По " + Сред(СтрокаПорядок,2);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " 
		|Итоги по Проект Автоупорядочивание";
	
	Для Каждого ЭлементПараметр Из Макет.ЗначенияПараметров Цикл 
		Запрос.УстановитьПараметр(ЭлементПараметр.Имя, ЭлементПараметр.Значение);
	КонецЦикла;
	
	//Получение данных и вывод
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПроекты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПроекты.Следующий() Цикл 
		
		ТочкаПроект = Диаграмма.УстановитьТочку(ВыборкаПроекты.Проект);
		ТочкаПроект.Расшифровка = ВыборкаПроекты.Проект;
		Выборка = ВыборкаПроекты.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			Если Не ЗначениеЗаполнено(Выборка.Этап) Тогда
				Продолжить;
			КонецЕсли;
			
			ТочкаЭтап =  Диаграмма.УстановитьТочку(Выборка.Этап, ТочкаПроект.Значение );
			ТочкаЭтап.Расшифровка = Выборка.Этап;
			ЗначениеДиаграммыГанта = Диаграмма.ПолучитьЗначение(ТочкаЭтап,СерияДиаграммы);
			Интервал = ЗначениеДиаграммыГанта.Добавить(); // тоже всегда один - так как этап проекта непрерывен
			Интервал.Начало = Выборка.Этап.Дата;
			Интервал.Конец  = РассчитатьДатуОкончанияЭтапа(Выборка.Этап);
		КонецЦикла;
		
		Диаграмма.РазвернутьТочку(ТочкаПроект, Истина); //развернем список
		
	КонецЦикла;
	
КонецПроцедуры


#Область ВспомогательныеПроцедурыФункции
&НаСервере
Процедура СохранитьНастройкиКомпоновки()
	ХранилищеПользовательскихНастроекОтчетов.Сохранить(КлючОбъектаДляНастроек(),,Компоновщик.ПолучитьНастройки());
КонецПроцедуры

&НаСервере
Функция ПрочитатьНастройкиКомпоновки()
	Возврат ХранилищеПользовательскихНастроекОтчетов.Загрузить(КлючОбъектаДляНастроек(),,Компоновщик.ПолучитьНастройки());
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючОбъектаДляНастроек()
	Возврат "вогОбщаяДиаграммаГантаПоЭтапамКалендарногоПлана";
КонецФункции

#КонецОбласти

#КонецОбласти

//+Рабочий стол
#Область Подключаемый_РабочийСтол
	
&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

#КонецОбласти
//-Рабочий стол
