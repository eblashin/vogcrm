
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//Модели кейсов
	Если  ПолучитьФункциональнуюОпцию("вогИспользоватьМоделиКейсов") Тогда	
		CRM_УправлениеПроектамиСервер.СформироватьПодменюМоделейКейса(ЭтотОбъект, Элементы.СписокГруппаСоздать);
	КонецЕсли;

	времНастройки = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "Настройки");
	Настройки = ?(времНастройки = Неопределено, ПолучитьНастройкиПоУмолчанию(), времНастройки);
	
	Элементы.ГруппаСтраницыРазделов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	СформироватьСтруктуруРазделов();
				
	Если Параметры.Свойство("Классификатор") Тогда
		Классификатор = Параметры.Классификатор;
		ИницализироватьСтруктуруКлассификатора();
	КонецЕсли;
		
	УстановитьПараметрыСписковПоНастройкам(ЭтаФорма);
	
	//Корзина
	СформироватьПредставлениеКорзины(ЭтаФорма);
	
	//Настройки
	СформироватьЗаголовокПоНастройке(ЭтотОбъект);
	
	//+Рабочий стол
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	//-Рабочий стол
	
	// +++ VOG Кулаков П.Л. 07.09.2020 виджеты
	Если Параметры.Свойство("НачальнаяСтраница") Тогда
		Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы[Параметры.НачальнаяСтраница];
		НайденныйЭлемент = Элементы.ПереключательРазделов.СписокВыбора.НайтиПоЗначению(Параметры.НачальнаяСтраница);
		Если НайденныйЭлемент <> Неопределено Тогда
			Индекс = Элементы.ПереключательРазделов.СписокВыбора.Индекс(НайденныйЭлемент);
			ПереключательРазделов = Элементы.ПереключательРазделов.СписокВыбора[Индекс].Значение;
		КонецЕсли;
	КонецЕсли;	
	// --- VOG Кулаков П.Л.
	
	Пользователь = Пользователи.ТекущийПользователь();
	Если Пользователь.CRM_НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка тогда
		Элементы.СтраницаРазделБрендЗоны.Видимость = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя = "СтраницаРазделПартнеры" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаБыстрыеОтборы","Видимость",Истина);
		Элементы.ОтборВидТорговойТочки.Видимость = Ложь;
		Элементы.ОтборТипОтношений.Видимость	 = Истина;
	// { VOG RMV 2019-01-18 изменение №2552
		Элементы.ОтборМенеджер.Видимость		 = Истина;
	// } VOG RMV 2019-01-18 изменение №2552
		Элементы.ОтборНаправление.Видимость      = Ложь; //+ VOG Иванов С.А. 02.12.2019 ID заявки: 000000958 
	ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя = "СтраницаРазделТорговыеТочки" Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаБыстрыеОтборы","Видимость",Истина);
		Элементы.ОтборВидТорговойТочки.Видимость = Истина;
		Элементы.ОтборТипОтношений.Видимость	 = Ложь;
	// { VOG RMV 2019-01-18 изменение №2552
		Элементы.ОтборМенеджер.Видимость		 = Истина;
		Элементы.ОтборНаправление.Видимость      = Истина; //+ VOG Иванов С.А. 02.12.2019 ID заявки: 000000958
	ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя = "СтраницаРазделЮридическиеЛица" Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаБыстрыеОтборы","Видимость",Истина);
		Элементы.ОтборВидТорговойТочки.Видимость = Ложь;
		Элементы.ОтборТипОтношений.Видимость	 = Ложь;
		Элементы.ОтборМенеджер.Видимость		 = Истина;
	// } VOG RMV 2019-01-18 изменение №2552
		Элементы.ОтборНаправление.Видимость      = Ложь; //+ VOG Иванов С.А. 02.12.2019 ID заявки: 000000958
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаБыстрыеОтборы","Видимость",Ложь);
	КонецЕсли;
	
	Результат = CRM_ХранилищеНастроек.Загрузить(ЭтаФорма.Заголовок,"вогУправлениеКлассификацией");
	
	// ++ Тищенко В.В.
	
	Если Результат = Неопределено Тогда
		Элементы.КнИнформацияПартнеры.Пометка 			= Ложь;
		Элементы.КнИнформацияТорговыеТочки.Пометка		= Ложь;
		Элементы.КнИнформацияЮридическиеЛица.Пометка 	= Ложь;
	Иначе
		НастройкиКнопок = Результат.НастройкиКнопок;
		Для каждого ТекЗначение Из НастройкиКнопок Цикл
			Элементы[ТекЗначение.Ключ].Пометка = ТекЗначение.Значение;
			Если Элементы[ТекЗначение.Ключ].Имя 			= Элементы.КнИнформацияПартнеры.Имя И Элементы[ТекЗначение.Ключ].Пометка Тогда
				УстановитьВидСписка(Истина,"СтраницаРазделПартнеры");
				Элементы.КнИнформацияПартнеры.Картинка 		= БиблиотекаКартинок.CRM_Информация;
			ИначеЕсли Элементы[ТекЗначение.Ключ].Имя 		= Элементы.КнИнформацияТорговыеТочки.Имя И Элементы[ТекЗначение.Ключ].Пометка Тогда
				УстановитьВидСписка(Истина,"СтраницаРазделТорговыеТочки");
				Элементы.КнИнформацияТорговыеТочки.Картинка = БиблиотекаКартинок.CRM_Информация;
			ИначеЕсли Элементы[ТекЗначение.Ключ].Имя 		= Элементы.КнИнформацияЮридическиеЛица.Имя И Элементы[ТекЗначение.Ключ].Пометка Тогда
				УстановитьВидСписка(Истина,"СтраницаРазделЮридическиеЛица");
				Элементы.КнИнформацияЮридическиеЛица.Картинка = БиблиотекаКартинок.CRM_Информация;
			КонецЕсли;
		КонецЦикла;
		НастройкиШирины = Результат.НастройкиШирины;
		Для каждого ТекЗначение Из НастройкиШирины Цикл
			Элементы[ТекЗначение.Ключ].Ширина = ТекЗначение.Значение;
		КонецЦикла;
		ОбновитьОтображениеДанных();
	КонецЕсли;

	// -- Тищенко В.В.
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьВариантаСпискаКлассификации" Тогда
		ИнициализироватьВариантыСписка(Источник, Параметр)
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьНастройкиКлассификации" Тогда
		Если ТекущаяНастройка.Свойство(Источник) Тогда
			ТекущаяНастройка[Источник] = Параметр;
			СформироватьЗаголовокПоНастройке(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//Настройки
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.вогНастройкиУправленияКлассификацией") Тогда
		
		СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
		ТекущаяНастройка[СтруктураРаздела.ИмяСписка] = ВыбранноеЗначение;	
	
		ИнициализироватьФормуПоНастройкеКлиент(СтруктураРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ++ Тищенко В.В.
	
	Если НЕ ЗавершениеРаботы Тогда
		
		НастройкиФормы 		= Новый Структура;
		НастройкиКнопок	 	= Новый Структура;
		НастройкиШирины 	= Новый Структура;
		НастройкиКнопок.Вставить("КнИнформацияПартнеры",Элементы.КнИнформацияПартнеры.Пометка);
		НастройкиКнопок.Вставить("КнИнформацияТорговыеТочки",Элементы.КнИнформацияТорговыеТочки.Пометка);
		НастройкиКнопок.Вставить("КнИнформацияЮридическиеЛица",Элементы.КнИнформацияЮридическиеЛица.Пометка);
		НастройкиШирины.Вставить("ГруппаПартнерыИнформация",Элементы.ГруппаПанельИнформацииПартнеры.Ширина);
		НастройкиШирины.Вставить("ГруппаТорговыеТочкиИнформация",Элементы.ГруппаПанельИнформацииТорговыеТочки.Ширина);
		НастройкиШирины.Вставить("ГруппаЮридическиеЛицаИнформация",Элементы.ГруппаПанельИнформацииЮридическиеЛица.Ширина);
		
		НастройкиФормы.Вставить("НастройкиКнопок",НастройкиКнопок);
		НастройкиФормы.Вставить("НастройкиШирины",НастройкиШирины);
		
		CRM_ХранилищеНастроек.Сохранить(ЭтаФорма.Заголовок,"вогУправлениеКлассификацией",НастройкиФормы);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Закройте форму пож-та, для сохранения настроек формы а потом программу'");
		Отказ = Истина;
	КонецЕсли;
	
	// -- Тищенко В.В.
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КлассификаторПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьСтруктуруКлассификатора", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности

		
	КлючеваяОперация = "ОткрытиеФормыЭлемента" + Элемент.Имя;
	УИДЗамераСКомментарием = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	Комментарий = НСтр("" + ВыбраннаяСтрока);
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(УИДЗамераСКомментарием, Комментарий);
	
// Конец СтандартныеПодсистемы.ОценкаПроизводительности


	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда                      
		Возврат;
	КонецЕсли;
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	Если СтруктураРаздела.ИерархияГруппИЭлементов
	  И ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;	
	КонецЕсли;
	
	Если Поле.Родитель = Элементы["ПоляЗначенийКлассифкатора" + СтруктураРаздела.ИмяСписка] Тогда
		ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, СтруктураРаздела.ИмяСписка, Поле.Имя, СтандартнаяОбработка);
		Элемент.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтображениеСодержанияПартнерыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если Элементы.СписокПартнеры.ТекущиеДанные <> Неопределено И ДанныеСобытия.Anchor <> Неопределено Тогда
		Результат = РасшифровкаКонтактнаяИнформация(ДанныеСобытия.Anchor.outerHTML,ДанныеСобытия.Anchor.innerText,Элементы.СписокПартнеры.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
		СтандартнаяОбработка, Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Иначе	
		СтандартнаяОбработка = Ложь;
		ОП = Новый ОписаниеОповещения("ОбработатьРезультатРасшифровки",ЭтотОбъект,Результат);
		ВыполнитьОбработкуОповещения(ОП,Элементы.СписокПартнеры.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПолеОтображениеСодержанияТорговыеТочкиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если Элементы.СписокТорговыеТочки.ТекущиеДанные <> Неопределено И ДанныеСобытия.Anchor <> Неопределено Тогда
		Результат = РасшифровкаКонтактнаяИнформация(ДанныеСобытия.Anchor.outerHTML,ДанныеСобытия.Anchor.innerText,Элементы.СписокТорговыеТочки.ТекущиеДанные.Ссылка);
	КонецЕсли;

	Если Результат = Неопределено Тогда
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
		СтандартнаяОбработка, Новый ОписаниеТипов("СправочникСсылка.вогТорговыеТочки"));
	Иначе	
		СтандартнаяОбработка = Ложь;
		ОП = Новый ОписаниеОповещения("ОбработатьРезультатРасшифровки",ЭтотОбъект,Результат);
		ВыполнитьОбработкуОповещения(ОП,Элементы.СписокТорговыеТочки.ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры
	
#Область СтруктураРазделов

&НаКлиенте
Процедура ПереключательРазделовПриИзменении(Элемент)
	
	ЗаполнитьДанныеТекущегоРаздела(ЭтотОбъект, Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя);
	Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы[ПереключательРазделов];
	ПеренестиДанныеТекущегоРаздела(ЭтотОбъект, ПереключательРазделов);
	
	Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя = "СтраницаРазделПартнеры" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаБыстрыеОтборы","Видимость",Истина);
		Элементы.ОтборВидТорговойТочки.Видимость = Ложь;
		Элементы.ОтборТипОтношений.Видимость	 = Истина;
	// { VOG RMV 2019-01-18 изменение №2552
		Элементы.ОтборМенеджер.Видимость		 = Истина;
	// } VOG RMV 2019-01-18 изменение №2552		
		Элементы.ОтборНаправление.Видимость      = Ложь; //++ VOG Иванов С.А. 21.11.2019 ID заявки: 000000912 
	ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя = "СтраницаРазделТорговыеТочки" Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаБыстрыеОтборы","Видимость",Истина);
		Элементы.ОтборВидТорговойТочки.Видимость = Истина;
		Элементы.ОтборТипОтношений.Видимость	 = Ложь;
	// { VOG RMV 2019-01-18 изменение №2552
		Элементы.ОтборМенеджер.Видимость		 = Истина;
		Элементы.ОтборНаправление.Видимость      = Истина; //++ VOG Иванов С.А. 21.11.2019 ID заявки: 000000912
	ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя = "СтраницаРазделЮридическиеЛица" Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаБыстрыеОтборы","Видимость",Истина);
		Элементы.ОтборВидТорговойТочки.Видимость = Ложь;
		Элементы.ОтборТипОтношений.Видимость	 = Ложь;
		// { VOG RMV 2019-03-20 task 253
		//Элементы.ОтборМенеджер.Видимость		 = Ложь;
		Элементы.ОтборМенеджер.Видимость		 = Истина;
		// } VOG RMV 2019-03-20 task 253
	// } VOG RMV 2019-01-18 изменение №2552	
		Элементы.ОтборНаправление.Видимость      = Ложь; //++ VOG Иванов С.А. 21.11.2019 ID заявки: 000000912
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаБыстрыеОтборы","Видимость",Ложь);	
	КонецЕсли;
	
	СформироватьПредставлениеКорзины(ЭтотОбъект);
	СформироватьЗаголовокПоНастройке(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область БыстрыеОтборы
	
&НаКлиенте
Процедура ОтборБизнесРегионПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипОтношенийПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидТорговойТочкиПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВключенияКлассификатораПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПродажиСуммаПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВключенияКлассификатораВидСравненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[Элемент.Имя]) Тогда
		ЭтаФорма[Элемент.Имя] = "Равно";
	КонецЕсли;
	
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПродажиСуммаВидСравненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[Элемент.Имя]) Тогда
		ЭтаФорма[Элемент.Имя] = "Равно";
	КонецЕсли;
	
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры

// { VOG RMV 2019-01-18 изменение №2552
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборМенеджерПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();
КонецПроцедуры
// } VOG RMV 2019-01-18 изменение №2552

////-- ВОГ Иванов С.А. 21.11.2019 ID заявки: 000000912
&НаКлиенте
Процедура ОтборНаправлениеПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры
//-- VOG Иванов С.А. 21.11.2019 ID заявки: 000000912 
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПартнеры

&НаКлиенте
Процедура СписокПартнерыПриАктивизацииСтроки(Элемент)
	// ++ Тищенко В.В.
	Если Элементы.КнИнформацияПартнеры.Пометка Тогда
		ПодключитьОбработчикОжидания("ОтобразитьДополнительнуюИнформациюПартнеры",0.1,Истина);
	КонецЕсли;
	// -- Тищенко В.В.
КонецПроцедуры

// ++ Тищенко В.В.
&НаКлиенте
Процедура ОтобразитьДополнительнуюИнформациюПартнеры()
	ЗаполнитьПанельИнформации(Элементы.СписокПартнеры.ТекущаяСтрока);
КонецПроцедуры // -- Тищенко В.В.

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТорговыеТочки

&НаКлиенте
Процедура СписокТорговыеТочкиПриАктивизацииСтроки(Элемент)	
	Если Элементы.КнИнформацияТорговыеТочки.Пометка Тогда
		ПодключитьОбработчикОжидания("ОтобразитьДополнительнуюИнформациюТорговыеТочки",0.1,Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДополнительнуюИнформациюТорговыеТочки()
	ЗаполнитьПанельИнформации(Элементы.СписокТорговыеТочки.ТекущаяСтрока);
КонецПроцедуры 

&НаКлиенте
Процедура СписокТорговыеТочкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОткрытьФорму("Справочник.вогТорговыеТочки.Форма.вогРежимВвода");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЮридическиеЛица

&НаКлиенте
Процедура СписокЮридическиеЛицаПриАктивизацииСтроки(Элемент)
	Если Элементы.КнИнформацияЮридическиеЛица.Пометка Тогда
		ПодключитьОбработчикОжидания("ОтобразитьДополнительнуюИнформациюЮридическиеЛица",0.1,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДополнительнуюИнформациюЮридическиеЛица()	
	ЗаполнитьПанельИнформации(Элементы.СписокЮридическиеЛица.ТекущаяСтрока);
КонецПроцедуры 

&НаКлиенте
Процедура ПолеОтображениеСодержанияЮридическиеЛицаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
	Если Элементы.СписокЮридическиеЛица.ТекущиеДанные <> Неопределено И ДанныеСобытия.Anchor <> Неопределено Тогда
		Результат = РасшифровкаКонтактнаяИнформация(ДанныеСобытия.Anchor.outerHTML,ДанныеСобытия.Anchor.innerText,Элементы.СписокЮридическиеЛица.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
		СтандартнаяОбработка, Новый ОписаниеТипов("СправочникСсылка.вогЮридическиеЛица"));
	Иначе	
		СтандартнаяОбработка = Ложь;
		ОП = Новый ОписаниеОповещения("ОбработатьРезультатРасшифровки",ЭтотОбъект,Результат);
		ВыполнитьОбработкуОповещения(ОП,Элементы.СписокЮридическиеЛица.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрочиеПартнеры(Команда)
	ОткрытьФорму("Справочник.Партнеры.ФормаСписка",, 
		ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторам(Команда)
	
	Попытка
		СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Принадлежность"	 	  , СтруктураРаздела.КлассификаторПринадлежность);
		ПараметрыФормы.Вставить("МассивЗначений"	 	  , ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("МассивЗначенийРеквизитов", ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ЛогическоеВыражение"	  , ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + СтруктураРаздела.ИмяСписка]);
		Оповещение = Новый ОписаниеОповещения("НастроитьОтборПоКлассификаторамЗавершение", ЭтотОбъект, СтруктураРаздела);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаПодбораЗначенийКлассификаторов", 
			ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	Исключение
		
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторамЗавершение(СтруктураЗначенийКлассификаторов, ДополнительныеПараметры) Экспорт

	Если СтруктураЗначенийКлассификаторов = Неопределено Тогда
		Возврат;
	
	КонецЕсли;	
	
	ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + ДополнительныеПараметры.ИмяСписка] = СтруктураЗначенийКлассификаторов.ЛогическоеВыражение;
	УстановитьОтборПоКлассификаторам(СтруктураЗначенийКлассификаторов.ЗначенияКлассификаторов, СтруктураЗначенийКлассификаторов.ЗначенияРеквизитов);
		
КонецПроцедуры // НастроитьОтборПоКлассификаторамЗавершение()

&НаКлиенте
Процедура НазначитьВыделенным(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	ЭлементСписок = Элементы[СтруктураРаздела.ИмяСписка];
	
	ВыделенныеСтроки = ЭлементСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	
	КонецЕсли;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ЭлементСписок.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда                      
			Продолжить;
		КонецЕсли;
		
		Если СтруктураРаздела.ИерархияГруппИЭлементов
		  И ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если ЭлементСписок.ТекущийЭлемент.Родитель = Элементы["ПоляЗначенийКлассифкатора" + СтруктураРаздела.ИмяСписка] Тогда
			ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, СтруктураРаздела.ИмяСписка, ЭлементСписок.ТекущийЭлемент.Имя, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ЭлементСписок.Обновить();
	
КонецПроцедуры

#Область Настройки

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Настройки);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.вогУправлениеКлассификацией.Форма.ФормаНастроек",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(ПолученныеНастройки, Контекст) Экспорт

	Если ПолученныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки(ПолученныеНастройки);	
	УстановитьПараметрыСписковПоНастройкам(ЭтаФорма);

КонецПроцедуры // НастройкиЗавершение()

&НаКлиенте
Процедура ВыбратьНастройку(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяСписка", СтруктураРаздела.ИмяСписка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"		 , Отбор);
	ПараметрыФормы.Вставить("Пользватель", ПользователиКлиентСервер.ТекущийПользователь());
	
	ОткрытьФорму("Справочник.вогНастройкиУправленияКлассификацией.ФормаВыбора",
		ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	ПараметрыНастройки = Новый Структура;
	
	//Основные настройки
	ПараметрыНастройки.Вставить("ВариантСписка", ТекущийВариантСписка[СтруктураРаздела.ИмяСписка]);
	ПараметрыНастройки.Вставить("Классификатор", Классификатор);
	
	ПараметрыНастройки.Вставить("ОтборСписокЗначенийКлассификаторов"	  , ОтборСписокЗначенийКлассификаторов);
	ПараметрыНастройки.Вставить("ЛогическоеВыражениеОтбораКлассификаторов", ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + СтруктураРаздела.ИмяСписка]);
	
	//Быстрые отборы
	СтруктураБыстрыхОтборов = Новый Структура;
	
	СтруктураБыстрыхОтборов.Вставить("ОтборДатаВключенияКлассификатора"			   , ОтборДатаВключенияКлассификатора);
	СтруктураБыстрыхОтборов.Вставить("ОтборДатаВключенияКлассификатораВидСравнения", ОтборДатаВключенияКлассификатораВидСравнения);
	СтруктураБыстрыхОтборов.Вставить("ОтборВидТорговойТочки"				       , ОтборВидТорговойТочки);
	СтруктураБыстрыхОтборов.Вставить("ОтборТипОтношений"				           , ОтборТипОтношений);
	СтруктураБыстрыхОтборов.Вставить("ОтборПродажиСумма"						   , ОтборПродажиСумма);
	СтруктураБыстрыхОтборов.Вставить("ОтборПродажиСуммаВидСравнения"			   , ОтборПродажиСуммаВидСравнения);
	СтруктураБыстрыхОтборов.Вставить("ОтборСписокЗначенийКлассификаторов"		   , ОтборСписокЗначенийКлассификаторов);
	СтруктураБыстрыхОтборов.Вставить("ОтборБизнесРегион"						   , ОтборБизнесРегион);
	// { VOG RMV 2019-01-18 изменение №2552
	СтруктураБыстрыхОтборов.Вставить("ОтборМенеджер"							   , ОтборМенеджер);
	СтруктураБыстрыхОтборов.Вставить("ОтборПодразделение"						   , ОтборПодразделение);	
	// } VOG RMV 2019-01-18 изменение №2552
	
	ПараметрыНастройки.Вставить("БыстрыеОтборы", СтруктураБыстрыхОтборов);
	
	//Сохранение настройки
	ОткрытьФорму("Справочник.вогНастройкиУправленияКлассификацией.Форма.СохранениеНастройки",
		Новый Структура("ИмяСписка, Настройки", СтруктураРаздела.ИмяСписка, ПараметрыНастройки), ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	// ++ VOG Солодов В.В. 14.10.2020 CRM-942
	СписокКоманд = вогБизнесПроцессыИЗадачиВызовСервера.ДоступныНовыеПоручения();
	
	Если СписокКоманд.Количество() > 1 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораТипаПоручения", ЭтотОбъект);
		
		СписокКоманд.ПоказатьВыборЭлемента(
			Оповещение, НСтр("ru = 'Выберите форму поручения'"));
		
	ИначеЕсли СписокКоманд.Количество() = 1 Тогда
		ПослеВыбораТипаПоручения(СписокКоманд[0], Неопределено);
	КонецЕсли;
	// До изменения
	//СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);

	////>>Бей(30.05.2019 16:40:07):#177
	//	
	//МассивКлиентов = Элементы[СтруктураРаздела.ИмяСписка].ВыделенныеСтроки;	
	//
	//СписокДоступныхТиповПоручений = ПолучитьСписокДоступныхТиповПоручений(СтруктураРаздела);
	//
	//ОповещениеОВыбореТипаПоручения = Новый ОписаниеОповещения("ВыборТипаПорученияЗавершение", ЭтаФорма, МассивКлиентов);
	//
	////ПоказатьВыборИзМеню(ОповещениеОВыбореТипаПоручения,СписокДоступныхТиповПоручений);	
	//
	//СписокДоступныхТиповПоручений.ПоказатьВыборЭлемента(ОповещениеОВыбореТипаПоручения,"Выберете доступный тип поручения");
	//
	////СтруктураРаздела.КлассификаторПринадлежность
	//
	//
	////МассивОбъектов = ТекущиеОбъектыКорзины(СтруктураРаздела);
	////Если МассивОбъектов.Количество() = 0 Тогда
	////	Возврат;	
	////	
	////КонецЕсли;
	////
	////ПараметрыФормы = Новый Структура;
	////ПараметрыФормы.Вставить("ИмяТаблицы"    , СтруктураРаздела.КлассификаторПринадлежность);
	////ПараметрыФормы.Вставить("МассивОбъектов", МассивОбъектов);
	////
	////ОткрытьФорму("Обработка.вогМастерФормированияПоручений.Форма", 
	////	ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//
	////<<Бей(30.05.2019 16:40:43):#177
	// -- VOG Солодов В.В. 14.10.2020 CRM-942
	
КонецПроцедуры

// ++ VOG Солодов В.В. 14.10.2020 CRM-942
&НаКлиенте
Процедура ПослеВыбораТипаПоручения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = 0 Тогда
		
		СтруктураРаздела 				= СтруктураТекущегоРаздела(ЭтотОбъект);
		МассивКлиентов 					= Элементы[СтруктураРаздела.ИмяСписка].ВыделенныеСтроки;
		СписокДоступныхТиповПоручений 	= ПолучитьСписокДоступныхТиповПоручений(СтруктураРаздела);
		
		ОповещениеОВыбореТипаПоручения 	= Новый ОписаниеОповещения(
			"ВыборТипаПорученияЗавершение",
			ЭтотОбъект,
			МассивКлиентов);
		
		СписокДоступныхТиповПоручений.ПоказатьВыборЭлемента(
			ОповещениеОВыбореТипаПоручения, НСтр("ru = 'Выберите доступный тип поручения'"));
		
	Иначе
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения");
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 14.10.2020 CRM-942

&НаСервере
Функция ПолучитьСписокДоступныхТиповПоручений(СтруктураРаздела)
	
	СписокДоступныхТипов = Новый СписокЗначений;
	
	Если СтруктураРаздела.ИмяСписка = "СписокПартнеры" Тогда
		Условие = "Клиенты";

	ИначеЕсли СтруктураРаздела.ИмяСписка = "СписокТорговыеТочки" Тогда
		Условие = "ТорговыеТочки";

	Иначе
		Возврат СписокДоступныхТипов;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогНастройкиБизнесПроцессов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогНастройкиБизнесПроцессов КАК вогНастройкиБизнесПроцессов
		|ГДЕ
		|	НЕ вогНастройкиБизнесПроцессов.ПометкаУдаления
		|	И вогНастройкиБизнесПроцессов.%1";
	    	    		
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,Условие);
	
	СписокДоступныхТипов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокДоступныхТипов;
	 	
КонецФункции

&НаКлиенте
Процедура ВыборТипаПорученияЗавершение(ТипПоручения, МассивКлиентов) Экспорт
	
	Если ТипПоручения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура("вогНастройка,КартаМаршрута",ТипПоручения.Значение, ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	
	ПараметрыОткрытияФормы = Новый Структура("МассивКлиентов, Основание", МассивКлиентов, Основание);
	
	// ++ VOG Солодов В.В. 14.10.2020 CRM-942
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения_Старая", ПараметрыОткрытияФормы);
	// До изменения
	//ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыОткрытияФормы);
	// -- VOG Солодов В.В. 14.10.2020 CRM-942
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАнкету(Команда)

	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	ТекущаяСтрока = Элементы[СтруктураРаздела.ИмяСписка].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран респондент. '"), 15);
		Возврат;	
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Респондент", ТекущаяСтрока);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.вогАнкета.ФормаОбъекта", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область Корзина

&НаКлиенте
Процедура ОткрытьКорзину(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	НайденныеСтроки = ТекущиеСтрокиКорзины(ЭтотОбъект, СтруктураРаздела);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Корзина 	   = Новый Массив;
	ПараметрыФормы = Новый Структура;
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтруктураСтроки = Новый Структура("Ссылка, ИмяСписка");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, НайденнаяСтрока);
		
		Корзина.Добавить(СтруктураСтроки);		
	
	КонецЦикла;
	ПараметрыФормы.Вставить("Корзина", Корзина);
	
	Оповещение = Новый ОписаниеОповещения("ПослеРедактированияКорзины", ЭтотОбъект, СтруктураРаздела);
	ОткрытьФорму("Обработка.вогУправлениеКлассификацией.Форма.ФормаКорзина", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	ВыделенныеСтроки = Элементы[СтруктураРаздела.ИмяСписка].ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны строки для добавления. '"), 15);
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы[СтруктураРаздела.ИмяСписка].ДанныеСтроки(ВыделеннаяСтрока); 
		Если ДанныеСтроки <> Неопределено
		  И СтруктураРаздела.ИерархияГруппИЭлементов
		  И ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;	
			
		КонецЕсли;
		
		МассивСтрок.Добавить(ВыделеннаяСтрока);
	
	КонецЦикла;
	
	//Добавление элементов 
	ДобавитьВКорзинуСервер(МассивСтрок, СтруктураРаздела);
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьКлиента(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	ВыделенныеСтроки = Элементы[СтруктураРаздела.ИмяСписка].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() =0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	МожноПерейтиКСозданиюАнкеты(ВыделенныеСтроки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ТорговыеТочки", ВыделенныеСтроки);
	
	АдресДанныхДляЗаполнения = ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, ЭтаФорма.УникальныйИдентификатор);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВариантОпроса", ПредопределенноеЗначение("ПланВидовХарактеристик.вогВариантыОпросов.СертификацияКлиента"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("АдресДанныхДляЗаполнения", АдресДанныхДляЗаполнения);
	
	ОткрытьФорму("Документ.вогАнкета.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

// ++ VOG Солодов В.В. 19.07.2019 task 461
&НаКлиенте
Процедура СоздатьРЦ(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	ВыделенныеСтроки = Элементы[СтруктураРаздела.ИмяСписка].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ТорговыеТочки", ВыделенныеСтроки);
	
	АдресДанныхДляЗаполнения = ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, ЭтаФорма.УникальныйИдентификатор);
	
	ВариантОпроса = ПолучитьВариантОпросаРЦ();
	
	ЗначенияЗаполнения 	= Новый Структура;
	ЗначенияЗаполнения.Вставить("ВариантОпроса", 		ВариантОпроса);
	
	ПараметрыФормы 		= Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", 		ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("АдресДанныхДляЗаполнения", АдресДанныхДляЗаполнения);
	
	ОткрытьФорму("Документ.вогАнкета.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры
// -- VOG Солодов В.В. 19.07.2019

&НаКлиенте
Процедура ОтоброзитьДополнителюнуюИнформацию(Команда)
	
	ИмяЭлемента 	= СокрЛП(СтрЗаменить(Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя,"СтраницаРаздел","КнИнформация"));
	ТекущаяКнопка 	= Элементы[ИмяЭлемента];
	
	ТекущаяКнопка.Пометка = Не ТекущаяКнопка.Пометка;
	
	Если ТекущаяКнопка.Пометка Тогда
		ТекущаяКнопка.Картинка = БиблиотекаКартинок.CRM_Информация;
		УстановитьВидСписка(Истина);
	Иначе
		ТекущаяКнопка.Картинка = БиблиотекаКартинок.Информация;
		УстановитьВидСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТорговуюТочку(Команда)
	ОткрытьФорму("Справочник.вогТорговыеТочки.Форма.вогРежимВвода");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура МожноПерейтиКСозданиюАнкеты(Знач МассивВыделыенныхСтрок, Отказ)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	вогСертификацияКлиента.Анкета КАК Анкета,
	|	вогТорговыеТочки.Ссылка КАК ТорговаяТочка,
	|	вогТорговыеТочки.Партнер КАК Партнер
	|ИЗ
	|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСертификацияКлиента КАК вогСертификацияКлиента
	|		ПО (вогСертификацияКлиента.ТорговаяТочка = вогТорговыеТочки.Ссылка
//START Кайдашов 17/07/19	
	|				И НЕ вогСертификацияКлиента.Утверждено И Значение(Справочник.вогШаблоныСтатусов.НеСогласован)<>вогСертификацияКлиента.Анкета.Статус)
//END Кайдашов	
	|ГДЕ
	|	вогТорговыеТочки.Ссылка В(&ТорговаяТочка)";
	
	Запрос.УстановитьПараметр("ТорговаяТочка", МассивВыделыенныхСтрок);
	                                                         
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Партнер) Тогда
			Отказ = Истина;
			Сообщить(СтрШаблон("В карточке торговой точки: %1 уже указан клиент: %2", ВыборкаДетальныеЗаписи.ТорговаяТочка, ВыборкаДетальныеЗаписи.Партнер));
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Анкета) Тогда
			Отказ = Истина;
			Сообщить(СтрШаблон("По торговой точке: %1 найдена запись для регистрации клиента: %2", ВыборкаДетальныеЗаписи.ТорговаяТочка, ВыборкаДетальныеЗаписи.Анкета));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 19.07.2019 task 461
&НаСервереБезКонтекста
Функция ПолучитьВариантОпросаРЦ()
	
	УИД_ВариантаОпроса 	= Новый УникальныйИдентификатор("907c7f92-8e9e-11e9-b656-005056bc3fe8");
	ВариантОпроса 		= ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(УИД_ВариантаОпроса);
	
	Возврат ВариантОпроса;
	
КонецФункции
// -- VOG Солодов В.В. 19.07.2019

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ИницализироватьСтруктуруКлассификатора()

	ИницализироватьСтруктуруКлассификатора();	

КонецПроцедуры // Подключаемый_ИницализироватьСтруктуруКлассификатора()

&НаКлиенте
Процедура Подключаемый_ЗначениеОтбора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ЭлементЗначенияОтбора = ОтборСписокЗначенийКлассификаторов.НайтиПоЗначению(
		СсылкаЭлемента(Элемент.Имя));	
		
	Если ЭлементЗначенияОтбора = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;	
	
	ОтборСписокЗначенийКлассификаторов.Удалить(ЭлементЗначенияОтбора);
	УстановитьОтборПоКлассификаторам();
	
КонецПроцедуры // Подключаемый_ЗначениеОтбора_ОбработкаСсылки()

#Область ВариантыСписка

&НаКлиенте
Процедура Подключаемый_ВариантСпискаПриИзменении(Команда)
	ВариантСпискаПриИзменении(Команда.Имя);
КонецПроцедуры // Подключаемый_ВариантСпискаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ДобавитьВариантСписка(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);	
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИмяСписка", 		СтруктураРаздела.ИмяСписка);
	ЗначенияЗаполнения.Вставить("ТолькоДляАвтора", 	Истина);
	
	ОткрытьФорму("Справочник.вогВариантыСписковУправленияКлассификацией.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры // Подключаемый_ДобавитьВариантСписка()

&НаКлиенте
Процедура Подключаемый_ИзменитьВариантСписка(Команда)
	
	ВариантСсылка = ПолучитьВариантСпискаСервер();
	Если ВариантСсылка <> Неопределено Тогда
		ОткрытьЗначение(ВариантСсылка);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ИзменитьВариантСписка()

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_СформироватьПроектЭтапПоМоделиКейса(Команда)
	
	МассивКлиентов = ТекущиеОбъектыКорзины();
	Если МассивКлиентов.Количество() = 0 Тогда
		Возврат;	
		
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("МассивКлиентов", МассивКлиентов);	
	ПараметрыКоманды.Вставить("БизнесРегион"  , ОтборБизнесРегион);	
		
	CRM_УправлениеПроектамиКлиент.ОбработкаКомандыМоделиКейса(
		ЭтотОбъект, 
		Команда, 
		ПараметрыКоманды);
	
КонецПроцедуры // Подключаемый_СформироватьПроектЭтапПоМоделиКейса()

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

#Область СтруктураРазделов

&НаСервере
Процедура СформироватьСтруктуруРазделов()

	ДанныеРазделов 		 = Новый Структура;
	ТекущийВариантСписка = Новый Структура;
	ТекущаяНастройка     = Новый Структура;
	Пользователь = Пользователи.ТекущийПользователь();
	Для каждого Страница Из Элементы.ГруппаСтраницыРазделов.ПодчиненныеЭлементы Цикл
		
		Если Пользователь.CRM_НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка и Страница = Элементы.СтраницаРазделБрендЗоны тогда
			Продолжить;
		КонецЕсли;
	
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("ИмяСписка");
		СтруктураРаздела.Вставить("Классификатор");   
		СтруктураРаздела.Вставить("КлассификаторПринадлежность");   
		СтруктураРаздела.Вставить("ИерархияГруппИЭлементов");
		СтруктураРаздела.Вставить("ОтборБизнесРегион");
		СтруктураРаздела.Вставить("ОтборТипОтношений");
		СтруктураРаздела.Вставить("ОтборВидТорговойТочки");
		СтруктураРаздела.Вставить("ОтборДатаВключенияКлассификатора");
		СтруктураРаздела.Вставить("ОтборДатаВключенияКлассификатораВидСравнения");
		СтруктураРаздела.Вставить("ОтборПродажиСумма");
		СтруктураРаздела.Вставить("ОтборПродажиСуммаВидСравнения");
		СтруктураРаздела.Вставить("ОтборСписокЗначенийКлассификаторов");
		// { VOG RMV 2019-01-18 изменение №2552
		СтруктураРаздела.Вставить("ОтборПодразделение");
		СтруктураРаздела.Вставить("ОтборМенеджер");
		// } VOG RMV 2019-01-18 изменение №2552
				
		ИмяСписка = СтрЗаменить(Страница.Имя, "СтраницаРаздел", "Список");
		СтруктураРаздела.ИмяСписка 					 = ИмяСписка;
		СтруктураРаздела.КлассификаторПринадлежность = ЭтотОбъект[ИмяСписка].ОсновнаяТаблица;
		
		СтруктураРаздела.ИерархияГруппИЭлементов = 
			ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти("ЭтоГруппа") <> Неопределено;
		
		ДанныеРазделов.Вставить(Страница.Имя, СтруктураРаздела);
		ЗаполнитьДанныеТекущегоРаздела(ЭтотОбъект, Страница.Имя);
		
		СтруктураРаздела.ОтборДатаВключенияКлассификатораВидСравнения = "Равно";
		СтруктураРаздела.ОтборПродажиСуммаВидСравнения 				  = "Равно";
		
		Если Страница.Видимость Тогда
			Элементы.ПереключательРазделов.СписокВыбора.Добавить(Страница.Имя, Страница.Заголовок);	
		КонецЕсли;
		
		//Настройки                              
		ТекущаяНастройка.Вставить(ИмяСписка);
		
		Если ИмяСписка = "СписокКонтактныеЛицаПартнеров" Тогда
			Продолжить;
		КонецЕсли;
		
		//Формирование вариантов списка
		ТекущийВариантСписка.Вставить(ИмяСписка);
		CRM_КлассификаторыВызовСервера.ИнициализироватьВариантыСписка(ЭтотОбъект, ПолучитьПараметрыСписка(ИмяСписка));	
		Элементы["СписокГруппаВариантыСписка" + ИмяСписка].Видимость = Ложь;
		
	КонецЦикла;

	Если Элементы.ПереключательРазделов.СписокВыбора.Количество() > 0 Тогда
		ПереключательРазделов = Элементы.ПереключательРазделов.СписокВыбора[0].Значение;
		ПеренестиДанныеТекущегоРаздела(ЭтотОбъект, ПереключательРазделов);
		
		Элементы.ПереключательРазделов.КоличествоКолонок = Элементы.ПереключательРазделов.СписокВыбора.Количество();
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьСтруктуруРазделов()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеТекущегоРаздела(Форма, ТекущийРаздел)

	СтруктураРаздела = Форма.ДанныеРазделов[ТекущийРаздел];
	ЗаполнитьЗначенияСвойств(СтруктураРаздела, Форма,, "ОтборСписокЗначенийКлассификаторов");
	
	Форма.Элементы["СписокГруппаВариантыСписка" + СтруктураРаздела.ИмяСписка].Видимость = Ложь;
	
	//Форма.Элементы.ОтборВидТорговойТочки.Видимость = (СтруктураРаздела.ИмяСписка = "СписокПартнеры");
	//Форма.Элементы.ОтборТипОтношений.Видимость	   = (СтруктураРаздела.ИмяСписка = "СписокТорговыеТочки");
		
	СтруктураРаздела.ОтборСписокЗначенийКлассификаторов = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(Форма.ОтборСписокЗначенийКлассификаторов);
	
КонецПроцедуры // ЗаполнитьДанныеТекущегоРаздела()

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиДанныеТекущегоРаздела(Форма, ТекущийРаздел)

	СтруктураРаздела = СтруктураТекущегоРаздела(Форма, ТекущийРаздел);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураРаздела,, "ОтборСписокЗначенийКлассификаторов");

	Форма.ОтборСписокЗначенийКлассификаторов = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(СтруктураРаздела.ОтборСписокЗначенийКлассификаторов);
	
	СписокПринадлежность = Новый СписокЗначений;
	СписокПринадлежность.Добавить(СтруктураРаздела.КлассификаторПринадлежность);
	
	ПараметрыВыбора = Новый Массив;
	// ++ Харченко Д.И. № 000002250 - 17.09.2018 / 
	ПараметрыВыбораСпособов = Новый Массив;
	ПараметрыВыбораСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ФормироватьВручную"));	
	ПараметрыВыбораСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.вогАнкетирование"));	
	
	МассивСпособов = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.СпособФормирования", ПараметрыВыбораСпособов));
	
	// -- Харченко Д.И. № 000002250 - 17.09.2018
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Принадлежность.ИмяТаблиц", СписокПринадлежность));
	
	Форма.Элементы["СписокГруппаВариантыСписка" + СтруктураРаздела.ИмяСписка].Видимость = Истина;
		
	Форма.Элементы.Классификатор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	Если ТекущийРаздел = "СтраницаРазделКонтактныеЛицаПартнеров" Тогда
		Форма.Элементы.Классификатор.Видимость = Ложь;
		Форма.Элементы.СписокГруппаНастройкиОтбор.Видимость = Ложь;
	Иначе 
		// { VOG RMV 2019-01-21 изменение №2552
		//Форма.Элементы.Классификатор.Видимость = Истина;		
		// } VOG RMV 2019-01-21 изменение №2552		
		Форма.Элементы.СписокГруппаНастройкиОтбор.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПеренестиДанныеРаздела()

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураТекущегоРаздела(Форма, Знач ТекущийРаздел = Неопределено)
	
	Если ТекущийРаздел = Неопределено Тогда
		ТекущийРаздел = Форма.ПереключательРазделов;
	
	КонецЕсли;
	
	Возврат Форма.ДанныеРазделов[ТекущийРаздел];
	
КонецФункции // СтруктураТекущегоРаздела()

#КонецОбласти

&НаСервере
Процедура ИницализироватьСтруктуруКлассификатора()
	СформироватьВыбранныеПоля();	
КонецПроцедуры // ИницализироватьСтруктуруКлассификатора()

&НаСервере
Процедура СформироватьВыбранныеПоля()
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	СписокРаспределительныеЦентры 			 = ЭтотОбъект[СтруктураРаздела.ИмяСписка];
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРаспределительныеЦентры, "Классификатор", Классификатор);
		
	ИмяТаблицы = СтруктураРаздела.ИмяСписка;
	СтрокиСоответстствияПолей = ТаблицаСоответстствияПолей.НайтиСтроки(Новый Структура("ИмяТаблицы", ИмяТаблицы));
	Для каждого СтрокаСоответстствия Из СтрокиСоответстствияПолей Цикл
		Элемент = Элементы.Найти(СтрокаСоответстствия.ИмяПоля);	
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСоответстствияПолей = ТаблицаСоответстствияПолей.НайтиСтроки(Новый Структура("ИмяТаблицы", ИмяТаблицы));
	Для каждого СтрокаСоответстствия Из СтрокиСоответстствияПолей Цикл
		ТаблицаСоответстствияПолей.Удалить(СтрокаСоответстствия);	
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Классификатор) Тогда
		Возврат;	
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ЗначенияКлассификаторов.Ссылка,
		|	CRM_ЗначенияКлассификаторов.Код,
		|	CRM_ЗначенияКлассификаторов.Владелец.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	CRM_ЗначенияКлассификаторов.Владелец.Наименование КАК ВладелецНаименование,
		|	CRM_ЗначенияКлассификаторов.Представление,
		|	CRM_ЗначенияКлассификаторов.Владелец.ВидОтображения КАК ВидОтображения,
		|	CRM_ЗначенияКлассификаторов.Описание,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит,
		 // ++ Харченко Д.И. № 000002250 - 17.09.2018 / Добавил СпособФормирования
		|	CRM_ЗначенияКлассификаторов.Владелец.СпособФормирования Как СпособФормирования,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит.ТипЗначения КАК ТипЗначения,
		|	CRM_ЗначенияКлассификаторов.Владелец.ХранитьИсториюИзменения КАК ХранитьИсториюИзменения
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &Классификатор
		|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ЗначенияКлассификаторов.Владелец.РеквизитДопУпорядочивания,
		|	CRM_ЗначенияКлассификаторов.РеквизитДопУпорядочивания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Сч = 1;
	                                                        		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ШаблонИмени = ПолучитьШаблонИмени(Выборка.Код + "_" + Выборка.ВладелецНаименование);
		
		Элемент = ЭтаФорма.Элементы.Добавить(ИмяТаблицы + "_" + Формат(Сч, "ЧГ="), Тип("ПолеФормы"), Элементы["ПоляЗначенийКлассифкатора" + ИмяТаблицы]);
		Элемент.ПутьКДанным	= ИмяТаблицы + "." + ШаблонИмени;
		
		Если ЗначениеЗаполнено(Выборка.ДополнительныйРеквизит) Тогда
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Выборка.ТипЗначения, Тип("Булево")) Тогда
				Элемент.Вид = ВидПоляФормы.ПолеФлажка;
			Иначе	
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
		Иначе			
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
		Элемент.Заголовок   = Выборка.Представление;
		Элемент.Подсказка   = Выборка.Описание;
		
		НоваяСтрока	= ТаблицаСоответстствияПолей.Добавить();
		
		НоваяСтрока.ШаблонИмени	= ШаблонИмени;
		НоваяСтрока.ИмяПоля 	= ИмяТаблицы + "_" + Формат(Сч, "ЧГ=");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ИмяТаблицы = ИмяТаблицы;
		
		НоваяСтрока.Аналитика = CRM_КлассификаторыВызовСервера.ПолучитьЗначениеИспользуемойАналитикиКлассификатора(Классификатор);
		
		// ++ Харченко Д.И. № 000002250 - 17.09.2018 / 
		НоваяСтрока.СпособФормирования = Выборка.СпособФормирования;
		// -- Харченко Д.И. № 000002250 - 17.09.2018
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	//Видимость	
	ВидОтображения = Классификатор.ВидОтображения;
	
	Элементы.СписокПартнерыКонтекстноеМенюНазначитьВыделенным.Видимость = 
		(ВидОтображения <> Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит); 
		
	Элементы.СписокТорговыеТочкиКонтекстноеМенюНазначитьВыделенным.Видимость = 
		(ВидОтображения <> Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит); 
	
КонецПроцедуры // СформироватьВыбранныеПоля()

&НаСервереБезКонтекста
Функция ПолучитьШаблонИмени(ИмяПоля)

	Если Найти(ИмяПоля, " ") Тогда
		Шаблон = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ссылка.[%1]", "_" + ИмяПоля);
	Иначе	
		Шаблон = "Ссылка." + "_" + ИмяПоля;
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции // ПолучитьШаблонИмениПоСсылке()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуСоответствия(Форма, ИмяТаблицы, ИмяПоля)

	Перем СтрокаПоля;
	
	СтрокиПоля = Форма.ТаблицаСоответстствияПолей.НайтиСтроки(Новый Структура("ИмяТаблицы, ИмяПоля", ИмяТаблицы, ИмяПоля));
	Если СтрокиПоля.Количество() > 0 Тогда
		СтрокаПоля = СтрокиПоля[0];	
	КонецЕсли;
	
	Возврат СтрокаПоля;
	
КонецФункции // НайтиСтрокуСоответствия()

&НаКлиентеНаСервереБезКонтекста
Функция СформировтьСтруктуруСтрокиКлассификатора(СтрокаПоля)

	СтрокаКлассификатора = Новый Структура("Ссылка,
											|Представление,
											|ИмяПоля,
											|ШаблонИмени,
											|ВидОтображения,
											|Классификатор,
											|Аналитика,
											|ЗначениеРеквизита,
											|ХранитьИсториюИзменения");	

	ЗаполнитьЗначенияСвойств(СтрокаКлассификатора, СтрокаПоля);
	Возврат СтрокаКлассификатора;
	
КонецФункции // СформировтьСтруктуруСтрокиКлассификатора()

&НаКлиенте
Процедура ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, ИмяСписка, ИмяПоля, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтрокаПоля = НайтиСтрокуСоответствия(ЭтаФорма, ИмяСписка, ИмяПоля);
	Если СтрокаПоля = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	// ++ Харченко Д.И. № 000002250 - 17.09.2018 / 
	Если СтрокаПоля.СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.вогАнкетирование") Тогда
		Возврат;
	КонецЕсли;
	// -- Харченко Д.И. № 000002250 - 17.09.2018
	
	СтрокаКлассификатора = СформировтьСтруктуруСтрокиКлассификатора(СтрокаПоля);
	Если ЗначениеЗаполнено(СтрокаПоля.ДополнительныйРеквизит) Тогда
		СтрокаКлассификатора.ЗначениеРеквизита = ДанныеСтроки[СтрокаПоля.ШаблонИмени];	
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка"		   	   , ДанныеСтроки.Ссылка);
		ПараметрыОповещения.Вставить("ИмяСписка"		   , ИмяСписка);
		ПараметрыОповещения.Вставить("СтрокаКлассификатора", СтрокаКлассификатора);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеСтрокиКлиентЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВводЗначения(Оповещение, СтрокаКлассификатора.ЗначениеРеквизита, Элементы[ИмяПоля].Заголовок, СтрокаПоля.ТипЗначения);  
		
	Иначе	
		ИзменитьКлассификатор(ДанныеСтроки.Ссылка, СтрокаКлассификатора, Не ДанныеСтроки[СтрокаПоля.ШаблонИмени], Истина);		
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДанныеСтроки()

&НаКлиенте
Процедура ОбработатьДанныеСтрокиКлиентЗавершение(ЗначениеРеквизита, Конекст) Экспорт
	
	Если ЗначениеРеквизита = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	СтрокаКлассификатора = Конекст.СтрокаКлассификатора;
	СтрокаКлассификатора.ЗначениеРеквизита = ЗначениеРеквизита;
	
	ИзменитьКлассификатор(Конекст.Ссылка, СтрокаКлассификатора, ЗначениеЗаполнено(ЗначениеРеквизита), Истина);		
	
	Элементы[Конекст.ИмяСписка].Обновить();
	
КонецПроцедуры // ОбработатьДанныеСтрокиКлиентЗавершение()

&НаСервере
Процедура ИзменитьКлассификатор(ОбъектСсылка, СтрокаКлассификатора, Включить, Рекурсивно = Ложь)
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписей.Отбор.Аналитика.Установить(СтрокаКлассификатора.Аналитика);
	НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(СтрокаКлассификатора.Ссылка);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Если Включить Тогда
		Запись = НаборЗаписей.Добавить();
		
		Запись.Объект  				   = ОбъектСсылка;
		Запись.Аналитика			   = СтрокаКлассификатора.Аналитика;		
		Запись.ЗначениеКлассификатора  = СтрокаКлассификатора.Ссылка;
		Запись.ЗначениеРеквизита  	   = СтрокаКлассификатора.ЗначениеРеквизита;
		Запись.ДатаВключения		   = ТекущаяДата();
		Запись.ХранитьИсториюИзменения = СтрокаКлассификатора.ХранитьИсториюИзменения;
		
	КонецЕсли;	
	
	НаборЗаписей.Записать();
	
	Если Рекурсивно И СтрокаКлассификатора.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
		Для каждого СтрокаОписания Из ТаблицаСоответстствияПолей Цикл
			Если СтрокаОписания.Ссылка = СтрокаКлассификатора.Ссылка Тогда
				Продолжить;
			
			КонецЕсли;
			
			ИзменитьКлассификатор(ОбъектСсылка, СтрокаОписания, Ложь);
			
		КонецЦикла;
		
	
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ИзменитьКлассификатор()

&НаКлиенте
Процедура УстановитьОтборПоКлассификаторам(Знач ЗначенияКлассификаторов = Неопределено, Знач ЗначенияРеквизитов = Неопределено)

	//Значения
	Если ЗначенияКлассификаторов = Неопределено Тогда
		ЗначенияКлассификаторов = ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения();
		
	Иначе
		ОтборСписокЗначенийКлассификаторов.ЗагрузитьЗначения(ЗначенияКлассификаторов);
		
	КонецЕсли;
	
	//Реквизиты
	Если ЗначенияРеквизитов = Неопределено Тогда
		ЗначенияРеквизитов = ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения();
		
	Иначе
		ОтборСписокЗначенийРеквизитовКлассификаторов.ЗагрузитьЗначения(ЗначенияРеквизитов);
		
	КонецЕсли;	
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	СписокРаспределительныеЦентры = ЭтотОбъект[СтруктураРаздела.ИмяСписка];
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокРаспределительныеЦентры.Отбор.Элементы, "ГруппаИЛИЗначенийИРеквизитовКлассификатора", 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);	
		
	Если ЗначенияКлассификаторов.Количество() > 0 Тогда
		КоличествоЭлементовОтбора = ЗначенияКлассификаторов.Количество();
		Для Сч = 0 По КоличествоЭлементовОтбора - 1 Цикл
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИ.Элементы, "ГруппаИЗначенийИРеквизитовКлассификатора" + Формат(Сч, "ЧГ="), 
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);	
				
			ЭлементЗначенияКлассификаторов 			= ЗначенияКлассификаторов[Сч];	
			ЭлементЗначенияРеквизитаКлассификаторов = ЗначенияРеквизитов[Сч];	
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
				"ЗначениеКлассификатора", ЭлементЗначенияКлассификаторов, ВидСравненияКомпоновкиДанных.Равно);
			
			Если ТипЗнч(ЭлементЗначенияРеквизитаКлассификаторов) = Тип("Число") Тогда
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;	
			Иначе	
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.Равно;	
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
				"ЗначениеРеквизита", ЭлементЗначенияРеквизитаКлассификаторов, ВидСравненияСписка);
		
		КонецЦикла;
				
	КонецЕсли;
	
	ИспользуетсяОтборПоКлассификатору = ЗначенияКлассификаторов.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРаспределительныеЦентры, 
		"ЛогическоеВыражение", ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + СтруктураРаздела.ИмяСписка], ИспользуетсяОтборПоКлассификатору);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРаспределительныеЦентры, 
		"КоличествоЗначенийКлассификатора", ЗначенияКлассификаторов.Количество(), ИспользуетсяОтборПоКлассификатору);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРаспределительныеЦентры, 
		"ИспользуетсяОтборПоКлассификатору", Истина, ИспользуетсяОтборПоКлассификатору);	

	ОбновитьОтображениеУстановленныхОтборов(СтруктураРаздела.ИмяСписка);
	УстановитьРежимПросмотраСписка(Элементы[СтруктураРаздела.ИмяСписка]);
	
	Элементы[СтруктураРаздела.ИмяСписка].Обновить();
	
КонецПроцедуры // УстановитьОтборПоКлассификаторам()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСписковПоНастройкам(Форма)
	
	КонецПериода  = КонецДня(ТекущаяДата());
	НачалоПериода = CRM_КлассификаторыКлиентСервер.РассчитатьНачалоПериода(КонецПериода, Форма.Настройки.ИнтервалПродаж, Форма.Настройки.ПериодичностьПродаж);
	
	Для каждого КлючЗначение Из Форма.ДанныеРазделов Цикл
		СтруктураРаздела = КлючЗначение.Значение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма[СтруктураРаздела.ИмяСписка], "НачалоПериода", НачалоПериода);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма[СтруктураРаздела.ИмяСписка], "КонецПериода" , КонецПериода);	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма[СтруктураРаздела.ИмяСписка], "Классификатор", Форма.Классификатор);
		
		// ++ VOG Солодов В.В. 07.04.2020 CRM-547
		ИмяПоля = "";
		
		Если СтруктураРаздела.ИмяСписка = "СписокПартнеры" Тогда
			ИмяПоля = "Ссылка.вогРозничный";
		ИначеЕсли СтруктураРаздела.ИмяСписка = "СписокТорговыеТочки"
			Или СтруктураРаздела.ИмяСписка = "СписокЮридическиеЛица" Тогда
			ИмяПоля = "Ссылка.Розничный";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма[СтруктураРаздела.ИмяСписка],
			ИмяПоля,
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		// -- VOG Солодов В.В. 07.04.2020
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьПараметрыСписковПоНастройкам()

&НаСервере
Процедура ОбновитьОтображениеУстановленныхОтборов(ИмяСписка)
	
	МассивЭлементовОтбора = Новый Массив;
	Для каждого ЭлементОтбора Из Элементы["ГруппаУстановленныеОтборы" + ИмяСписка].ПодчиненныеЭлементы Цикл
		МассивЭлементовОтбора.Добавить(ЭлементОтбора);
		
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из МассивЭлементовОтбора Цикл
		Элементы.Удалить(ЭлементОтбора);	
		
	КонецЦикла;
	
	Для каждого ЭлементСписка Из ОтборСписокЗначенийКлассификаторов Цикл
		Значение = ЭлементСписка.Значение;
		ИмяОписания = "Значение__" + ИдентификаторЭлемента(Значение);	
		
		Представление = Строка(Значение);
		Если СтрДлина(Представление) > 15 Тогда
			Представление = Лев(Представление, 15) + "...";
			Ширина	 	  = 15 - 1;
			
		Иначе
			Ширина = СтрДлина(Представление) + 1;
			
		КонецЕсли;
		
		Компоненты = Новый Массив;
		Компоненты.Добавить(Новый ФорматированнаяСтрока(Представление + " "));
		Компоненты.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, ИмяОписания));
		
		Элемент = Элементы.Найти(ИмяОписания);
		Если Элемент = Неопределено Тогда
			Элемент = Элементы.Добавить(
				ИмяОписания, Тип("ДекорацияФормы"), Элементы["ГруппаУстановленныеОтборы" + ИмяСписка]);
							
		КонецЕсли;

		Элемент.Вид						= ВидДекорацииФормы.Надпись;
		Элемент.Заголовок 				= Новый ФорматированнаяСтрока(Компоненты);
		Элемент.ЦветФона  			    = ЦветаСтиля.ЦветФонаФормы;
		Элемент.Рамка     			    = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.Ширина				    = Ширина;
		
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ЗначениеОтбора_ОбработкаСсылки");
		
	КонецЦикла;
	
	
	ЭлементДекорацияЛогическоеВыражение = Элементы["ДекорацияЛогическоеВыражениеОтбораКлассификаторов" + ИмяСписка];
	ЛогическоеВыражениеОтбораКлассификаторов = ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + ИмяСписка];
	
	ДекорацияЛогическоеВыражениеВидимость = ОтборСписокЗначенийКлассификаторов.Количество() > 0;
	Если ДекорацияЛогическоеВыражениеВидимость Тогда
		ЭлементДекорацияЛогическоеВыражение.Заголовок = ?(ЛогическоеВыражениеОтбораКлассификаторов = "ИЛИ", НСтр("ru = 'Один из: '"), НСтр("ru = 'Все: '"));
	КонецЕсли;
	ЭлементДекорацияЛогическоеВыражение.Видимость = ДекорацияЛогическоеВыражениеВидимость;
	
КонецПроцедуры // ОбновитьОтображениеУстановленныхОтборов()

&НаСервереБезКонтекста
Функция ИдентификаторЭлемента(Ссылка)

	Возврат СтрЗаменить(Ссылка.УникальныйИдентификатор(), "-", "_");	
	
КонецФункции // ИдентификаторЭлемента()

&НаСервереБезКонтекста
Функция СсылкаЭлемента(ИмяЭлемента)
	
	МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлемента, "__");	

	Возврат Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(
		Новый УникальныйИдентификатор(СтрЗаменить(МассивИмени[1], "_", "-"))
	);
	
КонецФункции // СсылкаЭлемента()

&НаСервере
Процедура СохранитьНастройки(СохраняемыеНастройки)
	
	Настройки = СохраняемыеНастройки;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "Настройки", СохраняемыеНастройки);	
	
КонецПроцедуры // СохранитьНастройки()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиПоУмолчанию()

	Настройки = Новый Структура;
	Настройки.Вставить("ИнтервалПродаж"		, 1);
	Настройки.Вставить("ПериодичностьПродаж", ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	
	Возврат Настройки;

КонецФункции // ПолучитьНастройкиПоУмолчанию()

&НаКлиенте
Процедура УстановитьБыстрыеОтборы()
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	СписокРаспределительныеЦентры = ЭтотОбъект[СтруктураРаздела.ИмяСписка];
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспределительныеЦентры, 
		"БизнесРегион", ОтборБизнесРегион,,, ЗначениеЗаполнено(ОтборБизнесРегион)
	);
	
	Если СтруктураРаздела.ИмяСписка = "СписокПартнеры" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспределительныеЦентры, 
			"Ссылка.вогТипыОтношений.ТипОтношений", ОтборТипОтношений,,, ЗначениеЗаполнено(ОтборТипОтношений)
		);
	Иначе
		// { VOG RMV 2019-01-18 изменение №2552
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспределительныеЦентры, 
		//	"Вид", ОтборВидТорговойТочки,,, ЗначениеЗаполнено(ОтборВидТорговойТочки)
		//);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспределительныеЦентры, 
			"Вид", ОтборВидТорговойТочки, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборВидТорговойТочки)
		);
		// } VOG RMV 2019-01-18 изменение №2552
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспределительныеЦентры, 
		"ПродажиСумма", ОтборПродажиСумма, ВидСравненияКомпоновкиДанных[ОтборПродажиСуммаВидСравнения],, ЗначениеЗаполнено(ОтборПродажиСумма)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспределительныеЦентры, 
		"ДатаВключения", ОтборДатаВключенияКлассификатора, ВидСравненияКомпоновкиДанных[ОтборДатаВключенияКлассификатораВидСравнения],, ЗначениеЗаполнено(ОтборДатаВключенияКлассификатора)
	);
		
	УстановитьРежимПросмотраСписка(Элементы[СтруктураРаздела.ИмяСписка]);
	
	// { VOG RMV 2019-01-18 изменение №2552
	УстановитьБыстрыйОтборПоМенеджеруИПодразделению(СтруктураРаздела.ИмяСписка);
	// } VOG RMV 2019-01-18 изменение №2552
	
КонецПроцедуры // УстановитьБыстрыеОтборы()

&НаКлиенте
Процедура УстановитьРежимПросмотраСписка(ЭлементСписок)
	
	Если ОтборСписокЗначенийКлассификаторов.Количество() > 0
	  ИЛИ ЗначениеЗаполнено(ОтборБизнесРегион)
	  ИЛИ ЗначениеЗаполнено(ОтборПродажиСумма)
	  ИЛИ ЗначениеЗаполнено(ОтборДатаВключенияКлассификатора) Тогда
	  
		ЭлементСписок.Отображение = ОтображениеТаблицы.Список;
		
	Иначе	
		ЭлементСписок.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		
	КонецЕсли;

КонецПроцедуры // УстановитьРежимПросмотраСписка()

// ++ Тищенко В.В.
&НаСервере
Процедура ЗаполнитьПанельИнформации(ТекущийОбъект)
	
	Если ТекущийОбъект = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.Партнеры") Тогда
				
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(
												ТекущийОбъект,Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		
		Если Содержание <> ПолеОтображениеСодержанияПартнеры Тогда
			ПолеОтображениеСодержанияПартнеры = Содержание;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(
												ТекущийОбъект, Новый ОписаниеТипов("СправочникСсылка.вогТорговыеТочки"));
		
		Если Содержание <> ПолеОтображениеСодержанияТорговыеТочки Тогда
			ПолеОтображениеСодержанияТорговыеТочки = Содержание;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(
												ТекущийОбъект, Новый ОписаниеТипов("СправочникСсылка.вогЮридическиеЛица"));
		
		//Если Содержание <> ПолеОтображениеСодержанияРаспределительныеЦентры Тогда
			ПолеОтображениеСодержанияЮридическиеЛица = Содержание;
		//КонецЕсли;
		
	Иначе
		//Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
		//Если Содержание <> ПолеОтображениеСодержанияПартнеры Тогда
		//	ПолеОтображениеСодержанияПартнеры = Содержание;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // -- Тищенко В.В.

// ++ Тищенко В.В.
&НаКлиенте
Процедура УстановитьВидСписка(Расширенный = Ложь,ТекущаяСтраница = "")
	
	ИмяСтраницы = ?(ТекущаяСтраница = "",Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя,ТекущаяСтраница);
	ИмяЭлемента = "";
	
	Если ИмяСтраницы 		= "СтраницаРазделПартнеры" Тогда
		ИмяЭлемента 		= "ПолеОтображениеСодержанияПартнеры";
	ИначеЕсли ИмяСтраницы 	= "СтраницаРазделТорговыеТочки" Тогда	
		ИмяЭлемента 		= "ПолеОтображениеСодержанияТорговыеТочки";
	ИначеЕсли ИмяСтраницы 	= "СтраницаРазделЮридическиеЛица" Тогда
		ИмяЭлемента 		= "ПолеОтображениеСодержанияЮридическиеЛица";
	ИначеЕсли ИмяСтраницы 	= "СтраницаРазделРаспределительныеЦентры" Тогда
		ИмяЭлемента 		= "ПолеОтображениеСодержанияРаспределительныеЦентры";
	ИначеЕсли ИмяСтраницы 	= "СтраницаРазделКонтактныеЛицаПартнеров" Тогда
		ИмяЭлемента 		= "ПолеОтображениеСодержанияКонтактныеЛицаПартнеров";
	КонецЕсли;
	
	Если Расширенный Тогда
		ИмяСписка 	= СтрЗаменить(Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя, "СтраницаРаздел", "Список");
		ЗаполнитьПанельИнформации(Элементы[ИмяСписка].ТекущаяСтрока);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,ИмяЭлемента,"Видимость",Расширенный);
	
КонецПроцедуры // Тищенко В.В.

#Область ВариантыСписка

&НаСервере
Процедура ВариантСпискаПриИзменении(ИмяКоманды)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);	
	CRM_КлассификаторыВызовСервера.ИницализироватьНаборДанныхСписка(ЭтотОбъект, ИмяКоманды, ПолучитьПараметрыСписка(СтруктураРаздела.ИмяСписка,Истина));
	
КонецПроцедуры // ВариантСпискаПриИзменении()

&НаСервере
Процедура ИнициализироватьВариантыСписка(ИмяСписка, ВариантСписка)

	ПараметрыСписка = ПолучитьПараметрыСписка(ИмяСписка);
	ПараметрыСписка.Вставить("ТекущийВариантСписка", ВариантСписка);
	CRM_КлассификаторыВызовСервера.ИнициализироватьВариантыСписка(ЭтотОбъект, ПараметрыСписка);
	
КонецПроцедуры // ИнициализироватьВариантыСписка()

// ++ Тищенко В.В. 12.01.2019
// Добавил параметр не добавлять характеристики
&НаСервере
Функция ПолучитьПараметрыСписка(ИмяСписка,НедобовлятьХарактеристики = Неопределено)

	ПараметрыСписка = Новый Структура;
	ПараметрыСписка.Вставить("ИмяСписка"      	 , ИмяСписка);
	Если ИмяСписка = "СписокЮридическиеЛица" Тогда
		ПараметрыСписка.Вставить("ОсновнаяТаблица"	 ,"Справочник.вогЮридическиеЛица");
	ИначеЕсли ИмяСписка = "СписокКонтактныеЛицаПартнеров" Тогда
		ПараметрыСписка.Вставить("ОсновнаяТаблица"	 ,"Справочник.КонтактныеЛицаПартнеров");
	ИначеЕсли ИмяСписка = "СписокБрендЗоны" Тогда
		ПараметрыСписка.Вставить("ОсновнаяТаблица"	 ,"Справочник.БрендЗона");
	Иначе
		ПараметрыСписка.Вставить("ОсновнаяТаблица"	 , ?(ИмяСписка = "СписокПартнеры", "Справочник.Партнеры", "Справочник.вогТорговыеТочки"));
	КонецЕсли;
	ПараметрыСписка.Вставить("ЭлементСписка"  	 , Элементы[ИмяСписка]);
	ПараметрыСписка.Вставить("ОбластьВарианты"   , Элементы["СписокГруппаВариантыСписка" + ИмяСписка]);
	ПараметрыСписка.Вставить("ОбластьДобавления" , Элементы["ПоляСписка" + ИмяСписка]);
	
	// ++ Тищенко В.В. 12.01.2019 
	Если НедобовлятьХарактеристики <> Неопределено Тогда
		ПараметрыСписка.Вставить("НеДобовлятьХарактеристики",Истина);
	КонецЕсли;
	// -- Тищенко В.В.
	
	Возврат ПараметрыСписка;
	
КонецФункции // ПолучитьПараметрыСписка()

// ++ Солодов В.В.
&НаСервере
Функция ПолучитьВариантСпискаСервер()
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	Возврат CRM_КлассификаторыВызовСервера.ПолучитьВариантСпискаДляИзменения(ЭтотОбъект, СтруктураРаздела.ИмяСписка);
	
КонецФункции // -- Солодов В.В.

#КонецОбласти

#Область Корзина

&НаСервере
Процедура ДобавитьВКорзинуСервер(МассивСтрок, СтруктураРаздела)

	Для каждого Строка Из МассивСтрок Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Ссылка"   , Строка);
		СтруктураПоиска.Вставить("ИмяСписка", СтруктураРаздела.ИмяСписка);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		
		НайденныеСтроки = Объект.Корзина.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда			
			ЗаполнитьЗначенияСвойств(Объект.Корзина.Добавить(), СтруктураПоиска);
			
		КонецЕсли;
		
	КонецЦикла;		
	
	СформироватьПредставлениеКорзины(ЭтотОбъект);
	
КонецПроцедуры // ДобавитьВКорзинуСервер()

&НаКлиенте
Процедура ПослеРедактированияКорзины(Корзина, СтруктураРаздела) Экспорт
	
	Если Корзина = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	//Текущие строки корзины списка
	НайденныеСтроки = ТекущиеСтрокиКорзины(ЭтотОбъект);
	Для каждого Строка Из НайденныеСтроки Цикл
		Объект.Корзина.Удалить(Строка);	
	КонецЦикла;
	
	//Добавление строк
	Для каждого СтрокаКорзины Из Корзина Цикл
		ЗаполнитьЗначенияСвойств(Объект.Корзина.Добавить(), СтрокаКорзины);
		
	КонецЦикла;
	
	СформироватьПредставлениеКорзины(ЭтотОбъект, СтруктураРаздела);
	
КонецПроцедуры // ПослеРедактированияКорзины()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеКорзины(Форма, СтруктураРаздела = Неопределено)

	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(Форма);	
	КонецЕсли;
	
	ЭлементовКорзины = ТекущиеСтрокиКорзины(Форма, СтруктураРаздела).Количество();
	Если ЭлементовКорзины = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'не выбрано'");		
	Иначе
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'выбрано (%1)'"), Формат(ЭлементовКорзины, "ЧГ="));	
	КонецЕсли;
	
	Форма.Элементы.ОткрытьКорзину.Заголовок = ТекстЗаголовка;		
	
КонецПроцедуры // СформироватьПредставлениеКорзины()

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеСтрокиКорзины(Форма, СтруктураРаздела = Неопределено)
	
	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(Форма);
	
	КонецЕсли;
	
	Возврат Форма.Объект.Корзина.НайтиСтроки(Новый Структура("ИмяСписка", СтруктураРаздела.ИмяСписка));
	
КонецФункции // ТекущиеСтрокиКорзины()

&НаКлиенте
Функция ТекущиеОбъектыКорзины(СтруктураРаздела = Неопределено)

	МассивОбъектов = Новый Массив;
	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
		
	КонецЕсли;
	
	СтрокиКорзины = ТекущиеСтрокиКорзины(ЭтотОбъект, СтруктураРаздела);
	Если СтрокиКорзины.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Корзина пуста. '"), 15);
		Возврат МассивОбъектов;
	КонецЕсли;
	
	Для каждого СтрокаКорзины Из СтрокиКорзины Цикл
		МассивОбъектов.Добавить(СтрокаКорзины.Ссылка);	
		
	КонецЦикла;

	Возврат МассивОбъектов;
	
КонецФункции // ТекущиеОбъектыКорзины()

#КонецОбласти

#Область Настройки

&НаКлиенте
Процедура ИнициализироватьФормуПоНастройкеКлиент(СтруктураРаздела = Неопределено)

	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
		
	КонецЕсли;
	
	Настройка = ПолучитьНастройкиПоСсылке(ТекущаяНастройка[СтруктураРаздела.ИмяСписка]);
	Если Настройка <> Неопределено Тогда
		ИнициализироватьНастройки(СтруктураРаздела, Настройка);	
	КонецЕсли;
	
	СформироватьЗаголовокПоНастройке(ЭтотОбъект, СтруктураРаздела);
	
КонецПроцедуры // ИнициализироватьФормуПоНастройкеКлиент()

&НаКлиенте
Процедура ИнициализироватьНастройки(СтруктураРаздела, Настройка)

	ИмяСписка = СтруктураРаздела.ИмяСписка;
	
	//Вариант списка
	ТекущийВариантСписка[ИмяСписка] = Настройка.ВариантСписка;
	ВариантСпискаПриИзменении(?(ЗначениеЗаполнено(Настройка.ВариантСписка), Настройка.ВариантСписка, "ОсновнойВариант" + ИмяСписка));
	
	//Классификатор
	Классификатор = Настройка.Классификатор;
	ИницализироватьСтруктуруКлассификатора();	
	
	//Отбор по классификатору
	ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + ИмяСписка] = Настройка.ЛогическоеВыражениеОтбораКлассификаторов;
	
	ОтборСписокЗначенийКлассификаторов.Очистить();
	Для каждого ЭлементОтбора Из Настройка.ОтборСписокЗначенийКлассификаторов Цикл
		ОтборСписокЗначенийКлассификаторов.Добавить(ЭлементОтбора.Значение, ЭлементОтбора.Представление);	
	КонецЦикла;
	
	УстановитьОтборПоКлассификаторам();
	
	//Быстрые отборы
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройка.БыстрыеОтборы);
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры // ИнициализироватьНастройки()

&НаСервереБезКонтекста
Функция ПолучитьНастройкиПоСсылке(НастрокаСсылка)
	Возврат Справочники.вогНастройкиУправленияКлассификацией.ПолучитьНастройки(НастрокаСсылка);	
КонецФункции // ПолучитьНастройкиПоСсылке()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокПоНастройке(Форма, СтруктураРаздела = Неопределено)

	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(Форма);
	КонецЕсли;
	
	Настройка = Форма.ТекущаяНастройка[СтруктураРаздела.ИмяСписка];
	Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Клиентская база (%1)'"), 
		?(ЗначениеЗаполнено(Настройка), Настройка, НСтр("ru = 'по умолчанию'"))); 
	//{[+](фрагмент добавлен), Виноградов Дмитрий 17.05.2018 17:20:19 ID
	Форма.ОтображатьЗаголовок = Ложь;
	//}Администратор 17.05.2018 17:20:19
КонецПроцедуры // СформироватьЗаголовокПоНастройке()

#КонецОбласти

&НаКлиенте
Функция РасшифровкаКонтактнаяИнформация(СсылкаДокумента,ТекстДокумента,ТекущаяСсылка)
	
	Результат = Неопределено;
	
	Если СтрНайти(СсылкаДокумента,"КонтактнаяИнформация",НаправлениеПоиска.СНачала) <> 0 Тогда
		ВходящиеДанные = ОпределитьТипКонтактнойИнформации(ТекущаяСсылка,СокрЛП(ТекстДокумента));
		Если ВходящиеДанные <> Неопределено Тогда
			Результат = ВходящиеДанные;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьТипКонтактнойИнформации(Ссылка,Представление)

	РезультатЗапроса 	= Неопределено;
	ТекущаяТаблица 		= ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	"+(ТекущаяТаблица)+".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.Представление = &Представление");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Представление",Представление);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ИсходящаяСтруктура 				= Новый Структура("Тип,Вид,Представление");
		ВыборкаИзРезультатаЗапроса 		= РезультатЗапроса.Выбрать();
		Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ИсходящаяСтруктура,ВыборкаИзРезультатаЗапроса);
			РезультатЗапроса = ИсходящаяСтруктура;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатРасшифровки(ТекущаяСсылка,Результат) Экспорт

	Если Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		сфпСофтФонПроКлиент.сфпПозвонить(Результат.Представление, ТекущаяСсылка);
	ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		//УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Результат.Представление, "Яндекс.Карты");
		СтруктураАдреса 	= Новый Структура; 
		СтруктураАдреса.Вставить("Представление", Результат.Представление);
		СписокКарт 			= Новый СписокЗначений;
		СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
		ОписаниеОповещения 	= Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
	ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("", Результат.Представление, Результат.Тип);
	ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", Результат.Представление, Результат.Тип);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

// { VOG RMV 2019-01-18 изменение №2552
&НаСервере
Процедура УстановитьБыстрыйОтборПоМенеджеруИПодразделению(ИмяСписка)
	
	Запрос			= Новый Запрос;
	// { VOG RMV 2019-03-20 task 253
	//Использование	= Ложь;
	Использование	= ЗначениеЗаполнено(ОтборПодразделение) ИЛИ ЗначениеЗаполнено(ОтборМенеджер)
		ИЛИ ЗначениеЗаполнено(ОтборНаправление); //+ VOG Иванов С.А. 21.11.2019 ID заявки: 000000912 
	// } VOG RMV 2019-03-20 task 253
	
	Если ИмяСписка = "СписокПартнеры" Тогда
		//*** Описание
		//*** 24 апреля 2019 г.
		//*** Блашин Евгений Игоревич VOG Начало
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогТорговыеТочки.Партнер КАК Партнер
		|ПОМЕСТИТЬ вт_МенеджерыОбъектов
		|ИЗ
		|	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК вогТорговыеТочки
		|		ПО вогМенеджерыОбъектов.Владелец = вогТорговыеТочки.Ссылка
		|ГДЕ
		|	вогМенеджерыОбъектов.Менеджер = &Менеджер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогЮридическиеЛица.Партнер
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		|		ПО вогЮридическиеЛица.Ссылка = вогМенеджерыОбъектов.Владелец
		|ГДЕ
		|	вогМенеджерыОбъектов.Менеджер = &Менеджер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вт_МенеджерыОбъектов.Партнер КАК Ссылка
		|ИЗ
		|	вт_МенеджерыОбъектов КАК вт_МенеджерыОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.вогПодразделения КАК тчПодразделения
		|		ПО вт_МенеджерыОбъектов.Партнер = тчПодразделения.Ссылка
		|ГДЕ
		|	тчПодразделения.Подразделение = &Подразделение";
		
		//*** Блашин Евгений Игоревич VOG Окончание
		
		//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	ТаблицаСправочника.Ссылка КАК Ссылка
		//|ИЗ
		//|	Справочник.Партнеры КАК ТаблицаСправочника
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		//|		ПО ТаблицаСправочника.Ссылка = вогМенеджерыОбъектов.Владелец
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.вогПодразделения КАК тчПодразделения
		//|		ПО ТаблицаСправочника.Ссылка = тчПодразделения.Ссылка
		//|ГДЕ
		//|	ИСТИНА
		//|	И вогМенеджерыОбъектов.Менеджер = &Менеджер
		//|	И тчПодразделения.Подразделение = &Подразделение";
		
		// { VOG RMV 2019-03-20 task 253
		//Использование = ЗначениеЗаполнено(ОтборПодразделение) ИЛИ ЗначениеЗаполнено(ОтборМенеджер);
		// } VOG RMV 2019-03-20 task 253
	ИначеЕсли ИмяСписка = "СписокТорговыеТочки" Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаСправочника.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогТорговыеТочки КАК ТаблицаСправочника
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		|		ПО ТаблицаСправочника.Ссылка = вогМенеджерыОбъектов.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.Подразделения КАК тчПодразделения
		|		ПО ТаблицаСправочника.Ссылка = тчПодразделения.Ссылка
		//++ VOG Иванов С.А. 21.11.2019 ID заявки: 000000912 
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.Направления КАК тчНаправления
		|		ПО ТаблицаСправочника.Ссылка = тчНаправления.Ссылка
		//-- VOG Иванов С.А. 21.11.2019 ID заявки: 000000912
		|ГДЕ
		|	ИСТИНА
		|	И вогМенеджерыОбъектов.Менеджер = &Менеджер
		|	И тчПодразделения.Подразделение = &Подразделение
		|	И тчНаправления.Направление = &Направление"; //+ VOG Иванов С.А. 21.11.2019 ID заявки: 000000912
		
		// { VOG RMV 2019-03-20 task 253
		//Использование = ЗначениеЗаполнено(ОтборПодразделение) ИЛИ ЗначениеЗаполнено(ОтборМенеджер);
		// } VOG RMV 2019-03-20 task 253
	ИначеЕсли ИмяСписка = "СписокЮридическиеЛица" Тогда	
		// { VOG RMV 2019-03-20 task 253
		//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	тчПодразделения.Ссылка КАК Ссылка
		//|ИЗ
		//|	Справочник.вогЮридическиеЛица.Подразделения КАК тчПодразделения
		//|ГДЕ
		//|	тчПодразделения.Подразделение = &Подразделение";
		//
		//Использование = ЗначениеЗаполнено(ОтборПодразделение);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаСправочника.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК ТаблицаСправочника
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		|		ПО ТаблицаСправочника.Ссылка = вогМенеджерыОбъектов.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица.Подразделения КАК тчПодразделения
		|		ПО ТаблицаСправочника.Ссылка = тчПодразделения.Ссылка
		|ГДЕ
		|	ИСТИНА
		|	И вогМенеджерыОбъектов.Менеджер = &Менеджер
		|	И тчПодразделения.Подразделение = &Подразделение";
		// } VOG RMV 2019-03-20 task 253
	Иначе 
		Возврат
	КонецЕсли;
			
	Если Использование = Ложь Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма[ИмяСписка], "Ссылка",,,, Ложь);
	Иначе
		Если ЗначениеЗаполнено(ОтборМенеджер) Тогда
			Запрос.УстановитьПараметр("Менеджер", ОтборМенеджер);
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "вогМенеджерыОбъектов.Менеджер = &Менеджер", "ИСТИНА");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
			Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "тчПодразделения.Подразделение = &Подразделение", "ИСТИНА");
		КонецЕсли;
		
		//++ VOG Иванов С.А. 21.11.2019 ID заявки: 000000912
		Если ЗначениеЗаполнено(ОтборНаправление) Тогда
			Запрос.УстановитьПараметр("Направление", ОтборНаправление);
		Иначе 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "тчНаправления.Направление = &Направление", "ИСТИНА");
		КонецЕсли;
		//-- VOG Иванов С.А. 21.11.2019 ID заявки: 000000912
		
		СписокЗначений	= Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма[ИмяСписка], "Ссылка", СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	КонецЕсли;
	
КонецПроцедуры
// } VOG RMV 2019-01-18 изменение №2552

#Область Подключаемый_РабочийСтол
	
&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

//++ ВОГ Иванов С.А. 02.12.2019 ID заявки: 000000958 
&НаКлиенте
Процедура ОтборНаправлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Предопределенный", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.НаправленияДеятельности.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаправлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
        СтандартнаяОбработка = Ложь;

        ДанныеВыбора = ПолучитьДанныеВыбораНаправление(Текст);

	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораНаправление(Текст)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаправленияДеятельности.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	               |ГДЕ
	               |	НаправленияДеятельности.Предопределенный
	               |	И НаправленияДеятельности.Наименование ПОДОБНО &Наименование + ""%""";
				   
				   
	Запрос.УстановитьПараметр("Наименование", Текст);
	СписокНаправлений = Новый СписокЗначений;
	СписокНаправлений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	возврат СписокНаправлений;
КонецФункции
//-- VOG Иванов С.А. 02.12.2019 ID заявки: 000000958 


#КонецОбласти
//-Рабочий стол