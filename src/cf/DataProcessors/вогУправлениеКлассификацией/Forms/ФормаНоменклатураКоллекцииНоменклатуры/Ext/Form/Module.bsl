
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	времНастройки = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "Настройки");
	Настройки = ?(времНастройки = Неопределено, ПолучитьНастройкиПоУмолчанию(), времНастройки);
	
	Элементы.ГруппаСтраницыРазделов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	СформироватьСтруктуруРазделов();
			
	Если Параметры.Свойство("Классификатор") Тогда
		Классификатор = Параметры.Классификатор;
		ИницализироватьСтруктуруКлассификатора();
		
	КонецЕсли;
		
	УстановитьПараметрыСписковПоНастройкам(ЭтаФорма);
	
	//Настройки
	СформироватьЗаголовокПоНастройке(ЭтотОбъект);
	
	//+Рабочий стол
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	//-Рабочий стол
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ++ Тищенко В.В. 12.01.2019
	//	Инициализируется два списка
	//	Если ИмяСобытия = "ЗаписьВариантаСпискаКлассификации" Тогда
	//	ИнициализироватьВариантыСписка(Источник, Параметр)
	//КонецЕсли;
	//
	//Если ИмяСобытия = "ЗаписьНастройкиКлассификации" Тогда
	//	Если ТекущаяНастройка.Свойство(Источник) Тогда
	//		ТекущаяНастройка[Источник] = Параметр;
	//		СформироватьЗаголовокПоНастройке(ЭтотОбъект);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;

	
	// -- Тищенко В.В. 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//Настройки
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.вогНастройкиУправленияКлассификацией") Тогда
		
		СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
		ТекущаяНастройка[СтруктураРаздела.ИмяСписка] = ВыбранноеЗначение;	
	
		ИнициализироватьФормуПоНастройкеКлиент(СтруктураРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторам(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Принадлежность"	 	  , СтруктураРаздела.КлассификаторПринадлежность);
	ПараметрыФормы.Вставить("МассивЗначений"	 	  , ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("МассивЗначенийРеквизитов", ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("ЛогическоеВыражение"	  , ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + СтруктураРаздела.ИмяСписка]);
	
	Оповещение = Новый ОписаниеОповещения("НастроитьОтборПоКлассификаторамЗавершение", ЭтотОбъект, СтруктураРаздела);
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаПодбораЗначенийКлассификаторов", 
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторамЗавершение(СтруктураЗначенийКлассификаторов, ДополнительныеПараметры) Экспорт

	Если СтруктураЗначенийКлассификаторов = Неопределено Тогда
		Возврат;
	
	КонецЕсли;	
	
	ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + ДополнительныеПараметры.ИмяСписка] = СтруктураЗначенийКлассификаторов.ЛогическоеВыражение;
	УстановитьОтборПоКлассификаторам(СтруктураЗначенийКлассификаторов.ЗначенияКлассификаторов, СтруктураЗначенийКлассификаторов.ЗначенияРеквизитов);
		
КонецПроцедуры // НастроитьОтборПоКлассификаторамЗавершение()

&НаКлиенте
Процедура НазначитьВыделенным(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	ЭлементСписок = Элементы[СтруктураРаздела.ИмяСписка];
	
	ВыделенныеСтроки = ЭлементСписок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	
	КонецЕсли;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ЭлементСписок.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда                      
			Продолжить;
		КонецЕсли;
		
		Если СтруктураРаздела.ИерархияГруппИЭлементов
		  И ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если ЭлементСписок.ТекущийЭлемент.Родитель = Элементы["ПоляЗначенийКлассифкатора" + СтруктураРаздела.ИмяСписка] Тогда
			ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, СтруктураРаздела.ИмяСписка, ЭлементСписок.ТекущийЭлемент.Имя, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ЭлементСписок.Обновить();
	
КонецПроцедуры

#Область Настройки

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Настройки", Настройки);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.вогУправлениеКлассификацией.Форма.ФормаНастроек",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(ПолученныеНастройки, Контекст) Экспорт

	Если ПолученныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки(ПолученныеНастройки);	
	УстановитьПараметрыСписковПоНастройкам(ЭтаФорма);

КонецПроцедуры // НастройкиЗавершение()

&НаКлиенте
Процедура ВыбратьНастройку(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяСписка", СтруктураРаздела.ИмяСписка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"		 , Отбор);
	ПараметрыФормы.Вставить("Пользватель", ПользователиКлиентСервер.ТекущийПользователь());
	
	ОткрытьФорму("Справочник.вогНастройкиУправленияКлассификацией.ФормаВыбора",
		ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	
	ПараметрыНастройки = Новый Структура;
	
	//Основные настройки
	ПараметрыНастройки.Вставить("ВариантСписка", ТекущийВариантСписка[СтруктураРаздела.ИмяСписка]);
	ПараметрыНастройки.Вставить("Классификатор", Классификатор);
	
	ПараметрыНастройки.Вставить("ОтборСписокЗначенийКлассификаторов"	  , ОтборСписокЗначенийКлассификаторов);
	ПараметрыНастройки.Вставить("ЛогическоеВыражениеОтбораКлассификаторов", ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + СтруктураРаздела.ИмяСписка]);
	
	//Быстрые отборы
	СтруктураБыстрыхОтборов = Новый Структура;
	
	СтруктураБыстрыхОтборов.Вставить("ОтборДатаВключенияКлассификатора"			   , ОтборДатаВключенияКлассификатора);
	СтруктураБыстрыхОтборов.Вставить("ОтборДатаВключенияКлассификатораВидСравнения", ОтборДатаВключенияКлассификатораВидСравнения);
	СтруктураБыстрыхОтборов.Вставить("ОтборНоменклатурнаяГруппа"				   , ОтборНоменклатурнаяГруппа);
	СтруктураБыстрыхОтборов.Вставить("ОтборПродажиСумма"						   , ОтборПродажиСумма);
	СтруктураБыстрыхОтборов.Вставить("ОтборПродажиСуммаВидСравнения"			   , ОтборПродажиСуммаВидСравнения);
	СтруктураБыстрыхОтборов.Вставить("ОтборСписокЗначенийКлассификаторов"		   , ОтборСписокЗначенийКлассификаторов);
	СтруктураБыстрыхОтборов.Вставить("ОтборНаправлениеДеятельности"				   , ОтборНаправлениеДеятельности);	
	
	ПараметрыНастройки.Вставить("БыстрыеОтборы", СтруктураБыстрыхОтборов);
	
	//Сохранение настройки
	ОткрытьФорму("Справочник.вогНастройкиУправленияКлассификацией.Форма.СохранениеНастройки",
		Новый Структура("ИмяСписка, Настройки", СтруктураРаздела.ИмяСписка, ПараметрыНастройки), ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КлассификаторПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьСтруктуруКлассификатора", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда                      
		Возврат;
	КонецЕсли;
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	Если СтруктураРаздела.ИерархияГруппИЭлементов
	  И ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;	
	КонецЕсли;
	
	Если Поле.Родитель = Элементы["ПоляЗначенийКлассифкатора" + СтруктураРаздела.ИмяСписка] Тогда
		ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, СтруктураРаздела.ИмяСписка, Поле.Имя, СтандартнаяОбработка);
		Элемент.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#Область СтруктураРазделов

&НаКлиенте
Процедура ПереключательРазделовПриИзменении(Элемент)
	
	ЗаполнитьДанныеТекущегоРаздела(ЭтотОбъект, Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница.Имя);
	Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы[ПереключательРазделов];
	ПеренестиДанныеТекущегоРаздела(ЭтотОбъект, ПереключательРазделов);
	
	СформироватьЗаголовокПоНастройке(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область БыстрыеОтборы
	
&НаКлиенте
Процедура ОтборНаправлениеДеятельности(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатурнаяГруппаПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВключенияКлассификатораПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПродажиСуммаПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВключенияКлассификатораВидСравненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[Элемент.Имя]) Тогда
		ЭтаФорма[Элемент.Имя] = "Равно";
	КонецЕсли;
	
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПродажиСуммаВидСравненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[Элемент.Имя]) Тогда
		ЭтаФорма[Элемент.Имя] = "Равно";
	КонецЕсли;
	
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ИницализироватьСтруктуруКлассификатора()

	ИницализироватьСтруктуруКлассификатора();	

КонецПроцедуры // Подключаемый_ИницализироватьСтруктуруКлассификатора()

&НаКлиенте
Процедура Подключаемый_ЗначениеОтбора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ЭлементЗначенияОтбора = ОтборСписокЗначенийКлассификаторов.НайтиПоЗначению(
		СсылкаЭлемента(Элемент.Имя));	
		
	Если ЭлементЗначенияОтбора = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;	
	
	ИндексЭлементЗначенияОтбора = ОтборСписокЗначенийКлассификаторов.Индекс(ЭлементЗначенияОтбора);
	
	ОтборСписокЗначенийКлассификаторов.Удалить(ИндексЭлементЗначенияОтбора);
	ОтборСписокЗначенийРеквизитовКлассификаторов.Удалить(ИндексЭлементЗначенияОтбора);
	
	УстановитьОтборПоКлассификаторам();
	
КонецПроцедуры // Подключаемый_ЗначениеОтбора_ОбработкаСсылки()

#Область ВариантыСписка

&НаКлиенте
Процедура Подключаемый_ВариантСпискаПриИзменении(Команда)
	ВариантСпискаПриИзменении(Команда.Имя);
КонецПроцедуры // Подключаемый_ВариантСпискаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ДобавитьВариантСписка(Команда)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);	
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ИмяСписка", СтруктураРаздела.ИмяСписка);
	
	ОткрытьФорму("Справочник.вогВариантыСписковУправленияКлассификацией.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры // Подключаемый_ДобавитьВариантСписка()
	
#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

#Область СтруктураРазделов

&НаСервере
Процедура СформироватьСтруктуруРазделов()

	ДанныеРазделов 		 = Новый Структура;
	ТекущийВариантСписка = Новый Структура;
	ТекущаяНастройка     = Новый Структура;
	Для каждого Страница Из Элементы.ГруппаСтраницыРазделов.ПодчиненныеЭлементы Цикл
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("ИмяСписка");
		СтруктураРаздела.Вставить("Классификатор");   
		СтруктураРаздела.Вставить("КлассификаторПринадлежность");   
		СтруктураРаздела.Вставить("ИерархияГруппИЭлементов");
		СтруктураРаздела.Вставить("ОтборДатаВключенияКлассификатора");
		СтруктураРаздела.Вставить("ОтборДатаВключенияКлассификатораВидСравнения");
		СтруктураРаздела.Вставить("ОтборНоменклатурнаяГруппа");
		СтруктураРаздела.Вставить("ОтборНаправлениеДеятельности");	
		СтруктураРаздела.Вставить("ОтборПродажиСумма");
		СтруктураРаздела.Вставить("ОтборПродажиСуммаВидСравнения");
		СтруктураРаздела.Вставить("ОтборСписокЗначенийКлассификаторов");
				
		ИмяСписка = СтрЗаменить(Страница.Имя, "СтраницаРаздел", "Список");
		СтруктураРаздела.ИмяСписка 					 = ИмяСписка;
		СтруктураРаздела.КлассификаторПринадлежность = ЭтотОбъект[ИмяСписка].ОсновнаяТаблица;
		
		СтруктураРаздела.ИерархияГруппИЭлементов = 
			ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти("ЭтоГруппа") <> Неопределено;
		
		ДанныеРазделов.Вставить(Страница.Имя, СтруктураРаздела);
		ЗаполнитьДанныеТекущегоРаздела(ЭтотОбъект, Страница.Имя);
		
		СтруктураРаздела.ОтборДатаВключенияКлассификатораВидСравнения = "Равно";
		СтруктураРаздела.ОтборПродажиСуммаВидСравнения 				  = "Равно";
		
		Элементы.ПереключательРазделов.СписокВыбора.Добавить(Страница.Имя, Страница.Заголовок);	
		
		//Настройки                              
		ТекущаяНастройка.Вставить(ИмяСписка);
		
		//Формирование вариантов списка
		ТекущийВариантСписка.Вставить(ИмяСписка);
		CRM_КлассификаторыВызовСервера.ИнициализироватьВариантыСписка(ЭтотОбъект, ПолучитьПараметрыСписка(ИмяСписка));	
		Элементы["СписокГруппаВариантыСписка" + ИмяСписка].Видимость = Ложь;
		
	КонецЦикла;

	Если Элементы.ПереключательРазделов.СписокВыбора.Количество() > 0 Тогда
		ПереключательРазделов = Элементы.ПереключательРазделов.СписокВыбора[0].Значение;
		ПеренестиДанныеТекущегоРаздела(ЭтотОбъект, ПереключательРазделов);
		
		Элементы.ПереключательРазделов.КоличествоКолонок = Элементы.ПереключательРазделов.СписокВыбора.Количество();
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьСтруктуруРазделов()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеТекущегоРаздела(Форма, ТекущийРаздел)

	СтруктураРаздела = Форма.ДанныеРазделов[ТекущийРаздел];
	ЗаполнитьЗначенияСвойств(СтруктураРаздела, Форма,, "ОтборСписокЗначенийКлассификаторов");
	
	Форма.Элементы["СписокГруппаВариантыСписка" + СтруктураРаздела.ИмяСписка].Видимость = Ложь;
		
	СтруктураРаздела.ОтборСписокЗначенийКлассификаторов = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(Форма.ОтборСписокЗначенийКлассификаторов);
		
КонецПроцедуры // ЗаполнитьДанныеТекущегоРаздела()

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиДанныеТекущегоРаздела(Форма, ТекущийРаздел)

	СтруктураРаздела = СтруктураТекущегоРаздела(Форма, ТекущийРаздел);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураРаздела,, "ОтборСписокЗначенийКлассификаторов");

	Форма.ОтборСписокЗначенийКлассификаторов = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(СтруктураРаздела.ОтборСписокЗначенийКлассификаторов);
	
	СписокПринадлежность = Новый СписокЗначений;
	СписокПринадлежность.Добавить(СтруктураРаздела.КлассификаторПринадлежность);
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.СпособФормирования", ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ФормироватьВручную")));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Принадлежность.ИмяТаблиц", СписокПринадлежность));
	
	Форма.Элементы["СписокГруппаВариантыСписка" + СтруктураРаздела.ИмяСписка].Видимость = Истина;
	
	Форма.Элементы.Классификатор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры // ПеренестиДанныеРаздела()

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураТекущегоРаздела(Форма, Знач ТекущийРаздел = Неопределено)
	
	Если ТекущийРаздел = Неопределено Тогда
		ТекущийРаздел = Форма.ПереключательРазделов;
	
	КонецЕсли;
	
	Возврат Форма.ДанныеРазделов[ТекущийРаздел];
	
КонецФункции // СтруктураТекущегоРаздела()

#КонецОбласти

&НаСервере
Процедура ИницализироватьСтруктуруКлассификатора()
	СформироватьВыбранныеПоля();	
КонецПроцедуры // ИницализироватьСтруктуруКлассификатора()

&НаСервере
Процедура СформироватьВыбранныеПоля()
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	Список 			 = ЭтотОбъект[СтруктураРаздела.ИмяСписка];
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Классификатор", Классификатор);
		
	ИмяТаблицы = СтруктураРаздела.ИмяСписка;
	СтрокиСоответстствияПолей = ТаблицаСоответстствияПолей.НайтиСтроки(Новый Структура("ИмяТаблицы", ИмяТаблицы));
	Для каждого СтрокаСоответстствия Из СтрокиСоответстствияПолей Цикл
		Элемент = Элементы.Найти(СтрокаСоответстствия.ИмяПоля);	
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСоответстствияПолей = ТаблицаСоответстствияПолей.НайтиСтроки(Новый Структура("ИмяТаблицы", ИмяТаблицы));
	Для каждого СтрокаСоответстствия Из СтрокиСоответстствияПолей Цикл
		ТаблицаСоответстствияПолей.Удалить(СтрокаСоответстствия);	
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Классификатор) Тогда
		Возврат;	
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ЗначенияКлассификаторов.Ссылка,
		|	CRM_ЗначенияКлассификаторов.Код,
		|	CRM_ЗначенияКлассификаторов.Владелец.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	CRM_ЗначенияКлассификаторов.Владелец.Наименование КАК ВладелецНаименование,
		|	CRM_ЗначенияКлассификаторов.Представление,
		|	CRM_ЗначенияКлассификаторов.Владелец.ВидОтображения КАК ВидОтображения,
		|	CRM_ЗначенияКлассификаторов.Описание,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит.ТипЗначения КАК ТипЗначения,
		|	CRM_ЗначенияКлассификаторов.Владелец.ХранитьИсториюИзменения КАК ХранитьИсториюИзменения
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &Классификатор
		|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ЗначенияКлассификаторов.Владелец.РеквизитДопУпорядочивания,
		|	CRM_ЗначенияКлассификаторов.РеквизитДопУпорядочивания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Сч = 1;
	                                                        		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ШаблонИмени = ПолучитьШаблонИмени(Выборка.Код + "_" + Выборка.ВладелецНаименование);
		
		Элемент = ЭтаФорма.Элементы.Добавить(ИмяТаблицы + "_" + Формат(Сч, "ЧГ="), Тип("ПолеФормы"), Элементы["ПоляЗначенийКлассифкатора" + ИмяТаблицы]);
		Элемент.ПутьКДанным	= ИмяТаблицы + "." + ШаблонИмени;
		
		Если ЗначениеЗаполнено(Выборка.ДополнительныйРеквизит) Тогда
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Выборка.ТипЗначения, Тип("Булево")) Тогда
				Элемент.Вид = ВидПоляФормы.ПолеФлажка;
			Иначе	
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
			
		Иначе			
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
		Элемент.Заголовок   = Выборка.Представление;
		Элемент.Подсказка   = Выборка.Описание;
		
		НоваяСтрока	= ТаблицаСоответстствияПолей.Добавить();
		
		НоваяСтрока.ШаблонИмени	= ШаблонИмени;
		НоваяСтрока.ИмяПоля 	= ИмяТаблицы + "_" + Формат(Сч, "ЧГ=");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ИмяТаблицы = ИмяТаблицы;
		
		НоваяСтрока.Аналитика = CRM_КлассификаторыВызовСервера.ПолучитьЗначениеИспользуемойАналитикиКлассификатора(Классификатор);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	//Видимость	
	ВидОтображения = Классификатор.ВидОтображения;
	
	Элементы.СписокНоменклатураКонтекстноеМенюНазначитьВыделенным.Видимость = 
		(ВидОтображения <> Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит); 
		
	Элементы.СписокКоллекцииНоменклатурыКонтекстноеМенюНазначитьВыделенным.Видимость = 
		(ВидОтображения <> Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит); 
		
КонецПроцедуры // СформироватьВыбранныеПоля()

&НаСервереБезКонтекста
Функция ПолучитьШаблонИмени(ИмяПоля)

	Если Найти(ИмяПоля, " ") Тогда
		Шаблон = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ссылка.[%1]", "_" + ИмяПоля);
	Иначе	
		Шаблон = "Ссылка." + "_" + ИмяПоля;
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции // ПолучитьШаблонИмениПоСсылке()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуСоответствия(Форма, ИмяТаблицы, ИмяПоля)

	Перем СтрокаПоля;
	
	СтрокиПоля = Форма.ТаблицаСоответстствияПолей.НайтиСтроки(Новый Структура("ИмяТаблицы, ИмяПоля", ИмяТаблицы, ИмяПоля));
	Если СтрокиПоля.Количество() > 0 Тогда
		СтрокаПоля = СтрокиПоля[0];	
	КонецЕсли;
	
	Возврат СтрокаПоля;
	
КонецФункции // НайтиСтрокуСоответствия()

&НаКлиентеНаСервереБезКонтекста
Функция СформировтьСтруктуруСтрокиКлассификатора(СтрокаПоля)

	СтрокаКлассификатора = Новый Структура("Ссылка,
											|Представление,
											|ИмяПоля,
											|ШаблонИмени,
											|ВидОтображения,
											|Классификатор,
											|Аналитика,
											|ЗначениеРеквизита,
											|ХранитьИсториюИзменения");	

	ЗаполнитьЗначенияСвойств(СтрокаКлассификатора, СтрокаПоля);
	Возврат СтрокаКлассификатора;
	
КонецФункции // СформировтьСтруктуруСтрокиКлассификатора()

&НаКлиенте
Процедура ОбработатьДанныеСтрокиКлиент(ДанныеСтроки, ИмяСписка, ИмяПоля, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтрокаПоля = НайтиСтрокуСоответствия(ЭтаФорма, ИмяСписка, ИмяПоля);
	Если СтрокаПоля = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	СтрокаКлассификатора = СформировтьСтруктуруСтрокиКлассификатора(СтрокаПоля);
	Если ЗначениеЗаполнено(СтрокаПоля.ДополнительныйРеквизит) Тогда
		СтрокаКлассификатора.ЗначениеРеквизита = ДанныеСтроки[СтрокаПоля.ШаблонИмени];	
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка"		   	   , ДанныеСтроки.Ссылка);
		ПараметрыОповещения.Вставить("ИмяСписка"		   , ИмяСписка);
		ПараметрыОповещения.Вставить("СтрокаКлассификатора", СтрокаКлассификатора);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеСтрокиКлиентЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВводЗначения(Оповещение, СтрокаКлассификатора.ЗначениеРеквизита, Элементы[ИмяПоля].Заголовок, СтрокаПоля.ТипЗначения);  
		
	Иначе	
		ИзменитьКлассификатор(ДанныеСтроки.Ссылка, СтрокаКлассификатора, Не ДанныеСтроки[СтрокаПоля.ШаблонИмени], Истина);		
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДанныеСтроки()

&НаКлиенте
Процедура ОбработатьДанныеСтрокиКлиентЗавершение(ЗначениеРеквизита, Конекст) Экспорт
	
	Если ЗначениеРеквизита = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	СтрокаКлассификатора = Конекст.СтрокаКлассификатора;
	СтрокаКлассификатора.ЗначениеРеквизита = ЗначениеРеквизита;
	
	ИзменитьКлассификатор(Конекст.Ссылка, СтрокаКлассификатора, ЗначениеЗаполнено(ЗначениеРеквизита), Истина);		
	
	Элементы[Конекст.ИмяСписка].Обновить();
	
КонецПроцедуры // ОбработатьДанныеСтрокиКлиентЗавершение()

&НаСервере
Процедура ИзменитьКлассификатор(ОбъектСсылка, СтрокаКлассификатора, Включить, Рекурсивно = Ложь)
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписей.Отбор.Аналитика.Установить(СтрокаКлассификатора.Аналитика);
	НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(СтрокаКлассификатора.Ссылка);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Если Включить Тогда
		Запись = НаборЗаписей.Добавить();
		
		Запись.Объект  				   = ОбъектСсылка;
		Запись.Аналитика			   = СтрокаКлассификатора.Аналитика;		
		Запись.ЗначениеКлассификатора  = СтрокаКлассификатора.Ссылка;
		Запись.ЗначениеРеквизита  	   = СтрокаКлассификатора.ЗначениеРеквизита;
		Запись.ДатаВключения		   = ТекущаяДата();
		Запись.ХранитьИсториюИзменения = СтрокаКлассификатора.ХранитьИсториюИзменения;
		
	КонецЕсли;	
	
	НаборЗаписей.Записать();
	
	Если Рекурсивно И СтрокаКлассификатора.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
		Для каждого СтрокаОписания Из ТаблицаСоответстствияПолей Цикл
			Если СтрокаОписания.Ссылка = СтрокаКлассификатора.Ссылка Тогда
				Продолжить;
			
			КонецЕсли;
			
			ИзменитьКлассификатор(ОбъектСсылка, СтрокаОписания, Ложь);
			
		КонецЦикла;
		
	
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ИзменитьКлассификатор()

&НаКлиенте
Процедура УстановитьОтборПоКлассификаторам(Знач ЗначенияКлассификаторов = Неопределено, Знач ЗначенияРеквизитов = Неопределено)

	//Значения
	Если ЗначенияКлассификаторов = Неопределено Тогда
		ЗначенияКлассификаторов = ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения();
		
	Иначе
		ОтборСписокЗначенийКлассификаторов.ЗагрузитьЗначения(ЗначенияКлассификаторов);
		
	КонецЕсли;
	
	//Реквизиты
	Если ЗначенияРеквизитов = Неопределено Тогда
		ЗначенияРеквизитов = ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения();
		
	Иначе
		ОтборСписокЗначенийРеквизитовКлассификаторов.ЗагрузитьЗначения(ЗначенияРеквизитов);
		
	КонецЕсли;	
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	Список = ЭтотОбъект[СтруктураРаздела.ИмяСписка];
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, "ГруппаИЛИЗначенийИРеквизитовКлассификатора", 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);	
		
	Если ЗначенияКлассификаторов.Количество() > 0 Тогда
		КоличествоЭлементовОтбора = ЗначенияКлассификаторов.Количество();
		Для Сч = 0 По КоличествоЭлементовОтбора - 1 Цикл
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИ.Элементы, "ГруппаИЗначенийИРеквизитовКлассификатора" + Формат(Сч, "ЧГ="), 
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);	
				
			ЭлементЗначенияКлассификаторов 			= ЗначенияКлассификаторов[Сч];	
			ЭлементЗначенияРеквизитаКлассификаторов = ЗначенияРеквизитов[Сч];	
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
				"ЗначениеКлассификатора", ЭлементЗначенияКлассификаторов, ВидСравненияКомпоновкиДанных.Равно);
			
			Если ТипЗнч(ЭлементЗначенияРеквизитаКлассификаторов) = Тип("Число") Тогда
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;	
			Иначе	
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.Равно;	
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
				"ЗначениеРеквизита", ЭлементЗначенияРеквизитаКлассификаторов, ВидСравненияСписка);
		
		КонецЦикла;
				
	КонецЕсли;
	
	ИспользуетсяОтборПоКлассификатору = ЗначенияКлассификаторов.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, 
		"ЛогическоеВыражение", ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + СтруктураРаздела.ИмяСписка], ИспользуетсяОтборПоКлассификатору);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, 
		"КоличествоЗначенийКлассификатора", ЗначенияКлассификаторов.Количество(), ИспользуетсяОтборПоКлассификатору);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, 
		"ИспользуетсяОтборПоКлассификатору", Истина, ИспользуетсяОтборПоКлассификатору);	

	ОбновитьОтображениеУстановленныхОтборов(СтруктураРаздела.ИмяСписка);
	УстановитьРежимПросмотраСписка(Элементы[СтруктураРаздела.ИмяСписка]);
	
	Элементы[СтруктураРаздела.ИмяСписка].Обновить();
	
КонецПроцедуры // УстановитьОтборПоКлассификаторам()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСписковПоНастройкам(Форма)
	
	КонецПериода  = КонецДня(ТекущаяДата());
	НачалоПериода = CRM_КлассификаторыКлиентСервер.РассчитатьНачалоПериода(КонецПериода, Форма.Настройки.ИнтервалПродаж, Форма.Настройки.ПериодичностьПродаж);
	
	Для каждого КлючЗначение Из Форма.ДанныеРазделов Цикл
		СтруктураРаздела = КлючЗначение.Значение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма[СтруктураРаздела.ИмяСписка], "НачалоПериода", НачалоПериода);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма[СтруктураРаздела.ИмяСписка], "КонецПериода" , КонецПериода);	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма[СтруктураРаздела.ИмяСписка], "Классификатор", Форма.Классификатор);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьПараметрыСписковПоНастройкам()

&НаСервере
Процедура ОбновитьОтображениеУстановленныхОтборов(ИмяСписка)
	
	МассивЭлементовОтбора = Новый Массив;
	Для каждого ЭлементОтбора Из Элементы["ГруппаУстановленныеОтборы" + ИмяСписка].ПодчиненныеЭлементы Цикл
		МассивЭлементовОтбора.Добавить(ЭлементОтбора);
		
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из МассивЭлементовОтбора Цикл
		Элементы.Удалить(ЭлементОтбора);	
		
	КонецЦикла;
	
	Для каждого ЭлементСписка Из ОтборСписокЗначенийКлассификаторов Цикл
		Значение = ЭлементСписка.Значение;
		ИмяОписания = "Значение__" + ИдентификаторЭлемента(Значение);	
		
		Представление = Строка(Значение);
		Если СтрДлина(Представление) > 15 Тогда
			Представление = Лев(Представление, 15) + "...";
			Ширина	 	  = 15 - 1;
			
		Иначе
			Ширина = СтрДлина(Представление) + 1;
			
		КонецЕсли;
		
		Компоненты = Новый Массив;
		Компоненты.Добавить(Новый ФорматированнаяСтрока(Представление + " "));
		Компоненты.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, ИмяОписания));
		
		Элемент = Элементы.Найти(ИмяОписания);
		Если Элемент = Неопределено Тогда
			Элемент = Элементы.Добавить(
				ИмяОписания, Тип("ДекорацияФормы"), Элементы["ГруппаУстановленныеОтборы" + ИмяСписка]);
							
		КонецЕсли;

		Элемент.Вид						= ВидДекорацииФормы.Надпись;
		Элемент.Заголовок 				= Новый ФорматированнаяСтрока(Компоненты);
		Элемент.ЦветФона  			    = ЦветаСтиля.ЦветФонаФормы;
		Элемент.Рамка     			    = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.Ширина				    = Ширина;
		
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ЗначениеОтбора_ОбработкаСсылки");
		
	КонецЦикла;
	
	
	ЭлементДекорацияЛогическоеВыражение = Элементы["ДекорацияЛогическоеВыражениеОтбораКлассификаторов" + ИмяСписка];
	ЛогическоеВыражениеОтбораКлассификаторов = ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + ИмяСписка];
	
	ДекорацияЛогическоеВыражениеВидимость = ОтборСписокЗначенийКлассификаторов.Количество() > 0;
	Если ДекорацияЛогическоеВыражениеВидимость Тогда
		ЭлементДекорацияЛогическоеВыражение.Заголовок = ?(ЛогическоеВыражениеОтбораКлассификаторов = "ИЛИ", НСтр("ru = 'Один из: '"), НСтр("ru = 'Все: '"));
	КонецЕсли;
	ЭлементДекорацияЛогическоеВыражение.Видимость = ДекорацияЛогическоеВыражениеВидимость;
	
КонецПроцедуры // ОбновитьОтображениеУстановленныхОтборов()

&НаСервереБезКонтекста
Функция ИдентификаторЭлемента(Ссылка)

	Возврат СтрЗаменить(Ссылка.УникальныйИдентификатор(), "-", "_");	
	
КонецФункции // ИдентификаторЭлемента()

&НаСервереБезКонтекста
Функция СсылкаЭлемента(ИмяЭлемента)
	
	МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлемента, "__");	

	Возврат Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(
		Новый УникальныйИдентификатор(СтрЗаменить(МассивИмени[1], "_", "-"))
	);
	
КонецФункции // СсылкаЭлемента()

&НаСервере
Процедура СохранитьНастройки(СохраняемыеНастройки)
	
	Настройки = СохраняемыеНастройки;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "Настройки", СохраняемыеНастройки);	
	
КонецПроцедуры // СохранитьНастройки()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиПоУмолчанию()

	Настройки = Новый Структура;
	Настройки.Вставить("ИнтервалПродаж"		, 1);
	Настройки.Вставить("ПериодичностьПродаж", ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	
	Возврат Настройки;

КонецФункции // ПолучитьНастройкиПоУмолчанию()

&НаКлиенте
Процедура УстановитьБыстрыеОтборы()
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
	Список = ЭтотОбъект[СтруктураРаздела.ИмяСписка];
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"НаправлениеДеятельности", ОтборНаправлениеДеятельности,,, ЗначениеЗаполнено(ОтборНаправлениеДеятельности)
	);
				
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"НоменклатурнаяГруппа", ОтборНоменклатурнаяГруппа,,, ЗначениеЗаполнено(ОтборНоменклатурнаяГруппа)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"ПродажиСумма", ОтборПродажиСумма, ВидСравненияКомпоновкиДанных[ОтборПродажиСуммаВидСравнения],, ЗначениеЗаполнено(ОтборПродажиСумма)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"ДатаВключения", ОтборДатаВключенияКлассификатора, ВидСравненияКомпоновкиДанных[ОтборДатаВключенияКлассификатораВидСравнения],, ЗначениеЗаполнено(ОтборДатаВключенияКлассификатора)
	);
		
	УстановитьРежимПросмотраСписка(Элементы[СтруктураРаздела.ИмяСписка]);
	
КонецПроцедуры // УстановитьБыстрыеОтборы()

&НаКлиенте
Процедура УстановитьРежимПросмотраСписка(ЭлементСписок)
	
	Если ОтборСписокЗначенийКлассификаторов.Количество() > 0
	  ИЛИ ЗначениеЗаполнено(ОтборНаправлениеДеятельности)
	  ИЛИ ЗначениеЗаполнено(ОтборНаправлениеДеятельности)
	  ИЛИ ЗначениеЗаполнено(ОтборНоменклатурнаяГруппа)
	  ИЛИ ЗначениеЗаполнено(ОтборПродажиСумма)
	  ИЛИ ЗначениеЗаполнено(ОтборДатаВключенияКлассификатора) Тогда
	  
		ЭлементСписок.Отображение = ОтображениеТаблицы.Список;
		
	Иначе	
		ЭлементСписок.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		
	КонецЕсли;

КонецПроцедуры // УстановитьРежимПросмотраСписка()

#Область ВариантыСписка

&НаСервере
Процедура ВариантСпискаПриИзменении(ИмяКоманды)
	
	СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);	
	CRM_КлассификаторыВызовСервера.ИницализироватьНаборДанныхСписка(ЭтотОбъект, ИмяКоманды, ПолучитьПараметрыСписка(СтруктураРаздела.ИмяСписка));
	
КонецПроцедуры // ВариантСпискаПриИзменении()

&НаСервере
Процедура ИнициализироватьВариантыСписка(ИмяСписка, ВариантСписка)

	ПараметрыСписка = ПолучитьПараметрыСписка(ИмяСписка);
	ПараметрыСписка.Вставить("ТекущийВариантСписка", ВариантСписка);
	CRM_КлассификаторыВызовСервера.ИнициализироватьВариантыСписка(ЭтотОбъект, ПараметрыСписка);
	
КонецПроцедуры // ИнициализироватьВариантыСписка()

&НаСервере
Функция ПолучитьПараметрыСписка(ИмяСписка)

	ПараметрыСписка = Новый Структура;
	ПараметрыСписка.Вставить("ИмяСписка"      	 , ИмяСписка);
	ПараметрыСписка.Вставить("ОсновнаяТаблица"	 , ?(ИмяСписка = "СписокНоменклатура", "Справочник.Номенклатура", "Справочник.вогКоллекцииНоменклатуры"));
	ПараметрыСписка.Вставить("ЭлементСписка"  	 , Элементы[ИмяСписка]);
	ПараметрыСписка.Вставить("ОбластьВарианты"   , Элементы["СписокГруппаВариантыСписка" + ИмяСписка]);
	ПараметрыСписка.Вставить("ОбластьДобавления" , Элементы["ПоляСписка" + ИмяСписка]);

	Возврат ПараметрыСписка;
	
КонецФункции // ПолучитьПараметрыСписка()

#КонецОбласти

#Область Настройки

&НаКлиенте
Процедура ИнициализироватьФормуПоНастройкеКлиент(СтруктураРаздела = Неопределено)

	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(ЭтотОбъект);
		
	КонецЕсли;
	
	Настройка = ПолучитьНастройкиПоСсылке(ТекущаяНастройка[СтруктураРаздела.ИмяСписка]);
	Если Настройка <> Неопределено Тогда
		ИнициализироватьНастройки(СтруктураРаздела, Настройка);	
	КонецЕсли;
	
	СформироватьЗаголовокПоНастройке(ЭтотОбъект, СтруктураРаздела);
	
КонецПроцедуры // ИнициализироватьФормуПоНастройкеКлиент()

&НаКлиенте
Процедура ИнициализироватьНастройки(СтруктураРаздела, Настройка)

	ИмяСписка = СтруктураРаздела.ИмяСписка;
	
	//Вариант списка
	ТекущийВариантСписка[ИмяСписка] = Настройка.ВариантСписка;
	ВариантСпискаПриИзменении(?(ЗначениеЗаполнено(Настройка.ВариантСписка), Настройка.ВариантСписка, "ОсновнойВариант" + ИмяСписка));
	
	//Классификатор
	Классификатор = Настройка.Классификатор;
	ИницализироватьСтруктуруКлассификатора();	
	
	//Отбор по классификатору
	ЭтотОбъект["ЛогическоеВыражениеОтбораКлассификаторов" + ИмяСписка] = Настройка.ЛогическоеВыражениеОтбораКлассификаторов;
	
	ОтборСписокЗначенийКлассификаторов.Очистить();
	Для каждого ЭлементОтбора Из Настройка.ОтборСписокЗначенийКлассификаторов Цикл
		ОтборСписокЗначенийКлассификаторов.Добавить(ЭлементОтбора.Значение, ЭлементОтбора.Представление);	
	КонецЦикла;
	
	УстановитьОтборПоКлассификаторам();
	
	//Быстрые отборы
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройка.БыстрыеОтборы);
	УстановитьБыстрыеОтборы();	
	
КонецПроцедуры // ИнициализироватьНастройки()

&НаСервереБезКонтекста
Функция ПолучитьНастройкиПоСсылке(НастрокаСсылка)
	Возврат Справочники.вогНастройкиУправленияКлассификацией.ПолучитьНастройки(НастрокаСсылка);	
КонецФункции // ПолучитьНастройкиПоСсылке()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокПоНастройке(Форма, СтруктураРаздела = Неопределено)

	Если СтруктураРаздела = Неопределено Тогда
		СтруктураРаздела = СтруктураТекущегоРаздела(Форма);
	КонецЕсли;
	
	Настройка = Форма.ТекущаяНастройка[СтруктураРаздела.ИмяСписка];
	Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номенклатура и коллекции (%1)'"), 
		?(ЗначениеЗаполнено(Настройка), Настройка, НСтр("ru = 'по умолчанию'"))); 
	
КонецПроцедуры // СформироватьЗаголовокПоНастройке()

#КонецОбласти

#КонецОбласти

#Область Подключаемый_РабочийСтол
	
&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

#КонецОбласти
//-Рабочий стол