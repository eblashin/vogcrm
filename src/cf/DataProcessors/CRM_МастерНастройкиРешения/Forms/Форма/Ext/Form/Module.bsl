&НаКлиенте
Перем мТекущаяСтраница;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьРеквизитыПоиска()
	
	РеквизитыПоискаДублейПартнеров.Добавить("Наименование;ПОДОБНО","Наименование");
	РеквизитыПоискаДублейПартнеров.Добавить("НаименованиеПолное;ПОДОБНО","Наименование полное");
	РеквизитыПоискаДублейПартнеров.Добавить("CRM_ИНН;=","ИНН");
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_Адрес;ПОДОБНО","Адрес");
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_АдресЭлектроннойПочты;ПОДОБНО","Email");
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_Телефон;ПОДОБНО","Телефон");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНомеровОповещений()
	Элементы.CRM_НомерТелефонаОповещений.СписокВыбора.Очистить();
	ТекПровайдерSMS = Константы.ПровайдерSMS.Получить();
	Если ТекПровайдерSMS = Перечисления.ПровайдерыSMS.SMS4B Тогда
		Элементы.CRM_НомерТелефонаОповещений.Видимость = Истина;	
		НомераОтправителя	= Константы.sms4bНомераОтправителя.Получить();
		МассивНомеров		= ОтправкаSMSЧерезSMS4B.ПолучитьМассивНомеровИзСтроки(НомераОтправителя);
		Для Каждого Номер Из МассивНомеров Цикл
			Если НЕ ПустаяСтрока(Номер) Тогда
				Элементы.CRM_НомерТелефонаОповещений.СписокВыбора.Добавить(Номер);
			КонецЕсли; 
		КонецЦикла; 
		Если Элементы.CRM_НомерТелефонаОповещений.СписокВыбора.НайтиПоЗначению(НаборКонстант.CRM_НомерТелефонаОповещений) = Неопределено Тогда
			НаборКонстант.CRM_НомерТелефонаОповещений = "";
		КонецЕсли;	
	Иначе
		Элементы.CRM_НомерТелефонаОповещений.Видимость = Ложь;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОтказСнятиеУчетПоНесколькимОрганизациям() 
	
	Отказ = Ложь;
	
	ОсновнаяОрганизация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
	
	ВыборкаОрганизации = Справочники.Организации.Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		Если ВыборкаОрганизации.Ссылка <> ОсновнаяОрганизация Тогда
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ВыборкаОрганизации.Ссылка);
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			
			Если ТаблицаСсылок.Количество() > 0 Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'В базе используются организации, отличные от основной! Снятие опции запрещено!'");	
				Сообщение.Поле = "НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям";
				Сообщение.Сообщить();
				
				Отказ = Истина;
				Прервать;
			
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Отказ;
	
КонецФункции  // ОтказСнятиеУчетПоНесколькимОрганизациям()

&НаСервере
Функция ОтказСнятьФункциональнаяУчетВалютныхОпераций()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Валюты.Ссылка
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.Ссылка <> &ВалютаРегламентированногоУчета"
	);
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Отказ = НЕ РезультатЗапроса.Пустой();
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'В базе заведены валюты, отличные от национальной! Необходимо их удалить. Снятие флага запрещено!'");
		CRM_ОбщегоНазначенияСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "НаборКонстант.ФункциональнаяУчетВалютныхОпераций");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ОтказСнятьФункциональнаяУчетВалютныхОпераций()

&НаСервере
Функция ОтказИзменитьВалютаУчета()
	
	Если CRM_ОбщегоНазначенияПривилегированный.ОтказИзменитьВалютаУчета() Тогда
		ТекстСообщения = НСтр("ru = 'В базе есть движения по ""суммовым"" регистрам накопления! Изменение валюты учета запрещено!'");	
		CRM_ОбщегоНазначенияСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "НаборКонстант.ВалютаУправленческогоУчета");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ОтказИзменитьВалютаУчета()

&НаСервере
Функция УстановитьПодразделениеПользователю(МассивПользователей, Подразделение, СтандартнаяОбработка)
	
	МассивРезультатов = Новый Массив;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
	
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ТекущееПодразделение = Пользователь.Подразделение;
			Если ТекущееПодразделение <> Подразделение Тогда
				
				СправочникОбъект = Пользователь.ПолучитьОбъект();
				СправочникОбъект.Подразделение = Подразделение;
				
				Попытка
					НачатьТранзакцию();
					
					СправочникОбъект.Записать();
					
					//CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(Подразделение, "ОсновноеПодразделение", Пользователь);
					ОбновитьПовторноИспользуемыеЗначения();
					
					МассивРезультатов.Добавить(Пользователь);
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Пользователю %1 не удалось установить подразделение %2'"),
						Пользователь,
						Подразделение
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьКонстанту(ИмяКонстанты, ЗначениеЗаписи)
	Константы[ИмяКонстанты].Установить(ЗначениеЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)
	ОткрытьСправку("Обработка.CRM_МастерНастройкиРешения");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ
////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если РеквизитыПоиска <> Неопределено Тогда
		РеквизитыПоискаДублейПартнеров = РеквизитыПоиска;
	Иначе
		ЗаполнитьРеквизитыПоиска();
	КонецЕсли;
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОтправкаРассылокЭлектронныхПисем);
	ПериодОтправкиПисемЭлектроннойРассылки = Задание.Расписание.ПериодПовтораВТечениеДня;
	
	ТекущаяСтраницаМастера = ХранилищеНастроекДанныхФорм.Загрузить("МастерНастройкиРешения","ТекущаяСтраницаМастера");
	
	Элементы.ПанельСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	НастройкаОткрыватьМастер = CRM_ХранилищеНастроек.Загрузить("Запускать_CRM_МастерНастройкиРешения",,, "CRM_МастерНастройкиРешения");
	ОткрыватьМастерПриСледующемСтарте = НастройкаОткрыватьМастер<>Ложь;
	Если НастройкаОткрыватьМастер = Неопределено Тогда
		CRM_ХранилищеНастроек.Сохранить("Запускать_CRM_МастерНастройкиРешения",, Истина,, "CRM_МастерНастройкиРешения");
	КонецЕсли;
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
	ВидыКонтактнойИнформации.Параметры.УстановитьЗначениеПараметра("МассивРодителей", МассивРодителей);
	
	ТекПодразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВидыКонтактнойИнформацииКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	Панель = Элементы.ПанельСтраницы;
	Страницы = Панель.ПодчиненныеЭлементы;
	Для Индекс = 0 По Страницы.Количество() - 2 Цикл
		СменитьСтраницуМастераОтметитьШаг(Индекс, Ложь);
	КонецЦикла;
	СменитьСтраницуМастераОтметитьШаг(Страницы.Индекс(Панель.ТекущаяСтраница), Истина);
	
	НесколькоОрганизаций = НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям;
	Элементы.ГруппаОднаОрганизация.Видимость = НЕ НесколькоОрганизаций;
	Элементы.ГруппаНесколькоОрганизаций.Видимость = НесколькоОрганизаций;
	
	Если ЗначениеЗаполнено(ТекущаяСтраницаМастера) Тогда
		ТекущаяСтраница = Панель.ПодчиненныеЭлементы.Найти(ТекущаяСтраницаМастера);
		СменитьСтраницуМастера(ТекущаяСтраница);
	Иначе
		СменитьСтраницуМастера(Элементы.СтраницаСтарт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере".
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Панель = Элементы.ПанельСтраницы;
	ТекущаяСтраница = Панель.ТекущаяСтраница.Имя;
	ХранилищеНастроекДанныхФорм.Сохранить("МастерНастройкиРешения","ТекущаяСтраницаМастера",ТекущаяСтраница);
	
	// Если присутствуют ссылки на организацию, неравную основной организации, то нельзя снять флаг
	// УчетПоНесколькимОрганизациям.
	Если Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям.Получить() <> НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям
		И (НЕ НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям) И ОтказСнятиеУчетПоНесколькимОрганизациям() Тогда
		НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Если есть элементы справочника "Валюты" кроме предопределенной, то нельзя снять флаг
	// ФункциональнаяУчетВалютныхОпераций.
	Если Константы.ФункциональнаяУчетВалютныхОпераций.Получить() <> НаборКонстант.ФункциональнаяУчетВалютныхОпераций 
		И (НЕ НаборКонстант.ФункциональнаяУчетВалютныхОпераций) И ОтказСнятьФункциональнаяУчетВалютныхОпераций() Тогда
		НаборКонстант.ФункциональнаяУчетВалютныхОпераций = Истина;
		Элементы.ВалютаУправленческогоУчета.ТолькоПросмотр = Ложь;
		Элементы.ВалютаУправленческогоУчета.АвтоВыборНезаполненного = Истина;
		Элементы.ВалютаУправленческогоУчета.АвтоОтметкаНезаполненного = Истина;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Если есть движения по суммовым регистрам накопления, то нельзя изменить константу ВалютаУправленческогоУчета.
	Если Константы.ВалютаУправленческогоУчета.Получить() <> НаборКонстант.ВалютаУправленческогоУчета И ОтказИзменитьВалютаУчета() Тогда
		НаборКонстант.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Если установлен флаг ФункциональнаяУчетВалютныхОпераций, то должна быть заполнена ВалютаУчета.
	Если НаборКонстант.ФункциональнаяУчетВалютныхОпераций И Не ЗначениеЗаполнено(НаборКонстант.ВалютаУправленческогоУчета) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Установлен флаг ""Вести учет операций в валюте"", но не заполнена ""Валюта учета""!'");	
		//Сообщение.Поле = "НаборКонстант.ВалютаУправленческогоУчета";
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Константы.CRM_РеквизитыПоискаДублейПартнеров.Установить(Новый ХранилищеЗначения(РеквизитыПоискаДублейПартнеров));
	
	ПолнотекстовыйПоискИзменен = (ТекущийОбъект.ИспользоватьПолнотекстовыйПоиск <> Константы.ИспользоватьПолнотекстовыйПоиск.Получить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьМодифицированностьДанных(Данные)
	Результат = Ложь;
	Значение = Неопределено;
	
	НаборКонстант = Данные.НаборКонстант;
	Для каждого МетаКонстанта Из Метаданные.Константы Цикл
		Если НаборКонстант.Свойство(МетаКонстанта.Имя, Значение) Тогда
			Если Значение <> Константы[МетаКонстанта.Имя].Получить() Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПроверитьМодифицированность()
	Данные = Новый Структура;
	Данные.Вставить("НаборКонстант", НаборКонстант);
	Возврат ПроверитьМодифицированностьДанных(Данные);
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ МАСТЕРОМ И СТРАНИЦАМИ
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура КомандаДалее(Команда)
	СменитьСтраницуМастера(1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	СменитьСтраницуМастера(-1);
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуМастера(Параметр)
	
	Панель = Элементы.ПанельСтраницы;
	Страницы = Панель.ПодчиненныеЭлементы;
	Индекс = Страницы.Индекс(Панель.ТекущаяСтраница);
	
	СменитьСтраницуМастераОтметитьШаг(Индекс, Ложь);
	
	Если ТипЗнч(Параметр) = Тип("Число") Тогда
		Индекс = Индекс + Параметр;
	Иначе
		Индекс = Страницы.Индекс(Параметр);
	КонецЕсли;
	
	Панель.ТекущаяСтраница = Страницы.Получить(Индекс);
	СменитьСтраницуМастераОтметитьШаг(Индекс, Истина);
	
	УправлениеЭлементамиФормы(Панель.ТекущаяСтраница);
	
	Элементы.КомандаНазад.Доступность = (Индекс > 0);
	Элементы.КомандаДалее.Доступность = (Индекс < Страницы.Количество()-1);
	
	мТекущаяСтраница = Панель.ТекущаяСтраница;
	
	Элементы.КомандаОтмена.КнопкаПоУмолчанию = Индекс = Страницы.Количество()-1;
	Элементы.КомандаДалее.КнопкаПоУмолчанию = НЕ Индекс = Страницы.Количество()-1;
	Элементы.КомандаОтмена.Заголовок = ?(Индекс = Страницы.Количество()-1, НСтр("ru = 'Завершить'"), НСтр("ru = 'Закрыть'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуМастераОтметитьШаг(Знач Индекс, Пометка)
	Индекс = Индекс + 1;
	Если Индекс = Элементы.ПанельСтраницы.ПодчиненныеЭлементы.Количество() Тогда
		Возврат;
	КонецЕсли;
	ИмяЭлемента = "ДекорацияШаг" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=");
	Элемент = Элементы[ИмяЭлемента];
	Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,Пометка);
	Если Индекс = 6 ИЛИ Индекс = 7 Тогда
		Элементы.ДекорацияШаг06_07.Шрифт = Новый Шрифт(Элемент.Шрифт,,,Пометка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьМастер(Команда)
	                                                                                    
	Панель = Элементы.ПанельСтраницы;
	Страницы = Панель.ПодчиненныеЭлементы;
	Индекс = Страницы.Индекс(Панель.ТекущаяСтраница);
	ПоследняяСтраница = Индекс = Страницы.Количество()-1;
	Если ПоследняяСтраница Тогда
		Записать();
		ОбновитьИнтерфейс();
	КонецЕсли;
	Закрыть();
		
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиФормы(Страница = Неопределено)
	
	Если Страница = Неопределено Тогда
		Страница = Элементы.ПанельСтраницы.ТекущаяСтраница;
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаСведенияОКомпании Тогда
		НесколькоОрганизаций = НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям;
		Элементы.ГруппаОднаОрганизация.Видимость = НЕ НесколькоОрганизаций;
		Элементы.ГруппаНесколькоОрганизаций.Видимость = НесколькоОрганизаций;
		
		УчетВалютныхОпераций = НаборКонстант.ФункциональнаяУчетВалютныхОпераций;
		Элементы.СправочникВалюты.Доступность					= УчетВалютныхОпераций;
		Элементы.ВалютаУправленческогоУчета.ТолькоПросмотр						= НЕ УчетВалютныхОпераций;
		Элементы.ВалютаУправленческогоУчета.АвтоВыборНезаполненного			= УчетВалютныхОпераций;
		Элементы.ВалютаУправленческогоУчета.АвтоОтметкаНезаполненного			= УчетВалютныхОпераций;
		Элементы.ВалютаРегламентированногоУчета.ТолькоПросмотр				= НЕ УчетВалютныхОпераций;
		Элементы.ВалютаРегламентированногоУчета.АвтоВыборНезаполненного		= УчетВалютныхОпераций;
		Элементы.ВалютаРегламентированногоУчета.АвтоОтметкаНезаполненного	= УчетВалютныхОпераций;
		Если НЕ УчетВалютныхОпераций Тогда
			НаборКонстант.ВалютаУправленческогоУчета = НаборКонстант.ВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаСтруктураКомпании Тогда
		СписокПользователейУстановитьОтбор();
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаОрганизацияКлиентскойБазы Тогда
		Элементы.КомандаОткрытьДопРеквизиты.Доступность = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;

		Элементы.ГруппаРеквизитыПоискаДублей.Доступность = НаборКонстант.CRM_ВыполнятьПоискДублейПриЗаписиПартнера;
		Элементы.ДекорацияНастройкаВерсионированияРеквизитовПартнеров.Доступность = НаборКонстант.CRM_ВестиИсториюРеквизитовКлиентов;
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаОповещенияОСобытиях Тогда
		Элементы.ГруппаSMSОповещения.Доступность = НЕ НаборКонстант.ПровайдерSMS.Пустая();
		ЗаполнитьСписокНомеровОповещений();
		Элементы.сфпДекорацияНастройкиСМС1.Видимость = НаборКонстант.ПровайдерSMS.Пустая();
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаУправлениеКлиентскойБазойСегментирование Тогда
		//Элементы.ГруппаДопРеквизиты.Видимость = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
		Элементы.СегментыКлиентов.Доступность = НаборКонстант.CRM_ИспользоватьСегментацию;
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаУправлениеКлиентскойБазойМаркетинг Тогда
		Флаг = НаборКонстант.ФиксироватьПервичныйИнтерес;
		Элементы.CRM_ЗаполнятьПервичныйИнтерес.Доступность = Флаг;
		Если НЕ Флаг Тогда
			НаборКонстант.CRM_ЗаполнятьПервичныйИнтерес = Ложь;
		КонецЕсли;
		Флаг = НаборКонстант.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем;
		Элементы.ГруппаРегламентногоЗаданияРассылкиЭлектронныхПисемПараметры.Доступность = Флаг;
		Элементы.CRM_АдресWebДоступа.Видимость = НаборКонстант.ИспользоватьАнкетирование;	
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаУправлениеПродажами Тогда
		Элементы.ПользовательскиеМакетыПечатныхФорм.Доступность = НаборКонстант.ИспользоватьКоммерческиеПредложенияКлиентам;
		Элементы.ГруппаУровниДоступа.Доступность = НаборКонстант.CRM_ИспользоватьОграниченияДоступа;
	КонецЕсли;
	
	Если Страница = Элементы.СтраницаИнтеграцияСДругимиСистемами Тогда
		сфпИспользоватьСофтФонПриИзменении(Неопределено);
		смсИспользоватьСМСПриИзменении(Неопределено);
		ИспользоватьОбменДаннымиПриИзмененииНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Панель = Элементы.ПанельСтраницы;
	Страницы = Панель.ПодчиненныеЭлементы;
	
	СменитьСтраницуМастераОтметитьШаг(Страницы.Индекс(мТекущаяСтраница), Ложь);
	СменитьСтраницуМастераОтметитьШаг(Страницы.Индекс(Панель.ТекущаяСтраница), Истина);
	
	мТекущаяСтраница = Панель.ТекущаяСтраница;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаСведенияОКомпании"
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ФункциональнаяОпцияУчетПоНесколькимОрганизациямПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
	Если НЕ НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям И ОтказСнятиеУчетПоНесколькимОрганизациям() Тогда
		НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям = Истина;
	КонецЕсли;
	ЗаписатьКонстанту("ФункциональнаяОпцияУчетПоНесколькимОрганизациям", НаборКонстант.ФункциональнаяОпцияУчетПоНесколькимОрганизациям);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОсновнаяОрганизацияНажатие(Элемент)
	П = Новый Структура("Ключ", CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию());
	ОткрытьФорму("Обработка.CRM_МастерНастройкиРешения.Форма.ФормаЭлементаОрганизация", П);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ОткрытьФорму("Обработка.CRM_МастерНастройкиРешения.Форма.ФормаЭлементаОрганизация");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	П = Новый Структура("Ключ", Элемент.ТекущаяСтрока);
	ОткрытьФорму("Обработка.CRM_МастерНастройкиРешения.Форма.ФормаЭлементаОрганизация", П);
КонецПроцедуры

&НаКлиенте
Процедура ФункциональнаяУчетВалютныхОперацийПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
	Если ПроверитьМодифицированность() Тогда
		Записать();
		ОбновитьИнтерфейс();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправочникВалюты(Команда)
	
	Если ПроверитьМодифицированность() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Валюты.ФормаСписка");
	
КонецПроцедуры // СправочникВалюты()

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаСтруктураКомпании"
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура СписокПользователейУстановитьОтбор()
	
	Подразделение = Элементы.СтруктураПредприятия.ВыделенныеСтроки;
	Если Подразделение = Неопределено Тогда
		Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
	Если Подразделение.Количество() > 0 Тогда
		ТекПодразделение = Подразделение[0];
	КонецЕсли;
	
	Если Подразделение.Количество() > 0 И НЕ (Подразделение = Неопределено) И НЕ ЗначениеЗаполнено(Подразделение[0]) Тогда
		// Это корень дерева, значит в списке пользователей должен виден весь их список.
		ЭлементОтбора = СписокПользователей.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0].Элементы[0];
		ЭлементОтбора.ПравоеЗначение = Подразделение;								
		ЭлементОтбора2 = СписокПользователей.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0].Элементы[1];
		ЭлементОтбора2.Использование = Истина;
	ИначеЕсли Подразделение.Количество() > 0 Тогда
		ЭлементОтбора = СписокПользователей.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0].Элементы[0];
		ЭлементОтбора.ПравоеЗначение = Подразделение;								
		ЭлементОтбора2 = СписокПользователей.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0].Элементы[1];
		ЭлементОтбора2.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПриАктивизацииСтроки(Элемент)
	СписокПользователейУстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивРезультатов = УстановитьПодразделениеПользователю(ПараметрыПеретаскивания.Значение, Строка, СтандартнаяОбработка);
	Для Каждого Пользователь Из МассивРезультатов Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователю %1 установлено подразделение %2'"),
			Пользователь,
			Строка
		);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Установлено подразделение'"),
			ПолучитьНавигационнуюСсылку(Пользователь),
			Текст,
			БиблиотекаКартинок.Информация32
		);
	КонецЦикла;
	
	Если МассивРезультатов.Количество() > 0 Тогда
		Элементы.СписокПользователей.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователя(Команда)
	ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Основание", ТекПодразделение));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаОрганизацияКлиентскойБазы"
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура CRM_ВыполнятьПоискДублейПриЗаписиПартнераПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "CRM_ВестиИсториюРеквизитовКлиентов".
//
Процедура CRM_ВестиИсториюРеквизитовКлиентовПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры // CRM_ВестиИсториюРеквизитовКлиентовПриИзменении()

&НаКлиенте
Процедура ДекорацияНастройкаВерсионированияРеквизитовПартнеровНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.Форма.НастройкаВерсионирования",, ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаОповещенияОСобытиях"
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаУправлениеКлиентскойБазойСегментирование"
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ФункциональнаяОпцияДополнительныеСведенияПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКлассификацииКлиентовНажатие(Элемент)
	ПолноеИмя = "Обработка.CRM_Классификация";
	ОткрытьФорму(ПолноеИмя + ".Форма.НастройкаПараметровКлассификацииКлиентов",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРоботаДляВыполненияКлассификацииНажатие(Элемент)
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ФункциональнаяОпцияИспользоватьСегментациюПриИзменении(Элемент)
	Если НаборКонстант.CRM_ИспользоватьСегментацию Тогда
		ЗаписатьКонстанту("CRM_ИспользоватьСегментацию", Истина);
	КонецЕсли;
	УправлениеЭлементамиФормы();	
КонецПроцедуры

&НаКлиенте
Процедура СегментыКлиентовНажатие(Элемент)
	ОткрытьФорму("Справочник.СегментыПартнеров.ФормаСписка");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаУправлениеКлиентскойБазойМаркетинг"
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ФиксироватьПервичныйИнтересПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисемПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаСервере
Процедура ПериодОтправкиПисемЭлектроннойРассылкиПриИзмененииНаСервере()
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОтправкаРассылокЭлектронныхПисем);
	Задание.Расписание.ПериодПовтораВТечениеДня = ПериодОтправкиПисемЭлектроннойРассылки;
	Задание.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтправкиПисемЭлектроннойРассылкиПриИзменении(Элемент)
	ПериодОтправкиПисемЭлектроннойРассылкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАнкетированиеПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаУправлениеПродажами"
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура CRM_ИспользоватьКоммерческиеПредложенияПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскиеМакетыПечатныхФормНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИспользоватьОграниченияДоступаПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьФО_CRM_ИспользоватьОграниченияДоступа()
	Возврат ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОграниченияДоступа");
КонецФункции

&НаКлиенте
Процедура ОткрытьУровниДоступа(Команда)
	
	Если ПолучитьФО_CRM_ИспользоватьОграниченияДоступа() = Ложь Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьУровниДоступаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Перед открытием ""Уровней доступа"" необходимо записать настройки.
					   |Записать?'"), РежимДиалогаВопрос.ОКОтмена);
	
	Иначе 
		ОткрытьФорму("Справочник.CRM_УровниДоступа.ФормаСписка", , ЭтотОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУровниДоступаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Попытка
			Записать();
			ОткрытьФорму("Справочник.CRM_УровниДоступа.ФормаСписка", , ЭтотОбъект);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать настройки'"), СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеЗаполнитьУровниДоступаНажатие(Элемент)
	ОткрытьФорму("Обработка.CRM_ЗаполнениеУровнейДоступа.Форма");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаУправлениеПроектамиПроцессами"
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАНИЦА "СтраницаИнтеграцияСДругимиСистемами"
////////////////////////////////////////////////////////////////////////////////////////////////

#Область НастройкиПодсистемыСофтФон

&НаКлиенте
// Процедура - обработчик команды формы "сфпКомандаОписаниеСофтФон"
//
Процедура сфпКомандаОписаниеСофтФон(Команда)
	ПараметрыФормы = Новый Структура("Макет, Заголовок", "Интеграции_СофтФон", НСтр("ru = 'Подсистема_СофтФон'"));
	ОткрытьФорму("Обработка.CRM_БыстроеОсвоение.Форма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
КонецПроцедуры // сфпКомандаОписаниеСофтФон()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента  формы "сфпИспользоватьСофтФон"
//
Процедура сфпИспользоватьСофтФонПриИзменении(Элемент)
	Элементы.ГруппаФормаНастройкиСофтфон.Видимость	= НаборКонстант.сфпИспользоватьСофтФон;
	сфпЗаписатьИзменениеКонстантыИспользоватьСофтфон();
	ОбновитьИнтерфейс();
КонецПроцедуры // сфпИспользоватьСофтФонПриИзменении()

&НаСервере
Процедура сфпЗаписатьИзменениеКонстантыИспользоватьСофтфон()
	Константы.сфпИспользоватьСофтФон.Установить(НаборКонстант.сфпИспользоватьСофтФон);
КонецПроцедуры

&НаКлиенте
Процедура сфпОткрытьНастройкиСофтфона(Команда)
	ОткрытьФорму("ОбщаяФорма.сфпОбщиеНастройки");
КонецПроцедуры

#КонецОбласти // НастройкиПодсистемыСофтФон 

#Область НастройкиПодсистемыОтправкиSMS

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента  формы "смсИспользоватьСМС"
//
Процедура смсИспользоватьСМСПриИзменении(Элемент)
	Элементы.сфпДекорацияНастройкиСМС.Видимость = НЕ НаборКонстант.ПровайдерSMS.Пустая();
КонецПроцедуры // смсИспользоватьСМСПриИзменении()

#КонецОбласти //НастройкиПодсистемыОтправкиSMS 

#Область НастройкиПодсистемыИнтеграцииСДругимиПрограммами

&НаСервере
Процедура ИспользоватьОбменДаннымиПриИзмененииНаСервере()
	Константы.УдалитьCRM_ИспользоватьОбменЧерезУниверсальныйФормат.Установить(НаборКонстант.ИспользоватьСинхронизациюДанных);
	Константы.ИспользоватьСинхронизациюДанных.Установить(НаборКонстант.ИспользоватьСинхронизациюДанных);
	Элементы.ГруппаНастройкиСинхронизацииДанных.Видимость = НаборКонстант.ИспользоватьСинхронизациюДанных;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменДаннымиПриИзменении(Элемент)
	ИспользоватьОбменДаннымиПриИзмененииНаСервере();
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииДанных(Команда)
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.СинхронизацияДанных");
КонецПроцедуры

#КонецОбласти //НастройкиПодсистемыОтправкиSMS 

////////////////////////////////////////////////////////////////////////////////////////////////
// Смена страниц по гиперссылкам.
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПерейтиНаСтраницу(НоваяСтраница)
	Панель = Элементы.ПанельСтраницы;
	Страницы = Панель.ПодчиненныеЭлементы;
	СтраницаТекущая = Страницы.Найти(Панель.ТекущаяСтраница.Имя);
	ИндексТекущий = Страницы.Индекс(СтраницаТекущая);
	СтраницаНовая = Страницы.Найти(НоваяСтраница);
	ИндексНовый = Страницы.Индекс(СтраницаНовая);
	ПараметрСмены = ИндексНовый - ИндексТекущий;
	СменитьСтраницуМастера(ПараметрСмены);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг01Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг02Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг03Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг04Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг05Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг06_07Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг06Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг07Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг08Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг09Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг10Нажатие(Элемент)
	ПерейтиНаСтраницу(Элемент.Подсказка);
КонецПроцедуры

&НаСервере
Процедура ОткрыватьМастерПриСледующемСтартеПриИзмененииНаСервере()
	CRM_ХранилищеНастроек.Сохранить("Запускать_CRM_МастерНастройкиРешения",, ОткрыватьМастерПриСледующемСтарте,, "CRM_МастерНастройкиРешения");
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьМастерПриСледующемСтартеПриИзменении(Элемент)
	ОткрыватьМастерПриСледующемСтартеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиПортрета(Команда)
	ОткрытьФорму("РегистрСведений.CRM_РасположениеРеквизитовКлиентов.Форма.ФормаНастройки", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьДопРеквизиты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьДополнительныеРеквизиты");
	
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
КонецПроцедуры

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ВидыКонтактнойИнформации);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ВидыКонтактнойИнформации, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ВидыКонтактнойИнформации);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
