///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоВложений(Форма)
	КоличествоВложений = Форма.Вложения.Количество();
	Если КоличествоВложений = 0 Тогда
		Текст = НСтр("ru = 'нет файлов'");
	ИначеЕсли КоличествоВложений = 1 Тогда
		Текст = НСтр("ru = '1 файл'");
	ИначеЕсли КоличествоВложений >= 2 И КоличествоВложений <= 4 Тогда
		Текст = Строка(КоличествоВложений) + НСтр("ru = ' файла'");
	Иначе
		Текст = Строка(КоличествоВложений) + НСтр("ru = ' файлов'");
	КонецЕсли;
	Форма.Элементы.СтраницаВложения.Заголовок = НСтр("ru = 'Вложения '") + "(" + Текст + ")";
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьИДоступностьЭлементовФормы(Форма)
	
	Если Форма.ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки") Тогда
		// Страница "Cодержание действия".
		Форма.Элементы.СтраницаПисьмоОбзвон.Видимость  	   = Ложь;
		Форма.Элементы.ГруппаСодержаниеSMS.Видимость  	   = Истина;
		Форма.Элементы.ГруппаСвойстваСМС.Видимость  	   = Истина;
		Форма.Элементы.ДекорацияРазделительСМС.Видимость   = Истина;
		Форма.Элементы.СтраницаВложения.Видимость 		   = Ложь;
		// Колонки таблицы выбранных контактов.
		Форма.Элементы.ТаблицаКонтактовТелефон.Видимость   = Истина;
		Форма.Элементы.ТаблицаКонтактовЭлектронныйАдрес.Видимость = Ложь;
		// проект и важность
		Форма.Элементы.Проект.Видимость 				   = Ложь;
		Форма.Элементы.Важность.Видимость 				   = Ложь;
		
	ИначеЕсли Форма.ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки") Тогда
		// Страница "Cодержание действия".
		Форма.Элементы.СтраницаПисьмоОбзвон.Видимость  	   = Истина;
		Форма.Элементы.ГруппаСодержаниеSMS.Видимость 	   = Ложь;
		Форма.Элементы.ГруппаСвойстваСМС.Видимость  	   = Ложь;
		Форма.Элементы.ДекорацияРазделительСМС.Видимость   = Ложь;
		
		Форма.Элементы.СтраницаВложения.Видимость 		   = Истина;
		Форма.Элементы.ВыбратьШаблонАвтотекста.Видимость   = Истина;
		Форма.Элементы.АвтоТекст.Видимость				   = Истина;
		Форма.Элементы.ОтправительПредставление.Видимость  = Истина;
		Форма.Элементы.ДобавитьВложениеКомПанель.Видимость = Истина;
		// Колонки таблицы выбранных контактов.
		Форма.Элементы.ТаблицаКонтактовТелефон.Видимость   = Ложь;
		Форма.Элементы.ТаблицаКонтактовЭлектронныйАдрес.Видимость = Истина;
		// проект и важность
		Форма.Элементы.Проект.Видимость 				   = Истина;
		Форма.Элементы.Важность.Видимость 				   = Истина;
		
	ИначеЕсли Форма.ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона") Тогда
		// Страница "Cодержание действия".
		Форма.Элементы.СтраницаПисьмоОбзвон.Видимость  	   = Истина;
		Форма.Элементы.ГруппаСодержаниеSMS.Видимость 	   = Ложь;
		Форма.Элементы.ГруппаСвойстваСМС.Видимость  	   = Ложь;
		Форма.Элементы.ДекорацияРазделительСМС.Видимость   = Ложь;
		
		Форма.Элементы.СтраницаВложения.Видимость 		   = Ложь;
		Форма.Элементы.ВыбратьШаблонАвтотекста.Видимость   = Ложь;
		Форма.Элементы.АвтоТекст.Видимость				   = Ложь;
		Форма.Элементы.ОтправительПредставление.Видимость  = Ложь;
		Форма.Элементы.ДобавитьВложениеКомПанель.Видимость = Ложь;
		// Колонки таблицы выбранных контактов.
		Форма.Элементы.ТаблицаКонтактовТелефон.Видимость   = Истина;
		Форма.Элементы.ТаблицаКонтактовЭлектронныйАдрес.Видимость = Ложь;
		// проект и важность
		Форма.Элементы.Проект.Видимость 				   = Истина;
		Форма.Элементы.Важность.Видимость 				   = Истина;
		
	КонецЕсли;
	
	Если Форма.Элементы.СтраницаВложения.Видимость Тогда
		ОбновитьКоличествоВложений(Форма);
	КонецЕсли;
	
	Форма.Элементы.ДекорацияШагРаспределениеПоОтветственным.Видимость = (Форма.ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона"));
	Форма.Элементы.Ответственный.Видимость = (Форма.ВидМастера <> ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона"));
	//Форма.Элементы.Опрос.Видимость = (Форма.ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона"));
	Форма.Элементы.МаркетинговоеМероприятие.Видимость = (Форма.ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона"));
	
	Форма.Элементы.СтраницаКлиенты.Видимость = Форма.ВключатьКлиентов;
	Форма.Элементы.СтраницаКЛ.Видимость = Форма.ВключатьКЛ;
	
	Если Форма.ВидРаспределенияПоИсполнителям = 0 Тогда
		Форма.Элементы.ТаблицаИсполнителей.Видимость = Ложь;
		Форма.Элементы.ПользовательОтветственныйПоУмолчанию.Видимость = Истина;
	ИначеЕсли Форма.ВидРаспределенияПоИсполнителям = 1 Тогда
		Форма.Элементы.ТаблицаИсполнителей.Видимость = Истина;
		Форма.Элементы.ПользовательОтветственныйПоУмолчанию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗаголовкиШагов(Форма)
	
	Для Каждого ЭлементСписка Из Форма.СписокШаговМастера Цикл
		
		Если ЭлементСписка.Пометка Тогда
			Форма.Элементы[ЭлементСписка.Значение].Шрифт = Новый Шрифт(); 
			ЭлементСписка.Пометка = Ложь;
		КонецЕсли;	
		
		ИмяЗакладки = ЭлементСписка.Представление;
		Если Форма.Элементы.ПанельСтраницы.ТекущаяСтраница = Форма.Элементы[ИмяЗакладки] Тогда
			Форма.Элементы[ЭлементСписка.Значение].Шрифт = Новый Шрифт(,,Истина);
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;	
		
	КонецЦикла; 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьКЛПартнера(ТекПартнер)
	
	Возврат ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматированныйДокумент(ФорматированныйДокумент, ТекстHTML, Вложения)
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, ПолучитьИзВременногоХранилища(Вложения)); 
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьРассылкуЭлектронныхПисем()
	
	ПараметрыФормы = Новый Структура;
	ЗначенияЗаполнения	= Новый Структура;
	ЗначенияЗаполнения.Вставить("Проект", Проект);
	ЗначенияЗаполнения.Вставить("Ответственный", Ответственный);
	ЗначенияЗаполнения.Вставить("Тема", Тема);
	ЗначенияЗаполнения.Вставить("Важность", Важность);
	ЗначенияЗаполнения.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ЗначенияЗаполнения.Вставить("ЕстьВложения", (Вложения.Количество()>0));	
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
					
	ФормаРассылки = ПолучитьФорму("Документ.CRM_РассылкаЭлектронныхПисем.ФормаОбъекта", ПараметрыФормы);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтактов Цикл
		
		НоваяСтрока = ФормаРассылки.Объект.Получатели.Добавить();
		НоваяСтрока.Партнер				 = СтрокаТаблицы.Партнер;
		НоваяСтрока.КонтактноеЛицо		 = СтрокаТаблицы.КонтактноеЛицо;
		НоваяСтрока.Адрес				 = СтрокаТаблицы.Адрес;
		НоваяСтрока.ПредставлениеАдреса	 = СтрокаТаблицы.ПредставлениеАдреса;
		НоваяСтрока.Принадлежность		 = СтрокаТаблицы.Принадлежность;
		
	КонецЦикла; 
	
	ФормаРассылки.ТекстПисьмаФорматированныйДокумент = ТекстПисьмаФорматированныйДокумент;
	
	// Перенесем присоединенные вложения.
	Для Каждого Файл Из Вложения Цикл
		ФайлРассылки = ФормаРассылки.Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлРассылки,Файл);
		ДвоичныеДанные						= ПолучитьИзВременногоХранилища(Файл.ИмяФайлаНаКомпьютере);
		ФайлРассылки.ИмяФайлаНаКомпьютере	= ПоместитьВоВременноеХранилище(ДвоичныеДанные,ФормаРассылки.УникальныйИдентификатор);
	КонецЦикла; 
	
	ФормаРассылки.Модифицированность = Истина;
	
	ФормаРассылки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Функция РаспределитьПартнеровПоИсполнителям()
	МассивПользователей = ВыбранныеИсполнители.ВыгрузитьЗначения();
	
	Если МассивПользователей.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не выбрано ни одного ответственного!'");
	КонецЕсли;
	Если ТаблицаКонтактов.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не выбрано ни одного клиента!'");
	КонецЕсли;
	
	Если ВидРаспределенияПоИсполнителям = 1 Тогда
		
		СоответствиеРезультат = Новый Соответствие();
		
		КоличествоПользователей = МассивПользователей.Количество();
		ОбщееКоличествоПартнеровИКЛ = ТаблицаКонтактов.Количество();
		
		КоличествоНаОдногоПользователя = Цел(ОбщееКоличествоПартнеровИКЛ / КоличествоПользователей);
		Если КоличествоНаОдногоПользователя < 1 Тогда
			КоличествоНаОдногоПользователя = 1;
		КонецЕсли;
		
		ТекИндексПользователя = 0;
		ТекИндексПартнеров = 0;
		
		Пока Истина Цикл
			ТекПользователь = МассивПользователей[ТекИндексПользователя];
			
			Если СоответствиеРезультат[ТекПользователь] = Неопределено Тогда
				СоответствиеРезультат.Вставить(ТекПользователь, Новый Массив());
			КонецЕсли;
			
			Для н = 1 По КоличествоНаОдногоПользователя Цикл
				Если ЗначениеЗаполнено(ТаблицаКонтактов[ТекИндексПартнеров].Партнер) Тогда
					СоответствиеРезультат[ТекПользователь].Добавить(ТаблицаКонтактов[ТекИндексПартнеров]);
				КонецЕсли;
				
				ТекИндексПартнеров = ТекИндексПартнеров + 1;
				Если ТекИндексПартнеров >= ОбщееКоличествоПартнеровИКЛ Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекИндексПартнеров >= ОбщееКоличествоПартнеровИКЛ Тогда
				Прервать;
			КонецЕсли;
			
			Если ТекИндексПользователя = МассивПользователей.ВГраница() Тогда
				// На последнего пользователя скидываем всех оставшихся.
				Пока ТекИндексПартнеров < ОбщееКоличествоПартнеровИКЛ Цикл
					Если ЗначениеЗаполнено(ТаблицаКонтактов[ТекИндексПартнеров].Партнер) Тогда
						СоответствиеРезультат[ТекПользователь].Добавить(ТаблицаКонтактов[ТекИндексПартнеров]);
					КонецЕсли;
					ТекИндексПартнеров = ТекИндексПартнеров + 1;
				КонецЦикла;
			КонецЕсли;
			
			ТекИндексПользователя = ТекИндексПользователя + 1;
			Если ТекИндексПользователя > МассивПользователей.ВГраница() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидРаспределенияПоИсполнителям = 0 Тогда		
		
		СоответствиеРезультат = Новый Соответствие();
		
		Для Каждого ВыбранныйПользователь Из МассивПользователей Цикл
			Отбор = Новый Структура("ОсновнойМенеджер", ВыбранныйПользователь);
			МассивНайденных = ТаблицаКонтактов.НайтиСтроки(Отбор);
			Если МассивНайденных.Количество() > 0 Тогда
				 СоответствиеРезультат.Вставить(ВыбранныйПользователь, МассивНайденных);
			КонецЕсли;				
		КонецЦикла;	
		
		МассивБезМенеджера = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаКонтактов Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОсновнойМенеджер) Тогда
				МассивБезМенеджера.Добавить(СтрокаТаблицы);
			КонецЕсли;				
		КонецЦикла;
		
		Если МассивБезМенеджера.Количество() > 0 Тогда
			СоответствиеРезультат.Вставить(ПользовательОтветственныйПоУмолчанию, МассивБезМенеджера);			
		КонецЕсли;			

	КонецЕсли;
		
	Возврат СоответствиеРезультат;
	
КонецФункции

&НаКлиенте
Процедура СоздатьТелемаркетинг()
	РаспределенныеПартнеры = РаспределитьПартнеровПоИсполнителям();
	
	МассивФормДляОткрытия = Новый Массив();
	
	Для Каждого КлючЗначение Из РаспределенныеПартнеры Цикл
		ТекПользователь = КлючЗначение.Ключ;
		ТекПартнеры = КлючЗначение.Значение;
		
		ПараметрыФормы = Новый Структура;
		
		ЗначенияЗаполнения	= Новый Структура;
		ЗначенияЗаполнения.Вставить("Проект", Проект);
		ЗначенияЗаполнения.Вставить("Ответственный", ТекПользователь);
		ЗначенияЗаполнения.Вставить("Тема", Тема);
		ЗначенияЗаполнения.Вставить("Важность", Важность);
		//ЗначенияЗаполнения.Вставить("Опрос", Опрос);
		ЗначенияЗаполнения.Вставить("МаркетинговоеМероприятие", МаркетинговоеМероприятие);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ТекстHTML = "";
		СтруктураВложений = Неопределено;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, СтруктураВложений);
		ПараметрыФормы.Вставить("ТекстHTML",	ТекстHTML);
		ПараметрыФормы.Вставить("Вложения",		СтруктураВложений);
		
		ФормаТелемаркетинга = ПолучитьФорму("Документ.CRM_Телемаркетинг.ФормаОбъекта", ПараметрыФормы);
		
		Для Каждого СтрокаТаблицы Из ТекПартнеры Цикл
			
			НоваяСтрока = ФормаТелемаркетинга.Объект.Участники.Добавить();
			НоваяСтрока.Партнер				 = СтрокаТаблицы.Партнер;
			НоваяСтрока.КонтактноеЛицо		 = СтрокаТаблицы.КонтактноеЛицо;
			НоваяСтрока.Телефон				 = СтрокаТаблицы.Телефон;
			
		КонецЦикла; 
		
		ФормаТелемаркетинга.Модифицированность = Истина;
		
		МассивФормДляОткрытия.Добавить(ФормаТелемаркетинга);
		
	КонецЦикла;
	
	Если МассивФормДляОткрытия.Количество() > 0 Тогда
		Для Каждого ФормаДляОткрытия Из МассивФормДляОткрытия Цикл
			ФормаДляОткрытия.Открыть();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  Ссылка       - Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиенте
Процедура СоздатьSMSСообщение()
	
	ПараметрыФормы = Новый Структура;
	ЗначенияЗаполнения	= Новый Структура;
	ЗначенияЗаполнения.Вставить("Ответственный",				Ответственный);
	ЗначенияЗаполнения.Вставить("sms4bАвтотекстБулево",			АвтоТекст);
	ЗначенияЗаполнения.Вставить("sms4bФлагАктуальность",		ФлагАктуальностьСМС);
	ЗначенияЗаполнения.Вставить("Актуальность",					АктуальностьСМС);
	ЗначенияЗаполнения.Вставить("sms4bРавномернаяРассылка",		РавномернаяРассылкаСМС);
	ЗначенияЗаполнения.Вставить("sms4bНеОтправлятьSMS",			НеОтправлятьСМС);
	ЗначенияЗаполнения.Вставить("sms4bКонецПериодаЗапрета",		КонецПериодаЗапретаСМС);
	ЗначенияЗаполнения.Вставить("sms4bНачалоПериодаЗапрета",	НачалоПериодаЗапретаСМС);
	ЗначенияЗаполнения.Вставить("НачалоОтправки",				НачалоОтправкиСМС);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ФормаРассылки = ПолучитьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	НовыйСписок = "";
	Для Каждого СтрокаТаблицыКлиентов Из ТаблицаКонтактов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыКлиентов.Телефон) Тогда Продолжить; КонецЕсли;
		Получатель = ?(СтрокаТаблицыКлиентов.Принадлежность,СтрокаТаблицыКлиентов.КонтактноеЛицо,СтрокаТаблицыКлиентов.Партнер);
		СтрокаСМС							= ФормаРассылки.Объект.Адресаты.Добавить();
		СтрокаСМС.Контакт					= Получатель;
		СтрокаСМС.ПредставлениеКонтакта 	= ПолучитьЗначениеРеквизита(Получатель, "Наименование");
		СтрокаСМС.КакСвязаться				= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(СтрокаТаблицыКлиентов.Телефон);
		НовыйСписок = НовыйСписок + ", " + СтрокаСМС.Контакт;
	КонецЦикла;
	ФормаРассылки.Объект.СписокУчастников			= ?(СтрДлина(НовыйСписок) > 2, Сред(НовыйСписок, 3), "");
	ФормаРассылки.Объект.ТекстСообщения				= Содержание;
	ФормаРассылки.Объект.sms4bРавномернаяРассылка	= РавномернаяРассылкаСМС;
	ФормаРассылки.Модифицированность				= Истина;
	ФормаРассылки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьДействиеПоПродвижению()
	
	Успешно = Истина;	
	
	Попытка
		
		Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки") Тогда
			
			ОбработатьКартинкиВставленныеИзИнтернета();
			СоздатьРассылкуЭлектронныхПисем();
			
		ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки") Тогда
			
			СоздатьSMSСообщение()
			
		ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона") Тогда
			
			ОбработатьКартинкиВставленныеИзИнтернета();			
			СоздатьТелемаркетинг();
			
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), СтатусСообщения.Внимание);
		Успешно = Ложь;
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

&НаСервере
Процедура ДобавитьПользователейГруппеПользователей(ГруппаПользователей)
	Если Не ЗначениеЗаполнено(ГруппаПользователей) 
		Или (ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.ГруппыПользователей") 
			И ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ГруппаПользователей) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		МассивПользователиГруппы = CRM_УправлениеДоступомПовтИсп.ПолучитьПользователейПодразделения(ГруппаПользователей);
	Иначе
		МассивПользователиГруппы = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(ГруппаПользователей, Истина);
	КонецЕсли;
	Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
		НайденныеСтроки = ТаблицаИсполнителей.НайтиСтроки(Новый Структура("Пользователь", ПользовательСсылка));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаИсполнителей.Добавить();
			НоваяСтрока.Пользователь = ПользовательСсылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьВыбранныхИсполнителей(Форма)
	Форма.ВыбранныеИсполнители.Очистить();
	
	МассивИсполнителей = Новый Массив();
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаИсполнителей Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Пользователь) Тогда
			МассивИсполнителей.Добавить(СтрокаТаблицы.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Форма.ВыбранныеИсполнители.ЗагрузитьЗначения(МассивИсполнителей);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныхИсполнителейПоОтветственнымМенеджерамКлиентов()
	ВыбранныеИсполнители.Очистить();
	
	МассивИсполнителей = Новый Массив();
	
	МассивПартнеры = Новый Массив();
	Для Каждого СтрокаТаблицы Из ТаблицаКонтактов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Партнер) И ТипЗнч(СтрокаТаблицы.Партнер) = Тип("СправочникСсылка.Партнеры") И МассивПартнеры.Найти(СтрокаТаблицы.Партнер) = Неопределено Тогда
			МассивПартнеры.Добавить(СтрокаТаблицы.Партнер);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В (&МассивПартнеры)
	|");
	Запрос.УстановитьПараметр("МассивПартнеры", МассивПартнеры);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ОсновнойМенеджер) Тогда
			Если МассивИсполнителей.Найти(Выборка.ОсновнойМенеджер) = Неопределено Тогда
				МассивИсполнителей.Добавить(Выборка.ОсновнойМенеджер);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ПользовательОтветственныйПоУмолчанию) Тогда
			Если МассивИсполнителей.Найти(ПользовательОтветственныйПоУмолчанию) = Неопределено Тогда
				МассивИсполнителей.Добавить(ПользовательОтветственныйПоУмолчанию);
			КонецЕсли;	
		Иначе
			// Клиенту не назначен ответственный менеджер и не заполнен реквизит ПользовательОтветственныйПоУмолчанию.
			ВыбранныеИсполнители.Очистить();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеИсполнители.ЗагрузитьЗначения(МассивИсполнителей);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(УчетнаяЗапись)
	Возврат УчетнаяЗапись.ИспользоватьДляОтправки;
КонецФункции

&НаСервере
Процедура ОбработатьКартинкиВставленныеИзИнтернета()
	ТекстHTML = "";
	ТаблицаВложений = Новый Структура;
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ТаблицаВложений);
	// +Обрабатываем картинки вставленные из интернета.
	МассивЭлементов = ТекстПисьмаФорматированныйДокумент.ПолучитьЭлементы();
	Если Вложения.Количество() > 0 Тогда
		Сч = Вложения.Количество() + 1;
	Иначе		
		Сч = 1;
	КонецЕсли;		
	Для Каждого Элемент Из МассивЭлементов Цикл
		СоответствиеКартинокИСсылок = Новый Соответствие;
		// Обрабатываем все картинки, вставленные из буфера.
		Если ТипЗнч(Элемент) = ТИП("КартинкаФорматированногоДокумента") Тогда
			// Если у картинки есть ссылка, значит это не вложение, а картинка из интернета.
			Если ТипЗнч(Элемент.Картинка) = Тип("Строка") Тогда
				СсылкаНаКартинку = Элемент.Картинка;
				Если ЗначениеЗаполнено(Элемент.НавигационнаяСсылка) Тогда 
					СоответствиеКартинокИСсылок.Вставить(СсылкаНаКартинку, Элемент.НавигационнаяСсылка);
				КонецЕсли;					
				РезультатСкаченногоФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(СсылкаНаКартинку);
				РасширениеСсылки = CRM_УправлениеЭлектроннойПочтой.ОбработатьСсылкуДляПолученияРасширения(СсылкаНаКартинку);
				Если РезультатСкаченногоФайла.Свойство("Путь") Тогда
					ИмяФайла = "Img000" + Сч;
					ДобавитьВоВложенияКартинкуИзИнтернета(ИмяФайла, РасширениеСсылки, РезультатСкаченногоФайла.Путь);
					ТекстHTML = ВставитьКартинкуВТекстHTML(ТекстHTML, ИмяФайла, СсылкаНаКартинку, СоответствиеКартинокИСсылок);					
					Сч = Сч + 1;									
				КонецЕсли
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла;	
	// -Обрабатываем картинки вставленные из интернета.
	
	// Теперь добавляем в "Таблицу Вложений" (структуру, полученную ранее) из вложений картинки, вставленные из интернета 
	// для корректного отображения поля "Форматированный документ".
	Для Каждого СтрокаВложения Из Вложения Цикл
		Если ЗначениеЗаполнено(СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор)
			И НЕ СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
			
			ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(СтрокаВложения.ИмяФайлаНаКомпьютере);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				
				ТаблицаВложений.Вставить(СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор, Новый Картинка(ДвоичныеДанныеКартинки));
				
			КонецЕсли;
		Иначе
			СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЕсли;	
	КонецЦикла;
	
	Если ТаблицаВложений.Количество() = 0 Тогда
		ТаблицаВложений.Вставить("Пусто");
	КонецЕсли;
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTML, ТаблицаВложений); 
КонецПроцедуры	

&НаСервере
Функция ВставитьКартинкуВТекстHTML(ТекстHTML, ИмяФайла, СсылкаНаКартинку, СоответствиеКартинокИСсылок)
	Сч = 1;
	Пока Сч <= СтрДлина(ТекстHTML) Цикл
		КусокТекста = Сред(ТекстHTML, Сч,9);
		Если КусокТекста = "<a target" Тогда
			ТекстДляАнализа = Сред(ТекстHTML, Сч, 250); 
			ВхождениеПодстроки = Найти(ТекстДляАнализа, "</a>");
			Если ВхождениеПодстроки > 0 Тогда
				ТекстHTMLСКартинкой = Лев(ТекстДляАнализа, ВхождениеПодстроки - 1);
				Если Найти(ТекстHTMLСКартинкой, СсылкаНаКартинку) > 0 Тогда 
					ШиринаИВысотаИзображения = CRM_УправлениеЭлектроннойПочтой.ВычислитьВысотуИШиринуИзображения(ТекстHTMLСКартинкой);
					СсылкаДляВставки = СоответствиеКартинокИСсылок.Получить(СсылкаНаКартинку);
					Если ЗначениеЗаполнено(СсылкаДляВставки) Тогда
						ТекстЗамены = "<a target='_blank' href='" + СсылкаДляВставки + "'> <img src=" + "'" + ИмяФайла + "' " + ШиринаИВысотаИзображения + "/>";					
					Иначе
						ТекстЗамены = "<img src=" + "'" + ИмяФайла + "' " + ШиринаИВысотаИзображения + "/>";
					КонецЕсли;						
					ТекстHTML = СтрЗаменить(ТекстHTML, ТекстHTMLСКартинкой, ТекстЗамены);
					Возврат ТекстHTML;
				КонецЕсли;					
			КонецЕсли;				
		КонецЕсли;
		Сч = Сч + 1;									
	КонецЦикла;
	// Обрабатываем текст который не содержит <a target, а сразу содержит "<img src=", всё то же самое.
	Сч = 1;
	Пока Сч <= СтрДлина(ТекстHTML) Цикл
		КусокТекста = Сред(ТекстHTML, Сч,9);
		Если КусокТекста = "<img src=" Тогда
			ТекстДляАнализа = Сред(ТекстHTML, Сч, 250); 
			ВхождениеПодстроки = Найти(ТекстДляАнализа, "/>");
			Если ВхождениеПодстроки > 0 Тогда
				ТекстHTMLСКартинкой = Лев(ТекстДляАнализа, ВхождениеПодстроки - 1);
				Если Найти(ТекстHTMLСКартинкой, СсылкаНаКартинку) > 0 Тогда 
					ШиринаИВысотаИзображения = CRM_УправлениеЭлектроннойПочтой.ВычислитьВысотуИШиринуИзображения(ТекстHTMLСКартинкой);
					ТекстЗамены = "<img src=" + "'" + ИмяФайла + "' " + ШиринаИВысотаИзображения; //+ "/>";
					ТекстHTML = СтрЗаменить(ТекстHTML, ТекстHTMLСКартинкой, ТекстЗамены);
					Возврат ТекстHTML;
				КонецЕсли;					
			КонецЕсли;				
		КонецЕсли;
		Сч = Сч + 1;									
	КонецЦикла;
	Возврат ТекстHTML;	
КонецФункции	

// Процедура добавляет в Таблицу значений "Вложения" (реквизит формы)
// вставленную картинку из интернета, чтобы потом её отображать в поле 
// "Форматированный документ".
// 
// Параметры:
//   ИмяФайла - Строка --- Имя файла для добавления в таблицу вложений (без расширения).
//   РасширениеФайла - Строка --- Расширение файла (всё, что после точки).
//   ПутьКВременномуХранилищу - Строка --- Путь к временному хранилищу, где хранится добавленная картинка.
//
&НаСервере
Процедура ДобавитьВоВложенияКартинкуИзИнтернета(ИмяФайла, РасширениеФайла, ПутьКВременномуХранилищу)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПутьКВременномуХранилищу);
	новСтр						= Вложения.Добавить();
	новСтр.Расположение			= 4;
	новСтр.ИмяФайла				= ИмяФайла;
	новСтр.ИмяФайлаНаКомпьютере	= ПутьКВременномуХранилищу;
	новСтр.ИндексКартинки		= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);
	новСтр.Размер				= ДвоичныеДанные.Размер();
	РазмерВложения				= Цел(новСтр.Размер/1024);
	новСтр.РазмерСтрокой   		= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
	новСтр.ИДФайлаЭлектронногоПисьмаОтбор = ИмяФайла;	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И ЗначениеПеретаскивания[0].ЭтоФайл())
		Или КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания))
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания[0]))) Тогда
		//
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДанныеФормыЭлементДерева") Тогда
		бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		Попытка
			Если КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания.Ссылка)) Тогда
				бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Истина;
			КонецЕсли;
		Исключение
			бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		КонецПопытки;
		Возврат бПеретаскиваетсяПрисоединенныйФайлСВерсионированием;
		
	Иначе
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлПеретаскиванием(МассивФайловИлиФайл)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	МассивФайловДляОбработки = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		МассивФайловДляОбработки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если МассивФайловДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый СписокЗначений();
	
	Для Каждого Файл Из МассивФайловДляОбработки Цикл
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			
			// это файл			
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			Если НЕ РаботаСФайламиСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;															
			
			СписокВложений.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), УникальныйИдентификатор), Файл.Имя);
			
		ИначеЕсли ТипЗнч(Файл) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			// Это присоединенный файл с версионированием.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер, РеквизитыФайла.Расширение, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл.Ссылка, УникальныйИдентификатор, Истина);
			
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		Иначе
			
			// Это элемент справочника *ПрисоединенныеФайлы.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер, РеквизитыФайла.Расширение, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;															
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокВложений.Количество() > 0 Тогда
		
		Если ПодключеноРасширениеРаботыСФайлами Тогда
			
			Для Каждого ЭлементСпискаФайлов Из СписокВложений Цикл
				новСтр = Вложения.Добавить();
				
				новСтр.Расположение = 4;
				новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
				Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(новСтр.ИмяФайла);
				новСтр.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
				новСтр.ИмяФайлаНаКомпьютере = ЭлементСпискаФайлов.Значение;
				новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
				новСтр.Размер = РазмерФайла(ЭлементСпискаФайлов.Значение);
				РазмерВложения = Цел(новСтр.Размер/1024);
				новСтр.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			КонецЦикла;
			
			Модифицированность = Истина;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
	//СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыПроверяемогоФайла(Файл)
	Возврат Новый Структура("Размер, Расширение", Файл.Размер, Файл.Расширение);
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТБОРАМИ

&НаСервере
Функция СформироватьТекстЗапросаКлиенты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ *, 
	|	Партнеры.Ссылка КАК Партнер 
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ НЕ Партнеры.ПометкаУдаления
	|	И &УсловиеЭтоГруппа
	|";
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеЭтоГруппа", "И НЕ Партнеры.ЭтоГруппа");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеЭтоГруппа", "");
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция СформироватьТекстЗапросаКЛ()
	
	ТекстЗапроса = 
	"	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ  *,
	|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	НЕ КонтактныеЛицаПартнеров.ПометкаУдаления		
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьСКД(ТекстЗапроса)
	// Создание и настройка схемы компоновки данных.
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;
	
	Настройки = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	Возврат  СКДДанные;

КонецФункции

&НаСервере
Процедура ИнициализироватьСКДОтборовКлиентов()
	
	//НастройкиКлиентов.Настройки.Отбор.Элементы.Очистить();
	
	ТекстЗапроса = СформироватьТекстЗапросаКлиенты();
	СКД = ПолучитьСКД(ТекстЗапроса);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	НастройкиКлиентов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСКДОтборовКЛ()
	
	//НастройкиКЛ.Настройки.Отбор.Элементы.Очистить();
	
	ТекстЗапроса = СформироватьТекстЗапросаКЛ();
	СКД = ПолучитьСКД(ТекстЗапроса);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	НастройкиКЛ.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыКлиентов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтборыКлиентовЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить таблицу отборов?'"), РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыКлиентовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		НастройкиКлиентов.Настройки.Отбор.Элементы.Очистить();	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыКЛ(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтборыКЛЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить таблицу отборов?'"), РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыКЛЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		НастройкиКЛ.Настройки.Отбор.Элементы.Очистить();	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьАктивныеОтборыКлиентов()
	
	ЕстьОтборы = Ложь;
	
	Для Каждого ЭлементОтбора Из НастройкиКлиентов.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОтборы;
	
КонецФункции	

&НаКлиенте
Функция ЕстьАктивныеОтборыКЛ()
	
	ЕстьОтборы = Ложь;
	
	Для Каждого ЭлементОтбора Из НастройкиКЛ.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОтборы;
	
КонецФункции	

&НаКлиенте
Процедура ВключатьКлиентовПриИзменении(Элемент)
	
	Элементы.СтраницаКлиенты.Видимость = ВключатьКлиентов;
	Если ВключатьКлиентов Тогда
		Элементы.ГруппаСтраницыКлиентыКЛ.ТекущаяСтраница = Элементы.СтраницаКлиенты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключатьКЛПриИзменении(Элемент)
	
	Элементы.СтраницаКЛ.Видимость = ВключатьКЛ;
	Если ВключатьКЛ Тогда
		Элементы.ГруппаСтраницыКлиентыКЛ.ТекущаяСтраница = Элементы.СтраницаКЛ;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С SMS

&НаКлиенте
Процедура ВставитьШаблонСМС(Команда)
    Если НЕ ПустаяСтрока(Содержание) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВставитьШаблонСМСПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текст сообщения будет очищен. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	Иначе	
		ВставитьШаблонСМСПродолжение(Неопределено, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШаблонСМСПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Содержание = "";
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВставитьШаблонСМСЗавершение", ЭтотОбъект);
	Отбор = Новый Структура("CRM_ШаблонОповещения", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.sms4bШаблоны.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШаблонСМСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	Шаблон = РезультатВыбора;
	ЗаполнитьПоШаблонуСМС();
	ЕстьТэги();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоШаблонуСМС()
	Содержание = Шаблон.Содержание;
КонецФункции

&НаКлиенте
Процедура Транслитерация(Команда)
	Кнопка = Элементы.Транслитерация;
	Если ЗначениеЗаполнено(Содержание) Тогда
		Если Кнопка.Заголовок =  НСтр("ru = 'Транслитерация'") Тогда
			Транслитерация = Истина;
			Кнопка.Заголовок =  НСтр("ru = 'Отмена транслитерации'");
			Если Автотекст Тогда
				Элементы.ДекорацияТранслитерацияВключена.Заголовок = НСтр("ru ='из-за наличия тегов транслитерация выполнится в созданном SMS'");
			Иначе	
				ТекстСодержанияДоТранслитерации = Содержание;
				Содержание = ОтправкаSMSЧерезSMS4B.Транслитерация(Содержание);
			КонецЕсли;
		Иначе
			Транслитерация = Ложь;
			Кнопка.Заголовок =  НСтр("ru = 'Транслитерация'");
			Если Автотекст Тогда
				Элементы.ДекорацияТранслитерацияВключена.Заголовок = "";
			Иначе	
				Содержание = ТекстСодержанияДоТранслитерации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонстанты()
	Структура = Новый Структура;
    Структура.Вставить("НачалоПериодаЗапрета",	Константы.sms4bНачалоПериодаЗапрета.Получить());
    Структура.Вставить("КонецПериодаЗапрета",	Константы.sms4bКонецПериодаЗапрета.Получить());
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	УстановитьПривилегированныйРежим(Истина);
	ИмяОтправителя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ИмяОтправителя");
	УстановитьПривилегированныйРежим(Ложь);
	Структура.Вставить("ИмяОтправителя",		?(ИмяОтправителя = Неопределено, "", ИмяОтправителя));
    Структура.Вставить("НачалоПериодаЗапрета",	Константы.sms4bНачалоПериодаЗапрета.Получить());
    Структура.Вставить("КонецПериодаЗапрета",	Константы.sms4bКонецПериодаЗапрета.Получить());
    Структура.Вставить("СрокЖизниSMS",			Константы.sms4bСрокЖизниSMS.Получить());
    Структура.Вставить("ТекущийПользователь",	ПараметрыСеанса.ТекущийПользователь);
    Структура.Вставить("ИспользоватьСМС",		ЗначениеЗаполнено(Константы.ПровайдерSMS.Получить()));
    Возврат Структура;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВставитьТэгСМС(Команда)
	ИмяКоманды = СтрЗаменить(Команда.Имя,"_СМС","");
	МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды",ИмяКоманды));
	Тэг = МассивСтрок[0].Тэг;
	Элементы.Содержание.ВыделенныйТекст = Тэг;
КонецПроцедуры

&НаКлиенте
// Функция проверяет текст сообщения на наличие тэгов.
//
Функция ЕстьТэги()
	ЕстьТэги = Ложь;
	Текст = Содержание;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если Найти(Текст, СтрокаАвтотекста.Тэг) > 0 Тогда
			ЕстьТэги = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Автотекст = ЕстьТэги;
	Возврат ЕстьТэги;
КонецФункции

&НаКлиенте
Процедура НачалоОтправкиСМСПриИзменении(Элемент)
	Если НачалоОтправкиСМС < ТекущаяДата() Тогда
		НачалоОтправкиСМС = ТекущаяДата();
	КонецЕсли;
	НоваяАктуальность = НачалоОтправкиСМС + (СтруктураКонстант.СрокЖизниSMS * 3600);
	Если ФлагАктуальностьСМС И (АктуальностьСМС < НоваяАктуальность) Тогда
    	АктуальностьСМС = НоваяАктуальность;
	КонецЕсли;
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура РавномернаяРассылкаПриИзменении()
	КоличествоПолучателей = ТаблицаКонтактов.Количество();
	Если РавномернаяРассылкаСМС И (КоличествоПолучателей > 0) Тогда
		Дата1 = НачалоОтправкиСМС;
		Дата2 = АктуальностьСМС;
		Если НЕ ЗначениеЗаполнено(Дата2) Тогда
			Дата2 = Дата1 + (СтруктураКонстант.СрокЖизниSMS * 3600);
		КонецЕсли;
		Если НеОтправлятьСМС Тогда
			Всего = CRM_ОбщегоНазначенияКлиент.ИсключениеВременногоПериода(Дата1, Дата2, НачалоПериодаЗапретаСМС, КонецПериодаЗапретаСМС);
		Иначе
			Всего = CRM_ОбщегоНазначенияКлиент.ИсключениеВременногоПериода(Дата1, Дата2);
		КонецЕсли;
		Интервал		= Всего / КоличествоПолучателей;
		ТекстВсего		= CRM_ОбщегоНазначенияКлиент.ПолучитьПредставлениеВремени(Всего);
		ТекстИнтервала	= CRM_ОбщегоНазначенияКлиент.ПолучитьПредставлениеВремени(Интервал);
		Элементы.ВремяРассылки.Заголовок = НСтр("ru='В течении '") + ТекстВсего + НСтр("ru=' с интервалом '") + ТекстИнтервала;
    Иначе
    	Элементы.ВремяРассылки.Заголовок = "";
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФлагАктуальностьСМСПриИзменении(Элемент)
	Если ФлагАктуальностьСМС Тогда
		Элементы.АктуальностьСМС.Доступность = Истина;
		АктуальностьСМС = НачалоОтправкиСМС + (СтруктураКонстант.СрокЖизниSMS * 3600);
	Иначе
		Элементы.АктуальностьСМС.Доступность = Ложь;
		АктуальностьСМС = "";
    КонецЕсли;
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура НеОтправлятьСМСПриИзменении(Элемент)
	Элемент = НеОтправлятьСМС;
    Элементы.НачалоПериодаЗапретаСМС.Доступность = Элемент;
	Элементы.КонецПериодаЗапретаСМС.Доступность  = Элемент;
    Если Элемент Тогда
		НачалоПериодаЗапретаСМС = СтруктураКонстант.НачалоПериодаЗапрета;
		КонецПериодаЗапретаСМС  = СтруктураКонстант.КонецПериодаЗапрета;
	Иначе
		НачалоПериодаЗапретаСМС = "";
		КонецПериодаЗапретаСМС  = "";
    КонецЕсли;
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура НачалоОтправкиСМСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = НачалоОтправкиСМС - НачалоДня(НачалоОтправкиСМС);
	НачалоОтправкиСМС = ВыбранноеЗначение + ВыбранноеВремя;
	НеОтправлятьСМСПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АктуальностьСМСПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(АктуальностьСМС) Тогда
    	АктуальностьСМС = НачалоОтправкиСМС + (СтруктураКонстант.СрокЖизниSMS * 3600);
    КонецЕсли; 
	Если АктуальностьСМС < НачалоОтправкиСМС + 900 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Время актуальности сообщения не может быть меньше 15 минут от времени начала рассылки'"));
		АктуальностьСМС = НачалоОтправкиСМС + 900;
	КонецЕсли;
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура АктуальностьСМСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = АктуальностьСМС - НачалоДня(АктуальностьСМС);
	АктуальностьСМС = ВыбранноеЗначение + ВыбранноеВремя;
	АктуальностьСМСПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РавномернаяРассылкаСМСПриИзменении(Элемент)
	РавномернаяРассылкаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаЗапретаСМСПриИзменении(Элемент)
	НачалоПериодаЗапретаСМС = НачалоЧаса(НачалоПериодаЗапретаСМС);
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаЗапретаСМСРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НачалоПериодаЗапретаСМС = Дата('00010101') И (Направление = -1) Тогда
		НачалоПериодаЗапретаСМС = НачалоПериодаЗапретаСМС + 82800;
	Иначе	
		НачалоПериодаЗапретаСМС = НачалоПериодаЗапретаСМС + 3600 * Направление;
	КонецЕсли;	
	РавномернаяРассылкаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаЗапретаСМСПриИзменении(Элемент)
	КонецПериодаЗапретаСМС = НачалоЧаса(КонецПериодаЗапретаСМС);
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаЗапретаСМСРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если КонецПериодаЗапретаСМС = Дата('00010101') И (Направление = -1) Тогда
		КонецПериодаЗапретаСМС = КонецПериодаЗапретаСМС + 82800;
	Иначе	
		КонецПериодаЗапретаСМС = КонецПериодаЗапретаСМС + 3600 * Направление;
	КонецЕсли;	
	РавномернаяРассылкаПриИзменении();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЧТОЙ

&НаКлиенте
Процедура ВыбратьШаблонАвтотекста(Команда)
	
	ТекстДок = СокрЛП(СтрЗаменить(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст(), " ", ""));
	
	ТекстHTML = "";
	ВложенияHTML = Новый Структура();
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенияHTML);
	
	ПодписьАвтора = ПолучитьПодписьПользователя(УчетнаяЗапись, Автор);
	
	Если НЕ ПодписьАвтора = Неопределено Тогда
		ТекстПодписиАвтора = СокрЛП(СтрЗаменить(ПодписьАвтора.ПолучитьТекст(), " ", ""))
	Иначе
		ТекстПодписиАвтора = "";
	КонецЕсли;
	
	Если ((ЗначениеЗаполнено(ТекстДок) Или (ТипЗнч(ВложенияHTML) = Тип("Структура") И ВложенияHTML.Количество() > 0)) И ТекстДок <> ТекстПодписиАвтора)
	 Или (Вложения.Количество() > 0) Тогда
	 
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		
		КнопкиДиалогаВопрос.Добавить("ЗаменитьТекстИВложения", "Заменить");
		КнопкиДиалогаВопрос.Добавить("ДополнитьТекстИВложения", "Дополнить");
		КнопкиДиалогаВопрос.Добавить("Отмена", "Отмена");
		
		ТекстВопроса = НСтр("ru = 'Как поступить с текущим текстом и вложениями?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыбратьШаблонОбработатьРезультатВопроса", ЭтотОбъект), ТекстВопроса, КнопкиДиалогаВопрос,,,"Заполнение из шаблона");

	Иначе
		
		ВыбратьШаблонАвтотекстаПродолжение(Ложь);
		
	КонецЕсли;
	
	//ТекстДок = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	//ТекстHTML = "";
	//ВложенияHTML = Новый Структура();
	//ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенияHTML);
	//
	//Если ЗначениеЗаполнено(ТекстДок) Или (ТипЗнч(ВложенияHTML) = Тип("Структура") И ВложенияHTML.Количество() > 0) Тогда
	//	
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Ответ = Вопрос(НСтр("ru = 'Содержание будет перезаполнено.
	//							  |Продолжить?'"), Режим, 0);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		Шаблон = ОткрытьФормуМодально("Справочник.CRM_ШаблоныРассылки.Форма.ФормаВыбора", , ЭтаФорма);
	//	Иначе
	//		Шаблон = Неопределено;
	//	КонецЕсли;
	//Иначе
	//	Шаблон = ОткрытьФормуМодально("Справочник.CRM_ШаблоныРассылки.Форма.ФормаВыбора", , ЭтаФорма);
	//КонецЕсли;
	//
	//Если Не Шаблон = Неопределено Тогда
	//	Если Не ЗначениеЗаполнено(Тема) Тогда
	//		Тема = Строка(Шаблон);
	//	КонецЕсли;
	//	ЗаполнитьПоШаблону();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ЗаменитьТекстИВложения" Тогда
		
		ВыбратьШаблонАвтотекстаПродолжение(Ложь);
	
	ИначеЕсли РезультатВопроса = "ДополнитьТекстИВложения" Тогда
		
		ВыбратьШаблонАвтотекстаПродолжение();
		
	КонецЕсли;	
	
КонецПроцедуры// ВыбратьШаблонОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры)	

&НаКлиенте
Процедура ВыбратьШаблонАвтотекстаПродолжение(ДополнитьТекстИВложения = Истина)
	
	ДополнительныеПараметры = Новый Структура("ДополнитьТекстИВложения", ДополнитьТекстИВложения);
	
	ОписаниеОповещенияФормаВыбора = Новый ОписаниеОповещения("ВыбратьШаблонАвтотекстаОкончание", ЭтотОбъект, ДополнительныеПараметры);
	
	Отбор = Новый Структура("ШаблонОповещения", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.CRM_ШаблоныРассылки.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещенияФормаВыбора);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьТемуШаблона(Шаблон)
	
	Возврат Шаблон.Тема;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьШаблонАвтотекстаОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ (РезультатВыбора = Неопределено) Тогда
		
		Шаблон = РезультатВыбора;
		
		Шаблон_Тема = ВернутьТемуШаблона(Шаблон);
		Если ЗначениеЗаполнено(Шаблон_Тема) Тогда
			
			Тема = Шаблон_Тема;
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ДополнитьТекстИВложения") Тогда
			
			ДополнитьТекстИВложения = ДополнительныеПараметры.ДополнитьТекстИВложения;
			
		Иначе
			
			ДополнитьТекстИВложения = Ложь;
		
		КонецЕсли; 
		
		ЗаполнитьПоШаблону(ДополнитьТекстИВложения);
		
		//Элементы.Вложения.Видимость = (Вложения.Количество() > 0);
		
		//СформироватьПредставлениеВложений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьФорматированныйДокументПоШаблону(ПереданныйШаблон)
	
	ТекстШаблонаФорматированныйДокумент	= Новый ФорматированныйДокумент;
	СтруктураВложений					= Новый Структура;
	
	ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(ПереданныйШаблон, ПереданныйШаблон.Текст, СтруктураВложений);
	
	ТекстШаблонаФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
	Возврат ТекстШаблонаФорматированныйДокумент;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоШаблону(ДополнитьТекстИВложения)
	
	ФорматированныйДокументШаблон = ВернутьФорматированныйДокументПоШаблону(Шаблон);
	
	Если Не ДополнитьТекстИВложения Тогда
		
		СтруктураВложенийПоШаблону = Неопределено;
		ТекстHTMLПоШаблону = "";
		ФорматированныйДокументШаблон.ПолучитьHTML(ТекстHTMLПоШаблону, СтруктураВложенийПоШаблону);
		
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTMLПоШаблону, СтруктураВложенийПоШаблону);
		
		ПодписьПользователя = ПолучитьПодписьПользователя(УчетнаяЗапись, Автор);
		
		Если ПодписьПользователя <> Неопределено Тогда
			ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПодписьПользователя);
		КонецЕсли;
		
		Для Каждого ТекущееВложение Из Вложения Цикл
			Если ТекущееВложение.Расположение = 0 И НЕ ЗначениеЗаполнено(ТекущееВложение.ИДФайлаЭлектронногоПисьма) Тогда
				УдаленныеВложения.Добавить(ТекущееВложение.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Вложения.Очистить();
	Иначе
		ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ФорматированныйДокументШаблон, Истина);
	КонецЕсли;
	
	//Объект.Текст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	
	// Заполнение вложений по пересылаемому письму.
	табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Шаблон, Истина);
	
	Для Каждого Стр Из табВложения Цикл
		Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
			ДвоичныеДанныеВложения = РаботаСФайлами.ДвоичныеДанныеФайла(Стр.Ссылка);
			Если ДвоичныеДанныеВложения <> Неопределено Тогда
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВложения, УникальныйИдентификатор);
			
				новСтр = Вложения.Добавить();
				//новСтр.Ссылка								= Стр.Ссылка;
				новСтр.ИмяФайла								= Стр.ИмяФайла;
				новСтр.ИмяФайлаНаКомпьютере					= АдресВХранилище;
				новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
				новСтр.Размер								= Стр.Размер;
				РазмерВложения								= Цел(новСтр.Размер/1024);
				новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.РазмерПредставление					= Стр.РазмерПредставление;
				новСтр.Расположение							= 4;
				новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
				новСтр.ИДФайлаЭлектронногоПисьма	= "#";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Вложения.ОтборСтрок = Неопределено;
	Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлыШаблонаРассылки(ШаблонСсылка, ВложенияHTML = Истина)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_ШаблоныРассылкиПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ШаблонРассылка
	|	" + ?(ВложенияHTML, "И ВЫРАЗИТЬ(Файлы.ИДФайлаЭлектронногоПисьма КАК СТРОКА(10)) <> """"", "И ВЫРАЗИТЬ(Файлы.ИДФайлаЭлектронногоПисьма КАК СТРОКА(10)) = """"");
	
	Запрос.УстановитьПараметр("ШаблонРассылка", ШаблонСсылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ВставитьТэгВФорматированныйДокумент(ИмяКоманды)
	
	МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды",ИмяКоманды));
	Тэг = МассивСтрок[0].Тэг;
	
	ПозицияНачала		= 0;
	ПозицияОкончания	= 0;
	Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	Начало		= ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПозицияНачала);
	Окончание	= ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
	Если НЕ Начало = Окончание Тогда
		ТекстПисьмаФорматированныйДокумент.Удалить(ПозицияНачала, ПозицияОкончания);
		ПозицияОкончания = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(Начало);
	КонецЕсли;
	ТекстПисьмаФорматированныйДокумент.Вставить(ПозицияОкончания, Тэг);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВставитьТэг(Команда)
	
	ВставитьТэгВФорматированныйДокумент(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'В данной учётной записи отключена отправка писем!'"));
		СтандартнаяОбработка = Ложь;				
		Возврат;
	КонецЕсли;	
	
	Если УчетнаяЗапись <> ВыбранноеЗначение Тогда
		ИзменитьПодпись(УчетнаяЗапись, ВыбранноеЗначение);
	КонецЕсли;
	
	УчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОтправительПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПодпись(ПредыдущаяУчетнаяЗапись, НоваяУчетнаяЗапись)
	
	ПараметрыПредыдущаяУЗПодписьПользователя	= ПолучитьПодписьПользователя(ПредыдущаяУчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
	ПараметрыНоваяУЗПодписьПользователя			= ПолучитьПодписьПользователя(НоваяУчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
	
	ТекстПисьмо = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	Если ПустаяСтрока(ТекстПисьмо) И НЕ ПараметрыНоваяУЗПодписьПользователя = Неопределено Тогда
		
		ТекстПисьмаФорматированныйДокумент = ПараметрыНоваяУЗПодписьПользователя;
		
	Иначе
		Если НЕ ПараметрыПредыдущаяУЗПодписьПользователя = Неопределено Тогда
			ТекстПредыдущаяУЗ = ПараметрыПредыдущаяУЗПодписьПользователя.ПолучитьТекст();
			
			Если СтрЧислоВхождений(ТекстПисьмо, ТекстПредыдущаяУЗ) > 0 Тогда
				
				КоличествоЭлементовСтараяПодпись = ПараметрыПредыдущаяУЗПодписьПользователя.Элементы.Количество();
				КоличествоЭлементовПисьмо        = ТекстПисьмаФорматированныйДокумент.Элементы.Количество();
				
				УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент,ПараметрыПредыдущаяУЗПодписьПользователя);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПараметрыНоваяУЗПодписьПользователя = Неопределено Тогда
			ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПараметрыНоваяУЗПодписьПользователя)
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СравнитьПараграфы(ПараграфЭталон,ПараграфПисьма)
	
	Если НЕ ПараграфЭталон.Элементы.Количество() = ПараграфПисьма.Элементы.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Для Инд = 0 По ПараграфЭталон.Элементы.Количество()-1 Цикл
		
		Если НЕ ТипЗнч(ПараграфЭталон.Элементы[Инд]) = ТипЗнч(ПараграфПисьма.Элементы[Инд]) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(ПараграфЭталон.Элементы[Инд]) = Тип("ТекстФорматированногоДокумента") Тогда
			Если НЕ ПараграфЭталон.Элементы[Инд].Текст = ПараграфПисьма.Элементы[Инд].Текст Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ПараграфЭталон.Элементы[Инд]) = Тип("КартинкаФорматированногоДокумента") Тогда
			Если НЕ ПараграфЭталон.Элементы[Инд].Картинка = ПараграфПисьма.Элементы[Инд].Картинка Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент, СтараяПодпись)
	
	Инд				= -1;
	МассивИнд		= Новый Массив;
	ПодписьИзменили	= Ложь;
	НачалиПоиск		= Ложь;
	Для Каждого ПараграфСтараяПодпись Из СтараяПодпись.Элементы Цикл
		
		Если ПараграфСтараяПодпись.Элементы.Количество() = 1
		И ТипЗнч(ПараграфСтараяПодпись.Элементы[0]) = Тип("ПереводСтрокиФорматированногоДокумента")
		И НЕ НачалиПоиск Тогда
			Продолжить;
		КонецЕсли;
		
		НачалиПоиск = Истина;
		
		ПараграфНайден = Ложь;
		
		ТекущийИндекс = Инд+1;
		Для Ном = ТекущийИндекс По ТекстПисьмаФорматированныйДокумент.Элементы.Количество() - 1 Цикл
			ПараграфТекстПисьма = ТекстПисьмаФорматированныйДокумент.Элементы[Ном];
			
			Если СравнитьПараграфы(ПараграфСтараяПодпись,ПараграфТекстПисьма) Тогда
				
				ПараграфНайден = Истина;
				Если Инд < 0 Тогда
					Инд = ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма);
					МассивИнд.Добавить(Инд);
				ИначеЕсли (ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма) - Инд) > 1 Тогда
					МассивИнд.Очистить();
					ПодписьИзменили = Истина;
					Прервать;
				Иначе
					Инд = ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма);
					МассивИнд.Добавить(Инд);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПараграфНайден ИЛИ ПодписьИзменили Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По МассивИнд.Количество()-1 Цикл
		
		ТекстПисьмаФорматированныйДокумент.Элементы.Удалить(МассивИнд[МассивИнд.Количество()-1-Инд]);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВЛОЖЕНИЯМИ

&НаКлиенте
Процедура ДобавитьВложение(Выбором = Ложь)
	
	Если Выбором Тогда
		Если ПодключеноРасширениеРаботыСФайлами Тогда	
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.МножественныйВыбор = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеЗавершение", ЭтотОбъект);
			НачатьПомещениеФайлов(ОписаниеОповещения, , Диалог, Ложь, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
		КонецЕсли;
	Иначе
		Если ПодключеноРасширениеРаботыСФайлами Тогда
			Если НЕ СтруктураВложенийТелаПисьма = Неопределено И СтруктураВложенийТелаПисьма.Количество() > 0 Тогда
				
				Для Каждого КлючИЗначение Из СтруктураВложенийТелаПисьма Цикл
					
					СтруктураДанных = ВернутьДанныеКартинки(КлючИЗначение);
					
					новСтр										= Вложения.Добавить();
					новСтр.Расположение							= 4;
					новСтр.ИмяФайла								= СтруктураДанных.ИмяФайла;
					новСтр.ИмяФайлаНаКомпьютере					= СтруктураДанных.ИмяФайлаНаКомпьютере;
					новСтр.ИндексКартинки						= СтруктураДанных.ИндексКартинки;
					новСтр.Размер								= РазмерФайла(СтруктураДанных.ИмяФайлаНаКомпьютере);
					РазмерВложения								= Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= СтруктураДанных.ИДФайлаЭлектронногоПисьмаОтбор;
				КонецЦикла;
				ОбновитьОтображениеДанных();
				ОбновитьКоличествоВложений(ЭтотОбъект);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		
		Для Индекс = 0 По ПомещенныеФайлы.ВГраница() Цикл
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[Индекс].Имя, ?(ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент(),"/", "\"));
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
			РасширениеФайла = ?(ПозицияТочки = 0, "", Прав(ИмяФайла, СтрДлина(ИмяФайла) - ПозицияТочки));
			
			новСтр						= Вложения.Добавить();
			новСтр.Расположение			= 4;
			новСтр.ИмяФайла				= ИмяФайла;
			новСтр.ИмяФайлаНаКомпьютере	= ПомещенныеФайлы[Индекс].Хранение;
			новСтр.ИндексКартинки		= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);
			новСтр.Размер				= РазмерФайла(ПомещенныеФайлы[Индекс].Хранение);
			РазмерВложения				= Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой   		= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;
		
		ОбновитьОтображениеДанных();
		ОбновитьКоличествоВложений(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазмерФайла(Хранение)
	Возврат ПолучитьИзВременногоХранилища(Хранение).Размер();
КонецФункции

&НаСервере
Функция ВернутьДанныеКартинки(КлючИЗначение)
	
	СтруктураДанных = Новый Структура("ИмяФайла,ИмяФайлаНаКомпьютере,ИндексКартинки,ИДФайлаЭлектронногоПисьмаОтбор");
	СтруктураДанных.ИмяФайла							= КлючИЗначение.Ключ + "." + КлючИЗначение.Значение.Формат();
	СтруктураДанных.ИмяФайлаНаКомпьютере				= ПоместитьВоВременноеХранилище(КлючИЗначение.Значение.ПолучитьДвоичныеДанные(), УникальныйИдентификатор);
	СтруктураДанных.ИндексКартинки						= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(КлючИЗначение.Значение.Формат());
	СтруктураДанных.ИДФайлаЭлектронногоПисьмаОтбор	= КлючИЗначение.Ключ;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Индекс = Вложения.Индекс(текДанные);
		Вложения.Удалить(Индекс);

		ОбновитьОтображениеДанных();
	КонецЕсли;
	ОбновитьКоличествоВложений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить()
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(текДанные.Ссылка, УникальныйИдентификатор);

	ИначеЕсли текДанные.Расположение = 2 Тогда
		#Если Не ВебКлиент Тогда
			НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), """" + текДанные.ИмяФайлаНаКомпьютере + """");
		#КонецЕсли

	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьПродолжение", ЭтотОбъект, текДанные);
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьПродолжение(Подключен, текДанные) Экспорт
	
	Если Подключен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьЗавершение", ЭтотОбъект, текДанные);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьЗавершение(ИмяКаталогаВременныхФайлов, текДанные) Экспорт
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(текДанные.ИмяФайлаНаКомпьютере);
			
	ДвоичныеДанныеФайла.Записать(ИмяКаталогаВременныхФайлов + текДанные.ИмяФайла);
			
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер),
		"""" + ИмяКаталогаВременныхФайлов + текДанные.ИмяФайла + """");		

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить()
	
	// +CRM
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(текДанные.Ссылка, УникальныйИдентификатор);
	
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ФайлВложения = Новый Файл(текДанные.ИмяФайла);
		
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение, Прав(ФайлВложения.Расширение, СтрДлина(ФайлВложения.Расширение)-1));
		
		Если РасширениеВложения = "EML" Тогда
				
			ПоказатьПредупреждение(, НСтр("ru = 'Это вложение не может быть сохранено.'"));
				
			Возврат;
				
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		
		Если ПодключеноРасширениеРаботыСФайлами Тогда
			
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = текДанные.ИмяФайла;
			ВыборФайла.Расширение = РасширениеВложения;
			ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Все файлы (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВложениеВыполнитьЗавершение", ЭтотОбъект, текДанные);					
			//ВыборФайла.Показать(ОписаниеОповещения);
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(текДанные.ИмяФайла, текДанные.ИмяФайлаНаКомпьютере);
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
			НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ВыборФайла, Ложь);
		Иначе
	#Если ВебКлиент Тогда
			ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);
	#КонецЕсли
		КонецЕсли;	
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнитьЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы <> Неопределено Тогда
		Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ПолученныеФайлы[0].Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

 &НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();
	ОбновитьКоличествоВложений(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура  ДобавитьВложениеВыполнить()
	
	ДобавитьВложение(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	УдалитьВложениеВыполнить();
	Отказ = Истина;
	ОбновитьКоличествоВложений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;    
	ПараметрыПеретаскивания.ДопустимыеДействия  = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ДобавитьПрисоединенныйФайлПеретаскиванием(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЦЕЙ КОНТАКТОВ

// Преобразовать строку полей в структуру.
//
&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВСтруктуруПолей(СтрокаПолей)
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
		Если Лев(Стр, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
			КонецЕсли;
		Иначе
			Поз = Найти(Стр, "=");
			Если Поз <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	
	Для Каждого ЭлементСписка Из Результат Цикл
		Попытка
			СтруктураВозврата.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция СформироватьСписокКИ(ТекущиеДанные, ТипКИ)
	
	Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(ТекущиеДанные.Партнер,
										?(ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо),ТекущиеДанные.КонтактноеЛицо,Неопределено),
										ТипКИ);
	
	СписокКИ = Новый СписокЗначений;
	
	Если НЕ Таб = Неопределено Тогда
		СписокЗнач = Новый СписокЗначений;
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из Таб Цикл
			
			Если ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки Тогда
				Если СтрДлина(СтрокаТаб.НомерТелефона) = 11 Тогда
					Если НЕ Сред(СтрокаТаб.НомерТелефона, 2, 1) = "9" Тогда Продолжить; КонецЕсли;
				ИначеЕсли СтрДлина(СтрокаТаб.НомерТелефона) = 10 Тогда
					Если НЕ Лев(СтрокаТаб.НомерТелефона, 1) = "9" Тогда Продолжить; КонецЕсли;
				Иначе	
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТекСсылка = СтрокаТаб.Ссылка Тогда
				СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
				СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
				СтруктураНомера.Вставить("Объект"			, СтрокаТаб.Ссылка);
				СписокКИ.Добавить(СтруктураНомера, Строка(СтрокаТаб.Ссылка));
				ТекСсылка = СтрокаТаб.Ссылка;
			КонецЕсли;
			
			СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
			СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
			СтруктураНомера.Вставить("Объект"			, СтрокаТаб.Ссылка);
			СписокКИ.Добавить(СтруктураНомера, "   "+СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуКонтактовПоОтборам()
	
	ИтоговаяТаблицаКонтактов = РеквизитФормыВЗначение("ТаблицаКонтактов");
	ИтоговаяТаблицаКонтактов.Очистить();
	
	_ТаблицаКонтактов = ИтоговаяТаблицаКонтактов.Скопировать(); 
	
	Если ВключатьКЛ Тогда
		
		ТаблицаКЛ = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(СформироватьТекстЗапросаКЛ(), НастройкиКЛ.Настройки.Отбор);
		
		Для Каждого СтрокаТаблицы Из ТаблицаКЛ Цикл
			тПартнер = СтрокаТаблицы.КонтактноеЛицо.Владелец;
			тКонтактноеЛицо = СтрокаТаблицы.КонтактноеЛицо;
			// Пропустим строки, добавленные при отборе по клиентам.
			Если ВключатьКлиентов Тогда
				Отбор = Новый Структура("Партнер, КонтактноеЛицо", тПартнер, тКонтактноеЛицо);
				Найдено = _ТаблицаКонтактов.НайтиСтроки(Отбор).Количество();
				Если Найдено > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтрокаКонтактов = _ТаблицаКонтактов.Добавить();
			СтрокаКонтактов.Партнер = тПартнер;
			СтрокаКонтактов.КонтактноеЛицо = тКонтактноеЛицо;
			Если ЗначениеЗаполнено(тПартнер.ОсновнойМенеджер) Тогда
				СтрокаКонтактов.ОсновнойМенеджер = тПартнер.ОсновнойМенеджер;
			Иначе
				СтрокаКонтактов.ОсновнойМенеджер = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	// Получим данные по настроенным отборам.
	Если ВключатьКлиентов Тогда
		
		ТаблицаКлиентов = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(СформироватьТекстЗапросаКлиенты(), НастройкиКлиентов.Настройки.Отбор);
		
		Для Каждого СтрокаТаблицы Из ТаблицаКлиентов Цикл
			
			Если _ТаблицаКонтактов.Найти(СтрокаТаблицы.Партнер,"Партнер") = Неопределено Тогда
				СтрокаКонтактов = _ТаблицаКонтактов.Добавить();
				СтрокаКонтактов.Партнер = СтрокаТаблицы.Партнер;
				СтрокаКонтактов.КонтактноеЛицо = СтрокаТаблицы.Партнер.CRM_ОсновноеКонтактноеЛицо;
				Если ЗначениеЗаполнено(СтрокаТаблицы.Партнер.ОсновнойМенеджер) Тогда
					СтрокаКонтактов.ОсновнойМенеджер = СтрокаТаблицы.Партнер.ОсновнойМенеджер;
				Иначе
					СтрокаКонтактов.ОсновнойМенеджер = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Теперь обработаем таблицу в зависимости от вида мастера.
	Если ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона Тогда
		
		Для Каждого СтрокаТаблицы Из _ТаблицаКонтактов Цикл
			
			ТекПартнер	= СтрокаТаблицы.Партнер;
			ТекКл		= СтрокаТаблицы.КонтактноеЛицо;
			ТекМенеджер = СтрокаТаблицы.ОсновнойМенеджер;
				
			СписокТелефонов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекПартнер,ТекКл),
												   Перечисления.ТипыКонтактнойИнформации.Телефон);
			
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока = ИтоговаяТаблицаКонтактов.Добавить();
				НоваяСтрока.Партнер				= ТекПартнер;
				НоваяСтрока.КонтактноеЛицо		= ТекКл;
				НоваяСтрока.ОсновнойМенеджер	= ТекМенеджер;
				НоваяСтрока.Телефон				= СписокТелефонов[0].Значение.Представление;
				
			ИначеЕсли НЕ ВыбиратьКонтактыТолькоСЗаполненнойКИ Тогда
				НоваяСтрока = ИтоговаяТаблицаКонтактов.Добавить();
				НоваяСтрока.Партнер				= ТекПартнер;
				НоваяСтрока.КонтактноеЛицо		= ТекКл;
				НоваяСтрока.ОсновнойМенеджер	= ТекМенеджер;
			КонецЕсли;
			
		КонецЦикла; 
		
	ИначеЕсли ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки Тогда
		
		Для Каждого СтрокаТаблицы Из _ТаблицаКонтактов Цикл
			
			ТекПартнер	= СтрокаТаблицы.Партнер;
			ТекКл		= СтрокаТаблицы.КонтактноеЛицо;
			ТекМенеджер = СтрокаТаблицы.ОсновнойМенеджер;			
				
			СписокАдресов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекПартнер,ТекКл),
												 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
												 
			Если СписокАдресов.Количество() > 0 Тогда
				НоваяСтрока = ИтоговаяТаблицаКонтактов.Добавить();
				НоваяСтрока.Партнер			 = ТекПартнер;
				НоваяСтрока.КонтактноеЛицо	 = ТекКл;
				НоваяСтрока.ОсновнойМенеджер = ТекМенеджер;								
				НоваяСтрока.Адрес = СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,Строка(НоваяСтрока.Партнер),Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + СписокАдресов[0].Значение.Представление + ">";
				НоваяСтрока.Принадлежность = (СписокАдресов[0].Значение.Объект = ТекКл);
				
			ИначеЕсли НЕ ВыбиратьКонтактыТолькоСЗаполненнойКИ Тогда
				НоваяСтрока = ИтоговаяТаблицаКонтактов.Добавить();
				НоваяСтрока.Партнер				= ТекПартнер;
				НоваяСтрока.КонтактноеЛицо		= ТекКл;
				НоваяСтрока.ОсновнойМенеджер	= ТекМенеджер;								
			КонецЕсли;
			
		КонецЦикла; 
		
	ИначеЕсли ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки Тогда
		
		Для Каждого СтрокаТаблицы Из _ТаблицаКонтактов Цикл
			
			ТекПартнер	= СтрокаТаблицы.Партнер;
			ТекКл		= СтрокаТаблицы.КонтактноеЛицо;
			ТекМенеджер = СтрокаТаблицы.ОсновнойМенеджер;					
				
			СписокТелефонов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекПартнер,ТекКл),
												   Перечисления.ТипыКонтактнойИнформации.Телефон);
			
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока = ИтоговаяТаблицаКонтактов.Добавить();
				НоваяСтрока.Партнер				= ТекПартнер;
				НоваяСтрока.КонтактноеЛицо		= ТекКл;
				НоваяСтрока.ОсновнойМенеджер	= ТекМенеджер;												
				НоваяСтрока.Телефон				= СписокТелефонов[0].Значение.Представление;
				НоваяСтрока.Принадлежность		= (СписокТелефонов[0].Значение.Объект = ТекКл);
				
			ИначеЕсли НЕ ВыбиратьКонтактыТолькоСЗаполненнойКИ Тогда
				НоваяСтрока = ИтоговаяТаблицаКонтактов.Добавить();
				НоваяСтрока.Партнер				= ТекПартнер;
				НоваяСтрока.КонтактноеЛицо		= ТекКл;
				НоваяСтрока.ОсновнойМенеджер	= ТекМенеджер;																
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	ИтоговаяТаблицаКонтактов.Сортировать("Партнер, КонтактноеЛицо, ОсновнойМенеджер");
	ЗначениеВРеквизитФормы(ИтоговаяТаблицаКонтактов, "ТаблицаКонтактов");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ТаблицаКонтактовПартнерПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаКонтактов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
		
		ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
		
		Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона") Тогда
			
			СписокТелефонов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо),
												   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")); 
			
			Если СписокТелефонов.Количество() > 0 Тогда
				ТелефонныйНомер = СписокТелефонов[0].Значение;
				Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
					ТекДанные.Телефон = ТелефонныйНомер.Представление;
				Иначе
					ТекДанные.Телефон = "";
				КонецЕсли;
			Иначе
				ТекДанные.Телефон = "";
			КонецЕсли;
			
		ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки")  Тогда 	
			
			СписокАдресов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо),
												   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты")); 
			
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					ТекДанные.Адрес = Адрес.Представление;
					ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер,Строка(ТекДанные.Партнер),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
					ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
				Иначе
					ТекДанные.Адрес = "";
					ТекДанные.ПредставлениеАдреса	= "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			Иначе
				ТекДанные.Адрес = "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
		
		ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки")  Тогда 	
			
			СписокТелефонов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо),
												   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")); 
			
			Если СписокТелефонов.Количество() > 0 Тогда
				ТелефонныйНомер = СписокТелефонов[0].Значение;
				Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
					ТекДанные.Телефон = ТелефонныйНомер.Представление;
					ТекДанные.Принадлежность = (ТелефонныйНомер.Объект = ТекДанные.КонтактноеЛицо);
				Иначе
					ТекДанные.Телефон = "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			Иначе
				ТекДанные.Телефон = "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТекДанные.Телефон = "";
		ТекДанные.Адрес = "";
		ТекДанные.ПредставлениеАдреса	= "";
		ТекДанные.Принадлежность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактовКонтактноеЛицоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаКонтактов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
		
		Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона") Тогда
			
			СписокТелефонов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо),
												   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")); 
			
			Если СписокТелефонов.Количество() > 0 Тогда
				ТелефонныйНомер = СписокТелефонов[0].Значение;
				Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
					ТекДанные.Телефон = ТелефонныйНомер.Представление;
				Иначе
					ТекДанные.Телефон = "";
				КонецЕсли;
			Иначе
				ТекДанные.Телефон = "";
			КонецЕсли;
			
		ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки")  Тогда 	
			
			СписокАдресов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо),
												   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты")); 
			
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					ТекДанные.Адрес = Адрес.Представление;
					ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер,Строка(ТекДанные.Партнер),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
					ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
				Иначе
					ТекДанные.Адрес	 = "";
					ТекДанные.ПредставлениеАдреса	= "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			Иначе
				ТекДанные.Адрес = "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки") Тогда
			
			СписокТелефонов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо),
												   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")); 
			
			Если СписокТелефонов.Количество() > 0 Тогда
				ТелефонныйНомер = СписокТелефонов[0].Значение;
				Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
					ТекДанные.Телефон = ТелефонныйНомер.Представление;
					ТекДанные.Принадлежность = (ТелефонныйНомер.Объект = ТекДанные.КонтактноеЛицо);
				Иначе
					ТекДанные.Телефон = "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			Иначе
				ТекДанные.Телефон = "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактовТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.ТаблицаКонтактов.ТекущиеДанные;
	
	СписокТелефонов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо),
										   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаКонтактовТелефонНачалоВыбораЗавершение", ЭтотОбъект, ТекДанные);
	СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактовТелефонНачалоВыбораЗавершение(ЭлементСписка, ТекДанные) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	ТелефонныйНомер = ЭлементСписка.Значение;
	Если Не ТелефонныйНомер.Количество() = 0 Тогда
		ТекДанные.Телефон = ТелефонныйНомер.Представление;
		// Очистим КЛ, если выбрана КИ клиента.
		Если ТипЗнч(ТелефонныйНомер.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			ТекДанные.КонтактноеЛицо = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактовЭлектронныйАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.ТаблицаКонтактов.ТекущиеДанные;
	
	СписокАдресов = СформироватьСписокКИ(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо),
										   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаКонтактовЭлектронныйАдресНачалоВыбораЗавершение", ЭтотОбъект, ТекДанные);
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите адрес");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактовЭлектронныйАдресНачалоВыбораЗавершение(ЭлементСписка, ТекДанные) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	Адрес = ЭлементСписка.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекДанные.Адрес = Адрес.Представление;
		// Очистим КЛ, если выбрана КИ клиента.
		Если ТипЗнч(Адрес.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			ТекДанные.КонтактноеЛицо = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактовЭлектронныйАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактовЭлектронныйАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ТекСтраница = Элементы.ПанельСтраницы.ТекущаяСтраница;
	
	Если ТекСтраница = Элементы.СтраницаРаботаМастераЗавершена Тогда
		ЗадаватьВопросПриЗакрытии = Ложь;
		
		Успешно = СоздатьДействиеПоПродвижению();
		
		Если Успешно Тогда
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Проверки заполненности
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСодержаниеДействия Тогда
		Если Элементы.Ответственный.Видимость И Не ЗначениеЗаполнено(Ответственный) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран Ответственный!'"),, "Ответственный");
			Возврат;
		КонецЕсли;
		
		Если (ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки") ИЛИ
			  ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона")) Тогда
			  
			Если Не ЗначениеЗаполнено(Тема) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена Тема'"),, "Тема");
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст()) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан текст сообщения!'"),, "ФорматированныйДокументТекст");
				Возврат;
			КонецЕсли;
			
			Элементы.ТекстПисьмаФорматированныйДокумент.Видимость = Ложь;	  
			
		КонецЕсли;
		
		Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки") И Не ЗначениеЗаполнено(Содержание) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан текст sms-сообщения!'"),, "содержание");
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтборКлиентов Тогда
		
		Если НЕ ВключатьКлиентов И НЕ ВключатьКЛ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо включить хотя бы один вид отборов!'"));
			Возврат;
		КонецЕсли;
		
		БылВопросПоКлиентам = Ложь;
		
		Если ВключатьКлиентов Тогда
			ЕстьОтборыКлиентов = ЕстьАктивныеОтборыКлиентов();
			Если НЕ ЕстьОтборыКлиентов Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("КомандаДалееПродолжение", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Нет установленных отборов по клиентам! В выборку будет включена вся клиентская база!
							   |Продолжить?'"), РежимДиалогаВопрос.ОКОтмена,,,НСтр("ru = 'Внимание!'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		КомандаДалееПродолжение(Неопределено, Неопределено);
		Возврат;
		
	ИначеЕсли Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокКлиентов Тогда
		Если ТаблицаКонтактов.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны клиенты!'"));
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаРаспределениеПоОтветственным Тогда
		Если ВидРаспределенияПоИсполнителям = 1 Тогда
			ПолучитьВыбранныхИсполнителей(ЭтотОбъект);
		Иначе
			ПолучитьВыбранныхИсполнителейПоОтветственнымМенеджерамКлиентов();
		КонецЕсли;
		Если ВыбранныеИсполнители.Количество() = 0 Тогда
			Если ВидРаспределенияПоИсполнителям = 1 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного ответственного!'"));
				Возврат;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для некоторых клиентов не указан основной менеджер - нужно выбрать ответственного для клиентов, которым не назначен ответственный менеджер!'"),, "ПользовательОтветственныйПоУмолчанию");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Действия при переходе
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеМастера Тогда
		
		Элементы.ГруппаПоказыватьНачальнуюСтраницу.Видимость = Ложь;
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСодержаниеДействия;
		
		Если НЕ ИспользуетсяРежимЗакладок Тогда 
			Заголовок = НСтр("ru = 'Действия по продвижению'") + ": " + ВидМастера;
		КонецЕсли;
		
		Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки") Тогда
			Элементы.Содержание.АктивизироватьПоУмолчанию = Истина;
		Иначе
			Элементы.Тема.АктивизироватьПоУмолчанию = Истина;
		КонецЕсли;
		
		ВидимостьИДоступностьЭлементовФормы(ЭтотОбъект);
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаСодержаниеДействия Тогда
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтборКлиентов;
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаОтборКлиентов Тогда
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокКлиентов;
		ЗаполнитьТаблицуКонтактовПоОтборам();
					
	ИначеЕсли ТекСтраница = Элементы.СтраницаСписокКлиентов Или ТекСтраница = Элементы.СтраницаРаспределениеПоОтветственным Тогда
		Если ТекСтраница = Элементы.СтраницаРаспределениеПоОтветственным Или ВидМастера <> ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона") Тогда
			Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаРаботаМастераЗавершена;
			
			Элементы.КомандаДалее.Заголовок = НСтр("ru = ' Завершить '");
			Элементы.КомандаДалее.Картинка = БиблиотекаКартинок.CRM_ЗеленаяГалка;
			
			_Заголовок = НСтр("ru = 'При нажатие на  кнопку «Завершить» будет открыт документ '");
			Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки") Тогда
				_Заголовок = _Заголовок + НСтр("ru = ' ""Рассылка электронной почты"".'");
				
			ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки") Тогда
				_Заголовок = _Заголовок + НСтр("ru = ' ""SMS сообщение"".'");
				
			ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона") Тогда
				_Заголовок = _Заголовок + НСтр("ru = ' ""Телемаркетинг"".'");
				
			КонецЕсли;
			Элементы.ОписаниеЗавершенияРаботыМастера1.Заголовок  = _Заголовок;
				
		Иначе
			Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаРаспределениеПоОтветственным;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЗаголовкиШагов(ЭтотОбъект);
	
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеМастера Тогда
		Элементы.КомандаНазад.Доступность = Ложь;
	Иначе
		Элементы.КомандаНазад.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалееПродолжение(Ответ, Далее) Экспорт
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтборКлиентов Тогда
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		Если ВключатьКЛ И Ответ = Неопределено Тогда
			ЕстьОтборыКЛ = ЕстьАктивныеОтборыКЛ();
			Если НЕ ЕстьОтборыКЛ Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("КомандаДалееЗавершение", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Нет установленных отборов по контактным лицам! В выборку будет вся клиентская база!
							   								|Продолжить?'"), РежимДиалогаВопрос.ОКОтмена,,,НСтр("ru = 'Внимание!'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		КомандаДалееЗавершение(Неопределено, Далее)
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалееЗавершение(Ответ, Далее) Экспорт
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтборКлиентов Тогда
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокКлиентов;
		ЗаполнитьТаблицуКонтактовПоОтборам();
		НастроитьЗаголовкиШагов(ЭтотОбъект);
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ЗадаватьВопросПриЗакрытии = Истина;		
	
	ТекСтраница = Элементы.ПанельСтраницы.ТекущаяСтраница;
	
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСодержаниеДействия Тогда
		
		Элементы.ГруппаПоказыватьНачальнуюСтраницу.Видимость = Истина;
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеМастера;
		
	ИначеЕсли Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтборКлиентов Тогда
		Если (ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки")
			ИЛИ ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона")) Тогда
			Элементы.ТекстПисьмаФорматированныйДокумент.Видимость = Истина;	  
		КонецЕсли;	
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСодержаниеДействия;
		
	ИначеЕсли Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокКлиентов Тогда
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтборКлиентов;
		
	ИначеЕсли Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаРаспределениеПоОтветственным Тогда
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокКлиентов;
		
	ИначеЕсли Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаРаботаМастераЗавершена Тогда
		Элементы.КомандаДалее.Заголовок = НСтр("ru = ' Далее   '");
		Элементы.КомандаДалее.Картинка = БиблиотекаКартинок.ПереместитьВправо;
		
		Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона") Тогда
			Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаРаспределениеПоОтветственным;
		Иначе
			Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокКлиентов;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЗаголовкиШагов(ЭтотОбъект);
	
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеМастера Тогда
		Элементы.КомандаНазад.Доступность = Ложь;
	Иначе
		Элементы.КомандаНазад.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьМастер(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеПриИзменении(Элемент)
	
	Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки") Тогда
		ЕстьТэги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыЗапретОчистки(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидРаспределенияПоИсполнителямПриИзменении(Элемент)
	Элементы.ТаблицаИсполнителей.Обновить();
	ВидимостьИДоступностьЭлементовФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсполнителейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ИспользоватьГруппыПользователей Тогда
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
	КонецЕсли;
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаСписка", ПараметрыФормы, Элементы.ТаблицаИсполнителей, , );
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсполнителейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		бЗадаватьВопросОчистить = Истина;
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				НайденныеСтроки = ТаблицаИсполнителей.НайтиСтроки(Новый Структура("Пользователь", ВыбранныйПользовательГруппа));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаИсполнителей.Добавить();
					НоваяСтрока.Пользователь = ВыбранныйПользовательГруппа;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей")
				ИЛИ ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				Если бЗадаватьВопросОчистить И ТаблицаИсполнителей.Количество() > 0 Тогда
					ТекстВопроса = НСтр("ru='Очистить список исполнителей?'");
					ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаИсполнителейОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранныйПользовательГруппа);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,,);
					Возврат;
				КонецЕсли;
				бЗадаватьВопросОчистить = Ложь;
				
				ДобавитьПользователейГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсполнителейОбработкаВыбораЗавершение(Ответ, ВыбранныйПользовательГруппа) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаИсполнителей.Очистить();
	КонецЕсли;
	бЗадаватьВопросОчистить = Ложь;
	ДобавитьПользователейГруппеПользователей(ВыбранныйПользовательГруппа);
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаИсполнителейЗаполнитьПоГруппеПользователей(Команда)
	Если Не ИспользоватьГруппыПользователей Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отключена настройка ""Использовать группы пользователей""!'"), 10);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе,ВыборГруппПользователей", Истина, Истина, Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка", ПараметрыФормы, Элементы.ТаблицаИсполнителей, ,);
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаИсполнителейПодбор(Команда)
	МассивУчастников = Новый Массив();
	Для Каждого СтрокаТаблицы Из ТаблицаИсполнителей Цикл
		Если	ЗначениеЗаполнено(СтрокаТаблицы.Пользователь)
			И	ТипЗнч(СтрокаТаблицы.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			//
			МассивУчастников.Добавить(СтрокаТаблицы.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСтруктура = Новый Структура();
	ПараметрыСтруктура.Вставить("Пользователи",		МассивУчастников);
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени", 60);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаТаблицаИсполнителейПодборЗавершение", ЭтотОбъект, МассивУчастников);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю", ПараметрыСтруктура, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаИсполнителейПодборЗавершение(РезультатОткрытия, МассивУчастников) Экспорт
	
	Если ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата = Неопределено;
		МаксимальнаяВыбраннаяДата = Неопределено;
		МассивВыбранныеПользователи = Новый Массив();
		Для Каждого ДобавляемыйПользователь Из РезультатОткрытия Цикл
			МассивВыбранныеПользователи.Добавить(ДобавляемыйПользователь);
			
			СтруктураПоиска = Новый Структура("Пользователь", ДобавляемыйПользователь);
			Если ТаблицаИсполнителей.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				НоваяСтрока = ТаблицаИсполнителей.Добавить();
				НоваяСтрока.Пользователь		= ДобавляемыйПользователь;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемыйПользователь Из МассивУчастников Цикл
			Если МассивВыбранныеПользователи.Найти(УдаляемыйПользователь) = Неопределено Тогда
				НайденныеСтроки = ТаблицаИсполнителей.НайтиСтроки(Новый Структура("Пользователь", УдаляемыйПользователь));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ТаблицаИсполнителей.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаИсполнителейОчистить(Команда)
	Если ТаблицаИсполнителей.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаТаблицаИсполнителейОчиститьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить список исполнителей?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаИсполнителейОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаИсполнителей.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидМастераПриИзменении(Элемент)
	ВидимостьИДоступностьЭлементовФормы(ЭтотОбъект);
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();	
	
	ЗадаватьВопросПриЗакрытии = Истина;
	
	СписокШаговМастера.Добавить("ДекорацияШагОбщаяИнформация",				"СтраницаОписаниеМастера");
	СписокШаговМастера.Добавить("ДекорацияШагОбщееСодержание",				"СтраницаСодержаниеДействия");
	СписокШаговМастера.Добавить("ДекорацияШагОтборКлиентов",				"СтраницаОтборКлиентов");
	СписокШаговМастера.Добавить("ДекорацияШагСписокКлиентов",				"СтраницаСписокКлиентов");
	СписокШаговМастера.Добавить("ДекорацияШагЗавершение",					"СтраницаРаботаМастераЗавершена");
	СписокШаговМастера.Добавить("ДекорацияШагРаспределениеПоОтветственным",	"СтраницаРаспределениеПоОтветственным");
	
	Элементы.ПанельСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Проект = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
	
	Ответственный = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
		
	// Заполним список выбора учетных записей.
	CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОтправительПредставление.СписокВыбора);
	
	ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
	
	Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) <> Неопределено Тогда
		Если Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(ОсновнаяУчетнаяЗапись) <> Неопределено Тогда
			УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
			ОтправительПредставление = ОсновнаяУчетнаяЗапись;
			
		ИначеЕсли Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда 
			УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
			ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
		КонецЕсли;
		
	ИначеЕсли Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда 
		УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
		ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
	КонецЕсли;
	
	//
	ВключатьКлиентов = Истина;
	ИнициализироватьСКДОтборовКлиентов();
	ИнициализироватьСКДОтборовКЛ();

	//
	ИспользуетсяРежимЗакладок = CRM_ОбщегоНазначенияПовтИсп.ИспользуетсяРежимЗакладок();
	
	//
	Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеМастера;
	СписокШаговМастера[0].Пометка = Истина;
	
	// Если форма открыта из команды.
	Если Параметры.Свойство("ВидМастера")
		 И ЗначениеЗаполнено(Параметры.ВидМастера)
		 И ТипЗнч(Параметры.ВидМастера) = Тип("ПеречислениеСсылка.CRM_ВидыМастераПоПродвижению") Тогда
		 
		ВидМастера = Параметры.ВидМастера;
		
		Заголовок = НСтр("ru = 'Действия по продвижению'") + ": " + ВидМастера;
		
		Элементы.ДекорацияНажмитеКнопкуДалее.Заголовок = НСтр("ru = 'Для продолжения нажмите кнопку ""Далее""'");
		Элементы.ВидМастера.Видимость = Ложь;
		
	Иначе
		
		Элементы.ДекорацияШагОбщаяИнформация.Заголовок = НСтр("ru = 'Общая информация'") + Символы.ПС + НСтр("ru = 'и выбор мастера'");
		ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона;
		Элементы.ДекорацияНажмитеКнопкуДалее.Заголовок = НСтр("ru = 'Для продолжения выберите вид мастера и нажмите кнопку ""Далее""'");		
		
	КонецЕсли;
	
	Элементы.ДекорацияШагРаспределениеПоОтветственным.Видимость = (ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона);
	
	Если Не ЗначениеЗаполнено(Важность) Тогда
		Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();		
	КонецЕсли;
	
	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	
	// АВТОТЕКСТ
	ТаблицаАвтотекстаЗнач = РеквизитФормыВЗначение("ТаблицаАвтотекста");
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, Перечисления.CRM_НазначенияАвтотекста.АвтотекстСМССообщение);
	ЗначениеВРеквизитФормы(ТаблицаАвтотекстаЗнач, "ТаблицаАвтотекста");
	
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект);
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельСообщенияСМС(ЭтотОбъект);
	
 	СтруктураКонстант 		= ПолучитьКонстанты();
	НачалоОтправкиСМС 		= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НачалоПериодаЗапретаСМС	= СтруктураКонстант.НачалоПериодаЗапрета;
	КонецПериодаЗапретаСМС	= СтруктураКонстант.КонецПериодаЗапрета;
	
	НастроитьЗаголовкиШагов(ЭтотОбъект);
	
	ВидимостьИДоступностьЭлементовФормы(ЭтотОбъект);
	
	// Размещать текст в конце процедуры, проверка на снятие флага показа стартовой страницы.
	Если ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона Тогда
		НазваниеМастера = "МастерТелефонногоОбзвона";
	ИначеЕсли ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки Тогда		
		НазваниеМастера = "МастерSmsРассылки";        		
	Иначе
		НазваниеМастера = "МастерEmailРассылки";        
	КонецЕсли;		
	ПоказыватьНачальнуюСтраницу = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьНачальнуюСтраницу" + НазваниеМастера);
	Если НЕ ЗначениеЗаполнено(ПоказыватьНачальнуюСтраницу) Тогда
		ФлагПоказыватьНачальнуюСтраницу = Истина;
	Иначе
		ФлагПоказыватьНачальнуюСтраницу = ПоказыватьНачальнуюСтраницу;
	КонецЕсли;
	
	Если ВидМастера = Перечисления.CRM_ВидыМастераПоПродвижению.МастерEmailРассылки Тогда
		
		Автор = ПараметрыСеанса.ТекущийПользователь;
		
		ПодписьПользователя = ПолучитьПодписьПользователя(УчетнаяЗапись, Автор);
		
		Если ПодписьПользователя <> Неопределено Тогда
			
			ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПодписьПользователя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	Если НЕ ФлагПоказыватьНачальнуюСтраницу Тогда
		КомандаДалее(Неопределено);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	Если Модифицированность Тогда
		Если ЗадаватьВопросПриЗакрытии Тогда
			Отказ = Истина;
			ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОбратныйВызов, НСтр("ru = 'Завершить работу с мастером?'"), РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.ОК Тогда
		Модифицированность			= Ложь;
		ЗадаватьВопросПриЗакрытии	= Ложь;
		Закрыть();
    КонецЕсли;
КонецПроцедуры // ПередЗакрытиемЗавершение()

&НаСервереБезКонтекста
Функция ПолучитьПодписьПользователя(УчетнаяЗапись, Пользователь, ПодписьПересылаемогоПисьма = Ложь)
	
	НаборРегистра = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 Тогда
	
		Если ПодписьПересылаемогоПисьма Тогда
			Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьПересылаемогоПисьма) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Подпись = НаборРегистра[0].ПодписьПересылаемогоПисьма;
		Иначе
			Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьИсходящегоПисьма) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Подпись = НаборРегистра[0].ПодписьИсходящегоПисьма;
		КонецЕсли;
		СтруктураВложений					= Новый Структура;
		ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Подпись, Подпись.Текст, СтруктураВложений);
	Иначе
		ТекстHTML = "";
		СтруктураВложений = Новый Структура;
	КонецЕсли;
	
	ТекстПодписиФорматированныйДокумент	= Новый ФорматированныйДокумент;
	ТекстПодписиФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
	Возврат ТекстПодписиФорматированныйДокумент;
	
КонецФункции

&НаСервере
Процедура ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ПриемникДокумент, ДобавляемыйДокумент, ПолучатьГраницыВыделения = Ложь)
	
	Если ПолучатьГраницыВыделения Тогда
		ПозицияНачала	= 0;
		ПозицияКонца	= 0;
		Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияКонца);
	Иначе
		ПозицияНачала	= ПриемникДокумент.ПолучитьЗакладкуКонца();
		ПозицияКонца	= ПриемникДокумент.ПолучитьЗакладкуКонца();
	КонецЕсли;
	
	ИндексНовогоПараграфа = 0;
	Кон = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ПозицияКонца);
	
	Для Каждого ЭлементДокумента Из ПриемникДокумент.Элементы Цикл
		
		ПозицияНач = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ЭлементДокумента.ЗакладкаНачала);
		ПозицияКон = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ЭлементДокумента.ЗакладкаКонца);
		
		Если Кон >= ПозицияНач И Кон <= ПозицияКон Тогда
			
			Если Кон = ПозицияНач Тогда
				ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(ЭлементДокумента);
			ИначеЕсли Кон <= ПозицияКон Тогда
				ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(ЭлементДокумента)+1;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НужноПереопределитьИндекс = Ложь;
	Если ИндексНовогоПараграфа > 0 И ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Количество() Тогда
		НужноПереопределитьИндекс = Истина;
	КонецЕсли;
	
	Для ИД = 0 По ДобавляемыйДокумент.Элементы.Количество() -1 Цикл
		ЭлементДокумента = ДобавляемыйДокумент.Элементы[(ДобавляемыйДокумент.Элементы.Количество() -1 -ИД)];
		
		Если ТипЗнч(ЭлементДокумента) = Тип("ПараграфФорматированногоДокумента") Тогда
			
			Если ПриемникДокумент.Элементы.Количество() > 0 Тогда
				Если НужноПереопределитьИндекс Тогда
					НужноПереопределитьИндекс = Ложь;
					НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
					ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(НовыйПараграф);
				Иначе
					НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
					
					ИндексДобавленногоПараграфа = ПриемникДокумент.Элементы.Индекс(НовыйПараграф);
					
					Пока ИндексДобавленногоПараграфа > ИндексНовогоПараграфа Цикл
						
						ПриемникДокумент.Элементы.Сдвинуть(ИндексДобавленногоПараграфа - 1, 1);
						
						ИндексДобавленногоПараграфа = ИндексДобавленногоПараграфа - 1;
					
					КонецЦикла; 
				КонецЕсли;
			Иначе
				НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
			КонецЕсли;
			НовыйПараграф.ТипПараграфа = ЭлементДокумента.ТипПараграфа;
			
			ЗаполнитьЗначенияСвойств(НовыйПараграф,ЭлементДокумента,,"ЗакладкаКонца, ЗакладкаНачала");
			Для Инд = 0 По ЭлементДокумента.Элементы.Количество() -1 Цикл
				ПодчиненныйЭлемент = ЭлементДокумента.Элементы[Инд];
				
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(ПодчиненныйЭлемент.Текст, Тип("ТекстФорматированногоДокумента"));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,ПодчиненныйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
					
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(ПодчиненныйЭлемент.Картинка, Тип("КартинкаФорматированногоДокумента"));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,ПодчиненныйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
					
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	Если Подключено Тогда
		ПодключеноРасширениеРаботыСФайлами = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФлагПоказыватьНачальнуюСтраницуПриИзменении(Элемент)
	
	Если ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерТелефонногоОбзвона") Тогда
		НазваниеМастера = "МастерТелефонногоОбзвона";
	ИначеЕсли ВидМастера = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПоПродвижению.МастерSmsРассылки") Тогда		
		НазваниеМастера = "МастерSmsРассылки";        		
	Иначе
		НазваниеМастера = "МастерEmailРассылки";        
	КонецЕсли;			
	
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ПоказыватьНачальнуюСтраницу" + НазваниеМастера, ФлагПоказыватьНачальнуюСтраницу);
	
КонецПроцедуры

#КонецОбласти
