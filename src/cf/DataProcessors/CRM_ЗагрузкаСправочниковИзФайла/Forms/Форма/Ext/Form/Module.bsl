
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Открывает диалог выбора файла.
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл.
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует.
// 
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь, Знач РасширениеПоУмолчанию = "xml", 
	АрхивироватьФайлДанных = Ложь, ВыборФайлаПравил = Ложь)
	
	Если РасширениеПодключено Тогда
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ТекстФайлДанных = НСтр("ru = 'Файл данных'"); 
		//MS Outlook
		Если КодПрограммы = 5 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.txt,*.csv,*.xls,*.xlsx)|*.txt;*.csv;*.xls;*.xlsx";
			ДиалогОткрытияФайла.Расширение					=	"xls";
		//Outlook Express
		ИначеЕсли КодПрограммы = 6 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.csv)|*.csv";
			ДиалогОткрытияФайла.Расширение					=	"csv";
		//The Bat!
		ИначеЕсли КодПрограммы = 7 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.txt,*.tdf,*.csv)|*.txt;*.tdf;*.csv";
			ДиалогОткрытияФайла.Расширение					=	"csv";
		//Файл MS Excel
		ИначеЕсли КодПрограммы = 4 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.xls,*.xlsx)|*.xls;*.xlsx";
			ДиалогОткрытияФайла.Расширение					=	"xls";
		// Текстовый файл
		ИначеЕсли КодПрограммы <= 3 Тогда
			ДиалогОткрытияФайла.Фильтр						=	ТекстФайлДанных + " (*.txt,*.tdf,*.csv)|*.txt;*.tdf;*.csv";
			ДиалогОткрытияФайла.Расширение					=	"csv";
		КонецЕсли;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора файла необходимо установить расширение для работы с файлами в Веб-клиенте.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайлаОбмена = ВыбранныеФайлы[0];
	КонецЕсли;
	ИмяФайлаОбменаПриИзменении(Неопределено);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьРеквизитыСправочника()
	
	// Используется только при загрузке из телемаркетинга или рассылки
	Если ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
		Объект.ПоляСправочника.Очистить();
		// добавим наименование, телефон и Email
		НоваяСтрока = Объект.ПоляСправочника.Добавить();
		НоваяСтрока.Обязательный = Истина;
		НоваяСтрока.НаименованиеРеквизита 	= Нстр("ru = 'Наименование'");
		НоваяСтрока.СинонимРеквизита		= Нстр("ru = 'Наименование'");
		
		НоваяСтрока = Объект.ПоляСправочника.Добавить();
		НоваяСтрока.НаименованиеРеквизита = Нстр("ru = 'Телефон'");		
		НоваяСтрока.СинонимРеквизита = Нстр("ru = 'Телефон'");				
		НоваяСтрока.ПризнакКИ = Истина;
		
		НоваяСтрока = Объект.ПоляСправочника.Добавить();
		НоваяСтрока.НаименованиеРеквизита = Нстр("ru = 'Email'");						
		НоваяСтрока.СинонимРеквизита = Нстр("ru = 'Email'");								
		НоваяСтрока.ПризнакКИ = Истина;

		Возврат;
	КонецЕсли;		
	
	ТаблицаКИ = Неопределено;
	//Если ВидСправочника = "Контрагенты" Тогда
	Если ВидСправочника = "Партнеры" Тогда
		ТаблицаКИ = СформироватьТаблицуКИ();
    КонецЕсли;
	
	Объект.ПоляСправочника.Очистить();
	Если СтруктураПолей.Количество() > 0 Тогда
		Для Каждого ЗначениеСписка Из СтруктураПолей Цикл
			НоваяСтрока = Объект.ПоляСправочника.Добавить();
			НоваяСтрока.Обязательный			= Ложь;
			НоваяСтрока.НаименованиеРеквизита	= ЗначениеСписка.Значение; 
			НоваяСтрока.СинонимРеквизита		= ЗначениеСписка.Представление;
		КонецЦикла;	
	Иначе	
		Обработка = РеквизитФормыВЗначение("Объект");
		
		Если ТипДействия = "Стандартный" Тогда
			МакетДляЗаполнения = Обработка.ПолучитьМакет(ВидСправочника);
		Иначе
			МакетДляЗаполнения = Обработка.ПолучитьМакет(ТипДействия);
		КонецЕсли;
		
		НомерСтрокиМакета = 1;
		КИ = Ложь;
		Пока Истина Цикл
			
			ТекущаяСтрокаМакета = СокрЛП(МакетДляЗаполнения.ПолучитьСтроку(НомерСтрокиМакета));
			
			Если ПустаяСтрока(ТекущаяСтрокаМакета) Тогда
				Прервать;
			КонецЕсли;
			НомерСтрокиМакета = НомерСтрокиМакета + 1;
			Если Лев(ТекущаяСтрокаМакета, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.ПоляСправочника.Добавить();
			
			МассивПодстрок = СтрРазделить(ТекущаяСтрокаМакета, "|");
			МассивПодстрокКоличество = МассивПодстрок.Количество();
			Если МассивПодстрокКоличество > 0 Тогда
			    ВыбранноеЗначение = СокрЛП(МассивПодстрок[0]);
				Если (Прав(ВыбранноеЗначение,3) = "_КЛ") И НЕ КИ Тогда
					Если НЕ ТаблицаКИ = Неопределено Тогда
						Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
							Если СтрокаКИ.флаг = 0 Тогда
								НоваяСтрока.Обязательный			= Ложь;
								НоваяСтрока.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита;
								НоваяСтрока.СинонимРеквизита		= СтрокаКИ.Представление;
								НоваяСтрока.ПризнакКИ				= Истина;
								НоваяСтрока.СсылкаКИ				= СтрокаКИ.Вид;
								НоваяСтрока							= Объект.ПоляСправочника.Добавить();
								//Коментарий КИ
								Тип = СтрокаКИ.Тип;
								Если 		Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
										ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
										ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
									НоваяСтрока.Обязательный			= Ложь;
									НоваяСтрока.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита + "_Комментарий";
									НоваяСтрока.СинонимРеквизита		= СтрокаКИ.Представление + " (Комментарий)";
									НоваяСтрока.ПризнакКИ				= Истина;
									НоваяСтрока.СсылкаКИ				= СтрокаКИ.Вид;
									НоваяСтрока							= Объект.ПоляСправочника.Добавить();
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЕсли;		
						КонецЦикла;
					КонецЕсли;
					КИ = Истина;
				КонецЕсли;
				НоваяСтрока.НаименованиеРеквизита	= ВыбранноеЗначение;
				Если НоваяСтрока.НаименованиеРеквизита = "БизнесРегион" Тогда
					// Это реквизиты с типом значения Справочник - для них нужна отдельная
					// обработка.
					НоваяСтрока.РеквизитСправочник = Истина;
					НоваяСтрока.Обязательный	   = Ложь;							
				КонецЕсли;	
				
				НоваяСтрока.СинонимРеквизита		= СокрЛП(МассивПодстрок[1]);
					
				НоваяСтрока.Обязательный = ?(СокрЛП(МассивПодстрок[2])= "Истина", Истина, Ложь);
				
				Если МассивПодстрокКоличество > 3 Тогда
					СтрТип = СокрЛП(МассивПодстрок[3]);
					НоваяСтрока.РеквизитТип = СтрТип;
					Если МассивПодстрокКоличество > 4 Тогда
						СоздаватьЭлемент = СокрЛП(МассивПодстрок[4]);
						НоваяСтрока.СоздаватьЭлемент = ?(СоздаватьЭлемент = "Истина", Истина, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьПоляСправочникаДополнительнымиРеквизитами();
	
		Если НЕ ТаблицаКИ = Неопределено Тогда
			Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
				Если СтрокаКИ.флаг = 1 Тогда
					НоваяСтрока							= Объект.ПоляСправочника.Добавить();
					НоваяСтрока.Обязательный			= Ложь;
					НоваяСтрока.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита;
					НоваяСтрока.СинонимРеквизита		= СтрокаКИ.Представление;
					НоваяСтрока.ПризнакКИ				= Истина;
					НоваяСтрока.СсылкаКИ				= СтрокаКИ.Вид;
					//Коментарий КИ
					Тип = СтрокаКИ.Тип;
					Если 		Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
							ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
							ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
						НоваяСтрока							= Объект.ПоляСправочника.Добавить();
						НоваяСтрока.Обязательный			= Ложь;
						НоваяСтрока.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита + "_Комментарий";
						НоваяСтрока.СинонимРеквизита		= СтрокаКИ.Представление + " (Комментарий)";
						НоваяСтрока.ПризнакКИ				= Истина;
						НоваяСтрока.СсылкаКИ				= СтрокаКИ.Вид;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//ЗначениеВРеквизитФормы(Обработка, "Объект");
	
КонецПроцедуры

// (+Номенклатура)
&НаСервере
Функция ПолучитьДоступныеНаборыСвойствПоВидуПартнера(ВидПартнера) Экспорт
	
	Возврат CRM_УправлениеСвойствамиПереопределяемый.ПолучитьНаборыСвойствДляПартнеров(ВидПартнера);
	
КонецФункции

&НаСервере
Функция ПолучитьНаборыСвойствДляНоменклатуры(НоменклатурнаяГруппа = Неопределено) Экспорт
	
	Возврат CRM_УправлениеСвойствамиПереопределяемый.ПолучитьНаборыСвойствНоменклатуры(НоменклатурнаяГруппа);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты()
	
	Объект.ДополнительныеРеквизиты.Очистить();
	
	Если ВидСправочника = "Партнеры" Тогда
		НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойствПоВидуПартнера(ЮрФизЛицо);
	Иначе
		НаборСвойствОбъекта = ПолучитьНаборыСвойствДляНоменклатуры();
	КонецЕсли;
	ДополнительныеСвойстваОбъекта = Новый ТаблицаЗначений;
	ДополнительныеСвойстваОбъекта.Колонки.Добавить("Свойство");
	ТаблицаДополнительныхРеквизитов = УправлениеСвойствамиСлужебный.ЗначенияСвойств(ДополнительныеСвойстваОбъекта,НаборСвойствОбъекта, Ложь);
		
	Для Каждого СтрокаТЗ Из ТаблицаДополнительныхРеквизитов Цикл
		
		Если     СтрокаТЗ.ТипЗначения.СодержитТип(Тип("Булево"))
			 ИЛИ СтрокаТЗ.ТипЗначения.СодержитТип(Тип("Число"))
			 ИЛИ СтрокаТЗ.ТипЗначения.СодержитТип(Тип("Дата"))
			 ИЛИ СтрокаТЗ.ТипЗначения.СодержитТип(Тип("Строка"))
			 ИЛИ СтрокаТЗ.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))
			 Тогда
			 
			 Строка = Объект.ДополнительныеРеквизиты.Добавить();
			 ЗаполнитьЗначенияСвойств(Строка,СтрокаТЗ);
			 
		КонецЕсли;
		 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляСправочникаОтДополнительныхРеквизитов()
	
	Ном = Объект.ПоляСправочника.Количество();
	
	Пока Ном > 0 Цикл
		Ном = Ном - 1;
		Если НЕ Объект.ПоляСправочника[Ном].ДополнительныйРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		НайденыеСтроки = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Наименование",Объект.ПоляСправочника[Ном].НаименованиеРеквизита));
		Если НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(Объект.ПоляСправочника[Ном]));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляСправочникаДополнительнымиРеквизитами()
	
	Если НЕ ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
		
		ЗаполнитьДополнительныеРеквизиты();
		ОчиститьПоляСправочникаОтДополнительныхРеквизитов();
		Для Каждого ДопРеквизит Из Объект.ДополнительныеРеквизиты Цикл
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита",ДопРеквизит.Наименование));
			Если НайденыеСтроки.Количество() = 0 Тогда
				
				НоваяСтрока = Объект.ПоляСправочника.Добавить();
				НоваяСтрока.НаименованиеРеквизита = ДопРеквизит.Наименование;
				НоваяСтрока.СинонимРеквизита = ДопРеквизит.Наименование + " " + НСтр("ru = '(доп. реквизит)'");
				НоваяСтрока.ДополнительныйРеквизит = Истина;
				НоваяСтрока.СправочникСсылка = ДопРеквизит.Свойство;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРеквизитыЮрФизЛица()
	
	Если ВидСправочника = "Партнеры" Тогда
		Если ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			// Удалим реквизиты ФИО
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Фамилия"));
			Если НЕ НайденыеСтроки.Количество() = 0 Тогда
				Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Имя"));
			Если НЕ НайденыеСтроки.Количество() = 0 Тогда
				Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Отчество"));
			Если НЕ НайденыеСтроки.Количество() = 0 Тогда
				Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","ДатаРождения"));
			Если НЕ НайденыеСтроки.Количество() = 0 Тогда
				Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","Пол"));
			Если НЕ НайденыеСтроки.Количество() = 0 Тогда
				Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","НаименованиеПолное"));
			Если НайденыеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ПоляСправочника.Вставить(1);
				НоваяСтрока.Обязательный			= Ложь;
				НоваяСтрока.НаименованиеРеквизита	= "НаименованиеПолное";
				НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Полное наименование'");
			КонецЕсли;
			
		ИначеЕсли ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","НаименованиеПолное"));
			Если НЕ НайденыеСтроки.Количество() = 0 Тогда
				Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Фамилия"));
			Если НайденыеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ПоляСправочника.Вставить(1);
				НоваяСтрока.Обязательный			= Ложь;
				НоваяСтрока.НаименованиеРеквизита	= "CRM_Фамилия";
				НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Фамилия'");
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Имя"));
			Если НайденыеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ПоляСправочника.Вставить(2);
				НоваяСтрока.Обязательный			= Ложь;
				НоваяСтрока.НаименованиеРеквизита	= "CRM_Имя";
				НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Имя'");
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Отчество"));
			Если НайденыеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ПоляСправочника.Вставить(3);
				НоваяСтрока.Обязательный			= Ложь;
				НоваяСтрока.НаименованиеРеквизита	= "CRM_Отчество";
				НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Отчество'");
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","ДатаРождения"));
			Если НайденыеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ПоляСправочника.Вставить(4);
				НоваяСтрока.Обязательный			= Ложь;
				НоваяСтрока.НаименованиеРеквизита	= "ДатаРождения";
				НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Дата рождения'");
				НоваяСтрока.РеквизитДата			= Истина;
			КонецЕсли;
			
			НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","Пол"));
			Если НайденыеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.ПоляСправочника.Вставить(5);
				НоваяСтрока.Обязательный			= Ложь;
				НоваяСтрока.НаименованиеРеквизита	= "Пол";
				НоваяСтрока.СинонимРеквизита		= НСтр("ru = 'Пол'");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидСправочника = "Номенклатура" Тогда	
		
		// Удалим реквизиты ФИО
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Фамилия"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Имя"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","CRM_Отчество"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","ДатаРождения"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
		НайденыеСтроки = Объект.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита","Пол"));
		Если НЕ НайденыеСтроки.Количество() = 0 Тогда
			Объект.ПоляСправочника.Удалить(Объект.ПоляСправочника.Индекс(НайденыеСтроки[0]));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// (-Номенклатура)
&НаСервере
Функция СформироватьТаблицуКИ()
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Представление,
	|	0 КАК флаг,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель В(&МассивРодителей)
	|	И (НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Представление,
	|	1,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров)
	|	И (НЕ ВидыКонтактнойИнформации.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	флаг,
	|	Родитель,
	|	РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("МассивРодителей"	,МассивРодителей);
	
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	                                  
	КонтактнаяИнформация.Колонки.Добавить("НаименованиеРеквизита");
	КонтактнаяИнформация.Колонки.Добавить("КомментарийРеквизита");
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		Если СтрокаКИ.Вид.Предопределенный Тогда
			СтрокаКИ.НаименованиеРеквизита = Справочники.ВидыКонтактнойИнформации.ПолучитьИмяПредопределенного(СтрокаКИ.Вид);
		Иначе
			СтрокаКИ.НаименованиеРеквизита = СтрокаКИ.Наименование;
		КонецЕсли;
		
		Если СтрокаКИ.флаг = 1 Тогда
			СтрокаКИ.Представление			= НСтр("ru = 'Контактное лицо ('") + СтрокаКИ.Представление + ")";
			СтрокаКИ.НаименованиеРеквизита	= СтрокаКИ.НаименованиеРеквизита+"_КЛ";
		Иначе
			Если СтрокаКИ.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания Тогда
				СтрокаКИ.Представление			= СтрокаКИ.Представление + НСтр("ru = ' (компания)'");
			ИначеЕсли СтрокаКИ.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо Тогда
				СтрокаКИ.Представление			= СтрокаКИ.Представление + НСтр("ru = ' (физ. лицо)'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТабличныеЧасти(УдалятьРеквизитыСправочника = Ложь)
	
	Объект.ПоляФайла.Очистить();
	
	Если УдалятьРеквизитыСправочника Тогда
		Объект.ПоляСправочника.Очистить();
	Иначе
		Для Каждого СтрокаТЧ Из Объект.ПоляСправочника Цикл
			СтрокаТЧ.НаименованиеПоля = "";
			СтрокаТЧ.НаименованиеПоляПров = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьРезультатВыбора(ТекущиеДанные, КоллекцияФормы)
	
	СтрокаРезультата = "";
	
	Ном = Объект.ПоляФайла.Количество();
	Если НЕ Ном = 0 Тогда
		Пока НЕ Ном = 0 Цикл
			Если Объект.ПоляФайла[Ном-1].НаименованиеРеквизита = ТекущиеДанные.НаименованиеРеквизита Тогда
				Объект.ПоляФайла.Удалить(Ном-1);
			КонецЕсли;
			Ном = Ном - 1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияФормы Цикл
		НоваяСтрока = Объект.ПоляФайла.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции, , "НомерСтроки");
		
		СтрокаРезультата = СтрокаРезультата + ?(СтрокаРезультата = "", "", ";") + НоваяСтрока.НаименованиеПоля;
		
	КонецЦикла;
	
	Возврат СтрокаРезультата;
	
КонецФункции

// Работа с Excel

&НаКлиенте
Функция ИзСтрокиExcel(ExcelЛист, НомерСтроки, ColumnCount, ПоказыватьСотояние = Ложь)
	
	СписокПолей = Новый СписокЗначений;
	
	Для Column = 1 По ColumnCount Цикл
		Если ПоказыватьСотояние Тогда
			Прогресс = Окр(((Column) / ColumnCount) * 100);
			Состояние(НСтр("ru = 'Идет чтение файла данных...'"), Прогресс);
		КонецЕсли;
		СписокПолей.Добавить(ExcelЛист.Cells(НомерСтроки,Column).Text, ExcelЛист.Cells(НомерСтроки,Column).Text);
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьПоляИзExcel()
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		
		Excel.WorkBooks.Open(Объект.ИмяФайлаОбмена);
		
		ExcelЛист = Excel.Sheets(1);
	Исключение
		Возврат;
		
	КонецПопытки;
	
	ColumnCount = ExcelЛист.UsedRange.Column + ExcelЛист.UsedRange.Columns.Count - 1;
	
	СписокПолейФайла = ИзСтрокиExcel(ExcelЛист, 1, ColumnCount, Истина);
	
	СписокПолейФайла.Вставить(0, НСтр("ru = 'Несколько полей...'"), НСтр("ru = 'Несколько полей...'"));
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьИзExcel()
	
	СписокКлючейСтрутуры = "";
	Для а = 0 По (СписокПолейФайла.Количество() - 1) Цикл
		СписокКлючейСтрутуры = СписокКлючейСтрутуры + ?(СписокКлючейСтрутуры = "","",",") + "_" + СокрЛП(а);
	КонецЦикла;
	СписокКлючейСтрутуры = СписокКлючейСтрутуры + ",НомерСтрокиФайла";
	
	МассивФайла = Новый Массив;
		
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		
		Excel.WorkBooks.Open(Объект.ИмяФайлаОбмена);
		
		ExcelЛист = Excel.Sheets(1);
	Исключение
		Возврат МассивФайла;
	КонецПопытки;
	
	ColumnCount = ExcelЛист.UsedRange.Column + ExcelЛист.UsedRange.Columns.Count - 1;
	RowCount = ExcelЛист.UsedRange.Row + ExcelЛист.UsedRange.Rows.Count - 1;
	
	Для Row = 2 По RowCount Цикл
		
		Прогресс = Окр(((Row) / RowCount) * 100);
		Состояние(НСтр("ru = 'Получение данных из файла.'"), Прогресс);
				 
		ЗначенияСтроки = ИзСтрокиExcel(ExcelЛист, Row, ColumnCount);
		бЗначенияЗаполнены = Ложь;
		Для Каждого ЗначениеСписка Из ЗначенияСтроки Цикл
			Если ЗначениеЗаполнено(ЗначениеСписка.Значение) Или ЗначениеЗаполнено(ЗначениеСписка.Представление) Тогда
				бЗначенияЗаполнены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не бЗначенияЗаполнены Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолейСправочника = Новый Структура(СписокКлючейСтрутуры);
		
		СтруктураПолейСправочника.НомерСтрокиФайла = Row;
		Для б = 0 По СписокПолейФайла.Количество() - 2 Цикл
		
			СтруктураПолейСправочника["_" + СокрЛП(б)] = СокрЛП(ЗначенияСтроки[б].Значение);
		
		КонецЦикла; 
		
		МассивФайла.Добавить(СтруктураПолейСправочника);
		
	КонецЦикла;
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат МассивФайла;
	
КонецФункции

// Работа с текстом

&НаКлиенте
// Функция формирует список значений из строки с разделителями.
//
// Параметры:
//  СтрокаТекста - строка текста с разделителями.
//  Разделитель - Строка, разделитель в тексте.
//  НаличиеКавычек - Булево, есть ли кавычки вокруг значений в строке.
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ИзСтрокиСРазделителями(СтрокаТекста, Разделитель, ПоказыватьСотояние = Ложь)
	
	Если Разделитель = "Таб" Тогда
		Разделитель = Символы.Таб;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	
	ПрошлыйРазделитель = 0;
	КоличествоСимволов = 0;

	ДлинаСтроки = СтрДлина(СтрокаТекста);
	
	Для а=1 По СтрДлина(СтрокаТекста) Цикл
		
		Если ПоказыватьСотояние Тогда
			Прогресс = Окр(((а) / ДлинаСтроки) * 100);
			Состояние(НСтр("ru = 'Идет чтение файла данных...'"), Прогресс);
		КонецЕсли;
		
		Если Сред(СтрокаТекста,а,1) = Разделитель Тогда
			
			//MS Outlook
			Если Расширение = ".csv" И КодПрограммы = 5 Тогда
				ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1),КоличествоСимволов);
				Если Лев(ВыбранноеЗначение, 1) = """" И Прав(ВыбранноеЗначение, 1) = """" Тогда
					ВыбранноеЗначение = Сред(ВыбранноеЗначение,2,СтрДлина(ВыбранноеЗначение)-2);
				КонецЕсли;
			Иначе
				ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1),КоличествоСимволов);
			КонецЕсли;
			
			//The Bat!
			Если КодПрограммы = 7 Тогда
				ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\22", """");
				ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\2C", "");
			КонецЕсли;
			
			СписокПолей.Добавить(ВыбранноеЗначение);
			ПрошлыйРазделитель = а;
			КоличествоСимволов = 0;
			Продолжить;
		
		КонецЕсли;

		КоличествоСимволов = КоличествоСимволов + 1;
	
	КонецЦикла; 
	
	//MS Outlook
	Если Расширение = ".csv" И КодПрограммы = 5 Тогда
		ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 2),КоличествоСимволов - 2);
	Иначе
		ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1),КоличествоСимволов);
	КонецЕсли;
	
	//The Bat!
	Если КодПрограммы = 7 Тогда
		ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\22", """");
		ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\2C", "");
	КонецЕсли;
	
	СписокПолей.Добавить(ВыбранноеЗначение);
	
	Возврат СписокПолей;

КонецФункции

&НаКлиенте
Процедура ПрочитатьПоляИзТеста(Разделитель)
	
	ТекстФайла = Новый ТекстовыйДокумент;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьПоляИзТестаЗавершение", ЭтотОбъект, Новый Структура("ТекстФайла, Разделитель", ТекстФайла, Разделитель));
	ТекстФайла.НачатьЧтение(ОписаниеОповещения, Объект.ИмяФайлаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПоляИзТестаЗавершение(Параметры) Экспорт
	
	СписокПолейФайла = ИзСтрокиСРазделителями(Параметры.ТекстФайла.ПолучитьСтроку(1), Параметры.Разделитель, Истина);
	
	СписокПолейФайла.Вставить(0, НСтр("ru = 'Несколько полей...'"), НСтр("ru = 'Несколько полей...'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТекста(Разделитель, ОписаниеОповещения)
	
	ТекстФайла = Новый ТекстовыйДокумент;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзТекстаЗавершение", ЭтотОбъект, Новый Структура("ТекстФайла, Разделитель, ОписаниеОповещения", ТекстФайла, Разделитель, ОписаниеОповещения));
	ТекстФайла.НачатьЧтение(ОписаниеОповещения, Объект.ИмяФайлаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТекстаЗавершение(ДополнительныеПараметры) Экспорт
	
	СписокКлючейСтрутуры = "";
	Для а = 0 По (СписокПолейФайла.Количество() - 1) Цикл
		СписокКлючейСтрутуры = СписокКлючейСтрутуры + ?(СписокКлючейСтрутуры = "","",",") + "_" + СокрЛП(а);
	КонецЦикла;
	СписокКлючейСтрутуры = СписокКлючейСтрутуры + ",НомерСтрокиФайла";
		
	МассивФайла = Новый Массив;
	
	ТекстФайла = ДополнительныеПараметры.ТекстФайла;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Для а = 2 По ТекстФайла.КоличествоСтрок() Цикл
		
		Прогресс = Окр(((а) / ТекстФайла.КоличествоСтрок()) * 100);
		Состояние(НСтр("ru = 'Получение данных из файла.'"), Прогресс);
		
		СтрокаКонтакта = ТекстФайла.ПолучитьСтроку(а);
		
		//MS Outlook
		Если КодПрограммы = 5 И НРег(Прав(Объект.ИмяФайлаОбмена,4)) = ".csv" Тогда
			// В MS Outlook каждый контакт в файле с разделителями занимает 2 строки.
			СтрокаКонтакта = СтрокаКонтакта + ТекстФайла.ПолучитьСтроку(а+1);
			а = а + 1;
		КонецЕсли;
		ЗначенияСтроки = ИзСтрокиСРазделителями(СтрокаКонтакта, Разделитель, Истина);
		
		//Если (СписокПолейФайла.Количество()-1) <> ЗначенияСтроки.Количество() Тогда
		//	
		//	Возврат МассивФайла;
		//	//Возврат ТаблицаФайла;
		//	
		//	//Если нРег(Расширение) = ".csv" Тогда
		//	//	Возврат ТаблицаФайла;
		//	//Иначе
		//	//	Для б = ЗначенияСтроки.Количество() По СписокПолейФайла.Количество() Цикл
		//	//		ЗначенияСтроки.Добавить("");
		//	//	КонецЦикла; 
		//	//КонецЕсли; 
		//КонецЕсли; 
		
		СтруктураПолейСправочника = Новый Структура(СписокКлючейСтрутуры);
		
		СтруктураПолейСправочника.НомерСтрокиФайла = а;
		//Для б = 0 По СписокПолейФайла.Количество() - 2 Цикл
		Для б = 0 По ЗначенияСтроки.Количество() -1 Цикл
		
 			СтруктураПолейСправочника["_" + СокрЛП(б)] = СокрЛП(ЗначенияСтроки[б].Значение);
		
		КонецЦикла; 
		
		МассивФайла.Добавить(СтруктураПолейСправочника);
		
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, МассивФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлПрочитатьПоля()
	
	Если НЕ ФайлЗагрузкиВыбран Тогда
		Возврат;
	КонецЕсли; 
	
	// Текстовый файл, разделитель ",".
	Если КодПрограммы = 1 Тогда
		ПрочитатьПоляИзТеста(",");
	// Текстовый файл, разделитель ";".
	ИначеЕсли КодПрограммы = 2 Тогда
		ПрочитатьПоляИзТеста(";");
	// Текстовый файл, разделитель " ".
	ИначеЕсли КодПрограммы = 3 Тогда
		ПрочитатьПоляИзТеста("Таб");
	Иначе
		Если нРег(Расширение) = ".xls" Тогда
			ПрочитатьПоляИзExcel();
		ИначеЕсли нРег(Расширение) = ".csv" Тогда
			//Outlook Express
			ПрочитатьПоляИзТеста(?(КодПрограммы = 6,";",","));
		ИначеЕсли нРег(Расширение) = ".txt" ИЛИ нРег(Расширение) = ".tdf" Тогда	
			ПрочитатьПоляИзТеста("Таб");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоляФайлаПолямСправочника()
	Для Каждого ЗначениеСписка Из СписокПолейФайла Цикл
		Если ЗначениеСписка.Значение = НСтр("ru = 'Несколько полей...'") Тогда
			Продолжить;
		КонецЕсли;
		
		бНайденоПоПредставлению = Ложь;
		НайденнаяСтрока = Неопределено;
		КоличествоНайденных = 0;
		Для Каждого СтрокаТаблицы Из Объект.ПоляСправочника Цикл
			Если НайденнаяСтрока = Неопределено И ВРег(СтрокаТаблицы.НаименованиеРеквизита) = ВРег(ЗначениеСписка.Значение) Тогда
				НайденнаяСтрока = СтрокаТаблицы;
				КоличествоНайденных = КоличествоНайденных + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденнаяСтрока = Неопределено Тогда
			бНайденоПоПредставлению = Истина;
			КоличествоНайденных = 0;
			// Пробуем найти по представлению.
			Для Каждого СтрокаТаблицы Из Объект.ПоляСправочника Цикл
				Если НайденнаяСтрока = Неопределено И ВРег(СтрокаТаблицы.СинонимРеквизита) = ВРег(ЗначениеСписка.Значение) Тогда
					НайденнаяСтрока = СтрокаТаблицы;
					КоличествоНайденных = КоличествоНайденных + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если бНайденоПоПредставлению И КоличествоНайденных > 1 Тогда
			// Неоднозначное соответствие, лучше ничего автоматом не сопоставлять.
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.НаименованиеПоля) Или ЗначениеЗаполнено(НайденнаяСтрока.НаименованиеПоляПров) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока.НаименованиеПоля = ЗначениеСписка.Значение;
		НайденнаяСтрока.НаименованиеПоляПров = ЗначениеСписка.Значение;
		
		НайденныеСтроки = Объект.ПоляФайла.НайтиСтроки(Новый Структура("НаименованиеРеквизита,НаименованиеПоля", НайденнаяСтрока.НаименованиеПоля, ЗначениеСписка.Значение));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ДобавитьСтрокуПоляФайла(НайденнаяСтрока, ЗначениеСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Загрузка

&НаКлиенте
Функция ПроверкаСопоставленияРеквизитовПолям(ТекстПредупреждения)
	
	Если Объект.ПоляФайла.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не сопоставлены реквизиты справочника с полями файла данных.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВидСправочника = "Массив" Тогда
		Массив = Объект.ПоляСправочника.НайтиСтроки(новый Структура("НаименованиеРеквизита, Обязательный", "Наименование", Истина));
		Если Массив.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Отсутствует ключевой реквизит ""Наименование.""'");
			Возврат Ложь;
		ИначеЕсли Не ЗначениеЗаполнено(Массив[0].НаименованиеПоля) Тогда
			ТекстПредупреждения = НСтр("ru = 'Реквизит ""Наименование"" обязателен для сопоставления'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СформироватьМассивСоответствий()
	
	МассивСоответствий = Новый Массив;
	
	Для Каждого СтрокаТЧ Из Объект.ПоляСправочника Цикл
		СписокИП = Новый СписокЗначений;
		Для Каждого СтрокаПолей Из Объект.ПоляФайла Цикл
			Если СтрокаПолей.НаименованиеРеквизита = СтрокаТЧ.НаименованиеРеквизита Тогда
				СписокИП.Добавить(СписокПолейФайла.Индекс(СписокПолейФайла.НайтиПоЗначению(СтрокаПолей.НаименованиеПоля))-1);
			КонецЕсли;
		КонецЦикла;
		Если СписокИП.Количество() > 0 Тогда
			
			СтруктураПолейРеквизитов = Новый Структура("Обязательный, ИмяРеквизита, ПризнакКИ, СсылкаКИ, СписокИндексовПолей, РеквизитСправочник, РеквизитДата, ДополнительныйРеквизит, РеквизитТип, СоздаватьЭлемент");
			СтруктураПолейРеквизитов.Обязательный				= СтрокаТЧ.Обязательный;
			СтруктураПолейРеквизитов.ИмяРеквизита				= СтрокаТЧ.НаименованиеРеквизита;
			СтруктураПолейРеквизитов.ПризнакКИ					= СтрокаТЧ.ПризнакКИ;
			СтруктураПолейРеквизитов.СсылкаКИ					= СтрокаТЧ.СсылкаКИ;
			СтруктураПолейРеквизитов.РеквизитСправочник			= СтрокаТЧ.РеквизитСправочник;
			СтруктураПолейРеквизитов.РеквизитДата				= СтрокаТЧ.РеквизитДата;
			СтруктураПолейРеквизитов.РеквизитТип				= СтрокаТЧ.РеквизитТип;
			СтруктураПолейРеквизитов.СоздаватьЭлемент			= СтрокаТЧ.СоздаватьЭлемент;
			СтруктураПолейРеквизитов.ДополнительныйРеквизит		= СтрокаТЧ.ДополнительныйРеквизит;
			СтруктураПолейРеквизитов.СписокИндексовПолей		= СписокИП;
			
			МассивСоответствий.Добавить(СтруктураПолейРеквизитов);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСоответствий;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПропарситьЗначениеДаты(Значение, КодПрограммы)
	
	//Файл MS Excel
	Если КодПрограммы = 4 Тогда
		Если СтрДлина(Значение) = 10 И СтрЧислоВхождений(Значение, ".") = 2 И Найти(Значение,".") = 3 Тогда
			
			Попытка
				Год		= Прав(Значение,4);
				Месяц	= Сред(Значение,4,2);
				День	= Лев(Значение,2);
				Возврат Дата(Год+Месяц+День);
			Исключение
				Возврат Дата("00010101");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//MS Outlook ИЛИ Outlook Express
	Если КодПрограммы = 5 ИЛИ КодПрограммы = 6 Тогда
		Если (СтрДлина(Значение) = 10 И СтрЧислоВхождений(Значение, ".") = 2 И Найти(Значение,".") = 3)
		ИЛИ (СтрДлина(Значение) = 9 И СтрЧислоВхождений(Значение, ".") = 2 И Найти(Значение,".") = 2) Тогда
			
			Попытка
				Год		= Прав(Значение,4);
				Месяц	= Сред(Значение,?(Найти(Значение,".")=2,3,4),2);
				День	= Лев(Значение,?(Найти(Значение,".")=2,1,2));
				Возврат Дата(Год+Месяц+?(Найти(Значение,".")=2,"0"+День,День));
			Исключение
				Возврат Дата("00010101");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//The Bat!
	Если КодПрограммы = 7 Тогда
		Если СтрДлина(Значение) = 8 И СтрЧислоВхождений(Значение, ".") = 0 Тогда
			
			Попытка
				Год		= Лев(Значение,4);
				Месяц	= Сред(Значение,5,2);
				День	= Прав(Значение,2);
				Возврат Дата(Год+Месяц+День);
			Исключение
				Возврат Дата("00010101");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(Значение) = 10 И СтрЧислоВхождений(Значение, ".") = 2 И Найти(Значение,".") = 3 Тогда
		
		Попытка
			Год		= Прав(Значение,4);
			Месяц	= Сред(Значение,4,2);
			День	= Лев(Значение,2);
			Возврат Дата(Год+Месяц+День);
		Исключение
			Возврат Дата("00010101");
		КонецПопытки;
	КонецЕсли;
	
	Возврат Дата("00010101");
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПоТипуКонтактнойИнформации(СправочникСтр, МассивСоответствий, ЗначениеМассива, ТипКИ, ПартнерВладелец = Неопределено, ТипДокумента = Неопределено)
	ЗначениеКИ = Неопределено;
	Для Каждого ЗначениеМассиваСоответствий Из МассивСоответствий Цикл
		Если	ЗначениеМассиваСоответствий.ПризнакКИ = Истина
			И	ЗначениеЗаполнено(ЗначениеМассиваСоответствий.СсылкаКИ)
			И	ТипЗнч(ЗначениеМассиваСоответствий.СсылкаКИ) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
			И	ЗначениеМассиваСоответствий.СсылкаКИ.Тип = ТипКИ
			И	(СправочникСтр = "КонтактныеЛицаПартнеров" И ВРег(Прав(ЗначениеМассиваСоответствий.ИмяРеквизита, 3)) = "_КЛ"
				Или СправочникСтр = "Партнеры" И Врег(Прав(ЗначениеМассиваСоответствий.ИмяРеквизита, 3)) <> "_КЛ") Тогда
			//
			ЗначениеКИ = "";
			Для Каждого ЗначениеСписка Из ЗначениеМассиваСоответствий.СписокИндексовПолей Цикл
				ЗначениеКИ = ЗначениеКИ + СокрЛП(ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		
		Для Каждого СтрокаРеквизитов Из МассивСоответствий Цикл
			Если НЕ СтрокаРеквизитов.ПризнакКИ  Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = "";
			Для Каждого ЗначениеСписка Из СтрокаРеквизитов.СписокИндексовПолей Цикл
				Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
			КонецЦикла;
			Если ТипДокумента = "Телемаркетинг" И СтрокаРеквизитов.ИмяРеквизита = "Телефон" Тогда
				ЗначениеКИ = СокрЛП(Значение);
				Прервать;
			ИначеЕсли ТипДокумента = "РассылкаПисем" И СтрокаРеквизитов.ИмяРеквизита = "Email" Тогда
				ЗначениеКИ = СокрЛП(Значение);
				Прервать;				
			КонецЕсли;				
		КонецЦикла;			
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ЗначениеКИ) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + СправочникСтр + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	" + ?(ЗначениеЗаполнено(ПартнерВладелец) И СправочникСтр = "КонтактныеЛицаПартнеров", "И КонтактнаяИнформация.Ссылка.Владелец = &ПартнерВладелец", "") + "
		|	И
		|		(
		|		
		|		КонтактнаяИнформация.Представление = &ЗначениеКИ
		|		" + ?(ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "ИЛИ КонтактнаяИнформация.АдресЭП = &ЗначениеКИ", "") + "
		|		" + ?(ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон, "ИЛИ КонтактнаяИнформация.НомерТелефона = &ЗначениеКИ", "") + "
		|		" + ?(ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон, "ИЛИ КонтактнаяИнформация.НомерТелефонаБезКодов = &ЗначениеКИ", "") + "
		|		
		|		)
		|	
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ
		|");
		Запрос.УстановитьПараметр("ЗначениеКИ", ЗначениеКИ);
		Если ЗначениеЗаполнено(ПартнерВладелец) И СправочникСтр = "КонтактныеЛицаПартнеров" Тогда
			Запрос.УстановитьПараметр("ПартнерВладелец", ПартнерВладелец);
		КонецЕсли;
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПартнераИлиКЛ(СправочникСтр, ЗначениеНаименованияПартнераИлиКЛ, МассивСоответствий, ЗначениеМассива, СтруктураДанныхФормы, ПартнерВладелец = Неопределено, ТипДокумента = Неопределено)
	Если СправочникСтр = "Партнеры" Тогда
		Ссылка = Справочники.Партнеры.НайтиПоНаименованию(ЗначениеНаименованияПартнераИлиКЛ, Истина);
	ИначеЕсли СправочникСтр = "КонтактныеЛицаПартнеров" Тогда
		Ссылка = Справочники.КонтактныеЛицаПартнеров.НайтиПоНаименованию(СокрЛП(ЗначениеНаименованияПартнераИлиКЛ), Истина,, ПартнерВладелец);
	Иначе
		Возврат Справочники[СправочникСтр].НайтиПоНаименованию(СокрЛП(ЗначениеНаименованияПартнераИлиКЛ), Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) И СтруктураДанныхФормы.ИскатьКлиентовПоАдресамEMail Тогда
		МассивСсылок = НайтиПоТипуКонтактнойИнформации(СправочникСтр, МассивСоответствий, ЗначениеМассива, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ПартнерВладелец, ТипДокумента);
		Если МассивСсылок.Количество() > 0 Тогда
			Ссылка = МассивСсылок[0];
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ссылка) И СтруктураДанныхФормы.ИскатьКлиентовПоТелефонам Тогда
		МассивСсылок = НайтиПоТипуКонтактнойИнформации(СправочникСтр, МассивСоответствий, ЗначениеМассива, Перечисления.ТипыКонтактнойИнформации.Телефон, ПартнерВладелец, ТипДокумента);
		Если МассивСсылок.Количество() > 0 Тогда
			Ссылка = МассивСсылок[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
// Создает при необходимости элементы загружаемого справочника.
//
Процедура НайтиСоздатьЭлементыСправочника(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
	ВсегоСтрок			= МассивФайла.Количество();
	НовыхЭлементов		= 0;
	НайденоЭлементов	= 0;
	
	ТекСтрока = 0;
	Для Каждого ЗначениеМассива Из МассивФайла Цикл
		
		ТекСтрока = ТекСтрока + 1;
		
		//Прогресс = Окр(((ТекСтрока) / ВсегоСтрок) * 100);
		//Состояние(НСтр("ru = 'Загрузка данных в 1С'"), Прогресс);
		
		ЗначениеНаименования = "";
		ЗначениеНаименованияКЛ = "";
		
		СтрокаНаименования = Неопределено;
		Для Каждого ЗначениеМассиваСоответствий Из МассивСоответствий Цикл
			Если ЗначениеМассиваСоответствий.Обязательный Тогда
				СтрокаНаименования = ЗначениеМассиваСоответствий;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЗначениеСписка Из СтрокаНаименования.СписокИндексовПолей Цикл
			ЗначениеНаименования = ЗначениеНаименования + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименования = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
		КонецЦикла;
		
		Если НЕ СтруктураДанныхФормы.ВидСправочника = "Номенклатура" Тогда
			
			Наименование_КЛ	= Неопределено;
			Фамилия_КЛ		= Неопределено;
			Имя_КЛ			= Неопределено;
			Отчество_КЛ		= Неопределено;
			
			Для Каждого ЗначениеМассиваСоответствий Из МассивСоответствий Цикл
				Если ЗначениеМассиваСоответствий.ИмяРеквизита  = "Наименование_КЛ" Тогда
					Наименование_КЛ	= ЗначениеМассиваСоответствий;
				ИначеЕсли ЗначениеМассиваСоответствий.ИмяРеквизита  = "CRM_Фамилия_КЛ" Тогда	
					Фамилия_КЛ		= ЗначениеМассиваСоответствий;
				ИначеЕсли ЗначениеМассиваСоответствий.ИмяРеквизита  = "CRM_Имя_КЛ" Тогда
					Имя_КЛ			= ЗначениеМассиваСоответствий;
				ИначеЕсли ЗначениеМассиваСоответствий.ИмяРеквизита  = "CRM_Отчество_КЛ" Тогда	
					Отчество_КЛ		= ЗначениеМассиваСоответствий;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ  Наименование_КЛ = Неопределено Тогда
				Для Каждого ЗначениеСписка Из Наименование_КЛ.СписокИндексовПолей Цикл
					ЗначениеНаименованияКЛ = ЗначениеНаименованияКЛ + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКЛ = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
				КонецЦикла;
			Иначе
				Если НЕ Фамилия_КЛ = Неопределено Тогда 
					Для Каждого ЗначениеСписка Из Фамилия_КЛ.СписокИндексовПолей Цикл
						ЗначениеНаименованияКЛ = ЗначениеНаименованияКЛ + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКЛ = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ Имя_КЛ = Неопределено Тогда 
					Для Каждого ЗначениеСписка Из Имя_КЛ.СписокИндексовПолей Цикл
						ЗначениеНаименованияКЛ = ЗначениеНаименованияКЛ + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКЛ = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ Отчество_КЛ = Неопределено Тогда 
					Для Каждого ЗначениеСписка Из Отчество_КЛ.СписокИндексовПолей Цикл
						ЗначениеНаименованияКЛ = ЗначениеНаименованияКЛ + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименованияКЛ = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураДанныхФормы.ВидСправочника = "Номенклатура" Тогда
			Если СокрЛП(ЗначениеНаименования) = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеДляПоиска = СокрЛП(ЗначениеНаименования);
			
		Иначе
			Если СокрЛП(ЗначениеНаименования) = "" И СокрЛП(ЗначениеНаименованияКЛ) = "" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеДляПоиска = ?(СокрЛП(ЗначениеНаименования) = "", СокрЛП(ЗначениеНаименованияКЛ), СокрЛП(ЗначениеНаименования));
			
		КонецЕсли;
		
		// загрузим данные в БД
		Если СтруктураДанныхФормы.ВидСправочника = "Партнеры" Тогда
			Ссылка = НайтиПартнераИлиКЛ("Партнеры", ЗначениеДляПоиска, МассивСоответствий, ЗначениеМассива, СтруктураДанныхФормы, Неопределено);
		Иначе
			Ссылка = Справочники[СтруктураДанныхФормы.ВидСправочника].НайтиПоНаименованию(ЗначениеДляПоиска, Истина);
		КонецЕсли;
		
		ИсточникПривлечения = Неопределено;
		// комментарий КИ
		ПроверитьКомментарийКИ = Ложь;
		ОбработанКомментарийКИ = Истина;
		СтруктураКИ = Новый Структура("КИ");
		
		Если Ссылка = Справочники[СтруктураДанныхФормы.ВидСправочника].ПустаяСсылка() Тогда
			
			НовыхЭлементов = НовыхЭлементов + 1;
			
			// cоздадим новый элемент
			ЭлементСправочника = Справочники[СтруктураДанныхФормы.ВидСправочника].СоздатьЭлемент();
			
			Если ЗначениеЗаполнено(СтруктураДанныхФормы.ПапкаРодитель) Тогда
				ЭлементСправочника.Родитель = СтруктураДанныхФормы.ПапкаРодитель;
			КонецЕсли;
			
			ЭлементСправочника.Наименование = ЗначениеДляПоиска;
			ЭлементСправочника.Заполнить(Неопределено);
			
			//Если СтруктураДанныхФормы.ВидСправочника = "Контрагенты" Тогда
			Если СтруктураДанныхФормы.ВидСправочника = "Партнеры" Тогда
				// Если искали ПО ФИО, то и проставим признак того, что это физик.
				
				// (+Партнеры)
					ЭлементСправочника.ЮрФизЛицо = СтруктураДанныхФормы.ЮрФизЛицо;
					ЭлементСправочника.ДатаРегистрации = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
					//ЭлементСправочника.Клиент = СтруктураДанныхФормы.Клиент;
					//ЭлементСправочника.Поставщик = СтруктураДанныхФормы.Поставщик;
					//ЭлементСправочника.Конкурент = СтруктураДанныхФормы.Конкурент;
					//ЭлементСправочника.ПрочиеОтношения = СтруктураДанныхФормы.ПрочиеОтношения;
					Для каждого ТипОтношений из СтруктураДанныхФормы.CRM_ВсеТипыОтношений Цикл
						ЭлементСправочника[ТипОтношений.Значение] = ТипОтношений.Пометка;
					КонецЦикла;
				// (-Партнеры)
				
				//Если СокрЛП(ЗначениеНаименования)= "" Тогда
				//	//ЭлементСправочника.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
				//	ЭлементСправочника.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
				//Иначе
				//	//ЭлементСправочника.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				//	ЭлементСправочника.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
				//КонецЕсли;
			КонецЕсли;
		Иначе
			НайденоЭлементов = НайденоЭлементов + 1;
			
			// Получим объект
			ЭлементСправочника = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если СтруктураДанныхФормы.ВидСправочника = "Номенклатура" Тогда
			Если ЗначениеЗаполнено(СтруктураДанныхФормы.НоменклатурнаяГруппа) Тогда
				ЭлементСправочника.НоменклатурнаяГруппа = СтруктураДанныхФормы.НоменклатурнаяГруппа;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураДанныхФормы.ЕдиницаИзмерения) Тогда
				ЭлементСправочника.ЕдиницаИзмерения = СтруктураДанныхФормы.ЕдиницаИзмерения;
			Иначе
				ЭлементСправочника.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаРеквизитов Из МассивСоответствий Цикл
			Если СтрокаРеквизитов.Обязательный ИЛИ Прав(СтрокаРеквизитов.ИмяРеквизита,3) = "_КЛ" ИЛИ Прав(СтрокаРеквизитов.ИмяРеквизита,15) = "_КЛ_Комментарий" ИЛИ Лев(СтрокаРеквизитов.ИмяРеквизита,5) = "Цена_" Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = "";
			Для Каждого ЗначениеСписка Из СтрокаРеквизитов.СписокИндексовПолей Цикл
				Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
			КонецЦикла;
			
			// Удалим ведущий и последний пробелы.
			Значение = СокрЛП(Значение);
			
			// комментарий КИ
			Если НЕ Прав(СтрокаРеквизитов.ИмяРеквизита, 12) = "_Комментарий" Тогда
				
				Если СтрокаРеквизитов.РеквизитСправочник 
					И СтруктураДанныхФормы.ВидСправочника = "Партнеры"
					И Не СтрокаРеквизитов.ДополнительныйРеквизит
					Тогда
					// Реквизиты Бизнес-регион и Тип отношений.
					Если СтрокаРеквизитов.ИмяРеквизита = "БизнесРегион" Тогда
						Если ЗначениеЗаполнено(Значение) Тогда 
							СтрокаРегион = Справочники.БизнесРегионы.НайтиПоНаименованию(Значение,Истина);
							Если СтрокаРегион.Пустая() Тогда
								СтрокаРегион = Справочники.БизнесРегионы.СоздатьЭлемент();
								СтрокаРегион.Наименование	= Значение;
								Попытка 
									СтрокаРегион.Записать();
									ЭлементСправочника.БизнесРегион = СтрокаРегион.Ссылка;
								Исключение
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
								КонецПопытки;
							Иначе
								ЭлементСправочника.БизнесРегион = СтрокаРегион.Ссылка;
							КонецЕсли;
						Иначе
							ЭлементСправочника.БизнесРегион = Справочники.БизнесРегионы.ПустаяСсылка();
						КонецЕсли;
						
						
					КонецЕсли;	
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаРеквизитов.РеквизитТип) Тогда
					
					Если ЗначениеЗаполнено(Значение) Тогда
						Если СтрокаРеквизитов.РеквизитТип = "Дата" Тогда
							ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = ПропарситьЗначениеДаты(Значение, СтруктураДанныхФормы.КодПрограммы);
						ИначеЕсли СтрокаРеквизитов.РеквизитТип = "Число" Тогда
						    ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = Число(Значение);
						ИначеЕсли СтрНайти(СтрокаРеквизитов.РеквизитТип, "СправочникСсылка.") > 0 Тогда
							ЗначениеСсылка = Вычислить(СтрЗаменить(СтрокаРеквизитов.РеквизитТип, "СправочникСсылка.", "Справочники.")).НайтиПоНаименованию(Значение);
							Если НЕ ЗначениеЗаполнено(ЗначениеСсылка) И СтрокаРеквизитов.СоздаватьЭлемент Тогда
								НовыйЭлемент = Вычислить(СтрЗаменить(СтрокаРеквизитов.РеквизитТип, "СправочникСсылка.", "Справочники.")).СоздатьЭлемент();
								НовыйЭлемент.Наименование = Значение;
								НовыйЭлемент.Записать();
								ЗначениеСсылка = НовыйЭлемент.Ссылка;
							КонецЕсли;	
							Если ЗначениеЗаполнено(ЗначениеСсылка) Тогда
								ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = ЗначениеСсылка;
							КонецЕсли;
						ИначеЕсли СтрНайти(СтрокаРеквизитов.РеквизитТип, "ПланВидовХарактеристикСсылка.") > 0 Тогда
							Если СтрокаРеквизитов.ИмяРеквизита = "ИсточникПривлечения" Тогда
								ИсточникПривлечения = Вычислить(СтрЗаменить(СтрокаРеквизитов.РеквизитТип, "ПланВидовХарактеристикСсылка.", "ПланыВидовХарактеристик.")).НайтиПоНаименованию(Значение);
							Иначе
								ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = Вычислить(СтрЗаменить(СтрокаРеквизитов.РеквизитТип, "ПланВидовХарактеристикСсылка.", "ПланыВидовХарактеристик.")).НайтиПоНаименованию(Значение);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаРеквизитов.РеквизитДата Тогда
					
					ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = ПропарситьЗначениеДаты(Значение, СтруктураДанныхФормы.КодПрограммы);
					
				ИначеЕсли НЕ СтрокаРеквизитов.ПризнакКИ И Не СтрокаРеквизитов.ДополнительныйРеквизит Тогда
					
					Если СтрокаРеквизитов.ИмяРеквизита = "Пол" Тогда
						Если СокрЛП(Значение) = "Мужской" Тогда
							ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = Перечисления.ПолФизическогоЛица.Мужской;
						ИначеЕсли СокрЛП(Значение) = "Женский" Тогда
							ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = Перечисления.ПолФизическогоЛица.Женский;
						КонецЕсли;
					ИначеЕсли СтрокаРеквизитов.ИмяРеквизита = "СтавкаНДС" Тогда
						ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = Справочники.СтавкиНДС.НайтиПоНаименованию(Значение);
					Иначе
						ЭлементСправочника[СтрокаРеквизитов.ИмяРеквизита] = Значение;
					КонецЕсли;
					
				ИначеЕсли Не СтрокаРеквизитов.ДополнительныйРеквизит Тогда
					Если ЭлементСправочника.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
						СтрокаТЧ = ЭлементСправочника.КонтактнаяИнформация.Найти(СтрокаРеквизитов.СсылкаКИ, "Вид");
						Если СтрокаТЧ = Неопределено Тогда
							СтрокаТЧ = ЭлементСправочника.КонтактнаяИнформация.Добавить();
						КонецЕсли;
						
						СтрокаТЧ.Тип			= СтрокаРеквизитов.СсылкаКИ.Тип;
						СтрокаТЧ.Вид			= СтрокаРеквизитов.СсылкаКИ;
						СтрокаТЧ.Представление	= Значение;
						// комментарий КИ
						ПроверитьКомментарийКИ = Истина;
						ОбработанКомментарийКИ = Ложь;
						СтруктураКИ.КИ = СтрокаТЧ;
					КонецЕсли;
					//(+Контактная Информация)
					//ИмяРеквизита = "";
					Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
						
						Если СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.АдресПартнера
							ИЛИ 
							СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации
							Тогда
							
							ИмяРеквизита = "CRM_ФактическийАдрес";
						ИначеЕсли СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес
							ИЛИ
							СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации 
							Тогда 
							ИмяРеквизита = "CRM_ЮридическийАдрес";
						КонецЕсли;
					Иначе
						ИмяРеквизита = "CRM_" + СтрЗаменить(СтрокаРеквизитов.ИмяРеквизита, "Контрагента", "");
					КонецЕсли;
					Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						
						Если СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера 
							ИЛИ 
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица 
							ИЛИ 
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации 
							Тогда
							ИмяРеквизита = "CRM_Телефон";
						ИначеЕсли 
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица
							ИЛИ
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя
							ИЛИ 
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица
							ИЛИ
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица
							Тогда
							ИмяРеквизита = "CRM_МобильныйТелефон";
						КонецЕсли;
					КонецЕсли;
					Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						Если СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица 
							ИЛИ
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера
							ИЛИ
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации
							ИЛИ
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя
							ИЛИ
							СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица
							Тогда
							ИмяРеквизита = "CRM_Email";
						КонецЕсли;
					КонецЕсли;
					//(-Контактная Информация)
					
					Если ЭлементСправочника.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
						ЭлементСправочника[ИмяРеквизита] = Значение;
					КонецЕсли;
				Иначе
					//(+  )
					Если СтрокаРеквизитов.ДополнительныйРеквизит Тогда
						
						мСвойств = СтруктураДанныхФормы.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Наименование",СтрокаРеквизитов.ИмяРеквизита));
						Свойство = Неопределено;
						
						Если мСвойств.Количество() > 0 Тогда
							
							ДанныеФормыСвойство = мСвойств[0];
							
						Иначе
							
							Продолжить;
							
						КонецЕсли;						
						
						ПВХСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ДанныеФормыСвойство.Наименование);
						Если Не ЗначениеЗаполнено(ПВХСвойство) Тогда
							Продолжить;	
						КонецЕсли;
						
						Свойство = ПВХСвойство.Ссылка;
						// ПолучимЗначение 
						ДопРеквизитыЭлемента = ЭлементСправочника.ДополнительныеРеквизиты;
						
						НайденыеСтрокиДопРекв = ДопРеквизитыЭлемента.НайтиСтроки(
						Новый Структура("Свойство",Свойство)
						);
						РедактированиеСтроки = Ложь;
						Если НайденыеСтрокиДопРекв.Количество() > 0 Тогда 
							
							РедактированиеСтроки = Истина;
							СтрокаТаблицы = НайденыеСтрокиДопРекв[0];
							
						Иначе
							
							СтрокаТаблицы = ЭлементСправочника.ДополнительныеРеквизиты.Добавить();	
							
						КонецЕсли;
						
						СтрокаТаблицы.Свойство = Свойство;
						Если Значение = "" И РедактированиеСтроки Тогда
							
							ЭлементСправочника.ДополнительныеРеквизиты.Удалить(СтрокаТаблицы);
							Продолжить;
							
						КонецЕсли;
						
						Если Свойство.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
							СтрокаТаблицы.Значение = Значение;		
						ИначеЕсли Свойство.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
							
							СтрокаТаблицы.Значение = Свойство.ТипЗначения.ПривестиЗначение(Значение);
							
						ИначеЕсли Свойство.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
							
							СтрокаТаблицы.Значение = Свойство.ТипЗначения.ПривестиЗначение(Значение);
							
						ИначеЕсли Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда					
							
							Выборка = Справочники.ЗначенияСвойствОбъектов.Выбрать(,Свойство,Новый Структура("Наименование",Значение));
							
							Если Выборка.Следующий() Тогда
								СтрокаТаблицы.Значение = Выборка.Ссылка;
							Иначе
								ЭлементЗначения = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
								ЭлементЗначения.Владелец = Свойство;
								ЭлементЗначения.Наименование = Значение;
								ЭлементЗначения.Записать();
								СтрокаТаблицы.Значение  = ЭлементЗначения.Ссылка;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					//(-  )
					
				КонецЕсли;		
				
			Иначе
				// комментарий КИ
				Если (ПроверитьКомментарийКИ И НЕ ОбработанКомментарийКИ) Тогда
					ПроверитьКомментарийКИ = Ложь;
					ОбработанКомментарийКИ = Истина;
					Если ЗначениеЗаполнено(Значение) И ЗначениеЗаполнено(СтруктураКИ.КИ) Тогда
						СтрокаТЧ = ЭлементСправочника.КонтактнаяИнформация.Найти(СтруктураКИ.КИ.Вид, "Вид");
						ОбработатьСтрокуКомментарияКонтактнойИнформации(СтрокаТЧ, Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
		// (+Номенклатура)
		Если СтруктураДанныхФормы.ВидСправочника = "Номенклатура"		Тогда
			ЭлементСправочника["ТипНоменклатуры"] = СтруктураДанныхФормы.ТипНоменклатуры;
		КонецЕсли;
		// (-Номенклатура)
		
		ЭлементСправочника.Записать();
		
		Если СтруктураДанныхФормы.ВидСправочника = "Номенклатура" Тогда 
			Для Каждого СтрокаРеквизитов Из МассивСоответствий Цикл
				Если Лев(СтрокаРеквизитов.ИмяРеквизита,5) = "Цена_" Тогда
					
					МассивСтрокТЧ = СтруктураДанныхФормы.ПоляСправочника.НайтиСтроки(Новый Структура("НаименованиеРеквизита", СтрокаРеквизитов.ИмяРеквизита));
					ВидЦены = МассивСтрокТЧ[0].СправочникСсылка;
					
					Значение = "";
					Для Каждого ЗначениеСписка Из СтрокаРеквизитов.СписокИндексовПолей Цикл
						Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
						Значение = СтрЗаменить(Значение, " ", "");
					КонецЦикла;
					
					Если Значение = "" Тогда Продолжить; КонецЕсли;
					
					Попытка
						МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
						
						МенеджерЗаписи.Период			= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
						МенеджерЗаписи.Автор			= Пользователи.ТекущийПользователь();
						
						МенеджерЗаписи.Номенклатура		= ЭлементСправочника.Ссылка;
						МенеджерЗаписи.ВидЦен			= ВидЦены;
						
						МенеджерЗаписи.Цена				= Число(Значение);
						МенеджерЗаписи.ЕдиницаИзмерения	= ЭлементСправочника.ЕдиницаИзмерения;
						
						МенеджерЗаписи.Записать();
					Исключение	
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Поколдуем над Контактным лицом.
		//Если СтруктураДанныхФормы.ВидСправочника = "Контрагенты" Тогда
		Если СтруктураДанныхФормы.ВидСправочника = "Партнеры" Тогда
			Если НЕ СокрЛП(ЗначениеНаименования)= "" И НЕ СокрЛП(ЗначениеНаименованияКЛ)= "" Тогда
				//СсылкаКЛ = Справочники.КонтактныеЛицаПартнеров.НайтиПоНаименованию(СокрЛП(ЗначениеНаименованияКЛ), Истина,,ЭлементСправочника.Ссылка);
				СсылкаКЛ = НайтиПартнераИлиКЛ("КонтактныеЛицаПартнеров", СокрЛП(ЗначениеНаименованияКЛ), МассивСоответствий, ЗначениеМассива, СтруктураДанныхФормы, ЭлементСправочника.Ссылка);
				Если СсылкаКЛ = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка() Тогда
					
					ЭлементСправочникаКЛ = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
					ЭлементСправочникаКЛ.Владелец = ЭлементСправочника.Ссылка;
					ЭлементСправочникаКЛ.Наименование = СокрЛП(ЗначениеНаименованияКЛ);
					ЭлементСправочникаКЛ.Заполнить(Неопределено);
					ЭлементСправочникаКЛ.Автор = Пользователи.АвторизованныйПользователь();
				Иначе
					ЭлементСправочникаКЛ = СсылкаКЛ.ПолучитьОбъект();
				КонецЕсли;
				
				Для Каждого СтрокаРеквизитов Из МассивСоответствий Цикл
					Если (НЕ Прав(СтрокаРеквизитов.ИмяРеквизита, 3) = "_КЛ" И НЕ Прав(СтрокаРеквизитов.ИмяРеквизита, 15) = "_КЛ_Комментарий") ИЛИ СтрокаРеквизитов.ИмяРеквизита = "Наименование_КЛ" Тогда
						Продолжить;
					КонецЕсли;
					
					Значение = "";
					Для Каждого ЗначениеСписка Из СтрокаРеквизитов.СписокИндексовПолей Цикл
						Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
					КонецЦикла;
					
					// комментарий КИ
					Если НЕ Прав(СтрокаРеквизитов.ИмяРеквизита, 12) = "_Комментарий" Тогда
						
						ИмяРеквизита = СтрокаРеквизитов.ИмяРеквизита;
						ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "_КЛ", "");
						//ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "КонтактногоЛица", "");
						
						// Удалим ведущий и последний пробелы.
						Значение = СокрЛП(Значение);
						
						Если НЕ СтрокаРеквизитов.ПризнакКИ Тогда
							
							Если НЕ (ТипЗнч(ЭлементСправочникаКЛ[ИмяРеквизита]) = Тип("Неопределено")) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлементСправочникаКЛ[ИмяРеквизита])) Тогда
								
								ПолноеИмя = ЭлементСправочникаКЛ[ИмяРеквизита].Метаданные().ПолноеИмя();
								Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
								
								Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементСправочникаКЛ[ИмяРеквизита])) Тогда
									
									Если ИмяРеквизита = "Пол" Тогда
										Если СокрЛП(Значение) = "Мужской" Тогда
											ЭлементСправочникаКЛ[ИмяРеквизита] = Перечисления.ПолФизическогоЛица.Мужской;
										ИначеЕсли СокрЛП(Значение) = "Женский" Тогда
											ЭлементСправочникаКЛ[ИмяРеквизита] = Перечисления.ПолФизическогоЛица.Женский;
										КонецЕсли;
									КонецЕсли;	
									
								ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементСправочникаКЛ[ИмяРеквизита])) Тогда
									СправочникСсылка = Неопределено;
									СправочникСсылка = Менеджер.НайтиПоНаименованию(Значение);
									Если ЗначениеЗаполнено(СправочникСсылка) Тогда
										ЭлементСправочникаКЛ[ИмяРеквизита] = СправочникСсылка;
									Иначе
										СправочникОбъект = Менеджер.СоздатьЭлемент();
										СправочникОбъект.Наименование = Значение;
										СправочникОбъект.Записать();
										ЭлементСправочникаКЛ[ИмяРеквизита] = СправочникОбъект.Ссылка;
									КонецЕсли;
								КонецЕсли;
								
							Иначе
								
								Если ТипЗнч(ЭлементСправочникаКЛ[ИмяРеквизита])  = Тип("Дата") Тогда
									
									ЭлементСправочникаКЛ[ИмяРеквизита] = ПропарситьЗначениеДаты(Значение, СтруктураДанныхФормы.КодПрограммы);
									
								Иначе
									
									ЭлементСправочникаКЛ[ИмяРеквизита] = Значение;
									
								КонецЕсли;	
								
							КонецЕсли;
						Иначе
							Если ЭлементСправочникаКЛ.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
								СтрокаТЧ = ЭлементСправочникаКЛ.КонтактнаяИнформация.Найти(СтрокаРеквизитов.СсылкаКИ, "Вид");
								Если СтрокаТЧ = Неопределено Тогда
									СтрокаТЧ = ЭлементСправочникаКЛ.КонтактнаяИнформация.Добавить();
								КонецЕсли;
								
								СтрокаТЧ.Тип			= СтрокаРеквизитов.СсылкаКИ.Тип;
								СтрокаТЧ.Вид			= СтрокаРеквизитов.СсылкаКИ;
								СтрокаТЧ.Представление	= Значение;
								
								// комментарий КИ
								ПроверитьКомментарийКИ = Истина;
								ОбработанКомментарийКИ = Ложь;
								СтруктураКИ.КИ = СтрокаТЧ;
							КонецЕсли;
							//(+Контактная Информация)
							//ИмяРеквизита = "";
							Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
								
								Если СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.АдресПартнера
									ИЛИ 
									СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации
									Тогда
									
									ИмяРеквизита = "CRM_ФактическийАдрес";
								ИначеЕсли СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес
									ИЛИ
									СтрокаРеквизитов.СсылкаКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации 
									Тогда 
									ИмяРеквизита = "CRM_ЮридическийАдрес";
								КонецЕсли;
							Иначе
								ИмяРеквизита = "CRM_" + СтрЗаменить(СтрокаРеквизитов.ИмяРеквизита, "Контрагента", "");
							КонецЕсли;
							Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
								
								Если СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера 
									ИЛИ 
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица 
									ИЛИ 
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации 
									Тогда
									ИмяРеквизита = "CRM_Телефон";
								ИначеЕсли 
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица
									ИЛИ
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя
									ИЛИ 
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица
									ИЛИ
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица
									Тогда
									ИмяРеквизита = "CRM_МобильныйТелефон";
								КонецЕсли;
							КонецЕсли;
							Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
								Если СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица 
									ИЛИ
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера
									ИЛИ
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации
									ИЛИ
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя
									ИЛИ
									СтрокаТЧ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица
									Тогда
									ИмяРеквизита = "CRM_Email";
								КонецЕсли;
							КонецЕсли;
							//(-Контактная Информация)
							Если ЭлементСправочникаКЛ.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
								ЭлементСправочникаКЛ[ИмяРеквизита] = Значение;
							КонецЕсли;
						КонецЕсли;		
						
					Иначе
						// комментарий КИ
						Если (ПроверитьКомментарийКИ И НЕ ОбработанКомментарийКИ) Тогда
							ПроверитьКомментарийКИ = Ложь;
							ОбработанКомментарийКИ = Истина;
							Если ЗначениеЗаполнено(Значение) И ЗначениеЗаполнено(СтруктураКИ.КИ) Тогда
								СтрокаТЧ = ЭлементСправочникаКЛ.КонтактнаяИнформация.Найти(СтруктураКИ.КИ.Вид, "Вид");
								ОбработатьСтрокуКомментарияКонтактнойИнформации(СтрокаТЧ, Значение);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				ЭлементСправочникаКЛ.Записать();
				
				Если Не ЗначениеЗаполнено(ЭлементСправочника.CRM_ОсновноеКонтактноеЛицо) Тогда
					
					ЭлементСправочника.CRM_ОсновноеКонтактноеЛицо = ЭлементСправочникаКЛ.Ссылка;
					
					ЭлементСправочника.Записать();
					
				КонецЕсли; 
			
			КонецЕсли;
			Если ЗначениеЗаполнено(ИсточникПривлечения) Тогда
				МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Партнер = ЭлементСправочника.Ссылка;
				МенеджерЗаписи.КаналПервичногоИнтереса = ИсточникПривлечения;
				МенеджерЗаписи.Период = ?(ЗначениеЗаполнено(ЭлементСправочника.ДатаРегистрации), ЭлементСправочника.ДатаРегистрации, ТекущаяДатаСеанса());
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Если СтруктураДанныхФормы.ВидСправочника = "Контрагенты" Тогда
	Если СтруктураДанныхФормы.ВидСправочника = "Партнеры" Тогда
		
		СтруктураДанныхФормы.ВсегоОбработано	= ВсегоСтрок;
		СтруктураДанныхФормы.Создано			= НовыхЭлементов;
		СтруктураДанныхФормы.Найдено			= НайденоЭлементов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиПередатьВДокументВыбранныеЭлементы(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
	МассивПередачиДанных = Новый Массив;
	
	ТекСтрока = 0;
	Для Каждого ЗначениеМассива Из МассивФайла Цикл
		
		ТекСтрока = ТекСтрока + 1;
		
		ЗначениеНаименования = "";
		
		СтрокаНаименования = Неопределено;
		Для Каждого ЗначениеМассиваСоответствий Из МассивСоответствий Цикл
			Если ЗначениеМассиваСоответствий.Обязательный Тогда
				СтрокаНаименования = ЗначениеМассиваСоответствий;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЗначениеСписка Из СтрокаНаименования.СписокИндексовПолей Цикл
			ЗначениеНаименования = ЗначениеНаименования + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеНаименования = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
		КонецЦикла;
		
		Если СокрЛП(ЗначениеНаименования) = ""  Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеДляПоиска = СокрЛП(ЗначениеНаименования);
		
		Ссылка = НайтиПартнераИлиКЛ("Партнеры", ЗначениеДляПоиска, МассивСоответствий, ЗначениеМассива, СтруктураДанныхФормы, Неопределено, ЗагрузкаВДокумент);
				
		Если Ссылка = Справочники.Партнеры.ПустаяСсылка() Тогда
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Клиент", ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
			СтруктураДанных.Вставить("Наименование", ЗначениеДляПоиска);
			
			
			Для Каждого СтрокаРеквизитов Из МассивСоответствий Цикл
				Если НЕ СтрокаРеквизитов.ПризнакКИ  Тогда
					Продолжить;
				КонецЕсли;
				
				Значение = "";
				Для Каждого ЗначениеСписка Из СтрокаРеквизитов.СписокИндексовПолей Цикл
					Значение = Значение + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)]="", "", " "+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
				КонецЦикла;
				
				// Удалим ведущий и последний пробелы.
				Значение = СокрЛП(Значение);
				
				Если СтрокаРеквизитов.ИмяРеквизита = "Телефон" Тогда
					СтруктураДанных.Вставить("Телефон", Значение);					
				ИначеЕсли СтрокаРеквизитов.ИмяРеквизита = "Email" Тогда				
					СтруктураДанных.Вставить("Почта", Значение);					
				КонецЕсли;							
				
			КонецЦикла;			
			
		Иначе			
			// Получим объект
			ЭлементСправочника = Ссылка.ПолучитьОбъект();
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Клиент", Ссылка);
			СтруктураДанных.Вставить("Наименование", ЭлементСправочника.Наименование);			
			
			Если ЗначениеЗаполнено(ЗагрузкаВДокумент) И ЗагрузкаВДокумент = "Телемаркетинг" Тогда
				
				ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Ссылка, Неопределено, Перечисления.ТипыКонтактнойИнформации.Телефон);
				Если ТаблицаКИ.Количество() > 0 Тогда
					ПредставлениеНомера = ТаблицаКИ[0].Представление;
					СтруктураДанных.Вставить("Телефон", ПредставлениеНомера);
					СтруктураДанных.Вставить("Почта", "");									
				Иначе
					СтруктураДанных.Вставить("Телефон", "");					
					СтруктураДанных.Вставить("Почта", "");									
				КонецЕсли;					
				
			ИначеЕсли ЗначениеЗаполнено(ЗагрузкаВДокумент) И ЗагрузкаВДокумент = "РассылкаПисем" Тогда
				                                           
				ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Ссылка, Неопределено, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);				
				Если ТаблицаКИ.Количество() > 0 Тогда
					ПредставлениеПочты = ТаблицаКИ[0].Представление;
					СтруктураДанных.Вставить("Почта", ПредставлениеПочты);
					СтруктураДанных.Вставить("Телефон", "");					
				Иначе
					СтруктураДанных.Вставить("Телефон", "");					
					СтруктураДанных.Вставить("Почта", "");					
				КонецЕсли;	
				
			Иначе
				СтруктураДанных.Вставить("Телефон", "");					
				СтруктураДанных.Вставить("Почта", "");									
			КонецЕсли;				
			
		КонецЕсли;
		
		МассивПередачиДанных.Добавить(СтруктураДанных);	
		
	КонецЦикла;
	
	Возврат МассивПередачиДанных;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗагрузитьНаСервере(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
	НайтиСоздатьЭлементыСправочника(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервереВДокумент(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
	Возврат НайтиПередатьВДокументВыбранныеЭлементы(МассивСоответствий, МассивФайла, СтруктураДанныхФормы)
	
КонецФункции

// (+Партнеры)
&НаСервере
Функция ПолучитьДополнительныеРеквизиты()
	Возврат Общегоназначения.ТаблицаЗначенийВМассив(Объект.ДополнительныеРеквизиты.Выгрузить());
КонецФункции

// (-Партнеры)
&НаКлиенте
Процедура СформироватьТаблицуЗагрузитьСправочник()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьТаблицуЗагрузитьСправочникЗавершение", ЭтотОбъект);
	// Текстовый файл, разделитель ",".
	Если КодПрограммы = 1 Тогда
		ЗагрузитьИзТекста(",", ОписаниеОповещения);
	// Текстовый файл, разделитель ";".
	ИначеЕсли КодПрограммы = 2 Тогда
		ЗагрузитьИзТекста(";", ОписаниеОповещения);
	// Текстовый файл, разделитель " ".
	ИначеЕсли КодПрограммы = 3 Тогда
		ЗагрузитьИзТекста("Таб", ОписаниеОповещения);
	Иначе
		Если нРег(Расширение) = ".xls" Тогда
			МассивФайла  = ЗагрузитьИзExcel();
			СформироватьТаблицуЗагрузитьСправочникЗавершение(МассивФайла, Неопределено);
		ИначеЕсли нРег(Расширение) = ".csv" Тогда
			//Outlook Express
			ЗагрузитьИзТекста(?(КодПрограммы = 6,";",","), ОписаниеОповещения);
		ИначеЕсли нРег(Расширение) = ".txt" ИЛИ нРег(Расширение) = ".tdf" Тогда	
			ЗагрузитьИзТекста("Таб", ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуЗагрузитьСправочникЗавершение(МассивФайла, ДополнгительныеПараметры) Экспорт
	
	МассивСоответствий = СформироватьМассивСоответствий();
	СтруктураДанныхФормы = Новый Структура;                      
	СтруктураДанныхФормы.Вставить("ВидСправочника"			, ВидСправочника);
	СтруктураДанныхФормы.Вставить("ПапкаРодитель"			, ПапкаРодитель);
	СтруктураДанныхФормы.Вставить("ПоляСправочника"			, Объект.ПоляСправочника);
	СтруктураДанныхФормы.Вставить("ВсегоОбработано"			, 0);
	СтруктураДанныхФормы.Вставить("Создано"					, 0);
	СтруктураДанныхФормы.Вставить("Найдено"					, 0);
	СтруктураДанныхФормы.Вставить("ЮрФизЛицо"				, ЮрФизЛицо);
	СтруктураДанныхФормы.Вставить("НоменклатурнаяГруппа"	, НоменклатурнаяГруппа);
	СтруктураДанныхФормы.Вставить("ЕдиницаИзмерения"		, ЕдиницаИзмерения);
	СтруктураДанныхФормы.Вставить("КодПрограммы"			, КодПрограммы);
	//СтруктураДанныхФормы.Вставить("Клиент" 					, Клиент);
	//СтруктураДанныхФормы.Вставить("Конкурент" 				, Конкурент);
	//СтруктураДанныхФормы.Вставить("Поставщик" 				, Поставщик);
	//СтруктураДанныхФормы.Вставить("ПрочиеОтношения" 		, ПрочиеОтношения);
	СтруктураДанныхФормы.Вставить("CRM_ВсеТипыОтношений" 		, CRM_ВсеТипыОтношений);
	
	// (+Партнеры)
		СтруктураДанныхФормы.Вставить("ДополнительныеРеквизиты",Объект.ДополнительныеРеквизиты);
		СтруктураДанныхФормы.Вставить("ДополнительныеРеквизиты1",ПолучитьДополнительныеРеквизиты());
		
		СтруктураДанныхФормы.Вставить("ИскатьКлиентовПоАдресамEMail", ИскатьКлиентовПоАдресамEMail);
		СтруктураДанныхФормы.Вставить("ИскатьКлиентовПоТелефонам", ИскатьКлиентовПоТелефонам);
	// (-Партнеры)
	
	//(+ Номенклатура)
	СтруктураДанныхФормы.Вставить("ТипНоменклатуры"	,ТипНоменклатуры);
	//(- Номенклатура) 
	
	Если ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
		// значит, обработка открыта из телемаркетинга или рассылки писем
		МассивЭлементов = ЗагрузитьНаСервереВДокумент(МассивСоответствий, МассивФайла, СтруктураДанныхФормы);
		Закрыть(МассивЭлементов);
		Возврат;
	Иначе		
		ЗагрузитьНаСервере(МассивСоответствий, МассивФайла, СтруктураДанныхФормы);
	КонецЕсли;		
	
	Если СтруктураДанныхФормы.ВсегоОбработано > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Обработано строк: " + Строка(СтруктураДанныхФормы.ВсегоОбработано) + "'");
		Если СтруктураДанныхФормы.Создано > 0 Тогда
			ТекстСообщения = ТекстСообщения + "
			|" + НСтр("ru = 'Создано новых клиентов: " + Строка(СтруктураДанныхФормы.Создано) + "'");
		КонецЕсли;
		
		Если СтруктураДанныхФормы.Найдено > 0 Тогда
			ТекстСообщения = ТекстСообщения + "
			|" + НСтр("ru = 'Найдено клиентов: "+ Строка(СтруктураДанныхФормы.Найдено) + "'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// +КомментарийКИ
&НаСервереБезКонтекста
Процедура ОбработатьСтрокуКомментарияКонтактнойИнформации(КонтактнаяИнформация, Комментарий)
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		КонтактнаяИнформация.ЗначенияПолей = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""%Представление%""><Комментарий>%Комментарий%</Комментарий><Состав xsi:type=""Адрес"" Страна=""РОССИЯ""><Состав xsi:type=""АдресРФ""><Адрес_по_документу>""%Представление%""</Адрес_по_документу></Состав></Состав></КонтактнаяИнформация>";
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Представление%", КонтактнаяИнформация.Представление);
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Комментарий%", Комментарий);
	ИначеЕсли КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		КонтактнаяИнформация.ЗначенияПолей = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""%Представление%""><Комментарий>%Комментарий%</Комментарий><Состав xsi:type=""НомерТелефона"" КодСтраны="""" КодГорода="""" Номер="""" Добавочный=""""/></КонтактнаяИнформация>";
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Представление%", КонтактнаяИнформация.Представление);
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Комментарий%", Комментарий);
	ИначеЕсли КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		КонтактнаяИнформация.ЗначенияПолей = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""%Представление%""><Комментарий>%Комментарий%</Комментарий><Состав xsi:type=""НомерФакса"" КодСтраны="""" КодГорода="""" Номер="""" Добавочный=""""/></КонтактнаяИнформация>";
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Представление%", КонтактнаяИнформация.Представление);
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Комментарий%", Комментарий);
	ИначеЕсли КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		КонтактнаяИнформация.ЗначенияПолей = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""%Представление%""><Комментарий>%Комментарий%</Комментарий><Состав xsi:type=""ЭлектроннаяПочта"" Значение=""""/></КонтактнаяИнформация>";
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Представление%", КонтактнаяИнформация.Представление);
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Комментарий%", Комментарий);
	ИначеЕсли КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		КонтактнаяИнформация.ЗначенияПолей = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""%Представление%""><Комментарий>%Комментарий%</Комментарий><Состав xsi:type=""ВебСайт"" Значение=""""/></КонтактнаяИнформация>";
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Представление%", КонтактнаяИнформация.Представление);
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Комментарий%", Комментарий);
	ИначеЕсли КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		КонтактнаяИнформация.ЗначенияПолей = "<КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" Представление=""%Представление%""><Комментарий>%Комментарий%</Комментарий><Состав xsi:type=""Прочее"" Значение=""""/></КонтактнаяИнформация>";
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Представление%", КонтактнаяИнформация.Представление);
		КонтактнаяИнформация.ЗначенияПолей = СтрЗаменить(КонтактнаяИнформация.ЗначенияПолей, "%Комментарий%", Комментарий);
	КонецЕсли;
КонецПроцедуры
// -КомментарийКИ

&НаКлиенте
Процедура СформироватьТаблицуЗакрытьФорму()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьТаблицуЗакрытьФормуЗавершение", ЭтотОбъект);
	// Текстовый файл, разделитель ",".
	Если КодПрограммы = 1 Тогда
		ЗагрузитьИзТекста(",", ОписаниеОповещения);
	// Текстовый файл, разделитель ";".
	ИначеЕсли КодПрограммы = 2 Тогда
		ЗагрузитьИзТекста(";", ОписаниеОповещения);
	// Текстовый файл, разделитель " ".
	ИначеЕсли КодПрограммы = 3 Тогда
		ЗагрузитьИзТекста("Таб", ОписаниеОповещения);
	Иначе
		Если нРег(Расширение) = ".xls" Тогда
			МассивФайла  = ЗагрузитьИзExcel();
			СформироватьТаблицуЗакрытьФормуЗавершение(МассивФайла, Неопределено);
		ИначеЕсли нРег(Расширение) = ".csv" Тогда
			//Outlook Express
			ЗагрузитьИзТекста(?(КодПрограммы = 6,";",","), ОписаниеОповещения);
		ИначеЕсли нРег(Расширение) = ".txt" ИЛИ нРег(Расширение) = ".tdf" Тогда	
			ЗагрузитьИзТекста("Таб", ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуЗакрытьФормуЗавершение(МассивФайла, ДополнительныеПараметры) Экспорт
	
	МассивСоответствий = СформироватьМассивСоответствий();
	СтрокаКлючей = "";
	
	Для Каждого ЗначениеМассива Из МассивСоответствий Цикл
		СтрокаКлючей = СтрокаКлючей + ?(СтрокаКлючей = "","",",") + ЗначениеМассива.ИмяРеквизита;
	КонецЦикла;
	
	РезультатМассив = Новый Массив;
	
	Всего = МассивФайла.Количество();
	Ном = 0;
	Для Каждого ЗначениеМассива Из МассивФайла Цикл
		
		Ном = Ном + 1;
		
		Прогресс = Окр(((Ном) / Всего) * 100);
		Состояние(НСтр("ru = 'Обработка данных...'"), Прогресс);
		
		СтруктураЗначений = Новый Структура(СтрокаКлючей);
		
		ОТК = Ложь;
		Для Каждого ЗначениеМассиваСоответствий Из МассивСоответствий Цикл
			
			ЗначениеРеквизита = "";
			
			Для Каждого ЗначениеСписка Из ЗначениеМассиваСоответствий.СписокИндексовПолей Цикл
				ЗначениеРеквизита = ЗначениеРеквизита + ?(ЗначениеМассива["_"+Строка(ЗначениеСписка)] = "", "", ?(ЗначениеРеквизита = "", "", " ")+ЗначениеМассива["_"+Строка(ЗначениеСписка)]);
			КонецЦикла;
			
			СтруктураЗначений[ЗначениеМассиваСоответствий.ИмяРеквизита] = ЗначениеРеквизита;
			
			Если НЕ ЗначениеРеквизита =  "" Тогда ОТК = Истина; КонецЕсли;
		КонецЦикла;
		
		Если ОТК Тогда
			РезультатМассив.Добавить(СтруктураЗначений);
		КонецЕсли;
		
	КонецЦикла;
	
	Закрыть(РезультатМассив);	
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ЗаполнитьСписокВыбораНаименованиеПрограммы(ВидСправочникаСтр)
	
	Элементы.НаименованиеПрограммы.СписокВыбора.Очистить();
	
	Если ВидСправочникаСтр = "" Тогда
		
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '1. Текстовый файл (разделитель "","")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '2. Текстовый файл (разделитель "";"")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '3. Текстовый файл (разделитель ""  "")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '4. Файл MS Excel (*.xls)'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("5. MS Outlook");
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("6. Outlook Express");
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("7. The Bat!");
		
		НаименованиеПрограммы	= НСтр("ru = '4. Файл MS Excel (*.xls)'");
	//ИначеЕсли  ВидСправочникаСтр = "Контрагенты" тогда
	ИначеЕсли  ВидСправочникаСтр = "Партнеры" Тогда
		
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '1. Текстовый файл (разделитель "","")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '2. Текстовый файл (разделитель "";"")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '3. Текстовый файл (разделитель ""  "")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '4. Файл MS Excel (*.xls)'"));
		
		
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("5. MS Outlook");
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("6. Outlook Express");
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить("7. The Bat!");
		
		НаименованиеПрограммы	= НСтр("ru = '4. Файл MS Excel (*.xls)'");
	ИначеЕсли  ВидСправочникаСтр = "Номенклатура" Тогда 
		
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '1. Текстовый файл (разделитель "","")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '2. Текстовый файл (разделитель "";"")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '3 Текстовый файл (разделитель ""  "")'"));
		Элементы.НаименованиеПрограммы.СписокВыбора.Добавить(НСтр("ru = '4. Файл MS Excel (*.xls)'"));
		
		НаименованиеПрограммы	= НСтр("ru = '4. Файл MS Excel (*.xls)'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидСправочника(ВидСправочникаСтр);
	
	Элементы.ВидСправочника.СписокВыбора.Очистить();
	
	Если ВидСправочникаСтр = "" Тогда
		//ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Контрагенты");
		Элементы.ВидСправочника.СписокВыбора.Добавить("Партнеры", НСтр("ru = 'Клиенты'"));
		Элементы.ВидСправочника.СписокВыбора.Добавить("Номенклатура",НСтр("ru = 'Номенклатура'"));
	Иначе		
		//ЭтаФорма.Элементы.ВидСправочника.СписокВыбора.Добавить("Контрагенты");
		Элементы.ВидСправочника.СписокВыбора.Добавить("Партнеры", НСтр("ru = 'Клиенты'"));
		Элементы.ВидСправочника.СписокВыбора.Добавить("Номенклатура",НСтр("ru = 'Номенклатура'"));
		Элементы.ВидСправочника.СписокВыбора.Добавить("Массив");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ТипНоменклатуры) Тогда 
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда 
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
	
	Клиент = Истина;
	
	Если НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда 
		НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ОсновнаяГруппа;
	КонецЕсли;
	
	// Заполним поля списков выбора.
	ЗаполнитьСписокВыбораНаименованиеПрограммы(Параметры.ВидСправочника);
	ЗаполнитьСписокВыбораВидСправочника(Параметры.ВидСправочника);
	
	// + Скрывать вид справочника + фиксировать тип родительской папки.
	Если Не Параметры.ВидСправочника = "" Тогда
		ВидСправочника = Параметры.ВидСправочника;
	Иначе
		ВидСправочника = "Партнеры";
	КонецЕсли;
	
	Если Не Параметры.ТипДействия = "" Тогда
		ТипДействия = Параметры.ТипДействия;
	Иначе
		ТипДействия = "Стандартный";
	КонецЕсли;
	
	Если Не Параметры.ВидЦены = "" Тогда
		
		ВидЦены = Параметры.ВидЦены;
		
	КонецЕсли;
	
	Если ВидСправочника = "Партнеры" Тогда
		
		Заголовок = НСтр("ru = 'Импорт справочника Клиенты'");
		
	ИначеЕсли  ВидСправочника = "Номенклатура" Тогда
		Если ТипДействия = "Стандартный" Тогда
			Заголовок = НСтр("ru = 'Импорт справочника Товары/услуги'")
		Иначе
			Заголовок = НСтр("ru = 'Загрузка цен товаров и услуг'")
		КонецЕсли;	
		
	ИначеЕсли  ВидСправочника = "Массив" Тогда
		
		Заголовок = НСтр("ru = 'Импорт из файла'");
		Элементы.РеквизитыСправочника.Заголовок = НСтр("ru = 'Сопоставление полей таблицы с полями файла'");
		Элементы.ПоляСправочникаСинонимРеквизита.Заголовок = НСтр("ru = 'Поле таблицы'")

	КонецЕсли;
	
	Элементы.ВидСправочника.Видимость = (Параметры.ВидСправочника = ""
															И Не Параметры.ВидСправочника = "Массив"
															И Не Параметры.ВидСправочника = "ЦеныНоменклатуры");
	
	Элементы.ПапкаРодитель.Видимость = (Не Параметры.ВидСправочника = "Массив"
												 И ТипДействия = "Стандартный");
												 
	ПапкаРодитель = ?(ВидСправочника = "Массив", Неопределено, Справочники[ВидСправочника].ПустаяСсылка());
	
	Элементы.ПапкаРодитель.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	Если Параметры.Свойство("ЗагрузкаВДокумент") Тогда
		ЗагрузкаВДокумент = Параметры.ЗагрузкаВДокумент;
		Заголовок = НСтр("ru = 'Загрузка клиентов в документ'");
	КонецЕсли;			
		
	Если Не Отказ Тогда 
		
		СтруктураПолей = Параметры.СтруктураПолей.Скопировать();
		ЗаполнитьРеквизитыСправочника();
		
		Если ВидСправочника = "Номенклатура" Тогда
			Если Не ВидЦены = Справочники.ВидыЦен.ПустаяСсылка() Тогда
				
				НоваяСтрока = Объект.ПоляСправочника.Добавить();
				НоваяСтрока.НаименованиеРеквизита	= "Цена_1";
				НоваяСтрока.СинонимРеквизита		= СокрЛП(ВидЦены.Наименование);
				НоваяСтрока.СправочникСсылка		= ВидЦены;
				
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ВидыЦен.Ссылка
				|ИЗ
				|	Справочник.ВидыЦен КАК ВидыЦен
				|ГДЕ
				|	(НЕ ВидыЦен.ПометкаУдаления)
				|	И (НЕ ВидыЦен.РассчитываетсяДинамически)";
			   
			   	Выборка = Запрос.Выполнить().Выбрать();
				Ном = 0;
				Пока Выборка.Следующий() Цикл
					
					Ном = Ном + 1;
					НоваяСтрока = Объект.ПоляСправочника.Добавить();
					НоваяСтрока.НаименованиеРеквизита	= "Цена_"+Строка(Ном);
					НоваяСтрока.СинонимРеквизита		= СокрЛП(Выборка.Ссылка.Наименование);
					НоваяСтрока.СправочникСсылка		= Выборка.Ссылка;
					
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	// (+Номенклатура)
	Если ВидСправочника = "Партнеры" Тогда 
		
		Элементы.ГруппаЮрФизЛицо.Видимость = Истина;
		Элементы.ГруппаИскатьКлиентовПоАдресам.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаЮрФизЛицо.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ВидСправочника = "Номенклатура" Тогда
		
		Элементы.ГруппаТипНоменклатуры.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаТипНоменклатуры.Видимость = Ложь;
		
	КонецЕсли;
		
	// (-Номенклатура)
	
	КодПрограммы = Число(Лев(НаименованиеПрограммы, 1));
	
	Если ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
		Если ЗагрузкаВДокумент = "Телемаркетинг" Тогда
			Элементы.ИскатьКлиентовПоАдресамEMail.Видимость = Ложь;
			ИскатьКлиентовПоАдресамEMail = Ложь;
		ИначеЕсли ЗагрузкаВДокумент = "РассылкаПисем" Тогда			
			Элементы.ИскатьКлиентовПоТелефонам.Видимость = Ложь;
			ИскатьКлиентовПоТелефонам = Ложь;			
		КонецЕсли;			
		Элементы.ЮрФизЛицо.Видимость = Ложь;
		Элементы.ПапкаРодитель.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПродолжение", ЭтотОбъект, Отказ);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	CRM_ЗаполнитьВсеТипыОтношений();
	CRM_ЗаполнитьТипыОтношений();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПродолжение(Подключено, Отказ) Экспорт
	
	РасширениеПодключено = Подключено;
	Если НЕ РасширениеПодключено И НЕ Отказ Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииВопрос", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Не установлено расширение для работы с файлами в Веб-клиенте! Выполнить установку?'"), РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Отказ = Истина Тогда
		Элементы.ГруппаВсе.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииУстановкаРасширения", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
	Иначе
		Элементы.ГруппаВсе.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииУстановкаРасширения(ДополнительныеПараметры) Экспорт
	
	ПриОткрытии(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если НЕ ФайлЗагрузкиВыбран Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл загрузки.'"));
		Возврат;
	КонецЕсли; 
	
	ТекстПредупреждения = "";
	Если НЕ ПроверкаСопоставленияРеквизитовПолям(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ВидСправочника = "Массив" И ТипДействия = "Стандартный" Тогда
		
		СформироватьТаблицуЗагрузитьСправочник();
		
		//Если ВидСправочника = "Контрагенты" Тогда
		Если ВидСправочника = "Партнеры" Тогда
			ПараметрИмяСправочника = "Клиенты";
			
		Иначе
			
			ПараметрИмяСправочника = "Товары/услуги";
			
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                         		НСтр("ru = 'Загрузка данных в справочник %1 завершена.'"),
								ПараметрИмяСправочника); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		СформироватьТаблицуЗакрытьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийОстальныхЭлементовУправленияФормы

&НаКлиенте
Процедура НаименованиеПрограммыПриИзменении(Элемент)
	
	КодПрограммы = Число(Лев(НаименованиеПрограммы, 1));
	
	Если НЕ Объект.ИмяФайлаОбмена = "" Тогда
		//MS Outlook
		Если КодПрограммы = 5 Тогда
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".txt") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".csv") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".xls") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		//Outlook Express
		ИначеЕсли КодПрограммы = 6 Тогда
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".csv") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		//The Bat!
		ИначеЕсли КодПрограммы = 7 Тогда	
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".txt") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".csv") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".tdf") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		//Файл MS Excel
		ИначеЕсли КодПрограммы = 4 Тогда
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".xls") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		// Текстовый файл
		ИначеЕсли КодПрограммы <= 3 Тогда
			Если (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".txt") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".csv") И (НЕ Прав(Объект.ИмяФайлаОбмена,4) = ".tdf") Тогда
				Объект.ИмяФайлаОбмена = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаОбмена) Тогда
		ФайлЗагрузки = Новый Файл(Объект.ИмяФайлаОбмена);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаОбменаПриИзмененииПродолжение", ЭтотОбъект, ФайлЗагрузки);
		ФайлЗагрузки.НачатьПроверкуСуществования(ОписаниеОповещения);
	Иначе
		ФайлЗагрузкиВыбран = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаПриИзмененииПродолжение(ФайлСуществует, ФайлЗагрузки) Экспорт
	
	Если ФайлСуществует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаОбменаПриИзмененииЗавершение", ЭтотОбъект, ФайлЗагрузки);
		ФайлЗагрузки.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ИмяФайлаОбменаПриИзмененииЗавершение(Истина, ФайлЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаПриИзмененииЗавершение(ЭтоКаталог, ФайлЗагрузки) Экспорт
	
	ФайлЗагрузкиВыбран = НЕ ЭтоКаталог;
	Расширение = нРег(ФайлЗагрузки.Расширение);
	СписокПолейФайла.Очистить();
	ПолучитьФайлПрочитатьПоля();
	СопоставитьПоляФайлаПолямСправочника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаНаименованиеПоляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = СписокПолейФайла.Скопировать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуПоляФайла(ТекущиеДанные)
	
	Ном = Объект.ПоляФайла.Количество();
	Если НЕ Ном = 0 Тогда
		Пока НЕ Ном = 0 Цикл
			Если Объект.ПоляФайла[Ном-1].НаименованиеРеквизита = ТекущиеДанные.НаименованиеРеквизита Тогда
				Объект.ПоляФайла.Удалить(Ном-1);
			КонецЕсли;
			Ном = Ном - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуПоляФайла(ТекущиеДанные, ВыбранноеЗначение)
	
	НоваяСтрока = Объект.ПоляФайла.Добавить();
	НоваяСтрока.НаименованиеРеквизита	= ТекущиеДанные.НаименованиеРеквизита;
	НоваяСтрока.НаименованиеПоля		= ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаНаименованиеПоляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПоляСправочника.ТекущиеДанные;
	
	Если ВыбранноеЗначение = НСтр("ru = 'Несколько полей...'") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоляСправочникаНаименованиеПоляОбработкаВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, НаименованиеРеквизита, СписокПолейФайла", Новый Структура("Объект", Объект), ТекущиеДанные.НаименованиеРеквизита, СписокПолейФайла);
		ОткрытьФорму("Обработка.CRM_ЗагрузкаСправочниковИзФайла.Форма.ФормаПодбора", ПараметрыФормы, Элемент,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе	
		
		Если НЕ ТекущиеДанные.НаименованиеПоляПров = "" И НЕ ТекущиеДанные.НаименованиеПоляПров = ВыбранноеЗначение Тогда
			УдалитьСтрокуПоляФайла(ТекущиеДанные);
		КонецЕсли;
		
		Если НЕ ВыбранноеЗначение = "" И НЕ ТекущиеДанные.НаименованиеПоляПров = ВыбранноеЗначение Тогда
			ДобавитьСтрокуПоляФайла(ТекущиеДанные, ВыбранноеЗначение);
			ТекущиеДанные.НаименованиеПоляПров = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаНаименованиеПоляОбработкаВыбораЗавершение(РезультатВыбора, ТекущиеДанные) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ТекущиеДанные.НаименованиеПоля		= ОбработатьРезультатВыбора(ТекущиеДанные, РезультатВыбора);
		ТекущиеДанные.НаименованиеПоляПров	= ТекущиеДанные.НаименованиеПоля;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаНаименованиеПоляОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПоляСправочника.ТекущиеДанные;
	Если НЕ ТекущиеДанные.НаименованиеПоляПров = "" Тогда
		УдалитьСтрокуПоляФайла(ТекущиеДанные);
		ТекущиеДанные.НаименованиеПоляПров = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораНаименованиеПрограммы(ВидСправочника);
	НаименованиеПрограммыПриИзменении(Элементы.НаименованиеПрограммы);
	ЗаполнитьРеквизитыСправочника();
	ПапкаРодитель = ПредопределенноеЗначение("Справочник." + ВидСправочника + ".ПустаяСсылка");
	Элементы.ПапкаРодитель.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	Элементы.ГруппаЮрФизЛицо.Видимость = (ВидСправочника = "Партнеры");
	Элементы.ГруппаИскатьКлиентовПоАдресам.Видимость = (ВидСправочника = "Партнеры");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВидСправочникаНачалоВыбораПродолжение", ЭтотОбъект, Элемент);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Все сделанные ранее сопоставления будут утеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаНачалоВыбораПродолжение(Ответ, Элемент) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВидСправочникаНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения,Элементы.ВидСправочника.СписокВыбора, Элемент, );
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВидСправочника = ВыбранныйЭлемент.Значение;
		ВидСправочникаПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ВидСправочникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ПоляФайла.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаОбменаНачалоВыбораЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Все сделанные ранее сопоставления будут утеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыборФайла(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбораЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
		ВыборФайла(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаРодительОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПапкаРодитель = ПредопределенноеЗначение("Справочник." + ВидСправочника + ".ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ДобавитьУдалитьРеквизитыЮрФизЛица();
	ЗаполнитьПоляСправочникаДополнительнымиРеквизитами();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ЕдиницаИзмерения"] = Неопределено 
	ИЛИ Настройки["ЕдиницаИзмерения"] = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗагрузкаВДокумент) Тогда
		ДобавитьУдалитьРеквизитыЮрФизЛица();
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ПапкаРодитель"] = Неопределено  И НЕ ТипЗнч(Настройки["ПапкаРодитель"]) = Тип("СправочникСсылка."+ВидСправочника) Тогда
		Настройки["ПапкаРодитель"] = Справочники[ВидСправочника].ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляСправочникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры


&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("Поставщик",			"Поставщик",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("Клиент",				"Покупатель",		Истина);
	Клиент = Истина;
	CRM_ВсеТипыОтношений.Добавить("Конкурент",			"Конкурент",		Ложь);
	//CRM_ВсеТипыОтношений.Добавить("Перевозчик",			"Перевозчик",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("ПрочиеОтношения",	"Прочие отношения",	Ложь);
	//CRM_ВсеТипыОтношений.Добавить("ОбслуживаетсяТорговымиПредставителями",	"Обслуживается торговыми представителями",	Ложь);
	CRM_ВсеТипыОтношений.Добавить("CRM_Госорганы",		"Госорганы",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("CRM_Учредитель",		"Учредитель",		Ложь);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаСервере
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений(Объект)
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;
		
		Если ТипОтношений.Значение = "Поставщик"  Тогда
				
			//ПоставщикИРезидент = ТипОтношений.Пометка И ЭтоКомпания = 0 И ВидКомпании <> 1;
			//Элементы.НДСпоСтавкам4и2.Доступность = ПоставщикИРезидент;
				
		КонецЕсли;
		Попытка
			ЭтотОбъект[ТипОтношений.Значение] = ТипОтношений.Пометка;
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	

КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		ДополнительныеПараметры.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	НовыеЗначенияТипыОтношений = Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		НовыеЗначенияТипыОтношений.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	//// если поставщик был снят, то перевозчик тоже должен быть снят
	//
	//Если ДополнительныеПараметры.Поставщик И Не НовыеЗначенияТипыОтношений.Поставщик Тогда
	//	
	//	Если НовыеЗначенияТипыОтношений.Перевозчик Тогда
	//		
	//		ЭлементПеревозчик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Перевозчик");
	//		
	//		ЭлементПеревозчик.Пометка = Ложь;		
	//
	//	КонецЕсли;
	//	
	//// если перевозчик был установлен, то поставщик тоже должен быть установлен
	//	
	//ИначеЕсли Не ДополнительныеПараметры.Перевозчик И НовыеЗначенияТипыОтношений.Перевозчик Тогда
	//
	//	Если Не НовыеЗначенияТипыОтношений.Поставщик Тогда
	//		
	//		ЭлементПоставщик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Поставщик");
	//		
	//		ЭлементПоставщик.Пометка = Истина;		
	//
	//	КонецЕсли;
	//
	//КонецЕсли; 
		
	//// если поставщик был снят, то перевозчик тоже должен быть снят
	//
	//Если ДополнительныеПараметры.Клиент И Не НовыеЗначенияТипыОтношений.Клиент Тогда
	//	
	//	Если НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
	//		
	//		ЭлементОбслуживаетсяТорговымиПредставителями = CRM_ВсеТипыОтношений.НайтиПоЗначению("ОбслуживаетсяТорговымиПредставителями");
	//		
	//		ЭлементОбслуживаетсяТорговымиПредставителями.Пометка = Ложь;		
	//
	//	КонецЕсли;
	//	
	//// если перевозчик был установлен, то поставщик тоже должен быть установлен
	//	
	//ИначеЕсли Не ДополнительныеПараметры.ОбслуживаетсяТорговымиПредставителями И НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
	//
	//	Если Не НовыеЗначенияТипыОтношений.Клиент Тогда
	//		
	//		ЭлементКлиент = CRM_ВсеТипыОтношений.НайтиПоЗначению("Клиент");
	//		
	//		ЭлементКлиент.Пометка = Истина;		
	//
	//	КонецЕсли;
	//
	//КонецЕсли; 
			
	CRM_ЗаполнитьТипыОтношений();
	
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

#КонецОбласти

#КонецОбласти
