#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Функция ПолучитьСтруктуруОписаниеСобытияБланк() Экспорт
	СтруктураРезультат = Новый Структура(
	"Событие,
	|ИдентификаторСобытия,
	|Пользователь,
	|Помещение,
	|МассивПользователей,
	|МассивПомещений,
	|ИндексНачало,
	|ИндексКонец,
	|ПериодНачало,
	|ПериодОкончание,
	|ГоризонтальныйИндексСобытия,
	|ШиринаОбласти,
	|НомерПервойКолонкиОбласти,
	|КоличествоЗначемыхПересечений,
	|СобытиеНаВесьДень,
	|ВидСобытия,
	|ВходящееИсходящееСобытие,
	|СостояниеСобытия,
	|ОсновнаяКатегорияСобытия,
	|Проект,
	|Подразделение,
	|СтатусКонтрольнойТочки,
	|Тема,
	|ЦветФона,
	|ЦветТекста,
	|Пиктограмма,
	|Шрифт,
	|Важность,
	|Завершено,
	|Партнер");
	
	СтруктураРезультат.СобытиеНаВесьДень = Ложь;
	
	Возврат СтруктураРезультат;
КонецФункции

Функция ЗаполнитьДополнительныеСвойстваСобытия(ОписаниеСобытия, НастройкиОтображения) Экспорт
	Если ТипЗнч(ОписаниеСобытия.Событие) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
		Пиктограмма = БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроекта;
	ИначеЕсли ТипЗнч(ОписаниеСобытия.Событие) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Пиктограмма = БиблиотекаКартинок.Задача;
	Иначе
		Пиктограмма = Неопределено;
	КонецЕсли;
	
	бСобытиеЗавершено = (ОписаниеСобытия.Завершено = Истина);
	Если бСобытиеЗавершено Тогда
		ОписаниеСобытия.Шрифт = НастройкиОтображения.КалендарьШрифтТекстаЗавершенногоСобытия;
	Иначе
		ОписаниеСобытия.Шрифт = НастройкиОтображения.КалендарьШрифтТекстаСобытия;
	КонецЕсли;
		
	бЕстьОсновнаяКатегорияСобытия = Ложь;
	Попытка
		ТестоваяПеременная = ОписаниеСобытия.ОсновнаяКатегорияСобытия;
		бЕстьОсновнаяКатегорияСобытия = Истина;
	Исключение
		бЕстьОсновнаяКатегорияСобытия = Ложь;
	КонецПопытки;
	
	Если бЕстьОсновнаяКатегорияСобытия И ЗначениеЗаполнено(ОписаниеСобытия.ОсновнаяКатегорияСобытия) Тогда
		ОписаниеСобытия.ЦветФона = Новый Цвет(ОписаниеСобытия.ОсновнаяКатегорияСобытия.ЦветКрасный, ОписаниеСобытия.ОсновнаяКатегорияСобытия.ЦветЗеленый, ОписаниеСобытия.ОсновнаяКатегорияСобытия.ЦветСиний);
	Иначе
		Если ТипЗнч(ОписаниеСобытия.Событие) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
			ОписаниеСобытия.ЦветФона = НастройкиОтображения.КалендарьЦветФонаКонтрольнойТочкиПроектаПоУмолчанию;
		ИначеЕсли ТипЗнч(ОписаниеСобытия.Событие) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ОписаниеСобытия.ЦветФона = НастройкиОтображения.КалендарьЦветФонаЗадачиПоУмолчанию;
		Иначе
			ОписаниеСобытия.ЦветФона = НастройкиОтображения.КалендарьЦветФонаСобытияПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеСобытия.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
		ОписаниеСобытия.ЦветТекста = НастройкиОтображения.КалендарьЦветТекстаСобытияВажностьВысокая;
	ИначеЕсли ОписаниеСобытия.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
		ОписаниеСобытия.ЦветТекста = НастройкиОтображения.КалендарьЦветТекстаСобытияВажностьНизкая;
	Иначе
		ОписаниеСобытия.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ОписаниеСобытия.ЦветФона);
	КонецЕсли;
	
	ОписаниеСобытия.Пиктограмма = Пиктограмма;
КонецФункции

Процедура СформироватьДеревоИзТаблицы(Таблица, Дерево)
	Таблица.Колонки.Добавить("_Обработано", Новый ОписаниеТипов("Булево"));
	Пока Истина Цикл
		бПрервать = Истина;
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Если СтрокаТаблицы._Обработано Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
				НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Ссылка", СтрокаТаблицы.Родитель), Истина);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоваяСтрока = НайденныеСтроки[0].Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					СтрокаТаблицы._Обработано = Истина;
				Иначе
					НайденныеСтрокиВТаблице = Таблица.НайтиСтроки(Новый Структура("Ссылка", СтрокаТаблицы.Родитель));
					Если НайденныеСтрокиВТаблице.Количество() = 0 Тогда
						НоваяСтрока = Дерево.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						СтрокаТаблицы._Обработано = Истина;
					Иначе
						бПрервать = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрока = Дерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				СтрокаТаблицы._Обработано = Истина;
			КонецЕсли;
		КонецЦикла;
		Если бПрервать Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Таблица.Колонки.Удалить("_Обработано");
	
КонецПроцедуры

Процедура СкопироватьВеткуДерева(СтрокиИсточник, СтрокиПриемник) Экспорт
	Для Каждого СтрокаДерева Из СтрокиИсточник Цикл
		НоваяСтрока = СтрокиПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			СкопироватьВеткуДерева(СтрокаДерева.Строки, НоваяСтрока.Строки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДеревоЗадач(Таблица, Дерево, ПолеГруппировки = Неопределено, ОчищатьСтроки = Истина) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОчищатьСтроки Тогда
		Дерево.Строки.Очистить();
	КонецЕсли;
	
	Если ПолеГруппировки = Неопределено Тогда
		СформироватьДеревоИзТаблицы(Таблица, Дерево);
	Иначе
		Если Таблица.Колонки.Найти(ПолеГруппировки) = Неопределено Тогда
			СформироватьДеревоЗадач(Таблица, Дерево, Неопределено);
			Возврат;
		КонецЕсли;
		
		ДеревоБланк = Дерево.Скопировать();
		ТаблицаБланк = Таблица.Скопировать();
		
		ТаблицаЗначенияГруппировок = Таблица.Скопировать(, ПолеГруппировки);
		ТаблицаЗначенияГруппировок.Свернуть(ПолеГруппировки);
		ТаблицаЗначенияГруппировок.Сортировать(ПолеГруппировки);
		МассивЗначенияГруппировок = ТаблицаЗначенияГруппировок.ВыгрузитьКолонку(ПолеГруппировки);
		
		Для Каждого ЗначениеГруппировки Из МассивЗначенияГруппировок Цикл
			НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура(ПолеГруппировки, ЗначениеГруппировки));
			ТекущаяТаблица = Таблица.Скопировать(НайденныеСтроки);
			
			ТекущееДерево = ДеревоБланк.Скопировать();
			СформироватьДеревоИзТаблицы(ТекущаяТаблица, ТекущееДерево);
			
			СтрокаГруппа = Дерево.Строки.Добавить();
			СтрокаГруппа.ЭтоГруппа								= Истина;
			СтрокаГруппа.Наименование							= Строка(ЗначениеГруппировки);
			СтрокаГруппа.ОсновнаяКатегорияИндекс				= 26;
			СтрокаГруппа.ВажностьКартинка						= 1;
			СтрокаГруппа.ПроцентВыполненияЗадачиИндексКартинки	= -1;
			Попытка СтрокаГруппа.ЗначениеГруппировки = ЗначениеГруппировки
			Исключение КонецПопытки;
			Попытка СтрокаГруппа.ИмяГруппировки = ПолеГруппировки
			Исключение КонецПопытки;
			
			СкопироватьВеткуДерева(ТекущееДерево.Строки, СтрокаГруппа.Строки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли