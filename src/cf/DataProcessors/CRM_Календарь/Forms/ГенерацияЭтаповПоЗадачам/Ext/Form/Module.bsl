
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОтметитьПодчиненныеЭлементы(ПодчЭлементы, Пометка)
	Для Каждого СтрокаДерева Из ПодчЭлементы Цикл
		СтрокаДерева.Пометка = Пометка;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ОтметитьПодчиненныеЭлементы(СтрокаДерева.ПолучитьЭлементы(), Пометка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СформироватьДеревоЗадач()
	МассивТаблиц = ПолучитьИзВременногоХранилища(АдресТаблицыЗадачВоВременномХранилище);
	Если ТипЗнч(МассивТаблиц) = Тип("Массив") Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоСписокЗадач");
		Дерево.Строки.Очистить();
		ДеревоБланк = Дерево.Скопировать();
		
		Для Каждого Таблица Из МассивТаблиц Цикл
			ТекДерево = ДеревоБланк.Скопировать();
			
			Если Таблица.Колонки.Найти("Пометка") = Неопределено Тогда
				Таблица.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
			КонецЕсли;
			Если Параметры.Свойство("МассивЗадачПоТекущемуОтбору") И ТипЗнч(Параметры.МассивЗадачПоТекущемуОтбору) = Тип("Массив") Тогда
				Для Каждого СтрокаТаблицы Из Таблица Цикл
					СтрокаТаблицы.Пометка = (Параметры.МассивЗадачПоТекущемуОтбору.Найти(СтрокаТаблицы.Ссылка) <> Неопределено);
				КонецЦикла;
			КонецЕсли;
			
			Обработки.CRM_Календарь.СформироватьДеревоЗадач(Таблица, ТекДерево,, Ложь);
			Обработки.CRM_Календарь.СкопироватьВеткуДерева(ТекДерево.Строки, Дерево.Строки);
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(Дерево, "ДеревоСписокЗадач");
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СгенерироватьЭтапыРекурсивно(СтрокиДерева, ТекРодитель)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Пометка Тогда
			ЭтапОбъект = Справочники.CRM_ЭтапыПроектов.СоздатьЭлемент();
			ЭтапОбъект.Заполнить(Неопределено);
			ЭтапОбъект.Владелец			= Проект;
			ЭтапОбъект.Ответственный	= Пользователи.ТекущийПользователь();
			ЭтапОбъект.Наименование		= СтрокаДерева.Наименование;
			ЭтапОбъект.Описание			= СтрокаДерева.Описание;
			ЭтапОбъект.Родитель			= ТекРодитель;
			ЭтапОбъект.УстановитьНовыйКод();
			ЭтапОбъект.Записать();
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				СгенерироватьЭтапыРекурсивно(СтрокаДерева.Строки, ЭтапОбъект.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СгенерироватьЭтапы()
	Если Не ЗначениеЗаполнено(Проект) Тогда Возврат Ложь; КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоСписокЗадач");
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа,Пометка", Ложь, Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана ни одна задача!'"),, "ДеревоСписокЗадач");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		Если Не Проект.CRM_Планируемый Тогда
			ПроектОбъект = Проект.ПолучитьОбъект();
			ПроектОбъект.CRM_Планируемый = Истина;
			ПроектОбъект.Записать();
		КонецЕсли;
		
		СгенерироватьЭтапыРекурсивно(Дерево.Строки, ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка"));
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при создании этапов:'")
			+ " """ + КраткоеПредставлениеОшибки(ИнфОбОшибке) + """.");
		//
		
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура ОтметитьВыгруженныеЗадачиКакВыполненные()
	Дерево = РеквизитФормыВЗначение("ДеревоСписокЗадач");
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа,Пометка", Ложь, Истина), Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЛичнуюЗадачуСПодчиненными(НайденнаяСтрока.Ссылка);
		
		// Если после "Выгрузить" форму не нужно закрывать - раскомментировать
		//НайденнаяСтрока.Выполнена = НайденнаяСтрока.Ссылка.Выполнена;
		//
		//Если НайденнаяСтрока.Ссылка.CRM_ПроцентВыполненияЗадачи < 25 Тогда
		//	НайденнаяСтрока.ПроцентВыполненияЗадачиИндексКартинки = 0;
		//ИначеЕсли НайденнаяСтрока.Ссылка.CRM_ПроцентВыполненияЗадачи < 50 Тогда
		//	НайденнаяСтрока.ПроцентВыполненияЗадачиИндексКартинки = 1;
		//ИначеЕсли НайденнаяСтрока.Ссылка.CRM_ПроцентВыполненияЗадачи < 75 Тогда
		//	НайденнаяСтрока.ПроцентВыполненияЗадачиИндексКартинки = 2;
		//ИначеЕсли НайденнаяСтрока.Ссылка.CRM_ПроцентВыполненияЗадачи < 100 Тогда
		//	НайденнаяСтрока.ПроцентВыполненияЗадачиИндексКартинки = 3;
		//Иначе
		//	НайденнаяСтрока.ПроцентВыполненияЗадачиИндексКартинки = 4;
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСписокЗадач()
	Строки = ДеревоСписокЗадач.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		Элементы.СписокЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СписокЗадачПометкаПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекДанные = ДеревоСписокЗадач.НайтиПоИдентификатору(ТекСтрока);
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ОтметитьПодчиненныеЭлементы(ТекДанные.ПолучитьЭлементы(), ТекДанные.Пометка);
	
	Если ТекДанные.Пометка Тогда
		ТекРодитель = ТекДанные.ПолучитьРодителя();
		Пока ТекРодитель <> Неопределено Цикл
			ТекРодитель.Пометка = Истина;
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекДанные = ДеревоСписокЗадач.НайтиПоИдентификатору(ТекСтрока);
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Форма = ПолучитьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи",
		Новый Структура("Ключ", ТекДанные.Ссылка), ЭтотОбъект);
	//
	Если Форма <> Неопределено Тогда
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	Если Не ЗначениеЗаполнено(Проект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проект не выбран!'"),, "Проект");
		Возврат;
	КонецЕсли;
	
	Если СгенерироватьЭтапы() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Отметить все выгруженые задачи как выполненные?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОтметитьВыгруженныеЗадачиКакВыполненные();
		РазвернутьСписокЗадач();
		ПризнакБылиВыполненыЗадачи = Истина;
	КонецЕсли;
	Закрыть(ПризнакБылиВыполненыЗадачи);
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Использование бизнес процессов и задач отключено в настройках системы.'"));
		Возврат;
	КонецЕсли;
	
	Если	Параметры.Свойство("АдресТаблицыЗадачВоВременномХранилище")
		И	ТипЗнч(Параметры.АдресТаблицыЗадачВоВременномХранилище) = Тип("Строка")
		И	ЭтоАдресВременногоХранилища(Параметры.АдресТаблицыЗадачВоВременномХранилище) Тогда
		//
		АдресТаблицыЗадачВоВременномХранилище = Параметры.АдресТаблицыЗадачВоВременномХранилище;
		Если Не СформироватьДеревоЗадач() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Проект") И ТипЗнч(Параметры.Проект) = Тип("СправочникСсылка.Проекты") И ЗначениеЗаполнено(Параметры.Проект) Тогда
		Проект = Параметры.Проект;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
