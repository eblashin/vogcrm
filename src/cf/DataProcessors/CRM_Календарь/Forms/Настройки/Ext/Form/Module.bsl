
///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьПримерПредставленияСобытия()
	Элементы.ДекорацияПримерПредставленияСобытия.Заголовок = "";
	
	СтрВремя = "12:30 - 14:30";
	СтрТема = НСтр("ru = 'Обсуждение заказа'");
	СтрКлиент = НСтр("ru = 'Пилигрим ООО'");
	СтрПользователь = НСтр("ru = '(Абдулов Юрий Владимирович)'");
	
	СтрРезультат = "";
	
	Для Каждого ЭлементСписка Из СписокПредставлениеСобытияВКалендаре Цикл
		Если ЭлементСписка.Пометка Тогда
			Если ЭлементСписка.Значение = "Время" Тогда
				Если Не ПустаяСтрока(СтрРезультат) Тогда
					СтрРезультат = СтрРезультат + " ";
				КонецЕсли;
				СтрРезультат = СтрРезультат + СтрВремя;
			ИначеЕсли ЭлементСписка.Значение = "Тема" Тогда
				Если Не ПустаяСтрока(СтрРезультат) Тогда
					СтрРезультат = СтрРезультат + " ";
				КонецЕсли;
				СтрРезультат = СтрРезультат + СтрТема;
			ИначеЕсли ЭлементСписка.Значение = "Клиент" Тогда
				Если Не ПустаяСтрока(СтрРезультат) Тогда
					СтрРезультат = СтрРезультат + ", ";
				КонецЕсли;
				СтрРезультат = СтрРезультат + СтрКлиент;
			ИначеЕсли ЭлементСписка.Значение = "Пользователь" Тогда
				Если Не ПустаяСтрока(СтрРезультат) Тогда
					СтрРезультат = СтрРезультат + " ";
				КонецЕсли;
				СтрРезультат = СтрРезультат + СтрПользователь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ДекорацияПримерПредставленияСобытия.Заголовок = НСтр("ru = 'Пример: '") + СтрРезультат;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	Форма.Элементы.ОбластьСобытийНаВесьДеньСвернутаПоУмолчанию.Доступность = Форма.СворачиватьОбластьСобытийНаВесьДень;
	
	Форма.Элементы.ПериодАвтообновления.ТолькоПросмотр = Не Форма.Автообновление;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	НачалоДняКалендаряЧас			= Час(ОграничениеВремениС);
	КонецДняКалендаряЧас			= Час(ОграничениеВремениПо);
	
	СтруктураНастройки = Новый Структура();
	
	// Настройки отображения
	СтруктураНастройкиОтображения = Новый Структура(
	"НачалоДняКалендаряЧас,
	|КонецДняКалендаряЧас,
	|КалендарьЦветФонаРабочегоВремени,
	|КалендарьЦветФонаНеРабочегоВремени,
	|КалендарьЦветШкалыВремениРабочегоВремени,
	|КалендарьЦветШкалыВремениНеРабочегоВремени,
	|КалендарьЦветФонаЗаголовкаДень,
	|КалендарьЦветФонаЗаголовкаРесурс,
	|КалендарьЦветФонаСобытияНаВесьДень,
	|КалендарьЦветФонаТекущееВремяРабочееВремя,
	|КалендарьЦветФонаТекущееВремяНеРабочееВремя,
	|КалендарьЦветИндикатораТекущегоВремени,
	|КалендарьОтображатьПиктограммы,
	|КалендарьКоличествоДнейВНеделе,
	|СписокПредставлениеСобытияВКалендаре,
	|КалендарьМасштабШириныОбластиДень,
	|КалендарьЦветФонаРабочегоВремениТекущийДень,
	|КалендарьЦветФонаНеРабочегоВремениТекущийДень,
	|КалендарьЦветФонаСобытияНаВесьДеньТекущийДень,
	|КалендарьЦветФонаЗаголовкаДеньТекущийДень,
	|КалендарьЦветФонаЗаголовкаРесурсТекущийДень,
	|МесяцЦветФонаЗаголовкаДень,
	|МесяцЦветФонаЗаголовкаДеньТекущийДень,
	|МесяцЦветФонаДень,
	|МесяцЦветФонаДеньТекущийДень,
	|МесяцКоличествоОтображаемыхСобытийВДне,
	|РасписаниеИнтервалШкалыВремени,
	|РасписаниеВысотаОбластиРесурса,
	|РасписаниеЦветИндикатора,
	|СворачиватьОбластьСобытийНаВесьДень,
	|ОбластьСобытийНаВесьДеньСвернутаПоУмолчанию");
	
	ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения, ЭтотОбъект);
	СтруктураНастройки.Вставить("НастройкиОтображения", СтруктураНастройкиОтображения);
	
	// Общие настройки
	СтруктураОбщиеНастройки = Новый Структура(
	"ОтображатьСписокЗадач,
	|КалендарьИспользоватьКалендарныеГрафики,
	|ОтображатьПолеСодержаниеСпискаЗадач,
	|ОтображатьПолеСодержанияКалендаря,
	|ПоложениеСпискаЗадач,
	|КалендарьОбновлятьПриЛюбыхСобытиях,	
	|Автообновление,
	|ПериодАвтообновления");
	
	ЗаполнитьЗначенияСвойств(СтруктураОбщиеНастройки, ЭтотОбъект);
	СтруктураНастройки.Вставить("ОбщиеНастройки", СтруктураОбщиеНастройки);
	
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "СтруктураНастроек", СтруктураНастройки);
	
	// Настройки пользователя
	CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(РабочийДеньС,		"ВремяНачалаРабочегоДня");
	CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(РабочийДеньПо,		"ВремяОкончанияРабочегоДня");
	CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ОбеденныйПерерывС,	"ВремяНачалаОбеденногоПерерыва");
	CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ОбеденныйПерерывПо,	"ВремяОкончанияОбеденногоПерерыва");
	
	CRM_ХранилищеНастроек.Сохранить("ПоказыватьНедействительныхПользователей", "", ПоказыватьНедействительныхПользователей);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиПоУмолчанию()
	Если ЗначениеЗаполнено(НастройкиПоУмолчанию) Тогда
		СтруктураНастройкиПоУмолчанию = ЗначениеИзСтрокиВнутр(НастройкиПоУмолчанию);
		Возврат СтруктураНастройкиПоУмолчанию;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПоНастройкам(СтруктураНастройки)
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
		// Настройки отображения
		Если СтруктураНастройки.Свойство("НастройкиОтображения") И ТипЗнч(СтруктураНастройки.НастройкиОтображения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастройки.НастройкиОтображения);
			
			СтруктураНастройкиПоУмолчанию = ПолучитьНастройкиПоУмолчанию();
			Если ТипЗнч(СтруктураНастройкиПоУмолчанию) = Тип("Структура")
			   И СтруктураНастройкиПоУмолчанию.Свойство("НастройкиОтображения")
			   И СтруктураНастройкиПоУмолчанию.НастройкиОтображения.Свойство("СписокПредставлениеСобытияВКалендаре") Тогда
				//
				Для Каждого СтрСписка Из СтруктураНастройкиПоУмолчанию.НастройкиОтображения.СписокПредставлениеСобытияВКалендаре Цикл
					НайденнаяСтр = СписокПредставлениеСобытияВКалендаре.НайтиПоЗначению(СтрСписка.Значение);
					Если НайденнаяСтр = Неопределено Тогда
						НовыйСтрСписка = СписокПредставлениеСобытияВКалендаре.Добавить(СтрСписка.Значение, СтрСписка.Представление, СтрСписка.Пометка, СтрСписка.Картинка);
					Иначе
						Если НайденнаяСтр.Представление <> СтрСписка.Представление Тогда
							НайденнаяСтр.Представление = СтрСписка.Представление;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				нИндекс = 0;
				Пока нИндекс < СписокПредставлениеСобытияВКалендаре.Количество() Цикл
					СтрСписка = СписокПредставлениеСобытияВКалендаре[нИндекс];
					Если СтруктураНастройкиПоУмолчанию.НастройкиОтображения.СписокПредставлениеСобытияВКалендаре.НайтиПоЗначению(СтрСписка.Значение) = Неопределено Тогда
						СписокПредставлениеСобытияВКалендаре.Удалить(нИндекс);
					Иначе
						нИндекс = нИндекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ОграничениеВремениС		= Дата("00010101") + НачалоДняКалендаряЧас * 60 * 60;
			ОграничениеВремениПо	= Дата("00010101") + КонецДняКалендаряЧас * 60 * 60;
		КонецЕсли;
		
		// Общие настройки
		Если СтруктураНастройки.Свойство("ОбщиеНастройки") И ТипЗнч(СтруктураНастройки.ОбщиеНастройки) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастройки.ОбщиеНастройки);
		КонецЕсли;
	КонецЕсли;
	
	// Настройки пользвателя
	Пользователь = Пользователи.ТекущийПользователь();
	НастройкиРабочееВремяПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьСтруктуруРабочихВременПользователя(Пользователь);
	РабочийДеньС			= НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня;
	РабочийДеньПо			= НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня;
	ОбеденныйПерерывС		= НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва;
	ОбеденныйПерерывПо		= НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва;
	
	ПоказыватьНедействительныхПользователей = (CRM_ХранилищеНастроек.Загрузить("ПоказыватьНедействительныхПользователей") = Истина);
	
	// Автообновление
	Если ПериодАвтообновления < 1 Тогда
		ПериодАвтообновления = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСохранить()
	Результат = Истина;
	
	Если ОграничениеВремениС > ОграничениеВремениПо Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Время начала ограничения больше времени окончания ограничения!'"), СтатусСообщения.Внимание);
		Результат = Ложь;
	КонецЕсли;
	
	Если РабочийДеньС > РабочийДеньПо Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Время начала рабочего времени больше времени окончания рабочего времени!'"), СтатусСообщения.Внимание);
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораВремени(Элемент)
	Элемент.СписокВыбора.Очистить();
	Для нИндекс = 0 По 23 Цикл
		Элемент.СписокВыбора.Добавить(Дата("00010101") + нИндекс * 60 * 60, Формат(Дата("00010101") + нИндекс * 60 * 60, "ДФ=HH:mm; ДП=00:00"));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПоУмолчанию()
	Если ЗначениеЗаполнено(НастройкиПоУмолчанию) Тогда
		СтруктураНастройкиПоУмолчанию = ПолучитьНастройкиПоУмолчанию();
		Если СтруктураНастройкиПоУмолчанию <> Неопределено Тогда
			ЗаполнитьРеквизитыПоНастройкам(СтруктураНастройкиПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
	РабочийДеньС		= Дата("00010101090000");
	РабочийДеньПо		= Дата("00010101180000");
	ОбеденныйПерерывС	= Дата("00010101130000");
	ОбеденныйПерерывПо	= Дата("00010101140000");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаСервере
Процедура КалендарьМасштабШириныОбластиДеньЗаполнитьСписокВыбора()
	Элементы.КалендарьМасштабШириныОбластиДень.СписокВыбора.Очистить();
	Для нИндекс = 0 По 17 Цикл
		Элементы.КалендарьМасштабШириныОбластиДень.СписокВыбора.Добавить(30 + нИндекс * 10);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура МесяцКоличествоОтображаемыхСобытийВДнеЗаполнитьСписокВыбора()
	Элементы.МесяцКоличествоОтображаемыхСобытийВДне.СписокВыбора.Очистить();
	Для нИндекс = 1 По 48 Цикл
		Элементы.МесяцКоличествоОтображаемыхСобытийВДне.СписокВыбора.Добавить(нИндекс);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РасписаниеИнтервалШкалыВремениЗаполнитьСписокВыбора()
	Элементы.РасписаниеИнтервалШкалыВремени.СписокВыбора.Очистить();
	Элементы.РасписаниеИнтервалШкалыВремени.СписокВыбора.Добавить(5);
	Элементы.РасписаниеИнтервалШкалыВремени.СписокВыбора.Добавить(6);
	Элементы.РасписаниеИнтервалШкалыВремени.СписокВыбора.Добавить(10);
	Элементы.РасписаниеИнтервалШкалыВремени.СписокВыбора.Добавить(15);
	Элементы.РасписаниеИнтервалШкалыВремени.СписокВыбора.Добавить(30);
	Элементы.РасписаниеИнтервалШкалыВремени.СписокВыбора.Добавить(60);
КонецПроцедуры

&НаСервере
Процедура РасписаниеВысотаОбластиРесурсаЗаполнитьСписокВыбора()
	Элементы.РасписаниеВысотаОбластиРесурса.СписокВыбора.Очистить();
	Для нИндекс = 2 По 20 Цикл
		Элементы.РасписаниеВысотаОбластиРесурса.СписокВыбора.Добавить(нИндекс);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СворачиватьОбластьСобытийНаВесьДеньПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтообновленияПриИзменении(Элемент)
	Если ПериодАвтообновления < 1 Тогда
		ПериодАвтообновления = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтообновленияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыборка = Новый СписокЗначений();
	СписокВыборка.Добавить(1, НСтр("ru = '1'"));
	СписокВыборка.Добавить(2, НСтр("ru = '2'"));
	СписокВыборка.Добавить(5, НСтр("ru = '5'"));
	СписокВыборка.Добавить(10, НСтр("ru = '10'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодАвтообновленияНачалоВыбораИзСпискаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыборка, Элементы.ПериодАвтообновления);
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтообновленияНачалоВыбораИзСпискаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		ПериодАвтообновления = ВыбранноеЗначение.Значение;
		ПериодАвтообновленияПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПредставлениеСобытияВКалендареПриИзменении(Элемент)
	ОбновитьПримерПредставленияСобытия();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	Если ПроверитьСохранить() Тогда
		НастройкиБылиИзменены = Истина;
		Модифицированность = Ложь;
		Закрыть(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоУмолчанию(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПоУмолчаниюЗаверешение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Будут загружены настройки по умолчанию. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоУмолчаниюЗаверешение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьНастройкиПоУмолчанию();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрименить(Команда)
	Если ПроверитьСохранить() Тогда
		Модифицированность = Ложь;
		Оповестить("НастройкиКалендаряИзменены", Неопределено, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("НастройкиПоУмолчанию") И ТипЗнч(Параметры.НастройкиПоУмолчанию) = Тип("Структура") Тогда
		НастройкиПоУмолчанию = ЗначениеВСтрокуВнутр(Параметры.НастройкиПоУмолчанию);
	КонецЕсли;
	Если Параметры.Свойство("ТекущиеНастройки") И ТипЗнч(Параметры.ТекущиеНастройки) = Тип("Структура") Тогда
		ЗаполнитьРеквизитыПоНастройкам(Параметры.ТекущиеНастройки);
	КонецЕсли;
	
	КалендарьМасштабШириныОбластиДеньЗаполнитьСписокВыбора();
	МесяцКоличествоОтображаемыхСобытийВДнеЗаполнитьСписокВыбора();
	РасписаниеИнтервалШкалыВремениЗаполнитьСписокВыбора();
	РасписаниеВысотаОбластиРесурсаЗаполнитьСписокВыбора();
	
	ЗаполнитьСписокВыбораВремени(Элементы.ОграничениеВремениС);
	ЗаполнитьСписокВыбораВремени(Элементы.ОграничениеВремениПо);
	ЗаполнитьСписокВыбораВремени(Элементы.РабочийДеньС);
	ЗаполнитьСписокВыбораВремени(Элементы.РабочийДеньПо);
	ЗаполнитьСписокВыбораВремени(Элементы.ОбеденныйПерерывС);
	ЗаполнитьСписокВыбораВремени(Элементы.ОбеденныйПерерывПо);
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
	Элементы.КалендарьОтображатьПиктограммы.Видимость = Ложь;
	#КонецЕсли
	ОбновитьПримерПредставленияСобытия();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='При завершении работы в форме ""'") + Заголовок + НСтр("ru='"" все изменения будут утеряны.'");
			Возврат;
		КонецЕсли;
		Отказ = Истина;
		ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбратныйВызов, НСтр("ru = ''Данные были изменены. Сохранить данные?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьСохранить() Тогда
			НастройкиБылиИзменены = Истина;
			Закрыть(Истина);
			Возврат;
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
    КонецЕсли;
	Модифицированность	= Ложь;
	Закрыть();
КонецПроцедуры // ПередЗакрытиемЗавершение()

#КонецОбласти
