///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

&НаКлиенте
Перем ПредыдущаяВыделеннаяОбластьКалендаря;
&НаКлиенте
Перем ПредыдущаяВыделеннаяДатаКалендаря;
&НаКлиенте
Перем ПредыдущийВыделенныйМесяц;
&НаКлиенте
Перем ПредыдущееОтображение;
&НаКлиенте
Перем ПараметрОповещенияОЗаписиСобытия;
&НаКлиенте
Перем НеОбрабатыватьАктивизациюОбластиКалендаря;
&НаКлиенте
Перем КэшСвойстваДинамическогоСпискаСписокЗадач;
&НаКлиенте
Перем КэшСвойстваДинамическогоСпискаСписокСобытийДиспетчеризации;
&НаКлиенте
Перем КэшСвойстваДинамическогоСпискаСписокПользователейДиспетчеризация;
&НаКлиенте
Перем ПризнакПереключениеВРежимСпискаПоиском;
&НаКлиенте
Перем СписокВыборМесяцаНеОбрабатыватьПриАктивизацииСтроки;
&НаКлиенте
Перем ДеревоРесурсовНеОбрабатыватьПриАктивизацииСтроки;
&НаКлиенте
Перем ПоследнийОбработанныйПараметрОповещения;
&НаКлиенте
Перем ПоследняяОбластьПеретаскивания;
&НаКлиенте
Перем ПоследняяВыделеннаяСтрокаСпискаЗадач;
&НаКлиенте
Перем ПоследняяВыделеннаяСтрокаСпискаСобытийДиспетчеризации;
&НаКлиенте
Перем НеОбновлятьСписокЗадач;
&НаКлиенте
Перем НеОбрабатыватьАктивизациюСтрокиСписокПользователейДиспетчеризация;

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//////////////////////////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции изменяемые при добавлении / удалении новых регистрируемых объектов.

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПараметраКомпоновкиДанных(Знач ВладелецПараметров, Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	Для каждого Параметр Из ВладелецПараметров.Параметры.Элементы Цикл
		Если Строка(Параметр.Параметр) = ИмяПараметра Тогда
			Если Параметр.Использование И Параметр.Значение = ЗначениеПараметра Тогда
				Возврат;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВладелецПараметров.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСодержимоеФормыПриИзмененииГруппы()
	
	Если НЕ ИспользоватьГруппыПользователей
	 ИЛИ Элементы.ГруппыПользователей.ТекущаяСтрока = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи") Тогда
		//
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.ТекущаяСтраница = Элементы.ГруппаНельзяУстановитьСвойство;
		ОбновитьЗначениеПараметраКомпоновкиДанных(СписокПользователейДиспетчеризация, "ВыбиратьИерархически", Истина);
		ОбновитьЗначениеПараметраКомпоновкиДанных(СписокПользователейДиспетчеризация, "ГруппаПользователей", ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи"));
	Иначе
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.ТекущаяСтраница = Элементы.ГруппаУстановитьСвойство;
		ОбновитьЗначениеПараметраКомпоновкиДанных(СписокПользователейДиспетчеризация, "ВыбиратьИерархически", ВыбиратьПользователейИерархически);
		ОбновитьЗначениеПараметраКомпоновкиДанных(СписокПользователейДиспетчеризация, "ГруппаПользователей", Элементы.ГруппыПользователей.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонтекстногоМенюКалендаряОбщая(Команда)
	ИмяКоманды = Команда.Имя;
	ПозицияРазделителя = Найти(Команда.Имя, "_");
	Если ПозицияРазделителя > 0 Тогда
		СтрокаВидаСобытия	= Сред(Команда.Имя, ПозицияРазделителя + 1);
		ИмяКоманды 			= "КомандаСоздатьСобытие";
	КонецЕсли;
	Если ИмяКоманды = "КомандаСоздатьКонтрольнуюТочкуИзКалендаря" Тогда
		СоздатьСобытиеИзКалендаря("Документ.CRM_КонтрольнаяТочкаПроекта");
	ИначеЕсли ИмяКоманды = "КомандаСоздатьКонтрольнуюТочку" Тогда
		СоздатьСобытиеИзКалендаря("Документ.CRM_КонтрольнаяТочкаПроекта");
	ИначеЕсли ИмяКоманды = "КомандаУдалитьСобытиеИзКалендаря" Тогда
		УдалитьСобытиеИзКалендаря();
	ИначеЕсли ИмяКоманды = "КомандаПеренаправитьСобытиеИзКалендаря" Тогда
		ПеренаправитьСобытиеИзКалендаря();
	Иначе
		ВызватьИсключение НСтр("ru = 'Для кнопки'") + " """ + ИмяКоманды + """ " + НСтр("ru = 'не определено действие!'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтекстныеМеню()
	// Заполнение подменю командной панели
	//CRM_СобытияСервер.СоздатьГруппуСозданияСобытия(ЭтаФорма, Элементы.КоманднаяПанельКалендарьПодменюСоздать, , Истина, "КомандаКонтекстногоМенюКалендаряОбщая");
	
	// Создаем кнопку "Контрольная точка".
	Если	ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПодсистемуУправленияПроектами")
		И	CRM_ЛицензированиеСервер.ВариантПоставкиКОРП()
		И	ПравоДоступа("Добавление", Метаданные.Документы.CRM_КонтрольнаяТочкаПроекта) Тогда
		//
		ГруппаКонтрольнойТочки = Элементы.Добавить(Элементы.КоманднаяПанельКалендарьПодменюСоздать.Имя 
			+ "_ГруппаКонтрольнойТочки", Тип("ГруппаФормы"), Элементы.КоманднаяПанельКалендарьПодменюСоздать);
		ГруппаКонтрольнойТочки.Вид = ВидГруппыФормы.ГруппаКнопок;
		НоваяКомандаФормы = Команды.Добавить("КомандаСоздатьКонтрольнуюТочку");
		НоваяКомандаФормы.Действие = "КомандаКонтекстногоМенюКалендаряОбщая";
		НоваяКомандаФормы.Заголовок = НСтр("ru = 'Контрольная точка'");
		НоваяКнопка = Элементы.Добавить("КомандаСоздатьКонтрольнуюТочку", Тип("КнопкаФормы"), ГруппаКонтрольнойТочки);
		НоваяКнопка.Заголовок = НСтр("ru = 'Контрольная точка'");
		НоваяКнопка.Картинка = БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроекта;
		НоваяКнопка.ИмяКоманды = "КомандаСоздатьКонтрольнуюТочку";
	КонецЕсли;
	
	// Заполнение контекстного меню табличного поля календаня.
	CRM_МероприятияСервер.СоздатьГруппуСозданияСобытия(ЭтотОбъект, Элементы.КалендарьТабличныйДокументКонтекстноеМеню, , Истина, "КомандаКонтекстногоМенюКалендаряОбщая");
	
	// Создаем кнопку "Контрольная точка".
	Если	ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПодсистемуУправленияПроектами")
		И	CRM_ЛицензированиеСервер.ВариантПоставкиКОРП()
		И	ПравоДоступа("Добавление", Метаданные.Документы.CRM_КонтрольнаяТочкаПроекта) Тогда
		ГруппаКонтрольнойТочки = Элементы.Добавить(Элементы.КалендарьТабличныйДокументКонтекстноеМеню.Имя 
			+ "_ГруппаКонтрольнойТочки", Тип("ГруппаФормы"), Элементы.КалендарьТабличныйДокументКонтекстноеМеню);
		ГруппаКонтрольнойТочки.Вид = ВидГруппыФормы.ГруппаКнопок;
		НоваяКомандаФормы = Команды.Добавить("КомандаСоздатьКонтрольнуюТочкуИзКалендаря");
		НоваяКомандаФормы.Действие = "КомандаКонтекстногоМенюКалендаряОбщая";
		НоваяКомандаФормы.Заголовок = НСтр("ru = 'Контрольная точка'");
		НоваяКнопка = Элементы.Добавить("КомандаКонтекстногоМенюКалендаряОбщая", Тип("КнопкаФормы"), ГруппаКонтрольнойТочки);
		НоваяКнопка.Заголовок = НСтр("ru = 'Контрольная точка'");
		НоваяКнопка.Картинка = БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроекта;
		НоваяКнопка.ИмяКоманды = "КомандаСоздатьКонтрольнуюТочкуИзКалендаря";
	КонецЕсли;
	
	// Создаем кнопку "Перенаправить".
	ГруппаПеренаправитьСобытия = Элементы.Добавить(Элементы.КалендарьТабличныйДокументКонтекстноеМеню.Имя 
		+ "_ГруппаПеренаправить", Тип("ГруппаФормы"), Элементы.КалендарьТабличныйДокументКонтекстноеМеню);
	ГруппаПеренаправитьСобытия.Вид = ВидГруппыФормы.ГруппаКнопок;
	НоваяКомандаФормы = Команды.Добавить("КомандаПеренаправитьСобытиеИзКалендаря");
	НоваяКомандаФормы.Действие = "КомандаКонтекстногоМенюКалендаряОбщая";
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Перенаправить'");
	НоваяКнопка = Элементы.Добавить("КомандаПеренаправитьСобытиеИзКалендаря", Тип("КнопкаФормы"), ГруппаПеренаправитьСобытия);
	НоваяКнопка.Заголовок = НСтр("ru = 'Перенаправить'");
	НоваяКнопка.Картинка = БиблиотекаКартинок.CRM_ПередатьДокумент;
	НоваяКнопка.ИмяКоманды = "КомандаПеренаправитьСобытиеИзКалендаря";	
	
	// Создаем кнопку "Удалить"
	ГруппаУдаленияСобытия = Элементы.Добавить(Элементы.КалендарьТабличныйДокументКонтекстноеМеню.Имя 
		+ "_ГруппаУдаления", Тип("ГруппаФормы"), Элементы.КалендарьТабличныйДокументКонтекстноеМеню);
	ГруппаУдаленияСобытия.Вид = ВидГруппыФормы.ГруппаКнопок;
	НоваяКомандаФормы = Команды.Добавить("КомандаУдалитьСобытиеИзКалендаря");
	НоваяКомандаФормы.Действие = "КомандаКонтекстногоМенюКалендаряОбщая";
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Удалить'");
	НоваяКнопка = Элементы.Добавить("КомандаУдалитьСобытиеИзКалендаря", Тип("КнопкаФормы"), ГруппаУдаленияСобытия);
	НоваяКнопка.Заголовок = НСтр("ru = 'Удалить'");
	НоваяКнопка.Картинка = БиблиотекаКартинок.УдалитьЭлементСписка;
	НоваяКнопка.ИмяКоманды = "КомандаУдалитьСобытиеИзКалендаря";
			
КонецПроцедуры

&НаКлиенте
Функция ДляСобытияРазрешеноПеретаскиваниеВКалендарь(РасшифровкаСобытия)
	Если РасшифровкаСобытия = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Если ТипЗнч(РасшифровкаСобытия.Событие) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ДляСобытияРазрешеноНачалоПеретаскиванияИзКалендаря(РасшифровкаСобытия)
	Если РасшифровкаСобытия = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Если Не ЗначениеЗаполнено(РасшифровкаСобытия.Событие) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ДляСобытияРазрешеноПеретаскиваниеВСписокЗадач(РасшифровкаСобытия)
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ПеренестиСобытиеНаДатуНаСервере(Событие, ДатаНачалоСобытия, ДатаОкончаниеСобытия, ПользовательСобытия, ПеренестиНаДатуВремя, СобытиеНаВесьДень, ПользовательОтбор, ПомещениеОтбор, СтарыйПользовательОтбор, СтароеПомещениеОтбор, ОбновлятьКалендарь = Ложь, СтруктураДанныхКлиент = Неопределено)
	//НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
	//НаборЗаписей.Объект = Событие;
	//НаборЗаписей.Параметры = Новый Структура();
	//НаборЗаписей.Параметры.Вставить("Событие",					Событие);
	//НаборЗаписей.Параметры.Вставить("ПеренестиНаДатуВремя",		ПеренестиНаДатуВремя);
	//НаборЗаписей.Параметры.Вставить("СобытиеНаВесьДень",		СобытиеНаВесьДень);
	//НаборЗаписей.Параметры.Вставить("ПользовательОтбор",		ПользовательОтбор);
	//НаборЗаписей.Параметры.Вставить("ПомещениеОтбор",			ПомещениеОтбор);
	//НаборЗаписей.Параметры.Вставить("СтарыйПользовательОтбор",	СтарыйПользовательОтбор);
	//НаборЗаписей.Параметры.Вставить("СтароеПомещениеОтбор",		СтароеПомещениеОтбор);
	//Если ЗначениеЗаполнено(ДатаНачалоСобытия) И ЗначениеЗаполнено(ДатаОкончаниеСобытия) Тогда
	//	НаборЗаписей.Параметры.Вставить("ПериодНачало", ДатаНачалоСобытия);
	//	НаборЗаписей.Параметры.Вставить("ПериодОкончание", ДатаОкончаниеСобытия);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ПользовательСобытия) Тогда
	//	НаборЗаписей.Параметры.Вставить("Пользователь", ПользовательСобытия);
	//КонецЕсли;
	//
	//Ошибки = НаборЗаписей.ПеренестиОбъект();
	//
	//Если ЗначениеЗаполнено(Ошибки) Тогда
	//	Сообщить(НСтр("ru = 'При переносе объекта произошли ошибки:'")
	//		+ Символы.ПС
	//		+ Ошибки);
	//	//
	//КонецЕсли;
	//
	//Если ОбновлятьКалендарь И ТипЗнч(СтруктураДанныхКлиент) = Тип("Структура") Тогда
	//	СформироватьКалендарьНаСервере(СтруктураДанныхКлиент);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСобытиеНаДатуНаКлиенте(РасшифровкаЗначение, ПеренестиНаДатуВремя, СобытиеНаВесьДень, ПользовательОтбор,
	ПомещениеОтбор ,СтарыйПользовательОтбор, СтароеПомещениеОтбор, ОбновлятьКалендарь = Ложь)
	// Если нужно что-то сделать на клиенте, сделать здесь.
	
	Если Не ЗначениеЗаполнено(РасшифровкаЗначение.Событие) Тогда Возврат; КонецЕсли;
	
	СтруктураДанныхКлиент = Неопределено;
	Если ОбновлятьКалендарь Тогда
		СтруктураДанныхКлиент = ДействияПередОбновлениемКалендаряНаКлиенте();
	КонецЕсли;
	
	ПеренестиСобытиеНаДатуНаСервере(РасшифровкаЗначение.Событие, РасшифровкаЗначение.ПериодНачало, РасшифровкаЗначение.ПериодОкончание, РасшифровкаЗначение.Пользователь,
		ПеренестиНаДатуВремя, СобытиеНаВесьДень, ПользовательОтбор, ПомещениеОтбор, СтарыйПользовательОтбор, СтароеПомещениеОтбор, ОбновлятьКалендарь, СтруктураДанныхКлиент);
	
	Если ОбновлятьКалендарь Тогда
		ДействияПослеОбновленияКалендаряНаКлиенте(СтруктураДанныхКлиент);
	КонецЕсли;
	
	Если ТипЗнч(РасшифровкаЗначение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		МассивЗадач = Новый Массив();
		МассивЗадач.Добавить(РасшифровкаЗначение);
		Оповестить("ЗадачаИзменена", МассивЗадач);
		
		Если ЗначениеЗаполнено(ПользовательОтбор) И ПользовательОтбор <> СтарыйПользовательОтбор Тогда
			Оповестить("ЗадачаПеренаправлена", МассивЗадач);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДиспетчеризацияСобытий(События, НаДатуВремяНачало, НаДатуВремяОкончание, НаПользователя, НаСобытиеНаВесьДень, СтруктураДанныхКлиент)
	Если Не ЗначениеЗаполнено(НаПользователя) Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НаДатуВремяНачало) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(События) = Тип("Массив") Тогда
		МассивСобытий = События;
	Иначе
		МассивСобытий = Новый Массив();
		МассивСобытий.Добавить(События);
	КонецЕсли;
	
	Для Каждого Событие Из МассивСобытий Цикл
		Если ТипЗнч(Событие) <> Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
			Продолжить;
		КонецЕсли;
		
		СобытиеОбъект = Событие.ПолучитьОбъект();
		СобытиеОбъект.ДополнительныеСвойства.Вставить("ОбъектЗаписанПользователем");
		
		Если НаСобытиеНаВесьДень Тогда
			СобытиеОбъект.НаВесьДень = Истина;
		ИначеЕсли ЗначениеЗаполнено(НаДатуВремяОкончание) И НаДатуВремяОкончание > НаДатуВремяНачало Тогда
			СобытиеОбъект.Дата = НаДатуВремяНачало;
			СобытиеОбъект.ОкончаниеСобытия = НаДатуВремяОкончание;
		Иначе
			РазностьДатСобытия = СобытиеОбъект.ОкончаниеСобытия - СобытиеОбъект.Дата;
			СобытиеОбъект.Дата = НаДатуВремяНачало;
			СобытиеОбъект.ОкончаниеСобытия = СобытиеОбъект.Дата + РазностьДатСобытия;
		КонецЕсли;
		
		Если СобытиеОбъект.Ответственный <> НаПользователя Тогда
			Если ЗначениеЗаполнено(СобытиеОбъект.Ответственный) Тогда
				CRM_ОповещенияСервер.УдалитьОповещения(СобытиеОбъект.Ссылка, СобытиеОбъект.Ответственный, Истина);
				СобытиеОбъект.Описание = НСтр("ru ='Переадресовано от'") + " " + СобытиеОбъект.Ответственный + " " + CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()
					+ НСтр("ru =' (предыдущее состояние ""'") + СобытиеОбъект.СостояниеСобытия + """)" 
					+ Символы.ПС + СобытиеОбъект.Описание + Символы.ПС;
				//
				СобытиеОбъект.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано;
			КонецЕсли;
			СобытиеОбъект.Ответственный = НаПользователя;
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УдалитьCRM_Событие
		|ГДЕ
		|	Ссылка <> &Ссылка
		|	И Номер = &Номер
		|	И ГОД(Дата) = &Год
		|");
		Запрос.УстановитьПараметр("Ссылка",	СобытиеОбъект.Ссылка);
		Запрос.УстановитьПараметр("Номер",	СобытиеОбъект.Номер);
		Запрос.УстановитьПараметр("Год",	Год(СобытиеОбъект.Дата));
		Выборка = Запрос.Выполнить().Выбрать();
		бНомерНеУникальный = (Выборка.Количество() > 0);
		Если бНомерНеУникальный Тогда
			СобытиеОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		Попытка
			СобытиеОбъект.Записать();
		Исключение
			СтрОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при записи события'")
				+ " """ + Строка(СобытиеОбъект.Ссылка) + """: "
				+ СтрОписаниеОшибки);
			//
		КонецПопытки;
	КонецЦикла;
	
	СформироватьКалендарьНаСервере(СтруктураДанныхКлиент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСобытияНаОсновании(ОбъектОснование, НаДатуВремяНачало, НаДатуВремяОкончание, НаПользователя = Неопределено, НаПомещение = Неопределено, СобытиеНаВесьДень = Ложь, ДополнительныеПараметры = Неопределено, Перетаскивание)
	Если ТипЗнч(ОбъектОснование) = Тип("Массив") Тогда
		МассивОснований = ОбъектОснование;
	Иначе
		МассивОснований = Новый Массив();
		МассивОснований.Добавить(ОбъектОснование);
	КонецЕсли;
	
	Для Каждого Основание Из МассивОснований Цикл
		Если ТипЗнч(Основание) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			СтруктураОснования = Новый Структура();
			СтруктураОснования.Вставить("НаДатуВремяНачало",				НаДатуВремяНачало);
			СтруктураОснования.Вставить("НаДатуВремяОкончание",				НаДатуВремяОкончание);
			СтруктураОснования.Вставить("НаПользователя",					НаПользователя);
			СтруктураОснования.Вставить("НаПомещение",						НаПомещение);
			Если ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда
				СтруктураОснования.Вставить("ТекущийОтборПоПользователю",	ОтборЗначениеПользователь);
			КонецЕсли;
			СтруктураОснования.Вставить("СобытиеНаВесьДень",				СобытиеНаВесьДень);
			СтруктураОснования.Вставить("ЭтоПеретаскивание",				Перетаскивание);
			СтруктураОснования.Вставить("Основание",						Основание);
			СтруктураОснования.Вставить("ВидСобытия",						ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.Прочее"));
			
			Основание = Новый Структура;
			Основание.Вставить("Основание",СтруктураОснования);
				
			Если CRM_ОбщегоНазначенияПовтИсп.ИспользуетсяРежимЗакладок() Тогда
				ОткрытьФорму("Документ.УдалитьCRM_Событие.ФормаОбъекта", Основание, ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно);
			Иначе
				ОткрытьФорму("Документ.УдалитьCRM_Событие.ФормаОбъекта", Основание, ЭтотОбъект,,);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗадаватьВопросПередСозданиемСобытия(Знач СтруктураДанныхСобытия)
	НастройкиОбщие = ПолучитьНастройкиОбщиеКлиент();
	бИспользоватьКалендарныеГрафики = (НастройкиОбщие.КалендарьИспользоватьКалендарныеГрафики = Истина);
	
	Если бИспользоватьКалендарныеГрафики Тогда
		ДатаСобытияНачалоДня = НачалоДня(СтруктураДанныхСобытия.ПериодНачало);
		КалендарныйГрафикРаботы = ПолучитьКалендарныйГрафик(ДатаСобытияНачалоДня);
		Если КалендарныйГрафикРаботы <> Неопределено Тогда
			СтруктураОписаниеКалендарногоДня = КалендарныйГрафикРаботы[ДатаСобытияНачалоДня];
			Если СтруктураОписаниеКалендарногоДня <> Неопределено И СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю = Ложь Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СоздатьСобытиеИзКалендаря(ТипСобытия = Неопределено, Знач ВидСобытия = Неопределено, Знач УпрощеннаяФорма = Ложь)
	ТекущиеДанные = ПолучитьСводнуюИнформациюОВыделеннойОбласти();
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущаяДатаВремя = ТекущаяДата();
	
	НастройкиОтображения = ПолучитьНастройкиОтображенияКлиент();
	
	Если ТекущиеДанные.ИндексВремениНачало = Неопределено Тогда ТекущиеДанные.ИндексВремениНачало = 0; КонецЕсли;
	Если ТекущиеДанные.ИндексВремениОкончание = Неопределено Тогда ТекущиеДанные.ИндексВремениОкончание = 0; КонецЕсли;
	
	Если Объект.ТекущееОтображение = "Месяц" Или Объект.ТекущееОтображение = "Список" Тогда
		бСобытиеНаВесьДень = Истина;
	Иначе
		бСобытиеНаВесьДень = ТекущиеДанные.СобытиеНаВесьДень;
		Если бСобытиеНаВесьДень И ТекущиеДанные.ИндексВремениНачало <> ТекущиеДанные.ИндексВремениОкончание Тогда
			бСобытиеНаВесьДень = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.МассивДат.Количество() = 1 Тогда
		ДатаВремяНачало = ТекущиеДанные.МассивДат[0];
		ДатаВремяОкончание = ТекущиеДанные.МассивДат[0];
		
		ДатаДеньНачало = НачалоДня(ТекущиеДанные.МассивДат[0]);
		ДатаДеньОкончание = ДатаДеньНачало;
	ИначеЕсли ТекущиеДанные.МассивДат.Количество() > 0 Тогда
		ДатаДеньНачало = Дата("30000101");
		ДатаДеньОкончание = Дата("00010101");
		Для Каждого ВыбраннаяДата Из ТекущиеДанные.МассивДат Цикл
			ДатаДеньНачало = Мин(ДатаДеньНачало, ВыбраннаяДата);
			ДатаДеньОкончание = Макс(ДатаДеньОкончание, ВыбраннаяДата);
		КонецЦикла;
		
		ДатаВремяНачало = ДатаДеньНачало;
		ДатаВремяОкончание = ДатаДеньОкончание;
	Иначе
		ДатаДеньНачало = НачалоДня(ТекущаяДатаВремя);
		ДатаДеньОкончание = ДатаДеньНачало;
		
		ДатаВремяНачало = ДатаДеньНачало;
		ДатаВремяОкончание = ДатаДеньОкончание;
	КонецЕсли;
	
	Если ТекущиеДанные.МассивПользователей.Количество() > 0 Тогда
		// TODO: что делать если выбрано несколько пользователей.
		ВыбранныйПользователь = ТекущиеДанные.МассивПользователей[0];
		МассивВыбранныхПользователей = ТекущиеДанные.МассивПользователей;
	Иначе
		ВыбранныйПользователь = Неопределено;
		МассивВыбранныхПользователей = Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные.МассивПомещений.Количество() > 0 Тогда
		// TODO: что делать если выбрано несколько помещений.
		ВыбранноеПомещение = ТекущиеДанные.МассивПомещений[0];
	Иначе
		ВыбранноеПомещение = Неопределено;
	КонецЕсли;
	
	Если Объект.ТекущееОтображение = "Месяц" Тогда
		Если НачалоДня(ТекущаяДатаВремя) = НачалоДня(ДатаДеньНачало) Тогда
			ДатаСобытияНачало = ТекущаяДатаВремя;
			Если НачалоДня(ТекущаяДатаВремя) = НачалоДня(ДатаДеньОкончание) Тогда
				ДатаСобытияОкончание = Мин(ДатаСобытияНачало + 30*60, КонецДня(ДатаСобытияНачало));
			Иначе
				ДатаСобытияОкончание = КонецДня(ДатаДеньОкончание);
			КонецЕсли;
		Иначе
			ДатаСобытияНачало = НачалоДня(ДатаДеньНачало) + НастройкиОтображения.НачалоРабочегоДняЧас * 60 * 60;
			ДатаСобытияОкончание = НачалоДня(ДатаДеньОкончание) + НастройкиОтображения.КонецРабочегоДняЧас * 60 * 60;
		КонецЕсли;
	ИначеЕсли Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1) Тогда
		ДатаСобытияНачало = ДатаВремяНачало;
		ДатаСобытияОкончание = ДатаВремяОкончание + НастройкиОтображения.РасписаниеИнтервалШкалыВремени * 60;
	Иначе
		Если бСобытиеНаВесьДень И ТекущиеДанные.ИндексВремениНачало = ТекущиеДанные.ИндексВремениОкончание Тогда
			Если ЗначениеЗаполнено(ДатаДеньНачало) И ЗначениеЗаполнено(ДатаДеньОкончание) И НачалоДня(ДатаДеньНачало) <> НачалоДня(ДатаДеньОкончание) Тогда
				ДатаСобытияНачало = НачалоДня(ДатаДеньНачало);
				ДатаСобытияОкончание = КонецДня(ДатаДеньОкончание);
			Иначе
				Если Не ЗначениеЗаполнено(ДатаДеньНачало) Тогда
					ДатаСобытияНачало = ТекущаяДатаВремя;
				Иначе
					ДатаСобытияНачало = ДатаДеньНачало + (ТекущаяДатаВремя - НачалоДня(ТекущаяДатаВремя));
				КонецЕсли;
				// TODO: как определять сколько длится событие на весь день введенное не по шкале времени а кликом по свободной
				// области.
				ДатаСобытияОкончание = ДатаСобытияНачало + (10 * 60);
				Если НачалоДня(ДатаСобытияНачало) <> НачалоДня(ДатаСобытияОкончание) Тогда
					ДатаСобытияОкончание = КонецДня(ДатаСобытияНачало);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДатаСобытияНачало = ДатаДеньНачало + ТекущиеДанные.ИндексВремениНачало * 30 * 60;
			ДатаСобытияОкончание = ДатаДеньОкончание + (ТекущиеДанные.ИндексВремениОкончание + 1) * 30 * 60;
		КонецЕсли;
	КонецЕсли;
	
	// Корректировка если даты явно не выбраны и если событие не на весь день.
	Если	(ТипЗнч(ТекущиеДанные.МассивДат) <> Тип("Массив") Или ТекущиеДанные.МассивДат.Количество() = 0)
		И	Не бСобытиеНаВесьДень
		И	НачалоДня(ДатаСобытияНачало) = ДатаСобытияНачало
		И	(НачалоДня(ДатаСобытияНачало) = НачалоДня(ДатаСобытияОкончание) И НачалоДня(ТекущаяДатаВремя) = НачалоДня(ДатаСобытияНачало)) Тогда
		//
		ДлительностьСобытияВСекундах = ДатаСобытияОкончание - ДатаСобытияНачало;
		ДатаСобытияНачало = НачалоДня(ДатаСобытияНачало) + (ТекущаяДатаВремя - НачалоДня(ТекущаяДатаВремя));
		ДатаСобытияОкончание = Мин(КонецДня(ДатаСобытияНачало), ДатаСобытияНачало + ДлительностьСобытияВСекундах);
	КонецЕсли;
	
	НаДатуВремяНачало = Неопределено;
	НаДатуВремяОкончание = Неопределено;
	Если ЗначениеЗаполнено(ДатаСобытияОкончание) И ДатаСобытияОкончание <> ДатаСобытияНачало + 30 * 60 Тогда
		Если Объект.ТекущееОтображение = "Месяц" Тогда
			Если ЗначениеЗаполнено(ДатаСобытияНачало) И НачалоДня(ДатаСобытияНачало) <> НачалоДня(ДатаСобытияОкончание) Тогда
				НаДатуВремяОкончание = ДатаСобытияОкончание
			КонецЕсли;
		Иначе
			НаДатуВремяОкончание = ДатаСобытияОкончание;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанныхСобытия = Новый Структура("ПериодНачало,ПериодОкончание,Пользователь,МассивПользователей,Помещение",
		ДатаСобытияНачало,
		ДатаСобытияОкончание,
		ВыбранныйПользователь,
		МассивВыбранныхПользователей,
		ВыбранноеПомещение);
	//
	Если ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда
		СтруктураДанныхСобытия.Вставить("ТекущийОтборПоПользователю", ОтборЗначениеПользователь);
	КонецЕсли;
	
	Если бСобытиеНаВесьДень Тогда
		СтруктураДанныхСобытия.Вставить("СобытиеНаВесьДень", бСобытиеНаВесьДень);
	КонецЕсли;
	
	Если НаДатуВремяОкончание <> Неопределено Тогда
		СтруктураДанныхСобытия.Вставить("НаДатуВремяОкончание", НаДатуВремяОкончание);
	КонецЕсли;
	Если НаДатуВремяНачало <> Неопределено Тогда
		СтруктураДанныхСобытия.Вставить("НаДатуВремяНачало", НаДатуВремяНачало);
	КонецЕсли;
	
	НастройкиОбщие = ПолучитьНастройкиОбщиеКлиент();
	Если ТипСобытия = Неопределено Тогда
		ТипСобытия = НастройкиОбщие.КалендарьТипСобытияПоУмолчанию;
	КонецЕсли;
	СтруктураДанныхСобытия.Вставить("ТипСобытия", ТипСобытия);
	Если ТипСобытия = "Документ.УдалитьCRM_Событие" Тогда
		СтруктураДанныхСобытия.Вставить("ВидСобытия", ВидСобытия);
	КонецЕсли;
	
	Если ЗадаватьВопросПередСозданиемСобытия(СтруктураДанныхСобытия) Тогда
		ТекстВопроса = НСтр("ru = 'День'") + " "
			+ Формат(НачалоДня(СтруктураДанныхСобытия.ПериодНачало), "ДФ='дд ММММ гггг'") + НСтр("ru = ' г.'")
			+ НСтр("ru = ' отмечен в производственном календаре как не рабочий.'")
			+ Символы.ПС
			+ НСтр("ru = 'Создать событие?'");
		//
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСобытиеИзКалендаряЗавершение", ЭтотОбъект, 
			Новый Структура("СтруктураДанныхСобытия, ТипСобытия, УпрощеннаяФорма", СтруктураДанныхСобытия, ТипСобытия, УпрощеннаяФорма));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНовогоСобытия(СтруктураДанныхСобытия, ТипСобытия, УпрощеннаяФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСобытиеИзКалендаряЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуНовогоСобытия(ДополнительныеПараметры.СтруктураДанныхСобытия, ДополнительныеПараметры.ТипСобытия, ДополнительныеПараметры.УпрощеннаяФорма);
КонецПроцедуры

&НаСервере
Процедура УдалитьСобытиеНаСервере(МассивУдаляемыхСобытий, ОбновлятьКалендарь = Ложь, СтруктураДанныхКлиент = Неопределено)
	Возврат;
	//НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
	//НаборЗаписей.Объект = МассивУдаляемыхСобытий;
	//
	//Ошибки = НаборЗаписей.УдалитьОбъект();
	//
	//Если ЗначениеЗаполнено(Ошибки) Тогда
	//	Сообщить(НСтр("ru = 'При удалении объектов произошли ошибки:'")
	//		+ Символы.ПС
	//		+ Ошибки);
	//	//
	//КонецЕсли;
	//
	//Если ОбновлятьКалендарь И ТипЗнч(СтруктураДанныхКлиент) = Тип("Структура") Тогда
	//	СформироватьКалендарьНаСервере(СтруктураДанныхКлиент);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСобытиеИзКалендаря(ОбновлятьКалендарь = Истина)
	Возврат;
	//ТекущиеДанные = ПолучитьСводнуюИнформациюОВыделеннойОбласти();
	//Если ТекущиеДанные = Неопределено Или ТекущиеДанные.МассивРасшифровокСобытий.Количество() = 0 Тогда Возврат; КонецЕсли;
	//
	//МассивУдаляемыхСобытий = Новый Массив();
	//Для Каждого Расшифровка Из ТекущиеДанные.МассивРасшифровокСобытий Цикл
	//	Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[Расшифровка];
	//	Исключение	РасшифровкаЗначение = Неопределено;
	//	КонецПопытки;
	//	
	//	Если РасшифровкаЗначение <> Неопределено Тогда
	//		СтруктураУдаляемоеСобытие = Новый Структура("ПериодНачало,ПериодОкончание,Пользователь,Объект");
	//		ЗаполнитьЗначенияСвойств(СтруктураУдаляемоеСобытие, РасшифровкаЗначение);
	//		СтруктураУдаляемоеСобытие.Объект = РасшифровкаЗначение.Событие;
	//		МассивУдаляемыхСобытий.Добавить(СтруктураУдаляемоеСобытие);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если МассивУдаляемыхСобытий.Количество() > 0 Тогда
	//	Ответ = Вопрос(НСтр("ru = 'Удалить выбранные объекты?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		
	//		СтруктураДанныхКлиент = Неопределено;
	//		Если ОбновлятьКалендарь Тогда
	//			СтруктураДанныхКлиент = ДействияПередОбновлениемКалендаряНаКлиенте();
	//		КонецЕсли;
	//		
	//		УдалитьСобытиеНаСервере(МассивУдаляемыхСобытий, ОбновлятьКалендарь, СтруктураДанныхКлиент);
	//		
	//		Если ОбновлятьКалендарь Тогда
	//			ДействияПослеОбновленияКалендаряНаКлиенте(СтруктураДанныхКлиент);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоСобытия(Знач СтруктураКлюч, ТипСобытия, Знач УпрощеннаяФорма = Ложь)
	СтруктураЗначенияЗаполнения = Новый Структура("Дата,ОкончаниеСобытия,Помещение",
		СтруктураКлюч.ПериодНачало, СтруктураКлюч.ПериодОкончание, СтруктураКлюч.Помещение);
	//
	Если ОбъектИмеетСвойство(СтруктураКлюч, "НаДатуВремяОкончание") Тогда
		СтруктураЗначенияЗаполнения.Вставить("НаДатуВремяОкончание", СтруктураКлюч.НаДатуВремяОкончание);
	КонецЕсли;
	
	Если ТипСобытия = "Документ.CRM_КонтрольнаяТочкаПроекта" Тогда
		СтруктураЗначенияЗаполнения.Вставить("ДатаЗакрытия", СтруктураКлюч.ПериодОкончание);
	КонецЕсли;
	
	Если ОбъектИмеетСвойство(СтруктураКлюч, "СобытиеНаВесьДень") Тогда
		СтруктураЗначенияЗаполнения.Вставить("НаВесьДень", СтруктураКлюч.СобытиеНаВесьДень);
	КонецЕсли;
	
	Если СтруктураКлюч.Свойство("ТекущийОтборПоПользователю") Тогда
		СтруктураЗначенияЗаполнения.Вставить("ТекущийОтборПоПользователю", СтруктураКлюч.ТекущийОтборПоПользователю);
	КонецЕсли;
		
	Если СтруктураКлюч.Свойство("ВидСобытия") И ЗначениеЗаполнено(СтруктураКлюч.ВидСобытия) Тогда
		СтруктураЗначенияЗаполнения.Вставить("ВидСобытия", СтруктураКлюч.ВидСобытия);
	КонецЕсли;
	
	Если СтруктураКлюч.Свойство("МассивПользователей") И ТипЗнч(СтруктураКлюч.МассивПользователей) = Тип("Массив") Тогда
		МассивПользователей = СтруктураКлюч.МассивПользователей;
	Иначе
		МассивПользователей = Неопределено;
	КонецЕсли;
	
	ДоступныеОтборы = ПолучитьМассивДоступныхОтборов();
	Для Каждого СтрОтбор Из ДоступныеОтборы Цикл
		Попытка		ЗначениеОтбора = ЭтотОбъект["ОтборЗначение" + СтрОтбор];
		Исключение	ЗначениеОтбора = Неопределено;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
			СтруктураЗначенияЗаполнения.Вставить(СтрОтбор, ЗначениеОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтруктураКлюч.ПериодНачало) Или Не ЗначениеЗаполнено(СтруктураКлюч.ПериодОкончание) Тогда
		УпрощеннаяФорма = Ложь;
	КонецЕсли;
	Если ТипСобытия = "Документ.УдалитьCRM_Событие" И УпрощеннаяФорма Тогда
		Форма = ПолучитьФорму(ТипСобытия + ".Форма.ФормаДокументаУпрощенная", Новый Структура("ЗначенияЗаполнения, ОбновлятьКалендарь", СтруктураЗначенияЗаполнения, 1), ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно);
	Иначе
		Форма = ПолучитьФорму(ТипСобытия + ".ФормаОбъекта", Новый Структура("ЗначенияЗаполнения, ОбновлятьКалендарь", СтруктураЗначенияЗаполнения, 1), ЭтотОбъект);
	КонецЕсли;
	
	Попытка Форма.АвтоВремя = РежимАвтоВремя.НеИспользовать;
	Исключение КонецПопытки;
	
	Если ТипСобытия = "Документ.УдалитьCRM_Событие" Тогда
		Форма.Объект.Дата = СтруктураКлюч.ПериодНачало;
		Форма.Объект.ОкончаниеСобытия = СтруктураКлюч.ПериодОкончание;
		
		Если ОбъектИмеетСвойство(СтруктураКлюч, "ВидСобытия") И ЗначениеЗаполнено(СтруктураКлюч.ВидСобытия) Тогда
			Форма.Объект.ВидСобытия = СтруктураКлюч.ВидСобытия;
		КонецЕсли;
		
		Если ОбъектИмеетСвойство(СтруктураКлюч, "СобытиеНаВесьДень") Тогда
			Форма.Объект.НаВесьДень = СтруктураКлюч.СобытиеНаВесьДень;
		КонецЕсли;
		
		Если МассивПользователей <> Неопределено Тогда
			Для Каждого ПользовательСобытия Из МассивПользователей Цикл
				Если Не ЗначениеЗаполнено(ПользовательСобытия) Или ТипЗнч(ПользовательСобытия) <> Тип("СправочникСсылка.Пользователи") Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки = Форма.Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ПользовательСобытия));
				Если НайденныеСтроки.Количество() > 0 Тогда Продолжить; КонецЕсли;
				
				СтрокаПользователь = Форма.Объект.СвоиЛица.Добавить();
				СтрокаПользователь.Лицо = ПользовательСобытия;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураКлюч.Помещение) И Не ЗначениеЗаполнено(Форма.Объект.Помещение) Тогда
			Форма.Объект.Помещение = СтруктураКлюч.Помещение;
		КонецЕсли;
		
		Если СтруктураКлюч.Свойство("ТекущийОтборПоПользователю") И ЗначениеЗаполнено(СтруктураКлюч.ТекущийОтборПоПользователю) Тогда
			Форма.Объект.Ответственный = СтруктураКлюч.ТекущийОтборПоПользователю;
		КонецЕсли;
		
	ИначеЕсли ТипСобытия = "Документ.CRM_КонтрольнаяТочкаПроекта" Тогда
		Форма.Объект.Дата = СтруктураКлюч.ПериодНачало;
		Форма.Объект.ДатаЗакрытия = СтруктураКлюч.ПериодОкончание;
		
		Если ОбъектИмеетСвойство(СтруктураКлюч, "СобытиеНаВесьДень") Тогда
			Форма.Объект.НаВесьДень = СтруктураКлюч.СобытиеНаВесьДень;
		КонецЕсли;
		
		Если МассивПользователей = Неопределено И ЗначениеЗаполнено(ОтборЗначениеПользователь) И ТипЗнч(ОтборЗначениеПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей = Новый Массив();
			МассивПользователей.Добавить(ОтборЗначениеПользователь);
		КонецЕсли;
		
		Если МассивПользователей <> Неопределено Тогда
			Для Каждого ПользовательСобытия Из МассивПользователей Цикл
				НайденныеСтроки = Форма.Объект.ПользователиКТ.НайтиСтроки(Новый Структура("Пользователь", ПользовательСобытия));
				Если НайденныеСтроки.Количество() > 0 Тогда Продолжить; КонецЕсли;
				
				СтрокаПользователь = Форма.Объект.ПользователиКТ.Добавить();
				СтрокаПользователь.Пользователь = ПользовательСобытия;
			КонецЦикла;
			Если Форма.Объект.ПользователиКТ.Количество() > 0 Тогда
				Форма.Объект.ПользователиКТ[0].Ответственный = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Открыть();
КонецПроцедуры

&НаСервере
// Процедура устанавливает нового ответственного в выбранных документах.
//
// Параметры:
//  МассивДокументов 	- массив выбранных документов;
//  НовыйОтветственный  - новый ответственный.
//
Процедура УстановитьНовогоОтветственного(Знач МассивДокументов, НовыйОтветственный) Экспорт 

	Для Каждого СтрокаМассива Из МассивДокументов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаМассива.Объект) Тогда Продолжить; КонецЕсли;
		
		// Отдельный алгоритм установки ответственных для задач.
		Если ТипЗнч(СтрокаМассива.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если СтрокаМассива.Объект.Исполнитель = НовыйОтветственный  Тогда 				
				Продолжить; 
			Иначе
				Попытка
					ТекущийДокументОбъект = СтрокаМассива.Объект.ПолучитьОбъект();
					ТекущийДокументОбъект.Исполнитель = НовыйОтветственный;
					ТекущийДокументОбъект.Записать();				
				Исключение					
				КонецПопытки;					
				Продолжить;
			КонецЕсли;				
		ИначеЕсли СтрокаМассива.Объект.Ответственный = НовыйОтветственный Тогда 
			Продолжить; 
		КонецЕсли;
		
		// Отдельный алгоритм установки ответственных для маркетинговых кампаний (устанавливается другой реквизит).
		Если ТипЗнч(СтрокаМассива.Объект) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если СтрокаМассива.Объект.CRM_Автор = НовыйОтветственный  Тогда 				
				Продолжить; 
			Иначе			
				Попытка
					ТекущийДокументОбъект = СтрокаМассива.Объект.ПолучитьОбъект();
					ТекущийДокументОбъект.CRM_Автор = НовыйОтветственный;
					ТекущийДокументОбъект.Записать();				
				Исключение					
				КонецПопытки;					
				Продолжить;				
			КонецЕсли;				
		КонецЕсли;			
		
		Попытка
			
			CRM_ОповещенияСервер.УдалитьОповещения(СтрокаМассива.Объект, СтрокаМассива.Объект.Ответственный, Истина);
			
			ТекущийДокументОбъект = СтрокаМассива.Объект.ПолучитьОбъект();
			
			Если ТипЗнч(ТекущийДокументОбъект) = Тип("ДокументОбъект.УдалитьCRM_Событие") Тогда
				ТекущийДокументОбъект.Описание = НСтр("ru ='Переадресовано от '") + ТекущийДокументОбъект.Ответственный + " " + CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()
				+ НСтр("ru =' (предыдущее состояние ""'") + ТекущийДокументОбъект.СостояниеСобытия + """)" 
				+ Символы.ПС + ТекущийДокументОбъект.Описание + Символы.ПС;
				
				ТекущийДокументОбъект.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Запланировано;
				
			КонецЕсли;
			
			ТекущийДокументОбъект.Ответственный = НовыйОтветственный;
			ТекущийДокументОбъект.Записать();
			
			// Если объект перенаправил на себя текущий пользователь, то оповещять его об этом не надо.
			Если НЕ НовыйОтветственный = Пользователи.ТекущийПользователь() Тогда
				ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(НовыйОтветственный,Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах, ТекущийДокументОбъект.Ссылка);
				Если НЕ (ПараметрыОповещения = Неопределено) Тогда
					CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
				КонецЕсли;
			КонецЕсли;
			
		Исключение
		КонецПопытки;	
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьСобытиеНаКлиенте(МассивПеренаправляемыхСобытий, СтруктураДанныхКлиент = Неопределено)
	
	МассивИзбранныхПолучателей = CRM_МетодыФормОбработокСервер.ПолучитьИзбранныхПолучателей();
	
	Если МассивИзбранныхПолучателей.Количество() > 0 Тогда
		СписокВыбора = Новый СписокЗначений;
		Для Каждого ЭлементМассива Из МассивИзбранныхПолучателей Цикл
			СписокВыбора.Добавить(ЭлементМассива, Строка(ЭлементМассива));
		КонецЦикла;
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"), "Выбрать ИЗ списка ...", , БиблиотекаКартинок.Лупа);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренаправитьСобытиеНаКлиентеПродолжение", ЭтотОбъект, Новый Структура("МассивПеренаправляемыхСобытий, СтруктураДанныхКлиент", МассивПеренаправляемыхСобытий, СтруктураДанныхКлиент));
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, ЭтотОбъект.ТекущийЭлемент);
	Иначе
		ПеренаправитьСобытиеНаКлиентеПродолжение(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"), Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьСобытиеНаКлиентеПродолжение(Ответственный, ДополнительныеПараметры) Экспорт
	
	Если Ответственный = Неопределено Тогда Возврат; КонецЕсли;
	Если Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") Тогда	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",			Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПользователиКлиентСервер.ТекущийПользователь());
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренаправитьСобытиеНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьСобытиеНаКлиентеЗавершение(Ответственный, ДополнительныеПараметры) Экспорт
	Если Ответственный = Неопределено Тогда Возврат; КонецЕсли;
	УстановитьНовогоОтветственного(ДополнительныеПараметры.МассивПеренаправляемыхСобытий, Ответственный);	
	
	Если ТипЗнч(ДополнительныеПараметры.СтруктураДанныхКлиент) = Тип("Структура") Тогда
		СформироватьКалендарьНаСервере(ДополнительныеПараметры.СтруктураДанныхКлиент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтоЛичнаяЗадача(ЗадачаСсылка) 
	Возврат ЗадачаСсылка.CRM_Личная;
КонецФункции	

&НаКлиенте
Процедура ПеренаправитьСобытиеИзКалендаря()
	Возврат;
	//ТекущиеДанные = ПолучитьСводнуюИнформациюОВыделеннойОбласти();
	//Если ТекущиеДанные = Неопределено Или ТекущиеДанные.МассивРасшифровокСобытий.Количество() = 0 Тогда Возврат; КонецЕсли;	
	//МассивПеренаправляемыхСобытий = Новый Массив();
	//Для Каждого Расшифровка Из ТекущиеДанные.МассивРасшифровокСобытий Цикл
	//	Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[Расшифровка];
	//	Исключение	РасшифровкаЗначение = Неопределено;
	//	КонецПопытки;
	//	Если РасшифровкаЗначение <> Неопределено Тогда
	//		Если ТипЗнч(РасшифровкаЗначение.Событие) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") ИЛИ
	//				(ТипЗнч(РасшифровкаЗначение.Событие) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И НЕ ЭтоЛичнаяЗадача(РасшифровкаЗначение.Событие)) Тогда
	//			СообщениеПользователю = Новый СообщениеПользователю;
	//			СообщениеПользователю.Текст = "Для объекта " + РасшифровкаЗначение.Событие + " с темой " + """" + РасшифровкаЗначение.Тема  + """" + " данная операция недоступна!"; 
	//			СообщениеПользователю.Сообщить();
	//			Продолжить;
	//		КонецЕсли;				
	//		СтруктураПеренаправленноеСобытие = Новый Структура("ПериодНачало,ПериодОкончание,Пользователь,Объект");
	//		ЗаполнитьЗначенияСвойств(СтруктураПеренаправленноеСобытие, РасшифровкаЗначение);
	//		СтруктураПеренаправленноеСобытие.Объект = РасшифровкаЗначение.Событие;			
	//		МассивПеренаправляемыхСобытий.Добавить(СтруктураПеренаправленноеСобытие);			
	//	КонецЕсли;			
	//КонецЦикла;	
	//
	//Если МассивПеренаправляемыхСобытий.Количество() > 0 Тогда
	//	СтруктураДанныхКлиент = ДействияПередОбновлениемКалендаряНаКлиенте();
	//	ПеренаправитьСобытиеНаКлиенте(МассивПеренаправляемыхСобытий, СтруктураДанныхКлиент);		
	//	ДействияПослеОбновленияКалендаряНаКлиенте(СтруктураДанныхКлиент);
	//КонецЕсли;		
	
КонецПроцедуры	
	
//
//////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////
// Функции работы с календарными графиками.

&НаСервереБезКонтекста
Функция ПолучитьКалендарныйГрафик(	ДатаИлиМассивДат,
									ПроизводственныйКалендарь = Неопределено,
									Пользователь = Неопределено,
									Помещение = Неопределено)
	//
	
	// TODO: если нужно обрабатывать параметр Помещение.
	
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(ДатаИлиМассивДат, ПроизводственныйКалендарь, Пользователь);
КонецФункции

// Вспомогательная функция, используется при отрисовке.
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДополнительногоОписанияИндексаВремени(СтруктураОписаниеКалендарногоДня, ВремяИндексаНачало, ВремяИндексаКонец)
	Если СтруктураОписаниеКалендарногоДня = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОписаниеИндекса = Неопределено;
	
	бИндексРабочий = Неопределено;
	бИндексНеРабочий = Неопределено;
	
	бРабочийДеньПоПроизводственномуКалендарю = Неопределено;
	бРабочийДеньДляРесурса = Неопределено;
	Если СтруктураОписаниеКалендарногоДня.ДеньРабочийДляРесурса <> Неопределено Тогда
		Если СтруктураОписаниеКалендарногоДня.ДеньРабочийДляРесурса = Истина Тогда
			бРабочийДеньДляРесурса = Истина;
		Иначе
			бРабочийДеньДляРесурса = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю <> Неопределено Тогда
		Если СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю = Истина Тогда
			бРабочийДеньПоПроизводственномуКалендарю = Истина;
		Иначе
			бРабочийДеньПоПроизводственномуКалендарю = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если бРабочийДеньДляРесурса = Истина Тогда
		Если СтруктураОписаниеКалендарногоДня.МассивПериодов = Неопределено Или СтруктураОписаниеКалендарногоДня.МассивПериодов.Количество() = 0 Тогда
			// отклонений нет
		Иначе
			// TODO:
		КонецЕсли;
		
	ИначеЕсли бРабочийДеньДляРесурса = Ложь Тогда
		бИндексНеРабочий = Истина;
		
	ИначеЕсли бРабочийДеньПоПроизводственномуКалендарю = Истина Тогда
		// отклонений нет
		
	ИначеЕсли бРабочийДеньПоПроизводственномуКалендарю = Ложь Тогда
		бИндексНеРабочий = Истина;
		
	КонецЕсли;
	
	Если бИндексНеРабочий <> Неопределено Тогда
		СтруктураОписаниеИндекса = Новый Структура("ИндексНеРабочий,ИндексРабочий", бИндексНеРабочий, бИндексРабочий);
	КонецЕсли;
	
	Возврат СтруктураОписаниеИндекса;
КонецФункции

//
/////////////////////////////////////////////

/////////////////////////////////////////////
// Функции работы со списком задач.

&НаСервереБезКонтекста
Функция ВернутьДоступныеРолиПользователя(Исполнитель)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсполнителиЗадач.РольИсполнителя";
	
	СписокРолей = Новый СписокЗначений;
	СписокРолей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя"));
	
	Возврат СписокРолей;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НазначитьРодителяИРеквизитыЗадачам(МассивЗадач, Родитель, Партнер = Неопределено, Проект = Неопределено, СтруктураПараметрыГруппировки = Неопределено)
	МассивЛичныхЗадач = Новый Массив();
	МассивНеЛичныхЗадач = Новый Массив();
	
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
		Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или Не ЗначениеЗаполнено(ЗадачаСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗадачаСсылка.CRM_Личная Тогда
			МассивЛичныхЗадач.Добавить(ЗадачаСсылка);
		Иначе
			МассивНеЛичныхЗадач.Добавить(ЗадачаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗадачаСсылка Из МассивЛичныхЗадач Цикл
		CRM_БизнесПроцессыИЗадачиВызовСервера.НазначитьРодителя(ЗадачаСсылка, Родитель, Партнер, Проект, СтруктураПараметрыГруппировки, Истина);
	КонецЦикла;
	
	Если ТипЗнч(СтруктураПараметрыГруппировки) = Тип("Структура") И СтруктураПараметрыГруппировки.Количество() > 0 Тогда
		Для Каждого ЗадачаСсылка Из МассивНеЛичныхЗадач Цикл
			Если Не ЗадачаСсылка.ПринятаКИсполнению Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Задача'") + " """ + Строка(ЗадачаСсылка) + """ "
					+ НСтр("ru = 'не принята к исполнению, изменение реквизитов недоступно!'"));
				//
				Продолжить;
			КонецЕсли;
			CRM_БизнесПроцессыИЗадачиВызовСервера.НазначитьРеквизитыЗадачам(ЗадачаСсылка, Неопределено,  Неопределено, СтруктураПараметрыГруппировки, Ложь);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоЗадач(Таблица, Дерево, ПолеГруппировки = Неопределено)
	Если Не Элементы.ГруппаСписокЗадач.Видимость Или Не ИспользоватьБизнесПроцессыИЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Обработки.CRM_Календарь.СформироватьДеревоЗадач(Таблица, Дерево, ПолеГруппировки);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере()
	Если Не Элементы.ГруппаСписокЗадач.Видимость Или Не ИспользоватьБизнесПроцессыИЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресСКДСпискаЗадач) Тогда
		Попытка		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКДСпискаЗадач);
		Исключение	СхемаКомпоновкиДанных = Неопределено;
		КонецПопытки;
		
		Если ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных") Тогда
			СхемаКомпоновкиДанных = Обработки.CRM_Календарь.ПолучитьМакет("СписокЗадач");
			АдресСКДСпискаЗадач = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
			КомпоновщикНастроекСписокЗадач.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКДСпискаЗадач));
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = Обработки.CRM_Календарь.ПолучитьМакет("СписокЗадач");
		АдресСКДСпискаЗадач = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КомпоновщикНастроекСписокЗадач.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКДСпискаЗадач));
	КонецЕсли;
	
	НастройкиСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	НастройкиСКД.Отбор.Элементы.Очистить();
	
	// Установка отбора по настройке "Вид".
	Если СписокЗадач.Отбор.Элементы.Количество() > 0 Тогда
		CRM_ОбщегоНазначенияКлиентСервер.СкопироватьОтборКомпоновкиДанных(НастройкиСКД.Отбор.Элементы, СписокЗадач.Отбор.Элементы, КомпоновщикНастроекСписокЗадач.Настройки.Отбор.ДоступныеПоляОтбора);
	КонецЕсли;
	
	// Исполнитель
	бДобавлятьОтборПоИсполнителю = Ложь;
	Если ОтборИспользованиеПользователь И ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда
		Если Не Пользователи.РолиДоступны("CRM_ПросмотрЗадачДругихПользователейВКалендаре, ПолныеПрава") Тогда
			Если ОтборЗначениеПользователь = ТекущийПользовательСеанса Тогда
				ПользовательДляОтбора = ТекущийПользовательСеанса;
			Иначе
				ПользовательДляОтбора = Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ПользовательДляОтбора = ОтборЗначениеПользователь;
		КонецЕсли;
		бДобавлятьОтборПоИсполнителю = Истина;
	ИначеЕсли Не Пользователи.РолиДоступны("CRM_ПросмотрЗадачДругихПользователейВКалендаре, ПолныеПрава") Тогда
		ПользовательДляОтбора = ТекущийПользовательСеанса;
		бДобавлятьОтборПоИсполнителю = Истина;
	КонецЕсли;
	Если бДобавлятьОтборПоИсполнителю Тогда
		СписокДоступныхРолей = ВернутьДоступныеРолиПользователя(ПользовательДляОтбора);
		ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(НастройкиСКД.Отбор.Элементы, НСтр("ru = 'Исполнитель'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "Исполнитель", ВидСравненияКомпоновкиДанных.Равно, ПользовательДляОтбора);
		Если СписокДоступныхРолей.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, "Исполнитель", ВидСравненияКомпоновкиДанных.ВСписке, СписокДоступныхРолей);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборИспользованиеПодразделение И ЗначениеЗаполнено(ОтборЗначениеПодразделение) Тогда
		// Подразделение
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиСКД.Отбор, "Подразделение", ОтборВидСравненияПодразделение, ОтборЗначениеПодразделение);
	КонецЕсли;
	
	Если ОтборИспользованиеПроект И ЗначениеЗаполнено(ОтборЗначениеПроект) Тогда
		// Проект
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиСКД.Отбор, "Проект", ОтборВидСравненияПроект, ОтборЗначениеПроект);
	КонецЕсли;
	
	Если ОтборИспользованиеПартнер И ЗначениеЗаполнено(ОтборЗначениеПартнер) Тогда
		// Клиент
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиСКД.Отбор, "Партнер", ОтборВидСравненияПартнер, ОтборЗначениеПартнер);
	КонецЕсли;
	
	// Скрыть выполненные
	УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Выполнена", ВидСравненияКомпоновкиДанных.НеРавно, Истина,
		ОтборСкрытьВыполненные, КомпоновщикНастроекСписокЗадач.Настройки.Отбор.ДоступныеПоляОтбора, Истина);
	//
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиСКД,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Дерево = РеквизитФормыВЗначение("ДеревоСписокЗадач");
	Дерево.Строки.Очистить();
	
	Если СписокЗадач.Группировка.Элементы.Количество() > 0 Тогда
		Если СписокЗадач.Группировка.Элементы[0].Использование Тогда
			ПолеГруппировки = Строка(СписокЗадач.Группировка.Элементы[0].Поле);
		Иначе
			ПолеГруппировки = Неопределено;
		КонецЕсли;
	Иначе
		ПолеГруппировки = Неопределено;
	КонецЕсли;
	
	СформироватьДеревоЗадач(РезультатТаблица, Дерево, ПолеГруппировки);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоСписокЗадач");
КонецПроцедуры

&НаСервере
Функция ПометитьНаУдалениеЗадачиНаСервере(МассивЗадач, СтруктураДанныхКлиент)
	бНетОшибок = Истина;
	
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
		бНетОшибок = CRM_БизнесПроцессыИЗадачиВызовСервера.ПометитьНаУдаление(ЗадачаСсылка, Истина) И бНетОшибок;
	КонецЦикла;
	
	ОбновитьСписокЗадачНаСервере();
	
	СформироватьКалендарьНаСервере(СтруктураДанныхКлиент);
	
	Возврат бНетОшибок;
КонецФункции

&НаКлиенте
Процедура РазвернутьСписокЗадач()
	Строки = ДеревоСписокЗадач.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		Элементы.СписокЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыделенныхЗадач(бТолькоЛичные = Ложь)
	МассивЗадач = Новый Массив();
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоСписокЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если СтрокаДерева <> Неопределено И Не СтрокаДерева.ЭтоГруппа Тогда
			Если бТолькоЛичные И Не СтрокаДерева.Личная Тогда
				Продолжить;
			КонецЕсли;
			МассивЗадач.Добавить(СтрокаДерева.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивЗадач;
КонецФункции

&НаКлиенте
Процедура УстановитьТекущуюСтрокуВСпискеЗадач(ЗадачаСсылка)
	Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или Не ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Возврат;
	КонецЕсли;
	НайденныеСтроки = CRM_ОбщегоНазначенияКлиентСервер.НайтиВЭлементахДерева(ДеревоСписокЗадач.ПолучитьЭлементы(), Новый Структура("Ссылка", ЗадачаСсылка), Истина);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Попытка Элементы.СписокЗадач.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачНаКлиенте()
	Если Не Элементы.ГруппаСписокЗадач.Видимость Или Не ИспользоватьБизнесПроцессыИЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяВыделеннаяСтрокаСпискаЗадач = Неопределено;
	
	ТекСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		ТекСсылка = Неопределено;
	Иначе
		ДеревоСписокЗадачСтрока = ДеревоСписокЗадач.НайтиПоИдентификатору(ТекСтрока);
		Если ДеревоСписокЗадачСтрока = Неопределено Тогда
			ТекСсылка = Неопределено;			
		Иначе
			ТекСсылка = ДеревоСписокЗадачСтрока.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокЗадачНаСервере();
	
	РазвернутьСписокЗадач();
	
	Если ЗначениеЗаполнено(ТекСсылка) Тогда
		УстановитьТекущуюСтрокуВСпискеЗадач(ТекСсылка);
	КонецЕсли;
КонецПроцедуры

//
/////////////////////////////////////////////

&НаСервереБезКонтекста
Процедура ОбновитьИндексППД()
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДеньНеделиСтрокой(ПараметрДата)
	Стр = НСтр("ru = ' ПнВтСрЧтПтСбВс'");
	Возврат Сред(Стр, ДеньНедели(ПараметрДата) * 2, 2);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектИмеетСвойство(ПроверяемыйОбъект, ПроверяемойСвойство)
	Попытка
		ТестоваяПеременная = ПроверяемыйОбъект[ПроверяемойСвойство];
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(ДатаНачало, ДатаОкончание)
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Или Не ЗначениеЗаполнено(ДатаОкончание) Тогда
		Возврат Формат(ДатаНачало, "ДФ='дд ММММ гггг'") + " г";
	Иначе
		Если Год(ДатаНачало) = Год(ДатаОкончание) Тогда
			Возврат Формат(ДатаНачало, "ДФ='дд ММММ'") + " - " + Формат(ДатаОкончание, "ДФ='дд ММММ гггг'") + " г"
		Иначе
			Возврат Формат(ДатаНачало, "ДФ='дд ММММ гггг'") + " г" + " - " + Формат(ДатаОкончание, "ДФ='дд ММММ гггг'") + " г";
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредопределенныйПериод(ИмяПериода, Знач ТекущаяДата, Знач ПериодНачало, Знач ПериодОкончание)
	СтруктураРезультат = Новый Структура("ПериодНачало,ПериодОкончание", ПериодНачало, ПериодОкончание);
	
	ТекущаяДатаНачалоДня	= НачалоДня(ТекущаяДата);
	ТекущаяДатаОкончаниеДня	= КонецДня(ТекущаяДата);
	
	КоличествоСекундВДне = 24 * 60 * 60;
	
	Если ИмяПериода = "Вчера" Тогда
		СтруктураРезультат.ПериодНачало		= ТекущаяДатаНачалоДня - КоличествоСекундВДне;
		СтруктураРезультат.ПериодОкончание	= ТекущаяДатаОкончаниеДня - КоличествоСекундВДне;
		
	ИначеЕсли ИмяПериода = "Сегодня" Тогда
		СтруктураРезультат.ПериодНачало		= ТекущаяДатаНачалоДня;
		СтруктураРезультат.ПериодОкончание	= ТекущаяДатаОкончаниеДня;
		
	ИначеЕсли ИмяПериода = "Завтра" Тогда
		СтруктураРезультат.ПериодНачало		= ТекущаяДатаНачалоДня + КоличествоСекундВДне;
		СтруктураРезультат.ПериодОкончание	= ТекущаяДатаОкончаниеДня + КоличествоСекундВДне;
		
	ИначеЕсли ИмяПериода = "ПрошлаяНеделя" Тогда
		НачалоПрошлойНедели = НачалоНедели(НачалоНедели(ТекущаяДатаНачалоДня) - 1);
		СтруктураРезультат.ПериодНачало		= НачалоПрошлойНедели;
		СтруктураРезультат.ПериодОкончание	= КонецНедели(НачалоПрошлойНедели);
		
	ИначеЕсли ИмяПериода = "ЭтаНеделя" Тогда
		СтруктураРезультат.ПериодНачало		= НачалоНедели(ТекущаяДатаНачалоДня);
		СтруктураРезультат.ПериодОкончание	= КонецНедели(ТекущаяДатаНачалоДня);
		
	ИначеЕсли ИмяПериода = "СледующаяНеделя" Тогда
		НачалоСледующейНедели = НачалоНедели(КонецНедели(ТекущаяДатаОкончаниеДня) + 1); 
		СтруктураРезультат.ПериодНачало		= НачалоСледующейНедели;
		СтруктураРезультат.ПериодОкончание	= КонецНедели(НачалоСледующейНедели);
		
	ИначеЕсли ИмяПериода = "ПрошлыйМесяц" Тогда
		НачалоПрошлогоМесяца = НачалоМесяца(НачалоМесяца(ТекущаяДатаНачалоДня) - 1);
		СтруктураРезультат.ПериодНачало		= НачалоПрошлогоМесяца;
		СтруктураРезультат.ПериодОкончание	= КонецМесяца(НачалоПрошлогоМесяца);
		
	ИначеЕсли ИмяПериода = "ЭтотМесяц" Тогда
		СтруктураРезультат.ПериодНачало		= НачалоМесяца(ТекущаяДатаНачалоДня);
		СтруктураРезультат.ПериодОкончание	= КонецМесяца(ТекущаяДатаНачалоДня);
		
	ИначеЕсли ИмяПериода = "СледующийМесяц" Тогда
		НачалоСледующегоМесяца = НачалоМесяца(КонецМесяца(ТекущаяДатаНачалоДня) + 1);
		СтруктураРезультат.ПериодНачало		= НачалоСледующегоМесяца;
		СтруктураРезультат.ПериодОкончание	= КонецМесяца(НачалоСледующегоМесяца);
		
	ИначеЕсли ИмяПериода = "ПрошлыйКвартал" Тогда
		НачалоПрошлогоКвартала = НачалоКвартала(НачалоКвартала(ТекущаяДатаНачалоДня) - 1);
		СтруктураРезультат.ПериодНачало		= НачалоПрошлогоКвартала;
		СтруктураРезультат.ПериодОкончание	= КонецКвартала(НачалоПрошлогоКвартала);
		
	ИначеЕсли ИмяПериода = "ЭтотКвартал" Тогда
		СтруктураРезультат.ПериодНачало		= НачалоКвартала(ТекущаяДатаНачалоДня);
		СтруктураРезультат.ПериодОкончание	= КонецКвартала(ТекущаяДатаНачалоДня);
		
	ИначеЕсли ИмяПериода = "СледующийКвартал" Тогда
		НачалоСледующегоКвартала = НачалоКвартала(КонецКвартала(ТекущаяДатаНачалоДня) + 1);
		СтруктураРезультат.ПериодНачало		= НачалоСледующегоКвартала;
		СтруктураРезультат.ПериодОкончание	= КонецКвартала(НачалоСледующегоКвартала);
		
	ИначеЕсли ИмяПериода = "ПрошлыйГод" Тогда
		НачалоПрошлогоГода = НачалоГода(НачалоГода(ТекущаяДатаНачалоДня) - 1);
		СтруктураРезультат.ПериодНачало		= НачалоПрошлогоГода;
		СтруктураРезультат.ПериодОкончание	= КонецГода(НачалоПрошлогоГода);
		
	ИначеЕсли ИмяПериода = "ЭтотГод" Тогда
		СтруктураРезультат.ПериодНачало		= НачалоГода(ТекущаяДатаНачалоДня);
		СтруктураРезультат.ПериодОкончание	= КонецГода(ТекущаяДатаНачалоДня);
		
	ИначеЕсли ИмяПериода = "СледующийГод" Тогда
		НачалоСледующегоГода = НачалоГода(КонецГода(ТекущаяДатаНачалоДня) + 1);
		СтруктураРезультат.ПериодНачало		= НачалоСледующегоГода;
		СтруктураРезультат.ПериодОкончание	= КонецГода(НачалоСледующегоГода);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокВыбораПериода()
	Список = Новый СписокЗначений();
	
	Список.Добавить("ПроизвольныйПериод",	НСтр("ru = 'Произвольный период'"));
	Список.Добавить("Вчера",				НСтр("ru = 'Вчера'"));
	Список.Добавить("Сегодня",				НСтр("ru = 'Сегодня'"));
	Список.Добавить("Завтра",				НСтр("ru = 'Завтра'"));
	Список.Добавить("ПрошлаяНеделя",		НСтр("ru = 'Прошлая неделя'"));
	Список.Добавить("ЭтаНеделя",			НСтр("ru = 'Эта неделя'"));
	Список.Добавить("СледующаяНеделя",		НСтр("ru = 'Следующая неделя'"));
	Список.Добавить("ПрошлыйМесяц",			НСтр("ru = 'Прошлый месяц'"));
	Список.Добавить("ЭтотМесяц",			НСтр("ru = 'Этот месяц'"));
	Список.Добавить("СледующийМесяц",		НСтр("ru = 'Следующий месяц'"));
	Список.Добавить("ПрошлыйКвартал",		НСтр("ru = 'Прошлый квартал'"));
	Список.Добавить("ЭтотКвартал",			НСтр("ru = 'Этот квартал'"));
	Список.Добавить("СледующийКвартал",		НСтр("ru = 'Следующий квартал'"));
	Список.Добавить("ПрошлыйГод",			НСтр("ru = 'Прошлый год'"));
	Список.Добавить("ЭтотГод",				НСтр("ru = 'Этот год'"));
	Список.Добавить("СледующийГод",			НСтр("ru = 'Следующий год'"));
	
	Возврат Список;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////
// Блок описания отборов

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаДляОтбора(ПолеОтбора)
	СтруктураРезультат = Новый Структура(
	"ИмяЭлементаИспользование,
	|ИмяЭлементаЗаголовок,
	|ИмяЭлементаВидСравнения,
	|ИмяЭлементаЗначение,
	|ИмяИсточникаДанныхИспользование,
	|ИмяИсточникаДанныхВидСравнения,
	|ИмяИсточникаДанныхЗначение");
	
	СтруктураРезультат.ИмяЭлементаИспользование			= "ОтборИспользование"	+ ПолеОтбора;
	СтруктураРезультат.ИмяЭлементаЗаголовок				= "ОтборЗаголовок"		+ ПолеОтбора;
	СтруктураРезультат.ИмяЭлементаВидСравнения			= "ОтборВидСравнения"	+ ПолеОтбора;
	СтруктураРезультат.ИмяЭлементаЗначение				= "ОтборЗначение"		+ ПолеОтбора;
	СтруктураРезультат.ИмяИсточникаДанныхИспользование	= "ОтборИспользование"	+ ПолеОтбора;
	СтруктураРезультат.ИмяИсточникаДанныхВидСравнения	= "ОтборВидСравнения"	+ ПолеОтбора;
	СтруктураРезультат.ИмяИсточникаДанныхЗначение		= "ОтборЗначение"		+ ПолеОтбора;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеОтбораДляЭлемента(Элемент, КонтекстЭтаФорма)
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ИмяПоляОтбора = Элемент;
	Иначе
		// Вычисления имени поля отбора из имени элемента формы.
		ИмяПоляОтбора = Элемент.Имя;
		ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, "Отбор", "");
		ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, "Использование", "");
		ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, "ВидСравнения", "");
		ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, "Значение", "");
	КонецЕсли;
	
	ИменаДляОтборов = ПолучитьИменаДляОтбора(ИмяПоляОтбора);
	
	СтруктураРезультат = Новый Структура(
	"ПолеОтбора,
	|ИмяЭлементаИспользование,
	|ИмяЭлементаЗаголовок,
	|ИмяЭлементаВидСравнения,
	|ИмяЭлементаЗначение,
	|ИмяИсточникаДанныхИспользование,
	|ИмяИсточникаДанныхВидСравнения,
	|ИмяИсточникаДанныхЗначение,
	|ДоступныеВидыСравнения,
	|ВидСравненияПоУмолчанию,
	|ЗначениеПоУмолчанию,
	|ИспользованиеПоУмолчанию,
	|ОписаниеТиповОграничениеВыбора,
	|ОписаниеТиповСписокЗначений,
	|ПустоеЗначениеСписок,
	|ПустоеЗначениеЗначение,
	|ИсточникДанныхИспользование,
	|ИсточникДанныхВидСравнения,
	|ИсточникДанныхЗначение,
	|ВыборИзСписка");
	
	Если ИмяПоляОтбора = "Пользователь" Тогда
		СтруктураРезультат.ПолеОтбора = "Пользователь";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		СтруктураРезультат.ПустоеЗначениеЗначение = КонтекстЭтаФорма.ПользовательПустаяСсылка;
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = КонтекстЭтаФорма.ТекущийПользовательСеанса;
		СтруктураРезультат.ИспользованиеПоУмолчанию = Истина;
		
	ИначеЕсли ИмяПоляОтбора = "Помещение" Тогда
		СтруктураРезультат.ПолеОтбора = "Помещение";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.CRM_Помещения");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "ВидСобытия" Тогда
		СтруктураРезультат.ПолеОтбора = "ВидСобытия";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ВидыСобытий");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "ВходящееИсходящееСобытие" Тогда
		СтруктураРезультат.ПолеОтбора = "ВходящееИсходящееСобытие";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ВходящееИсходящееСобытие");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "ОсновнаяКатегорияСобытия" Тогда
		СтруктураРезультат.ПолеОтбора = "ОсновнаяКатегорияСобытия";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.CRM_Категории");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.CRM_Категории.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.CRM_Категории.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "Партнер" Тогда
		СтруктураРезультат.ПолеОтбора = "Партнер";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "Подразделение" Тогда
		СтруктураРезультат.ПолеОтбора = "Подразделение";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "Проект" Тогда
		СтруктураРезультат.ПолеОтбора = "Проект";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.Проекты");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "СостояниеСобытия" Тогда
		СтруктураРезультат.ПолеОтбора = "СостояниеСобытия";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("СправочникСсылка.CRM_СостоянияСобытий");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	ИначеЕсли ИмяПоляОтбора = "СтатусКонтрольнойТочки" Тогда
		СтруктураРезультат.ПолеОтбора = "СтатусКонтрольнойТочки";
		СтруктураРезультат.ОписаниеТиповОграничениеВыбора = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_СтатусыКонтрольныхТочек");
		СтруктураРезультат.ПустоеЗначениеЗначение = ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтрольныхТочек.ПустаяСсылка");
		СтруктураРезультат.ВидСравненияПоУмолчанию = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураРезультат.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтрольныхТочек.ПустаяСсылка");
		СтруктураРезультат.ИспользованиеПоУмолчанию = Ложь;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультат.ПустоеЗначениеСписок = Новый СписокЗначений();
	СтруктураРезультат.ОписаниеТиповСписокЗначений = Новый ОписаниеТипов("СписокЗначений");
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, ИменаДляОтборов);
	
	СтруктураРезультат.ИсточникДанныхИспользование = КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхИспользование];
	СтруктураРезультат.ИсточникДанныхВидСравнения = КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения];
	СтруктураРезультат.ИсточникДанныхЗначение = КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхЗначение];
	
	Если	КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения] = ВидСравненияКомпоновкиДанных.ВСписке
		Или	КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения] = ВидСравненияКомпоновкиДанных.НеВСписке
		Или	КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения] = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		Или	КонтекстЭтаФорма[СтруктураРезультат.ИмяИсточникаДанныхВидСравнения] = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		//
		СтруктураРезультат.ВыборИзСписка = Истина;
	Иначе
		СтруктураРезультат.ВыборИзСписка = Ложь;
	КонецЕсли;
	
	СтруктураРезультат.ДоступныеВидыСравнения = Новый СписокЗначений();
	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Если СтруктураРезультат.ОписаниеТиповОграничениеВыбора.СодержитТип(Тип("Строка")) Тогда
		СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
		СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
	КонецЕсли;
	
	Если	СтруктураРезультат.ОписаниеТиповОграничениеВыбора.СодержитТип(Тип("Число"))
		Или СтруктураРезультат.ОписаниеТиповОграничениеВыбора.СодержитТип(Тип("Дата")) Тогда
	//
		СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Больше);
		СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
		СтруктураРезультат.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивДоступныхОтборов()
	МассивОтборов = Новый Массив();
	МассивОтборов.Добавить("Пользователь");
	МассивОтборов.Добавить("Подразделение");
	МассивОтборов.Добавить("Партнер");
	МассивОтборов.Добавить("Проект");
	МассивОтборов.Добавить("Помещение");
	МассивОтборов.Добавить("ВидСобытия");
	МассивОтборов.Добавить("ВходящееИсходящееСобытие");
	МассивОтборов.Добавить("СостояниеСобытия");
	МассивОтборов.Добавить("ОсновнаяКатегорияСобытия");
	МассивОтборов.Добавить("СтатусКонтрольнойТочки");
	
	Возврат МассивОтборов;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставленияОтборов()
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("Пользователь",						НСтр("ru = 'Пользователь'"));
	СтруктураРезультат.Вставить("Подразделение",					НСтр("ru = 'Подразделение'"));
	СтруктураРезультат.Вставить("Партнер",							НСтр("ru = 'Клиент'"));
	СтруктураРезультат.Вставить("Проект",							НСтр("ru = 'Проект'"));
	СтруктураРезультат.Вставить("Помещение",						НСтр("ru = 'Помещение'"));
	СтруктураРезультат.Вставить("ВидСобытия",						НСтр("ru = 'Вид события'"));
	СтруктураРезультат.Вставить("ВходящееИсходящееСобытие",			НСтр("ru = 'Направление события'"));
	СтруктураРезультат.Вставить("СостояниеСобытия",					НСтр("ru = 'Состояние события'"));
	СтруктураРезультат.Вставить("ОсновнаяКатегорияСобытия",			НСтр("ru = 'Категория события'"));
	СтруктураРезультат.Вставить("СтатусКонтрольнойТочки",			НСтр("ru = 'Статус контрольной точки'"));
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиОтборовПоУмолчанию()
	ДоступныеОтборы = ПолучитьМассивДоступныхОтборов();
	
	ИндексПользователь = ДоступныеОтборы.Найти("Пользователь");
	Если ИндексПользователь <> Неопределено Тогда
		ДоступныеОтборы.Удалить(ИндексПользователь);
	КонецЕсли;
	
	ОтборыПоУмолчанию = Новый Массив();
	
	ОтборыПоУмолчанию.Добавить("Пользователь");
	ОтборыПоУмолчанию.Добавить("Подразделение");
	ОтборыПоУмолчанию.Добавить("Помещение");
	
	ПредставленияОтборов = ПолучитьПредставленияОтборов();
	
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("ДоступныеОтборы",		ДоступныеОтборы);
	СтруктураРезультат.Вставить("ОтборыПоУмолчанию",	ОтборыПоУмолчанию);
	СтруктураРезультат.Вставить("ПредставленияОтборов",	ПредставленияОтборов);
	
	Возврат СтруктураРезультат;
КонецФункции

//
//////////////////////////////////////////////////////////////////////////////////////////

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиОтображенияПоУмолчанию()
	СтруктураНастройки = Новый Структура();
	
	// Примечание: не все настройки в структуре выносятся на редактирование пользователю,
	// некоторые существуют с целью хранить все в одном месте.
	
	// Настройки отображения
	СтруктураНастройкиОтображения = Новый Структура(
	"НачалоДняКалендаряЧас,
	|КонецДняКалендаряЧас,
	|НачалоРабочегоДняЧас,
	|КонецРабочегоДняЧас,
	|ПоказыватьНедействительныхПользователей,
	|КалендарьЦветФонаСобытияПоУмолчанию,
	|КалендарьЦветФонаКонтрольнойТочкиПроектаПоУмолчанию,
	|КалендарьЦветФонаЗадачиПоУмолчанию,
	|КалендарьЦветФонаРабочегоВремени,
	|КалендарьЦветФонаНеРабочегоВремени,
	|КалендарьЦветШкалыВремениРабочегоВремени,
	|КалендарьЦветШкалыВремениНеРабочегоВремени,
	|КалендарьЦветФонаЗаголовкаДень,
	|КалендарьЦветФонаЗаголовкаРесурс,
	|КалендарьШрифтЗаголовкаДень,
	|КалендарьЦветШрифтаЗаголовкаДень,
	|КалендарьШрифтЗаголовкаРесурс,
	|КалендарьЦветШрифтаЗаголовкаРесурс,
	|КалендарьЦветФонаСобытияНаВесьДень,
	|КалендарьЦветФонаТекущееВремяРабочееВремя,
	|КалендарьЦветФонаТекущееВремяНеРабочееВремя,
	|КалендарьЦветИндикатораТекущегоВремени,
	|КалендарьОтображатьПиктограммы,
	|КалендарьКоличествоДнейВНеделе,
	|СписокПредставлениеСобытияВКалендаре,
	|КалендарьМасштабШириныОбластиДень,
	|КалендарьЦветФонаРабочегоВремениТекущийДень,
	|КалендарьЦветФонаНеРабочегоВремениТекущийДень,
	|КалендарьЦветФонаСобытияНаВесьДеньТекущийДень,
	|КалендарьЦветФонаЗаголовкаДеньТекущийДень,
	|КалендарьЦветФонаЗаголовкаРесурсТекущийДень,
	|МесяцЦветФонаЗаголовкаДень,
	|МесяцЦветФонаЗаголовкаДеньТекущийДень,
	|МесяцЦветФонаДень,
	|МесяцЦветФонаДеньТекущийДень,
	|МесяцКоличествоОтображаемыхСобытийВДне,
	|МесяцШиринаДняВЯчейкахБазовая,
	|РасписаниеИнтервалШкалыВремени,
	|РасписаниеВысотаОбластиРесурса,
	|РасписаниеЦветИндикатора,
	|ИспользоватьСобытияНаВесьДень,
	|ЕстьОбеденныйПерерыв,
	|НачалоОбеденногоПерерываЧас,
	|КонецОбеденногоПерерываЧас,
	|СворачиватьОбластьСобытийНаВесьДень,
	|ОбластьСобытийНаВесьДеньСвернутаПоУмолчанию,
	|КалендарьШрифтЗаголовковДнейВМесяце,
	|КалендарьЦветШрифтаЗаголовковДнейВМесяце,
	|КалендарьШрифтЗаголовковДнейНеделиВМесяце,
	|КалендарьЦветШрифтаЗаголовковДнейНеделиВМесяце,
	|КалендарьЦветШрифтаЗаголовкаНерабочегоДня,
	|КалендарьЦветШрифтаЗаголовкаНерабочегоДняМесяц,
	|КалендарьШрифтТекстаСобытия,
	|КалендарьШрифтТекстаЗавершенногоСобытия,
	|КалендарьЦветТекстаСобытияВажностьВысокая,
	|КалендарьЦветТекстаСобытияВажностьНизкая,
	|КалендарьЦветТекстаНедействительныйПользователь");
	
	СтруктураНастройкиОтображения.НачалоДняКалендаряЧас	= 8;
	СтруктураНастройкиОтображения.КонецДняКалендаряЧас	= 19;
	
	СтруктураНастройкиОтображения.НачалоРабочегоДняЧас	= 0;
	СтруктураНастройкиОтображения.КонецРабочегоДняЧас	= 23;
	
	СтруктураНастройкиОтображения.ПоказыватьНедействительныхПользователей = Ложь;
	
	СтруктураНастройкиОтображения.ЕстьОбеденныйПерерыв	= Ложь;
	СтруктураНастройкиОтображения.НачалоОбеденногоПерерываЧас	= 0;
	СтруктураНастройкиОтображения.КонецОбеденногоПерерываЧас	= 0;
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаРабочегоВремени					= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветФонаНеРабочегоВремени				= Новый Цвет(238, 232, 170);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаРабочегоВремениТекущийДень		= Новый Цвет(255, 236, 139);
	СтруктураНастройкиОтображения.КалендарьЦветФонаНеРабочегоВремениТекущийДень		= Новый Цвет(240, 230, 140);
	
	СтруктураНастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени			= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени		= Новый Цвет(238, 232, 170);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗаголовкаДень					= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗаголовкаДеньТекущийДень			= Новый Цвет(255, 236, 139);
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗаголовкаРесурс					= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗаголовкаРесурсТекущийДень		= Новый Цвет(255, 236, 139);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень				= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень		= Новый Цвет(255, 255, 255);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя			= Новый Цвет(255, 160, 122);
	СтруктураНастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя		= Новый Цвет(255, 160, 122);
	
	СтруктураНастройкиОтображения.КалендарьЦветИндикатораТекущегоВремени			= Новый Цвет(255, 127, 80);
	
	СтруктураНастройкиОтображения.МесяцЦветФонаЗаголовкаДень						= Новый Цвет(238, 232, 170);
	СтруктураНастройкиОтображения.МесяцЦветФонаЗаголовкаДеньТекущийДень				= Новый Цвет(255, 204, 0);
	СтруктураНастройкиОтображения.МесяцЦветФонаДень									= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.МесяцЦветФонаДеньТекущийДень						= Новый Цвет(255, 255, 153);
	
	СтруктураНастройкиОтображения.РасписаниеЦветИндикатора							= Новый Цвет(100, 149, 237);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаСобытияПоУмолчанию					= Новый Цвет(255, 255, 200);
	СтруктураНастройкиОтображения.КалендарьЦветФонаКонтрольнойТочкиПроектаПоУмолчанию	= Новый Цвет(242, 234, 193);
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗадачиПоУмолчанию					= Новый Цвет(250, 242, 163);
	
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовковДнейВМесяце				= Новый Цвет(134, 96, 0);
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовковДнейНеделиВМесяце		= Новый Цвет(179, 128, 0);
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовкаДень						= Новый Цвет(179, 128, 0);
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовкаРесурс					= Новый Цвет(179, 128, 0);
	
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовкаНерабочегоДня				= Новый Цвет(250, 101, 55);
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовкаНерабочегоДняМесяц		= Новый Цвет(235, 63, 35);
	
	СтруктураНастройкиОтображения.КалендарьЦветТекстаСобытияВажностьВысокая				= Новый Цвет(255, 0, 0);
	СтруктураНастройкиОтображения.КалендарьЦветТекстаСобытияВажностьНизкая				= Новый Цвет(128, 128, 128);
	
	СтруктураНастройкиОтображения.КалендарьЦветТекстаНедействительныйПользователь		= Новый Цвет(128, 128, 128);
	
	СтруктураНастройкиОтображения.КалендарьШрифтЗаголовкаДень		= Новый Шрифт("Arial", 9, Истина);
	СтруктураНастройкиОтображения.КалендарьШрифтЗаголовкаРесурс		= Новый Шрифт("Arial", 9, Ложь);
	
	СтруктураНастройкиОтображения.КалендарьШрифтЗаголовковДнейВМесяце		= Новый Шрифт("Arial", 12, Истина);
	СтруктураНастройкиОтображения.КалендарьШрифтЗаголовковДнейНеделиВМесяце	= Новый Шрифт("Arial", 10, Истина);
	
	СтруктураНастройкиОтображения.КалендарьШрифтТекстаСобытия				= Новый Шрифт("Arial", 8, Ложь);
	СтруктураНастройкиОтображения.КалендарьШрифтТекстаЗавершенногоСобытия	= Новый Шрифт("Arial", 8, Ложь, Ложь, Ложь, Истина);
	
	СтруктураНастройкиОтображения.КалендарьОтображатьПиктограммы = Истина;
	
	СтруктураНастройкиОтображения.КалендарьКоличествоДнейВНеделе = 7;
	
	СписокПредставлениеСобытияВКалендаре = Новый СписокЗначений();
	СписокПредставлениеСобытияВКалендаре.Добавить("Тема", НСтр("ru = 'Тема'"), Истина);
	СписокПредставлениеСобытияВКалендаре.Добавить("Время", НСтр("ru = 'Время'"), Истина);
	СписокПредставлениеСобытияВКалендаре.Добавить("Клиент", НСтр("ru = 'Клиент'"), Ложь);
	СписокПредставлениеСобытияВКалендаре.Добавить("Пользователь", НСтр("ru = 'Пользователь'"), Ложь);
	
	СтруктураНастройкиОтображения.СписокПредставлениеСобытияВКалендаре = СписокПредставлениеСобытияВКалендаре;
	
	СтруктураНастройкиОтображения.КалендарьМасштабШириныОбластиДень = 100;
	
	СтруктураНастройкиОтображения.МесяцКоличествоОтображаемыхСобытийВДне = 5;
	СтруктураНастройкиОтображения.МесяцШиринаДняВЯчейкахБазовая = 7;
	
	СтруктураНастройкиОтображения.РасписаниеИнтервалШкалыВремени = 15;
	
	СтруктураНастройкиОтображения.РасписаниеВысотаОбластиРесурса = 2;
	
	СтруктураНастройкиОтображения.ИспользоватьСобытияНаВесьДень = Истина;
	
	СтруктураНастройкиОтображения.СворачиватьОбластьСобытийНаВесьДень = Истина;
	СтруктураНастройкиОтображения.ОбластьСобытийНаВесьДеньСвернутаПоУмолчанию = Ложь;
	
	СтруктураНастройки.Вставить("НастройкиОтображения", СтруктураНастройкиОтображения);
	
	// Общие настройки
	СтруктураОбщиеНастройки = Новый Структура(
	"КалендарьТипСобытияПоУмолчанию,
	|ОтображатьСписокЗадач,
	|КалендарьИспользоватьКалендарныеГрафики,
	|ОтображатьПолеСодержаниеСпискаЗадач,
	|ОтображатьПолеСодержанияКалендаря,
	|ПоложениеСпискаЗадач,
	|КалендарьОбновлятьПриЛюбыхСобытиях,	
	|Автообновление,
	|ПериодАвтообновления");
	
	// Полное имя объекта по-умолчанию.
	СтруктураОбщиеНастройки.КалендарьТипСобытияПоУмолчанию = "Документ.УдалитьCRM_Событие";
	СтруктураОбщиеНастройки.ОтображатьСписокЗадач = Истина;
	
	СтруктураОбщиеНастройки.ОтображатьПолеСодержаниеСпискаЗадач = Истина;
	СтруктураОбщиеНастройки.ОтображатьПолеСодержанияКалендаря = Истина;
	
	СтруктураОбщиеНастройки.ПоложениеСпискаЗадач = "Право";
	
	СтруктураОбщиеНастройки.КалендарьИспользоватьКалендарныеГрафики = Истина;
	СтруктураОбщиеНастройки.КалендарьОбновлятьПриЛюбыхСобытиях 		= Ложь;	
	
	СтруктураОбщиеНастройки.Автообновление = Ложь;
	СтруктураОбщиеНастройки.ПериодАвтообновления = 1;
	
	СтруктураНастройки.Вставить("ОбщиеНастройки", СтруктураОбщиеНастройки);
	
	Возврат СтруктураНастройки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(ПроверяемыйРежимОтображения)
	Возврат (ПроверяемыйРежимОтображения = "ПоРесурсам" Или ПроверяемыйРежимОтображения = "Расписание");
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаписанноеСобытиеНеВходитВТекущийОтбор(ПроверяемаяТаблицаДанных, ПроверяемоеСобытие)
	// TODO: неоднозначный механизм - отключен.
	Возврат Ложь;
	//
	
	бПометкаУдаления = Ложь;
	Попытка		бПометкаУдаления = ПроверяемоеСобытие.ПометкаУдаления;
	Исключение	бПометкаУдаления = Ложь;
	КонецПопытки;
	Если бПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НайденныеСтроки = ПроверяемаяТаблицаДанных.НайтиСтроки(Новый Структура("Событие", ПроверяемоеСобытие));
	Возврат (НайденныеСтроки.Количество() = 0);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьСпискиЗначений(Список1, Список2)
	Если ТипЗнч(Список1) <> ТипЗнч(Список2) Или ТипЗнч(Список1) <> Тип("СписокЗначений") Или ТипЗнч(Список2) <> Тип("СписокЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Список1.Количество() <> Список2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для нИндекс = 0 По Список1.Количество() - 1 Цикл
		Если Список1[нИндекс].Значение <> Список2[нИндекс].Значение Или Список1[нИндекс].Представление <> Список2[нИндекс].Представление Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокГруппировокСпискаКалендаря()
	Список = Новый СписокЗначений();
	
	Список.Добавить("БезГруппировок", НСтр("ru = 'Без группировки'"));
	
	ПредставленияОтборов = ПолучитьПредставленияОтборов();
	МассивДоступныхОтборов = ПолучитьМассивДоступныхОтборов();
	
	Для Каждого ДоступныйОтбор Из МассивДоступныхОтборов Цикл
		//Если ДоступныйОтбор = "Партнер" Тогда
		//	// Партнер - исключение, он берется через точку от Проекта и из т.ч. СторонниеЛица, группировку по нему не сделать
		//	Продолжить;
		//КонецЕсли;
		
		Список.Добавить(ДоступныйОтбор, ПредставленияОтборов[ДоступныйОтбор]);
	КонецЦикла;
	
	Возврат Список;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СортироватьМассивПоВозрастанию(Массив)
	Для н = 0 По Массив.ВГраница() - 1 Цикл
		Для м = 0 По Массив.ВГраница() - 1 Цикл
			Если Массив[м] > Массив[м + 1] Тогда
				СтароеЗначение = Массив[м];
				Массив[м] = Массив[м + 1];
				Массив[м + 1] = СтароеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////
// Работа со списком задач

&НаСервере
Функция СоздатьЗадачуНаОснованииСобытия(ОбъектОснование, бОбновлятьСписокЗадач = Ложь)
	
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Предмет					= ОбъектОснование;
	ОбъектЗадача.ПредметСтрокой				= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(ОбъектОснование);
	ОбъектЗадача.Автор						= Пользователи.ТекущийПользователь();
	ОбъектЗадача.Исполнитель				= ОбъектЗадача.Автор;
	ОбъектЗадача.ПринятаКИсполнению			= Истина;
	ОбъектЗадача.Наименование				= ОбъектОснование.Тема;
	ОбъектЗадача.Дата						= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	ОбъектЗадача.ДатаНачала					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	ОбъектЗадача.СостояниеБизнесПроцесса	= Перечисления.СостоянияБизнесПроцессов.Активен;
	ОбъектЗадача.Описание					= ОбъектОснование.Описание;
	ОбъектЗадача.CRM_Личная					= Истина;
	ВажностьЗадачи = ПолучитьВажностьЗадачиПоВажностиСобытия(ОбъектОснование.Важность);
	ОбъектЗадача.Важность = ВажностьЗадачи;
	ОбъектЗадача.Записать();
	
	Если бОбновлятьСписокЗадач Тогда
		ОбновитьСписокЗадачНаСервере();
	КонецЕсли;
	
	Возврат ОбъектЗадача.Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗадачи(Задача)
	
	Возврат Новый Структура("CRM_Личная,Предмет",Задача.CRM_Личная,Задача.Предмет);
	
КонецФункции

&НаКлиенте
Функция ОткрытьСобытиеПоЗадаче(МассивЗадач)
	
	СтруктураДанных = ПолучитьДанныеЗадачи(МассивЗадач);
	Если СтруктураДанных.CRM_Личная
		И ЗначениеЗаполнено(СтруктураДанных.Предмет)
		И ТипЗнч(СтруктураДанных.Предмет) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
		
		ПараметрыФормы = Новый Структура("Ключ",СтруктураДанных.Предмет);
		ОткрытьФорму("Документ.УдалитьCRM_Событие.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
		Возврат Истина;
	ИначеЕсли СтруктураДанных.CRM_Личная
		И ЗначениеЗаполнено(СтруктураДанных.Предмет)
		И ТипЗнч(СтруктураДанных.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		ПараметрыФормы = Новый Структура("Ключ",СтруктураДанных.Предмет);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",ПараметрыФормы,ЭтотОбъект);
		Возврат Истина;
	ИначеЕсли СтруктураДанных.CRM_Личная
		И ЗначениеЗаполнено(СтруктураДанных.Предмет)
		И ТипЗнч(СтруктураДанных.Предмет) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
		
		ПараметрыФормы = Новый Структура("Ключ",СтруктураДанных.Предмет);
		ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОпределиньПараметрыЗаполненияПоОтборуПоДатеИСрокуЗадачи(ЭлементыОтбора, СтруктураДанных,
	ДатаМин = Неопределено, ДатаМакс = Неопределено, СрокИсполненияМин = Неопределено, СрокИсполненияМакс = Неопределено)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			СтрЛевоеЗначение = Строка(ЭлементОтбора.ЛевоеЗначение);
			
			Если (СтрЛевоеЗначение = "ДатаНачала" Или СтрЛевоеЗначение = "СрокИсполнения") И
				(	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				ИЛИ	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше
				ИЛИ	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
				ИЛИ	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше
				ИЛИ	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
				//
				ДатаЗначение = Неопределено;
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Дата") Тогда
					ДатаЗначение = ЭлементОтбора.ПравоеЗначение;
				ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
					ДатаЗначение = ЭлементОтбора.ПравоеЗначение.Дата;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ДатаЗначение) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Если СтрЛевоеЗначение = "ДатаНачала" Тогда
						ДатаМин = ДатаЗначение;
						ДатаМакс = ДатаЗначение;
					Иначе
						СрокИсполненияМин = ДатаЗначение;
						СрокИсполненияМакс = ДатаЗначение;
					КонецЕсли;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
					Если СтрЛевоеЗначение = "ДатаНачала" Тогда
						ДатаМин = ДатаЗначение + 1;
					Иначе
						СрокИсполненияМин = ДатаЗначение + 1;
					КонецЕсли;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
					Если СтрЛевоеЗначение = "ДатаНачала" Тогда
						ДатаМин = ДатаЗначение;
					Иначе
						СрокИсполненияМин = ДатаЗначение;
					КонецЕсли;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
					Если СтрЛевоеЗначение = "ДатаНачала" Тогда
						ДатаМакс = ДатаЗначение - 1;
					Иначе
						СрокИсполненияМакс = ДатаЗначение - 1;
					КонецЕсли;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					Если СтрЛевоеЗначение = "ДатаНачала" Тогда
						ДатаМакс = ДатаЗначение;
					Иначе
						СрокИсполненияМакс = ДатаЗначение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбора.Использование И ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
			ОпределиньПараметрыЗаполненияПоОтборуПоДатеИСрокуЗадачи(ЭлементОтбора.Элементы, СтруктураДанных,
				ДатаМин, ДатаМакс, СрокИсполненияМин, СрокИсполненияМакс);
			//
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ВычислитьДатуПоОтбору(ДатаМин, ДатаМакс, ТекДата)
	ДатаЗначение = Неопределено;
	
	Если ЗначениеЗаполнено(ДатаМин) И ЗначениеЗаполнено(ДатаМакс) И ДатаМин = ДатаМакс Тогда
		ДатаЗначение = ДатаМин;
	ИначеЕсли ЗначениеЗаполнено(ДатаМин) И ЗначениеЗаполнено(ДатаМакс) И ДатаМакс > ДатаМин Тогда
		Если ТекДата >= ДатаМин И ТекДата <= ДатаМакс Тогда
			ДатаЗначение = ТекДата;
		Иначе
			ДатаЗначение = ДатаМакс - 1;
			Если ДатаЗначение < ДатаМин Тогда
				ДатаЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДатаМин) И Не ЗначениеЗаполнено(ДатаМакс) Тогда
		Если ТекДата > ДатаМин Тогда
			ДатаЗначение = ТекДата;
		Иначе
			ДатаЗначение = ДатаМин + 1;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДатаМакс) И Не ЗначениеЗаполнено(ДатаМин) Тогда
		Если ТекДата < ДатаМакс Тогда
			ДатаЗначение = ТекДата;
		Иначе
			ДатаЗначение = ДатаМакс - 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаЗначение;
КонецФункции

&НаКлиенте
Процедура СоздатьЛичнуюЗадачу(Знач ТемаЗадачи = Неопределено, ОткрыватьФорму = Истина)
	ТекДата = ТекущаяДата();
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Дата",		ТекДата);
	Для Каждого ЭлементОтбора Из СписокЗадач.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			СтрЛевоеЗначение = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтрЛевоеЗначение = "Партнер" Тогда
				СтрЛевоеЗначение = "CRM_Партнер";
			ИначеЕсли СтрЛевоеЗначение = "Проект" Тогда
				СтрЛевоеЗначение = "CRM_Проект";
			ИначеЕсли СтрЛевоеЗначение = "Дата" Или СтрЛевоеЗначение = "СрокИсполнения" Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка СтруктураДанных.Вставить(СтрЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтборЗначениеПроект) Тогда
		СтруктураДанных.Вставить("CRM_Проект", ОтборЗначениеПроект);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборЗначениеПартнер) Тогда
		СтруктураДанных.Вставить("CRM_Партнер", ОтборЗначениеПартнер);
	КонецЕсли;
	
	ДатаМин = Неопределено;
	ДатаМакс = Неопределено;
	СрокИсполненияМин = Неопределено;
	СрокИсполненияМакс = Неопределено;
	ОпределиньПараметрыЗаполненияПоОтборуПоДатеИСрокуЗадачи(СписокЗадач.Отбор.Элементы, СтруктураДанных,
		ДатаМин, ДатаМакс, СрокИсполненияМин, СрокИсполненияМакс);
	//
	ДатаНачалаЗначение = ВычислитьДатуПоОтбору(ДатаМин, ДатаМакс, ТекДата);
	СрокИсполненияЗначение = ВычислитьДатуПоОтбору(СрокИсполненияМин, СрокИсполненияМакс, ТекДата);
	Если ЗначениеЗаполнено(ДатаНачалаЗначение) Тогда
		СтруктураДанных.Вставить("ДатаНачала",	ДатаНачалаЗначение);
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокИсполненияЗначение) Тогда
		СтруктураДанных.Вставить("СрокИсполнения",	КонецДня(СрокИсполненияЗначение));
	КонецЕсли;
	
	Если Не СтруктураДанных.Свойство("ДатаНачала") Тогда
		СтруктураДанных.Вставить("ДатаНачала",	ТекДата);
	КонецЕсли;
	
	Если	СтруктураДанных.Свойство("ДатаНачала")
		И	ЗначениеЗаполнено(СтруктураДанных.ДатаНачала)
		И	СтруктураДанных.Свойство("СрокИсполнения")
		И	ЗначениеЗаполнено(СтруктураДанных.СрокИсполнения)
		И	СтруктураДанных.СрокИсполнения <= СтруктураДанных.ДатаНачала Тогда
		//
		СтруктураДанных.ДатаНачала = СтруктураДанных.СрокИсполнения - 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТемаЗадачи) Тогда
		СтруктураДанных.Вставить("Наименование", ТемаЗадачи);
	КонецЕсли;
	
	РодительЗадачи = Неопределено;
	ТекГруппировкаИмя = Неопределено;
	ТекГруппировкаЗначение = Неопределено;
	ТекСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		ТекДанные = ДеревоСписокЗадач.НайтиПоИдентификатору(ТекСтрока);
		Если ТекДанные <> Неопределено Тогда
			ТекРодитель = ТекДанные.ПолучитьРодителя();
			
			Если Не ТекДанные.ЭтоГруппа И ТекДанные.Личная Тогда
				Если (ТекРодитель <> Неопределено И Не ТекРодитель.ЭтоГруппа) Или ТекДанные.ПолучитьЭлементы().Количество() > 0 Тогда
					РодительЗадачи = ТекДанные.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекДанные.ЭтоГруппа Тогда
				ТекГруппировкаИмя		= ТекДанные.ИмяГруппировки;
				ТекГруппировкаЗначение	= ТекДанные.ЗначениеГруппировки;
			Иначе
				Пока Истина Цикл
					Если ТекРодитель = Неопределено Тогда
						Прервать;
					КонецЕсли;
					Если ТекРодитель.ЭтоГруппа Тогда
						ТекГруппировкаИмя		= ТекРодитель.ИмяГруппировки;
						ТекГруппировкаЗначение	= ТекРодитель.ЗначениеГруппировки;
						Прервать;
					КонецЕсли;
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(РодительЗадачи) Тогда
		СтруктураДанных.Вставить("CRM_Родитель", РодительЗадачи);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекГруппировкаИмя) И ЗначениеЗаполнено(ТекГруппировкаЗначение) Тогда
		Если ТекГруппировкаИмя = "Партнер" Тогда
			ИмяЗначенияЗаполненияПоГруппировке = "CRM_Партнер";
		ИначеЕсли ТекГруппировкаИмя = "Проект" Тогда
			ИмяЗначенияЗаполненияПоГруппировке = "CRM_Проект";
		Иначе
			ИмяЗначенияЗаполненияПоГруппировке = ТекГруппировкаИмя;
		КонецЕсли;
		Попытка СтруктураДанных.Вставить(ИмяЗначенияЗаполненияПоГруппировке, ТекГруппировкаЗначение);
		Исключение КонецПопытки;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", СтруктураДанных);
	
	Если ОткрыватьФорму Тогда
		CRM_БизнесПроцессыИЗадачиКлиент.СоздатьЛичнуюЗадачу(ЭтотОбъект, ПараметрыФормы);
	Иначе
		ФормаЗадачи = ПолучитьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи", ПараметрыФормы);
		ФормаЗадачи.Записать();
		Попытка		ЗадачаСсылка = ФормаЗадачи.Объект.Ссылка;
		Исключение	ЗадачаСсылка = Неопределено;
		КонецПопытки;
		Попытка ФормаЗадачи.Закрыть();
		Исключение КонецПопытки;
		ФормаЗадачи = Неопределено;
		
		ОбновитьСписокЗадачНаКлиенте();
		
		Если ЗначениеЗаполнено(ЗадачаСсылка) Тогда
			УстановитьТекущуюСтрокуВСпискеЗадач(ЗадачаСсылка);
			Попытка ТекущийЭлемент = Элементы.СписокЗадач;
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//
//////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьОписаниеТиповРегистрируемыхОбъектов()
	Если ОписаниеТиповРегистрируемыхОбъектов.Типы().Количество() = 0 Тогда
		ОписаниеТиповРегистрируемыхОбъектов = Метаданные.РегистрыСведений.CRM_СобытияКалендаря.Измерения.Объект.Тип;
	КонецЕсли;
	
	Возврат ОписаниеТиповРегистрируемыхОбъектов;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеТиповПоляОтображенияСодержанияКалендаря()
	Возврат Новый ОписаниеТипов(ПолучитьОписаниеТиповРегистрируемыхОбъектовКлиент(), "ЗадачаСсылка.ЗадачаИсполнителя");
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеТиповРегистрируемыхОбъектовКлиент()
	Возврат ОписаниеТиповРегистрируемыхОбъектов;
КонецФункции

&НаСервере
Функция ПолучитьРегистрируемыеОбъекты()
	ОписаниеТиповОбъекта = ПолучитьОписаниеТиповРегистрируемыхОбъектов();
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Объект");
	Таблица.Колонки.Добавить("УчаствуетВПолнотекстовомПоиске", ОписаниеТиповБулево);
	
	бДобавлятьТаблицуРегистрируемыеОбъекты = (ТаблицаРегистрируемыхОбъектов.Количество() = 0);
	
	Для Каждого Тип Из ОписаниеТиповОбъекта.Типы() Цикл
		Попытка		МдОбъекта = Метаданные.НайтиПоТипу(Тип);
		Исключение	МдОбъекта = Неопределено;
		КонецПопытки;
		Если МдОбъекта = Неопределено Тогда Продолжить; КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Объект = МдОбъекта;
		НоваяСтрока.УчаствуетВПолнотекстовомПоиске = Истина;
		
		Если бДобавлятьТаблицуРегистрируемыеОбъекты Тогда
			НоваяСтрока = ТаблицаРегистрируемыхОбъектов.Добавить();
			НоваяСтрока.ПолноеИмя = МдОбъекта.ПолноеИмя();
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип);
			НоваяСтрока.Тип = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеРегистрируемогоОбъектаКлиент(ЗначениеОбъекта)
	Тип = ТипЗнч(ЗначениеОбъекта);
	
	Для Каждого СтрокаТаблицы Из ТаблицаРегистрируемыхОбъектов Цикл
		Если СтрокаТаблицы.Тип.СодержитТип(Тип) Тогда
			Возврат СтрокаТаблицы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСписокПользователейДиспетчеризацияСервер()
	СтруктураСвойства =  CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(
				ЭтотОбъект,
				"СписокПользователейДиспетчеризация",
				"Календарь.СписокПользователейДиспетчеризация",
				Неопределено,
				Неопределено,
				Неопределено,
				"СписокПользователейПодменюВид",
				"ПользовательскиеНастройкиСпискаТекущаяНастройкаСписокПользователейДиспетчеризация",
				"Подключаемый_КомандаВидСписокПользователейДиспетчеризация");
	//
	Возврат СтруктураСвойства;
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваДинамическогоСпискаСписокПользователейДиспетчеризацияКлиент()
	Если ТипЗнч(КэшСвойстваДинамическогоСпискаСписокПользователейДиспетчеризация) <> Тип("Структура") Тогда
		КэшСвойстваДинамическогоСпискаСписокПользователейДиспетчеризация = ПолучитьСвойстваДинамическогоСпискаСписокПользователейДиспетчеризацияСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСпискаСписокПользователейДиспетчеризация;
КонецФункции

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСписокЗадачСервер()
	СтруктураСвойства =  CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(
				ЭтотОбъект,
				"СписокЗадач",
				"Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю",
				Неопределено,
				Неопределено,
				Неопределено,
				"ПодменюВидСписокЗадач",
				"ПользовательскиеНастройкиСпискаТекущаяНастройкаСписокЗадач",
				"Подключаемый_КомандаВидСписокЗадач");
	//
	СтруктураСвойства.Вставить("СкрытьУсловноеОформлениеВНастройках");
	Возврат СтруктураСвойства;
КонецФункции

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСписокСобытийДиспетчеризацииСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(
				ЭтотОбъект,
				"ДиспетчеризацияСписокСобытий",
				"Календарь.Диспетчеризация.Документ.CRM_Cобытие",
				Неопределено,
				Неопределено,
				Неопределено,
				"ДиспетчеризацияСписокСобытийПодменюВидСписка",
				"ПользовательскиеНастройкиСпискаТекущаяНастройкаСписокСобытийДиспетчерезации",
				"Подключаемый_КомандаВидСписокСобытийДиспетчеризации");
	//
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиКалендаря()
	СтруктураНастройкиОтображения = ПолучитьНастройкиОтображенияПоУмолчанию();
	
	СохраненныеНастройки = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "СтруктураНастроек");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Если СохраненныеНастройки.Свойство("НастройкиОтображения") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения.НастройкиОтображения, СохраненныеНастройки.НастройкиОтображения);
		КонецЕсли;
		
		Если СохраненныеНастройки.Свойство("ОбщиеНастройки") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения.ОбщиеНастройки, СохраненныеНастройки.ОбщиеНастройки);
		КонецЕсли;
	КонецЕсли;
	
	// Настройки пользователя
	НастройкиРабочееВремяПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьСтруктуруРабочихВременПользователя(ТекущийПользовательСеанса);
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоРабочегоДняЧас = Час(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоРабочегоДняЧас = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецРабочегоДняЧас = Час(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецРабочегоДняЧас = 23;
	КонецЕсли;
	
	СтруктураНастройкиОтображения.НастройкиОтображения.ПоказыватьНедействительныхПользователей = (CRM_ХранилищеНастроек.Загрузить("ПоказыватьНедействительныхПользователей") = Истина);
	ПоказыватьНедействительныхПользователей = СтруктураНастройкиОтображения.НастройкиОтображения.ПоказыватьНедействительныхПользователей;
	
	Если СтруктураНастройкиОтображения.НастройкиОтображения.ПоказыватьНедействительныхПользователей Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокПользователейДиспетчеризация.Отбор, "Недействителен");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПользователейДиспетчеризация.Отбор, "Недействителен", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва) И ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина;
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас = Час(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас = Час(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв = Ложь;
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас = 0;
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас = 23;
	КонецЕсли;
	
	Если Не ИспользоватьБизнесПроцессыИЗадачи Тогда
		СтруктураНастройкиОтображения.ОбщиеНастройки.ОтображатьСписокЗадач = Ложь;
	КонецЕсли;
	
	//Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка = СтруктураНастройкиОтображения.ОбщиеНастройки.ОтображатьСписокЗадач;
	
	Объект.КэшНастроекОтображения = СтруктураНастройкиОтображения;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиЗначенийОтборов();
	СтруктураДляСохранения = Новый Структура();
	
	СтруктураДляСохранения.Вставить("ОтборСкрытьВыполненные",				ОтборСкрытьВыполненные);
	СтруктураДляСохранения.Вставить("ВыбиратьПользователейИерархически",	ВыбиратьПользователейИерархически);
	
	СтруктураДляСохранения.Вставить("ОтборТипыОбъектов", Новый Соответствие());
	Для Каждого СтрокаТаблицы Из ОтборТипыОбъектов Цикл
		СтруктураДляСохранения.ОтборТипыОбъектов.Вставить(СтрокаТаблицы.ПолноеИмя, СтрокаТаблицы.Пометка);
	КонецЦикла;
	
	СтруктураДляСохранения.Вставить("Отборы", Новый Соответствие());
	МассивДоступныхОтборов = ПолучитьМассивДоступныхОтборов();
	Для Каждого ИмяОтбора Из МассивДоступныхОтборов Цикл
		Попытка
			Если ТипЗнч(ЭтотОбъект["ОтборВидСравнения" + ИмяОтбора]) <> Тип("ВидСравненияКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		Попытка СтруктураДляСохранения.Отборы.Вставить("ОтборИспользование" + ИмяОтбора, ЭтотОбъект["ОтборИспользование" + ИмяОтбора]);
		Исключение КонецПопытки;
		Попытка СтруктураДляСохранения.Отборы.Вставить("ОтборВидСравнения" + ИмяОтбора, ЭтотОбъект["ОтборВидСравнения" + ИмяОтбора]);
		Исключение КонецПопытки;
		Попытка СтруктураДляСохранения.Отборы.Вставить("ОтборЗначение" + ИмяОтбора, ЭтотОбъект["ОтборЗначение" + ИмяОтбора]);
		Исключение КонецПопытки;
	КонецЦикла;
	
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "НастройкиЗначенийОтборов", СтруктураДляСохранения);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиЗначенийОтборов()
	СохраненныеОтборы = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "НастройкиЗначенийОтборов");
	
	Если ТипЗнч(СохраненныеОтборы) = Тип("Структура") Тогда
		Если СохраненныеОтборы.Свойство("ОтборСкрытьВыполненные") И ТипЗнч(СохраненныеОтборы.ОтборСкрытьВыполненные) = Тип("Булево") Тогда
			ОтборСкрытьВыполненные = СохраненныеОтборы.ОтборСкрытьВыполненные;
		Иначе
			ОтборСкрытьВыполненные = Истина;
		КонецЕсли;
		Если СохраненныеОтборы.Свойство("ВыбиратьПользователейИерархически") И ТипЗнч(СохраненныеОтборы.ВыбиратьПользователейИерархически) = Тип("Булево") Тогда
			ВыбиратьПользователейИерархически = СохраненныеОтборы.ВыбиратьПользователейИерархически;
		КонецЕсли;
		
		Если СохраненныеОтборы.Свойство("ОтборТипыОбъектов") И ТипЗнч(СохраненныеОтборы.ОтборТипыОбъектов) = Тип("Соответствие") Тогда
			Для Каждого КлючЗначение Из СохраненныеОтборы.ОтборТипыОбъектов Цикл
				Если ТипЗнч(КлючЗначение.Значение) = Тип("Булево") Тогда
					НайденныеСтроки = ОтборТипыОбъектов.НайтиСтроки(Новый Структура("ПолноеИмя", КлючЗначение.Ключ));
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].Пометка = КлючЗначение.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СохраненныеОтборы.Свойство("Отборы") И ТипЗнч(СохраненныеОтборы.Отборы) = Тип("Соответствие") Тогда
			Для Каждого КлючЗначение Из СохраненныеОтборы.Отборы Цикл
				Попытка ЭтотОбъект[КлючЗначение.Ключ] = КлючЗначение.Значение;
				Исключение КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ОтборСкрытьВыполненные = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	//// Кнопка показать / скрыть выды сравнения отборов
	//ПризнакПоказыватьРасширенныеНастройкиОтборов = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ПоказыватьВидыСравненияОтборов");
	//Если ПризнакПоказыватьРасширенныеНастройкиОтборов = Неопределено Тогда
	//	// Виды сравнения отборов по умолчанию скрыты
	//	ПризнакПоказыватьРасширенныеНастройкиОтборов = Ложь;
	//КонецЕсли;
	
	ПризнакПоказыватьРасширенныеНастройкиОтборов = Ложь;
	
	// Отборы
	ВыбранныеОтборы = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ВыбранныеОтборы");
	Если ТипЗнч(ВыбранныеОтборы) <> Тип("Массив") Тогда
		НастройкаОтборовПоУмолчанию = ПолучитьНастройкиОтборовПоУмолчанию();
		ВыбранныеОтборы = НастройкаОтборовПоУмолчанию.ОтборыПоУмолчанию;
	КонецЕсли;
	КэшНастроекВыбранныеОтборы.ЗагрузитьЗначения(ВыбранныеОтборы);
	
	// Дерево ресурсов
	ЗагрузитьНастройкиДеревоРесурсов();
	
	// Дерево пользователей диспетчеризации.
	ЗагрузитьНастройкиДеревоПользователейДиспетчеризации();
	
	// Режим отображения календаря.
	СохраненныйРежимОтображения = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "РежимОтображения");
	Если СохраненныйРежимОтображения = Неопределено Тогда
		СохраненныйРежимОтображения = "Неделя";
	КонецЕсли;
	Если СохраненныйРежимОтображения = "Диспетчеризация" И НЕ CRM_ЛицензированиеСервер.ВариантПоставкиКОРП() Тогда
		СохраненныйРежимОтображения = "День";
	КонецЕсли;
	Объект.ТекущееОтображение = СохраненныйРежимОтображения;
	
	// Флаг КалендарьСписокФлагПоискПоПодстроке
	СохраненноеЗначение = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "КалендарьСписокФлагПоискПоПодстроке");
	Если ТипЗнч(СохраненноеЗначение) = Тип("Булево") Тогда
		КалендарьСписокФлагПоискПоПодстроке = СохраненноеЗначение;
	КонецЕсли;
	
	ИсторияПоиска = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ИсторияПоиска");
	Если ИсторияПоиска <> Неопределено Тогда
		Попытка КалендарьСписокТекстПоискаСписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
		Исключение КонецПопытки;
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск") И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		Если КалендарьСписокФлагПоискПоПодстроке Тогда
			Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода = НСтр("ru = '[Поиск по подстроке]'");
		Иначе
			Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода = НСтр("ru = '[Поиск по полному названию]'");
		КонецЕсли;
		Элементы.КалендарьСписокТекстПоиска.Подсказка = Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода;
	Иначе
		Элементы.ГруппаКалендарьСписокПоиск.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТекущееОтображение = "Расписание" Тогда
		ПоРесурсамШкалаВремениПоГоризонтали = 1;
	Иначе
		ПоРесурсамШкалаВремениПоГоризонтали = 0;
	КонецЕсли;
	
	ВариантСпискаПользователейДиспетчеризации = 0;
	
	ПоказатьСкрытьОтборы = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ПоказатьСкрытьОтборы");
	Если НЕ ЗначениеЗаполнено(ПоказатьСкрытьОтборы) Тогда
		ПоказатьСкрытьОтборы = Истина;
	КонецЕсли;
	Элементы.КнопкаПоказатьСкрытьОтборы.Пометка			= ПоказатьСкрытьОтборы;
	Элементы.ГруппаКалендарьОбластьФильтров.Видимость	= ПоказатьСкрытьОтборы;
	
	ПоказатьСкрытьЗадачи = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ПоказатьСкрытьЗадачи");
	Если НЕ ЗначениеЗаполнено(ПоказатьСкрытьЗадачи) Тогда
		ПоказатьСкрытьЗадачи = Истина;
	КонецЕсли;
	Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка	= ПоказатьСкрытьЗадачи;
	Элементы.ГруппаСписокЗадач.Видимость		= ПоказатьСкрытьЗадачи;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиДеревоРесурсов()
	Дерево = РеквизитФормыВЗначение("ДеревоРесурсов");
	
	ЭлементыДереваВерхнийУровень = Дерево.Строки;
	ЭлементыДереваВерхнийУровень.Очистить();
	
	// TODO: поменять картинки на правильные.
	
	// системные группы
	СтрокаСистемная = ЭлементыДереваВерхнийУровень.Добавить();
	СтрокаСистемная.Имя = "ОбщиеПомещения";
	СтрокаСистемная.Описание			= НСтр("ru = 'Общие помещения'");
	СтрокаСистемная.ЭтоСистемнаяГруппа	= Истина;
	СтрокаСистемная.ЭтоЗаголовок		= Истина;
	СтрокаСистемная.ЭтоГруппа			= Ложь;
	СтрокаСистемная.Картинка			= БиблиотекаКартинок.CRM_КалендарьПоРесурсам;
	
	СтрокаСистемная = ЭлементыДереваВерхнийУровень.Добавить();
	СтрокаСистемная.Имя = "МоеПодразделение";
	СтрокаСистемная.Описание			= НСтр("ru = 'Мое подразделение'");
	СтрокаСистемная.ЭтоСистемнаяГруппа	= Истина;
	СтрокаСистемная.ЭтоЗаголовок		= Истина;
	СтрокаСистемная.ЭтоГруппа			= Ложь;
	СтрокаСистемная.Картинка			= БиблиотекаКартинок.CRM_КалендарьПоРесурсам;
	
	СтрокаПользователи = ЭлементыДереваВерхнийУровень.Добавить();
	СтрокаПользователи.Имя			= "Пользователь";
	СтрокаПользователи.Описание		= НСтр("ru = 'Пользователи'");
	СтрокаПользователи.ЭтоЗаголовок	= Истина;
	СтрокаПользователи.ЭтоГруппа	= Ложь;
	
	СтрокаПомещения = ЭлементыДереваВерхнийУровень.Добавить();
	СтрокаПомещения.Имя				= "Помещение";
	СтрокаПомещения.Описание		= НСтр("ru = 'Помещения'");
	СтрокаПомещения.ЭтоЗаголовок	= Истина;
	СтрокаПомещения.ЭтоГруппа		= Ложь;
	
	бДобавитьПользователя = Истина;
	СтруктураДеревоРесурсов = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ДеревоРесурсов");
	Если ТипЗнч(СтруктураДеревоРесурсов) = Тип("Структура") Тогда
		Для Каждого СтрокаТипРесурса Из Дерево.Строки Цикл
			Если СтрокаТипРесурса.ЭтоСистемнаяГруппа Тогда Продолжить; КонецЕсли;
			
			ИмяРесурса = СтрокаТипРесурса.Имя;
			Если СтруктураДеревоРесурсов.Свойство(ИмяРесурса) И ТипЗнч(СтруктураДеревоРесурсов[ИмяРесурса]) = Тип("ДеревоЗначений") Тогда
				ДобавитьДеревоРесурсовВВетку(СтрокаТипРесурса, СтруктураДеревоРесурсов[ИмяРесурса]);
			КонецЕсли;
			
			Если ИмяРесурса = "Пользователь" И СтрокаТипРесурса.Строки.Количество() > 0 Тогда
				бДобавитьПользователя = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если бДобавитьПользователя Тогда
		Для Каждого СтрокаТипРесурса Из Дерево.Строки Цикл
			Если СтрокаТипРесурса.Имя = "Пользователь" Тогда
				НоваяСтрока = СтрокаТипРесурса.Строки.Добавить();
				НоваяСтрока.Имя = СтрокаТипРесурса.Имя;
				НоваяСтрока.Значение = ТекущийПользовательСеанса;
				НоваяСтрока.Описание = Строка(ТекущийПользовательСеанса);
				НоваяСтрока.ЭтоЗаголовок = Ложь;
				НоваяСтрока.ЭтоГруппа = Ложь;
				НоваяСтрока.Недействителен = НоваяСтрока.Значение.Недействителен;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРесурсов");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПользователейДиспетчеризацииПоСохраненномуДереву(ДеревоСтроки, СохраненноеДеревоСтроки)
	Для Каждого СтрокаДерева Из СохраненноеДеревоСтроки Цикл
		НоваяСтрока = ДеревоСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если Не НоваяСтрока.ЭтоГруппа Тогда
			НоваяСтрока.Представление = Строка(НоваяСтрока.Ссылка);
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяСтрока.Ссылка) И ТипЗнч(НоваяСтрока.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
			НоваяСтрока.Недействителен = НоваяСтрока.Ссылка.Недействителен;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьДеревоПользователейДиспетчеризацииПоСохраненномуДереву(НоваяСтрока.Строки, СтрокаДерева.Строки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиДеревоПользователейДиспетчеризации()
	Дерево = РеквизитФормыВЗначение("ДеревоПользователейДиспетчеризации");
	
	Дерево.Строки.Очистить();
	
	СохраненноеДерево = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "ДеревоПользователейДиспетчеризации");
	Если ТипЗнч(СохраненноеДерево) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьДеревоПользователейДиспетчеризацииПоСохраненномуДереву(Дерево.Строки, СохраненноеДерево.Строки);
	КонецЕсли;
	
	Если Дерево.Строки.Количество() = 0 Тогда
		СтрокаКорень = Дерево.Строки.Добавить();
		СтрокаКорень.ЭтоГруппа = Истина;
	Иначе
		СтрокаКорень = Дерево.Строки[0];
	КонецЕсли;
	СтрокаКорень.Представление = НСтр("ru = 'Пользователи'");
	
	нИндекс = 1;
	Пока нИндекс < Дерево.Строки.Количество() Цикл
		Дерево.Строки.Удалить(нИндекс);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПользователейДиспетчеризации");
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	СохранитьНастройкиДеревоРесурсов();
	СохранитьНастройкиДеревоПользователейДиспетчеризации();
	СохранитьНастройкиЗначенийОтборов();
	
	// Режим отображения календаря.
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "РежимОтображения", Объект.ТекущееОтображение);
	
	// Флаг КалендарьСписокФлагПоискПоПодстроке
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "КалендарьСписокФлагПоискПоПодстроке", КалендарьСписокФлагПоискПоПодстроке);
	
	// Режим показа группы отборов.
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "ПоказатьСкрытьОтборы", Элементы.КнопкаПоказатьСкрытьОтборы.Пометка);
	
	// Режим показа группы задач
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "ПоказатьСкрытьЗадачи", Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка);
	Объект.КэшНастроекОтображения.ОбщиеНастройки.ОтображатьСписокЗадач = Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка;
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "СтруктураНастроек", Объект.КэшНастроекОтображения);	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДеревоРесурсовВВетку(Ветка, Дерево)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		НоваяСтрока = Ветка.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если НоваяСтрока.Описание <> Строка(НоваяСтрока.Значение) И ЗначениеЗаполнено(Строка(НоваяСтрока.Значение)) Тогда
			НоваяСтрока.Описание = Строка(НоваяСтрока.Значение);
		КонецЕсли;
		НоваяСтрока.Имя = СтрокаДерева.Имя;
		НоваяСтрока.ЭтоЗаголовок = Ложь;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Значение) И ТипЗнч(НоваяСтрока.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
			НоваяСтрока.Недействителен = НоваяСтрока.Значение.Недействителен;
		КонецЕсли;
			
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДобавитьДеревоРесурсовВВетку(НоваяСтрока, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДеревоРесурсов()
	Дерево = РеквизитФормыВЗначение("ДеревоРесурсов");
	ДеревоБланк = Дерево.Скопировать();
	ДеревоБланк.Строки.Очистить();
	
	СтруктураРезультат = Новый Структура();
	
	Для Каждого СтрокаТипРесурса Из Дерево.Строки Цикл
		СтруктураРезультат.Вставить(СтрокаТипРесурса.Имя, ДеревоБланк.Скопировать());
		ДобавитьДеревоРесурсовВВетку(СтруктураРезультат[СтрокаТипРесурса.Имя], СтрокаТипРесурса);
	КонецЦикла;
	
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "ДеревоРесурсов", СтруктураРезультат);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДеревоПользователейДиспетчеризации()
	Дерево = РеквизитФормыВЗначение("ДеревоПользователейДиспетчеризации");
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "ДеревоПользователейДиспетчеризации", Дерево);
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета, бВебКлиент = Ложь)
	Если бВебКлиент Тогда
		Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
	Иначе
		Если ЭтоАдресВременногоХранилища(КэшМакетовАдресВременногоХранилища) Тогда
			КэшМакетов = ПолучитьИзВременногоХранилища(КэшМакетовАдресВременногоХранилища);
			Если ТипЗнч(КэшМакетов) <> Тип("Структура") Тогда
				КэшМакетов = Новый Структура;
			КонецЕсли;
		Иначе
			КэшМакетов = Новый Структура();
		КонецЕсли;
		
		Если Не КэшМакетов.Свойство(ИмяМакета) Тогда
			Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
			
			КэшМакетов.Вставить(ИмяМакета, Макет);
			
			Если ЭтоАдресВременногоХранилища(КэшМакетовАдресВременногоХранилища) Тогда
				ПоместитьВоВременноеХранилище(КэшМакетов, КэшМакетовАдресВременногоХранилища);
			Иначе
				КэшМакетовАдресВременногоХранилища = ПоместитьВоВременноеХранилище(КэшМакетов, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Возврат КэшМакетов[ИмяМакета];
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОчиститьКалендарьТабличныйДокумент()
	КалендарьТабличныйДокумент.Очистить();
	КалендарьТабличныйДокумент.ФиксацияСверху = 0;
	КалендарьТабличныйДокумент.ФиксацияСлева= 0;
	ТаблицаРасшифровок.Очистить();
КонецПроцедуры

&НаСервере
Процедура СформироватьКалендарьНаСервере(СтруктураДанныхКлиент)
	НастройкиОтображения = ПолучитьНастройкиОтображения();
	
	ТекстОшибкиГлобальный = "";
	
	Если Объект.ТекущееОтображение = "День" Тогда
		СформироватьКалендарьНаСервереДень(СтруктураДанныхКлиент);
	ИначеЕсли Объект.ТекущееОтображение = "Неделя" Тогда
		СформироватьКалендарьНаСервереНеделя(СтруктураДанныхКлиент);
	ИначеЕсли Объект.ТекущееОтображение = "Месяц" Тогда
		СформироватьКалендарьНаСервереМесяц(СтруктураДанныхКлиент);
	ИначеЕсли Объект.ТекущееОтображение = "ПоРесурсам" Тогда
		СформироватьКалендарьНаСервереДень(СтруктураДанныхКлиент);
	ИначеЕсли Объект.ТекущееОтображение = "Расписание" Тогда
		СформироватьРасписаниеНаСервере(СтруктураДанныхКлиент);
	ИначеЕсли Объект.ТекущееОтображение = "Список" Тогда
		СформироватьСписокНаСервере(СтруктураДанныхКлиент);
	ИначеЕсли Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Если ПоРесурсамШкалаВремениПоГоризонтали = 0 Тогда
			СформироватьКалендарьНаСервереДень(СтруктураДанныхКлиент);
		Иначе
			СформироватьРасписаниеНаСервере(СтруктураДанныхКлиент);
		КонецЕсли;
	КонецЕсли;
	
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Ложь;
	
	Если	( НастройкиОтображения.СворачиватьОбластьСобытийНаВесьДень = Истина
		И	(	Объект.ТекущееОтображение = "День"
			Или	Объект.ТекущееОтображение = "Неделя"
			Или	Объект.ТекущееОтображение = "ПоРесурсам"
			Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 0)) )
		Или	Объект.ТекущееОтображение = "Список" Тогда
		//
		бОтображатьГруппировки = Истина;
	Иначе
		бОтображатьГруппировки = Ложь;
	КонецЕсли;
	Если Элементы.КалендарьТабличныйДокумент.ОтображатьГруппировки <> бОтображатьГруппировки Тогда
		Элементы.КалендарьТабличныйДокумент.ОтображатьГруппировки = бОтображатьГруппировки;
	КонецЕсли;
	
	// Заголовок формы
	МинимальнаяДата = СтруктураДанныхКлиент.МинимальнаяДата;
	МаксимальнаяДата = СтруктураДанныхКлиент.МаксимальнаяДата;
	Заголовок = НСтр("ru = 'Календарь'") + " " + ПолучитьПредставлениеПериода(МинимальнаяДата, МаксимальнаяДата);
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиОтображения()
	Если ТипЗнч(Объект.КэшНастроекОтображения) <> Тип("Структура") Тогда
		ЗагрузитьНастройкиКалендаря();
	КонецЕсли;
	Возврат Объект.КэшНастроекОтображения.НастройкиОтображения;
КонецФункции

&НаСервере
Функция ПолучитьНастройкиОбщие()
	Если ТипЗнч(Объект.КэшНастроекОтображения) <> Тип("Структура") Тогда
		ЗагрузитьНастройкиКалендаря();
	КонецЕсли;
	Возврат Объект.КэшНастроекОтображения.ОбщиеНастройки;
КонецФункции

&НаСервере
Функция ПолучитьМассивПользователейДиспетчеризации()
	МассивПользователей = Новый Массив();
	
	Если ВариантСпискаПользователейДиспетчеризации = 0 Тогда
		Для Каждого ЗначениеСписка Из СписокВыбранныхПользователейДиспетчеризации Цикл
			Если ТипЗнч(ЗначениеСписка.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
				МассивПользователей.Добавить(ЗначениеСписка.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если СписокИдентификаторовВыделенныхСтрокВДеревеПользователейДиспетчеризации.Количество() > 0 Тогда
			Для Каждого ЗначениеСписка Из СписокИдентификаторовВыделенныхСтрокВДеревеПользователейДиспетчеризации Цикл
				НайденнаяСтрока = ДеревоПользователейДиспетчеризации.НайтиПоИдентификатору(ЗначениеСписка.Значение);
				Если НайденнаяСтрока <> Неопределено И Не НайденнаяСтрока.ЭтоГруппа И МассивПользователей.Найти(НайденнаяСтрока.Ссылка) = Неопределено Тогда
					МассивПользователей.Добавить(НайденнаяСтрока.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивПользователей.Количество() = 0 Тогда
		МассивПользователей.Добавить(ТекущийПользовательСеанса);
	КонецЕсли;
	Возврат МассивПользователей;
КонецФункции

&НаСервере
Функция ПолучитьТаблицуВыбранныхРесурсов()
	ТаблицаРесурсов = Новый ТаблицаЗначений();
	ТаблицаРесурсов.Колонки.Добавить("Имя");
	ТаблицаРесурсов.Колонки.Добавить("Значение");
	ТаблицаРесурсов.Колонки.Добавить("Описание");
	
	Если Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		МассивПользователей = ПолучитьМассивПользователейДиспетчеризации();
		Для Каждого ПользовательСсылка Из МассивПользователей Цикл
			Попытка
				Если	ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи")
					И	Не ПоказыватьНедействительныхПользователей
					И	ПользовательСсылка.Недействителен Тогда
					//
					Продолжить;
				КонецЕсли;
			Исключение КонецПопытки;
			
			НоваяСтрока = ТаблицаРесурсов.Добавить();
			НоваяСтрока.Имя = "Пользователь";
			НоваяСтрока.Значение = ПользовательСсылка;
			НоваяСтрока.Описание = Строка(ПользовательСсылка);
		КонецЦикла;
	Иначе
		ТекущиееДеревоРесурсов = ПолучитьДеревоРесурсов();
		Для Каждого ЭлементДереваВерхнийУровень Из ТекущиееДеревоРесурсов.Строки Цикл
			Для Каждого ЭлементДерева Из ЭлементДереваВерхнийУровень.Строки Цикл
				Попытка
					Если	ТипЗнч(ЭлементДерева.Значение) = Тип("СправочникСсылка.Пользователи")
						И	Не ПоказыватьНедействительныхПользователей
						И	ЭлементДерева.Значение.Недействителен Тогда
						//
						Продолжить;
					КонецЕсли;
				Исключение КонецПопытки;
				
				НоваяСтрока = ТаблицаРесурсов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДерева);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРесурсов;
КонецФункции

&НаСервере
Функция ПолучитьДеревоРесурсов()
	// Формирует 2-х уровневое дерево значений (ресурс, значения ресурсов) из многоуровнего дерева с группами.
	Дерево = РеквизитФормыВЗначение("ДеревоРесурсов");
	
	ДеревоРезультат = Дерево.Скопировать();
	ДеревоРезультат.Строки.Очистить();
	
	СтрокаПользователи = ДеревоРезультат.Строки.Добавить();
	СтрокаПользователи.Имя = "Пользователь";
	СтрокаПользователи.Описание = НСтр("ru = 'Пользователи'");
	
	СтрокаПомещения = ДеревоРезультат.Строки.Добавить();
	СтрокаПомещения.Имя = "Помещение";
	СтрокаПомещения.Описание = НСтр("ru = 'Помещения'");
	
	Для Каждого Идентификатор Из СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов Цикл
		НайденнаяСтрока = ДеревоРесурсов.НайтиПоИдентификатору(Идентификатор.Значение);
		Если НайденнаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
		
		Если НайденнаяСтрока.ЭтоСистемнаяГруппа Тогда
			Если НайденнаяСтрока.Имя = "ОбщиеПомещения" Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Помещения.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.CRM_Помещения КАК Помещения
				|ГДЕ
				|	НЕ Помещения.ПометкаУдаления
				|	И Помещения.Общее;
				|");
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = СтрокаПомещения.Строки.Добавить();
					НоваяСтрока.Имя			= "Помещение";
					НоваяСтрока.Значение	= Выборка.Ссылка;
					НоваяСтрока.Описание	= Строка(Выборка.Ссылка);
				КонецЦикла;
				
			ИначеЕсли НайденнаяСтрока.Имя = "МоеПодразделение" Тогда
				Если ЗначениеЗаполнено(ОтборЗначениеПользователь) Тогда
					ТекущийПользовательКалендаря = ОтборЗначениеПользователь;
				Иначе
					ТекущийПользовательКалендаря = ТекущийПользовательСеанса;
				КонецЕсли;
				ПодразделениеТекущегоПользователя = ТекущийПользовательКалендаря.Подразделение;
				
				Если ЗначениеЗаполнено(ПодразделениеТекущегоПользователя) Тогда
					Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
					|	Пользователи.Ссылка КАК Пользователь
					|ИЗ
					|	Справочник.Пользователи КАК Пользователи
					|
					|ГДЕ
					|	НЕ Пользователи.ПометкаУдаления
					|	И Пользователи.Подразделение В ИЕРАРХИИ(&ПодразделениеТекущегоПользователя)
					|" + ?(ПоказыватьНедействительныхПользователей, "", "И НЕ Пользователи.Недействителен") + "
					|УПОРЯДОЧИТЬ ПО
					|	Пользователи.Наименование
					|");
					Запрос.УстановитьПараметр("ПодразделениеТекущегоПользователя", ПодразделениеТекущегоПользователя);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Пока Выборка.Следующий() Цикл
						НоваяСтрока = СтрокаПользователи.Строки.Добавить();
						НоваяСтрока.Имя			= "Пользователь";
						НоваяСтрока.Значение	= Выборка.Пользователь;
						НоваяСтрока.Описание	= Строка(НоваяСтрока.Значение);
					КонецЦикла;
					
				Иначе
					НоваяСтрока = СтрокаПользователи.Строки.Добавить();
					НоваяСтрока.Имя			= "Пользователь";
					НоваяСтрока.Значение	= ТекущийПользовательКалендаря;
					НоваяСтрока.Описание	= Строка(НоваяСтрока.Значение);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если НайденнаяСтрока.ЭтоГруппа Или НайденнаяСтрока.ЭтоЗаголовок Тогда
				Продолжить;
			КонецЕсли;
			
			ТекРодитель = НайденнаяСтрока.ПолучитьРодителя();
			Пока ТекРодитель <> Неопределено И Не ТекРодитель.ЭтоЗаголовок Цикл
				ТекРодитель = ТекРодитель.ПолучитьРодителя();
			КонецЦикла;
			
			Если ТекРодитель = Неопределено Или Не ТекРодитель.ЭтоЗаголовок Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекРодитель.Имя = "Пользователь" Тогда
				НоваяСтрока = СтрокаПользователи.Строки.Добавить();
			ИначеЕсли ТекРодитель.Имя = "Помещение" Тогда
				НоваяСтрока = СтрокаПомещения.Строки.Добавить();
			Иначе
				НоваяСтрока = Неопределено;
			КонецЕсли;
			
			Если НоваяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
			
			НоваяСтрока.Имя			= ТекРодитель.Имя;
			НоваяСтрока.Значение	= НайденнаяСтрока.Значение;
			НоваяСтрока.Описание	= Строка(НайденнаяСтрока.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоРезультат;
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСобытияПоСсылке(Событие, НастройкиОтображения, ОписаниеСобытия = Неопределено)
	Если ОписаниеСобытия = Неопределено Тогда
		НайденныеСтроки = ТаблицаРасшифровок.НайтиСтроки(Новый Структура("Событие", Событие));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОписаниеСобытия = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеСобытия = Неопределено Тогда
		Возврат Строка(Событие);
	Иначе
		Возврат ПолучитьПредставлениеСобытия(Событие, ОписаниеСобытия, НастройкиОтображения, 1);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСобытия(Событие, ОписаниеСобытия, НастройкиОтображения, ВысотаОбластиСобытия = 1)
	СписокПредставлениеСобытияВКалендаре = НастройкиОтображения.СписокПредставлениеСобытияВКалендаре;
	
	ПредставлениеПериод = Формат(ОписаниеСобытия.ПериодНачало, "ДФ=ЧЧ:мм") + " - " + Формат(ОписаниеСобытия.ПериодОкончание, "ДФ=ЧЧ:мм");
	
	бЗаголовок = Истина;
	СтрТекущая = "";
	СтрЗаголовок = "";
	СтрОбластьСобытия = "";
	бСкобка = Истина;
	Для Каждого СтрСписка Из СписокПредставлениеСобытияВКалендаре Цикл
		Если Не СтрСписка.Пометка Тогда Продолжить; КонецЕсли;
		Если СтрСписка.Значение = "Время" И ОбъектИмеетСвойство(ОписаниеСобытия, "СобытиеНаВесьДень") И ОписаниеСобытия.СобытиеНаВесьДень Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТекущая = ?(бЗаголовок, СтрЗаголовок, СтрОбластьСобытия);
		
		Если СтрСписка.Значение = "Время" Тогда
			Если Не ПустаяСтрока(ПредставлениеПериод) Тогда
				Если Не бСкобка Тогда
					СтрТекущая = СтрТекущая + ") ";
					бСкобка = Истина;
				ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
					СтрТекущая = СтрТекущая + " ";
				КонецЕсли;
				СтрТекущая = СтрТекущая + ПредставлениеПериод;
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Тема" Тогда
			Если Не ПустаяСтрока(ОписаниеСобытия.Тема) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + " ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + ОписаниеСобытия.Тема;
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Клиент" Тогда
			Если ЗначениеЗаполнено(ОписаниеСобытия.Партнер) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + ", ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + Строка(ОписаниеСобытия.Партнер);
			КонецЕсли;
		Иначе
			Попытка
				Попытка
					Если СтрСписка.Значение = "Пользователь" Тогда
						МассивДобавитьКОписанию = ОписаниеСобытия.МассивПользователей;
					ИначеЕсли СтрСписка.Значение = "Помещение" Тогда
						МассивДобавитьКОписанию = ОписаниеСобытия.МассивПомещений;
					Иначе
						МассивДобавитьКОписанию = Новый Массив();
						МассивДобавитьКОписанию.Добавить(ОписаниеСобытия[СтрСписка.Значение]);
					КонецЕсли;
				Исключение
					МассивДобавитьКОписанию = Новый Массив();
					МассивДобавитьКОписанию.Добавить(ОписаниеСобытия[СтрСписка.Значение]);
				КонецПопытки;
				Для Каждого СтрДобавитьКОписанию Из МассивДобавитьКОписанию Цикл
					СтрДобавить = Строка(СтрДобавитьКОписанию);
					Если Не ПустаяСтрока(СтрДобавить) Тогда
						Если бСкобка Тогда
							Если Не ПустаяСтрока(СтрТекущая) Тогда СтрТекущая = СтрТекущая + " "; КонецЕсли;
							СтрТекущая = СтрТекущая + "(";
							бСкобка = Ложь;
						ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
							СтрТекущая = СтрТекущая + ", ";
						КонецЕсли;
						СтрТекущая = СтрТекущая + СтрДобавить;
					КонецЕсли;
				КонецЦикла;
			Исключение КонецПопытки;
		КонецЕсли;
		
		Если бЗаголовок Тогда
			СтрЗаголовок = СтрТекущая;
		Иначе
			СтрОбластьСобытия = СтрТекущая;
		КонецЕсли;
		
		Если бЗаголовок И ВысотаОбластиСобытия > 1 Тогда
			Если Не бСкобка Тогда СтрЗаголовок = СтрЗаголовок + ")"; КонецЕсли;
			бЗаголовок = Ложь;
			бСкобка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не бСкобка И Не ПустаяСтрока(СтрТекущая) Тогда
		СтрТекущая = СтрТекущая + ")";
		Если бЗаголовок Тогда
			СтрЗаголовок = СтрТекущая;
		Иначе
			СтрОбластьСобытия = СтрТекущая;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаголовок) Тогда
		Возврат СтрОбластьСобытия;
	ИначеЕсли ПустаяСтрока(СтрОбластьСобытия) Тогда
		Возврат СтрЗаголовок;
	Иначе
		Возврат СтрЗаголовок + Символы.ПС + СтрОбластьСобытия;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруРасшифровкиЯчейкиБланк()
	Возврат ТаблицаРасшифровок.Добавить();
КонецФункции

&НаСервере
Функция РасположитьКартинкуВНачалеОбласти(ТабДокумент, Область, Картинка)
	Если ТипЗнч(Картинка) <> Тип("Картинка") Или Картинка.Вид = ВидКартинки.Пустая Тогда
		Возврат Ложь;
	Иначе
		Пиктограмма = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Пиктограмма.Расположить(Область);
		Пиктограмма.Ширина = 3.6;
		Пиктограмма.Высота = 3.6;
		Пиктограмма.Верх = Пиктограмма.Верх + 0.15;
		Пиктограмма.Лево = Пиктограмма.Лево + 0.1;
		Пиктограмма.Картинка = Картинка;
		Пиктограмма.ГраницаСверху = Ложь;
		Пиктограмма.ГраницаСнизу = Ложь;
		Пиктограмма.ГраницаСправа = Ложь;
		Пиктограмма.ГраницаСлева = Ложь;
		Пиктограмма.Узор = ТипУзораТабличногоДокумента.БезУзора;
		Пиктограмма.ЦветФона = Новый Цвет();
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СвернутьТаблицуДанныхПоПериодуПоРесурсам(ТаблицаДанные, СтруктураОтбораПоРесурсу = Неопределено, бСворачиватьПоРесурсам = Неопределено)
	бСоздаватьИдентификаторСобытия = Ложь;
	Если ТаблицаДанные.Колонки.Найти("ИдентификаторСобытия") = Неопределено Тогда
		ТаблицаДанные.Колонки.Добавить("ИдентификаторСобытия", Новый ОписаниеТипов("Строка"));
		бСоздаватьИдентификаторСобытия = Истина;
	КонецЕсли;
	
	Если бСворачиватьПоРесурсам = Неопределено Тогда
		бИспользуютсяВыбранныеРесурсы = ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(Объект.ТекущееОтображение) Или Объект.ТекущееОтображение = "Диспетчеризация";
	Иначе
		бИспользуютсяВыбранныеРесурсы = бСворачиватьПоРесурсам;
	КонецЕсли;
	
	Если ТаблицаДанные.Колонки.Найти("МассивПользователей") = Неопределено Тогда
		ТаблицаДанные.Колонки.Добавить("МассивПользователей");
	КонецЕсли;
	Если ТаблицаДанные.Колонки.Найти("МассивПомещений") = Неопределено Тогда
		ТаблицаДанные.Колонки.Добавить("МассивПомещений");
	КонецЕсли;
	
	Если СтруктураОтбораПоРесурсу = Неопределено Тогда
		РесурсИмя = Неопределено;
	Иначе
		Для Каждого СтруктураОтбораПоРесурсуКлючЗначение Из СтруктураОтбораПоРесурсу Цикл
			РесурсИмя = СтруктураОтбораПоРесурсуКлючЗначение.Ключ;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если бИспользуютсяВыбранныеРесурсы И РесурсИмя = "Пользователь" Тогда
		СоответствиеОбработанныеСтроки = Новый Соответствие();
		Для Каждого СтрокаСобытие Из ТаблицаДанные Цикл;
			Если СоответствиеОбработанныеСтроки[СтрокаСобытие] <> Неопределено Тогда Продолжить; КонецЕсли;
			
			НайденныеСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("Событие,ПериодНачало,ПериодОкончание", СтрокаСобытие.Событие, СтрокаСобытие.ПериодНачало, СтрокаСобытие.ПериодОкончание));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.МассивПользователей = Новый Массив();
				НайденнаяСтрока.МассивПомещений = Новый Массив();
				
				Для н = 0 По НайденныеСтроки.ВГраница() Цикл
					ТекущаяСтрока = НайденныеСтроки[н];
					
					Если НайденнаяСтрока.МассивПользователей.Найти(ТекущаяСтрока.Пользователь) = Неопределено Тогда
						НайденнаяСтрока.МассивПользователей.Добавить(ТекущаяСтрока.Пользователь);
					КонецЕсли;
					Если НайденнаяСтрока.МассивПомещений.Найти(ТекущаяСтрока.Помещение) = Неопределено Тогда
						НайденнаяСтрока.МассивПомещений.Добавить(ТекущаяСтрока.Помещение);
					КонецЕсли;
				КонецЦикла;
				
				Если бСоздаватьИдентификаторСобытия Тогда
					НайденнаяСтрока.ИдентификаторСобытия = Строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				
				СоответствиеОбработанныеСтроки.Вставить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		нИндекс = 0;
		Пока нИндекс < ТаблицаДанные.Количество() Цикл
			СтрокаСобытие = ТаблицаДанные[нИндекс];
			СтрокаСобытие.МассивПользователей = Новый Массив();
			СтрокаСобытие.МассивПомещений = Новый Массив();
			
			НайденныеСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("Событие,ПериодНачало,ПериодОкончание", СтрокаСобытие.Событие, СтрокаСобытие.ПериодНачало, СтрокаСобытие.ПериодОкончание));
			Для н = 0 По НайденныеСтроки.ВГраница() Цикл
				НайденнаяСтрока = НайденныеСтроки[н];
				
				Если СтрокаСобытие.МассивПользователей.Найти(НайденнаяСтрока.Пользователь) = Неопределено Тогда
					СтрокаСобытие.МассивПользователей.Добавить(НайденнаяСтрока.Пользователь);
				КонецЕсли;
				Если СтрокаСобытие.МассивПомещений.Найти(НайденнаяСтрока.Помещение) = Неопределено Тогда
					СтрокаСобытие.МассивПомещений.Добавить(НайденнаяСтрока.Помещение);
				КонецЕсли;
				
				Если бСоздаватьИдентификаторСобытия Тогда
					СтрокаСобытие.ИдентификаторСобытия = Строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				
				Если НайденнаяСтрока = СтрокаСобытие Тогда
					нИндекс = нИндекс + 1;
				Иначе
					Индекс = ТаблицаДанные.Индекс(НайденнаяСтрока);
					НайденныеСтроки[н] = Неопределено;
					ТаблицаДанные.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьОбластиОтрисовкиСобытийБезПересечений(	МинимальныйИндексЯчеекВремени,
																МаксимальныйИндексЯчеекВремени,
																бПустойДень,
																СтруктураОтбораПоРесурсу,
																СобытияКалендаряЗанятостьЯчеек,
																ТаблицаПустыхОбластей,
																МаксимальноеКоличествоЯчеекВДне,
																ДатаДень,
																НастройкиОтображения,
																ТаблицаОбластиВыводаСобытий)
	
	// Если нет пересечений выводим все одним простым циклом как частный случай.
	Для ИндексЯчейкиВремени = МинимальныйИндексЯчеекВремени По МаксимальныйИндексЯчеекВремени Цикл
		Если бПустойДень Тогда
			бПустаяСтрока = Истина;
		Иначе
			СтруктураПоиска = Новый Структура("ИндексВремени" + ИндексЯчейкиВремени, 1);
			Если СтруктураОтбораПоРесурсу <> Неопределено Тогда
				Для Каждого КлючЗначениеОтбора Из СтруктураОтбораПоРесурсу Цикл
					СтруктураПоиска.Вставить(КлючЗначениеОтбора.Ключ, КлючЗначениеОтбора.Значение);
				КонецЦикла;
			КонецЕсли;
			СтрокиЗанятостьЯчейки = СобытияКалендаряЗанятостьЯчеек.НайтиСтроки(СтруктураПоиска);
			
			бПустаяСтрока = (СтрокиЗанятостьЯчейки.Количество() = 0);
		КонецЕсли;
		
		Если бПустаяСтрока Тогда
			СтрокаПустаяОбласть = ТаблицаПустыхОбластей.Добавить();
			СтрокаПустаяОбласть.НачалоОбластиСтрока = ИндексЯчейкиВремени + 1 - МинимальныйИндексЯчеекВремени;
			СтрокаПустаяОбласть.НачалоОбластиКолонка = 1;
			СтрокаПустаяОбласть.КонецОбластиКолонка = МаксимальноеКоличествоЯчеекВДне;
			
		Иначе
			Для Каждого СтрокаЗанятостьЯчейки Из СтрокиЗанятостьЯчейки Цикл
				ОписаниеСобытия = Обработки.CRM_Календарь.ПолучитьСтруктуруОписаниеСобытияБланк();
				ЗаполнитьЗначенияСвойств(ОписаниеСобытия, СтрокаЗанятостьЯчейки);
				Если НачалоДня(ОписаниеСобытия.ПериодНачало) < НачалоДня(ДатаДень) Тогда
					ОписаниеСобытия.ИндексНачало = МинимальныйИндексЯчеекВремени;
				Иначе
					ОписаниеСобытия.ИндексНачало = Макс(МинимальныйИндексЯчеекВремени, ОписаниеСобытия.ИндексНачало);
				КонецЕсли;
				Если НачалоДня(ОписаниеСобытия.ПериодОкончание) > НачалоДня(ДатаДень) Тогда
					ОписаниеСобытия.ИндексКонец = МаксимальныйИндексЯчеекВремени;
				Иначе
					ОписаниеСобытия.ИндексКонец = Мин(МаксимальныйИндексЯчеекВремени, ОписаниеСобытия.ИндексКонец);
				КонецЕсли;
				Обработки.CRM_Календарь.ЗаполнитьДополнительныеСвойстваСобытия(ОписаниеСобытия, НастройкиОтображения);
				
				бЭтоНачалоСобытия = (ОписаниеСобытия.ИндексНачало = ИндексЯчейкиВремени Или ИндексЯчейкиВремени = МинимальныйИндексЯчеекВремени);
				бЭтоКонецСобытия = (ОписаниеСобытия.ИндексКонец = ИндексЯчейкиВремени Или ИндексЯчейкиВремени = МаксимальныйИндексЯчеекВремени);
				Если бЭтоНачалоСобытия Тогда
					СтрокаОбласть = ТаблицаОбластиВыводаСобытий.Добавить();
					СтрокаОбласть.ОписаниеСобытия = ОписаниеСобытия;
					СтрокаОбласть.Событие = ОписаниеСобытия.Событие;
					СтрокаОбласть.ИдентификаторСобытия = ОписаниеСобытия.ИдентификаторСобытия;
					СтрокаОбласть.НачалоОбластиСтрока = ИндексЯчейкиВремени + 1 - МинимальныйИндексЯчеекВремени;
					СтрокаОбласть.НачалоОбластиКолонка = 1;
				КонецЕсли;
				Если бЭтоКонецСобытия Тогда
					СтрокаОбласть = ТаблицаОбластиВыводаСобытий.Найти(ОписаниеСобытия.ИдентификаторСобытия, "ИдентификаторСобытия");
					Если СтрокаОбласть <> Неопределено Тогда
						СтрокаОбласть.КонецОбластиСтрока = ИндексЯчейкиВремени + 1 - МинимальныйИндексЯчеекВремени;
						СтрокаОбласть.КонецОбластиКолонка = МаксимальноеКоличествоЯчеекВДне;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Формирует данные для отрисовки отдельной строки табличного документа календаря для случая, когда события
// пересекаются по времени.
//
&НаСервере
Функция РазметитьБланкСтрокиДень(	ТабДокументДень,
																	ИндексЯчейкиВремени,
																	КартаОбластиСтроки,
																	КоличествоПересечений,
																	КоличествоЗначемыхПересечений,
																	МассивОписанийСобытий,
																	МаксимальноеКоличествоЯчеекВДне,
																	МассивСобытийПоГоризотальнымИндексам,
																	МассивПересекаемыхСобытийПоГоризонтальнымИндексам = Неопределено) Экспорт
	//
	
	МассивКартаЗанятостиЯчеек = Новый Массив(КартаОбластиСтроки.Количество());
	
	нТекущаяКолонка = 1;
	нИндекс = 0;
	ОбщаяШиринаОбласти = 0;
	Пока нИндекс < КартаОбластиСтроки.Количество() Цикл
		нНачальныйИндекс = нИндекс;
		
		КоэффициентКартаОбласти = КартаОбластиСтроки[нИндекс];
		ШиринаКолонки = Неопределено;
		
		СобытиеВИндексе = МассивСобытийПоГоризотальнымИндексам[нИндекс];
		бВИндексеЕстьСобытие = (СобытиеВИндексе <> Неопределено);
		
		бШиринаКолонкиВычислена = Ложь;
		Если бВИндексеЕстьСобытие И СобытиеВИндексе.ШиринаОбласти <> Неопределено Тогда
			ШиринаКолонки = СобытиеВИндексе.ШиринаОбласти;
			нТекущаяКолонка = СобытиеВИндексе.НомерПервойКолонкиОбласти;
			бШиринаКолонкиВычислена = Истина;
		КонецЕсли;
		
		бПрисоедененоКОбластиСправа = Ложь;
		Если Не бШиринаКолонкиВычислена Тогда
			Если КоэффициентКартаОбласти = Неопределено Тогда
				Для н = нИндекс + 1 По КартаОбластиСтроки.ВГраница() Цикл
					ОписаниеСобытия = МассивСобытийПоГоризотальнымИндексам[н];
					Если ОписаниеСобытия <> Неопределено Тогда
						Если ОписаниеСобытия.НомерПервойКолонкиОбласти = Неопределено Тогда
							Прервать;
						КонецЕсли;
						ШиринаКолонки = ОписаниеСобытия.НомерПервойКолонкиОбласти - нТекущаяКолонка;
						нИндекс = н - 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли бВИндексеЕстьСобытие Тогда
				Если МассивПересекаемыхСобытийПоГоризонтальнымИндексам <> Неопределено И нИндекс + 1 <= КартаОбластиСтроки.ВГраница() Тогда
					ОписаниеСобытия = МассивПересекаемыхСобытийПоГоризонтальнымИндексам[нИндекс + 1];
					Если ОписаниеСобытия <> Неопределено И ОписаниеСобытия.НомерПервойКолонкиОбласти <> Неопределено Тогда
						ШиринаКолонки = ОписаниеСобытия.НомерПервойКолонкиОбласти - нТекущаяКолонка;
						бПрисоедененоКОбластиСправа = Истина;
					КонецЕсли;
				КонецЕсли;
				Если Не бПрисоедененоКОбластиСправа Тогда
					Для н = нИндекс + 1 По КартаОбластиСтроки.ВГраница() Цикл
						ОписаниеСобытия = МассивСобытийПоГоризотальнымИндексам[н];
						Если ОписаниеСобытия <> Неопределено Тогда
							Если ОписаниеСобытия.НомерПервойКолонкиОбласти <> Неопределено Тогда
								ШиринаКолонки = ОписаниеСобытия.НомерПервойКолонкиОбласти - нТекущаяКолонка;
								бПрисоедененоКОбластиСправа = Истина;
								нИндекс = н - 1;
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не бПрисоедененоКОбластиСправа Тогда
					ШиринаКолонки = Макс(Цел(МаксимальноеКоличествоЯчеекВДне / КоэффициентКартаОбласти), 1);
				КонецЕсли
			Иначе
				ШиринаКолонки = Макс(Цел(МаксимальноеКоличествоЯчеекВДне / КоэффициентКартаОбласти), 1);
			КонецЕсли;
		КонецЕсли;
		
		Если Не бШиринаКолонкиВычислена И бВИндексеЕстьСобытие Тогда
			Если Не бПрисоедененоКОбластиСправа И нНачальныйИндекс = КоличествоПересечений - 1 И КоличествоПересечений = СобытиеВИндексе.КоличествоЗначемыхПересечений Тогда
				ШиринаКолонки = Макс(МаксимальноеКоличествоЯчеекВДне - нТекущаяКолонка + 1, 1);
			КонецЕсли;
			СобытиеВИндексе.ШиринаОбласти = ШиринаКолонки;
			СобытиеВИндексе.НомерПервойКолонкиОбласти = нТекущаяКолонка;
		КонецЕсли;
		
		Если ШиринаКолонки <> Неопределено Тогда
			Если бВИндексеЕстьСобытие Тогда
				ИндексВКартеЗанятостиЯчеек = СобытиеВИндексе.ГоризонтальныйИндексСобытия;
			Иначе
				ИндексВКартеЗанятостиЯчеек = нНачальныйИндекс;
			КонецЕсли;
			МассивКартаЗанятостиЯчеек[ИндексВКартеЗанятостиЯчеек] = Новый Структура("НомерПервойКолонки,НомерПоследнейКолонки", нТекущаяКолонка, нТекущаяКолонка + ШиринаКолонки - 1);
			
			нТекущаяКолонка = нТекущаяКолонка + ШиринаКолонки;
			ОбщаяШиринаОбласти = ОбщаяШиринаОбласти + ШиринаКолонки;
		КонецЕсли;
		
		нИндекс = нИндекс + 1;
		
		Если ОбщаяШиринаОбласти >= МаксимальноеКоличествоЯчеекВДне Тогда Прервать; КонецЕсли;
	КонецЦикла;
	
	Для нИндекс = 0 По МассивКартаЗанятостиЯчеек.ВГраница() Цикл
		Если МассивКартаЗанятостиЯчеек[нИндекс] <> Неопределено И МассивСобытийПоГоризотальнымИндексам[нИндекс] <> Неопределено Тогда
			Область = ТабДокументДень.Область(ИндексЯчейкиВремени, МассивКартаЗанятостиЯчеек[нИндекс].НомерПервойКолонки, ИндексЯчейкиВремени, МассивКартаЗанятостиЯчеек[нИндекс].НомерПоследнейКолонки);
			Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			Область.Расшифровка =  МассивСобытийПоГоризотальнымИндексам[нИндекс].ШиринаОбласти;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивКартаЗанятостиЯчеек;
КонецФункции

&НаСервере
Функция ПолучитьТабличныйДокументНаДатуДень(	ДанныеПоПериоду,
												СтруктураДанныхКлиент,
												ДатаДень,
												НастройкиОтображения,
												НастройкиОбщие,
												КоличествоЯчеекВДне,
												СтруктураОтбораПоРесурсу = Неопределено,
												МаксимальныйИндексСобытияНаВесьДень = -1,
												КалендарныйГрафик = Неопределено)
	//
	
	Если СтруктураДанныхКлиент.Свойство("ТекущаяДата") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ТекущаяДата) Тогда
		ТекущаяДатаВремя = СтруктураДанныхКлиент.ТекущаяДата;
	Иначе
		ТекущаяДатаВремя = ТекущаяДатаСеанса();
	КонецЕсли;
	бЭтоТекущийДень = (НачалоДня(ДатаДень) = НачалоДня(ТекущаяДатаВремя));
	бВыделятьЦветомТекущийДень = (бЭтоТекущийДень И СтруктураДанныхКлиент.МассивВыбранныхДат.Количество() > 1);
	
	Если НачалоДня(ТекущаяДатаВремя) = НачалоДня(ДатаДень) Тогда
		ИндексТекущегоВремени = Час(ТекущаяДатаВремя) * 2 + ?(Минута(ТекущаяДатаВремя) <= 30, 0, 1);
	Иначе
		ИндексТекущегоВремени = Неопределено;
	КонецЕсли;
	
	бВебКлиент = СтруктураДанныхКлиент.Свойство("ВебКлиент");
	
	ОтборПоРесурсуИмя = Неопределено;
	ОтборПоРесурсуЗначение = Неопределено;
	Если СтруктураОтбораПоРесурсу <> Неопределено Тогда
		Для Каждого КлючЗначениеОтбора Из СтруктураОтбораПоРесурсу Цикл
			ОтборПоРесурсуИмя = КлючЗначениеОтбора.Ключ;
			ОтборПоРесурсуЗначение = КлючЗначениеОтбора.Значение;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОписаниеКалендарногоДня = Неопределено;
	бИспользоватьКалендарныеГрафики = (НастройкиОбщие.КалендарьИспользоватьКалендарныеГрафики = Истина);
	Если КалендарныйГрафик = Неопределено Тогда
		МассивДат = Новый Массив();
		МассивДат.Добавить(НачалоДня(ДатаДень));
		
		Если ОтборПоРесурсуИмя = "Пользователь" И ЗначениеЗаполнено(ОтборПоРесурсуЗначение) Тогда
			ПараметрКалендарногоГрафикаПользователь = ОтборПоРесурсуЗначение;
		Иначе
			ПараметрКалендарногоГрафикаПользователь = Неопределено;
		КонецЕсли;
		Если ОтборПоРесурсуИмя = "Помещение" И ЗначениеЗаполнено(ОтборПоРесурсуЗначение) Тогда
			ПараметрКалендарногоГрафикаПомещение = ОтборПоРесурсуЗначение;
		Иначе
			ПараметрКалендарногоГрафикаПомещение = Неопределено;
		КонецЕсли;
		
		КалендарныйГрафик = ПолучитьКалендарныйГрафик(МассивДат,, ПараметрКалендарногоГрафикаПользователь, ПараметрКалендарногоГрафикаПомещение);
		
		Если КалендарныйГрафик = Неопределено Тогда
			бИспользоватьКалендарныеГрафики = Ложь;
		Иначе
			СтруктураОписаниеКалендарногоДня = КалендарныйГрафик[НачалоДня(ДатаДень)];
			Если СтруктураОписаниеКалендарногоДня = Неопределено Тогда
				бИспользоватьКалендарныеГрафики = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураОписаниеКалендарногоДня = КалендарныйГрафик[НачалоДня(ДатаДень)];
		Если СтруктураОписаниеКалендарногоДня = Неопределено Тогда
			бИспользоватьКалендарныеГрафики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МинимальныйИндексНачало	= 0;
	МаксимальныйИндексКонец	= 47;
	МинимальныйИндексСобытияНачало	= ?(СтруктураДанныхКлиент.Свойство("МинимальныйИндексСобытияНачало"), СтруктураДанныхКлиент.МинимальныйИндексСобытияНачало, МинимальныйИндексНачало);
	МаксимальныйИндексСобытияКонец	= ?(СтруктураДанныхКлиент.Свойство("МаксимальныйИндексСобытияКонец"), СтруктураДанныхКлиент.МаксимальныйИндексСобытияКонец, МаксимальныйИндексКонец);
	
	СобытияКалендаряЗанятостьЯчеек = ДанныеПоПериоду.Скопировать();
	
	бПустойДень = (СобытияКалендаряЗанятостьЯчеек.Количество() = 0);
	
	СтрКолонкиСуммирования = "";
	Для нИндекс = МинимальныйИндексНачало По МаксимальныйИндексКонец Цикл СтрКолонкиСуммирования = СтрКолонкиСуммирования + "ИндексВремени" + нИндекс + ","; КонецЦикла;
	СтрКолонкиСуммирования = Лев(СтрКолонкиСуммирования, СтрДлина(СтрКолонкиСуммирования) - 1);
	
	СвернутьТаблицуДанныхПоПериодуПоРесурсам(СобытияКалендаряЗанятостьЯчеек, СтруктураОтбораПоРесурсу);
	
	Если СтруктураОтбораПоРесурсу <> Неопределено Тогда
		СтрокиПоРесурсу = СобытияКалендаряЗанятостьЯчеек.НайтиСтроки(СтруктураОтбораПоРесурсу);
		СобытияКалендаряЗанятостьЯчеек = СобытияКалендаряЗанятостьЯчеек.Скопировать(СтрокиПоРесурсу);
	КонецЕсли;
	
	бПустойДень = (СобытияКалендаряЗанятостьЯчеек.Количество() = 0);
	
	МассивСтрокЗанятостьЯчеекБезСобытийНаВесьДень = СобытияКалендаряЗанятостьЯчеек.НайтиСтроки(Новый Структура("СобытиеНаВесьДень", Ложь));
	
	бТолькоСобытияНаВесьДень = (Не бПустойДень И МассивСтрокЗанятостьЯчеекБезСобытийНаВесьДень.Количество() = 0);
	Если Не бТолькоСобытияНаВесьДень Тогда
		СобытияКалендаряЗанятостьЯчеекСвернутая = СобытияКалендаряЗанятостьЯчеек.Скопировать(МассивСтрокЗанятостьЯчеекБезСобытийНаВесьДень, СтрКолонкиСуммирования);
		СобытияКалендаряЗанятостьЯчеекСвернутая.Свернуть("", СтрКолонкиСуммирования);
	КонецЕсли;
	
	МассивКоличествоПересеченийВИндексеВремени = Новый Массив(48);
	МаксимальноеКоличествоПересеченийВДне = 0;
	Для нИндекс = МинимальныйИндексНачало По МаксимальныйИндексКонец Цикл
		Если бПустойДень Или бТолькоСобытияНаВесьДень Тогда
			МассивКоличествоПересеченийВИндексеВремени[нИндекс] = 0;
		Иначе
			МассивКоличествоПересеченийВИндексеВремени[нИндекс] = СобытияКалендаряЗанятостьЯчеекСвернутая[0]["ИндексВремени" + нИндекс];
		КонецЕсли;
		МаксимальноеКоличествоПересеченийВДне = Макс(МаксимальноеКоличествоПересеченийВДне, МассивКоличествоПересеченийВИндексеВремени[нИндекс]);
	КонецЦикла;
	МинимальнаяШиринаСобытияВЯчейках = 4;
	МаксимальноеКоличествоЯчеекВДне = Макс(КоличествоЯчеекВДне, МаксимальноеКоличествоПересеченийВДне * МинимальнаяШиринаСобытияВЯчейках);
	
	МассивСобытийНаВесьДень = Новый Массив();
	МассивСтрокЗанятостьЯчеекСобытияНаВесьДень = СобытияКалендаряЗанятостьЯчеек.НайтиСтроки(Новый Структура("СобытиеНаВесьДень", Истина));
	Для Каждого СтрокаСобытиеНаВесьДень Из МассивСтрокЗанятостьЯчеекСобытияНаВесьДень Цикл
		ОписаниеСобытия = Обработки.CRM_Календарь.ПолучитьСтруктуруОписаниеСобытияБланк();
		ОписаниеСобытия.Вставить("ИндексСобытияНаВесьДень");
		ЗаполнитьЗначенияСвойств(ОписаниеСобытия, СтрокаСобытиеНаВесьДень);
		
		ОписаниеСобытия.ИндексНачало = МинимальныйИндексНачало;
		ОписаниеСобытия.ИндексКонец = МаксимальныйИндексКонец;
		
		Обработки.CRM_Календарь.ЗаполнитьДополнительныеСвойстваСобытия(ОписаниеСобытия, НастройкиОтображения);
		
		МассивСобытийНаВесьДень.Добавить(ОписаниеСобытия);
	КонецЦикла;
	
	СобытияКалендаряЗанятостьЯчеек = СобытияКалендаряЗанятостьЯчеек.Скопировать(МассивСтрокЗанятостьЯчеекБезСобытийНаВесьДень);
	
	МинимальныйИндексЯчеекВремени = НастройкиОтображения.НачалоДняКалендаряЧас * 2;
	МаксимальныйИндексЯчеекВремени = Макс(НастройкиОтображения.КонецДняКалендаряЧас * 2 + 1, МинимальныйИндексЯчеекВремени);
	
	бРазвернутьВверх = ?(СтруктураДанныхКлиент.Свойство("РазвернутьВверх"), Истина, Ложь);
	бРазвернутьВниз = ?(СтруктураДанныхКлиент.Свойство("РазвернутьВниз"), Истина, Ложь);;
	Для Каждого СтрокаЗанятостьЯчейки Из СобытияКалендаряЗанятостьЯчеек Цикл
		Если НачалоДня(СтрокаЗанятостьЯчейки.ПериодНачало) < НачалоДня(ДатаДень) Тогда
			ИндексНачало = ?(бРазвернутьВверх, МинимальныйИндексСобытияНачало, МинимальныйИндексЯчеекВремени);
		Иначе
			ИндексНачало = Макс(СтрокаЗанятостьЯчейки.ИндексНачало, ?(бРазвернутьВверх, МинимальныйИндексСобытияНачало, МинимальныйИндексЯчеекВремени));
		КонецЕсли;
		Если НачалоДня(СтрокаЗанятостьЯчейки.ПериодОкончание) > НачалоДня(ДатаДень) Тогда
			ИндексКонец = ?(бРазвернутьВверх, МаксимальныйИндексСобытияКонец, МаксимальныйИндексЯчеекВремени);
		Иначе
			ИндексКонец = Мин(СтрокаЗанятостьЯчейки.ИндексКонец, ?(бРазвернутьВниз, МаксимальныйИндексСобытияКонец, МаксимальныйИндексЯчеекВремени));
		КонецЕсли;
		
		СтрокаЗанятостьЯчейки.ИндексНачало	= ИндексНачало;
		СтрокаЗанятостьЯчейки.ИндексКонец	= ИндексКонец;
	КонецЦикла;
	
	Если бРазвернутьВверх Тогда МинимальныйИндексЯчеекВремени = МинимальныйИндексСобытияНачало; КонецЕсли;
	Если бРазвернутьВниз Тогда МаксимальныйИндексЯчеекВремени = МаксимальныйИндексСобытияКонец; КонецЕсли;
	
	МакетЯчейки = ПолучитьМакетНаСервере("КалендарьЯчейки", бВебКлиент);
	
	ТабДокументДень = МакетЯчейки.ПолучитьОбласть(1, 1, МаксимальныйИндексЯчеекВремени - МинимальныйИндексЯчеекВремени + 1, МаксимальноеКоличествоЯчеекВДне);
	
	СоответствиеОписанийСобытий = Новый Соответствие();
	
	ТаблицаОбластиВыводаСобытий = Новый ТаблицаЗначений();
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("Событие");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("ИдентификаторСобытия");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("ОписаниеСобытия");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("НачалоОбластиСтрока");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("НачалоОбластиКолонка");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("КонецОбластиСтрока");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("КонецОбластиКолонка");
	
	ТаблицаПустыхОбластей = Новый ТаблицаЗначений();
	ТаблицаПустыхОбластей.Колонки.Добавить("НачалоОбластиСтрока");
	ТаблицаПустыхОбластей.Колонки.Добавить("НачалоОбластиКолонка");
	ТаблицаПустыхОбластей.Колонки.Добавить("КонецОбластиКолонка");
	
	Если МаксимальноеКоличествоПересеченийВДне <= 1 Тогда
		СформироватьОбластиОтрисовкиСобытийБезПересечений(
			МинимальныйИндексЯчеекВремени,
			МаксимальныйИндексЯчеекВремени,
			бПустойДень,
			СтруктураОтбораПоРесурсу,
			СобытияКалендаряЗанятостьЯчеек,
			ТаблицаПустыхОбластей,
			МаксимальноеКоличествоЯчеекВДне,
			ДатаДень,
			НастройкиОтображения,
			ТаблицаОбластиВыводаСобытий);
		//
		
	Иначе
		МассивСтруктураОбластиИндексаЯчейкиВремени = Новый Массив(48);
		
		КартаЗанятыхИндексовПоЯчейкамВремени = Новый Массив(48);
		ШиринаКартыЗанятыхИндексовПоЯчейкамВремени = Макс(МаксимальноеКоличествоПересеченийВДне, 1);
		
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
		ТаблицаКартаИндексовВремени = Новый ТаблицаЗначений();
		ТаблицаКартаИндексовВремени.Колонки.Добавить("ИндексЯчейкиВремени", ОписаниеТиповЧисло);
		ТаблицаКартаИндексовВремени.Колонки.Добавить("КоличествоПересечений", ОписаниеТиповЧисло);
		ТаблицаКартаИндексовВремени.Колонки.Добавить("ИндексНачало", ОписаниеТиповЧисло);
		ТаблицаКартаИндексовВремени.Колонки.Добавить("ПустаяСтрока", Новый ОписаниеТипов("Булево"));
		ТаблицаКартаИндексовВремени.Колонки.Добавить("МассивСобытий");
		Для нИндекс = МинимальныйИндексНачало По МаксимальныйИндексКонец Цикл
			НоваяСтрока = ТаблицаКартаИндексовВремени.Добавить();
			НоваяСтрока.ИндексЯчейкиВремени = нИндекс;
			Если нИндекс < МинимальныйИндексЯчеекВремени Или нИндекс > МаксимальныйИндексЯчеекВремени Тогда
				НоваяСтрока.КоличествоПересечений = 0;
			Иначе
				НоваяСтрока.КоличествоПересечений = МассивКоличествоПересеченийВИндексеВремени[нИндекс];
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ИндексВремени" + нИндекс, 1);
			Если СтруктураОтбораПоРесурсу <> Неопределено Тогда
				Для Каждого КлючЗначениеОтбора Из СтруктураОтбораПоРесурсу Цикл
					СтруктураПоиска.Вставить(КлючЗначениеОтбора.Ключ, КлючЗначениеОтбора.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если НоваяСтрока.КоличествоПересечений = 0 Тогда
				НоваяСтрока.МассивСобытий = Новый Массив();
				НоваяСтрока.ПустаяСтрока = Истина;
			Иначе
				НоваяСтрока.МассивСобытий = СобытияКалендаряЗанятостьЯчеек.НайтиСтроки(СтруктураПоиска);
				НоваяСтрока.ПустаяСтрока = Ложь;
			КонецЕсли;
			
			НоваяСтрока.ИндексНачало = нИндекс;
			
			КартаЗанятыхИндексовПоЯчейкамВремени[нИндекс] = Новый Массив(ШиринаКартыЗанятыхИндексовПоЯчейкамВремени);
		КонецЦикла;
		ТаблицаКартаИндексовВремени.Сортировать("КоличествоПересечений УБЫВ, ИндексНачало ВОЗР");
		
		МассивСоответствиеЯчеек = Новый Массив(48);
		Для нИндексКартаИндексов = МинимальныйИндексНачало По МаксимальныйИндексКонец Цикл
			СтрокаКартаИндексаВремени = ТаблицаКартаИндексовВремени[нИндексКартаИндексов];
			ИндексЯчейкиВремени = СтрокаКартаИндексаВремени.ИндексЯчейкиВремени;
			НомерСтрокиВТабДокументеДень = ИндексЯчейкиВремени - МинимальныйИндексЯчеекВремени + 1;
			
			МассивСоответствиеЯчеек[ИндексЯчейкиВремени] = нИндексКартаИндексов;
			
			Если ИндексЯчейкиВремени < МинимальныйИндексЯчеекВремени Или ИндексЯчейкиВремени > МаксимальныйИндексЯчеекВремени Тогда Продолжить; КонецЕсли;
			
			КоличествоПересечений = СтрокаКартаИндексаВремени.КоличествоПересечений;
			бПустаяСтрока = СтрокаКартаИндексаВремени.ПустаяСтрока;
			
			Если бПустаяСтрока Тогда
				СтрокаПустаяОбласть = ТаблицаПустыхОбластей.Добавить();
				СтрокаПустаяОбласть.НачалоОбластиСтрока = ИндексЯчейкиВремени + 1 - МинимальныйИндексЯчеекВремени;
				СтрокаПустаяОбласть.НачалоОбластиКолонка = 1;
				СтрокаПустаяОбласть.КонецОбластиКолонка = МаксимальноеКоличествоЯчеекВДне;
				
			Иначе
				СтрокиЗанятостьЯчейки = СтрокаКартаИндексаВремени.МассивСобытий;
				
				СтруктураОбласти = Новый Структура(
					"МассивОписанийСобытий,
					|КартаОбластиСтроки,
					|КоличествоПересечений,
					|КоличествоЗначемыхПересечений,
					|МассивСобытийПоГоризотальнымИндексам,
					|МассивПересекаемыхСобытийПоГоризонтальнымИндексам",
					Новый Массив(),
					Новый Массив(МаксимальноеКоличествоПересеченийВДне),
					0,
					0,
					Новый Массив(Макс(МаксимальноеКоличествоПересеченийВДне, 1)),
					Новый Массив(Макс(МаксимальноеКоличествоПересеченийВДне, 1)));
				//
				
				МаксимальныйГоризонтальныйИндексСобытияВСтроке = 0;
				МаксимальноеКоличествоЗначемыхПересечений = 0;
				Для Каждого СтрокаЗанятостьЯчейки Из СтрокиЗанятостьЯчейки Цикл
					ОписаниеСобытия = СоответствиеОписанийСобытий[СтрокаЗанятостьЯчейки.ИдентификаторСобытия];
					
					Если ОписаниеСобытия = Неопределено Тогда
						ОписаниеСобытия = Обработки.CRM_Календарь.ПолучитьСтруктуруОписаниеСобытияБланк();
						ЗаполнитьЗначенияСвойств(ОписаниеСобытия, СтрокаЗанятостьЯчейки);
						
						Если НачалоДня(ОписаниеСобытия.ПериодНачало) < НачалоДня(ДатаДень) Тогда
							ОписаниеСобытия.ИндексНачало = МинимальныйИндексЯчеекВремени;
						Иначе
							ОписаниеСобытия.ИндексНачало = Макс(МинимальныйИндексЯчеекВремени, ОписаниеСобытия.ИндексНачало);
						КонецЕсли;
						Если НачалоДня(ОписаниеСобытия.ПериодОкончание) > НачалоДня(ДатаДень) Тогда
							ОписаниеСобытия.ИндексКонец = МаксимальныйИндексЯчеекВремени;
						Иначе
							ОписаниеСобытия.ИндексКонец = Мин(МаксимальныйИндексЯчеекВремени, ОписаниеСобытия.ИндексКонец);
						КонецЕсли;
						
						ГоризонтальныйИндексСобытия = 0;
						КоличествоЗначемыхПересечений = 1;
						Для нИндекс = ОписаниеСобытия.ИндексНачало По ОписаниеСобытия.ИндексКонец Цикл
							КоличествоЗначемыхПересечений = Макс(КоличествоЗначемыхПересечений, МассивКоличествоПересеченийВИндексеВремени[нИндекс]);
							НайденныйНезанятыйИндекс = КартаЗанятыхИндексовПоЯчейкамВремени[нИндекс].Найти(Неопределено);
							Если НайденныйНезанятыйИндекс = Неопределено Тогда
								ГоризонтальныйИндексСобытия = ШиринаКартыЗанятыхИндексовПоЯчейкамВремени - 1;
							Иначе
								ГоризонтальныйИндексСобытия = Макс(ГоризонтальныйИндексСобытия, НайденныйНезанятыйИндекс);
							КонецЕсли;
							
							Для н = 0 По МаксимальноеКоличествоПересеченийВДне - 1 Цикл
								СтруктураОбласти.МассивПересекаемыхСобытийПоГоризонтальнымИндексам[н] = КартаЗанятыхИндексовПоЯчейкамВремени[нИндекс][н];
							КонецЦикла;
						КонецЦикла;
						ОписаниеСобытия.КоличествоЗначемыхПересечений = Макс(КоличествоЗначемыхПересечений, ГоризонтальныйИндексСобытия);
						МаксимальноеКоличествоЗначемыхПересечений = Макс(МаксимальноеКоличествоЗначемыхПересечений, КоличествоЗначемыхПересечений);
						
						ОписаниеСобытия.ГоризонтальныйИндексСобытия = ГоризонтальныйИндексСобытия;
						Для нИндекс = ОписаниеСобытия.ИндексНачало По ОписаниеСобытия.ИндексКонец Цикл
							КартаЗанятыхИндексовПоЯчейкамВремени[нИндекс][ГоризонтальныйИндексСобытия] = ОписаниеСобытия;
						КонецЦикла;
						
						БлижайшееСобытиеСлева = Неопределено;
						БлижайшееСобытиеСправа = Неопределено;
						БлижайшийГорИндексСлева = -1;
						БлижайшийГорИндексСправа = 999999999;
						БлижайшийНезаполненныйГорИндексСлева = -1;
						БлижайшийНезаполненныйГорИндексСправа = 999999999;
						Для н = ОписаниеСобытия.ИндексНачало По ОписаниеСобытия.ИндексКонец Цикл
							ПересекаемыеСобытия = КартаЗанятыхИндексовПоЯчейкамВремени[н];
							
							Для Каждого ПересекаемоеСобытие Из ПересекаемыеСобытия Цикл
								Если ТипЗнч(ПересекаемоеСобытие) = Тип("Структура") И ТипЗнч(ПересекаемоеСобытие.ГоризонтальныйИндексСобытия) = Тип("Число") Тогда
									Если ПересекаемоеСобытие.ИдентификаторСобытия = ОписаниеСобытия.ИдентификаторСобытия Тогда
										Продолжить;
									КонецЕсли;
									Если ЗначениеЗаполнено(ПересекаемоеСобытие.ШиринаОбласти) И ЗначениеЗаполнено(ПересекаемоеСобытие.НомерПервойКолонкиОбласти) Тогда
										Если ПересекаемоеСобытие.ГоризонтальныйИндексСобытия < ОписаниеСобытия.ГоризонтальныйИндексСобытия Тогда
											Если ПересекаемоеСобытие.ГоризонтальныйИндексСобытия > БлижайшийГорИндексСлева Тогда
												БлижайшееСобытиеСлева = ПересекаемоеСобытие;
												БлижайшийГорИндексСлева = ПересекаемоеСобытие.ГоризонтальныйИндексСобытия;
											КонецЕсли;
										ИначеЕсли ПересекаемоеСобытие.ГоризонтальныйИндексСобытия > ОписаниеСобытия.ГоризонтальныйИндексСобытия Тогда
											Если ПересекаемоеСобытие.ГоризонтальныйИндексСобытия < БлижайшийГорИндексСправа Тогда
												БлижайшееСобытиеСправа = ПересекаемоеСобытие;
												БлижайшийГорИндексСправа = ПересекаемоеСобытие.ГоризонтальныйИндексСобытия;
											КонецЕсли;
										КонецЕсли;
									Иначе
										Если ПересекаемоеСобытие.ГоризонтальныйИндексСобытия < ОписаниеСобытия.ГоризонтальныйИндексСобытия Тогда
											Если ПересекаемоеСобытие.ГоризонтальныйИндексСобытия > БлижайшийНезаполненныйГорИндексСлева Тогда
												БлижайшееСобытиеСлева = ПересекаемоеСобытие;
												БлижайшийНезаполненныйГорИндексСлева = ПересекаемоеСобытие.ГоризонтальныйИндексСобытия;
											КонецЕсли;
										ИначеЕсли ПересекаемоеСобытие.ГоризонтальныйИндексСобытия > ОписаниеСобытия.ГоризонтальныйИндексСобытия Тогда
											Если ПересекаемоеСобытие.ГоризонтальныйИндексСобытия < БлижайшийНезаполненныйГорИндексСправа Тогда
												БлижайшееСобытиеСправа = ПересекаемоеСобытие;
												БлижайшийНезаполненныйГорИндексСправа = ПересекаемоеСобытие.ГоризонтальныйИндексСобытия;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						
						//Если БлижайшееСобытиеСлева <> Неопределено И БлижайшееСобытиеСправа <> Неопределено И БлижайшийГорИндексСлева > БлижайшийНезаполненныйГорИндексСлева И БлижайшийГорИндексСправа < БлижайшийНезаполненныйГорИндексСправа Тогда
						//	Если	ЗначениеЗаполнено(БлижайшееСобытиеСлева.ШиринаОбласти)
						//		И	ЗначениеЗаполнено(БлижайшееСобытиеСлева.НомерПервойКолонкиОбласти)
						//		И	ЗначениеЗаполнено(БлижайшееСобытиеСправа.ШиринаОбласти)
						//		И	ЗначениеЗаполнено(БлижайшееСобытиеСправа.НомерПервойКолонкиОбласти) Тогда
						//		//
						//		ТекШиринаОбласти = БлижайшееСобытиеСправа.НомерПервойКолонкиОбласти - (БлижайшееСобытиеСлева.НомерПервойКолонкиОбласти + БлижайшееСобытиеСлева.ШиринаОбласти);
						//		Если ТекШиринаОбласти > 0 Тогда
						//			ОписаниеСобытия.НомерПервойКолонкиОбласти = БлижайшееСобытиеСлева.НомерПервойКолонкиОбласти + БлижайшееСобытиеСлева.ШиринаОбласти;
						//			ОписаниеСобытия.ШиринаОбласти = ТекШиринаОбласти;
						//		КонецЕсли;
						//	КонецЕсли;
						//КонецЕсли;
						
						Обработки.CRM_Календарь.ЗаполнитьДополнительныеСвойстваСобытия(ОписаниеСобытия, НастройкиОтображения);
						
						СоответствиеОписанийСобытий.Вставить(СтрокаЗанятостьЯчейки.ИдентификаторСобытия, ОписаниеСобытия);
					КонецЕсли;
					
					МаксимальноеКоличествоЗначемыхПересечений = Макс(МаксимальноеКоличествоЗначемыхПересечений, ОписаниеСобытия.КоличествоЗначемыхПересечений);
					МаксимальныйГоризонтальныйИндексСобытияВСтроке = Макс(МаксимальныйГоризонтальныйИндексСобытияВСтроке, ОписаниеСобытия.ГоризонтальныйИндексСобытия);
				
					СтруктураОбласти.МассивОписанийСобытий.Добавить(ОписаниеСобытия);
					СтруктураОбласти.КартаОбластиСтроки[ОписаниеСобытия.ГоризонтальныйИндексСобытия] = КоличествоЗначемыхПересечений;
					
					СтруктураОбласти.МассивСобытийПоГоризотальнымИндексам[ОписаниеСобытия.ГоризонтальныйИндексСобытия] = ОписаниеСобытия;
				КонецЦикла;
				Для нИндекс = 0 По МаксимальноеКоличествоПересеченийВДне - 1 Цикл
					Если СтруктураОбласти.МассивСобытийПоГоризотальнымИндексам[нИндекс] <> Неопределено Тогда
						СтруктураОбласти.МассивПересекаемыхСобытийПоГоризонтальнымИндексам[нИндекс] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				СтруктураОбласти.КоличествоПересечений = СтрокиЗанятостьЯчейки.Количество();
				СтруктураОбласти.КоличествоЗначемыхПересечений = МаксимальноеКоличествоЗначемыхПересечений;
				
				МассивСтруктураОбластиИндексаЯчейкиВремени[ИндексЯчейкиВремени] = СтруктураОбласти.КартаОбластиСтроки;
				
				МассивКартаЗанятостиЯчеек = РазметитьБланкСтрокиДень(
					ТабДокументДень,
					НомерСтрокиВТабДокументеДень,
					СтруктураОбласти.КартаОбластиСтроки,
					СтруктураОбласти.КоличествоПересечений,
					СтруктураОбласти.КоличествоЗначемыхПересечений,
					СтруктураОбласти.МассивОписанийСобытий,
					МаксимальноеКоличествоЯчеекВДне,
					СтруктураОбласти.МассивСобытийПоГоризотальнымИндексам,
					СтруктураОбласти.МассивПересекаемыхСобытийПоГоризонтальнымИндексам);
				//
				Для Каждого ОписаниеСобытия Из СтруктураОбласти.МассивОписанийСобытий Цикл
					ГоризонтальныйИндексСобытия = ОписаниеСобытия.ГоризонтальныйИндексСобытия;
					
					бЭтоНачалоСобытия = (ОписаниеСобытия.ИндексНачало = ИндексЯчейкиВремени Или ИндексЯчейкиВремени = МинимальныйИндексЯчеекВремени);
					бЭтоКонецСобытия = (ОписаниеСобытия.ИндексКонец = ИндексЯчейкиВремени Или ИндексЯчейкиВремени = МаксимальныйИндексЯчеекВремени);
					
					Если бЭтоНачалоСобытия Тогда
						СтрокаОбласть = ТаблицаОбластиВыводаСобытий.Найти(ОписаниеСобытия.ИдентификаторСобытия, "ИдентификаторСобытия");
						Если СтрокаОбласть = Неопределено Тогда СтрокаОбласть = ТаблицаОбластиВыводаСобытий.Добавить(); КонецЕсли;
						
						Если СтрокаОбласть.ОписаниеСобытия = Неопределено Тогда СтрокаОбласть.ОписаниеСобытия = ОписаниеСобытия; КонецЕсли;
						Если СтрокаОбласть.Событие = Неопределено Тогда СтрокаОбласть.Событие = ОписаниеСобытия.Событие; КонецЕсли;
						Если Не ЗначениеЗаполнено(СтрокаОбласть.ИдентификаторСобытия) Тогда СтрокаОбласть.ИдентификаторСобытия = ОписаниеСобытия.ИдентификаторСобытия; КонецЕсли;
						СтрокаОбласть.НачалоОбластиСтрока = НомерСтрокиВТабДокументеДень;
						СтрокаОбласть.НачалоОбластиКолонка = МассивКартаЗанятостиЯчеек[ГоризонтальныйИндексСобытия].НомерПервойКолонки;
					КонецЕсли;
					
					Если бЭтоКонецСобытия Тогда
						СтрокаОбласть = ТаблицаОбластиВыводаСобытий.Найти(ОписаниеСобытия.ИдентификаторСобытия, "ИдентификаторСобытия");
						Если СтрокаОбласть = Неопределено Тогда СтрокаОбласть = ТаблицаОбластиВыводаСобытий.Добавить(); КонецЕсли;
						
						Если СтрокаОбласть.ОписаниеСобытия = Неопределено Тогда СтрокаОбласть.ОписаниеСобытия = ОписаниеСобытия; КонецЕсли;
						Если СтрокаОбласть.Событие = Неопределено Тогда СтрокаОбласть.Событие = ОписаниеСобытия.Событие; КонецЕсли;
						Если Не ЗначениеЗаполнено(СтрокаОбласть.ИдентификаторСобытия) Тогда СтрокаОбласть.ИдентификаторСобытия = ОписаниеСобытия.ИдентификаторСобытия; КонецЕсли;
						СтрокаОбласть.КонецОбластиСтрока = НомерСтрокиВТабДокументеДень;
						Если МассивКартаЗанятостиЯчеек[ГоризонтальныйИндексСобытия] = Неопределено Тогда // такого быть не должно
							СтрокаОбласть.КонецОбластиКолонка = Макс(СтрокаОбласть.НачалоОбластиКолонка, МаксимальноеКоличествоЯчеекВДне);
						Иначе
							СтрокаОбласть.КонецОбластиКолонка = МассивКартаЗанятостиЯчеек[ГоризонтальныйИндексСобытия].НомерПоследнейКолонки;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				// Поиск пустых областей в строке индекса времени.
				нКолонкаНачало = Неопределено;
				бНачалоПустойОбласти = Ложь;
				нКолонка = 1;
				Пока Истина Цикл
					Область = ТабДокументДень.Область(НомерСтрокиВТабДокументеДень, нКолонка, НомерСтрокиВТабДокументеДень, нКолонка);
					
					Расшифровка = Область.Расшифровка;
					
					ПрибавитьКИндексуКолонки = 1;
					
					Если Не бНачалоПустойОбласти И ТипЗнч(Расшифровка) <> Тип("Число") Тогда
						бНачалоПустойОбласти = Истина;
						нКолонкаНачало = нКолонка;
					ИначеЕсли Не бНачалоПустойОбласти И ТипЗнч(Расшифровка) = Тип("Число") Тогда
						ПрибавитьКИндексуКолонки = Макс(Расшифровка, 1);
					КонецЕсли;
					
					Если бНачалоПустойОбласти И (ТипЗнч(Расшифровка) = Тип("Число") Или нКолонка >= МаксимальноеКоличествоЯчеекВДне) Тогда
						СтрокаПустаяОбласть = ТаблицаПустыхОбластей.Добавить();
						СтрокаПустаяОбласть.НачалоОбластиСтрока = НомерСтрокиВТабДокументеДень;
						СтрокаПустаяОбласть.НачалоОбластиКолонка = нКолонкаНачало;
						Если нКолонка >= МаксимальноеКоличествоЯчеекВДне Тогда
							СтрокаПустаяОбласть.КонецОбластиКолонка = МаксимальноеКоличествоЯчеекВДне;
							Прервать;
						Иначе
							СтрокаПустаяОбласть.КонецОбластиКолонка = нКолонка - 1;
						КонецЕсли;
						
						бНачалоПустойОбласти = Ложь;
						нКолонкаНачало = Неопределено;
						
						ПрибавитьКИндексуКолонки = 0;
					КонецЕсли;
					
					нКолонка = нКолонка + ПрибавитьКИндексуКолонки;
					Если нКолонка > МаксимальноеКоличествоЯчеекВДне Тогда Прервать; КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//////////////////////////////////
	// Оформление областей
	
	ЛинияПусто		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	ЛинияСобытие	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияГраница	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияНетЛинии	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	// Формирование структуры с дополнительным описанием индексов по календарному графику.
	СоответствиеДополнительноеОписаниеИндексов = Неопределено;
	Если бИспользоватьКалендарныеГрафики И СтруктураОписаниеКалендарногоДня <> Неопределено Тогда
		СоответствиеДополнительноеОписаниеИндексов = Новый Соответствие();
		
		Для ИндексЯчейкиВремени = МинимальныйИндексЯчеекВремени По МаксимальныйИндексЯчеекВремени Цикл
			бИндексНеРабочий = Неопределено;
			бИндексРабочий = Неопределено;
			
			ВремяИндексаНачало = Дата("00010101") + ИндексЯчейкиВремени * 30 * 60;
			ВремяИндексаКонец = ВремяИндексаНачало + 30 * 60 - 1; // + 29мин 59сек
			
			СтруктураОписаниеИндекса = ПолучитьСтруктуруДополнительногоОписанияИндексаВремени(СтруктураОписаниеКалендарногоДня, ВремяИндексаНачало, ВремяИндексаКонец);
			Если СтруктураОписаниеИндекса <> Неопределено Тогда
				СоответствиеДополнительноеОписаниеИндексов.Вставить(ИндексЯчейкиВремени, СтруктураОписаниеИндекса);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Объединение и оформление пустых ячеек.
	СтруктураПоискПрилегающихСобытий = Новый Структура("НачалоОбластиКолонка");
	Для Каждого СтрокаОбласть Из ТаблицаПустыхОбластей Цикл
		ИндексЯчейкиВремени = СтрокаОбласть.НачалоОбластиСтрока + МинимальныйИндексЯчеекВремени - 1;
		
		Область = ТабДокументДень.Область(	СтрокаОбласть.НачалоОбластиСтрока,
											СтрокаОбласть.НачалоОбластиКолонка,
											СтрокаОбласть.НачалоОбластиСтрока,
											СтрокаОбласть.КонецОбластиКолонка);
		//
		Область.Объединить();
		
		ЛинияПустоСПрава = ЛинияПусто;
		СтруктураПоискПрилегающихСобытий.НачалоОбластиКолонка	= СтрокаОбласть.КонецОбластиКолонка + 1;
		НайденныеСтроки = ТаблицаОбластиВыводаСобытий.НайтиСтроки(СтруктураПоискПрилегающихСобытий);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.НачалоОбластиСтрока <= СтрокаОбласть.НачалоОбластиСтрока И НайденнаяСтрока.КонецОбластиСтрока >= СтрокаОбласть.НачалоОбластиСтрока Тогда
					ЛинияПустоСПрава = ЛинияСобытие;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаОбласть.НачалоОбластиСтрока = 1 Тогда
			Область.Обвести(ЛинияНетЛинии, ЛинияГраница, ?(СтрокаОбласть.КонецОбластиКолонка = МаксимальноеКоличествоЯчеекВДне, ЛинияНетЛинии, ЛинияПусто), ЛинияПусто);
		ИначеЕсли СтрокаОбласть.НачалоОбластиСтрока = МаксимальныйИндексЯчеекВремени + 1 Тогда
			Область.Обвести(ЛинияНетЛинии, ЛинияНетЛинии, ?(СтрокаОбласть.КонецОбластиКолонка = МаксимальноеКоличествоЯчеекВДне, ЛинияНетЛинии, ЛинияПустоСПрава), ЛинияГраница);
		Иначе
			Область.Обвести(ЛинияНетЛинии, ЛинияНетЛинии, ?(СтрокаОбласть.КонецОбластиКолонка = МаксимальноеКоличествоЯчеекВДне, ЛинияНетЛинии, ЛинияПустоСПрава), ЛинияПусто);
		КонецЕсли;
		
		ИндексЧас = Цел((СтрокаОбласть.НачалоОбластиСтрока + МинимальныйИндексЯчеекВремени - 1) / 2);
		Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
			Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас))
			Или (СоответствиеДополнительноеОписаниеИндексов <> Неопределено И СоответствиеДополнительноеОписаниеИндексов[ИндексЯчейкиВремени] <> Неопределено И СоответствиеДополнительноеОписаниеИндексов[ИндексЯчейкиВремени].ИндексНеРабочий = Истина) Тогда
			//
			Если ИндексЯчейкиВремени = ИндексТекущегоВремени Тогда
				Область.ЦветФона = НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя;
			Иначе
				Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаНеРабочегоВремениТекущийДень, НастройкиОтображения.КалендарьЦветФонаНеРабочегоВремени);
			КонецЕсли;
		Иначе
			Если ИндексЯчейкиВремени = ИндексТекущегоВремени Тогда
				Область.ЦветФона = НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя;
			Иначе
				Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаРабочегоВремениТекущийДень, НастройкиОтображения.КалендарьЦветФонаРабочегоВремени);
			КонецЕсли;
		КонецЕсли;
		
		Область.Параметр = " ";
		Область.Текст = " ";
		
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "ПустаяОбласть";
		Если ОтборПоРесурсуИмя <> Неопределено Тогда
			Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
			Исключение КонецПопытки;
		КонецЕсли;
		Расшифровка.Дата = ДатаДень;
		Расшифровка.ИндексВремени = СтрокаОбласть.НачалоОбластиСтрока - 1 + МинимальныйИндексЯчеекВремени;
		
		Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
	КонецЦикла;
	
	// Объединение и оформление областей событий.
	Для Каждого СтрокаОбласть Из ТаблицаОбластиВыводаСобытий Цикл
		ОбластьСобытие = ТабДокументДень.Область(	СтрокаОбласть.НачалоОбластиСтрока,
													СтрокаОбласть.НачалоОбластиКолонка,
													СтрокаОбласть.КонецОбластиСтрока,
													СтрокаОбласть.КонецОбластиКолонка);
		//
		
		ОбластьСобытие.Объединить();
		ОбластьСобытие.ЦветФона = СтрокаОбласть.ОписаниеСобытия.ЦветФона;
		ОбластьСобытие.ЦветТекста = СтрокаОбласть.ОписаниеСобытия.ЦветТекста;
		ОбластьСобытие.Обвести(ЛинияСобытие, ЛинияСобытие, ЛинияСобытие, ЛинияСобытие);
		
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		ЗаполнитьЗначенияСвойств(Расшифровка, СтрокаОбласть.ОписаниеСобытия);
		Расшифровка.ТипЯчейки = "Событие";
		Если ОтборПоРесурсуИмя <> Неопределено Тогда
			Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
			Исключение КонецПопытки;
		КонецЕсли;
		Расшифровка.Пользователь = СтрокаОбласть.ОписаниеСобытия.Пользователь;
		Расшифровка.Дата = ДатаДень;
		Расшифровка.ИндексВремени = СтрокаОбласть.НачалоОбластиСтрока - 1 + МинимальныйИндексЯчеекВремени;
		
		ОбластьСобытие.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		Если НастройкиОтображения.КалендарьОтображатьПиктограммы Тогда
			ОбластьСобытие.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
		Иначе
			ОбластьСобытие.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		КонецЕсли;
		ОбластьСобытие.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		ОбластьСобытие.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		ОбластьСобытие.Шрифт = СтрокаОбласть.ОписаниеСобытия.Шрифт;
		
		СтрДобавитьКПараметру = "";
		Если НастройкиОтображения.КалендарьОтображатьПиктограммы И Не бВебКлиент Тогда
			Если РасположитьКартинкуВНачалеОбласти(ТабДокументДень, ОбластьСобытие, СтрокаОбласть.ОписаниеСобытия.Пиктограмма) Тогда
				СтрДобавитьКПараметру = "     ";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьСобытие.Параметр = СтрДобавитьКПараметру + ПолучитьПредставлениеСобытия(СтрокаОбласть.ОписаниеСобытия.Событие, СтрокаОбласть.ОписаниеСобытия, НастройкиОтображения, СтрокаОбласть.КонецОбластиСтрока - СтрокаОбласть.НачалоОбластиСтрока + 1);
	КонецЦикла;
	
	// Формирование свободной области из одной ячейки справа.
	ТабДокументСвободнаяОбласть = Новый ТабличныйДокумент();
	
	СвободнаяОбласть = МакетЯчейки.ПолучитьОбласть(1, 1, 1, 1);
	Область = СвободнаяОбласть.Область(1, 1, 1, 1);
	Для ИндексЯчейкиВремени = МинимальныйИндексЯчеекВремени По МаксимальныйИндексЯчеекВремени Цикл
		Область.Обвести(ЛинияНетЛинии, ?(ИндексЯчейкиВремени = МинимальныйИндексЯчеекВремени, ЛинияГраница, ЛинияНетЛинии), ЛинияПусто, ЛинияПусто);
		
		ИндексЧас = Цел(ИндексЯчейкиВремени / 2);
		Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
			Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас))
			Или (СоответствиеДополнительноеОписаниеИндексов <> Неопределено И СоответствиеДополнительноеОписаниеИндексов[ИндексЯчейкиВремени] <> Неопределено И СоответствиеДополнительноеОписаниеИндексов[ИндексЯчейкиВремени].ИндексНеРабочий = Истина) Тогда
			//
			Если ИндексЯчейкиВремени = ИндексТекущегоВремени Тогда
				Область.ЦветФона = НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя;
			Иначе
				Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаНеРабочегоВремениТекущийДень, НастройкиОтображения.КалендарьЦветФонаНеРабочегоВремени);
			КонецЕсли;
		Иначе
			Если ИндексЯчейкиВремени = ИндексТекущегоВремени Тогда
				Область.ЦветФона = НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя;
			Иначе
				Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаРабочегоВремениТекущийДень, НастройкиОтображения.КалендарьЦветФонаРабочегоВремени);
			КонецЕсли;
		КонецЕсли;
		
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "СвободнаяОбласть";
		Если ОтборПоРесурсуИмя <> Неопределено Тогда
			Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
			Исключение КонецПопытки;
		КонецЕсли;
		Расшифровка.Дата = ДатаДень;
		Расшифровка.ИндексВремени = ИндексЯчейкиВремени;
		
		Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		ТабДокументСвободнаяОбласть.Вывести(СвободнаяОбласть);
	КонецЦикла;
	ТабДокументДеньСоСвободнойОбластью = Новый ТабличныйДокумент();
	ТабДокументДеньСоСвободнойОбластью.Присоединить(ТабДокументДень);
	ТабДокументДеньСоСвободнойОбластью.Присоединить(ТабДокументСвободнаяОбласть);
	ТабДокументДень = ТабДокументДеньСоСвободнойОбластью;
	
	// Формирование области с событиями на весь день.
	Если СтруктураОтбораПоРесурсу = Неопределено Тогда
		// Формирование области с событиями на весь день (объединение происходит в функции
		// СформироватьКалендарьНаСервереДень(...)).
		Если МаксимальныйИндексСобытияНаВесьДень > -1 Тогда
			ТабДокументСобытияНаВесьДень = Новый ТабличныйДокумент();
			
			ОбластьСобытиеНаВесьДень = МакетЯчейки.ПолучитьОбласть(1, 1, 1, ТабДокументДень.ШиринаТаблицы);
			Область = ОбластьСобытиеНаВесьДень.Область(1, 1, 1, ОбластьСобытиеНаВесьДень.ШиринаТаблицы);
			
			РасшифровкаСобытиеНаВесьДеньСвободнаяОбласть = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			РасшифровкаСобытиеНаВесьДеньСвободнаяОбласть.ТипЯчейки = "СобытиеНаВесьДеньСвободнаяОбласть";
			Если ОтборПоРесурсуИмя <> Неопределено Тогда
				Попытка РасшифровкаСобытиеНаВесьДеньСвободнаяОбласть[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
				Исключение КонецПопытки;
			КонецЕсли;
			РасшифровкаСобытиеНаВесьДеньСвободнаяОбласть.Дата = ДатаДень;
			
			СчетчикПустыхОбластей = 0;
			Для нИндексСобытияНаВесьДень = 0 По МаксимальныйИндексСобытияНаВесьДень Цикл
				бЕстьСобытиеВИндексе = Ложь;
				Для Каждого СобытиеНаВесьДень Из МассивСобытийНаВесьДень Цикл
					Если СобытиеНаВесьДень.ИндексСобытияНаВесьДень = нИндексСобытияНаВесьДень Тогда
						бЕстьСобытиеВИндексе = Истина;
						Если СчетчикПустыхОбластей > 0 Тогда
							ОбластьСобытиеНаВесьДеньДополнение = МакетЯчейки.ПолучитьОбласть(1, 1, СчетчикПустыхОбластей, ТабДокументДень.ШиринаТаблицы);
							ОбластьДополнение = ОбластьСобытиеНаВесьДеньДополнение.Область(1, 1, ОбластьСобытиеНаВесьДеньДополнение.ВысотаТаблицы, ОбластьСобытиеНаВесьДеньДополнение.ШиринаТаблицы);
							ОбластьДополнение.Объединить();
							ОбластьДополнение.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень);
							ОбластьДополнение.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
							ОбластьДополнение.Расшифровка = ТаблицаРасшифровок.Индекс(РасшифровкаСобытиеНаВесьДеньСвободнаяОбласть);
							ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДеньДополнение);
						КонецЕсли;
						СчетчикПустыхОбластей = 0;
						
						СтрокиРасшифровки = ТаблицаРасшифровок.НайтиСтроки(Новый Структура("ИдентификаторСобытия", СобытиеНаВесьДень.ИдентификаторСобытия));
						Если СтрокиРасшифровки.Количество() = 0 Тогда
							Расшифровка = Неопределено;
						Иначе
							Расшифровка = СтрокиРасшифровки[0];
						КонецЕсли;
						Если Расшифровка = Неопределено Тогда
							Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
							ЗаполнитьЗначенияСвойств(Расшифровка, СобытиеНаВесьДень);
							Расшифровка.ТипЯчейки = "СобытиеНаВесьДень";
							Если ОтборПоРесурсуИмя <> Неопределено Тогда
								Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
								Исключение КонецПопытки;
							КонецЕсли;
							Расшифровка.Пользователь = СобытиеНаВесьДень.Пользователь;
							Расшифровка.Дата = ДатаДень;
						КонецЕсли;
						
						Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
						Область.ЦветФона = СобытиеНаВесьДень.ЦветФона;
						Область.ЦветТекста = СобытиеНаВесьДень.ЦветТекста;
						
						ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДень);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не бЕстьСобытиеВИндексе Тогда
					СчетчикПустыхОбластей = СчетчикПустыхОбластей + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если СчетчикПустыхОбластей > 0 Тогда
				Если НастройкиОтображения.СворачиватьОбластьСобытийНаВесьДень = Истина Тогда
					Если СчетчикПустыхОбластей > 1 Тогда
						ОбластьСобытиеНаВесьДеньДополнение = МакетЯчейки.ПолучитьОбласть(1, 1, СчетчикПустыхОбластей - 1, ТабДокументДень.ШиринаТаблицы);
						ОбластьДополнение = ОбластьСобытиеНаВесьДеньДополнение.Область(1, 1, ОбластьСобытиеНаВесьДеньДополнение.ВысотаТаблицы, ОбластьСобытиеНаВесьДеньДополнение.ШиринаТаблицы);
						ОбластьДополнение.Объединить();
						ОбластьДополнение.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень);
						ОбластьДополнение.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияНетЛинии);
						ОбластьДополнение.Расшифровка = ТаблицаРасшифровок.Индекс(РасшифровкаСобытиеНаВесьДеньСвободнаяОбласть);
						ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДеньДополнение);
					КонецЕсли;
					ОбластьСобытиеНаВесьДеньДополнение = МакетЯчейки.ПолучитьОбласть(1, 1, 1, ТабДокументДень.ШиринаТаблицы);
					ОбластьДополнение = ОбластьСобытиеНаВесьДеньДополнение.Область(1, 1, ОбластьСобытиеНаВесьДеньДополнение.ВысотаТаблицы, ОбластьСобытиеНаВесьДеньДополнение.ШиринаТаблицы);
					ОбластьДополнение.Объединить();
					ОбластьДополнение.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень);
					ОбластьДополнение.Обвести(ЛинияГраница, ?(СчетчикПустыхОбластей > 1, ЛинияНетЛинии, ЛинияГраница), ЛинияГраница, ЛинияГраница);
					ОбластьДополнение.Расшифровка = ТаблицаРасшифровок.Индекс(РасшифровкаСобытиеНаВесьДеньСвободнаяОбласть);
					ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДеньДополнение);
					
				Иначе
					Если СчетчикПустыхОбластей > 0 Тогда
						ОбластьСобытиеНаВесьДеньДополнение = МакетЯчейки.ПолучитьОбласть(1, 1, СчетчикПустыхОбластей, ТабДокументДень.ШиринаТаблицы);
						ОбластьДополнение = ОбластьСобытиеНаВесьДеньДополнение.Область(1, 1, ОбластьСобытиеНаВесьДеньДополнение.ВысотаТаблицы, ОбластьСобытиеНаВесьДеньДополнение.ШиринаТаблицы);
						ОбластьДополнение.Объединить();
						ОбластьДополнение.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень);
						ОбластьДополнение.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
						ОбластьДополнение.Расшифровка = ТаблицаРасшифровок.Индекс(РасшифровкаСобытиеНаВесьДеньСвободнаяОбласть);
						ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДеньДополнение);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ТабДокументССобытиямиНаВесьДень = Новый ТабличныйДокумент();
			ТабДокументССобытиямиНаВесьДень.Вывести(ТабДокументСобытияНаВесьДень);
			ТабДокументССобытиямиНаВесьДень.Вывести(ТабДокументДень);
			
			ТабДокументДень = ТабДокументССобытиямиНаВесьДень;
		КонецЕсли;
		
	Иначе
		// Формирование области с событиями на весь день.
		Если МаксимальныйИндексСобытияНаВесьДень > -1 Тогда
			ТабДокументСобытияНаВесьДень = Новый ТабличныйДокумент();
			
			ОбластьСобытиеНаВесьДень = МакетЯчейки.ПолучитьОбласть(1, 1, 1, ТабДокументДень.ШиринаТаблицы);
			Область = ОбластьСобытиеНаВесьДень.Область(1, 1, 1, ОбластьСобытиеНаВесьДень.ШиринаТаблицы);
			Область.Объединить();
			Область.Обвести(ЛинияСобытие, ЛинияСобытие, ЛинияСобытие, ЛинияСобытие);
			Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			
			Для Каждого СобытиеНаВесьДень Из МассивСобытийНаВесьДень Цикл
				Область.Шрифт = СобытиеНаВесьДень.Шрифт;
				
				СтрДобавитьКПараметру = "";
				Если НастройкиОтображения.КалендарьОтображатьПиктограммы И Не бВебКлиент Тогда
					Если РасположитьКартинкуВНачалеОбласти(ОбластьСобытиеНаВесьДень, Область, СобытиеНаВесьДень.Пиктограмма) Тогда
						СтрДобавитьКПараметру = "     ";
					КонецЕсли;
				КонецЕсли;
				Область.Параметр = СтрДобавитьКПараметру + ПолучитьПредставлениеСобытия(СобытиеНаВесьДень.Событие, СобытиеНаВесьДень, НастройкиОтображения, 1);
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				ЗаполнитьЗначенияСвойств(Расшифровка, СобытиеНаВесьДень);
				Расшифровка.ТипЯчейки = "СобытиеНаВесьДень";
				Если ОтборПоРесурсуИмя <> Неопределено Тогда
					Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
					Исключение КонецПопытки;
				КонецЕсли;
				Расшифровка.Пользователь = СобытиеНаВесьДень.Пользователь;
				Расшифровка.Дата = ДатаДень;
				
				Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				Область.ЦветФона = СобытиеНаВесьДень.ЦветФона;
				Область.ЦветТекста = СобытиеНаВесьДень.ЦветТекста;
				
				ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДень);
				Если НастройкиОтображения.КалендарьОтображатьПиктограммы Тогда
					Попытка ОбластьСобытиеНаВесьДень.Рисунки.Удалить(ОбластьСобытиеНаВесьДень.Рисунки[0]);
					Исключение КонецПопытки
				КонецЕсли;
			КонецЦикла;
			
			Если МассивСобытийНаВесьДень.ВГраница() < МаксимальныйИндексСобытияНаВесьДень Тогда
				Если НастройкиОтображения.СворачиватьОбластьСобытийНаВесьДень = Истина Тогда
					Если МаксимальныйИндексСобытияНаВесьДень - МассивСобытийНаВесьДень.ВГраница() > 1 Тогда
						ОбластьСобытиеНаВесьДеньДополнение = МакетЯчейки.ПолучитьОбласть(1, 1, МаксимальныйИндексСобытияНаВесьДень - МассивСобытийНаВесьДень.ВГраница() - 1, ТабДокументДень.ШиринаТаблицы);
						Область = ОбластьСобытиеНаВесьДеньДополнение.Область(1, 1, ОбластьСобытиеНаВесьДеньДополнение.ВысотаТаблицы, ОбластьСобытиеНаВесьДеньДополнение.ШиринаТаблицы);
						Область.Объединить();
						Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень);
						Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияНетЛинии);
						
						Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
						Расшифровка.ТипЯчейки = "СобытиеНаВесьДеньСвободнаяОбласть";
						Если ОтборПоРесурсуИмя <> Неопределено Тогда
							Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
							Исключение КонецПопытки;
						КонецЕсли;
						Расшифровка.Дата = ДатаДень;
						
						Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
						
						ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДеньДополнение);
					КонецЕсли;
					ОбластьСобытиеНаВесьДеньДополнение = МакетЯчейки.ПолучитьОбласть(1, 1, 1, ТабДокументДень.ШиринаТаблицы);
					Область = ОбластьСобытиеНаВесьДеньДополнение.Область(1, 1, ОбластьСобытиеНаВесьДеньДополнение.ВысотаТаблицы, ОбластьСобытиеНаВесьДеньДополнение.ШиринаТаблицы);
					Область.Объединить();
					Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень);
					Область.Обвести(ЛинияГраница, ?(МаксимальныйИндексСобытияНаВесьДень - МассивСобытийНаВесьДень.ВГраница() > 1, ЛинияНетЛинии, ЛинияГраница), ЛинияГраница, ЛинияГраница);
					
					Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
					Расшифровка.ТипЯчейки = "СобытиеНаВесьДеньСвободнаяОбласть";
					Если ОтборПоРесурсуИмя <> Неопределено Тогда
						Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
						Исключение КонецПопытки;
					КонецЕсли;
					Расшифровка.Дата = ДатаДень;
					
					Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
					
					ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДеньДополнение);
					
				Иначе
					ОбластьСобытиеНаВесьДеньДополнение = МакетЯчейки.ПолучитьОбласть(1, 1, МаксимальныйИндексСобытияНаВесьДень - МассивСобытийНаВесьДень.ВГраница(), ТабДокументДень.ШиринаТаблицы);
					Область = ОбластьСобытиеНаВесьДеньДополнение.Область(1, 1, ОбластьСобытиеНаВесьДеньДополнение.ВысотаТаблицы, ОбластьСобытиеНаВесьДеньДополнение.ШиринаТаблицы);
					Область.Объединить();
					Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень, НастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень);
					Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
					
					Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
					Расшифровка.ТипЯчейки = "СобытиеНаВесьДеньСвободнаяОбласть";
					Если ОтборПоРесурсуИмя <> Неопределено Тогда
						Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
						Исключение КонецПопытки;
					КонецЕсли;
					Расшифровка.Дата = ДатаДень;
					
					Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
					
					ТабДокументСобытияНаВесьДень.Вывести(ОбластьСобытиеНаВесьДеньДополнение);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокументССобытиямиНаВесьДень = Новый ТабличныйДокумент();
			ТабДокументССобытиямиНаВесьДень.Вывести(ТабДокументСобытияНаВесьДень);
			ТабДокументССобытиямиНаВесьДень.Вывести(ТабДокументДень);
			
			ТабДокументДень = ТабДокументССобытиямиНаВесьДень;
		КонецЕсли;
	КонецЕсли;
	
	// Служебная область - область используется для получения информации о ячейке в обработчиках перетаскивания календаря.
	СтрокаСлужебнойОбласти = ТабДокументДень.ВысотаТаблицы + 1;
	Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
	Для нИндекс = 1 По ТабДокументДень.ШиринаТаблицы Цикл
		Область = ТабДокументДень.Область(СтрокаСлужебнойОбласти, нИндекс, СтрокаСлужебнойОбласти, нИндекс);
		Область.Текст = " ";
		Расшифровка.ТипЯчейки = "СлужебнаяОбласть";
		Расшифровка.Дата = ДатаДень;
		Если ОтборПоРесурсуИмя <> Неопределено Тогда
			Попытка Расшифровка[ОтборПоРесурсуИмя + "Отбор"] = ОтборПоРесурсуЗначение;
			Исключение КонецПопытки;
		КонецЕсли;
		Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура("ОбластьДень,ОбластьБланкЗаголовка");
	СтруктураРезультат.ОбластьДень = ТабДокументДень;
	
	ТабДокументБланкЗаголовка = Новый ТабличныйДокумент();
	Область = МакетЯчейки.ПолучитьОбласть(2, 1, 3, ТабДокументДень.ШиринаТаблицы - 1);
	ТабДокументБланкЗаголовка.Присоединить(Область);
	Область = МакетЯчейки.ПолучитьОбласть(2, 1, 3, 1);
	ТабДокументБланкЗаголовка.Присоединить(Область);
	СтруктураРезультат.ОбластьБланкЗаголовка = ТабДокументБланкЗаголовка;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаСервере
Процедура СформироватьКалендарьНаСервереДень(СтруктураДанныхКлиент)
	ОчиститьКалендарьТабличныйДокумент();
	
	МинимальнаяДата = СтруктураДанныхКлиент.МинимальнаяДата;
	МаксимальнаяДата = СтруктураДанныхКлиент.МаксимальнаяДата;
	
	Если СтруктураДанныхКлиент.Свойство("ТекущаяДата") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ТекущаяДата) Тогда
		ТекущаяДатаВремя = СтруктураДанныхКлиент.ТекущаяДата;
	Иначе
		ТекущаяДатаВремя = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НастройкиОтображения = ПолучитьНастройкиОтображения();
	НастройкиОбщие = ПолучитьНастройкиОбщие();
	
	бИспользоватьКалендарныеГрафики = (НастройкиОбщие.КалендарьИспользоватьКалендарныеГрафики = Истина);
	КалендарныйГрафик = Неопределено;
	Если бИспользоватьКалендарныеГрафики Тогда
		КалендарныйГрафик = ПолучитьКалендарныйГрафик(СтруктураДанныхКлиент.МассивВыбранныхДат);
		Если КалендарныйГрафик = Неопределено Тогда
			бИспользоватьКалендарныеГрафики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	бВебКлиент = СтруктураДанныхКлиент.Свойство("ВебКлиент");
	
	ТаблицаРесурсов = Неопределено;
	Если Объект.ТекущееОтображение = "ПоРесурсам" Или Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		ТаблицаРесурсов = ПолучитьТаблицуВыбранныхРесурсов();
		Если ТаблицаРесурсов.Количество() = 0 Тогда
			ТаблицаРесурсов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Количество ячеек в дне
	БазовоеКоличествоЯчеекВДне = 45;
	МинимальноеКоличествоЯчеекВДне = 4;
	КоличествоЯчеекВДне = Макс(Цел(БазовоеКоличествоЯчеекВДне / ?(СтруктураДанныхКлиент.МассивВыбранныхДат.Количество() = 0, 1, СтруктураДанныхКлиент.МассивВыбранныхДат.Количество()) * НастройкиОтображения.КалендарьМасштабШириныОбластиДень / 100), МинимальноеКоличествоЯчеекВДне);
	Если ТаблицаРесурсов <> Неопределено И ТаблицаРесурсов.Количество() > 1 Тогда
		КоличествоЯчеекВДне = Макс(Цел(КоличествоЯчеекВДне / ТаблицаРесурсов.Количество()), Макс(ТаблицаРесурсов.Количество(), МинимальноеКоличествоЯчеекВДне));
	КонецЕсли;
	
	МакетОформление = ПолучитьМакетНаСервере("КалендарьОформление", бВебКлиент);
	
	ЛинияГраница = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияСобытие = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	бИспользоватьСобытияНаВесьДень = НастройкиОтображения.ИспользоватьСобытияНаВесьДень;
	МаксимальныйИндексСобытияНаВесьДень = -1; // - Используется для вычисления высоты области с событиями на весь день.
	СоответствиеДанныеПоПериоду = ПолучитьДанныеСобытийЗаПериодПоДням(СтруктураДанныхКлиент, НастройкиОтображения, МаксимальныйИндексСобытияНаВесьДень);
	Если бИспользоватьСобытияНаВесьДень Тогда
		Если ТаблицаРесурсов <> Неопределено Тогда
			// Если выводим по ресурсам, то максимальный индекс события на весь день нужно определить исходя из максимального
			// числа событий на весь день отобранных по ресурсу.
			МаксимальныйИндексСобытияНаВесьДень = -1;
			Для Каждого ДатаДень Из СтруктураДанныхКлиент.МассивВыбранныхДат Цикл
				ДанныеПоПериоду = СоответствиеДанныеПоПериоду[НачалоДня(ДатаДень)];
				Для Каждого Ресурс Из ТаблицаРесурсов Цикл
					СтруктураПоиска = Новый Структура("СобытиеНаВесьДень", Истина);
					СтруктураПоиска.Вставить(Ресурс.Имя, Ресурс.Значение);
					НайденныеСтроки = ДанныеПоПериоду.НайтиСтроки(СтруктураПоиска);
					МаксимальныйИндексСобытияНаВесьДень = Макс(МаксимальныйИндексСобытияНаВесьДень, НайденныеСтроки.Количество() - 1);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		// + Всегда одна пустая строка свободная область.
		МаксимальныйИндексСобытияНаВесьДень = МаксимальныйИндексСобытияНаВесьДень + 1;
	КонецЕсли;
	
	бРазвернутьВверх = Ложь;
	бРазвернутьВниз = Ложь;
	МинимальныйИндексСобытияНачало = 47;
	МаксимальныйИндексСобытияКонец = 0;
	МинимальныйИндексЯчеекВремени = НастройкиОтображения.НачалоДняКалендаряЧас * 2;
	МаксимальныйИндексЯчеекВремени = Макс(НастройкиОтображения.КонецДняКалендаряЧас * 2 + 1, МинимальныйИндексЯчеекВремени);
	Для Каждого ДатаДень Из СтруктураДанныхКлиент.МассивВыбранныхДат Цикл
		ДанныеПоПериоду = СоответствиеДанныеПоПериоду[НачалоДня(ДатаДень)];
		СтрокиБезСобытийНаВесьДень = ДанныеПоПериоду.НайтиСтроки(Новый Структура("СобытиеНаВесьДень", Ложь));
		
		Для Каждого СтрокаЗанятостьЯчейки Из СтрокиБезСобытийНаВесьДень Цикл
			Если НачалоДня(СтрокаЗанятостьЯчейки.ПериодНачало) < НачалоДня(ДатаДень) Тогда
				ИндексНачало = 0;
			Иначе
				ИндексНачало = СтрокаЗанятостьЯчейки.ИндексНачало;
			КонецЕсли;
			Если НачалоДня(СтрокаЗанятостьЯчейки.ПериодОкончание) > НачалоДня(ДатаДень) Тогда
				ИндексКонец = 47;
			Иначе
				ИндексКонец = СтрокаЗанятостьЯчейки.ИндексКонец;
			КонецЕсли;
			
			Если ИндексНачало < МинимальныйИндексЯчеекВремени Тогда
				бРазвернутьВверх = Истина;
				МинимальныйИндексСобытияНачало = Мин(МинимальныйИндексСобытияНачало, ИндексНачало);
			КонецЕсли;
			Если ИндексКонец > МаксимальныйИндексЯчеекВремени Тогда
				бРазвернутьВниз = Истина;
				МаксимальныйИндексСобытияКонец = Макс(МаксимальныйИндексСобытияКонец, ИндексКонец);
			КонецЕсли;
			
			// 2-Й вариант, когда если событие хотябы частично видно в текущей шкале - шкала не разворачивается полность.
			//
			//Если ИндексНачало < МинимальныйИндексЯчеекВремени И ИндексКонец < МинимальныйИндексЯчеекВремени Тогда
			//	бРазвернутьВверх = Истина;
			//	МинимальныйИндексСобытияНачало = Мин(МинимальныйИндексСобытияНачало, ИндексНачало);
			//КонецЕсли;
			//Если ИндексКонец > МаксимальныйИндексЯчеекВремени И ИндексНачало > МаксимальныйИндексЯчеекВремени Тогда
			//	бРазвернутьВниз = Истина;
			//	МаксимальныйИндексСобытияКонец = Макс(МаксимальныйИндексСобытияКонец, ИндексКонец);
			//КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если бРазвернутьВверх Тогда
		Если МинимальныйИндексСобытияНачало % 2 <> 0 Тогда
			МинимальныйИндексСобытияНачало = МинимальныйИндексСобытияНачало - 1;
		КонецЕсли;
		СтруктураДанныхКлиент.Вставить("РазвернутьВверх");
		СтруктураДанныхКлиент.Вставить("МинимальныйИндексСобытияНачало", МинимальныйИндексСобытияНачало);
	Иначе
		МинимальныйИндексСобытияНачало = Неопределено;
	КонецЕсли;
	Если бРазвернутьВниз Тогда
		Если МаксимальныйИндексСобытияКонец % 2 = 0 Тогда
			МаксимальныйИндексСобытияКонец = МаксимальныйИндексСобытияКонец + 1;
		КонецЕсли;
		СтруктураДанныхКлиент.Вставить("РазвернутьВниз");
		СтруктураДанныхКлиент.Вставить("МаксимальныйИндексСобытияКонец", МаксимальныйИндексСобытияКонец);
	Иначе
		МаксимальныйИндексСобытияКонец = Неопределено;
	КонецЕсли;
	
	МассивТабДокументыРезультатПоДням = Новый Массив();
	Для Каждого ДатаДень Из СтруктураДанныхКлиент.МассивВыбранныхДат Цикл
		ТабДокументЧастьБланкаЗаголовка = Новый ТабличныйДокумент();
		
		бЭтоТекущийДень = (НачалоДня(ТекущаяДатаВремя) = НачалоДня(ДатаДень));
		бВыделятьЦветомТекущийДень = (бЭтоТекущийДень И СтруктураДанныхКлиент.МассивВыбранныхДат.Количество() > 1);
		
		ДанныеПоПериоду = СоответствиеДанныеПоПериоду[НачалоДня(ДатаДень)];
		
		ТабДокументРезультатДеньОбщий = Новый ТабличныйДокумент();
		
		МассивТабДокументовНаДатуДень = Новый Массив();
		Если ТаблицаРесурсов = Неопределено Тогда
			СтруктураРезультат = ПолучитьТабличныйДокументНаДатуДень(ДанныеПоПериоду, СтруктураДанныхКлиент, ДатаДень, НастройкиОтображения, НастройкиОбщие, КоличествоЯчеекВДне,, МаксимальныйИндексСобытияНаВесьДень, КалендарныйГрафик);
			
			ТабДокументНаДатуДень = СтруктураРезультат.ОбластьДень;
			ТабДокументЧастьБланкаЗаголовка.Присоединить(СтруктураРезультат.ОбластьБланкЗаголовка);
			
			МассивТабДокументовНаДатуДень.Добавить(ТабДокументНаДатуДень);
		Иначе
			Для Каждого Ресурс Из ТаблицаРесурсов Цикл
				СтруктураРезультат = ПолучитьТабличныйДокументНаДатуДень(ДанныеПоПериоду, СтруктураДанныхКлиент, ДатаДень, НастройкиОтображения, НастройкиОбщие, КоличествоЯчеекВДне, Новый Структура(Ресурс.Имя, Ресурс.Значение), МаксимальныйИндексСобытияНаВесьДень, Неопределено);
				
				ТабДокументЧастьБланкаЗаголовка.Присоединить(СтруктураРезультат.ОбластьБланкЗаголовка);
				
				ТабДокументНаДатуДень = СтруктураРезультат.ОбластьДень;
				
				МакетЯчейки = ПолучитьМакетНаСервере("КалендарьЯчейки", бВебКлиент);
				
				ОбластьЗаголовокПользователь = МакетЯчейки.ПолучитьОбласть(2, 1, 3, ТабДокументНаДатуДень.ШиринаТаблицы);
				Область = ОбластьЗаголовокПользователь.Область(1, 1, ОбластьЗаголовокПользователь.ВысотаТаблицы, ОбластьЗаголовокПользователь.ШиринаТаблицы);
				Область.Объединить();
				Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаЗаголовкаРесурсТекущийДень, НастройкиОтображения.КалендарьЦветФонаЗаголовкаРесурс);
				Область.Шрифт = НастройкиОтображения.КалендарьШрифтЗаголовкаРесурс;
				Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаРесурс;
				Попытка
					Если ТипЗнч(Ресурс.Значение) = Тип("СправочникСсылка.Пользователи") И Ресурс.Значение.Недействителен Тогда
						Область.ЦветТекста = НастройкиОтображения.КалендарьЦветТекстаНедействительныйПользователь;
					Иначе
						Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаРесурс;
					КонецЕсли;
				Исключение
					Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаРесурс;
				КонецПопытки;
				Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				Расшифровка.ТипЯчейки = "ЗаголовокРесурс";
				Расшифровка.Дата = НачалоДня(ДатаДень);
				Попытка Расшифровка[Ресурс.Имя + "Отбор"] = Ресурс.Значение;
				Исключение КонецПопытки;
				Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				
				Область.Параметр = Ресурс.Описание;
				
				ТабДокументНаДатуДеньПользователь = Новый ТабличныйДокумент();
				ТабДокументНаДатуДеньПользователь.Вывести(ОбластьЗаголовокПользователь);
				ТабДокументНаДатуДеньПользователь.Вывести(ТабДокументНаДатуДень);
				
				МассивТабДокументовНаДатуДень.Добавить(ТабДокументНаДатуДеньПользователь);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ТабДокументНаДатуДень Из МассивТабДокументовНаДатуДень Цикл
			Область = ТабДокументНаДатуДень.Область(1, 1, ТабДокументНаДатуДень.ВысотаТаблицы - 1, ТабДокументНаДатуДень.ШиринаТаблицы);
			Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
			ТабДокументРезультатДеньОбщий.Присоединить(ТабДокументНаДатуДень);
		КонецЦикла;
		
		МассивТабДокументыРезультатПоДням.Добавить(Новый Структура("ТабличныйДокумент,Дата,ЧастьБланкаЗаголовка", ТабДокументРезультатДеньОбщий, ДатаДень, ТабДокументЧастьБланкаЗаголовка));
	КонецЦикла;
	
	ТабДокументРезультатПоДням = Новый ТабличныйДокумент();
	Для Каждого СтрокаРезультатПоДням Из МассивТабДокументыРезультатПоДням Цикл
		ТабДокументРезультатДень = СтрокаРезультатПоДням.ТабличныйДокумент;
		ДатаДень = СтрокаРезультатПоДням.Дата;
		
		бЭтоТекущийДень = (НачалоДня(ТекущаяДатаВремя) = НачалоДня(ДатаДень));
		бВыделятьЦветомТекущийДень = (бЭтоТекущийДень И СтруктураДанныхКлиент.МассивВыбранныхДат.Количество() > 1);
		
		ТабДокументРезультатДеньСЗаголовками = Новый ТабличныйДокумент();
		
		// Построение табличного документа заголовка для дня.
		ОбластьЗаголовокДень = СтрокаРезультатПоДням.ЧастьБланкаЗаголовка.ПолучитьОбласть(1, 1, 2, СтрокаРезультатПоДням.ЧастьБланкаЗаголовка.ШиринаТаблицы);
		Область = ОбластьЗаголовокДень.Область(1, 1, ОбластьЗаголовокДень.ВысотаТаблицы, ОбластьЗаголовокДень.ШиринаТаблицы);
		Область.Объединить();
		Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.ЦветФона = ?(бВыделятьЦветомТекущийДень, НастройкиОтображения.КалендарьЦветФонаЗаголовкаДеньТекущийДень, НастройкиОтображения.КалендарьЦветФонаЗаголовкаДень);
		Область.Шрифт = НастройкиОтображения.КалендарьШрифтЗаголовкаДень;
		Если бИспользоватьКалендарныеГрафики Тогда // Цвет заголовка дня в зависимости от календарного графика.
			СтруктураОписаниеКалендарногоДня = КалендарныйГрафик[НачалоДня(ДатаДень)];
			Если СтруктураОписаниеКалендарногоДня = Неопределено Или СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю = Истина Тогда
				Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаДень;
			Иначе
				Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаНерабочегоДня;
			КонецЕсли;
		Иначе
			Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаДень;
		КонецЕсли;
		Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
		
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "ЗаголовокДень";
		Расшифровка.Дата = НачалоДня(ДатаДень);
		
		Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		Область.Параметр = Формат(ДатаДень, "ДФ='dd MMMM'") + ", " + ДеньНеделиСтрокой(ДатаДень);
		ТабДокументРезультатДеньСЗаголовками.Вывести(ОбластьЗаголовокДень);
		ТабДокументРезультатДеньСЗаголовками.Вывести(ТабДокументРезультатДень);
		
		ТабДокументРезультатПоДням.Присоединить(ТабДокументРезультатДеньСЗаголовками);
	КонецЦикла;
	
	СтрокаНачалоОбластиСобытийНаВесьДень = 3 + ?(ТаблицаРесурсов = Неопределено, 0, 2);
	
	// Поиск и объединение событий на весь день по дням - только если вывод без ресурсов.
	Если бИспользоватьСобытияНаВесьДень И МаксимальныйИндексСобытияНаВесьДень > -1 И ТаблицаРесурсов = Неопределено Тогда
		Для нСтрока = СтрокаНачалоОбластиСобытийНаВесьДень По СтрокаНачалоОбластиСобытийНаВесьДень + МаксимальныйИндексСобытияНаВесьДень Цикл
			ТекущаяРасшифровка			= Неопределено;
			ТекущаяКолонкаНачало		= Неопределено;
			
			ТекущаяКолонка = 1;
			нИндексДень = 0;
			Пока Истина Цикл
				Область = ТабДокументРезультатПоДням.Область(нСтрока, ТекущаяКолонка, нСтрока, ТекущаяКолонка + МассивТабДокументыРезультатПоДням[нИндексДень].ТабличныйДокумент.ШиринаТаблицы);
				РасшифровкаВТекущейОбласти = Область.Расшифровка;
				Попытка		РасшифровкаВТекущейОбластиЗначение = ТаблицаРасшифровок[РасшифровкаВТекущейОбласти];
				Исключение	РасшифровкаВТекущейОбластиЗначение = Неопределено;
				КонецПопытки;
				
				Если ТекущаяРасшифровка = Неопределено И РасшифровкаВТекущейОбластиЗначение <> Неопределено И РасшифровкаВТекущейОбластиЗначение.ТипЯчейки = "СобытиеНаВесьДень" Тогда
					ТекущаяРасшифровка			= РасшифровкаВТекущейОбласти;
					ТекущаяКолонкаНачало		= ТекущаяКолонка;
				КонецЕсли;
				
				Если ТекущаяРасшифровка <> Неопределено И (ТекущаяРасшифровка <> РасшифровкаВТекущейОбласти Или (ТекущаяРасшифровка = РасшифровкаВТекущейОбласти И нИндексДень >= МассивТабДокументыРезультатПоДням.ВГраница())) Тогда
					бПоследнийДеньВМассиве = (ТекущаяРасшифровка = РасшифровкаВТекущейОбласти И нИндексДень >= МассивТабДокументыРезультатПоДням.ВГраница());
					Если бПоследнийДеньВМассиве Тогда
						ОбластьСобытиеНаВесьДень = ТабДокументРезультатПоДням.Область(нСтрока, ТекущаяКолонкаНачало, нСтрока, ТекущаяКолонка + МассивТабДокументыРезультатПоДням[нИндексДень].ТабличныйДокумент.ШиринаТаблицы - 1);
					Иначе
						ОбластьСобытиеНаВесьДень = ТабДокументРезультатПоДням.Область(нСтрока, ТекущаяКолонкаНачало, нСтрока, ТекущаяКолонка - 1);
					КонецЕсли;
					
					ТекущаяРасшифровкаЗначение = ТаблицаРасшифровок[ТекущаяРасшифровка];
					
					ОбластьСобытиеНаВесьДень.Объединить();
					ОбластьСобытиеНаВесьДень.Обвести(ЛинияСобытие, ЛинияСобытие, ЛинияСобытие, ЛинияСобытие);
					ОбластьСобытиеНаВесьДень.Расшифровка = ТекущаяРасшифровка;
					ОбластьСобытиеНаВесьДень.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
					
					ОбластьСобытиеНаВесьДень.Шрифт = ТекущаяРасшифровкаЗначение.Шрифт;
					
					СтрДобавитьКПараметру = "";
					Если НастройкиОтображения.КалендарьОтображатьПиктограммы И Не бВебКлиент Тогда
						Если РасположитьКартинкуВНачалеОбласти(ТабДокументРезультатПоДням, ОбластьСобытиеНаВесьДень, ТекущаяРасшифровкаЗначение.Пиктограмма) Тогда
							СтрДобавитьКПараметру = "     ";
						КонецЕсли;
					КонецЕсли;
					ОбластьСобытиеНаВесьДень.Текст = СтрДобавитьКПараметру + ПолучитьПредставлениеСобытия(ТекущаяРасшифровкаЗначение.Событие, ТекущаяРасшифровкаЗначение, НастройкиОтображения, 1);
					
					Если бПоследнийДеньВМассиве Тогда
						Прервать;
					Иначе
						ТекущаяРасшифровка			= Неопределено;
						ТекущаяКолонкаНачало		= Неопределено;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ТекущаяКолонка = ТекущаяКолонка + МассивТабДокументыРезультатПоДням[нИндексДень].ТабличныйДокумент.ШиринаТаблицы;
				
				нИндексДень = нИндексДень + 1;
				Если нИндексДень > МассивТабДокументыРезультатПоДням.ВГраница() Тогда Прервать; КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Построение табличного документа шкалы времени.
	бПоказанТолькоТекущийДень = (СтруктураДанныхКлиент.МассивВыбранныхДат.Количество() = 1 И НачалоДня(ТекущаяДатаВремя) = НачалоДня(СтруктураДанныхКлиент.МассивВыбранныхДат[0]));
	
	Если бПоказанТолькоТекущийДень Тогда
		ДатаШкалыВремени = НачалоДня(ТекущаяДатаВремя);
	Иначе
		Если СтруктураДанныхКлиент.МассивВыбранныхДат.Количество() > 0 Тогда
			ДатаШкалыВремени = НачалоДня(СтруктураДанныхКлиент.МассивВыбранныхДат[0]);
		Иначе
			ДатаШкалыВремени = НачалоДня(ТекущаяДатаВремя);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийЧас = Час(ТекущаяДатаВремя);
	ТекущаяМинута = Минута(ТекущаяДатаВремя);
	
	ТабДокументШкалаВремени = Новый ТабличныйДокумент();
	
	Если ТекущаяМинута >= 0  И ТекущаяМинута < 10 Тогда
		ОбластьТекущийЧас = МакетОформление.ПолучитьОбласть("Час1|ВертикальнаяСекция");
	ИначеЕсли ТекущаяМинута >= 10 И ТекущаяМинута < 20 Тогда
		ОбластьТекущийЧас = МакетОформление.ПолучитьОбласть("Час2|ВертикальнаяСекция");
	ИначеЕсли ТекущаяМинута >= 20 И ТекущаяМинута <= 30 Тогда
		ОбластьТекущийЧас = МакетОформление.ПолучитьОбласть("Час3|ВертикальнаяСекция");
	ИначеЕсли ТекущаяМинута > 30 И ТекущаяМинута < 40 Тогда
		ОбластьТекущийЧас = МакетОформление.ПолучитьОбласть("Час4|ВертикальнаяСекция");
	ИначеЕсли ТекущаяМинута >= 40 И ТекущаяМинута < 50 Тогда
		ОбластьТекущийЧас = МакетОформление.ПолучитьОбласть("Час5|ВертикальнаяСекция");
	Иначе
		ОбластьТекущийЧас = МакетОформление.ПолучитьОбласть("Час6|ВертикальнаяСекция");
	КонецЕсли;
	ОбластьТекущийЧас.Рисунки[0].ЦветЛинии = НастройкиОтображения.КалендарьЦветИндикатораТекущегоВремени;
	ОбластьТекущийЧас.Рисунки[0].ЦветФона = НастройкиОтображения.КалендарьЦветИндикатораТекущегоВремени;
	
	ОбластьЧасНеРабочегоВремени = МакетОформление.ПолучитьОбласть("Час|ВертикальнаяСекция");
	ОбластьЧасРабочегоВремени = МакетОформление.ПолучитьОбласть("Час|ВертикальнаяСекция");
	ОбластьЧасПусто = МакетОформление.ПолучитьОбласть("ЧасПусто|ВертикальнаяСекция");
	ОбластьЧасНеРабочегоВремени.Область(1, 1, ОбластьЧасНеРабочегоВремени.ВысотаТаблицы, ОбластьЧасНеРабочегоВремени.ШиринаТаблицы).ЦветФона = НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени;
	ОбластьЧасРабочегоВремени.Область(1, 1, ОбластьЧасРабочегоВремени.ВысотаТаблицы, ОбластьЧасРабочегоВремени.ШиринаТаблицы).ЦветФона = НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени;
	ОбластьЧасПусто.Область(1, 1, ОбластьЧасПусто.ВысотаТаблицы, ОбластьЧасПусто.ШиринаТаблицы).ЦветФона = НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени;
	ОбластьЧасПусто.Параметры.ЗначениеРасшифровки = 99999999;
	
	Если ОбластьЗаголовокДень <> Неопределено Тогда
		ТабДокументШкалаВремени.Вывести(ОбластьЧасПусто);
	КонецЕсли;
	Если ОбластьЗаголовокПользователь <> Неопределено Тогда
		ТабДокументШкалаВремени.Вывести(ОбластьЧасПусто);
	КонецЕсли;
	
	Если МаксимальныйИндексСобытияНаВесьДень > -1  Тогда
		ОбластьПустаяСтрока = МакетОформление.ПолучитьОбласть("ПустаяСтрока|ВертикальнаяСекция");
		ОбластьПустаяСтрока.Область(1, 1, ОбластьПустаяСтрока.ВысотаТаблицы, ОбластьПустаяСтрока.ШиринаТаблицы).ЦветФона = НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени;
		ОбластьПустаяСтрока.Параметры.ЗначениеРасшифровки = 99999999;
		Для нИндекс = 0 По МаксимальныйИндексСобытияНаВесьДень Цикл
			ТабДокументШкалаВремени.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ИндексЧасНачало = НастройкиОтображения.НачалоДняКалендаряЧас;
	ИндексЧасОкончание =  НастройкиОтображения.КонецДняКалендаряЧас;
	Если бРазвернутьВверх Тогда ИндексЧасНачало = Цел(МинимальныйИндексСобытияНачало / 2); КонецЕсли;
	Если бРазвернутьВниз Тогда ИндексЧасОкончание = Цел(МаксимальныйИндексСобытияКонец / 2); КонецЕсли;
	Для ИндексЧас = ИндексЧасНачало По ИндексЧасОкончание Цикл
		Если ИндексЧас = ТекущийЧас Тогда
			ОбластьЧас = ОбластьТекущийЧас;
			Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
				Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас)) Тогда
				//
				ОбластьЧас.Область(1, 1, ОбластьЧас.ВысотаТаблицы, ОбластьЧас.ШиринаТаблицы).ЦветФона = НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени;;
			Иначе
				ОбластьЧас.Область(1, 1, ОбластьЧас.ВысотаТаблицы, ОбластьЧас.ШиринаТаблицы).ЦветФона = НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени;;
			КонецЕсли;
			Если бПоказанТолькоТекущийДень Тогда
				Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
					Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас)) Тогда
					//
					ОбластьЧас.Область(?(ТекущаяМинута <= 30, 1, 2), 3).ЦветФона = НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя;
				Иначе
					ОбластьЧас.Область(?(ТекущаяМинута <= 30, 1, 2), 3).ЦветФона = НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
				Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас)) Тогда
				//
				ОбластьЧас = ОбластьЧасНеРабочегоВремени;
			Иначе
				ОбластьЧас = ОбластьЧасРабочегоВремени;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьЧас.Параметры.Час = ИндексЧас;
		
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "ШкалаВремени";
		Расшифровка.Дата = ДатаШкалыВремени;
		Расшифровка.ИндексВремени = ИндексЧас * 2;
		ОбластьЧас.Параметры.ЗначениеРасшифровки0Минут = ТаблицаРасшифровок.Индекс(Расшифровка);
		ОбластьЧас.Параметры.ЗначениеРасшифровкиЧас = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "ШкалаВремени";
		Расшифровка.Дата = ДатаШкалыВремени;
		Расшифровка.ИндексВремени = ИндексЧас * 2 + 1;
		ОбластьЧас.Параметры.ЗначениеРасшифровки30Минут = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		ОбластьЧас.Область(1, 1, ОбластьЧас.ВысотаТаблицы, ОбластьЧас.ШиринаТаблицы).Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		ТабДокументШкалаВремени.Вывести(ОбластьЧас);
	КонецЦикла;
	// Служебная область для шкалы времени.
	ТабДокСлужебнаяОбласть = МакетОформление.ПолучитьОбласть("ЧасСлужебнаяОбласть|ВертикальнаяСекция");
	Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
	Расшифровка.ТипЯчейки = "СлужебнаяОбласть";
	Расшифровка.Дата = ДатаШкалыВремени;
	ТабДокСлужебнаяОбласть.Область(1, 1, ТабДокСлужебнаяОбласть.ВысотаТаблицы, ТабДокСлужебнаяОбласть.ШиринаТаблицы).Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
	ТабДокСлужебнаяОбласть.Область(1, 1, ТабДокСлужебнаяОбласть.ВысотаТаблицы, ТабДокСлужебнаяОбласть.ШиринаТаблицы).Текст = " ";
	ТабДокументШкалаВремени.Вывести(ТабДокСлужебнаяОбласть);
	
	ТабДокументРезультат = Новый ТабличныйДокумент();
	ТабДокументРезультат.Присоединить(ТабДокументШкалаВремени);
	ТабДокументРезультат.Присоединить(ТабДокументРезультатПоДням);
	
	Если НастройкиОтображения.СворачиватьОбластьСобытийНаВесьДень = Истина И бИспользоватьСобытияНаВесьДень И МаксимальныйИндексСобытияНаВесьДень > 0 Тогда
		бГруппаСтрокРазвернута = НастройкиОтображения.ОбластьСобытийНаВесьДеньСвернутаПоУмолчанию <> Истина;
		
		ТабДокументРезультат.Область(1, 1, СтрокаНачалоОбластиСобытийНаВесьДень - 1, ТабДокументРезультат.ШиринаТаблицы).Имя = "Заголовки";
		ТабДокументРезультат.Область(СтрокаНачалоОбластиСобытийНаВесьДень, 1, СтрокаНачалоОбластиСобытийНаВесьДень + МаксимальныйИндексСобытияНаВесьДень - 1, ТабДокументРезультат.ШиринаТаблицы).Имя = "СобытияНаВесьДень";
		ТабДокументРезультат.Область(СтрокаНачалоОбластиСобытийНаВесьДень + МаксимальныйИндексСобытияНаВесьДень, 1, ТабДокументРезультат.ВысотаТаблицы, ТабДокументРезультат.ШиринаТаблицы).Имя = "Календарь";
		
		ОбластьЗаголовки			= ТабДокументРезультат.ПолучитьОбласть("Заголовки");
		ОбластьСобытияНаВесьДень	= ТабДокументРезультат.ПолучитьОбласть("СобытияНаВесьДень");
		ОбластьКалндарь				= ТабДокументРезультат.ПолучитьОбласть("Календарь");
		
		ТабДокументРезультат = Новый ТабличныйДокумент();
		ТабДокументРезультат.Вывести(ОбластьЗаголовки);
		
		ТабДокументРезультат.НачатьГруппуСтрок(, бГруппаСтрокРазвернута);
		ТабДокументРезультат.Вывести(ОбластьСобытияНаВесьДень);
		ТабДокументРезультат.ЗакончитьГруппуСтрок();
		
		ТабДокументРезультат.Вывести(ОбластьКалндарь);
	КонецЕсли;
	
	КалендарьТабличныйДокумент.Вывести(ТабДокументРезультат);
	
	ШиринаФиксированнойОбластиСлева = 3;
	ВысотаФиксированнойОбластиСверху = МаксимальныйИндексСобытияНаВесьДень + 3 + ?(ТаблицаРесурсов = Неопределено, 0, 2);
	
	КалендарьТабличныйДокумент.ФиксацияСверху = ВысотаФиксированнойОбластиСверху;
	КалендарьТабличныйДокумент.ФиксацияСлева = ШиринаФиксированнойОбластиСлева;
КонецПроцедуры

&НаСервере
Процедура СформироватьКалендарьНаСервереНеделя(СтруктураДанныхКлиент)
	ОчиститьКалендарьТабличныйДокумент();
	СформироватьКалендарьНаСервереДень(СтруктураДанныхКлиент);
КонецПроцедуры

&НаСервере
Процедура СформироватьКалендарьНаСервереМесяц(СтруктураДанныхКлиент)
	ОчиститьКалендарьТабличныйДокумент();
	
	НастройкиОтображения = ПолучитьНастройкиОтображения();
	НастройкиОбщие = ПолучитьНастройкиОбщие();
	
	КоличествоСекундВДне = 24 * 60 * 60;
	
	бИспользоватьКалендарныеГрафики = (НастройкиОбщие.КалендарьИспользоватьКалендарныеГрафики = Истина);
	КалендарныйГрафик = Неопределено;
	Если бИспользоватьКалендарныеГрафики Тогда
		ТекДата = НачалоДня(СтруктураДанныхКлиент.МассивВыбранныхДат[0]);
		Пока ДеньНедели(ТекДата) > 1 Цикл
			ТекДата = ТекДата - КоличествоСекундВДне;
		КонецЦикла;
		КонечнаяДата = НачалоДня(СтруктураДанныхКлиент.МассивВыбранныхДат[СтруктураДанныхКлиент.МассивВыбранныхДат.ВГраница()]);
		Пока ДеньНедели(КонечнаяДата) < 7 Цикл
			КонечнаяДата = КонечнаяДата + КоличествоСекундВДне;
		КонецЦикла;
		МассивДатДляКалендарногоГрафика = Новый Массив();
		Пока ТекДата <= КонечнаяДата Цикл
			МассивДатДляКалендарногоГрафика.Добавить(ТекДата);
			ТекДата = ТекДата + КоличествоСекундВДне;
		КонецЦикла;
		
		КалендарныйГрафик = ПолучитьКалендарныйГрафик(МассивДатДляКалендарногоГрафика);
		Если КалендарныйГрафик = Неопределено Тогда
			бИспользоватьКалендарныеГрафики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПериодНачало = НачалоМесяца(Объект.ДатаКалендаря);
	Если ДеньНедели(ПериодНачало) = 1 Тогда
		ПериодНачалоНедели = ПериодНачало;
	Иначе
		ПериодНачалоНедели = НачалоНедели(ПериодНачало - 1);
	КонецЕсли;
	ПериодОкончание = НачалоДня(КонецМесяца(Объект.ДатаКалендаря));
	Если ДеньНедели(ПериодОкончание) = 7 Тогда
		ПериодОкончаниеКонецНедели = ПериодОкончание;
	Иначе
		ПериодОкончаниеКонецНедели	= НачалоДня(ПериодОкончание + (7 - ДеньНедели(ПериодОкончание)) * КоличествоСекундВДне);
	КонецЕсли;
	
	ДанныеНаМесяц = ПолучитьДанныеСобытийЗаПериодПоДням(СтруктураДанныхКлиент, НастройкиОтображения,, НачалоДня(ПериодНачалоНедели), КонецДня(ПериодОкончаниеКонецНедели));
	
	СвернутьТаблицуДанныхПоПериодуПоРесурсам(ДанныеНаМесяц);
	
	Если СтруктураДанныхКлиент.Свойство("ТекущаяДата") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ТекущаяДата) Тогда
		ТекущаяДатаВремя = СтруктураДанныхКлиент.ТекущаяДата;
	Иначе
		ТекущаяДатаВремя = ТекущаяДатаСеанса();
	КонецЕсли;
	
	бВебКлиент = СтруктураДанныхКлиент.Свойство("ВебКлиент");
	
	МакетЯчейки = ПолучитьМакетНаСервере("КалендарьЯчейки");
	
	ТабДокументМесяц = Новый ТабличныйДокумент();
	
	ВысотаДняВЯчейках = НастройкиОтображения.МесяцКоличествоОтображаемыхСобытийВДне + 2;
	ШиринаДняВЯчейкахБазовая = НастройкиОтображения.МесяцШиринаДняВЯчейкахБазовая;
	ШиринаДняВЯчейках = Цел(ШиринаДняВЯчейкахБазовая * НастройкиОтображения.КалендарьМасштабШириныОбластиДень / 100);
	ПомещаетсяСобытийВДне = ВысотаДняВЯчейках - 2; // Высота минус заголовок плюс одна ячейка снизу.
	
	ЛинияГраница	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияСобытие	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЦветФонаПусто	= Новый Цвет();
	
	ТабДокументДень = МакетЯчейки.ПолучитьОбласть(1, 1, ВысотаДняВЯчейках, ШиринаДняВЯчейках);
	ОбластьЗаголовок = ТабДокументДень.Область(1, 1, 1, ТабДокументДень.ШиринаТаблицы);
	ОбластьЗаголовок.Объединить();
	ОбластьЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ОбластьЗаголовок.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
	ОбластьЗаголовок.АвтоВысотаСтроки = Истина;
	ОбластьЗаголовок.ВысотаСтроки = 0;
	
	ОбластьДень = ТабДокументДень.Область(2, 1, ТабДокументДень.ВысотаТаблицы, ТабДокументДень.ШиринаТаблицы);
	
	ОбластьДень.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
	
	ШрифтБазовый	= Новый Шрифт(ОбластьДень.Шрифт);
	ШрифтЖирный		= Новый Шрифт(ШрифтБазовый,,, Истина);
	ШрифтНаклонный	= Новый Шрифт(ШрифтБазовый,,,, Истина);
	
	ТаблицаОбластиВыводаСобытий = Новый ТаблицаЗначений();
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("Событие");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("ОписаниеСобытия");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("НачалоОбластиСтрока");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("КонецОбластиСтрока");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("НачалоОбластиКолонка");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("КонецОбластиКолонка");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("ОбластьРазвернуть");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("КоличествоРазвернуть");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("СвободнаяОбласть");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("Дата");
	
	СоответствиеОписанийСобытий = Новый Соответствие();
	
	ТекДата = ПериодНачалоНедели;
	НомерТекущегоДняНедели = 1;
	НомерТекущейНедели = 1;
	ТекущийСквознойИндексДня = 1;
	ТекущийТабДокументНеделя = Новый ТабличныйДокумент();
	СоответствиеВыведенныхСобытийПоНеделе = Новый Соответствие();
	Пока ТекДата <= ПериодОкончаниеКонецНедели Цикл
		бЭтоПредыдущийМесяц		= (Месяц(ТекДата) < Месяц(ПериодНачало));
		бЭтоТекущийМесяц		= (Месяц(ТекДата) = Месяц(ПериодНачало));
		бЭтоСледующийМесяц		= (Месяц(ТекДата) > Месяц(ПериодНачало));
		бЭтоТекущийДень			= (НачалоДня(ТекущаяДатаВремя) = НачалоДня(ТекДата));
		
		ЗаголовокДеньСтр = Формат(ТекДата, "ДФ=д");
		
		ОбластьЗаголовок.Текст = ЗаголовокДеньСтр;
		ОбластьЗаголовок.Шрифт = НастройкиОтображения.КалендарьШрифтЗаголовковДнейВМесяце;
		Если бИспользоватьКалендарныеГрафики Тогда // Цвет заголовка дня в зависимости от календарного графика.
			СтруктураОписаниеКалендарногоДня = КалендарныйГрафик[НачалоДня(ТекДата)];
			Если СтруктураОписаниеКалендарногоДня = Неопределено Или СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю = Истина Тогда
				ОбластьЗаголовок.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовковДнейВМесяце;
			Иначе
				ОбластьЗаголовок.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаНерабочегоДняМесяц;
			КонецЕсли;
		Иначе
			ОбластьЗаголовок.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовковДнейВМесяце;
		КонецЕсли;
		РасшифровкаЗаголовок = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Если бЭтоПредыдущийМесяц Тогда
			РасшифровкаЗаголовок.ТипЯчейки = "ПредыдущийМесяцЗаголовокДня";
			ОбластьЗаголовок.ЦветФона = ЦветФонаПусто;
		ИначеЕсли бЭтоТекущийМесяц Тогда
			РасшифровкаЗаголовок.ТипЯчейки = "ТекущийМесяцЗаголовокДня";
			ОбластьЗаголовок.ЦветФона = ?(бЭтоТекущийДень, НастройкиОтображения.МесяцЦветФонаЗаголовкаДеньТекущийДень, НастройкиОтображения.МесяцЦветФонаЗаголовкаДень);
		ИначеЕсли бЭтоСледующийМесяц Тогда
			РасшифровкаЗаголовок.ТипЯчейки = "СледующийМесяцЗаголовокДня";
			ОбластьЗаголовок.ЦветФона = ЦветФонаПусто;
		КонецЕсли;
		РасшифровкаЗаголовок.Дата = ТекДата;
		ОбластьЗаголовок.Расшифровка = ТаблицаРасшифровок.Индекс(РасшифровкаЗаголовок);
		
		РасшифровкаДеньПустаяОбласть = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Если бЭтоПредыдущийМесяц Тогда
			РасшифровкаДеньПустаяОбласть.ТипЯчейки = "ПредыдущийМесяцСвободнаяОбласть";
			ОбластьДень.ЦветФона = ЦветФонаПусто;
		ИначеЕсли бЭтоТекущийМесяц Тогда
			РасшифровкаДеньПустаяОбласть.ТипЯчейки = "ТекущийМесяцСвободнаяОбласть";
			ОбластьДень.ЦветФона = ?(бЭтоТекущийДень, НастройкиОтображения.МесяцЦветФонаДеньТекущийДень, НастройкиОтображения.МесяцЦветФонаДень);
		ИначеЕсли бЭтоСледующийМесяц Тогда
			РасшифровкаДеньПустаяОбласть.ТипЯчейки = "СледующийМесяцСвободнаяОбласть";
			ОбластьДень.ЦветФона = ЦветФонаПусто;
		КонецЕсли;
		РасшифровкаДеньПустаяОбласть.Дата = ТекДата;
		ОбластьДень.Расшифровка = ТаблицаРасшифровок.Индекс(РасшифровкаДеньПустаяОбласть);
		
		ТекущийТабДокументНеделя.Присоединить(ТабДокументДень);
		
		МассивСобытийВДне = ДанныеНаМесяц.НайтиСтроки(Новый Структура("ИндексДня" + ТекущийСквознойИндексДня, 1));
		
		КоличествоВыведенныхСобытий = 0;
		МаксимальныйГоризонтальныйИндексВыведенногоСобытия = -1;
		МассивИспользованныхИндексов = Новый Массив(ПомещаетсяСобытийВДне + 1);
		Для Каждого СтрокаСобытие Из МассивСобытийВДне Цикл
			ВыведенноеСобытие = СоответствиеВыведенныхСобытийПоНеделе[СтрокаСобытие.ИдентификаторСобытия];
			Если ВыведенноеСобытие <> Неопределено Тогда
				КоличествоВыведенныхСобытий = КоличествоВыведенныхСобытий + 1;
				МаксимальныйГоризонтальныйИндексВыведенногоСобытия = Макс(МаксимальныйГоризонтальныйИндексВыведенногоСобытия, ВыведенноеСобытие.ГоризонтальныйИндексСобытия);
				МассивИспользованныхИндексов[ВыведенноеСобытие.ГоризонтальныйИндексСобытия] = 1;
				Продолжить;
			КонецЕсли;
			Для нИндексСобытия = 0 По ПомещаетсяСобытийВДне - 1 Цикл
				Если СтрокаСобытие.ГоризонтальныйИндексСобытия = нИндексСобытия Тогда
					ОписаниеСобытия = СоответствиеОписанийСобытий[СтрокаСобытие.ИдентификаторСобытия];
					Если ОписаниеСобытия = Неопределено Тогда
						ОписаниеСобытия = Обработки.CRM_Календарь.ПолучитьСтруктуруОписаниеСобытияБланк();
						ЗаполнитьЗначенияСвойств(ОписаниеСобытия, СтрокаСобытие);
						Обработки.CRM_Календарь.ЗаполнитьДополнительныеСвойстваСобытия(ОписаниеСобытия, НастройкиОтображения);
						СоответствиеОписанийСобытий.Вставить(СтрокаСобытие.ИдентификаторСобытия, ОписаниеСобытия);
					КонецЕсли;
					
					НоваяСтрока = ТаблицаОбластиВыводаСобытий.Добавить();
					НоваяСтрока.Событие = СтрокаСобытие.Событие;
					НоваяСтрока.ОписаниеСобытия = ОписаниеСобытия;
					НоваяСтрока.НачалоОбластиСтрока = нИндексСобытия + 2;
					НоваяСтрока.НачалоОбластиКолонка = (НомерТекущегоДняНедели - 1) * ШиринаДняВЯчейках + 1;
					НоваяСтрока.КонецОбластиКолонка = Мин(НоваяСтрока.НачалоОбластиКолонка + ШиринаДняВЯчейках * (ОписаниеСобытия.ИндексКонец - ТекущийСквознойИндексДня + 1) - 1, ШиринаДняВЯчейках * 7);
					НоваяСтрока.Дата = ТекДата;
					
					СоответствиеВыведенныхСобытийПоНеделе.Вставить(СтрокаСобытие.ИдентификаторСобытия, Новый Структура("Событие,ГоризонтальныйИндексСобытия", СтрокаСобытие.Событие, СтрокаСобытие.ГоризонтальныйИндексСобытия));
					КоличествоВыведенныхСобытий = КоличествоВыведенныхСобытий + 1;
					МаксимальныйГоризонтальныйИндексВыведенногоСобытия = Макс(МаксимальныйГоризонтальныйИндексВыведенногоСобытия, СтрокаСобытие.ГоризонтальныйИндексСобытия);
					МассивИспользованныхИндексов[СтрокаСобытие.ГоризонтальныйИндексСобытия] = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		бОбластьРазвернуть = (МассивСобытийВДне.Количество() > КоличествоВыведенныхСобытий);
		
		Если бОбластьРазвернуть Тогда
			НоваяСтрока = ТаблицаОбластиВыводаСобытий.Добавить();
			НоваяСтрока.ОбластьРазвернуть = Истина;
			НоваяСтрока.Дата = ТекДата;
			НоваяСтрока.НачалоОбластиСтрока = ПомещаетсяСобытийВДне + 2;
			НоваяСтрока.НачалоОбластиКолонка = (НомерТекущегоДняНедели - 1) * ШиринаДняВЯчейках + 1;
			НоваяСтрока.КонецОбластиКолонка = НоваяСтрока.НачалоОбластиКолонка + ШиринаДняВЯчейках - 1;
			НоваяСтрока.КоличествоРазвернуть = МассивСобытийВДне.Количество() - КоличествоВыведенныхСобытий;
			
			Для н = КоличествоВыведенныхСобытий По МассивСобытийВДне.ВГраница() Цикл
				СтрокаСобытиеНеПопавшееВОбласть = МассивСобытийВДне[н];
				
				НайденныеСтроки = ТаблицаРасшифровок.НайтиСтроки(Новый Структура("ИдентификаторСобытия", СтрокаСобытиеНеПопавшееВОбласть.ИдентификаторСобытия));
				Если НайденныеСтроки.Количество() = 0 Тогда
					ОписаниеСобытия = СоответствиеОписанийСобытий[СтрокаСобытие.ИдентификаторСобытия];
					Если ОписаниеСобытия = Неопределено Тогда
						ОписаниеСобытия = Обработки.CRM_Календарь.ПолучитьСтруктуруОписаниеСобытияБланк();
						ЗаполнитьЗначенияСвойств(ОписаниеСобытия, СтрокаСобытиеНеПопавшееВОбласть);
						Обработки.CRM_Календарь.ЗаполнитьДополнительныеСвойстваСобытия(ОписаниеСобытия, НастройкиОтображения);
						СоответствиеОписанийСобытий.Вставить(СтрокаСобытиеНеПопавшееВОбласть.ИдентификаторСобытия, ОписаниеСобытия);
					КонецЕсли;
					Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
					ЗаполнитьЗначенияСвойств(Расшифровка, ОписаниеСобытия);
					Расшифровка.ТипЯчейки = "Событие";
					Расшифровка.Событие = СтрокаСобытиеНеПопавшееВОбласть.Событие;
					Расшифровка.Дата = ТекДата;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Поиск и объединение пустых областей.
		ВерхняяГраницаПоискаСвободныхОбластей = ?(бОбластьРазвернуть, ПомещаетсяСобытийВДне - 1, ПомещаетсяСобытийВДне);
		НомерСтрокиНачало = Неопределено;
		Для н = 0 По ВерхняяГраницаПоискаСвободныхОбластей Цикл
			Если НомерСтрокиНачало = Неопределено И МассивИспользованныхИндексов[н] = Неопределено Тогда
				НомерСтрокиНачало = н;
			ИначеЕсли НомерСтрокиНачало <> Неопределено И МассивИспользованныхИндексов[н] <> Неопределено Тогда
				НоваяСтрока = ТаблицаОбластиВыводаСобытий.Добавить();
				НоваяСтрока.СвободнаяОбласть = Истина;
				НоваяСтрока.Дата = ТекДата;
				НоваяСтрока.НачалоОбластиСтрока = НомерСтрокиНачало + 2;
				НоваяСтрока.КонецОбластиСтрока = н + 1;
				НоваяСтрока.НачалоОбластиКолонка = (НомерТекущегоДняНедели - 1) * ШиринаДняВЯчейках + 1;
				НоваяСтрока.КонецОбластиКолонка = НоваяСтрока.НачалоОбластиКолонка + ШиринаДняВЯчейках - 1;
				
				НомерСтрокиНачало = Неопределено;
			КонецЕсли;
		КонецЦикла;
		Если НомерСтрокиНачало <> Неопределено Тогда
			НоваяСтрока = ТаблицаОбластиВыводаСобытий.Добавить();
			НоваяСтрока.СвободнаяОбласть = Истина;
			НоваяСтрока.Дата = ТекДата;
			НоваяСтрока.НачалоОбластиСтрока = НомерСтрокиНачало + 2;
			НоваяСтрока.КонецОбластиСтрока = ВерхняяГраницаПоискаСвободныхОбластей + 2;
			НоваяСтрока.НачалоОбластиКолонка = (НомерТекущегоДняНедели - 1) * ШиринаДняВЯчейках + 1;
			НоваяСтрока.КонецОбластиКолонка = НоваяСтрока.НачалоОбластиКолонка + ШиринаДняВЯчейках - 1;
		КонецЕсли;
		
		ТекДата = ТекДата + КоличествоСекундВДне;
		ТекущийСквознойИндексДня = ТекущийСквознойИндексДня + 1;
		
		НомерТекущегоДняНедели = НомерТекущегоДняНедели + 1;
		Если НомерТекущегоДняНедели > 7 Тогда
			// Сменилась неделя - отрисовываем области событий, присоединяем готовую неделю к общему табличному документу.
			Для Каждого СтрокаОбластьСобытия Из ТаблицаОбластиВыводаСобытий Цикл
				Если СтрокаОбластьСобытия.ОбластьРазвернуть = Истина Тогда
					Область = ТекущийТабДокументНеделя.Область(СтрокаОбластьСобытия.НачалоОбластиСтрока, СтрокаОбластьСобытия.НачалоОбластиКолонка, СтрокаОбластьСобытия.НачалоОбластиСтрока, СтрокаОбластьСобытия.КонецОбластиКолонка);
					Область.Объединить();
					Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
					Область.Текст = "+" + НСтр("ru = 'еще'") + " " + СтрокаОбластьСобытия.КоличествоРазвернуть;
					Область.Гиперссылка = Истина;
					
					Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
					Расшифровка.ТипЯчейки = "ОткрытьСписокСобытийНаДень";
					Расшифровка.Дата = СтрокаОбластьСобытия.Дата;
					
					Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				ИначеЕсли СтрокаОбластьСобытия.СвободнаяОбласть = Истина Тогда
					Область = ТекущийТабДокументНеделя.Область(СтрокаОбластьСобытия.НачалоОбластиСтрока, СтрокаОбластьСобытия.НачалоОбластиКолонка, СтрокаОбластьСобытия.КонецОбластиСтрока, СтрокаОбластьСобытия.КонецОбластиКолонка);
					Область.Объединить();
					Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
					
					Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
					Расшифровка.ТипЯчейки = "ДеньВМесяцеСвободнаяОбласть";
					Расшифровка.Дата = СтрокаОбластьСобытия.Дата;
					
					Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				ИначеЕсли СтрокаОбластьСобытия.ОписаниеСобытия <> Неопределено Тогда
					Область = ТекущийТабДокументНеделя.Область(СтрокаОбластьСобытия.НачалоОбластиСтрока, СтрокаОбластьСобытия.НачалоОбластиКолонка, СтрокаОбластьСобытия.НачалоОбластиСтрока, СтрокаОбластьСобытия.КонецОбластиКолонка);
					Область.Объединить();
					Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
					
					Область.Обвести(ЛинияСобытие, ЛинияСобытие, ЛинияСобытие, ЛинияСобытие);
					Область.ЦветФона = СтрокаОбластьСобытия.ОписаниеСобытия.ЦветФона;
					Область.ЦветТекста = СтрокаОбластьСобытия.ОписаниеСобытия.ЦветТекста;
					
					Область.Шрифт = СтрокаОбластьСобытия.ОписаниеСобытия.Шрифт;
					
					СтрДобавитьКПараметру = "";
					Если НастройкиОтображения.КалендарьОтображатьПиктограммы И Не бВебКлиент Тогда
						Если РасположитьКартинкуВНачалеОбласти(ТекущийТабДокументНеделя, Область, СтрокаОбластьСобытия.ОписаниеСобытия.Пиктограмма) Тогда
							СтрДобавитьКПараметру = "     ";
						КонецЕсли;
					КонецЕсли;
					Область.Текст = СтрДобавитьКПараметру + ПолучитьПредставлениеСобытия(СтрокаОбластьСобытия.Событие, СтрокаОбластьСобытия.ОписаниеСобытия, НастройкиОтображения, 1);
					
					Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
					ЗаполнитьЗначенияСвойств(Расшифровка, СтрокаОбластьСобытия.ОписаниеСобытия);
					Расшифровка.ТипЯчейки = "Событие";
					Расшифровка.Событие = СтрокаОбластьСобытия.Событие;
					Расшифровка.Дата = СтрокаОбластьСобытия.Дата;
					
					Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				КонецЕсли;
			КонецЦикла;
			
			СоответствиеВыведенныхСобытийПоНеделе = Новый Соответствие();
			ТаблицаОбластиВыводаСобытий.Очистить();
			
			ТабДокументМесяц.Вывести(ТекущийТабДокументНеделя);
			ТекущийТабДокументНеделя = Новый ТабличныйДокумент();
			
			НомерТекущейНедели = НомерТекущейНедели + 1;
			
			НомерТекущегоДняНедели = 1;
		КонецЕсли;
	КонецЦикла;
	
	// Вывод верхней строки - Понедельний, Вторник, ...., Воскресенье.
	ТабДокументПонедельникВоскресенье = МакетЯчейки.ПолучитьОбласть(1, 1, 1, ШиринаДняВЯчейках * 7);
	Для нИндексДеньНедели = 0 По 6 Цикл
		Область = ТабДокументПонедельникВоскресенье.Область(1, нИндексДеньНедели * ШиринаДняВЯчейках + 1, 1, нИндексДеньНедели * ШиринаДняВЯчейках + ШиринаДняВЯчейках);
		Область.Объединить();
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.ЦветФона = НастройкиОтображения.КалендарьЦветФонаЗаголовкаДень;
		Область.Шрифт = НастройкиОтображения.КалендарьШрифтЗаголовковДнейНеделиВМесяце;
		Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовковДнейНеделиВМесяце;
		Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
		Область.Текст = Формат(НачалоНедели(ПериодОкончание) + КоличествоСекундВДне * нИндексДеньНедели, "ДФ=дддд");
		Область.АвтоВысотаСтроки = Истина;
		Область.ВысотаСтроки = 0;
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "ЗаголовокМесяца";
		Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
	КонецЦикла;
	
	КалендарьТабличныйДокумент.Вывести(ТабДокументПонедельникВоскресенье);
	КалендарьТабличныйДокумент.Вывести(ТабДокументМесяц);
	
	КалендарьТабличныйДокумент.ФиксацияСверху = 1;
КонецПроцедуры

&НаСервере
Функция КороткоеПредставлениеМесяца(ДатаМесяц)
	Возврат НРег(Лев(Формат(ДатаМесяц, "ДФ=ММММ"), 3));
КонецФункции

&НаСервере
Функция ПредставлениеДатыДляСписка(ДатаВремя, ТолькоВремя = Ложь, ВключатьГод = Истина, ВключатьВремя = Истина)
	Если ТолькоВремя Тогда
		СтрДата = Формат(ДатаВремя, "ДФ='ЧЧ:мм'");
	Иначе
		СтрДата = Формат(ДатаВремя, "ДФ='дд'") + " " + КороткоеПредставлениеМесяца(ДатаВремя);
		
		Если ВключатьВремя Тогда
			СтрДата = СтрДата + " " + Формат(ДатаВремя, "ДФ='ЧЧ:мм'");
		КонецЕсли;
		
		Если ВключатьГод Тогда
			СтрДата = СтрДата + " " + Формат(ДатаВремя, "ДФ='гггг'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрДата;
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеПериодаДляСписка(ПериодНачало, ПериодОкончание, ТолькоВремя = Ложь, ТолькоДата = Ложь)
	Если ТолькоДата Тогда
		Если НачалоДня(ПериодНачало) = НачалоДня(ПериодОкончание) Тогда
			ПредставлениеПериода = ПредставлениеДатыДляСписка(ПериодНачало, Ложь, Истина, Ложь);
		Иначе
			Если ПериодНачало = ПериодОкончание Тогда
				ПредставлениеПериода = ПредставлениеДатыДляСписка(ПериодНачало, Ложь, Ложь, Ложь);
			Иначе
				Если НачалоГода(ПериодНачало) = НачалоГода(ПериодОкончание) Тогда
					ПредставлениеПериода =
							ПредставлениеДатыДляСписка(ПериодНачало, Ложь, Ложь, Ложь)
						+	" - "
						+	ПредставлениеДатыДляСписка(ПериодОкончание, Ложь, Ложь, Ложь);
					//
				Иначе
					ПредставлениеПериода =
							ПредставлениеДатыДляСписка(ПериодНачало, Ложь, Истина, Ложь)
						+	" - "
						+	ПредставлениеДатыДляСписка(ПериодОкончание, Ложь, Истина, Ложь);
					//
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ТолькоВремя Тогда
			Если ПериодНачало = ПериодОкончание Тогда
				ПредставлениеПериода = ПредставлениеДатыДляСписка(ПериодНачало, Истина, Ложь, Истина);
			Иначе
				ПредставлениеПериода = 
						ПредставлениеДатыДляСписка(ПериодНачало, Истина, Ложь, Истина)
					+	" - "
					+	ПредставлениеДатыДляСписка(ПериодОкончание, Истина, Ложь, Истина);
				//
			КонецЕсли;
		Иначе
			Если ПериодНачало = ПериодОкончание Тогда
				ПредставлениеПериода = ПредставлениеДатыДляСписка(ПериодНачало, Ложь, Ложь, Истина);
			Иначе
				Если НачалоГода(ПериодНачало) = НачалоГода(ПериодОкончание) Тогда
					Если НачалоМесяца(ПериодНачало) = НачалоМесяца(ПериодОкончание) Тогда
						ПредставлениеПериода = 
								ПредставлениеДатыДляСписка(ПериодНачало, Ложь, Ложь, Ложь)
							+	" "
							+	ПредставлениеДатыДляСписка(ПериодНачало, Истина, Ложь, Ложь)
							+	" - "
							+	ПредставлениеДатыДляСписка(ПериодОкончание, Истина, Ложь, Истина);
						//
					Иначе
						ПредставлениеПериода = 
								ПредставлениеДатыДляСписка(ПериодНачало, Ложь, Ложь, Истина)
							+	" - "
							+	ПредставлениеДатыДляСписка(ПериодОкончание, Ложь, Ложь, Истина);
						//
					КонецЕсли;
				Иначе
					ПредставлениеПериода = 
							ПредставлениеДатыДляСписка(ПериодНачало, Ложь, Истина, Истина)
						+	" - "
						+	ПредставлениеДатыДляСписка(ПериодОкончание, Ложь, Истина, Истина);
					//
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
КонецФункции

&НаСервере
Процедура ВывестиДанныеНаДеньВКалендарьСписок(	ДатаДень,
												ТабДокуменРезультат,
												ИсточникДанныхДляВывода,
												ОбластьЗаголовокДень,
												ОбластьЗаголовокСобытие,
												ОбластьОписаниеСобытие,
												ИмяГруппировки,
												ЗначениеГруппировки,
												ТекущаяДатаВремя,
												НастройкиОтображения);
	//
	
	Если СписокКалендаряГруппироватьПоДням Тогда
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "СписокЗаголовокДня";
		Расшифровка.Дата = ДатаДень;
		Если ИмяГруппировки <> "БезГруппировок" Тогда
			Попытка Расшифровка[ИмяГруппировки] = ЗначениеГруппировки;
			Исключение КонецПопытки;
		КонецЕсли;
		ОбластьЗаголовокДень.Параметры.ПараметрРасшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		ДатаДеньВчера = НачалоДня(НачалоДня(ТекущаяДатаВремя) - 1);
		ДатаДеньСегодня = НачалоДня(ТекущаяДатаВремя);
		ДатаДеньЗавтра = НачалоДня(КонецДня(ТекущаяДатаВремя) + 1);
		
		ЗаголовокДень = Формат(ДатаДень, "ДФ='дд ММММ гггг'") + " г";
		ЗаголовокДень = ЗаголовокДень + ", " + ДеньНеделиСтрокой(ДатаДень);
		СтрокаДобавить = "";
		Если НачалоДня(ДатаДень) = НачалоДня(ДатаДеньВчера) Тогда
			СтрокаДобавить = НСтр("ru = 'вчера'");
		ИначеЕсли НачалоДня(ДатаДень) = НачалоДня(ДатаДеньСегодня) Тогда
			СтрокаДобавить = НСтр("ru = 'сегодня'");
		ИначеЕсли НачалоДня(ДатаДень) = НачалоДня(ДатаДеньЗавтра) Тогда
			СтрокаДобавить = НСтр("ru = 'завтра'");
		КонецЕсли;
		Если Не ПустаяСтрока(СтрокаДобавить) Тогда
			ЗаголовокДень = ЗаголовокДень + " (" + СтрокаДобавить + ")";
		КонецЕсли;
		
		ОбластьЗаголовокДень.Параметры.ЗаголовокДень = ЗаголовокДень;
		
		ТабДокуменРезультат.Вывести(ОбластьЗаголовокДень);
	КонецЕсли;
	
	бВыводитьКлиента = Ложь;
	бВыводитьПользователей = Ложь;
	НайденнаяСтрока = НастройкиОтображения.СписокПредставлениеСобытияВКалендаре.НайтиПоЗначению("Клиент");
	Если НайденнаяСтрока <> Неопределено Тогда
		бВыводитьКлиента = НайденнаяСтрока.Пометка;
	КонецЕсли;
	НайденнаяСтрока = НастройкиОтображения.СписокПредставлениеСобытияВКалендаре.НайтиПоЗначению("Пользователь");
	Если НайденнаяСтрока <> Неопределено Тогда
		бВыводитьПользователей = НайденнаяСтрока.Пометка;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ИсточникДанныхДляВывода Цикл
		//Если СтрокаДанных.СобытиеНаВесьДень Тогда
		//	ПредставлениеПериода = ПолучитьПредставлениеПериодаДляСписка(СтрокаДанных.ПериодНачало, СтрокаДанных.ПериодОкончание, СписокКалендаряГруппироватьПоДням, Истина);
		//Иначе
			ПредставлениеПериода = ПолучитьПредставлениеПериодаДляСписка(СтрокаДанных.ПериодНачало, СтрокаДанных.ПериодОкончание, СписокКалендаряГруппироватьПоДням);
		//КонецЕсли;
		
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "Событие";
		ЗаполнитьЗначенияСвойств(Расшифровка, СтрокаДанных);
		Расшифровка.Дата = ДатаДень;
		
		ОбластьЗаголовокСобытие.Параметры.ПараметрРасшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		ОбластьЗаголовокСобытие.Параметры.Период = ПредставлениеПериода;
		
		СтрПредставление = СтрокаДанных.Тема;
		Если бВыводитьКлиента И ЗначениеЗаполнено(СтрокаДанных.Партнер) Тогда
			Если Не ПустаяСтрока(СтрПредставление) Тогда
				СтрПредставление = СтрПредставление + ", ";
			КонецЕсли;
			СтрПредставление = СтрПредставление + Строка(СтрокаДанных.Партнер);
		КонецЕсли;
		Если бВыводитьПользователей Тогда
			Попытка		_МассивПользователей = СтрокаДанных.МассивПользователей;
			Исключение	_МассивПользователей = Неопределено;
			КонецПопытки;
			Если _МассивПользователей = Неопределено Или _МассивПользователей.Количество() = 0 Тогда
				_МассивПользователей = Новый Массив();
				_МассивПользователей.Добавить(СтрокаДанных.Пользователь);
			КонецЕсли;
			Если Не ПустаяСтрока(СтрПредставление) Тогда
				СтрПредставление = СтрПредставление + " ";
			КонецЕсли;
			Для н = 0 По _МассивПользователей.ВГраница() Цикл
				Если н = 0 Тогда
					СтрПредставление = СтрПредставление + "(";
				КонецЕсли;
				СтрПредставление = СтрПредставление + Строка(_МассивПользователей[0]);
				Если н = _МассивПользователей.ВГраница() Тогда
					СтрПредставление = СтрПредставление + ")";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьЗаголовокСобытие.Параметры.Тема = СтрПредставление;
		
		бСобытиеЗавершено = (СтрокаДанных.Завершено = Истина);
		Если бСобытиеЗавершено Тогда
			ОбластьЗаголовокСобытие.Области[0].Шрифт = НастройкиОтображения.КалендарьШрифтТекстаЗавершенногоСобытия;
		Иначе
			ОбластьЗаголовокСобытие.Области[0].Шрифт = НастройкиОтображения.КалендарьШрифтТекстаСобытия;
		КонецЕсли;
		
		Если СтрокаДанных.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
			ОбластьЗаголовокСобытие.Области[0].ЦветТекста = НастройкиОтображения.КалендарьЦветТекстаСобытияВажностьВысокая;
		ИначеЕсли СтрокаДанных.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
			ОбластьЗаголовокСобытие.Области[0].ЦветТекста = НастройкиОтображения.КалендарьЦветТекстаСобытияВажностьНизкая;
		Иначе
			ОбластьЗаголовокСобытие.Области[0].ЦветТекста = Новый Цвет();
		КонецЕсли;
		
		ТабДокуменРезультат.Вывести(ОбластьЗаголовокСобытие);
		
		Если КалендарьСписокВыводитьОписаниеСобытия Тогда
			ОписаниеСтрока = СокрЛП(СтрокаДанных.Описание);
			Если ЗначениеЗаполнено(ОписаниеСтрока) Тогда
				// Формирование области описания события.
				ТабДокуменРезультат.НачатьГруппуСтрок(, Ложь);
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				Расшифровка.ТипЯчейки = "Событие";
				ЗаполнитьЗначенияСвойств(Расшифровка, СтрокаДанных);
				Расшифровка.Дата = ДатаДень;
				
				ОбластьОписаниеСобытие.Параметры.ПараметрРасшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				
				ОбластьОписаниеСобытие.Параметры.Описание = ОписаниеСтрока;
				
				ТабДокуменРезультат.Вывести(ОбластьОписаниеСобытие);
				
				ТабДокуменРезультат.ЗакончитьГруппуСтрок();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокНаСервере(СтруктураДанныхКлиент)
	бИспользуетсяПолнотекстовыйПоискСписка = (Объект.ТекущееОтображение = "Список" И ЗначениеЗаполнено(КалендарьСписокТекстПоиска));
	
	Если бИспользуетсяПолнотекстовыйПоискСписка И Не ПризнакСписокОбновлятьПоПолнотекстовомуПоиску Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьКалендарьТабличныйДокумент();
	
	Если СтруктураДанныхКлиент.Свойство("ТекущаяДата") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ТекущаяДата) Тогда
		ТекущаяДатаВремя = СтруктураДанныхКлиент.ТекущаяДата;
	Иначе
		ТекущаяДатаВремя = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НастройкиОтображения = ПолучитьНастройкиОтображения();
	
	МассивВыбранныхДат = Неопределено;
	
	Если бИспользуетсяПолнотекстовыйПоискСписка Тогда
		СоответствиеДанныеЗаПериод = ПолучитьДанныеСобытийЗаПериодПоДням(СтруктураДанныхКлиент, НастройкиОтображения,, Дата("00010101"), Дата("30000101"));
		Если СписокКалендаряГруппироватьПоДням Тогда
			МассивВыбранныхДат = СоответствиеДанныеЗаПериод["МассивВыбранныхДат"];
		КонецЕсли;
	Иначе
		СоответствиеДанныеЗаПериод = ПолучитьДанныеСобытийЗаПериодПоДням(СтруктураДанныхКлиент, НастройкиОтображения);
		Если СписокКалендаряГруппироватьПоДням Тогда
			МассивВыбранныхДат = СтруктураДанныхКлиент.МассивВыбранныхДат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаПериодОбщие = СоответствиеДанныеЗаПериод["ТаблицаОбщая"];
	
	МакетСписок = ПолучитьМакетНаСервере("МакетСписок");
	
	ОбластьЗаголовокГруппировка					= МакетСписок.ПолучитьОбласть("ЗаголовокГруппировка");
	ОбластьЗаголовокГруппировкаНедействительный	= МакетСписок.ПолучитьОбласть("ЗаголовокГруппировка");
	ОбластьЗаголовокГруппировкаНедействительный.Область(1, 1, ОбластьЗаголовокГруппировкаНедействительный.ВысотаТаблицы, ОбластьЗаголовокГруппировкаНедействительный.ШиринаТаблицы).ЦветТекста = НастройкиОтображения.КалендарьЦветТекстаНедействительныйПользователь;
	ОбластьЗаголовокДень						= МакетСписок.ПолучитьОбласть("ЗаголовокДень");
	ОбластьЗаголовокСобытие						= МакетСписок.ПолучитьОбласть(?(СписокКалендаряГруппироватьПоДням,	"ЗаголовокСобытие",	?(ГруппировкаСпискаКалендаря = "БезГруппировок", "ЗаголовокСобытиеБезГруппировкиПоДням", "ЗаголовокСобытиеБезГруппировкиПоДнямСГруппировкой")));
	ОбластьОписаниеСобытие						= МакетСписок.ПолучитьОбласть(?(СписокКалендаряГруппироватьПоДням,	"ОписаниеСобытие",	?(ГруппировкаСпискаКалендаря = "БезГруппировок", "ОписаниеСобытиеБезГруппировкиПоДням", "ОписаниеСобытие")));
	
	ТабДокуменРезультат = Новый ТабличныйДокумент();
	
	ИмяГруппировки = ГруппировкаСпискаКалендаря;
	
	ОбластьКолонки = МакетСписок.ПолучитьОбласть(?(СписокКалендаряГруппироватьПоДням, "Колонки", ?(ГруппировкаСпискаКалендаря = "БезГруппировок", "КолонкиБезГруппировокПоДням", "КолонкиБезГруппировкиПоДнямСГруппировкой")));
	ОбластьКолонки.Параметры.ПериодЗаголовок = ?(СписокКалендаряГруппироватьПоДням, НСтр("ru = 'Время'"), НСтр("ru = 'Период'"));
	
	Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
	Расшифровка.ТипЯчейки = "СписокЗаголовкиКолонок";
	ОбластьКолонки.Область(1, 1, ОбластьКолонки.ВысотаТаблицы, ОбластьКолонки.ШиринаТаблицы).Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
	ТабДокуменРезультат.Вывести(ОбластьКолонки);
	
	Если ИмяГруппировки = "БезГруппировок" Тогда
		МассивРесурсыГруппировки = Неопределено;
	Иначе
		ТаблицаРесурсыГруппировки = СоответствиеДанныеЗаПериод["ТаблицаОбщая"].Скопировать(, ИмяГруппировки);
		
		ТаблицаРесурсыГруппировки.Свернуть(ИмяГруппировки);
		ТаблицаРесурсыГруппировки.Сортировать(ИмяГруппировки + " Возр");
		МассивРесурсыГруппировки = ТаблицаРесурсыГруппировки.ВыгрузитьКолонку(ИмяГруппировки);
	КонецЕсли;
	
	Если ТаблицаРесурсыГруппировки = Неопределено Тогда
		Если СписокКалендаряГруппироватьПоДням Тогда
			Для Каждого ДатаДень Из МассивВыбранныхДат Цикл
				ДатаДеньНачало = НачалоДня(ДатаДень);
				ТаблицаНаДень = СоответствиеДанныеЗаПериод[ДатаДеньНачало];
				Если ТаблицаНаДень = Неопределено Или ТаблицаНаДень.Количество() = 0 Тогда Продолжить; КонецЕсли;
				
				СвернутьТаблицуДанныхПоПериодуПоРесурсам(ТаблицаНаДень);
				
				ВывестиДанныеНаДеньВКалендарьСписок(	ДатаДень,
														ТабДокуменРезультат,
														ТаблицаНаДень,
														ОбластьЗаголовокДень,
														ОбластьЗаголовокСобытие,
														ОбластьОписаниеСобытие,
														"БезГруппировок",
														Неопределено,
														ТекущаяДатаВремя,
														НастройкиОтображения);
				//
			КонецЦикла;
		Иначе
			СвернутьТаблицуДанныхПоПериодуПоРесурсам(ДанныеЗаПериодОбщие);
			
			ВывестиДанныеНаДеньВКалендарьСписок(	ДатаДень,
													ТабДокуменРезультат,
													ДанныеЗаПериодОбщие,
													ОбластьЗаголовокДень,
													ОбластьЗаголовокСобытие,
													ОбластьОписаниеСобытие,
													"БезГруппировок",
													Неопределено,
													ТекущаяДатаВремя,
													НастройкиОтображения);
			//
		КонецЕсли;
	Иначе
		Если Не СписокКалендаряГруппироватьПоДням Тогда 
			СвернутьТаблицуДанныхПоПериодуПоРесурсам(ДанныеЗаПериодОбщие);
		КонецЕсли;
		
		Для Каждого ГруппировкаЗначение Из МассивРесурсыГруппировки Цикл
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			Расшифровка.ТипЯчейки = "СписокЗаголовокГруппировки";
			Попытка Расшифровка[ИмяГруппировки] = ГруппировкаЗначение;
			Исключение КонецПопытки;
			Попытка Расшифровка[ИмяГруппировки + "Отбор"] = ГруппировкаЗначение;
			Исключение КонецПопытки;
			
			Попытка
				Если ТипЗнч(ГруппировкаЗначение) = Тип("СправочникСсылка.Пользователи") И ГруппировкаЗначение.Недействителен Тогда
					ОбластьЗаголовокГруппировкаДляВывода = ОбластьЗаголовокГруппировкаНедействительный;
				Иначе
					ОбластьЗаголовокГруппировкаДляВывода = ОбластьЗаголовокГруппировка;
				КонецЕсли;
			Исключение
				ОбластьЗаголовокГруппировкаДляВывода = ОбластьЗаголовокГруппировка;
			КонецПопытки;
			
			ОбластьЗаголовокГруппировкаДляВывода.Параметры.ПараметрРасшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			ОбластьЗаголовокГруппировкаДляВывода.Параметры.ЗаголовокГруппировка = Строка(ГруппировкаЗначение);
			
			ТабДокуменРезультат.Вывести(ОбластьЗаголовокГруппировкаДляВывода, 0);
			
			ТабДокуменРезультат.НачатьГруппуСтрок(, Истина);
			
			Если СписокКалендаряГруппироватьПоДням Тогда
				Для Каждого ДатаДень Из МассивВыбранныхДат Цикл
					ДатаДеньНачало = НачалоДня(ДатаДень);
					ТаблицаНаДень = СоответствиеДанныеЗаПериод[ДатаДеньНачало];
					Если ТаблицаНаДень = Неопределено Или ТаблицаНаДень.Количество() = 0 Тогда Продолжить; КонецЕсли;
					
					Если Не ОбъектИмеетСвойство(ТаблицаНаДень.Колонки, "МассивПользователей") Тогда
						Если ИмяГруппировки = "Пользователь" Тогда
							СвернутьТаблицуДанныхПоПериодуПоРесурсам(ТаблицаНаДень, Новый Структура("Пользователь", ГруппировкаЗначение), Истина);
						Иначе
							СвернутьТаблицуДанныхПоПериодуПоРесурсам(ТаблицаНаДень);
						КонецЕсли;
					КонецЕсли;
					
					СтрокиПоГруппировке = ТаблицаНаДень.НайтиСтроки(Новый Структура(ИмяГруппировки, ГруппировкаЗначение));
					Если СтрокиПоГруппировке.Количество() = 0 Тогда Продолжить; КонецЕсли;
					
					ВывестиДанныеНаДеньВКалендарьСписок(	ДатаДень,
															ТабДокуменРезультат,
															СтрокиПоГруппировке,
															ОбластьЗаголовокДень,
															ОбластьЗаголовокСобытие,
															ОбластьОписаниеСобытие,
															ИмяГруппировки,
															ГруппировкаЗначение,
															ТекущаяДатаВремя,
															НастройкиОтображения);
					//
				КонецЦикла;
				
			Иначе
				СтрокиПоГруппировке = ДанныеЗаПериодОбщие.НайтиСтроки(Новый Структура(ИмяГруппировки, ГруппировкаЗначение));
				Если СтрокиПоГруппировке.Количество() = 0 Тогда Продолжить; КонецЕсли;
					
				ВывестиДанныеНаДеньВКалендарьСписок(	ДатаДень,
														ТабДокуменРезультат,
														СтрокиПоГруппировке,
														ОбластьЗаголовокДень,
														ОбластьЗаголовокСобытие,
														ОбластьОписаниеСобытие,
														ИмяГруппировки,
														ГруппировкаЗначение,
														ТекущаяДатаВремя,
														НастройкиОтображения);
				//
				
			КонецЕсли;
			
			ТабДокуменРезультат.ЗакончитьГруппуСтрок();
		КонецЦикла;
		
	КонецЕсли;
	
	КалендарьТабличныйДокумент.Вывести(ТабДокуменРезультат);
	КалендарьТабличныйДокумент.ФиксацияСверху = 1;
КонецПроцедуры

&НаСервере
Процедура СформироватьРасписаниеНаСервере(СтруктураДанныхКлиент);
	ОчиститьКалендарьТабличныйДокумент();
	
	бВебКлиент = СтруктураДанныхКлиент.Свойство("ВебКлиент");
	
	МинимальнаяДата = СтруктураДанныхКлиент.МинимальнаяДата;
	МаксимальнаяДата = СтруктураДанныхКлиент.МаксимальнаяДата;
	
	Если СтруктураДанныхКлиент.Свойство("ТекущаяДата") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ТекущаяДата) Тогда
		ТекущаяДатаВремя = СтруктураДанныхКлиент.ТекущаяДата;
	Иначе
		ТекущаяДатаВремя = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПустаяДата = Дата("00010101");
	
	ТекущееВремя = ПустаяДата + (ТекущаяДатаВремя - НачалоДня(ТекущаяДатаВремя));
	
	НастройкиОтображения = ПолучитьНастройкиОтображения();
	НастройкиОбщие = ПолучитьНастройкиОбщие();
	
	МакетОформление = ПолучитьМакетНаСервере("КалендарьОформление");
	МакетЯчейки = ПолучитьМакетНаСервере("КалендарьЯчейки");
	
	КоличествоСекундВДне = 24 * 60 * 60;
	
	бИспользоватьКалендарныеГрафики = (НастройкиОбщие.КалендарьИспользоватьКалендарныеГрафики = Истина);
	КалендарныйГрафик = Неопределено;
	Если бИспользоватьКалендарныеГрафики Тогда
		КалендарныйГрафик = ПолучитьКалендарныйГрафик(СтруктураДанныхКлиент.МассивВыбранныхДат);
		Если КалендарныйГрафик = Неопределено Тогда
			бИспользоватьКалендарныеГрафики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ШиринаОбластиРесурсовВЯчейках = 10;
	ВысотаОбластиРесурсовВЯчейках = НастройкиОтображения.РасписаниеВысотаОбластиРесурса;
	
	ЛинияСобытие = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияГраница = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияГраницаЖирная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	ТаблицаРесурсов = ПолучитьТаблицуВыбранныхРесурсов();
	
	ИндексЧасНачало = НастройкиОтображения.НачалоДняКалендаряЧас;
	ИндексЧасОкончание =  НастройкиОтображения.КонецДняКалендаряЧас;
	ИндексЧасНачалоРабочегоВремени = НастройкиОтображения.НачалоРабочегоДняЧас;
	ИндексЧасКонецРабочегоВремени = НастройкиОтображения.КонецРабочегоДняЧас;
	
	ИнтервалШкалыВремени = НастройкиОтображения.РасписаниеИнтервалШкалыВремени;
	ИнтервалШкалыВремениВСекундах = ИнтервалШкалыВремени * 60;
	КоличествоИнтерваловШкалыВремениВЧасе = Цел(60 / ИнтервалШкалыВремени);
	КоличествоИнтерваловШкалыВремениВДне = КоличествоИнтерваловШкалыВремениВЧасе * (ИндексЧасОкончание - ИндексЧасНачало + 1);
	КоличествоИнтерваловШкалыВремениВПериоде = ((НачалоДня(МаксимальнаяДата) - НачалоДня(МинимальнаяДата)) / КоличествоСекундВДне + 1) * КоличествоИнтерваловШкалыВремениВДне;
	
	МинимальнаяДатаВремяНаШкале = НачалоДня(МинимальнаяДата) + ИндексЧасНачало * 60 * 60;
	МаксимальнаяДатаВремяНаШкале = НачалоДня(МаксимальнаяДата) + ИндексЧасОкончание * 60 * 60 + ИнтервалШкалыВремениВСекундах * (КоличествоИнтерваловШкалыВремениВЧасе - 1);
	
	ДанныеЗаПериод = ПолучитьДанныеСобытийЗаПериодПоДням(СтруктураДанныхКлиент, НастройкиОтображения,, МинимальнаяДатаВремяНаШкале, МаксимальнаяДатаВремяНаШкале);
	
	КоличествоДнейВИнтервале = (НачалоДня(МаксимальнаяДата) - НачалоДня(МинимальнаяДата)) / КоличествоСекундВДне + 1;
	
	КоличестоЯчеекВИнтервале = 2;
	
	ВысотаШкалыВремени = 2;
	НомерСтрокиИндикатора = 4;
	
	ВремяНачалоШкалыВремени = ПустаяДата + ИндексЧасНачало * 60 * 60;
	ВремяОкончаниеШкалыВремени = ПустаяДата + ИндексЧасОкончание * 60 * 60 + КоличествоИнтерваловШкалыВремениВЧасе * ИнтервалШкалыВремени * 60 - 1;
	
	СоответствиеИндексовВремени = Новый Соответствие();
	СоответствиеНомеровДней = Новый Соответствие();
	
	ТабДокументЯчейкаОбластиОтрисовки = МакетЯчейки.ПолучитьОбласть(1, 1, 1, КоличестоЯчеекВИнтервале);
	ОбластьОтрисовка = ТабДокументЯчейкаОбластиОтрисовки.Область(1, 1, ТабДокументЯчейкаОбластиОтрисовки.ВысотаТаблицы, ТабДокументЯчейкаОбластиОтрисовки.ШиринаТаблицы);
	ОбластьОтрисовка.Объединить();
	ОбластьОтрисовкаЛево = ТабДокументЯчейкаОбластиОтрисовки.Область(1, 1, 1, 1);
	ОбластьОтрисовкаПраво = ТабДокументЯчейкаОбластиОтрисовки.Область(1, КоличестоЯчеекВИнтервале, 1, КоличестоЯчеекВИнтервале);
	
	ТабДокументЧас = МакетОформление.ПолучитьОбласть("РасписаниеЧас|РасписаниеВертикальнаяСекцияЧас");
	ТабДокументИнтервал = МакетОформление.ПолучитьОбласть("РасписаниеЧас|РасписаниеВертикальнаяСекцияИнтервал");
	ОбластьЧас = ТабДокументЧас.Область(1, 1, ТабДокументЧас.ВысотаТаблицы, ТабДокументЧас.ШиринаТаблицы);
	ОбластьЧасПраваяЧасть = ТабДокументЧас.Область(1, КоличестоЯчеекВИнтервале, ТабДокументЧас.ВысотаТаблицы, ТабДокументЧас.ШиринаТаблицы);
	ОбластьЧасПраваяЧастьИндикатор = ТабДокументЧас.Область(НомерСтрокиИндикатора, 1, НомерСтрокиИндикатора, ТабДокументЧас.ШиринаТаблицы);
	ОбластьИнтервал = ТабДокументИнтервал.Область(1, 1, ТабДокументИнтервал.ВысотаТаблицы, ТабДокументИнтервал.ШиринаТаблицы);
	ОбластьИнтервалВерх = ТабДокументИнтервал.Область(1, 1, 1, ТабДокументИнтервал.ШиринаТаблицы);
	ОбластьИнтервалНиз = ТабДокументИнтервал.Область(2, 1, ТабДокументИнтервал.ВысотаТаблицы, ТабДокументИнтервал.ШиринаТаблицы);
	
	ТекущееВремяОкругленное = ПустаяДата + Цел((ТекущееВремя - ПустаяДата) / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах;
	
	// Построение шкалы времени и служебной области.
	ТабДокументШкалаВремениВсеДни = Новый ТабличныйДокумент();
	ТабДокументШкалаВремени = Новый ТабличныйДокумент();
	
	ТабДокументСлужебнаяОбластьСнизу = Новый ТабличныйДокумент();
	ТабДокументСлужебнаяОбластьИнтервал = МакетЯчейки.ПолучитьОбласть(1, 1, 1, КоличестоЯчеекВИнтервале);
	СлужебнаяОбластьИнтервал = ТабДокументСлужебнаяОбластьИнтервал.Область(1, 1, ТабДокументСлужебнаяОбластьИнтервал.ВысотаТаблицы, ТабДокументСлужебнаяОбластьИнтервал.ШиринаТаблицы);
	
	МаксимальныйИндексВремениНаШкале = Неопределено;
	ШиринаОбластиДняВЯчейках = Неопределено;
	
	ТекущийНомерДня = 0;
	
	ТекДата = НачалоДня(МинимальнаяДата);
	МассивДат = Новый Массив();
	Пока ТекДата <= НачалоДня(МаксимальнаяДата) Цикл
		МассивДат.Добавить(НачалоДня(ТекДата));
		
		ТабДокументШкалаВремениДень = Новый ТабличныйДокумент();
		СоответствиеНомеровДней.Вставить(НачалоДня(ТекДата), ТекущийНомерДня);
		
		ТекущийИндексВремени = 0;
		Для ИндексЧас = ИндексЧасНачало По ИндексЧасОкончание Цикл
			ВремяВИндексе = ПустаяДата + ИндексЧас * 60 * 60;
			ДатаВремяВИндексе = НачалоДня(ТекДата) + (ВремяВИндексе - ПустаяДата);
			бТекущееВремя = (НачалоДня(ТекДата) = НачалоДня(ТекущаяДатаВремя) И ТекущееВремяОкругленное = ВремяВИндексе);
			
			Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
				Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас)) Тогда
				//
				ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени);
			Иначе
				ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени);
			КонецЕсли;
			
			ОбластьЧас.ЦветФона = ТекущийЦветФона;
			
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			Расшифровка.ТипЯчейки = "РасписаниеШкалаВремени";
			Расшифровка.Дата = ДатаВремяВИндексе;
			ОбластьЧас.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			
			Если ИндексЧас = ИндексЧасОкончание И КоличествоИнтерваловШкалыВремениВЧасе = 1 Тогда
				ОбластьЧасПраваяЧасть.ГраницаСправа = ЛинияГраницаЖирная;
				ОбластьЧасПраваяЧастьИндикатор.ГраницаСправа = ЛинияГраницаЖирная;
			Иначе
				ОбластьЧасПраваяЧасть.ГраницаСправа = ЛинияНетЛинии;
				ОбластьЧасПраваяЧастьИндикатор.ГраницаСправа = ЛинияНетЛинии;
			КонецЕсли;
			
			ТабДокументЧас.Параметры.Час = Формат(ИндексЧас, "ЧН=0; ЧГ=");
			
			ТабДокументШкалаВремениДень.Присоединить(ТабДокументЧас);
			
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			Расшифровка.ТипЯчейки = "СлужебнаяОбласть";
			Расшифровка.Дата = ДатаВремяВИндексе;
			СлужебнаяОбластьИнтервал.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			СлужебнаяОбластьИнтервал.Текст = " ";
			ТабДокументСлужебнаяОбластьСнизу.Присоединить(ТабДокументСлужебнаяОбластьИнтервал);
			
			СоответствиеИндексовВремени.Вставить(ВремяВИндексе, ТекущийИндексВремени);
			
			ТекущийИндексВремени = ТекущийИндексВремени + 1;
			
			Для ИндексИнтервал = 1 По КоличествоИнтерваловШкалыВремениВЧасе - 1 Цикл
				ВремяВИндексе = ПустаяДата + ИндексЧас * 60 * 60 + ИндексИнтервал * ИнтервалШкалыВремени * 60;
				ДатаВремяВИндексе = НачалоДня(ТекДата) + (ВремяВИндексе - ПустаяДата);
				бТекущееВремя = (НачалоДня(ТекДата) = НачалоДня(ТекущаяДатаВремя) И ТекущееВремяОкругленное = ВремяВИндексе);
				
				Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
					Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас)) Тогда
					//
					ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени);
				Иначе
					ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени);
				КонецЕсли;
				
				ОбластьИнтервал.ЦветФона = ТекущийЦветФона;
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				Расшифровка.ТипЯчейки = "РасписаниеШкалаВремени";
				Расшифровка.Дата = ДатаВремяВИндексе;
				ОбластьИнтервал.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				
				Если ИндексЧас = ИндексЧасОкончание И ИндексИнтервал = КоличествоИнтерваловШкалыВремениВЧасе - 1 Тогда
					ОбластьИнтервалВерх.ГраницаСправа = ЛинияГраницаЖирная;
					ОбластьИнтервалНиз.ГраницаСправа = ЛинияГраницаЖирная;
				Иначе
					ОбластьИнтервалВерх.ГраницаСправа = ЛинияНетЛинии;
					ОбластьИнтервалНиз.ГраницаСправа = ЛинияГраница;
				КонецЕсли;
				ТабДокументШкалаВремениДень.Присоединить(ТабДокументИнтервал);
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				Расшифровка.ТипЯчейки = "СлужебнаяОбласть";
				Расшифровка.Дата = ДатаВремяВИндексе;
				СлужебнаяОбластьИнтервал.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				СлужебнаяОбластьИнтервал.Текст = " ";
				ТабДокументСлужебнаяОбластьСнизу.Присоединить(ТабДокументСлужебнаяОбластьИнтервал);
				
				СоответствиеИндексовВремени.Вставить(ВремяВИндексе, ТекущийИндексВремени);
				
				ТекущийИндексВремени = ТекущийИндексВремени + 1;
			КонецЦикла;
		КонецЦикла;
		
		Если МаксимальныйИндексВремениНаШкале = Неопределено Тогда МаксимальныйИндексВремениНаШкале = ТекущийИндексВремени - 1; КонецЕсли;
		Если ШиринаОбластиДняВЯчейках = Неопределено Тогда ШиринаОбластиДняВЯчейках = ТабДокументШкалаВремениДень.ШиринаТаблицы; КонецЕсли;
		
		ОбластьЛинияСнизу = ТабДокументШкалаВремениДень.Область(ВысотаШкалыВремени + 1, 1, ВысотаШкалыВремени + 1, ТабДокументШкалаВремениДень.ШиринаТаблицы);
		ОбластьЛинияСнизу.Объединить();
		ОбластьЛинияСнизу.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраницаЖирная, ЛинияГраница);
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "РасписаниеЗаголовокДня";
		ОбластьЛинияСнизу.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		Если бИспользоватьКалендарныеГрафики Тогда // Цвет заголовка дня в зависимости от календарного графика.
			СтруктураОписаниеКалендарногоДня = КалендарныйГрафик[НачалоДня(ТекДата)];
			Если СтруктураОписаниеКалендарногоДня = Неопределено Или СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю = Истина Тогда
				// цвет остается по умолчанию
			Иначе
				ОбластьЛинияСнизу.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаНерабочегоДня;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьЛинияСнизу.Текст = Формат(ТекДата, "ДФ='дд ММММ гггг'") + НСтр("ru = 'г'");
		
		ТабДокументШкалаВремениВсеДни.Присоединить(ТабДокументШкалаВремениДень);
		
		ТекДата = ТекДата + КоличествоСекундВДне;
		ТекущийНомерДня = ТекущийНомерДня + 1;
	КонецЦикла;
	
	МаксимальныйНомерДня = ТекущийНомерДня - 1;
	
	ТабДокументСвободнаяОбластьСлева = МакетЯчейки.ПолучитьОбласть(1, 1, ТабДокументШкалаВремениДень.ВысотаТаблицы, ШиринаОбластиРесурсовВЯчейках);
	Область = ТабДокументСвободнаяОбластьСлева.Область(1, 1, ТабДокументСвободнаяОбластьСлева.ВысотаТаблицы, ТабДокументСвободнаяОбластьСлева.ШиринаТаблицы);
	Область.Объединить();
	Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
	Область.ЦветФона = НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени;
	Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
	Расшифровка.ТипЯчейки = "РасписаниеСвободнаяОбластьПередШкалойВремени";
	Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
	
	ТабДокументШкалаВремени.Присоединить(ТабДокументСвободнаяОбластьСлева);
	ТабДокументШкалаВремени.Присоединить(ТабДокументШкалаВремениВсеДни);
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ТаблицаЗанятыеИндексыПоРесурсуБланк = Новый ТаблицаЗначений();
	Для нИндекс = 0 По КоличествоИнтерваловШкалыВремениВПериоде - 1 Цикл
		ТаблицаЗанятыеИндексыПоРесурсуБланк.Колонки.Добавить("ИндексИнтервала" + Формат(нИндекс, "ЧН=0; ЧГ="), ОписаниеТиповЧисло);
	КонецЦикла;
	Для нИндекс = 1 По ДанныеЗаПериод.Количество() Цикл
		ТаблицаЗанятыеИндексыПоРесурсуБланк.Добавить();
	КонецЦикла;
	
	МассивИндикаторЗанятостиВремени = Новый Массив(КоличествоИнтерваловШкалыВремениВПериоде);
	СоответствиеОписанияСобытий = Новый Соответствие();
	
	ТаблицаОбластиВыводаСобытий = Новый ТаблицаЗначений();
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("Событие");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("ОписаниеСобытия");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("НачалоОбластиСтрока");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("НачалоОбластиКолонка");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("КонецОбластиКолонка");
	
	ТабДокументСобытия = Новый ТабличныйДокумент();
	Для Каждого Ресурс Из ТаблицаРесурсов Цикл
		
		бИспользоватьКалендарныеГрафики = (НастройкиОбщие.КалендарьИспользоватьКалендарныеГрафики = Истина);
		КалендарныйГрафик = Неопределено;
		Если бИспользоватьКалендарныеГрафики Тогда
			Если Ресурс.Имя = "Пользователь" И ЗначениеЗаполнено(Ресурс.Значение) Тогда
				ПараметрКалендарногоГрафикаПользователь = Ресурс.Значение;
			Иначе
				ПараметрКалендарногоГрафикаПользователь = Неопределено;
			КонецЕсли;
			Если Ресурс.Имя = "Помещение" И ЗначениеЗаполнено(Ресурс.Значение) Тогда
				ПараметрКалендарногоГрафикаПомещение = Ресурс.Значение;
			Иначе
				ПараметрКалендарногоГрафикаПомещение = Неопределено;
			КонецЕсли;
			
			КалендарныйГрафик = ПолучитьКалендарныйГрафик(МассивДат,, ПараметрКалендарногоГрафикаПользователь, ПараметрКалендарногоГрафикаПомещение);
			Если КалендарныйГрафик = Неопределено Тогда
				бИспользоватьКалендарныеГрафики = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Построение строки фона отрисовки.
		ТабДокументСтрокаФонаОтрисовки = Новый ТабличныйДокумент();
		
		ТекДата = НачалоДня(МинимальнаяДата);
		Пока ТекДата <= НачалоДня(МаксимальнаяДата) Цикл
			СтруктураОписаниеКалендарногоДня = Неопределено;
			Если бИспользоватьКалендарныеГрафики Тогда
				СтруктураОписаниеКалендарногоДня = КалендарныйГрафик[НачалоДня(ТекДата)];
			КонецЕсли;
			
			ТабДокументСтрокаФонаОтрисовкиДень = Новый ТабличныйДокумент();
			
			ТекущийИндексВремени = 0;
			Для ИндексЧас = ИндексЧасНачало По ИндексЧасОкончание Цикл
				ВремяВИндексе = ПустаяДата + ИндексЧас * 60 * 60;
				ДатаВремяВИндексе = НачалоДня(ТекДата) + (ВремяВИндексе - ПустаяДата);
				бТекущееВремя = (НачалоДня(ТекДата) = НачалоДня(ТекущаяДатаВремя) И ТекущееВремяОкругленное = ВремяВИндексе);
				
				ДопСтруктураОписаниеИндекса = Неопределено;
				Если СтруктураОписаниеКалендарногоДня <> Неопределено Тогда
					ДопСтруктураОписаниеИндекса = ПолучитьСтруктуруДополнительногоОписанияИндексаВремени(СтруктураОписаниеКалендарногоДня, ВремяВИндексе, ВремяВИндексе + ИнтервалШкалыВремени * 60);
				КонецЕсли;
				
				Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
					Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас))
					Или (ДопСтруктураОписаниеИндекса <> Неопределено И ДопСтруктураОписаниеИндекса.ИндексНеРабочий = Истина) Тогда
					//
					ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени);
				Иначе
					ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени);
				КонецЕсли;
				
				ОбластьОтрисовка.ЦветФона = ТекущийЦветФона;
				
				Если ИндексЧас = ИндексЧасОкончание И КоличествоИнтерваловШкалыВремениВЧасе = 1 Тогда
					ОбластьОтрисовка.ГраницаСправа = ЛинияГраницаЖирная;
				Иначе
					ОбластьОтрисовка.ГраницаСправа = ЛинияГраница;
				КонецЕсли;
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				Расшифровка.ТипЯчейки = "РасписаниеСвободнаяОбласть";
				Расшифровка.Дата = ДатаВремяВИндексе;
				ОбластьОтрисовка.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				ТабДокументСтрокаФонаОтрисовкиДень.Присоединить(ТабДокументЯчейкаОбластиОтрисовки);
				
				ТекущийИндексВремени = ТекущийИндексВремени + 1;
				
				Для ИндексИнтервал = 1 По КоличествоИнтерваловШкалыВремениВЧасе - 1 Цикл
					ВремяВИндексе = ПустаяДата + ИндексЧас * 60 * 60 + ИндексИнтервал * ИнтервалШкалыВремени * 60;
					ДатаВремяВИндексе = НачалоДня(ТекДата) + (ВремяВИндексе - ПустаяДата);
					бТекущееВремя = (НачалоДня(ТекДата) = НачалоДня(ТекущаяДатаВремя) И ТекущееВремяОкругленное = ВремяВИндексе);
					
					ДопСтруктураОписаниеИндекса = Неопределено;
					Если СтруктураОписаниеКалендарногоДня <> Неопределено Тогда
						ДопСтруктураОписаниеИндекса = ПолучитьСтруктуруДополнительногоОписанияИндексаВремени(СтруктураОписаниеКалендарногоДня, ВремяВИндексе, ВремяВИндексе + ИнтервалШкалыВремени * 60);
					КонецЕсли;
					
					Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
						Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас))
						Или (ДопСтруктураОписаниеИндекса <> Неопределено И ДопСтруктураОписаниеИндекса.ИндексНеРабочий = Истина) Тогда
						//
						ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени);
					Иначе
						ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени);
					КонецЕсли;
					
					ОбластьОтрисовка.ЦветФона = ТекущийЦветФона;
					
					Если ИндексЧас = ИндексЧасОкончание И ИндексИнтервал = КоличествоИнтерваловШкалыВремениВЧасе - 1 Тогда
						ОбластьОтрисовка.ГраницаСправа = ЛинияГраницаЖирная;
					Иначе
						ОбластьОтрисовка.ГраницаСправа = ЛинияГраница;
					КонецЕсли;
					
					Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
					Расшифровка.ТипЯчейки = "РасписаниеСвободнаяОбласть";
					Расшифровка.Дата = ДатаВремяВИндексе;
					ОбластьОтрисовка.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
					ТабДокументСтрокаФонаОтрисовкиДень.Присоединить(ТабДокументЯчейкаОбластиОтрисовки);
					
					ТекущийИндексВремени = ТекущийИндексВремени + 1;
				КонецЦикла;
			КонецЦикла;
			
			ТабДокументСтрокаФонаОтрисовки.Присоединить(ТабДокументСтрокаФонаОтрисовкиДень);
			
			ТекДата = ТекДата + КоличествоСекундВДне;
		КонецЦикла;
		
		ТаблицаЗанятыеГоризонтальныеИндексыПоРесурсу = ТаблицаЗанятыеИндексыПоРесурсуБланк.Скопировать();
		
		ТаблицаОбластиВыводаСобытий.Очистить();
		
		ДанныеЗаПериодПоРесурсу = ДанныеЗаПериод.Скопировать();
		
		СтруктураОтбораПоРесурсу = Новый Структура(Ресурс.Имя, Ресурс.Значение);
		СвернутьТаблицуДанныхПоПериодуПоРесурсам(ДанныеЗаПериодПоРесурсу, СтруктураОтбораПоРесурсу);
		
		СтрокиСобытия = ДанныеЗаПериодПоРесурсу.НайтиСтроки(СтруктураОтбораПоРесурсу);
		ТаблицаСобытия = ДанныеЗаПериодПоРесурсу.Скопировать(СтрокиСобытия);
		
		МаксимальныйГоризонтальныйИндексСобытия = 0;
		Для Каждого СтрокаСобытие Из ТаблицаСобытия Цикл
			ОписаниеСобытия = СоответствиеОписанияСобытий[СтрокаСобытие.ИдентификаторСобытия];
			Если ОписаниеСобытия = Неопределено Тогда
				ОписаниеСобытия = Обработки.CRM_Календарь.ПолучитьСтруктуруОписаниеСобытияБланк();
				ЗаполнитьЗначенияСвойств(ОписаниеСобытия, СтрокаСобытие);
				
				// Вычисление индексов начала и окончания события на шкале времени.
				НачалоСобытияВСекундах = ОписаниеСобытия.ПериодНачало - НачалоДня(ОписаниеСобытия.ПериодНачало);
				ОкончаниеСобытияВСекундах = ОписаниеСобытия.ПериодОкончание - НачалоДня(ОписаниеСобытия.ПериодОкончание);
				ВремяНачалоСобытия = ПустаяДата + НачалоСобытияВСекундах;
				ВремяОкончаниеСобытия = ПустаяДата + ОкончаниеСобытияВСекундах;
				
				Если Цел(НачалоСобытияВСекундах / ИнтервалШкалыВремениВСекундах) = НачалоСобытияВСекундах / ИнтервалШкалыВремениВСекундах Тогда
					Если ВремяНачалоСобытия <= ВремяНачалоШкалыВремени Тогда
						// Если событие начинается за началом видимой шкалы времени считаем что оно началось в самом начале дня.
						ПериодНачалоСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодНачало);
					Иначе
						ПериодНачалоСобытияОкругленный = ОписаниеСобытия.ПериодНачало;
					КонецЕсли;
				Иначе
					Если ВремяНачалоСобытия <= ВремяНачалоШкалыВремени Тогда
						// Если событие начинается за началом видимой шкалы времени считаем что оно началось в самом начале дня.
						ПериодНачалоСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодНачало);
					Иначе
						// Округляем время начала в МЕНЬШУЮ сторону по границе интервала шкалы времени.
						ПериодНачалоСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодНачало) + Цел(НачалоСобытияВСекундах / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах;
					КонецЕсли;
				КонецЕсли;
				
				бУменьшитьИндексВремениОкончаниеСобытияНаЕдиницу = Истина;
				Если Цел(ОкончаниеСобытияВСекундах / ИнтервалШкалыВремениВСекундах) = ОкончаниеСобытияВСекундах / ИнтервалШкалыВремениВСекундах Тогда
					Если ВремяОкончаниеСобытия <= ВремяНачалоШкалыВремени Тогда
						// Если событие заканчивается за началом видимой шкалы времени считаем что оно закончилось в самом начале дня.
						ПериодОкончанияСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодОкончание);
					Иначе
						ПериодОкончанияСобытияОкругленный = ОписаниеСобытия.ПериодОкончание;
					КонецЕсли;
				Иначе
					Если ВремяОкончаниеСобытия <= ВремяНачалоШкалыВремени Тогда
						// Если событие заканчивается за началом видимой шкалы времени считаем что оно закончилось в самом начале дня.
						ПериодОкончанияСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодОкончание);
					Иначе
						// Округляем время окончания в БОЛЬШУЮ сторону по границе интервала шкалы времени.
						ПериодОкончанияСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодОкончание) + Цел(ОкончаниеСобытияВСекундах / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах + ИнтервалШкалыВремениВСекундах;
					КонецЕсли;
					
					Если НачалоДня(ПериодОкончанияСобытияОкругленный) <> НачалоДня(ОписаниеСобытия.ПериодОкончание) Тогда
						// Если округление продлило событие до 00:00:00 следующего дня.
						ПериодОкончанияСобытияОкругленный = ПериодОкончанияСобытияОкругленный - ИнтервалШкалыВремениВСекундах;
						бУменьшитьИндексВремениОкончаниеСобытияНаЕдиницу = Ложь;
					КонецЕсли;
				КонецЕсли;
				ВремяНачалоСобытияОкругленное = ПустаяДата + (ПериодНачалоСобытияОкругленный - НачалоДня(ПериодНачалоСобытияОкругленный));
				ВремяОкончанияСобытияОкругленное = ПустаяДата + (ПериодОкончанияСобытияОкругленный - НачалоДня(ПериодОкончанияСобытияОкругленный));
				
				НомерДняВИнтервалеНачалоСобытия = СоответствиеНомеровДней[НачалоДня(ПериодНачалоСобытияОкругленный)];
				Если НомерДняВИнтервалеНачалоСобытия = Неопределено Тогда НомерДняВИнтервалеНачалоСобытия = 0; КонецЕсли;
				НомерДняВИнтервалеОкончаниеСобытия = СоответствиеНомеровДней[НачалоДня(ПериодОкончанияСобытияОкругленный)];
				Если НомерДняВИнтервалеОкончаниеСобытия = Неопределено Тогда НомерДняВИнтервалеОкончаниеСобытия = МаксимальныйНомерДня; КонецЕсли;
				
				Если ПериодНачалоСобытияОкругленный < МинимальнаяДатаВремяНаШкале Тогда
					ИндексВремениНачалоСобытия = 0;
				Иначе
					ИндексВремениНачалоСобытия = СоответствиеИндексовВремени[ВремяНачалоСобытияОкругленное];
				КонецЕсли;
				Если ПериодОкончанияСобытияОкругленный > МаксимальнаяДатаВремяНаШкале Тогда
					ИндексВремениОкончаниеСобытия = МаксимальныйИндексВремениНаШкале;
				Иначе
					ИндексВремениОкончаниеСобытия = СоответствиеИндексовВремени[ВремяОкончанияСобытияОкругленное];
					Если ИндексВремениОкончаниеСобытия <> Неопределено И бУменьшитьИндексВремениОкончаниеСобытияНаЕдиницу Тогда
						ИндексВремениОкончаниеСобытия = ИндексВремениОкончаниеСобытия - 1;
					КонецЕсли;
				КонецЕсли;
				
				Если ИндексВремениНачалоСобытия = Неопределено И ИндексВремениОкончаниеСобытия = Неопределено И НачалоДня(ПериодНачалоСобытияОкругленный) = НачалоДня(ПериодОкончанияСобытияОкругленный) Тогда
					// Событие полностью попадает на скрытую часть шкалы времени, игнорируем его.
					Продолжить;
				КонецЕсли;
				Если ИндексВремениНачалоСобытия = Неопределено Тогда
					Если ВремяНачалоСобытияОкругленное >= ВремяНачалоШкалыВремени Тогда
						// Событие начинается в конце дня за скрытой шкалой времени.
						НомерДняВИнтервалеНачалоСобытия = НомерДняВИнтервалеНачалоСобытия + 1;
						Если НомерДняВИнтервалеНачалоСобытия > МаксимальныйНомерДня Тогда
							// События не будет отображено, игнорируем его.
							Продолжить;
						КонецЕсли;
						ИндексВремениНачалоСобытия = 0;
					Иначе
						// Событие начинается в начале дня за скрытой шкалой времени.
						ИндексВремениНачалоСобытия = 0;
					КонецЕсли;
				КонецЕсли;
				Если ИндексВремениОкончаниеСобытия = Неопределено Тогда
					Если ВремяОкончанияСобытияОкругленное >= ВремяНачалоШкалыВремени Тогда
						// Событие заканчивается в конце дня за скрытой шкалой времени.
						ИндексВремениОкончаниеСобытия = МаксимальныйИндексВремениНаШкале;
					Иначе
						// Событие заканчивается в начале дня за скрытой шкалой времени.
						НомерДняВИнтервалеОкончаниеСобытия = НомерДняВИнтервалеОкончаниеСобытия - 1;
						Если НомерДняВИнтервалеОкончаниеСобытия < 0 Тогда
							// События не будет отображено, игнорируем его.
							Продолжить;
						КонецЕсли;
						ИндексВремениОкончаниеСобытия = МаксимальныйИндексВремениНаШкале;
					КонецЕсли;
				КонецЕсли;
				Если НомерДняВИнтервалеОкончаниеСобытия < НомерДняВИнтервалеНачалоСобытия Тогда
					НомерДняВИнтервалеОкончаниеСобытия = НомерДняВИнтервалеНачалоСобытия;
				КонецЕсли;
				
				ОписаниеСобытия.ИндексНачало = НомерДняВИнтервалеНачалоСобытия * КоличествоИнтерваловШкалыВремениВДне + ИндексВремениНачалоСобытия;
				ОписаниеСобытия.ИндексКонец = НомерДняВИнтервалеОкончаниеСобытия * КоличествоИнтерваловШкалыВремениВДне + ИндексВремениОкончаниеСобытия;
				Если ОписаниеСобытия.ИндексКонец < ОписаниеСобытия.ИндексНачало Тогда
					ОписаниеСобытия.ИндексКонец = ОписаниеСобытия.ИндексНачало;
				КонецЕсли;
				
				Обработки.CRM_Календарь.ЗаполнитьДополнительныеСвойстваСобытия(ОписаниеСобытия, НастройкиОтображения);
				
				СоответствиеОписанияСобытий.Вставить(СтрокаСобытие.ИдентификаторСобытия, ОписаниеСобытия);
			КонецЕсли;
			
			// Вычисление горизонтального индекса события для отрисовки.
			СтруктураПоискаГоризонтальногоИндекса = Новый Структура();
			Для нИндексСобытия = ОписаниеСобытия.ИндексНачало По ОписаниеСобытия.ИндексКонец Цикл
				СтруктураПоискаГоризонтальногоИндекса.Вставить("ИндексИнтервала" + Формат(нИндексСобытия, "ЧН=0; ЧГ="), 0);
			КонецЦикла;
			НайденныеСтроки = ТаблицаЗанятыеГоризонтальныеИндексыПоРесурсу.НайтиСтроки(СтруктураПоискаГоризонтальногоИндекса);
			ГоризонтальныйИндексСобытия = ТаблицаЗанятыеГоризонтальныеИндексыПоРесурсу.Индекс(НайденныеСтроки[0]);
			СтрокаЗанятыйГоризонтальныйИндекс = НайденныеСтроки[0];
			Для нИндексСобытия = ОписаниеСобытия.ИндексНачало По ОписаниеСобытия.ИндексКонец Цикл
				СтрокаЗанятыйГоризонтальныйИндекс["ИндексИнтервала" + Формат(нИндексСобытия, "ЧН=0; ЧГ=")] = 1;
				МассивИндикаторЗанятостиВремени[нИндексСобытия] = 1;
			КонецЦикла;
			МаксимальныйГоризонтальныйИндексСобытия = Макс(МаксимальныйГоризонтальныйИндексСобытия, ГоризонтальныйИндексСобытия);
			
			НоваяСтрока = ТаблицаОбластиВыводаСобытий.Добавить();
			НоваяСтрока.Событие					= СтрокаСобытие.Событие;
			НоваяСтрока.ОписаниеСобытия			= ОписаниеСобытия;
			НоваяСтрока.НачалоОбластиСтрока		= ГоризонтальныйИндексСобытия + 1;
			НоваяСтрока.НачалоОбластиКолонка	= (ОписаниеСобытия.ИндексНачало * КоличестоЯчеекВИнтервале) + 1;
			НоваяСтрока.КонецОбластиКолонка		= (ОписаниеСобытия.ИндексКонец * КоличестоЯчеекВИнтервале) + КоличестоЯчеекВИнтервале;
		КонецЦикла;
		
		// Оформление табличного документа по ресурсу с областями событий + одна строчка свободной области.
		ВысотаОбластиПоРесурсу = Макс(МаксимальныйГоризонтальныйИндексСобытия + 1, ВысотаОбластиРесурсовВЯчейках) + ?(МаксимальныйГоризонтальныйИндексСобытия = 0, 0, 1);
		
		ТабДокументСобытияПоРесурсу = Новый ТабличныйДокумент();
		Для н = 1 По ВысотаОбластиПоРесурсу Цикл
			Если н = ВысотаОбластиПоРесурсу Тогда
				ТабДокументСтрокаФонаОтрисовки.Область(1, 1, 1, ТабДокументСтрокаФонаОтрисовки.ШиринаТаблицы).ГраницаСнизу = ЛинияГраницаЖирная;
			КонецЕсли;
			ТабДокументСобытияПоРесурсу.Вывести(ТабДокументСтрокаФонаОтрисовки);
			
			КолонкаСлужебнаяОбластьСправа = ТабДокументСтрокаФонаОтрисовки.ШиринаТаблицы + 1;
			СлужебнаяОбластьСправа = ТабДокументСобытияПоРесурсу.Область(н, КолонкаСлужебнаяОбластьСправа, н, КолонкаСлужебнаяОбластьСправа);
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			Расшифровка.ТипЯчейки = "СлужебнаяОбласть";
			Попытка Расшифровка[Ресурс.Имя + "Отбор"] = Ресурс.Значение;
			Исключение КонецПопытки;
			СлужебнаяОбластьСправа.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			СлужебнаяОбластьСправа.Текст = " ";
		КонецЦикла;
		ТабДокументСтрокаФонаОтрисовки.Область(1, 1, 1, ТабДокументСтрокаФонаОтрисовки.ШиринаТаблицы).ГраницаСнизу = ЛинияНетЛинии;
		
		// Оформление и вывод областей событий.
		Для Каждого СтрокаОбласть Из ТаблицаОбластиВыводаСобытий Цикл
			ОбластьСобытие = ТабДокументСобытияПоРесурсу.Область(СтрокаОбласть.НачалоОбластиСтрока, СтрокаОбласть.НачалоОбластиКолонка, СтрокаОбласть.НачалоОбластиСтрока, СтрокаОбласть.КонецОбластиКолонка);
			ОбластьСобытие.Объединить();
			ОбластьСобытие.Обвести(	ЛинияСобытие,
									ЛинияСобытие,
									?(СтрокаОбласть.КонецОбластиКолонка = ШиринаОбластиДняВЯчейках Или СтрокаОбласть.КонецОбластиКолонка = ТабДокументСобытияПоРесурсу.ШиринаТаблицы - 1, ЛинияГраницаЖирная, ЛинияСобытие),
									ЛинияСобытие);
			//
			ОбластьСобытие.ЦветФона = СтрокаОбласть.ОписаниеСобытия.ЦветФона;
			ОбластьСобытие.ЦветТекста = СтрокаОбласть.ОписаниеСобытия.ЦветТекста;
			
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			ЗаполнитьЗначенияСвойств(Расшифровка, СтрокаОбласть.ОписаниеСобытия);
			Расшифровка.ТипЯчейки = "Событие";
			Расшифровка.Пользователь = СтрокаОбласть.ОписаниеСобытия.Пользователь;
			Расшифровка.Помещение = СтрокаОбласть.ОписаниеСобытия.Помещение;
			Расшифровка.Дата = СтрокаОбласть.ОписаниеСобытия.ПериодНачало;
			Расшифровка.ИндексВремени = СтрокаОбласть.ОписаниеСобытия.ИндексНачало;
			Попытка Расшифровка[Ресурс.Имя + "Отбор"] = Ресурс.Значение;
			Исключение КонецПопытки;
			ОбластьСобытие.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			Если НастройкиОтображения.КалендарьОтображатьПиктограммы Тогда
				ОбластьСобытие.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			Иначе
				ОбластьСобытие.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			КонецЕсли;
			ОбластьСобытие.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ОбластьСобытие.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			
			ОбластьСобытие.Шрифт = СтрокаОбласть.ОписаниеСобытия.Шрифт;
			
			СтрДобавитьКПараметру = "";
			Если НастройкиОтображения.КалендарьОтображатьПиктограммы И Не бВебКлиент Тогда
				Если РасположитьКартинкуВНачалеОбласти(ТабДокументСобытияПоРесурсу, ОбластьСобытие, СтрокаОбласть.ОписаниеСобытия.Пиктограмма) Тогда
					СтрДобавитьКПараметру = "     ";
				КонецЕсли;
			КонецЕсли;
			ОбластьСобытие.Текст = СтрДобавитьКПараметру + ПолучитьПредставлениеСобытия(СтрокаОбласть.ОписаниеСобытия.Событие, СтрокаОбласть.ОписаниеСобытия, НастройкиОтображения, 1);
		КонецЦикла;
		
		// Оформление области заголовка ресурса.
		ТабДокументСобытияПоРесурсуЗаголовок = МакетЯчейки.ПолучитьОбласть(1, 1, ВысотаОбластиПоРесурсу, ШиринаОбластиРесурсовВЯчейках);
		
		Область = ТабДокументСобытияПоРесурсуЗаголовок.Область(1, 1, ВысотаОбластиПоРесурсу, ШиринаОбластиРесурсовВЯчейках);
		Область.Объединить();
		Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраницаЖирная);
		// TODO: если нужно отображать ресурсы разными цветами, это нужно сделать здесь.
		Область.ЦветФона = НастройкиОтображения.КалендарьЦветФонаЗаголовкаРесурс;
		Область.Шрифт = НастройкиОтображения.КалендарьШрифтЗаголовкаРесурс;
		Попытка
			Если ТипЗнч(Ресурс.Значение) = Тип("СправочникСсылка.Пользователи") И Ресурс.Значение.Недействителен Тогда
				Область.ЦветТекста = НастройкиОтображения.КалендарьЦветТекстаНедействительныйПользователь;
			Иначе
				Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаРесурс;
			КонецЕсли;
		Исключение
			Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаРесурс;
		КонецПопытки;
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "ЗаголовокРесурс";
		Попытка Расшифровка[Ресурс.Имя + "Отбор"] = Ресурс.Значение;
		Исключение КонецПопытки;
		Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		Область.Текст = Ресурс.Описание;
		
		ТабДокументСобытияПоРесурсуСЗаголовком = Новый ТабличныйДокумент();
		ТабДокументСобытияПоРесурсуСЗаголовком.Присоединить(ТабДокументСобытияПоРесурсуЗаголовок);
		ТабДокументСобытияПоРесурсуСЗаголовком.Присоединить(ТабДокументСобытияПоРесурсу);
		
		ТабДокументСобытия.Вывести(ТабДокументСобытияПоРесурсуСЗаголовком);
		
	КонецЦикла;
	
	// Отрисовка индикатора занятого времени.
	Для нИндекс = 0 По МассивИндикаторЗанятостиВремени.ВГраница() Цикл
		Если МассивИндикаторЗанятостиВремени[нИндекс] <> Неопределено Тогда
			Область = ТабДокументШкалаВремени.Область(НомерСтрокиИндикатора, ШиринаОбластиРесурсовВЯчейках + нИндекс * КоличестоЯчеекВИнтервале + 1, НомерСтрокиИндикатора, ШиринаОбластиРесурсовВЯчейках + нИндекс * КоличестоЯчеекВИнтервале + КоличестоЯчеекВИнтервале);
			Область.ЦветФона = НастройкиОтображения.РасписаниеЦветИндикатора;
		КонецЕсли;
	КонецЦикла;
	
	ТабДокументСлужебнаяОбластьСнизуСЗаголовком = Новый ТабличныйДокумент();
	ТабДокументСлужебнаяОбластьСнизуСЗаголовком.Присоединить(МакетЯчейки.ПолучитьОбласть(1, 1, 1, ШиринаОбластиРесурсовВЯчейках));
	ТабДокументСлужебнаяОбластьСнизуСЗаголовком.Присоединить(ТабДокументСлужебнаяОбластьСнизу);
	
	КалендарьТабличныйДокумент.Вывести(ТабДокументШкалаВремени);
	КалендарьТабличныйДокумент.Вывести(ТабДокументСобытия);
	КалендарьТабличныйДокумент.Вывести(ТабДокументСлужебнаяОбластьСнизуСЗаголовком);
	
	КалендарьТабличныйДокумент.ФиксацияСверху = НомерСтрокиИндикатора;
	КалендарьТабличныйДокумент.ФиксацияСлева = ШиринаОбластиРесурсовВЯчейках;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбработки()
	ТекущийПользовательСеанса = Пользователи.ТекущийПользователь();
	
	КалендарьСписокВыбранныйПредопределенныйПериод = "ПроизвольныйПериод";
	Список = ПолучитьСписокВыбораПериода();
	НайденноеЗначение = Список.НайтиПоЗначению(КалендарьСписокВыбранныйПредопределенныйПериод);
	КалендарьСписокВыбранныйПредопределенныйПериодПредставление = НайденноеЗначение.Представление;
	
	ПоРесурсамШкалаВремениПоГоризонтали = 0;
	
	СписокГруппировкиСпискаКалендаря = ПолучитьСписокГруппировокСпискаКалендаря();
	Если СписокГруппировкиСпискаКалендаря.Количество() > 0 Тогда
		ГруппировкаСпискаКалендаря				= СписокГруппировкиСпискаКалендаря[0].Значение;
		ГруппировкаСпискаКалендаряПредставление	= СписокГруппировкиСпискаКалендаря[0].Представление;
	КонецЕсли;
	СписокКалендаряГруппироватьПоДням = Истина;
	КалендарьСписокВыводитьОписаниеСобытия = Истина;
	
	// Заполнение списока выбора месяцев.
	СписокВыборМесяца.Очистить();
	
	ТекМесяц = НачалоМесяца(?(ЗначениеЗаполнено(Объект.ДатаКалендаря), Объект.ДатаКалендаря, ТекущаяДатаСеанса()));
	ДобавитьМесяцев = 12;
	Для н = -ДобавитьМесяцев По ДобавитьМесяцев Цикл
		ДобавляемыйМесяц = ДобавитьМесяц(ТекМесяц, н);
		ПредставлениеМесяца = Формат(ДобавляемыйМесяц, "ДФ='ММММ гггг'") + " " + НСтр("ru = 'г.'");
		СписокВыборМесяца.Добавить(ДобавляемыйМесяц, ПредставлениеМесяца);
	КонецЦикла;
	СтрЕще = НСтр("ru = 'Еще...'");
	СписокВыборМесяца.Вставить(0, Дата("00010101"), СтрЕще);
	СписокВыборМесяца.Добавить(Дата("99990101"), СтрЕще);
	
	ОтборТипыОбъектов.Очистить();
	РегистрируемыеОбъекты = ПолучитьРегистрируемыеОбъекты();
	Для Каждого ОбъектСтрока Из РегистрируемыеОбъекты Цикл
		Если	ОбъектСтрока.Объект = Метаданные.Документы.CRM_КонтрольнаяТочкаПроекта И
			(	НЕ	ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПодсистемуУправленияПроектами")
				ИЛИ	НЕ ПравоДоступа("Добавление", Метаданные.Документы.CRM_КонтрольнаяТочкаПроекта)
			) Тогда
			//
		  Продолжить;
		КонецЕсли;
		НоваяСтрока = ОтборТипыОбъектов.Добавить();
		НоваяСтрока.Пометка = Истина; // TODO: возможно нужно сохранять пометки.
		НоваяСтрока.Представление = ОбъектСтрока.Объект.Синоним;
		НоваяСтрока.ПолноеИмя = ОбъектСтрока.Объект.ПолноеИмя();
	КонецЦикла;
	ОтборТипыОбъектов.Сортировать("Представление ВОЗР");
	
	Если ИспользоватьБизнесПроцессыИЗадачи Тогда
		// Добавление пункта "Задачи"
		НоваяСтрока = ОтборТипыОбъектов.Добавить();
		НоваяСтрока.Пометка = Истина;
		НоваяСтрока.Представление = НСтр("ru = 'Задачи'");
		НоваяСтрока.ПолноеИмя = "Задачи";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруДанныхЗапроса()
	СтруктураРезультат = Новый Структура("ТекстЗапроса,Параметры,ПоляОтбора,Отборы");
	
	// текст запроса
	СтруктураРезультат.ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователя.Объект						КАК Событие,
	|	СобытияКалендаряПользователя.Пользователь				КАК Пользователь,
	|	СобытияКалендаряПользователя.ПериодНачало				КАК ПериодНачало,
	|	ВЫБОР
	|		КОГДА СобытияКалендаряПользователя.ПериодОкончание = ДАТАВРЕМЯ(1,1,1) ТОГДА СобытияКалендаряПользователя.ПериодНачало
	|		ИНАЧЕ СобытияКалендаряПользователя.ПериодОкончание
	|	КОНЕЦ													КАК ПериодОкончание,
	|	
	|	СобытияКалендаряПользователя.Тема						КАК Тема,
	|	СобытияКалендаряПользователя.НаВесьДень					КАК СобытиеНаВесьДень,
	|	СобытияКалендаряПользователя.ПомещениеСобытия			КАК Помещение,
	|	СобытияКалендаряПользователя.ВидСобытия					КАК ВидСобытия,
	|	СобытияКалендаряПользователя.ВходящееИсходящееСобытие	КАК ВходящееИсходящееСобытие,
	|	СобытияКалендаряПользователя.СостояниеСобытия			КАК СостояниеСобытия,
	|	СобытияКалендаряПользователя.ОсновнаяКатегорияСобытия	КАК ОсновнаяКатегорияСобытия,
	|	СобытияКалендаряПользователя.Проект						КАК Проект,
	|	СобытияКалендаряПользователя.Подразделение				КАК Подразделение,
	|	СобытияКалендаряПользователя.Важность					КАК Важность,
	|	СобытияКалендаряПользователя.Завершено					КАК Завершено,
	|	СобытияКалендаряПользователя.Партнер					КАК Партнер,
	|	СобытияКалендаряПользователя.СтатусКонтрольнойТочки		КАК СтатусКонтрольнойТочки" + ?(Объект.ТекущееОтображение = "Список", ",
	|	СобытияКалендаряПользователя.Объект.Описание			КАК Описание", "") + "
	|	
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК СобытияКалендаряПользователя
	|	
	|ГДЕ
	|	// Фильтр по заведомо некорректным записям
	|	( СобытияКалендаряПользователя.ПериодОкончание >= СобытияКалендаряПользователя.ПериодНачало ИЛИ (СобытияКалендаряПользователя.ПериодОкончание = ДАТАВРЕМЯ(1,1,1) И СобытияКалендаряПользователя.ПериодНачало <> ДАТАВРЕМЯ(1,1,1)) )
	|	// Фильтр на дату
	|	И (ВЫБОР КОГДА СобытияКалендаряПользователя.ПериодОкончание = ДАТАВРЕМЯ(1,1,1) ТОГДА СобытияКалендаряПользователя.ПериодНачало ИНАЧЕ СобытияКалендаряПользователя.ПериодОкончание КОНЕЦ) >= &ПериодНачало И СобытияКалендаряПользователя.ПериодНачало <= &ПериодОкончание
	|	
	|	//%УСЛОВИЕ_ТИПЫ_ОБЪЕКТОВ%
	|	
	|";
	
	// Обязательные параметры запроса.
	СтруктураРезультат.Параметры = Новый Структура();
	СтруктураРезультат.ПоляОтбора = ПолучитьМассивДоступныхОтборов();
	СтруктураРезультат.Отборы = Новый Соответствие();
	
	бИспользуетсяПолнотекстовыйПоискСписка = (Объект.ТекущееОтображение = "Список" И ЗначениеЗаполнено(КалендарьСписокТекстПоиска));
	
	// Отбор по результатам полнотекстового поиска.
	Если бИспользуетсяПолнотекстовыйПоискСписка Тогда
		ТекстОшибки = НайтиОбъектыПолнотекстовыйПоискРежимСписок();
		
		СтруктураРезультат.Отборы.Вставить("Событие", Новый Соответствие());
		СтруктураРезультат.Отборы["Событие"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.ВСписке);
		СтруктураРезультат.Отборы["Событие"].Вставить("Значение",		?(ТекстОшибки = Неопределено, СписокНайденныхОбъектов, Новый СписокЗначений()));
		СтруктураРезультат.Отборы["Событие"].Вставить("Использование",	Истина);
		
		Если ТекстОшибки <> Неопределено Тогда
			ТекстОшибкиГлобальный = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Отбор по типам объектов
	СтрУсловие = "";
	Для Каждого СтрокаТаблицы Из ОтборТипыОбъектов Цикл
		Если СтрокаТаблицы.ПолноеИмя = "Задачи" Тогда
			// Пропуск предопределенного типа "Задачи".
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Пометка Тогда
			СтрУсловие = СтрУсловие
				+ ?(ПустаяСтрока(СтрУсловие), "", " ИЛИ ")
				+ "СобытияКалендаряПользователя.Объект ССЫЛКА "
				+ СтрокаТаблицы.ПолноеИмя;
			//
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(СтрУсловие) Тогда
		СтрУсловие = "И ЛОЖЬ";
	Иначе
		СтрУсловие = "И (" + СтрУсловие + ")";
	КонецЕсли;
	СтруктураРезультат.ТекстЗапроса = СтрЗаменить(СтруктураРезультат.ТекстЗапроса, "//%УСЛОВИЕ_ТИПЫ_ОБЪЕКТОВ%", СтрУсловие);
	
	// Отборы по выбранным ресурсам - для оптимизации запроса.
	бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы = ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(Объект.ТекущееОтображение);
	МассивПропуститьОтборы = Новый Массив();
	Если бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы Тогда
		ГруппаИли = Новый Соответствие();
		
		ТекущиееДеревоРесурсов = ПолучитьДеревоРесурсов();
		Для Каждого ЭлементВерхнегоУровня Из ТекущиееДеревоРесурсов.Строки Цикл
			ПолеОтбора = ЭлементВерхнегоУровня.Имя;
			МассивПропуститьОтборы.Добавить(ПолеОтбора);
			
			ОтборЗначениеСписок = Новый СписокЗначений();
			
			Для Каждого ЭлементЗначениеРесурса Из ЭлементВерхнегоУровня.Строки Цикл
				ОтборЗначениеСписок.Добавить(ЭлементЗначениеРесурса.Значение);
			КонецЦикла;
			
			ГруппаИли.Вставить(ПолеОтбора, Новый Соответствие());
			
			ГруппаИли[ПолеОтбора].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.ВСписке);
			ГруппаИли[ПолеОтбора].Вставить("Значение",		ОтборЗначениеСписок);
			ГруппаИли[ПолеОтбора].Вставить("Использование",	Истина);
		КонецЦикла;
		
		СтруктураРезультат.Отборы.Вставить("ГруппаОтбораПоВыбраннымРесурсам", Новый Соответствие());
		СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("ВидСравнения",	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Значение",		ГруппаИли);
		СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Использование",	Истина);
	ИначеЕсли Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		ОтборЗначениеСписок = Новый СписокЗначений();
		МассивПропуститьОтборы.Добавить("Пользователь");
		ОтборЗначениеСписок.ЗагрузитьЗначения(ПолучитьМассивПользователейДиспетчеризации());
		Если ОтборЗначениеСписок.Количество() > 0 Тогда
			ГруппаИли = Новый Соответствие();
			ГруппаИли.Вставить("Пользователь", Новый Соответствие());
			ГруппаИли["Пользователь"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.ВСписке);
			ГруппаИли["Пользователь"].Вставить("Значение",		ОтборЗначениеСписок);
			ГруппаИли["Пользователь"].Вставить("Использование",	Истина);
			
			СтруктураРезультат.Отборы.Вставить("ГруппаОтбораПоВыбраннымРесурсам", Новый Соответствие());
			СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("ВидСравнения",	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Значение",		ГруппаИли);
			СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Использование",	Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Отбор по признаку Скрыть выполненные.
	Если ОтборСкрытьВыполненные Тогда
		СтруктураРезультат.Отборы.Вставить("Завершено", Новый Соответствие());
		СтруктураРезультат.Отборы["Завершено"].Вставить("ВидСравнения",		ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Завершено"].Вставить("Значение",			Ложь);
		СтруктураРезультат.Отборы["Завершено"].Вставить("Использование",	Истина);
	КонецЕсли;
	
	Если НЕ Объект.ТекущееОтображение = "ПоРесурсам" И
		 НЕ Пользователи.РолиДоступны("CRM_ПросмотрЗадачДругихПользователейВКалендаре, ПолныеПрава") Тогда
		// Если не доступна роль CRM_ПросмотрЗадачДругихПользователейВКалендаре, тогда доступны только объекты
		// по текущему пользователю.
		Если ЗначениеЗаполнено(ОтборЗначениеПользователь) И ОтборИспользованиеПользователь Тогда
			Если ОтборЗначениеПользователь = ТекущийПользовательСеанса Тогда
				ПользовательДляОтбора = ТекущийПользовательСеанса;
			Иначе
				ПользовательДляОтбора = Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ПользовательДляОтбора = ТекущийПользовательСеанса;
		КонецЕсли;
		СтруктураРезультат.Отборы.Вставить("Пользователь", Новый Соответствие());
		СтруктураРезультат.Отборы["Пользователь"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
		СтруктураРезультат.Отборы["Пользователь"].Вставить("Значение",		ПользовательДляОтбора);
		СтруктураРезультат.Отборы["Пользователь"].Вставить("Использование",	Истина);
		
		МассивПропуститьОтборы.Добавить("Пользователь");
	КонецЕсли;
	
	// Если используется отображение по ресурсам - все остальные отборы игнорируются.
	Если Не бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы И Не Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Для Каждого ПолеОтбора Из СтруктураРезультат.ПоляОтбора Цикл
			Если МассивПропуститьОтборы.Найти(ПолеОтбора) <> Неопределено Тогда Продолжить; КонецЕсли;
			
			ИменаДляОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
			ОтборИспользование = ЭтотОбъект[ИменаДляОтбора.ИмяИсточникаДанныхИспользование];
			
			Если ОтборИспользование Тогда
				ОтборВидСравнения = ЭтотОбъект[ИменаДляОтбора.ИмяИсточникаДанныхВидСравнения];
				ОтборЗначение = ЭтотОбъект[ИменаДляОтбора.ИмяИсточникаДанныхЗначение];
				
				СтруктураРезультат.Отборы.Вставить(ПолеОтбора, Новый Соответствие());
				СтруктураРезультат.Отборы[ПолеОтбора].Вставить("ВидСравнения",	ОтборВидСравнения);
				СтруктураРезультат.Отборы[ПолеОтбора].Вставить("Значение",		ОтборЗначение);
				СтруктураРезультат.Отборы[ПолеОтбора].Вставить("Использование",	ОтборИспользование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаСервере
Процедура СоздатьОтборПоОписанию(ЭлементыОтбора, ОписанияЭлементовОтбора, ДоступныеПоля = Неопределено)
	
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_Календарь_СоздатьОтборПоОписанию(
			ЭлементыОтбора,
			ОписанияЭлементовОтбора,
			ДоступныеПоля);
		//
	Исключение
		Попытка
			CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Компонента.ЗащитаАктивна();
		Исключение
		КонецПопытки;
		CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_Календарь_СоздатьОтборПоОписанию(
			ЭлементыОтбора,
			ОписанияЭлементовОтбора,
			ДоступныеПоля);
		//
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СкопироватьОтбор(ЭлементыПриемник, ЭлементыИсточник)
	Для Каждого ЭлементОтбора Из ЭлементыИсточник Цикл
		Если Не ЭлементОтбора.Использование Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = ЭлементыПриемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			СкопироватьОтбор(НовыйЭлементОтбора.Элементы, ЭлементОтбора.Элементы);
		Иначе
			НовыйЭлементОтбора = ЭлементыПриемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПолеВОтборе(ЭлементыОтбора, Поле, бИскатьРекурсивно = Истина)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И бИскатьРекурсивно Тогда
			НайденныйЭлемент = НайтиПолеВОтборе(ЭлементОтбора.Элементы, Поле);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеВОтборе(Отбор, Имя, ВидСравнения, Значение, Использование, ДоступныеПоля = Неопределено, ПерезаписыватьЗначениеОтбора = Ложь)
	Если ДоступныеПоля <> Неопределено Тогда
		Если ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Имя)) = Неопределено Тогда Возврат; КонецЕсли;
	КонецЕсли;
	ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя);
	ЭлементОтбора = НайтиПолеВОтборе(Отбор.Элементы, ПолеОтбораЛевоеЗначение);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеОтбораЛевоеЗначение;
	ИначеЕсли Не ПерезаписыватьЗначениеОтбора Тогда
		Возврат;
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование = Использование;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСобытийЗаПериодПоДням(СтруктураДанныхКлиент, НастройкиОтображения, МаксимальныйИндексСобытияНаВесьДень = -1, ПериодНачало = Неопределено, ПериодОкончание = Неопределено)
	ЗаписанноеСобытиеНеВходитВТекущийОтбор = Ложь;
	
	бИспользоватьСобытияНаВесьДень = НастройкиОтображения.ИспользоватьСобытияНаВесьДень;
	
	Если Объект.ТекущееОтображение = "Месяц" Или Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1) Тогда
		// Период передан в параметрах.
	Иначе
		Если Объект.ТекущееОтображение = "Список" И ПериодНачало <> Неопределено И ПериодОкончание <> Неопределено Тогда
			// Период передан в параметрах.
		Иначе
			Для Каждого ТекДата Из СтруктураДанныхКлиент.МассивВыбранныхДат Цикл
				Если ПериодНачало = Неопределено Или ТекДата < ПериодНачало Тогда
					ПериодНачало = ТекДата;
				КонецЕсли;
				Если ПериодОкончание = Неопределено Или ТекДата > ПериодОкончание Тогда
					ПериодОкончание = ТекДата;
				КонецЕсли;
			КонецЦикла;
			ПериодНачало = НачалоДня(ПериодНачало);
			ПериодОкончание = КонецДня(ПериодОкончание);
		КонецЕсли;
	КонецЕсли;
	
	// Создание и настройка схемы компоновки данных.
	СКДДанныеКалендаря = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанныеКалендаря.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанныхСобытия";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	СтруктураДанныхЗапроса = ПолучитьСтруктуруДанныхЗапроса();
	
	ТекстЗапроса = СтруктураДанныхЗапроса.ТекстЗапроса;
	
	НаборДанных = СКДДанныеКалендаря.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанныхСобытия";
	НаборДанных.ИсточникДанных = "ИсточникДанныхСобытия";
	НаборДанных.Запрос = ТекстЗапроса;
	
	Настройки = СКДДанныеКалендаря.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	//Если КомпоновщикНастроекОтборКалендарь.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Количество() = 0 Тогда
	//	// Что-бы реквизит формы КомпоновщикНастроекОтборКалендарь заполнился и на клиенте,
	//	// инициализируем его через URL временного хранилища
	//	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКДДанныеКалендаря, ЭтаФорма.УникальныйИдентификатор);
	//	КомпоновщикНастроекОтборКалендарь.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище));
	//	
	//	Для Каждого ДоступныйЭлементОтбора Из КомпоновщикНастроекОтборКалендарь.Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
	//		Если СтруктураДанныхЗапроса.ПоляОтбора.Найти(ДоступныйЭлементОтбора.Поле) <> Неопределено Тогда
	//			ЭлементОтбора = КомпоновщикНастроекОтборКалендарь.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//			ЭлементОтбора.Использование = Ложь;
	//			ЭлементОтбора.ЛевоеЗначение = ДоступныйЭлементОтбора.Поле;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанныеКалендаря));
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// Пропускаем системные поля
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
	КонецЦикла;
	
	Настройки.ПараметрыДанных.Элементы.Очистить();
	
	// Установка обязательных параметров запроса.
	Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ПериодНачало");
	Параметр.Значение = ПериодНачало;
	Параметр.Использование = Истина;
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ПериодОкончание");
	Параметр.Значение = ПериодОкончание;
	Параметр.Использование = Истина;
	
	// Установка переданных параметров запроса.
	Если ТипЗнч(СтруктураДанныхЗапроса.Параметры) = Тип("Структура") Тогда
		Для Каждого ПараметрКлючЗначение Из СтруктураДанныхЗапроса.Параметры Цикл
			Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
			Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ПараметрКлючЗначение.Ключ);
			Параметр.Значение = ПараметрКлючЗначение.Значение;
			Параметр.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Настройки.Отбор.Элементы.Очистить();
	
	// Установка переданных отборов.
	Если ТипЗнч(СтруктураДанныхЗапроса.Отборы) = Тип("Соответствие") Тогда
		СоздатьОтборПоОписанию(Настройки.Отбор.Элементы, СтруктураДанныхЗапроса.Отборы, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	КонецЕсли;
	
	Если бИспользоватьСобытияНаВесьДень И (Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1)) Тогда
		// В режиме расписания фильтруем события с признаком "СобытиеНаВесьДень".
		УстановитьЗначениеВОтборе(Настройки.Отбор, "СобытиеНаВесьДень", ВидСравненияКомпоновкиДанных.Равно, Ложь, Истина, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанныеКалендаря, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Если РезультатТаблица.Колонки.Найти("СобытиеНаВесьДень") = Неопределено Тогда
		РезультатТаблица.Колонки.Добавить("СобытиеНаВесьДень", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если Объект.ТекущееОтображение = "День" Или Объект.ТекущееОтображение = "Неделя" Или Объект.ТекущееОтображение = "ПоРесурсам" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 0) Тогда
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
		Для нИндекс = 0 По 47 Цикл
			РезультатТаблица.Колонки.Добавить("ИндексВремени" + нИндекс, ОписаниеТиповЧисло);
		КонецЦикла;
		РезультатТаблица.Колонки.Добавить("ИндексНачало",				ОписаниеТиповЧисло);
		РезультатТаблица.Колонки.Добавить("ИндексКонец",				ОписаниеТиповЧисло);
		РезультатТаблица.Колонки.Добавить("ПолеСортировки",				ОписаниеТиповЧисло);
		РезультатТаблица.Колонки.Добавить("ИндексСобытияНаВесьДень",	ОписаниеТиповЧисло);
		РезультатТаблица.Колонки.Добавить("ИдентификаторСобытия",		ОписаниеТиповСтрока);
		
		СоответствиеРезультат = Новый Соответствие();
		
		Если бИспользоватьСобытияНаВесьДень Тогда
			// Размер массива = общему количеству событий - это быстрее чем вычислять точное количество и точно хватит на все.
			Если РезультатТаблица.Количество() = 0 Тогда
				МассивЗанятыхИндексовСобытийНаВесьДень = Неопределено;
			Иначе
				СоответствиеИндексовСобытийНаВесьДень = Новый Соответствие();
				МассивЗанятыхИндексовСобытийНаВесьДень = Новый Массив(РезультатТаблица.Количество());
			КонецЕсли;
		КонецЕсли;
		
		Для нИндексДата = 0 По СтруктураДанныхКлиент.МассивВыбранныхДат.ВГраница() Цикл
			ТекДата = СтруктураДанныхКлиент.МассивВыбранныхДат[нИндексДата];
			ДатаНачало = НачалоДня(ТекДата);
			ДатаОкончание = КонецДня(ТекДата);
			ДатаНачалаСобытиеНаВесьДень = НачалоДня(ТекДата) + НастройкиОтображения.НачалоДняКалендаряЧас * 60 * 60;
			ДатаОкончанияСобытиеНаВесьДень = НачалоДня(ТекДата) + НастройкиОтображения.КонецДняКалендаряЧас * 60 * 60 + 30 * 60 + 1;
			
			ТаблицаДень = РезультатТаблица.Скопировать(Новый Массив());
			
			Для Каждого СтрокаТаблицы Из РезультатТаблица Цикл
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСобытия) Тогда
					СтрокаТаблицы.ИдентификаторСобытия = Строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				
				Если СтрокаТаблицы.ПериодОкончание >= ДатаНачало И СтрокаТаблицы.ПериодНачало <= ДатаОкончание Тогда
					НоваяСтрока = ТаблицаДень.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					
					Если НачалоДня(НоваяСтрока.ПериодНачало) < ДатаНачало Тогда
						НоваяСтрока.ИндексНачало = 0;
					Иначе
						НоваяСтрока.ИндексНачало = Час(НоваяСтрока.ПериодНачало) * 2 + ?(Минута(НоваяСтрока.ПериодНачало) < 30, 0, 1);
					КонецЕсли;
					
					Если НачалоДня(НоваяСтрока.ПериодОкончание) > ДатаОкончание Тогда
						НоваяСтрока.ИндексКонец = 47;
					Иначе
						НоваяСтрока.ИндексКонец = Час(НоваяСтрока.ПериодОкончание) * 2;
						Если Минута(НоваяСтрока.ПериодОкончание) = 0 Тогда
							НоваяСтрока.ИндексКонец = НоваяСтрока.ИндексКонец - 1;
						ИначеЕсли Минута(НоваяСтрока.ПериодОкончание) > 30 Тогда
							НоваяСтрока.ИндексКонец = НоваяСтрока.ИндексКонец + 1;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока.ИндексКонец = Макс(НоваяСтрока.ИндексКонец, НоваяСтрока.ИндексНачало);
					
					Если Не НоваяСтрока.СобытиеНаВесьДень Тогда
						Если	НачалоДня(НоваяСтрока.ПериодНачало) <> НачалоДня(НоваяСтрока.ПериодОкончание)
							ИЛИ	НоваяСтрока.ПериодНачало <= ДатаНачалаСобытиеНаВесьДень И НоваяСтрока.ПериодОкончание >= ДатаОкончанияСобытиеНаВесьДень Тогда
							//
							НоваяСтрока.СобытиеНаВесьДень = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Для нИндекс = НоваяСтрока.ИндексНачало По НоваяСтрока.ИндексКонец Цикл
						НоваяСтрока["ИндексВремени" + нИндекс] = 1;
					КонецЦикла;
					
					Если Не НоваяСтрока.СобытиеНаВесьДень Тогда
						НоваяСтрока.ПолеСортировки = НоваяСтрока.ИндексКонец - НоваяСтрока.ИндексНачало;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если МассивЗанятыхИндексовСобытийНаВесьДень <> Неопределено Тогда
				СтрокиСобытияНаВесьДень = ТаблицаДень.НайтиСтроки(Новый Структура("СобытиеНаВесьДень", Истина));
				Если СтрокиСобытияНаВесьДень.Количество() > 0 Тогда
					Для Каждого СтрокаСобытияНаВесьДень Из СтрокиСобытияНаВесьДень Цикл
						Если СоответствиеИндексовСобытийНаВесьДень[СтрокаСобытияНаВесьДень.ИдентификаторСобытия] = Неопределено Тогда
							СтрокаСобытияНаВесьДень.ИндексСобытияНаВесьДень = МассивЗанятыхИндексовСобытийНаВесьДень.Найти(Неопределено);
							СоответствиеИндексовСобытийНаВесьДень.Вставить(СтрокаСобытияНаВесьДень.ИдентификаторСобытия, СтрокаСобытияНаВесьДень.ИндексСобытияНаВесьДень);
							МассивЗанятыхИндексовСобытийНаВесьДень[СтрокаСобытияНаВесьДень.ИндексСобытияНаВесьДень] = 1;
							
							МаксимальныйИндексСобытияНаВесьДень = Макс(МаксимальныйИндексСобытияНаВесьДень, СтрокаСобытияНаВесьДень.ИндексСобытияНаВесьДень);
						Иначе
							СтрокаСобытияНаВесьДень.ИндексСобытияНаВесьДень = СоответствиеИндексовСобытийНаВесьДень[СтрокаСобытияНаВесьДень.ИдентификаторСобытия];
						КонецЕсли;
					КонецЦикла;
					
					// Если событие заканчивается в текущем дне нужно освободить его индекс чтобы его можно было использовать для
					// другого события.
					Для Каждого СтрокаСобытияНаВесьДень Из СтрокиСобытияНаВесьДень Цикл
						Если СоответствиеИндексовСобытийНаВесьДень[СтрокаСобытияНаВесьДень.ИдентификаторСобытия] <> Неопределено И (НачалоДня(СтрокаСобытияНаВесьДень.ПериодОкончание) = ДатаНачало Или нИндексДата = СтруктураДанныхКлиент.МассивВыбранныхДат.ВГраница()) Тогда
							МассивЗанятыхИндексовСобытийНаВесьДень[СтрокаСобытияНаВесьДень.ИндексСобытияНаВесьДень] = Неопределено;
							СоответствиеИндексовСобытийНаВесьДень.Удалить(СтрокаСобытияНаВесьДень.ИдентификаторСобытия);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаДень.Сортировать("ПолеСортировки УБЫВ, ИндексСобытияНаВесьДень ВОЗР"); // Сортировка важна для отрисовки !
			СоответствиеРезультат.Вставить(НачалоДня(ТекДата), ТаблицаДень);
		КонецЦикла;
		
		бПоказыватьЗадачи = Ложь;
		Если ИспользоватьБизнесПроцессыИЗадачи Тогда
			СтрокаОтборПоказыватьЗадачи = ОтборТипыОбъектов.НайтиСтроки(Новый Структура("ПолноеИмя", "Задачи"));
			Если СтрокаОтборПоказыватьЗадачи.Количество() > 0 Тогда
				бПоказыватьЗадачи = СтрокаОтборПоказыватьЗадачи[0].Пометка;
			КонецЕсли;
		КонецЕсли;
		Если бПоказыватьЗадачи И СтруктураДанныхКлиент.МассивВыбранныхДат.Количество() > 0 Тогда
			ОтборПоЗадачам = СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(Настройки.Отбор));
			ОтборПоЗадачам.Элементы.Очистить();
			
			СоответствиеОтборПоЗадачам = Новый Соответствие();
			бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы = ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(Объект.ТекущееОтображение);
			МассивПропуститьОтборы = Новый Массив();
			Если бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы Тогда
				ГруппаИли = Новый Соответствие();
				
				ТекущиееДеревоРесурсов = ПолучитьДеревоРесурсов();
				Для Каждого ЭлементВерхнегоУровня Из ТекущиееДеревоРесурсов.Строки Цикл
					ПолеОтбора = ЭлементВерхнегоУровня.Имя;
					Если ПолеОтбора <> "Пользователь" Тогда Продолжить; КонецЕсли;
					
					МассивПропуститьОтборы.Добавить(ПолеОтбора);
					
					ОтборЗначениеСписок = Новый СписокЗначений();
					
					Для Каждого ЭлементЗначениеРесурса Из ЭлементВерхнегоУровня.Строки Цикл
						ОтборЗначениеСписок.Добавить(ЭлементЗначениеРесурса.Значение);
					КонецЦикла;
					
					ГруппаИли.Вставить(ПолеОтбора, Новый Соответствие());
					
					ГруппаИли[ПолеОтбора].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.ВСписке);
					ГруппаИли[ПолеОтбора].Вставить("Значение",		ОтборЗначениеСписок);
					ГруппаИли[ПолеОтбора].Вставить("Использование",	Истина);
				КонецЦикла;
				
				Если ГруппаИли.Количество() > 0 Тогда
					СоответствиеОтборПоЗадачам.Вставить("ГруппаОтбораПоВыбраннымРесурсам", Новый Соответствие());
					СоответствиеОтборПоЗадачам["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("ВидСравнения",	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
					СоответствиеОтборПоЗадачам["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Значение",		ГруппаИли);
					СоответствиеОтборПоЗадачам["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Использование",	Истина);
				КонецЕсли;
			ИначеЕсли Объект.ТекущееОтображение = "Диспетчеризация" Тогда
				МассивПропуститьОтборы.Добавить("Пользователь");
				ОтборЗначениеСписок = Новый СписокЗначений();
				ОтборЗначениеСписок.ЗагрузитьЗначения(ПолучитьМассивПользователейДиспетчеризации());
				Если ОтборЗначениеСписок.Количество() > 0 Тогда
					ГруппаИли = Новый Соответствие();
					ГруппаИли.Вставить("Пользователь", Новый Соответствие());
					ГруппаИли["Пользователь"].Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.ВСписке);
					ГруппаИли["Пользователь"].Вставить("Значение",		ОтборЗначениеСписок);
					ГруппаИли["Пользователь"].Вставить("Использование",	Истина);
					
					СоответствиеОтборПоЗадачам.Вставить("ГруппаОтбораПоВыбраннымРесурсам", Новый Соответствие());
					СоответствиеОтборПоЗадачам["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("ВидСравнения",	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
					СоответствиеОтборПоЗадачам["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Значение",		ГруппаИли);
					СоответствиеОтборПоЗадачам["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Использование",	Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не Пользователи.РолиДоступны("CRM_ПросмотрЗадачДругихПользователейВКалендаре, ПолныеПрава") Тогда
				// Если не доступна роль CRM_ПросмотрЗадачДругихПользователейВКалендаре, тогда доступны только объекты
				// по текущему пользователю.
				Если ЗначениеЗаполнено(ОтборЗначениеПользователь) И ОтборИспользованиеПользователь Тогда
					Если ОтборЗначениеПользователь = ТекущийПользовательСеанса Тогда
						ПользовательДляОтбора = ТекущийПользовательСеанса;
					Иначе
						ПользовательДляОтбора = Справочники.Пользователи.ПустаяСсылка();
					КонецЕсли;
				Иначе
					ПользовательДляОтбора = ТекущийПользовательСеанса;
				КонецЕсли;
				
				СоответствиеОтборПоЗадачам.Вставить("Пользователь", Новый Соответствие());
				СоответствиеОтборПоЗадачам["Пользователь"].Вставить("ВидСравнения",		ВидСравненияКомпоновкиДанных.Равно);
				СоответствиеОтборПоЗадачам["Пользователь"].Вставить("Значение",			ПользовательДляОтбора);
				СоответствиеОтборПоЗадачам["Пользователь"].Вставить("Использование",	Истина);
				
				МассивПропуститьОтборы.Добавить("Пользователь");
			КонецЕсли;
			
			// Если используется отображение по ресурсам - все остальные отборы игнорируются.
			ПоляОтбора = ПолучитьМассивДоступныхОтборов();
			Если Не бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы Или Объект.ТекущееОтображение = "Диспетчеризация" Тогда
				Для Каждого ПолеОтбора Из ПоляОтбора Цикл
					Если МассивПропуститьОтборы.Найти(ПолеОтбора) <> Неопределено Тогда Продолжить; КонецЕсли;
					Если Найти(",Подразделение,Пользователь,Проект,Партнер,", "," + ПолеОтбора + ",") = 0 Тогда Продолжить; КонецЕсли;
					
					ИменаДляОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
					ОтборИспользование = ЭтотОбъект[ИменаДляОтбора.ИмяИсточникаДанныхИспользование];
					
					Если ОтборИспользование Тогда
						ОтборВидСравнения = ЭтотОбъект[ИменаДляОтбора.ИмяИсточникаДанныхВидСравнения];
						ОтборЗначение = ЭтотОбъект[ИменаДляОтбора.ИмяИсточникаДанныхЗначение];
						
						СоответствиеОтборПоЗадачам.Вставить(ПолеОтбора, Новый Соответствие());
						СоответствиеОтборПоЗадачам[ПолеОтбора].Вставить("ВидСравнения",	ОтборВидСравнения);
						СоответствиеОтборПоЗадачам[ПолеОтбора].Вставить("Значение",		ОтборЗначение);
						СоответствиеОтборПоЗадачам[ПолеОтбора].Вставить("Использование",	ОтборИспользование);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СоздатьОтборПоОписанию(ОтборПоЗадачам.Элементы, СоответствиеОтборПоЗадачам);
			
			ГруппаФильтрПоДатамИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ОтборПоЗадачам.Элементы, "ЗадачиПоДатеИсполнения", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаФильтрПоДатамИ, "СрокИсполнения", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоДня(СтруктураДанныхКлиент.МассивВыбранныхДат[0]));
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаФильтрПоДатамИ, "СрокИсполнения", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(СтруктураДанныхКлиент.МассивВыбранныхДат[СтруктураДанныхКлиент.МассивВыбранныхДат.ВГраница()]));
			
			ТекстЗапросаЗадачи = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачаИсполнителя.Ссылка							КАК Ссылка,
			|	ЗадачаИсполнителя.Выполнена							КАК Выполнена,
			|	ЗадачаИсполнителя.Наименование						КАК Тема,
			|	ЗадачаИсполнителя.СрокИсполнения					КАК СрокИсполнения,
			|	ЗадачаИсполнителя.Важность							КАК Важность,
			|	ЗадачаИсполнителя.Исполнитель.Подразделение			КАК Подразделение,
			|	ЗадачаИсполнителя.Исполнитель						КАК Пользователь,
			|	
			|	ВЫБОР
			|		КОГДА 
			|			ЗадачаИсполнителя.CRM_Личная
			|		ТОГДА
			|			ЗадачаИсполнителя.CRM_Партнер
			|		ИНАЧЕ
			|			ЗадачаИсполнителя.Ссылка.БизнесПроцесс.Партнер
			|	КОНЕЦ КАК Партнер,
			|	
			|	ВЫБОР
			|		КОГДА 
			|			ЗадачаИсполнителя.CRM_Личная
			|		ТОГДА
			|			ЗадачаИсполнителя.CRM_Проект
			|		ИНАЧЕ
			|			ЗадачаИсполнителя.Ссылка.БизнесПроцесс.Проект
			|	КОНЕЦ КАК Проект
			|	
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	(ЗадачаИсполнителя.CRM_Личная ИЛИ ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен))
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
			|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
			|";
			
			ТаблицаОтображаемыхЗадач = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапросаЗадачи, ОтборПоЗадачам);
			Если ТаблицаОтображаемыхЗадач.Количество() > 0 Тогда
				Для Каждого ТаблицаДеньКлючЗначение Из СоответствиеРезультат Цикл
					ТекущаяТаблицаДень = ТаблицаДеньКлючЗначение.Значение;
					
					// Добавление в описание типов колонки "Событие" задачи исполнителя.
					ОписаниеТиповКолонкиСобытие = Новый ОписаниеТипов(ТекущаяТаблицаДень.Колонки.Событие.ТипЗначения, "ЗадачаСсылка.ЗадачаИсполнителя");
					ЗначенияКолонкиСобытие = ТекущаяТаблицаДень.ВыгрузитьКолонку("Событие");
					ТекущаяТаблицаДень.Колонки.Удалить(ТекущаяТаблицаДень.Колонки.Событие);
					ТекущаяТаблицаДень.Колонки.Добавить("Событие", ОписаниеТиповКолонкиСобытие);
					ТекущаяТаблицаДень.ЗагрузитьКолонку(ЗначенияКолонкиСобытие, "Событие");
					
					Если ТекущаяТаблицаДень.Количество() = 0 Тогда
						МаксимальныйИндексСобытийНаВесьДень = -1;
					Иначе
						МассивСтрокиСобытияНаВесьДень = ТекущаяТаблицаДень.НайтиСтроки(Новый Структура("СобытиеНаВесьДень", Истина));
						Если МассивСтрокиСобытияНаВесьДень.Количество() = 0 Тогда
							МаксимальныйИндексСобытийНаВесьДень = -1;
						Иначе
							КопияТекущаяТаблицаДень = ТекущаяТаблицаДень.Скопировать(МассивСтрокиСобытияНаВесьДень, "ИндексСобытияНаВесьДень");
							КопияТекущаяТаблицаДень.Сортировать("ИндексСобытияНаВесьДень УБЫВ");
							МаксимальныйИндексСобытийНаВесьДень = КопияТекущаяТаблицаДень[0].ИндексСобытияНаВесьДень;
						КонецЕсли;
					КонецЕсли;
					ТекИндексСобытийНаВесьДень = МаксимальныйИндексСобытийНаВесьДень + 1;
					
					Для Каждого СтрокаЗадача Из ТаблицаОтображаемыхЗадач Цикл
						Если СтрокаЗадача.СрокИсполнения >= НачалоДня(ТаблицаДеньКлючЗначение.Ключ) И СтрокаЗадача.СрокИсполнения <= КонецДня(ТаблицаДеньКлючЗначение.Ключ) Тогда
							НоваяСтрока = ТекущаяТаблицаДень.Добавить();
							НоваяСтрока.Событие					= СтрокаЗадача.Ссылка;
							Если СтрокаЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
								НоваяСтрока.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая;
							ИначеЕсли СтрокаЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
								НоваяСтрока.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
							ИначеЕсли СтрокаЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
								НоваяСтрока.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая;
							Иначе
								НоваяСтрока.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
							КонецЕсли;
							
							НоваяСтрока.Завершено				= Ложь;
							НоваяСтрока.Пользователь			= СтрокаЗадача.Пользователь;
							НоваяСтрока.ПериодНачало			= СтрокаЗадача.СрокИсполнения;
							НоваяСтрока.ПериодОкончание			= СтрокаЗадача.СрокИсполнения;
							НоваяСтрока.Тема					= СтрЗаменить(НСтр("ru = 'Задача: %Тема%'"), "%Тема%", СтрокаЗадача.Тема);
							НоваяСтрока.СобытиеНаВесьДень		= Истина;
							НоваяСтрока.ИндексСобытияНаВесьДень	= ТекИндексСобытийНаВесьДень;
							НоваяСтрока.ИдентификаторСобытия	= Строка(Новый УникальныйИдентификатор());
							
							МаксимальныйИндексСобытияНаВесьДень = Макс(МаксимальныйИндексСобытияНаВесьДень, НоваяСтрока.ИндексСобытияНаВесьДень);
							
							ТекИндексСобытийНаВесьДень = ТекИндексСобытийНаВесьДень + 1;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураДанныхКлиент.Свойство("ПараметрОповещенияОЗаписиСобытия") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия) Тогда
			Для Каждого СоответствиеРезультатКлючЗначение Из СоответствиеРезультат Цикл
				ЗаписанноеСобытиеНеВходитВТекущийОтбор = ПроверитьЗаписанноеСобытиеНеВходитВТекущийОтбор(СоответствиеРезультат[СоответствиеРезультатКлючЗначение.Ключ], СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия);
				Если Не ЗаписанноеСобытиеНеВходитВТекущийОтбор Тогда Прервать; КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат СоответствиеРезультат;
	ИначеЕсли Объект.ТекущееОтображение = "Месяц" Тогда
		КоличествоСекундВДне = 24 * 60 * 60;
		КоличествоДнейВПериоде = Цел((ПериодОкончание - ПериодНачало + 1) / КоличествоСекундВДне);
		
		СтрокаКолонкиДни = "";
		ОписаниеТиповЧисло2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0));
		ОписаниеТиповЧисло10 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
		ОписаниеТиповДата = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
		Для нИндекс = 1 По КоличествоДнейВПериоде Цикл
			ИндексДатаСтр = "ИндексДня" + нИндекс;
			РезультатТаблица.Колонки.Добавить(ИндексДатаСтр, ОписаниеТиповЧисло2);
			СтрокаКолонкиДни = СтрокаКолонкиДни + ИндексДатаСтр + ",";
		КонецЦикла;
		РезультатТаблица.Колонки.Добавить("ГоризонтальныйИндексСобытия", ОписаниеТиповЧисло2);
		РезультатТаблица.Колонки.Добавить("ИндексНачало", ОписаниеТиповЧисло2);
		РезультатТаблица.Колонки.Добавить("ИндексКонец", ОписаниеТиповЧисло2);
		РезультатТаблица.Колонки.Добавить("ПериодНачалоДляСортировки", ОписаниеТиповДата);
		РезультатТаблица.Колонки.Добавить("ДопПолеСортировки", ОписаниеТиповЧисло10);
		РезультатТаблица.Колонки.Добавить("ИдентификаторСобытия", ОписаниеТиповСтрока);
		СтрокаКолонкиДни = Лев(СтрокаКолонкиДни, СтрДлина(СтрокаКолонкиДни) - 1);
		
		Для Каждого СтрокаТаблицы Из РезультатТаблица Цикл
			Если Не СтрокаТаблицы.СобытиеНаВесьДень И НачалоДня(СтрокаТаблицы.ПериодНачало) <> НачалоДня(СтрокаТаблицы.ПериодОкончание) Тогда
				СтрокаТаблицы.СобытиеНаВесьДень = Истина;
			КонецЕсли;
			СтрокаТаблицы.ДопПолеСортировки = КонецДня(СтрокаТаблицы.ПериодОкончание) - НачалоДня(СтрокаТаблицы.ПериодНачало);
			
			Если СтрокаТаблицы.СобытиеНаВесьДень Тогда
				СтрокаТаблицы.ПериодНачалоДляСортировки = НачалоДня(СтрокаТаблицы.ПериодНачало);
			Иначе
				СтрокаТаблицы.ПериодНачалоДляСортировки = СтрокаТаблицы.ПериодНачало;
			КонецЕсли;
			
			СтрокаТаблицы.ИдентификаторСобытия = Строка(Новый УникальныйИдентификатор());
		КонецЦикла;
		// Сортировка важна для отрисовки !
		РезультатТаблица.Сортировать("ПериодНачалоДляСортировки ВОЗР, ДопПолеСортировки УБЫВ, СобытиеНаВесьДень УБЫВ, Событие ВОЗР");
		
		РезультатТаблицаСвободныеГоризонтальныеИндексы = РезультатТаблица.Скопировать(, СтрокаКолонкиДни);
		СоответствиеГоризонтальныхИндексовСобытий = Новый Соответствие();
		Для Каждого СтрокаТаблицы Из РезультатТаблица Цикл
			ТекущееСобытиеНачалось = Ложь;
			ТекущееСобытиеЗакончилось = Ложь;
			СтруктураПоискаСвободногоИндекса = Новый Структура();
			Для нИндексДата = 1 По КоличествоДнейВПериоде Цикл
				ТекДата = ПериодНачало + (нИндексДата - 1) * КоличествоСекундВДне;
				ДатаНачало = НачалоДня(ТекДата);
				ДатаОкончание = КонецДня(ТекДата);
				ИндексДатаСтр = "ИндексДня" + нИндексДата;
				
				Если СтрокаТаблицы.ПериодОкончание >= ДатаНачало И СтрокаТаблицы.ПериодНачало <= ДатаОкончание Тогда
					Если Не ТекущееСобытиеНачалось Тогда
						ТекущееСобытиеНачалось = Истина;
						СтрокаТаблицы.ИндексНачало = нИндексДата;
					КонецЕсли;
					
					СтрокаТаблицы[ИндексДатаСтр] = 1;
					
					СтруктураПоискаСвободногоИндекса.Вставить(ИндексДатаСтр, 0);
					
				ИначеЕсли ТекущееСобытиеНачалось И Не ТекущееСобытиеЗакончилось Тогда
					СтрокаТаблицы.ИндексКонец = нИндексДата - 1;
					ТекущееСобытиеЗакончилось = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ТекущееСобытиеНачалось И Не ТекущееСобытиеЗакончилось Тогда
				СтрокаТаблицы.ИндексКонец = КоличествоДнейВПериоде;
			КонецЕсли;
			// Поиск свободного горизонтального индекса.
			Если СоответствиеГоризонтальныхИндексовСобытий[СтрокаТаблицы.ИдентификаторСобытия] = Неопределено Тогда
				НайденныеСтроки = РезультатТаблицаСвободныеГоризонтальныеИндексы.НайтиСтроки(СтруктураПоискаСвободногоИндекса);
				ИндексНайденнойСтроки = РезультатТаблицаСвободныеГоризонтальныеИндексы.Индекс(НайденныеСтроки[0]);
				СтрокаТаблицы.ГоризонтальныйИндексСобытия = ИндексНайденнойСтроки;
				Для н = СтрокаТаблицы.ИндексНачало По СтрокаТаблицы.ИндексКонец Цикл
					РезультатТаблицаСвободныеГоризонтальныеИндексы[ИндексНайденнойСтроки]["ИндексДня" + н] = 1;
				КонецЦикла;
				СоответствиеГоризонтальныхИндексовСобытий.Вставить(СтрокаТаблицы.ИдентификаторСобытия, СтрокаТаблицы.ГоризонтальныйИндексСобытия);
			Иначе
				СтрокаТаблицы.ГоризонтальныйИндексСобытия = СоответствиеГоризонтальныхИндексовСобытий[СтрокаТаблицы.ИдентификаторСобытия];
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураДанныхКлиент.Свойство("ПараметрОповещенияОЗаписиСобытия") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия) Тогда
			ЗаписанноеСобытиеНеВходитВТекущийОтбор = ПроверитьЗаписанноеСобытиеНеВходитВТекущийОтбор(РезультатТаблица, СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия);
		КонецЕсли;
		
		Возврат РезультатТаблица;
	ИначеЕсли Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1) Тогда
		РезультатТаблица.Сортировать("ПериодНачало ВОЗР, Событие ВОЗР"); // Сортировка важна для отрисовки !
		
		Если СтруктураДанныхКлиент.Свойство("ПараметрОповещенияОЗаписиСобытия") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия) Тогда
			ЗаписанноеСобытиеНеВходитВТекущийОтбор = ПроверитьЗаписанноеСобытиеНеВходитВТекущийОтбор(РезультатТаблица, СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия);
		КонецЕсли;
		
		Возврат РезультатТаблица;
	ИначеЕсли Объект.ТекущееОтображение = "Список" Тогда
		СоответствиеРезультат = Новый Соответствие();
		
		Если Не СписокКалендаряГруппироватьПоДням Тогда
			РезультатТаблица.Сортировать("ПериодНачало ВОЗР, Событие ВОЗР");
		КонецЕсли;
		СоответствиеРезультат.Вставить("ТаблицаОбщая", РезультатТаблица);
		
		Если СписокКалендаряГруппироватьПоДням Тогда
			бИспользуетсяПолнотекстовыйПоискСписка = (Объект.ТекущееОтображение = "Список" И ЗначениеЗаполнено(КалендарьСписокТекстПоиска));
			Если бИспользуетсяПолнотекстовыйПоискСписка Тогда
				МассивВыбранныхДат = Новый Массив();
				
				Если РезультатТаблица.Количество() > 0 Тогда
					ТаблицаПериоды = РезультатТаблица.Скопировать(, "ПериодНачало,ПериодОкончание");
					ТаблицаПериоды.Сортировать("ПериодНачало ВОЗР");
					МинимальнаяДатаВМассиве = НачалоДня(ТаблицаПериоды[0].ПериодНачало);
					ТаблицаПериоды.Сортировать("ПериодОкончание УБЫВ");
					МаксимальнаяДатаВМассиве = НачалоДня(ТаблицаПериоды[0].ПериодОкончание);
					
					КоличествоСекундВДне = 24 * 60 * 60;
					ТекДата = МинимальнаяДатаВМассиве;
					Пока ТекДата <= МаксимальнаяДатаВМассиве Цикл
						МассивВыбранныхДат.Добавить(ТекДата);
						ТекДата = ТекДата + КоличествоСекундВДне;
					КонецЦикла;
				КонецЕсли;
				
				СоответствиеРезультат.Вставить("МассивВыбранныхДат", МассивВыбранныхДат);
				
				Если Не ЗначениеЗаполнено(ТекстОшибкиГлобальный) И РезультатТаблица.Количество() = 0 Тогда
					ТекстОшибкиГлобальный = НСтр("ru = 'Ничего не найдено'");
				КонецЕсли;
			Иначе
				МассивВыбранныхДат = СтруктураДанныхКлиент.МассивВыбранныхДат;
			КонецЕсли;
			
			Для нИндексДата = 0 По МассивВыбранныхДат.ВГраница() Цикл
				ТекДата = МассивВыбранныхДат[нИндексДата];
				ДатаНачало = НачалоДня(ТекДата);
				ДатаОкончание = КонецДня(ТекДата);
				ДатаНачалаСобытиеНаВесьДень = НачалоДня(ТекДата) + НастройкиОтображения.НачалоДняКалендаряЧас * 60 * 60;
				ДатаОкончанияСобытиеНаВесьДень = НачалоДня(ТекДата) + НастройкиОтображения.КонецДняКалендаряЧас * 60 * 60 + 30 * 60 + 1;
				
				ТаблицаДень = Неопределено;
				
				Для Каждого СтрокаТаблицы Из РезультатТаблица Цикл
					Если СтрокаТаблицы.ПериодОкончание >= ДатаНачало И СтрокаТаблицы.ПериодНачало <= ДатаОкончание Тогда
						Если ТаблицаДень = Неопределено Тогда
							ТаблицаДень = РезультатТаблица.Скопировать(Новый Массив());
						КонецЕсли;
						
						НоваяСтрока = ТаблицаДень.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						
						Если Не НоваяСтрока.СобытиеНаВесьДень Тогда
							Если	НачалоДня(НоваяСтрока.ПериодНачало) <> НачалоДня(НоваяСтрока.ПериодОкончание)
								ИЛИ	НоваяСтрока.ПериодНачало <= ДатаНачалаСобытиеНаВесьДень И НоваяСтрока.ПериодОкончание >= ДатаОкончанияСобытиеНаВесьДень Тогда
								//
								НоваяСтрока.СобытиеНаВесьДень = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ТаблицаДень <> Неопределено И ТаблицаДень.Количество() > 0 Тогда
					ТаблицаДень.Сортировать("ПериодНачало ВОЗР, Событие ВОЗР");
					СоответствиеРезультат.Вставить(НачалоДня(ТекДата), ТаблицаДень);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураДанныхКлиент.Свойство("ПараметрОповещенияОЗаписиСобытия") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия) Тогда
			Для Каждого СоответствиеРезультатКлючЗначение Из СоответствиеРезультат Цикл
				ПроверяемаяТаблица = СоответствиеРезультат[СоответствиеРезультатКлючЗначение.Ключ];
				Если ТипЗнч(ПроверяемаяТаблица) = Тип("ТаблицаЗначений") И ПроверяемаяТаблица.Колонки.Найти("Событие") <> Неопределено Тогда
					ЗаписанноеСобытиеНеВходитВТекущийОтбор = ПроверитьЗаписанноеСобытиеНеВходитВТекущийОтбор(ПроверяемаяТаблица, СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия);
					Если Не ЗаписанноеСобытиеНеВходитВТекущийОтбор Тогда Прервать; КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат СоответствиеРезультат;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьСписокСобытийНаДеньНаСервере(ДатаДень)
	НастройкиОтображения = ПолучитьНастройкиОтображения();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователя.Объект		КАК Событие,
	|	СобытияКалендаряПользователя.Завершено	КАК Завершено
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК СобытияКалендаряПользователя
	|ГДЕ
	|	СобытияКалендаряПользователя.ПериодОкончание >= &ДатаНачало И СобытияКалендаряПользователя.ПериодНачало <= &ДатаОкончание И СобытияКалендаряПользователя.ПериодОкончание >= СобытияКалендаряПользователя.ПериодНачало
	|");
	Запрос.УстановитьПараметр("ДатаНачало",		НачалоДня(ДатаДень));
	Запрос.УстановитьПараметр("ДатаОкончание",	КонецДня(ДатаДень));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокРезультат = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеСобытия = Неопределено;
		НайденныеСтроки = ТаблицаРасшифровок.НайтиСтроки(Новый Структура("Событие", Выборка.Событие));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ПериодОкончание >= НачалоДня(ДатаДень) И НайденнаяСтрока.ПериодНачало <= КонецДня(ДатаДень) Тогда
				СтруктураЗначение = Новый Структура("Событие,ИдентификаторСобытия,ЦветФона,ЦветТекста,Шрифт", Выборка.Событие, НайденнаяСтрока.ИдентификаторСобытия,
					НайденнаяСтрока.ЦветФона, НайденнаяСтрока.ЦветТекста, НайденнаяСтрока.Шрифт);
				//
				СписокРезультат.Добавить(СтруктураЗначение, ПолучитьПредставлениеСобытияПоСсылке(Выборка.Событие, НастройкиОтображения, НайденнаяСтрока));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокРезультат;
КонецФункции

&НаСервере
Функция НайтиОбъектыПолнотекстовыйПоискРежимСписок()
	СписокНайденныхОбъектов.Очистить();
	
	мОбластьПоиска = Новый Массив;
	РазмерПорции = 200;
	СтрокаДляПоиска = ?(КалендарьСписокФлагПоискПоПодстроке, "" + КалендарьСписокТекстПоиска + "*", КалендарьСписокТекстПоиска);
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаДляПоиска, РазмерПорции);
	
	РегистрируемыеОбъекты = ПолучитьРегистрируемыеОбъекты();
	Для Каждого ОбъектСтрока Из РегистрируемыеОбъекты Цикл
		Если ОбъектСтрока.УчаствуетВПолнотекстовомПоиске Тогда
			мОбластьПоиска.Добавить(ОбъектСтрока.Объект);
		КонецЕсли;
	КонецЦикла;
	СписокПоиска.ОбластьПоиска = мОбластьПоиска;
	СписокПоиска.ПорогНечеткости = 0;
	СписокПоиска.ПолучатьОписание = Ложь;
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		ИО = ИнформацияОбОшибке();
		Если ИО.Причина = Неопределено Тогда
			ТекстОшибки = ИО.Описание;
		Иначе
			Если ЗначениеЗаполнено(ИО.Причина.Описание) Тогда
				ТекстОшибки = ИО.Причина.Описание;
			Иначе
				ТекстОшибки = ИО.Описание;
			КонецЕсли;
		КонецЕсли;
		СписокНайденныхОбъектов.Очистить();
		
		Возврат ТекстОшибки;
	КонецПопытки;
	
	// Возврат, если поиск не результативен.
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		СписокНайденныхОбъектов.Очистить();
		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
	КонецЕсли;
	
	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		СписокНайденныхОбъектов.Очистить();
		Возврат НСтр("ru = 'Ничего не найдено'");
	КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	СписокНайденныхОбъектов.Очистить();
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов) - 1;
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			ЭлементСсылка = Элемент.Значение.Ссылка;
			
			Если СписокНайденныхОбъектов.НайтиПоЗначению(ЭлементСсылка) = Неопределено Тогда
				СписокНайденныхОбъектов.Добавить(ЭлементСсылка);
				Если СписокНайденныхОбъектов.Количество() > 200 Тогда
					СписокНайденныхОбъектов.Очистить();
					Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	Если СписокНайденныхОбъектов.Количество() = 0 Тогда
		СписокНайденныхОбъектов.Очистить();
		Возврат НСтр("ru = 'Ничего не найдено.'");          
	КонецЕсли;
	
	// Удалим элемент из истории поиска если он там был.
	НомерНайденногоЭлементаСписка = КалендарьСписокТекстПоискаСписокВыбора.НайтиПоЗначению(КалендарьСписокТекстПоиска);
	Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
		КалендарьСписокТекстПоискаСписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
		НомерНайденногоЭлементаСписка = КалендарьСписокТекстПоискаСписокВыбора.НайтиПоЗначению(КалендарьСписокТекстПоиска);
	КонецЦикла;	
	// Поставим элемент на первое место.
	КалендарьСписокТекстПоискаСписокВыбора.Вставить(0, КалендарьСписокТекстПоиска);
	Пока КалендарьСписокТекстПоискаСписокВыбора.Количество() > 100 Цикл
		КалендарьСписокТекстПоискаСписокВыбора.Удалить(КалендарьСписокТекстПоискаСписокВыбора.Количество() - 1);
	КонецЦикла;
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_Календарь_Настройки", "ИсторияПоиска", КалендарьСписокТекстПоискаСписокВыбора.ВыгрузитьЗначения());
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписокЗадач()
	Возврат Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя");
КонецФункции

&НаКлиенте
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписокСобытийДиспетчеризации()
	Возврат Новый ОписаниеТипов("ДокументСсылка.УдалитьCRM_Событие");
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВажностьЗадачиПоВажностиСобытия(ВажностьСобытия)

	Если ВажностьСобытия = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
		Возврат Перечисления.ВариантыВажностиЗадачи.Высокая;
	ИначеЕсли ВажностьСобытия = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
		Возврат Перечисления.ВариантыВажностиЗадачи.Низкая;
	ИначеЕсли ВажностьСобытия = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
		Возврат Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция СобытиеУжеПринятоКИсполнению(Событие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.Дата КАК Дата
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.Выполнена)
	|	И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И ЗадачаИсполнителя.Предмет = &Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Предмет",Событие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПеренестиЗадачиНаСервере(МассивЗадач, ВариантПереноса, Знач ДатаПереноса = Неопределено, БылиПеренесеныСобытия = Ложь, ОбновитьКалендарь = Ложь, ОбновитьСписокЗадач = Ложь)
	бОшибки = Ложь;
	РезультатВыполнения = Истина;
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
		Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда Продолжить; КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗадачаСсылка.СрокИсполнения) Тогда
			ОбновитьКалендарь = Истина;
		КонецЕсли;
		
		БылиПеренесеныСобытия = Ложь;
		РезультатВыполнения = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренестиЗадачу(ЗадачаСсылка, ВариантПереноса, ДатаПереноса, Истина, Истина, БылиПеренесеныСобытия);
		
		Если Не РезультатВыполнения Тогда
			бОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если бОшибки Тогда
		БылиПеренесеныСобытия = Ложь;
	КонецЕсли;
	
	Если ОбновитьСписокЗадач Тогда
		ОбновитьСписокЗадачНаСервере();
	КонецЕсли;
	
	Возврат Не бОшибки;
КонецФункции

&НаКлиенте
Процедура ОбновитьПолеКалендарьДетальноеОписание(СсылкаНаОбъект)
	СтрКалендарьДетальноеОписание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(
		СсылкаНаОбъект, ПолучитьОписаниеТиповПоляОтображенияСодержанияКалендаря());
		
	//
	Если КалендарьДетальноеОписание <> СтрКалендарьДетальноеОписание Тогда
		КалендарьДетальноеОписание = СтрКалендарьДетальноеОписание;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеОтображенияСодержанияСписокЗадач(СсылкаНаТекущийОбъект)
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(
		ЭтотОбъект, СсылкаНаТекущийОбъект, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписокЗадач(), "ГруппаСписокЗадачДетальноеОписание", "СписокЗадачДетальноеОписание");
	//
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеОтображенияСодержанияСписокСобытийДиспетчеризации(СсылкаНаТекущийОбъект)
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(
		ЭтотОбъект, СсылкаНаТекущийОбъект, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписокСобытийДиспетчеризации(), "ГруппаДиспетчеризацияДетальноеОписание", "ДиспетчеризацияДетальноеОписание");
	//
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРесурса(ЗначениеРесурса)
	Если ЗначениеЗаполнено(ЗначениеРесурса) Тогда
		Если ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.Пользователи") Тогда
			ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Ключ", ЗначениеРесурса), ЭтотОбъект);
		ИначеЕсли ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.CRM_Помещения") Тогда
			ОткрытьФорму("Справочник.CRM_Помещения.ФормаОбъекта", Новый Структура("Ключ", ЗначениеРесурса), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокОбновитьПоБыстромуПоиску()
	Если ЗначениеЗаполнено(КалендарьСписокТекстПоиска) И Объект.ТекущееОтображение <> "Список" Тогда
		ПризнакПереключениеВРежимСпискаПоиском = Истина;
		КомандаТекущееОтображениеСписок(Неопределено);
	КонецЕсли;
	
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	
	Если ЗначениеЗаполнено(КалендарьСписокТекстПоиска) Тогда
		ПроверитьИндексППД();
	КонецЕсли;
	
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИдентификаторыСтрокВМассив(НайденнаяСтрока, Массив)
	Если НайденнаяСтрока.ЭтоСистемнаяГруппа Тогда
		Если Массив.Найти(НайденнаяСтрока.ПолучитьИдентификатор()) = Неопределено Тогда
			Массив.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		Возврат;
	Иначе
		Если Не НайденнаяСтрока.ЭтоГруппа И Не НайденнаяСтрока.ЭтоЗаголовок Тогда
			Если Массив.Найти(НайденнаяСтрока.ПолучитьИдентификатор()) = Неопределено Тогда
				Массив.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
		НайденнаяСтрокаЭлементы = НайденнаяСтрока.ПолучитьЭлементы();
		Если НайденнаяСтрокаЭлементы.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрокаЭлемент Из НайденнаяСтрокаЭлементы Цикл
				ДобавитьИдентификаторыСтрокВМассив(НайденнаяСтрокаЭлемент, Массив);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов()
	СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов.Очистить();
	
	МассивИдентификаторовСтрок = Новый Массив();
	
	ВыделенныеСтроки = Элементы.ДеревоРесурсов.ВыделенныеСтроки;
	Если ТипЗнч(ВыделенныеСтроки) = Тип("Массив") Тогда
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Если МассивИдентификаторовСтрок.Найти(ВыделеннаяСтрока) = Неопределено Тогда
				МассивИдентификаторовСтрок.Добавить(ВыделеннаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И МассивИдентификаторовСтрок.Найти(ТекущиеДанные.ПолучитьИдентификатор()) = Неопределено Тогда
		МассивИдентификаторовСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	МассивРезультат = Новый Массив();
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
		НайденнаяСтрока = ДеревоРесурсов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если НайденнаяСтрока <> Неопределено Тогда
			ДобавитьИдентификаторыСтрокВМассив(НайденнаяСтрока, МассивРезультат);
		КонецЕсли;
	КонецЦикла;
	
	СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов.ЗагрузитьЗначения(МассивРезультат);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИдентификаторыСтрокДереваПользователейДиспетчеризацииВМассив(НайденнаяСтрока, Массив)
	Если Не НайденнаяСтрока.ЭтоГруппа Тогда
		Если Массив.Найти(НайденнаяСтрока.ПолучитьИдентификатор()) = Неопределено Тогда
			Массив.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	НайденнаяСтрокаЭлементы = НайденнаяСтрока.ПолучитьЭлементы();
	Если НайденнаяСтрокаЭлементы.Количество() > 0 Тогда
		Для Каждого НайденнаяСтрокаЭлемент Из НайденнаяСтрокаЭлементы Цикл
			ДобавитьИдентификаторыСтрокДереваПользователейДиспетчеризацииВМассив(НайденнаяСтрокаЭлемент, Массив);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеПользователейДиспетчеризации()
	СписокИдентификаторовВыделенныхСтрокВДеревеПользователейДиспетчеризации.Очистить();
	
	МассивИдентификаторовСтрок = Новый Массив();
	
	ВыделенныеСтроки = Элементы.ДеревоПользователейДиспетчеризации.ВыделенныеСтроки;
	Если ТипЗнч(ВыделенныеСтроки) = Тип("Массив") Тогда
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Если МассивИдентификаторовСтрок.Найти(ВыделеннаяСтрока) = Неопределено Тогда
				МассивИдентификаторовСтрок.Добавить(ВыделеннаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПользователейДиспетчеризации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И МассивИдентификаторовСтрок.Найти(ТекущиеДанные.ПолучитьИдентификатор()) = Неопределено Тогда
		МассивИдентификаторовСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	МассивРезультат = Новый Массив();
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
		НайденнаяСтрока = ДеревоПользователейДиспетчеризации.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если НайденнаяСтрока <> Неопределено Тогда
			ДобавитьИдентификаторыСтрокДереваПользователейДиспетчеризацииВМассив(НайденнаяСтрока, МассивРезультат);
		КонецЕсли;
	КонецЦикла;
	
	СписокИдентификаторовВыделенныхСтрокВДеревеПользователейДиспетчеризации.ЗагрузитьЗначения(МассивРезультат);
КонецПроцедуры

&НаКлиенте
Процедура РасширитьСписокМесяцев(РасширитьВниз = Ложь)
	ДобавитьМесяцев = 12;
	СтрЕще = НСтр("ru = 'Еще...'");
	
	Если РасширитьВниз Тогда
		ТекМесяц = НачалоМесяца(СписокВыборМесяца[СписокВыборМесяца.Количество() - 2].Значение);
		Для н = 1 По ДобавитьМесяцев Цикл
			ДобавляемыйМесяц = ДобавитьМесяц(ТекМесяц, н);
			Если н = 1 Тогда
				СписокВыборМесяца[СписокВыборМесяца.Количество() - 1].Значение = ДобавляемыйМесяц;
				СписокВыборМесяца[СписокВыборМесяца.Количество() - 1].Представление = Формат(ДобавляемыйМесяц, "ДФ='ММММ гггг'") + " " + НСтр("ru = 'г.'");
			Иначе
				СписокВыборМесяца.Добавить(ДобавляемыйМесяц, Формат(ДобавляемыйМесяц, "ДФ='ММММ гггг'") + " " + НСтр("ru = 'г.'"));
			КонецЕсли;
		КонецЦикла;
		СписокВыборМесяца.Добавить(Дата("99990101"), СтрЕще);
	Иначе 
		ТекМесяц = НачалоМесяца(СписокВыборМесяца[1].Значение);
		Для н = 1 По ДобавитьМесяцев Цикл
			ДобавляемыйМесяц = ДобавитьМесяц(ТекМесяц, -н);
			Если н = 1 Тогда
				СписокВыборМесяца[0].Значение = ДобавляемыйМесяц;
				СписокВыборМесяца[0].Представление = Формат(ДобавляемыйМесяц, "ДФ='ММММ гггг'") + " " + НСтр("ru = 'г.'");
			Иначе
				СписокВыборМесяца.Вставить(0, ДобавляемыйМесяц, Формат(ДобавляемыйМесяц, "ДФ='ММММ гггг'") + " " + НСтр("ru = 'г.'"));
			КонецЕсли;
		КонецЦикла;
		СписокВыборМесяца.Вставить(0, Дата("00010101"), СтрЕще);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьМесяцВСписке(ВыделяемыйМесяц = Неопределено)
	бСинхронизироватьДатуКалендаря = ЗначениеЗаполнено(ВыделяемыйМесяц);
	
	Если ВыделяемыйМесяц = Неопределено Тогда
		ВыделяемыйМесяц = НачалоМесяца(Объект.ДатаКалендаря);
	КонецЕсли;
	НайденныеДанные = СписокВыборМесяца.НайтиПоЗначению(ВыделяемыйМесяц);
	Если НайденныеДанные = Неопределено Тогда
		РасширитьСписокМесяцев(ВыделяемыйМесяц > СписокВыборМесяца[1].Значение);
		НайденныеДанные = СписокВыборМесяца.НайтиПоЗначению(ВыделяемыйМесяц);
	КонецЕсли;
	
	Если НайденныеДанные <> Неопределено Тогда
		Если бСинхронизироватьДатуКалендаря Тогда
			Объект.ДатаКалендаря = НайденныеДанные.Значение;
		КонецЕсли;
		
		Элементы.СписокВыборМесяца.ТекущаяСтрока = НайденныеДанные.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСвойстваДинамическогоСпискаСписокЗадачКлиент()
	Если ТипЗнч(КэшСвойстваДинамическогоСпискаСписокЗадач) <> Тип("Структура") Тогда
		КэшСвойстваДинамическогоСпискаСписокЗадач = ПолучитьСвойстваДинамическогоСпискаСписокЗадачСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСпискаСписокЗадач;
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваДинамическогоСпискаСписокСобытийДиспетчеризацииКлиент()
	Если ТипЗнч(КэшСвойстваДинамическогоСпискаСписокСобытийДиспетчеризации) <> Тип("Структура") Тогда
		КэшСвойстваДинамическогоСпискаСписокСобытийДиспетчеризации = ПолучитьСвойстваДинамическогоСпискаСписокСобытийДиспетчеризацииСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСпискаСписокСобытийДиспетчеризации;
КонецФункции

&НаКлиенте
Процедура ПроверитьИндексППД()
	Если Не ИндексППДАктуален Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьИндексППДЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет); 
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексППДЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ИндексППДАктуален = Истина;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеИндексаПДД", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиОтображенияКлиент()
	Если ТипЗнч(Объект.КэшНастроекОтображения) <> Тип("Структура") Тогда
		ЗагрузитьНастройкиКалендаря();
	КонецЕсли;
	Возврат Объект.КэшНастроекОтображения.НастройкиОтображения;
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиОбщиеКлиент()
	Если ТипЗнч(Объект.КэшНастроекОтображения) <> Тип("Структура") Тогда
		ЗагрузитьНастройкиКалендаря();
	КонецЕсли;
	Возврат Объект.КэшНастроекОтображения.ОбщиеНастройки;
КонецФункции

&НаКлиенте
Функция ПолучитьМассивВыбранныхДат(бПолучатьПоВыделеннымДатамВКалендаре = Истина)
	НастройкиОтображения = ПолучитьНастройкиОтображенияКлиент();
	
	МассивВыбранныхДат = Новый Массив();
	
	КоличествоСекундВДне = 24 * 60 * 60;
	
	Если Объект.ТекущееОтображение = "Месяц" Тогда
		МесяцНачало = НачалоМесяца(Объект.ДатаКалендаря);
		МесяцКонец = НачалоДня(КонецМесяца(МесяцНачало));
		ТекДата = МесяцНачало;
		
		Пока ТекДата <= МесяцКонец Цикл
			МассивВыбранныхДат.Добавить(ТекДата);
			ТекДата = ТекДата + КоличествоСекундВДне;
		КонецЦикла;
		
	ИначеЕсли Объект.ТекущееОтображение = "Неделя" Тогда
		НеделяНачало = НачалоНедели(Объект.ДатаКалендаря);
		ТекДата = НеделяНачало;
		Для нИндекс = 0 По НастройкиОтображения.КалендарьКоличествоДнейВНеделе - 1 Цикл
			МассивВыбранныхДат.Добавить(НачалоДня(ТекДата + нИндекс * КоличествоСекундВДне));
		КонецЦикла;
		
	Иначе
		Если бПолучатьПоВыделеннымДатамВКалендаре Тогда
			Если Тип(Элементы.ДатаКалендаря.ВыделенныеДаты) <> Тип("Массив") Или Элементы.ДатаКалендаря.ВыделенныеДаты.Количество() = 0 Тогда
				МассивВыбранныхДат.Добавить(Объект.ДатаКалендаря);
			Иначе
				МассивВыбранныхДат = Элементы.ДатаКалендаря.ВыделенныеДаты;
			КонецЕсли;
			
			СортироватьМассивПоВозрастанию(МассивВыбранныхДат);
			
		КонецЕсли;
		
		Если Объект.ТекущееОтображение = "Список" Тогда
			Если бПолучатьПоВыделеннымДатамВКалендаре Тогда
				МинимальнаяДата = НачалоДня(МассивВыбранныхДат[0]);
				МаксимальнаяДата = НачалоДня(МассивВыбранныхДат[МассивВыбранныхДат.ВГраница()]);
				
			Иначе
				Если Не ЗначениеЗаполнено(КалендарьСписокПериодНачало) И ЗначениеЗаполнено(КалендарьСписокПериодОкончание) Тогда
					МинимальнаяДата		= НачалоДня(КалендарьСписокПериодОкончание);
					МаксимальнаяДата	= НачалоДня(КалендарьСписокПериодОкончание);
					
				ИначеЕсли ЗначениеЗаполнено(КалендарьСписокПериодНачало) И Не ЗначениеЗаполнено(КалендарьСписокПериодОкончание) Тогда
					МинимальнаяДата		= НачалоДня(КалендарьСписокПериодНачало);
					МаксимальнаяДата	= НачалоДня(КалендарьСписокПериодНачало);
					
				ИначеЕсли Не ЗначениеЗаполнено(КалендарьСписокПериодНачало) И Не ЗначениеЗаполнено(КалендарьСписокПериодОкончание) Тогда
					МинимальнаяДата		= НачалоДня(ТекущаяДата());
					МаксимальнаяДата	= НачалоДня(ТекущаяДата());
					
				Иначе
					МинимальнаяДата		= НачалоДня(КалендарьСписокПериодНачало);
					МаксимальнаяДата	= НачалоДня(КалендарьСписокПериодОкончание);
					
				КонецЕсли;
				
			КонецЕсли;
			
			МассивВыбранныхДат = Новый Массив();
			
			ТекДата = МинимальнаяДата;
			Пока ТекДата <= МаксимальнаяДата Цикл
				МассивВыбранныхДат.Добавить(ТекДата);
				ТекДата = ТекДата + КоличествоСекундВДне;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивВыбранныхДат;
КонецФункции

&НаКлиенте
Процедура НастроитьВидимостьИДоступностьФормы()
	НастройкиОбщие = ПолучитьНастройкиОбщиеКлиент();
	
	Если Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Элементы.ГруппаСписокЗадач.Видимость = Ложь;
		Элементы.ГруппаДиспетчеризация.Видимость = Истина;
	Иначе
		Элементы.ГруппаДиспетчеризация.Видимость = Ложь;
		//бВидимостьСпискаЗадач = (НастройкиОбщие.ОтображатьСписокЗадач = Истина);
		бВидимостьСпискаЗадач = НастройкиОбщие.ОтображатьСписокЗадач;
		Если НЕ (бВидимостьСпискаЗадач = Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка) Тогда
			Элементы.ГруппаСписокЗадач.Видимость = бВидимостьСпискаЗадач;
			Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка = бВидимостьСпискаЗадач;
		КонецЕсли;			
		// Условие нужно, если переключаемся с диспетчеризации.
		Если Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка И НЕ Элементы.ГруппаСписокЗадач.Видимость Тогда
			Элементы.ГруппаСписокЗадач.Видимость = Истина;
		КонецЕсли;			
		//Если бВидимостьСпискаЗадач <> Элементы.ГруппаСписокЗадач.Видимость Тогда
		//	Элементы.ГруппаСписокЗадач.Видимость = бВидимостьСпискаЗадач;
		//КонецЕсли;
	КонецЕсли;
	
	Элементы.КнопкаТекущееОтображениеДень.Пометка = (Объект.ТекущееОтображение = "День");
	Элементы.КнопкаТекущееОтображениеНеделя.Пометка = (Объект.ТекущееОтображение = "Неделя");
	Элементы.КнопкаТекущееОтображениеМесяц.Пометка = (Объект.ТекущееОтображение = "Месяц");
	Элементы.КнопкаТекущееОтображениеПоРесурсам.Пометка = (Объект.ТекущееОтображение = "ПоРесурсам" Или Объект.ТекущееОтображение = "Расписание");
	Элементы.КнопкаТекущееОтображениеСписок.Пометка = (Объект.ТекущееОтображение = "Список");
	Элементы.КнопкаТекущееОтображениеДиспетчеризация.Пометка = (Объект.ТекущееОтображение = "Диспетчеризация");
	
	бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы = ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(Объект.ТекущееОтображение);
	
	Элементы.ГруппаРесурсы.Видимость = бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы;
	
	Если Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Элементы.СтраницаБыстрыйОтбор.Видимость					= Ложь;
		Элементы.СтраницаНастройкаРежимаПоРесурсам.Видимость	= Ложь;
		Элементы.СтраницаНастройкаРежимаДиспетчеризации.Видимость	= Истина;
	Иначе
		Элементы.СтраницаБыстрыйОтбор.Видимость						= Не бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы;
		Элементы.СтраницаНастройкаРежимаПоРесурсам.Видимость		= бДляРежимаОтображенияИспользуютсяВыбранныеРесурсы;
		Элементы.СтраницаНастройкаРежимаДиспетчеризации.Видимость	= Ложь;
	КонецЕсли;
	
	Элементы.ГруппаВариантСпискаПользователейДиспетчеризацииДинамическийСписок.Видимость	= (ВариантСпискаПользователейДиспетчеризации = 0);
	Элементы.ГруппаВариантСпискаПользователейДиспетчеризацииДерево.Видимость				= (ВариантСпискаПользователейДиспетчеризации = 1);
	
	Элементы.ГруппаДатаКалендаряМесяцы.Видимость	= (Объект.ТекущееОтображение = "Месяц");
	Элементы.ГруппаДатаКалендаряПолеДаты.Видимость	= (Объект.ТекущееОтображение <> "Месяц" И Объект.ТекущееОтображение <> "Список");
	
	Элементы.ГруппаДатаКалендаряСписок.Видимость = (Объект.ТекущееОтображение = "Список");
	
	бИспользуетсяПолнотекстовыйПоиск = ЗначениеЗаполнено(КалендарьСписокТекстПоиска);
	
	Если бИспользуетсяПолнотекстовыйПоиск Тогда
		Элементы.ГруппаОтборовОтборы.Доступность = Ложь;
		
		Элементы.КалендарьСписокВыбранныйПредопределенныйПериодПредставление.Доступность	= Ложь;
		Элементы.ГруппаКалендарьСписокПериод.Доступность									= Ложь;
	Иначе
		Элементы.ГруппаОтборовОтборы.Доступность = Истина;
		
		Элементы.КалендарьСписокВыбранныйПредопределенныйПериодПредставление.Доступность	= Истина;
		Элементы.ГруппаКалендарьСписокПериод.Доступность									= Истина;
		
		бВыбраныКонтрольныеТочки = Истина;
		ДоступныеОтборы = ПолучитьМассивДоступныхОтборов();
		ВыбранныеОтборы = КэшНастроекВыбранныеОтборы.ВыгрузитьЗначения();
		Для Каждого ДоступныйОтбор Из ДоступныеОтборы Цикл
			ИменаОтбора = ПолучитьИменаДляОтбора(ДоступныйОтбор);
			
			ВидимостьДоступностьОтбора = ПолучитьВидимостьДоступностьОтбора(ДоступныйОтбор, ДоступныеОтборы, ВыбранныеОтборы);
			
			бВидимость = ВидимостьДоступностьОтбора.Видимость;
			бДоступность = ВидимостьДоступностьОтбора.Доступность;
			
			//Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Видимость		= бВидимость;
			//Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Доступность		= бДоступность;
			Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Видимость		= Ложь;
			Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Доступность		= Ложь;
			Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Доступность		= бДоступность;
			Элементы[ИменаОтбора.ИмяЭлементаВидСравнения].Видимость		= бВидимость;
			Элементы[ИменаОтбора.ИмяЭлементаВидСравнения].Доступность	= бДоступность;
			Элементы[ИменаОтбора.ИмяЭлементаЗначение].Видимость			= бВидимость;
			Элементы[ИменаОтбора.ИмяЭлементаЗначение].Доступность		= бДоступность;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ГруппаОтборовВидСравнения.Видимость = ПризнакПоказыватьРасширенныеНастройкиОтборов;
	
	Если Объект.ТекущееОтображение = "Неделя" Тогда
		Элементы.КнопкаКалендарьСегодня.Заголовок = НСтр("ru = 'Текущая неделя'");
	ИначеЕсли Объект.ТекущееОтображение = "Месяц" Тогда
		Элементы.КнопкаКалендарьСегодня.Заголовок = НСтр("ru = 'Текущий месяц'");
	Иначе
		Элементы.КнопкаКалендарьСегодня.Заголовок = НСтр("ru = 'Сегодня'");
	КонецЕсли;
	
	Элементы.ГруппаКалендарьДетальноеОписание.Видимость = (НастройкиОбщие.ОтображатьПолеСодержанияКалендаря = Истина);
	//Элементы.ГруппаСписокЗадачДетальноеОписание.Видимость = (НастройкиОбщие.ОтображатьПолеСодержаниеСпискаЗадач = Истина);
	Элементы.ГруппаДиспетчеризацияДетальноеОписание.Видимость = (НастройкиОбщие.ОтображатьПолеСодержаниеСпискаЗадач = Истина);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоложениеСпискаЗадач()
	НастройкиОбщие = ПолучитьНастройкиОбщие();
	
	Если НастройкиОбщие.ПоложениеСпискаЗадач = "Лево" Тогда
		Если Элементы.ГруппаСписокЗадач.Родитель <> Элементы.ГруппаСписокЗадач1 Тогда
			Элементы.Переместить(Элементы.ГруппаСписокЗадач, Элементы.ГруппаСписокЗадач1);
		КонецЕсли;
		Если Элементы.ГруппаДиспетчеризация.Родитель <> Элементы.ГруппаСписокЗадач1 Тогда
			Элементы.Переместить(Элементы.ГруппаДиспетчеризация, Элементы.ГруппаСписокЗадач1);
		КонецЕсли;
	Иначе
		Если Элементы.ГруппаСписокЗадач.Родитель <> Элементы.ГруппаСписокЗадач2 Тогда
			Элементы.Переместить(Элементы.ГруппаСписокЗадач, Элементы.ГруппаСписокЗадач2);
		КонецЕсли;
		Если Элементы.ГруппаДиспетчеризация.Родитель <> Элементы.ГруппаСписокЗадач2 Тогда
			Элементы.Переместить(Элементы.ГруппаДиспетчеризация, Элементы.ГруппаСписокЗадач2);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиЭлементовОтборов(бБылиИзмененияВОтборах = Ложь)
	НастройкиОтборовПоУмолчанию = ПолучитьНастройкиОтборовПоУмолчанию();
	ПредставленияОтборов = ПолучитьПредставленияОтборов();
	ВыбранныеОтборы = КэшНастроекВыбранныеОтборы.ВыгрузитьЗначения();
	
	ДоступныеОтборы = ПолучитьМассивДоступныхОтборов();
	ДоступныеОтборыВсе = НастройкиОтборовПоУмолчанию.ДоступныеОтборы;
	
	Для Каждого ДоступныйОтбор Из ДоступныеОтборыВсе Цикл
		ИменаОтбора = ПолучитьИменаДляОтбора(ДоступныйОтбор);
		
		ВидимостьДоступностьОтбора = ПолучитьВидимостьДоступностьОтбора(ДоступныйОтбор, ДоступныеОтборы, ВыбранныеОтборы);
		бВидимость = ВидимостьДоступностьОтбора.Видимость;
		бДоступность = ВидимостьДоступностьОтбора.Доступность;
		
		Если ИменаОтбора.ИмяЭлементаЗаголовок <> Неопределено Тогда
			ВидимостьСтарая = Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Видимость;
			Использование = ЭтотОбъект[ИменаОтбора.ИмяИсточникаДанныхИспользование];
			
			//Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Видимость = бВидимость;
			//Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Доступность = бДоступность;
			Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Видимость = Ложь;
			Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Доступность = Ложь;
			
			Если ВидимостьСтарая <> Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Видимость Тогда
				Если Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Видимость Тогда
					Если Использование Тогда
						// Теоретически такого быть не должно.
						бБылиИзмененияВОтборах = Истина;
					КонецЕсли;
					
					ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элементы[ИменаОтбора.ИмяЭлементаЗначение], ЭтотОбъект);
					Если ОписаниеОтбора <> Неопределено Тогда
						Если ОписаниеОтбора.ВыборИзСписка Тогда
							Если ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] <> ОписаниеОтбора.ПустоеЗначениеСписок Тогда
								ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеСписок;
								бБылиИзмененияВОтборах = Истина;
							КонецЕсли;
						Иначе
							Если ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] <> ОписаниеОтбора.ПустоеЗначениеЗначение Тогда
								ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеЗначение;
								бБылиИзмененияВОтборах = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Использование Тогда
						ЭтотОбъект[ИменаОтбора.ИмяИсточникаДанныхИспользование] = Ложь;
						бБылиИзмененияВОтборах = Истина;
					КонецЕсли;
					
					ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элементы[ИменаОтбора.ИмяЭлементаЗначение], ЭтотОбъект);
					Если ОписаниеОтбора <> Неопределено Тогда
						Если ОписаниеОтбора.ВыборИзСписка Тогда
							Если ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] <> ОписаниеОтбора.ПустоеЗначениеСписок Тогда
								ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеСписок;
								бБылиИзмененияВОтборах = Истина;
							КонецЕсли;
						Иначе
							Если ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] <> ОписаниеОтбора.ПустоеЗначениеЗначение Тогда
								ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеЗначение;
								бБылиИзмененияВОтборах = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИменаОтбора.ИмяЭлементаВидСравнения <> Неопределено Тогда
			Элементы[ИменаОтбора.ИмяЭлементаВидСравнения].Видимость = бВидимость;
			Элементы[ИменаОтбора.ИмяЭлементаВидСравнения].Доступность = бДоступность;
		КонецЕсли;
		
		Если ИменаОтбора.ИмяЭлементаЗначение <> Неопределено Тогда
			Элементы[ИменаОтбора.ИмяЭлементаЗначение].Видимость = бВидимость;
			Элементы[ИменаОтбора.ИмяЭлементаЗначение].Доступность = бДоступность;
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьЗаполнениеОтбораПоПользователю(бБылиИзмененияВОтборах);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВидимостьДоступностьОтбора(ПолеОтбора, ДоступныеОтборы, ВыбранныеОтборы, ИгнорироватьПредопределенныеОтборы = Истина)
	СтруктураРезультат = Новый Структура("Видимость, Доступность", Истина, Истина);
	
	Если ИгнорироватьПредопределенныеОтборы И ПолеОтбора = "Пользователь" Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	ИменаОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
	
	// Видимость
	бВидимость = (ВыбранныеОтборы.Найти(ПолеОтбора) <> Неопределено);
	
	бИспользуетсяПолнотекстовыйПоиск = ЗначениеЗаполнено(КалендарьСписокТекстПоиска);
	
	// Доступность
	бДоступность = Не бИспользуетсяПолнотекстовыйПоиск;
	
	Если Не бВидимость Тогда
		СтруктураРезультат.Видимость = Ложь;
	КонецЕсли;
	Если Не бДоступность Тогда
		СтруктураРезультат.Доступность = Ложь;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхДляФормированияКлиент()
	СтруктураДанных = Новый Структура();
	
	СтруктураДанных.Вставить("МассивВыбранныхДат", ПолучитьМассивВыбранныхДат((Объект.ТекущееОтображение <> "Список")));
	СтруктураДанных.Вставить("ТекущаяДата", ТекущаяДата());
	
	МинимальнаяДата = НачалоДня(СтруктураДанных.МассивВыбранныхДат[0]);
	МаксимальнаяДата = НачалоДня(СтруктураДанных.МассивВыбранныхДат[СтруктураДанных.МассивВыбранныхДат.ВГраница()]);
	
	СтруктураДанных.Вставить("МинимальнаяДата", МинимальнаяДата);
	СтруктураДанных.Вставить("МаксимальнаяДата", МаксимальнаяДата);
	
	#Если ВебКлиент Тогда
	СтруктураДанных.Вставить("ВебКлиент");
	#КонецЕсли
	
	Если ЗначениеЗаполнено(ПараметрОповещенияОЗаписиСобытия) Тогда
		СтруктураДанных.Вставить("ПараметрОповещенияОЗаписиСобытия", ПараметрОповещенияОЗаписиСобытия);
		ПараметрОповещенияОЗаписиСобытия = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураДанных;
КонецФункции

&НаКлиенте
Процедура ПослеФормированияКалендаряОбщаяКлиент(СтруктураДанныхКлиент = Неопределено)
	бИспользуетсяПолнотекстовыйПоискСписка = (Объект.ТекущееОтображение = "Список" И ЗначениеЗаполнено(КалендарьСписокТекстПоиска));
	
	Если ТипЗнч(СтруктураДанныхКлиент) = Тип("Структура") Тогда
		Если СтруктураДанныхКлиент.Свойство("ПараметрОповещенияОЗаписиСобытия") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ПараметрОповещенияОЗаписиСобытия) Тогда
			Если ЗаписанноеСобытиеНеВходитВТекущийОтбор И Не бИспользуетсяПолнотекстовыйПоискСписка Тогда
				ПоказатьПредупреждение(, НСтр("ru ='Событие не будет отображено в календаре, так как не соответствует отбору
										 |или выбранному периоду.'"), 10);
				//
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТекущееОтображение = "Список" И ЗначениеЗаполнено(ТекстОшибкиГлобальный) Тогда
		ПоказатьПредупреждение(, ТекстОшибкиГлобальный, 10);
	КонецЕсли;
	
	Если Элементы.ГруппаДатаКалендаряПолеДаты.Видимость Тогда
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Для Каждого ВыбраннаяДата Из СтруктураДанныхКлиент.МассивВыбранныхДат Цикл
			Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(ВыбраннаяДата);
		КонецЦикла;
	КонецЕсли;
	
	НеОбрабатыватьАктивизациюОбластиКалендаряСтароеЗначение = НеОбрабатыватьАктивизациюОбластиКалендаря;
	Попытка
		НеОбрабатыватьАктивизациюОбластиКалендаря = Истина;
		
		Если ПоследняяОбластьПеретаскивания <> Неопределено Тогда
			Если Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть <> ПоследняяОбластьПеретаскивания Тогда
				Попытка
					Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = ПоследняяОбластьПеретаскивания;
				Исключение
					Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = Неопределено;
				КонецПопытки;
			КонецЕсли;
		Иначе
			Если Объект.ТекущееОтображение = "Список" Тогда
				Если КалендарьТабличныйДокумент.ВысотаТаблицы > 1 Тогда
					Если Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть.Имя <> "R2C2" Тогда
						НеОбрабатыватьАктивизациюОбластиКалендаря = Истина;
						Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = КалендарьТабличныйДокумент.Область("R2C2");
					КонецЕсли;
				Иначе
					Попытка
						Если Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть.Имя <> "R1C2" Тогда
							НеОбрабатыватьАктивизациюОбластиКалендаря = Истина;
							Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = КалендарьТабличныйДокумент.Область("R1C2");
						КонецЕсли;
					Исключение
						Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = Неопределено;
					КонецПопытки;
				КонецЕсли;
			Иначе
				Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Попытка
			Если Объект.ТекущееОтображение = "Список" Тогда
				Если Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть.Имя <> "R1C2" Тогда
					НеОбрабатыватьАктивизациюОбластиКалендаря = Истина;
					Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = КалендарьТабличныйДокумент.Область("R1C2");
				КонецЕсли;
			Иначе
				Если Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть.Имя <> "R1C1" Тогда
					НеОбрабатыватьАктивизациюОбластиКалендаря = Истина;
					Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = КалендарьТабличныйДокумент.Область("R1C1");
				КонецЕсли;
			КонецЕсли;
		Исключение
			НеОбрабатыватьАктивизациюОбластиКалендаря = НеОбрабатыватьАктивизациюОбластиКалендаряСтароеЗначение;
		КонецПопытки;
	КонецПопытки;
	
	ПоследняяОбластьПеретаскивания = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеТекущегоОтображенияОбщее()
	Если ПризнакПереключениеВРежимСпискаПоиском <> Истина Тогда
		КалендарьСписокТекстПоиска = "";
		ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Ложь;
	КонецЕсли;
	ПризнакПереключениеВРежимСпискаПоиском = Ложь;
	
	НастроитьВидимостьИДоступностьФормы();
	
	Если	Не ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(ПредыдущееОтображение) И ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(Объект.ТекущееОтображение)
		ИЛИ	ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(ПредыдущееОтображение) И Не ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(Объект.ТекущееОтображение) Тогда
		//
		СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов.Очистить();
	КонецЕсли;
	
	бФормироватьКалендарь = Истина;
	
	Если Объект.ТекущееОтображение = "День" Тогда
		Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияДатаКалендаряУстановитьМножественныйВыбор", 0.1, Истина);
		Элементы.ДатаКалендаря.Обновить();
	ИначеЕсли Объект.ТекущееОтображение = "Неделя" Тогда
		ДатаКалендаряВыделитьНеделю();
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияДатаКалендаряВыделитьНеделю", 0.1, Истина);
	ИначеЕсли Объект.ТекущееОтображение = "Месяц" Тогда
		ВыделитьМесяцВСписке();
	ИначеЕсли Объект.ТекущееОтображение = "ПоРесурсам" Тогда
		Если Элементы.ДатаКалендаря.ВыделенныеДаты.Количество() = 0 Тогда
			СделатьДатуТекущей = Объект.ДатаКалендаря;
		Иначе
			СделатьДатуТекущей = Элементы.ДатаКалендаря.ВыделенныеДаты[0];
		КонецЕсли;
		Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(СделатьДатуТекущей);
		Объект.ДатаКалендаря = СделатьДатуТекущей;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияДатаКалендаряУстановитьМножественныйВыбор", 0.1, Истина);
		Элементы.ДатаКалендаря.Обновить();
		
		ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов();
	ИначеЕсли Объект.ТекущееОтображение = "Расписание" Тогда
		Если Элементы.ДатаКалендаря.ВыделенныеДаты.Количество() = 0 Тогда
			СделатьДатуТекущей = Объект.ДатаКалендаря;
		Иначе
			СделатьДатуТекущей = Элементы.ДатаКалендаря.ВыделенныеДаты[0];
		КонецЕсли;
		Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(СделатьДатуТекущей);
		Объект.ДатаКалендаря = СделатьДатуТекущей;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияДатаКалендаряУстановитьМножественныйВыбор", 0.1, Истина);
		Элементы.ДатаКалендаря.Обновить();
		
		ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов();
	ИначеЕсли Объект.ТекущееОтображение = "Список" Тогда
		Если ПредыдущееОтображение = "Месяц" Тогда
			МассивВыбранныхДат = Новый Массив();
			
			КоличествоСекундВДне = 24 * 60 * 60;
			
			МесяцНачало = НачалоМесяца(Объект.ДатаКалендаря);
			МесяцКонец = НачалоДня(КонецМесяца(МесяцНачало));
			ТекДата = МесяцНачало;
			
			Пока ТекДата <= МесяцКонец Цикл
				МассивВыбранныхДат.Добавить(ТекДата);
				ТекДата = ТекДата + КоличествоСекундВДне;
			КонецЦикла;
		Иначе
			МассивВыбранныхДат = ПолучитьМассивВыбранныхДат();
		КонецЕсли;
		
		КалендарьСписокПериодНачало		= НачалоДня(МассивВыбранныхДат[0]);
		КалендарьСписокПериодОкончание	= НачалоДня(МассивВыбранныхДат[МассивВыбранныхДат.ВГраница()]);
		
		СинхронизироватьСписокПериодНачалоПериодОкончаниеИПредопределенныйПериод();
	ИначеЕсли Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Если Элементы.ДатаКалендаря.ВыделенныеДаты.Количество() = 0 Тогда
			СделатьДатуТекущей = Объект.ДатаКалендаря;
		Иначе
			СделатьДатуТекущей = Элементы.ДатаКалендаря.ВыделенныеДаты[0];
		КонецЕсли;
		Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(СделатьДатуТекущей);
		Объект.ДатаКалендаря = СделатьДатуТекущей;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияДатаКалендаряУстановитьМножественныйВыбор", 0.1, Истина);
		Элементы.ДатаКалендаря.Обновить();
		
	КонецЕсли;
	
	Если бФормироватьКалендарь Тогда
		СтруктураДанныхКлиент = ПолучитьСтруктуруДанныхДляФормированияКлиент();
		Если Объект.ТекущееОтображение = "Диспетчеризация" Тогда
			НеОбрабатыватьАктивизациюСтрокиСписокПользователейДиспетчеризация = Истина;
		КонецЕсли;
		СформироватьКалендарьНаСервере(СтруктураДанныхКлиент);
		Если Объект.ТекущееОтображение = "Диспетчеризация" Тогда
			Если СписокВыбранныхПользователейДиспетчеризации.Количество() > 0 Тогда
				Элементы.СписокПользователейДиспетчеризация.ВыделенныеСтроки.Очистить();
				Для Каждого ЗначениеСписка Из СписокВыбранныхПользователейДиспетчеризации Цикл
					Попытка Элементы.СписокПользователейДиспетчеризация.ВыделенныеСтроки.Добавить(ЗначениеСписка.Значение);
					Исключение КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрОповещенияОЗаписиСобытия = Неопределено;
		
		ПредыдущаяВыделеннаяДатаКалендаря = Объект.ДатаКалендаря;
		ПредыдущееОтображение = Объект.ТекущееОтображение;
		
		ПослеФормированияКалендаряОбщаяКлиент(СтруктураДанныхКлиент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСобытия(Событие)
	ОписаниеОбъекта = ПолучитьОписаниеРегистрируемогоОбъектаКлиент(Событие);
	
	бОткрытьЗначение = Ложь;
	
	Если ОписаниеОбъекта = Неопределено Тогда
		бОткрытьЗначение = Истина;
	Иначе
		СтруктураПараметры = Новый Структура("Ключ", Событие);
		СтруктураПараметры.Вставить("ОбновлятьКалендарь", 1);
		ОткрытьФорму(ОписаниеОбъекта.ПолноеИмя + ".ФормаОбъекта", СтруктураПараметры, ЭтотОбъект);
	КонецЕсли;
	
	Если бОткрытьЗначение Тогда // На крайний случай пробуем открыть объект так.
		Если ТипЗнч(Событие) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если НЕ CRM_БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Событие, 1) Тогда
				Попытка ПоказатьЗначение(, Событие);
				Исключение КонецПопытки;
			КонецЕсли;
		Иначе
			Попытка ПоказатьЗначение(, Событие);
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСводнуюИнформациюОВыделеннойОбласти()
	ВыделеннаяОбласть = Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть;
	Если ВыделеннаяОбласть = Неопределено Или ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура(
	"ИндексВремениНачало,
	|ИндексВремениОкончание,
	|МассивДат,
	|МассивПользователей,
	|МассивПомещений,
	|МассивРасшифровокСобытий,
	|СобытиеНаВесьДень",
	Неопределено,
	Неопределено,
	Новый Массив(),
	Новый Массив(),
	Новый Массив(),
	Новый Массив(),
	Ложь);
	
	ИндексСтрокаНачало = ВыделеннаяОбласть.Верх;
	ИндексСтрокаКонец = ВыделеннаяОбласть.Низ;
	
	ИндексКолонкаНачало = ВыделеннаяОбласть.Лево;
	ИндексКолонкаКонец = ВыделеннаяОбласть.Право;
	
	ВысотаТабличногоДокумента = КалендарьТабличныйДокумент.ВысотаТаблицы;
	ШиринаТабличногоДокумента = КалендарьТабличныйДокумент.ШиринаТаблицы;
	
	МассивНайденныйСобытий = Новый Массив();
	Для нИндексСтрока = ИндексСтрокаНачало По ИндексСтрокаКонец Цикл
		Для нИндексКолонка = ИндексКолонкаНачало По ИндексКолонкаКонец Цикл
			Область = КалендарьТабличныйДокумент.Область(нИндексСтрока, нИндексКолонка, нИндексСтрока, нИндексКолонка);
			Если ТипЗнч(Область.Расшифровка) = Тип("Число") Тогда
				Попытка		Расшифровка = ТаблицаРасшифровок[Область.Расшифровка];
				Исключение	Расшифровка = Неопределено;
				КонецПопытки;
			Иначе
				Расшифровка = Неопределено;
			КонецЕсли;
			Если Расшифровка <> Неопределено Тогда
				Если ЗначениеЗаполнено(Расшифровка.Событие) И Расшифровка.ТипЯчейки = "Событие" Тогда
					Если СтруктураРезультат.ИндексВремениНачало = Неопределено Тогда
						СтруктураРезультат.ИндексВремениНачало = Расшифровка.ИндексНачало;
					Иначе
						СтруктураРезультат.ИндексВремениНачало = Мин(СтруктураРезультат.ИндексВремениНачало, Расшифровка.ИндексНачало);
					КонецЕсли;
					Если СтруктураРезультат.ИндексВремениНачало = Неопределено Тогда
						СтруктураРезультат.ИндексВремениОкончание = Расшифровка.ИндексКонец;
					Иначе
						СтруктураРезультат.ИндексВремениОкончание = Макс(СтруктураРезультат.ИндексВремениНачало, Расшифровка.ИндексКонец);
					КонецЕсли;
				Иначе
					Если СтруктураРезультат.ИндексВремениНачало = Неопределено Тогда
						СтруктураРезультат.ИндексВремениНачало = Расшифровка.ИндексВремени;
					Иначе
						СтруктураРезультат.ИндексВремениНачало = Мин(СтруктураРезультат.ИндексВремениНачало, Расшифровка.ИндексВремени);
					КонецЕсли;
					Если СтруктураРезультат.ИндексВремениНачало = Неопределено Тогда
						СтруктураРезультат.ИндексВремениОкончание = Расшифровка.ИндексВремени;
					Иначе
						СтруктураРезультат.ИндексВремениОкончание = Макс(СтруктураРезультат.ИндексВремениНачало, Расшифровка.ИндексВремени);
					КонецЕсли;
					Если Расшифровка.ТипЯчейки = "СобытиеНаВесьДеньСвободнаяОбласть" Тогда
						СтруктураРезультат.СобытиеНаВесьДень = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Расшифровка.ТипЯчейки = "Событие" Или Расшифровка.ТипЯчейки = "СобытиеНаВесьДень" Тогда
					Если МассивНайденныйСобытий.Найти(Расшифровка.Событие) = Неопределено Тогда
						МассивНайденныйСобытий.Добавить(Расшифровка.ИдентификаторСобытия);
						СтруктураРезультат.МассивРасшифровокСобытий.Добавить(Область.Расшифровка);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Расшифровка.ПользовательОтбор) И СтруктураРезультат.МассивПользователей.Найти(Расшифровка.ПользовательОтбор) = Неопределено Тогда
					СтруктураРезультат.МассивПользователей.Добавить(Расшифровка.ПользовательОтбор);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Расшифровка.ПомещениеОтбор) И СтруктураРезультат.МассивПомещений.Найти(Расшифровка.ПомещениеОтбор) = Неопределено Тогда
					СтруктураРезультат.МассивПомещений.Добавить(Расшифровка.ПомещениеОтбор);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Расшифровка.Дата) И СтруктураРезультат.МассивДат.Найти(Расшифровка.Дата) = Неопределено Тогда
					СтруктураРезультат.МассивДат.Добавить(Расшифровка.Дата);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1) Тогда
			// Данные по ресурсам находатся в служебной области.
			СлужебнаяОбласть = КалендарьТабличныйДокумент.Область(нИндексСтрока, ШиринаТабличногоДокумента, нИндексСтрока, ШиринаТабличногоДокумента);
			Если ТипЗнч(СлужебнаяОбласть.Расшифровка) = Тип("Число") Тогда
				Попытка		Расшифровка = ТаблицаРасшифровок[СлужебнаяОбласть.Расшифровка];
				Исключение	Расшифровка = Неопределено;
				КонецПопытки;
			Иначе
				Расшифровка = Неопределено;
			КонецЕсли;
			Если Расшифровка <> Неопределено Тогда
				Если ЗначениеЗаполнено(Расшифровка.ПользовательОтбор) И СтруктураРезультат.МассивПользователей.Найти(Расшифровка.ПользовательОтбор) = Неопределено Тогда
					СтруктураРезультат.МассивПользователей.Добавить(Расшифровка.ПользовательОтбор);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Расшифровка.ПомещениеОтбор) И СтруктураРезультат.МассивПомещений.Найти(Расшифровка.ПомещениеОтбор) = Неопределено Тогда
					СтруктураРезультат.МассивПомещений.Добавить(Расшифровка.ПомещениеОтбор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРезультат.МассивДат.Количество() > 0 Тогда
		СортироватьМассивПоВозрастанию(СтруктураРезультат.МассивДат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Процедура ДатаКалендаряВыделитьНеделю()
	НастройкиОтображения = ПолучитьНастройкиОтображенияКлиент();
	
	Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
	ДатаНачалоНедели = НачалоНедели(Объект.ДатаКалендаря);
	Для нИндекс = 0 По НастройкиОтображения.КалендарьКоличествоДнейВНеделе - 1 Цикл
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(ДатаНачалоНедели + нИндекс * 24 * 60 * 60);
	КонецЦикла;
	
	Элементы.ДатаКалендаря.Обновить();
КонецПроцедуры

&НаКлиенте
Функция КалендарьПолучитьДанныеЯчейкиПриПеретаскивании(Область)
	ОбластьСтрока = Область.Верх;
	ОбластьКолонка = Область.Лево;
	
	Если Объект.ТекущееОтображение = "День" Или Объект.ТекущееОтображение = "Неделя" Или Объект.ТекущееОтображение = "ПоРесурсам" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 0) Тогда
		Если ОбластьСтрока > КалендарьТабличныйДокумент.ВысотаТаблицы Тогда Возврат Неопределено; КонецЕсли;
		
		РасшифровкаСлужебная = КалендарьТабличныйДокумент.Область(КалендарьТабличныйДокумент.ВысотаТаблицы, ОбластьКолонка, КалендарьТабличныйДокумент.ВысотаТаблицы, ОбластьКолонка).Расшифровка;
		Попытка		РасшифровкаСлужебная = ТаблицаРасшифровок[РасшифровкаСлужебная];
		Исключение	Возврат Неопределено;
		КонецПопытки;
		
		Попытка		ИндексВремени = ТаблицаРасшифровок[КалендарьТабличныйДокумент.Область(ОбластьСтрока, 3, ОбластьСтрока, 3).Расшифровка].ИндексВремени;
		Исключение	ИндексВремени = Неопределено;
		КонецПопытки;
		
		бСобытиеНаВесьДень = Ложь;
		Если ИндексВремени = Неопределено Тогда
			// Перетащили на заголовоки или область событий на весь день - 
			// считаем что перетащили на область событий на весь день.
			бСобытиеНаВесьДень = Истина;
			ИндексВремени = 0;
		КонецЕсли;
		
		СтруктураРезультат = Новый Структура("Дата,ИндексВремени,СобытиеНаВесьДень,ПользовательОтбор,ПомещениеОтбор",
			РасшифровкаСлужебная.Дата,
			ИндексВремени,
			бСобытиеНаВесьДень,
			РасшифровкаСлужебная.ПользовательОтбор,
			РасшифровкаСлужебная.ПомещениеОтбор);
		//
		
		Возврат СтруктураРезультат;
		
	ИначеЕсли Объект.ТекущееОтображение = "Месяц" Тогда
		НастройкиОтображения = ПолучитьНастройкиОтображенияКлиент();
		ВысотаДняВЯчейках = НастройкиОтображения.МесяцКоличествоОтображаемыхСобытийВДне + 2;
		ШиринаДняВЯчейкахБазовая = НастройкиОтображения.МесяцШиринаДняВЯчейкахБазовая;
		ШиринаДняВЯчейках = Цел(ШиринаДняВЯчейкахБазовая * НастройкиОтображения.КалендарьМасштабШириныОбластиДень / 100);
		
		ОбластьСтрокаСРасшифровкой = ОбластьСтрока - ((ОбластьСтрока - 2) % ВысотаДняВЯчейках);
		ОбластьКолонкаСРасшифровкой = ОбластьКолонка - ((ОбластьКолонка - 1) % ШиринаДняВЯчейках);
		
		ОбластьСРасшифровкой = КалендарьТабличныйДокумент.Область(ОбластьСтрокаСРасшифровкой, ОбластьКолонкаСРасшифровкой, ОбластьСтрокаСРасшифровкой, ОбластьКолонкаСРасшифровкой);
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ОбластьСРасшифровкой.Расшифровка];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		
		Если РасшифровкаЗначение = Неопределено Или Не ЗначениеЗаполнено(РасшифровкаЗначение.Дата) Тогда
			Возврат Неопределено;
		Иначе
			СтруктураРезультат = Новый Структура("Дата,СобытиеНаВесьДень,ПользовательОтбор,ПомещениеОтбор", РасшифровкаЗначение.Дата, Истина, РасшифровкаЗначение.ПользовательОтбор, РасшифровкаЗначение.ПомещениеОтбор);
			Возврат СтруктураРезультат;
		КонецЕсли;
		
	ИначеЕсли Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1) Тогда
		ШиринаТабличногоДокумента = КалендарьТабличныйДокумент.ШиринаТаблицы;
		ВысотаТабличногоДокумента = КалендарьТабличныйДокумент.ВысотаТаблицы;
		
		ОбластьСРасшифровкойПраво = КалендарьТабличныйДокумент.Область(ОбластьСтрока, ШиринаТабличногоДокумента, ОбластьСтрока, ШиринаТабличногоДокумента);
		ОбластьСРасшифровкойНиз = КалендарьТабличныйДокумент.Область(ВысотаТабличногоДокумента, ОбластьКолонка, ВысотаТабличногоДокумента, ОбластьКолонка);
		
		Попытка		РасшифровкаПраво = ТаблицаРасшифровок[ОбластьСРасшифровкойПраво.Расшифровка];
		Исключение	РасшифровкаПраво = Неопределено;
		КонецПопытки;
		
		Попытка		РасшифровкаНиз = ТаблицаРасшифровок[ОбластьСРасшифровкойНиз.Расшифровка];
		Исключение	РасшифровкаНиз = Неопределено;
		КонецПопытки;
		
		Если РасшифровкаПраво <> Неопределено И РасшифровкаНиз <> Неопределено Тогда
			// TODO: определять, событие на весь день или нет.
			бСобытиеНаВесьДень = Ложь;
			
			СтруктураРезультат = Новый Структура("Дата,СобытиеНаВесьДень,ПользовательОтбор,ПомещениеОтбор",
				РасшифровкаНиз.Дата,
				бСобытиеНаВесьДень,
				РасшифровкаПраво.ПользовательОтбор,
				РасшифровкаПраво.ПомещениеОтбор);
			//
			
			Возврат СтруктураРезультат;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОткрытьСписокСобытийНаДату(ДатаДень)
	СписокСобытийНаДень = ПолучитьСписокСобытийНаДеньНаСервере(ДатаДень);
	
	ПараметрыФормы = Новый Структура("СписокСобытий,ДатаДень,ОписаниеТиповРегистрируемыхОбъектов", СписокСобытийНаДень, ДатаДень, ПолучитьОписаниеТиповРегистрируемыхОбъектовКлиент());
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокСобытийНаДатуЗавершение", ЭтотОбъект);
	ОткрытьФорму(МетаданныеПуть+".Форма.СписокСобытий", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСобытийНаДатуЗавершение(РезультатОткрытия, ДополнительныеПраметры) Экспорт
	Если ТипЗнч(РезультатОткрытия) = Тип("Структура") Тогда
		Если РезультатОткрытия.Свойство("УдалитьСобытия") И РезультатОткрытия.Свойство("МассивСобытий") И ТипЗнч(РезультатОткрытия.МассивСобытий) = Тип("Массив") Тогда
			МассивУдаляемыхСобытий = Новый Массив();
			Для Каждого УдаляемоеСобытие Из РезультатОткрытия.МассивСобытий Цикл
				НайденныеСтроки = ТаблицаРасшифровок.НайтиСтроки(Новый Структура("ИдентификаторСобытия", УдаляемоеСобытие));
				Если НайденныеСтроки.Количество() > 0 Тогда
					МассивУдаляемыхСобытий.Добавить(Новый Структура("Объект,Пользователь,ПериодНачало,ПериодОкончание",
						НайденныеСтроки[0].Событие, НайденныеСтроки[0].Пользователь, НайденныеСтроки[0].ПериодНачало, НайденныеСтроки[0].ПериодОкончание));
				КонецЕсли;
			КонецЦикла;
			
			Если МассивУдаляемыхСобытий.Количество() > 0 Тогда
				УдалитьСобытиеНаСервере(МассивУдаляемыхСобытий);
				КалендарьОбновитьКлиент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДействияПередОбновлениемКалендаряНаКлиенте(Параметры = Неопределено)
	Элементы.КалендарьТабличныйДокумент.Редактирование = Ложь;
	
	Если Объект.ТекущееОтображение = "Расписание" Или Объект.ТекущееОтображение = "ПоРесурсам" Тогда
		Если ТипЗнч(Параметры) <> Тип("Структура") Или Не Параметры.Свойство("НеЗаполнятьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов") Тогда
			ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов();
		КонецЕсли;
	КонецЕсли;
	
	бИспользуетсяПолнотекстовыйПоискСписка = (Объект.ТекущееОтображение = "Список" И ЗначениеЗаполнено(КалендарьСписокТекстПоиска));
	
	Если Не бИспользуетсяПолнотекстовыйПоискСписка Или (бИспользуетсяПолнотекстовыйПоискСписка И ПризнакСписокОбновлятьПоПолнотекстовомуПоиску) Тогда
		СтруктураДанныхКлиент = ПолучитьСтруктуруДанныхДляФормированияКлиент();
		Возврат СтруктураДанныхКлиент;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ДействияПослеОбновленияКалендаряНаКлиенте(СтруктураДанныхКлиент, Параметры = Неопределено)
	бИспользуетсяПолнотекстовыйПоискСписка = (Объект.ТекущееОтображение = "Список" И ЗначениеЗаполнено(КалендарьСписокТекстПоиска));
	Если Не бИспользуетсяПолнотекстовыйПоискСписка Или (бИспользуетсяПолнотекстовыйПоискСписка И ПризнакСписокОбновлятьПоПолнотекстовомуПоиску) Тогда
		ПослеФормированияКалендаряОбщаяКлиент(СтруктураДанныхКлиент);
	ИначеЕсли Объект.ТекущееОтображение = "Список" Тогда
		Если КалендарьТабличныйДокумент.ВысотаТаблицы > 1 Тогда
			Если Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть.Имя <> "R2C2" Тогда
				НеОбрабатыватьАктивизациюОбластиКалендаря = Истина;
				Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = КалендарьТабличныйДокумент.Область("R2C2");
			КонецЕсли;
		Иначе
			Попытка
				Если Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть.Имя <> "R1C2" Тогда
					НеОбрабатыватьАктивизациюОбластиКалендаря = Истина;
					Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = КалендарьТабличныйДокумент.Область("R1C2");
				КонецЕсли;
			Исключение
				Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущаяВыделеннаяДатаКалендаря = Объект.ДатаКалендаря;
	
	ПараметрОповещенияОЗаписиСобытия = Неопределено;
	
	Если Объект.ТекущееОтображение = "Неделя" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияДатаКалендаряВыделитьНеделю", 0.1, Истина);
	ИначеЕсли Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Если СписокВыбранныхПользователейДиспетчеризации.Количество() > 0 Тогда
			Элементы.СписокПользователейДиспетчеризация.ВыделенныеСтроки.Очистить();
			Для Каждого ЗначениеСписка Из СписокВыбранныхПользователейДиспетчеризации Цикл
				Попытка Элементы.СписокПользователейДиспетчеризация.ВыделенныеСтроки.Добавить(ЗначениеСписка.Значение);
				Исключение КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьОбновитьКлиент(Параметры = Неопределено)
	СтруктураДанныхКлиент = ДействияПередОбновлениемКалендаряНаКлиенте(Параметры);
	СформироватьКалендарьНаСервере(СтруктураДанныхКлиент);
	ДействияПослеОбновленияКалендаряНаКлиенте(СтруктураДанныхКлиент, Параметры);
КонецПроцедуры


&НаСервере
Функция ЗапрещеноРедактированиеСрокаВыполненияЗадачи(ПараметрЗадача)
	
	ЗапрещеноРедактированиеЗадачи = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрЗадача.БизнесПроцесс) 
	   И ТипЗнч(ПараметрЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
	   И  ЗначениеЗаполнено(ПараметрЗадача.БизнесПроцесс.КартаМаршрута) Тогда
	   
	   ЗапрещеноРедактированиеЗадачи = НЕ ПараметрЗадача.БизнесПроцесс.КартаМаршрута.РедактироватьСрокВыполненияЗадач;
	
	КонецЕсли;	
	
	Возврат ЗапрещеноРедактированиеЗадачи;
	
КонецФункции// ЗапрещеноРедактированиеСрокаВыполненияЗадачи(ПараметрЗадача)

&НаКлиенте
Процедура ПеренестиЗадачиНаКлиенте(ВариантПереноса, Знач ДатаПереноса = Неопределено)
	МассивЗадач = ПолучитьМассивВыделенныхЗадач();
	
	Если ТипЗнч(МассивЗадач) <> Тип("Массив") Или МассивЗадач.Количество() = 0 Тогда
		Возврат;
	Иначе	
		// не переносим задачи, у которых в картах маршрута бизнес-процесса 
		// снят признак разрешения редактирования сроков выполнения задач
		МассивЗадачКоличество = МассивЗадач.Количество();
		
		ИндексТекущейВыделеннойЗадачи = 0;		
		
		Пока ИндексТекущейВыделеннойЗадачи < МассивЗадач.Количество() Цикл
			
			ТекущаяВыделеннаяЗадача = МассивЗадач[ИндексТекущейВыделеннойЗадачи];
		
			Если ЗапрещеноРедактированиеСрокаВыполненияЗадачи(ТекущаяВыделеннаяЗадача) Тогда
			
				МассивЗадач.Удалить(ИндексТекущейВыделеннойЗадачи);
				
				Если МассивЗадачКоличество = 1 Тогда
							
					ТекстСообщения = НСтр("ru = 'Запрещено редактирование срока выполнения текущей задачи.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
				КонецЕсли;	
				
			Иначе
				
				ИндексТекущейВыделеннойЗадачи = ИндексТекущейВыделеннойЗадачи + 1;				
			
			КонецЕсли;			
		
		КонецЦикла; 
		
		Если МассивЗадач.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		
	КонецЕсли;
	
	БылиПеренесеныСобытия = Ложь;
	ОбновитьКалендарь = Ложь;
	Если ПеренестиЗадачиНаСервере(МассивЗадач, ВариантПереноса, ДатаПереноса, БылиПеренесеныСобытия, ОбновитьКалендарь, Истина) Тогда
		Если БылиПеренесеныСобытия Или ОбновитьКалендарь Тогда
			КалендарьОбновитьКлиент();
		КонецЕсли;
		Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
			ОповеститьОбИзменении(ЗадачаСсылка);
		КонецЦикла;
		РазвернутьСписокЗадач();
		УстановитьТекущуюСтрокуВСпискеЗадач(МассивЗадач[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗадачуНаСервере(ЗадачаСсылка, бВыполнить, бОбновитьСписокЗадач = Ложь)
	Попытка
		Если бВыполнить И Не ЗадачаСсылка.Выполнена Тогда
			CRM_БизнесПроцессыИЗадачиВызовСервера.Выполнить_Задачу(ЗадачаСсылка, Истина);
			
		ИначеЕсли Не бВыполнить И ЗадачаСсылка.Выполнена Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
			Блокировка.Заблокировать();
			
			ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.CRM_ВариантВыполнения = 0;
			ЗадачаОбъект.Записать();
			
		КонецЕсли;
		
		Если бОбновитьСписокЗадач Тогда
			ОбновитьСписокЗадачНаСервере();
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция ВыполнитьЗадачу(ЗадачаСсылка, бВыполнить = Истина, ОповещатьОВыполнении = Истина, бОбновитьСписокЗадач = Ложь)
	РезультатВыполнения = ВыполнитьЗадачуНаСервере(ЗадачаСсылка, бВыполнить, бОбновитьСписокЗадач);
	Если РезультатВыполнения И ОповещатьОВыполнении Тогда
		МассивЗадач = Новый Массив();
		МассивЗадач.Добавить(ЗадачаСсылка);
		НеОбновлятьСписокЗадач = Истина;
		Оповестить("Запись_ЗадачаИсполнителя", Новый Структура("Выполнена, ОбновлятьКалендарь", Истина, 1), МассивЗадач);
		
		Возврат Истина;
		
	ИначеЕсли РезультатВыполнения Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьМассивЗадачДляГрупповойОбработки(Знач ВыделенныеСтроки, бЛичные = Ложь, бСвязанныеСБП = Ложь, МассивЗадачНепригодныхДляГрупповойОбработки = Неопределено)
	Если ТипЗнч(МассивЗадачНепригодныхДляГрупповойОбработки) <> Тип("Массив") Тогда
		МассивЗадачНепригодныхДляГрупповойОбработки = Новый Массив();
	КонецЕсли;
	
	МассивЗадач = Новый Массив();
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Продолжить;
		КонецЕсли;
		
		Если бЛичные И ВыделеннаяСтрока.CRM_Личная Тогда
			МассивЗадач.Добавить(ВыделеннаяСтрока);
		ИначеЕсли бСвязанныеСБП И Не ВыделеннаяСтрока.CRM_Личная Тогда
			МассивЗадач.Добавить(ВыделеннаяСтрока);
		Иначе
			МассивЗадачНепригодныхДляГрупповойОбработки.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЗадач;
КонецФункции

&НаКлиенте
Процедура СообщениеОНевозможностиГрупповойОбработкиЗадач(МассивЗадачНепригодныхДляГрупповойОбработки)
	Если МассивЗадачНепригодныхДляГрупповойОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Задача пропущена'"),
		ПолучитьНавигационнуюСсылку(МассивЗадачНепригодныхДляГрупповойОбработки[0]),
		СтрЗаменить(НСтр("ru = 'Невозможна групповая обработка: %Обработка%'"), "%Обработка%", Строка(МассивЗадачНепригодныхДляГрупповойОбработки[0])));
	//
КонецПроцедуры

&НаСервере
Процедура ПеренестиЗадачиВИерархииНаСервере(МассивЗадач, Родитель, Партнер = Неопределено, Проект = Неопределено)
	НазначитьРодителяИРеквизитыЗадачам(МассивЗадач, Родитель, Партнер, Проект);
	
	ОбновитьСписокЗадачНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачиВИерархииНаКлиенте(МассивЗадач, Родитель, Партнер = Неопределено, Проект = Неопределено)
	ПеренестиЗадачиВИерархииНаСервере(МассивЗадач, Родитель, Партнер, Проект);
	
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
		Если ТипЗнч(ЗадачаСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ОповеститьОбИзменении(ЗадачаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	РазвернутьСписокЗадач();
	УстановитьТекущуюСтрокуВСпискеЗадач(МассивЗадач[0]);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЛичныеЗадачиСПодчиненными(МассивЗадач)
	Если ТипЗнч(МассивЗадач) <> Тип("Массив") Или МассивЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
		Если ТипЗнч(ЗадачаСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЛичнуюЗадачуСПодчиненными(ЗадачаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСписокЗадачНаСервере();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЖИДАНИЯ

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияДатаКалендаряПриИзменении()
	Если	Объект.ТекущееОтображение = "День"
		Или Объект.ТекущееОтображение = "Неделя"
		Или Объект.ТекущееОтображение = "ПоРесурсам"
		Или Объект.ТекущееОтображение = "Расписание"
		Или Объект.ТекущееОтображение = "Список"
		Или Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		//
		Если Объект.ТекущееОтображение = "Список" Тогда
			МассивВыбранныхДат = ПолучитьМассивВыбранныхДат();
			КалендарьСписокПериодНачало		= НачалоДня(МассивВыбранныхДат[0]);
			КалендарьСписокПериодОкончание	= НачалоДня(МассивВыбранныхДат[МассивВыбранныхДат.ВГраница()]);
		КонецЕсли;
		
		КалендарьОбновитьКлиент();
	КонецЕсли;
	ПредыдущаяВыделеннаяДатаКалендаря = Объект.ДатаКалендаря;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокВыборМесяцаПриАктивизацииСтроки()
	ТекущиеДанные = Элементы.СписокВыборМесяца.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Объект.ДатаКалендаря = ТекущиеДанные.Значение;
	
	Если ТекущиеДанные.Значение <> ПредыдущийВыделенныйМесяц Тогда
		Если Объект.ТекущееОтображение = "Месяц" Тогда
			КалендарьОбновитьКлиент();
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийВыделенныйМесяц = ТекущиеДанные.Значение;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования()
	Элементы.КалендарьТабличныйДокумент.Редактирование = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияДатаКалендаряУстановитьМножественныйВыбор()
	Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Множественный;
	Элементы.ДатаКалендаря.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияДатаКалендаряВыделитьНеделю();
	ДатаКалендаряВыделитьНеделю();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеКалендарьДетальноеОписание()
	ВыделеннаяОбласть = Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть;
	Если ВыделеннаяОбласть = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ВыделеннаяОбласть.Расшифровка) = Тип("Число") Тогда
		Попытка		ЗначениеРасшифровки = ТаблицаРасшифровок[ВыделеннаяОбласть.Расшифровка];
		Исключение	ЗначениеРасшифровки = Неопределено;
		КонецПопытки;
	Иначе
		ЗначениеРасшифровки = Неопределено;
	КонецЕсли;
	
	Если ЗначениеРасшифровки <> Неопределено И ЗначениеЗаполнено(ЗначениеРасшифровки.Событие) Тогда
		ОбновитьПолеКалендарьДетальноеОписание(ЗначениеРасшифровки.Событие);
	Иначе
		ДетальноеОписаниеПустое = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
		Если ДетальноеОписаниеПустое <> КалендарьДетальноеОписание Тогда
			КалендарьДетальноеОписание = ДетальноеОписаниеПустое;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокЗадачПриАктивизацииСтроки()
	ТекСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		ТекЗадача = Неопределено;
		ТекДанные = Неопределено;
	Иначе
		ТекДанные = ДеревоСписокЗадач.НайтиПоИдентификатору(ТекСтрока);
		Если ТекДанные = Неопределено Тогда
			ТекЗадача = Неопределено;
		Иначе
			ТекЗадача = ТекДанные.Ссылка;		
		КонецЕсли; 
	КонецЕсли;
	
	Если Элементы.ГруппаСписокЗадачДетальноеОписание.Видимость Тогда
		ОбновитьПолеОтображенияСодержанияСписокЗадач(ТекЗадача);
	КонецЕсли;
	
	бГрупповаяОбработка = (Элементы.СписокЗадач.ВыделенныеСтроки <> Неопределено И Элементы.СписокЗадач.ВыделенныеСтроки.Количество() > 1);
	Если бГрупповаяОбработка Тогда
		Попытка
			Элементы.СписокЗадачКонтекстноеМенюЗадачаЗадачаИсполнителяВыполнено.Доступность = Истина;
			Элементы.СписокЗадачКонтекстноеМенюЗадачаЗадачаИсполнителяПеренаправить.Доступность = Истина;
			Элементы.СписокЗадачКонтекстноеМенюКомандаСписокЗадачПринятьКИсполнению.Доступность = Истина;
		Исключение
		КонецПопытки;
	Иначе
		Попытка
			Если НЕ ТекДанные = Неопределено И НЕ ТекДанные.ЭтоГруппа Тогда
				Элементы.СписокЗадачКонтекстноеМенюЗадачаЗадачаИсполнителяВыполнено.Доступность = Истина;
				Элементы.СписокЗадачКонтекстноеМенюЗадачаЗадачаИсполнителяПеренаправить.Доступность = Истина;
				Элементы.СписокЗадачКонтекстноеМенюКомандаСписокЗадачПринятьКИсполнению.Доступность = НЕ ТекДанные.Личная;
			ИначеЕсли НЕ ТекДанные = Неопределено И ТекДанные.ЭтоГруппа Тогда
				Элементы.СписокЗадачКонтекстноеМенюЗадачаЗадачаИсполнителяВыполнено.Доступность = Ложь;
				Элементы.СписокЗадачКонтекстноеМенюЗадачаЗадачаИсполнителяПеренаправить.Доступность = Ложь;
				Элементы.СписокЗадачКонтекстноеМенюКомандаСписокЗадачПринятьКИсполнению.Доступность = Ложь;
			КонецЕсли;
		Исключение
			Если НЕ ТекДанные = Неопределено Тогда
				Элементы.СписокЗадачКонтекстноеМенюЗадачаЗадачаИсполнителяВыполнено.Доступность = Истина;
				Элементы.СписокЗадачКонтекстноеМенюЗадачаЗадачаИсполнителяПеренаправить.Доступность = Истина;
				Элементы.СписокЗадачКонтекстноеМенюКомандаСписокЗадачПринятьКИсполнению.Доступность = НЕ ТекДанные.Личная;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСобытийДиспетчеризацииПриАктивизацииСтроки()
	Если Элементы.ГруппаДиспетчеризацияДетальноеОписание.Видимость Тогда
		ОбновитьПолеОтображенияСодержанияСписокСобытийДиспетчеризации(Элементы.ДиспетчеризацияСписокСобытий.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоРесурсовПриАктивизацииСтроки()
	СписокСтарый = СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов.Скопировать();
	
	ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов();
	
	Если Не СравнитьСпискиЗначений(СписокСтарый, СписокИдентификаторовВыделенныхСтрокВДеревеРесурсов) Тогда
		КалендарьОбновитьКлиент(Новый Структура("НеЗаполнятьСписокИдентификаторовВыделенныхСтрокВДеревеРесурсов"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлениеИндексаПДД()
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	ОбновитьИндексППД();
	ИндексППДАктуален = Истина;
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Автообновление()
	КомандаКалендарьОбновить(Неопределено);
	Если Элементы.ГруппаСписокЗадач.Видимость Тогда
		КомандаОбновитьСписокЗадач(Неопределено);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаДерева = ДеревоСписокЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Попытка
		Если ОткрытьСобытиеПоЗадаче(СтрокаДерева.Ссылка) Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			CRM_БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, СтрокаДерева.Ссылка, Поле, СтандартнаяОбработка);
		КонецЕсли;
	Исключение
		CRM_БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, СтрокаДерева.Ссылка, Поле, СтандартнаяОбработка);
	КонецПопытки;
	Если СтандартнаяОбработка Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) И ТипЗнч(СтрокаДерева.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И СтрокаДерева.Личная Тогда
			ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи", Новый Структура("Ключ", СтрокаДерева.Ссылка), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	СтрокаДерева = ДеревоСписокЗадач.НайтиПоИдентификатору(ТекСтрока);
	Если СтрокаДерева = Неопределено Тогда Возврат; КонецЕсли;
	
	Попытка
		Если Элемент.ТекущийЭлемент.Имя = "СписокЗадачВыполнена" Тогда
			Если СтрокаДерева.Личная И Не СтрокаДерева.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Отказ = Истина;
	
	СтандартнаяОбработка = Истина;
	
	Попытка
		Если ОткрытьСобытиеПоЗадаче(СтрокаДерева.Ссылка) Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			CRM_БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, СтрокаДерева.Ссылка, Элементы.СписокЗадачНаименование, СтандартнаяОбработка);
		КонецЕсли;
	Исключение
		CRM_БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, СтрокаДерева.Ссылка, Элементы.СписокЗадачНаименование, СтандартнаяОбработка);
	КонецПопытки;
	Если СтандартнаяОбработка Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) И ТипЗнч(СтрокаДерева.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И СтрокаДерева.Личная Тогда
			ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи", Новый Структура("Ключ", СтрокаДерева.Ссылка), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Дата",ТекущаяДата());
	СтруктураДанных.Вставить("ДатаНачала",ТекущаяДата());
	ПараметрыФормы = Новый Структура("Основание",СтруктураДанных);
	CRM_БизнесПроцессыИЗадачиКлиент.СоздатьЛичнуюЗадачу(ЭтотОбъект,ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если Элементы.СписокЗадач.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	бЕстьПодчиненныеЗадачи = Ложь;
	МассивЗадач = Новый Массив();
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		ДанныеЗадачи = ДеревоСписокЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеЗадачи.Личная Тогда
			МассивЗадач.Добавить(ДанныеЗадачи.Ссылка);
			Если ДанныеЗадачи.ПолучитьЭлементы().Количество() > 0 Тогда
				бЕстьПодчиненныеЗадачи = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗадач.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Удалять можно только личные задачи!'"), 10);
		Возврат;
	КонецЕсли;
	
	Если бЕстьПодчиненныеЗадачи Тогда
		ТекстВопроса = НСтр("ru = 'Удалить задачи, включая все подчиненные задачи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранные задачи?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокЗадачПередУдалениемЗавершение", ЭтотОбъект, МассивЗадач);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПередУдалениемЗавершение(Ответ, МассивЗадач) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхКлиент = ДействияПередОбновлениемКалендаряНаКлиенте();
	
	ПометитьНаУдалениеЗадачиНаСервере(МассивЗадач, СтруктураДанныхКлиент);
	
	ДействияПослеОбновленияКалендаряНаКлиенте(СтруктураДанныхКлиент);
	
	РазвернутьСписокЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Число") Тогда
		ЗначениеРасшифровки = Расшифровка;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		// Нужно для WEB-клиента, если расшифровка назначена картинке а не области.
		Попытка		ЗначениеРасшифровки = Число(Строка(Расшифровка));
		Исключение	ЗначениеРасшифровки = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("Число") Тогда
		Попытка		ЗначениеРасшифровки = ТаблицаРасшифровок[ЗначениеРасшифровки];
		Исключение	ЗначениеРасшифровки = Неопределено;
		КонецПопытки;
		Если ЗначениеРасшифровки <> Неопределено Тогда
			НастройкиОбщие = ПолучитьНастройкиОбщиеКлиент();
			
			Если ЗначениеРасшифровки.ТипЯчейки = "Событие" Или ЗначениеРасшифровки.ТипЯчейки = "СобытиеНаВесьДень" Тогда
				Если ЗначениеЗаполнено(ЗначениеРасшифровки.Событие) Тогда
					ОткрытьФормуСобытия(ЗначениеРасшифровки.Событие);
					
				КонецЕсли;
			ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "ПустаяОбласть" Или ЗначениеРасшифровки.ТипЯчейки = "СвободнаяОбласть" Или ЗначениеРасшифровки.ТипЯчейки = "ШкалаВремени" Или ЗначениеРасшифровки.ТипЯчейки = "СобытиеНаВесьДеньСвободнаяОбласть" Тогда
				СоздатьСобытиеИзКалендаря(НастройкиОбщие.КалендарьТипСобытияПоУмолчанию,, Истина);
			ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "РасписаниеШкалаВремени" Или ЗначениеРасшифровки.ТипЯчейки = "РасписаниеСвободнаяОбласть" Тогда
				СоздатьСобытиеИзКалендаря(НастройкиОбщие.КалендарьТипСобытияПоУмолчанию,, Истина);
			ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "СписокЗаголовокДня" Или ЗначениеРасшифровки.ТипЯчейки = "СписокЗаголовокГруппировки" Тогда
				СоздатьСобытиеИзКалендаря(НастройкиОбщие.КалендарьТипСобытияПоУмолчанию,, Истина);
			ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "ЗаголовокДень" Тогда
				Если Элементы.ДатаКалендаря.ВыделенныеДаты.Количество() > 1 И ЗначениеЗаполнено(ЗначениеРасшифровки.Дата) Тогда
					Объект.ДатаКалендаря = НачалоДня(ЗначениеРасшифровки.Дата);
					Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
					Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
					
					Если Объект.ТекущееОтображение = "День" Тогда
						КалендарьОбновитьКлиент();
					Иначе
						КомандаТекущееОтображениеДень(Неопределено);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "ДеньВМесяцеСвободнаяОбласть" Тогда
				СоздатьСобытиеИзКалендаря(НастройкиОбщие.КалендарьТипСобытияПоУмолчанию,, Истина);
			ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "ПредыдущийМесяцЗаголовокДня" Или ЗначениеРасшифровки.ТипЯчейки = "ТекущийМесяцЗаголовокДня" Или ЗначениеРасшифровки.ТипЯчейки = "СледующийМесяцЗаголовокДня" Тогда
				Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
				Объект.ДатаКалендаря = НачалоДня(ЗначениеРасшифровки.Дата);
				Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
				Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
				
				Если Объект.ТекущееОтображение = "День" Тогда
					КалендарьОбновитьКлиент();
				Иначе
					КомандаТекущееОтображениеДень(Неопределено);
				КонецЕсли;
				
				Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Множественный;
			ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "ОткрытьСписокСобытийНаДень" Тогда
				ОткрытьСписокСобытийНаДату(ЗначениеРасшифровки.Дата);
			ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "ЗаголовокРесурс" Тогда
				ЗначениеРесурса = Неопределено;
				Если ЗначениеЗаполнено(ЗначениеРасшифровки.ПользовательОтбор) Тогда
					ЗначениеРесурса = ЗначениеРасшифровки.ПользовательОтбор;
				ИначеЕсли ЗначениеЗаполнено(ЗначениеРасшифровки.ПомещениеОтбор) Тогда
					ЗначениеРесурса = ЗначениеРасшифровки.ПомещениеОтбор;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЗначениеРесурса) Тогда
					ОткрытьФормуРесурса(ЗначениеРесурса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КалендарьТабличныйДокументПриАктивизацииОбласти(Элемент)
	Если НеОбрабатыватьАктивизациюОбластиКалендаря = Истина Тогда
		НеОбрабатыватьАктивизациюОбластиКалендаря = Ложь;
		Возврат;
	КонецЕсли;
	
	ВыделеннаяОбласть = Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть;
	Если ВыделеннаяОбласть = Неопределено Тогда Возврат; КонецЕсли;
	
	АктивизцияВнеОбластиКалендаря = Ложь;
	
	ДоступностьКнопкаСоздатьСобытиеИзКалендаря			= Истина;
	ДоступностьКнопкаУдалитьСобытиеИзКалендаря			= Ложь;
	ДоступностьКнопкаПеренаправитьСобытиеИзКалендаря	= Ложь;	
	
	ЗначениеРасшифровки = Неопределено;
	Попытка
		Если ТипЗнч(ВыделеннаяОбласть.Расшифровка) = Тип("Число") Тогда
			Попытка		ЗначениеРасшифровки = ТаблицаРасшифровок[ВыделеннаяОбласть.Расшифровка];
			Исключение	ЗначениеРасшифровки = Неопределено;
			КонецПопытки;
			Если ЗначениеРасшифровки <> Неопределено И ЗначениеРасшифровки.ТипЯчейки = "СлужебнаяОбласть" Тогда
				АктивизцияВнеОбластиКалендаря = Истина;
			КонецЕсли;
		Иначе
			АктивизцияВнеОбластиКалендаря = Истина;
		КонецЕсли;
	Исключение
		// Исключение происходит если выделить весь документ сочетанием клавиш Ctrl+A.
		АктивизцияВнеОбластиКалендаря = Истина;
	КонецПопытки;
	
	Если Не АктивизцияВнеОбластиКалендаря Тогда
		ПредыдущаяВыделеннаяОбластьКалендаря = ВыделеннаяОбласть;
		
		ТекущиеДанные = ПолучитьСводнуюИнформациюОВыделеннойОбласти();
		
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.МассивРасшифровокСобытий.Количество() > 0 Тогда
			ДоступностьКнопкаУдалитьСобытиеИзКалендаря			= Истина;
			ДоступностьКнопкаПеренаправитьСобытиеИзКалендаря	= Истина;				
		КонецЕсли;			
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.МассивРасшифровокСобытий.Количество() = 1 И
			 	ТипЗнч(ЗначениеРасшифровки.Событие) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
			 		ДоступностьКнопкаПеренаправитьСобытиеИзКалендаря = Ложь;
		КонецЕсли;
	Иначе
		НеОбрабатыватьАктивизациюОбластиКалендаря = Истина;
		АктивизцияВнеОбластиКалендаря = Истина;
		Попытка
			Если ПредыдущаяВыделеннаяОбластьКалендаря = Неопределено Тогда
				Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = КалендарьТабличныйДокумент.Область(1, 1);
			Иначе
				Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = ПредыдущаяВыделеннаяОбластьКалендаря;
			КонецЕсли;
		Исключение
			Попытка Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть = КалендарьТабличныйДокумент.Область(1, 1);
			Исключение КонецПопытки;
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка Элементы.КомандаСоздатьСобытиеИзКалендаря.Доступность = ДоступностьКнопкаСоздатьСобытиеИзКалендаря;
	Исключение КонецПопытки;
	Попытка Элементы.КомандаСоздатьКонтрольнуюТочкуИзКалендаря.Доступность = ДоступностьКнопкаСоздатьСобытиеИзКалендаря;
	Исключение КонецПопытки;
	Попытка Элементы.КомандаУдалитьСобытиеИзКалендаря.Доступность = ДоступностьКнопкаУдалитьСобытиеИзКалендаря;
	Исключение КонецПопытки;
	Попытка Элементы.КомандаПеренаправитьСобытиеИзКалендаря.Доступность = ДоступностьКнопкаПеренаправитьСобытиеИзКалендаря;
	Исключение КонецПопытки;	
	
	Если Не АктивизцияВнеОбластиКалендаря Тогда
		Если Элементы.ГруппаКалендарьДетальноеОписание.Видимость И Элементы.КалендарьДетальноеОписание.Видимость Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПолеКалендарьДетальноеОписание", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьТабличныйДокументНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элемент.Редактирование = Ложь;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
	Выполнение = Ложь;
	
	ТекущиеДанные = ПолучитьСводнуюИнформациюОВыделеннойОбласти();
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.МассивРасшифровокСобытий.Количество() <> 1 Тогда Возврат; КонецЕсли;
	
	Выполнение = Истина;
	Элемент.Редактирование = Истина;
	
	ПеретаскиваемоеСобытиеРасшифровка = ТекущиеДанные.МассивРасшифровокСобытий[0];
	ПеретаскиваемоеСобытиеЗначениеРасшифровки = ТаблицаРасшифровок[ПеретаскиваемоеСобытиеРасшифровка];
	Если Не ДляСобытияРазрешеноНачалоПеретаскиванияИзКалендаря(ПеретаскиваемоеСобытиеЗначениеРасшифровки) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Элемент.Редактирование = Ложь;
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	ПараметрыПеретаскивания.Значение = ТекущиеДанные.МассивРасшифровокСобытий[0];
	#Иначе
	ПараметрыПеретаскивания.Значение.Область(1, 1, ПараметрыПеретаскивания.Значение.ВысотаТаблицы, ПараметрыПеретаскивания.Значение.ШиринаТаблицы).Расшифровка = ТекущиеДанные.МассивРасшифровокСобытий[0];
	#КонецЕсли
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьТабличныйДокументПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	СтандартнаяОбработка = Ложь;

	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	
	ДанныеЯчейки = КалендарьПолучитьДанныеЯчейкиПриПеретаскивании(Область);
	Если ДанныеЯчейки = Неопределено Тогда Возврат; КонецЕсли;
	
	// Перетаскивается область календаря.
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ТабличныйДокумент") Или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		#Если ВебКлиент Тогда
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ПараметрыПеретаскивания.Значение];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		#Иначе
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ПараметрыПеретаскивания.Значение.Область(1, 1, ПараметрыПеретаскивания.Значение.ВысотаТаблицы, ПараметрыПеретаскивания.Значение.ШиринаТаблицы).Расшифровка];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		#КонецЕсли
		
		Если Не ДляСобытияРазрешеноПеретаскиваниеВКалендарь(РасшифровкаЗначение) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьТабличныйДокументОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.Редактирование = Ложь;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивОбрабатываемыхОбъектовПеретаскивания(ЗначениеПеретаскивания)
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		ОбрабатываемыеОбъекты = ЗначениеПеретаскивания;
	Иначе
		ОбрабатываемыеОбъекты = Новый Массив();
		ОбрабатываемыеОбъекты.Добавить(ЗначениеПеретаскивания);
	КонецЕсли;
	
	Если ОбрабатываемыеОбъекты.Количество() = 0 Тогда
		Возврат ОбрабатываемыеОбъекты;
	Иначе
		Если	ТипЗнч(ОбрабатываемыеОбъекты[0]) = Тип("ДокументСсылка.УдалитьCRM_Событие")
			ИЛИ	ТипЗнч(ОбрабатываемыеОбъекты[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			//
			Возврат ОбрабатываемыеОбъекты;
		ИначеЕсли ТипЗнч(ОбрабатываемыеОбъекты[0]) = Тип("ДанныеФормыЭлементДерева") Тогда
			МассивРезультат = Новый Массив();
			Для Каждого СтрокаДерева Из ОбрабатываемыеОбъекты Цикл
				Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
					МассивРезультат.Добавить(СтрокаДерева.Ссылка);
				КонецЕсли;
			КонецЦикла;
			Возврат МассивРезультат;
		Иначе
			Возврат Новый Массив();
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КалендарьТабличныйДокументПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
	ДанныеЯчейки = КалендарьПолучитьДанныеЯчейкиПриПеретаскивании(Область);
	Если ДанныеЯчейки = Неопределено Тогда Возврат; КонецЕсли;
	
	Попытка
		ПоследняяОбластьПеретаскивания = КалендарьТабличныйДокумент.Область(Область.Верх, Область.Лево, Область.Низ, Область.Лево);
	Исключение
		ПоследняяОбластьПеретаскивания = Неопределено;
	КонецПопытки;
	
	// Перетаскивается область календаря.
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ТабличныйДокумент") Или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		#Если ВебКлиент Тогда
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ПараметрыПеретаскивания.Значение];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		#Иначе
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ПараметрыПеретаскивания.Значение.Область(1, 1, ПараметрыПеретаскивания.Значение.ВысотаТаблицы, ПараметрыПеретаскивания.Значение.ШиринаТаблицы).Расшифровка];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		#КонецЕсли
		
		Если РасшифровкаЗначение <> Неопределено И ЗначениеЗаполнено(РасшифровкаЗначение.Событие) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			
			Если Не ДляСобытияРазрешеноПеретаскиваниеВКалендарь(РасшифровкаЗначение) Тогда
				Возврат;
			КонецЕсли;
			
			Если Объект.ТекущееОтображение = "Месяц" Тогда
				ДатаВремяРасшифровки = НачалоДня(ДанныеЯчейки.Дата) + (РасшифровкаЗначение.ПериодНачало - НачалоДня(РасшифровкаЗначение.ПериодНачало));
				
				ПеренестиСобытиеНаДатуНаКлиенте(	РасшифровкаЗначение,
													ДатаВремяРасшифровки,
													Истина,
													ДанныеЯчейки.ПользовательОтбор,
													ДанныеЯчейки.ПомещениеОтбор,
													РасшифровкаЗначение.ПользовательОтбор,
													РасшифровкаЗначение.ПомещениеОтбор,
													Истина);
				//
				//КалендарьОбновитьКлиент();
				
			ИначеЕсли Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1) Тогда
				// TODO: определять становится ли событие событием на весь день.
				бСобытиеНаВесьДень = Ложь;
				
				ДатаВремяРасшифровки = ДанныеЯчейки.Дата;
				ПеренестиСобытиеНаДатуНаКлиенте(	РасшифровкаЗначение,
													ДатаВремяРасшифровки,
													бСобытиеНаВесьДень,
													ДанныеЯчейки.ПользовательОтбор,
													ДанныеЯчейки.ПомещениеОтбор,
													РасшифровкаЗначение.ПользовательОтбор,
													РасшифровкаЗначение.ПомещениеОтбор,
													Истина);
				//
				//КалендарьОбновитьКлиент();
				
			Иначе
				ДатаВремяРасшифровки = НачалоДня(ДанныеЯчейки.Дата);
				
				ДатаВремяРасшифровки = ДатаВремяРасшифровки + ДанныеЯчейки.ИндексВремени * 30 * 60;
				
				ПеренестиСобытиеНаДатуНаКлиенте(	РасшифровкаЗначение,
													ДатаВремяРасшифровки,
													ДанныеЯчейки.СобытиеНаВесьДень,
													ДанныеЯчейки.ПользовательОтбор,
													ДанныеЯчейки.ПомещениеОтбор,
													РасшифровкаЗначение.ПользовательОтбор,
													РасшифровкаЗначение.ПомещениеОтбор,
													Истина);
				//
				//КалендарьОбновитьКлиент();
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Не ЗначениеЗаполнено(ДанныеЯчейки.Дата) Тогда Возврат; КонецЕсли;
		
		НастройкиОтображения = ПолучитьНастройкиОтображенияКлиент();
		
		МассивОбрабатываемыхОбъектов = ПолучитьМассивОбрабатываемыхОбъектовПеретаскивания(ПараметрыПеретаскивания.Значение);
		//Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		//	МассивОбрабатываемыхОбъектов = ПараметрыПеретаскивания.Значение;
		//Иначе
		//	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		//		МассивОбрабатываемыхОбъектов = Новый Массив();
		//		МассивОбрабатываемыхОбъектов.Добавить(ПараметрыПеретаскивания.Значение);
		//	КонецЕсли;
		//КонецЕсли;
		Если МассивОбрабатываемыхОбъектов = Неопределено Или МассивОбрабатываемыхОбъектов.Количество() = 0 Тогда Возврат; КонецЕсли;
		
		Если Объект.ТекущееОтображение = "Месяц" Тогда
			ДатаВремяВЯчейке = НачалоДня(ДанныеЯчейки.Дата);
		ИначеЕсли Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1) Тогда
			ДатаВремяВЯчейке = ДанныеЯчейки.Дата;
		ИначеЕсли Объект.ТекущееОтображение = "Список" Тогда
			Возврат;
		Иначе
			ДатаВремяВЯчейке = НачалоДня(ДанныеЯчейки.Дата) + ДанныеЯчейки.ИндексВремени * 30 * 60;
		КонецЕсли;
		
		// Если выделенна область - пробуем определить дату/время начала/окончания из нее.
		ДанныеВыделеннаяОбласть = ПолучитьСводнуюИнформациюОВыделеннойОбласти();
		НаДатуВремяНачало = Неопределено;
		НаДатуВремяОкончание = Неопределено;
		Если ДанныеВыделеннаяОбласть.МассивДат.Количество() > 0 Тогда
			МинимальнаяДата = ДанныеВыделеннаяОбласть.МассивДат[0];
			МаксимальнаяДата = ДанныеВыделеннаяОбласть.МассивДат[ДанныеВыделеннаяОбласть.МассивДат.ВГраница()];
			
			Если Объект.ТекущееОтображение = "Месяц" Тогда
				НаДатуВремяНачало = НачалоДня(МинимальнаяДата);
				НаДатуВремяОкончание = КонецДня(МаксимальнаяДата);
			ИначеЕсли Объект.ТекущееОтображение = "Расписание" Или (Объект.ТекущееОтображение = "Диспетчеризация" И ПоРесурсамШкалаВремениПоГоризонтали = 1) Тогда
				НаДатуВремяНачало = МинимальнаяДата;
				НаДатуВремяОкончание = МаксимальнаяДата + НастройкиОтображения.РасписаниеИнтервалШкалыВремени * 60;
				Если НачалоДня(НаДатуВремяОкончание) > НачалоДня(МаксимальнаяДата) Тогда
					НаДатуВремяОкончание = МаксимальнаяДата;
				КонецЕсли;
			Иначе
				НаДатуВремяНачало = НачалоДня(МинимальнаяДата) + ДанныеВыделеннаяОбласть.ИндексВремениНачало * 30 * 60;
				НаДатуВремяОкончание = НачалоДня(МаксимальнаяДата) + (ДанныеВыделеннаяОбласть.ИндексВремениОкончание + 1) * 30 * 60;
				Если НачалоДня(НаДатуВремяОкончание) > НачалоДня(МаксимальнаяДата) Тогда
					НаДатуВремяОкончание = КонецДня(МаксимальнаяДата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если	Не (	НаДатуВремяНачало <> Неопределено
					И	НаДатуВремяОкончание <> Неопределено
					И	ДатаВремяВЯчейке >= НаДатуВремяНачало
					И	ДатаВремяВЯчейке <= НаДатуВремяОкончание) Тогда
			// Если выделенна некорректная область или перетащили не в выделенную область.
			НаДатуВремяНачало = ДатаВремяВЯчейке;
			НаДатуВремяОкончание = Неопределено;
		КонецЕсли;
		Если НаДатуВремяОкончание <> Неопределено И НаДатуВремяНачало <> Неопределено Тогда
			Если НаДатуВремяОкончание = НаДатуВремяНачало + 30 * 60 Тогда
				НаДатуВремяОкончание = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЯчейки.Свойство("ПользовательОтбор") Тогда
			НаПользователя = ?(ЗначениеЗаполнено(ДанныеЯчейки.ПользовательОтбор), ДанныеЯчейки.ПользовательОтбор, Неопределено);
		Иначе
			НаПользователя = Неопределено;
		КонецЕсли;
		Если ДанныеЯчейки.Свойство("ПомещениеОтбор") Тогда
			НаПомещение = ?(ЗначениеЗаполнено(ДанныеЯчейки.ПомещениеОтбор), ДанныеЯчейки.ПомещениеОтбор, Неопределено);
		Иначе
			НаПомещение = Неопределено;
		КонецЕсли;
		Если ДанныеЯчейки.Свойство("СобытиеНаВесьДень") Тогда
			НаСобытиеНаВесьДень = (ДанныеЯчейки.СобытиеНаВесьДень = Истина);
		Иначе
			НаСобытиеНаВесьДень = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(МассивОбрабатываемыхОбъектов[0]) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
			Если НаПользователя <> Неопределено Тогда
				СтруктураДанныхКлиент = ДействияПередОбновлениемКалендаряНаКлиенте();
				ДиспетчеризацияСобытий(ПараметрыПеретаскивания.Значение, НаДатуВремяНачало, НаДатуВремяОкончание, НаПользователя, НаСобытиеНаВесьДень, СтруктураДанныхКлиент);
				ДействияПослеОбновленияКалендаряНаКлиенте(СтруктураДанныхКлиент);
			КонецЕсли;
		Иначе
			ОткрытьФормуСобытияНаОсновании(МассивОбрабатываемыхОбъектов, НаДатуВремяНачало, НаДатуВремяОкончание, НаПользователя, НаПомещение, НаСобытиеНаВесьДень,,Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборМесяцаПриАктивизацииСтроки(Элемент)
	Если СписокВыборМесяцаНеОбрабатыватьПриАктивизацииСтроки = Истина Тогда
		СписокВыборМесяцаНеОбрабатыватьПриАктивизацииСтроки = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокВыборМесяца.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И	(ТекущиеДанные.Значение = Дата("00010101") Или ТекущиеДанные.Значение = Дата("99990101")) Тогда
		// Расширение списка месяцев
		Если ТекущиеДанные.Значение = Дата("00010101") Тогда // Добавление месяцев в начало списка.
			РасширитьСписокМесяцев(Ложь);
		Иначе // Добавление месяцев в конец списка.
			РасширитьСписокМесяцев(Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокВыборМесяцаПриАктивизацииСтроки", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаКалендаряПриИзменении(Элемент)
	Если Объект.ТекущееОтображение = "Неделя" Тогда
		ДатаКалендаряВыделитьНеделю();
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияДатаКалендаряПриИзменении", 0.1, Истина);
КонецПроцедуры

////////////////////////////////////////////
// Обработчики и процедуры элементов отборов.

&НаКлиенте
Процедура ПриИзмененииОтбораОбщий(ОписаниеОтбора)
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	КалендарьОбновитьКлиент();
	
	Если Элементы.ГруппаСписокЗадач.Видимость Тогда
		бПрименитьОтборыКСпискуЗадач = Истина;
		Если ТипЗнч(ОписаниеОтбора) = Тип("Структура") Тогда
			Если Найти(",Подразделение,Пользователь,Проект,Партнер,", "," + ОписаниеОтбора.ПолеОтбора + ",") = 0 Тогда
				бПрименитьОтборыКСпискуЗадач = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если бПрименитьОтборыКСпискуЗадач Тогда
			СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСписокЗадачКлиент();
			ОбновитьСписокЗадачНаКлиенте();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЭлементыОтбора()
	ОтборТипСобытияСобытия = Истина;
	ОтборТипСобытияКонтрольныеТочки = Истина;
	
	МассивДоступныхОтборов = ПолучитьМассивДоступныхОтборов();
	Для Каждого ПолеОтбора Из МассивДоступныхОтборов Цикл
		ИменаОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
		ЭлементОтбора = Элементы[ИменаОтбора.ИмяЭлементаЗначение];
		ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(ЭлементОтбора, ЭтотОбъект);
		Если ОписаниеОтбора <> Неопределено Тогда
			ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхВидСравнения] = ОписаниеОтбора.ВидСравненияПоУмолчанию;
			ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ЗначениеПоУмолчанию;
			ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] = ОписаниеОтбора.ИспользованиеПоУмолчанию;
			Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].ОграничениеТипа = ОписаниеОтбора.ОписаниеТиповОграничениеВыбора;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтборИспользованиеПриИзменении(Элемент)
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОтбораОбщий(ОписаниеОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеПриИзменении(Элемент)
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОтбора.ИсточникДанныхЗначение) И ОписаниеОтбора.ИсточникДанныхИспользование = Ложь Тогда
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(ОписаниеОтбора.ИсточникДанныхЗначение) И ОписаниеОтбора.ИсточникДанныхИспользование = Истина Тогда
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] = Ложь;
	КонецЕсли;
	
	ПриИзмененииОтбораОбщий(ОписаниеОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		СтандартнаяОбработка = Ложь; Возврат;
	КонецЕсли;
	
	Если ОписаниеОтбора.ВыборИзСписка Тогда
		Если ТипЗнч(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) <> Тип("СписокЗначений") Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) Тогда
				СтароеЗначение = ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение];
			Иначе
				СтароеЗначение = Неопределено;
			КонецЕсли;
			
			ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = Новый СписокЗначений();
			Если СтароеЗначение <> Неопределено Тогда
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].Добавить();
			КонецЕсли;
		КонецЕсли;
		
		Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].ОграничениеТипа = ОписаниеОтбора.ОписаниеТиповСписокЗначений;
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].ТипЗначения = ОписаниеОтбора.ОписаниеТиповОграничениеВыбора;
	Иначе
		Если ТипЗнч(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) = Тип("СписокЗначений") Тогда
			Если ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].Количество() > 0 Тогда
				СтароеЗначение = ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение][0].Значение;
			Иначе
				СтароеЗначение = Неопределено;
			КонецЕсли;
			Если СтароеЗначение = Неопределено Тогда
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеЗначение;
			Иначе
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = СтароеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].ОграничениеТипа = ОписаниеОтбора.ОписаниеТиповОграничениеВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОтбораПоПользователю(бБылиИзмененияВОтборах = Неопределено)
	бВключитьОтборПоТекущемуПользователю = Истина;
	
	МассивДоступныхОтборов = ПолучитьМассивДоступныхОтборов();
	Для Каждого ПолеОтбора Из МассивДоступныхОтборов Цикл
		ИменаОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
		ЭлементОтбора = Элементы[ИменаОтбора.ИмяЭлементаЗначение];
		ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(ЭлементОтбора, ЭтотОбъект);
		Если ОписаниеОтбора <> Неопределено Тогда
			Если Не ЭтотОбъект.Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].Видимость Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Найти(",Пользователь,Подразделение,Партнер,Проект,Помещение,", "," + ПолеОтбора + ",") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект[ИменаОтбора.ИмяИсточникаДанныхИспользование] = Истина И ЗначениеЗаполнено(ЭтотОбъект[ИменаОтбора.ИмяИсточникаДанныхЗначение]) Тогда
			бВключитьОтборПоТекущемуПользователю = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если бВключитьОтборПоТекущемуПользователю Тогда
		Если Не ЗначениеЗаполнено(ОтборЗначениеПользователь) Или Не ОтборИспользованиеПользователь Тогда
			ОтборИспользованиеПользователь = Истина;
			ОтборВидСравненияПользователь = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЗначениеПользователь = ТекущийПользовательСеанса;
			
			СтрокаОбязательныеОтборы = "";
			Для Каждого ПолеОтбора Из МассивДоступныхОтборов Цикл
				Если Найти(",Пользователь,Подразделение,Партнер,Проект,Помещение,", "," + ПолеОтбора + ",") = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИменаОтбора = ПолучитьИменаДляОтбора(ПолеОтбора);
				
				Если Не Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Видимость Тогда
					Продолжить;
				КонецЕсли;
				
				ПредставлениеОтбора = Элементы[ИменаОтбора.ИмяЭлементаЗаголовок].Заголовок;
				ПредставлениеОтбора = СтрЗаменить(ПредставлениеОтбора, ":", "");
				
				СтрокаОбязательныеОтборы = СтрокаОбязательныеОтборы
					+ ?(ЗначениеЗаполнено(СтрокаОбязательныеОтборы), ", ", "")
					+ """" + ПредставлениеОтбора + """";
				//
			КонецЦикла;
			
			ПоказатьОповещениеПользователя(
				"",
				"",
				СтрЗаменить(НСтр("ru = 'Один из отборов должен быть установлен: %Отбор%'"), "%Отбор%", СтрокаОбязательныеОтборы + "."));
			//
			
			бБылиИзмененияВОтборах = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеОчистка(Элемент, СтандартнаяОбработка)
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		СтандартнаяОбработка = Ложь; Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОписаниеОтбора.ВыборИзСписка Тогда
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеСписок;
	Иначе
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеЗначение;
	КонецЕсли;
	
	Если Найти(",Пользователь,Подразделение,Партнер,Проект,Помещение,", "," + ОписаниеОтбора.ПолеОтбора + ",") > 0 Тогда
		ПроверитьЗаполнениеОтбораПоПользователю();
	КонецЕсли;
	
	бИспользование = ЗначениеЗаполнено(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]);
	Если ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] <> бИспользование Тогда
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] = бИспользование;
	КонецЕсли;
	
	ПриИзмененииОтбораОбщий(ОписаниеОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСравненияПриИзмененииОбщий(Элемент, ПрименитьОтбор = Истина)
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОтбора.ВыборИзСписка Тогда
		Если ТипЗнч(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) <> Тип("СписокЗначений") Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) Тогда
				СтароеЗначение = ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение];
			Иначе
				СтароеЗначение = Неопределено;
			КонецЕсли;
			
			ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = Новый СписокЗначений();
			Если СтароеЗначение <> Неопределено Тогда
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].Добавить(СтароеЗначение);
			КонецЕсли;
		КонецЕсли;
		
		Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].ОграничениеТипа = ОписаниеОтбора.ОписаниеТиповСписокЗначений;
		ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].ТипЗначения = ОписаниеОтбора.ОписаниеТиповОграничениеВыбора;
	Иначе
		Если ТипЗнч(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) = Тип("СписокЗначений") Тогда
			Если ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение].Количество() > 0 Тогда
				СтароеЗначение = ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение][0].Значение;
			Иначе
				СтароеЗначение = Неопределено;
			КонецЕсли;
			Если СтароеЗначение = Неопределено Тогда
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = ОписаниеОтбора.ПустоеЗначениеЗначение;
			Иначе
				ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение] = СтароеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		Элементы[ОписаниеОтбора.ИмяЭлементаЗначение].ОграничениеТипа = ОписаниеОтбора.ОписаниеТиповОграничениеВыбора;
	КонецЕсли;
	
	Если ПрименитьОтбор Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхЗначение]) И Не ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] Тогда
			ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхИспользование] = Истина;
		КонецЕсли;
		ПриИзмененииОтбораОбщий(ОписаниеОтбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	ОтборВидСравненияПриИзмененииОбщий(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСравненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(Элемент, ЭтотОбъект);
	Если ОписаниеОтбора = Неопределено Тогда
		СтандартнаяОбработка = Ложь; Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого ДоступныйВидСравнения Из ОписаниеОтбора.ДоступныеВидыСравнения Цикл
		НовыйЭлементСписка = Элемент.СписокВыбора.Добавить();
		НовыйЭлементСписка.Значение = ДоступныйВидСравнения.Значение;
		ЗаполнитьЗначенияСвойств(НовыйЭлементСписка, ДоступныйВидСравнения);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипСобытияСобытияПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы();
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	КалендарьОбновитьКлиент();
	
	ОбновитьСписокЗадачНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипыОбъектовПометкаПриИзменении(Элемент)
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивЗначений = ВыбранноеЗначение;
	Иначе
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоРесурсов;
		ТекущееИмяРесурса = ТекущиеДанные.Имя;
		ЭлементыДляДобавления = ТекущиеДанные.ПолучитьЭлементы();
	ИначеЕсли ТекущиеДанные.ЭтоГруппа Тогда
		ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
		Пока ТекРодитель <> Неопределено Цикл
			ТекущееИмяРесурса = ТекРодитель.Имя;
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
		ЭлементыДляДобавления = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
		Пока ТекРодитель <> Неопределено Цикл
			ТекущееИмяРесурса = ТекРодитель.Имя;
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
		ЭлементыДляДобавления = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;
	Если ТекущиеДанные.ЭтоГруппа Или (ТекущиеДанные.ЭтоЗаголовок И Не ТекущиеДанные.ЭтоСистемнаяГруппа) Тогда
		бОбновлятьКалендарь = Истина;
	КонецЕсли;
	
	Для каждого ЭлементМассива из МассивЗначений Цикл
		НоваяСтрока = ЭлементыДляДобавления.Добавить();
		НоваяСтрока.Имя = ТекущееИмяРесурса;
		НоваяСтрока.ЭтоЗаголовок = Ложь;
		
		НоваяСтрока.Значение = ЭлементМассива;
		НоваяСтрока.Описание = Строка(ЭлементМассива);
		НоваяСтрока.ЭтоГруппа = Ложь;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Значение) И ТипЗнч(НоваяСтрока.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
			НоваяСтрока.Недействителен = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Значение, "Недействителен");
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДеревоРесурсов.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Ложь);
	
	КалендарьОбновитьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ДобавитьУдалитьЭлементВДеревеРесурсов(, Истина)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоГруппа Или ТекущиеДанные.ЭтоСистемнаяГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРесурса(ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсовПриАктивизацииСтроки(Элемент)
	Если ДеревоРесурсовНеОбрабатыватьПриАктивизацииСтроки = Истина Тогда
		ДеревоРесурсовНеОбрабатыватьПриАктивизацииСтроки = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		бДоступностьДобавитьЭлемент		= Ложь;
		бДоступностьДобавитьГруппу		= Ложь;
		бДоступностьУдалитьЭлемент		= Ложь;
		бДоступностьИзменитьГруппу		= Ложь;
		бДоступностьПереместить			= Ложь;
	Иначе
		бДоступностьДобавитьЭлемент	= (Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		бДоступностьДобавитьГруппу	= (Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		
		бДоступностьПереместитьВверх		= (Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		бДоступностьПереместитьВниз		= (Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		Если (бДоступностьПереместитьВверх Или бДоступностьПереместитьВниз) И ТекущиеДанные.ЭтоЗаголовок Тогда
			ДеревоРесурсовЭлементы = ДеревоРесурсов.ПолучитьЭлементы();
			Попытка		Индекс = ДеревоРесурсовЭлементы.Индекс(ТекущиеДанные);
			Исключение	Индекс = Неопределено;
			КонецПопытки;
			Если Индекс <> Неопределено Тогда
				Попытка
					Если ДеревоРесурсовЭлементы[Индекс - 1].ЭтоСистемнаяГруппа Тогда
						бДоступностьПереместитьВверх = Ложь;
					КонецЕсли;
				Исключение КонецПопытки;
				
				Попытка
					Если ДеревоРесурсовЭлементы[Индекс] = ДеревоРесурсовЭлементы[ДеревоРесурсовЭлементы.Количество() - 1] Тогда
						бДоступностьПереместитьВниз = Ложь;
					КонецЕсли;
				Исключение КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		бДоступностьУдалитьЭлемент = (Не ТекущиеДанные.ЭтоЗаголовок И Не ТекущиеДанные.ЭтоСистемнаяГруппа);
		бДоступностьИзменитьГруппу = (ТекущиеДанные.ЭтоГруппа И Не ТекущиеДанные.ЭтоЗаголовок И Не ТекущиеДанные.ЭтоСистемнаяГруппа);
	КонецЕсли;
	
	Элементы.КнопкаДеревоРесурсовДобавитьЭлемент.Доступность				= бДоступностьДобавитьЭлемент;
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюДобавитьЭлемент.Доступность	= бДоступностьДобавитьЭлемент;
	Элементы.КнопкаДеревоРесурсовПодборЭлементов.Доступность				= бДоступностьДобавитьЭлемент;
	Элементы.КнопкаДеревоРесурсовДобавитьГруппу.Доступность					= бДоступностьДобавитьГруппу;
	Элементы.КнопкаДеревоРесурсовИзменитьГруппу.Доступность					= бДоступностьИзменитьГруппу;
	Элементы.КнопкаДеревоРесурсовУдалитьЭлемент.Доступность					= бДоступностьУдалитьЭлемент;
	Элементы.КнопкаДеревоРесурсовКонтекстноеМенюУдалитьЭлемент.Доступность	= бДоступностьУдалитьЭлемент;
	
	Элементы.КнопкаДеревоРесурсовПереместитьВверх.Доступность	= бДоступностьПереместитьВверх;
	Элементы.КнопкаДеревоРесурсовПереместитьВниз.Доступность	= бДоступностьПереместитьВниз;
	
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоРесурсовПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСпискаКалендаряПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Список = ПолучитьСписокГруппировокСпискаКалендаря();
	
	НачальноеЗначение = Список.НайтиПоЗначению(ГруппировкаСпискаКалендаря);
	ОписаниеОповещения = Новый ОписаниеОповещения("ГруппировкаСпискаКалендаряПредставлениеНачалоВыбораЗавершение", ЭтотОбъект);
	Если НачальноеЗначение = Неопределено Тогда
		ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
	Иначе
		ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НачальноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСпискаКалендаряПредставлениеНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		ГруппировкаСпискаКалендаря				= ВыбранноеЗначение.Значение;
		ГруппировкаСпискаКалендаряПредставление	= ВыбранноеЗначение.Представление;
		
		НастроитьВидимостьИДоступностьФормы();
		ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
		КалендарьОбновитьКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСписокПериодНачалоПериодОкончаниеИПредопределенныйПериод()
	Список = ПолучитьСписокВыбораПериода();
	
	ТекДата = ТекущаяДата();
	
	бНайдено = Ложь;
	Для Каждого ЗначениеСписка Из Список Цикл
		Если ЗначениеСписка.Значение = "ПроизвольныйПериод" Тогда Продолжить; КонецЕсли;
		
		ПредопределенныйПериод = ПолучитьПредопределенныйПериод(ЗначениеСписка.Значение, ТекДата, КалендарьСписокПериодНачало, КалендарьСписокПериодОкончание);
		Если НачалоДня(КалендарьСписокПериодНачало) = НачалоДня(ПредопределенныйПериод.ПериодНачало) И НачалоДня(КалендарьСписокПериодОкончание) = НачалоДня(ПредопределенныйПериод.ПериодОкончание) Тогда
			КалендарьСписокВыбранныйПредопределенныйПериод				= ЗначениеСписка.Значение;
			КалендарьСписокВыбранныйПредопределенныйПериодПредставление	= ЗначениеСписка.Представление;
			бНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не бНайдено Тогда
		НайденноеЗначение = Список.НайтиПоЗначению("ПроизвольныйПериод");
		Если НайденноеЗначение <> Неопределено Тогда
			КалендарьСписокВыбранныйПредопределенныйПериод				= НайденноеЗначение.Значение;
			КалендарьСписокВыбранныйПредопределенныйПериодПредставление	= НайденноеЗначение.Представление;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокПериодНачалоПриИзменении(Элемент)
	Если КалендарьСписокПериодОкончание < КалендарьСписокПериодНачало Тогда
		КалендарьСписокПериодОкончание = КалендарьСписокПериодНачало;
	КонецЕсли;
	
	СинхронизироватьСписокПериодНачалоПериодОкончаниеИПредопределенныйПериод();
	
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокПериодОкончаниеПриИзменении(Элемент)
	Если КалендарьСписокПериодНачало > КалендарьСписокПериодОкончание Тогда
		КалендарьСписокПериодНачало = КалендарьСписокПериодОкончание;
	КонецЕсли;
	
	СинхронизироватьСписокПериодНачалоПериодОкончаниеИПредопределенныйПериод();
	
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СписокКалендаряГруппироватьПоДнямПриИзменении(Элемент)
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокВыводитьОписаниеСобытияПриИзменении(Элемент)
	ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(КалендарьСписокТекстПоиска) И Объект.ТекущееОтображение <> "Список" Тогда
		ПризнакПереключениеВРежимСпискаПоиском = Истина;
		КомандаТекущееОтображениеСписок(Неопределено);
	КонецЕсли;
	
	КалендарьСписокОбновитьПоБыстромуПоиску();
	
	НастроитьВидимостьИДоступностьФормы();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокДляВыбора = Новый СписокЗначений();
	СписокДляВыбора.Добавить("[ПоискПоПолномуНазванию]", НСтр("ru = '[Поиск по полному названию]'"));
	СписокДляВыбора.Добавить("[ПоискПоПодстроке]", НСтр("ru = '[Поиск по подстроке]'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("КалендарьСписокТекстПоискаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДляВыбора, Элемент, ?(КалендарьСписокФлагПоискПоПодстроке, СписокДляВыбора[1], СписокДляВыбора[0]));
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаНачалоВыбораЗавершение(ВыбранноеЗначение, Элемент) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы.КалендарьСписокТекстПоиска.ПодсказкаВвода = ВыбранноеЗначение.Представление;
		Элементы.КалендарьСписокТекстПоиска.Подсказка = ВыбранноеЗначение.Представление;
		Если ВыбранноеЗначение.Значение = "[ПоискПоПодстроке]" Тогда
			КалендарьСписокФлагПоискПоПодстроке = Истина;
		Иначе
			КалендарьСписокФлагПоискПоПодстроке = Ложь;
		КонецЕсли;
		КалендарьСписокТекстПоискаОткрытие(Элемент, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		Если КалендарьСписокТекстПоиска <> Элемент.ТекстРедактирования Тогда
			КалендарьСписокТекстПоиска = Элемент.ТекстРедактирования;
		КонецЕсли;
		КалендарьСписокОбновитьПоБыстромуПоиску();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокТекстПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	СписокДляВыбора = КалендарьСписокТекстПоискаСписокВыбора;
	Для каждого ЭлементСписка Из СписокДляВыбора Цикл
		Если ВРег(Лев(ЭлементСписка, 6)) = "[ПОИСК" Тогда
			Продолжить;
		КонецЕсли;
		Если ЛЕВ(ВРег(ЭлементСписка.Значение),СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			 ДанныеВыбора.Добавить(ЭлементСписка.Значение,, Истина);
			 КоличествоНайденных = КоличествоНайденных + 1;
			 Если КоличествоНайденных > 7 Тогда
				 Прервать;
			 КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ДанныеВыбора = Неопределено;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДетальноеОписаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	тОбъект = Неопределено;
	ТекущаяОбласть = Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть;
	Если ТекущаяОбласть <> Неопределено Тогда 
		СобытиеВРасшифровке = Неопределено;
		Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Число") Тогда
			Попытка		ЗначениеРасшифровки = ТаблицаРасшифровок[ТекущаяОбласть.Расшифровка];
			Исключение	ЗначениеРасшифровки = Неопределено;
			КонецПопытки;
			Если ЗначениеРасшифровки <> Неопределено Тогда
				СобытиеВРасшифровке = ЗначениеРасшифровки.Событие;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СобытиеВРасшифровке) Тогда
			тОбъект = СобытиеВРасшифровке;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КалендарьДетальноеОписаниеПриНажатииЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, ПолучитьОписаниеТиповПоляОтображенияСодержанияКалендаря(), тОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьДетальноеОписаниеПриНажатииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Подключаемый_ОбновитьПолеКалендарьДетальноеОписание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачДетальноеОписаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	Если Элементы.СписокЗадач.ТекущиеДанные <> Неопределено Тогда
		тОбъект = Элементы.СписокЗадач.ТекущиеДанные.Ссылка;
	Иначе
		тОбъект = Неопределено;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокЗадачДетальноеОписаниеПриНажатииЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписокЗадач(), тОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачДетальноеОписаниеПриНажатииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Подключаемый_СписокЗадачПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчеризацияДетальноеОписаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	Если Элементы.ДиспетчеризацияСписокСобытий.ТекущиеДанные <> Неопределено Тогда
		тОбъект = Элементы.ДиспетчеризацияСписокСобытий.ТекущиеДанные.Ссылка;
	Иначе
		тОбъект = Неопределено;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДиспетчеризацияДетальноеОписаниеПриНажатииЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписокСобытийДиспетчеризации(), тОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчеризацияДетальноеОписаниеПриНажатииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Подключаемый_СписокСобытийДиспетчеризацииПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	ТекущаяСтрокаСписка = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекущаяСтрокаСписка <> ПоследняяВыделеннаяСтрокаСпискаЗадач Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СписокЗадачПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	ПоследняяВыделеннаяСтрокаСпискаЗадач = ТекущаяСтрокаСписка;
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчеризацияСписокСобытийПриАктивизацииСтроки(Элемент)
	ТекущаяСтрокаСписка = Элементы.ДиспетчеризацияСписокСобытий.ТекущаяСтрока;
	Если ТекущаяСтрокаСписка <> ПоследняяВыделеннаяСтрокаСпискаСобытийДиспетчеризации Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СписокСобытийДиспетчеризацииПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	ПоследняяВыделеннаяСтрокаСпискаСобытийДиспетчеризации = ТекущаяСтрокаСписка;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокВыбранныйПредопределенныйПериодПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(КалендарьСписокВыбранныйПредопределенныйПериод) Тогда
		КалендарьСписокВыбранныйПредопределенныйПериод = "ПроизвольныйПериод";
	КонецЕсли;
	
	Список = ПолучитьСписокВыбораПериода();
	
	НачальноеЗначение = Список.НайтиПоЗначению(КалендарьСписокВыбранныйПредопределенныйПериод);
	ОписаниеОповещения = Новый ОписаниеОповещения("КалендарьСписокВыбранныйПредопределенныйПериодПредставлениеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НачальноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСписокВыбранныйПредопределенныйПериодПредставлениеНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;
	
	КалендарьСписокВыбранныйПредопределенныйПериод				= ВыбранноеЗначение.Значение;
	КалендарьСписокВыбранныйПредопределенныйПериодПредставление	= ВыбранноеЗначение.Представление;
	
	НастроитьВидимостьИДоступностьФормы();
	
	ВыбранныйПериод = ПолучитьПредопределенныйПериод(КалендарьСписокВыбранныйПредопределенныйПериод, ТекущаяДата(), КалендарьСписокПериодНачало, КалендарьСписокПериодОкончание);
	КалендарьСписокПериодНачало		= ВыбранныйПериод.ПериодНачало;
	КалендарьСписокПериодОкончание	= ВыбранныйПериод.ПериодОкончание;
	
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПоРесурсамШкалаВремениПоГоризонталиПриИзменении(Элемент)
	Если Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		ПриСменеТекущегоОтображенияОбщее();
	Иначе
		СменитьОтображениеНа = Объект.ТекущееОтображение;
		Если ПоРесурсамШкалаВремениПоГоризонтали = 0 Тогда
			СменитьОтображениеНа = "ПоРесурсам";
		ИначеЕсли ПоРесурсамШкалаВремениПоГоризонтали = 1 Тогда
			СменитьОтображениеНа = "Расписание";
		КонецЕсли;
		
		Если СменитьОтображениеНа <> Объект.ТекущееОтображение Тогда
			Объект.ТекущееОтображение = СменитьОтображениеНа;
			ПриСменеТекущегоОтображенияОбщее();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПользователейДиспетчеризацияПриАктивизацииСтроки()
	СписокСтарый = СписокВыбранныхПользователейДиспетчеризации.Скопировать();
	
	СписокВыбранныхПользователейДиспетчеризации.Очистить();
	Если ТипЗнч(Элементы.СписокПользователейДиспетчеризация.ВыделенныеСтроки) = Тип("Массив") Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокПользователейДиспетчеризация.ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СправочникСсылка.Пользователи") Тогда
				СписокВыбранныхПользователейДиспетчеризации.Добавить(ВыделеннаяСтрока, Строка(ВыделеннаяСтрока));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если СписокВыбранныхПользователейДиспетчеризации.Количество() = 0 Тогда
		СписокВыбранныхПользователейДиспетчеризации.Добавить(ТекущийПользовательСеанса, Строка(ТекущийПользовательСеанса));
	КонецЕсли;
	СписокВыбранныхПользователейДиспетчеризации.СортироватьПоПредставлению();
	
	Если Объект.ТекущееОтображение = "Диспетчеризация" И ВариантСпискаПользователейДиспетчеризации = 0 Тогда
		Если Не СравнитьСпискиЗначений(СписокСтарый, СписокВыбранныхПользователейДиспетчеризации) Тогда
			КалендарьОбновитьКлиент();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейДиспетчеризацияПриАктивизацииСтроки(Элемент)
	Если НеОбрабатыватьАктивизациюСтрокиСписокПользователейДиспетчеризация = Истина Тогда
		НеОбрабатыватьАктивизациюСтрокиСписокПользователейДиспетчеризация = Неопределено;
		Возврат;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_СписокПользователейДиспетчеризацияПриАктивизацииСтроки", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГруппыПользователейПриАктивизацииСтроки()
	ОбновитьСодержимоеФормыПриИзмененииГруппы();
	Если ЗначениеЗаполнено(Элементы.ГруппыПользователей.ТекущаяСтрока)
		И Элементы.ГруппыПользователей.ТекущаяСтрока <> ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи") Тогда
		//
		ПредыдущееТекущаяСтрокаПользователей = Элементы.СписокПользователейДиспетчеризация.ТекущаяСтрока;
		СоставГруппыПользователей = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(Элементы.ГруппыПользователей.ТекущаяСтрока, ВыбиратьПользователейИерархически);
		Если СоставГруппыПользователей.Количество() > 0 Тогда
			Элементы.СписокПользователейДиспетчеризация.ВыделенныеСтроки.Очистить();
			Элементы.СписокПользователейДиспетчеризация.ТекущаяСтрока = ПользовательПустаяСсылка;
			Для Каждого ПользовательСсылка Из СоставГруппыПользователей Цикл
				Попытка Элементы.СписокПользователейДиспетчеризация.ВыделенныеСтроки.Добавить(ПользовательСсылка);
				Исключение КонецПопытки;
			КонецЦикла;
			Подключаемый_СписокПользователейДиспетчеризацияПриАктивизацииСтроки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ГруппыПользователейПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыбиратьПользователейИерархическиПриИзменении(Элемент)
	ОбновитьСодержимоеФормыПриИзмененииГруппы();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейДиспетчеризацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = ДеревоПользователейДиспетчеризации.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекДанные.ПолучитьРодителя() = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ТекДанные.ЭтоГруппа Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
			ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Ссылка), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПользователейДиспетчеризацииПриАктивизацииСтроки()
	СписокСтарый = СписокИдентификаторовВыделенныхСтрокВДеревеПользователейДиспетчеризации.Скопировать();
	
	ЗаполнитьСписокИдентификаторовВыделенныхСтрокВДеревеПользователейДиспетчеризации();
	
	Если Объект.ТекущееОтображение = "Диспетчеризация" И  ВариантСпискаПользователейДиспетчеризации = 1 Тогда
		Если Не СравнитьСпискиЗначений(СписокСтарый, СписокИдентификаторовВыделенныхСтрокВДеревеПользователейДиспетчеризации) Тогда
			КалендарьОбновитьКлиент();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейДиспетчеризацииПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоПользователейДиспетчеризацииПриАктивизацииСтроки", 0.2, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПользователейГруппы(Знач ГруппаПользователей, Знач ПризнакВыбиратьИерархически = Ложь)
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(ГруппаПользователей, ПризнакВыбиратьИерархически);
КонецФункции

&НаКлиенте
Процедура ДеревоПользователейДиспетчеризацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Если Копирование Тогда Возврат; КонецЕсли;
	
	ЭлементыДляДобавления = ПолучитьЭлементыДляДобавленияВДеревоПользователейДиспетчеризации();
	Если ЭлементыДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыВыбора = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе,ВыборГруппПользователей", Истина, Истина, Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоПользователейДиспетчеризацииПередНачаломДобавленияЗавершение", ЭтотОбъект, ЭлементыДляДобавления);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейДиспетчеризацииПередНачаломДобавленияЗавершение(ВыбранноеЗначение, ЭлементыДляДобавления) Экспорт
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		НоваяСтрока = ЭлементыДляДобавления.Добавить();
		НоваяСтрока.ЭтоГруппа = Ложь;
		НоваяСтрока.Ссылка = ВыбранноеЗначение;
		НоваяСтрока.Представление = Строка(ВыбранноеЗначение);
		НоваяСтрока.Недействителен = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Ссылка, "Недействителен");
		
		ИдСтроки = НоваяСтрока.ПолучитьИдентификатор();
		Попытка Элементы.ДеревоПользователейДиспетчеризации.ТекущаяСтрока = ИдСтроки;
		Исключение КонецПопытки;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		МассивПользователиГруппы = ПолучитьПользователейГруппы(ВыбранноеЗначение, Ложь);      //ФормаВыбора.ВыбиратьИерархически
		Если МассивПользователиГруппы.Количество() > 0 Тогда
			НоваяГруппа = ЭлементыДляДобавления.Добавить();
			НоваяГруппа.ЭтоГруппа = Истина;
			НоваяГруппа.Представление = Строка(ВыбранноеЗначение);
			ЭлементыГруппы = НоваяГруппа.ПолучитьЭлементы();
			
			Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
				НоваяСтрока = ЭлементыГруппы.Добавить();
				НоваяСтрока.ЭтоГруппа = Ложь;
				НоваяСтрока.Ссылка = ПользовательСсылка;
				НоваяСтрока.Представление = Строка(ПользовательСсылка);
			КонецЦикла;
			
			ИдСтроки = НоваяГруппа.ПолучитьИдентификатор();
			Элементы.ДеревоПользователейДиспетчеризации.Развернуть(ИдСтроки, Истина);
			Попытка Элементы.ДеревоПользователейДиспетчеризации.ТекущаяСтрока = ИдСтроки;
			Исключение КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЭлементыДляДобавленияВДеревоПользователейДиспетчеризации()
	ТекСтрока = Элементы.ДеревоПользователейДиспетчеризации.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекДанные = ДеревоПользователейДиспетчеризации.НайтиПоИдентификатору(ТекСтрока);
	
	Если ТекДанные.ПолучитьРодителя() = Неопределено Тогда
		ЭлементыДляДобавления = ДеревоПользователейДиспетчеризации.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	ИначеЕсли ТекДанные.ЭтоГруппа Тогда
		ЭлементыДляДобавления = ТекДанные.ПолучитьЭлементы();
	Иначе
		ТекРодитель = ТекДанные.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда
			ЭлементыДляДобавления = ДеревоПользователейДиспетчеризации.ПолучитьЭлементы()[0].ПолучитьЭлементы();
		Иначе
			ЭлементыДляДобавления = ТекРодитель.ПолучитьЭлементы();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементыДляДобавления;
КонецФункции

&НаКлиенте
Процедура КомандаДеревоПользователейДиспетчеризацииДобавитьГруппу(Команда)
	ЭлементыДляДобавления = ПолучитьЭлементыДляДобавленияВДеревоПользователейДиспетчеризации();
	Если ЭлементыДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ЭлементыДляДобавления.Добавить();
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Представление = НСтр("ru = 'Новая группа'");
	
	ИдСтроки = НоваяСтрока.ПолучитьИдентификатор();
	Попытка Элементы.ДеревоПользователейДиспетчеризации.ТекущаяСтрока = ИдСтроки;
	Исключение КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейДиспетчеризацииПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элементы.ДеревоПользователейДиспетчеризации.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекДанные = ДеревоПользователейДиспетчеризации.НайтиПоИдентификатору(ТекСтрока);
	
	Если ТекДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ТекДанные.ЭтоГруппа Тогда
		Отказ = Истина;
		Если ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
			ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Ссылка), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейДиспетчеризацииПередУдалением(Элемент, Отказ)
	ТекСтрока = Элементы.ДеревоПользователейДиспетчеризации.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекДанные = ДеревоПользователейДиспетчеризации.НайтиПоИдентификатору(ТекСтрока);
	
	Если ТекДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантСпискаПользователейДиспетчеризацииПриИзменении(Элемент)
	Элементы.ГруппаВариантСпискаПользователейДиспетчеризацииДинамическийСписок.Видимость	= (ВариантСпискаПользователейДиспетчеризации = 0);
	Элементы.ГруппаВариантСпискаПользователейДиспетчеризацииДерево.Видимость				= (ВариантСпискаПользователейДиспетчеризации = 1);
	
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элементы.КалендарьТабличныйДокумент.Редактирование = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.КалендарьТабличныйДокумент.Редактирование = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Элементы.КалендарьТабличныйДокумент.Редактирование = Ложь;
	
	// Перетаскивается область календаря.
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ТабличныйДокумент") Или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		#Если ВебКлиент Тогда
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ПараметрыПеретаскивания.Значение];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		#Иначе
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ПараметрыПеретаскивания.Значение.Область(1, 1, ПараметрыПеретаскивания.Значение.ВысотаТаблицы, ПараметрыПеретаскивания.Значение.ШиринаТаблицы).Расшифровка];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		#КонецЕсли
		
		Если РасшифровкаЗначение <> Неопределено И ЗначениеЗаполнено(РасшифровкаЗначение.Событие) Тогда
			Если ТипЗнч(РасшифровкаЗначение.Событие) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
				РанееСозданаяЗадача = СобытиеУжеПринятоКИсполнению(РасшифровкаЗначение.Событие);
				Если НЕ РанееСозданаяЗадача = Неопределено Тогда
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Событие уже принято к исполнению:'"), 
						ПолучитьНавигационнуюСсылку(РанееСозданаяЗадача),
						Строка(РанееСозданаяЗадача),
						БиблиотекаКартинок.Информация32);
				Иначе
					НоваяЗадача = СоздатьЗадачуНаОснованииСобытия(РасшифровкаЗначение.Событие, Истина);
					РазвернутьСписокЗадач();
					Если ЗначениеЗаполнено(НоваяЗадача) Тогда
						УстановитьТекущуюСтрокуВСпискеЗадач(НоваяЗадача);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяЗадача = СоздатьЗадачуНаОснованииСобытия(РасшифровкаЗначение.Событие, Истина);
				РазвернутьСписокЗадач();
				Если ЗначениеЗаполнено(НоваяЗадача) Тогда
					УстановитьТекущуюСтрокуВСпискеЗадач(НоваяЗадача);
				КонецЕсли;
			КонецЕсли;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		КонецЕсли;
		
	Иначе
		Если Строка <> Неопределено Тогда
			СтрокаДерева = ДеревоСписокЗадач.НайтиПоИдентификатору(Строка);
			МассивРодителей = Новый Массив();
			ТекРодитель = СтрокаДерева.ПолучитьРодителя();
			ТекРодительГруппа = Неопределено;
			бПеретаскиваниеВГруппу = СтрокаДерева.ЭтоГруппа;
			Пока ТекРодитель <> Неопределено Цикл
				Если ТекРодитель.ЭтоГруппа Тогда
					ТекРодительГруппа = ТекРодитель;
				КонецЕсли;
				Если Не бПеретаскиваниеВГруппу Тогда
					бПеретаскиваниеВГруппу = ТекРодитель.ЭтоГруппа;
				КонецЕсли;
				МассивРодителей.Добавить(ТекРодитель.ПолучитьИдентификатор());
				ТекРодитель = ТекРодитель.ПолучитьРодителя();
			КонецЦикла;
			Если СтрокаДерева <> Неопределено И (СтрокаДерева.Личная Или СтрокаДерева.ЭтоГруппа Или бПеретаскиваниеВГруппу) Тогда
				бМассивЗадачКорректный = Истина;
				Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
					Если ТипЗнч(ЭлементМассива) <> Тип("Число") Тогда
						бМассивЗадачКорректный = Ложь;
						Прервать;
					КонецЕсли;
					Если МассивРодителей.Найти(ЭлементМассива) <> Неопределено Тогда
						// Проверка на перетаскивание внутрь собственной иерархии.
						бМассивЗадачКорректный = Ложь;
						Прервать;
					КонецЕсли;
					ПеретаскиваемаяСтрока = ДеревоСписокЗадач.НайтиПоИдентификатору(ЭлементМассива);
					Если ПеретаскиваемаяСтрока = Неопределено Или (Не ПеретаскиваемаяСтрока.Личная И Не бПеретаскиваниеВГруппу) Тогда
						бМассивЗадачКорректный = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если бМассивЗадачКорректный Тогда
					ТекДанныеСтрока = ДеревоСписокЗадач.НайтиПоИдентификатору(Строка);
					ТекПартнер = ТекДанныеСтрока.Партнер;
					ТекПроект = ТекДанныеСтрока.Проект;
					бЗадаватьВопросПерезаписатьПроектПартнер = Ложь;
					
					ТекИмяГруппировки = Неопределено;
					ТекЗначениеГруппировки = Неопределено;
					Если ТекДанныеСтрока.ЭтоГруппа Тогда
						ТекДанныеЗадачаСсылка = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
						ТекИмяГруппировки = ТекДанныеСтрока.ИмяГруппировки;
						ТекЗначениеГруппировки = ТекДанныеСтрока.ЗначениеГруппировки;
					Иначе
						ТекДанныеЗадачаСсылка = ТекДанныеСтрока.Ссылка;
						
						Если ТекРодительГруппа <> Неопределено Тогда
							ТекИмяГруппировки = ТекРодительГруппа.ИмяГруппировки;
							ТекЗначениеГруппировки = ТекРодительГруппа.ЗначениеГруппировки;
						КонецЕсли;
					КонецЕсли;
					
					МассивЗадач = Новый Массив();
					Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
						ТекДанные = ДеревоСписокЗадач.НайтиПоИдентификатору(ЭлементМассива);
						Если Не ТекДанныеСтрока.ЭтоГруппа И ТекДанные.Личная Тогда
							Если ЗначениеЗаполнено(ТекПроект) Или ЗначениеЗаполнено(ТекПартнер) Тогда
								Если	(ЗначениеЗаполнено(ТекДанные.Проект) И ТекДанные.Проект <> ТекПроект)
									Или	(ЗначениеЗаполнено(ТекДанные.Партнер) И ТекДанные.Партнер <> ТекПартнер) Тогда
									//
									бЗадаватьВопросПерезаписатьПроектПартнер = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						МассивЗадач.Добавить(ТекДанные.Ссылка);
					КонецЦикла;
					СтруктураПараметрыГруппировки = Новый Структура();
					Если ЗначениеЗаполнено(ТекИмяГруппировки) И ЗначениеЗаполнено(ТекЗначениеГруппировки) Тогда
						Попытка СтруктураПараметрыГруппировки.Вставить(ТекИмяГруппировки, ТекЗначениеГруппировки);
						Исключение КонецПопытки;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекПроект) Или ЗначениеЗаполнено(ТекПартнер) Тогда
						Если бЗадаватьВопросПерезаписатьПроектПартнер Тогда
							ОписаниеОповещения = Новый ОписаниеОповещения("СписокЗадачПеретаскиваниеЗавершение", ЭтотОбъект, 
								Новый Структура("МассивЗадач, ТекДанныеЗадачаСсылка, ТекПартнер, ТекПроект, СтруктураПараметрыГруппировки",
												МассивЗадач, ТекДанныеЗадачаСсылка, ТекПартнер, ТекПроект, СтруктураПараметрыГруппировки));
							ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Связать задачу с проектом и клиентом родительской задачи?'"), РежимДиалогаВопрос.ДаНетОтмена);
							Возврат;
						Иначе
							НазначитьРодителяИРеквизитыЗадачам(МассивЗадач, ТекДанныеЗадачаСсылка, ТекПартнер, ТекПроект, СтруктураПараметрыГруппировки);
						КонецЕсли;
					Иначе
						НазначитьРодителяИРеквизитыЗадачам(МассивЗадач, ТекДанныеЗадачаСсылка,,, СтруктураПараметрыГруппировки);
					КонецЕсли;
					ОбновитьСписокЗадачНаКлиенте();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПеретаскиваниеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НазначитьРодителяИРеквизитыЗадачам(ДополнительныеПараметры.МассивЗадач, ДополнительныеПараметры.ТекДанныеЗадачаСсылка, ДополнительныеПараметры.ТекПартнер, ДополнительныеПараметры.ТекПроект, ДополнительныеПараметры.СтруктураПараметрыГруппировки);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		НазначитьРодителяИРеквизитыЗадачам(ДополнительныеПараметры.МассивЗадач, ДополнительныеПараметры.ТекДанныеЗадачаСсылка,,, ДополнительныеПараметры.ДополнительныеПараметры.СтруктураПараметрыГруппировки);
	КонецЕсли;
	ОбновитьСписокЗадачНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	бРазрешитьПеретаскивание = Ложь;
	// Перетаскивается область календаря.
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ТабличныйДокумент") Или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		#Если ВебКлиент Тогда
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ПараметрыПеретаскивания.Значение];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		#Иначе
		Попытка		РасшифровкаЗначение = ТаблицаРасшифровок[ПараметрыПеретаскивания.Значение.Область(1, 1, ПараметрыПеретаскивания.Значение.ВысотаТаблицы, ПараметрыПеретаскивания.Значение.ШиринаТаблицы).Расшифровка];
		Исключение	РасшифровкаЗначение = Неопределено;
		КонецПопытки;
		#КонецЕсли
		
		бРазрешитьПеретаскивание = ДляСобытияРазрешеноПеретаскиваниеВСписокЗадач(РасшифровкаЗначение);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Если Строка <> Неопределено Тогда
			СтрокаДерева = ДеревоСписокЗадач.НайтиПоИдентификатору(Строка);
			МассивРодителей = Новый Массив();
			ТекРодитель = СтрокаДерева.ПолучитьРодителя();
			бПеретаскиваниеВГруппу = СтрокаДерева.ЭтоГруппа;
			Пока ТекРодитель <> Неопределено Цикл
				МассивРодителей.Добавить(ТекРодитель.ПолучитьИдентификатор());
				Если Не бПеретаскиваниеВГруппу Тогда
					бПеретаскиваниеВГруппу = ТекРодитель.ЭтоГруппа;
				КонецЕсли;
				ТекРодитель = ТекРодитель.ПолучитьРодителя();
			КонецЦикла;
			Если СтрокаДерева <> Неопределено И (СтрокаДерева.Личная Или СтрокаДерева.ЭтоГруппа Или бПеретаскиваниеВГруппу) Тогда
				бМассивЗадачКорректный = Истина;
				Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
					Если ТипЗнч(ЭлементМассива) <> Тип("Число") Тогда
						бМассивЗадачКорректный = Ложь;
						Прервать;
					КонецЕсли;
					Если МассивРодителей.Найти(ЭлементМассива) <> Неопределено Тогда
						// Проверка на перетаскивание внутрь собственной иерархии.
						бМассивЗадачКорректный = Ложь;
						Прервать;
					КонецЕсли;
					ПеретаскиваемаяСтрока = ДеревоСписокЗадач.НайтиПоИдентификатору(ЭлементМассива);
					Если ПеретаскиваемаяСтрока = Неопределено Или (Не ПеретаскиваемаяСтрока.Личная И Не бПеретаскиваниеВГруппу) Тогда
						бМассивЗадачКорректный = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если бМассивЗадачКорректный Тогда
					бРазрешитьПеретаскивание = Истина;
					Если СтрокаДерева.ЭтоГруппа И Не ЗначениеЗаполнено(СтрокаДерева.ИмяГруппировки) Тогда
						бРазрешитьПеретаскивание = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если бРазрешитьПеретаскивание Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыполненаПриИзменении(Элемент)
	ТекСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	СтрокаДерева = ДеревоСписокЗадач.НайтиПоИдентификатору(ТекСтрока);
	Если СтрокаДерева = Неопределено Или СтрокаДерева.ЭтоГруппа Или Не СтрокаДерева.Личная Тогда Возврат; КонецЕсли;
	
	ВыполнитьЗадачу(СтрокаДерева.Ссылка, СтрокаДерева.Выполнена,, Истина);
	
	РазвернутьСписокЗадач();
	
	УстановитьТекущуюСтрокуВСпискеЗадач(СтрокаДерева.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ТемаЛичнойЗадачиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ТемаЛичнойЗадачи) Тогда
		СоздатьЛичнуюЗадачу(ТемаЛичнойЗадачи, Ложь);
		ТемаЛичнойЗадачи = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчеризацияСписокСобытийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элементы.КалендарьТабличныйДокумент.Редактирование = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура КомандаОбновитьСписокЗадач(Команда)
	ОбновитьСписокЗадачНаКлиенте();
КонецПроцедуры

///////////////////////////////////////////////////////
// Перенос задач

&НаКлиенте
Процедура ПеренестиЗадачуНаСегодня(Команда)
	ПеренестиЗадачиНаКлиенте("ПеренестиНаСегодня");
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуВИерархию(Команда)
	
	МассивСтруктурЗадач = Новый Массив();
	бЕстьНеЛичныеЗадачи = Ложь;
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоСписокЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если СтрокаДерева <> Неопределено И Не СтрокаДерева.ЭтоГруппа Тогда
			Если Не СтрокаДерева.Личная Тогда
				бЕстьНеЛичныеЗадачи = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				МассивСтруктурЗадач.Добавить(Новый Структура("Ссылка,Партнер,Проект", СтрокаДерева.Ссылка, СтрокаДерева.Партнер, СтрокаДерева.Проект));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтруктурЗадач.Количество() = 0 Тогда
		Если бЕстьНеЛичныеЗадачи Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Переносить в иерархию можно только личные задачи!'"), 10);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", СписокЗадач.Отбор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиЗадачуВИерархиюПродолжение", ЭтотОбъект, МассивСтруктурЗадач);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.CRM_Календарь.Форма.ФормаВыбораЛичнойЗадачи", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуВИерархиюПродолжение(ВыбранноеЗначение, МассивСтруктурЗадач) Экспорт
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		МассивЗадач = Новый Массив();
		
		ТекПартнер = ВыбранноеЗначение.Партнер;
		ТекПроект = ВыбранноеЗначение.Проект;
		бЗадаватьВопросПерезаписатьПроектПартнер = Ложь;
		
		Для Каждого ЭлементМассива Из МассивСтруктурЗадач Цикл
			Если ЗначениеЗаполнено(ТекПроект) Или ЗначениеЗаполнено(ТекПартнер) Тогда
				Если	(ЗначениеЗаполнено(ЭлементМассива.Проект) И ЭлементМассива.Проект <> ТекПроект)
					Или	(ЗначениеЗаполнено(ЭлементМассива.Партнер) И ЭлементМассива.Партнер <> ТекПартнер) Тогда
					//
					бЗадаватьВопросПерезаписатьПроектПартнер = Истина;
				КонецЕсли;
			КонецЕсли;
			МассивЗадач.Добавить(ЭлементМассива.Ссылка);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекПроект) Или ЗначениеЗаполнено(ТекПартнер) Тогда
			Если бЗадаватьВопросПерезаписатьПроектПартнер Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиЗадачуВИерархиюЗавершение", ЭтотОбъект, Новый Структура("МассивЗадач, Ссылка, ТекПартнер, ТекПроект", МассивЗадач, ВыбранноеЗначение.Ссылка, ТекПартнер, ТекПроект));
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Связать задачу с проектом и клиентом родительской задачи?'"), РежимДиалогаВопрос.ДаНетОтмена);
			Иначе
				ПеренестиЗадачиВИерархииНаКлиенте(МассивЗадач, ВыбранноеЗначение.Ссылка, ТекПартнер, ТекПроект);
			КонецЕсли;
		Иначе
			ПеренестиЗадачиВИерархииНаКлиенте(МассивЗадач, ВыбранноеЗначение.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуВИерархиюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПеренестиЗадачиВИерархииНаКлиенте(ДополнительныеПараметры.МассивЗадач, ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ТекПартнер, ДополнительныеПараметры.ТекПроект);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ПеренестиЗадачиВИерархииНаКлиенте(ДополнительныеПараметры.МассивЗадач, ДополнительныеПараметры.ВыбранноеЗначение.Ссылка);
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуНаЗавтра(Команда)
	ПеренестиЗадачиНаКлиенте("ПеренестиНаЗавтра");
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуНа3Дня(Команда)
	ПеренестиЗадачиНаКлиенте("ПеренестиНа3Дня");
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуНаНеделю(Команда)
	ПеренестиЗадачиНаКлиенте("ПеренестиНаНеделю");
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуНаДату(Команда)
	ДатаПереноса = ТекущаяДата();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиЗадачуНаДатуЗавершение", ЭтотОбъект);
	ПоказатьВводДаты(ОписаниеОповещения, ДатаПереноса, НСтр("ru = 'Перенести на дату'"), ЧастиДаты.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуНаДатуЗавершение(ДатаПереноса, ДополнительныеПараметры) Экспорт
	Если ДатаПереноса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиЗадачиНаКлиенте("ПеренестиНаДату", ДатаПереноса);
КонецПроцедуры

//
///////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыполнитьГруппуЗадач(Команда)
	МассивЗадач = ПолучитьМассивВыделенныхЗадач(Истина);
	Если МассивЗадач.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ВыполнитьЛичныеЗадачиСПодчиненными(МассивЗадач);
	
	Оповестить("Запись_ЗадачаИсполнителя", Новый Структура("Выполнена, ОбновлятьКалендарь", Истина, 1), МассивЗадач);
	
	РазвернутьСписокЗадач();
	УстановитьТекущуюСтрокуВСпискеЗадач(МассивЗадач[0]);
КонецПроцедуры

&НаСервере
Процедура КомандаВидСпискаЗадачСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
	
	Если Элементы.ГруппаСписокЗадач.Видимость Тогда
		ОбновитьСписокЗадачНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСписокЗадач(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСписокЗадачКлиент();
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаВидСписокЗадачЗавершение", ЭтотОбъект, СвойстваДинамическогоСписка);
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтотОбъект, СвойстваДинамическогоСписка, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСписокЗадачЗавершение(ПризнакИзмененыНастройки, СвойстваДинамическогоСписка) Экспорт

	ТекСтрока = Элементы.СписокЗадач.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		ТекСсылкаЗадача = Неопределено;
	Иначе
		ТекДанные = ДеревоСписокЗадач.НайтиПоИдентификатору(ТекСтрока);
		Если ТекДанные = Неопределено Или ТекДанные.ЭтоГруппа Тогда
			ТекСсылкаЗадача = Неопределено;
		Иначе
			ТекСсылкаЗадача = ТекДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	КомандаВидСпискаЗадачСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
	
	РазвернутьСписокЗадач();
	Если ЗначениеЗаполнено(ТекСсылкаЗадача) Тогда
		УстановитьТекущуюСтрокуВСпискеЗадач(ТекСсылкаЗадача);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КомандаВидСпискаСобытийДиспетчеризацииСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСписокСобытийДиспетчеризации(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСписокСобытийДиспетчеризацииКлиент();
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаВидСпискаЗавершение", ЭтотОбъект, СвойстваДинамическогоСписка);
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтотОбъект, СвойстваДинамическогоСписка, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Процедура КомандаВидСписокПользователейДиспетчеризацияСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСписокПользователейДиспетчеризация(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСписокПользователейДиспетчеризацияКлиент();
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаВидСпискаЗавершение", ЭтотОбъект, СвойстваДинамическогоСписка);
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтотОбъект, СвойстваДинамическогоСписка, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСпискаЗавершение(ПризнакИзмененыНастройки, СвойстваДинамическогоСписка) Экспорт
	КомандаВидСписокПользователейДиспетчеризацияСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСледующуюПредыдущуюДатуСписок(ПолучитьПредыдущийПериод, Знач ПериодНачало = Неопределено, Знач ПериодОкончание = Неопределено)
	Если ПериодНачало = Неопределено Тогда
		ПериодНачало = КалендарьСписокПериодНачало;
	КонецЕсли;
	
	Если ПериодОкончание = Неопределено Тогда
		ПериодОкончание = КалендарьСписокПериодОкончание;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура("ПериодНачало,ПериодОкончание", ПериодНачало, ПериодОкончание);
	
	бНеделя		= (Прав(КалендарьСписокВыбранныйПредопределенныйПериод, 6)	= "Неделя");
	бМесяц		= (Прав(КалендарьСписокВыбранныйПредопределенныйПериод, 5)	= "Месяц");
	бКвартал	= (Прав(КалендарьСписокВыбранныйПредопределенныйПериод, 7)	= "Квартал");
	бГод		= (Прав(КалендарьСписокВыбранныйПредопределенныйПериод, 3)	= "Год");
	
	Если бНеделя Тогда
		Если ПолучитьПредыдущийПериод Тогда
			СтруктураРезультат.ПериодНачало		= НачалоНедели(НачалоНедели(СтруктураРезультат.ПериодНачало) - 1);
			СтруктураРезультат.ПериодОкончание	= КонецНедели(СтруктураРезультат.ПериодНачало);
		Иначе
			СтруктураРезультат.ПериодНачало		= НачалоНедели(КонецНедели(СтруктураРезультат.ПериодНачало) + 1);
			СтруктураРезультат.ПериодОкончание	= КонецНедели(СтруктураРезультат.ПериодНачало);
		КонецЕсли;
		
	ИначеЕсли бМесяц Тогда
		Если ПолучитьПредыдущийПериод Тогда
			СтруктураРезультат.ПериодНачало		= НачалоМесяца(НачалоМесяца(СтруктураРезультат.ПериодНачало) - 1);
			СтруктураРезультат.ПериодОкончание	= КонецМесяца(СтруктураРезультат.ПериодНачало);
		Иначе
			СтруктураРезультат.ПериодНачало		= НачалоМесяца(КонецМесяца(СтруктураРезультат.ПериодНачало) + 1);
			СтруктураРезультат.ПериодОкончание	= КонецМесяца(СтруктураРезультат.ПериодНачало);
		КонецЕсли;
		
	ИначеЕсли бКвартал Тогда
		Если ПолучитьПредыдущийПериод Тогда
			СтруктураРезультат.ПериодНачало		= НачалоКвартала(НачалоКвартала(СтруктураРезультат.ПериодНачало) - 1);
			СтруктураРезультат.ПериодОкончание	= КонецКвартала(СтруктураРезультат.ПериодНачало);
		Иначе
			СтруктураРезультат.ПериодНачало		= НачалоКвартала(КонецКвартала(СтруктураРезультат.ПериодНачало) + 1);
			СтруктураРезультат.ПериодОкончание	= КонецКвартала(СтруктураРезультат.ПериодНачало);
		КонецЕсли;
		
	ИначеЕсли бГод Тогда
		Если ПолучитьПредыдущийПериод Тогда
			СтруктураРезультат.ПериодНачало		= НачалоГода(НачалоГода(СтруктураРезультат.ПериодНачало) - 1);
			СтруктураРезультат.ПериодОкончание	= КонецГода(СтруктураРезультат.ПериодНачало);
		Иначе
			СтруктураРезультат.ПериодНачало		= НачалоГода(КонецГода(СтруктураРезультат.ПериодНачало) + 1);
			СтруктураРезультат.ПериодОкончание	= КонецГода(СтруктураРезультат.ПериодНачало);
		КонецЕсли;
		
	Иначе
		Если ПолучитьПредыдущийПериод Тогда
			ДобавитьПериодВСекундах = КонецДня(СтруктураРезультат.ПериодОкончание) - НачалоДня(СтруктураРезультат.ПериодНачало);
			
			СтруктураРезультат.ПериодОкончание	= КонецДня(НачалоДня(СтруктураРезультат.ПериодНачало) - 1);
			СтруктураРезультат.ПериодНачало		= НачалоДня(НачалоДня(СтруктураРезультат.ПериодНачало) - 1 - ДобавитьПериодВСекундах);
		Иначе
			ДобавитьПериодВСекундах = КонецДня(СтруктураРезультат.ПериодОкончание) - НачалоДня(СтруктураРезультат.ПериодНачало);
			
			СтруктураРезультат.ПериодНачало		= НачалоДня(КонецДня(СтруктураРезультат.ПериодОкончание) + 1);
			СтруктураРезультат.ПериодОкончание	= КонецДня(НачалоДня(СтруктураРезультат.ПериодНачало) + ДобавитьПериодВСекундах);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Процедура КомандаКалендарьВперед(Команда)
	Если Объект.ТекущееОтображение = "День" Или Объект.ТекущееОтображение = "ПоРесурсам" Или Объект.ТекущееОтображение = "Расписание" Или Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
		Объект.ДатаКалендаря = НачалоДня(Объект.ДатаКалендаря + 24 * 60 * 60);
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
	ИначеЕсли Объект.ТекущееОтображение = "Неделя" Тогда
		Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
		Объект.ДатаКалендаря = НачалоНедели(Объект.ДатаКалендаря + 7 * 24 * 60 * 60);
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
		ДатаКалендаряВыделитьНеделю();
	ИначеЕсли Объект.ТекущееОтображение = "Месяц" Тогда
		ТекущиеДанные = Элементы.СписокВыборМесяца.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекущийВыделенныйМесяц = СписокВыборМесяца[0].Значение;
		Иначе
			ТекущийВыделенныйМесяц = ТекущиеДанные.Значение;
		КонецЕсли;
		СледующийВыделенныйМесяц = ДобавитьМесяц(ТекущийВыделенныйМесяц, 1);
		
		ВыделитьМесяцВСписке(СледующийВыделенныйМесяц);
	ИначеЕсли Объект.ТекущееОтображение = "Список" Тогда
		СледующийПериод = ПолучитьСледующуюПредыдущуюДатуСписок(Ложь);
		КалендарьСписокПериодНачало		= СледующийПериод.ПериодНачало;
		КалендарьСписокПериодОкончание	= СледующийПериод.ПериодОкончание;
		
		СинхронизироватьСписокПериодНачалоПериодОкончаниеИПредопределенныйПериод();
	КонецЕсли;
	
	КалендарьОбновитьКлиент();
	Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Множественный;
	Если Объект.ТекущееОтображение = "Неделя" Тогда
		ДатаКалендаряВыделитьНеделю();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаКалендарьНазад(Команда)
	Если Объект.ТекущееОтображение = "День" Или Объект.ТекущееОтображение = "ПоРесурсам" Или Объект.ТекущееОтображение = "Расписание" Или Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
		Объект.ДатаКалендаря = НачалоДня(Объект.ДатаКалендаря - 24 * 60 * 60);
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
	ИначеЕсли Объект.ТекущееОтображение = "Неделя" Тогда
		Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
		Объект.ДатаКалендаря = НачалоНедели(Объект.ДатаКалендаря - 7 * 24 * 60 * 60);
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
		ДатаКалендаряВыделитьНеделю();
	ИначеЕсли Объект.ТекущееОтображение = "Месяц" Тогда
		ТекущиеДанные = Элементы.СписокВыборМесяца.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекущийВыделенныйМесяц = СписокВыборМесяца[0].Значение;
		Иначе
			ТекущийВыделенныйМесяц = ТекущиеДанные.Значение;
		КонецЕсли;
		ПредыдущийВыделенныйМесяц = ДобавитьМесяц(ТекущийВыделенныйМесяц, -1);
		
		ВыделитьМесяцВСписке(ПредыдущийВыделенныйМесяц);
	ИначеЕсли Объект.ТекущееОтображение = "Список" Тогда
		ПредыдущийПериод = ПолучитьСледующуюПредыдущуюДатуСписок(Истина);
		КалендарьСписокПериодНачало		= ПредыдущийПериод.ПериодНачало;
		КалендарьСписокПериодОкончание	= ПредыдущийПериод.ПериодОкончание;
		
		СинхронизироватьСписокПериодНачалоПериодОкончаниеИПредопределенныйПериод();
	КонецЕсли;
	
	КалендарьОбновитьКлиент();
	Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Множественный;
	Если Объект.ТекущееОтображение = "Неделя" Тогда
		ДатаКалендаряВыделитьНеделю();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаКалендарьОбновить(Команда)
	Если Объект.ТекущееОтображение = "Список" Тогда
		ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
	КонецЕсли;
	КалендарьОбновитьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КомандаКалендарьСегодня(Команда)
	Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Одиночный;
	Объект.ДатаКалендаря = НачалоДня(ТекущаяДата());
	Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
	Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(Объект.ДатаКалендаря);
	
	Если Объект.ТекущееОтображение = "День" Тогда
		
	ИначеЕсли Объект.ТекущееОтображение = "Неделя" Тогда
		ДатаКалендаряВыделитьНеделю();
	ИначеЕсли Объект.ТекущееОтображение = "Месяц" Тогда
		ВыделитьМесяцВСписке();
	ИначеЕсли Объект.ТекущееОтображение = "ПоРесурсам" Тогда
		
	ИначеЕсли Объект.ТекущееОтображение = "Расписание" Тогда
		
	ИначеЕсли Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		
	ИначеЕсли Объект.ТекущееОтображение = "Список" Тогда
		КалендарьСписокПериодНачало		= НачалоДня(Объект.ДатаКалендаря);
		КалендарьСписокПериодОкончание	= КонецДня(КалендарьСписокПериодНачало);
		СинхронизироватьСписокПериодНачалоПериодОкончаниеИПредопределенныйПериод();
	КонецЕсли;
	
	КалендарьОбновитьКлиент();
	
	Элементы.ДатаКалендаря.РежимВыделения = РежимВыделенияДаты.Множественный;
	Если Объект.ТекущееОтображение = "Неделя" Тогда
		ДатаКалендаряВыделитьНеделю();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаТекущееОтображениеСписок(Команда)
	Если Объект.ТекущееОтображение = "Список" Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТекущееОтображение = "Список";
	
	ПриСменеТекущегоОтображенияОбщее();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТекущееОтображениеДиспетчеризация(Команда)
	Если Объект.ТекущееОтображение = "Диспетчеризация" Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТекущееОтображение = "Диспетчеризация";
	
	ПриСменеТекущегоОтображенияОбщее();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТекущееОтображениеДень(Команда)
	Если Объект.ТекущееОтображение = "День" Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТекущееОтображение = "День";
	
	ПриСменеТекущегоОтображенияОбщее();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТекущееОтображениеНеделя(Команда)
	Если Объект.ТекущееОтображение = "Неделя" Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТекущееОтображение = "Неделя";
	
	ПриСменеТекущегоОтображенияОбщее();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТекущееОтображениеМесяц(Команда)
	Если Объект.ТекущееОтображение = "Месяц" Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТекущееОтображение = "Месяц";
	
	ПриСменеТекущегоОтображенияОбщее();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТекущееОтображениеПоРесурсам(Команда)
	Если Объект.ТекущееОтображение = "ПоРесурсам" Или Объект.ТекущееОтображение = "Расписание" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоРесурсамШкалаВремениПоГоризонтали = 0 Тогда
		Объект.ТекущееОтображение = "ПоРесурсам";
	Иначе
		Объект.ТекущееОтображение = "Расписание";
	КонецЕсли;
	ПриСменеТекущегоОтображенияОбщее();
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройки(Команда)
	МассивДат = Новый Массив();
	Для Каждого ВыделеннаяДата Из Элементы.ДатаКалендаря.ВыделенныеДаты Цикл
		МассивДат.Добавить(ВыделеннаяДата);
	КонецЦикла;
	// Т.к. настройки показа списка задач продублированы в форме, то их подставляем в кэш настроек объекта перед открытием
	// формы настройки.
	Объект.КэшНастроекОтображения.ОбщиеНастройки.ОтображатьСписокЗадач = Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка;
	//
	Параметрыформы = Новый Структура("ТекущиеНастройки,НастройкиПоУмолчанию", Объект.КэшНастроекОтображения, ПолучитьНастройкиОтображенияПоУмолчанию());
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкиЗавершение", ЭтотОбъект, МассивДат);
	ОткрытьФорму(МетаданныеПуть + ".Форма.Настройки", Параметрыформы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиЗавершение(Результат, МассивДат) Экспорт
	Если Результат = Истина Тогда
		ЗагрузитьНастройкиКалендаря();
		НастроитьВидимостьИДоступностьФормы();
		НастроитьПоложениеСпискаЗадач();
		Если Объект.ТекущееОтображение = "Неделя" Тогда
			ДатаКалендаряВыделитьНеделю();
		КонецЕсли;
		
		Если Элементы.ГруппаСписокЗадач.Видимость Тогда
			Если ЗначениеЗаполнено(ПользовательскиеНастройкиСпискаТекущаяНастройкаСписокЗадач) Тогда
				СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСписокЗадачКлиент();
				CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, Ложь);
				
			КонецЕсли;
			
			ОбновитьСписокЗадачНаКлиенте();
		КонецЕсли;
		
		НастройкиОбщие = ПолучитьНастройкиОбщиеКлиент();
		Если	НастройкиОбщие.Свойство("Автообновление") И НастройкиОбщие.Автообновление = Истина
			И	НастройкиОбщие.Свойство("ПериодАвтообновления") И ТипЗнч(НастройкиОбщие.ПериодАвтообновления) = Тип("Число") Тогда
			//
			Попытка ПодключитьОбработчикОжидания("Подключаемый_Автообновление", Макс(НастройкиОбщие.ПериодАвтообновления * 60, 60));
			Исключение КонецПопытки;
		Иначе
			Попытка ОтключитьОбработчикОжидания("Подключаемый_Автообновление");
			Исключение КонецПопытки;
		КонецЕсли;
		
		ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
		КалендарьОбновитьКлиент();
		
		Элементы.ДеревоРесурсов.Обновить();
		Элементы.ДеревоПользователейДиспетчеризации.Обновить();
		Элементы.СписокПользователейДиспетчеризация.Обновить();
		
	КонецЕсли;
	
	Если Объект.ТекущееОтображение <> "Неделя" Или Не Результат = Истина Тогда
		Элементы.ДатаКалендаря.ВыделенныеДаты.Очистить();
		Для Каждого ВыделеннаяДата Из МассивДат Цикл
			Элементы.ДатаКалендаря.ВыделенныеДаты.Добавить(ВыделеннаяДата);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаОтборов(Команда)
	Параметрыформы = Новый Структура("НастройкиПоУмолчанию", ПолучитьНастройкиОтборовПоУмолчанию());
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму(МетаданныеПуть + ".Форма.НастройкаОтборов", Параметрыформы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ВыбранныеОтборы = Результат.ВыбранныеОтборы;
		ПризнакПоказыватьРасширенныеНастройкиОтборовСтароеЗначение = ПризнакПоказыватьРасширенныеНастройкиОтборов;
		ПризнакПоказыватьРасширенныеНастройкиОтборов = Результат.ПризнакПоказыватьРасширенныеНастройкиОтборов;
		Если ПризнакПоказыватьРасширенныеНастройкиОтборов <> ПризнакПоказыватьРасширенныеНастройкиОтборовСтароеЗначение Тогда
			НастроитьВидимостьИДоступностьФормы();
		КонецЕсли;
		
		Если Не ПризнакПоказыватьРасширенныеНастройкиОтборов Тогда
			ДоступныеОтборы = ПолучитьМассивДоступныхОтборов();
			Для Каждого ДоступныйОтбор Из ДоступныеОтборы Цикл
				ИменаОтбора = ПолучитьИменаДляОтбора(ДоступныйОтбор);
				ЭлементОтбораВидСравнения = Элементы[ИменаОтбора.ИмяЭлементаВидСравнения];
				ОписаниеОтбора = ПолучитьОписаниеОтбораДляЭлемента(ЭлементОтбораВидСравнения, ЭтотОбъект);
				Если ОписаниеОтбора <> Неопределено Тогда
					ЭтотОбъект[ОписаниеОтбора.ИмяИсточникаДанныхВидСравнения] = ОписаниеОтбора.ВидСравненияПоУмолчанию;
					ОтборВидСравненияПриИзмененииОбщий(ЭлементОтбораВидСравнения, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КэшНастроекВыбранныеОтборы.ЗагрузитьЗначения(ВыбранныеОтборы);
		бБылиИзмененияВОтборах = Ложь;
		ПрименитьНастройкиЭлементовОтборов(бБылиИзмененияВОтборах);
		НастроитьВидимостьИДоступностьФормы();
		Если бБылиИзмененияВОтборах Тогда
			ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
			КалендарьОбновитьКлиент();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдалитьЭлементВДеревеРесурсов(ДобавитьГруппу = Ложь,
													Удалить = Ложь,
													ОткрытьВРежимеПодбора = Ложь,
													ОткрыватьДиалогВыбораЗначения = Истина,
													ДобавляемоеЗначение = Неопределено,
													ОбновлятьКалендарь = Истина)
	//
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекущиеДанные.ЭтоСистемнаяГруппа Тогда Возврат; КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Удалить И (ТекущийРодитель = Неопределено Или ТекущиеДанные.ЭтоЗаголовок) Тогда Возврат; КонецЕсли;
	
	Если Удалить Тогда
		Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоСистемнаяГруппа Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийРодитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		
		КалендарьОбновитьКлиент();
		Возврат;
	КонецЕсли;
	
	Если ТекущийРодитель = Неопределено Тогда
		Если ТекущиеДанные.ЭтоСистемнаяГруппа Тогда Возврат; КонецЕсли;
		
		ТекущийРодитель = ДеревоРесурсов;
		ТекущееИмяРесурса = ТекущиеДанные.Имя;
		ЭлементыДляДобавления = ТекущиеДанные.ПолучитьЭлементы();
	ИначеЕсли ТекущиеДанные.ЭтоГруппа Тогда
		ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
		Пока ТекРодитель <> Неопределено Цикл
			ТекущееИмяРесурса = ТекРодитель.Имя;
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
		ЭлементыДляДобавления = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		ТекРодитель = ТекущиеДанные.ПолучитьРодителя();
		Пока ТекРодитель <> Неопределено Цикл
			ТекущееИмяРесурса = ТекРодитель.Имя;
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
		ЭлементыДляДобавления = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;
	
	СтрокаОписание = "";
	ВыбранныйРесурсСсылка = Неопределено;
	ДополнительныеПараметры = Новый Структура("ДобавитьГруппу,
													|Удалить,
													|ОткрытьВРежимеПодбора,
													|ОткрыватьДиалогВыбораЗначения,
													|ДобавляемоеЗначение,
													|ОбновлятьКалендарь,
													|ЭлементыДляДобавления,
													|ТекущееИмяРесурса,
													|ТекущиеДанные",
													ДобавитьГруппу,
													Удалить,
													ОткрытьВРежимеПодбора,
													ОткрыватьДиалогВыбораЗначения,
													ДобавляемоеЗначение,
													ОбновлятьКалендарь,
													ЭлементыДляДобавления,
													ТекущееИмяРесурса,
													ТекущиеДанные);
	Если ДобавитьГруппу Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьУдалитьЭлементВДеревеРесурсовЗавершениеВводаСтроки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводСтроки(ОписаниеОповещения, СтрокаОписание, НСтр("ru = 'Название группы'"),, Ложь);
	Иначе
		Если ОткрыватьДиалогВыбораЗначения Тогда
			ПараметрыФормыВыбора = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе", Истина, Не ОткрытьВРежимеПодбора);
			
			Если ТекущееИмяРесурса = "Пользователь" Тогда
				ПараметрыФормыВыбора.Вставить("ВыбратьГруппуПользователей", Ложь);
				ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормыВыбора, Элементы.ДеревоРесурсов,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли ТекущееИмяРесурса = "Помещение" Тогда
				ОткрытьФорму("Справочник.CRM_Помещения.ФормаВыбора", ПараметрыФормыВыбора, Элементы.ДеревоРесурсов,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдалитьЭлементВДеревеРесурсовЗавершениеВводаСтроки(ВведеннаяСтрока, ДополнительныеПараметры) Экспорт
	Если ВведеннаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	НоваяСтрока = ДополнительныеПараметры.ЭлементыДляДобавления.Добавить();
	НоваяСтрока.Имя = ДополнительныеПараметры.ТекущееИмяРесурса;
	НоваяСтрока.ЭтоЗаголовок = Ложь;
		
	НоваяСтрока.Описание = ВведеннаяСтрока;
	НоваяСтрока.ЭтоГруппа = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовДобавитьГруппу(Команда)
	ДобавитьУдалитьЭлементВДеревеРесурсов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовИзменитьГруппу(Команда)
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоЗаголовок Тогда Возврат; КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоГруппа Тогда Возврат; КонецЕсли;
	
	ВведеннаяСтрока = ТекущиеДанные.Описание;
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаДеревоРесурсовИзменитьГруппуЗавершение", ЭтотОбъект, ТекущиеДанные);
	ПоказатьВводСтроки(ОписаниеОповещения, ВведеннаяСтрока, НСтр("ru = 'Название группы'"),, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовИзменитьГруппуЗавершение(ВведеннаяСтрока, ТекущиеДанные) Экспорт
	Если ЗначениеЗаполнено(ВведеннаяСтрока) Тогда
		ТекущиеДанные.Описание = ВведеннаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовДобавитьЭлемент(Команда)
	ДобавитьУдалитьЭлементВДеревеРесурсов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовПодборЭлементов(Команда)
	ДобавитьУдалитьЭлементВДеревеРесурсов(Ложь, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовУдалитьЭлемент(Команда)
	ДобавитьУдалитьЭлементВДеревеРесурсов(, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовПереместитьВверх(Команда)
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоСистемнаяГруппа Тогда Возврат; КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоРесурсов;
	КонецЕсли;
	
	ТекущийРодительЭлементы = ТекущийРодитель.ПолучитьЭлементы();
	
	ТекущийИндекс = ТекущийРодительЭлементы.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.ЭтоЗаголовок Тогда
		Попытка
			ДеревоРесурсовЭлементы = ДеревоРесурсов.ПолучитьЭлементы();
			Если ДеревоРесурсовЭлементы[ТекущийИндекс - 1].ЭтоСистемнаяГруппа Тогда
				Возврат;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТекущийИндекс > 0 Тогда
		ТекущийРодительЭлементы.Сдвинуть(ТекущийИндекс, -1);
		КалендарьОбновитьКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоРесурсовПереместитьВниз(Команда)
	ТекущиеДанные = Элементы.ДеревоРесурсов.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоСистемнаяГруппа Тогда Возврат; КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоРесурсов;
	КонецЕсли;
	
	ТекущийРодительЭлементы = ТекущийРодитель.ПолучитьЭлементы();
	
	ТекущийИндекс = ТекущийРодительЭлементы.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.ЭтоЗаголовок Тогда
		Попытка
			ДеревоРесурсовЭлементы = ДеревоРесурсов.ПолучитьЭлементы();
			Если ДеревоРесурсовЭлементы[ТекущийИндекс] = ДеревоРесурсовЭлементы[ДеревоРесурсовЭлементы.Количество() - 1] Тогда
				Возврат;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТекущийИндекс <> -1 И ТекущийИндекс < ТекущийРодительЭлементы.Количество() - 1 Тогда
		ТекущийРодительЭлементы.Сдвинуть(ТекущийИндекс, 1);
		
		КалендарьОбновитьКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗадачСоздатьЗадачу(Команда)
	СоздатьЛичнуюЗадачу();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗадачСоздатьПоручение(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВводПорученияИзКалендаря");
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", СтруктураПараметров);
		
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗадачПринятьКИсполнению(Команда)
	МассивЗадачНепригодныхДляГрупповойОбработки = Новый Массив();
	
	МассивВыделенныхЗадач = ПолучитьМассивВыделенныхЗадач();
	
	МассивЗадач = ПолучитьМассивЗадачДляГрупповойОбработки(МассивВыделенныхЗадач, Ложь, Истина, МассивЗадачНепригодныхДляГрупповойОбработки);
	
	Если МассивЗадач.Количество() > 0 Тогда
		БизнесПроцессыИЗадачиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач);
	КонецЕсли;
	
	Если МассивЗадачНепригодныхДляГрупповойОбработки.Количество() > 0 Тогда
		СообщениеОНевозможностиГрупповойОбработкиЗадач(МассивЗадачНепригодныхДляГрупповойОбработки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьМассивПодчиненныхЗадач(ТекЭлементыДерева, МассивЗадач)
	Для Каждого ЭлементДерева Из ТекЭлементыДерева Цикл
		Если МассивЗадач.Найти(ЭлементДерева.Ссылка) = Неопределено Тогда
			МассивЗадач.Добавить(ЭлементДерева.Ссылка);
		КонецЕсли;
		
		ПодчЭлементы = ЭлементДерева.ПолучитьЭлементы();
		Если ПодчЭлементы.Количество() > 0 Тогда
			СформироватьМассивПодчиненныхЗадач(ПодчЭлементы, МассивЗадач);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуИерархииТекущейЗадачи(МассивИдентификаторовСтрок, МассивЗадачВИерархии)
	МассивТаблиц = Новый Массив();
	
	Для Каждого ИдСтроки Из МассивИдентификаторовСтрок Цикл
		ТекДанные = ДеревоСписокЗадач.НайтиПоИдентификатору(ИдСтроки);
		Если ТекДанные = Неопределено Или ТекДанные.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		КорневаяЗанача = ТекДанные.Ссылка;
		
		МассивЗадачВИерархии.Добавить(КорневаяЗанача);
		СформироватьМассивПодчиненныхЗадач(ТекДанные.ПолучитьЭлементы(), МассивЗадачВИерархии);
		
		Если ЭтоАдресВременногоХранилища(АдресСКДСпискаЗадач) Тогда
			Попытка		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКДСпискаЗадач);
			Исключение	СхемаКомпоновкиДанных = Неопределено;
			КонецПопытки;
			
			Если ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных") Тогда
				СхемаКомпоновкиДанных = Обработки.CRM_Календарь.ПолучитьМакет("СписокЗадач");
				АдресСКДСпискаЗадач = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
				КомпоновщикНастроекСписокЗадач.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКДСпискаЗадач));
			КонецЕсли;
		Иначе
			СхемаКомпоновкиДанных = Обработки.CRM_Календарь.ПолучитьМакет("СписокЗадач");
			АдресСКДСпискаЗадач = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
			КомпоновщикНастроекСписокЗадач.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКДСпискаЗадач));
		КонецЕсли;
		
		НастройкиСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		НастройкиСКД.Отбор.Элементы.Очистить();
		
		ГруппаИли = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли, "Ссылка", КорневаяЗанача, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		ТекСтрРодитель = "Родитель";
		Для н = 1 По 10 Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли, ТекСтрРодитель, КорневаяЗанача, ВидСравненияКомпоновкиДанных.Равно,, Истина);
			ТекСтрРодитель = ТекСтрРодитель + "." + "CRM_Родитель";
		КонецЦикла;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиСКД,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
		
		РезультатТаблица = Новый ТаблицаЗначений();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
		
		МассивТаблиц.Добавить(РезультатТаблица);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(МассивТаблиц, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура КомандаСписокЗадачВыгрузитьВПроект(Команда)
	бЕстьЗадачи = Ложь;
	бЕстьЛичныеЗадачи = Ложь;
	МассивВыделенныхСтрок = Новый Массив();
	Для Каждого ИдентификаторСтроки Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		ТекДанные = ДеревоСписокЗадач.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекДанные = Неопределено Или ТекДанные.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		бЕстьЗадачи = Истина;
		Если ТекДанные.Личная Тогда
			МассивВыделенныхСтрок.Добавить(ИдентификаторСтроки);
			бЕстьЛичныеЗадачи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не бЕстьЗадачи И Не бЕстьЛичныеЗадачи Тогда
		Возврат;
	ИначеЕсли бЕстьЗадачи И Не бЕстьЛичныеЗадачи Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выгружать в проект можно только личные задачи!'"), 10);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСписокЗадачВыгрузитьВПроектПродолжение", ЭтотОбъект, МассивВыделенныхСтрок);
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", Новый Структура("Отбор", Новый Структура("CRM_ЭтоПроект", Истина)), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗадачВыгрузитьВПроектПродолжение(РезультатВыбора, МассивВыделенныхСтрок) Экспорт
	Если ЗначениеЗаполнено(РезультатВыбора) И ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.Проекты") Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Проект", РезультатВыбора);
		МассивЗадачВИерархии = Новый Массив();
		АдресТаблицыЗадачВоВременномХранилище = СформироватьТаблицуИерархииТекущейЗадачи(МассивВыделенныхСтрок, МассивЗадачВИерархии);
		ПараметрыФормы.Вставить("АдресТаблицыЗадачВоВременномХранилище", АдресТаблицыЗадачВоВременномХранилище);
		ПараметрыФормы.Вставить("МассивЗадачПоТекущемуОтбору", МассивЗадачВИерархии);
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСписокЗадачВыгрузитьВПроектЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.CRM_Календарь.Форма.ГенерацияЭтаповПоЗадачам", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗадачВыгрузитьВПроектЗавершение(Результат, ДополнительныеПараметры) Экспорт
			
	Если Результат = Истина Тогда
		ОбновитьСписокЗадачНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНапомнитьЧерез15Минут(Команда)
	ТД = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат КонецЕсли;
	CRM_НапоминанияСервер.ДобавитьНапоминание(ТД.Ссылка, ТД.Ссылка, , ТекущаяДата() + 900, Истина); 
	Состояние(НСтр("ru = 'Напоминание добавлено'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаНапомнитьЧерез1Час(Команда)
	ТД = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат КонецЕсли;
	CRM_НапоминанияСервер.ДобавитьНапоминание(ТД.Ссылка, ТД.Ссылка, , ТекущаяДата() + 3600, Истина); 
	Состояние(НСтр("ru = 'Напоминание добавлено'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаНапомнитьЧерез4Часа(Команда)
	ТД = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат КонецЕсли;
	CRM_НапоминанияСервер.ДобавитьНапоминание(ТД.Ссылка, ТД.Ссылка, , ТекущаяДата() + 14400, Истина); 
	Состояние(НСтр("ru = 'Напоминание добавлено'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаНапомнитьЧерез1День(Команда)
	ТД = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат КонецЕсли;
	CRM_НапоминанияСервер.ДобавитьНапоминание(ТД.Ссылка, ТД.Ссылка, , ТекущаяДата() + 86400, Истина); 
	Состояние(НСтр("ru = 'Напоминание добавлено'"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаНапомнить(Команда)
	ТД = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат КонецЕсли;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Содержание", ТД.Ссылка);
	ПараметрыФормы.Вставить("Предмет", ТД.Ссылка);
	ОткрытьФорму("РегистрСведений.CRM_Напоминания.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСкрытьЗадачи(Команда)
	Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка     = НЕ Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка;
	Элементы.ГруппаСписокЗадач.Видимость			= Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка;
	Объект.КэшНастроекОтображения.ОбщиеНастройки.ОтображатьСписокЗадач = Элементы.КнопкаПоказатьСкрытьЗадачи.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСкрытьОтборы(Команда)
	Элементы.КнопкаПоказатьСкрытьОтборы.Пометка			= НЕ Элементы.КнопкаПоказатьСкрытьОтборы.Пометка;
	Элементы.ГруппаКалендарьОбластьФильтров.Видимость	= Элементы.КнопкаПоказатьСкрытьОтборы.Пометка;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	МетаданныеПуть = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	ИспользоватьБизнесПроцессыИЗадачи = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	
	Объект.ДатаКалендаря = ТекущаяДатаСеанса();
	
	// Инициализация данных обработки.
	ЗаполнитьДанныеОбработки();
	
	КалендарьДетальноеОписание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	
	Объект.ТекущееОтображение = "Неделя";
	
	ЗагрузитьНастройкиКалендаря();
	ЗагрузитьНастройкиФормы();
	
	ЗаполнитьКонтекстныеМеню();
	
	ИнициализироватьЭлементыОтбора();
	
	// Значения отборов
	ЗагрузитьНастройкиЗначенийОтборов();
	
	Элементы.КнопкаТекущееОтображениеДиспетчеризация.Видимость = CRM_ЛицензированиеСервер.ВариантПоставкиКОРП();
	
	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	Если НЕ ИспользоватьГруппыПользователей Тогда
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.Видимость = Ложь;
	КонецЕсли;
	ОбновитьЗначениеПараметраКомпоновкиДанных(СписокПользователейДиспетчеризация, "ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если Пользователи.РолиДоступны("CRM_УправлениеПроектами, ПолныеПрава") И CRM_ЛицензированиеСервер.ВариантПоставкиКОРП() Тогда
		Элементы.СписокЗадачКонтекстноеМенюКомандаСписокЗадачВыгрузитьВПроект.Видимость = Истина;
	КонецЕсли;
	
	Если ИспользоватьБизнесПроцессыИЗадачи Тогда
		// Пользовательские настройки списка задач.
		СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСписокЗадачСервер();
		CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтотОбъект, СвойстваДинамическогоСписка);
	КонецЕсли;
	
	// Пользовательские настройки списка событий в диспетчеризации.
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСписокСобытийДиспетчеризацииСервер();
	CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтотОбъект, СвойстваДинамическогоСписка);
	
	// Пользовательские настройки списка пользователей в диспетчеризации.
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСписокПользователейДиспетчеризацияСервер();
	CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтотОбъект, СвойстваДинамическогоСписка);
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СписокЗадачДатаНачала.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Элементы.СписокЗадачСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
	Если Не Пользователи.РолиДоступны("CRM_ПросмотрЗадачДругихПользователейВКалендаре, ПолныеПрава") Тогда
		Элементы.ОтборЗначениеПользователь.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	НастроитьПоложениеСпискаЗадач();
	
	ОбновитьСписокЗадачНаСервере();
		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	НастроитьВидимостьИДоступностьФормы();
	ПрименитьНастройкиЭлементовОтборов();
	НастройкиОбщие = ПолучитьНастройкиОбщиеКлиент();
	
	ПредыдущаяВыделеннаяДатаКалендаря = Объект.ДатаКалендаря;
	ПредыдущееОтображение = Объект.ТекущееОтображение;
	
	Если СписокВыборМесяца.Количество() > 0 Тогда
		СписокВыборМесяцаНеОбрабатыватьПриАктивизацииСтроки = Истина;
		ВыделитьМесяцВСписке();
	КонецЕсли;
	ДеревоРесурсовЭлементы = ДеревоРесурсов.ПолучитьЭлементы();
	Если ДеревоРесурсовЭлементы.Количество() > 0 Тогда
		ДеревоРесурсовНеОбрабатыватьПриАктивизацииСтроки = Истина;
		Элементы.ДеревоРесурсов.ТекущаяСтрока = ДеревоРесурсовЭлементы[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Объект.ТекущееОтображение = "Неделя" Тогда
		ДатаКалендаряВыделитьНеделю();
	КонецЕсли;
	КалендарьОбновитьКлиент();
	
	Если Элементы.ГруппаСписокЗадач.Видимость Тогда
		РазвернутьСписокЗадач();
	КонецЕсли;
	
	Если ИспользоватьГруппыПользователей Тогда
		Попытка Элементы.ГруппыПользователей.ТекущаяСтрока = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи");
		Исключение КонецПопытки;
	КонецЕсли;
	
	ОбновитьСодержимоеФормыПриИзмененииГруппы();
	
	Попытка Элементы.СписокПользователейДиспетчеризация.ТекущаяСтрока = ТекущийПользовательСеанса;
	Исключение КонецПопытки;
	Попытка Элементы.ДеревоПользователейДиспетчеризации.ТекущаяСтрока = ДеревоПользователейДиспетчеризации.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	Исключение КонецПопытки;
	
	Если	НастройкиОбщие.Свойство("Автообновление") И НастройкиОбщие.Автообновление = Истина
		И	НастройкиОбщие.Свойство("ПериодАвтообновления") И ТипЗнч(НастройкиОбщие.ПериодАвтообновления) = Тип("Число") Тогда
		//
		ПодключитьОбработчикОжидания("Подключаемый_Автообновление", Макс(НастройкиОбщие.ПериодАвтообновления * 60, 60));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщиеНастройкиИзКэша = ПолучитьНастройкиОбщиеКлиент();
	ОбновлятьКалендарь = ОбщиеНастройкиИзКэша.КалендарьОбновлятьПриЛюбыхСобытиях;
	
	Попытка		бОбрабатывать = (ИмяСобытия = "ОбновленыДанныеСобытия" Или ИмяСобытия = "НастройкиКалендаряИзменены");
	Исключение	бОбрабатывать = Ложь;
	КонецПопытки;		
	
	Если бОбрабатывать Тогда 
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ОбновлятьКалендарь") Тогда
			Если Параметр.ОбновлятьКалендарь = 0 Тогда
				бОбрабатывать = Ложь;
			КонецЕсли;
			Если ОбновлятьКалендарь И НЕ бОбрабатывать Тогда
				бОбрабатывать = Истина;
			КонецЕсли;	
		КонецЕсли;			
	КонецЕсли;		
	
	бОбновлятьКалендарь = Ложь;
	
	Если бОбрабатывать Тогда
		Если ИмяСобытия = "НастройкиКалендаряИзменены" Тогда
			ЗагрузитьНастройкиКалендаря();
			Если Объект.ТекущееОтображение = "Неделя" Тогда
				ДатаКалендаряВыделитьНеделю();
			КонецЕсли;
			
			НастроитьВидимостьИДоступностьФормы();
			
			ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
			КалендарьОбновитьКлиент();
		Иначе
			ПараметрОповещенияОЗаписиСобытия = Параметр.СсылкаНаОбъект;
			
			ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
			
			бОбновлятьКалендарь = Истина;
			
			ПоследнийОбработанныйПараметрОповещения = Параметр.СсылкаНаОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Попытка		бОбновленыДанныеСобытияИзФормыЗадачи = (ИмяСобытия = "ОбновленыДанныеСобытия"
	И (ТипЗнч(Источник.Объект.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(Источник.Объект.Ссылка) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")));
	Исключение	бОбновленыДанныеСобытияИзФормыЗадачи = Ложь;
	КонецПопытки;
	
	Если бОбновленыДанныеСобытияИзФормыЗадачи Тогда 
		Если Параметр.ОбновлятьКалендарь = 0 Тогда
			бОбновленыДанныеСобытияИзФормыЗадачи = Ложь;
		КонецЕсли;
		Если ОбновлятьКалендарь И НЕ бОбновленыДанныеСобытияИзФормыЗадачи Тогда
			 бОбновленыДанныеСобытияИзФормыЗадачи = Истина;
		КонецЕсли;			
	КонецЕсли;	
	
	Если	ИмяСобытия = "ЗадачаВыполнена"
		ИЛИ ИмяСобытия = "ЗадачаИзменена"
		ИЛИ ИмяСобытия = "ЗадачаПеренаправлена"
		ИЛИ ИмяСобытия = "СохраненаЛичнаяЗадача"
		ИЛИ ИмяСобытия = "СохраненоПоручение"
		ИЛИ ИмяСобытия = "Запись_ЗадачаИсполнителя"
		ИЛИ бОбновленыДанныеСобытияИзФормыЗадачи  Тогда
		//
		
		Если НеОбновлятьСписокЗадач <> Истина Тогда
			ОбновитьСписокЗадачНаКлиенте();
		КонецЕсли;
		НеОбновлятьСписокЗадач = Неопределено;
		
		Если Не ИмяСобытия = "СохраненаЛичнаяЗадача" И Не ИмяСобытия = "СохраненоПоручение" Тогда
			Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ОбновлятьКалендарь") Тогда
				Если Параметр.ОбновлятьКалендарь = 0 Тогда
					бОбновлятьКалендарь = Ложь;
				КонецЕсли;
				Если ОбновлятьКалендарь ИЛИ Параметр.ОбновлятьКалендарь = 1 Тогда
					бОбновлятьКалендарь = Истина;
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если бОбновлятьКалендарь И НЕ (Параметр.ОбновлятьКалендарь > 1) Тогда
		КалендарьОбновитьКлиент();
	КонецЕсли;
	
	ПараметрОповещенияОЗаписиСобытия = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаВыбора".
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ДляРежимаОтображенияИспользуютсяВыбранныеРесурсы(Объект.ТекущееОтображение) Тогда
		Если Не ИсточникВыбора.ЗакрыватьПриВыборе Тогда
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
				МассивВыбранныхЗначений = ВыбранноеЗначение;
			ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_Помещения") Тогда
				МассивВыбранныхЗначений = Новый Массив();
				МассивВыбранныхЗначений.Добавить(ВыбранноеЗначение);
			Иначе
				МассивВыбранныхЗначений = Неопределено;
			КонецЕсли;
			
			Если МассивВыбранныхЗначений <> Неопределено Тогда
				Для Каждого ЭлементМассива Из МассивВыбранныхЗначений Цикл
					Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.CRM_Помещения") Тогда
						ДобавитьУдалитьЭлементВДеревеРесурсов(Ложь, Ложь, Ложь, Ложь, ЭлементМассива, Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаЗаписиНового".
//
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ОбновитьСписокЗадачНаКлиенте();
	КонецЕсли;
	
	бОбрабатывать = Ложь;
	Попытка
		Если Источник.ВладелецФормы = ЭтотОбъект И ПоследнийОбработанныйПараметрОповещения <> НовыйОбъект Тогда
			РегистрируемыеОбъекты = ПолучитьОписаниеТиповРегистрируемыхОбъектовКлиент();
			бОбрабатывать = РегистрируемыеОбъекты.СодержитТип(ТипЗнч(НовыйОбъект));
		КонецЕсли;
	Исключение
		бОбрабатывать = Ложь;
	КонецПопытки;
	
	бОбновлятьКалендарь = Ложь;
	
	Если бОбрабатывать Тогда
		ПараметрОповещенияОЗаписиСобытия = НовыйОбъект;
		
		ПризнакСписокОбновлятьПоПолнотекстовомуПоиску = Истина;
		
		бОбновлятьКалендарь = Истина;
		
		ПоследнийОбработанныйПараметрОповещения = Неопределено;
	КонецЕсли;
	
	Если бОбновлятьКалендарь Тогда
		КалендарьОбновитьКлиент();
	КонецЕсли;
	
	ПараметрОповещенияОЗаписиСобытия = Неопределено;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик записи формы на сервере.
//
// Параметры:
//	Нет.
//
Процедура ПриЗакрытииНаСервере()
	СохранитьНастройкиФормы();
КонецПроцедуры

#КонецОбласти
