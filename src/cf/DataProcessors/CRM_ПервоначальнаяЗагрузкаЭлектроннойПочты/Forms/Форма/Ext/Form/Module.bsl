
&НаКлиенте
Перем ТекущийМассивИдентификаторовДляЗагрузки;
&НаКлиенте
Перем ТекущийМассивВсеИдентификаторы;
&НаКлиенте
Перем ТекущийИндексУчетнойЗаписи;
&НаКлиенте
Перем ТекущийИндексПапкиУчетнойЗаписи;
&НаКлиенте
Перем ПредыдущийИндексУчетнойЗаписи;
&НаКлиенте
Перем ОбщееКоличествоПисем;
&НаКлиенте
Перем ПолученоКоличествоПисем;
&НаКлиенте
Перем ИтогКоличествоПисем;
&НаКлиенте
Перем ИтогПолученоПисем;

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПолучитьИдентификаторыДляЗагрузки(ТекущийМассивВсеИдентификаторы, ТекУчетнаяЗапись)

	УстановитьПривилегированныйРежим(Истина);

	Возврат CRM_УправлениеЭлектроннойПочтой.ПолучитьИдентификаторыПисемДляЗагрузки(ТекущийМассивВсеИдентификаторы, ТекУчетнаяЗапись);

КонецФункции // ПолучитьИдентификаторыДляЗагрузки(ТекущийМассивВсеИдентификаторы, ТекУчетнаяЗапись);()

&НаСервере
Процедура ЗаполнитьСвойстваУчетнойЗаписи(ТекущаяУчетнаяЗапись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование КАК Наименование,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ) КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОтветственныйЗаОбработкуПисем,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере КАК ОставлятьДней,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК ПротоколВходящейПочты,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя КАК ИмяПользователя,
	|	ЕСТЬNULL(ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) КАК ДатаЗагрузкиПисем,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты = ""IMAP""
	|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОбработкаПисемВыполняетсяВДругомПочтовомКлиенте, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбработкаПисемВедетсяВДругомПочтовомКлиенте
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
	|		ПО (ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗаписьОтбор
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьОтбор", ТекущаяУчетнаяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПараметровТекущейЗаписи = Неопределено;
	
	Если Выборка.Следующий() Тогда
			
		СтруктураПараметровТекущейЗаписи = Новый Структура;
		
		СтруктураПараметровТекущейЗаписи.Вставить("Ссылка");
		СтруктураПараметровТекущейЗаписи.Вставить("АдресЭлектроннойПочты");
		СтруктураПараметровТекущейЗаписи.Вставить("Наименование");
		СтруктураПараметровТекущейЗаписи.Вставить("ПомещатьПисьмоВПапкуПисьмаОснования");
		СтруктураПараметровТекущейЗаписи.Вставить("ОтветственныйЗаОбработкуПисем");
		СтруктураПараметровТекущейЗаписи.Вставить("ОставлятьКопии");
		СтруктураПараметровТекущейЗаписи.Вставить("ОставлятьДней");
		СтруктураПараметровТекущейЗаписи.Вставить("ПротоколВходящейПочты");
		СтруктураПараметровТекущейЗаписи.Вставить("ИмяПользователя");
		СтруктураПараметровТекущейЗаписи.Вставить("ДатаЗагрузкиПисем");
		СтруктураПараметровТекущейЗаписи.Вставить("ОбработкаПисемВедетсяВДругомПочтовомКлиенте");
		
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметровТекущейЗаписи, Выборка);
		
	КонецЕсли;
	
	Если Не СтруктураПараметровТекущейЗаписи = Неопределено Тогда
			
		Если СтруктураПараметровТекущейЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
			
			ДатаПоследнейЗагрузки = ТекущаяДатаСеанса();
			
		Иначе
			
			ДатаПоследнейЗагрузки = Дата(1,1,1,0,0,0);
		
		КонецЕсли;
		
	Иначе
		
		ДатаПоследнейЗагрузки = Дата(1,1,1,0,0,0);
	
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСвойстваУчетнойЗаписи(ПараметрУчетнаяЗапись)

&НаСервере
Функция ПодключитьсяКЭлектроннойПочте(УчетнаяЗапись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Почта = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище) Тогда
		Попытка Почта = ПолучитьИзВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище).Почта;
		Исключение КонецПопытки;
	КонецЕсли;
	Если Почта = Неопределено Тогда
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
		
		Протокол = ПротоколИнтернетПочты.POP3;
		Если СтруктураПараметровТекущейЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
			Протокол = ПротоколИнтернетПочты.IMAP;
		КонецЕсли;
		
		Почта = Новый ИнтернетПочта;
		Попытка
			Почта.Подключиться(Профиль, Протокол);
			ПочтаСтруктура = Новый Структура("Почта", Почта);
			АдресИнтернетПочтыВоВременномХранилище = ПоместитьВоВременноеХранилище(ПочтаСтруктура, ЭтаФорма.УникальныйИдентификатор);
			
			Если СтруктураПараметровТекущейЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
				
				МассивПапокУчетнойЗаписи = CRM_УправлениеЭлектроннойПочтой.МассивИменАктивныхПапок(Почта);
				
				СписокПапокУчетнойЗаписи.ЗагрузитьЗначения(МассивПапокУчетнойЗаписи);				
				
			КонецЕсли;	
			
			
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'"), УчетнаяЗапись,ПодробноеПредставлениеОшибки(ИнфОбОшибке));
			//
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции // ПодключитьсяКЭлектроннойПочте() 

&НаСервере
Процедура ЗаполнитьУчетныеЗаписи(Пользователь)
	СписокУчетныхЗаписей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись КАК Ссылка
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись.ИспользоватьДляПолучения
	|	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокУчетныхЗаписей.Добавить(Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СброситьСессиюНаСервере()
	Если ЭтоАдресВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище) Тогда
		Почта = ПолучитьИзВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище).Почта;
		Если ТипЗнч(Почта) = Тип("ИнтернетПочта") Тогда
			Попытка Почта.Отключиться();
			Исключение КонецПопытки;
		КонецЕсли;
		Попытка УдалитьИзВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище);
		Исключение КонецПопытки;
	КонецЕсли;
	АдресИнтернетПочтыВоВременномХранилище = "";
КонецПроцедуры

&НаКлиенте
Процедура СброситьСессиюНаКлиенте(ОбновитьТекущийИндекс = Истина)
	Попытка ОтключитьОбработчикОжидания("Подключаемый_ПолучениеПочты");
	Исключение КонецПопытки;
	ТекущийМассивИдентификаторовДляЗагрузки = Неопределено;
	ТекущийМассивВсеИдентификаторы = Неопределено;
	Если ОбновитьТекущийИндекс Тогда
		ТекущийИндексУчетнойЗаписи = 0;
	КонецЕсли;
	ПредыдущийИндексУчетнойЗаписи = Неопределено;
	ОбщееКоличествоПисем = 0;
	ПолученоКоличествоПисем = 0;
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторы(УчетнаяЗапись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Почта = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище) Тогда
		Попытка Почта = ПолучитьИзВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище).Почта;
		Исключение КонецПопытки;
	КонецЕсли;
	Если Почта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификаторы = Почта.ПолучитьИдентификаторы();
	Если Идентификаторы.Количество() = 0 Тогда
		// если на сервере сообщений нет, то удалим все записи по учетной записи в регистре сведений ИдентификаторыПолученныхЭлектронныхПисем
		CRM_УправлениеЭлектроннойПочтой.УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись);
		СброситьСессиюНаСервере();
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Идентификаторы;
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторыIMAP(УчетнаяЗапись, ИмяАктивнойПапки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Почта = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище) Тогда
		Попытка Почта = ПолучитьИзВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище).Почта;
		Исключение КонецПопытки;
	КонецЕсли;
	Если Почта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КвалификаторСтроки150 =  Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная));
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки150);
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПисьма", КвалификаторСтроки150);
	
	Попытка
		Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
		
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ДатаНачальнойЗагрузки) Тогда
		ПараметрыОтбора.Вставить("ПослеДатыОтправления", ДатаНачальнойЗагрузки);
	Иначе
		Если ЗначениеЗаполнено(УчетнаяЗапись.CRM_ДатаНачальнойЗагрузки) Тогда
			
			ПараметрыОтбора.Вставить("ПослеДатыОтправления", УчетнаяЗапись.CRM_ДатаНачальнойЗагрузки);
		
		Иначе
			
			ПараметрыОтбора.Вставить("Удаленные", Ложь);
		
		КонецЕсли;		
	КонецЕсли;
		
	Попытка
		ЗаголовкиПисемДляЗагрузки = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ТаблицаИдентификаторов.Очистить();
	Для Каждого ЗаголовокПисьма Из ЗаголовкиПисемДляЗагрузки Цикл
		
		Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицыИдентификаторов = ТаблицаИдентификаторов.Добавить();
		НоваяСтрокаТаблицыИдентификаторов.ИдентификаторНаСервере = ?(ЗаголовокПисьма.Идентификатор.Количество() = 0, "", ЗаголовокПисьма.Идентификатор[0]);
		НоваяСтрокаТаблицыИдентификаторов.ИдентификаторПисьма    = ЗаголовокПисьма.ИдентификаторСообщения;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма,
	|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
	|ПОМЕСТИТЬ ИдентификаторыПисемКЗагрузке
	|ИЗ
	|	&ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма,
	|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
	|ИЗ
	|	ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|				И ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|				И ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка ЕСТЬ NULL 
	|	И ЭлектронноеПисьмоИсходящее.Ссылка ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ИдентификаторыПисемКЗагрузке", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	ИдЗагружать = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторНаСервере");
	
	Возврат ИдЗагружать;
	
КонецФункции


&НаСервере
Функция ПолучитьПочтуНаСервере(Идентификаторы, ВсеИдентификаторы, УчетнаяЗапись, КоличествоБезошибочноПолученныхПисем = 0)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПомещатьПисьмоВПапкуПисьмаОснования = Ложь;
	
	Если ЭтоАдресВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище) Тогда
		Почта = ПолучитьИзВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище).Почта;
		Если ТипЗнч(Почта) <> Тип("ИнтернетПочта") Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;                  
	КонецЕсли;
	
	ИдЗагружать = CRM_УправлениеЭлектроннойПочтой.ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, УчетнаяЗапись);
	
	Если ИдЗагружать.Количество() <> 0 Тогда
		
		ОтветственныйЗаОбработкуПисем = CRM_УправлениеЭлектроннойПочтой.ПолучитьОтветственногоЗаОбработкуПисьмаПоУмолчанию(УчетнаяЗапись);
		
		// Получим нужные сообщения
		Сообщения = Почта.Выбрать(Ложь, ИдЗагружать);
		КоличествоОшибокПриЗаписи = 0;
		// Запишем их
		Для Каждого Сообщение Из Сообщения Цикл
			
			Если Сообщение.ДатаОтправления < ДатаНачальнойЗагрузки Тогда
				
				КоличествоБезошибочноПолученныхПисем = КоличествоБезошибочноПолученныхПисем + 1;
				
				Продолжить;			
			
			КонецЕсли; 
			
			НачатьТранзакцию();
			
			Попытка
				СозданноеПисьмо = CRM_УправлениеЭлектроннойПочтой.ЗаписатьЭлектронноеПисьмо(УчетнаяЗапись, Сообщение, ОтветственныйЗаОбработкуПисем, Ложь, Ложь, Ложь, Истина);
				КоличествоБезошибочноПолученныхПисем = КоличествоБезошибочноПолученныхПисем + 1;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При получении письма %1 от %2, отправленное c адреса %3 произошла ошибка
					|%4'"), Сообщение.Тема, Сообщение.ДатаОтправления, Сообщение.Отправитель.Адрес, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
				КоличествоОшибокПриЗаписи = КоличествоОшибокПриЗаписи + 1;
				Для Каждого ИдентификаторСообщения Из Сообщение.Идентификатор Цикл
					ИндексИдентификатораВМассиве = Идентификаторы.Найти(ИдентификаторСообщения);
					Если ИндексИдентификатораВМассиве <> Неопределено Тогда
						Идентификаторы.Удалить(ИндексИдентификатораВМассиве);
					КонецЕсли;
					Продолжить;
				КонецЦикла;
			КонецПопытки;
		КонецЦикла;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	//-----------------------------------------------------------------
	// Удалим ненужные сообщения на сервере
	
	// По умолчанию - вне зависимости от настроек почтового профиля - оставляем все письма на сервере (не удаляем).
	// Если нужно удалять с сервера в зависимости от настроек профиля, нужно раскомментировать следующие строки:
	//ОставлятьКопии = УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере;
	//ОставлятьДней  = УчетнаяЗапись.ПериодХраненияСообщенийНаСервере;
	ОставлятьКопии = Истина;
	ОставлятьДней  = 0;
	
	Если Не ОставлятьКопии Тогда
		// удалять все
		масУдалять = Идентификаторы;
		УдалятьВсе = Истина;
	Иначе
		УдалятьВсе = Ложь;
		Если ОставлятьДней > 0 Тогда
			масУдалять = CRM_УправлениеЭлектроннойПочтой.ПолучитьИдентификаторыПисемДляУдаленияНаСервере(Идентификаторы, УчетнаяЗапись, ТекущаяДатаСеанса() - ОставлятьДней * 24 * 60 * 60);
		Иначе
			масУдалять = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если масУдалять.Количество() <> 0 Тогда
		Почта.УдалитьСообщения(масУдалять);
	КонецЕсли;
	
	//-----------------------------------------------------------------
	// Удалим ненужные идентификаторы в регистре сведений
	Если УдалятьВсе Тогда
		CRM_УправлениеЭлектроннойПочтой.УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись);
	Иначе
		CRM_УправлениеЭлектроннойПочтой.УдалитьИдентификаторыРанееПолученныхПисем(УчетнаяЗапись, ВсеИдентификаторы, масУдалять);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьПочтуНаСервереIMAP(Идентификаторы, ВсеИдентификаторы, УчетнаяЗапись, КоличествоБезошибочноПолученныхПисем = 0, ИмяАктивнойПапки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоАдресВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище) Тогда
		Почта = ПолучитьИзВременногоХранилища(АдресИнтернетПочтыВоВременномХранилище).Почта;
		Если ТипЗнч(Почта) <> Тип("ИнтернетПочта") Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
	Исключение
		Возврат Ложь;
	КонецПопытки;
		
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ДатаНачальнойЗагрузки) Тогда
		ПараметрыОтбора.Вставить("ПослеДатыОтправления", ДатаНачальнойЗагрузки);
	Иначе
		Если ЗначениеЗаполнено(УчетнаяЗапись.CRM_ДатаНачальнойЗагрузки) Тогда
			
			ПараметрыОтбора.Вставить("ПослеДатыОтправления", УчетнаяЗапись.CRM_ДатаНачальнойЗагрузки);
		
		Иначе
			
			ПараметрыОтбора.Вставить("Удаленные", Ложь);
		
		КонецЕсли;		
	КонецЕсли;
		
	Попытка
		
		// Получим нужные сообщения
		Сообщения = Почта.Выбрать(Ложь, Идентификаторы,
		                          ?(СтруктураПараметровТекущейЗаписи.ПротоколВходящейПочты = "IMAP", Ложь, Истина));

	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	КвалификаторСтроки150 =  Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная));
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки150);
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПисьма", КвалификаторСтроки150);
	
	
	ТаблицаИдентификаторов.Очистить();
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если ПустаяСтрока(Сообщение.ИдентификаторСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицыИдентификаторов = ТаблицаИдентификаторов.Добавить();
		НоваяСтрокаТаблицыИдентификаторов.ИдентификаторНаСервере = ?(Сообщение.Идентификатор.Количество() = 0, "", Сообщение.Идентификатор[0]);
		НоваяСтрокаТаблицыИдентификаторов.ИдентификаторПисьма    = Сообщение.ИдентификаторСообщения;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма,
	|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
	|ПОМЕСТИТЬ ИдентификаторыПисемКЗагрузке
	|ИЗ
	|	&ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма,
	|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
	|ИЗ
	|	ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|				И ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|				И ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка ЕСТЬ NULL 
	|	И ЭлектронноеПисьмоИсходящее.Ссылка ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ИдентификаторыПисемКЗагрузке", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	ИдЗагружать = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторНаСервере");
	
	Если ИдЗагружать.Количество() <> 0 Тогда
		
		ОтветственныйЗаОбработкуПисем = CRM_УправлениеЭлектроннойПочтой.ПолучитьОтветственногоЗаОбработкуПисьмаПоУмолчанию(УчетнаяЗапись);
		
		КоличествоОшибокПриЗаписи = 0;
		// Запишем их
		Для Каждого Сообщение Из Сообщения Цикл
			
			Если ИдЗагружать.Найти(Сообщение.Идентификатор[0]) = Неопределено Тогда
				
				КоличествоБезошибочноПолученныхПисем = КоличествоБезошибочноПолученныхПисем + 1;
				
				Продолжить;
			
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
			
				ЭтоИсходящееПисьмо =  CRM_УправлениеЭлектроннойПочтой.ПочтовыеАдресаРавны(СтруктураПараметровТекущейЗаписи.АдресЭлектроннойПочты,
										CRM_УправлениеЭлектроннойПочтой.АдресОтправителяИнтернетПочтовогоСообщения(Сообщение.Отправитель));
	
			СозданноеПисьмо = CRM_УправлениеЭлектроннойПочтой.ЗаписатьЭлектронноеПисьмо(УчетнаяЗапись, Сообщение, ОтветственныйЗаОбработкуПисем, Ложь, Ложь, Ложь, Истина);
				КоличествоБезошибочноПолученныхПисем = КоличествоБезошибочноПолученныхПисем + 1;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При получении письма %1 от %2, отправленное c адреса %3 произошла ошибка
					|%4'"), Сообщение.Тема, Сообщение.ДатаОтправления, Сообщение.Отправитель.Адрес, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
				КоличествоОшибокПриЗаписи = КоличествоОшибокПриЗаписи + 1;
				Для Каждого ИдентификаторСообщения Из Сообщение.Идентификатор Цикл
					ИндексИдентификатораВМассиве = Идентификаторы.Найти(ИдентификаторСообщения);
					Если ИндексИдентификатораВМассиве <> Неопределено Тогда
						Идентификаторы.Удалить(ИндексИдентификатораВМассиве);
					КонецЕсли;
					Продолжить;
				КонецЦикла;
			КонецПопытки;
		КонецЦикла;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДекорациюПрофиль(УчетнаяЗапись, КоличествоПолучено, КоличествоВсего)
 	СтрЗаголовок = "";
	
	СтрокаПапкиУчетнойЗаписи = "";
	
	Если ТипЗнч(СтруктураПараметровТекущейЗаписи) = Тип("Структура") И СтруктураПараметровТекущейЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
	
		СтрокаПапкиУчетнойЗаписи = " (" + СписокПапокУчетнойЗаписи[ТекущийИндексПапкиУчетнойЗаписи].Значение + ")";
	
	КонецЕсли; 
	
	Если УчетнаяЗапись = Неопределено тогда
		СтрЗаголовок = СтрЗаголовок + НСтр("ru = 'Загрузка завершена'") + ": ";
	ИначеЕсли ЗначениеЗаполнено(ПараметрУчетнаяЗапись) Тогда
		СтрЗаголовок = СтрЗаголовок + НСтр("ru = 'Получение почты'") + СтрокаПапкиУчетнойЗаписи + ": ";
	Иначе
		СтрЗаголовок = СтрЗаголовок + Строка(УчетнаяЗапись) + СтрокаПапкиУчетнойЗаписи + ": ";
	КонецЕсли;
	Элементы.ДекорацияПрофиль.Заголовок = СтрЗаголовок
		+ НСтр("ru = 'получено'") + " " + Формат(КоличествоПолучено, "ЧН=0; ЧГ=")
		+ " " + НСтр("ru = 'из'") + " " + Формат(КоличествоВсего, "ЧН=0; ЧГ=");
	//
	Если Не Элементы.ДекорацияПрофиль.Видимость Тогда
		Элементы.ДекорацияПрофиль.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучениеПочты()
	Если ТипЗнч(ТекущийИндексУчетнойЗаписи) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	Если ТекущийИндексУчетнойЗаписи > СписокУчетныхЗаписей.Количество() - 1 Тогда
		
		Если ТекущийИндексУчетнойЗаписи > 0 И ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда
		
			CRM_УправлениеЭлектроннойПочтой.УстановитьДатуПоследнейЗагрузкиПисем(СписокУчетныхЗаписей[ТекущийИндексУчетнойЗаписи - 1].Значение, ДатаПоследнейЗагрузки);
		
		КонецЕсли; 
		
		СброситьСессиюНаКлиенте();
		СброситьСессиюНаСервере();
		
		Элементы.ФормаКомандаПолучить.Доступность = Истина;
		Элементы.ФормаКомандаПрервать.Доступность = Ложь;
		
		Если ТекущийИндексУчетнойЗаписи > 0 И ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда
		
			CRM_УправлениеЭлектроннойПочтой.УстановитьДатуПоследнейЗагрузкиПисем(СписокУчетныхЗаписей[ТекущийИндексУчетнойЗаписи - 1].Значение, ДатаПоследнейЗагрузки);	
		
		КонецЕсли;
		
		Прогресс = 100;
	
		ОбновитьДекорациюПрофиль(, ИтогПолученоПисем, ИтогКоличествоПисем);
		
		Оповестить("ПолученыНовыеЭлектронныеПисьма");
		Возврат;
	КонецЕсли;
	
	ТекУчетнаяЗапись = СписокУчетныхЗаписей[ТекущийИндексУчетнойЗаписи].Значение;
	
	Если ТекущийИндексУчетнойЗаписи <> ПредыдущийИндексУчетнойЗаписи Тогда
		
		Если ТекущийИндексУчетнойЗаписи > 0 И ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда
		
			CRM_УправлениеЭлектроннойПочтой.УстановитьДатуПоследнейЗагрузкиПисем(СписокУчетныхЗаписей[ТекущийИндексУчетнойЗаписи - 1].Значение, ДатаПоследнейЗагрузки);	
		
		КонецЕсли; 
		
		СброситьСессиюНаКлиенте(Ложь);
		СброситьСессиюНаСервере();
		
		ЗаполнитьСвойстваУчетнойЗаписи(ТекУчетнаяЗапись);
		
		ПодключениеКПочтеПрошлоУспешно = ПодключитьсяКЭлектроннойПочте(ТекУчетнаяЗапись);
		
		Если НЕ ПодключениеКПочтеПрошлоУспешно Тогда
			ОбновитьДекорациюПрофиль(ТекУчетнаяЗапись, 0, 0);
			
			ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
			ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
			Возврат;
		КонецЕсли;
		
		Если СтруктураПараметровТекущейЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
			
			Если СписокПапокУчетнойЗаписи.Количество() = 0 Тогда
			
				ОбновитьДекорациюПрофиль(ТекУчетнаяЗапись, 0, 0);
				
				ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
				ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
				Возврат;
			
			КонецЕсли;
			
			ТекущийИндексПапкиУчетнойЗаписи = -1;
			
			ТекущийМассивВсеИдентификаторы = Новый Массив;
			
			ПоследнийИндексСпискаПапок = СписокПапокУчетнойЗаписи.Количество() - 1;
			
			Пока ТекущийМассивВсеИдентификаторы.Количество() = 0 И ТекущийИндексПапкиУчетнойЗаписи < ПоследнийИндексСпискаПапок Цикл
				
				ТекущийИндексПапкиУчетнойЗаписи = ТекущийИндексПапкиУчетнойЗаписи + 1;			
				
				ТекущийМассивВсеИдентификаторы = ПолучитьИдентификаторыIMAP(ТекУчетнаяЗапись, СписокПапокУчетнойЗаписи[ТекущийИндексПапкиУчетнойЗаписи].Значение);
				
			КонецЦикла;
			
			ТекущийМассивИдентификаторовДляЗагрузки = Новый Массив;
			
			Для каждого ЭлементМассиваВсеИдентификаторы Из ТекущийМассивВсеИдентификаторы Цикл
			
				ТекущийМассивИдентификаторовДляЗагрузки.Добавить(ЭлементМассиваВсеИдентификаторы);				
			
			КонецЦикла;
			
			ОбщееКоличествоПисем = ТекущийМассивИдентификаторовДляЗагрузки.Количество();
			ИтогКоличествоПисем = ИтогКоличествоПисем + ОбщееКоличествоПисем;
			ПолученоКоличествоПисем = 0;
			Если ОбщееКоличествоПисем = 0 Тогда
				ОбновитьДекорациюПрофиль(ТекУчетнаяЗапись, ПолученоКоличествоПисем, ОбщееКоличествоПисем);
				
				ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
				ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ТекущийМассивВсеИдентификаторы = ПолучитьИдентификаторы(ТекУчетнаяЗапись);
			Если ТекущийМассивВсеИдентификаторы = Неопределено Или ТекущийМассивВсеИдентификаторы.Количество() = 0 Тогда
				ОбновитьДекорациюПрофиль(ТекУчетнаяЗапись, 0, 0);
				
				ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
				ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
				Возврат;
			КонецЕсли;
			
			ТекущийМассивИдентификаторовДляЗагрузки = ПолучитьИдентификаторыДляЗагрузки(ТекущийМассивВсеИдентификаторы, ТекУчетнаяЗапись);
			
			ОбщееКоличествоПисем = ТекущийМассивИдентификаторовДляЗагрузки.Количество();
			ИтогКоличествоПисем = ИтогКоличествоПисем + ОбщееКоличествоПисем;
			ПолученоКоличествоПисем = 0;
			Если ОбщееКоличествоПисем = 0 Тогда
				ОбновитьДекорациюПрофиль(ТекУчетнаяЗапись, ПолученоКоличествоПисем, ОбщееКоличествоПисем);
				
				ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
				ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
				Возврат;
			КонецЕсли;
			
		КонецЕсли; 
		
		ПредыдущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи;
	КонецЕсли;
	
	Если Не Элементы.ДекорацияПрофиль.Видимость Тогда
		Элементы.ДекорацияПрофиль.Видимость = Истина;
	КонецЕсли;
	
	Если ТекущийМассивИдентификаторовДляЗагрузки.Количество() = 0 Тогда
		
		Если СтруктураПараметровТекущейЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
			
			ПоследнийИндексСпискаПапок = СписокПапокУчетнойЗаписи.Количество() - 1;
			
			Если ТекущийИндексПапкиУчетнойЗаписи < ПоследнийИндексСпискаПапок Тогда
				
				ТекущийМассивВсеИдентификаторы = Новый Массив;				
			
				Пока ТекущийМассивВсеИдентификаторы.Количество() = 0 И ТекущийИндексПапкиУчетнойЗаписи < ПоследнийИндексСпискаПапок Цикл
				
					ТекущийИндексПапкиУчетнойЗаписи = ТекущийИндексПапкиУчетнойЗаписи + 1;
					
					ТекущийМассивВсеИдентификаторы = ПолучитьИдентификаторыIMAP(ТекУчетнаяЗапись, СписокПапокУчетнойЗаписи[ТекущийИндексПапкиУчетнойЗаписи].Значение);
					
				КонецЦикла;	
				
				ТекущийМассивИдентификаторовДляЗагрузки = Новый Массив;
				
				Для каждого ЭлементМассиваВсеИдентификаторы Из ТекущийМассивВсеИдентификаторы Цикл
				
					ТекущийМассивИдентификаторовДляЗагрузки.Добавить(ЭлементМассиваВсеИдентификаторы);				
				
				КонецЦикла;
				
				ОбщееКоличествоПисем = ТекущийМассивИдентификаторовДляЗагрузки.Количество();
				ИтогКоличествоПисем = ИтогКоличествоПисем + ОбщееКоличествоПисем;				
			
				ПолученоКоличествоПисем = 0;
				Если ОбщееКоличествоПисем = 0 Тогда
					
					ОбновитьДекорациюПрофиль(ТекУчетнаяЗапись, ПолученоКоличествоПисем, ОбщееКоличествоПисем);
					
					ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
					ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
					Возврат;
						
				КонецЕсли;
				
			Иначе
				
				ОбновитьДекорациюПрофиль(ТекУчетнаяЗапись, ПолученоКоличествоПисем, ОбщееКоличествоПисем);
				
				ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
				ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
				Возврат;
					
			КонецЕсли; 
		
			
		Иначе
			
			СброситьСессиюНаКлиенте();
			СброситьСессиюНаСервере();
			ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
			ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
			Возврат;
			
		КонецЕсли; 
	
	КонецЕсли;
	
	РазмерПорции = Цел(ТекущийМассивИдентификаторовДляЗагрузки.Количество() / 100);
	Если РазмерПорции < 2 Тогда
		РазмерПорции = 2;
	ИначеЕсли РазмерПорции > 100 Тогда
		РазмерПорции = 100;
	КонецЕсли;
	
	ТекМассивИдентификаторов = Новый Массив();
	Для н = 1 По РазмерПорции Цикл
		Если ТекущийМассивИдентификаторовДляЗагрузки.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		ТекМассивИдентификаторов.Добавить(ТекущийМассивИдентификаторовДляЗагрузки[0]);
		ТекущийМассивИдентификаторовДляЗагрузки.Удалить(0);
	КонецЦикла;
	
	Если ТекМассивИдентификаторов.Количество() = 0 Тогда
		СброситьСессиюНаКлиенте();
		СброситьСессиюНаСервере();
		ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
		ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	КоличествоБезошибочноПолученныхПисем = 0;
	Если СтруктураПараметровТекущейЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		
		бЕстьОшибки = Не ПолучитьПочтуНаСервереIMAP(ТекМассивИдентификаторов, ТекущийМассивВсеИдентификаторы, ТекУчетнаяЗапись, КоличествоБезошибочноПолученныхПисем, СписокПапокУчетнойЗаписи[ТекущийИндексПапкиУчетнойЗаписи].Значение);
	
	Иначе		
		
		бЕстьОшибки = Не ПолучитьПочтуНаСервере(ТекМассивИдентификаторов, ТекущийМассивВсеИдентификаторы, ТекУчетнаяЗапись, КоличествоБезошибочноПолученныхПисем);
		
	КонецЕсли; 
	
	Если бЕстьОшибки Тогда
		СброситьСессиюНаКлиенте();
		СброситьСессиюНаСервере();
		ТекущийИндексУчетнойЗаписи = ТекущийИндексУчетнойЗаписи + 1;
		ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
	Иначе
		ПолученоКоличествоПисем = ПолученоКоличествоПисем + КоличествоБезошибочноПолученныхПисем;
		ИтогПолученоПисем = ИтогПолученоПисем + КоличествоБезошибочноПолученныхПисем;
		ОбновитьДекорациюПрофиль(ТекУчетнаяЗапись, ПолученоКоличествоПисем, ОбщееКоличествоПисем);
		Прогресс = ПолученоКоличествоПисем / ОбщееКоличествоПисем * 100;
		Если Прогресс > 100 Тогда
			Прогресс = 100;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПочту(Пользователь)
	Если СписокУчетныхЗаписей.Количество() = 0 Тогда
		ЗаполнитьУчетныеЗаписи(Пользователь);
	КонецЕсли;
	Если СписокУчетныхЗаписей.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет доступных для получения почты учетных записей'"));
		Возврат;
	КонецЕсли;
	
	Прогресс = 0;
	ИтогКоличествоПисем = 0;
	ИтогПолученоПисем = 0;
	
	СброситьСессиюНаКлиенте();
	
	Элементы.ФормаКомандаПолучить.Доступность = Ложь;
	Элементы.ФормаКомандаПрервать.Доступность = Истина;
	
	Элементы.ДекорацияПрофиль.Заголовок = "";
	
	ПодключитьОбработчикОжидания("Подключаемый_ПолучениеПочты", 0.1, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура КомандаПолучить(Команда)
	
	Если ЗначениеЗаполнено(ДатаНачальнойЗагрузки) Тогда
		КомандаПолучитьЗавершение(КодВозвратаДиалога.Да, Неопределено);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПолучитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Будут получены все письма с сервера. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьЗавершение(Результат, Дополнительно) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ФормаКомандаПолучить.Доступность = Ложь;
		Элементы.ФормаКомандаПрервать.Доступность = Истина;
		
		СброситьСессиюНаКлиенте();
		СброситьСессиюНаСервере();
		
		ПолучитьПочту(ТекущийПользовательСеанса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрервать(Команда)
	Элементы.ФормаКомандаПолучить.Доступность = Истина;
	Элементы.ФормаКомандаПрервать.Доступность = Ложь;
	ОтключитьОбработчикОжидания("Подключаемый_ПолучениеПочты");
	ПоказатьПредупреждение(,НСтр("ru = 'Получение электронной почты прервано пользователем!'"));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущийПользовательСеанса = Пользователи.ТекущийПользователь();
	
	Элементы.ФормаКомандаПолучить.Доступность = Истина;
	Элементы.ФормаКомандаПрервать.Доступность = Ложь;
	
	Если Параметры.Свойство("УчетнаяЗапись") Тогда
		Если ТипЗнч(Параметры.УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") И ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
			ПараметрУчетнаяЗапись = Параметры.УчетнаяЗапись;
			СписокУчетныхЗаписей.Добавить(Параметры.УчетнаяЗапись);
			//Элементы.ДекорацияПрофиль.Видимость = Истина;
			//Элементы.ДекорацияПрофиль.Заголовок = Строка(Параметры.УчетнаяЗапись);
			ЭтаФорма.Заголовок = Строка(Параметры.УчетнаяЗапись);
			
			Если ЗначениеЗаполнено(ПараметрУчетнаяЗапись.CRM_ДатаНачальнойЗагрузки) Тогда
				
				ДатаНачальнойЗагрузки = ПараметрУчетнаяЗапись.CRM_ДатаНачальнойЗагрузки;
				
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачальнойЗагрузки) Тогда
		
		ДатаНачальнойЗагрузки = ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -1);		
	
	КонецЕсли; 
	
КонецПроцедуры
