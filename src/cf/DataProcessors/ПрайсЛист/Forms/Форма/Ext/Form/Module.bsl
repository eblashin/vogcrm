
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура заполняет табличный документ.
//
Процедура ОбновитьНаСервере()

	ПараметрыВиртуальнойТаблицы = "&Период, ";
	
	Союз 			= "";
	УсловияВидаЦен 	= "";
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						ВидЦен = &ВидЦен ";
		Союз = "И ";
		
		УсловияВидаЦен = "	
		|		ГДЕ
		|			ВидыЦен.Ссылка = &ВидЦен";
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ЦеноваяГруппа) Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						" + Союз + "Номенклатура.ЦеноваяГруппа = &ЦеноваяГруппа ";
		Союз = "И ";	
	КонецЕсли; 
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						" + Союз + "Номенклатура = &Номенклатура ";	
	КонецЕсли; 
	
	Условие = "";	
	Если Актуальность Тогда
		Условие = "
		|ГДЕ
		|   ЦеныНоменклатурыСрезПоследних.Актуальность";	
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ВидЦен) И ВидЦен.РассчитываетсяДинамически Тогда
		Запрос.УстановитьПараметр("ВидЦен",  		ВидЦен.БазовыйВидЦен);
	Иначе	
		Запрос.УстановитьПараметр("ВидЦен",  		ВидЦен);	
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ЦеноваяГруппа",  ЦеноваяГруппа);
	Запрос.УстановитьПараметр("Номенклатура",  	Номенклатура);
	Запрос.УстановитьПараметр("Период",  		НаДату);
	
	Запрос.Текст	= 
	"ВЫБРАТЬ
	|	Группировки.Номенклатура КАК Номенклатура,
	|	Группировки.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Группировки.Родитель КАК Родитель,
	|	Группировки.Характеристика КАК Характеристика,
	|	Группировки.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Актуальность,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	Группировки.ВидЦен.ВалютаЦены КАК Валюта,
	|	Группировки.ВидЦен.ФорматЦены КАК ФорматЦены
	|ИЗ
	|	(ВЫБРАТЬ
	|		НоменклатураХарактеристика.Номенклатура КАК Номенклатура,
	|		НоменклатураХарактеристика.Характеристика КАК Характеристика,
	|		Колонки.ВидЦен КАК ВидЦен,
	|		НоменклатураХарактеристика.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		НоменклатураХарактеристика.Родитель КАК Родитель,
	|		НоменклатураХарактеристика.Порядок КАК Порядок,
	|		НоменклатураХарактеристика.РодительПорядок КАК РодительПорядок
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВидыЦен.Ссылка КАК ВидЦен
	|		ИЗ
	|			Справочник.ВидыЦен КАК ВидыЦен" + УсловияВидаЦен + ") КАК Колонки,
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа.Родитель = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа.Родитель
	|			КОНЕЦ КАК Родитель,
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа.Порядок КАК Порядок,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа.Родитель = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа.Порядок
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа.Родитель.Порядок
	|			КОНЕЦ КАК РодительПорядок
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(" + ПараметрыВиртуальнойТаблицы + ") КАК ЦеныНоменклатурыСрезПоследних) КАК НоменклатураХарактеристика) КАК Группировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(" + ПараметрыВиртуальнойТаблицы + ") КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Группировки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Группировки.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И (ВЫБОР
	|				КОГДА (НЕ Группировки.ВидЦен.РассчитываетсяДинамически)
	|					ТОГДА Группировки.ВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен
	|				ИНАЧЕ Группировки.ВидЦен.БазовыйВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен
	|			КОНЕЦ) " + Условие + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Группировки.РодительПорядок,
	|	Группировки.Порядок,
	|	Группировки.Номенклатура.Наименование,
	|	Группировки.Характеристика.Наименование,
	|	ВидЦен
	|ИТОГИ ПО
	|	Родитель,
	|	ЦеноваяГруппа,
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦен";
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Макет = Обработки.ПрайсЛист.ПолучитьМакет("Макет");
	
	ОбластьОтступ	 			= Макет.ПолучитьОбласть("Отступ|Номенклатура");
	ОбластьЗаголовок 			= Макет.ПолучитьОбласть("Заголовок|Номенклатура");
	ОбластьШапкаНоменклатура 	= Макет.ПолучитьОбласть("Шапка|Номенклатура");
	ОбластьШапкаХарактеристика 	= Макет.ПолучитьОбласть("Шапка|Характеристика");
	ОбластьЦеноваяГруппа 		= Макет.ПолучитьОбласть("ЦеноваяГруппа|Номенклатура");
	ОбластьШапкаВидЦен 			= Макет.ПолучитьОбласть("Шапка|ВидЦен");
		
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	ТабличныйДокумент.Очистить();
	
	Если РезультатЗапрос.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ТабличныйДокумент.Вывести(ОбластьОтступ);
	
	Если Элементы.ОтображатьЗаголовок.Пометка Тогда
	
		ОбластьЗаголовок.Параметры.Заголовок	 = "ПРАЙС-ЛИСТ";
		ОбластьЗаголовок.Параметры.НаДату		 = Формат(НаДату, "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);	
		
	КонецЕсли;	
		
	ТабличныйДокумент.Вывести(ОбластьШапкаНоменклатура);
	Если ИспользоватьХарактеристики Тогда
		ТабличныйДокумент.Присоединить(ОбластьШапкаХарактеристика);	
	КонецЕсли;
	
	НПП = 0;
	ТаблицаВидыЦен.Очистить();
	ВыборкаВидЦен = РезультатЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЦен");
	Пока ВыборкаВидЦен.Следующий() Цикл
		
		ОбластьШапкаВидЦен.Параметры.ВидЦен = ?(ЗначениеЗаполнено(ВидЦен) И ВидЦен.РассчитываетсяДинамически, ВидЦен, 			 ВыборкаВидЦен.ВидЦен);
		ОбластьШапкаВидЦен.Параметры.Валюта = ?(ЗначениеЗаполнено(ВидЦен) И ВидЦен.РассчитываетсяДинамически, ВидЦен.ВалютаЦены, ВыборкаВидЦен.Валюта);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаВидЦен);
		
		НоваяСтрока = ТаблицаВидыЦен.Добавить();
		НоваяСтрока.ВидЦен = ВыборкаВидЦен.ВидЦен;
		НоваяСтрока.НПП = НПП;
		НПП = НПП + 1;
		
	КонецЦикла; 
	
	ВыборкаРодитель = РезультатЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Родитель");
	Пока ВыборкаРодитель.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаРодитель.Родитель) Тогда
				
			ОбластьЦеноваяГруппа.Параметры.ЦеноваяГруппа = ВыборкаРодитель.Родитель;
			ТабличныйДокумент.Вывести(ОбластьЦеноваяГруппа);
			ТекущаяОбластьЦеноваяГруппа = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
			ТекущаяОбластьЦеноваяГруппа.Объединить();
			ТекущаяОбластьЦеноваяГруппа.ЦветФона = Новый Цвет(252, 249, 226);
			ТекущаяОбластьЦеноваяГруппа.Расшифровка = ВыборкаРодитель.Родитель;
			ТабличныйДокумент.НачатьГруппуСтрок();	
			
			ВыборкаЦеноваяГруппа = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЦеноваяГруппа");
			Пока ВыборкаЦеноваяГруппа.Следующий() Цикл
			
			    Если ВыборкаЦеноваяГруппа.ЦеноваяГруппа = ВыборкаЦеноваяГруппа.Родитель Тогда
				    ВывестиДетали(ВыборкаЦеноваяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"), ИспользоватьХарактеристики, Ложь, Макет);
				Иначе					
					ОбластьЦеноваяГруппа.Параметры.ЦеноваяГруппа = ВыборкаЦеноваяГруппа.ЦеноваяГруппа;
					ТабличныйДокумент.Вывести(ОбластьЦеноваяГруппа);
					ТекущаяОбластьЦеноваяГруппа = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
					ТекущаяОбластьЦеноваяГруппа.Объединить();
					ТекущаяОбластьЦеноваяГруппа.ЦветФона = Новый Цвет(252, 249, 226);
					ТекущаяОбластьЦеноваяГруппа.Расшифровка = ВыборкаЦеноваяГруппа.ЦеноваяГруппа;
					ТабличныйДокумент.НачатьГруппуСтрок();	
					
					ВывестиДетали(ВыборкаЦеноваяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"), ИспользоватьХарактеристики, Истина, Макет);
					
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;			
			
			КонецЦикла;
			
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
		Иначе
			
			ВыборкаЦеноваяГруппа = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЦеноваяГруппа");
			Пока ВыборкаЦеноваяГруппа.Следующий() Цикл
				ВывестиДетали(ВыборкаЦеноваяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"), ИспользоватьХарактеристики, Ложь, Макет);
			КонецЦикла;	
				
		КонецЕсли;
	
	КонецЦикла;
	
	ОбластьТаблица = ТабличныйДокумент.Область(?(Элементы.ОтображатьЗаголовок.Пометка, 5, 2), 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
 
	ОбластьТаблица.ГраницаСверху 	= Линия;
	ОбластьТаблица.ГраницаСнизу 	= Линия;
	ОбластьТаблица.ГраницаСлева 	= Линия;
	ОбластьТаблица.ГраницаСправа 	= Линия;
	
КонецПроцедуры

&НаСервере
// Процедура выводит детальные записи в табличный документ.
//
Процедура ВывестиДетали(ВыборкаНоменклатура, ИспользоватьХарактеристики, ИспользоватьЦеновыеГруппы, Макет)
    
	ОбластьДеталиНоменклатура 	= Макет.ПолучитьОбласть("Детали|Номенклатура");
	ОбластьДеталиХарактеристика = Макет.ПолучитьОбласть("Детали|Характеристика");
	ОбластьДеталиВидЦен 		= Макет.ПолучитьОбласть("Детали|ВидЦен");
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
			
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
			Если ИспользоватьХарактеристики Тогда
				ШиринаТаблицы = 3;
			Иначе
				ШиринаТаблицы = 2;
			КонецЕсли; 
			
			ОбластьДеталиНоменклатура.Параметры.Номенклатура = ВыборкаХарактеристика.Номенклатура;
			ТабличныйДокумент.Вывести(ОбластьДеталиНоменклатура);
			Если ИспользоватьХарактеристики Тогда
				ОбластьДеталиХарактеристика.Параметры.Характеристика = ВыборкаХарактеристика.Характеристика;
				ТабличныйДокумент.Присоединить(ОбластьДеталиХарактеристика);
			КонецЕсли;
			
			ВыборкаВидЦен = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЦен");
			Пока ВыборкаВидЦен.Следующий() Цикл
				
				Выборка = ВыборкаВидЦен.Выбрать();
				Пока Выборка.Следующий() Цикл	
					
					СтруктураРасшифровки = Новый Структура;
					СтруктураРасшифровки.Вставить("Номенклатура", 		Выборка.Номенклатура);
					СтруктураРасшифровки.Вставить("Характеристика", 	Выборка.Характеристика);
					СтруктураРасшифровки.Вставить("ВидЦен", 			Выборка.ВидЦен);
					СтруктураРасшифровки.Вставить("Период", 			НаДату);
					СтруктураРасшифровки.Вставить("Цена", 				Выборка.Цена);
					СтруктураРасшифровки.Вставить("Актуальность", 		Выборка.Актуальность);
					СтруктураРасшифровки.Вставить("ЕдиницаИзмерения", 	Выборка.ЕдиницаИзмерения);
					
					НПП = ТаблицаВидыЦен.НайтиСтроки(Новый Структура("ВидЦен", Выборка.ВидЦен))[0].НПП;
					
					ОбластьЕдиница 				= ТабличныйДокумент.Область(ВысотаТаблицы + 1, ШиринаТаблицы + НПП*2 + 1);
					ОбластьЕдиница.Текст 		= Выборка.ЕдиницаИзмерения;
					ОбластьЕдиница.Расшифровка 	= СтруктураРасшифровки;
										
					ОбластьЦена 				= ТабличныйДокумент.Область(ВысотаТаблицы + 1, ШиринаТаблицы + НПП*2 + 2);
					
					Если (Выборка.ВидЦен.РассчитываетсяДинамически) Тогда // при запросе по всем ценам
					    Цена = Выборка.Цена * (1 + Выборка.ВидЦен.Процент / 100);
						Цена = CRM_ОбщегоНазначенияСервер.ОкруглитьЦену(Цена, Выборка.ВидЦен.ПорядокОкругления, Выборка.ВидЦен.ОкруглятьВБольшуюСторону);
					    ОбластьЦена.Текст 			= Формат(Цена, Выборка.ВидЦен.ФорматЦены);
						
					// При запросе по динамическому типу цен.
					ИначеЕсли ЗначениеЗаполнено(ВидЦен) И ВидЦен.РассчитываетсяДинамически Тогда
					    Цена = Выборка.Цена * (1 + ВидЦен.Процент / 100);
						Цена = CRM_ОбщегоНазначенияСервер.ОкруглитьЦену(Цена, ВидЦен.ПорядокОкругления, ВидЦен.ОкруглятьВБольшуюСторону);
					    ОбластьЦена.Текст 			= Формат(Цена, ВидЦен.ФорматЦены);
						
					Иначе
						ОбластьЦена.Текст 			= Формат(Выборка.Цена, Выборка.ФорматЦены);					
						
					КонецЕсли; 
					
					ОбластьЦена.Расшифровка 	= СтруктураРасшифровки;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ОбластьНоменклатура = ТабличныйДокумент.Область(ВысотаТаблицы + 1, 2);
			ОбластьНоменклатура.Расшифровка = СтруктураРасшифровки;
			Если ИспользоватьХарактеристики Тогда
				ОбластьХарактеристика = ТабличныйДокумент.Область(ВысотаТаблицы + 1, 3);
				ОбластьХарактеристика.Расшифровка 	= СтруктураРасшифровки;
			КонецЕсли;

			ТабличныйДокумент.Область(ВысотаТаблицы + 1, 2, ТабличныйДокумент.ВысотаТаблицы, 2).Объединить();
			Если ИспользоватьХарактеристики Тогда
				ТабличныйДокумент.Область(ВысотаТаблицы + 1, 3, ТабличныйДокумент.ВысотаТаблицы, 3).Объединить();
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает ключ записи регистра.
//
Функция ПолучитьКлючЗаписи(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	   "ВЫБРАТЬ ПЕРВЫЕ 1
	   |	ЦеныНоменклатурыСрезПоследних.Период
	   |ИЗ
	   |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	   |			&НаДату,
	   |			ВидЦен = &ВидЦен
	   |				И Номенклатура = &Номенклатура
	   |				И Характеристика = &Характеристика) КАК ЦеныНоменклатурыСрезПоследних";

	Запрос.УстановитьПараметр("НаДату", 			СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("Номенклатура", 		СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", 	СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("ВидЦен", 			СтруктураПараметров.ВидЦен);

	СтруктураВозврата = Новый Структура("Период, ВидЦен, Номенклатура, Характеристика");	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтруктураПараметров);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультат.Количество() > 0 Тогда
		СтруктураВозврата.Период = ТаблицаРезультат[0].Период;
		Возврат СтруктураВозврата;
	КонецЕсли; 

	Возврат	Новый Структура; 	

КонецФункции // ПолучитьКлючЗаписи()

&НаКлиенте
// Процедура открывает запись реистра.
//
Процедура ОткрытьФормуЗаписиРегистра(СтруктураПараметров)

	КлючЗаписи = ПолучитьКлючЗаписи(СтруктураПараметров);
	Если ЗначениеЗаполнено(КлючЗаписи) И ТипЗНЧ(КлючЗаписи) = Тип("Структура") Тогда
		ПараметрыМассив = Новый Массив;
		ПараметрыМассив.Добавить(КлючЗаписи);
		КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ЦеныНоменклатуры", ПараметрыМассив);
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра),,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФормуЗаписиРегистра()

&НаСервере
// Процедура удаляет запись регистра.
//
Процедура УдалитьНаСервере()

    СтруктураПараметров = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;

	КлючЗаписи = ПолучитьКлючЗаписи(СтруктураПараметров);

    Если НЕ ЗначениеЗаполнено(КлючЗаписи) ИЛИ ТипЗнч(КлючЗаписи) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
    
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();

	Для каждого ЭлементСтруктуры Из КлючЗаписи Цикл
		НаборЗаписей.Отбор[ЭлементСтруктуры.Ключ].Установить(ЭлементСтруктуры.Значение);	
	КонецЦикла; 
		
	НаборЗаписей.Записать();	

КонецПроцедуры // Удалить()

&НаСервереБезКонтекста
// Процедура сохраняет настройки формы.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	CRM_ХранилищеНастроек.Сохранить("ОбработкаПрайсЛистФорма", "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураНастроек = CRM_ХранилищеНастроек.Загрузить("ОбработкаПрайсЛистФорма", "СтруктураНастроек");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ВидЦен = СтруктураНастроек.ВидЦен;
		ЦеноваяГруппа = СтруктураНастроек.ЦеноваяГруппа;
		Номенклатура = СтруктураНастроек.Номенклатура;
		НаДату = СтруктураНастроек.НаДату;
		Актуальность = СтруктураНастроек.Актуальность;	
	Иначе
		НаДату = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		ВидЦен = Справочники.ВидыЦен.Оптовая;
		Актуальность = Истина;	
	КонецЕсли;	
	
	ИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	Элементы.ОтображатьЗаголовок.Пометка = Ложь;
	ОбновитьНаСервере();

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВидЦен", ВидЦен);
	СтруктураНастроек.Вставить("ЦеноваяГруппа", ЦеноваяГруппа);
	СтруктураНастроек.Вставить("Номенклатура", Номенклатура);
	СтруктураНастроек.Вставить("НаДату", НаДату);
	СтруктураНастроек.Вставить("Актуальность", Актуальность);
	СохранитьНастройкиФормы(СтруктураНастроек);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик оповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененаЦена" Тогда
		Если Параметр Тогда
			ОбновитьНаСервере();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ПроцедурыОбработчикиКоманд

&НаКлиенте
// Процедура - обработчик команды Обновить.
//
Процедура Обновить(Команда)
	ОбновитьНаСервере();	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды Добавить.
//
Процедура Добавить(Команда)
	
    ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидЦен", ВидЦен);
	ЗначенияЗаполнения.Вставить("Номенклатура", Номенклатура);
	ЗначенияЗаполнения.Вставить("Актуальность", Истина);

	Расшифровка = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
    	ЗначенияЗаполнения.ВидЦен = Расшифровка.ВидЦен;
    	ЗначенияЗаполнения.Номенклатура = Расшифровка.Номенклатура;
    	ЗначенияЗаполнения.Вставить("Характеристика", Расшифровка.Характеристика);
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьНаСервереПослеОбработки", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения),,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаСервереПослеОбработки(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьНаСервере();
	
КонецПроцедуры // ОбработкаКоманды()


&НаКлиенте
// Процедура - обработчик команды Удалить.
//
Процедура Удалить(Команда)

	СтруктураПараметров = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		УдалитьНаСервере();
    	ОбновитьНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды История.
//
Процедура История(Команда)
	
	СтруктураПараметров = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;

	СтруктураОтбор = Новый Структура;

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураОтбор.Вставить("Характеристика", СтруктураПараметров.Характеристика);
		СтруктураОтбор.Вставить("Номенклатура", СтруктураПараметров.Номенклатура);
		Если ЗначениеЗаполнено(СтруктураПараметров.ВидЦен) Тогда
			СтруктураОтбор.Вставить("ВидЦен", СтруктураПараметров.ВидЦен);
		КонецЕсли;
	КонецЕсли; 
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьНаСервереПослеОбработки", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаСписка", Новый Структура("Отбор", СтруктураОтбор),,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
// Процедура - команды Печать.
//
Процедура Печать(Команда)
	
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТабличныйДокумент.КоличествоЭкземпляров = 1;

	Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.ИмяПринтера) Тогда
		ТабличныйДокумент.АвтоМасштаб = Истина;
	КонецЕсли;
	
	ТабличныйДокумент.Напечатать(Ложь);
// В управляемых формах метод вызывает исключение, если ТабличныйДокумент - реквизит формы
	//ТабличныйДокумент.Показать();

КонецПроцедуры

&НаКлиенте
// Процедура - команды Изменить.
//
Процедура Изменить(Команда)

    СтруктураПараметров = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		ОткрытьФормуЗаписиРегистра(СтруктураПараметров);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - команды Скопировать.
//
Процедура Скопировать(Команда)

	ЗначенияЗаполнения = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	Если ТипЗнч(ЗначенияЗаполнения) <> Тип("Структура") Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ВидЦен", ВидЦен);
		ЗначенияЗаполнения.Вставить("Актуальность", Истина);
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));

КонецПроцедуры

&НаКлиенте
// Процедура - команды ФормированиеЦен.
//
Процедура ФормированиеЦен(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидЦен", ВидЦен);
	СтруктураПараметров.Вставить("ЦеноваяГруппа", ЦеноваяГруппа);
	СтруктураПараметров.Вставить("Номенклатура", Номенклатура);
	СтруктураПараметров.Вставить("НаДату", НаДату);
	ОписаниеОповещения = Новый ОписаниеОповещения("ФормированиеЦенЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ФормированиеЦен.Форма", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработкаКоманды()

&НаКлиенте
Процедура ФормированиеЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ОбновитьНаСервере();
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаКоманды()

&НаКлиенте
// Процедура изменяет пометку кнопки ОтображатьЗаголовок.
//
Процедура ОтображатьЗаголовок(Команда)
	
	Элементы.ОтображатьЗаголовок.Пометка = НЕ Элементы.ОтображатьЗаголовок.Пометка;
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьПолноеНаименованиеОрганизации(Организация)
	
	Возврат ?(ЗначениеЗаполнено(Организация),Организация.НаименованиеПолное,"");
	
КонецФункции	

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовФормы

&НаКлиенте
// Процедура - обработчик события Выбор реквизита ТабличныйДокумент.
//
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область.Расшифровка) = Тип("Структура") Тогда

		СтандартнаяОбработка = Ложь;

        Если Область.Лево = 2 Тогда
        	СтруктураОткрытия = Новый Структура("Ключ", Область.Расшифровка.Номенклатура);
	   		Форма = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", СтруктураОткрытия);
	    	Форма.Открыть();
		ИначеЕсли ИспользоватьХарактеристики И Область.Лево = 3 Тогда
            СтруктураОткрытия = Новый Структура("Ключ", Область.Расшифровка.Характеристика);
	   		Форма = ПолучитьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", СтруктураОткрытия);
	    	Форма.Открыть();
		Иначе
			ОткрытьФормуЗаписиРегистра(Область.Расшифровка);
		КонецЕсли;

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииОбласти реквизита ТабличныйДокумент.
//
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
 	ТекущаяОбласть = Элемент.ТекущаяОбласть.Имя;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ВидЦен.
//
Процедура ВидЦенПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ЦеноваяГруппа.
//
Процедура ЦеноваяГруппаПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита НаДату.
//
Процедура НаДатуПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Актуальность.
//
Процедура АктуальностьПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Номенклатура.
//
Процедура НоменклатураПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка реквизита ВидЦен.
//
Процедура ВидЦенОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка реквизита ЦеноваяГруппа.
//
Процедура ЦеноваяГруппаОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка реквизита Номенклатура.
//
Процедура НоменклатураОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка реквизита НаДату.
//
Процедура НаДатуОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСправочникВидыЦен(Команда)
	ОткрытьФорму("Справочник.ВидыЦен.ФормаСписка", , , , );
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСправочникЦеновыеГруппы(Команда)
	ОткрытьФорму("Справочник.ЦеновыеГруппы.ФормаСписка", , , , );
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСправочникНоменклатура(Команда)
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", , , , );
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСправочникВидыСкидокНаценок(Команда)
	ОткрытьФорму("Справочник.ВидыСкидокНаценок.ФормаСписка", , , , );
КонецПроцедуры

// +CRM

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// Ожидается, что в папке будут только картинки.
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура НормализоватьИменаФайлов(СписокФайлов)
	
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Для Каждого ЭлементФайл Из СписокФайлов Цикл
		Для Индекс = 1 По СтрДлина(СтрИсключения) Цикл
			
			Символ = Сред(СтрИсключения, Индекс, 1);
			
			Если Найти(ЭлементФайл.Представление, Символ) > 0 Тогда
				ЭлементФайл.Представление = СтрЗаменить(ЭлементФайл.Представление, Символ, " ");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТабличныеДокументыВоВременноеХранилище(СписокФайлов, НастройкиСохранения)
	
	ЗаписьZipФайла = Неопределено;
	ИмяАрхива = Неопределено;
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	СписокТипов = НастройкиСохранения.ФорматыСохранения;
	
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	ТабДок = ТабличныйДокумент;
	
	Для Каждого ТипФайла Из СписокТипов Цикл
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
			РасширениеФайла = "txt";
			Приставка = "_ansi";
		ИначеЕсли ТипФайла = ТипФайлаТабличногоДокумента.TXT Тогда
			РасширениеФайла = "txt";
			Приставка = "_utf8";
		Иначе
			РасширениеФайла = Строка(НРег(ТипФайла));
			Приставка = "";
		КонецЕсли;		
			
		ИмяФайла = "price_list" + Приставка + ".[Расширение]";
		ИмяФайла = СтрЗаменить(ИмяФайла, "[Расширение]",РасширениеФайла);
		
 		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		
		ИмяВременногоФайла = ИмяВременнойПапки + "\" + ИмяФайла;
		ТабДок.Записать(ИмяВременногоФайла, ТипФайла);
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ИмяВременногоФайла);
		КонецЕсли;			
		
		Если ЗаписьZipФайла <> Неопределено Тогда 
			ЗаписьZipФайла.Добавить(ИмяВременногоФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			СписокФайлов.Добавить(ПутьВоВременномХранилище, ИмяФайла);
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		СписокФайлов.Добавить(ПутьВоВременномХранилище, ФайлАрхива.Имя);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПоПочтеЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборФорматаВложений",,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочтеЗавершение(НастройкиСохранения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(НастройкиСохранения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый СписокЗначений;
	
	ПоместитьТабличныеДокументыВоВременноеХранилище(СписокВложений, НастройкиСохранения);
	
	НормализоватьИменаФайлов(СписокВложений);
	
	Организация	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	Тема		= ВернутьПолноеНаименованиеОрганизации(Организация) + " Прайс-лист от " + Строка(Формат(ТекущаяДата(), "ДЛФ=Д"));
	
	CRM_ВзаимодействияКлиент.CRM_ОткрытьФормуОтправкиПочтовогоСообщения( , , Тема, , СписокВложений);
	
КонецПроцедуры

// -CRM 

#КонецОбласти

#КонецОбласти
