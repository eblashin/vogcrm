
#Область ОписаниеПеременных

&НаКлиенте
Перем МассивУдаляемых;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВариантов = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		"ДобавленныеВарианты",
		"ДобавленныеВариантыБыстрыхОтчетов",
		Новый ТаблицаЗначений);
	
	ДобавленныеВарианты.Загрузить(ТаблицаВариантов);
	
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого СтрокаВарианта Из ДобавленныеВарианты Цикл
		
		Если Не СтрокаВарианта.Выбран
			Или СтрокаВарианта.Сформирован Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЭлементыВариантаОтчета(СтрокаВарианта.Ссылка, СтрокаВарианта.ИмяЭлемента);
		
	КонецЦикла;
	
	ОбработчикЗаполнитьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияНастройкиНажатие(Элемент)
	
	ИмяГруппы = СтрЗаменить(Элемент.Имя, "Декорация_ГруппаОтчета_", "КоманднаяПанель_ГруппаОтчета_");
	Элементы[ИмяГруппы].Видимость = Не Элементы[ИмяГруппы].Видимость;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДобавленныеВарианты

&НаКлиенте
Процедура ДобавленныеВариантыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДобавленныеВарианты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТекущийИндекс = ДобавленныеВарианты.Индекс(ТекущиеДанные);
		
		Если Не ТекущиеДанные.НомерСтроки = (ТекущийИндекс + 1) Тогда
			
			Если ТекущиеДанные.НомерСтроки > (ТекущийИндекс + 1) Тогда
				ПереместитьВверхНаСервере(ТекущиеДанные.ИмяЭлемента, Ложь);
			Иначе
				ПереместитьВнизНаСервере(ТекущиеДанные.ИмяЭлемента, Ложь);
			КонецЕсли;
			
			Для Каждого СтрокаВариант Из ДобавленныеВарианты Цикл
				СтрокаВариант.НомерСтроки = ДобавленныеВарианты.Индекс(СтрокаВариант) + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавленныеВариантыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДобавленныеВарианты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		МассивУдаляемых = Новый Массив;
		МассивУдаляемых.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавленныеВариантыПослеУдаления(Элемент)
	
	Если ТипЗнч(МассивУдаляемых) = Тип("Массив") Тогда
		
		Для Каждого Вариант Из МассивУдаляемых Цикл
			
			ИмяЭлемента 
				= "Вариант_" + ПривестиИдентификаторКИмени(Вариант.УникальныйИдентификатор());
			
			УдалитьСвязанныеЭлементы(ИмяЭлемента);
			
		КонецЦикла;
		
		МассивУдаляемых = Неопределено;
		
	КонецЕсли;
	
	Для Каждого СтрокаВариант Из ДобавленныеВарианты Цикл
		СтрокаВариант.НомерСтроки = ДобавленныеВарианты.Индекс(СтрокаВариант) + 1;
	КонецЦикла;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьОтчеты(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ДобавитьОтчетыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.ВариантыОтчетов.ФормаСписка",
		ПараметрыФормыВыбора,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		ОповещениеОВыборе,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтчетыЗавершение(ВыбранныйОтчет, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйОтчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ДобавленныеВарианты.Добавить();
	НоваяСтрока.Ссылка = ВыбранныйОтчет;
	НоваяСтрока.Выбран = Истина;
	НоваяСтрока.ИмяЭлемента 
		= "Вариант_" + ПривестиИдентификаторКИмени(ВыбранныйОтчет.УникальныйИдентификатор());
	НоваяСтрока.НомерСтроки 	= ДобавленныеВарианты.Количество();
	НоваяСтрока.КлючВарианта 	= вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
		ВыбранныйОтчет,
		"КлючВарианта",
		Истина);
	
	Для Каждого СтрокаВарианта Из ДобавленныеВарианты Цикл
		
		Если Не СтрокаВарианта.Выбран
			Или СтрокаВарианта.Сформирован Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЭлементыВариантаОтчета(СтрокаВарианта.Ссылка, СтрокаВарианта.ИмяЭлемента);
		
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ОбработчикЗаполнитьОтчеты", 0.1, Истина);
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьВверхНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьВнизНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчет(Команда)
	
	ИмяЭлемента = СтрЗаменить(Команда.Имя, "КомандаНастроитьОтчет_ГруппаОтчета_", "");
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	НайденныеСтроки = ДобавленныеВарианты.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого НайденныйВариант Из НайденныеСтроки Цикл
		
		ПараметрыНастроек = Новый Структура;
		ПараметрыНастроек.Вставить("Отчет", 		НайденныйВариант.Ссылка);
		ПараметрыНастроек.Вставить("Ссылка", 		НайденныйВариант.Ссылка);
		ПараметрыНастроек.Вставить("АдресНастроек", НайденныйВариант.АдресНастроек);
		ПараметрыНастроек.Вставить("Отбор");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("НастроитьОтчетЗавершение", ЭтотОбъект);
		
		ОткрытьФорму(
			"Обработка.вогПанельБыстрыхОтчетов.Форма.ФормаБыстрыхНастроек",
			ПараметрыНастроек,
			ЭтотОбъект,
			ЭтотОбъект,
			,
			,
			ОповещениеОЗавершении,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючВарианта", Результат.КлючВарианта);
	
	НайденныеСтроки = ДобавленныеВарианты.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаВарианта Из НайденныеСтроки Цикл
		
		СтрокаВарианта.АдресНастроек = Результат.АдресНастроек;
		УстановитьОтображениеСостоянияЭлемента(СтрокаВарианта.ИмяЭлемента, Истина);
		
		ПодключитьОбработчикОжидания("ОбработчикПерезаполнитьОтчеты", 0.1, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчеты(Команда)
	
	Для Каждого СтрокаВарианта Из ДобавленныеВарианты Цикл
		
		Если Не СтрокаВарианта.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьОтображениеСостоянияЭлемента(СтрокаВарианта.ИмяЭлемента, Истина);
		
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ОбработчикОбновитьОтчеты", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыИФункции

&НаКлиенте
Процедура ОбработчикЗаполнитьОтчеты() Экспорт
	
	МассивОтчетов = Новый Массив;
	
	Для Каждого СтрокаВарианта Из ДобавленныеВарианты Цикл
		
		Если Не СтрокаВарианта.Выбран
			Или СтрокаВарианта.Сформирован Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтчета = Новый Структура;
		СтруктураОтчета.Вставить("СсылкаВарианта", 			СтрокаВарианта.Ссылка);
		СтруктураОтчета.Вставить("Ссылка", 					СтрокаВарианта.Ссылка);
		СтруктураОтчета.Вставить("ИмяЭлемента", 			СтрокаВарианта.ИмяЭлемента);
		СтруктураОтчета.Вставить("АдресНастроек", 			СтрокаВарианта.АдресНастроек);
		СтруктураОтчета.Вставить("КлючВарианта", 			СтрокаВарианта.КлючВарианта);
		СтруктураОтчета.Вставить("ИдентификаторЗадания", 	СтрокаВарианта.ИдентификаторЗадания);
		
		МассивОтчетов.Добавить(СтруктураОтчета);
		
	КонецЦикла;
	
	СформироватьЗадания(МассивОтчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполнитьОтчеты() Экспорт
	
	МассивОтчетов = Новый Массив;
	
	Для Каждого СтрокаВарианта Из ДобавленныеВарианты Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаВарианта.АдресНастроек) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтчета = Новый Структура;
		СтруктураОтчета.Вставить("СсылкаВарианта", 			СтрокаВарианта.Ссылка);
		СтруктураОтчета.Вставить("Ссылка", 					СтрокаВарианта.Ссылка);
		СтруктураОтчета.Вставить("ИмяЭлемента", 			СтрокаВарианта.ИмяЭлемента);
		СтруктураОтчета.Вставить("АдресНастроек", 			СтрокаВарианта.АдресНастроек);
		СтруктураОтчета.Вставить("КлючВарианта", 			СтрокаВарианта.КлючВарианта);
		СтруктураОтчета.Вставить("ИдентификаторЗадания", 	СтрокаВарианта.ИдентификаторЗадания);
		
		МассивОтчетов.Добавить(СтруктураОтчета);
		
	КонецЦикла;
	
	СформироватьЗадания(МассивОтчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗаполнитьОтчетыЗавершениеНаСервере(Результат, ДополнительныеПараметры) Тогда
		
		ПараметрыОтбора = Новый Структура("Ссылка", ДополнительныеПараметры.Ссылка);
		НайденныеСтроки = ДобавленныеВарианты.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаВарианта Из НайденныеСтроки Цикл
			
			СтрокаВарианта.Сформирован = Истина;
			УстановитьОтображениеСостоянияЭлемента(СтрокаВарианта.ИмяЭлемента, Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтчетыЗавершениеНаСервере(Результат, ДополнительныеПараметры)
	
	ЗаполнениеВыполнено = Ложь;
	
	Если Результат <> Неопределено Тогда
		
		СтруктураРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
			
			ПараметрыОтбора = Новый Структура("Ссылка", ДополнительныеПараметры.Ссылка);
			НайденныеСтроки = ДобавленныеВарианты.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаВарианта Из НайденныеСтроки Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаВарианта.ИмяЭлемента) Тогда
					Продолжить;
				КонецЕсли;
				
				ЭтотОбъект[СтрокаВарианта.ИмяЭлемента] = СтруктураРезультата.ТабличныйДокумент;
				ЗаполнениеВыполнено = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаполнениеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОбновитьОтчеты() Экспорт
	
	МассивОтчетов = Новый Массив;
	
	Для Каждого СтрокаВарианта Из ДобавленныеВарианты Цикл
		
		Если Не СтрокаВарианта.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтчета = Новый Структура;
		СтруктураОтчета.Вставить("СсылкаВарианта", 			СтрокаВарианта.Ссылка);
		СтруктураОтчета.Вставить("Ссылка", 					СтрокаВарианта.Ссылка);
		СтруктураОтчета.Вставить("ИмяЭлемента", 			СтрокаВарианта.ИмяЭлемента);
		СтруктураОтчета.Вставить("АдресНастроек", 			СтрокаВарианта.АдресНастроек);
		СтруктураОтчета.Вставить("КлючВарианта", 			СтрокаВарианта.КлючВарианта);
		СтруктураОтчета.Вставить("ИдентификаторЗадания", 	СтрокаВарианта.ИдентификаторЗадания);
		
		МассивОтчетов.Добавить(СтруктураОтчета);
		
	КонецЦикла;
	
	СформироватьЗадания(МассивОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьЗадания(Знач МассивОтчетов)
	
	Если МассивОтчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаданий = СформироватьОтчетыНаСервере(МассивОтчетов, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Для Каждого СтруктураЗадания Из МассивЗаданий ЦИкл
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", 					СтруктураЗадания.Ссылка);
		ПараметрыОповещения.Вставить("ИдентификаторЗадания", 	СтруктураЗадания.ИдентификаторЗадания);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьОтчетыЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
		
		ПараметрыОтбора = Новый Структура("Ссылка", СтруктураЗадания.Ссылка);
		НайденныеСтроки = ДобавленныеВарианты.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаВарианта Из НайденныеСтроки Цикл
			СтрокаВарианта.ИдентификаторЗадания = СтруктураЗадания.ИдентификаторЗадания;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Запускает фоновые задания формирования отчетов
&НаСервереБезКонтекста
Функция СформироватьОтчетыНаСервере(МассивОтчетов, УникальныйИдентификатор)
	
	ИмяПроцедуры = "ВариантыОтчетов.СформироватьОтчетВФоне";
	МассивЗаданий = Новый Массив;
	
	Для Каждого СтруктураОтчета Из МассивОтчетов Цикл
		
		Если ЭтоАдресВременногоХранилища(СтруктураОтчета.АдресНастроек) Тогда
			НастройкиВарианта = ПолучитьИзВременногоХранилища(СтруктураОтчета.АдресНастроек);
		Иначе
			
			НастройкиВарианта = СтруктураОтчета.СсылкаВарианта.Настройки.Получить();
			
			Если Не ТипЗнч(НастройкиВарианта) = Тип("НастройкиКомпоновкиДанных") Тогда
				НастройкиВарианта = ОпределитьСтандартныеНастройкиОтчета(СтруктураОтчета.СсылкаВарианта);
			КонецЕсли;
			
			// ++ VOG Солодов В.В. 12.03.2020 CRM-376
			СтруктураНастроекОтчета = ВариантыОтчетов.НастройкиФормыОтчета(
				СтруктураОтчета.СсылкаВарианта.Отчет,
				Неопределено,
				Неопределено);
			
			Если СтруктураНастроекОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
				
				ОтчетПолноеИмя = СтруктураОтчета.СсылкаВарианта.Отчет.Имя;
				
				Попытка
					ОтчетОбъект = Отчеты[ОтчетПолноеИмя].Создать();
					ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(Неопределено, НастройкиВарианта);
				Исключение
					
				КонецПопытки;
				
			КонецЕсли;
			// -- VOG Солодов В.В. 12.03.2020
			
		КонецЕсли;
	
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне 			= Истина;
		ПараметрыВыполнения.ОжидатьЗавершение 		= Ложь;
		ПараметрыВыполнения.КлючФоновогоЗадания 	= СтруктураОтчета.КлючВарианта;
		
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("СсылкаВарианта", 				СтруктураОтчета.СсылкаВарианта);
		ПараметрыФормирования.Вставить("СсылкаОтчета", 					СтруктураОтчета.СсылкаВарианта.Отчет);
		ПараметрыФормирования.Вставить("КлючВарианта", 					СтруктураОтчета.КлючВарианта);
		ПараметрыФормирования.Вставить("ИдентификаторФормы", 			Неопределено);
		ПараметрыФормирования.Вставить("НастройкиКД", 					КомпоновщикНастроек.Настройки);
		ПараметрыФормирования.Вставить("ПользовательскиеНастройкиКД", 	КомпоновщикНастроек.ПользовательскиеНастройки);
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыФормирования, ПараметрыВыполнения);
		РезультатВыполнения.Вставить("Ссылка", 							СтруктураОтчета.Ссылка);
		
		МассивЗаданий.Добавить(РезультатВыполнения);
		
	КонецЦикла;
	
	Возврат МассивЗаданий;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьСтандартныеНастройкиОтчета(ВариантСсылка)
	
	НастройкиВарианта = Новый НастройкиКомпоновкиДанных;
	
	Если ТипЗнч(ВариантСсылка) = Тип("СправочникСсылка.ВариантыОтчетов")
		И ЗначениеЗаполнено(ВариантСсылка)
		И ОбщегоНазначения.СсылкаСуществует(ВариантСсылка) Тогда // VOG Солодов В.В. 29.01.2020 // Добавил условие
		
		ИмяОтчета = ВариантСсылка.Отчет.Имя;
		
		ОтчетМетаданные 		= Метаданные.Отчеты[ИмяОтчета];
		ИмяСхемы 				= ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя;
		СхемаКомпоновкиДанных 	= Отчеты[ИмяОтчета].ПолучитьМакет(ИмяСхемы);
		
		НастройкиВарианта = СхемаКомпоновкиДанных.ВариантыНастроек.Получить(0).Настройки;
		
	КонецЕсли;
	
	Возврат НастройкиВарианта;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	ТаблицаВариантов = ДобавленныеВарианты.Выгрузить();
	
	Для Каждого СтрокаВарианта Из ТаблицаВариантов Цикл
		СтрокаВарианта.Сформирован 		= Ложь;
		СтрокаВарианта.АдресНастроек 	= "";
	КонецЦикла;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"ДобавленныеВарианты",
		"ДобавленныеВариантыБыстрыхОтчетов",
		ТаблицаВариантов);
	
КонецПроцедуры

#Область СозданиеРеквизитовЭлементовФормы

&НаСервере
Функция ПривестиИдентификаторКИмени(Идентификатор) Экспорт
	Возврат СтрЗаменить(СтрЗаменить(Строка(Идентификатор), "-", ""), ".", "_");
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементыВариантаОтчета(Вариант, ИмяЭлемента)
	
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьРеквизитыЭлементыФормы(Вариант, ИмяЭлемента);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяЭлемента) Тогда
		УстановитьОтображениеСостоянияЭлемента(ИмяЭлемента, Истина);
		Элементы[ИмяЭлемента].Родитель.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеСостоянияЭлемента(Знач ИмяЭлемента, Видимость)
	
	Перем ОтображениеСостояния, РежимОтображения, КартинкаСостояния, ТекстСостояния;
	
	Если Видимость Тогда
		РежимОтображения 	= ДополнительныйРежимОтображения.Неактуальность;
		КартинкаСостояния 	= БиблиотекаКартинок.ДлительнаяОперация48;
		ТекстСостояния 		= НСтр("ru = 'Отчет формируется...'");
	Иначе
		РежимОтображения 	= ДополнительныйРежимОтображения.НеИспользовать;
		КартинкаСостояния 	= Новый Картинка;
		ТекстСостояния 		= "";
	КонецЕсли;
	
	ОтображениеСостояния = Элементы[ИмяЭлемента].ОтображениеСостояния;
	ОтображениеСостояния.Видимость 						= Видимость;
	ОтображениеСостояния.ДополнительныйРежимОтображения = РежимОтображения;
	ОтображениеСостояния.Картинка 						= КартинкаСостояния;
	ОтображениеСостояния.Текст 							= ТекстСостояния;
	
КонецПроцедуры

&НаСервере
Функция СоздатьРеквизитыЭлементыФормы(Вариант, ИмяЭлемента)
	
	ГруппаОтчета 			= НоваяГруппаОтчета(Вариант, ИмяЭлемента);
	СоздатьРеквизитФормы(Вариант, ИмяЭлемента);
	ПредставлениеОтчета 	= НовоеПредставлениеОтчета(Вариант, ГруппаОтчета, ИмяЭлемента);
	КоманднаяПанельОтчета 	= НоваяКоманднаяПанельОтчета(ГруппаОтчета);
	
КонецФункции

&НаСервере
Функция НоваяГруппаОтчета(Знач Вариант, Знач ИмяЭлемента)
	
	ГруппаОтчета = Элементы.Найти("ГруппаОтчета_" + ИмяЭлемента);
	
	Если ГруппаОтчета = Неопределено Тогда
		
		ГруппаОтчета = Элементы.Добавить("ГруппаОтчета_" + ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ОбщаяГруппа);
		ГруппаОтчета.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОтчета.Отображение 				= ОтображениеОбычнойГруппы.СлабоеВыделение;
		ГруппаОтчета.ШрифтЗаголовка 			= Новый Шрифт(Новый Шрифт,, 11);
		ГруппаОтчета.Заголовок 					= СокрЛП(Вариант.Наименование);
		ГруппаОтчета.Подсказка 					= СокрЛП(Вариант.Описание);
		ГруппаОтчета.ОтображатьЗаголовок 		= Истина;
		ГруппаОтчета.РастягиватьПоГоризонтали 	= Истина;
		ГруппаОтчета.РастягиватьПоВертикали 	= Истина;
		ГруппаОтчета.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		ГруппаОтчета.Поведение 					= ПоведениеОбычнойГруппы.Свертываемая;
		ГруппаОтчета.ОтображениеУправления 		= ОтображениеУправленияОбычнойГруппы.Картинка;
		
	КонецЕсли;
	
	Возврат ГруппаОтчета;

КонецФункции

&НаСервере
Функция НоваяКоманднаяПанельОтчета(Знач ГруппаРодитель)
	
	ИмяГруппы 				= ГруппаРодитель.Имя;
	КоманднаяПанельОтчета 	= Элементы.Найти("КоманднаяПанель_" + ИмяГруппы);
	
	Если КоманднаяПанельОтчета = Неопределено Тогда
		
		// Создание командной панели
		КоманднаяПанельОтчета = Элементы.Добавить("КоманднаяПанель_" + ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель);
		КоманднаяПанельОтчета.Вид 						= ВидГруппыФормы.КоманднаяПанель;
		КоманднаяПанельОтчета.РастягиватьПоГоризонтали 	= Ложь;
		КоманднаяПанельОтчета.Ширина 					= 3;
		//КоманднаяПанельОтчета.Видимость 				= Ложь;
		
		// Создание команды и кнопки "Настроить отчет"
		ИмяКоманды 				= "КомандаНастроитьОтчет_" + ИмяГруппы;
		Команда 				= ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		Команда.Действие		= "НастроитьОтчет";
		Команда.Подсказка		= "Открыть настройки отчета";
		
		КнопкаВверх				= Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КоманднаяПанельОтчета);
		КнопкаВверх.Заголовок	= "Настроить отчет";
		КнопкаВверх.ИмяКоманды	= "КомандаНастроитьОтчет_" + ИмяГруппы;
		КнопкаВверх.Картинка 	= БиблиотекаКартинок.CRM_НастройкиДополнительные;
		КнопкаВверх.Отображение = ОтображениеКнопки.Картинка;
		
	КонецЕсли;
	
	Возврат КоманднаяПанельОтчета;

КонецФункции

&НаСервере
Процедура СоздатьРеквизитФормы(Знач Вариант, Знач ИмяЭлемента)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяЭлемента) Тогда
		
		МассивДобавляемыхРеквизитов = Новый Массив;
		
		ДопустимыеТипы = Новый Массив;
		ДопустимыеТипы.Добавить(Тип("ТабличныйДокумент"));
		
		ОписаниеТипов = Новый ОписаниеТипов(ДопустимыеТипы);
		НовыйРеквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТипов,, СокрЛП(Вариант.Наименование));
		
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит); 
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НовоеПредставлениеОтчета(Знач Вариант, Знач ГруппаОтчета, Знач ИмяЭлемента)
	
	ПредставлениеОтчета = Элементы.Найти(ИмяЭлемента);
	
	Если ПредставлениеОтчета = Неопределено Тогда
		
		ПредставлениеОтчета = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаОтчета);
		
		ПредставлениеОтчета.ПутьКДанным 				= ПредставлениеОтчета.Имя;
		ПредставлениеОтчета.Вид 						= ВидПоляФормы.ПолеТабличногоДокумента;
		ПредставлениеОтчета.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПредставлениеОтчета.ЦветРамки 					= ЦветаСтиля.ЦветТекстаНеактуальногоСписка;
		ПредставлениеОтчета.РастягиватьПоВертикали 		= Истина;
		ПредставлениеОтчета.РастягиватьПоГоризонтали 	= Истина;
		ПредставлениеОтчета.АвтоМаксимальнаяШирина 		= Истина;
		ПредставлениеОтчета.Подсказка 					= СокрЛП(Вариант.Описание);
		
	КонецЕсли;
	
	Возврат ПредставлениеОтчета;
	
КонецФункции

#КонецОбласти

#Область УдалениеЭлементовФормы

&НаСервере
Процедура УдалитьСвязанныеЭлементы(ИмяЭлемента)
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(ИмяЭлемента);
	МассивИмен.Добавить("ГруппаОтчета_" + ИмяЭлемента);
	
	Для Каждого ИмяСвязанногоЭлемента Из МассивИмен Цикл
		Элемент = Элементы.Найти(ИмяСвязанногоЭлемента);
		Если Не Элемент = Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить(ИмяЭлемента);
	
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ИменаКоманд = Новый Массив;
	ИменаКоманд.Добавить("КомандаНастроитьОтчет_ГруппаОтчета_" + ИмяЭлемента);
	ИменаКоманд.Добавить("КомандаПереместитьВверх_ГруппаОтчета_" + ИмяЭлемента);
	ИменаКоманд.Добавить("КомандаПереместитьВниз_ГруппаОтчета_" + ИмяЭлемента);
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		Команда = ЭтотОбъект.Команды.Найти(ИмяКоманды);
		Если Не Команда = Неопределено Тогда
			ЭтотОбъект.Команды.Удалить(Команда);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура ПереместитьВверхНаСервере(ПеремещаемаяГруппаИмя, ПеремещатьВТаблице = Истина)
	
	Если СтрНайти(ПеремещаемаяГруппаИмя, "КомандаПереместитьВверх_") = 0 Тогда
		ИмяГруппы = "ГруппаОтчета_" + ПеремещаемаяГруппаИмя;
	Иначе
		ИмяГруппы 	= СтрЗаменить(ПеремещаемаяГруппаИмя, "КомандаПереместитьВверх_", "");
	КонецЕсли;
	
	ГруппаРодитель 	= Элементы[ИмяГруппы].Родитель;
	ИндексГруппы 	= ГруппаРодитель.ПодчиненныеЭлементы.Индекс(Элементы[ИмяГруппы]);
	
	Если ИндексГруппы > 0 Тогда
		
		ПредыдущийЭлемент = ГруппаРодитель.ПодчиненныеЭлементы.Получить(ИндексГруппы - 1);
		Элементы.Переместить(Элементы[ИмяГруппы], Элементы.ОбщаяГруппа, ПредыдущийЭлемент);
		
		ИмяВарианта = СтрЗаменить(ИмяГруппы, "ГруппаОтчета_", "");
		
		Если ПеремещатьВТаблице Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИмяЭлемента", ИмяВарианта);
			
			НайденныеСтроки = ДобавленныеВарианты.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ИндексСтроки = ДобавленныеВарианты.Индекс(НайденнаяСтрока);
				ДобавленныеВарианты.Сдвинуть(ИндексСтроки, -1);
			КонецЦикла;
			
			Для Каждого СтрокаВариант Из ДобавленныеВарианты Цикл
				СтрокаВариант.НомерСтроки = ДобавленныеВарианты.Индекс(СтрокаВариант) + 1;
			КонецЦикла;
			
			СохранитьНастройки();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВнизНаСервере(ПеремещаемаяГруппаИмя, ПеремещатьВТаблице = Истина)
	
	Если СтрНайти(ПеремещаемаяГруппаИмя, "КомандаПереместитьВниз_") = 0 Тогда
		ИмяГруппы = "ГруппаОтчета_" + ПеремещаемаяГруппаИмя;
	Иначе
		ИмяГруппы 	= СтрЗаменить(ПеремещаемаяГруппаИмя, "КомандаПереместитьВниз_", "");
	КонецЕсли;
	
	ГруппаРодитель 	= Элементы[ИмяГруппы].Родитель;
	ИндексГруппы 	= ГруппаРодитель.ПодчиненныеЭлементы.Индекс(Элементы[ИмяГруппы]);
	
	Если ИндексГруппы < ГруппаРодитель.ПодчиненныеЭлементы.Количество() - 1 Тогда
		
		СледующийЭлемент = ГруппаРодитель.ПодчиненныеЭлементы.Получить(ИндексГруппы + 1);
		Элементы.Переместить(СледующийЭлемент, Элементы.ОбщаяГруппа, Элементы[ИмяГруппы]);
		
		ИмяВарианта = СтрЗаменить(ИмяГруппы, "ГруппаОтчета_", "");
		
		Если ПеремещатьВТаблице Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИмяЭлемента", ИмяВарианта);
			
			НайденныеСтроки = ДобавленныеВарианты.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ИндексСтроки = ДобавленныеВарианты.Индекс(НайденнаяСтрока);
				ДобавленныеВарианты.Сдвинуть(ИндексСтроки, 1);
			КонецЦикла;
			
			Для Каждого СтрокаВариант Из ДобавленныеВарианты Цикл
				СтрокаВариант.НомерСтроки = ДобавленныеВарианты.Индекс(СтрокаВариант) + 1;
			КонецЦикла;
			
			СохранитьНастройки();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемый_РабочийСтол
	
&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

#КонецОбласти

#КонецОбласти
