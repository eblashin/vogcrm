
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантСсылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ссылка");
	
	Если ТипЗнч(ВариантСсылка) = Тип("СправочникСсылка.ВариантыОтчетов")
		И ЗначениеЗаполнено(ВариантСсылка) Тогда
		
		ИмяОтчета = ВариантСсылка.Отчет.Имя;
		
		ОтчетОбъект 			= Отчеты[ИмяОтчета].Создать();
		ОтчетМетаданные 		= Метаданные.Отчеты[ИмяОтчета];
		ОтчетПолноеИмя 			= ОтчетМетаданные.ПолноеИмя();
		ИмяСхемы 				= ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя;
		СхемаКомпоновкиДанных 	= Отчеты[ИмяОтчета].ПолучитьМакет(ИмяСхемы);
		
		КлючТекущегоВарианта 	= ВариантСсылка.КлючВарианта;
		
		АдресСхемы 	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		
		// Сохранение параметров открытия формы.
		ФормаПараметры = Новый Структура(
			"КлючНазначенияИспользования, КлючПользовательскихНастроек,
			|СформироватьПриОткрытии, ТолькоПросмотр,
			|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
		ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
		ФормаПараметры.Вставить("Отбор", Новый Структура);
		Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
			Параметры.Отбор.Очистить();
		КонецЕсли;
		
		// Определение настроек отчета.
		// ++ VOG Солодов В.В. 04.03.2020 CRM-376
		ТипОтчетаСтрокой = ВариантыОтчетовКлиентСервер.ТипОтчетаСтрокой(Неопределено, ВариантСсылка);
		// До изменения
		//ТипОтчетаСтрокой = ВариантыОтчетовКлиентСервер.ТипОтчета(ВариантСсылка, Истина);
		// -- VOG Солодов В.В. 04.03.2020
		
		Если ТипОтчетаСтрокой = Неопределено Тогда
			// ++ VOG Солодов В.В. 04.03.2020 CRM-376
			Информация 		= ВариантыОтчетов.ИнформацияОбОтчете(ОтчетПолноеИмя);
			// До изменения
			//Информация 		= ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(ОтчетПолноеИмя);
			// -- VOG Солодов В.В. 04.03.2020
			Параметры.Отчет = Информация.Отчет;
		КонецЕсли;
		
		НастройкиОтчета = ВариантыОтчетов.НастройкиФормыОтчета(Параметры.Отчет, КлючТекущегоВарианта, ОтчетОбъект);
		НастройкиОтчета.Вставить("РазрешеноВыбиратьВарианты", 	Истина);
		НастройкиОтчета.Вставить("СхемаМодифицирована", 		Ложь);
		НастройкиОтчета.Вставить("АдресСхемы", 					АдресСхемы);
		НастройкиОтчета.Вставить("КлючСхемы", 					"");
		НастройкиОтчета.Вставить("Контекстный", 
			ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") И ФормаПараметры.Отбор.Количество() > 0);
		НастройкиОтчета.Вставить("ПолноеИмя", 					ОтчетПолноеИмя);
		НастройкиОтчета.Вставить("Наименование", 				СокрЛП(ОтчетМетаданные.Представление()));
		НастройкиОтчета.Вставить("ОтчетСсылка", 				Параметры.Отчет);
		НастройкиОтчета.Вставить("Внешний", 					ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка"));
		НастройкиОтчета.Вставить("Безопасный", 					БезопасныйРежим() <> Ложь);
		ОбновитьИнформациюОВариантеОтчета();
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета, ВариантыОтчетов.ПараметрыКлиента());
		
		НастройкиОтчета.Вставить("ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек", Истина);
		
		Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
			Параметры.СформироватьПриОткрытии = Ложь;
			Элементы.ФормироватьСразу.Пометка = Истина;
			НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
		КонецЕсли;
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		
		Если Параметры.Свойство("АдресНастроек")
			И ЭтоАдресВременногоХранилища(Параметры.АдресНастроек) Тогда
			
			НастройкиВарианта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
		Иначе
			
			НастройкиВарианта = ВариантСсылка.Настройки.Получить();
			
			Если Не ТипЗнч(НастройкиВарианта) = Тип("НастройкиКомпоновкиДанных") Тогда
				НастройкиВарианта = СхемаКомпоновкиДанных.ВариантыНастроек.Получить(0).Настройки;
			КонецЕсли;
			
			// ++ VOG Солодов В.В. 12.03.2020 CRM-376
			СтруктураНастроекОтчета = ВариантыОтчетов.НастройкиФормыОтчета(
				ВариантСсылка.Отчет,
				Неопределено,
				Неопределено);
			
			Если СтруктураНастроекОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
				
				ОтчетПолноеИмя = ВариантСсылка.Отчет.Имя;
				
				Попытка
					ОтчетОбъект = Отчеты[ОтчетПолноеИмя].Создать();
					ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(Неопределено, НастройкиВарианта);
				Исключение
					
				КонецПопытки;
				
			КонецЕсли;
			// -- VOG Солодов В.В. 12.03.2020
			
		КонецЕсли;
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
		ПараметрыЗаполнения.Вставить("СтандартнаяОбработкаСобытия", СтандартнаяОбработка);
		
		// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
		НаборРеквизитов = ПолучитьРеквизиты();
		Для Каждого Реквизит Из НаборРеквизитов Цикл
			ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
			ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
		КонецЦикла;
		Для Каждого Команда Из Команды Цикл
			ПостоянныеКоманды.Добавить(Команда.Имя);
		КонецЦикла;
		
		БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КлючВарианта", 	КлючТекущегоВарианта);
	СтруктураВозврата.Вставить("АдресНастроек", ПолучитьАдресНастроекКомпоновщикаНаСервере());
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");
	ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Истина);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ФлажокИспользование_ПриИзменении(Элемент)
	
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	// ++ VOG Солодов В.В. 05.03.2020 CRM-376
	ОтразитьИзмененияВПодчиненных(ЭтотОбъект, ИдентификаторЭлемента, ПользовательскаяНастройкаКД);
	// До изменения
	//ОтчетыКлиент.ОтразитьИзмененияВПодчиненных(ЭтотОбъект, ИдентификаторЭлемента, ПользовательскаяНастройкаКД);
	// -- VOG Солодов В.В. 05.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВвода_ПриИзменении(Элемент)
	
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.Значение;
	ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 05.03.2020 CRM-376
	ОтразитьИзмененияВПодчиненных(ЭтотОбъект, ИдентификаторЭлемента, ПользовательскаяНастройкаКД);
	// До изменения
	//ОтчетыКлиент.ОтразитьИзмененияВПодчиненных(ЭтотОбъект, ИдентификаторЭлемента, ПользовательскаяНастройкаКД);
	// -- VOG Солодов В.В. 05.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФлажокЗначения_ПриИзменении(Элемент)
	
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	Значение = ЭтотОбъект[Элемент.Имя];
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ++ VOG Солодов В.В. 05.03.2020 CRM-376
	СписокКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	// До изменения
	//ОтчетыКлиент.СписокКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	// -- VOG Солодов В.В. 05.03.2020
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ++ VOG Солодов В.В. 05.03.2020 CRM-376
	ЗначениеКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	// До изменения
	//ОтчетыКлиент.ЗначениеКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	// -- VOG Солодов В.В. 05.03.2020
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидСравнения_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Подключаемый_ИзменитьВидСравнения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьВидСравнения(Команда)
	
	ИдентификаторЭлемента = Прав(Команда.Имя, 32);
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораВидаСравнения", ЭтотОбъект, Контекст);
	// ++ VOG Солодов В.В. 05.03.2020 CRM-376
	ИзменитьВидСравнения(ЭтотОбъект, ИдентификаторЭлемента, Обработчик);
	// До изменения
	//ОтчетыКлиент.ИзменитьВидСравнения(ЭтотОбъект, ИдентификаторЭлемента, Обработчик);
	// -- VOG Солодов В.В. 05.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаСравнения(ВидСравнения, Контекст) Экспорт
	
	Если ВидСравнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьВидСравнения");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
	
КонецПроцедуры

#Область СтандартныйПериод

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ЗначениеИмя 	= СтрЗаменить(ПериодНачалоИмя, "_Начало_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодНачалоИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаНачала);
	Если Заполнено Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя 		= Элемент.Имя;
	ЗначениеИмя 			= СтрЗаменить(ПериодОкончаниеИмя, "_Окончание_", "_Значение_");
	ИдентификаторЭлемента 	= Прав(ПериодОкончаниеИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаОкончания);
	Если Заполнено Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	
	ЗначениеИмя 			= СтрЗаменить(Команда.Имя, "_КнопкаВыбора_", "_Значение_");
	ИдентификаторЭлемента 	= Прав(Команда.Имя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	
	Контекст = Новый Структура;
	Контекст.Вставить("ЗначениеИмя", 			ЗначениеИмя);
	Контекст.Вставить("ИдентификаторЭлемента", 	ИдентификаторЭлемента);
	
	Обработчик = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, Контекст);
	
	СтандартнаяОбработка = Истина;
	ОтчетыКлиентПереопределяемый.ПриНажатииКнопкиВыбораПериода(ЭтотОбъект, Значение, СтандартнаяОбработка, Обработчик);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Значение;
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, Контекст) Экспорт 
	
	Если ТипЗнч(Период) <> Тип("СтандартныйПериод") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[Контекст.ЗначениеИмя] = Период;
	
	ЭлементКД = НайтиПользовательскуюНастройкуЭлемента(Контекст.ИдентификаторЭлемента);
	Если ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементКД.ПравоеЗначение = Период;
	ИначеЕсли ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ЭлементКД.Значение = Период;
	КонецЕсли;
	ЭлементКД.Использование = Истина;
	
	ЭтотОбъект.ПользовательскиеНастройкиМодифицированы = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(
		"ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL 
	|			ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиОтчета.Вставить("ВариантСсылка", 			Выборка.ВариантСсылка);
		НастройкиОтчета.Вставить("КлючЗамеров", 			Выборка.КлючЗамеров);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", 	Выборка.ПредопределенныйСсылка);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта", 	?(Выборка.Пользовательский, Выборка.ИмяИсходногоВарианта, КлючТекущегоВарианта));
		НастройкиОтчета.Вставить("Пользовательский", 		Выборка.Пользовательский);
	Иначе
		НастройкиОтчета.Вставить("ВариантСсылка", 			Неопределено);
		НастройкиОтчета.Вставить("КлючЗамеров", 			Неопределено);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", 	Неопределено);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта", 	Неопределено);
		НастройкиОтчета.Вставить("Пользовательский", 		Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция БыстрыеНастройкиЗаполнить(Знач ПараметрыКлиента)
	
	// Вставка значений по умолчанию для обязательных ключей параметров заполнения.
	ПараметрыЗаполнения = БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента);
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	// Запись новых настроек варианта и пользовательских настроек в компоновщик.
	БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения);
	
	// Получение информации из КД.
	УсловияВывода = Новый Структура;
	УсловияВывода.Вставить("ТолькоПользовательские", 		Истина);
	УсловияВывода.Вставить("ТолькоБыстрые", 				Истина);
	УсловияВывода.Вставить("ИдентификаторТекущегоУзлаКД", 	Неопределено);
	
	Информация = ОтчетыСервер.РасширеннаяИнформацияОНастройках(
		КомпоновщикНастроек,
		НастройкиОтчета,
		ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя,
		УсловияВывода);
	
	ЕстьБыстрыеНастройки = Информация.ЕстьБыстрыеНастройки;
	ЕстьОбычныеНастройки = Информация.ЕстьОбычныеНастройки;
	
	// Удаление элементов старых настроек.
	БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения);
	
	// Добавление элементов актуальных настроек и загрузка значений.
	БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация);
	
	// Связи.
	ЗарегистрироватьОтключаемыеСвязи(Информация);
	
	// Стандартные периоды.
	НастройкиОтчета.Вставить("СтандартныеПериоды", Новый Массив);
	СтандартныеПериоды = Информация.ПользовательскиеНастройки.НайтиСтроки(
		Новый Структура("ТипЭлементов", "СтандартныйПериод"));
	
	Для Каждого СвойстваНастройки Из СтандартныеПериоды Цикл
		НастройкиОтчета.СтандартныеПериоды.Добавить(СвойстваНастройки.ИдентификаторКД);
	КонецЦикла;
	
	УстановитьВидимостьДоступность();
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если НастройкиОтчета.Свойство("ОтчетОбъект") Тогда
		НастройкиОтчета.Удалить("ОтчетОбъект");
	КонецЕсли;
	
	РезультатЗаполненияНастроек = ПараметрыЗаполнения.Результат;
	
	// Очистка цикличных ссылок.
	Информация.ДеревоВарианта.Колонки.Очистить();
	Информация.НастройкиВарианта.Колонки.Очистить();
	Информация.ПользовательскиеНастройки.Колонки.Очистить();
	
КонецФункции

&НаСервере
Функция БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента)
	
	ПараметрыЗаполнения = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗаполнения, ПараметрыКлиента, Истина);
	
	Если Не ПараметрыЗаполнения.Свойство("ИмяСобытия") Тогда
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "");
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.Свойство("Результат") Тогда
		ПараметрыЗаполнения.Вставить("Результат", Новый Структура);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ОтчетОбъектИлиПолноеИмя", НастройкиОтчета.ПолноеИмя);
	
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения)
	
	НовыеНастройкиКД = Неопределено;
	НовыеПользовательскиеНастройкиКД = Неопределено;
	
	Если ПараметрыЗаполнения.Свойство("КомпоновщикНастроекКД") Тогда
		НовыеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.Настройки;
		НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		Если ПараметрыЗаполнения.Свойство("НастройкиКД") Тогда
			НовыеНастройкиКД = ПараметрыЗаполнения.НастройкиКД;
		КонецЕсли;
		Если ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиКД") Тогда
			НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.ПользовательскиеНастройкиКД;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		
		НовыеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеНастройкиXML");
		Если ТипЗнч(НовыеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеНастройкиXML);
			Исключение
				НовыеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеНастройкиXML = Неопределено;
		КонецЕсли;
		
		НовыеПользовательскиеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НастройкиОтчета, "НовыеПользовательскиеНастройкиXML");
		
		Если ТипЗнч(НовыеПользовательскиеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеПользовательскиеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеПользовательскиеНастройкиXML);
			Исключение
				НовыеПользовательскиеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СброситьПользовательскиеНастройки 
		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "СброситьПользовательскиеНастройки", Ложь);
	
	Если СброситьПользовательскиеНастройки Тогда
		НовыеПользовательскиеНастройкиКД = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
			ЭтотОбъект,
			НастройкиОтчета.КлючСхемы,
			КлючТекущегоВарианта,
			НовыеНастройкиКД,
			НовыеПользовательскиеНастройкиКД);
			
	КонецЕсли;
	
	НастройкиЗагружены = ОтчетыКлиентСервер.ЗагрузитьНастройки(
		КомпоновщикНастроек,
		НовыеНастройкиКД,
		НовыеПользовательскиеНастройкиКД);
	
	Если НастройкиЗагружены Тогда
		// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
		// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
		Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
			ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, КомпоновщикНастроек.Настройки, НастройкиОтчета);
		КонецЕсли;
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(
			"ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
		// Подготовка к предварительной инициализации компоновщика (используется при расшифровке).
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекРасширенныйРежим") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекРасширенныйРежим", ПараметрыЗаполнения.ФормаНастроекРасширенныйРежим);
	КонецЕсли;
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекИмяСтраницы") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекИмяСтраницы", ПараметрыЗаполнения.ФормаНастроекИмяСтраницы);
	КонецЕсли;
	
	УсловияОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "УсловияОтборов");
	Если УсловияОтборов <> Неопределено Тогда
		УзелКД = КомпоновщикНастроек.ПользовательскиеНастройки;
		Для Каждого КлючИЗначение Из УсловияОтборов Цикл
			ПользовательскаяНастройкаКД = УзелКД.ПолучитьОбъектПоИдентификатору(КлючИЗначение.Ключ);
			ПользовательскаяНастройкаКД.ВидСравнения = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения)
	
	// Удаление элементов.
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы);
	
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда)
	
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")
			Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		КонецЕсли;
		Куда.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация)
	
	// Кэши для быстрого поиска с клиента.
	СоответствиеПользовательскихНастроек 	= Новый Соответствие;
	СоответствиеИменОбъектовМетаданных 		= Информация.СоответствиеИменОбъектовМетаданных;
	СоответствиеНастроекВарианта 			= Новый Соответствие;
	
	// Удаление реквизитов
	ПараметрыЗаполнения.Вставить("Реквизиты", Новый Структура);
	ПараметрыЗаполнения.Реквизиты.Вставить("Добавляемые", 	Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Удаляемые", 	Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Существующие", 	Новый Соответствие);
	
	ВсеРеквизиты = ПолучитьРеквизиты();
	
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		Если ПостоянныеРеквизиты.НайтиПоЗначению(ПолноеИмяРеквизита) = Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Существующие.Вставить(ПолноеИмяРеквизита, Реквизит.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	// Локальные переменные для установки значений и свойств после создания реквизитов.
	ДобавленныеПоляВвода 			= Новый Структура;
	ДобавленныеСтандартныеПериоды 	= Новый Массив;
	
	// Структура связей.
	Связи = Информация.Связи;
	
	ИменаОсновныхРеквизитовФормы 		= Новый Соответствие;
	ИменаЭлементовДляУстановкиСвязей 	= Новый Соответствие;
	ИменаФлажковИспользование 			= Новый Соответствие;
	НастройкиСВидомСравненияРавно 		= Новый Соответствие;
	
	КомпоновщикНастроекКД 				= КомпоновщикНастроек;
	ПользовательскиеНастройкиКД 		= КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД 						= КомпоновщикНастроекКД.ПолучитьНастройки();
	
	ДополнительныеНастройкиЭлементов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПользовательскиеНастройкиКД.ДополнительныеСвойства, "ЭлементыФормы");
	
	Если ДополнительныеНастройкиЭлементов = Неопределено Тогда
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	
	ГруппыВывода = Новый Структура;
	ГруппыВывода.Вставить("Быстрые", Новый Структура("Порядок, Размер", Новый Массив, 0));
	
	ЕстьЗагрузкаДанныхИзФайла = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла");
	
	ВыводимыеНастройки = Информация.ПользовательскиеНастройки.Скопировать(
		Новый Структура("ВыводРазрешен, Быстрая", Истина, Истина));
	ВыводимыеНастройки.Сортировать("ИндексВКоллекции Возр");
	
	Прочее = Новый Структура;
	Прочее.Вставить("Связи", 								Связи);
	Прочее.Вставить("ОтчетОбъект", 							Неопределено);
	Прочее.Вставить("ПараметрыЗаполнения", 					ПараметрыЗаполнения);
	Прочее.Вставить("ПутьККомпоновщику", 					"КомпоновщикНастроек");
	Прочее.Вставить("ЕстьЗагрузкаДанныхИзФайла", 			ЕстьЗагрузкаДанныхИзФайла);
	Прочее.Вставить("ДополнительныеНастройкиЭлементов", 	ДополнительныеНастройкиЭлементов);
	Прочее.Вставить("ИменаОсновныхРеквизитовФормы", 		ИменаОсновныхРеквизитовФормы);
	Прочее.Вставить("ИменаЭлементовДляУстановкиСвязей", 	ИменаЭлементовДляУстановкиСвязей);
	Прочее.Вставить("СоответствиеИменОбъектовМетаданных", 	СоответствиеИменОбъектовМетаданных);
	Прочее.Вставить("ДобавленныеПоляВвода", 				ДобавленныеПоляВвода);
	Прочее.Вставить("ДобавленныеСтандартныеПериоды", 		ДобавленныеСтандартныеПериоды);
	Прочее.Вставить("ДобавленныеСпискиЗначений", 			Неопределено);
	Прочее.Вставить("ЕстьОтборыСУсловиями", 				Ложь);
	
	ГруппаВывода = ГруппыВывода.Быстрые;
	
	Для Каждого СвойстваНастройки Из ВыводимыеНастройки Цикл
		
		СоответствиеПользовательскихНастроек.Вставить(
			СвойстваНастройки.ИдентификаторЭлемента, СвойстваНастройки.ИдентификаторКД);
		
		Если СвойстваНастройки.НастройкаВарианта <> Неопределено Тогда
			ПоискНастройкиВарианта = Новый Структура;
			ПоискНастройкиВарианта.Вставить("ИдентификаторУзлаКД", 		СвойстваНастройки.СтрокаДерева.ИдентификаторКД);
			ПоискНастройкиВарианта.Вставить("ИмяКоллекции", 			СвойстваНастройки.НастройкаВарианта.ИмяКоллекции);
			ПоискНастройкиВарианта.Вставить("ИдентификаторЭлементаКД", 	СвойстваНастройки.НастройкаВарианта.ИдентификаторКД);
			СоответствиеНастроекВарианта.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ПоискНастройкиВарианта);
		КонецЕсли;
		
		ВывестиЭлементыНастройки(ЭтотОбъект, Элементы, СвойстваНастройки, ГруппаВывода, Прочее);
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 05.03.2020 CRM-376
	ВывестиПоПорядку(ЭтотОбъект, ГруппаВывода, Элементы.БыстрыеНастройки, 2, Ложь);
	// До изменения
	//ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппаВывода, Элементы.БыстрыеНастройки, 2, Ложь);
	// -- VOG Солодов В.В. 05.03.2020
	
	// Удаление старых и добавление новых реквизитов.
	Для Каждого КлючИЗначение Из ПараметрыЗаполнения.Реквизиты.Существующие Цикл
		ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	ИзменитьРеквизиты(ПараметрыЗаполнения.Реквизиты.Добавляемые, ПараметрыЗаполнения.Реквизиты.Удаляемые);
	
	// Поля ввода (установка значений и связей).
	Для Каждого КлючИЗначение Из ДобавленныеПоляВвода Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЭтотОбъект[ИмяРеквизита] = КлючИЗначение.Значение;
		Элементы[ИмяРеквизита].ПутьКДанным = ИмяРеквизита;
	КонецЦикла;
	
	// Стандартные периоды (установка значений и связей).
	Для Каждого СвойстваНастройки Из ДобавленныеСтандартныеПериоды Цикл
		Дополнительно = СвойстваНастройки.Дополнительно;
		ЭтотОбъект[Дополнительно.ЗначениеИмя] = СвойстваНастройки.Значение;
		Элементы[Дополнительно.ПериодНачалоИмя].ПутьКДанным    = Дополнительно.ЗначениеИмя + ".ДатаНачала";
		Элементы[Дополнительно.ПериодОкончаниеИмя].ПутьКДанным = Дополнительно.ЗначениеИмя + ".ДатаОкончания";
	КонецЦикла;
	
	// Сохранение соответствий для быстрого поиска в данные формы.
	БыстрыйПоискПользовательскихНастроек 	= Новый ФиксированноеСоответствие(СоответствиеПользовательскихНастроек);
	БыстрыйПоискИменОбъектовМетаданных 		= Новый ФиксированноеСоответствие(СоответствиеИменОбъектовМетаданных);
	БыстрыйПоискНастроекВарианта 			= Новый ФиксированноеСоответствие(СоответствиеНастроекВарианта);
	
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ЭлементыФормы", ДополнительныеНастройкиЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиЭлементыНастройки(Форма, Элементы, СвойстваНастройки, ГруппаВывода, Прочее)
	
	ЭлементВывода = Новый Структура("Размер, ИмяЭлемента1, ИмяЭлемента2");
	ЭлементВывода.Размер = 1;
	
	ШаблонИмениЭлемента = СвойстваНастройки.Тип + "_%1_" + СвойстваНастройки.ИдентификаторЭлемента;
	
	// Группа требуется для вывода некоторых типов полей
	Если СвойстваНастройки.ТипЭлементов = "СтандартныйПериод"
		Или СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
		ГруппаИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Группа");
		
		Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.НеОтсортированное);
		Группа.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение 			= ОтображениеОбычнойГруппы.Нет;
		Группа.Заголовок 			= СвойстваНастройки.Представление;
		Группа.ОтображатьЗаголовок 	= Ложь;
	КонецЕсли;
	
	// Условие
	ВыводитьУсловие = (СвойстваНастройки.Тип = "ЭлементОтбора"
		И СвойстваНастройки.ТипЭлементов <> "СтандартныйПериод"
		И СвойстваНастройки.ТипЭлементов <> "ТолькоФлажокЗначения"
		И Не СвойстваНастройки.ВыводитьТолькоФлажок);
	
	Если ВыводитьУсловие Тогда
		Прочее.ЕстьОтборыСУсловиями = Истина;
		
		КомандаВидСравненияИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "ВидСравнения");
		КомандаВидСравнения 			= Форма.Команды.Добавить(КомандаВидСравненияИмя);
		КомандаВидСравнения.Действие 	= "Подключаемый_ИзменитьВидСравнения";
		КомандаВидСравнения.Заголовок 	= НСтр("ru = 'Изменить условие отбора...'");
		КомандаВидСравнения.Подсказка 	= КомандаВидСравнения.Заголовок; // Для платформы.
		КомандаВидСравнения.Отображение = ОтображениеКнопки.Текст;
		КомандаВидСравнения.Картинка 	= БиблиотекаКартинок.ВидСравнения;
	КонецЕсли;
	
	// Флажок использования
	Если СвойстваНастройки.ВыводитьФлажок Тогда
		ФлажокИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Использование");
		
		Если СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
			ГруппаДляФлажка = Группа;
			ЭлементВывода.ИмяЭлемента1 = ГруппаИмя;
		Иначе
			ГруппаДляФлажка = Элементы.НеОтсортированное;
			ЭлементВывода.ИмяЭлемента1 = ФлажокИмя;
		КонецЕсли;
		
		ЗаголовокФлажка = СвойстваНастройки.Представление;
		Если ВыводитьУсловие
			И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
			И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке
			И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Содержит
			И СвойстваНастройки.ТипЭлементов <> "УсловиеВРежимеПросмотра" Тогда
			ЗаголовокФлажка = ЗаголовокФлажка + " (" + НРег(Строка(СвойстваНастройки.ВидСравнения)) + ")";
		КонецЕсли;
		Если Не СвойстваНастройки.ВыводитьТолькоФлажок Тогда
			ЗаголовокФлажка = ЗаголовокФлажка + ":";
		КонецЕсли;
		
		Флажок = Элементы.Добавить(ФлажокИмя, Тип("ПолеФормы"), ГруппаДляФлажка);
		Флажок.Вид 			= ВидПоляФормы.ПолеФлажка;
		Флажок.Заголовок 	= ЗаголовокФлажка;
		Если СтрДлина(ЗаголовокФлажка) > 40 Тогда // Если заголовок существенно длиннее остальных заголовков, переносим его
			Флажок.ВысотаЗаголовка = 2;
		КонецЕсли;
		Флажок.ПутьКДанным 
			= Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].Использование";
		Флажок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Флажок.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
		
		Если ВыводитьУсловие Тогда
			КнопкаИмя 
				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "ВидСравнения_Использование");
			КнопкаВидСравнения = Элементы.Добавить(КнопкаИмя, Тип("КнопкаФормы"), Флажок.КонтекстноеМеню);
			КнопкаВидСравнения.ИмяКоманды = КомандаВидСравненияИмя;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
		Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
		
		Если СвойстваНастройки.ВводСписком Тогда
			СвойстваНастройки.ОтмеченныеЗначения = ОтчетыКлиентСервер.ЗначенияСписком(СвойстваНастройки.Значение);
		КонецЕсли;
		
		// Сохранение параметров выбора настройки в дополнительных свойствах пользовательских настроек
		НастройкиЭлемента = Новый Структура("Представление, ВыводитьФлажок,
		|ВводСписком, ОписаниеТипов, ПараметрыВыбора, ЗначенияДляВыбора, ЗначенияДляВыбораЗаполнены,
		|БыстрыйВыбор, ОграничиватьВыборУказаннымиЗначениями, ВыборГруппИЭлементов, ФормаВыбора");
		
		НастройкиЭлемента.ФормаВыбора = СвойстваНастройки.ДоступнаяНастройкаКД.ФормаВыбора;
		НастройкиЭлемента.ЗначенияДляВыбораЗаполнены = Ложь;
		ЗаполнитьЗначенияСвойств(НастройкиЭлемента, СвойстваНастройки);
		Прочее.ДополнительныеНастройкиЭлементов.Вставить(СвойстваНастройки.ИдентификаторЭлемента, НастройкиЭлемента);
		
	КонецЕсли;
	
	// Поля для значений
	Если СвойстваНастройки.ТипЭлементов <> "" Тогда
		
		ИнформацияОТипах = СвойстваНастройки.ИнформацияОТипах;
		
		// Вывод
		ЗначениеИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Значение");
		
		Если СвойстваНастройки.ТипЭлементов = "ТолькоФлажокЗначения" Тогда
			
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя, СвойстваНастройки.ОписаниеТипов);
			
			ЭлементВывода.ИмяЭлемента1 = ЗначениеИмя;
			
			ПолеФлажка = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеФлажка.Вид 					= ВидПоляФормы.ПолеФлажка;
			ПолеФлажка.Заголовок 			= СвойстваНастройки.Представление;
			Если СтрДлина(СвойстваНастройки.Представление) > 40 Тогда // Если заголовок существенно длиннее остальных заголовков, переносим его.
				ПолеФлажка.ВысотаЗаголовка 	= 2;
			КонецЕсли;
			ПолеФлажка.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Право;
			ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокЗначения_ПриИзменении");
			
			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения = Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеФлажка.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды = КомандаВидСравненияИмя;
			КонецЕсли;
			
			Прочее.ДобавленныеПоляВвода.Вставить(ЗначениеИмя, СвойстваНастройки.Значение);
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "УсловиеВРежимеПросмотра" Тогда
			
			ЭлементВывода.ИмяЭлемента2 = ЗначениеИмя;
			
			ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид 					= ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок 			= СвойстваНастройки.Представление;
			ПолеВвода.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВвода.ТолькоПросмотр 		= Истина;
			ПолеВвода.ПутьКДанным 
				= Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].ВидСравнения";
			ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_ВидСравнения_НачалоВыбора");
			
			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения = Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеВвода.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды = КомандаВидСравненияИмя;
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком" Тогда
			
			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			
			ЭлементВывода.ИмяЭлемента2 = ЗначениеИмя;
			
			ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид 					= ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок 			= СвойстваНастройки.Представление;
			ПолеВвода.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			Если СтрДлина(СвойстваНастройки.Представление) > 40 Тогда // Если заголовок существенно длиннее остальных заголовков, переносим его.
				ПолеВвода.ВысотаЗаголовка 	= 2;
			КонецЕсли;
			
			// Связь с СКД
			ПолеВвода.ПутьКДанным 
				= Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].Значение";
			
			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
				Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
				
				ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВвода_ПриИзменении");
				
				Если СвойстваНастройки.ВводСписком Тогда
					ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_СписокКомпоновщика_НачалоВыбора");
				КонецЕсли;
				
				ПолеВвода.БыстрыйВыбор = СвойстваНастройки.БыстрыйВыбор;
				ЗаполнитьЗначенияСвойств(
					ПолеВвода,
					СвойстваНастройки.ДоступнаяНастройкаКД,
					"Маска, ФормаВыбора, ФорматРедактирования");
				
				ВывозитьКнопкуОчистки = Истина;
				Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
					ПолеВвода.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
					ВывозитьКнопкуОчистки 
						= СвойстваНастройки.ДоступнаяНастройкаКД.Использование <> ИспользованиеПараметраКомпоновкиДанных.Всегда;
				КонецЕсли;
				
				ПолеВвода.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
				
				// Поля ввода следующих типов не растягиваются по горизонтали и не имеют кнопки очистки:
				// 	Дата, Булево, Число, Тип
				ПолеВвода.КнопкаОткрытия 			= Ложь;
				ПолеВвода.КнопкаРегулирования 		= Ложь;
				ПолеВвода.КнопкаОчистки 			= ИнформацияОТипах.СодержитОбъектныеТипы И ВывозитьКнопкуОчистки;
				ПолеВвода.РастягиватьПоГоризонтали 	= ИнформацияОТипах.СодержитОбъектныеТипы;
				
				Если Не СвойстваНастройки.ВводСписком Тогда
					
					Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями
						И СвойстваНастройки.ЗначенияДляВыбора.Количество() > 0 Тогда
						Для Каждого ЭлементСпискаВФорме Из СвойстваНастройки.ЗначенияДляВыбора Цикл
							ЗаполнитьЗначенияСвойств(ПолеВвода.СписокВыбора.Добавить(), ЭлементСпискаВФорме);
						КонецЦикла;
						ПолеВвода.РежимВыбораИзСписка 		= Истина;
						ПолеВвода.КнопкаСоздания 			= Ложь;
						ПолеВвода.КнопкаВыбора 				= Ложь;
						ПолеВвода.КнопкаВыпадающегоСписка 	= Истина;
						ПолеВвода.РастягиватьПоГоризонтали 	= Истина;
						
					ИначеЕсли СвойстваНастройки.НастройкаВарианта.СвязиПараметровВыбора.Количество() > 0
						Или СвойстваНастройки.НастройкаВарианта.СвязиПоМетаданным.Количество() > 0 Тогда
						// Когда есть отключаемые связи "ПоМетаданным" или "ПараметровВыбора" от подчиненного,
						// тогда для выбора используется прикладная логика
						ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_ЗначениеКомпоновщика_НачалоВыбора");
						
					КонецЕсли;
					
					// Для платформы (переопределение доступных значений на клиенте).
					Если СвойстваНастройки.НастройкаВарианта.СписокЗначенийПереопределен Тогда
						
						РезультатКлиента = Прочее.ПараметрыЗаполнения.Результат;
						СвоиСпискиВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатКлиента, "СвоиСпискиВыбора");
						
						Если СвоиСпискиВыбора = Неопределено Тогда
							СвоиСпискиВыбора = Новый Массив;
							РезультатКлиента.Вставить("СвоиСпискиВыбора", СвоиСпискиВыбора);
						КонецЕсли;
						
						Если СвоиСпискиВыбора.Найти(СвойстваНастройки.ИдентификаторЭлемента) = Неопределено Тогда
							СвоиСпискиВыбора.Добавить(СвойстваНастройки.ИдентификаторЭлемента);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Увеличение размера поля типа 'Дата' чтобы вмещались варианты выбора 'СтандартнаяДатаНачала'
				Если ПолеВвода.РастягиватьПоГоризонтали = Ложь
					И ИнформацияОТипах.СодержитТипДата
					И ИнформацияОТипах.КоличествоТипов = 1 Тогда
					
					ПолеВвода.РастягиватьПоГоризонтали 	= Истина;
					ПолеВвода.АвтоМаксимальнаяШирина 	= Ложь;
					ПолеВвода.МаксимальнаяШирина 		= 25;
					
				КонецЕсли;
				
				// Условие.
				Если ВыводитьУсловие Тогда
					КнопкаВидСравнения = Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ПолеВвода.КонтекстноеМеню);
					КнопкаВидСравнения.ИмяКоманды = КомандаВидСравненияИмя;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Тогда
			
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
			ЭлементВывода.Размер = 1;
			ЭлементВывода.ИмяЭлемента2 = ГруппаИмя;
			
			ПериодНачалоИмя 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Начало");
			ПериодОкончаниеИмя 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Окончание");
			ТиреИмя 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Тире");
			КнопкаВыбораИмя 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "КнопкаВыбора");
			
			// Реквизиты.
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя, "СтандартныйПериод");
			
			// Начало произвольного периода.
			ПериодНачало = Элементы.Добавить(ПериодНачалоИмя, Тип("ПолеФормы"), Группа);
			ПериодНачало.Вид 					= ВидПоляФормы.ПолеВвода;
			ПериодНачало.Ширина 				= 9;
			ПериодНачало.РастягиватьПоГоризонтали = Ложь;
			ПериодНачало.КнопкаВыбора 			= Истина;
			ПериодНачало.КнопкаОткрытия 		= Ложь;
			ПериодНачало.КнопкаОчистки 			= Ложь;
			ПериодНачало.КнопкаРегулирования 	= Ложь;
			ПериодНачало.РедактированиеТекста 	= Истина;
			ПериодНачало.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПериодНачало.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении");
			
			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
				ПериодНачало.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
			КонецЕсли;
			
			Тире = Элементы.Добавить(ТиреИмя, Тип("ДекорацияФормы"), Группа);
			Тире.Вид 		= ВидДекорацииФормы.Надпись;
			Тире.Заголовок 	= Символ(8211); // Среднее тире (en dash).
			
			// Окончание произвольного периода.
			ПериодОкончание = Элементы.Добавить(ПериодОкончаниеИмя, Тип("ПолеФормы"), Группа);
			ПериодОкончание.Вид = ВидПоляФормы.ПолеВвода;
			ЗаполнитьЗначенияСвойств(ПериодОкончание, ПериодНачало, "РастягиватьПоГоризонтали, Ширина, ПоложениеЗаголовка, 
			|РедактированиеТекста, КнопкаВыбора, КнопкаОткрытия, КнопкаОчистки, КнопкаРегулирования, АвтоОтметкаНезаполненного");
			ПериодОкончание.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении");
			
			// Кнопка выбора.
			КомандаВыбора = Форма.Команды.Добавить(КнопкаВыбораИмя);
			КомандаВыбора.Действие 		= "Подключаемый_ВыбратьПериод";
			КомандаВыбора.Заголовок 	= НСтр("ru = 'Выбрать период...'");
			КомандаВыбора.Подсказка 	= КомандаВыбора.Заголовок; // Для платформы.
			КомандаВыбора.Отображение 	= ОтображениеКнопки.Картинка;
			КомандаВыбора.Картинка 		= БиблиотекаКартинок.Выбрать;
			
			КнопкаВыбора = Элементы.Добавить(КнопкаВыбораИмя, Тип("КнопкаФормы"), Группа);
			КнопкаВыбора.ИмяКоманды = КнопкаВыбораИмя;
			
			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ЗначениеИмя", 			ЗначениеИмя);
			Дополнительно.Вставить("ПериодНачалоИмя", 		ПериодНачалоИмя);
			Дополнительно.Вставить("ПериодОкончаниеИмя", 	ПериодОкончаниеИмя);
			СвойстваНастройки.Дополнительно = Дополнительно;
			Прочее.ДобавленныеСтандартныеПериоды.Добавить(СвойстваНастройки);
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
			
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
			ЭлементВывода.Размер = 5;
			ЭлементВывода.ИмяЭлемента1 = ГруппаИмя;
			
			ГруппаЗаголовокИмя 		= СтрШаблон(ШаблонИмениЭлемента, "ГруппаЗаголовка");
			ДекорацияИмя 			= СтрШаблон(ШаблонИмениЭлемента, "Декорация");
			ТаблицаИмя 				= СтрШаблон(ШаблонИмениЭлемента, "СписокЗначений");
			ГруппаКолонокИмя 		= СтрШаблон(ШаблонИмениЭлемента, "ГруппаКолонок");
			КолонкаИспользованиеИмя = СтрШаблон(ШаблонИмениЭлемента, "Колонка_Использование");
			КолонкаЗначениеИмя 		= СтрШаблон(ШаблонИмениЭлемента, "Колонка_Значение");
			КоманднаяПанельИмя 		= СтрШаблон(ШаблонИмениЭлемента, "КоманднаяПанель");
			КнопкаПодборИмя 		= СтрШаблон(ШаблонИмениЭлемента, "Подбор");
			КнопкаВставитьИмя 		= СтрШаблон(ШаблонИмениЭлемента, "ВставитьИзБуфера");
			
			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ТаблицаИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, КолонкаЗначениеИмя);
			
			Если Не СвойстваНастройки.ВыводитьФлажок Или Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				
				// Группа-строка для заголовка и командной панели таблицы.
				ГруппаЗаголовокТаблицы = Элементы.Добавить(ГруппаЗаголовокИмя, Тип("ГруппаФормы"), Группа);
				ГруппаЗаголовокТаблицы.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаЗаголовокТаблицы.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаЗаголовокТаблицы.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ГруппаЗаголовокТаблицы.ОтображатьЗаголовок = Ложь;
				
				// Флажок уже создан.
				Если СвойстваНастройки.ВыводитьФлажок Тогда
					Элементы.Переместить(Флажок, ГруппаЗаголовокТаблицы);
				КонецЕсли;
				
				// Заголовок / Пустая декорация.
				ПустаяДекорация = Элементы.Добавить(ДекорацияИмя, Тип("ДекорацияФормы"), ГруппаЗаголовокТаблицы);
				ПустаяДекорация.Вид 						= ВидДекорацииФормы.Надпись;
				ПустаяДекорация.Заголовок 					= ?(СвойстваНастройки.ВыводитьФлажок, " ", СвойстваНастройки.Представление + ":");
				ПустаяДекорация.АвтоМаксимальнаяШирина 		= Ложь;
				ПустаяДекорация.РастягиватьПоГоризонтали 	= Истина;
				
				// Кнопки.
				Если Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					Если ИнформацияОТипах.СодержитСсылочныеТипы Тогда
						КомандаПодбор = Форма.Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие 	= "Подключаемый_СписокСПодбором_Подбор";
						КомандаПодбор.Заголовок = НСтр("ru = 'Подбор'");
					Иначе
						КомандаПодбор = Форма.Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие 	= "Подключаемый_СписокСПодбором_Добавить";
						КомандаПодбор.Заголовок = НСтр("ru = 'Добавить'");
						КомандаПодбор.Картинка 	= БиблиотекаКартинок.СоздатьЭлементСписка;
					КонецЕсли;
					
					КнопкаПодбор = Элементы.Добавить(КнопкаПодборИмя, Тип("КнопкаФормы"), ГруппаЗаголовокТаблицы);
					КнопкаПодбор.ИмяКоманды 	= КнопкаПодборИмя;
					КнопкаПодбор.Вид 			= ВидКнопкиФормы.Гиперссылка;
					КнопкаПодбор.Отображение 	= ОтображениеКнопки.Текст;
					
					Если СвойстваНастройки.ИнформацияОТипах.СодержитСсылочныеТипы И Прочее.ЕстьЗагрузкаДанныхИзФайла Тогда
						КомандаВставить = Форма.Команды.Добавить(КнопкаВставитьИмя);
						КомандаВставить.Действие 	= "Подключаемый_СписокСПодбором_ВставитьИзБуфера";
						КомандаВставить.Заголовок 	= НСтр("ru = 'Вставить из буфера обмена...'");
						КомандаВставить.Подсказка 	= КомандаВставить.Заголовок; // Для платформы.
						КомандаВставить.Картинка 	= БиблиотекаКартинок.ВставитьИзБуфераОбмена;
						
						КнопкаВставить = Элементы.Добавить(КнопкаВставитьИмя, Тип("КнопкаФормы"), ГруппаЗаголовокТаблицы);
						КнопкаВставить.ИмяКоманды 	= КнопкаВставитьИмя;
						КнопкаВставить.Вид 			= ВидКнопкиФормы.Гиперссылка;
						КнопкаВставить.Отображение 	= ОтображениеКнопки.Картинка;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// Реквизит.
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ТаблицаИмя, "СписокЗначений");
			
			// Группа с отступом и таблицей.
			ГруппаСОтступом = Элементы.Добавить(ГруппаИмя + "Отступ", Тип("ГруппаФормы"), Группа);
			ГруппаСОтступом.Вид 				= ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСОтступом.Группировка 		= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаСОтступом.Отображение 		= ОтображениеОбычнойГруппы.Нет;
			ГруппаСОтступом.Заголовок 			= СвойстваНастройки.Представление;
			ГруппаСОтступом.ОтображатьЗаголовок = Ложь;
			
			// Декорация отступа.
			ПустаяДекорация = Элементы.Добавить(ДекорацияИмя + "Отступ", Тип("ДекорацияФормы"), ГруппаСОтступом);
			ПустаяДекорация.Вид 						= ВидДекорацииФормы.Надпись;
			ПустаяДекорация.Заголовок 					= "     ";
			ПустаяДекорация.РастягиватьПоГоризонтали 	= Ложь;
			
			// Таблица.
			ТаблицаФормы = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), ГруппаСОтступом);
			ТаблицаФормы.Отображение 				= ОтображениеТаблицы.Список;
			ТаблицаФормы.Заголовок 					= СвойстваНастройки.Представление;
			ТаблицаФормы.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТаблицаФормы.ПоложениеКоманднойПанели 	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
			ТаблицаФормы.ВертикальныеЛинии 			= Ложь;
			ТаблицаФормы.ГоризонтальныеЛинии 		= Ложь;
			ТаблицаФормы.Шапка 						= Ложь;
			ТаблицаФормы.Подвал 					= Ложь;
			ТаблицаФормы.ИзменятьПорядокСтрок 		= Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями;
			ТаблицаФормы.ИзменятьСоставСтрок 		= Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями;
			ТаблицаФормы.РастягиватьПоГоризонтали 	= Истина;
			ТаблицаФормы.РастягиватьПоВертикали 	= Истина;
			ТаблицаФормы.Высота 					= 3;
			
			Если СвойстваНастройки.ВыводитьФлажок Тогда
				Если Не СвойстваНастройки.ПользовательскаяНастройкаКД.Использование Тогда
					ТаблицаФормы.ЦветТекста = Форма.ЦветНеактивныхЗначенийТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			// Группа колонок "в ячейке".
			ГруппаКолонок = Элементы.Добавить(ГруппаКолонокИмя, Тип("ГруппаФормы"), ТаблицаФормы);
			ГруппаКолонок.Вид 			= ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.Группировка 	= ГруппировкаКолонок.ВЯчейке;
			
			// Колонка "Использование".
			КолонкаИспользованиеЭлемент = Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаИспользованиеЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			
			// Колонка "Значение".
			КолонкаЗначениеЭлемент = Элементы.Добавить(КолонкаЗначениеИмя, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаЗначениеЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаЗначениеЭлемент.БыстрыйВыбор = СвойстваНастройки.БыстрыйВыбор;
			
			ЗаполнитьЗначенияСвойств(
				КолонкаЗначениеЭлемент,
				СвойстваНастройки.ДоступнаяНастройкаКД,
				"Маска, ФормаВыбора, ФорматРедактирования");
			
			КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
			Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				КолонкаЗначениеЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			// Заполнение имен объектов метаданных в разрезах типов и идентификаторов элементов (для предустановленных).
			// Используется при клике по кнопке "Подбор" для получения имени формы подбора.
			Если ЗначениеЗаполнено(КолонкаЗначениеЭлемент.ФормаВыбора) Тогда
				Прочее.СоответствиеИменОбъектовМетаданных.Вставить(
					СвойстваНастройки.ИдентификаторЭлемента, КолонкаЗначениеЭлемент.ФормаВыбора);
			КонецЕсли;
			
			// Фиксированные параметры выбора.
			Если СвойстваНастройки.ПараметрыВыбора.Количество() > 0 Тогда
				КолонкаЗначениеЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(СвойстваНастройки.ПараметрыВыбора);
			КонецЕсли;
			
			Если ВыводитьУсловие Тогда
				КнопкаВидСравнения = Элементы.Добавить(КомандаВидСравненияИмя, Тип("КнопкаФормы"), ТаблицаФормы.КонтекстноеМеню);
				КнопкаВидСравнения.ИмяКоманды 	= КомандаВидСравненияИмя;
			КонецЕсли;
			
			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ТаблицаИмя", 				ТаблицаИмя);
			Дополнительно.Вставить("ИмяКолонкиЗначение", 		КолонкаЗначениеИмя);
			Дополнительно.Вставить("ИмяКолонкиИспользование", 	КолонкаИспользованиеИмя);
			СвойстваНастройки.Дополнительно = Дополнительно;
			Прочее.ДобавленныеСпискиЗначений.Добавить(СвойстваНастройки);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементВывода.ИмяЭлемента1 = Неопределено Тогда
		ЗаголовокИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениЭлемента, "Заголовок");
		ПолеНадписи = Элементы.Добавить(ЗаголовокИмя, Тип("ДекорацияФормы"), Элементы.НеОтсортированное);
		ПолеНадписи.Вид       = ВидДекорацииФормы.Надпись;
		ПолеНадписи.Заголовок = СвойстваНастройки.Представление + ":";
		ЭлементВывода.ИмяЭлемента1 = ЗаголовокИмя;
	КонецЕсли;
	
	ГруппаВывода.Порядок.Добавить(ЭлементВывода);
	ГруппаВывода.Размер = ГруппаВывода.Размер + ЭлементВывода.Размер;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, РеквизитПолноеИмя, ТипРеквизита)
	
	Если ТипЗнч(ТипРеквизита) = Тип("ОписаниеТипов") Тогда
		ТипыДобавляемого = ТипРеквизита;
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Строка") Тогда
		ТипыДобавляемого = Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Массив") Тогда
		ТипыДобавляемого = Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Тип") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипРеквизита);
		ТипыДобавляемого = Новый ОписаниеТипов(МассивТипов);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипыСуществующего = ПараметрыЗаполнения.Реквизиты.Существующие.Получить(РеквизитПолноеИмя);
	Если ОписанияТиповСовпадают(ТипыСуществующего, ТипыДобавляемого) Тогда
		ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(РеквизитПолноеИмя);
	Иначе
		ПозицияТочки = СтрНайти(РеквизитПолноеИмя, ".");
		Если ПозицияТочки = 0 Тогда
			ПутьКРеквизиту = "";
			КраткоеИмяРеквизита = РеквизитПолноеИмя;
		Иначе
			ПутьКРеквизиту = Лев(РеквизитПолноеИмя, ПозицияТочки - 1);
			КраткоеИмяРеквизита = Сред(РеквизитПолноеИмя, ПозицияТочки + 1);
		КонецЕсли;
		
		ПараметрыЗаполнения.Реквизиты.Добавляемые.Добавить(
			Новый РеквизитФормы(КраткоеИмяРеквизита, ТипыДобавляемого, ПутьКРеквизиту));
		
		Если ТипыСуществующего <> Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(РеквизитПолноеИмя);
			ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(РеквизитПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписанияТиповСовпадают(ОписаниеТипов1, ОписаниеТипов2)
	
	Если ОписаниеТипов1 = Неопределено Или ОписаниеТипов2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОписаниеТипов1 = ОписаниеТипов2
		Или ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов1) = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов2);
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьОтключаемыеСвязи(Информация)
	
	ОтключаемыеСвязи.Очистить();
	Для Каждого ОписаниеСвязи Из Информация.ОтключаемыеСвязи Цикл
		Связь = ОтключаемыеСвязи.Добавить();
		ЗаполнитьЗначенияСвойств(Связь, ОписаниеСвязи);
		Связь.ВедущийИдентификаторВФорме 		= ОписаниеСвязи.Ведущий.ИдентификаторЭлемента;
		Связь.ПодчиненныйИдентификаторВФорме 	= ОписаниеСвязи.Подчиненный.ИдентификаторЭлемента;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(ОбновитьКоманды = Истина)
		
	// Заголовок.
	ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
	Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
		Заголовок = ОтчетНаименованиеТекущегоВарианта;
	Иначе
		Заголовок = НастройкиОтчета.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресНастроекКомпоновщикаНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента) Экспорт
	
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Если ИдентификаторКД = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента) Экспорт
	
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	ВсеДополнительныеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ЭлементыФормы");
	Если ВсеДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВсеДополнительныеНастройки[ИдентификаторЭлемента];
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПараметрыВыбораОтбора(Форма, Элемент) Экспорт
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ЭлементКД = Форма.НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ЭлементКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДополнительныеНастройки = Форма.НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	Если ДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Представление, ЗначенияДляВыбора, ЗначенияДляВыбораЗаполнены, БыстрыйВыбор,
	|ОграничиватьВыборУказаннымиЗначениями, ОписаниеТипов, ВводСписком");
	ЗаполнитьЗначенияСвойств(Результат, ДополнительныеНастройки);
	
	Если ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Значение = ЭлементКД.ПравоеЗначение;
		Условие  = ЭлементКД.ВидСравнения;
	Иначе
		Значение = ЭлементКД.Значение;
		Условие  = ?(Результат.ВводСписком, ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	ВыборГруппИЭлементов = ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(Условие, ДополнительныеНастройки.ВыборГруппИЭлементов);
	
	// Стандартные параметры формы.
	Результат.Вставить("ЗакрыватьПриВыборе",            Истина);
	Результат.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	Результат.Вставить("Отбор",                         Новый Структура);
	// Стандартные параметры формы выбора (см. Расширение управляемой формы для динамического списка).
	Результат.Вставить("ВыборГруппИЭлементов",          ВыборГруппИЭлементов);
	Результат.Вставить("МножественныйВыбор",            Ложь);
	Результат.Вставить("РежимВыбора",                   Истина);
	// Предполагаемые реквизиты.
	Результат.Вставить("РежимОткрытияОкна",             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Результат.Вставить("РазрешитьНачалоПеретаскивания", Ложь);
	
	Результат.Вставить("ПутьКФорме", ДополнительныеНастройки.ФормаВыбора);
	
	Результат.Вставить("Значение",   Значение);
	Результат.Вставить("Отмеченные", ОтчетыКлиентСервер.ЗначенияСписком(Значение));
	Результат.Вставить("ПараметрыВыбора", Новый Массив);
	Результат.Вставить("КлючУникальности", ИдентификаторЭлемента);
	
	// Фиксированные параметры выбора и связи от скрытых ведущих (предопределенные в текущем контексте).
	Для Каждого ПараметрВыбора Из ДополнительныеНастройки.ПараметрыВыбора Цикл
		Если ПустаяСтрока(ПараметрВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Результат.ВводСписком Тогда
			Результат.ПараметрыВыбора.Добавить(ПараметрВыбора);
		Иначе
			Если ВРег(Лев(ПараметрВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				Результат.Отбор.Вставить(Сред(ПараметрВыбора.Имя, 7), ПараметрВыбора.Значение);
			Иначе
				Результат.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Динамические связи от ведущих.
	Связи = Форма.ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ПодчиненныйИдентификаторВФорме", ИдентификаторЭлемента));
	Для Каждого Связь Из Связи Цикл
		Если Не ЗначениеЗаполнено(Связь.ВедущийИдентификаторВФорме) Тогда
			Продолжить;
		КонецЕсли;
		ВедущийНастройкаКД = Форма.НайтиПользовательскуюНастройкуЭлемента(Связь.ВедущийИдентификаторВФорме);
		Если Не ВедущийНастройкаКД.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ВедущийНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗначениеВедущего = ВедущийНастройкаКД.ПравоеЗначение;
			УсловиеВедущего  = ВедущийНастройкаКД.ВидСравнения;
		Иначе
			ЗначениеВедущего = ВедущийНастройкаКД.Значение;
			ДополнительноВедущего = Форма.НайтиДополнительныеНастройкиЭлемента(Связь.ВедущийИдентификаторВФорме);
			Если ДополнительноВедущего.ВводСписком Тогда
				УсловиеВедущего = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				УсловиеВедущего = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗначениеВедущего) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияВедущего = ТипЗнч(ЗначениеВедущего);
		
		Если Связь.ТипСвязи = "ПоТипу" Тогда
			Если УсловиеВедущего <> ВидСравненияКомпоновкиДанных.Равно
				И УсловиеВедущего <> ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Связь.ПодчиненныйИмяПараметра) = Тип("Число") И Связь.ПодчиненныйИмяПараметра > 0 Тогда
				ТипСубконто = ВариантыОтчетовВызовСервера.ТипСубконто(ЗначениеВедущего, Связь.ПодчиненныйИмяПараметра);
				Если ТипЗнч(ТипСубконто) = Тип("ОписаниеТипов") Тогда
					ФильтрПоТипам = ТипСубконто.Типы();
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ФильтрПоТипам = Новый Массив;
				ФильтрПоТипам.Добавить(ТипЗначенияВедущего);
			КонецЕсли;
			ВычитаемыеТипы = Результат.ОписаниеТипов.Типы();
			ОписанияТиповПересекаются = Ложь;
			Для Каждого ТипКоторыйНадоОставить Из ФильтрПоТипам Цикл
				Индекс = ВычитаемыеТипы.Найти(ТипКоторыйНадоОставить);
				Если Индекс <> Неопределено Тогда
					ВычитаемыеТипы.Удалить(Индекс);
					ОписанияТиповПересекаются = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ОписанияТиповПересекаются Тогда
				Результат.ОписаниеТипов = Новый ОписаниеТипов(Результат.ОписаниеТипов, , ВычитаемыеТипы);
			КонецЕсли;
		ИначеЕсли Связь.ТипСвязи = "ПоМетаданным" Или Связь.ТипСвязи = "ПараметровВыбора" Тогда
			Если Не ЗначениеЗаполнено(Связь.ПодчиненныйИмяПараметра) Тогда
				Продолжить;
			КонецЕсли;
			Если Связь.ТипСвязи = "ПоМетаданным" И Не Связь.ВедущийТип.СодержитТип(ТипЗначенияВедущего) Тогда
				Продолжить;
			КонецЕсли;
			Если Результат.ВводСписком Тогда
				Результат.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(Связь.ПодчиненныйИмяПараметра, ЗначениеВедущего));
			Иначе
				Если ВРег(Лев(Связь.ПодчиненныйИмяПараметра, 6)) = ВРег("Отбор.") Тогда
					Результат.Отбор.Вставить(Сред(Связь.ПодчиненныйИмяПараметра, 7), ЗначениеВедущего);
				Иначе
					Результат.Вставить(Связь.ПодчиненныйИмяПараметра, ЗначениеВедущего);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОтразитьИзмененияВПодчиненных(Форма, ИдентификаторЭлемента, НастройкаКомпоновкиДанныхВедущего)
	
	// Очистка значений при изменении значения.
	Найденные = Форма.ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ВедущийИдентификаторВФорме", ИдентификаторЭлемента));
	Для Каждого Связь Из Найденные Цикл
		Если Не ЗначениеЗаполнено(Связь.ПодчиненныйИдентификаторВФорме) Тогда
			Продолжить;
		КонецЕсли;
		Если Связь.ТипСвязи = "ПараметровВыбора" Тогда
			Если Связь.ПодчиненныйДействие = РежимИзмененияСвязанногоЗначения.Очищать Тогда
				ОчиститьЗначениеПодчиненного(Форма, НастройкаКомпоновкиДанныхВедущего, Связь.ПодчиненныйИдентификаторВФорме);
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗначениеПодчиненного(Форма, НастройкаКомпоновкиДанныхВедущего, ИдентификаторПодчиненногоВФорме)
	ПодчиненныйНастройкаКД = Форма.НайтиПользовательскуюНастройкуЭлемента(ИдентификаторПодчиненногоВФорме);
	ПодчиненныйДополнительно = Форма.НайтиДополнительныеНастройкиЭлемента(ИдентификаторПодчиненногоВФорме);
	Если ПодчиненныйДополнительно = Неопределено Или ПодчиненныйНастройкаКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаКомпоновкиДанныхВедущего.Использование Тогда
		Если ПодчиненныйДополнительно.ВводСписком Тогда
			Если ТипЗнч(ПодчиненныйНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПодчиненныйНастройкаКД.Значение = Новый СписокЗначений;
			ИначеЕсли ТипЗнч(ПодчиненныйНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПодчиненныйНастройкаКД.ПравоеЗначение = Новый СписокЗначений;
			КонецЕсли;
		Иначе
			Если ТипЗнч(ПодчиненныйНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПодчиненныйНастройкаКД.Значение = Неопределено;
			ИначеЕсли ТипЗнч(ПодчиненныйНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПодчиненныйНастройкаКД.ПравоеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодчиненныйДополнительно.БыстрыйВыбор
		И Не ПодчиненныйДополнительно.ОграничиватьВыборУказаннымиЗначениями Тогда
		ПодчиненныйДополнительно.ЗначенияДляВыбораЗаполнены = Ложь;
		ПодчиненныйДополнительно.ЗначенияДляВыбора.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокКомпоновщикаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = ПараметрыВыбораОтбора(Форма, Элемент);
	Если ПараметрыВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ИдентификаторЭлемента", Прав(Элемент.Имя, 32));
	Обработчик = Новый ОписаниеОповещения("СписокКомпоновщикаЗавершениеВыбора", ЭтотОбъект, ПараметрыОбработчика);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыВыбора, ЭтотОбъект, , , , Обработчик, Блокировать);
КонецПроцедуры

&НаКлиенте
Процедура СписокКомпоновщикаЗавершениеВыбора(РезультатВыбора, ПараметрыОбработчика)
	Если ТипЗнч(РезультатВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	Форма = ПараметрыОбработчика.Форма;
	
	ИдентификаторЭлемента = ПараметрыОбработчика.ИдентификаторЭлемента;
	
	ПользовательскаяНастройкаКД = Форма.НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ДополнительныеНастройки = Форма.НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	
	// Загрузка выбранных значений в 2 списка.
	СписокЗначенийВСКД = Новый СписокЗначений;
	ЗаполнятьЗначенияДляВыбора = Не ДополнительныеНастройки.ОграничиватьВыборУказаннымиЗначениями
		Или Не ДополнительныеНастройки.ЗначенияДляВыбораЗаполнены;
	Если ЗаполнятьЗначенияДляВыбора Тогда
		ЗначенияДляВыбора = Новый СписокЗначений;
	КонецЕсли;
	Для Каждого ЭлементСпискаВФорме Из РезультатВыбора Цикл
		ЗначениеВФорме = ЭлементСпискаВФорме.Значение;
		Если ЗаполнятьЗначенияДляВыбора И ЗначенияДляВыбора.НайтиПоЗначению(ЗначениеВФорме) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияДляВыбора.Добавить(), ЭлементСпискаВФорме, "Значение, Представление");
		КонецЕсли;
		Если ЭлементСпискаВФорме.Пометка Тогда
			ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(СписокЗначенийВСКД, ЗначениеВФорме, ЭлементСпискаВФорме.Представление, Истина);
		КонецЕсли;
	КонецЦикла;
	Если ЗаполнятьЗначенияДляВыбора Тогда
		ДополнительныеНастройки.ЗначенияДляВыбора = ЗначенияДляВыбора;
		ДополнительныеНастройки.ЗначенияДляВыбораЗаполнены = Истина;
	КонецЕсли;
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.ПравоеЗначение = СписокЗначенийВСКД;
	Иначе
		ПользовательскаяНастройкаКД.Значение = СписокЗначенийВСКД;
	КонецЕсли;
	
	// Включение флажка Использование.
	ПользовательскаяНастройкаКД.Использование = Истина;
	
	Форма.ПользовательскиеНастройкиМодифицированы = Истина;
	#Если ВебКлиент Тогда
		Форма.ОбновитьОтображениеДанных(); // Для платформы.
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеКомпоновщикаНачалоВыбора(Форма, Элемент, ЗначенияДляВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = ПараметрыВыбораОтбора(Форма, Элемент);
	Если ПараметрыВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора.Вставить("МножественныйВыбор", Ложь);
	
	Контекст = Новый Структура;
	Контекст.Вставить("Элемент",         Элемент);
	Контекст.Вставить("Форма",           Форма);
	Контекст.Вставить("Идентификатор",   Прав(Элемент.Имя, 32));
	Контекст.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	
	// Полное имя формы выбора.
	// Свойство "ФормаВыбора" недоступно на клиенте даже для чтения,
	//   поэтому для хранения предустановленных имен форм выбора используется коллекция БыстрыйПоискИменОбъектовМетаданных.
	Если ЗначениеЗаполнено(ПараметрыВыбора.ПутьКФорме) Тогда
		Обработчик = Новый ОписаниеОповещения("ЗначениеКомпоновщикаЗавершениеВыбора", ЭтотОбъект, Контекст);
		ОткрытьФорму(
			ПараметрыВыбора.ПутьКФорме,
			ПараметрыВыбора,
			Контекст.Форма,
			,
			,
			,
			Обработчик,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		// Выбор типа из списка.
		Обработчик = Новый ОписаниеОповещения("ЗначениеКомпоновщикаПоказатьВыборСсылкиПослеВыбораТипа", ЭтотОбъект, Контекст);
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(ПараметрыВыбора.ОписаниеТипов.Типы());
		Если СписокВыбора.Количество() = 1 Тогда // Один тип - выбор не требуется.
			ВыполнитьОбработкуОповещения(Обработчик, СписокВыбора[0]);
		Иначе
			Форма.ПоказатьВыборИзМеню(Обработчик, СписокВыбора);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеКомпоновщикаПоказатьВыборСсылкиПослеВыбораТипа(ПутьКФормеИлиЭлементСписка, Контекст)
	
	Если ТипЗнч(ПутьКФормеИлиЭлементСписка) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ЗначениеКомпоновщикаЗавершениеВыбора", ЭтотОбъект, Контекст);
	ПараметрыВыбора = Контекст.ПараметрыВыбора;
	
	Тип = ПутьКФормеИлиЭлементСписка.Значение;
	ПараметрыВыбораТипа = ПараметрыВыбораТипа(Тип, ПараметрыВыбора);
	Если ПараметрыВыбораТипа = Неопределено Тогда
		ВыбратьЗначениеПримитивногоТипа(
			Контекст.Форма,
			Тип,
			ПараметрыВыбора.ОписаниеТипов,
			ПараметрыВыбора.Значение,
			ПараметрыВыбора.Представление,
			Обработчик);
	ИначеЕсли ПараметрыВыбораТипа.БыстрыйВыбор Тогда
		Контекст.Форма.ПоказатьВыборИзМеню(Обработчик, ПараметрыВыбораТипа.ЗначенияДляВыбора);
	Иначе
		ОткрытьФорму(
			ПараметрыВыбораТипа.ПутьКФорме,
			ПараметрыВыбора,
			Контекст.Форма,
			,
			,
			,
			Обработчик,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеКомпоновщикаЗавершениеВыбора(СсылкаИлиЭлементСписка, Контекст)
	Если ТипЗнч(СсылкаИлиЭлементСписка) = Тип("ЭлементСпискаЗначений") Тогда
		Ссылка = СсылкаИлиЭлементСписка.Значение;
	Иначе
		Ссылка = СсылкаИлиЭлементСписка;
	КонецЕсли;
	Если Не Контекст.ПараметрыВыбора.ОписаниеТипов.СодержитТип(ТипЗнч(Ссылка)) Или Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Контекст.Форма;
	
	ЭлементКД = Форма.НайтиПользовательскуюНастройкуЭлемента(Контекст.Идентификатор);
	ДополнительныеНастройки = Форма.НайтиДополнительныеНастройкиЭлемента(Контекст.Идентификатор);
	
	Если ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементКД.ПравоеЗначение = Ссылка;
	Иначе
		ЭлементКД.Значение = Ссылка;
	КонецЕсли;
	
	ЭлементКД.Использование = Истина; // Включение флажка.
	
	ОтразитьИзмененияВПодчиненных(Форма, Контекст.Идентификатор, ЭлементКД);
	
	Форма.ПользовательскиеНастройкиМодифицированы = Истина;
	#Если ВебКлиент Тогда
		Форма.ОбновитьОтображениеДанных(); // Для платформы.
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеПримитивногоТипа(Форма, ТипЗначения, ОписаниеТипов, ТекущееЗначение, ПредставлениеПоля, Обработчик)
	СписокВыбора = Новый СписокЗначений;
	Если ТипЗначения = Тип("ВидДвиженияБухгалтерии") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокВыбора, ВидДвиженияБухгалтерии);
	ИначеЕсли ТипЗначения = Тип("ВидДвиженияНакопления") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокВыбора, ВидДвиженияНакопления);
	ИначеЕсли ТипЗначения = Тип("ВидПериодаРегистраРасчета") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокВыбора, ВидПериодаРегистраРасчета);
	ИначеЕсли ТипЗначения = Тип("ВидСчета") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокВыбора, ВидСчета);
	ИначеЕсли ТипЗначения = Тип("ВидТочкиМаршрутаБизнесПроцесса") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокВыбора, ВидТочкиМаршрутаБизнесПроцесса);
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		ПоказатьВводЧисла(
			Обработчик,
			ТекущееЗначение,
			ПредставлениеПоля,
			ОписаниеТипов.КвалификаторыЧисла.Разрядность,
			ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти);
		Возврат;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		ПоказатьВводСтроки(
			Обработчик,
			ТекущееЗначение,
			ПредставлениеПоля,
			ОписаниеТипов.КвалификаторыСтроки.Длина,
			ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Или ОписаниеТипов.КвалификаторыСтроки.Длина > 100);
		Возврат;
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		ПоказатьВводДаты(
			Обработчик,
			ТекущееЗначение,
			ПредставлениеПоля,
			ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);
		Возврат;
	Иначе
		ПоказатьВводЗначения(
			Обработчик,
			ТекущееЗначение,
			ПредставлениеПоля,
			ОписаниеТипов);
		Возврат;
	КонецЕсли;
	Форма.ПоказатьВыборИзМеню(Обработчик, СписокВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидСравнения(Форма, ИдентификаторЭлемента, ОбработчикРезультата) Экспорт
	ПользовательскаяНастройкаКД = Форма.НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ПользовательскаяНастройкаКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеНастройки = Форма.НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
	Если ДополнительныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОТипах = АнализТипов(ДополнительныеНастройки.ОписаниеТипов, Ложь);
	
	Список = Новый СписокЗначений;
	
	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
		
		Если ИнформацияОТипах.СодержитОбъектныеТипы Тогда
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии); // НСтр("ru = 'В списке включая подчиненные'")
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии); // НСтр("ru = 'Не в списке включая подчиненные'").
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии); // НСтр("ru = 'В группе'")
			Список.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии); // НСтр("ru = 'Не в группе'")
			
		КонецЕсли;
		
		Если ИнформацияОТипах.КоличествоПримитивныхТипов > 0 Тогда
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
			
			Список.Добавить(ВидСравненияКомпоновкиДанных.Больше);
			Список.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнформацияОТипах.СодержитТипСтрока Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеПодобно);
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
		
	КонецЕсли;
	
	Если ИнформацияОТипах.ОграниченнойДлины Тогда
		
		Список.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
		Список.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	КонецЕсли;
	
	ТекущийЭлемент = Список.НайтиПоЗначению(ПользовательскаяНастройкаКД.ВидСравнения);
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Обработчик = Новый ОписаниеОповещения("ИзменитьВидСравненияЗавершение", ЭтотОбъект, Контекст);
	ФормаЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Условие отбора поля ""%1""'"), ДополнительныеНастройки.Представление);
	
	Список.ПоказатьВыборЭлемента(Обработчик, ФормаЗаголовок, ТекущийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидСравненияЗавершение(ЭлементСписка, Контекст) Экспорт
	Если ЭлементСписка = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = ЭлементСписка.Значение;
		ПользовательскаяНастройкаКД = Контекст.Форма.НайтиПользовательскуюНастройкуЭлемента(Контекст.ИдентификаторЭлемента);
		ПользовательскаяНастройкаКД.ВидСравнения = Результат;
	КонецЕсли;
	
	Если Контекст.ОбработчикРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиПоПорядку(Форма, ГруппаВывода, Родитель, КоличествоКолонок, ГибкаяБалансировка = Истина)
	Элементы = Форма.Элементы;
	Если ГибкаяБалансировка Тогда
		Если ГруппаВывода.Размер <= 7 Тогда
			КоличествоКолонок = 1;
		КонецЕсли;
	КонецЕсли;
	
	РодительИмя = Родитель.Имя;
	
	НомерКолонки = 0;
	ОсталосьКолонок = КоличествоКолонок + 1;
	ОсталосьМестаВсего = ГруппаВывода.Размер;
	ОсталосьМестаВКолонке = 0;
	
	Для Каждого ЭлементВывода Из ГруппаВывода.Порядок Цикл
		Если ОсталосьКолонок > 0
			И ЭлементВывода.Размер > ОсталосьМестаВКолонке*4 Тогда // Текущий шаг больше оставшегося места.
			НомерКолонки = НомерКолонки + 1;
			ОсталосьКолонок = ОсталосьКолонок - 1;
			ОсталосьМестаВКолонке = ОсталосьМестаВсего/ОсталосьКолонок;
			
			КолонкаВерхнегоУровня = Элементы.Добавить(РодительИмя + НомерКолонки, Тип("ГруппаФормы"), Элементы[РодительИмя]);
			КолонкаВерхнегоУровня.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			КолонкаВерхнегоУровня.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			КолонкаВерхнегоУровня.Отображение         = ОтображениеОбычнойГруппы.Нет;
			КолонкаВерхнегоУровня.ОтображатьЗаголовок = Ложь;
			
			НомерПодгруппы = 0;
			ТекущаяГруппа1 = Неопределено;
			ТекущаяГруппа2 = Неопределено;
		КонецЕсли;
		
		Если ЭлементВывода.ИмяЭлемента2 = Неопределено Тогда
			// Вывод в одну колонку.
			ТекущаяГруппа2 = Неопределено;
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента1], КолонкаВерхнегоУровня);
		Иначе
			// Вывод в две колонки.
			Если ТекущаяГруппа2 = Неопределено Тогда
				НомерПодгруппы = НомерПодгруппы + 1;
				
				Колонки = Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы, Тип("ГруппаФормы"), КолонкаВерхнегоУровня);
				Колонки.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				Колонки.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				Колонки.Отображение         = ОтображениеОбычнойГруппы.Нет;
				Колонки.ОтображатьЗаголовок = Ложь;
				
				ТекущаяГруппа1 = Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы + "_1", Тип("ГруппаФормы"), Колонки);
				ТекущаяГруппа1.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ТекущаяГруппа1.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ТекущаяГруппа1.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ТекущаяГруппа1.ОтображатьЗаголовок = Ложь;
				ТекущаяГруппа1.Объединенная        = Ложь;
				
				ТекущаяГруппа2 = Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы + "_2", Тип("ГруппаФормы"), Колонки);
				ТекущаяГруппа2.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ТекущаяГруппа2.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ТекущаяГруппа2.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ТекущаяГруппа2.ОтображатьЗаголовок = Ложь;
				ТекущаяГруппа2.Объединенная        = Ложь;
			КонецЕсли;
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента1], ТекущаяГруппа1);
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента2], ТекущаяГруппа2);
		КонецЕсли;
		
		ОсталосьМестаВсего = ОсталосьМестаВсего - ЭлементВывода.Размер;
		ОсталосьМестаВКолонке = ОсталосьМестаВКолонке - ЭлементВывода.Размер;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(ИсходноеЗначение, ЗначениеПоУмолчанию = Неопределено)
	Тип = ТипЗнч(ИсходноеЗначение);
	Если Тип = Тип("ГруппыИЭлементы") Тогда
		Если ИсходноеЗначение = ГруппыИЭлементы.Элементы Тогда
			Возврат ИспользованиеГруппИЭлементов.Элементы;
		ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.ГруппыИЭлементы Тогда
			Возврат ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		ИначеЕсли ИсходноеЗначение = ГруппыИЭлементы.Группы Тогда
			Возврат ИспользованиеГруппИЭлементов.Группы;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("ИспользованиеГруппИЭлементов") Тогда
			Возврат ИсходноеЗначение;
		КонецЕсли;
	ИначеЕсли Тип = Тип("ИспользованиеГруппИЭлементов") Тогда
		Возврат ИсходноеЗначение;
	ИначеЕсли Тип = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Если ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВСписке
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВСписке
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			// Виды сравнения ВСпискеПоИерархии (В группе из списка) и НеВСпискеПоИерархии (Не в группе из списка)
			// следует понимать как "В списке или в группах" и "Не в списке и не в группах".
			// - Тогда более понятно почему для них используется "ГруппыИЭлементы", а не "Группы".
			Возврат ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		ИначеЕсли ИсходноеЗначение = ВидСравненияКомпоновкиДанных.ВИерархии
			Или ИсходноеЗначение = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Возврат ИспользованиеГруппИЭлементов.Группы;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеПоУмолчанию <> Неопределено Тогда
		Возврат ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(ЗначениеПоУмолчанию, Неопределено);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыВыбораТипа(Знач Тип, Знач ПараметрыНастройки)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("БыстрыйВыбор, ПутьКФорме, ЗначенияДляВыбора");
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Вид = ВРег(СтрРазделить(ПолноеИмя, ".")[0]);
	
	Если ПараметрыНастройки.БыстрыйВыбор = Истина Тогда
		Результат.БыстрыйВыбор = Истина;
	ИначеЕсли Вид = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Результат.БыстрыйВыбор = Истина;
	ИначеЕсли Вид = "СПРАВОЧНИК"
		Или Вид = "ПЛАНВИДОВРАСЧЕТА"
		Или Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК"
		Или Вид = "ПЛАНОБМЕНА"
		Или Вид = "ПЛАНСЧЕТОВ" Тогда
		Результат.БыстрыйВыбор = (ОбъектМетаданных.СпособВыбора = Метаданные.СвойстваОбъектов.СпособВыбора.БыстрыйВыбор);
	Иначе
		Результат.БыстрыйВыбор = Ложь;
	КонецЕсли;
	
	Если Результат.БыстрыйВыбор Тогда
		Результат.ЗначенияДляВыбора = ЗначенияДляВыбора(ПараметрыНастройки, Тип);
	КонецЕсли;
	
	Если ПараметрыНастройки.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
		Если Вид = "СПРАВОЧНИК" Или Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			Результат.ПутьКФорме = ПолноеИмя + ".ФормаВыбораГруппы";
		Иначе
			Результат.ПутьКФорме = ПолноеИмя + ".ФормаВыбора";
		КонецЕсли;
	Иначе
		Результат.ПутьКФорме = ПолноеИмя + ".ФормаВыбора";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияДляВыбора(ПараметрыНастройки, ТипИлиТипы = Неопределено)
	ПараметрыПолученияДанныхВыбора = Новый Структура("Отбор, ВыборГруппИЭлементов");
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанныхВыбора, ПараметрыНастройки);
	ДополнитьСтруктуруИзПараметровВыбора(ПараметрыПолученияДанныхВыбора, ПараметрыНастройки.ПараметрыВыбора);
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	Если ТипЗнч(ТипИлиТипы) = Тип("Тип") Тогда
		Типы = Новый Массив;
		Типы.Добавить(ТипИлиТипы);
	ИначеЕсли ТипЗнч(ТипИлиТипы) = Тип("Массив") Тогда
		Типы = ТипИлиТипы;
	Иначе
		Типы = ПараметрыНастройки.ОписаниеТипов.Типы();
	КонецЕсли;
	
	Для Каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		
		СписокВыбора = Менеджер.ПолучитьДанныеВыбора(ПараметрыПолученияДанныхВыбора);
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			ЗаполнитьЗначенияСвойств(ЗначенияДляВыбора.Добавить(), ЭлементСписка);
		КонецЦикла;
	КонецЦикла;
	Возврат ЗначенияДляВыбора;
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруИзПараметровВыбора(Структура, МассивПараметровВыбора)
	Для Каждого ПараметрВыбора Из МассивПараметровВыбора Цикл
		ТекущаяСтруктура = Структура;
		МассивСтрок = СтрРазделить(ПараметрВыбора.Имя, ".");
		Количество = МассивСтрок.Количество();
		Если Количество > 1 Тогда
			Для Индекс = 0 По Количество-2 Цикл
				Ключ = МассивСтрок[Индекс];
				Если ТекущаяСтруктура.Свойство(Ключ) И ТипЗнч(ТекущаяСтруктура[Ключ]) = Тип("Структура") Тогда
					ТекущаяСтруктура = ТекущаяСтруктура[Ключ];
				Иначе
					ТекущаяСтруктура = ТекущаяСтруктура.Вставить(Ключ, Новый Структура);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Ключ = МассивСтрок[Количество-1];
		ТекущаяСтруктура.Вставить(Ключ, ПараметрВыбора.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция АнализТипов(ИсходноеОписаниеТипов, ПривестиКФорме)
	Результат = Новый Структура;
	Результат.Вставить("СодержитТипТип",        Ложь);
	Результат.Вставить("СодержитТипДата",       Ложь);
	Результат.Вставить("СодержитТипБулево",     Ложь);
	Результат.Вставить("СодержитТипСтрока",     Ложь);
	Результат.Вставить("СодержитТипЧисло",      Ложь);
	Результат.Вставить("СодержитТипПериод",     Ложь);
	Результат.Вставить("СодержитТипУИД",        Ложь);
	Результат.Вставить("СодержитТипХранилище",  Ложь);
	Результат.Вставить("СодержитОбъектныеТипы", Ложь);
	Результат.Вставить("ОграниченнойДлины",     Истина);
	
	Результат.Вставить("КоличествоТипов",            0);
	Результат.Вставить("КоличествоПримитивныхТипов", 0);
	Результат.Вставить("ОбъектныеТипы", Новый Массив);
	
	Если ПривестиКФорме Тогда
		ДобавляемыеТипы = Новый Массив;
		ВычитаемыеТипы = Новый Массив;
		Результат.Вставить("ОписаниеТиповИсходное", ИсходноеОписаниеТипов);
		Результат.Вставить("ОписаниеТиповДляФормы", ИсходноеОписаниеТипов);
	КонецЕсли;
	
	Если ИсходноеОписаниеТипов = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивТипов = ИсходноеОписаниеТипов.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
			Если ПривестиКФорме Тогда
				ВычитаемыеТипы.Добавить(Тип);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			МетаданныеНастройки = Метаданные.НайтиПоТипу(Тип);
			Если МетаданныеНастройки <> Неопределено И Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеНастройки) Тогда
				Если ПривестиКФорме Тогда
					ВычитаемыеТипы.Добавить(Тип);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		Результат.КоличествоТипов = Результат.КоличествоТипов + 1;
		
		Если Тип = Тип("Тип") Тогда
			Результат.СодержитТипТип = Истина;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Результат.СодержитТипДата = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Результат.СодержитТипБулево = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Число") Тогда
			Результат.СодержитТипЧисло = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			Результат.СодержитТипПериод = Истина;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Результат.СодержитТипСтрока = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
			Если ИсходноеОписаниеТипов.КвалификаторыСтроки.Длина = 0
				И ИсходноеОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
				Результат.ОграниченнойДлины = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Результат.СодержитТипУИД = Истина;
		ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			Результат.СодержитТипХранилище = Истина;
		Иначе
			Результат.СодержитОбъектныеТипы = Истина;
			Результат.ОбъектныеТипы.Добавить(Тип);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПривестиКФорме
		И (ДобавляемыеТипы.Количество() > 0 Или ВычитаемыеТипы.Количество() > 0) Тогда
		Результат.ОписаниеТиповДляФормы = Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы, ВычитаемыеТипы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


#КонецОбласти

