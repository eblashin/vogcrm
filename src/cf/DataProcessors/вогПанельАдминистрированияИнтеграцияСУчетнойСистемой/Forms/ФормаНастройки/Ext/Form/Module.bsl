&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//// Значения реквизитов формы
	//СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	//ВнешниеРодительскиеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	//РежимРаботы 				 = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	//
	//РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	//РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	//
	//РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	
	// Настройки видимости при запуске
	
	// Обновление состояния элементов
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	//Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
	// ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
	// 		И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
	// 			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
	//	
	//	ЭтаФорма.Прочитать();
	//	УстановитьДоступность();
	//	
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура скИспользуетсяУчетнаяСистемаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура АдресВебСервисаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура скЛогинУСПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура скПарольУСПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРегламентноеЗаданиеНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", 		"Изменить");
	ПараметрыФормы.Вставить("Идентификатор", 	ПолучитьРегламентноеЗадание());
	
	ОткрытьФорму(
		"Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", 
		ПараметрыФормы,
		ЭтаФорма,
		ЭтаФорма,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если ПроверитьПодключениеНаСервере() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Подключение успешно установлено.'"));
	Иначе		
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось установить подключение.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналОбменаСУС(Команда)
	
	ОткрытьФорму("РегистрСведений.вогЖурналОбменаСУчетнойСистемой.ФормаСписка",, ЭтаФорма, ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередьОбменаСУС(Команда)
	
	ОткрытьФорму("РегистрСведений.вогОбъектыДляОбмена.ФормаСписка",, ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

// ++ VOG Солодов В.В. 07.08.2019 task 515
&НаКлиенте
Процедура НастраиваемыйОбмен(Команда)
	
	ОткрытьФорму("Справочник.вогНастройкиОбменаУС.ФормаСписка",, ЭтотОбъект, ЭтотОбъект);
	
КонецПроцедуры // -- VOG Солодов В.В. 07.08.2019

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	КонстантаИмя = "";
	Результат.Свойство("КонстантаИмя",КонстантаИмя);
	
	//СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтаФорма, Результат);
	Если ЗначениеЗаполнено(КонстантаИмя) Тогда 
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьПодключениеНаСервере()
	Возврат вогИнтеграцияСУчетнойСистемой.ПроверитьПодключение();
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат = Неопределено)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Результат.Вставить("КонстантаИмя", КонстантаИмя);
		Иначе
			Результат = КонстантаИмя;
		КонецЕсли;
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		//Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
		//	ЭтаФорма.Прочитать();
		//КонецЕсли;
		
		//СтандартныеПодсистемыКлиентСервер.РезультатВыполненияДобавитьОповещениеОткрытыхФорм(Результат,
		//	"Запись_НаборКонстант", ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруПодчиненныхКонстант(КонстантаИмя), КонстантаИмя);
		// СтандартныеПодсистемы.ВариантыОтчетов
		//ВариантыОтчетов.ДобавитьОповещениеПриИзмененииЗначенияКонстанты(Результат, КонстантаМенеджер);
		// Конец СтандартныеПодсистемы.ВариантыОтчетов
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.вогИспользуетсяУчетнаяСистема" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.вогИспользуетсяУчетнаяСистема;
		
		Элементы.НастройкиИнтеграции.Видимость = ЗначениеКонстанты;
		
	КонецЕсли;

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегламентноеЗадание()
	
	МетаданныеЗадания 		= Метаданные.РегламентныеЗадания.вогОтправкаОбъектовВУчетнуюСистему;
	РегламентноеЗадание 	= РегламентныеЗадания.НайтиПредопределенное(МетаданныеЗадания);
	
	Возврат РегламентноеЗадание.УникальныйИдентификатор;
	
КонецФункции

#КонецОбласти

#Область Прочие

#КонецОбласти

#КонецОбласти
