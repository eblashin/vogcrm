


// *******Заполнение дерева этапов*******************************

&НаКлиенте
Процедура ВыборФайла(Элемент, ИмяСвойства, ПроверятьСуществование=Ложь, Знач РасширениеПоУмолчанию = "txt",
	АрхивироватьФайлДанных = Истина, ВыборФайлаПравил = Ложь)
	
	ДополнительныеПараметры = Новый Структура("Элемент, ИмяСвойства, ПроверятьСуществование, РасширениеПоУмолчанию, АрхивироватьФайлДанных, ВыборФайлаПравил",
											Элемент, ИмяСвойства, ПроверятьСуществование, РасширениеПоУмолчанию, АрхивироватьФайлДанных, ВыборФайлаПравил);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПродолжение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "Файл карты (*.grs)|*.grs";
		ДиалогВыбораФайла.Расширение = "grs";
		ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
		ДиалогВыбораФайла.ИндексФильтра = 0;
		ДиалогВыбораФайла.ПолноеИмяФайла = ДополнительныеПараметры.Элемент.ТекстРедактирования;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ДополнительныеПараметры.ПроверятьСуществование;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры.Элемент);
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, Элемент) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ПутьККарте = ВыбранныеФайлы[0];
		
		ПутьККартеПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККартеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ПутьККарте, Истина, , Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККартеПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьККартеПриИзмененииЗавершение", ЭтотОбъект, ПутьККарте);
	СхемаМаршрута.НачатьЧтение(ОписаниеОповещения, ПутьККарте);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККартеПриИзмененииЗавершение(Загружена, ПутьККарте) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.НачатьЧтение(, ПутьККарте, КодировкаТекста.UTF8);
	
	Элементы.ГруппаСпискаОшибок.Видимость = Ложь;
	Элементы.ГруппаНетОшибок.Видимость	  = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	ПроверитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере()
	
	СписокЭлементов.Очистить();
	
	ТаблицаЭлементов = СформироватьТаблицуЭлементовГрафическойСхемы(СхемаМаршрута);
	
	АдресТаблицыЭлементов = ПоместитьВоВременноеХранилище(ТаблицаЭлементов, УникальныйИдентификатор);
	
	СтекОшибок.Очистить();
	
	ДеревоЗаполнено = Ложь;
	
	Если ПервичнаяПроверка(СхемаМаршрута) Тогда
		ДеревоЗаполнено = Истина;
		
		ПрочитатьГрафическуюСхемуСформироватьДеревоТочек(СхемаМаршрута, ТекстовыйДокумент);
	КонецЕсли;
	
	ЕстьОшибки = (СтекОшибок.Количество() > 0);
	
	Элементы.ГруппаСпискаОшибок.Видимость = ЕстьОшибки;
	Элементы.ГруппаНетОшибок.Видимость 	  = НЕ ЕстьОшибки;
	
КонецПроцедуры

&НаСервере
// Функция возвращет вид точки по элементу.
//
// Параметры:
//	ЭлементСхемы	- Произвольный	- Элемент схемы.
//
// Возвращаемое значение:
//	ПеречислениеСсылка	- Вид точки.
//
Функция ВернутьВидТочкиПоЭлементу(ЭлементСхемы)
	Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСтарт") Тогда
		Возврат "Старт";
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыЗавершение") Тогда
		Возврат "Завершение";
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДействие") Тогда
		Возврат "Действие";
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыУсловие") Тогда
		Возврат "Условие";
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
		Возврат "ВыборВарианта";
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыОбработка") Тогда
		Возврат "Обработка";
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
		Возврат "ВложенныйБизнесПроцесс";
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыРазделение") Тогда
		Возврат "Разделение";
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСлияние") Тогда
		Возврат "Слияние";
	КонецЕсли;
КонецФункции

&НаСервере
// Функция получает значение строки по позиции.
//
// Параметры:
//	стр		- Строка	- Строка
// Позиция	- Число		- Позиция в строке
//
// Возвращаемое значение:
//	Строка	- Полученное значение.
//
Функция ПолучитьЗначениеПоПозиции(стр, Позиция)
	стр_1 = стр;
	стрДлина = СтрДлина(стр_1);
	Для Ном = 1 По Позиция Цикл
		Поз_1 = Найти(стр_1,",");
		Если Поз_1 = 0 Тогда
			Возврат 0;
		КонецЕсли;
		стр_1 = Сред(стр_1,Поз_1 + 1,стрДлина);
	КонецЦикла;
	Поз_2 = Найти(стр_1,",");
	Если Поз_2 = 0 Тогда
		Возврат стр_1;
	КонецЕсли;
	Возврат Сред(стр_1,1,Поз_2 - 1);
КонецФункции // ПолучитьЗначениеПоПозиции()

&НаСервере
// Функция проверяет условие линии.
//
// Параметры:
//	ЭлементСхемы	- Произвольный	- Элемент схемы.
//	ИмяФайла		- Строка		- Имя файла.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция ПроверитьУсловиеЛинии(ЭлементСхемы, СхемаМаршрута)
	
	Проверка	= """" + ЭлементСхемы.Имя + """";
	Текст		= ТекстовыйДокумент.ПолучитьТекст();
	Массив		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст,Проверка,Ложь);
	
	Флаг = Ложь;
	Для Каждого ЭлементМассива Из Массив Цикл
		Если (Флаг = Ложь) И (Прав(ЭлементМассива,2) = "},") Тогда
			Флаг = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Флаг Тогда
			Вариант = Число(ПолучитьЗначениеПоПозиции(ЭлементМассива,4));
			Возврат ?(Вариант = 1, Истина, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // ПроверитьУсловиеЛинии()

Функция ПолучитьИсходящиеЭлементы(ТекущийЭлемент,СхемаМаршрута)
	
	МассивИсходящих = Новый Массив;
	
	ТаблицаЭлементов	= ПолучитьИзВременногоХранилища(АдресТаблицыЭлементов);
	МассивЛиний			= ТаблицаЭлементов.НайтиСтроки(Новый Структура("Тип, НачалоЭлемент",Тип("ЭлементГрафическойСхемыСоединительнаяЛиния"),ТекущийЭлемент));
	
	Индекс = 0;
	Для Каждого ЭлементМассива Из МассивЛиний Цикл
			ЭлементСхемы = ЭлементМассива.Элемент;
			
			Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыУсловие") Тогда
				
				ПозитивныйВариант = ПроверитьУсловиеЛинии(ЭлементСхемы, СхемаМаршрута);
				
				СтруктураЭлемента = Новый Структура("Элемент,ВариантЗначение,ВариантНаименование,Ветка");
				СтруктураЭлемента.Элемент				= ЭлементСхемы.КонецЭлемент;
				СтруктураЭлемента.ВариантЗначение		= ?(ПозитивныйВариант,"Да","Нет");
				СтруктураЭлемента.ВариантНаименование	= ЭлементСхемы.Наименование;
				СтруктураЭлемента.Ветка					= ЭлементСхемы;
				
				МассивИсходящих.Добавить(СтруктураЭлемента);
				
			ИначеЕсли  ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
				
				СтруктураЭлемента = Новый Структура("Элемент,ВариантЗначение,ВариантНаименование,Ветка");
				СтруктураЭлемента.Элемент				= ЭлементСхемы.КонецЭлемент;
				СтруктураЭлемента.ВариантЗначение		= Строка(ЭлементСхемы.НачалоВариант.Значение);
				СтруктураЭлемента.ВариантНаименование	= ЭлементСхемы.НачалоВариант.Наименование;
				СтруктураЭлемента.Ветка					= ЭлементСхемы;
				
				МассивИсходящих.Добавить(СтруктураЭлемента);
				
			ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыРазделение") Тогда
				
				СтруктураЭлемента = Новый Структура("Элемент,Разделение,ИндексВетки,Ветка");
				СтруктураЭлемента.Элемент		= ЭлементСхемы.КонецЭлемент;
				СтруктураЭлемента.Разделение		= ТекущийЭлемент;
				СтруктураЭлемента.ИндексВетки	= Индекс;
				СтруктураЭлемента.Ветка			= ЭлементСхемы;
				
				МассивИсходящих.Добавить(СтруктураЭлемента);
				
				Индекс = Индекс + 1;
			Иначе
				МассивИсходящих.Добавить(ЭлементСхемы.КонецЭлемент);
			КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИсходящих;
	
КонецФункции

&НаСервере
Функция ПолучитьИсходящиеЗаполнитьДерево(ТекущийЭлемент,
										 СхемаМаршрута,
										 ТекущаяСтрокаДерева,
										 ДеревоТочекЗнач,
										 ЗНАЧ Разделение = "",
										 ЗНАЧ ИндексВетки = 0,
										 ЗНАЧ ВариантНаименование = "",
										 ЗНАЧ ВариантЗначение = "")
	
	Если НЕ (ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСлияние")) И (ДеревоТочекЗнач.Строки.Найти(ТекущийЭлемент.Имя,"ИмяЭлемента",Истина) = Неопределено) Тогда
	//Если НЕ (ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСлияние")) Тогда
		
		НоваяСтрока = ТекущаяСтрокаДерева.Строки.Добавить();
		НоваяСтрока.ВидЭлемента				= ВернутьВидТочкиПоЭлементу(ТекущийЭлемент);
		НоваяСтрока.ИмяЭлемента				= ТекущийЭлемент.Имя;
		НоваяСтрока.НаименованиеЭлемента	= ТекущийЭлемент.Наименование;
		
		Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Тогда
			НоваяСтрока.Групповая	= ТекущийЭлемент.Групповая;
			НоваяСтрока.Пояснение	= ТекущийЭлемент.Пояснение;
		Иначе
			НоваяСтрока.Групповая				= Ложь;
			НоваяСтрока.Пояснение				= "";
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрокаДерева) = Тип("ДеревоЗначений") Тогда
			НоваяСтрока.Разделение	= "";
			НоваяСтрока.ИндексВетки	= 0;
			НоваяСтрока.Слияние		= "";
			
			НоваяСтрока.ВариантИмя		= "";
			НоваяСтрока.ВариантСиноним	= "";
		Иначе
			НоваяСтрока.Разделение	= Разделение;
			НоваяСтрока.ИндексВетки	= ИндексВетки;
			НоваяСтрока.Слияние		= "";
			
			НоваяСтрока.ВариантИмя		= ВариантЗначение;
			НоваяСтрока.ВариантСиноним	= ВариантНаименование;
		КонецЕсли;
		
		Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСтарт")
		ИЛИ ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДействие")
		ИЛИ ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыОбработка")
		ИЛИ ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
			
			ИсходящиеЭлементы = ПолучитьИсходящиеЭлементы(ТекущийЭлемент, СхемаМаршрута);
			
			ТекущийЭлемент = ПолучитьИсходящиеЗаполнитьДерево(ИсходящиеЭлементы[0], СхемаМаршрута, ТекущаяСтрокаДерева, ДеревоТочекЗнач, Разделение, ИндексВетки, ВариантНаименование, ВариантЗначение);
			
		ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыРазделение") Тогда
	
			ИсходящиеЭлементыРазделения = ПолучитьИсходящиеЭлементы(ТекущийЭлемент, СхемаМаршрута);
			
			СписокТочекСлияния = Новый СписокЗначений;
			
			Для Каждого ЭлементМассива Из ИсходящиеЭлементыРазделения Цикл
				
				СтрокаВетокРазделения						= НоваяСтрока.Строки.Добавить();
				СтрокаВетокРазделения.ИмяЭлемента			= ЭлементМассива.Ветка.Имя;
				СтрокаВетокРазделения.НаименованиеЭлемента	= "Ветка разделения "+Строка(ЭлементМассива.ИндексВетки);
				СтрокаВетокРазделения.Разделение			= ТекущийЭлемент.Имя;
				СтрокаВетокРазделения.ИндексВетки			= ЭлементМассива.ИндексВетки;
				
				СтрокаВетокРазделения.ВариантИмя			= ВариантЗначение;
				СтрокаВетокРазделения.ВариантСиноним		= ВариантНаименование;
				
				КонечныйЭлементВетки = ПолучитьИсходящиеЗаполнитьДерево(ЭлементМассива.Элемент,
																		СхемаМаршрута,
																		СтрокаВетокРазделения,
																		ДеревоТочекЗнач,
																		ТекущийЭлемент.Имя,
																		ЭлементМассива.ИндексВетки,
																		ВариантНаименование,
																		ВариантЗначение);
				Если НЕ КонечныйЭлементВетки = Неопределено Тогда
					СтрокаВетокРазделения.Слияние = КонечныйЭлементВетки.Имя;
					
					Если КонечныйЭлементВетки.Имя = ("Слияние" + СтрЗаменить(ТекущийЭлемент.Имя,"Разделение","")) Тогда
						
						МассивСтрок = СтрокаВетокРазделения.Строки.НайтиСтроки(Новый Структура("Разделение,Слияние",ТекущийЭлемент.Имя,""),Истина);
						Для Каждого СтрокаМассива Из МассивСтрок Цикл
							СтрокаМассива.Слияние = КонечныйЭлементВетки.Имя;
						КонецЦикла;
						
					КонецЕсли;
					
					Если СписокТочекСлияния.НайтиПоЗначению(КонечныйЭлементВетки) = Неопределено Тогда
						СписокТочекСлияния.Добавить(КонечныйЭлементВетки);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			//// Если ветки ведут к разным точкам слияния, то это ошибка
			//// она не позволит анализаровать корректность разделения
			//// прописываем ошибку сразу, при дальнейшем анализе карты
			//// разделение не анализируем, пока эту ошибку не исправят.
			//Если СписокТочекСлияния.Количество() > 1 Тогда
			//	
			//	НоваяСтрокаОшибки					= СтекОшибок.Добавить();
			//	НоваяСтрокаОшибки.ИмяЭлемента		= ТекущийЭлемент.Имя;
			//	НоваяСтрокаОшибки.ОписаниеОшибки	= "Ветки разделения сходятся в разных точка слияния";
			//	НоваяСтрокаОшибки.КодОшибки			= 8;
			//	
			//ИначеЕсли (СписокТочекСлияния.Количество() = 1)
			//И (СписокТочекСлияния[0].Значение.Имя = ("Слияние" + СтрЗаменить(ТекущийЭлемент.Имя,"Разделение",""))) Тогда
			//	
			//	НоваяСтрока.СлияниеРазделения = СписокТочекСлияния[0].Значение.Имя;
			//	
			//КонецЕсли;
			
			Для Каждого ЭлементСписка Из СписокТочекСлияния Цикл
				
				Если (ТипЗнч(ЭлементСписка.Значение) = Тип("ЭлементГрафическойСхемыСлияние"))
				И (ЭлементСписка.Значение.Имя = ("Слияние" + СтрЗаменить(ТекущийЭлемент.Имя,"Разделение",""))) Тогда
					
					НоваяСтрока.СлияниеРазделения = ЭлементСписка.Значение.Имя;
					
					Если (ДеревоТочекЗнач.Строки.Найти(ЭлементСписка.Значение.Имя,"ИмяЭлемента",Истина) = Неопределено) Тогда
						
						НоваяСтрокаСлияния = ТекущаяСтрокаДерева.Строки.Добавить();
						НоваяСтрокаСлияния.ВидЭлемента				= ВернутьВидТочкиПоЭлементу(ЭлементСписка.Значение);
						НоваяСтрокаСлияния.ИмяЭлемента				= ЭлементСписка.Значение.Имя;
						НоваяСтрокаСлияния.НаименованиеЭлемента	= ЭлементСписка.Значение.Наименование;
						
						НоваяСтрокаСлияния.Групповая				= Ложь;
						НоваяСтрокаСлияния.Пояснение				= "";
						
						НоваяСтрокаСлияния.РазделениеСлияния	= ТекущийЭлемент.Имя;
						
						Если ТипЗнч(ТекущаяСтрокаДерева) = Тип("ДеревоЗначений") Тогда
							НоваяСтрокаСлияния.Разделение			= "";
							НоваяСтрокаСлияния.ИндексВетки			= 0;
						Иначе
							НоваяСтрокаСлияния.Разделение			= ТекущаяСтрокаДерева.Разделение;
							НоваяСтрокаСлияния.ИндексВетки			= ТекущаяСтрокаДерева.ИндексВетки;
						КонецЕсли;
						
						НоваяСтрокаСлияния.Слияние				= "";
						
						НоваяСтрокаСлияния.ВариантИмя		= ВариантЗначение;
						НоваяСтрокаСлияния.ВариантСиноним	= ВариантНаименование;
						
					КонецЕсли;
					
					ИсходящиеЭлементы = ПолучитьИсходящиеЭлементы(ЭлементСписка.Значение, СхемаМаршрута);
					
					Рез = ПолучитьИсходящиеЗаполнитьДерево(ИсходящиеЭлементы[0],
															СхемаМаршрута,
															ТекущаяСтрокаДерева,
															ДеревоТочекЗнач,
															Разделение,
															ИндексВетки,
															ВариантНаименование,
															ВариантЗначение);
					Если НЕ (Рез = Неопределено) Тогда
						ТекущийЭлемент = Рез;
					КонецЕсли;
					
				КонецЕсли;
				
				//ИсходящиеЭлементы = ПолучитьИсходящиеЭлементы(ЭлементСписка.Значение, СхемаМаршрута);
				//
				//Рез = ПолучитьИсходящиеЗаполнитьДерево(ИсходящиеЭлементы[0],
				//										СхемаМаршрута,
				//										ТекущаяСтрокаДерева,
				//										ДеревоТочекЗнач,
				//										Разделение,
				//										ИндексВетки,
				//										ВариантНаименование,
				//										ВариантЗначение);
				//Если НЕ (Рез = Неопределено) Тогда
				//	ТекущийЭлемент = Рез;
				//КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыУсловие") Тогда

			ИсходящиеЭлементыУсловия = ПолучитьИсходящиеЭлементы(ТекущийЭлемент, СхемаМаршрута);
			
			Для Каждого ЭлементМассива Из ИсходящиеЭлементыУсловия Цикл
				
				СтрокаВарианта						= НоваяСтрока.Строки.Добавить();
				СтрокаВарианта.ИмяЭлемента			= ЭлементМассива.Ветка.Имя;
				СтрокаВарианта.ВариантИмя			= ЭлементМассива.ВариантЗначение;
				СтрокаВарианта.ВариантСиноним		= ЭлементМассива.ВариантНаименование;
				СтрокаВарианта.НаименованиеЭлемента	= ЭлементМассива.ВариантНаименование;
				
				СтрокаВарианта.Разделение		= Разделение;
				СтрокаВарианта.ИндексВетки		= ИндексВетки;
				
				Рез = ПолучитьИсходящиеЗаполнитьДерево(ЭлементМассива.Элемент,
												СхемаМаршрута,
												СтрокаВарианта,
												ДеревоТочекЗнач,
												Разделение,
												ИндексВетки,
												ЭлементМассива.ВариантНаименование,
												ЭлементМассива.ВариантЗначение);
				Если НЕ (Рез = Неопределено) Тогда
					ТекущийЭлемент = Рез;
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
		
			ИсходящиеЭлементыВарианта = ПолучитьИсходящиеЭлементы(ТекущийЭлемент, СхемаМаршрута);
			
			Для Каждого ЭлементМассива Из ИсходящиеЭлементыВарианта Цикл
				
				СтрокаВарианта						= НоваяСтрока.Строки.Добавить();
				СтрокаВарианта.ИмяЭлемента			= ЭлементМассива.Ветка.Имя;
				СтрокаВарианта.ВариантИмя			= ЭлементМассива.ВариантЗначение;
				СтрокаВарианта.ВариантСиноним		= ЭлементМассива.ВариантНаименование;
				СтрокаВарианта.НаименованиеЭлемента	= ЭлементМассива.ВариантНаименование;
				
				СтрокаВарианта.Разделение		= Разделение;
				СтрокаВарианта.ИндексВетки		= ИндексВетки;
				
				Рез = ПолучитьИсходящиеЗаполнитьДерево(ЭлементМассива.Элемент,
													 СхемаМаршрута,
													 СтрокаВарианта,
													 ДеревоТочекЗнач,
													 Разделение,
													 ИндексВетки,
													 ЭлементМассива.ВариантНаименование,
													 ЭлементМассива.ВариантЗначение);
				Если НЕ (Рез = Неопределено) Тогда
					ТекущийЭлемент = Рез;
				КонецЕсли;
			КонецЦикла;
	
		ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСлияние") Тогда
			
			Возврат ТекущийЭлемент;
			
		КонецЕсли;
		
	ИначеЕсли НЕ (ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСлияние")) Тогда
		
		СтрокаНайденногоЭлемента = ДеревоТочекЗнач.Строки.Найти(ТекущийЭлемент.Имя,"ИмяЭлемента",Истина);
		
		НоваяСтрока = ТекущаяСтрокаДерева.Строки.Добавить();
		НоваяСтрока.ВидЭлемента				= СтрокаНайденногоЭлемента.ВидЭлемента;
		НоваяСтрока.ИмяЭлемента				= СтрокаНайденногоЭлемента.ИмяЭлемента;
		НоваяСтрока.НаименованиеЭлемента	= СтрокаНайденногоЭлемента.НаименованиеЭлемента;
		НоваяСтрока.Групповая				= СтрокаНайденногоЭлемента.Групповая;
		НоваяСтрока.Пояснение				= СтрокаНайденногоЭлемента.Пояснение;
		НоваяСтрока.Разделение				= СтрокаНайденногоЭлемента.Разделение;
		НоваяСтрока.ИндексВетки				= СтрокаНайденногоЭлемента.ИндексВетки;
		НоваяСтрока.Слияние					= СтрокаНайденногоЭлемента.Слияние;
		НоваяСтрока.ВариантИмя				= СтрокаНайденногоЭлемента.ВариантИмя;
		НоваяСтрока.ВариантСиноним			= СтрокаНайденногоЭлемента.ВариантСиноним;
		
	КонецЕсли;
	
	Если (ТипЗнч(ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыСлияние")) Тогда
		Возврат ТекущийЭлемент;
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция СформироватьТаблицуЭлементовГрафическойСхемы(СхемаМаршрута)
	
	ИндексыЭлементов.Очистить();
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("Индекс");
	ТаблицаЭлементов.Колонки.Добавить("Элемент");
	ТаблицаЭлементов.Колонки.Добавить("Тип");
	ТаблицаЭлементов.Колонки.Добавить("Имя");
	ТаблицаЭлементов.Колонки.Добавить("Шрифт");
	ТаблицаЭлементов.Колонки.Добавить("ЦветТекста");
	ТаблицаЭлементов.Колонки.Добавить("Подсказка");
	ТаблицаЭлементов.Колонки.Добавить("Наименование");
	ТаблицаЭлементов.Колонки.Добавить("ЦветФона");
	ТаблицаЭлементов.Колонки.Добавить("ЦветРамки");
	ТаблицаЭлементов.Колонки.Добавить("ГоризонтальноеПоложение");
	ТаблицаЭлементов.Колонки.Добавить("ВертикальноеПоложение");
	ТаблицаЭлементов.Колонки.Добавить("ПоложениеКартинки");
	ТаблицаЭлементов.Колонки.Добавить("РазмерКартинки");
	ТаблицаЭлементов.Колонки.Добавить("Картинка");
	ТаблицаЭлементов.Колонки.Добавить("Лево");
	ТаблицаЭлементов.Колонки.Добавить("Верх");
	ТаблицаЭлементов.Колонки.Добавить("Ширина");
	ТаблицаЭлементов.Колонки.Добавить("Высота");
	ТаблицаЭлементов.Колонки.Добавить("ПрозрачныйФон");
	ТаблицаЭлементов.Колонки.Добавить("Гиперссылка");
	ТаблицаЭлементов.Колонки.Добавить("Рамка");
	ТаблицаЭлементов.Колонки.Добавить("Значение");
	ТаблицаЭлементов.Колонки.Добавить("ЦветЛинии");
	ТаблицаЭлементов.Колонки.Добавить("Линия");
	ТаблицаЭлементов.Колонки.Добавить("ПоложениеТекста");
	ТаблицаЭлементов.Колонки.Добавить("КонецЭлемент");
	ТаблицаЭлементов.Колонки.Добавить("КонецСторона");
	ТаблицаЭлементов.Колонки.Добавить("КонецВариант");
	ТаблицаЭлементов.Колонки.Добавить("КонецЛево");
	ТаблицаЭлементов.Колонки.Добавить("КонецВерх");
	ТаблицаЭлементов.Колонки.Добавить("НачалоЭлемент");
	ТаблицаЭлементов.Колонки.Добавить("НачалоСторона");
	ТаблицаЭлементов.Колонки.Добавить("НачалоВариант");
	ТаблицаЭлементов.Колонки.Добавить("НачалоЛево");
	ТаблицаЭлементов.Колонки.Добавить("НачалоВерх");
	ТаблицаЭлементов.Колонки.Добавить("Пояснение");
	ТаблицаЭлементов.Колонки.Добавить("Групповая");
	
	Ном = 0;
	Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
		НоваяСтрокаЭлемента = ТаблицаЭлементов.Добавить();
		НоваяСтрокаЭлемента.Индекс					= Ном;
		НоваяСтрокаЭлемента.Элемент					= ЭлементСхемы;
		НоваяСтрокаЭлемента.Тип						= ТипЗнч(ЭлементСхемы);
		НоваяСтрокаЭлемента.Имя						= ЭлементСхемы.Имя;
		НоваяСтрокаЭлемента.Шрифт					= ЭлементСхемы.Шрифт;
		НоваяСтрокаЭлемента.ЦветТекста				= ЭлементСхемы.ЦветТекста;
		НоваяСтрокаЭлемента.Подсказка				= ЭлементСхемы.Подсказка;
		НоваяСтрокаЭлемента.Наименование			= ЭлементСхемы.Наименование;
		Попытка
		НоваяСтрокаЭлемента.ЦветФона				= ЭлементСхемы.ЦветФона;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.ЦветРамки				= ЭлементСхемы.ЦветРамки;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.ГоризонтальноеПоложение	= ЭлементСхемы.ГоризонтальноеПоложение;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.ВертикальноеПоложение	= ЭлементСхемы.ВертикальноеПоложение;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.ПоложениеКартинки		= ЭлементСхемы.ПоложениеКартинки;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.РазмерКартинки			= ЭлементСхемы.РазмерКартинки;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Картинка				= ЭлементСхемы.Картинка;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Лево					= ЭлементСхемы.Лево;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Верх					= ЭлементСхемы.Верх;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Ширина					= ЭлементСхемы.Ширина;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Высота					= ЭлементСхемы.Высота;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.ПрозрачныйФон			= ЭлементСхемы.ПрозрачныйФон;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Гиперссылка				= ЭлементСхемы.Гиперссылка;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Рамка					= ЭлементСхемы.Рамка;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Значение				= ЭлементСхемы.Значение;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.ЦветЛинии				= ЭлементСхемы.ЦветЛинии;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Линия					= ЭлементСхемы.Линия;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.ПоложениеТекста			= ЭлементСхемы.ПоложениеТекста;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.КонецЭлемент			= ЭлементСхемы.КонецЭлемент;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.КонецСторона			= ЭлементСхемы.КонецСторона;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.КонецВариант			= ЭлементСхемы.КонецВариант;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.КонецЛево				= ЭлементСхемы.КонецЛево;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.КонецВерх				= ЭлементСхемы.КонецВерх;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.НачалоЭлемент			= ЭлементСхемы.НачалоЭлемент;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.НачалоСторона			= ЭлементСхемы.НачалоСторона;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.НачалоВариант			= ЭлементСхемы.НачалоВариант;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.НачалоЛево				= ЭлементСхемы.НачалоЛево;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.НачалоВерх				= ЭлементСхемы.НачалоВерх;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Пояснение				= ЭлементСхемы.Пояснение;
		Исключение
		КонецПопытки;
		Попытка
		НоваяСтрокаЭлемента.Групповая				= ЭлементСхемы.Групповая;
		Исключение
		КонецПопытки;
		
		НоваяСтрокаИндекса = ИндексыЭлементов.Добавить();
		НоваяСтрокаИндекса.Имя		= ЭлементСхемы.Имя;
		НоваяСтрокаИндекса.Индекс	= Ном;
		
		Ном = Ном + 1;
	КонецЦикла;
	
	Возврат ТаблицаЭлементов;
	
КонецФункции

&НаСервере
// Функция читает графическую схему дерева точек.
//
// Параметры:
//	СхемаМаршрута	- Файл	- Схема маршрута.
//
// Возвращаемое значение:
//	Структура	- Структура графической схемы.
//
Функция ПрочитатьГрафическуюСхемуСформироватьДеревоТочек(СхемаМаршрута, ПутьКВременномуФайлу)
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла(".grs");
	СхемаМаршрута.Записать(ИмяТемпФайла);
	
	ТекстовыйДокумент.Прочитать(ИмяТемпФайла, КодировкаТекста.UTF8);
	
	ДеревоТочекЗнач = РеквизитФормыВЗначение("ДеревоТочек");
	
	ДеревоТочекЗнач.Строки.Очистить();
	
	СписокТочекСтарта = Новый СписокЗначений;
	
	ТаблицаЭлементов	= ПолучитьИзВременногоХранилища(АдресТаблицыЭлементов);
	
	МассивТочеСтарта = ТаблицаЭлементов.НайтиСтроки(Новый Структура("Тип",Тип("ЭлементГрафическойСхемыСтарт")));
	
	Для Каждого СтрокаМассива Из МассивТочеСтарта Цикл
		ЭлементСхемы = СтрокаМассива.Элемент;
		
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСтарт") Тогда
			СписокТочекСтарта.Добавить(ЭлементСхемы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
		
		ПолучитьИсходящиеЗаполнитьДерево(ЭлементСписка.Значение, СхемаМаршрута, ДеревоТочекЗнач, ДеревоТочекЗнач);
		
	КонецЦикла;
	
	ПрочитатьДеревоПроверить(ДеревоТочекЗнач, ДеревоТочекЗнач);
	
	ЗначениеВРеквизитФормы(ДеревоТочекЗнач,"ДеревоТочек");
	
КонецФункции




// *******Проверка карты*******************************

//	Первичная проверка
//
//	Код	Описание ошибки
//	0	Нет точки старта
//	1	Нет точки завершения
//	2	У точки нет входящих линий.
//	3	У точки нет исходящих линий.
//	4	Соединительная линия никуда не ведет.

//	Проверка на логику
//
//	5	Условие/Выбор варианта идет после недопустимой точки (старт, разделение, слияние, обработка, условие/выбор
//	варианта).
//	6	Не все ветки разделения не сходятся в точке слияния.
//	7	Ветка разделения выходит за пределы разделения.
//	8	Ветки разделения сходятся в разных точка слияния.
//	9	В ветке разделения нет ни одной точки действия.
//	10	Ветка разделения не ведет к слиянию.
//	11	Ветка разделения не должна вести к слиянию.
//	12	Ветка разделения ведет к ошибочному слиянию.
//	14	Несколько веток разделения ведут к одной точке.

&НаСервере
Функция ПрочитатьДеревоПроверить(ЗНАЧ ТекущаяСтрокаДерева,
								 ДеревоТочекЗнач,
								 ЗНАЧ Разделение = "",
								 ЗНАЧ ИндексВетки = 0,
								 ПредыдущийВидЭлемента = Неопределено,
								 ТекущаяВеткаРазделения = Неопределено)
	
//	Проверка на логику
//
//	5	Условие/Выбор варианта идет после недопустимой точки (старт, разделение, слияние, обработка, условие/выбор
//	варианта).
//	6	Не все ветки разделения не сходятся в точке слияния.
//	7	Ветка разделения выходит за пределы разделения.
//	8	Ветки разделения сходятся в разных точка слияния.
//	9	В ветке разделения нет ни одной точки действия.
	
	Для Каждого СтрокаДерева Из ТекущаяСтрокаДерева.Строки Цикл
		
		Если НЕ (СтрокаДерева.Разделение = Разделение) Тогда
			
			НоваяСтрокаОшибки					= СтекОшибок.Добавить();
			НоваяСтрокаОшибки.ИмяЭлемента		= ТекущаяВеткаРазделения;
			НоваяСтрокаОшибки.ОписаниеОшибки	= "Ветка разделения выходит за пределы разделения";
			НоваяСтрокаОшибки.КодОшибки			= 7;
			
		КонецЕсли;
		
		Если СтрокаДерева.ВидЭлемента = "Разделение" Тогда
			
			ИдСлияния = СтрокаДерева.СлияниеРазделения;
			
			СписокПроверенныхИмен = Новый СписокЗначений;
			
			// Проверим ситуацию, когда несколько веток идут к одной точке.
			Для Каждого СтрокаВеткиРазделения Из СтрокаДерева.Строки Цикл
				
				// Проверим на то, что в ветеке есть хотя бы одна точка действия.
				Если СтрокаВеткиРазделения.Строки.Найти("Действие","ВидЭлемента",Ложь) = Неопределено Тогда
					// Ниже эта ошибка будет зафиксирована.
					Продолжить;
				КонецЕсли;
				
				ИмяЭлемента = СтрокаВеткиРазделения.Строки[0].ИмяЭлемента;
				
				Если НЕ СписокПроверенныхИмен.НайтиПоЗначению(ИмяЭлемента) = Неопределено Тогда
				//	14	Несколько веток разделения ведут к одной точке.
					НоваяСтрокаОшибки					= СтекОшибок.Добавить();
					НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаВеткиРазделения.ИмяЭлемента;
					НоваяСтрокаОшибки.ОписаниеОшибки	= "Избыточная ветка разделения";
					НоваяСтрокаОшибки.КодОшибки			= 14;
				Иначе
					СписокПроверенныхИмен.Добавить(ИмяЭлемента);
				КонецЕсли;
			КонецЦикла;
			
			//ПроверитьРазделение(СтрокаДерева, ДеревоТочекЗнач, Разделение, ИндексВетки);
			Для Каждого СтрокаВеткиРазделения Из СтрокаДерева.Строки Цикл
				
				Если НЕ (СтрокаВеткиРазделения.Слияние = ИдСлияния) Тогда
					
					Если СтрокаВеткиРазделения.Слияние = "" Тогда
						
						НоваяСтрокаОшибки					= СтекОшибок.Добавить();
						НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаВеткиРазделения.ИмяЭлемента;
						НоваяСтрокаОшибки.ОписаниеОшибки	= "Ветка разделения не ведет к слиянию";
						НоваяСтрокаОшибки.КодОшибки			= 10;
						
					ИначеЕсли ИдСлияния = "" Тогда
						
						НоваяСтрокаОшибки					= СтекОшибок.Добавить();
						НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаВеткиРазделения.ИмяЭлемента;
						НоваяСтрокаОшибки.ОписаниеОшибки	= "Ветка разделения не должна вести к слиянию";
						НоваяСтрокаОшибки.КодОшибки			= 11;
						
					ИначеЕсли НЕ (ИдСлияния = "") Тогда
						
						НоваяСтрокаОшибки					= СтекОшибок.Добавить();
						НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаВеткиРазделения.ИмяЭлемента;
						НоваяСтрокаОшибки.ОписаниеОшибки	= "Ветка разделения ведет к ошибочному слиянию";
						НоваяСтрокаОшибки.КодОшибки			= 12;
						
					КонецЕсли;
				КонецЕсли;
				
				// Проверим на то, что в ветеке есть хотя бы одна точка действия.
				Если СтрокаВеткиРазделения.Строки.Найти("Действие","ВидЭлемента",Ложь) = Неопределено Тогда
						
					НоваяСтрокаОшибки					= СтекОшибок.Добавить();
					НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаВеткиРазделения.ИмяЭлемента;
					НоваяСтрокаОшибки.ОписаниеОшибки	= "В ветке разделения нет ни одной точки действия";
					НоваяСтрокаОшибки.КодОшибки			= 9;
					
				КонецЕсли;
				
				// Проверим нет ли в ветке точки завершения.
				Если НЕ (СтрокаВеткиРазделения.Строки.Найти("Завершение","ВидЭлемента",Истина) = Неопределено) Тогда
						
						НоваяСтрокаОшибки					= СтекОшибок.Добавить();
						НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаВеткиРазделения.ИмяЭлемента;
						НоваяСтрокаОшибки.ОписаниеОшибки	= "Ветка разделения не ведет к слиянию";
						НоваяСтрокаОшибки.КодОшибки			= 13;
						
				КонецЕсли;
				
				ПредыдущийВидЭлемента = СтрокаДерева.ВидЭлемента;
				
				ПрочитатьДеревоПроверить(СтрокаВеткиРазделения,
										 ДеревоТочекЗнач,
										 СтрокаДерева.ИмяЭлемента,
										 СтрокаВеткиРазделения.ИндексВетки,
										 ПредыдущийВидЭлемента,
										 СтрокаВеткиРазделения.ИмяЭлемента);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаДерева.ВидЭлемента = "Условие"
		ИЛИ СтрокаДерева.ВидЭлемента = "ВыборВарианта" Тогда
			
			Если ПредыдущийВидЭлемента = "Старт"
			ИЛИ ПредыдущийВидЭлемента = "Условие"
			ИЛИ ПредыдущийВидЭлемента = "ВыборВарианта"
			ИЛИ ПредыдущийВидЭлемента = "Разделение"
			ИЛИ ПредыдущийВидЭлемента = "Слияние"
			ИЛИ ПредыдущийВидЭлемента = "Обработка" Тогда
				
				НоваяСтрокаОшибки					= СтекОшибок.Добавить();
				НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаДерева.ИмяЭлемента;
				НоваяСтрокаОшибки.ОписаниеОшибки	= "Условие/Выбор варианта идет после недопустимой точки (старт, разделение, слияние, обработка, условие/выбор варианта)";
				НоваяСтрокаОшибки.КодОшибки			= 5;
				
			КонецЕсли;
			
			ПредыдущийВидЭлемента = СтрокаДерева.ВидЭлемента;
			
			Для Каждого СтрокаВариантаУсловия Из СтрокаДерева.Строки Цикл
				ПрочитатьДеревоПроверить(СтрокаВариантаУсловия,
										 ДеревоТочекЗнач,
										 Разделение,
										 ИндексВетки,
										 ПредыдущийВидЭлемента,
										 ТекущаяВеткаРазделения);
			КонецЦикла;
		КонецЕсли;
		
		ПредыдущийВидЭлемента = СтрокаДерева.ВидЭлемента;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПервичнаяПроверка(СхемаМаршрута)
	
//	Первичная проверка
//
//	Код	Описание ошибки
//	0	Нет точки старта
//	1	Нет точки завершения
//	2	У точки нет входящих линий.
//	3	У точки нет исходящих линий.
//	4	Соединительная линия никуда не ведет.
	
	ТаблицаЭлементов	= ПолучитьИзВременногоХранилища(АдресТаблицыЭлементов);
	
	Если ТаблицаЭлементов.Найти(Тип("ЭлементГрафическойСхемыСтарт"),"Тип") = Неопределено Тогда
		НоваяСтрокаОшибки					= СтекОшибок.Добавить();
		НоваяСтрокаОшибки.ИмяЭлемента		= "";
		НоваяСтрокаОшибки.ОписаниеОшибки	= "Нет точки старта";
		НоваяСтрокаОшибки.КодОшибки			= 0;
	КонецЕсли;
	
	Если ТаблицаЭлементов.Найти(Тип("ЭлементГрафическойСхемыЗавершение"),"Тип") = Неопределено Тогда
		НоваяСтрокаОшибки					= СтекОшибок.Добавить();
		НоваяСтрокаОшибки.ИмяЭлемента		= "";
		НоваяСтрокаОшибки.ОписаниеОшибки	= "Нет точки завершения";
		НоваяСтрокаОшибки.КодОшибки			= 1;
	КонецЕсли;
	
	Для Каждого СтрокаЭлемента Из ТаблицаЭлементов Цикл
		
		Если СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			Если СтрокаЭлемента.КонецЭлемент = Неопределено Тогда
				НоваяСтрокаОшибки					= СтекОшибок.Добавить();
				НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаЭлемента.Имя;
				НоваяСтрокаОшибки.ОписаниеОшибки	= "Соединительная линия никуда не ведет";
				НоваяСтрокаОшибки.КодОшибки			= 4;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыДействие")
		ИЛИ СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыРазделение")
		ИЛИ СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыУсловие")
		ИЛИ СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыЗавершение")
		ИЛИ СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыСтарт")
		ИЛИ СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыСлияние")
		ИЛИ СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс")
		ИЛИ СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыОбработка")
		ИЛИ СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
			
			НаименованиеЭлемента = СтрокаЭлемента.Наименование;
			
			Если СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыСтарт") Тогда
				МассивИсходящихЛиний	= ТаблицаЭлементов.НайтиСтроки(Новый Структура("Тип, НачалоЭлемент",Тип("ЭлементГрафическойСхемыСоединительнаяЛиния"),СтрокаЭлемента.Элемент));
				
				Если МассивИсходящихЛиний.Количество() = 0 Тогда
					НоваяСтрокаОшибки					= СтекОшибок.Добавить();
					НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаЭлемента.Имя;
					НоваяСтрокаОшибки.ОписаниеОшибки	= "У элемента: '" + НаименованиеЭлемента + "' нет исходящих линий";
					НоваяСтрокаОшибки.КодОшибки			= 3;
				КонецЕсли;
			ИначеЕсли СтрокаЭлемента.Тип = Тип("ЭлементГрафическойСхемыЗавершение") Тогда
				МассивВходящихЛиний		= ТаблицаЭлементов.НайтиСтроки(Новый Структура("Тип, КонецЭлемент",Тип("ЭлементГрафическойСхемыСоединительнаяЛиния"),СтрокаЭлемента.Элемент));
				
				Если МассивВходящихЛиний.Количество() = 0 Тогда
					НоваяСтрокаОшибки					= СтекОшибок.Добавить();
					НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаЭлемента.Имя;
					НоваяСтрокаОшибки.ОписаниеОшибки	= "У элемента: '" + НаименованиеЭлемента + "' нет входящих линий";
					НоваяСтрокаОшибки.КодОшибки			= 2;
				КонецЕсли;
			Иначе
				МассивИсходящихЛиний	= ТаблицаЭлементов.НайтиСтроки(Новый Структура("Тип, НачалоЭлемент",Тип("ЭлементГрафическойСхемыСоединительнаяЛиния"),СтрокаЭлемента.Элемент));
				МассивВходящихЛиний		= ТаблицаЭлементов.НайтиСтроки(Новый Структура("Тип, КонецЭлемент",Тип("ЭлементГрафическойСхемыСоединительнаяЛиния"),СтрокаЭлемента.Элемент));
				
				Если МассивИсходящихЛиний.Количество() = 0 Тогда
					НоваяСтрокаОшибки					= СтекОшибок.Добавить();
					НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаЭлемента.Имя;
					НоваяСтрокаОшибки.ОписаниеОшибки	= "У элемента: '" + НаименованиеЭлемента + "' нет исходящих линий";
					НоваяСтрокаОшибки.КодОшибки			= 3;
				КонецЕсли;
				
				Если МассивВходящихЛиний.Количество() = 0 Тогда
					НоваяСтрокаОшибки					= СтекОшибок.Добавить();
					НоваяСтрокаОшибки.ИмяЭлемента		= СтрокаЭлемента.Имя;
					НоваяСтрокаОшибки.ОписаниеОшибки	= "У элемента: '" + НаименованиеЭлемента + "' нет входящих линий";
					НоваяСтрокаОшибки.КодОшибки			= 2;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат (СтекОшибок.Количество() = 0);
	
КонецФункции

// *******Интерактивное взаимодействие с картой*******************************

&НаКлиенте
Функция ОтрисоватьНедопустимуюВходящуюТочкуУсловиВыбораВарианта(ТекущийЭлементКоллекции,ПервыйВход = Ложь)
	
	Попытка
		// Отрисуем текущий элемент
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255);
		ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		Элементы.СхемаМаршрута.ТекущийЭлемент = ФокусЭлемент;
		
		Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				И (ЭлементСхемы.КонецЭлемент = ФокусЭлемент) Тогда
				
				Если ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыСтарт")
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыУсловие")
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыВыборВарианта")
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыРазделение")
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыСлияние")
					ИЛИ ТипЗнч(ЭлементСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыОбработка") Тогда
					
					ЭлементСхемы.ЦветЛинии	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
					
					ЭлементСхемы.НачалоЭлемент.ЦветРамки	= Новый Цвет(255, 0, 0);
					ЭлементСхемы.НачалоЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.НачалоЭлемент.Имя);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтрисоватьПутьНеДолжноВестиКСлиянию(ТекущийЭлементКоллекции, ПервыйВход = Ложь)
	
	Попытка
	Если ПервыйВход Тогда
		
		// Получим ветку элемента разделения.
		ЭлементКоллекцииРазделение = ТекущийЭлементКоллекции.ПолучитьРодителя();
		
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ЭлементКоллекцииРазделение.ИмяЭлемента));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255);
		ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		// Отрисуем текущий элемент
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		// Отрисуем ошибочное слияние  и сделаем его текущим.
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.Слияние));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		ФокусЭлемент.ЦветРамки	= Новый Цвет(255, 0, 0);
		ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		Элементы.СхемаМаршрута.ТекущийЭлемент = ФокусЭлемент;
		
	Иначе
		
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			
			ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
		Иначе
			
			ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
				
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				И (ЭлементСхемы.НачалоЭлемент = ФокусЭлемент) Тогда
				
					ЭлементСхемы.ЦветЛинии	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КоллекцияЭлементов = ТекущийЭлементКоллекции.ПолучитьЭлементы();
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		ОтрисоватьПутьНеДолжноВестиКСлиянию(ЭлементКоллекции);
	КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтрисоватьПутьКОшибочномуСлиянию(ТекущийЭлементКоллекции,Разделение, ПервыйВход = Ложь);
	
	Попытка
	Если ПервыйВход Тогда
		
		// Получим ветку элемента разделения.
		ЭлементКоллекцииРазделение = ТекущийЭлементКоллекции.ПолучитьРодителя();
		
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ЭлементКоллекцииРазделение.ИмяЭлемента));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255);
		ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		// Отрисуем текущий элемент
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		// Отрисуем ошибочное слияние  и сделаем его текущим.
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.Слияние));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		ФокусЭлемент.ЦветРамки	= Новый Цвет(255, 0, 0);
		ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		Элементы.СхемаМаршрута.ТекущийЭлемент = ФокусЭлемент;
		
	Иначе
		
		МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
		
		ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
		
		СписокЭлементов.Добавить(ФокусЭлемент.Имя);
		
		Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			
			ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
		Иначе
			
			ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
				
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				И (ЭлементСхемы.НачалоЭлемент = ФокусЭлемент) Тогда
				
					ЭлементСхемы.ЦветЛинии	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КоллекцияЭлементов = ТекущийЭлементКоллекции.ПолучитьЭлементы();
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		ОтрисоватьПутьКОшибочномуСлиянию(ЭлементКоллекции, Разделение);
	КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтрисоватьПутьЗаПределыРазделенияКЗавршению(ТекущийЭлементКоллекции, ПервыйВход = Ложь)
	
	Попытка
	МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
	
	ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
	
	СписокЭлементов.Добавить(ФокусЭлемент.Имя);
	
	Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
		
		ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		Если ПервыйВход Тогда
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если (ФокусЭлемент.НачалоЭлемент = ЭлементСхемы) Тогда
					ЭлементСхемы.ЦветРамки	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		Если ТекущийЭлементКоллекции.ВидЭлемента = "Завершение" Тогда
			
			ФокусЭлемент.ЦветРамки	= Новый Цвет(255, 0, 0);
			ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
			Элементы.СхемаМаршрута.ТекущийЭлемент = ФокусЭлемент;
			
		Иначе
			ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				И (ЭлементСхемы.НачалоЭлемент = ФокусЭлемент) Тогда
				
					ЭлементСхемы.ЦветЛинии	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КоллекцияЭлементов = ТекущийЭлементКоллекции.ПолучитьЭлементы();
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		ОтрисоватьПутьЗаПределыРазделенияКЗавршению(ЭлементКоллекции);
	КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтрисоватьВыходЗаПределыРазделения(ТекущийЭлементКоллекции, Разделение, ПервыйВход = Ложь)
	
	Попытка
	МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
	
	ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
	
	СписокЭлементов.Добавить(ФокусЭлемент.Имя);
	
	Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
		
		ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		Если ПервыйВход Тогда
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если (ФокусЭлемент.НачалоЭлемент = ЭлементСхемы) Тогда
					ЭлементСхемы.ЦветРамки	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		Если НЕ (ТекущийЭлементКоллекции.Разделение = Разделение) Тогда
			
			ФокусЭлемент.ЦветРамки	= Новый Цвет(255, 0, 0);
			ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
			Элементы.СхемаМаршрута.ТекущийЭлемент = ФокусЭлемент;
			
		Иначе
			ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				И (ЭлементСхемы.НачалоЭлемент = ФокусЭлемент) Тогда
				
					ЭлементСхемы.ЦветЛинии	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КоллекцияЭлементов = ТекущийЭлементКоллекции.ПолучитьЭлементы();
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		
		Если ТекущийЭлементКоллекции.ВидЭлемента = "Разделение" Тогда
			ОтрисоватьВыходЗаПределыРазделения(ЭлементКоллекции, ТекущийЭлементКоллекции.ИмяЭлемента);
		Иначе
			ОтрисоватьВыходЗаПределыРазделения(ЭлементКоллекции, Разделение);
		КонецЕсли;
		
	КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтрисоватьВеткуБезТочекДействия(ТекущийЭлементКоллекции, ПервыйВход = Ложь)
	
	Попытка
	МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
	
	ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
	
	СписокЭлементов.Добавить(ФокусЭлемент.Имя);
	
	Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
		
		ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		Если ПервыйВход Тогда
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если (ФокусЭлемент.НачалоЭлемент = ЭлементСхемы) Тогда
					ЭлементСхемы.ЦветРамки	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
		Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
			И (ЭлементСхемы.НачалоЭлемент = ФокусЭлемент) Тогда
			
				ЭлементСхемы.ЦветЛинии	= Новый Цвет(0, 255, 0);
				ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 255, 0);
				ЭлементСхемы.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
				
				СписокЭлементов.Добавить(ЭлементСхемы.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КоллекцияЭлементов = ТекущийЭлементКоллекции.ПолучитьЭлементы();
	Если НЕ (ТекущийЭлементКоллекции.ВидЭлемента = "Разделение") Тогда
		Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
			ОтрисоватьВеткуБезТочекДействия(ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтрисоватьПутьОтЭлемента(ТекущийЭлементКоллекции, ПервыйВход = Ложь)
	
	Попытка
	МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
	
	ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
	
	СписокЭлементов.Добавить(ФокусЭлемент.Имя);
	
	Если ПервыйВход Тогда
		
		Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			
			ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если (ФокусЭлемент.НачалоЭлемент = ЭлементСхемы) Тогда
					ЭлементСхемы.ЦветРамки	= Новый Цвет(0, 0, 255);
					ЭлементСхемы.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 0, 255);
			ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				
				Если (ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния"))
				И (ЭлементСхемы.НачалоЭлемент = ФокусЭлемент) Тогда
					
					ЭлементСхемы.ЦветЛинии	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		КоллекцияЭлементов = ТекущийЭлементКоллекции.ПолучитьЭлементы();
		
		Если (КоллекцияЭлементов.Количество() = 0)
		И НЕ (ТекущийЭлементКоллекции.ВидЭлемента = "Завершение") Тогда
		
			Родитель = ТекущийЭлементКоллекции.ПолучитьРодителя();
			Если Родитель = Неопределено Тогда
				КоллекцияЭлементов = ДеревоТочек.ПолучитьЭлементы();
			Иначе
				КоллекцияЭлементов = Родитель.ПолучитьЭлементы();
			КонецЕсли;
			
			ПрошлиТекущийЭлементКоллекции = Ложь;
			Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
				
				Если ПрошлиТекущийЭлементКоллекции Тогда
					ОтрисоватьПутьОтЭлемента(ЭлементКоллекции);
				КонецЕсли;
				
				Если НЕ ПрошлиТекущийЭлементКоллекции И (ЭлементКоллекции.ИмяЭлемента = ТекущийЭлементКоллекции.ИмяЭлемента) Тогда
					ПрошлиТекущийЭлементКоллекции = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли КоллекцияЭлементов.Количество() > 0 Тогда
			
			Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
				ОтрисоватьПутьОтЭлемента(ЭлементКоллекции);
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			ФокусЭлемент.ЦветЛинии	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		Иначе
			ФокусЭлемент.ЦветРамки	= Новый Цвет(0, 255, 0);
			ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
			
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
				И (ЭлементСхемы.НачалоЭлемент = ФокусЭлемент) Тогда
					
					ЭлементСхемы.ЦветЛинии	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.ЦветТекста	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КоллекцияЭлементов = ТекущийЭлементКоллекции.ПолучитьЭлементы();
		
		Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
			ОтрисоватьПутьОтЭлемента(ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтрисоватьОшибкуПервичнойПроверки(ТекущийЭлементКоллекции)
	
	Попытка
	МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
	
	ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
	
	СписокЭлементов.Добавить(ФокусЭлемент.Имя);
	
	Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
		ФокусЭлемент.ЦветЛинии	= Новый Цвет(255, 0, 0);
		ФокусЭлемент.ЦветТекста	= Новый Цвет(255, 0, 0);
		ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
	Иначе
		ФокусЭлемент.ЦветРамки	= Новый Цвет(255, 0, 0);
		ФокусЭлемент.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
	КонецЕсли;
	
	Элементы.СхемаМаршрута.ТекущийЭлемент = ФокусЭлемент;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтрисоватьИзбыточнуюВетку(ТекущийЭлементКоллекции)
	
	Попытка
	МассивСтрок = ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ТекущийЭлементКоллекции.ИмяЭлемента));
	
	ФокусЭлемент = СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрок[0].Индекс];
	
	СписокЭлементов.Добавить(ФокусЭлемент.Имя);
	
	Если ТипЗнч(ФокусЭлемент) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
		
		ФокусЭлемент.ЦветЛинии	= Новый Цвет(255, 0, 0);
		ФокусЭлемент.ЦветТекста	= Новый Цвет(0, 255, 0);
		ФокусЭлемент.Линия		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		
			Для Каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
				Если (ФокусЭлемент.НачалоЭлемент = ЭлементСхемы) Тогда
					ЭлементСхемы.ЦветРамки	= Новый Цвет(0, 255, 0);
					ЭлементСхемы.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
					
					СписокЭлементов.Добавить(ЭлементСхемы.Имя);
				КонецЕсли;
			КонецЦикла;
	КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПодключаемыйДеревоТочекПриАктивацииСтроки()
	
	ТекущиеДанные = Элементы.ДеревоТочек.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл
		
		МассивСтрокИндексов	= ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ЭлементСписка.Значение));
		ЭлементСхемы		= СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрокИндексов[0].Индекс];
		
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			Линия = ЭлементСхемы;
			
			Линия.ЦветЛинии		= Новый Цвет(179, 172, 134);
			Линия.ЦветТекста	= Новый Цвет(179, 172, 134);
			Линия.Линия			= Новый Линия(ТипСоединительнойЛинии.Сплошная,1);
			
		Иначе
			НеЛиния = ЭлементСхемы;
			
			НеЛиния.ЦветРамки	= Новый Цвет(179, 172, 134);
			НеЛиния.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,1);
			
		КонецЕсли;
	КонецЦикла;
	СписокЭлементов.Очистить();
	
	Если ВызовИзСтека Тогда
		
		Если КодОшибки = 5 Тогда
			ОтрисоватьНедопустимуюВходящуюТочкуУсловиВыбораВарианта(ТекущиеДанные,Истина);
		КонецЕсли;
		
		Если КодОшибки = 7 Тогда
			ОтрисоватьВыходЗаПределыРазделения(ТекущиеДанные, ТекущиеДанные.Разделение, Истина);
		КонецЕсли;
		
		Если КодОшибки = 9 Тогда
			ОтрисоватьВеткуБезТочекДействия(ТекущиеДанные, Истина);
		КонецЕсли;
		
		Если КодОшибки = 11 Тогда
			ОтрисоватьПутьНеДолжноВестиКСлиянию(ТекущиеДанные, Истина);
		КонецЕсли;
		
		Если КодОшибки = 12 Тогда
			ОтрисоватьПутьКОшибочномуСлиянию(ТекущиеДанные,ТекущиеДанные.Разделение, Истина);
		КонецЕсли;
		
		Если КодОшибки = 13 Тогда
			ОтрисоватьПутьЗаПределыРазделенияКЗавршению(ТекущиеДанные, Истина);
		КонецЕсли;
		
		Если КодОшибки = 14 Тогда
			ОтрисоватьИзбыточнуюВетку(ТекущиеДанные);
		КонецЕсли;
		
		ВызовИзСтека = Ложь;
	Иначе
		
		ОтрисоватьПутьОтЭлемента(ТекущиеДанные, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТочекПриАктивизацииСтроки(Элемент)
	
	Если ДеревоЗаполнено Тогда
		ПодключитьОбработчикОжидания("ПодключаемыйДеревоТочекПриАктивацииСтроки",0.1 ,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйСтекОшибокПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.СтекОшибок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ДеревоЗаполнено Тогда
		
		КодОшибки		= ТекущиеДанные.КодОшибки;
		ВызовИзСтека	= Истина;
		
		КоллекцияЭлементов = ДеревоТочек.ПолучитьЭлементы();
		
		ИдентификаторСтроки = 0;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ИмяЭлемента", ИдентификаторСтроки, КоллекцияЭлементов, ТекущиеДанные.ИмяЭлемента, Ложь);
		
		Если (ИдентификаторСтроки = 0) Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ДеревоТочек.ТекущаяСтрока = ИдентификаторСтроки;
		
	Иначе
		
		Для Каждого ЭлементСписка Из СписокЭлементов Цикл
			
			МассивСтрокИндексов	= ИндексыЭлементов.НайтиСтроки(Новый Структура("Имя",ЭлементСписка.Значение));
			ЭлементСхемы		= СхемаМаршрута.ЭлементыГрафическойСхемы[МассивСтрокИндексов[0].Индекс];
			
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
				Линия = ЭлементСхемы;
				
				Линия.ЦветЛинии		= Новый Цвет(179, 172, 134);
				Линия.ЦветТекста	= Новый Цвет(179, 172, 134);
				Линия.Линия			= Новый Линия(ТипСоединительнойЛинии.Сплошная,1);
				
			Иначе
				НеЛиния = ЭлементСхемы;
				
				НеЛиния.ЦветРамки	= Новый Цвет(179, 172, 134);
				НеЛиния.Рамка		= Новый Линия(ТипСоединительнойЛинии.Сплошная,1);
				
			КонецЕсли;
		КонецЦикла;
		СписокЭлементов.Очистить();
			
		Если НЕ ТекущиеДанные.ИмяЭлемента = "" Тогда
			
			ОтрисоватьОшибкуПервичнойПроверки(ТекущиеДанные);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтекОшибокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПодключаемыйСтекОшибокПриАктивизацииСтроки",0.1 ,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаМаршрутаПриАктивизации(Элемент)
	
	Если ДеревоЗаполнено Тогда
	
		ЭлементСхемы = Элемент.ТекущийЭлемент;
		
		Если ЭлементСхемы = Неопределено Тогда Возврат; КонецЕсли;
		
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния")
		ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДекорация") 
		ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ВариантыЭлементаГрафическойСхемыВыборВарианта") 
		ИЛИ ТипЗнч(ЭлементСхемы) = Тип("ВариантЭлементаГрафическойСхемыВыборВарианта") Тогда
			Возврат;
		КонецЕсли;
		
		КоллекцияЭлементов = ДеревоТочек.ПолучитьЭлементы();
		
		ИдентификаторСтроки = 0;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ИмяЭлемента", ИдентификаторСтроки, КоллекцияЭлементов, ЭлементСхемы.Имя, Ложь);
		
		Если (ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")) И (ИдентификаторСтроки = 0) Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ДеревоТочек.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

&НаСервере
Функция ПолучитьМакетОшибок()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет("МакетОшибок");
	
КонецФункции

&НаКлиенте
Процедура СтекОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СтекОшибок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ПараметрыФормы = Новый Структура("КодОшибки,Макет",ТекущиеДанные.КодОшибки,ПолучитьМакетОшибок());
	
	ИмяОбработки = Лев(ИмяФормы, ПоследнийРазделитель(ИмяФормы));
	ИмяВызываемойФормы = ИмяОбработки + "УправляемаяФормаОписанияОшибки";
	ОткрытьФорму(ИмяВызываемойФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаСпискаОшибок.Видимость = Ложь;
	Элементы.ГруппаНетОшибок.Видимость	  = Ложь;
	
	Если Параметры.Свойство("СхемаМаршрута") Тогда
		
		Элементы.ПутьККарте.Видимость = Ложь;
		
		СхемаМаршрута = Параметры.СхемаМаршрута;
		
		ПутьККарте	  = ПолучитьИмяВременногоФайла("grs");
		
		СхемаМаршрута.Записать(ПутьККарте);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПутьККарте, КодировкаТекста.UTF8);
		
		ПроверитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВывестиПолныйПереченьОшибок(Команда)
	
	ПараметрыФормы = Новый Структура("Макет",ПолучитьМакетОшибок());
	
	ИмяОбработки = Лев(ИмяФормы, ПоследнийРазделитель(ИмяФормы));
	ИмяВызываемойФормы = ИмяОбработки + "УправляемаяФормаОписанияОшибки";
	ОткрытьФорму(ИмяВызываемойФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры
