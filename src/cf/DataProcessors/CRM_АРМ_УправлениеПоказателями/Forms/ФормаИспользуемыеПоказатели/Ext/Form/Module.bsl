
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОтборПодразделение = ТекущийПользователь.Подразделение;
	ЧьиПоказатели = "Мои";
	НачалоПериода = НачалоМесяца(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	КонецПериода = КонецМесяца(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	ПериодичностьКонтроля = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	ПредставлениеПериода = ПредставлениеПериода(НачалоПериода, КонецПериода, "L = ru_RU");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПользователиСписок, "ДоступныеПользователи", CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьМассивПользователей(Ложь));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПользователиСписок, "ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ПользователиСписок, "Подразделение", ОтборПодразделение, Истина, ВидСравненияКомпоновкиДанных.Равно);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПланыПользователей, "НачалоПериода", НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПланыПользователей, "КонецПериода", КонецПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПланыПользователей, "Менеджер", ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЧьиПоказателиПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатВыбора, "ПредставлениеПериода,ПериодичностьКонтроля");
	
	НачалоПериода = РезультатВыбора.НачалоПериода;
	КонецПериода  = РезультатВыбора.КонецПериода;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПланыПользователей, "НачалоПериода", НачалоПериода, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПланыПользователей, "КонецПериода", КонецПериода, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СдвинутьПериод(Множетель)

	Если ПериодичностьКонтроля = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		НачалоПериода = ДобавитьМесяц(НачалоПериода, Множетель);	
		КонецПериода  = КонецМесяца(ДобавитьМесяц(КонецМесяца(КонецПериода) , Множетель));	
		
	ИначеЕсли ПериодичностьКонтроля = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		НачалоПериода = ДобавитьМесяц(НачалоПериода, Множетель * 3);	
		КонецПериода  = КонецМесяца(ДобавитьМесяц(КонецПериода , Множетель * 3));	
		
	КонецЕсли;	
	
	ПредставлениеПериода = ПредставлениеПериода(НачалоПериода, КонецПериода, "L = ru_RU");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПланыПользователей, "НачалоПериода", НачалоПериода, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПланыПользователей, "КонецПериода", КонецПериода, Истина);

КонецПроцедуры // СдвинутьПериод()

&НаКлиенте
Процедура ПерейтиНазад(Команда)
	
	СдвинутьПериод(-1);
		
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВперед(Команда)
	
	СдвинутьПериод(1);
		
КонецПроцедуры

&НаКлиенте
Процедура ЧьиПоказателиПриИзменении(Элемент)
	ВидимостьЭлементов = ЧьиПоказатели <> "Мои";
	Элементы.ГруппаПользователи.Видимость = ВидимостьЭлементов;
	Элементы.УстановкаПоказателей.Видимость = ВидимостьЭлементов;
	Если ЧьиПоказатели = "Мои" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПланыПользователей, "Менеджер", ТекущийПользователь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьТипРеквизитаПодразделение()
	
	ПредыдущееЗначение = ОтборПодразделение;
	Если ОтборПодразделениеСпособ = 2 Тогда 
		ОписаниеРеквизита = Новый ОписаниеТипов("СписокЗначений");
	Иначе
		ОписаниеРеквизита = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
	ОтборПодразделение = ОписаниеРеквизита.ПривестиЗначение(ОтборПодразделение);
	
	Если ТипЗнч(ПредыдущееЗначение) <> ТипЗнч(ОтборПодразделение) Тогда 
		
		Если ТипЗнч(ОтборПодразделение) = Тип("СписокЗначений") И ЗначениеЗаполнено(ПредыдущееЗначение) Тогда 
			ОтборПодразделение.Добавить(ПредыдущееЗначение);
		ИначеЕсли ТипЗнч(ПредыдущееЗначение) = Тип("СписокЗначений") И ПредыдущееЗначение.Количество()>0 Тогда 
			ОтборПодразделение = ПредыдущееЗначение[0].Значение;
		КонецЕсли;
		
		//в списке можно выбирать только подразделения
		Если ТипЗнч(ОтборПодразделение) = Тип("СписокЗначений") Тогда 
			ОтборПодразделение.ТипЗначения =  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеСпособПриИзменении(Элемент)
	
	УстановитьТипРеквизитаПодразделение();
	ОтборПодразделениеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСписокПриАктивизацииСтроки(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ПланыПользователей, "Менеджер", Элемент.ТекущаяСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	Если ОтборПодразделениеСпособ = 0 Тогда
		Сравнение = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ОтборПодразделениеСпособ = 1 Тогда
		Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
	Иначе
		Сравнение = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ПользователиСписок, "Подразделение", ОтборПодразделение, Истина, Сравнение);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(ПользователиСписок, "Подразделение");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтоПолныеПрава() Экспорт
 
    Возврат РольДоступна("ПолныеПрава");
 
КонецФункции // ПолучитьДанныеДинСписка()


&НаКлиенте
Процедура УстановкаПоказателей(Команда)
	Если Элементы.ПользователиСписок.ТекущаяСтрока <> Неопределено И (ТекущийПользователь <> Элементы.ПользователиСписок.ТекущаяСтрока ИЛИ ЭтоПолныеПрава()) Тогда
		СписокИспользуемыхШаблонов = СписокИспользуемыхПоказателей();
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НеВСписке", СписокИспользуемыхШаблонов);
		Подсказка = НСтр("ru = 'Доступные показатели для пользователя %1, на %2'");
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Подсказка, Элементы.ПользователиСписок.ТекущаяСтрока, ПредставлениеПериода);
		ПараметрыФормы.Вставить("Подсказка", Подсказка);
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаПоказателейЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.CRM_ШаблоныКлючевыхПоказателей.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ТекущийПользователь = Элементы.ПользователиСписок.ТекущаяСтрока Тогда
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вы не можете установить показатель для себя.'"),, "ПользователиСписок");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран пользователь, для которого нужно установить показатель.'"),, "ПользователиСписок");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановкаПоказателейЗавершение(ВыбранныйШаблон, Дополнительно) Экспорт
	Если ВыбранныйШаблон <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Исполнитель", Элементы.ПользователиСписок.ТекущаяСтрока);
		ПараметрыФормы.Вставить("Показатель", ВыбранныйШаблон);
		ПериодПланирования = Новый СтандартныйПериод;
		ПериодПланирования.ДатаНачала = НачалоДня(НачалоПериода);
		ПериодПланирования.ДатаОкончания = НачалоДня(КонецПериода);
		ПараметрыФормы.Вставить("ПериодПланирования", ПериодПланирования);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновлениеСпискаПланов", ЭтотОбъект);
		ОткрытьФорму("Документ.CRM_УстановкаИспользуемыхПоказателей.ФормаОбъекта", ПараметрыФормы,,,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновлениеСпискаПланов(Результат, Дополнительно) Экспорт
	Элементы.ПланыПользователей.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПланыПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновлениеСпискаПланов", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.Регистратор);
	ОткрытьФорму("Документ.CRM_УстановкаИспользуемыхПоказателей.ФормаОбъекта", ПараметрыФормы,,,,, ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Функция СписокИспользуемыхПоказателей()
	Возврат ПолучитьДанныеДинСписка(ПланыПользователей, "Показатель").ВыгрузитьКолонку("Показатель")
КонецФункции

&НаСервере
Функция ПолучитьДанныеДинСписка(ДинСписок, СтрокаПолей) Экспорт
 
    СКД = Новый СхемаКомпоновкиДанных;
    Источник = СКД.ИсточникиДанных.Добавить();
    Источник.Имя = "ЛокальнаяБаза";
    Источник.СтрокаСоединения     = "";
    Источник.ТипИсточникаДанных = "Local";
    
    // скопируем текст запроса из динамического списка
 
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Имя = "Основной";
    НаборДанных.ИсточникДанных = "ЛокальнаяБаза";
    НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
    НаборДанных.Запрос = ДинСписок.ТекстЗапроса;
    ТекстЗапроса = ДинСписок.ТекстЗапроса;
    СКД.НаборыДанных.Основной.Запрос = ТекстЗапроса;
    
    // добавляем поля
 
    МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПолей);
    Для каждого Поле Из МассивПолей Цикл
        ПолеСКД = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
        ПолеСКД.Заголовок     = Поле;
        ПолеСКД.ПутьКДанным = Поле;
        ПолеСКД.Поле         = Поле;
    КонецЦикла;
    
     НастройкиКомпоновкиДанных     = СКД.НастройкиПоУмолчанию;
    //добавим поля в группировку детальных записей
 
    ГруппировкаДетальная        = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    Для каждого Поле Из МассивПолей Цикл
        ВыбранноеПоле = ГруппировкаДетальная.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Заголовок     = Поле;
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле            = Новый ПолеКомпоновкиДанных(Поле);
    КонецЦикла; 
    
    // подготовим таблицу и процессор вывода результата СКД в таблицу значений
 
    Таб = Новый ТаблицаЗначений;    
    ПроцессорВыводаВТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;    
    ПроцессорВыводаВТЗ.УстановитьОбъект(Таб);    
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
    
    // загрузим настройки из настроек динамического списка
 
    Для Каждого ЭлементОтбораДС Из ДинСписок.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбораДС) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭлементОтбораСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        	ЗаполнитьЗначенияСвойств(ЭлементОтбораСКД, ЭлементОтбораДС);
		Иначе
			ЭлементОтбораСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбораДС));
        	ЗаполнитьЗначенияСвойств(ЭлементОтбораСКД, ЭлементОтбораДС);
			Для каждого ЭлементГруппыОтбораДС из ЭлементОтбораДС.Элементы Цикл
				ЭлементГруппыОтбораСКД = ЭлементОтбораСКД.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	        	ЗаполнитьЗначенияСвойств(ЭлементГруппыОтбораСКД, ЭлементГруппыОтбораДС);
			КонецЦикла;
		КонецЕсли;
    КонецЦикла;    
    
    Для Каждого ЗначениеПараметраДС Из ДинСписок.Параметры.Элементы Цикл
        ЗначениеПараметраСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Добавить();
        ЗаполнитьЗначенияСвойств(ЗначениеПараметраСКД, ЗначениеПараметраДС);
    КонецЦикла;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;    
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
    
    Таб = ПроцессорВыводаВТЗ.Вывести(ПроцессорКомпоновкиДанных);    
    
    Возврат Таб;
 
КонецФункции // ПолучитьДанныеДинСписка()
