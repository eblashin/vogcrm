
///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;	// Хранит свойства динамического списка.

&НаКлиенте
Перем КэшОграничениеТипов;	// Хранит ограничение типов

&НаКлиенте
Перем СписокОткрытыхФорм;	// Хранит список открытых форм.

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийВидЖурналаЗаполнен(ВидЖурнала)
	Если ТипЗнч(ВидЖурнала) = Тип("СправочникСсылка.CRM_ГруппыУниверсальногоЖурнала") И ЗначениеЗаполнено(ВидЖурнала) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(ПериодНачало, ПериодОкончание, ФорматнаяСтрокаДаты = Неопределено)
	Если ЗначениеЗаполнено(ПериодНачало) ИЛИ ЗначениеЗаполнено(ПериодОкончание) Тогда
		Если ФорматнаяСтрокаДаты = Неопределено Тогда
			ФорматнаяСтрокаДаты = "ДЛФ=D";
		КонецЕсли;
		Если ЗначениеЗаполнено(ПериодНачало) И Не ЗначениеЗаполнено(ПериодОкончание) Тогда
			Возврат Формат(ПериодНачало, ФорматнаяСтрокаДаты) + " - ...";
		ИначеЕсли Не ЗначениеЗаполнено(ПериодНачало) И ЗначениеЗаполнено(ПериодОкончание) Тогда
			Возврат "... - " + Формат(ПериодОкончание, ФорматнаяСтрокаДаты);
		Иначе
			Если НачалоДня(ПериодНачало) = НачалоДня(ПериодОкончание) Тогда
				Возврат Формат(НачалоДня(ПериодНачало), ФорматнаяСтрокаДаты);
			Иначе
				Возврат Формат(ПериодНачало, ФорматнаяСтрокаДаты) + " - " + Формат(ПериодОкончание, ФорматнаяСтрокаДаты);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	Если ЗначениеЗаполнено(Форма.ТекущийВидЖурнала) Тогда
		ЗаголовокФормы = Строка(Форма.ТекущийВидЖурнала);
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Журнал документов'");
	КонецЕсли;
	Если Форма.ПризнакФормаОткрытаПоПартнеру И НЕ Форма.Элементы.ОтборПартнер.Видимость
		И ЗначениеЗаполнено(Форма.ОтборПартнер) Тогда
		Если ЗначениеЗаполнено(Форма.ОтборКонтактноеЛицо) Тогда
			ЗаголовокФормы = ЗаголовокФормы + " " + НСтр("ru = 'по контакту'") + " """ + Строка(Форма.ОтборКонтактноеЛицо) + """" + " " + НСтр("ru = 'клиента'") + " """ + Строка(Форма.ОтборПартнер) + """";
		Иначе
			ЗаголовокФормы = ЗаголовокФормы + " " + НСтр("ru = 'по клиенту'") + " """ + Строка(Форма.ОтборПартнер) + """";
		КонецЕсли;
	КонецЕсли;
	Для Каждого ТекОтбор Из Форма.ОтборСозданы Цикл
		Если ТекОтбор.Пометка Тогда
			ОтборПоПериоду = ТекОтбор.Значение;
			Если ЗначениеЗаполнено(ОтборПоПериоду.ДатаНачала) ИЛИ ЗначениеЗаполнено(ОтборПоПериоду.ДатаОкончания) Тогда
				ЗаголовокФормы = ЗаголовокФормы + " (" + ПолучитьПредставлениеПериода(ОтборПоПериоду.ДатаНачала, ОтборПоПериоду.ДатаОкончания) + ")";
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Форма.Заголовок = ЗаголовокФормы;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеВсеДокументы()
	Возврат НСтр("ru = 'Все документы'");
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ СЕРВЕР

&НаСервере
// Процедура - обработчик команды "КомандаВидСпискаСервер".
//
Процедура КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект,
		СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры // КомандаВидСпискаСервер()

&НаСервере
Процедура ЗаполнитьТаблицуВводимыеНаОснованииОбъекты()
	Обработки.CRM_УниверсальныйЖурналДокументов.ЗаполнитьТаблицуВводимыеНаОснованииОбъекты(ТаблицаВводимыеНаОснованииОбъекты, Истина);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеДляСозданияОбъекты()
	ДоступныеДляСозданияОбъекты.Очистить();
	Если ЗначениеЗаполнено(ОтборПоТипуОбъекта) И ТипЗнч(ОтборПоТипуОбъекта) = Тип("ПланВидовХарактеристикСсылка.CRM_ОбъектыЖурналаДокументов") Тогда
		ДоступныеДляСозданияОбъекты.Добавить(ОтборПоТипуОбъекта);
	Иначе
		ДоступныеДляСозданияОбъекты.ЗагрузитьЗначения(ДоступныеДляОтбораОбъекты.ВыгрузитьЗначения());
		ДоступныеДляСозданияОбъекты.Удалить(ДоступныеДляСозданияОбъекты.НайтиПоЗначению(ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.НайтиПоНаименованию("Взаимодействие")));
	КонецЕсли;
	МассивОбъектыЗапрещенныеДляСоздания = Новый Массив();
	Для Каждого ЗначениеСписка Из ДоступныеДляСозданияОбъекты Цикл
		Если ЗначениеСписка.Значение.ТипЗначения.Типы().Количество() > 0 Тогда
			Попытка
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ЗначениеСписка.Значение.ТипЗначения.Типы()[0]);
			Исключение
				ОбъектМетаданных = Неопределено;
			КонецПопытки;
			Если ОбъектМетаданных <> Неопределено Тогда
				Если Не ПравоДоступа("Добавление", ОбъектМетаданных) Тогда
					МассивОбъектыЗапрещенныеДляСоздания.Добавить(ЗначениеСписка.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Исключения
	СсылкаПВХ = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	Если ЗначениеЗаполнено(СсылкаПВХ) Тогда
		МассивОбъектыЗапрещенныеДляСоздания.Добавить(СсылкаПВХ);
	КонецЕсли;
	СсылкаПВХ = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(Тип("ЗадачаСсылка.ЗадачаИсполнителя"));
	Если ЗначениеЗаполнено(СсылкаПВХ) Тогда
		МассивОбъектыЗапрещенныеДляСоздания.Добавить(СсылкаПВХ);
	КонецЕсли;
	Если МассивОбъектыЗапрещенныеДляСоздания.Количество() > 0 Тогда
		нИндекс = 0;
		Пока нИндекс < ДоступныеДляСозданияОбъекты.Количество() Цикл
			Если МассивОбъектыЗапрещенныеДляСоздания.Найти(ДоступныеДляСозданияОбъекты[нИндекс].Значение) <> Неопределено Тогда
				ДоступныеДляСозданияОбъекты.Удалить(нИндекс);
			Иначе
				нИндекс = нИндекс + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеВидыЖурнала()
	Обработки.CRM_УниверсальныйЖурналДокументов.ЗаполнитьДоступныеВидыЖурнала(ДоступныеВидыЖурнала);
	ДоступныеВидыЖурнала.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Элементы.ОтборВидЖурнала.СписокВыбора.Очистить();
	Элементы.ОтборВидЖурнала.СписокВыбора.ЗагрузитьЗначения(ДоступныеВидыЖурнала.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеДляОтбораОбъекты()
	ДоступныеДляОтбораОбъекты.Очистить();
	Если ТекущийВидЖурналаЗаполнен(ТекущийВидЖурнала) Тогда
		ДоступныеДляОтбораОбъекты.ЗагрузитьЗначения(Обработки.CRM_УниверсальныйЖурналДокументов.ПолучитьСоставГруппыЖурнала(ТекущийВидЖурнала, Истина));
	Иначе
		ДоступныеДляОтбораОбъекты.ЗагрузитьЗначения(CRM_КлиентыСервер.ПолучитьВсеЭлементыПВХОбъектыЖурнала(Истина));
	КонецЕсли;
	ДоступныеДляОтбораОбъекты.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Элементы.ОтборОбъект.СписокВыбора.Очистить();
	Элементы.ОтборОбъект.СписокВыбора.ЗагрузитьЗначения(ДоступныеДляОтбораОбъекты.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(ОбъектСсылка)
	Результат = Новый Структура("ПолноеИмяМетаданных");
	Результат.ПолноеИмяМетаданных = ОбъектСсылка.Метаданные().ПолноеИмя();
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаЭлементПВХ(ПВХСсылка)
	ПолноеИмяМетаданных = CRM_КлиентыСервер.ПолучитьПолноеИмяМетаданныхОбъектаПоСсылкеНаПВХОбъектыЖурнала(ПВХСсылка);
	Если ПолноеИмяМетаданных = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	Результат = Новый Структура("ПолноеИмяМетаданных", ПолноеИмяМетаданных);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ПровестиОтменитьПроведениеНаСервере(ОбъектСсылка, Провести)
	МетаданныеОбъекта = ОбъектСсылка.Метаданные();
	ЭтоДокумент = (Метаданные.Документы.Содержит(МетаданныеОбъекта));
	Если НЕ ЭтоДокумент Тогда Возврат; КонецЕсли;
	ПроведениеДокументаРазрешено = (МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	Если НЕ ПроведениеДокументаРазрешено И НЕ Провести Тогда Возврат; КонецЕсли;
	ОбъектПоСсылке = ОбъектСсылка.ПолучитьОбъект();
	Если ПроведениеДокументаРазрешено Тогда
		ОбъектПоСсылке.Записать(?(Провести, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Провести Тогда // "Провести" для объектов, проведение которых запрещено, считаем - просто записать объект.
		ОбъектПоСсылке.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПометитьСнятьПометкуУдаленияНаСервере(ОбъектСсылка, Пометить)
	ОбъектПоСсылке = ОбъектСсылка.ПолучитьОбъект();
	ОбъектПоСсылке.УстановитьПометкуУдаления(Пометить);
КонецПроцедуры

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(ЭтотОбъект, "Список",
		?(ПризнакФормаОткрытаПоПартнеру, "Обработка.CRM_УниверсальныйЖурналДокументов.ПоПартнеру",
		"Обработка.CRM_УниверсальныйЖурналДокументов"), Неопределено, Неопределено, Неопределено, "ПодменюВидСписка",
		"ВидСпискаИдентификаторТекущейНастройки", "Подключаемый_КомандаВидСписка");
КонецФункции

&НаСервере
Функция УдалитьНедоступныеДокументыИзВводаНаОсновании(СписокОбъектов)
	Если Пользователи.РолиДоступны("ПолныеПрава") Тогда Возврат СписокОбъектов КонецЕсли;
	КолвоЭлементов = СписокОбъектов.Количество();
	Для Сч = 1 По КолвоЭлементов Цикл
		ДокументОбъект = Метаданные.НайтиПоПолномуИмени(СписокОбъектов[КолвоЭлементов - Сч].Значение);
		Если НЕ ПравоДоступа("Добавление", ДокументОбъект) Тогда
			СписокОбъектов.Удалить(СписокОбъектов[КолвоЭлементов - Сч]);
		КонецЕсли;			
	КонецЦикла;	
	Возврат СписокОбъектов;
КонецФункции	

&НаСервере
Процедура УстановитьГруппировкуПоИнтересу()
	Если ПризнакФормаОткрытаПоПартнеру Тогда
		
		Если ПервыйВызов Тогда
			ЭлементПорядка = Список.Порядок.Элементы.Вставить(0, Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЭлементПорядка.Использование = Истина;
			ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеИнтереса");
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			ТипИнтерес = ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.НайтиПоНаименованию(НСтр("ru = 'Интерес'"));
			Если ТипИнтерес <> Неопределено Тогда
				ЭлементОтбора = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование		= Истина;
				ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТипОбъекта");
				ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.ПравоеЗначение 	= ТипИнтерес;
				ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
			ПервыйВызов = Ложь;
		КонецЕсли;
		
		Если ГруппироватьПоИнтересам = Нстр("ru = 'Да'") Тогда
			
			ГруппировкаИнтерес = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ГруппировкаИнтерес.Использование = Истина;
			ГруппировкаИнтерес.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеИнтереса");
			
		Иначе
			Для каждого ЭлементГруппировки Из Список.Группировка.Элементы Цикл
				Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеИнтереса") Тогда
					Список.Группировка.Элементы.Удалить(ЭлементГруппировки);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Клиент", ОтборПартнер,,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
КонецПроцедуры
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ КЛИЕНТ

&НаКлиенте
Процедура ОбновитьСписок()
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Функция МожноОткрытьОбъект(СсылкаНаОбъект)
	СписокДоступныхПользователей = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПользователей();
	Если ТипЗнч(СсылкаНаОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Если СписокДоступныхПользователей.НайтиПоЗначению(СсылкаНаОбъект.Ответственный) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если СписокДоступныхПользователей.НайтиПоЗначению(СсылкаНаОбъект.Исполнитель) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	Возврат Истина;
КонецФункции	

&НаКлиенте
Процедура ОткрытьФормуТекущегоОбъекта(Интерес = Ложь)
	СтандартнаяОбработка = Ложь;
	Если Элементы.Список.ТекущиеДанные <> Неопределено  Тогда
		Попытка
			Если Интерес Тогда
				СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные.CRM_Интерес;
			Иначе
				СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные.Объект;
			КонецЕсли;				
		Исключение
			Попытка
				СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные.ГруппировкаСтроки.Ключ;
			Исключение
				СсылкаНаТекущийОбъект = Неопределено;
			КонецПопытки;
		КонецПопытки;
		Если (НЕ ТипЗнч(СсылкаНаТекущийОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
		И НЕ ТипЗнч(СсылкаНаТекущийОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")) И НЕ МожноОткрытьОбъект(СсылкаНаТекущийОбъект) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Вы не можете открыть этот документ!";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;	
		Если ТипЗнч(СсылкаНаТекущийОбъект) = Тип("Строка") Тогда Возврат; КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СсылкаНаТекущийОбъект) Тогда Возврат; КонецЕсли;
		Если ТипЗнч(СписокОткрытыхФорм) <> Тип("СписокЗначений") Тогда
			СписокОткрытыхФорм = Новый СписокЗначений();
		КонецЕсли;
		Если ТипЗнч(СсылкаНаТекущийОбъект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ПоказатьЗначение(, СсылкаНаТекущийОбъект);
			Возврат;
		КонецЕсли;
		
		ДанныеДляОткрытия = ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(СсылкаНаТекущийОбъект);
		ПараметрыОткрытия = Новый Структура("Ключ", СсылкаНаТекущийОбъект);
		Если ТипЗнч(СсылкаНаТекущийОбъект) = Тип("ДокументСсылка.Анкета") Тогда
			ПараметрыОткрытия.Вставить("ТолькоФормаЗаполнения", Истина);
			Если Элементы.Список.ТекущиеДанные.Проведен Тогда
				ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
			КонецЕсли;
		КонецЕсли;	
		Форма = ПолучитьФорму(ДанныеДляОткрытия.ПолноеИмяМетаданных + ".ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Если Форма = Неопределено Тогда
			СообщениеОтказПриПолученииФормы();
		Иначе	
			Форма.Открыть();
			#Если НЕ ВебКлиент Тогда
			СписокОткрытыхФорм.Добавить(Форма);
			Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
			Исключение КонецПопытки;
			ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм", 1);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОтказПриПолученииФормы(ПараметрОбъект = Неопределено)
	ТекстСообщенияПоУмолчанию = НСтр("ru = 'Запрещено создание/открытие данного объекта!'");
	Если ПараметрОбъект = Неопределено Тогда
		ТекстСообщения = ТекстСообщенияПоУмолчанию;
	Иначе
		ПараметрОбъектПредставление = Строка(ПараметрОбъект);
		Если ЗначениеЗаполнено(ПараметрОбъектПредставление) Тогда
			ТекстСообщения = НСтр("ru = 'Запрещено создание/открытие'") + " """ + ПараметрОбъектПредставление + """!";
		Иначе
			ТекстСообщения = ТекстСообщенияПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения, 10);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОбъекта(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ОтборПоТипуОбъекта = РезультатВыбора.Значение;
	ОтборОбъектПриИзменении(Неопределено);
КонецПроцедуры // ОбработкаВыбораОбъекта()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЖИДАНИЯ

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм()
	Если ТипЗнч(СписокОткрытыхФорм) = Тип("СписокЗначений") Тогда
		Если СписокОткрытыхФорм.Количество() = 0 Тогда
			Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
			Исключение КонецПопытки;
		Иначе
			бОбновлять = Ложь;
			нИндекс = 0;
			Пока нИндекс < СписокОткрытыхФорм.Количество() Цикл
				ЗначениеСписка = СписокОткрытыхФорм[нИндекс];
				Попытка
					ФормаОткрыта = ЗначениеСписка.Значение.Открыта();
				Исключение
					ФормаОткрыта = Ложь;
				КонецПопытки;
				Если ФормаОткрыта Тогда
					нИндекс = нИндекс + 1;
				Иначе	
					СписокОткрытыхФорм.Удалить(нИндекс);
					бОбновлять = Истина;
				КонецЕсли;
			КонецЦикла;
			Если бОбновлять Тогда
				ОбновитьСписок();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Попытка
		ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
	Исключение
	КонецПопытки;
	Если (ТипЗнч(СписокОткрытыхФорм) = Тип("СписокЗначений")) И (СписокОткрытыхФорм.Количество() > 0) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм", 1);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поле отображения содержания.

&НаСервере
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаСервер()
	ОграничениеТипов = Метаданные.ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.Тип;
	ОграничениеТипов = Новый ОписаниеТипов(ОграничениеТипов, "СправочникСсылка.Партнеры");
	Возврат ОграничениеТипов;
КонецФункции

&НаКлиенте
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	Если ТипЗнч(КэшОграничениеТипов) <> Тип("ОписаниеТипов") Тогда
		КэшОграничениеТипов = НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаСервер();
	КонецЕсли;
	Возврат КэшОграничениеТипов;
КонецФункции

&НаКлиенте
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		тОбъект = Неопределено;
	ИначеЕсли Элементы.Список.ТекущиеДанные.Свойство("ПредставлениеИнтереса") Тогда
		тОбъект = Элементы.Список.ТекущиеДанные.ПредставлениеИнтереса;
	ИначеЕсли Элементы.Список.ТекущиеДанные.Свойство("Объект") Тогда
		тОбъект = Элементы.Список.ТекущиеДанные.Объект;
	Иначе
		тОбъект = Неопределено;
	КонецЕсли;
	// Поле отображения содержания.
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолеСодержаниеПриНажатииЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
		СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка(), тОбъект, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеСодержаниеПриНажатииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Подключаемый_ОбработчикОжиданияСписокПриАктивизацииСтроки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияСписокПриАктивизацииСтроки()
	// Поле отображения содержания.
	Если Элементы.ГруппаПолеОтображенияСодержания.Видимость И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		Попытка
			Если ТипЗнч(Элементы.Список.ТекущиеДанные.ГруппировкаСтроки) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные[Элементы.Список.ТекущиеДанные.ГруппировкаСтроки.ИмяГруппировки];
			Иначе
				СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные.Объект;
			КонецЕсли;
		Исключение
			Попытка
				СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные.Объект;
			Исключение
				СсылкаНаТекущийОбъект = Неопределено;
			КонецПопытки;
		КонецПопытки;
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(ЭтотОбъект, СсылкаНаТекущийОбъект,
			НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка(), "ГруппаПолеОтображенияСодержания",
			"ПолеОтображениеСодержания");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// Поле отображения содержания.
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияСписокПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьФормуТекущегоОбъекта();
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ОбъектСсылка = Неопределено;
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Попытка		ОбъектСсылка = ТекДанные.Объект;
		Исключение	ОбъектСсылка = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Копирование Тогда
		Если ОбъектСсылка = Неопределено Тогда Возврат; КонецЕсли;
		Если ТипЗнч(ОбъектСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "CRM_Личная") Тогда
				СтруктураПараметров = Новый Структура("ЗначениеКопирования", ОбъектСсылка);
				ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи", СтруктураПараметров, Элементы.Список);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru = 'Копирование задач, кроме личных, запрещено!'"));
			КонецЕсли;
		Иначе
			ДанныеДляОткрытияФормы = ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(ОбъектСсылка);
			Если ДанныеДляОткрытияФормы = Неопределено Тогда Возврат; КонецЕсли;
			СтруктураПараметров = Новый Структура("ЗначениеКопирования", ОбъектСсылка);
			Попытка
				ОткрытьФорму(ДанныеДляОткрытияФормы.ПолноеИмяМетаданных + ".ФормаОбъекта", СтруктураПараметров, Элементы.Список);
			Исключение
				СообщениеОтказПриПолученииФормы();
			КонецПопытки;
		КонецЕсли;
	Иначе
		Если ДоступныеДляСозданияОбъекты.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли ДоступныеДляСозданияОбъекты.Количество() = 1 Тогда
			ВыбранноеЗначение = ДоступныеДляСозданияОбъекты[0].Значение;
			СписокПередНачаломДобавленияЗавершение(ВыбранноеЗначение, Неопределено);
		Иначе
			СтруктураПараметров = Новый Структура("СписокОбъектов", ДоступныеДляСозданияОбъекты.Скопировать());
			Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
				СтруктураПараметров.Вставить("ТекущийОбъект", ОбъектСсылка);
			КонецЕсли;
			ОписаниеОповещения = Новый ОписаниеОповещения("СписокПередНачаломДобавленияЗавершение", ЭтотОбъект);
			ОткрытьФорму("Обработка.CRM_УниверсальныйЖурналДокументов.Форма.ФормаВыбораОбъекта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавленияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеДляОткрытияФормы = ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаЭлементПВХ(ВыбранноеЗначение);
		Если ДанныеДляОткрытияФормы = Неопределено Тогда Возврат; КонецЕсли;
		СтруктураЗначенияЗаполнения = Новый Структура("ЗначенияЗаполнения", Новый Структура());
		Если ЗначениеЗаполнено(ОтборПартнер) Тогда
			СтруктураЗначенияЗаполнения.ЗначенияЗаполнения.Вставить("Партнер", ОтборПартнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборКонтактноеЛицо) Тогда
			СтруктураЗначенияЗаполнения.ЗначенияЗаполнения.Вставить("КонтактноеЛицо", ОтборКонтактноеЛицо);
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборПроект) Тогда
			СтруктураЗначенияЗаполнения.ЗначенияЗаполнения.Вставить("Проект", ОтборПроект);
		КонецЕсли;
		Попытка
			Если СтруктураЗначенияЗаполнения.ЗначенияЗаполнения.Количество() = 0 Тогда
				ОткрытьФорму(ДанныеДляОткрытияФормы.ПолноеИмяМетаданных + ".ФормаОбъекта",, Элементы.Список);
			Иначе
				ОткрытьФорму(ДанныеДляОткрытияФормы.ПолноеИмяМетаданных + ".ФормаОбъекта", СтруктураЗначенияЗаполнения, Элементы.Список);
			КонецЕсли;
		Исключение	
			СообщениеОтказПриПолученииФормы(ВыбранноеЗначение);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	Попытка
		ТекДанныеПометкаУдаления = ТекДанные.ПометкаУдаления;
	Исключение
		ТекДанныеПометкаУдаления = Неопределено;
	КонецПопытки;
	Если ТекДанныеПометкаУдаления = Неопределено Тогда Возврат; КонецЕсли;
	Попытка
		ТекДанныеОбъект = ТекДанные.Объект;
	Исключение
		ТекДанныеОбъект = Неопределено;
	КонецПопытки;
	Если ТекДанныеОбъект = Неопределено Тогда Возврат; КонецЕсли;
	Если ТекДанныеПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Снять с'") + " """ + Строка(ТекДанные.Объект) + """ " + НСтр("ru = 'пометку на удаление?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить'") + " """ + Строка(ТекДанные.Объект) + """ " + НСтр("ru = 'на удаление?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекДанныеОбъект, ТекДанныеПометкаУдаления", ТекДанныеОбъект, ТекДанныеПометкаУдаления));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПометитьСнятьПометкуУдаленияНаСервере(ДополнительныеПараметры.ТекДанныеОбъект, НЕ ДополнительныеПараметры.ТекДанныеПометкаУдаления);
		ОбновитьСписок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "СписокCRM_Интерес" Тогда
		ОткрытьФормуТекущегоОбъекта(Истина);
	Иначе	
		ОткрытьФормуТекущегоОбъекта();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ОбновитьСписок();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборВидЖурнала".
//
Процедура ОтборВидЖурналаПриИзменении(Элемент)
	ЗаполнитьДоступныеДляОтбораОбъекты();
	Если ЗначениеЗаполнено(ТекущийВидЖурнала) Тогда		
		Если ЗначениеЗаполнено(ОтборПоТипуОбъекта) Тогда
			Если ДоступныеДляОтбораОбъекты.НайтиПоЗначению(ОтборПоТипуОбъекта) = Неопределено Тогда			
				 ОтборПоТипуОбъекта = Неопределено;
				CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбъекта", ДоступныеДляОтбораОбъекты, Истина, ВидСравненияКомпоновкиДанных.ВСписке);		
			Иначе
				CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбъекта",  ОтборПоТипуОбъекта, Истина, ВидСравненияКомпоновкиДанных.Равно);		
			КонецЕсли;
		Иначе
			CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбъекта", ДоступныеДляОтбораОбъекты, Истина, ВидСравненияКомпоновкиДанных.ВСписке);		
		КонецЕсли 	
	ИначеЕсли ЗначениеЗаполнено(ОтборПоТипуОбъекта) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбъекта",  ОтборПоТипуОбъекта, Истина, ВидСравненияКомпоновкиДанных.Равно);		
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбъекта");		
	КонецЕсли;
	УстановитьОтборБезИнтересов();
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ТекущийВидЖурнала, ОтборПоТипуОбъекта, ОтборОтветственный, ОтборПартнер);
	УстановитьЗаголовокФормы(ЭтотОбъект);	
КонецПроцедуры // ОтборВидЖурналаПриИзменении()

&НаКлиенте
Процедура УстановитьОтборБезИнтересов()
	Если ТипИнтерес <> Неопределено Тогда
		ЭлементОтбора = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТипОбъекта");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение 	= ТипИнтерес;
		ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборОбъект".
//
Процедура ОтборОбъектПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборПоТипуОбъекта) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбъекта",  ОтборПоТипуОбъекта, Истина, ВидСравненияКомпоновкиДанных.Равно);		
	ИначеЕсли ЗначениеЗаполнено(ТекущийВидЖурнала) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбъекта", ДоступныеДляОтбораОбъекты, Истина, ВидСравненияКомпоновкиДанных.ВСписке);		
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбъекта");		
	КонецЕсли;
	УстановитьОтборБезИнтересов();
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ТекущийВидЖурнала, ОтборПоТипуОбъекта, ОтборОтветственный, ОтборПартнер);
КонецПроцедуры // ОтборОбъектПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПартнер".
//
Процедура ОтборПартнерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборПартнер) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Клиент", ОтборПартнер, Истина);		
	ИначеЕсли ОтборПартнерПоказатьПустойЖурнал Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Клиент", ОтборПартнер, Истина);		
	Иначе			
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Клиент");		
	КонецЕсли;
	УстановитьОтборБезИнтересов();
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ТекущийВидЖурнала, ОтборПоТипуОбъекта, ОтборОтветственный, ОтборПартнер);
КонецПроцедуры // ОтборПартнерПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборОтветственный".
//
Процедура ОтборОтветственныйПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, Истина);		
	Иначе			
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный");		
	КонецЕсли;
	УстановитьОтборБезИнтересов();
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ТекущийВидЖурнала, ОтборПоТипуОбъекта, ОтборОтветственный, ОтборПартнер);
КонецПроцедуры // ОтборОтветственныйПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыСегодня".
//
Процедура ОтборСозданыСегодняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Сегодня", Элемент);
	УстановитьЗаголовокФормы(ЭтотОбъект);	
КонецПроцедуры // ОтборСозданыСегодняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗа3Дня".
//
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "3 дня", Элемент);
	УстановитьЗаголовокФормы(ЭтотОбъект);	
КонецПроцедуры // ОтборСозданыЗа3ДняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаНеделю".
//
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Неделя", Элемент);
	УстановитьЗаголовокФормы(ЭтотОбъект);	
КонецПроцедуры // ОтборСозданыЗаНеделюНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаМесяц".
//
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Месяц", Элемент);
	УстановитьЗаголовокФормы(ЭтотОбъект);	
КонецПроцедуры // ОтборСозданыЗаМесяцНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыПроизвольныйПериод".
//
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "ПроизвольныйПериод", Элемент);
	УстановитьЗаголовокФормы(ЭтотОбъект);	
КонецПроцедуры // ОтборСозданыПроизвольныйПериодПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборПериодОчистить".
//
Процедура ОтборПериодОчиститьНажатие(Элемент)
	CRM_ТегиКлиент.ОчиститьОтборНажатие(ЭтотОбъект, "Список");
	УстановитьЗаголовокФормы(ЭтотОбъект);	
КонецПроцедуры // ОтборПериодОчиститьНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ГруппироватьПоИнтересам".
//
Процедура ГруппироватьПоИнтересамПриИзменении(Элемент)
	УстановитьГруппировкуПоИнтересу();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ ДОКУМЕНТА

&НаКлиенте
// Процедура - обработчик команды "БыстрыеОтборы".
//
Процедура БыстрыеОтборы(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;	
КонецПроцедуры // БыстрыеОтборы()

&НаКлиенте
// Процедура - обработчик команды "ВосстанавливатьФормуПриОткрытии".
//
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии",
		Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры // ВосстанавливатьФормуПриОткрытии()

&НаКлиенте
// Процедура - обработчик команды "КомандаОтменитьПроведение".
//
Процедура КомандаОтменитьПроведение(Команда)
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	ПровестиОтменитьПроведениеНаСервере(ТекДанные.Объект, Ложь);
	ОбновитьСписок();
КонецПроцедуры // КомандаОтменитьПроведение()

&НаКлиенте
// Процедура - обработчик команды "КомандаПоказатьСкрытьПолеОтображенияСодержания".
//
Процедура КомандаПоказатьСкрытьПолеОтображенияСодержания(Команда)
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания(ЭтотОбъект);
	Если Команда <> Неопределено Тогда
		СохранитьНастройкиПолейОтображенияСодержания();
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьНастройкиПолейОтображенияСодержания()
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПриЗакрытииФормыСписка(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "КомандаПривязатьВзаимодействия".
//
Процедура КомандаПривязатьВзаимодействия(Команда)
	Если НЕ ЗначениеЗаполнено(ОтборПартнер) Тогда Возврат; КонецЕсли;
	СтрокаСообщения = "";
	МассивПривязанныхДокументов = Новый Массив();
	CRM_КлиентыСервер.ПривязатьВзаимодействияПоКлиенту(ОтборПартнер, СтрокаСообщения, МассивПривязанныхДокументов);
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	Состояние(НСтр("ru = 'Количество новых привязанных документов взаимодействия'")
		+ ": " + Формат(МассивПривязанныхДокументов.Количество(), "ЧН=0; ЧГ="));
	Элементы.Список.Обновить();
КонецПроцедуры // КомандаПривязатьВзаимодействия()

&НаКлиенте
// Процедура - обработчик команды "КомандаПровести".
//
Процедура КомандаПровести(Команда)
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	ПровестиОтменитьПроведениеНаСервере(ТекДанные.Объект, Истина);
	ОбновитьСписок();
КонецПроцедуры // КомандаПровести()

&НаКлиенте
// Процедура - обработчик команды "КомандаСоздатьНаОсновании".
//
Процедура КомандаСоздатьНаОсновании(Команда)
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	Попытка
		ТекДанныеТипОбъекта = ТекДанные.ТипОбъекта;
	Исключение
		ТекДанныеТипОбъекта = Неопределено;
	КонецПопытки;
	Если ТекДанныеТипОбъекта = Неопределено Тогда Возврат; КонецЕсли;
	СтруктураПоиска = Новый Структура("Объект", ТекДанные.ТипОбъекта);
	НайденныеСтроки = ТаблицаВводимыеНаОснованииОбъекты.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для данного объекта не предусмотрен ввод на основании.'"),5,);
		Возврат;
	КонецЕсли;
	СписокВводимыхНаОснованииОбъектов = НайденныеСтроки[0].СписокВводимыхНаОснованииОбъектов;
	Если СписокВводимыхНаОснованииОбъектов.Количество() = 0 Тогда Возврат; КонецЕсли;
	ДопПараметры = Новый Структура("СписокВводимыхНаОснованииОбъектов, ТекОбъект", СписокВводимыхНаОснованииОбъектов, ТекДанные.Объект);
	Если ТекДанные.ПометкаУдаления Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСоздатьНаОснованииПродолжение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, """" + Строка(ТекДанные.Объект) + """ " + НСтр("ru = 'помечен на удаление. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		КомандаСоздатьНаОснованииПродолжение(Неопределено, ДопПараметры)
	КонецЕсли;
КонецПроцедуры // КомандаСоздатьНаОсновании()

&НаКлиенте
Процедура КомандаСоздатьНаОснованииПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
	СписокВводимыхНаОснованииОбъектов = УдалитьНедоступныеДокументыИзВводаНаОсновании(ДополнительныеПараметры.СписокВводимыхНаОснованииОбъектов);
	СтруктураПараметров = Новый Структура("СписокОбъектов,Заголовок", СписокВводимыхНаОснованииОбъектов.Скопировать(), НСтр("ru = 'Создать на основании'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСоздатьНаОснованииЗавершение", ЭтотОбъект, ДополнительныеПараметры.ТекОбъект);
	ОткрытьФорму("Обработка.CRM_УниверсальныйЖурналДокументов.Форма.ФормаВыбораОбъекта", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // КомандаСоздатьНаОсновании()

&НаКлиенте
Процедура КомандаСоздатьНаОснованииЗавершение(ВыбранноеЗначение, ТекОбъект) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;
	СтруктураПараметров = Новый Структура("Основание", ТекОбъект);
	Попытка
		ОткрытьФорму(ВыбранноеЗначение + ".ФормаОбъекта", СтруктураПараметров, Элементы.Список);
	Исключение	
		СообщениеОтказПриПолученииФормы();
	КонецПопытки;
КонецПроцедуры // КомандаСоздатьНаОсновании()

&НаКлиенте
// Процедура - обработчик команды "ОтборПериод".
//
Процедура ОтборПериод(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры // ОтборПериод()

// Процедура - обработчик команды "ПрочиеОтборы".
//
&НаКлиенте
Процедура ПрочиеОтборыНажатие(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект);
	
	ПараметрТипПараметраКлассификации = Список.Параметры.Элементы.Найти("ТипПараметраКлассификации");
	Если ПараметрТипПараметраКлассификации <> Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж") 
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке") Тогда
			ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Количество;
		Иначе
			ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Выручка;
		КонецЕсли;
		ПараметрТипПараметраКлассификации.Значение = ТипПараметраКлассификации;
		ПараметрТипПараметраКлассификации.Использование = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборПартнер") И ТипЗнч(Параметры.ОтборПартнер) = Тип("СправочникСсылка.Партнеры") Тогда
		ОтборПартнер = Параметры.ОтборПартнер;
		Если ЗначениеЗаполнено(ОтборПартнер) Тогда
			Элементы.СписокКомандаПривязатьВзаимодействия.Видимость = Истина;
		Иначе
			ОтборПартнерПоказатьПустойЖурнал = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПартнер) И Параметры.Свойство("КонтактноеЛицо") 
		И ТипЗнч(Параметры.КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ОтборКонтактноеЛицо = Параметры.КонтактноеЛицо;
	КонецЕсли;
	Если Параметры.Свойство("Проект") И ТипЗнч(Параметры.Проект) = Тип("СправочникСсылка.Проекты") Тогда
		ОтборПроект = Параметры.Проект;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидЖурнала")
		И ТипЗнч(Параметры.ВидЖурнала) = Тип("СправочникСсылка.CRM_ГруппыУниверсальногоЖурнала") Тогда
		ТекущийВидЖурнала = Параметры.ВидЖурнала;
	КонецЕсли;
	Если Параметры.Свойство("БлокироватьИзменениеВидаЖурнала")
		И Параметры.БлокироватьИзменениеВидаЖурнала <> Ложь Тогда
		Элементы.ОтборВидЖурнала.Видимость = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("БлокироватьИзменениеОтбораПоПартнеру") 
		И Параметры.БлокироватьИзменениеОтбораПоПартнеру <> Ложь Тогда
		Элементы.ОтборПартнер.Видимость			= Ложь;
		Если Параметры.Свойство("ОтборПартнер") И ТипЗнч(Параметры.ОтборПартнер) = Тип("СправочникСсылка.Партнеры") Тогда
			ПризнакФормаОткрытаПоПартнеру = Истина;
		КонецЕсли;
		Элементы.СписокКлиент.Видимость = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("БлокироватьИзменениеОтбораПоКонтакту") 
		И Параметры.БлокироватьИзменениеОтбораПоКонтакту <> Ложь Тогда
		ОтборПартнер = Параметры.ОтборКонтакт.Владелец;
		ОтборКонтактноеЛицо = Параметры.ОтборКонтакт;
		Если ЗначениеЗаполнено(ОтборПартнер) Тогда
			Элементы.СписокКомандаПривязатьВзаимодействия.Видимость = Истина;
		Иначе
			ОтборПартнерПоказатьПустойЖурнал = Истина;
		КонецЕсли;
		Элементы.ОтборПартнер.Видимость			= Ложь;
		Если Параметры.Свойство("ОтборКонтакт") И ТипЗнч(Параметры.ОтборКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ПризнакФормаОткрытаПоПартнеру = Истина;
		КонецЕсли;
		Элементы.СписокКонтактноеЛицо.Видимость = Ложь;
	КонецЕсли;
	
	ПервыйВызов = Истина;
	
	ГруппироватьПоИнтересам  = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_УниверсальныйЖурналДокументов_Настройки", "ГруппироватьПоИнтересам");
	Если НЕ ЗначениеЗаполнено(ГруппироватьПоИнтересам) Тогда
		// это первый запуск
		ГруппироватьПоИнтересам = Нстр("ru = 'Да'");
	КонецЕсли;
	
	Если НЕ ПризнакФормаОткрытаПоПартнеру Тогда
		Элементы.ПрочиеОтборы.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьГруппировкуПоИнтересу();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	ЗаполнитьДоступныеДляОтбораОбъекты();
	ЗаполнитьТаблицуВводимыеНаОснованииОбъекты();
	ЗаполнитьДоступныеВидыЖурнала();
	ЗаполнитьДоступныеДляСозданияОбъекты();
	УстановитьЗаголовокФормы(ЭтотОбъект);
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	ОтборПартнерПриИзменении(Неопределено);
	Если ЗначениеЗаполнено(ОтборКонтактноеЛицо) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "КонтактноеЛицо",  ОтборКонтактноеЛицо, Истина, ВидСравненияКомпоновкиДанных.Равно);		
	КонецЕсли;		
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ТекущийВидЖурнала, ОтборПоТипуОбъекта, ОтборОтветственный, ОтборПартнер);
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры // ПриЗакрытии

&НаСервере
// Процедура - обработчик события формы "ПриЗакрытииНаСервере".
//
Процедура ПриЗакрытииНаСервере()
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
	CRM_ХранилищеНастроек.Сохранить("Обработка_CRM_УниверсальныйЖурналДокументов_Настройки", "ГруппироватьПоИнтересам", ГруппироватьПоИнтересам);
КонецПроцедуры // ПриЗакрытииНаСервере()

#КонецОбласти
