
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть АРМ ""Мои дела"". Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		Если Отказ Тогда Возврат конецЕсли;
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Попытка
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	// ++ VOG Солодов В.В. 02.08.2019 task 463
	РуководительПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "вогРуководитель", Истина);
	// -- VOG Солодов В.В. 02.08.2019
	
	//+вог
	Если НЕ ЗначениеЗаполнено(ОтборПринадлежность) Тогда
		ОтборПринадлежность = "Мои";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборСтатус) Тогда
		ОтборСтатус = "ВРаботе";
	КонецЕсли;
	//-вог
	
	СохраненныйСписокВиджетов = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ВиджетыПользователя");
	Если СохраненныйСписокВиджетов = Неопределено Тогда
		СписокВиджетовПользователя.Добавить(Справочники.CRM_Виджеты.Продажи, "01");
		СписокВиджетовПользователя.Добавить(Справочники.CRM_Виджеты.ПроведениеВстреч, "02");
		СписокВиджетовПользователя.Добавить(Справочники.CRM_Виджеты.Взаимодействия, "03");
	Иначе
		СписокВиджетовПользователя = СохраненныйСписокВиджетов;
	КонецЕсли;
	КоличествоВиджетовНаФорме = СписокВиджетовПользователя.Количество();
	CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты", Истина);
	
	// ++ VOG Солодов В.В. 30.07.2019 task 106
	МассивПользователей = вогНастраиваемоеДелегированиеПрав.ПолучитьМассивПользователейДелегата("ПроцессыИЗадачи", Истина);
	СписокПользователей.ЗагрузитьЗначения(МассивПользователей);
	// -- VOG Солодов В.В. 30.07.2019
	
	//+вог
	СписокСогласования.Параметры.УстановитьЗначениеПараметра("ПарамТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
	СписокСогласования.Параметры.УстановитьЗначениеПараметра("ПарамПустаяДата" , Дата("00010101"));
	СписокСогласования.Параметры.УстановитьЗначениеПараметра("вогДолжностныеПозиции" , ПараметрыСеанса.вогДолжностныеПозиции);
	
	Элементы.СтраницыСписков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	//-вог
	
	ТекущийПользовательПриИзмененииНаСервере();
	ВидимостьВиджетов = ХранилищеОбщихНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПанельВиджетов");
	Элементы.ГруппаВиджеты.Видимость = ?(ВидимостьВиджетов <> Неопределено, ВидимостьВиджетов, Ложь);
	Элементы.ОсновныеОтборы.ЦветФона = Новый Цвет(220, 220, 220);
	СрокНовойЗадачи = ТекущаяДатаСеанса();
	CRM_ОбщегоНазначенияКлиентСервер.ЗаполнитьСписокВыбораВремени(СписокВыборВремени, ВремяНовойЗадачи); 
	//+вог
	//ВидАРМ = "Канбан";
	ВидАРМ = "Список";
	//-вог
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект, Истина);
	
	//+вог
	//+Рабочий стол
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	//-Рабочий стол
	//-вог
	
	// +++ VOG Кулаков П.Л. 28.07.2020 CRM-809
	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c2c-d255-11ea-8f2a-005056bcd3e3")); // УИД Рабочей
	//КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("fc8e3c72-cb32-11ea-b7d5-005056bc3fe8")); // УИД chb_crm
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСогласования,"КартаМаршрута",КартаМаршрута);
	Если ЭтаФорма.Элементы.Найти("СписокСогласованияОтчетвогПланПоКомандировкамСформироватьОтчет") = Неопределено Тогда
		ОтборПланПоКомандировкам = Ложь;
		Элементы.ОтборПланПоКомандировкам.Видимость = Ложь;
	Иначе
		ОтборПланПоКомандировкам = Истина;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСогласования,"ОтборПланПоКомандировкам",ОтборПланПоКомандировкам);
	// --- VOG Кулаков П.Л.
	
	ОбновитьЗаголовкиНаправленийСогласованийНаСервере();
	
	// ++ Солодов В.В.
	// ++ Подключаемые дополнительные команды
	вогУправлениеИнтерфейсомСервер.ПодключитьДополнительныеКоманды(ЭтаФорма, Элементы.ФормаГруппаДействия);
	// -- Подключаемые дополнительные команды
	// -- Солодов В.В.
	
	// ++ Тищенко В.В. 29.03.2019
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСогласования,"ТипЗадачи",Перечисления.вогТипЗадачиИсполнителя.Согласование);
	// -- Тищенко В.В. 
	
	// ++ VOG Солодов В.В. 23.06.2020 CRM-733
	УстановитьНастройкиСобственника();
	// -- VOG Солодов В.В. 23.06.2020 CRM-733
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого ЭлементСписка Из СписокВиджетовПользователя Цикл
		Если Число(ЭлементСписка.Представление) <= 4 Тогда
			ПериодОбновленияВиджета = ПолучитьПериодОбновленияВиджетаНаСервере(ЭлементСписка.Значение, ЭлементСписка.Представление);
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ЭлементСписка.Представление, ПериодОбновленияВиджета);
		ИначеЕсли Число(ЭлементСписка.Представление) = 5 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_Прочие", 3600);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	//Если НЕ ЗначениеЗаполнено(ВариантПериода) Тогда
	//	ВариантПериода = "Неделя"
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОтборВключатьПросроченные) Тогда
		ОтборВключатьПросроченные = 2;
	КонецЕсли;
	//ОбработатьСменуПериодаОтбора(ВариантПериода, 1);
	CRM_ТегиКлиент.ПрочиеОтборыИзменение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьВиджеты" Тогда
		CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты");
//START Кайдашов 05/11/19 6666		
	ИначеЕсли ИмяСобытия = "ОбновитьАРМ" Тогда
		ОбновитьОтборы();	
	ИначеЕсли ИмяСобытия = "ЗадачаВыполнена" Тогда
		ОбновитьОтборы(Истина);
	// ++ VOG Солодов В.В. 30.09.2020 CRM-932
	ИначеЕсли ИмяСобытия = "БизнесПроцессЗаписан" Тогда
		ОбновитьОтборы(Истина);
		ОбновитьЗаголовокДекорацииЧерновики();
	// -- VOG Солодов В.В. 30.09.2020 CRM-932
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ВариантПериода = Настройки.Получить("ВариантПериода");
	ПериодОтбора =  Настройки.Получить("ПериодОтбора");
	ОтборСозданы[0].Значение = ПериодОтбора;
	
	// +++ VOG Кулаков П.Л. 07.09.2020 виджеты
	Если Параметры.Свойство("ОтборПринадлежность") Тогда
		НайденныйЭлемент = Элементы.ОтборПринадлежность.СписокВыбора.НайтиПоЗначению(Параметры.ОтборПринадлежность);
		Если НайденныйЭлемент <> Неопределено Тогда
			Индекс = Элементы.ОтборПринадлежность.СписокВыбора.Индекс(НайденныйЭлемент);
			ОтборПринадлежность = Элементы.ОтборПринадлежность.СписокВыбора[Индекс].Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборСтатус") Тогда
		НайденныйЭлемент = Элементы.ОтборСтатус.СписокВыбора.НайтиПоЗначению(Параметры.ОтборСтатус);
		Если НайденныйЭлемент <> Неопределено Тогда
			Индекс = Элементы.ОтборСтатус.СписокВыбора.Индекс(НайденныйЭлемент);
			ОтборСтатус = Элементы.ОтборСтатус.СписокВыбора[Индекс].Значение;
		КонецЕсли;
		ОтборЗадачСогласованияПриИзмененииНаСервере();
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	ОтборВключатьПросроченные = Настройки.Получить("ОтборВключатьПросроченные");
	ТекущийПользовательПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Обработка события "ПриНажатии" для виджетов.
//
&НаКлиенте
Процедура Подключаемый_HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИндексВиджета = ИндексТекущегоВиджета();
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "УдалитьВиджет") Тогда
		УдалитьВиджетФормы(ИндексВиджета);
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "ОткрытьПоказатель") Тогда
		тЭлемент = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетовПользователя, ИндексВиджета);
		Если тЭлемент <> Неопределено Тогда
			ПоказатьЗначение( ,тЭлемент.Значение);
		КонецЕсли;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "НастройкаВиджета") Тогда
		тЭлемент = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетовПользователя, ИндексВиджета);
		Если тЭлемент <> Неопределено Тогда
			ОповещениеНастройкаВиджета = Новый ОписаниеОповещения("НастройкаВиджетаЗавершение", ЭтотОбъект, Новый Структура("Индекс", ИндексВиджета));
			ПараметрыФормы = Новый Структура("Виджет, ИндексВиджета", тЭлемент.Значение, тЭлемент.Представление);
			ОткрытьФорму("Справочник.CRM_Виджеты.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеНастройкаВиджета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Расшифровать") Тогда
		тЭлемент = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетовПользователя, ИндексВиджета);
		Если тЭлемент <> Неопределено Тогда
			Показатель = ПолучитьИсточникДанныхВиджета(тЭлемент.Значение);
			ЗначениеАналитики = CRM_РаботаСВиджетамиВызовСервера.ПолучитьЗначениеАналитикиИзНастроекВиджета(тЭлемент.Значение, ИндексВиджета, ТекущийПользователь);
			Если ТипЗнч(ЗначениеАналитики) = Тип("СправочникСсылка.Пользователи") Тогда
				МассивПользователей = Новый Массив;
				МассивПользователей.Добавить(ЗначениеАналитики);
			Иначе
				МассивПользователей = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьМассивПользователей(Истина);
			КонецЕсли;
			CRM_УправлениеЦелевымиПоказателямиКлиент.ОткрытьРасшифровкуПоказателя(Показатель, МассивПользователей);
		КонецЕсли;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) И СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Обновить") Тогда
		ОбновитьВиджетыНаСервере();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВиджетаЗавершение(НовыеНастройки, ДополнительныеПараметры) Экспорт
	
	Если НовыеНастройки <> Неопределено Тогда
		Если НовыеНастройки = Ложь Тогда
			УдалитьВиджетФормы(ДополнительныеПараметры.Индекс);
			Возврат;
		КонецЕсли;
		ОбновитьВиджетНаСервере(ДополнительныеПараметры.Индекс);
		Если Число(ДополнительныеПараметры.Индекс) <= 4 Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДополнительныеПараметры.Индекс);
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДополнительныеПараметры.Индекс, НовыеНастройки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьНовыйВиджетНажатие(Элемент)
	
	Если КоличествоВиджетовНаФорме = 99 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавитьВиджетЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокОткрытыхВиджетов", СписокВиджетовПользователя);
	ПараметрыФормы.Вставить("ФормаВиджеты", Истина);
	ОткрытьФорму("Справочник.CRM_Виджеты.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВиджетЗавершение(Виджет, ДополнительныеПараметры) Экспорт
	
	Если Виджет = Неопределено Тогда Возврат конецЕсли;
	ДанныеВиджета = ДобавитьВиджетЗавершениеНаСервере(Виджет);
	Если ДанныеВиджета <> Неопределено Тогда
		Если Число(ДанныеВиджета.ИндексВиджета) <= 4 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_" + ДанныеВиджета.ИндексВиджета, ДанныеВиджета.ПериодОбновленияВиджета);
		ИначеЕсли Число(ДанныеВиджета.ИндексВиджета) = 5 Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВиджет_Прочие", 3600);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПользовательПриИзменении(Элемент)
	
	ТекущийПользовательПриИзмененииНаСервере();
	СформироватьЗаголовок();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СменаОтбораНажатие()
КонецПроцедуры

&НаКлиенте
Процедура ТекстНовойЗадачиПриИзменении(Элемент)
	
	Если НЕ Элементы.СрокНовойЗадачи.Видимость Тогда
		СоздатьНовуюЛичнуюЗадачу(ТекстНовойЗадачи);
		ТекстНовойЗадачи = "";
		ОбновитьТаблицы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНовойЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ТекстНовойЗадачи = Элемент.ТекстРедактирования;
	КонецЕсли;	
	Элементы.СрокНовойЗадачи.Видимость				= НЕ Элементы.СрокНовойЗадачи.Видимость;
	Элементы.ВремяНовойЗадачи.Видимость				= НЕ Элементы.ВремяНовойЗадачи.Видимость;
	Элементы.СоздатьЗадачу.Видимость				= НЕ Элементы.СоздатьЗадачу.Видимость;
	
КонецПроцедуры

&НаКлиенте
Функция СозданыОтборНажатие(Форма, СписокТаблиц, ВариантПериода, Элемент, ПолеДата = "", ВключатьПросроченные = Ложь)
	
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3Дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	
	Период = Форма.ОтборСозданы[НомерПериода];
	Если НомерПериода = 0 Тогда
		Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
			Период.Пометка = Истина;
		Иначе
			Период.Пометка = Ложь;
		КонецЕсли;
	Иначе
		Период.Пометка = Не Период.Пометка;
	КонецЕсли;
	
	
	// Вариант периода может быть выбран только один.
	Для Индекс = 0 По Форма.ОтборСозданы.Количество()-1 Цикл
		
		ЭлементСпискаПериодов = Форма.ОтборСозданы[Индекс];
		Если ЭлементСпискаПериодов <> Период Тогда
			ЭлементСпискаПериодов.Пометка = Ложь;
		КонецЕсли;
		
		Если Индекс = 0 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыПроизвольныйПериод;
			Если НЕ ЭлементСпискаПериодов.Пометка Тогда
				ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
			КонецЕсли;
		ИначеЕсли Индекс = 1 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыСегодня;
		ИначеЕсли Индекс = 2 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗа3Дня;
		ИначеЕсли Индекс = 3 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗаНеделю;
		ИначеЕсли Индекс = 4 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗаМесяц;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСпискаПериодов.Пометка Тогда
			Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
				ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
			КонецЕсли;
		Иначе
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	
	CRM_ТегиКлиент.СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОтборПериод, 0);
	
	Для Каждого ИмяСписка Из СписокТаблиц Цикл
		ГруппаОтбораПериод = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Форма[ИмяСписка].Отбор.Элементы, "ОтборПериод", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаОтбораПериод.Использование = Период.Пометка;
		Если ГруппаОтбораПериод.Элементы.Количество() = 0 Тогда
			Если ПолеДата = "" Тогда
				Если Форма[ИмяСписка].Отбор.ДоступныеПоляОтбора.Элементы.Найти("Дата") = Неопределено Тогда
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
					ЭлементОтбора.Использование = Истина;
				Иначе
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
					ЭлементОтбора.Использование = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ВключатьПросроченные Тогда
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеДата);
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
					ЭлементОтбора.Использование = Истина;
				КонецЕсли;
				ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеДата);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
				ЭлементОтбора.Использование = Истина;
			КонецЕсли;
		ИначеЕсли ГруппаОтбораПериод.Элементы.Количество() = 2 Тогда
			ГруппаОтбораПериод.Элементы[0].ПравоеЗначение = Период.Значение.ДатаНачала;
			ГруппаОтбораПериод.Элементы[1].ПравоеЗначение = Период.Значение.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	Возврат Период.Пометка;
	
КонецФункции

&НаКлиенте
Процедура ОсновныеОтборы(Элемент)
	
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
	СменаОтбораНажатие();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериод(Элемент)
	
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
	СменаОтбораНажатие();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Элемент)
	
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
	СменаОтбораНажатие();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыСегодняНажатие(Элемент)
	ВариантПериода = "Сегодня";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	ВариантПериода = "3 дня";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	
	ВариантПериода = "Неделя";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	
	ВариантПериода = "Месяц";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	
	ВариантПериода = "ПроизвольныйПериод";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОчиститьНажатие(Элемент)
	ВариантПериода = "";
	
	
	Для Индекс = 0 По ЭтаФорма.ОтборСозданы.Количество()-1 Цикл
		
		ЭлементСпискаПериодов = ЭтаФорма.ОтборСозданы[Индекс];
		ЭлементСпискаПериодов.Пометка = Ложь;
		
		Если Индекс = 0 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыПроизвольныйПериод;
			ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
		ИначеЕсли Индекс = 1 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыСегодня;
		ИначеЕсли Индекс = 2 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗа3Дня;
		ИначеЕсли Индекс = 3 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗаНеделю;
		ИначеЕсли Индекс = 4 Тогда
			ЭлементОтображенияПериода = ЭтаФорма.Элементы.ОтборСозданыЗаМесяц;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСпискаПериодов.Пометка Тогда
			//ЭлементОтображенияПериода.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоЗначенияОтбора");
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
			
		Иначе
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	Период = ОтборСозданы[0];
	ПериодОтбора = ОтборСозданы[0].Значение;
	ПредставлениеПериода = ПредставлениеПериода(ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания, );
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВключатьПросроченныеПриИзменении(Элемент)
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодНеРазобраноПриИзменении(Элемент)
	//ОбновитьПланировщик();
	CRM_ТегиКлиент.ПрочиеОтборыИзменение(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СрокНовойЗадачиПриИзменении(Элемент)
	ПроверитьДатуНовойЗадачи()
КонецПроцедуры

&НаКлиенте
Процедура ВремяНовойЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыборВремениЗавершение = Новый ОписаниеОповещения("ВыборВремениЗавершение", ЭтотОбъект);
	ТекущееВремя = СписокВыборВремени.НайтиПоЗначению(ВремяНовойЗадачи);
	ПоказатьВыборИзСписка(ВыборВремениЗавершение, СписокВыборВремени, Элемент, ТекущееВремя);
КонецПроцедуры

&НаКлиенте
Процедура ВыборВремениЗавершение(Время, ДополнительныеПараметры) Экспорт
	Если Время <> Неопределено Тогда
		ВремяНовойЗадачи = Время.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВид(Команда)
	УстановитьПараметрыФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПисьмаПриИзменении(Элемент)
	ТекущийПользовательПриИзмененииНаСервере();
	ОбновитьЗаголовкиТаблиц();	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗвонкиПриИзменении(Элемент)
	ТекущийПользовательПриИзмененииНаСервере();
	ОбновитьЗаголовкиТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПринадлежностьПриИзменении(Элемент)
	ТекущийПользовательПриИзмененииНаСервере();
	// ++ VOG Солодов В.В. 30.09.2020 CRM-932
	Элементы.ДекорацияЧерновики.Видимость = (ОтборПринадлежность = "ПорученоМной");
	// -- VOG Солодов В.В. 30.09.2020 CRM-932
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	ОтборЗадачСогласованияПриИзмененииНаСервере();	
КонецПроцедуры

// ++ VOG Солодов В.В. 30.09.2020 CRM-932
&НаКлиенте
Процедура ДекорацияЧерновикиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
	
	ОткрытьФорму(
		"БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСпискаЧерновиковПоручений",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // -- VOG Солодов В.В. 30.09.2020 CRM-932

#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	СтруктураСтроки = ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока);
	ПоказатьЗначение(,СтруктураСтроки.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВыделенныестроки(Элемент)
	МассивТаблиц = Новый Массив;
	Если Элемент.Имя <> "ТаблицаВходящие" Тогда
		
		МассивТаблиц.Добавить("ТаблицаВходящие");
	КонецЕсли;
	
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтложенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда Возврат КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Отложенные", Строка);
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Отложенные");
	Элементы.ТаблицаОтложенные.ТекущаяСтрока = ПараметрыПеретаскивания.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Входящие", Строка);
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Входящие");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда Возврат КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Текущие", Строка);
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Текущие");
	Элементы.ТаблицаТекущие.ТекущаяСтрока = ПараметрыПеретаскивания.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда Возврат КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	// обработать завершение задачи
	ОбъектДействия = ПолучитьОбъектДействия(ПараметрыПеретаскивания.Значение);
	Если ТипЗнч(ОбъектДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОбъектДействия, "CRM_Личная") Тогда
			ЗавершитьЗадачу(ОбъектДействия);
			Оповестить("ОбновитьАРМ");
		Иначе
			ПараметрыФормы = Новый Структура("Ключ", ОбъектДействия);
			ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектДействия) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ПереносЗадачиЗавершение = Новый ОписаниеОповещения("ЗавершитьЗадачуЗавершение", ЭтотОбъект, ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение));
		ПараметрыФормы = Новый Структура("Взаимодействие", ОбъектДействия);
		ОткрытьФорму("Обработка.CRM_АРМ_МоиДела.Форма.ФормаЗавершитьВзаимодействие", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ПереносЗадачиЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	Иначе	
		ПроверкаПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение, "Завершенные", Строка);
	КонецЕсли;
	ОбновитьДанные(ПолучитьИмяИзмерения(ПараметрыПеретаскивания.Значение), "Завершенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуЗавершение(СсылкаИлиСтруктура, ТекущееИзмерение) Экспорт
	
	ЗавершитьЗадачу(СсылкаИлиСтруктура, Ложь);
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтложенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВходящиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТекущиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗавершенныеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанныеОбъект = ПолучитьОбъектСтроки(ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанныеОбъект <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанныеОбъект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// +++ VOG Кулаков П.Л. 28.07.2020 CRM-809
&НаКлиенте
Процедура ОтборПланПоКомандировкамПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСогласования,"ОтборПланПоКомандировкам",ОтборПланПоКомандировкам);
	
	КоличествоЗадач = ПолучитьКоличествоЗадачПланПоКомандировкам();
	Если КоличествоЗадач = 0 Тогда
		Элементы.СписокСогласованияОтчетвогПланПоКомандировкамСформироватьОтчет.Доступность = Ложь;
	Иначе
		Элементы.СписокСогласованияОтчетвогПланПоКомандировкамСформироватьОтчет.Доступность = ОтборПланПоКомандировкам;
	КонецЕсли;
	
	ОбновитьЗаголовкиНаправленийСогласований();
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаКлиенте
Процедура ВключитьОтключитьГруппировкуВходящие(Команда)
	
	Элементы.ТаблицаВходящие.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщик(Команда)
	ЕстьЛиды = ЕстьЛидыВВыбранныхСтроках();
	Если ЕстьЛиды Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкрытьПисьмоИзАРМПланировщикЗавершение", ЭтотОбъект, ЕстьЛиды);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения",, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		СкрытьПисьмоИзАРМНаСервере();
		Оповестить("ОбновитьАРМ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщикЗавершение(Результат, ЕстьЛиды) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ПричинаОтказа")
		И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		СкрытьПисьмоИзАРМНаСервере(Результат.ПричинаОтказа, Результат.Комментарий);
		Оповестить("ОбновитьАРМ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьВиджеты(Команда)
	
	Элементы.ГруппаВиджеты.Видимость = НЕ Элементы.ГруппаВиджеты.Видимость;
	СохранитьНастройкуПоказыватьВиджеты(ЭтотОбъект.ИмяФормы, Элементы.ГруппаВиджеты.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОткрючитьГруппировкуПоДате(Команда)
	
	ВключитьОткрючитьГруппировкуПоДатеНаСервере();
	Элементы.ТаблицаТекущие.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРегистр(Команда)
	
	ЗаполнитьРегистрНаСервере();
	ОбновитьДанные("Входящие", "Отложенные");
	ОбновитьДанные("Текущие", "Завершенные");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	
	Если НЕ ПроверитьДатуНовойЗадачи() Тогда
		Возврат;
	КонецЕсли;
	СоздатьНовуюЛичнуюЗадачу(ТекстНовойЗадачи, СрокНовойЗадачи + Час(ВремяНовойЗадачи)*3600 + Минута(ВремяНовойЗадачи)*60);
	ТекстНовойЗадачи = "";
	ОбновитьТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьГруппировкуПоКатегории(Команда)
	ВключитьОтключитьГруппировкуПоКатегорииНаСервере();
	Элементы.ТаблицаТекущие.Обновить();
КонецПроцедуры

#Область ПодключемыеДополнительныеКоманды

&НаКлиенте
Процедура Подключаемый_ОбработчикДополнительнойКоманды(Команда) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура ОткрытьОргСтруктуру(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Справочник.СтруктураПредприятия.Форма.CRM_ФормаСписка");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПождключаемыеПроцедурыИФункции

#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеВиджетов

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_01()
	
	ОбновитьВиджетНаСервере("01");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_02()
	
	ОбновитьВиджетНаСервере("02");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_03()
	
	ОбновитьВиджетНаСервере("03");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_04()
	
	ОбновитьВиджетНаСервере("04");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВиджет_Прочие()
	
	ОбновитьВиджетНаСервере("Прочие");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетНаСервере(ИндексВиджета)
	
	CRM_РаботаСВиджетамиВызовСервера.ОбновитьТекущийВиджет(ЭтотОбъект, ИндексВиджета);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетыНаСервере()
	
	CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВиджетФормы(ИндексВиджета)
	
	тЭлемент = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетовПользователя, ИндексВиджета);
	
	Если тЭлемент <> Неопределено Тогда
		// Удаляем из регистра запись с настройками текущего виджета.
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь 		= ТекущийПользователь;
		МенеджерЗаписи.Виджет 				= тЭлемент.Значение;
		МенеджерЗаписи.ИндексВиджета 		= ИндексВиджета;
		МенеджерЗаписи.Удалить();
		
		СписокВиджетовПользователя.Удалить(тЭлемент);
		
		// Пересчет порядковых номеров.
		// Пересчет порядковых номеров.
		Для Сч = Число(ИндексВиджета) По СписокВиджетовПользователя.Количество() Цикл
			ЭлементСписка = СписокВиджетовПользователя[Сч-1];
			ЭлементСписка.Представление = Формат(Сч, "ЧЦ=2; ЧДЦ=; ЧВН=");
			МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь 		= ТекущийПользователь;
			МенеджерЗаписи.Виджет 				= ЭлементСписка.Значение;
			МенеджерЗаписи.ИндексВиджета 		= Формат(Сч+1, "ЧЦ=2; ЧДЦ=; ЧВН=");
			МенеджерЗаписи.Прочитать();
			Если ЗначениеЗаполнено(МенеджерЗаписи.Пользователь) Тогда
				МенеджерЗаписи.ИндексВиджета 	= Формат(Сч, "ЧЦ=2; ЧДЦ=; ЧВН=");
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		
		CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты");
		КоличествоВиджетовНаФорме = СписокВиджетовПользователя.Количество();
		
		CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВиджетыПользователя", СписокВиджетовПользователя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура ОбновитьОтборыНаСервере()
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("ТаблицаВходящие");
	МассивТаблиц.Добавить("ТаблицаЗавершенные");
	МассивТаблиц.Добавить("ТаблицаОтложенные");
	МассивТаблиц.Добавить("ТаблицаТекущие");
	МассивТаблиц.Добавить("ТаблицаСписок");
	
	Период = ОтборСозданы.НайтиПоЗначению(ПериодОтбора);
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма[ИмяТаблицы], "КрайнийСрокОкончание", Период.Значение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, , Период.Пометка, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		ГруппаОтборСтрокаПоиска = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭтотОбъект[ИмяТаблицы].Отбор.Элементы, "ОтборСтрокаПоиска", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ЭлементОтбора = ГруппаОтборСтрокаПоиска.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заголовок");
		ЭлементОтбора = ГруппаОтборСтрокаПоиска.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекстОснования");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы], "Заголовок", "%"+СтрокаПоискаОтбор+"%", ВидСравненияКомпоновкиДанных.Подобно, ,  ЗначениеЗаполнено(СтрокаПоискаОтбор), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы], "ТекстОснования", "%"+СтрокаПоискаОтбор+"%", ВидСравненияКомпоновкиДанных.Подобно, ,  ЗначениеЗаполнено(СтрокаПоискаОтбор), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
	КонецЦикла;
	
	//+вог
	ОбновитьЗаголовкиНаправленийСогласованийНаСервере();
	//-вог
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборы(ТолькоАктивныеТаблицы = Ложь)
//START Кайдашов 05/11/19 6666	
	Если Не ТолькоАктивныеТаблицы тогда
		ОбновитьОтборыНаСервере();
	Иначе
		ОбновитьЗаголовкиНаправленийСогласований();
	КонецЕсли;
	ОбновитьТаблицы(ТолькоАктивныеТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ОтборЗадачСогласованияПриИзмененииНаСервере(РолиПользователя = Неопределено)
	
	// ++ Тищенко В.В. 22.02.2019
	// Очистка отбора
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокСогласования,"БизнесПроцессАвтор");
	// -- Тищенко В.В.
	// ++ VOG Солодов В.В. 08.08.2019 task 456
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокСогласования, "Исполнитель");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ТаблицаСписок, 		"Измерение");
	// -- VOG Солодов В.В. 08.08.2019
	
	
	Если РолиПользователя = Неопределено Тогда
		// +++ VOG Кулаков П.Л. 05.03.2020 CRM-399
		//РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	  	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ПараметрыСеанса.ТекущийПользователь);
	  	// --- VOG Кулаков П.Л.	
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСогласования,
	"Выполнена", Ложь,,, ОтборСтатус = "ВРаботе");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСогласования,
	"ЯвляетсяСогласованием", (ОтборПринадлежность = "ВходящиеСогласования" ИЛИ ОтборПринадлежность = "ИсходящиеСогласования"));
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокСогласования.Отбор,, "ОтборПринадлежность");
	
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокСогласования.Отбор.Элементы, 
	"ОтборПринадлежность", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	Если ОтборПринадлежность = "ВходящиеСогласования" Тогда
		
		//++ #373 Бей
		Если ТекущийПользователь.Пустая() Тогда
			// ++ VOG Солодов В.В. 30.08.2019 
			МассивПодчиненныхСотрудников = вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников();
			// До изменения
			//МассивПодчиненныхСотрудников = ПараметрыСеанса.вогПодчиненныеСотрудники;
			// -- VOG Солодов В.В. 30.08.2019
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
			"Исполнитель", МассивПодчиненныхСотрудников,ВидСравненияКомпоновкиДанных.ВСписке);
			// +++ VOG Кулаков П.Л. 05.03.2020 CRM-399
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
				"ИсполнительЗадачи", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке);
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИли,
				"ОтборРольИсполнителя", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
				"РольИсполнителя", РолиПользователя, ВидСравненияКомпоновкиДанных.ВСписке);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
				"Выполнена", Ложь, ВидСравненияКомпоновкиДанных.Равно);
			// --- VOG Кулаков П.Л.
		Иначе
			// ++ VOG Солодов В.В. 22.08.2019 task 477
			
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
			"Исполнитель", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке);
			
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИли,
				"ОтборРольИсполнителя", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
				"РольИсполнителя", РолиПользователя, ВидСравненияКомпоновкиДанных.ВСписке);
			// +++ VOG Кулаков П.Л. 05.03.2020 CRM-399
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
				"Выполнена", Ложь, ВидСравненияКомпоновкиДанных.Равно);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
				"ПринятаКИсполнению", Ложь, ВидСравненияКомпоновкиДанных.Равно);
			
			//START Кайдашов 11/02/20 CRM-312
			//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			//	"ИсполнительЗадачи", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке);
			//END Кайдашов 11/02/20 CRM-312
			// --- VOG Кулаков П.Л.
			
			// ++ VOG Ульянов И.В. 11.12.2019 bugs 921
			//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			//	"Исполнитель", Справочники.Пользователи.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
			// -- VOG Ульянов И.В. 11.12.2019 bugs 921
			
			// До изменения
			// ++ VOG Солодов В.В. 30.07.2019 task 106
			//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			//	СписокСогласования,
			//	"Исполнитель",
			//	СписокПользователей,
			//	ВидСравненияКомпоновкиДанных.ВСписке);
			// До изменения
			//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
			//"Исполнитель", ТекущийПользователь);
			// -- VOG Солодов В.В. 30.07.2019
			// -- VOG Солодов В.В. 22.08.2019
		КонецЕсли;
		//--
		
		// ++ VOG Солодов В.В. 08.08.2019 task 456
		// До изменения
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
		//"РольИсполнителя", РолиПользователя, ВидСравненияКомпоновкиДанных.ВСписке);
		//
		//ДолжностныеПозиции = ПараметрыСеанса.вогДолжностныеПозиции;
		//
		//Если ДолжностныеПозиции.Количество() Тогда
		//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
		//	"ОсновнойОбъектАдресации", ДолжностныеПозиции, ВидСравненияКомпоновкиДанных.ВСписке);
		//КонецЕсли;
		// -- VOG Солодов В.В. 08.08.2019
		
		// ++ Тищенко В.В. 29.03.2019
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСогласования,"ТипЗадачи",Перечисления.вогТипЗадачиИсполнителя.Согласование);
		// -- Тищенко В.В. 

	Иначе
		
		// ++ Тищенко В.В. 29.03.2019
		Если ОтборПринадлежность = "ИсходящиеСогласования" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСогласования,"ТипЗадачи",Перечисления.вогТипЗадачиИсполнителя.Согласование);
		ИначеЕсли ОтборПринадлежность = "ПорученоМной" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСогласования,"ТипЗадачи",Перечисления.вогТипЗадачиИсполнителя.Поручение);
		КонецЕсли;
		// -- Тищенко В.В. 

		// ++ Тищенко В.В. 22.02.2019
		// Изменил на параметр дин-списка
		
		// ++ VOG Солодов В.В. 02.08.2019 task 463
		Если ОтборПринадлежность = "ПорученоМной"
			И ЗначениеЗаполнено(РуководительПользователя) Тогда
			
			СписокАвторов = Новый СписокЗначений;
			СписокАвторов.ЗагрузитьЗначения(СписокПользователей.ВыгрузитьЗначения());
			СписокАвторов.Добавить(РуководительПользователя);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСогласования, "БизнесПроцессАвтор",
				СписокАвторов, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСогласования, "БизнесПроцессОтветственный",
				ТекущийПользователь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
		// -- VOG Солодов В.В. 02.08.2019
		// ++ VOG Солодов В.В. 08.08.2019 task 456
		ИначеЕсли ОтборПринадлежность = "Мои"
			Или ОтборПринадлежность = "МоегоПодразделения" Тогда
		
			Если ОтборСтатус = "ВРаботе" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					ТаблицаСписок,
					"Измерение",
					"Завершенные",
					ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
			
		// ++ VOG Солодов В.В. 28.01.2021 DEV-98
		ИначеЕсли ОтборПринадлежность = "ПорученоМной" Тогда
			
			ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				СписокСогласования.Отбор.Элементы, 
				"АвторОтветственный",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаИли,
				"БизнесПроцессАвтор",
				СписокПользователей,
				ВидСравненияКомпоновкиДанных.ВСписке);
			
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаИли,
				"ОтветственныйПоручение",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаИ,
				"БизнесПроцессОтветственный",
				СписокПользователей,
				ВидСравненияКомпоновкиДанных.ВСписке);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаИ,
				"КартаМаршрута",
				Справочники.CRM_КартыМаршрутов.ПоручениеНовое,
				ВидСравненияКомпоновкиДанных.Равно);
		// -- VOG Солодов В.В. 28.01.2021 DEV-98
			
		Иначе
		// -- VOG Солодов В.В. 08.08.2019
		// ++ VOG Солодов В.В. 30.07.2019 task 106
		
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСогласования, "БизнесПроцессАвтор",
				СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		// До изменения
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
		//	"БизнесПроцесс.Автор", ТекущийПользователь);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСогласования,"БизнесПроцессАвтор",
		//ТекущийПользователь,ВидСравненияКомпоновкиДанных.Равно,,Истина);
		// -- VOG Солодов В.В. 30.07.2019
		// -- Тищенко В.В.
	КонецЕсли;
	
	ОбновитьЗаголовкиНаправленийСогласованийНаСервере();
	
КонецПроцедуры // ОтборЗадачСогласованияПриИзмененииНаСервере()

&НаКлиенте
Процедура ОбновитьЗаголовкиНаправленийСогласований()
	
	МассивОписанийЗаголовков = Новый Массив;
	МассивОписанийЗаголовков.Добавить(Новый Структура("Значение, ШаблонПредставления", "ВходящиеСогласования" , НСтр("ru = 'Вх. согласования (%1)'")));
	МассивОписанийЗаголовков.Добавить(Новый Структура("Значение, ШаблонПредставления", "ИсходящиеСогласования", НСтр("ru = 'Исх. согласования (%1)'")));
	Для каждого ОписаниеЗаголовка Из МассивОписанийЗаголовков Цикл
		ЭлементЗаголовка = Элементы.ОтборПринадлежность.СписокВыбора.НайтиПоЗначению(ОписаниеЗаголовка.Значение);
		Если ЭлементЗаголовка = Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		ЭлементЗаголовка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеЗаголовка.ШаблонПредставления, 
		// +++ VOG Кулаков П.Л. 28.07.2020 CRM-809
		ПолучитьКоличествоЭлементовЗаголовкаСогласований(ТекущийПользователь, ОписаниеЗаголовка.Значение,СписокПользователей, ОтборПланПоКомандировкам));
		// --- VOG Кулаков П.Л.
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьЗаголовкиНаправленийСогласований()


&НаСервере
Процедура ОбновитьЗаголовкиНаправленийСогласованийНаСервере()
	
	МассивОписанийЗаголовков = Новый Массив;
	МассивОписанийЗаголовков.Добавить(Новый Структура("Значение, ШаблонПредставления", "ВходящиеСогласования" , НСтр("ru = 'Вх. согласования (%1)'")));
	МассивОписанийЗаголовков.Добавить(Новый Структура("Значение, ШаблонПредставления", "ИсходящиеСогласования", НСтр("ru = 'Исх. согласования (%1)'")));
	Для каждого ОписаниеЗаголовка Из МассивОписанийЗаголовков Цикл
		ЭлементЗаголовка = Элементы.ОтборПринадлежность.СписокВыбора.НайтиПоЗначению(ОписаниеЗаголовка.Значение);
		Если ЭлементЗаголовка = Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		ЭлементЗаголовка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеЗаголовка.ШаблонПредставления, 
		// +++ VOG Кулаков П.Л. 28.07.2020 CRM-809
		ПолучитьКоличествоЭлементовЗаголовкаСогласований(ТекущийПользователь, ОписаниеЗаголовка.Значение,СписокПользователей, ОтборПланПоКомандировкам));
		// --- VOG Кулаков П.Л.
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 30.09.2020 CRM-932
	ОбновитьЗаголовокДекорацииЧерновики();
	// -- VOG Солодов В.В. 30.09.2020 CRM-932
	
КонецПроцедуры // ОбновитьЗаголовкиНаправленийСогласований()


&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭлементовЗаголовкаСогласований(Исполнитель, Направление,СписокПользователей, ОтборПланПоКомандировкам)
	
	Запрос = Новый Запрос;
	// ++ VOG Солодов В.В. 30.07.2019 task 106
	Запрос.УстановитьПараметр("СписокИсполнителей", СписокПользователей);
	// До изменения
	//Запрос.УстановитьПараметр("Исполнитель"     , Исполнитель);
	// -- VOG Солодов В.В. 30.07.2019	
	Запрос.УстановитьПараметр("ПарамТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ПарамПустаяДата" , Дата("00010101"));
	
	Если Направление = "ВходящиеСогласования" Тогда
		
		// ++ Тищенко В.В. 15.03.2019
		// Добавил условие 
		// ИЛИ ЗадачаЗадачаИсполнителя.РольИсполнителя В (&РолиПользователя)	
		// -- Тищенко В.В. 
		
		// ++ Тищенко В.В. 29.03.2019
		// Новый запрос
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Задачи // VOG Солодов В.В. 22.08.2019 task 477
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		// ++ VOG Солодов В.В. 30.07.2019 task 106
		|	ЗадачаИсполнителя.Исполнитель В(&СписокИсполнителей)
		// До изменения
		//|	ЗадачаИсполнителя.Исполнитель = &Исполнитель
		// -- VOG Солодов В.В. 30.07.2019
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.вогТипЗадачиИсполнителя = ЗНАЧЕНИЕ(Перечисление.вогТипЗадачиИсполнителя.Согласование)
		// ++ VOG Солодов В.В. 22.08.2019 task 477
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.РольИсполнителя В(&РолиДляГруппыПользователей)
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.вогТипЗадачиИсполнителя = ЗНАЧЕНИЕ(Перечисление.вогТипЗадачиИсполнителя.Согласование)
		// -- VOG Солодов В.В. 22.08.2019
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.РольИсполнителя В(&РолиПользователя)
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.вогТипЗадачиИсполнителя = ЗНАЧЕНИЕ(Перечисление.вогТипЗадачиИсполнителя.Согласование)
		// ++ VOG Солодов В.В. 22.08.2019 task 477
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Задачи.Ссылка
		|ИЗ
		|	ВТ_Задачи КАК ВТ_Задачи
		// +++ VOG Кулаков П.Л. 28.07.2020 CRM-809
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ОтборПланПоКомандировкам
		|			ТОГДА ВТ_Задачи.Ссылка.БизнесПроцесс.КартаМаршрута <> &КартаМаршрута
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ");
		// --- VOG Кулаков П.Л.
		// -- VOG Солодов В.В. 22.08.2019
	
		// -- Тищенко В.В. 
		
		// ++ Тищенко В.В. 19.03.2019
		// Изменен запрос на количество задач		
		//Запрос = Новый Запрос("ВЫБРАТЬ
		//|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		//|ИЗ
		//|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		//|ГДЕ
		//|	ЗадачаИсполнителя.Исполнитель = &Исполнитель
		//|	И НЕ ЗадачаИсполнителя.Выполнена
		//|	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.вогЯвляетсяСогласованием
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ЗадачаИсполнителя.Ссылка
		//|ИЗ
		//|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		//|ГДЕ
		//|	ЗадачаИсполнителя.РольИсполнителя В(&РолиПользователя)
		//|	И НЕ ЗадачаИсполнителя.Выполнена
		//|	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.вогЯвляетсяСогласованием
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ЗадачаИсполнителя.Ссылка
		//|ИЗ
		//|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		//|ГДЕ
		//|	ЗадачаИсполнителя.Предмет ССЫЛКА Документ.вогАнкета
		//|	И ЗадачаИсполнителя.CRM_Личная = ЛОЖЬ
		//|	И ЗадачаИсполнителя.БизнесПроцесс = НЕОПРЕДЕЛЕНО
		//|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
		//|	И НЕ ЗадачаИсполнителя.Выполнена");
		// -- Тищенко В.В.
			
		//
		//ТекстУсловияИсполнитель = " И (ЗадачаЗадачаИсполнителя.Исполнитель = &Исполнитель  ИЛИ ЗадачаЗадачаИсполнителя.РольИсполнителя В (&РолиПользователя) ИЛИ ВЫБОР
		//|			КОГДА ЗадачаЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.вогЗадачиДолжностнойПозиции)
		//|					И ЗадачаЗадачаИсполнителя.ОсновнойОбъектАдресации В (&вогДолжностныеПозиции)
		//|				ТОГДА ИСТИНА
		//|			ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	Иначе
		
		
		// ++ Тищенко В.В. 29.03.2019
		// Оптимизировал запрос
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс <> НЕОПРЕДЕЛЕНО
		|	И ЗадачаИсполнителя.вогТипЗадачиИсполнителя = ЗНАЧЕНИЕ(Перечисление.вогТипЗадачиИсполнителя.Согласование)
		// ++ VOG Солодов В.В. 30.07.2019 task 106
		|	И ЗадачаИсполнителя.БизнесПроцесс.Автор В(&СписокИсполнителей)
		// До изменения
		//|	И ЗадачаИсполнителя.БизнесПроцесс.Автор = &Исполнитель
		// -- VOG Солодов В.В. 30.07.2019
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.вогТипЗадачиИсполнителя = ЗНАЧЕНИЕ(Перечисление.вогТипЗадачиИсполнителя.Согласование)
		// ++ VOG Солодов В.В. 30.07.2019 task 106
		|	И ЗадачаИсполнителя.Автор В(&СписокИсполнителей)
		// До изменения
		//|	И ЗадачаИсполнителя.Автор = &Исполнитель
		// -- VOG Солодов В.В. 30.07.2019
		|	И ЗадачаИсполнителя.БизнесПроцесс = НЕОПРЕДЕЛЕНО");
				
		// Старый запрос
		//// { VOG RMV 2019-03-04
		////ТекстУсловияИсполнитель = " И ЗадачаЗадачаИсполнителя.БизнесПроцесс.Автор = &Исполнитель";
		//ТекстУсловияИсполнитель = " И (ЗадачаЗадачаИсполнителя.БизнесПроцесс.Автор = &Исполнитель
		//|			ИЛИ ЗадачаЗадачаИсполнителя.Предмет ССЫЛКА Документ.вогАнкета
		//|				И ЗадачаЗадачаИсполнителя.CRM_Личная = ЛОЖЬ
		//|				И ЗадачаЗадачаИсполнителя.БизнесПроцесс = НЕОПРЕДЕЛЕНО
		//|				И ЗадачаЗадачаИсполнителя.Автор = &Исполнитель)";
		//// } VOG RMV 2019-03-04		
		//
		//Запрос.Текст = 
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ЗадачаЗадачаИсполнителя.Ссылка,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		//|			ТОГДА 0
		//|		КОГДА ЗадачаЗадачаИсполнителя.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		//|			ТОГДА 2
		//|		ИНАЧЕ 1
		//|	КОНЕЦ КАК ВажностьКартинка,
		//|	ЗадачаЗадачаИсполнителя.Важность,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.Выполнена
		//|			ТОГДА 2
		//|		КОГДА НЕ ЗадачаЗадачаИсполнителя.ПринятаКИсполнению
		//|			ТОГДА 0
		//|		КОГДА ЗадачаЗадачаИсполнителя.ПринятаКИсполнению
		//|			ТОГДА 1
		//|	КОНЕЦ КАК Состояние,
		//|	ЗадачаЗадачаИсполнителя.ПринятаКИсполнению,
		//|	ЗадачаЗадачаИсполнителя.Выполнена,
		//|	ЗадачаЗадачаИсполнителя.ДатаНачала,
		//|	ЗадачаЗадачаИсполнителя.СрокИсполнения,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.Выполнена
		//|			ТОГДА 1
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА ЗадачаЗадачаИсполнителя.СрокИсполнения = &ПарамПустаяДата
		//|					ТОГДА 1
		//|				ИНАЧЕ ВЫБОР
		//|						КОГДА ЗадачаЗадачаИсполнителя.СрокИсполнения < &ПарамТекущаяДата
		//|							ТОГДА 0
		//|						ИНАЧЕ 1
		//|					КОНЕЦ
		//|			КОНЕЦ
		//|	КОНЕЦ КАК Просрочена,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.Выполнена
		//|			ТОГДА 0
		//|		КОГДА ЗадачаЗадачаИсполнителя.СрокИсполнения = &ПарамПустаяДата
		//|			ТОГДА 0
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА ЗадачаЗадачаИсполнителя.СрокИсполнения < &ПарамТекущаяДата
		//|					ТОГДА РАЗНОСТЬДАТ(&ПарамТекущаяДата, ЗадачаЗадачаИсполнителя.СрокИсполнения, ДЕНЬ) * -1
		//|				ИНАЧЕ РАЗНОСТЬДАТ(&ПарамТекущаяДата, ЗадачаЗадачаИсполнителя.СрокИсполнения, ДЕНЬ)
		//|			КОНЕЦ
		//|	КОНЕЦ КАК ОсталосьДней,
		//|	ЗадачаЗадачаИсполнителя.Автор,
		//|	ЗадачаЗадачаИсполнителя.Исполнитель,
		//|	ЗадачаЗадачаИсполнителя.РольИсполнителя,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.CRM_Личная
		//|			ТОГДА ЗадачаЗадачаИсполнителя.CRM_Проект
		//|		ИНАЧЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс.Проект
		//|	КОНЕЦ КАК Проект,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.CRM_Личная
		//|			ТОГДА ЗадачаЗадачаИсполнителя.CRM_Партнер
		//|		ИНАЧЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс.Партнер
		//|	КОНЕЦ КАК Клиент,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.CRM_Личная
		//|			ТОГДА ЗадачаЗадачаИсполнителя.CRM_КонтактноеЛицо
		//|		ИНАЧЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс.КонтактноеЛицо
		//|	КОНЕЦ КАК КонтактноеЛицо,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.CRM_Личная
		//|			ТОГДА ЗНАЧЕНИЕ(БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка)
		//|		ИНАЧЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс
		//|	КОНЕЦ КАК БизнесПроцесс,
		//|	ЗадачаЗадачаИсполнителя.ПредметСтрокой,
		//|	ЗадачаЗадачаИсполнителя.Дата,
		//|	ЗадачаЗадачаИсполнителя.ДатаИсполнения,
		//|	ЗадачаЗадачаИсполнителя.ДатаПринятияКИсполнению,
		//|	ВЫРАЗИТЬ(ЗадачаЗадачаИсполнителя.РезультатВыполнения КАК СТРОКА(500)) КАК Результат,
		//|	ЗадачаЗадачаИсполнителя.CRM_ТочкаМаршрута КАК ТочкаМаршрута,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.CRM_Личная
		//|			ТОГДА ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.ПустаяСсылка)
		//|		ИНАЧЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута
		//|	КОНЕЦ КАК КартаМаршрута,
		//|	ЗадачаЗадачаИсполнителя.CRM_Переадресована КАК Переадресована,
		//|	ЗадачаЗадачаИсполнителя.CRM_Личная КАК Личная,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
		//|			ТОГДА ЗадачаЗадачаИсполнителя.Исполнитель
		//|		КОГДА НЕ ЗадачаЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		//|			ТОГДА ЗадачаЗадачаИсполнителя.Исполнитель
		//|		ИНАЧЕ ЗадачаЗадачаИсполнителя.РольИсполнителя
		//|	КОНЕЦ КАК ИсполнительРоль,
		//|	ЗадачаЗадачаИсполнителя.Наименование,
		//|	ЗадачаЗадачаИсполнителя.ПометкаУдаления,
		//|	ЕСТЬNULL(ЗадачаЗадачаИсполнителя.CRM_ОсновнаяКатегория.ЦветИндекс, 26) КАК ОсновнаяКатегорияИндекс,
		//|	ЗадачаЗадачаИсполнителя.CRM_ОсновнаяКатегория КАК ОсновнаяКатегория,
		//|	ВЫБОР
		//|		КОГДА ЗадачаЗадачаИсполнителя.Исполнитель = &Исполнитель  ИЛИ ВЫБОР
		//|			КОГДА ЗадачаЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.вогЗадачиДолжностнойПозиции)
		//|					И ЗадачаЗадачаИсполнителя.ОсновнойОбъектАдресации В (&вогДолжностныеПозиции)
		//|				ТОГДА ИСТИНА
		//|			ИНАЧЕ ЛОЖЬ КОНЕЦ
		//|			ТОГДА ""ВходящиеСогласования""
		//|		КОГДА ЗадачаЗадачаИсполнителя.БизнесПроцесс.Автор = &Исполнитель
		//|			ТОГДА ""ИсходящиеСогласования""
		//|	КОНЕЦ КАК Направление
		//|ИЗ
		//|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
		//|ГДЕ
		//// { VOG RMV 2019-03-04
		////|	ЗадачаЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.вогЯвляетсяСогласованием = ИСТИНА
		//|	(ЗадачаЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.вогЯвляетсяСогласованием = ИСТИНА
		//|		ИЛИ ЗадачаЗадачаИсполнителя.Предмет ССЫЛКА Документ.вогАнкета
		//|			И ЗадачаЗадачаИсполнителя.CRM_Личная = ЛОЖЬ
		//|			И ЗадачаЗадачаИсполнителя.БизнесПроцесс = НЕОПРЕДЕЛЕНО)
		//// } VOG RMV 2019-03-04		
		//|	И ЗадачаЗадачаИсполнителя.Выполнена = ЛОЖЬ" + ТекстУсловияИсполнитель;
		
		
		// -- Тищенко В.В.
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("вогДолжностныеПозиции"	, ПараметрыСеанса.вогДолжностныеПозиции);
	// ++ Тищенко В.В. 19.03.2019
	// Добавленны параметр 
	Запрос.УстановитьПараметр("РолиПользователя"		, CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователюБезАдресации(ПользователиКлиентСервер.ТекущийПользователь()));
	// ++ VOG Солодов В.В. 30.07.2019 task 106
	Запрос.УстановитьПараметр("СписокИсполнителей", СписокПользователей);
	// До изменения
	//Запрос.УстановитьПараметр("Исполнитель"				, Пользователи.ТекущийПользователь());
	// -- VOG Солодов В.В. 30.07.2019
	// -- Тищенко В.В.
	// ++ VOG Солодов В.В. 22.08.2019 task 477
	РолиДляГруппыПользователей = 
		CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователюДляГруппПользователей(ПользователиКлиентСервер.ТекущийПользователь());
	
	Запрос.УстановитьПараметр("РолиДляГруппыПользователей", РолиДляГруппыПользователей);
	// -- VOG Солодов В.В. 22.08.2019
	
	// +++ VOG Кулаков П.Л. 28.07.2020 CRM-809
	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c2c-d255-11ea-8f2a-005056bcd3e3"));
	Запрос.УстановитьПараметр("КартаМаршрута",КартаМаршрута);
	Запрос.УстановитьПараметр("ОтборПланПоКомандировкам",ОтборПланПоКомандировкам);
	// --- VOG Кулаков П.Л.
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции // ПолучитьКоличествоЭлементовЗаголовкаСогласований()

// ++ VOG Солодов В.В. 30.09.2020 CRM-932
&НаСервере
Процедура ОбновитьЗаголовокДекорацииЧерновики()
	
	ШаблонЗаголовка 		= НСтр("ru = 'Черновики (%1)'");
	КоличествоЧерновиков 	= 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(CRM_БизнесПроцесс.Ссылка) КАК КоличествоЧерновиков
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.КартаМаршрута = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.ПоручениеНовое)
		|	И CRM_БизнесПроцесс.Стартован = ЛОЖЬ
		|	И CRM_БизнесПроцесс.ПометкаУдаления = ЛОЖЬ
		|	И (CRM_БизнесПроцесс.Ответственный = &Ответственный
		|		ИЛИ CRM_БизнесПроцесс.Автор = &Ответственный)";
	
	Запрос.УстановитьПараметр("Ответственный", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КоличествоЧерновиков = ВыборкаДетальныеЗаписи.КоличествоЧерновиков;
	КонецЦикла;
	
	Элементы.ДекорацияЧерновики.Заголовок = СтрШаблон(ШаблонЗаголовка, КоличествоЧерновиков);
	
КонецПроцедуры // -- VOG Солодов В.В. 30.09.2020 CRM-932

#КонецОбласти

&НаСервере
Процедура ВключитьОтключитьГруппировкуВходящиеНаСервере()
	
	Если ТаблицаВходящие.Группировка.Элементы.Количество() = 0 Тогда
		ТаблицаВходящие.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("НаименованиеДляГруппировки");
	Иначе
		ТаблицаВходящие.Группировка.Элементы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистрНаСервере()
	
	CRM_РаботаАРМСервер.ПервоначальноеЗаполнениеАРМ();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиТаблиц()
	
	Запрос = Новый Запрос;
	// ++ #373 Бей добавил разрешенные
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_ОбъектыАРМ.ИзмерениеАРМ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ОбъектыАРМ.Объект) КАК Объект
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
	// +++ VOG Кулаков П.Л. 27.02.2020 CRM-233
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	|	ПО (CRM_ОбъектыАРМ.Пользователь = CRM_МероприятиеСвоиЛица.Лицо
	|			И CRM_ОбъектыАРМ.Объект = CRM_МероприятиеСвоиЛица.Ссылка)
	// --- VOG Кулаков П.Л.
	|ГДЕ
	|	CRM_ОбъектыАРМ.Пользователь = &Пользователь
	// +++ VOG Кулаков П.Л. 27.02.2020 CRM-233
	|	И ЕСТЬNULL(CRM_МероприятиеСвоиЛица.ПосетитМероприятие, 1) > 0
	// --- VOG Кулаков П.Л.
	|И ВЫБОР
	|		КОГДА НЕ &ОтображатьПисьма
	|			ТОГДА НЕ CRM_ОбъектыАРМ.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|И ВЫБОР
	|		КОГДА НЕ &ОтображатьЗвонки
	|			ТОГДА НЕ CRM_ОбъектыАРМ.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	//ДоплнительныеОтборы
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ОбъектыАРМ.ИзмерениеАРМ";
	
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтображатьЗвонки", НЕ ОтображатьЗвонки);
	Запрос.УстановитьПараметр("ОтображатьПисьма", НЕ ОтображатьПисьма);
	Запрос.УстановитьПараметр("ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Заголовок", "%"+СтрокаПоискаОтбор+"%");
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	СтрокаДопОтборов = "";
	Если ОтборВключатьПросроченные = -1 Тогда
		СтрокаДопОтборов = "И ВЫБОР
		|			КОГДА (CRM_ОбъектыАРМ.КрайнийСрок < &ПериодПросроченных	И CRM_ОбъектыАРМ.КрайнийСрок > &ПустаяДата) И CRM_ОбъектыАРМ.ИзмерениеАРМ <> ""Завершенные""
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|   ";	
	КонецЕсли;	
	Если СтрокаПоискаОтбор <> "" Тогда
		СтрокаДопОтборов = СтрокаДопОтборов + "И CRM_ОбъектыАРМ.Заголовок Подобно &Заголовок
		|   ";
	КонецЕсли;	
	Если ВариантПериода <> "" Тогда
		Если ВариантПериода = "ПроизвольныйПериод" Тогда
			НомерПериода = 0;
		ИначеЕсли ВариантПериода = "Сегодня" Тогда
			НомерПериода = 1;
		ИначеЕсли ВариантПериода = "3 дня" Тогда
			НомерПериода = 2;
		ИначеЕсли ВариантПериода = "Неделя" Тогда
			НомерПериода = 3;
		ИначеЕсли ВариантПериода = "Месяц" Тогда
			НомерПериода = 4;
		КонецЕсли;
		Период = ОтборСозданы[НомерПериода];
		Запрос.УстановитьПараметр("НачДатаОтбора", Период.Значение.ДатаНачала);
		Запрос.УстановитьПараметр("КонДатаОтбора", Период.Значение.ДатаОкончания);
		
		СтрокаДопОтборов = СтрокаДопОтборов + "И CRM_ОбъектыАРМ.КрайнийСрок <= &КонДатаОтбора
		|   ";
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДоплнительныеОтборы", СтрокаДопОтборов);
	ТабСчетчика = Запрос.Выполнить().Выгрузить();
	СтрокаИзмерение = ТабСчетчика.Найти("Входящие", "ИзмерениеАРМ");
	Если СтрокаИзмерение <> Неопределено Тогда
		Элементы["Заголовок"+СтрокаИзмерение.ИзмерениеАРМ].Заголовок = СтрокаИзмерение.ИзмерениеАРМ+" ("+СтрокаИзмерение.Объект+")";
	Иначе	
		Элементы["ЗаголовокВходящие"].Заголовок = "Входящие (0)";
	КонецЕсли;	
	СтрокаИзмерение = ТабСчетчика.Найти("Отложенные", "ИзмерениеАРМ");
	Если СтрокаИзмерение <> Неопределено Тогда
		Элементы["Заголовок"+СтрокаИзмерение.ИзмерениеАРМ].Заголовок = СтрокаИзмерение.ИзмерениеАРМ+" ("+СтрокаИзмерение.Объект+")";
	Иначе	
		Элементы["ЗаголовокОтложенные"].Заголовок = "Отложенные (0)";	
	КонецЕсли;
	СтрокаИзмерение = ТабСчетчика.Найти("Текущие", "ИзмерениеАРМ");
	Если СтрокаИзмерение <> Неопределено Тогда
		Элементы["Заголовок"+СтрокаИзмерение.ИзмерениеАРМ].Заголовок = СтрокаИзмерение.ИзмерениеАРМ+" ("+СтрокаИзмерение.Объект+")";
	Иначе	
		Элементы["ЗаголовокТекущие"].Заголовок = "Текущие (0)";	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПисьмоИзАРМНаСервере(ПричинаОтказа=Неопределено, Комментарий="")
	Если Элементы.ТаблицаВходящие.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого  ТекСтрока Из Элементы.ТаблицаВходящие.ВыделенныеСтроки Цикл
			Если ТекСтрока <> Неопределено Тогда
				Если ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") или ТипЗнч(ТекСтрока.Объект) = Тип("ДокументСсылка.CRM_Заявка") Тогда
					Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ТекСтрока.Объект) Тогда
						РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ТекСтрока.Объект, Справочники.CRM_СостоянияЛидов.Отклонен, ПричинаОтказа, Комментарий); 
					КонецЕсли;
					Об = ТекСтрока.Объект.ПолучитьОбъект();
					Об.CRM_СкрытьВАРМ = Истина;
					Об.Записать();
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЕстьЛидыВВыбранныхСтроках()
	МассивСсылок = Новый Массив;
	Для Каждого  ТекСтрока Из Элементы.ТаблицаВходящие.ВыделенныеСтроки Цикл
		МассивСсылок.Добавить(ТекСтрока.Объект);
	КонецЦикла;
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЕстьЛидыВМассивеСсылок(МассивСсылок, Истина);
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные(Откуда, Куда)
	
	Элементы["Таблица"+Откуда].Обновить();
	Элементы["Таблица"+Куда].Обновить();
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюЛичнуюЗадачуВФоне(ЗвонокПисьмо, НовоеИзмерение)
	
	//ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Автор						= ТекущийПользователь;
	ОбъектЗадача.Исполнитель				= ОбъектЗадача.Автор;
	ОбъектЗадача.ПринятаКИсполнению			= Истина;
	ОбъектЗадача.Наименование				= ЗвонокПисьмо.Тема;
	ОбъектЗадача.Дата						= ТекущаяДатаСеанса();
	ОбъектЗадача.ДатаНачала					= ТекущаяДатаСеанса();
	ОбъектЗадача.Выполнена 					= Ложь;
	ОбъектЗадача.ДатаИсполнения				= ТекущаяДатаСеанса();
	ОбъектЗадача.СрокИсполнения				= ТекущаяДатаСеанса();
	ОбъектЗадача.CRM_Личная					= Истина;
	ОбъектЗадача.Предмет					= ЗвонокПисьмо;
	ОбъектЗадача.ПредметСтрокой				= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(ЗвонокПисьмо);
	ОбъектЗадача.Описание = "Тема: " + ЗвонокПисьмо.Тема + "
	|Введено на основании: " + ЗвонокПисьмо.Ссылка;
	Если ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Если ЗначениеЗаполнено(ЗвонокПисьмо.ОтправительКонтакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.ОтправительКонтакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.ОтправительКонтакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Если ЗначениеЗаполнено(ЗвонокПисьмо.Контакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.Контакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.Контакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
		ОбъектЗадача.Описание = "Сообщение: " + ЗвонокПисьмо.ТекстСообщения;
	Иначе
		Если ЗначениеЗаполнено(ЗвонокПисьмо.АбонентКонтакт)	Тогда
			Если ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.АбонентКонтакт;
				ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
			ИначеЕсли ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.АбонентКонтакт;
				ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//
	ОбъектЗадача.Записать();
	//Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	//Менеджер.Объект = ЗвонокПисьмо;
	//Менеджер.НаименованиеАРМ = "МоиДела";
	//Менеджер.ИзмерениеАРМ = "Входящие";
	//Менеджер.Пользователь = ЗвонокПисьмо.Ответственный;
	//Менеджер.Прочитать();
	//Менеджер.Удалить();
	
	Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	Менеджер.Объект = ОбъектЗадача.Ссылка;
	Менеджер.НаименованиеАРМ = "МоиДела";
	Менеджер.ИзмерениеАРМ = "Текущие";
	Менеджер.Пользователь = ТекущийПользователь;
	Менеджер.Прочитать();
	Менеджер.ИзмерениеАРМ = НовоеИзмерение;
	Менеджер.Записать(Истина);
	
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ЗвонокПисьмо) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ЗвонокПисьмо, Справочники.CRM_СостоянияЛидов.Сконвертирован);
	КонецЕсли;
	ЗвонокПисьмоОбъект = ЗвонокПисьмо.ПолучитьОбъект();
	ЗвонокПисьмоОбъект.CRM_СкрытьВАРМ = Истина;
	ЗвонокПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
	ЗвонокПисьмоОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПеретаскиванияНаСервере(Строка, НовоеИзмерение, СтрокаПереноса = Неопределено)
	Если ТипЗнч(Строка) = Тип("Массив") Тогда
		Строка =  Строка[0];
	КонецЕсли;	
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") ИЛИ ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		СоздатьНовуюЛичнуюЗадачуВФоне(Строка.Объект, НовоеИзмерение);
		Возврат;
	КонецЕсли;
	
	Если СтрокаПереноса = Неопределено Тогда
		ДатаПереноса = Неопределено;
	ИначеЕсли ТипЗнч(СтрокаПереноса) = Тип("РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ") Тогда
		
		ДатаПереноса = ПолучитьДатуЗаписи(СтрокаПереноса);
	Иначе	
		ДатаПереноса = СтрокаПереноса.Ключ;
	КонецЕсли;
	Если ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат КонецЕсли;
	Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
		Если Строка.Объект.Ответственный <> Пользователи.АвторизованныйПользователь() И НовоеИзмерение = "Завершенные" Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	Пользователь = Строка.Пользователь;
	Если Строка.ИзмерениеАРМ = "Входящие" И ТипЗнч(Строка.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		И НЕ Строка.Объект.ПринятаКИсполнению И Не ЗначениеЗаполнено(Строка.Объект.Исполнитель) Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Строка.Объект);
		CRM_БизнесПроцессыИЗадачиВызовСервера.ПринятьЗадачиКИсполнению(МассивЗадач);
		Пользователь = Строка.Объект.Исполнитель
	КонецЕсли;	
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Строка.Объект);
	НаборЗаписей.Отбор.НаименованиеАРМ.Установить(Строка.НаименованиеАРМ);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей[0].ИзмерениеАРМ = НовоеИзмерение;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЗадачу(СсылкаИлиСтруктура, СнятьСКонтроля = Ложь)
	
	Если ТипЗнч(СсылкаИлиСтруктура) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если СсылкаИлиСтруктура.CRM_Личная Тогда
			тОбъект = СсылкаИлиСтруктура.ПолучитьОбъект();
			тОбъект.Выполнена = Истина;
			тОбъект.Записать();
		Иначе
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаИлиСтруктура) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
	ИначеЕсли ТипЗнч(СсылкаИлиСтруктура) = Тип("Структура") И СсылкаИлиСтруктура.Свойство("Успех") И НЕ СсылкаИлиСтруктура.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СсылкаИлиСтруктура.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуЗаписи(СтрокаЗаписи)
	
	Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	Менеджер.Объект = СтрокаЗаписи.Объект;
	Менеджер.НаименованиеАРМ = СтрокаЗаписи.НаименованиеАРМ;
	Менеджер.ИзмерениеАРМ = СтрокаЗаписи.ИзмерениеАРМ;
	Менеджер.Пользователь = СтрокаЗаписи.Пользователь;
	Менеджер.Прочитать();
	Возврат Менеджер.ДатаДляСортировки;
	
КонецФункции	

&НаСервере
Функция ПолучитьИмяИзмерения(Значение)
	
	Возврат Значение.ИзмерениеАРМ;
	
КонецФункции

&НаСервере
Функция ПолучитьОбъектДействия(СтрокаСписка)
	Если ТипЗнч(СтрокаСписка) = Тип("Массив") Тогда
		Возврат СтрокаСписка[0].Объект;;
	Иначе
		Возврат СтрокаСписка.Объект;
	КонецЕсли;
	
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Объект", ВыбраннаяСтрока.Объект);
	Возврат СтруктураОбъекта;
	
КонецФункции

&НаКлиенте
Функция ИндексТекущегоВиджета()
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ИндексТекущегоВиджета = Прав(ТекущийЭлемент.Имя,2);
	
	Возврат ИндексТекущегоВиджета;
	
КонецФункции

&НаСервере
Функция ПолучитьИсточникДанныхВиджета(Виджет)
	
	Возврат Виджет.ИсточникДанных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкуПоказыватьВиджеты(КлючОбъекта, Настройка)
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ПоказыватьПанельВиджетов", Настройка);  
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВиджетЗавершениеНаСервере(Виджет)
	
	ИндексВиджета = Формат(СписокВиджетовПользователя.Количество()+1, "ЧЦ=2; ЧДЦ=; ЧВН=");
	НовыйЭлемент = СписокВиджетовПользователя.Добавить(Виджет, ИндексВиджета);
	CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьВиджетыТекущихДел(ЭтотОбъект, "ГруппаВиджеты");
	КоличествоВиджетовНаФорме = СписокВиджетовПользователя.Количество();
	
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВиджетыПользователя", СписокВиджетовПользователя);
	
	// Записать в регистр настройки нового виджета по умолчанию.
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь 		= ТекущийПользователь;
	МенеджерЗаписи.Виджет 				= Виджет;
	МенеджерЗаписи.ИндексВиджета 		= ИндексВиджета;
	МенеджерЗаписи.ПериодОбновления 	= Виджет.ИсточникДанных.ПериодОбновления;
	МенеджерЗаписи.ТипАналитики 		= Перечисления.CRM_ВидыРазверткиПоказателей.Аналитика1;
	МенеджерЗаписи.ЗначениеАналитики 	= ТекущийПользователь;
	МенеджерЗаписи.Записать();
	
	Возврат Новый Структура("Виджет, ИндексВиджета, ПериодОбновленияВиджета", Виджет, ИндексВиджета, Виджет.ИсточникДанных.ПериодОбновления);
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗаголовок()
	
	Заголовок = НСтр("ru = 'Мои дела'")+" / "+ ТекущийПользователь +" / " + ПредставлениеПериода;
	ОбновитьЗаголовкиТаблиц();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПериодОбновленияВиджетаНаСервере(Виджет, Индекс)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь 	= ТекущийПользователь;
	МенеджерЗаписи.Виджет 			= Виджет;
	МенеджерЗаписи.ИндексВиджета 	= Индекс;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат ?(ЗначениеЗаполнено(МенеджерЗаписи.ПериодОбновления), МенеджерЗаписи.ПериодОбновления, 3600);
	Иначе
		Если Виджет.ИсточникДанных.КонтролируемыйПоказатель = "" Тогда
			Возврат 3600;
		Иначе	
			Возврат Виджет.ИсточникДанных.ПериодОбновления;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура БыстрыеОтборы(Элемент)
	
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаСервере
Процедура ВключитьОткрючитьГруппировкуПоДатеНаСервере()
	
	Если ТаблицаТекущие.Группировка.Элементы.Количество() = 0 Тогда
		ТаблицаТекущие.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
	Иначе
		ТаблицаТекущие.Группировка.Элементы.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаголовокКоманды()
	
	Если Элементы.ТаблицаТекущиеКонтекстноеМенюВключитьОткрючитьГруппировкуПоДате.Заголовок = "Сгруппировать по дате" Тогда
		Элементы.ТаблицаТекущиеКонтекстноеМенюВключитьОткрючитьГруппировкуПоДате.Заголовок = "Отключить группировку";
	Иначе      
		Элементы.ТаблицаТекущиеКонтекстноеМенюВключитьОткрючитьГруппировкуПоДате.Заголовок = "Сгруппировать по дате";
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ТекущийПользовательПриИзмененииНаСервере()
	
	// ++ VOG Солодов В.В. 30.07.2019 task 106
	МассивПользователей = вогНастраиваемоеДелегированиеПрав.ПолучитьМассивПользователейДелегата(
		"ПроцессыИЗадачи",
		Истина,
		ТекущийПользователь);
	СписокПользователей.ЗагрузитьЗначения(МассивПользователей);
	// -- VOG Солодов В.В. 30.07.2019
	
	// +++ VOG Кулаков П.Л. 06.03.2020 CRM-399
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ПараметрыСеанса.ТекущийПользователь);
	// --- VOG Кулаков П.Л.
	
	//+вог
	Если ОтборПринадлежность = "ВходящиеСогласования"
		ИЛИ ОтборПринадлежность = "ИсходящиеСогласования" 
		ИЛИ ОтборПринадлежность = "ПорученоМной" Тогда
		ОтборЗадачСогласованияПриИзмененииНаСервере(РолиПользователя);
		Элементы.СтраницыСписков.ТекущаяСтраница = Элементы.СтраницаСписокСогласования; 
		
		Элементы.ОтборСтатус.Видимость 		   = Истина;
		//++ Бей 373   		
		Элементы.ГруппаКомандыОтбора.Видимость = Истина;
		Элементы.ПрочиеОтборы.Видимость = Ложь;
		//--
		// +++ VOG Кулаков П.Л. 27.07.2020 CRM-808
		ОбновитьНаименованиеКнопкиОтчетаПланПоКомандировкам(ОтборПринадлежность = "ВходящиеСогласования");
		ОбновитьЗаголовкиНаправленийСогласованийНаСервере();
		// --- VOG Кулаков П.Л.
		
		Возврат;
		
	// ++ VOG Ульянов И.В. 11.11.2019 task 840	
	ИначеЕсли ОтборПринадлежность = "Командировки" тогда
		
		// ++ VOG Солодов В.В. 18.02.2020 CRM-360
		ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Командировки.Отбор.Элементы,
			"ОтборУчастников",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
			"Участники", ТекущийПользователь, ВидСравненияКомпоновкиДанных.Содержит);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
			"Сотрудник", ТекущийПользователь, ВидСравненияКомпоновкиДанных.Равно);
		// До изменения
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		//		Командировки,
		//		"Участники",
		//		ТекущийПользователь,
		//		ВидСравненияКомпоновкиДанных.Содержит,,ЗначениеЗаполнено(ТекущийПользователь));
		// -- VOG Солодов В.В. 18.02.2020
		Элементы.СтраницыСписков.ТекущаяСтраница = Элементы.СтраницаСписокКомандировки;
	// -- VOG Ульянов И.В. 11.11.2019 task 840	
	
	Иначе	
		Элементы.СтраницыСписков.ТекущаяСтраница = Элементы.СтраницаСписокМоиДела;  
		
		// ++ VOG Солодов В.В. 06.08.2019 task 456
		// До изменения
		//Элементы.ОтборСтатус.Видимость 		   = Ложь;
		// -- VOG Солодов В.В. 06.08.2019
		Элементы.ГруппаКомандыОтбора.Видимость = Истина;
		//++ Бей 373   		
		// ++ VOG Солодов В.В. 24.06.2020 CRM-733
		Элементы.ПрочиеОтборы.Видимость = Не Собственник;
		// До изменения
		//Элементы.ПрочиеОтборы.Видимость = Истина;
		// -- VOG Солодов В.В. 24.06.2020 CRM-733
		//--
		
	КонецЕсли;
	
	ТекущееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");
	//-вог
	
	// +++ VOG Кулаков П.Л. 04.03.2020 CRM-385
	ОбъектыАдресации = CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ТекущийПользователь.Подразделение,Истина);
	// --- VOG Кулаков П.Л.
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "Измерение", "Входящие", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ОтображатьЗвонки", НЕ ОтображатьЗвонки, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ОтображатьПисьма", НЕ ОтображатьПисьма, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "РолиПользователя", РолиПользователя, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ПустаяДата", Дата('00010101'), Истина);
	// +++ VOG Кулаков П.Л. 03.03.2020 CRM-385
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаВходящие, "ОсновнойОбъектАдресации", ОбъектыАдресации, Истина);
	// --- VOG Кулаков П.Л.
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "Измерение", "Завершенные", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "РолиПользователя", РолиПользователя, Истина);
	// +++ VOG Кулаков П.Л. 03.03.2020 CRM-385
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЗавершенные, "ОсновнойОбъектАдресации", ОбъектыАдресации, Истина);
	// --- VOG Кулаков П.Л.
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "Измерение", "Отложенные", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "РолиПользователя", РолиПользователя, Истина);
	// +++ VOG Кулаков П.Л. 03.03.2020 CRM-385
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаОтложенные, "ОсновнойОбъектАдресации", ОбъектыАдресации, Истина);
	// --- VOG Кулаков П.Л.
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "Измерение", "Текущие", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "Пользователь", ТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "РолиПользователя", РолиПользователя, Истина);
	// +++ VOG Кулаков П.Л. 03.03.2020 CRM-385
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаТекущие, "ОсновнойОбъектАдресации", ОбъектыАдресации, Истина);
	// --- VOG Кулаков П.Л.
	
	//+вог
	МассивАдресации = Новый Массив;
	
	Если ОтборПринадлежность = "Все" Тогда
		МассивАдресации.Добавить(ТекущийПользователь);		
		МассивАдресации.Добавить(ТекущееПодразделение);		
	ИначеЕсли ОтборПринадлежность = "Мои" Тогда
		МассивАдресации.Добавить(ТекущийПользователь);
	ИначеЕсли ОтборПринадлежность = "МоегоПодразделения" Тогда
		МассивАдресации.Добавить(ТекущееПодразделение);
			
	Иначе
		МассивАдресации.Добавить(ТекущийПользователь);		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "Пользователь", МассивАдресации, Истина);
	// +++ VOG Кулаков П.Л. 03.03.2020 CRM-385
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ОсновнойОбъектАдресации", ОбъектыАдресации, Истина);
	// --- VOG Кулаков П.Л.
	 	 	
	Если ОтборПринадлежность = "Мои" 
		Или ОтборПринадлежность = "МоегоПодразделения" Тогда // VOG Солодов В.В. 08.08.2019 task 456
		// ++ Тищенко В.В. 01.04.2019
		//  Новое условия. Тип задачи Личная или Поручение
		//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТаблицаСписок,
		//	"ЯвляетсяСогласованием", Ложь);
		// -- Тищенко В.В.
		// ++ VOG Солодов В.В. 08.08.2019 task 456
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ТаблицаСписок,
			"Измерение",
			"Завершенные",
			ВидСравненияКомпоновкиДанных.НеРавно,, ОтборСтатус = "ВРаботе");
		// -- VOG Солодов В.В. 08.08.2019
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ТаблицаСписок, "ЯвляетсяСогласованием");
	КонецЕсли;
	//-вог
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "РолиПользователя", РолиПользователя, Истина);
	
	
	Для Каждого ЭлементСпискаВиджетов Из СписокВиджетовПользователя Цикл
		тВиджет = ЭлементСпискаВиджетов.Значение;
		тИндекс = ЭлементСпискаВиджетов.Представление; 
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиВиджетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь 	= Пользователи.АвторизованныйПользователь();
		МенеджерЗаписи.Виджет 			= тВиджет;
		МенеджерЗаписи.ИндексВиджета 	= тИндекс;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ЗначениеАналитики = ТекущийПользователь;
			МенеджерЗаписи.Записать(Истина);
			CRM_РаботаСВиджетамиВызовСервера.ОбновитьТекущийВиджет(ЭтотОбъект, тИндекс);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 29.07.2020 CRM-808
&НаСервере
Функция ПолучитьКоличествоЗадачПланПоКомандировкам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителяЗадачиПоИсполнителю.БизнесПроцесс.Предмет) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(
		|			&ТекущийПользователь,
		|			БизнесПроцесс.КартаМаршрута = &КартаМаршрута
		|				И НЕ Выполнена
		|				И CRM_ТочкаМаршрута <> &ТочкаМаршрута) КАК ЗадачаИсполнителяЗадачиПоИсполнителю";
	
	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c2c-d255-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрута = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c32-d255-11ea-8f2a-005056bcd3e3"));
	
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 27.07.2020 CRM-808
&НаСервере
Процедура ОбновитьНаименованиеКнопкиОтчетаПланПоКомандировкам(Отображать)
	
	Если ЭтаФорма.Элементы.Найти("СписокСогласованияОтчетвогПланПоКомандировкамСформироватьОтчет") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокСогласованияОтчетвогПланПоКомандировкамСформироватьОтчет.Видимость = Отображать;
	Элементы.ОтборПланПоКомандировкам.Видимость = Отображать;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСогласования,"ОтборПланПоКомандировкам",?(Отображать,ОтборПланПоКомандировкам,Ложь));
	
	Если Не Отображать Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЗадач = ПолучитьКоличествоЗадачПланПоКомандировкам();
	
	ШаблонЗаголовка = "К согласованию плановых командировок (%1)";
	Если КоличествоЗадач = 0 ИЛИ НЕ ОтборПланПоКомандировкам Тогда 
		Элементы.СписокСогласованияОтчетвогПланПоКомандировкамСформироватьОтчет.Доступность = Ложь;
	Иначе
		Элементы.СписокСогласованияОтчетвогПланПоКомандировкамСформироватьОтчет.Доступность = Истина;
	КонецЕсли;
	Элементы.СписокСогласованияОтчетвогПланПоКомандировкамСформироватьОтчет.Заголовок = СтрШаблон(ШаблонЗаголовка,КоличествоЗадач);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаСервереБезКонтекста
Процедура СоздатьНовуюЛичнуюЗадачу(ЧтоСделать = "", Когда = Неопределено, ЗвонокПисьмо = Неопределено)
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Автор						= ТекущийПользователь;
	ОбъектЗадача.Исполнитель				= ОбъектЗадача.Автор;
	ОбъектЗадача.ПринятаКИсполнению			= Истина;
	ОбъектЗадача.Наименование				= ?(ЗвонокПисьмо = Неопределено, ЧтоСделать, ЗвонокПисьмо.Тема);
	ОбъектЗадача.Дата						= ТекущаяДатаСеанса();
	ОбъектЗадача.ДатаНачала					= ТекущаяДатаСеанса();
	ОбъектЗадача.СостояниеБизнесПроцесса	= Перечисления.СостоянияБизнесПроцессов.Активен;
	ОбъектЗадача.CRM_Личная					= Истина;
	// ++ Тищенко В.В. 02.04.2019
	ОбъектЗадача.вогТипЗадачиИсполнителя	= Перечисления.вогТипЗадачиИсполнителя.Личная;
	// -- Тищенко В.В.
	ОбъектЗадача.Описание = ?(ЗвонокПисьмо = Неопределено, ЧтоСделать, "Тема: " + ЗвонокПисьмо.Тема + "
	|Введено на основании: " + ЗвонокПисьмо.Ссылка);
	Если ЗвонокПисьмо <> Неопределено Тогда
		ОбъектЗадача.Предмет				= ЗвонокПисьмо;
		ОбъектЗадача.ПредметСтрокой			= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(ЗвонокПисьмо);
		Если ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Если ЗначениеЗаполнено(ЗвонокПисьмо.ОтправительКонтакт)	Тогда
				Если ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.ОтправительКонтакт;
					ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
				ИначеЕсли ТипЗнч(ЗвонокПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.ОтправительКонтакт;
					ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗвонокПисьмо) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Если ЗначениеЗаполнено(ЗвонокПисьмо.Контакт)	Тогда
				Если ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.Контакт;
					ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
				ИначеЕсли ТипЗнч(ЗвонокПисьмо.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
					ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.Контакт;
					ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;
			КонецЕсли;
			ОбъектЗадача.Описание = "Сообщение: " + ЗвонокПисьмо.ТекстСообщения;
		Иначе
			Если ЗначениеЗаполнено(ЗвонокПисьмо.АбонентКонтакт)	Тогда
				Если ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ОбъектЗадача.CRM_КонтактноеЛицо		= ЗвонокПисьмо.АбонентКонтакт;
					ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
				ИначеЕсли ТипЗнч(ЗвонокПисьмо.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					ОбъектЗадача.CRM_Партнер			= ЗвонокПисьмо.АбонентКонтакт;
					ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//
	Если Когда <> Неопределено Тогда
		ОбъектЗадача.СрокИсполнения			= Когда;
	КонецЕсли;
	ОбъектЗадача.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДатуНовойЗадачи()
	
	Если CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(СрокНовойЗадачи, ВремяНовойЗадачи)<ТекущаяДата() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата задачи меньше текущей даты!'"), , "ВремяНовойЗадачи", "ВремяНовойЗадачи");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
	
	Результат = Ложь;
	
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	
	Период = ОтборСозданы[НомерПериода];
	ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
	Если Элемент<>Неопределено Тогда
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Не Период.Пометка;
		КонецЕсли;
		
		// Вариант периода может быть выбран только один.
		Для Индекс = 0 По ОтборСозданы.Количество()-1 Цикл
			
			ЭлементСпискаПериодов = ОтборСозданы[Индекс];
			Если ЭлементСпискаПериодов <> Период Тогда
				ЭлементСпискаПериодов.Пометка = Ложь;
			КонецЕсли;
			
			Если Индекс = 0 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыПроизвольныйПериод;
				Если НЕ ЭлементСпискаПериодов.Пометка Тогда
					ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
				КонецЕсли;
			ИначеЕсли Индекс = 1 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыСегодня;
			ИначеЕсли Индекс = 2 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗа3Дня;
			ИначеЕсли Индекс = 3 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаНеделю;
			ИначеЕсли Индекс = 4 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаМесяц;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭлементСпискаПериодов.Пометка Тогда
				Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
					ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
				КонецЕсли;
			Иначе
				ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
			КонецЕсли;
			
		КонецЦикла;
		
		CRM_ТегиКлиент.СформироватьЗаголовокВариантаОтбора(Элементы.ОтборПериод, 0);
		
	КонецЕсли;
	ПредставлениеПериода = ВариантПериода;  //КрайнийСрок
	ОбновитьОтборы();
	
	
КонецПроцедуры	

&НаСервере
Процедура ВключитьОтключитьГруппировкуПоКатегорииНаСервере()
	Если ТаблицаТекущие.Группировка.Элементы.Количество() = 0 Тогда
		ТаблицаТекущие.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("Категория");
	Иначе
		ТаблицаТекущие.Группировка.Элементы.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыФормы(Форма)
	Форма.Элементы.ГруппаАРМ.Видимость = (Форма.ВидАРМ = "Канбан");
	Форма.Элементы.ГруппаСписок.Видимость = НЕ Форма.Элементы.ГруппаАРМ.Видимость;
	//+вог
	Форма.Элементы.ОтборПринадлежность.Видимость = Форма.Элементы.ГруппаСписок.Видимость;
	//-вог
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектСтроки(СтрокаРС)
	Если СтрокаРС <> Неопределено Тогда
		Возврат СтрокаРС.Объект;
	КонецЕсли;	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ОбновитьТаблицы(ТолькоАктивнуюТаблицу = Ложь)
//START Кайдашов 05/11/19 6666	
	МассивТаблиц = Новый Массив;
	
	Если Не ТолькоАктивнуюТаблицу тогда
		МассивТаблиц.Добавить("ТаблицаОтложенные");
		МассивТаблиц.Добавить("ТаблицаТекущие");
		МассивТаблиц.Добавить("ТаблицаСписок");
	Иначе
		Если ОтборПринадлежность = "ВходящиеСогласования" тогда
			МассивТаблиц.Добавить("ТаблицаТекущие");
		Иначе
			МассивТаблиц.Добавить("ТаблицаОтложенные");
			МассивТаблиц.Добавить("ТаблицаТекущие");
			МассивТаблиц.Добавить("ТаблицаСписок");
		КонецЕсли;	
	КонецЕсли;
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		ЭлементыПользовательскихНастроек = ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
			Если ТипЗнч(Элемент) = ТипЗнч(ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.Настройки.Порядок) Тогда
				Элемент.Элементы.Очистить();
				// ++ VOG Солодов В.В. 26.06.2020 CRM-733
				Если ИмяТаблицы = "ТаблицаСписок" Тогда
					УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
					УсловиеСортировки.Поле 				= Новый ПолеКомпоновкиДанных("ЗадачаОтСобственника");
					УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
					УсловиеСортировки.Использование 	= Истина;
				КонецЕсли;
				// -- VOG Солодов В.В. 26.06.2020 CRM-733
				Если ОтборВключатьПросроченные <> -1 Тогда
					УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
					УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
					УсловиеСортировки.ТипУпорядочивания = ?(ОтборВключатьПросроченные = 1, НаправлениеСортировкиКомпоновкиДанных.Возр, НаправлениеСортировкиКомпоновкиДанных.Убыв);
					УсловиеСортировки.Использование = Истина;
				КонецЕсли;
				УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				УсловиеСортировки.Использование = Истина;
				УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
			КонецЕсли;    
		КонецЦикла;
	КонецЦикла;
	Если Не ТолькоАктивнуюТаблицу тогда
		МассивТаблиц.Добавить("ТаблицаВходящие");
		МассивТаблиц.Добавить("ТаблицаЗавершенные");
	КонецЕсли;
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл 
		Попытка
		Элементы[ИмяТаблицы].Обновить();
		Исключение
		КонецПопытки;
		Если Не ТолькоАктивнуюТаблицу тогда
			Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТолькоАктивнуюТаблицу тогда
		СформироватьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеНапоминаниями(Команда)
	//крытьФорму("ОбщаяФорма.CRM_ФормаНапоминаний");
	Оповестить("ОбновитьНапоминания");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаблицаВходящиеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	а=1;
КонецПроцедуры

// ++ VOG Солодов В.В. 23.06.2020 CRM-733
&НаСервере
Процедура УстановитьНастройкиСобственника()
	
	Собственник = вогОбщегоНазначенияКлиентСерверПовтИсп.ПользовательЯвляетсяСобственником(ТекущийПользователь);
	
	Если Собственник Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПоиск",
			"РастягиватьПоГоризонтали",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОтборПринадлежность",
			"ГоризонтальноеПоложениеВГруппе",
			ГоризонтальноеПоложениеЭлемента.Лево);
		
		Элементы.ОтборПринадлежность.СписокВыбора.Очистить();
		Элементы.ОтборПринадлежность.СписокВыбора.Добавить("Мои", "Мои");
		Элементы.ОтборПринадлежность.СписокВыбора.Добавить("ПорученоМной", "Исх. поручения");
		Элементы.ОтборПринадлежность.СписокВыбора.Добавить("Командировки", "Командировки");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПодключаемые",
			"Видимость",
			Ложь);
			
		// ++ VOG Солодов В.В. 17.07.2020 CRM-793
		// Закомментировал
		// До изменения
		//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		//	Элементы,
		//	"ТекущийПользователь",
		//	"ТолькоПросмотр",
		//	Истина);
		// -- VOG Солодов В.В. 17.07.2020 CRM-793
		
		Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаЕщеКП.ПодчиненныеЭлементы Цикл
			
			Если Не ПодчиненныйЭлемент.Имя = "Обновить" И Не ПодчиненныйЭлемент.Имя = "УправлениеНапоминаниями" Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					ПодчиненныйЭлемент.Имя,
					"Видимость",
					Ложь);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 23.06.2020 CRM-733

&НаСервереБезКонтекста
Процедура СписокСогласованияПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Строка Из Строки Цикл
		
		// ++ VOG Солодов В.В. 17.11.2020 CRM-1052
		Если Строка.Значение.Данные.Ссылка.БизнесПроцесс = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// -- VOG Солодов В.В. 17.11.2020 CRM-1052
		Предмет = Строка.Значение.Данные.Ссылка.БизнесПроцесс.Предмет;
		Если ТипЗнч(Предмет) = Тип("ДокументСсылка.вогКомандировка") Тогда
			Если Предмет.НаДоработкуОтГДУК Тогда
				ТекстЗаголовка = ". Возвращено на доработку  ГД УК";
			ИначеЕсли Предмет.ИзмененБюджет Тогда
				ТекстЗаголовка = ". Изменены расходы";
			ИначеЕсли Предмет.ИзмененПериод Тогда
				ТекстЗаголовка = ". Изменен период";
			ИначеЕсли Предмет.ИзмененСоставЗадач Тогда
				ТекстЗаголовка = ". Изменены задачи";
			Иначе
				ТекстЗаголовка = "";
			КонецЕсли;
			Строка.Значение.Данные.КартаМаршрута = Строка.Значение.Данные.КартаМаршрута.Наименование + ТекстЗаголовка;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 10.09.2020 CRM-875
&НаСервереБезКонтекста
Процедура КомандировкиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогКомандировка.Ссылка КАК Командировка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вогКомандировкаКомандированныеСотрудники.Сотрудник) КАК КоличествоСотрудников,
		|	ВЫБОР
		|		КОГДА вогКомандировкаКомандированныеСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)
		|			ТОГДА 3
		|		КОГДА вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.ПустаяСсылка)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.Создан)
		|							ИЛИ вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.ВРаботе)
		|							ИЛИ вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.НаСогласовании)
		|						ТОГДА 1
		|					КОГДА вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.Отменено)
		|							ИЛИ вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.НеСогласовано)
		|						ТОГДА 2
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОГДА вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано)
		|			ТОГДА 2
		|		КОГДА вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.Согласовано)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.Утверждено)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.ГотовоКПроверке)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.Проверено)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Статус,
		|	ВЫБОР
		|		КОГДА вогКомандировкаКомандированныеСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)
		|			ТОГДА 3
		|		КОГДА вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ПустаяСсылка)
		|				ИЛИ вогФинансированиеКомандировок.Финансирование ЕСТЬ NULL
		|				ИЛИ вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.Плановое)
		|			ТОГДА 2
		|		КОГДА вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ВБюджете)
		|				ИЛИ вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.БезЗатрат)
		|			ТОГДА 0
		|		КОГДА вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ВнеБюджета)
		|			ТОГДА 1
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Финансирование
		|ИЗ
		|	Документ.вогКомандировка КАК вогКомандировка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.вогКомандировка.КомандированныеСотрудники КАК вогКомандировкаКомандированныеСотрудники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
		|			ПО (вогЭтапыСогласованияКомандировок.Командировка = вогКомандировкаКомандированныеСотрудники.Ссылка)
		|				И (вогЭтапыСогласованияКомандировок.Сотрудник = вогКомандировкаКомандированныеСотрудники.Сотрудник)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогФинансированиеКомандировок КАК вогФинансированиеКомандировок
		|			ПО (вогФинансированиеКомандировок.Командировка = вогКомандировкаКомандированныеСотрудники.Ссылка)
		|				И (вогФинансированиеКомандировок.Сотрудник = вогКомандировкаКомандированныеСотрудники.Сотрудник)
		|		ПО (вогКомандировкаКомандированныеСотрудники.Ссылка = вогКомандировка.Ссылка)
		|ГДЕ
		|	вогКомандировка.Ссылка В(&СписокКомандировок)
		|
		|СГРУППИРОВАТЬ ПО
		|	вогКомандировка.Ссылка,
		|	ВЫБОР
		|		КОГДА вогКомандировкаКомандированныеСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)
		|			ТОГДА 3
		|		КОГДА вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.ПустаяСсылка)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.Создан)
		|							ИЛИ вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.ВРаботе)
		|							ИЛИ вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.НаСогласовании)
		|						ТОГДА 1
		|					КОГДА вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.Отменено)
		|							ИЛИ вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.НеСогласовано)
		|						ТОГДА 2
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОГДА вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано)
		|			ТОГДА 2
		|		КОГДА вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.Согласовано)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.Утверждено)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.ГотовоКПроверке)
		|				ИЛИ вогЭтапыСогласованияКомандировок.Этап = ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.Проверено)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА вогКомандировкаКомандированныеСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)
		|			ТОГДА 3
		|		КОГДА вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ПустаяСсылка)
		|				ИЛИ вогФинансированиеКомандировок.Финансирование ЕСТЬ NULL
		|				ИЛИ вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.Плановое)
		|			ТОГДА 2
		|		КОГДА вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ВБюджете)
		|				ИЛИ вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.БезЗатрат)
		|			ТОГДА 0
		|		КОГДА вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ВнеБюджета)
		|			ТОГДА 1
		|		ИНАЧЕ 3
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Статус,
		|	Финансирование
		|ИТОГИ ПО
		|	Командировка";
	
	Запрос.УстановитьПараметр("СписокКомандировок", Строки.ПолучитьКлючи());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКомандировка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКомандировка.Следующий() Цикл
	
		ВыборкаДетальныеЗаписи = ВыборкаКомандировка.Выбрать();
		
		Строка = Строки[ВыборкаКомандировка.Командировка];
		
		ИндексКолонки = 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Для Индекс = ИндексКолонки По ИндексКолонки + ВыборкаДетальныеЗаписи.КоличествоСотрудников - 1  Цикл
				Если Индекс > 4 Тогда
					Продолжить;
				КонецЕсли;
				Строка.Данные["Статус" + Индекс] = ВыборкаДетальныеЗаписи.Статус; 
				Строка.Данные["Финансирование" + Индекс] = ВыборкаДетальныеЗаписи.Финансирование; 
			КонецЦикла;
			
			ИндексКолонки = ИндексКолонки + ВыборкаДетальныеЗаписи.КоличествоСотрудников;
			
		КонецЦикла;
		
		Для Индекс = ИндексКолонки По 4 Цикл
			Строка.Данные["Статус" + Индекс] = 3;
			Строка.Данные["Финансирование" + Индекс] = 3; 
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

#КонецОбласти
