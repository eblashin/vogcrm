
&НаКлиенте
Перем КэшируемыеДанные, ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Идентификатор = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из формы поручения.'");
	КонецЕсли;
	
	Параметры.Свойство("НаправлениеДеятельности", НаправлениеДеятельности);
	
	Предметы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Предметы", Новый Массив);
	ЗаполнитьТаблицуПредметы(Предметы);
	
	ДоступныеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДоступныеНастройки");
	ЗаполнитьСписокВозможныхИсполнителей(Параметры.ДоступныеНастройки);
	
	Если Параметры.Свойство("АдресОтбораКомпоновки")
		И ЭтоАдресВременногоХранилища(Параметры.АдресОтбораКомпоновки) Тогда
		
		СтруктураЗаполнения = ПолучитьИзВременногоХранилища(Параметры.АдресОтбораКомпоновки);
		
		Если СтруктураЗаполнения.Свойство("СоответствиеОтборов") Тогда
			
			Для Каждого ЭлементСоответствия Из СтруктураЗаполнения.СоответствиеОтборов Цикл
				СтруктураОтбора = ЭлементСоответствия.Значение;
				Обработки.вогПодборИсполнителей.ДобавитьЭлементыОтбораРекурсивно(ЭтотОбъект, СтруктураОтбора, СтруктураОтбора.Настройка);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураЗаполнения.Свойство("МассивИсполнителей") Тогда
			Для Каждого Исполнитель Из СтруктураЗаполнения.МассивИсполнителей Цикл
				СтрокаТабличнойЧасти = ТаблицаТекущихИсполнителей.Добавить();
				СтрокаТабличнойЧасти.Исполнитель = Исполнитель;
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьСписокИсполнителейНаСервере();
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполняетсяЗакрытие = Ложь;
	УстановитьДоступностьКомандыРедактироватьОтбор();
	
	ЭлементыДерева = ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого ЭлементКорня Из ЭлементыДерева Цикл
		
		ИдентификаторЭлемента = ЭлементКорня.ПолучитьИдентификатор();
		Элементы.ДеревоОтборов.Развернуть(ИдентификаторЭлемента, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ВыполняетсяЗакрытие Или Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса 		= НСтр("ru = 'Список исполнителей изменен. Перенести в документ?'");
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ВыполняетсяЗакрытие = Истина;
		Закрыть(СформироватьСтруктуруВозврата());
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаВозможныхИсполнителей

&НаКлиенте
Процедура ТаблицаВозможныхИсполнителейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	ТекущиеДанные 	= Элементы.ТаблицаВозможныхИсполнителей.ТекущиеДанные;
	
	Если ЕстьОтборПоНастройке(ТекущиеДанные.Настройка) Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"ДобавитьПредопределенныйОтборВопросЗавершение",
			ЭтотОбъект,
			ТекущиеДанные.Настройка);
		
		ТекстВопроса = НСтр("ru = 'В список отборов уже добавлены строки с данным типом исполнителя.
		|Данные строки будут удалены. Продолжить?'");
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		ДобавитьПредопределенныйОтборЗавершение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДеревоОтборов

&НаКлиенте
Процедура ДеревоОтборовПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) Тогда
		ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриАктивизацииЯчейки(Элемент)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПриАктивизацииЯчейки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандыРедактироватьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПравоеЗначениеПодбор(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПравоеЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПравоеЗначениеПодбор(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПравоеЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПравоеЗначениеПодбор(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВидСравненияПриИзменении(Элемент)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовВидСравненияПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	
	ТекущиеДанные 	= Элементы.ДеревоОтборов.ТекущиеДанные;
	ДанныеВыбора 	= ТекущиеДанные.ДоступныеВидыСравнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные 		= Элементы.ДеревоОтборов.ТекущиеДанные;
	КэшируемыеДанные 	= ТекущиеДанные.ПолучитьРодителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПослеУдаления(Элемент)
	
	Если Не КэшируемыеДанные = Неопределено
		И (КэшируемыеДанные.ЭтоГруппа Или КэшируемыеДанные.ЭтоНастройка) Тогда
		
		УдалитьГруппуДереваРекурсивно(КэшируемыеДанные);
		
	КонецЕсли;
	
	ЭлементыДерева = ДеревоОтборов.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		
		ЗаполнитьСписокИсполнителейНаСервере();
		УстановитьДоступностьКомандыВыбрать();
		УстановитьДоступностьКомандыРедактироватьОтбор();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаИсполнителей

&НаКлиенте
Процедура СписокИсполнителейПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьДоступностьКомандыВыбрать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Предопределенные отборы
&НаКлиенте
Процедура ДобавитьПредопределенныйОтбор(Команда)
	
	ОчиститьСообщения();
	ТекущиеДанные = Элементы.ТаблицаВозможныхИсполнителей.ТекущиеДанные;
	
	Если ЕстьОтборПоНастройке(ТекущиеДанные.Настройка) Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"ДобавитьПредопределенныйОтборВопросЗавершение",
			ЭтотОбъект,
			ТекущиеДанные.Настройка);
		
		ТекстВопроса = НСтр("ru = 'В список отборов уже добавлены строки с данным типом исполнителя. 
		|Данные строки будут удалены. Продолжить?'");
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		ДобавитьПредопределенныйОтборЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредопределенныйОтборВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтрокиДерева(ДополнительныеПараметры, Ложь);
	ДобавитьПредопределенныйОтборЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредопределенныйОтборЗавершение()
	
	ТекущиеДанные 	= Элементы.ТаблицаВозможныхИсполнителей.ТекущиеДанные;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Настройка");
	СтруктураНастройки.Вставить("АдресСхемыКомпоновкиДанных");
	СтруктураНастройки.Вставить("АдресНастроекКомпоновкиДанных");
	
	ЗаполнитьЗначенияСвойств(СтруктураНастройки, ТекущиеДанные);
	
	ИдентификаторЭлемента = ДобавитьЭлементыПредопределенногоОтбора(СтруктураНастройки);
	
	Если Не ИдентификаторЭлемента = Неопределено Тогда
		Элементы.ДеревоОтборов.Развернуть(ИдентификаторЭлемента, Истина);
	КонецЕсли;
	
	УстановитьДоступностьКомандыРедактироватьОтбор();
	
КонецПроцедуры

// Расширенные отборы
&НаКлиенте
Процедура РедактироватьОтбор(Команда)
	
	СтрокаНастройки = Неопределено;
	
	Если ДеревоОтборов.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ТекущиеДанные = Элементы.ДеревоОтборов.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Настройка", ТекущиеДанные.Настройка);
			
			СтрокиНастроек = ТаблицаВозможныхИсполнителей.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Если СтрокиНастроек.Количество() > 0 Тогда
				СтрокаНастройки = СтрокиНастроек[0];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаНастройки = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно добавить отбор по текущей настройке.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСКДВоВременномХранилище", 	СтрокаНастройки.АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ВозвращатьСтруктуруСДанными", 		Истина);
	
	ПодготовитьОтборКомпоновкиДляРедактирования(СтрокаНастройки.Настройка, ПараметрыФормы);
	ОповещениеОЗавершении 	= Новый ОписаниеОповещения("РедактироватьОтборЗавершение", ЭтотОбъект, СтрокаНастройки.Настройка);
	
	ОткрытьФорму(
		"ОбщаяФорма.CRM_ОтборКомпоновкиДанных",
		ПараметрыФормы,
		,
		,
		,
		,
		ОповещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтрокиДерева(ДополнительныеПараметры, Истина);
	ИдентификаторЭлемента = РедактироватьОтборЗавершениеНаСервере(Результат.Отбор, ДополнительныеПараметры);
	
	Если Не ИдентификаторЭлемента = Неопределено Тогда
		Элементы.ДеревоОтборов.Развернуть(ИдентификаторЭлемента, Истина);
	КонецЕсли;
	
	УстановитьДоступностьКомандыРедактироватьОтбор();
	
КонецПроцедуры

&НаСервере
Функция РедактироватьОтборЗавершениеНаСервере(Отбор, ДополнительныеПараметры)
	
	Возврат Обработки.вогПодборИсполнителей.ДобавитьЭлементыОтбораРекурсивно(ЭтотОбъект, Отбор, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокИсполнителей(Команда)
	
	ЗаполнитьСписокИсполнителейНаСервере();
	УстановитьДоступностьКомандыВыбрать();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыполняетсяЗакрытие = Истина;
	Закрыть(СформироватьСтруктуруВозврата());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Поле Правое значение
	
	СписокВидовСравнений = Новый СписокЗначений;
	СписокВидовСравнений.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
	СписокВидовСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПравоеЗначение.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ВидСравнения");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= СписокВидовСравнений;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПравоеЗначение.Имя);
	
	ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поле Левое значение
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовЛевоеЗначение.Имя);
	
	ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поле Вид сравнения
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовВидСравнения.Имя);
	
	ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поле Тип группы
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовТипГруппы.Имя);
	
	ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Ложь;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поле Настройка
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовНастройка.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовНастройка.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ДымчатоБелый);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыВыбрать()
	
	МассивИсполнителей = Новый Массив;
	
	Для Каждого СтрокаСписка Из СписокИсполнителей Цикл
		Если СтрокаСписка.Пометка Тогда
			МассивИсполнителей.Добавить(СтрокаСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Выбрать",
		"Доступность",
		МассивИсполнителей.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандыРедактироватьОтбор()
	
	ДоступностьКнопки = (Элементы.ДеревоОтборов.ВыделенныеСтроки.Количество() > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РедактироватьОтбор",
		"Доступность",
		ДоступностьКнопки);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(АдресСхемыКомпоновкиДанных, АдресНастроекКомпоновкиДанных)
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	Если ЭтоАдресВременногоХранилища(АдресНастроекКомпоновкиДанных) Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
	Иначе
		НастройкиКомпоновкиДанных = АдресНастроекКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементыПредопределенногоОтбора(СтруктураНастройки)
	
	ИнициализироватьКомпоновщикНастроек(
		СтруктураНастройки.АдресСхемыКомпоновкиДанных, СтруктураНастройки.АдресНастроекКомпоновкиДанных);
	
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет доступных полей отбора для данной настройки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИдентификаторЭлемента = Обработки.вогПодборИсполнителей.ДобавитьЭлементыОтбораРекурсивно(
		ЭтотОбъект,
		КомпоновщикНастроек.Настройки.Отбор,
		СтруктураНастройки.Настройка,
		,
		КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
	
	Возврат ИдентификаторЭлемента;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруВозврата()
	
	МассивИсполнителей = Новый Массив;
	
	Для Каждого СтрокаСписка Из СписокИсполнителей Цикл
		Если СтрокаСписка.Пометка Тогда
			МассивИсполнителей.Добавить(СтрокаСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивИсполнителей", МассивИсполнителей);
	
	ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
	
	СоответствиеОтборов 	= Новый Соответствие;
	
	Для Каждого СтрокаЭлемента Из ЭлементыКорня Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Настройка", 		СтрокаЭлемента.Настройка);
		СтруктураДанных.Вставить("Использование", 	СтрокаЭлемента.Использование);
		
		ПодготовитьОтборКомпоновкиДляРедактирования(СтрокаЭлемента.Настройка, СтруктураДанных);
		
		СоответствиеОтборов.Вставить(Новый УникальныйИдентификатор, СтруктураДанных);
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("СоответствиеОтборов", СоответствиеОтборов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ПодготовитьОтборКомпоновкиДляРедактирования(Настройка, СтруктураДанных)
	
	ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
	
	Если ЭлементыКорня.Количество() > 0 Тогда
		
		ОтборКомпоновкиДанных 	= Новый ОтборКомпоновкиДанных;
		
		ПараметрыЗаполненияОтбора = Новый Структура;
		ПараметрыЗаполненияОтбора.Вставить("Настройка", Настройка);
		
		ЗаполнитьОтборКомпоновкиРекурсивно(ДеревоОтборов, ОтборКомпоновкиДанных, ПараметрыЗаполненияОтбора);
		
		СтруктураДанных.Вставить("ОтборКомпоновкиДанных", ОтборКомпоновкиДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборКомпоновкиРекурсивно(Знач ЭлементДерева, ОтборКомпоновкиДанных, ПараметрыЗаполнения)
	
	ТолькоИспользуемые 	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "ТолькоИспользуемые", Ложь);
	Настройка 			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "Настройка");
	
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого СтрокаЭлемента Из ЭлементыДерева Цикл
		
		Если Не СтрокаЭлемента.Настройка = Настройка
			Или (ТолькоИспользуемые И Не СтрокаЭлемента.Использование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаЭлемента.ЭтоГруппа Тогда
			ЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ИначеЕсли СтрокаЭлемента.ЭтоНастройка Тогда
			ЭлементОтбора = ОтборКомпоновкиДанных;
		Иначе
			ЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, СтрокаЭлемента);
		
		Если СтрокаЭлемента.ЭтоГруппа Или СтрокаЭлемента.ЭтоНастройка Тогда
			ЗаполнитьОтборКомпоновкиРекурсивно(СтрокаЭлемента, ЭлементОтбора, ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДоступныеПоляОтбора(Форма, ДоступныеПоляОтбора, Настройка)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Настройка", Настройка);
	
	СтрокиНастроек = Форма.ТаблицаВозможныхИсполнителей.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если СтрокиНастроек.Количество() > 0 Тогда
		
		СтрокаДанных = СтрокиНастроек[0];
		
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(
			СтрокаДанных.АдресСхемыКомпоновкиДанных);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
		
		ДоступныеПоляОтбора = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЕстьОтборПоНастройке(Настройка)
	
	ЭлементыДерева = ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого СтрокаЭлемента Из ЭлементыДерева Цикл
		
		Если СтрокаЭлемента.Настройка = Настройка Тогда
			//И Не СтрокаЭлемента.РасширенныйОтбор Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПропуститьПоле(Поле)
	
	// Пропускаем системные поля
	Если Лев(Строка(Поле), 13) = "СистемныеПоля" 
		Или Лев(Строка(Поле), 12) = "SystemFields" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Пропускаем параметры
	Если Лев(Строка(Поле), 15) = "ПараметрыДанных" 
		Или Лев(Строка(Поле), 14) = "DataParameters" Тогда 
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область МетодыРаботыСДеревомОтборов

&НаКлиенте
Функция ПолучитьГруппуДереваРекурсивно(Знач ЭлементДерева, ИскомаяГруппа)
	
	ГруппаДерева = Неопределено;
	
	ЭлементыДерева 	= ЭлементДерева.ПолучитьЭлементы();
	ИндексГруппы 	= ЭлементыДерева.Индекс(ИскомаяГруппа);
	
	Если ИндексГруппы >= 0 Тогда
		
		ГруппаДерева = ЭлементыДерева.Получить(ИндексГруппы);
		
	Иначе
		
		Для Каждого ПодчиненныйЭлементДерева Из ЭлементыДерева Цикл
			ГруппаДерева = ПолучитьГруппуДереваРекурсивно(ПодчиненныйЭлементДерева, ИскомаяГруппа);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ГруппаДерева;
	
КонецФункции

&НаКлиенте
Процедура УдалитьГруппуДереваРекурсивно(УдаляемаяГруппа)
	
	ГруппаДерева = ПолучитьГруппуДереваРекурсивно(ДеревоОтборов, УдаляемаяГруппа);
	
	Если Не ГруппаДерева = Неопределено
		И ГруппаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		
		РодительГруппы = ГруппаДерева.ПолучитьРодителя();
		
		Если РодительГруппы = Неопределено Тогда
			
			ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
			
		Иначе
			
			ЭлементыКорня = РодительГруппы.ПолучитьЭлементы();
			
		КонецЕсли;
		
		ИндексГруппы = ЭлементыКорня.Индекс(ГруппаДерева);
		ЭлементыКорня.Удалить(ИндексГруппы);
		
		Если Не РодительГруппы = Неопределено Тогда
			УдалитьГруппуДереваРекурсивно(РодительГруппы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиДерева(Настройка, РасширенныйОтбор)
	
	МассивУдаляемыхСтрок 	= Новый Массив;
	ЭлементыДерева 			= ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого СтрокаЭлемента Из ЭлементыДерева Цикл
		
		Если СтрокаЭлемента.Настройка = Настройка Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаЭлемента Из МассивУдаляемыхСтрок Цикл
		ИндексЭлемента = ЭлементыДерева.Индекс(СтрокаЭлемента);
		ЭлементыДерева.Удалить(ИндексЭлемента);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДеревоОтборовВидСравненияПриИзмененииНаСервере(СтруктураСтроки)
	
	Обработки.вогПодборИсполнителей.ДеревоОтборовВидСравненияПриИзменении(СтруктураСтроки);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСписокВозможныхИсполнителей(ДоступныеНастройки = Неопределено)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.Ссылка КАК Ссылка,
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных
		|ИЗ
		|	Справочник.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач КАК вогНастройкиДоступныхПолейОтбораИсполнителейЗадач
		|ГДЕ
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ПометкаУдаления = ЛОЖЬ
		|	И вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.Ссылка В(&ДоступныеНастройки)";
	
	Если ДоступныеНастройки = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"И вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.Ссылка В(&ДоступныеНастройки)",
			"");
		
	Иначе
		Запрос.УстановитьПараметр("ДоступныеНастройки", ДоступныеНастройки);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВидыИсполнителей = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаВидыИсполнителей.Следующий() Цикл
		
		НастройкаСсылка = ВыборкаВидыИсполнителей.Ссылка;
		ИмяМакета 		= ВыборкаВидыИсполнителей.СхемаКомпоновкиДанных;
		
		Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
			
			СхемаКомпоновкиДанных 	= ВыборкаВидыИсполнителей.ХранилищеСхемыКомпоновкиДанных.Получить();
			
		Иначе
			
			Макет = Метаданные.НайтиПоТипу(ТипЗнч(НастройкаСсылка)).Макеты.Найти(ИмяМакета);
			
			Если Макет = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СхемаКомпоновкиДанных 	= Справочники.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ПолучитьМакет(ИмяМакета);
			
		КонецЕсли;
		
		НастройкиКомпоновкиДанных 	= ВыборкаВидыИсполнителей.ХранилищеНастроекКомпоновкиДанных.Получить();
		
		Если НастройкиКомпоновкиДанных.Отбор.Элементы.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ТаблицаВозможныхИсполнителей.Добавить();
		СтрокаТабличнойЧасти.Настройка 						= ВыборкаВидыИсполнителей.Ссылка;
		
		СтрокаТабличнойЧасти.АдресСхемыКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(
			СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		СтрокаТабличнойЧасти.АдресНастроекКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(
			НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИсполнителейНаСервере()
	
	ОтмечатьТекущих = (ТаблицаТекущихИсполнителей.Количество() > 0);
	
	СписокИсполнителей.Очистить();
	
	МассивИсполнителей 	= Новый Массив;
	МассивНастроек 		= Новый Массив;
	ЭлементыДерева 		= ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого СтрокаЭлемента Из ЭлементыДерева Цикл
		
		Если Не СтрокаЭлемента.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНастроек.Добавить(СтрокаЭлемента.Настройка);
		
	КонецЦикла;
	
	МассивНастроек = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНастроек);
	
	Для Каждого Настройка Из МассивНастроек Цикл
		
		ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "СхемаКомпоновкиДанных");
		
		СхемаИНастройки = Справочники.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
			Настройка, ИмяМакета);
		
		СхемаКомпоновкиДанных 	= СхемаИНастройки.СхемаКомпоновкиДанных;
		НастройкиСКД 			= СхемаИНастройки.НастройкиКомпоновкиДанных;
		
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		ИнициализироватьКомпоновщикНастроек(АдресСхемыКомпоновкиДанных, НастройкиСКД);
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
		НастройкиКомпоновкиДанных = КомпоновщикНастроек.Настройки;
		
		// Параметры
		ДоступныеПараметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы;
		
		УстанавливаемыеПараметры = Новый Соответствие;
		Если Не ДоступныеПараметры.Найти("Предметы") = Неопределено Тогда
			МассивПредметы = ТаблицаПредметы.Выгрузить().ВыгрузитьКолонку("Предмет");
			УстанавливаемыеПараметры.Вставить("Предметы", МассивПредметы);
		КонецЕсли;
		Если ЗначениеЗаполнено(НаправлениеДеятельности)
			И Не ДоступныеПараметры.Найти("НаправлениеДеятельности") = Неопределено Тогда
			УстанавливаемыеПараметры.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
		КонецЕсли;
		Если Не ДоступныеПараметры.Найти("вогПодчиненныеСотрудники") = Неопределено Тогда
			УстанавливаемыеПараметры.Вставить(
				"вогПодчиненныеСотрудники", вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников());
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(КомпоновщикНастроек, УстанавливаемыеПараметры);
		//
		
		ДетальнаяГруппировка = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ДетальнаяГруппировка.Использование = Истина;
		
		ВыбранноеАвтоПоле = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеАвтоПоле.Использование = Истина;
		
		ИмяКолонки = "";
		
		Для Каждого ВыбранноеПоле Из НастройкиКомпоновкиДанных.Выбор.Элементы Цикл
			
			Если ПропуститьПоле(ВыбранноеПоле.Поле) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = Строка(ВыбранноеПоле.Поле);
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИмяКолонки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
		
		Если ЭлементыКорня.Количество() > 0 Тогда
			
			ПараметрыЗаполненияОтбора = Новый Структура;
			ПараметрыЗаполненияОтбора.Вставить("Настройка", 			Настройка);
			ПараметрыЗаполненияОтбора.Вставить("ТолькоИспользуемые", 	Истина);
			
			НастройкиКомпоновкиДанных.Отбор.Элементы.Очистить();
			
			ЗаполнитьОтборКомпоновкиРекурсивно(ДеревоОтборов, НастройкиКомпоновкиДанных.Отбор, ПараметрыЗаполненияОтбора);
			
		КонецЕсли;
		
		вогБизнесПроцессыИЗадачиСервер.ДополнитьОтборКомпоновкиНаправлениемДеятельности(
			НастройкиКомпоновкиДанных.Отбор, НаправлениеДеятельности);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
			СхемаКомпоновкиДанных,
			НастройкиКомпоновкиДанных,
			,
			,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсполнителей, ТаблицаРезультат.ВыгрузитьКолонку(ИмяКолонки));
		
	КонецЦикла;
	
	МассивИсполнителей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИсполнителей);
	
	Для Каждого Исполнитель Из МассивИсполнителей Цикл
		
		Если ОтмечатьТекущих Тогда
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Исполнитель", Исполнитель);
			
			СтрокиИсполнителей = ТаблицаТекущихИсполнителей.НайтиСтроки(ПараметрыОтбораСтрок);
			Пометка = (СтрокиИсполнителей.Количество() > 0);
			
		Иначе
			Пометка = Истина;
		КонецЕсли;
		
		СписокИсполнителей.Добавить(Исполнитель,, Пометка);
		
	КонецЦикла;
	
	УстановитьДоступностьКомандыВыбрать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПредметы(Предметы)
	
	Для Каждого Предмет Из Предметы Цикл
		
		СтрокаТабличнойЧасти = ТаблицаПредметы.Добавить();
		СтрокаТабличнойЧасти.Предмет = Предмет;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
