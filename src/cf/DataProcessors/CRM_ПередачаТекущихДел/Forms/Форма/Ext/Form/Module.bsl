&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.СотрудникИсточник = ПараметрыСеанса.ТекущийПользователь;
	
	// Заполним список выбора периода.
	ПериодСписокВыбора = CRM_ОбщегоНазначенияПовтИсп.ПериодПолучитьСписокВыбора();
	
	Для каждого ЭлементСписка Из ПериодСписокВыбора Цикл
		Элементы.ПолеБыстрогоОтбора_Период.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	ПолеБыстрогоОтбора_Период = "НеВыбран";
	
	ЕстьРольПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава");
	ЕстьРольCRM_ПередачаДелОтветственному = Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному");
	
	Элементы.СотрудникИсточник.ТолькоПросмотр = НЕ (ЕстьРольCRM_ПередачаДелОтветственному ИЛИ ЕстьРольПолныеПрава);
	Элементы.ФлагДобавлятьУровеньДоступа.Видимость = ЕстьРольCRM_ПередачаДелОтветственному ИЛИ ЕстьРольПолныеПрава;
	
	СписокТипов = Новый Массив;
	КлючиСтруктуры = "ПолноеИмя,РеквизитПартнер,РеквизитОписание,РеквизитВажность,РеквизитОтветственный";
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Справочник.МаркетинговыеМероприятия"		,""						,""			,"CRM_Важность"	,"Ответственный"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.CRM_РассылкаЭлектронныхПисем"	,""						,""			,"Важность"		,"Ответственный"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.CRM_Интерес"						,"Партнер"				,"Описание"	,""				,"Ответственный"));
	Если Метаданные.Имя = "CRM" Тогда
		
		СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.CRM_СчетНаОплатуПокупателю"		,"Партнер"				,""			,"Важность"		,"Ответственный"));
		
	КонецЕсли; 
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.CRM_Телемаркетинг"				,""						,""			,"Важность"		,"Ответственный"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.СообщениеSMS"					,""						,""			,"Важность"		,"Ответственный"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.ЭлектронноеПисьмоВходящее"		,"ОтправительКонтакт"	,""			,"Важность"		,"Ответственный"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.ЭлектронноеПисьмоИсходящее"		,""						,""			,"Важность"		,"Ответственный"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Задача.ЗадачаИсполнителя"					,"CRM_Партнер"			,"Описание"	,"Важность"		,"Исполнитель"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "БизнесПроцесс.CRM_БизнесПроцесс"			,"Партнер"				,"Описание"	,"Важность"		,"Ответственный"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.КоммерческоеПредложениеКлиенту"	,"Партнер"				,""			,""		,"Менеджер"));
	СписокТипов.Добавить(Новый Структура(КлючиСтруктуры, "Документ.ТелефонныйЗвонок"	,""				,"Описание"			,"Важность"		,"Ответственный"));
	
	Для каждого Элемент Из СписокТипов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Элемент.ПолноеИмя);
		ЕстьПравоИзменения = ЕстьРольПолныеПрава ИЛИ ПравоДоступа("Изменение",ОбъектМетаданных);
		НоваяСтрока = СписокТиповОбъектов.Добавить();
		НоваяСтрока.Представление = ОбъектМетаданных.Представление();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Доступность = ЕстьРольCRM_ПередачаДелОтветственному ИЛИ ЕстьПравоИзменения;
		НоваяСтрока.Пометка = НоваяСтрока.Доступность;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыделитьВсе(Команда)
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтбор Тогда
		Для Каждого Строка Из СписокТиповОбъектов Цикл
			Если Строка.Доступность Тогда
				Строка.Пометка = Истина;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Список Цикл
			Строка.Пометка = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСнятьВыделение(Команда)
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтбор Тогда
		Для Каждого Строка Из СписокТиповОбъектов Цикл
			Если Строка.Доступность Тогда
				Строка.Пометка = Ложь;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		Для Каждого Строка Из Список Цикл
			Строка.Пометка = Ложь;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьМастер(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗакрытьМастерЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Завершить работу с мастером?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьМастерЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтбор Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СотрудникПолучатель) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Введите нового ответственного.'"));
			Возврат;
		КонецЕсли;
		Если Объект.СотрудникИсточник = Объект.СотрудникПолучатель Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Новый ответственный должен отличаться от старого!'"));
			Возврат;
		КонецЕсли;
		
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
		Элементы.КомандаНазад.Доступность = Истина;
		//Элементы.СотрудникПолучатель.ТолькоПросмотр = Истина;
		//Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		//Элементы.ДатаКонца.ТолькоПросмотр = Истина;
		//Элементы.КомандаВыборПериода.Доступность = Ложь;
		Элементы.КомандаДалее.Заголовок = НСтр("ru = 'Выполнить'");
		
		ОбработкаОтбор();
	ИначеЕсли Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка Тогда
		ОбработкаВыполнить();
		ПоказатьПредупреждение(, НСтр("ru = 'Выполнение обработки завершено.'"), 60, НСтр("ru = 'Передача текущих дел'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка Тогда
		Список.Очистить();
		
		Элементы.ПанельСтраницы.ТекущаяСтраница = Элементы.СтраницаОтбор;
		Элементы.КомандаНазад.Доступность = Ложь;
		//Элементы.СотрудникПолучатель.ТолькоПросмотр = Ложь;
		//Элементы.ДатаНачала.ТолькоПросмотр = Ложь;
		//Элементы.ДатаКонца.ТолькоПросмотр = Ложь;
		//Элементы.КомандаВыборПериода.Доступность = Истина;
		Элементы.КомандаДалее.Заголовок = НСтр("ru = 'Далее'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОтбор()
	
	ЕстьРольПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава");
	ЕстьРольCRM_ПередачаДелОтветственному = Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному");
	
	ТекстЗапроса = "";
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	Объект.Ссылка КАК ОбъектСсылка,
	|	ПРЕДСТАВЛЕНИЕ(Объект.Ссылка) КАК ОбъектПредставление,
	|	Объект.Партнер КАК ПартнерСсылка,
	|	ПРЕДСТАВЛЕНИЕ(Объект.Партнер) КАК ПартнерПредставление,
	|	//ТипОбъекта
	|	//Описание
	|	//ВажностьИндексКартинки
	|	//СостояниеСобытияИндексКартинки
	|	//ВидОбъектаИндексКартинки
	|	//Срок
	|	Объект.Дата КАК Дата
	|ИЗ
	|	[ОбъектВыборки] КАК Объект
	|ГДЕ
	|	Объект.Дата МЕЖДУ &Дата1 И &Дата2
	|	И Объект.Ответственный = &Ответственный
	|	И НЕ Объект.ПометкаУдаления
	|	//Отбор
	|";
	ТекстОбъединенияЗапросов = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТребуетсяКорректировкаИсполнителей = Ложь;
	ИменаОбъектов = Новый Массив;
	Для Каждого Строка Из СписокТиповОбъектов Цикл
		Если НЕ Строка.Пометка Тогда Продолжить; КонецЕсли;
		ПолноеИмяОбъекта	= Строка.ПолноеИмя;
		ВидОбъекта			= Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1);
		
		Текст = ШаблонЗапроса;
		Текст = СтрЗаменить(Текст, "[ОбъектВыборки]", ПолноеИмяОбъекта);
		Текст = СтрЗаменить(Текст, "//ТипОбъекта", """" + Строка.Представление + """ КАК ТипОбъекта,");
		Текст = СтрЗаменить(Текст, "//Описание", ?(Строка.РеквизитОписание = "", """""", "Объект." + Строка.РеквизитОписание) + " КАК Описание,");
		
		// Отбор по дате
		Если ПолеБыстрогоОтбора_Период = "НеВыбран" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата МЕЖДУ &Дата1 И &Дата2", "Истина");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.CRM_Телемаркетинг" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата МЕЖДУ &Дата1 И &Дата2", "Объект.ДатаНачала МЕЖДУ &Дата1 И &Дата2");
		ИначеЕсли ПолноеИмяОбъекта = "Справочник.МаркетинговыеМероприятия" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата МЕЖДУ &Дата1 И &Дата2", "Объект.ДатаНачала МЕЖДУ &Дата1 И &Дата2");
		ИначеЕсли ВидОбъекта = "Задача" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата МЕЖДУ &Дата1 И &Дата2", "Объект.СрокИсполнения МЕЖДУ &Дата1 И &Дата2");
		ИначеЕсли ВидОбъекта = "Справочник" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата МЕЖДУ &Дата1 И &Дата2", "Истина");
		КонецЕсли;
		
		// Дата
		Если ПолноеИмяОбъекта = "Справочник.МаркетинговыеМероприятия" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата КАК ", "Объект.ДатаНачала КАК ");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.удалитьCRM_Сделка" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата КАК ", "Объект.ДатаСтарта КАК ");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.CRM_Телемаркетинг" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата КАК ", "Объект.ДатаНачала КАК ");
		ИначеЕсли ВидОбъекта = "Справочник" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Дата КАК ", "null КАК ");
		КонецЕсли;
		
		Если Строка.РеквизитОтветственный <> "Ответственный" Тогда
			Текст = СтрЗаменить(Текст, "Объект.Ответственный", "Объект."+Строка.РеквизитОтветственный);
		КонецЕсли;
		
		Если Строка.РеквизитПартнер <> "" Тогда
			Если Строка.РеквизитПартнер <> "Партнер" Тогда
				Текст = СтрЗаменить(Текст, "Объект.Партнер", "Объект."+Строка.РеквизитПартнер);
			КонецЕсли;
		Иначе
			Текст = СтрЗаменить(Текст, "ПРЕДСТАВЛЕНИЕ(Объект.Партнер) КАК", """"" КАК");
			Текст = СтрЗаменить(Текст, "Объект.Партнер КАК", "null КАК");
		КонецЕсли;
		
		Если Строка.РеквизитВажность <> "" Тогда
			Текст = СтрЗаменить(Текст, "//ВажностьИндексКартинки", 
			"ВЫБОР
			|	КОГДА Объект.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Низкая)
			|		ТОГДА 0
			|	КОГДА Объект.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|		ТОГДА 0
			|	КОГДА Объект.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Высокая)
			|		ТОГДА 2
			|	КОГДА Объект.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|		ТОГДА 2
			|	ИНАЧЕ 1
			|КОНЕЦ КАК ВажностьИндексКартинки,");
			Если Строка.РеквизитВажность <> "Важность" Тогда
				Текст = СтрЗаменить(Текст, "Объект.Важность", "Объект."+Строка.РеквизитВажность);
			КонецЕсли;
		Иначе
			Текст = СтрЗаменить(Текст, "//ВажностьИндексКартинки", "1 КАК ВажностьИндексКартинки,");
		КонецЕсли;
		
		Текст = СтрЗаменить(Текст, "//СостояниеСобытияИндексКартинки", 
		"0 КАК СостояниеСобытияИндексКартинки,");
		
		Если ПолноеИмяОбъекта = "Документ.ЭлектронноеПисьмоВходящее" Тогда
			Текст = СтрЗаменить(Текст, "//ВидОбъектаИндексКартинки", "5 КАК ВидОбъектаИндексКартинки,");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.ЭлектронноеПисьмоИсходящее" Тогда
			Текст = СтрЗаменить(Текст, "//ВидОбъектаИндексКартинки", "6 КАК ВидОбъектаИндексКартинки,");
		Иначе
			Текст = СтрЗаменить(Текст, "//ВидОбъектаИндексКартинки", "0 КАК ВидОбъектаИндексКартинки,");
		КонецЕсли;
		
		// Срок
		Если ПолноеИмяОбъекта = "Справочник.МаркетинговыеМероприятия" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "Объект.ДатаОкончания КАК Срок,");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.удалитьCRM_Сделка" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "Объект.ДатаЗавершения КАК Срок,");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.удалитьCRM_Сделка" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "Объект.ПланируемаяДатаЗавершения КАК Срок,");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.CRM_Событие" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "Объект.ОкончаниеСобытия КАК Срок,");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.CRM_Телемаркетинг" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "Объект.ДатаОкончания КАК Срок,");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.СообщениеSMS" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "Объект.ДатаАктуальностиОтправки КАК Срок,");
		ИначеЕсли ВидОбъекта = "БизнесПроцесс" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "Объект.ПланируемаяДатаЗавершения КАК Срок,");
		ИначеЕсли ВидОбъекта = "Задача" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "Объект.СрокИсполнения КАК Срок,");
		ИначеЕсли ВидОбъекта = "Справочник" Тогда
			Текст = СтрЗаменить(Текст, "//Срок", "null КАК Срок,");
		Иначе
			Текст = СтрЗаменить(Текст, "//Срок", "null КАК Срок,");
		КонецЕсли;
		
		// Отбор
		Если ПолноеИмяОбъекта = "Справочник.МаркетинговыеМероприятия" Тогда
			Текст = СтрЗаменить(Текст, "//Отбор", "И НЕ Объект.Завершено");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.удалитьCRM_Сделка" Тогда
			Текст = СтрЗаменить(Текст, "//Отбор", "И Объект.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.ВРаботе)");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.CRM_Событие" Тогда
			Текст = СтрЗаменить(Текст, "//Отбор", "И НЕ Объект.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Завершено) И НЕ Объект.СостояниеСобытия.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Отменено)");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.CRM_Телемаркетинг" Тогда
			Текст = СтрЗаменить(Текст, "//Отбор", "И НЕ Объект.Завершен");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.ЭлектронноеПисьмоВходящее" Тогда
			Текст = СтрЗаменить(Текст, "//Отбор", "И НЕ Объект.Удалить_Рассмотрено");
		ИначеЕсли ПолноеИмяОбъекта = "Документ.ЭлектронноеПисьмоИсходящее" Тогда
			Текст = СтрЗаменить(Текст, "//Отбор", "И НЕ Объект.Удалить_Рассмотрено");
		ИначеЕсли ВидОбъекта = "БизнесПроцесс" Тогда
			Текст = СтрЗаменить(Текст, "//Отбор", "И НЕ Объект.Завершен И НЕ Объект.ЗавершенДосрочно");
		ИначеЕсли ВидОбъекта = "Задача" Тогда
			ТребуетсяКорректировкаИсполнителей = Истина;
			Текст = СтрЗаменить(Текст, "//Отбор", "И НЕ Объект.Выполнена И НЕ Объект.CRM_Личная");
		Иначе
			Текст = СтрЗаменить(Текст, "//Отбор", "");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", ТекстОбъединенияЗапросов) + Текст;
	КонецЦикла;
	
	Если НЕ ЕстьРольCRM_ПередачаДелОтветственному Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса)-СтрДлина("ВЫБРАТЬ"));
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "УПОРЯДОЧИТЬ ПО Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата1", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", КонецДня(?(НЕ ЗначениеЗаполнено(Объект.ДатаКонца), CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), Объект.ДатаКонца)));
	Запрос.УстановитьПараметр("Ответственный", Объект.СотрудникИсточник);
	
	Если ЕстьРольCRM_ПередачаДелОтветственному И НЕ ЕстьРольПолныеПрава Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Строка = Список.Добавить();
		Строка.Пометка = Истина;
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		Строка.Объект = ?(Строка(Строка.ОбъектСсылка) = Выборка.ОбъектПредставление, Строка.ОбъектСсылка, "");
		Строка.Партнер = ?(Строка(Строка.ПартнерСсылка) = Выборка.ПартнерПредставление, Строка.ПартнерСсылка, Выборка.ПартнерПредставление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоискПартнеровВМетаданныхОбъекта(ПолноеИмяОбъекта, РеквизитыПартнеры = Неопределено)
	
	Если РеквизитыПартнеры = Неопределено Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		ТипПартнерСсылка = Тип("СправочникСсылка.Партнеры");
		
		ДанныеЭлемента = Новый Структура("Реквизиты, ТабличныеЧасти");
		Данные = Новый Массив;
		Для каждого МетаРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
			Если МетаРеквизит.Тип.СодержитТип(ТипПартнерСсылка) Тогда
				Данные.Добавить(МетаРеквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		ДанныеЭлемента.Реквизиты = Данные;
		
		ДанныеТЧ = Новый Соответствие;
		Для каждого МетаТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Данные = Новый Массив;
			Для каждого МетаРеквизит Из МетаТабличнаяЧасть.Реквизиты Цикл
				Если МетаРеквизит.Тип.СодержитТип(ТипПартнерСсылка) Тогда
					Данные.Добавить(МетаРеквизит.Имя);
				КонецЕсли;
			КонецЦикла;
			Если Данные.Количество() > 0 Тогда
				ДанныеТЧ.Вставить(МетаТабличнаяЧасть.Имя, Данные);
			КонецЕсли;
		КонецЦикла;
		ДанныеЭлемента.ТабличныеЧасти = ДанныеТЧ;
		
		Возврат ДанныеЭлемента;
	Иначе
		Возврат РеквизитыПартнеры[ПолноеИмяОбъекта];
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоискПартнеровВМетаданныхОбъектов(СписокТиповОбъектов)
	
	Результат = Новый Соответствие;
	Для каждого Элемент Из СписокТиповОбъектов Цикл
		ПолноеИмяОбъекта = Элемент.Метаданные().ПолноеИмя();
		Если Результат.Получить(ПолноеИмяОбъекта) = Неопределено Тогда
			Результат.Вставить(ПолноеИмяОбъекта, ПоискПартнеровВМетаданныхОбъекта(ПолноеИмяОбъекта));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПеренаправитьОтветственному(ОбъектСсылка, НовыйОтветственный, ДобавитьУровеньДоступа = Ложь, РеквизитыПартнеры = Неопределено)
	
	ЕстьРольПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава");
	ЕстьРольCRM_ПередачаДелОтветственному = Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному");
	ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
	
	Результат = "";
	
	Если ЕстьРольCRM_ПередачаДелОтветственному И НЕ ЕстьРольПолныеПрава Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	Если Результат = "" Тогда
		НачатьТранзакцию();
		Попытка
			ТекОбъект = ОбъектСсылка.ПолучитьОбъект();
			ТекОбъект.Заблокировать();
		Исключение
			Результат = "НеПолучен";
		КонецПопытки;
	КонецЕсли;
		
	Если Результат = "" Тогда
		ТипОбъекта = ТипЗнч(ОбъектСсылка);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
			Если ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) Тогда
					ТекОбъект.УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
				КонецЕсли;
			КонецЕсли;
			СтрокиТипа = СписокТиповОбъектов.НайтиСтроки(Новый Структура("Представление", Строка(ТипОбъекта)));
			Если СтрокиТипа.Количество()>0 Тогда
				ТекОбъект[СтрокиТипа[0].РеквизитОтветственный] = Объект.СотрудникПолучатель;
			ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				ТекОбъект.Менеджер = Объект.СотрудникПолучатель;	
			Иначе
				ТекОбъект.Ответственный = Объект.СотрудникПолучатель;
			КонецЕсли;
		ИначеЕсли ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ТекОбъект.Исполнитель = Объект.СотрудникПолучатель;
		
		Иначе
			ТекОбъект.Ответственный = Объект.СотрудникПолучатель;	
		КонецЕсли;
		
		Попытка
			ТекОбъект.Записать();
		Исключение
			Результат = "НеЗаписан";
		КонецПопытки;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// Пепренос уровня доступа, не используется в объединенных решениях
		УровеньДоступаНовый = Объект.СотрудникПолучатель["CRM_УровеньДоступа"];
		Если Результат = "" И ЗначениеЗаполнено(УровеньДоступаНовый)тогда
			РеквизитыПартнерыОбъекта = ПоискПартнеровВМетаданныхОбъекта(ОбъектСсылка.Метаданные().ПолноеИмя(), РеквизитыПартнеры);
			ТипПартнерСсылка = Тип("СправочникСсылка.Партнеры");
			СписокПартнеров = Новый Массив;
			
			// Занесем в массив всех партнеров из документа.
			Для каждого РеквизитИмя Из РеквизитыПартнерыОбъекта.Реквизиты Цикл
				Значение = ТекОбъект[РеквизитИмя];
				Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = ТипПартнерСсылка Тогда
					СписокПартнеров.Добавить(Значение);
				КонецЕсли;
			КонецЦикла;
			Для каждого ДанныеТЧ Из РеквизитыПартнерыОбъекта.ТабличныеЧасти Цикл
				Для каждого Строка Из ТекОбъект[ДанныеТЧ.Ключ] Цикл
					Для каждого РеквизитИмя Из ДанныеТЧ.Значение Цикл
						Значение = Строка[РеквизитИмя];
						Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = ТипПартнерСсылка Тогда
							СписокПартнеров.Добавить(Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Партнеры1.Ссылка
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ПартнерыУровниДоступа.Ссылка КАК Ссылка
			|	ИЗ
			|		Справочник.Партнеры.CRM_УровниДоступа КАК ПартнерыУровниДоступа
			|	ГДЕ
			|		ПартнерыУровниДоступа.Ссылка В(&Ссылки)
			|		И НЕ ПартнерыУровниДоступа.УровеньДоступа В ИЕРАРХИИ (&УровеньДоступа)) КАК Партнеры1
			|ГДЕ
			|	НЕ Партнеры1.Ссылка В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ПартнерыУровниДоступа.Ссылка
			|				ИЗ
			|					Справочник.Партнеры.CRM_УровниДоступа КАК ПартнерыУровниДоступа
			|				ГДЕ
			|					ПартнерыУровниДоступа.Ссылка В (&Ссылки)
			|					И ПартнерыУровниДоступа.УровеньДоступа В ИЕРАРХИИ (&УровеньДоступа))");
			Запрос.УстановитьПараметр("Ссылки", СписокПартнеров);
			Запрос.УстановитьПараметр("УровеньДоступа", УровеньДоступаНовый);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если (Выборка.Количество() > 0) И НЕ ДобавитьУровеньДоступа Тогда
				Результат = "НетУровняДоступа";
			Иначе
				Попытка
					Пока Выборка.Следующий() Цикл
						Если Выборка.Ссылка["CRM_УровниДоступа"].Количество() > 0 Тогда
							ПартнерОбъект = Выборка.Ссылка.ПолучитьОбъект();
							Строка = ПартнерОбъект["CRM_УровниДоступа"].Добавить();
							Строка.УровеньДоступа = УровеньДоступаНовый;
							ПартнерОбъект.Записать();
						КонецЕсли;
					КонецЦикла;
				Исключение
					Результат = "НеОбработанПартнер";
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Результат = "" Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СкорректироватьИсполнителейЭтапов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_ИсполнителиЭтапов.Объект,
	|	CRM_ИсполнителиЭтапов.ТочкаМаршрута,
	|	CRM_ИсполнителиЭтапов.Исполнитель,
	|	CRM_ИсполнителиЭтапов.Все
	|ИЗ
	|	РегистрСведений.CRM_ИсполнителиЭтапов КАК CRM_ИсполнителиЭтапов
	|ГДЕ
	|	CRM_ИсполнителиЭтапов.Исполнитель = &Исполнитель";
	
	Запрос.УстановитьПараметр("Исполнитель",Объект.СотрудникИсточник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписьРегистра = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра,Выборка);
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			ЗаписьРегистра.Исполнитель = Объект.СотрудникПолучатель;
			Попытка
				ЗаписьРегистра.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьИсполнителейЭтаповБизнесПроцессов()
	
	МассивИсполнителей = Новый Массив;
	МассивИсполнителей.Добавить(Объект.СотрудникИсточник);
	МассивИсполнителей.Добавить(Перечисления.CRM_ВидыИсполнителейЗадач.Автор);
	МассивИсполнителей.Добавить(Перечисления.CRM_ВидыИсполнителейЗадач.Ответственный);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект,
	|	CRM_ИсполнителиЭтаповБизнесПроцессов.ТочкаМаршрута,
	|	CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель,
	|	CRM_ИсполнителиЭтаповБизнесПроцессов.Все
	|ИЗ
	|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
	|ГДЕ
	|	CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель В(&МассивИсполнителей)";
	
	Запрос.УстановитьПараметр("МассивИсполнителей",МассивИсполнителей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор И Выборка.Объект.Автор = Объект.СотрудникИсточник)
		ИЛИ (Выборка.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Ответственный И Выборка.Объект.Ответственный = Объект.СотрудникИсточник)
		ИЛИ (Выборка.Исполнитель = Объект.СотрудникИсточник) Тогда
			ЗаписьРегистра = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра,Выборка);
			ЗаписьРегистра.Прочитать();
			Если ЗаписьРегистра.Выбран() Тогда
				ЗаписьРегистра.Исполнитель = Объект.СотрудникПолучатель;
				Попытка
					ЗаписьРегистра.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыполнить()
	
	ЕстьРольПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава");
	ЕстьРольCRM_ПередачаДелОтветственному = Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному");
	
	СписокДляУдаления = Новый Массив;
	КолвоБезДоступа = 0;
	
	Объекты = Новый Массив;
	Для каждого Строка Из Список Цикл
		Если Строка.Пометка Тогда
			Объекты.Добавить(Строка.ОбъектСсылка);
		КонецЕсли;
	КонецЦикла;
	РеквизитыПартнеры = ПоискПартнеровВМетаданныхОбъектов(Объекты);
	
	Для каждого Строка Из Список Цикл
		Если НЕ Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = ПеренаправитьОтветственному(Строка.ОбъектСсылка, Объект.СотрудникПолучатель, ФлагДобавлятьУровеньДоступа, РеквизитыПартнеры);
		
		Если Результат = "" Тогда
			СписокДляУдаления.Добавить(Строка);
		ИначеЕсли Результат = "НеПолучен" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось заблокировать'") + " """ + СокрЛП(Строка.Объект) + """. " + НСтр("ru = 'Обратитесь к администратору.'"));
		ИначеЕсли Результат = "НеЗаписан" ИЛИ Результат = "НеОбработанПартнер" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать'") + " """ + СокрЛП(Строка.Объект) + """. " + НСтр("ru = 'Обратитесь к администратору.'"));
		ИначеЕсли Результат = "НетУровняДоступа" Тогда
			КолвоБезДоступа = КолвоБезДоступа + 1;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обработать'") + " """ + СокрЛП(Строка.Объект) + """.");
		КонецЕсли
	КонецЦикла;
	
	Если КолвоБезДоступа > 0 Тогда
		Текст = Строка(КолвоБезДоступа) + НСтр("ru = ' документов не было перенесено, поскольку новый ответственный не имеет уровня доступа к клиентам этих документов. '");
		Если ЕстьРольCRM_ПередачаДелОтветственному ИЛИ ЕстьРольПолныеПрава Тогда
			Текст = Текст + НСтр("ru = 'Установите Флаг ""Добавлять уровнь доступа"".'");
		Иначе
			Текст = Текст + НСтр("ru = 'Обратитесь к администратору.'");
		КонецЕсли;
		Текст = "ru = '"+Текст+"'";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(Текст));
	КонецЕсли;
	
	Для каждого Строка Из СписокДляУдаления Цикл
		Список.Удалить(Строка);
	КонецЦикла;
	
	// Если перенаправляем задачи, то надо скорретировать все настройки карт маршрутов
	// и настройки бизнес-процессов.
	Если ТребуетсяКорректировкаИсполнителей Тогда
		
		СкорректироватьИсполнителейЭтапов();
		СкорректироватьИсполнителейЭтаповБизнесПроцессов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбработкаОтбор(Команда)
	Список.Очистить();
	ОбработкаОтбор();
КонецПроцедуры

// &НаКлиенте
//Процедура КомандаВыборПериода(Команда)
//	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
//	Период = Новый СтандартныйПериод;
//	Период.ДатаНачала = Объект.ДатаНачала;
//	Период.ДатаОкончания = Объект.ДатаКонца;
//	
//	Диалог.Период = Период;
//	Если Диалог.Редактировать() Тогда 
//		Объект.ДатаНачала = Диалог.Период.ДатаНачала;
//		Объект.ДатаКонца = КонецДня(Диалог.Период.ДатаОкончания);
//	КонецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура ПолеБыстрогоОтбора_ПериодПриИзменении(Элемент)
	
	НовыйПериод = Новый СтандартныйПериод(Объект.ДатаНачала, ?(Объект.ДатаКонца='00010101',Объект.ДатаКонца,КонецДня(Объект.ДатаКонца)));
	
	Если ПолеБыстрогоОтбора_Период = "НеВыбран" ИЛИ ПолеБыстрогоОтбора_Период = "" Тогда
		
		ПолеБыстрогоОтбора_Период = "НеВыбран";
		НовыйПериод = Новый СтандартныйПериод;
		
	ИначеЕсли ПолеБыстрогоОтбора_Период = "ПериодСтрокой" Тогда
		
		НовыйПериод = ПолеБыстрогоОтбора_ПериодПроизвольный;
		
	ИначеЕсли ПолеБыстрогоОтбора_Период = "ПроизвольныйПериод" Тогда
		
		ФормаРедактирования = ПолучитьФорму("ОбщаяФорма.CRM_ФормаРедактированияПроизвольногоПериода");
		ФормаРедактирования.Период = НовыйПериод;
		ФормаРедактирования.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПолеБыстрогоОтбора_ПериодПриИзмененииЗавершение", ЭтотОбъект);;
		ФормаРедактирования.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаРедактирования.Открыть();
		
		Возврат;
	Иначе	
		
		НовыйПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода[ПолеБыстрогоОтбора_Период]);
		
	КонецЕсли;		
	
	Объект.ДатаНачала = НовыйПериод.ДатаНачала;
	Объект.ДатаКонца = НовыйПериод.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБыстрогоОтбора_ПериодПриИзмененииЗавершение(НовыйПериод, ДополнительныеПараметры) Экспорт
	
	Если НовыйПериод = Неопределено ИЛИ НовыйПериод = КодВозвратаДиалога.Отмена Тогда
		Возврат
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НовыйПериод.ДатаНачала) ИЛИ  ЗначениеЗаполнено(НовыйПериод.ДатаОкончания) Тогда
		
		ЭлементСпискаПериодСтрокой = Элементы.ПолеБыстрогоОтбора_Период.СписокВыбора.НайтиПоЗначению("ПериодСтрокой");
		Если  ЭлементСпискаПериодСтрокой = Неопределено Тогда					
			ЭлементСпискаПериодСтрокой = Элементы.ПолеБыстрогоОтбора_Период.СписокВыбора.Вставить(1,"ПериодСтрокой");
		КонецЕсли;
		
		ЭлементСпискаПериодСтрокой.Представление = ПредставлениеПериода(НовыйПериод.ДатаНачала, НовыйПериод.ДатаОкончания);
		
		ПолеБыстрогоОтбора_ПериодПроизвольный = НовыйПериод;
		
		ПолеБыстрогоОтбора_Период = "ПериодСтрокой";	
		
	Иначе
		
		ЭлементСпискаПериодСтрокой = Элементы.ПолеБыстрогоОтбора_Период.СписокВыбора.НайтиПоЗначению("ПериодСтрокой");
		Если  ЭлементСпискаПериодСтрокой <> Неопределено Тогда					
			Элементы.ПолеБыстрогоОтбора_Период.СписокВыбора.Удалить(ЭлементСпискаПериодСтрокой);
		КонецЕсли;
		
		ПолеБыстрогоОтбора_Период = "НеВыбран";
		
	КонецЕсли;
	Объект.ДатаНачала = НовыйПериод.ДатаНачала;
	Объект.ДатаКонца = НовыйПериод.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБыстрогоОтбора_ПериодОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолеБыстрогоОтбора_Период = "НеВыбран";
	Объект.ДатаНачала = '00010101';
	Объект.ДатаКонца = '00010101';
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(ОбъектСсылка)
	Результат = Новый Структура("ПолноеИмяМетаданных");
	
	Результат.ПолноеИмяМетаданных = ОбъектСсылка.Метаданные().ПолноеИмя();
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СообщениеОтказПриПолученииФормы(ПараметрОбъект = Неопределено)
	ТекстСообщенияПоУмолчанию = НСтр("ru = 'Запрещено создание/открытие данного объекта!'");
	Если ПараметрОбъект = Неопределено Тогда
		ТекстСообщения = ТекстСообщенияПоУмолчанию;
	Иначе
		ПараметрОбъектПредставление = Строка(ПараметрОбъект);
		Если ЗначениеЗаполнено(ПараметрОбъектПредставление) Тогда
			ТекстСообщения = НСтр("ru = 'Запрещено создание/открытие'") + " """ + ПараметрОбъектПредставление + """!";
		Иначе
			ТекстСообщения = ТекстСообщенияПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения, 10);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.Список.ТекущиеДанные <> Неопределено  Тогда
		Попытка
			СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные.Объект;
		Исключение
			СсылкаНаТекущийОбъект = Неопределено;
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаТекущийОбъект) Тогда
			СообщениеОтказПриПолученииФормы();
			Возврат;
		КонецЕсли;
		
		//Если ТипЗнч(СписокОткрытыхФорм) <> Тип("СписокЗначений") Тогда
		//	СписокОткрытыхФорм = Новый СписокЗначений();
		//КонецЕсли;
		
		ДанныеДляОткрытия = ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(Элементы.Список.ТекущиеДанные.Объект);
		
		ПараметрыОткрытия = Новый Структура("Ключ", Элементы.Список.ТекущиеДанные.Объект);
		
		//Если ТипЗнч(СсылкаНаТекущийОбъект) = Тип("ДокументСсылка.Анкета") Тогда
		//	
		//	ПараметрыОткрытия.Вставить("ТолькоФормаЗаполнения",Истина);
		//	
		//	Если Элементы.Список.ТекущиеДанные.Проведен Тогда
		//		
		//		ПараметрыОткрытия.Вставить("ТолькоПросмотр",Истина);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;	
		
		Форма = ПолучитьФорму(ДанныеДляОткрытия.ПолноеИмяМетаданных + ".ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Если Форма <> Неопределено Тогда
			Форма.Открыть();
			//СписокОткрытыхФорм.Добавить(Форма);
			//Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
			//Исключение КонецПопытки;
			//ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм", 1);
		Иначе
			СообщениеОтказПриПолученииФормы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "СписокТиповОбъектов".
//
Процедура СписокТиповОбъектовПередНачаломИзменения(Элемент, Отказ)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Отказ = НЕ ТД.Доступность;
КонецПроцедуры
