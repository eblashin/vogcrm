
// Функция возвращает текст обработчика из справочника точек маршрута.
//
// Параметры:
//	ТочкаМаршрута					- СправочникСсылка	- Точка маршрута.
//	ОбработчикиСобытийТочекМаршрута	- СправочникСсылка	- Обработчик события точки маршрута.
//
// Возвращаемое значение:
//	Строка	- Текст обработчика
//
Функция ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, ОбработчикиСобытийТочекМаршрута)
	СтрокаОбработчика = ТочкаМаршрута.ОбработчикиСобытий.Найти(ОбработчикиСобытийТочекМаршрута, "Событие");
	Возврат СтрокаОбработчика.Обработчик;
КонецФункции // ПолучитьОбработчикТочкиМаршрута()

//////////////////////////////////////////////////////
// Обработчики точки Старта

// Процедура вызывается из модуля бизнес-процесса "CRM_БизнесПроцесс".
// Предназначена для выполнения обработчика "Перед стартом" переданной точки старта.
//
// Параметры:
//	ТочкаМаршрута	- СправочникСсылка	- Точка маршрута, точка страта.
//	БизнесПроцесс	- ссылка на текущий бизнес-процесс.
//	Отказ			- Булево			- Флаг отказа, если "Истина", то бизнес-процесс не стартует.
//
Процедура ТочкаСтартаПередСтартом(ТочкаМаршрута, БизнесПроцесс, Отказ, ТекстСообщения = "") Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПередСтартом);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""Перед стартом"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ТочкаСтартаПередСтартом()

// Процедура вызывается из модуля бизнес-процесса "CRM_БизнесПроцесс".
// Предназначена для выполнения обработчика "При старте" переданной точки старта
// дает возможность корректировать создаваемые задачи из массива.
//
// Параметры:
//	ТочкаМаршрута		- СправочникСсылка	- Точка маршрута, точка страта.
//	БизнесПроцесс	- ссылка на текущий бизнес-процесс.
//	ФормируемыеЗадачи	- Массив			- Содержит создаваемые задачи, еще не записанные.
//
Процедура ТочкаСтартаПриСтарте(ТочкаМаршрута, БизнесПроцесс,ФормируемыеЗадачи) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПриСтарте);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""При старте"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ТочкаСтартаПриСтарте()

// Процедура вызывается из модуля бизнес-процесса "CRM_БизнесПроцесс".
// Предназначена для выполнения обработчика "После старте" переданной точки старта
// можно, к примеру, использовать для оповещения о созданных задачах.
//
// Параметры:
//	ТочкаМаршрута		- СправочникСсылка	- Точка маршрута, точка страта.
//	БизнесПроцесс	- ссылка на текущий бизнес-процесс.
//	ФормируемыеЗадачи	- Массив			- Содержит созданные задачи.
//
Процедура ТочкаСтартаПослеСтарта(ТочкаМаршрута, БизнесПроцесс, ФормируемыеЗадачи) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПослеСтарта);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""После старта"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ТочкаСтартаПослеСтарта()

//////////////////////////////////////////////////////
// Обработчики точки Старта

// Процедура вызывается из Функции "CRM_БизнесПроцессыСервер.ПолучитьСледующиеТочкиМаршрута"
// Предназначена для выполнения обработчика "При завершении" переданной точки завершения
// можно, к примеру, использовать для обработки варианта завершения бизнес-процесса, указанного
// в точке маршрута.
//
// Параметры:
//	ТочкаМаршрута	- СправочникСсылка	- Точка маршрута, точка завершения.
//	БизнесПроцесс	- ссылка на текущий бизнес-процесс.
//
Процедура ТочкаЗавершенияПриЗавершении(ТочкаМаршрута, БизнесПроцесс) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ЗавершениеПриЗавершении);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""При завершении"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ТочкаЗавершенияПриЗавершении()

//////////////////////////////////////////////////////
// Обработчики точки Действия

// Процедура вызывается из процедуры "CRM_БизнесПроцессыСервер.ПолучитьСледующуюТочкуСформироватьЗадачи".
// Предназначена для выполнения обработчика "При выполнении" переданной точки действия
// дает возможность корректировать создаваемые задачи из массива.
//
// Параметры:
//	ТекущаяЗадача		- ЗадачаСсылка	- Выполняемая задача.
//	ФормируемыеЗадачи	- Массив		- Содержит создаваемые задачи, еще не записанные.
//
Процедура ТочкаДействияПриВыполнении(ТочкаМаршрута, Задача, Отказ, ТекстСообщения = "") Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПриВыполнении);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""При выполнении"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ТочкаДействияПриВыполнении()

// Процедура вызывается из процедуры "CRM_БизнесПроцессыСервер.ПолучитьСледующуюТочкуСформироватьЗадачи".
// Предназначена для выполнения обработчика "После выполнения" переданной точки действия
// можно, к примеру, использовать для оповещения о созданных задачах.
//
// Параметры:
//	ТекущаяЗадача		- ЗадачаСсылка	- Выполняемая задача.
//	ФормируемыеЗадачи	- Массив		- Содержит созданные задачи.
//
Процедура ОбработчикТочкиДействияПослеВыполнения(ТекущаяЗадача, ФормируемыеЗадачи) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТекущаяЗадача.CRM_ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПослеВыполнения);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""После выполнения"" в точке'") + " " + ТекущаяЗадача.CRM_ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ОбработчикТочкиДействияПослеВыполнения()

// Процедура вызывается из процедуры "CRM_БизнесПроцессыСервер.СформироватьМассивЗадач".
// Возникает перед выполнением генерации задач.
// Если обработчик сам формирует список задач, то должен установить <СтандартнаяОбработка> в Ложь.
// В противном случае созданные им в этом обработчике задачи удаляются и заново формируются стандартной процедурой
// создания задач.
// Вне зависимости от <СтандартнаяОбработка> после этого обработчика обязательно будет вызван обработчик
// ПриСозданииЗадач.
//
// Параметры:
//	БизнесПроцесс		- CRM_БизнесПроцессСсылка
//	ТочкаМаршрута		- CRM_ТочкиМаршрутовСсылка	- Точка маршрута бизнес-процесса, на которой происходит создание задач.
//	ФормируемыеЗадачи	- Массив формируемых задач (объектов типа ЗадачаОбъект).
//	СтандартнаяОбработка- Булево В данный параметр передается признак выполнения стандартной обработки события.
//						  Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартного формирования
//						  списка задач производиться не будет.
//						  Значение по умолчанию: Истина.
//
Процедура ОбработчикТочкиДействияПередСозданиемЗадач(БизнесПроцесс ,ТочкаМаршрута, ФормируемыеЗадачи, СтандартнаяОбработка) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПередСозданиемЗадач);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""Перед созданием задач"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Процедура вызывается из процедуры "CRM_БизнесПроцессыСервер.СформироватьМассивЗадач".
// Возникает после выполнения стандартной или переопределенной в обработчике события ПередСозданиемЗадач механики
// генерации списка задач.
// Обработчик этого события может "донастроить" автоматически сформированные задачи или удалить некоторые из них, а
// также добавить к ним новые задачи. Запись списка задач будет осуществлена после завершения обработчика.
//
// Параметры:
//	БизнесПроцесс		- CRM_БизнесПроцессСсылка
//	ТочкаМаршрута		- CRM_ТочкиМаршрутовСсылка	- Точка маршрута бизнес-процесса, на которой происходит создание задач.
//	ФормируемыеЗадачи	- Массив формируемых задач (объектов типа ЗадачаОбъект).
//	Отказ				- Булево Признак отказа от добавления задачи. Если в теле процедуры-обработчика установить данному
//	           параметру значение Истина, то запись задач произведена не будет.
//						  Значение по умолчанию: Ложь.
//
Процедура ОбработчикТочкиДействияПриСозданииЗадач(БизнесПроцесс ,ТочкаМаршрута, ФормируемыеЗадачи, Отказ) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута,
		Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПриСозданииЗадач);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""При создании задач"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////
// Обработчики точки ВыбораВарианта Условия.

// Функция вызывается из Функции "CRM_БизнесПроцессыСервер.ПолучитьСледующиеТочкиМаршрута"
// Предназначена для выполнения обработчика "Выбор варианта" переданной точки Выбора варианта
// и возврата индекса варианта, по которому пойдет дальше бизнес-процесс.
//
// Параметры:
//	ТочкаМаршрута		- СправочникСсылка	- Точка маршрута, точка Выбора варианта.
//	ВариантВыполнения	- Число				- Индекс варианта, переданный результат выполнения предыдущей точки,
//											если нет обработчика, то пойдет, по переданному результату.
//											Обработчик должен возвращать индекс варианта точки выбора варианта.
//
// Возвращаемое значение:
//	Число	- Индекс варианта
//
Функция ОбработчикТочкиВыборВарианта(БизнесПроцесс, ВходящаяТочка, ТочкаМаршрута, ЗНАЧ ВариантВыполнения) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Возврат ВариантВыполнения;
	КонецЕсли;
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВыборВарианта);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
			Возврат ВариантВыполнения;
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""Выбор варианта"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
			Возврат ВариантВыполнения;
		КонецПопытки;
	Иначе
		Возврат ВариантВыполнения;
	КонецЕсли;
КонецФункции // ОбработчикТочкиВыборВарианта()

// Функция вызывается из Функции "CRM_БизнесПроцессыСервер.ПолучитьСледующиеТочкиМаршрута"
// Предназначена для выполнения обработчика "Проверка условия" переданной точки Условия
// и возврата индекса варианта, по которому пойдет дальше бизнес-процесс.
//
// Параметры:
//	ТочкаМаршрута		- СправочникСсылка	- Точка маршрута, точка Условия.
//	ВариантВыполнения	- Число				- Индекс варианта, переданный результат выполнения предыдущей точки
//											если нет обработчика, то пойдет, по переданному результату.
//											Обработчик должен возвращать индекс варианта точки условия.
//
// Возвращаемое значение:
//	Число	- Индекс варианта
//
Функция ОбработчикТочкиУсловияПроверкаУсловия(БизнесПроцесс, ВходящаяТочка, ТочкаМаршрута, ЗНАЧ ВариантВыполнения) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Возврат ВариантВыполнения;
	КонецЕсли;
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.УсловиеПроверкаУсловия);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
			
			Возврат ВариантВыполнения;
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""Проверка условия"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
			Возврат ВариантВыполнения;
		КонецПопытки;
	Иначе
		Возврат ВариантВыполнения;
	КонецЕсли;
КонецФункции // ОбработчикТочкиУсловияПроверкаУсловия()

//////////////////////////////////////////////////////
// Обработчики точки Вложенного бизнес-процесса.

// Процедура вызывается из процедуры "CRM_БизнесПроцессыСервер.СформироватьВложенныйБизнесПроцесс".
// Предназначена для выполнения обработчика "При создании вложенного бизнес-процесса" переданной точки вложенного
// бизнес-процесса.
// Можно использовать для корректировки бизнес - процесса, в момент его создания.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессОбъект	- Бизнес-процесс, еще не записанный.
//	ВедущаяЗадача	- ЗадачаСсылка			- Ведущая задача.
//
Процедура ОбработчикТочкиВложенныйБизнесПроцессПриСозданииВложенногоБизнесПроцесса(БизнесПроцесс, ВедущаяЗадача) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ВедущаяЗадача.CRM_ТочкаМаршрута,
		Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ПриСозданииВложенногоБизнесПроцесса);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""При создании вложенного бизнес-процесса"" в точке'") + " " + ВедущаяЗадача.CRM_ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ОбработчикТочкиВложенныйБизнесПроцессПриСозданииВложенногоБизнесПроцесса()

// Процедура вызывается из процедуры "CRM_БизнесПроцессыСервер.СформироватьВложенныйБизнесПроцесс".
// Предназначена для выполнения обработчика "После созданияВложенного бизнес-процесса" переданной точки вложенного
// бизнес-процесса.
// Можно использовать для выполнения действий после создания бизнес - процесса.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессОбъект	- Бизнес-процесс, еще не записанный.
//	ВедущаяЗадача	- ЗадачаСсылка			- Ведущая задача.
//
Процедура ОбработчикТочкиВложенныйБизнесПроцессПослеСозданияВложенногоБизнесПроцесса(БизнесПроцесс, ВедущаяЗадача) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ВедущаяЗадача.CRM_ТочкаМаршрута,
		Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ПослеСозданияВложенногоБизнесПроцесса);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""После создания вложенного бизнес-процесса"" в точке'") + " " + ВедущаяЗадача.CRM_ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ОбработчикТочкиВложенныйБизнесПроцессПослеСозданияВложенногоБизнесПроцесса()

// Процедура вызывается из процедуры "CRM_БизнесПроцессыСервер.СформироватьМассивЗадач".
// Возникает перед выполнением генерации задач.
// Если обработчик сам формирует список задач, то должен установить <СтандартнаяОбработка> в Ложь.
// В противном случае созданные им в этом обработчике задачи удаляются и заново формируются стандартной процедурой
// создания задач.
// Вне зависимости от <СтандартнаяОбработка> после этого обработчика обязательно будет вызван обработчик
// ПриСозданииЗадач.
//
// Параметры:
//	БизнесПроцесс		- CRM_БизнесПроцессСсылка
//	ТочкаМаршрута		- CRM_ТочкиМаршрутовСсылка	- Точка маршрута бизнес-процесса, на которой происходит создание задач.
//	ФормируемыеЗадачи	- Массив формируемых задач (объектов типа ЗадачаОбъект).
//	СтандартнаяОбработка- Булево В данный параметр передается признак выполнения стандартной обработки события.
//						  Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартного формирования
//						  списка задач производиться не будет.
//						  Значение по умолчанию: Истина.
//
Процедура ОбработчикТочкиВложенныйБизнесПроцессПередСозданиемЗадач(БизнесПроцесс, ТочкаМаршрута, ФормируемыеЗадачи, СтандартнаяОбработка) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута,
		Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВложенныйБизнесПроцессПередСозданиемЗадач);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""Перед созданием задач"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Процедура вызывается из процедуры "CRM_БизнесПроцессыСервер.СформироватьМассивЗадач".
// Возникает после выполнения стандартной или переопределенной в обработчике события ПередСозданиемЗадач механики
// генерации списка задач.
// Обработчик этого события может "донастроить" автоматически сформированные задачи или удалить некоторые из них, а
// также добавить к ним новые задачи. Запись списка задач будет осуществлена после завершения обработчика.
//
// Параметры:
//	БизнесПроцесс		- CRM_БизнесПроцессСсылка
//	ТочкаМаршрута		- CRM_ТочкиМаршрутовСсылка	- Точка маршрута бизнес-процесса, на которой происходит создание задач.
//	ФормируемыеЗадачи	- Массив формируемых задач (объектов типа ЗадачаОбъект).
//	Отказ				- Булево Признак отказа от добавления задачи. Если в теле процедуры-обработчика установить данному
//	           параметру значение Истина, то запись задач произведена не будет.
//						  Значение по умолчанию: Ложь.
//
Процедура ОбработчикТочкиВложенныйБизнесПроцессПриСозданииЗадач(БизнесПроцесс, ТочкаМаршрута, ФормируемыеЗадачи, Отказ) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута,
		Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВложенныйБизнесПроцессПриСозданииЗадач);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""При создании задач"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			//+++ Терпогосян Д.Б. [15.10.2021 12:46:22] № CRM-1162
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Если СтрНайти(ТекстСообщения, "Согласование клиента, ТТ") = 0 Тогда  
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			//--- Терпогосян Д.Б. [15.10.2021 12:46:22] № CRM-1162 
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////
// Обработчики точки Обработка.

// Процедура вызывается из Функции "CRM_БизнесПроцессыСервер.ПолучитьСледующиеТочкиМаршрута"
// Предназначена для выполнения обработчика "Обработка" переданной точки Обработки.
//
// Параметры:
//	ТочкаМаршрута	- СправочникСсылка	- Точки маршрута, точка обработки.
//	ДополнительныеПараметры - Структура в которой переданы:
//		БизнесПроцесс	- CRM_БизнесПроцессСсылка
//		ТекущаяТочка	- СправочникСсылка - Точка маршрута, точка Выбора варианта.
//		Вариант			- Число - Индекс варианта, переданный результат выполнения предыдущей точки,
//
Процедура ТочкаОбработкиОбработка(ТочкаМаршрута, ДополнительныеПараметры = Неопределено) Экспорт
	// Получим обработчик текущей точки.
	Обработчик = ПолучитьОбработчикТочкиМаршрута(ТочкаМаршрута, Справочники.CRM_ОбработчикиСобытийТочекМаршрута.Обработка);
	Если ЗначениеЗаполнено(Обработчик) Тогда
		Попытка
			Выполнить(Обработчик);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""Обработка"" в точке'") + " " + ТочкаМаршрута.Наименование + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ТочкаОбработкиОбработка()

//////////////////////////////////////////////////////
// Обработчики заполнения экземпляров процесса.

// Процедура заполняет бизнес-процесс значениями реквизитов элемента справочника Проекты.
//
// Параметры:
// Параметры:
//	БизнесПроцесс	- БизнесПроцессОбъект	- Бизнес-процесс
//	Проект			- СправочникСсылка		- Проект.
//
Процедура ЗаполнитьБизнесПроцессПоПроекту(БизнесПроцесс, Проект) Экспорт
	Если НЕ ЗначениеЗаполнено(БизнесПроцесс.Наименование) Тогда
		БизнесПроцесс.Наименование = Проект.Наименование;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
		БизнесПроцесс.Партнер = Проект.CRM_Партнер;
		БизнесПроцесс.КонтактноеЛицо	= Проект.CRM_КонтактноеЛицоПартнера;
	КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(БизнесПроцесс.Подразделение) Тогда
	//	БизнесПроцесс.Подразделение		= Проект.CRM_Подразделение;
	//КонецЕсли;
КонецПроцедуры // ЗаполнитьБизнесПроцессПоПроекту()	


//////////////////////////////////////////////////////
// Формирование описания бизнес-процесса и задачи.

//
//
Функция ПолучитьОбъектыПоЗадаче(Задача)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс",	Задача.БизнесПроцесс);
	Запрос.УстановитьПараметр("Задача",			Задача);
	Запрос.УстановитьПараметр("ТочкаМаршрута",	Задача.CRM_ТочкаМаршрута);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	CRM_ОбъектыПоБизнесПроцессам.Объект,
	               |	CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации КАК ДатаРегистрации,
	               |	ВЫБОР
	               |		КОГДА CRM_ОбъектыПоБизнесПроцессам.Объект ССЫЛКА Справочник.МаркетинговыеМероприятия
	               |			ТОГДА CRM_ОбъектыПоБизнесПроцессам.Объект.ДатаНачала
	               |		ИНАЧЕ ЕСТЬNULL(CRM_ОбъектыПоБизнесПроцессам.Объект.Дата, CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации)
	               |	КОНЕЦ КАК ДатаСортировки
	               |ИЗ
	               |	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
	               |ГДЕ
	               |	CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс = &БизнесПроцесс
	               |	И CRM_ОбъектыПоБизнесПроцессам.Задача = &Задача
	               |	И CRM_ОбъектыПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСортировки";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//
//
Функция СформироватьОписаниеБизнесПроцесса(Задача) Экспорт
	
	ТаблицаРеквизитов = "";
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("Организация"						,НСтр("ru = 'Организация:'"));
	СписокРеквизитов.Добавить("Подразделение"					,НСтр("ru = 'Подразделение:'"));
	СписокРеквизитов.Добавить("Автор"							,НСтр("ru = 'Автор:'"));
	СписокРеквизитов.Добавить("Партнер"							,НСтр("ru = 'Клиент:'"));
	//+вог
	СписокРеквизитов.Добавить("вогТорговаяТочка"				,НСтр("ru = 'Торговая точка:'"));
	//-вог
	СписокРеквизитов.Добавить("КонтактноеЛицо"					,НСтр("ru = 'Контакт:'"));
	
	СписокРеквизитов_1 = Новый СписокЗначений;
	СписокРеквизитов_1.Добавить("Дата"							,НСтр("ru = 'Создан:'"));
	СписокРеквизитов_1.Добавить("ДатаСтарта"					,НСтр("ru = 'Стартован:'"));
	СписокРеквизитов_1.Добавить("ПланируемаяДатаЗавершения"		,НСтр("ru = 'Завершится (план):'"));
	СписокРеквизитов_1.Добавить("Проект"						,НСтр("ru = 'Проект:'"));
	//СписокРеквизитов_1.Добавить("Ответственный"				,НСтр("ru = 'Ответственный:'"));
	СписокРеквизитов_1.Добавить("Сумма"							,НСтр("ru = 'Сумма:'"));
	
	// Предмет БП в отдельную строку
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс.Предмет) Тогда
		ПредставлениеОбъекта = Строка(Задача.БизнесПроцесс.Предмет);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Задача.БизнесПроцесс.Предмет);
		ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
		
		ТаблицаРеквизитов = ТаблицаРеквизитов + "
		|<span style='font-size: 10pt;'><STRONG>" + НСтр("ru = 'Предмет: '") + "</STRONG>" + ЗначениеСтрокой + "</span>
		|";
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицаРеквизитов + "
	|<TABLE border=0 cellSpacing=1 cellPadding=1 width=""100%"">
	|<TBODY>
	|<TR>
	|<TD vAlign=top>
	|<TABLE border=1 cellSpacing=1 cellPadding=1 width=""100%"">
	|<TBODY>";
	
	Для Каждого ЭлементСписка Из СписокРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(Задача.БизнесПроцесс[ЭлементСписка.Значение]) Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Тип("Дата") Тогда
			ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ДФ='дд.ММ.гггг ЧЧ:мм'");
		ИначеЕсли ТипЗнч(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Тип("Число") Тогда
			ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ЧЦ=15; ЧДЦ=2; ЧН=00");
		Иначе
			Попытка
				Если (Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Справочник.") > 0)
				ИЛИ (Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Документ.") > 0) Тогда
					
					Если Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Документ.") > 0 Тогда
						ПредставлениеОбъекта = CRM_СтруктураПодчиненностиПереопределяемый.ПредставлениеОбъектаДляВыводаВОтчет(Новый Структура("Ссылка",Задача.БизнесПроцесс[ЭлементСписка.Значение]));
						Если ПредставлениеОбъекта = Неопределено Тогда
							ПредставлениеОбъекта = Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
						КонецЕсли;
					Иначе
						ПредставлениеОбъекта = Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
					КонецЕсли;
					
					НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
					ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
					
				Иначе
					ЗначениеСтрокой = СокрЛП(Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]));
				КонецЕсли;
			Исключение
				ЗначениеСтрокой = СокрЛП(Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]));
			КонецПопытки;
		КонецЕсли;
		
		ТаблицаРеквизитов = ТаблицаРеквизитов + "
		|<TR>
		|<TD><span style='font-size: 10pt;'><STRONG>" + ЭлементСписка.Представление+"</STRONG></span></TD>
		|<TD><span style='font-size: 10pt;'>" + ЗначениеСтрокой + "</span></TD></TR>";
	КонецЦикла;
	
	ТаблицаРеквизитов = ТаблицаРеквизитов + "
	|</TBODY></TABLE>
	|<TD vAlign=top>
	|<TABLE border=1 cellSpacing=1 cellPadding=1 width=""100%"">
	|<TBODY>";
	
	Для Каждого ЭлементСписка Из СписокРеквизитов_1 Цикл
		Если НЕ ЗначениеЗаполнено(Задача.БизнесПроцесс[ЭлементСписка.Значение]) Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Тип("Дата") Тогда
			Если НачалоДня(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ДФ='ЧЧ:мм'");
			ИначеЕсли Год(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Год(ТекущаяДатаСеанса()) Тогда
				ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ДФ='дд МММ ЧЧ:мм'");
			Иначе
				ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ДФ='дд.ММ.гггг ЧЧ:мм'");
			КонецЕсли;
		ИначеЕсли ТипЗнч(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Тип("Число") Тогда
			ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ЧЦ=15; ЧДЦ=2; ЧН=00");
		Иначе
			Попытка
				Если (Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Справочник.") > 0)
				ИЛИ (Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Документ.") > 0) Тогда
				
					Если Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Документ.") > 0 Тогда
						ПредставлениеОбъекта = CRM_СтруктураПодчиненностиПереопределяемый.ПредставлениеОбъектаДляВыводаВОтчет(Новый Структура("Ссылка",Задача.БизнесПроцесс[ЭлементСписка.Значение]));
						Если ПредставлениеОбъекта = Неопределено Тогда
							ПредставлениеОбъекта = Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
						КонецЕсли;
					Иначе
						ПредставлениеОбъекта = Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
					КонецЕсли;
					НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
					ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
					
				Иначе
					ЗначениеСтрокой = СокрЛП(Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]));
				КонецЕсли;
			Исключение
				ЗначениеСтрокой = СокрЛП(Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]));
			КонецПопытки;
		КонецЕсли;
		
		ТаблицаРеквизитов = ТаблицаРеквизитов + "
		|<TR>
		|<TD><span style='font-size: 10pt;'><STRONG>" + ЭлементСписка.Представление+"</STRONG></span></TD>
		|<TD><span style='font-size: 10pt;'>" + ЗначениеСтрокой + "</span></TD></TR>";
	КонецЦикла;
	
	ТаблицаРеквизитов = ТаблицаРеквизитов + "
	|</TBODY></TABLE>
	|</TD></TR>
	|</TBODY></TABLE>";
	
	ОписаниеФорматированное = СтрЗаменить(Задача.БизнесПроцесс.Описание, Символы.ПС, "</BR>");
	ОписаниеФорматированное = СтрЗаменить(ОписаниеФорматированное, " ", "&ensp;");
	ОписаниеФорматированное = СтрЗаменить(ОписаниеФорматированное, Символы.Таб, "&ensp;&ensp;&ensp;");
	ОписаниеБизнесПроцесса = "
	|<P><span style='font-size: 10pt;'>" + ОписаниеФорматированное + "</span></P>";
	
	
	Возврат ТаблицаРеквизитов + ОписаниеБизнесПроцесса;
	
КонецФункции

//
//
Функция СформироватьИсториюБизнесПроцесса(Задача, Сделка = Ложь) Экспорт
	
	ТекущаяЗадача = "";
	ИсторияВыполнения = "";
	//|<P><span style='font-size: 10pt;'><span style='font-size: 10pt;'><EM><STRONG>" + НСтр("ru = 'История выполнения'")+"</STRONG></EM></span></P>";
	
	УстановитьПривилегированныйРежим(Истина); // ++ VOG Ульянов И.В. 11.03.2020 CRM-406
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗадачаИсполнителя.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА (НЕ ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка))
	               |						ТОГДА ЗадачаИсполнителя.РольИсполнителя
	               |					ИНАЧЕ ЗадачаИсполнителя.Исполнитель
	               |				КОНЕЦ
	               |		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
	               |	КОНЕЦ КАК Исполнитель,
	               |	ЗадачаИсполнителя.РезультатВыполнения,
	               |	ЗадачаИсполнителя.Дата КАК Дата,
	               |	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
	               |	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
	               |	ЗадачаИсполнителя.CRM_Переадресована,
	               |	ЗадачаИсполнителя.CRM_ВариантВыполненияСтрокой,
	               |	ЗадачаИсполнителя.Выполнена,
	               |	ЗадачаИсполнителя.CRM_СостояниеСтрокой,
	               |	ЗадачаИсполнителя.Описание,
	               |	ВЫБОР
	               |		КОГДА ЗадачаИсполнителя.Выполнена
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Флаг,
	               |	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация,
	               |	ЗадачаИсполнителя.CRM_ТочкаМаршрута.РеквизитДопУпорядочивания КАК CRM_ТочкаМаршрутаРеквизитДопУпорядочивания
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |
	               |УПОРЯДОЧИТЬ ПО
				   //|	CRM_Итерация УБЫВ,
				   //|	CRM_ТочкаМаршрутаРеквизитДопУпорядочивания УБЫВ,
				   //|	CRM_ТочкаМаршрута УБЫВ,
	               |	Флаг УБЫВ,
	               |	ДатаИсполнения УБЫВ";
	
	Запрос.УстановитьПараметр("БизнесПроцесс",Задача.БизнесПроцесс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТабОбъектов = ПолучитьОбъектыПоЗадаче(Выборка.Ссылка);
		СтрокаОбъектовПоЗадаче = "";
		Если ТабОбъектов.Количество() > 0 Тогда
			Если НЕ Сделка Тогда
				СтрокаОбъектовПоЗадаче = "
					|<P><span style='font-size: 10pt;'><EM>&ensp;&ensp;&ensp;" + НСтр("ru = 'Введенные на этапе объекты:'")+"</EM></span></P>";
			Иначе
				СтрокаОбъектовПоЗадаче = "
										 |" + НСтр("ru = 'Введенные на этапе объекты:'") + "
										 |";
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаТаб Из ТабОбъектов Цикл
			Попытка
				Если НЕ Сделка И ((Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Справочник.") > 0)
						ИЛИ (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0)) Тогда
						
					Если Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0 Тогда
						ПредставлениеОбъекта = CRM_СтруктураПодчиненностиПереопределяемый.ПредставлениеОбъектаДляВыводаВОтчет(Новый Структура("Ссылка",СтрокаТаб.Объект));
						Если ПредставлениеОбъекта = Неопределено Тогда
							ПредставлениеОбъекта = Строка(СтрокаТаб.Объект);
						КонецЕсли;
					Иначе
						ПредставлениеОбъекта = Строка(СтрокаТаб.Объект);
					КонецЕсли;
					
					НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаб.Объект);
					ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
				Иначе
					ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
				КонецЕсли;
			Исключение
				ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
			КонецПопытки;
			
			Если НЕ Сделка Тогда
				СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
					|<P><span style='font-size: 10pt;'>&ensp;&ensp;" + ЗначениеСтрокой + "</P>";
				
				// Если Это взаимодействие то выводим для него ниже Описание события и результат.
				Если ТипЗнч(СтрокаТаб.Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
					Попытка
						ОписаниеСобытия		= СтрокаТаб.Объект.Содержание;
					Исключение
						ОписаниеСобытия		= "";
					КонецПопытки;	
					Попытка
						РезультатСобытия	= СтрокаТаб.Объект.Результат;
					Исключение
						РезультатСобытия		= "";						
					КонецПопытки;						
					
					Если ЗначениеЗаполнено(ОписаниеСобытия) Тогда
						МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеСобытия,Символы.ПС);
						Если МассивСтрок.Количество() > 3 Тогда
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
							|<P><B>" + "Описание: " + "</B>";
							
							Ном = 0;
							Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
								Если Ном = 3 Тогда Прервать; КонецЕсли;
								Ном = Ном + 1;
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + СтрокаИзМассива + "<br>";
							КонецЦикла;
							
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "............</P>";
						Иначе
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
							|<P><B>" + "Описание: " + "</B>" + СокрЛП(СтрЗаменить(ОписаниеСобытия,Символы.ПС,"<br>")) + "</P>";
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(РезультатСобытия) Тогда					
						МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатСобытия,Символы.ПС);
						Если МассивСтрок.Количество() > 3 Тогда
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
							|<P><B>" + "Результат: " + "</B>";
							
							Ном = 0;
							Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
								Если Ном = 3 Тогда Прервать; КонецЕсли;
								Ном = Ном + 1;
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + СтрокаИзМассива + "<br>";
							КонецЦикла;
							
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "............</P>";
						Иначе
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
							|<P><B>" + "Результат: " + "</B>" + СокрЛП(СтрЗаменить(РезультатСобытия,Символы.ПС,"<br>")) + "</P>";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;					
			Иначе
				СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + ЗначениеСтрокой + "
				|";
			КонецЕсли;
			
		КонецЦикла;
		
		Если Выборка.Выполнена Тогда
			Если НЕ Сделка Тогда
				ИсторияВыполнения = ИсторияВыполнения + "
					|<P><span style='font-size: 10pt;'>" + Формат(Выборка.ДатаИсполнения,"ДФ='дд.ММ.гггг ЧЧ:мм'") + " / <STRONG>" + Выборка.CRM_ТочкаМаршрута + "</STRONG> / " + Выборка.Исполнитель + " / " + СокрЛП(Выборка.CRM_СостояниеСтрокой) + "</span></P>";
			Иначе
				ИсторияВыполнения = ИсторияВыполнения + Формат(Выборка.ДатаИсполнения,"ДФ='дд.ММ.гггг ЧЧ:мм'") + "
														|" + Выборка.CRM_ТочкаМаршрута + "
														|" + Выборка.Исполнитель + "
														|" + СокрЛП(Выборка.CRM_СостояниеСтрокой);
			КонецЕсли;
			Если НЕ Сделка Тогда
				ИсторияВыполнения = ИсторияВыполнения + "
					|<P><span style='font-size: 10pt;'>" + СокрЛП(СтрЗаменить(Выборка.РезультатВыполнения,Символы.ПС,"<br>")) + "</P>";
			Иначе
				ИсторияВыполнения = ИсторияВыполнения + "
									|" + СокрЛП(СтрЗаменить(Выборка.РезультатВыполнения,Символы.ПС,"
									|"));
			КонецЕсли;
			Если НЕ СтрокаОбъектовПоЗадаче = "" И НЕ Сделка Тогда
				ИсторияВыполнения = ИсторияВыполнения + СтрокаОбъектовПоЗадаче;
			Иначе
				ИсторияВыполнения = ИсторияВыполнения + "
									|" + СтрокаОбъектовПоЗадаче;
			КонецЕсли;
		Иначе
			Если НЕ Сделка Тогда
				ТекущаяЗадача = ТекущаяЗадача + "
					|<P><span style='font-size: 10pt;'>" + Формат(Выборка.Дата,"ДФ='дд.ММ.гггг ЧЧ:мм'") + " / <STRONG>" + Выборка.CRM_ТочкаМаршрута + "</STRONG> / " + ?(ТипЗнч(Выборка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"),БизнесПроцессыИЗадачиСервер.РольСтрокой(Выборка.Исполнитель),Выборка.Исполнитель) + " / " + СокрЛП(Выборка.CRM_СостояниеСтрокой) + "</span></P>";
			Иначе
				ТекущаяЗадача = ТекущаяЗадача + Формат(Выборка.Дата,"ДФ='дд.ММ.гггг ЧЧ:мм'") + "
							|" + Выборка.CRM_ТочкаМаршрута + "
							|" + ?(ТипЗнч(Выборка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"),БизнесПроцессыИЗадачиСервер.РольСтрокой(Выборка.Исполнитель),Выборка.Исполнитель) + "
							|" + СокрЛП(Выборка.CRM_СостояниеСтрокой);
			КонецЕсли;
			Если НЕ СтрокаОбъектовПоЗадаче = "" И НЕ Сделка Тогда
				ТекущаяЗадача = ТекущаяЗадача + СтрокаОбъектовПоЗадаче;
			Иначе
				ТекущаяЗадача = ТекущаяЗадача + "
								|" + СтрокаОбъектовПоЗадаче;
			КонецЕсли;
			Если НЕ Сделка Тогда
				ТекущаяЗадача = ТекущаяЗадача + "
					|<P><span style='color: #1955ae; font-size: 10pt;'"">" + СокрЛП(СтрЗаменить(Выборка.Описание,Символы.ПС,"<br>")) + "</span></P>";
			Иначе
				ТекущаяЗадача = ТекущаяЗадача + "
							|" + СокрЛП(СтрЗаменить(Выборка.Описание,Символы.ПС,"
							|"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ИсторияВыполнения = "" Тогда
		Если НЕ Сделка Тогда
			ИсторияВыполнения = "<P><span style='font-size: 10pt;'><span style='font-size: 10pt;'><EM><STRONG>"
				+ НСтр("ru = 'История выполнения'")+"</STRONG></EM></span></P>" + ИсторияВыполнения;
		Иначе
			ИсторияВыполнения = НСтр("ru = 'История выполнения'") + "
							|" + ИсторияВыполнения + "
							|";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь); // -- VOG Ульянов И.В. 11.03.2020 CRM-406
	
	Если НЕ Сделка Тогда
		Возврат ТекущаяЗадача + ИсторияВыполнения;
	Иначе
		Возврат ТекущаяЗадача + "
								|" + ИсторияВыполнения;
	КонецЕсли;
	
КонецФункции

//
//
Функция СформироватьОписаниеЗадачи(Задача, Сделка = Ложь) Экспорт
	
	Тип = ТипЗнч(Задача);
	ТипСтрокой = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип);
	Если ТипСтрокой = Неопределено Тогда
		
		Описание =
		"<html>
		|<head>
		|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
		|<title></title>
		|</head>
		|<body>
		|</body>
		|</html>";
		Возврат Описание;
		
	КонецЕсли;
	
	Если (НЕ Задача.CRM_Личная) И (Задача <> Задачи.ЗадачаИсполнителя.ПустаяСсылка()) Тогда
		Если НЕ Сделка Тогда
			ОписаниеБизнесПроцесса = ?(Задача.БизнесПроцесс.КартаМаршрута.ОписаниеБизнесПроцессаВСодержаниеЗадачи,СформироватьОписаниеБизнесПроцесса(Задача),"");
		КонецЕсли;
		ИсторияБизнесПроцесса = ?(Задача.БизнесПроцесс.КартаМаршрута.ИсторияБизнесПроцессаВСодержаниеЗадачи,СформироватьИсториюБизнесПроцесса(Задача),"");
		Описание = "";
	Иначе
		ОписаниеБизнесПроцесса = "";
		ИсторияБизнесПроцесса = "";
		
		Стр = СокрЛП(Задача.Описание);
		Стр = СтрЗаменить(Стр, Символы.ПС, "</BR>");
		Стр = СтрЗаменить(Стр, Символы.Таб, "&ensp;&ensp;&ensp;");
		Описание = Стр;
	КонецЕсли;
	
	ОписаниеТочкиМаршрута = "
	|<html>
	|<head>
	|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
	|<title></title>
	|</head>
	|<body>
	|<p>" + ОписаниеБизнесПроцесса + ИсторияБизнесПроцесса + Описание;
	
	ИтоговаяСтрока = ОписаниеТочкиМаршрута;
	
	ИтоговаяСтрока = ИтоговаяСтрока + "
	//|</FONT>
	|</body>
	|</html>";
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

Функция ПолучитьПредставлениеДатыДействия(ДатаДействия) Экспорт
	
	НомерДняНедели = ДеньНедели(ДатаДействия);
	
	Если НомерДняНедели = 1 Тогда
		Результат = "пн";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Результат = "вт";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Результат = "ср";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Результат = "чт";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Результат = "пт";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Результат = "сб";
	ИначеЕсли НомерДняНедели = 7 Тогда
		Результат = "вс";
	Иначе
		// Непонятно, что это такое. Пусть будет воскресенье.
		Результат = "вс";
	КонецЕсли;
	
	Результат = Результат + " " + День(ДатаДействия);
	
	НомерМесяца = Месяц(ДатаДействия);
	
	Если НомерМесяца = 1 Тогда
		Результат = Результат + " " + "янв";
	ИначеЕсли НомерМесяца = 2 Тогда
		Результат = Результат + " " + "фев";
	ИначеЕсли НомерМесяца = 3 Тогда
		Результат = Результат + " " + "мар";
	ИначеЕсли НомерМесяца = 4 Тогда
		Результат = Результат + " " + "апр";
	ИначеЕсли НомерМесяца = 5 Тогда
		Результат = Результат + " " + "мая";
	ИначеЕсли НомерМесяца = 6 Тогда
		Результат = Результат + " " + "июн";
	ИначеЕсли НомерМесяца = 7 Тогда
		Результат = Результат + " " + "июл";
	ИначеЕсли НомерМесяца = 8 Тогда
		Результат = Результат + " " + "авг";
	ИначеЕсли НомерМесяца = 9 Тогда
		Результат = Результат + " " + "сен";
	ИначеЕсли НомерМесяца = 10 Тогда
		Результат = Результат + " " + "окт";
	ИначеЕсли НомерМесяца = 11 Тогда
		Результат = Результат + " " + "ноя";
	ИначеЕсли НомерМесяца = 12 Тогда
		Результат = Результат + " " + "дек";
	Иначе
		// Вообще непонятно... Пусть будет бобр.
		Результат = Результат + " " + "бобр";
	КонецЕсли;
	
	Результат = Результат + ", " + Формат(ДатаДействия, "ДФ=HH:mm; ДЛФ=T");
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////
// Создание и настройка СКД для Процеса Объекта.

Функция ПолучитьСхемуКомпоновкиПоИмениОбъекта(ИмяОбъекта) Экспорт
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник1";
	Источник.СтрокаСоединения="";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ПолучитьТекстЗапросаПоИмениОбъекта(ИмяОбъекта);
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "Источник1";
	
	Возврат СхемаКомпоновки;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоИмениОбъекта(ИмяОбъекта)
	
	Если ИмяОбъекта = "CRM_Интерес" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	CRM_Интерес.Автор,
		|	CRM_Интерес.Ответственный,
		|	CRM_Интерес.Партнер,
		|	CRM_Интерес.КонтактноеЛицо,
		|	CRM_Интерес.Подразделение,
		|	CRM_Интерес.ПотенциальныйКлиент,
		|	CRM_Интерес.ТипУслуги,
		|	CRM_Интерес.СостояниеИнтереса,
		|	CRM_Интерес.Дата,
		|	CRM_Интерес.Офис,
		|	CRM_Интерес.Организация,
		|	CRM_Интерес.ОжидаемаяВыручка,
		|	CRM_Интерес.Ссылка,
		|	ИсточникиПервичногоИнтереса.КаналПервичногоИнтереса,
		|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
		|		ПО CRM_Интерес.Дата = ИсточникиПервичногоИнтереса.Период
		|			И CRM_Интерес.Ссылка = ИсточникиПервичногоИнтереса.Сделка
		|			И (ВЫБОР
		|				КОГДА НЕ CRM_Интерес.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|					ТОГДА CRM_Интерес.Партнер = ИсточникиПервичногоИнтереса.Партнер
		|				ИНАЧЕ CRM_Интерес.ПотенциальныйКлиент = ИсточникиПервичногоИнтереса.Партнер
		|			КОНЕЦ)
		|ГДЕ
		|	НЕ CRM_Интерес.ПометкаУдаления
		|	И CRM_Интерес.Ссылка = &Ссылка";
	ИначеЕсли ИмяОбъекта = "Пользователи" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.ПометкаУдаления,
		|	Пользователи.Наименование,
		|	Пользователи.CRM_Планируемый,
		|	Пользователи.CRM_УчаствуетВАнкетировании,
		|	Пользователи.ФизическоеЛицо,
		|	Пользователи.Комментарий,
		|	Пользователи.Недействителен,
		|	Пользователи.Подготовлен,
		|	Пользователи.Подразделение,
		|	Пользователи.CRM_ДолжностнаяПозиция,
		|	ВЫБОР
		|		КОГДА Пользователи.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.CRM_ОфисыКомпании.ПустаяСсылка)
		|		ИНАЧЕ Пользователи.Подразделение.CRM_Офис
		|	КОНЕЦ КАК Офис
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &Ссылка";
	Иначе
		
		ЭтоДокумент			= Истина;
		ОбъектМетаданных	= Метаданные.Справочники.Найти(ИмяОбъекта);
		ЭтоДокумент			= (ОбъектМетаданных = Неопределено);
		
		ТекстЗапроса = "ВЫБРАТЬ";
		
		ТекстПолей = "";
		Если ЭтоДокумент Тогда
			Для Каждого МетаРеквизит ИЗ Метаданные.Документы[ИмяОбъекта].Реквизиты Цикл
				ТекстПолей = ТекстПолей + ?(ТекстПолей = "","",",")+"
				|	"+ИмяОбъекта+"."+МетаРеквизит.Имя;
			КонецЦикла;
		
			Для Каждого МетаРеквизит ИЗ Метаданные.Документы[ИмяОбъекта].СтандартныеРеквизиты Цикл
				ТекстПолей = ТекстПолей + ?(ТекстПолей = "","",",")+"
				|	"+ИмяОбъекта+"."+МетаРеквизит.Имя;
			КонецЦикла;
		Иначе
			Для Каждого МетаРеквизит ИЗ Метаданные.Справочники[ИмяОбъекта].Реквизиты Цикл
				ТекстПолей = ТекстПолей + ?(ТекстПолей = "","",",")+"
				|	"+ИмяОбъекта+"."+МетаРеквизит.Имя;
			КонецЦикла;
			
			Для Каждого МетаРеквизит ИЗ Метаданные.Справочники[ИмяОбъекта].СтандартныеРеквизиты Цикл
				ТекстПолей = ТекстПолей + ?(ТекстПолей = "","",",")+"
				|	"+ИмяОбъекта+"."+МетаРеквизит.Имя;
			КонецЦикла;
		КонецЕсли;
		
		ТекстТаблицы = "
		|ИЗ
		|	"+?(ЭтоДокумент,"Документ.","Справочник.")+ИмяОбъекта+" КАК "+ИмяОбъекта;
		
		ТекстУсловия = "
		|ГДЕ
		|	НЕ "+ИмяОбъекта+".ПометкаУдаления
		|	И "+ИмяОбъекта+".Ссылка = &Ссылка";
		
		ТекстЗапроса = ТекстЗапроса + ТекстПолей + ТекстТаблицы + ТекстУсловия;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИменаПолейДляОтбораПоИмениОбъекта(ИмяОбъекта) Экспорт
	
	МассивПолейОтбора = Новый Массив;
	
	Если ИмяОбъекта = "CRM_Интерес" Тогда
		Если НЕ Метаданные.Документы[ИмяОбъекта].Реквизиты.Найти("ТипУслуги") = Неопределено Тогда
			МассивПолейОтбора.Добавить("ТипУслуги");
		КонецЕсли;
		
		Если НЕ Метаданные.Документы[ИмяОбъекта].Реквизиты.Найти("Офис") = Неопределено Тогда
			МассивПолейОтбора.Добавить("Офис");
		КонецЕсли;
		
		Если НЕ Метаданные.Документы[ИмяОбъекта].Реквизиты.Найти("Подразделение") = Неопределено Тогда
			МассивПолейОтбора.Добавить("Подразделение");
		КонецЕсли;
	ИначеЕсли ИмяОбъекта = "Пользователи" Тогда
		МассивПолейОтбора.Добавить("Офис");
		МассивПолейОтбора.Добавить("Подразделение");
		МассивПолейОтбора.Добавить("Ссылка");
	Иначе
		ЭтоДокумент			= Истина;
		ОбъектМетаданных	= Метаданные.Справочники.Найти(ИмяОбъекта);
		ЭтоДокумент			= (ОбъектМетаданных = Неопределено);
		Если ЭтоДокумент Тогда
			Если НЕ Метаданные.Документы[ИмяОбъекта].Реквизиты.Найти("Организация") = Неопределено Тогда
				МассивПолейОтбора.Добавить("Организация");
			КонецЕсли;
			
			Если НЕ Метаданные.Документы[ИмяОбъекта].Реквизиты.Найти("Подразделение") = Неопределено Тогда
				МассивПолейОтбора.Добавить("Подразделение");
			КонецЕсли;
			
			Если НЕ Метаданные.Документы[ИмяОбъекта].Реквизиты.Найти("Ответственный") = Неопределено Тогда
				МассивПолейОтбора.Добавить("Ответственный");
			ИначеЕсли НЕ Метаданные.Документы[ИмяОбъекта].Реквизиты.Найти("Менеджер") = Неопределено Тогда
				МассивПолейОтбора.Добавить("Менеджер");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивПолейОтбора;
	
КонецФункции

Функция СкомпоноватьНастройки(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных) Экспорт

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	// Добавим выбранные поля
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат КомпоновщикНастроек.Настройки;
	
КонецФункции

Процедура ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,ИмяОбъекта) Экспорт
	
	МассивПолейОтбора = ПолучитьИменаПолейДляОтбораПоИмениОбъекта(ИмяОбъекта);
	
	Для Каждого ИмяПоля ИЗ МассивПолейОтбора Цикл
		
		Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Элемент = НастройкиКомпоновки.ДоступныеПоляОтбора.НайтиПоле(Поле);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.НайтиПоТипу(Элемент.Тип.Типы()[0]).ПолноеИмя());
		
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
		ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		//ЭлементОтбора.ЛевоеЗначение = Элемент.Поле;
		ЭлементОтбора.ЛевоеЗначение = ПолеОтбораЛевоеЗначение;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Ложь;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.ПравоеЗначение = МенеджерОбъекта.ПустаяСсылка();
	КонецЦикла;
	
КонецПроцедуры
