////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик события ПриИзменении поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма             - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент           - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     ЭтоТабличнаяЧасть - Булево           - Флаг того, что элемент является частью таблицы формы.
//
Процедура ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт

	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	// Если это очистка, то сбрасываем представление.
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
// +CRM
	Если Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
	    Текст = СокрЛП(Элемент.Заголовок);
	Иначе
		Текст = СокрЛП(Элемент.ТекстРедактирования);
	КонецЕсли; 
	Попытка
		Форма[ДанныеСтроки.ИмяРеквизита] = Текст;
	Исключение
	КонецПопытки;
	//Текст = Элемент.ТекстРедактирования;
// -CRM
	
	Если ПустаяСтрока(Текст) Тогда
		ДанныеЗаполнения[Элемент.Имя] = "";
		Если ЭтоТабличнаяЧасть Тогда
			ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = "";
		КонецЕсли;
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.ЗначенияПолей = Неопределено;
		// ++ VOG Солодов В.В. 27.01.2021 DEV-64
		ДанныеСтроки.Значение = "";
		// -- VOG Солодов В.В. 27.01.2021 DEV-64
		Возврат;
	КонецЕсли;
	
	// +CRM
	// Разложить строку телефона по полям
	Если ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
		ИЛИ ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Текст);
		// ++ VOG Солодов В.В. 25.02.2020 CRM-196
		ДанныеСтроки.Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "", ДанныеСтроки.Комментарий);
		// До изменения
		//ДанныеСтроки.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(ДанныеСтроки.Представление, ДанныеСтроки.Вид);
		// -- VOG Солодов В.В. 25.02.2020
		Попытка
			Форма[ДанныеСтроки.ИмяРеквизита] = ДанныеСтроки.Представление;
		Исключение
		КонецПопытки;
	Иначе
		// -CRM
		// ++ VOG Солодов В.В. 25.02.2020 CRM-196
		// До изменения
		//ДанныеСтроки.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Текст, ДанныеСтроки.Вид);
		// -- VOG Солодов В.В. 25.02.2020
		ДанныеСтроки.Представление = Текст;
		// +CRM
	КонецЕсли;
	// -CRM
	
	// ++ VOG Солодов В.В. 25.02.2020 CRM-196
	ДанныеСтроки.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(
		Текст, ДанныеСтроки.Вид, Ложь); // +++ Кулаков П.Л. CRM-839
	// -- VOG Солодов В.В. 25.02.2020
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = ДанныеСтроки.ЗначенияПолей;
		ДанныеЗаполнения[Элемент.Имя + "Значение"] 		= ДанныеСтроки.Значение; // VOG Солодов В.В. 25.02.2020 CRM-196
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма                - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент              - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     Модифицированность   - Булево           - Устанавливаемый флаг модифицированности формы.
//     СтандартнаяОбработка - Булево           - Устанавливаемый флаг стандартной обработки события формы.
//
Процедура НачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	
	// +CRM
	//// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	//Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
	//	Если ДанныеЗаполнения[Элемент.Имя] <> Элемент.ТекстРедактирования Тогда
	//		ДанныеЗаполнения[Элемент.Имя] = Элемент.ТекстРедактирования;
	//		ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть);
	//		Форма.Модифицированность = Истина;
	//	КонецЕсли;
	//	ТекстРедактирования = Элемент.ТекстРедактирования;
	//Иначе 
	//	ТекстРедактирования = ?(ЗначениеЗаполнено(ДанныеСтроки.ЗначенияПолей), Форма[Элемент.Имя], "");
	//КонецЕсли;
	// -CRM
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", 	ДанныеСтроки.Вид);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", 			ДанныеСтроки.ЗначенияПолей);
	// ++ VOG Солодов В.В. 03.03.2020 CRM-196
	ПараметрыОткрытия.Вставить("Значение", 					"");
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Значение) Тогда
		ПараметрыОткрытия.Значение = ДанныеСтроки.Значение;
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЗначенияПолей) Тогда
			
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ДанныеСтроки.ЗначенияПолей) Тогда
				ДанныеXML = ДанныеСтроки.ЗначенияПолей;
			Иначе
				
				СтруктураКИ = Новый Структура;
				СтруктураКИ.Вставить("ЗначенияПолей", 			ДанныеСтроки.ЗначенияПолей);
				СтруктураКИ.Вставить("Представление", 			ДанныеСтроки.Представление);
				СтруктураКИ.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
				
				// ++ VOG Солодов В.В. 08.10.2020 CRM-961
				СтруктураРезультат = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПривестиКонтактнуюИнформациюXML(СтруктураКИ);
				ДанныеXML = СтруктураРезультат.ДанныеXML;
				// -- VOG Солодов В.В. 08.10.2020 CRM-961
				
			КонецЕсли;
			
			ПараметрыОткрытия.ЗначенияПолей 	= ДанныеXML;
			ПараметрыОткрытия.Значение 			= УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияВJSON(
				ДанныеXML, ДанныеСтроки.Тип);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			
			Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(
				ДанныеСтроки.Представление, ДанныеСтроки.Вид);
			ПараметрыОткрытия.Значение = Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 03.03.2020
	
	//*** Описание
	//*** 12 апреля 2019 г.
	//*** Блашин Евгений Игоревич VOG Начало
	//Посмотрим есть ли координаты
	Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ДанныеСтроки.Вид,"вогВводитьАдресЯндексом") Тогда
		
		ПараметрыОткрытия.Вставить("Широта",0);
		ПараметрыОткрытия.Вставить("Долгота",0);
		
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид",ДанныеСтроки.Вид));
		
		Если НайденныеСтроки.Количество() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОткрытия,НайденныеСтроки[0],"Широта,Долгота");
		КонецЕсли; 
		
	КонецЕсли; 
	
	//*** Блашин Евгений Игоревич VOG Окончание 
	Если Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
		
		ПараметрыОткрытия.Вставить("Представление", ДанныеСтроки.Представление);
		
	Иначе 
		
		ПараметрыОткрытия.Вставить("Представление", Элемент.ТекстРедактирования);
		
	КонецЕсли;

	ПараметрыОткрытия.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
	// +CRM
	ПараметрыОткрытия.Вставить("БылиВнесеныИзменения", Ложь);
	Если CRM_ОбщегоНазначенияСервер.ПоТипуКонтактнойИнформацииПолучитьНомер(ДанныеСтроки.Тип) = 2 Тогда
		// +СофтФон
		врКодСтраны		= Неопределено;
		врКодГорода		= Неопределено;
		врНомерТелефона	= Неопределено;
		врПредставление	= Неопределено;
		// -СофтФон
		Если CRM_ОбщегоНазначенияСервер.ЭтоСтрокаXML(ДанныеСтроки.ЗначенияПолей) Тогда
			СтарыйФормат = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(ДанныеСтроки.ЗначенияПолей);
			// +СофтФон
			ЗначенияПолей = СтарыйФормат.ЗначенияПолей;
			Если ЗначениеЗаполнено(СтарыйФормат.Представление) И НЕ (ПараметрыОткрытия.Представление = СтарыйФормат.Представление) Тогда
				ПараметрыОткрытия.Представление			= СтарыйФормат.Представление;
				ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
			КонецЕсли;	
			врПредставление	= "";
			// -СофтФон
		Иначе
			Если ТипЗнч(ДанныеСтроки.ЗначенияПолей) = Тип("СписокЗначений") Тогда
				ЗначенияПолей = ДанныеСтроки.ЗначенияПолей;
			Иначе
				// ++ VOG Солодов В.В. 25.02.2020 CRM-196
				ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПреобразоватьСтрокуВСписокПолей(ДанныеСтроки.ЗначенияПолей);
				// До изменения
				//ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеСтроки.ЗначенияПолей);
				// -- VOG Солодов В.В. 25.02.2020
			КонецЕсли;
		КонецЕсли;
		// +СофтФон
		Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
			Если СтрокаЗначения.Представление = "Представление" Тогда
				Если ЗначениеЗаполнено(СтрокаЗначения.Значение) И НЕ (ПараметрыОткрытия.Представление = СтрокаЗначения.Значение) Тогда
					ПараметрыОткрытия.Представление			= СтрокаЗначения.Значение;
					ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
				КонецЕсли;	
				врПредставление	= "";
			ИначеЕсли СтрокаЗначения.Представление = "КодСтраны" Тогда
				врКодСтраны = СокрЛП(СтрокаЗначения.Значение); 
			ИначеЕсли СтрокаЗначения.Представление = "КодГорода" Тогда
				врКодГорода = СокрЛП(СтрокаЗначения.Значение); 
			ИначеЕсли СтрокаЗначения.Представление = "НомерТелефона" Тогда
				врНомерТелефона = СокрЛП(СтрокаЗначения.Значение); 
			КонецЕсли;
		КонецЦикла;
		// +СофтФон
		Если врКодСтраны = Неопределено Тогда
			ЗначенияПолей.Добавить("", "КодСтраны");
		КонецЕсли;	
		Если врКодГорода = Неопределено Тогда
			ЗначенияПолей.Добавить("", "КодГорода");
		КонецЕсли;	
		Если врНомерТелефона = Неопределено Тогда
			ЗначенияПолей.Добавить("", "НомерТелефона");
		КонецЕсли;	
		Если врПредставление = Неопределено Тогда
			ЗначенияПолей.Добавить("", "Представление");
		КонецЕсли;	
		врПредставление = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ПараметрыОткрытия.Представление);
		Если ЗначениеЗаполнено(врПредставление) Тогда
			Если СтрДлина(врПредставление) > 5 Тогда
				сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();	
				// В представлении есть номер телефона.
				ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
				// Получаем структуру полей по представлению.
				СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ПараметрыОткрытия.Представление);
				// Если не заполнены код страны или код города, то заполняем их по умолчанию.
				Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодСтраны) Тогда
					СтруктураНомера.КодСтраны = ПараметрыСервера.КодСтраны;
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
					СтруктураНомера.КодГорода = ПараметрыСервера.КодГорода;
				КонецЕсли;	
				// Заполняем значения из структуры.
				Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
					Если СтрокаЗначения.Представление = "КодСтраны" Тогда
						Если НЕ (СтрокаЗначения.Значение = СтруктураНомера.КодСтраны) Тогда
							СтрокаЗначения.Значение					= СтруктураНомера.КодСтраны;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "КодГорода" Тогда
						Если НЕ (СтрокаЗначения.Значение = СтруктураНомера.КодГорода) Тогда
							СтрокаЗначения.Значение					= СтруктураНомера.КодГорода;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "НомерТелефона" Тогда
						Если НЕ (СтрокаЗначения.Значение = СтруктураНомера.НомерТелефона) Тогда
							СтрокаЗначения.Значение					= СтруктураНомера.НомерТелефона;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "Представление" Тогда
						Если НЕ (СтрокаЗначения.Значение = ПараметрыОткрытия.Представление) Тогда
							СтрокаЗначения.Значение					= ПараметрыОткрытия.Представление;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
			Иначе	
				сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();					
				// Заполним код страны и код города по умолчанию.
				ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
				Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
					Если СтрокаЗначения.Представление = "КодСтраны" Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаЗначения.Значение) Тогда
							СтрокаЗначения.Значение					= ПараметрыСервера.КодСтраны;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "КодГорода" Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаЗначения.Значение) 
							И ((СтрДлина(ПараметрыСервера.КодГорода) + СтрДлина(врПредставление)) = 10) Тогда
							СтрокаЗначения.Значение					= ПараметрыСервера.КодГорода;
							ПараметрыОткрытия.БылиВнесеныИзменения 	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "НомерТелефона" Тогда
						Если НЕ (СтрокаЗначения.Значение = врПредставление) Тогда
							СтрокаЗначения.Значение					= врПредставление;
							ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
						КонецЕсли;	
					ИначеЕсли СтрокаЗначения.Представление = "Представление" Тогда
						Если НЕ (СтрокаЗначения.Значение = ПараметрыОткрытия.Представление) Тогда
							СтрокаЗначения.Значение					= ПараметрыОткрытия.Представление;
							ПараметрыОткрытия.БылиВнесеныИзменения 	= Истина;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		Иначе	
			сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();				
		// Если это новый номер, то заполним код страны и код города по умолчанию.
			ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
			Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
				Если СтрокаЗначения.Представление = "КодСтраны" Тогда
					Если ПустаяСтрока(СтрокаЗначения.Значение) Тогда
						СтрокаЗначения.Значение					= ПараметрыСервера.КодСтраны;
						ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
					КонецЕсли;	
				ИначеЕсли СтрокаЗначения.Представление = "КодГорода" И СтрНайти(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ДанныеСтроки.Вид, "ИмяПредопределенныхДанных"), "Мобильный") = 0 Тогда
					Если ПустаяСтрока(СтрокаЗначения.Значение) Тогда
						СтрокаЗначения.Значение					= ПараметрыСервера.КодГорода;
						ПараметрыОткрытия.БылиВнесеныИзменения	= Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		Если ПараметрыОткрытия.БылиВнесеныИзменения Тогда
			ПараметрыОткрытия.ЗначенияПолей = CRM_ОбщегоНазначенияСервер.ЗначениеПолейВXML(ЗначенияПолей, ДанныеСтроки.Тип);
		КонецЕсли;	
		// -СофтФон
	КонецЕсли;
	// -CRM
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	// +СофтФон
	Форма[Элемент.Имя] = ПараметрыОткрытия.Представление;
	// -СофтФон
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеЗаполнения",  ДанныеЗаполнения);
	Оповещение.ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть", ЭтоТабличнаяЧасть);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,, Оповещение);
КонецПроцедуры

// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.).
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма      - УправляемаяФорма - Форма владельца контактной информации.
//     ИмяКоманды - Строка           - Имя автоматически сгенерированной команды действия.
//
Процедура ВыполнитьКоманду(Знач Форма, Знач ИмяКоманды) Экспорт
	
	Если ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода" Тогда
		Оповещение = Новый ОписаниеОповещения("КонтактнаяИнформацияДобавитьПолеВводаЗавершение", ЭтотОбъект, Новый Структура);
			
		Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
		// +CRM
		//Форма.ПоказатьВыборИзМеню(Оповещение, Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов, Форма.Элементы.КонтактнаяИнформацияДобавитьПолеВвода);
		СписокДобавляемыхЭлементовКонтактнойИнформации	= Новый СписокЗначений;
		Для Каждого ЭлементСписка Из Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов Цикл
			СписокДобавляемыхЭлементовКонтактнойИнформации.Добавить(ЭлементСписка.Значение.Ссылка, ЭлементСписка.Представление, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
		КонецЦикла;
		СписокДобавляемыхЭлементовКонтактнойИнформации.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		Если Найти(Форма.ИмяФормы, ".Партнеры") > 0 Тогда
			// Удаляем лишние виды КИ
			МассивВладельцевКИ = Новый Массив;
			МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПартнеры"));
			Если Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
				МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания"));
			ИначеЕсли Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо"));
			КонецЕсли;
			// Удаляем 
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если МассивВладельцевКИ.Найти(ЭлементОписания.Родитель) = Неопределено Тогда
					ЭлементСписка = СписокДобавляемыхЭлементовКонтактнойИнформации.НайтиПоЗначению(ЭлементОписания.Вид);
					Если НЕ (ЭлементСписка = Неопределено) Тогда
						СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Попытка
			РедактироватьДР = Форма.РедактироватьДР;
		Исключение
			РедактироватьДР = Истина;
		КонецПопытки;	
		Если НЕ РедактироватьДР Тогда
			// Удаляем из списка выбора скрытые элементы КИ.
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если НЕ ЭлементОписания.Выводить Тогда
					ЭлементСписка = СписокДобавляемыхЭлементовКонтактнойИнформации.НайтиПоЗначению(ЭлементОписания.Вид);
					Если НЕ (ЭлементСписка = Неопределено) Тогда
						СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
					КонецЕсли;
				КонецЕсли;			
			КонецЦикла;	
		КонецЕсли;	
		Форма.ПоказатьВыборИзМеню(Оповещение, СписокДобавляемыхЭлементовКонтактнойИнформации, Форма.Элементы.КонтактнаяИнформацияДобавитьПолеВвода);
		// -CRM	
		
		Возврат;
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "Команда") Тогда
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "Команда", "");
		КомандаКонтекстногоМеню = Неопределено;
	Иначе
		КомандаКонтекстногоМеню = КомандаКонтекстногоМеню(ИмяКоманды);
		ИмяРеквизита = КомандаКонтекстногоМеню.ИмяРеквизита;
	КонецЕсли;
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	ТипКонтактнойИнформации = НайденнаяСтрока.Тип;
	
	Если КомандаКонтекстногоМеню <> Неопределено Тогда
		Если КомандаКонтекстногоМеню.Команда = "Комментарий" Тогда
			ВвестиКомментарий(Форма, КомандаКонтекстногоМеню.ИмяРеквизита, НайденнаяСтрока, Результат);
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "История" Тогда
			УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуИсторииИзменений(Форма, НайденнаяСтрока);
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "КартаЯндекс" Тогда
			УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(НайденнаяСтрока.Представление, "Яндекс.Карты");
		ИначеЕсли КомандаКонтекстногоМеню.Команда = "КартаGoogle" Тогда
			УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(НайденнаяСтрока.Представление, "GoogleMaps");
		Иначе
			ПервыйЭлемент = НайденнаяСтрока.ИмяРеквизита;
			Индекс =Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Индекс(НайденнаяСтрока);
			// +CRM
			//Если КомандаКонтекстногоМеню.НаправлениеПеремещения = 1 Тогда
			//	Если Индекс < Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Количество() - 1 Тогда
			//		ВторойЭлемент = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Получить(Индекс + 1).ИмяРеквизита;
			//	КонецЕсли;
			//Иначе
			//	Если Индекс > 0 Тогда
			//		ВторойЭлемент = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Получить(Индекс - 1).ИмяРеквизита;
			//	КонецЕсли;
			//КонецЕсли;
			ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
			
			ОтборПоВидуИКолонке = Новый Структура("Вид, Колонка", НайденнаяСтрока.Вид, НайденнаяСтрока.Колонка);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВидуИКолонке);
			СписокНайденныхСтрок = Новый СписокЗначений;
			СписокНайденныхСтрок.ЗагрузитьЗначения(НайденныеСтроки);
			СтрокаСписка = СписокНайденныхСтрок.НайтиПоЗначению(НайденнаяСтрока);
			
			Если КомандаКонтекстногоМеню.НаправлениеПеремещения = 1 Тогда
				Если СписокНайденныхСтрок.Индекс(СтрокаСписка) < (СписокНайденныхСтрок.Количество()-1) Тогда
					ВторойЭлемент = СписокНайденныхСтрок[СписокНайденныхСтрок.Индекс(СтрокаСписка)+1].Значение.ИмяРеквизита;
				КонецЕсли;
			Иначе
				Если СписокНайденныхСтрок.Индекс(СтрокаСписка) > 0 Тогда
					ВторойЭлемент = СписокНайденныхСтрок[СписокНайденныхСтрок.Индекс(СтрокаСписка)-1].Значение.ИмяРеквизита;
				КонецЕсли;
			КонецЕсли;
			// -CRM
			Результат = Новый Структура("ПоменятьМестамиЭлементы, ПервыйЭлемент, ВторойЭлемент", Истина, ПервыйЭлемент, ВторойЭлемент);
			ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
		КонецЕсли;
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьАдрес(Форма, ИмяРеквизита, НайденнаяСтрока, Результат);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		АдресПочты = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("", АдресПочты, ТипКонтактнойИнформации);
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		
		Параметры = Новый Структура("НомерТелефона, ТипКонтактнойИнформации");
		Параметры.НомерТелефона = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		Параметры.ТипКонтактнойИнформации = ТипКонтактнойИнформации;
		
		Если ПустаяСтрока(Параметры.НомерТелефона) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Для совершения звонка или отправки SMS требуется ввести номер телефона.'"));
			Возврат;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
			Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
			ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
			Форма.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Форма.Элементы[ИмяКоманды]);
		Иначе
			ПозвонитьПоТелефону(Параметры.НомерТелефона);
		КонецЕсли;
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype") Тогда
		Параметры = Новый Структура("ЛогинSkype");
		Параметры.ЛогинSkype = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		Список = Новый СписокЗначений;
		Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"));
		Список.Добавить("НачатьЧат", НСтр("ru = 'Начать чат'"));
		ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюSkype", ЭтотОбъект, Параметры);
		Форма.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Форма.Элементы[ИмяКоманды]);
		
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		АдресСсылки = Форма.Элементы[ИмяРеквизита].ТекстРедактирования;
		УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", АдресСсылки, ТипКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти // ПрограммныйИнтерфейс


#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗапускаПриложения(ВыбранныйЭлемент, Параметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

Процедура ПослеВыбораИзМенюSkype(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		Если ПустаяСтрока(ПрограммаТелефонииУстановлена("skype")) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для совершения звонка по Skype требуется установить программу.'"));
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СтрокаЗапуска = "skype:" + Параметры.ЛогинSkype;
	Если ВыбранныйЭлемент.Значение = "Позвонить" Тогда
		СтрокаЗапуска = СтрокаЗапуска + "?call";
	ИначеЕсли ВыбранныйЭлемент.Значение = "НачатьЧат" Тогда
		СтрокаЗапуска = СтрокаЗапуска + "?chat";
	Иначе
		СтрокаЗапуска = СтрокаЗапуска + "?userinfo";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапускSkype", ЭтотОбъект, СтрокаЗапуска);
	ТекстСообщения = НСтр("ru = 'Для запуска Skype необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);

КонецПроцедуры

Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			УправлениеКонтактнойИнформациейКлиент.СоздатьSMS("", Параметры.НомерТелефона, Параметры.ТипКонтактнойИнформации);
		Иначе
			ПозвонитьПоТелефону(Параметры.НомерТелефона);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗапускSkype(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДополнительныеПараметры.ДанныеЗаполнения;
	НоваяСтрока      = ДополнительныеПараметры.ДанныеСтроки;
	Результат        = ДополнительныеПараметры.Результат;
	Элемент          = ДополнительныеПараметры.Элемент;
	Форма            = ДополнительныеПараметры.Форма;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	
	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") И НоваяСтрока.ХранитьИсториюИзменений Тогда
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = ДанныеЗаполнения.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		Отбор = Новый Структура("Вид", НоваяСтрока.Вид);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;
		
		Отбор = Новый Структура("Вид", НоваяСтрока.Вид);
		НайденныеСтроки = РезультатЗакрытия.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		ЭтоИсторическаяКонтактнаяИнформация = Ложь;
		ПоследниеЗначениеПолей = "";
		
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				Если СтрСравнить(СтрокаКонтактнойИнформации.ЗначенияПолей, РезультатЗакрытия.КонтактнаяИнформация) <> 0 Тогда
					Если СтрокаКонтактнойИнформации.ДействуетС < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
						// Контактная информация стала историей.
						НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
						НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Истина;
						НоваяКонтактнаяИнформация.ИмяРеквизита= "";
					КонецЕсли;
						// Новая контактная информация.
						НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, РезультатЗакрытия);
						НоваяКонтактнаяИнформация.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
						НоваяКонтактнаяИнформация.ДействуетС = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
						НоваяКонтактнаяИнформация.ИмяРеквизита = Элемент.Имя;
						НоваяКонтактнаяИнформация.ХранитьИсториюИзменений = Истина;
						НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Ложь;
				Иначе
					НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
				КонецЕсли;
			Иначе
				НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = РезультатЗакрытия.КонтактнаяИнформация;
		// ++ VOG Солодов В.В. 02.03.2020 CRM-196
		ДанныеЗаполнения[Элемент.Имя + "Значение"] = РезультатЗакрытия.Значение;
		// -- VOG Солодов В.В. 02.03.2020
	Иначе
		Если ПустаяСтрока(НоваяСтрока.Комментарий) И Не ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
			
		ИначеЕсли Не ПустаяСтрока(НоваяСтрока.Комментарий) И ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
			
		Иначе
			Если Не ПустаяСтрока(НоваяСтрока.Комментарий) Тогда
				ЭлементКомментария = Форма.Элементы.Найти("Комментарий" + Элемент.Имя);
				Если ЭлементКомментария <> Неопределено Тогда
					ЭлементКомментария.Заголовок = РезультатЗакрытия.Комментарий;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Представление = ТекстПредставления;
		НоваяСтрока.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
		НоваяСтрока.Комментарий   = РезультатЗакрытия.Комментарий;
		//*** Описание
		//*** 12 апреля 2019 г.
		//*** Блашин Евгений Игоревич VOG Начало
		Если РезультатЗакрытия.Свойство("Широта") И РезультатЗакрытия.Свойство("Долгота") Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатЗакрытия,"Широта,Долгота");
		КонецЕсли;  
		//*** Блашин Евгений Игоревич VOG Окончание
		// ++ VOG Солодов В.В. 02.03.2020 CRM-196
		НоваяСтрока.Значение = РезультатЗакрытия.Значение;
		// -- VOG Солодов В.В. 02.03.2020
	КонецЕсли;
	
	Если РезультатЗакрытия.Свойство("АдресВВидеГиперссылки")
		И РезультатЗакрытия.АдресВВидеГиперссылки
		И НЕ ЗначениеЗаполнено(ТекстПредставления) Тогда
			ДанныеЗаполнения[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	Иначе
		ДанныеЗаполнения[Элемент.Имя] = ТекстПредставления;
	КонецЕсли;
		
	Форма.Модифицированность = Истина;
	
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
КонецПроцедуры

Процедура КонтактнаяИнформацияДобавитьПолеВводаЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		// Отказ от выбора
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
	
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат);
КонецПроцедуры


#КонецОбласти // СлужебныйПрограммныйИнтерфейс


#Область СлужебныеПроцедурыИФункции

// Возвращает строку дополнительных значений по имени реквизита.
//
// Параметры:
//    Форма   - УправляемаяФорма - передаваемая форма.
//    Элемент - ДанныеФормыСтруктураСКоллекцией - данные формы.
//
// Возвращаемое значение:
//    СтрокаКоллекции - найденные данные.
//    Неопределено    - при отсутствии данных.
//
Функция ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ЭтоТабличнаяЧасть И ДанныеСтроки <> Неопределено Тогда
		
		ПутьКСтроке = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		
		ДанныеСтроки.Представление = ПутьКСтроке[Элемент.Имя];
		ДанныеСтроки.ЗначенияПолей = ПутьКСтроке[Элемент.Имя + "ЗначенияПолей"];
		// ++ VOG Солодов В.В. 03.03.2020 CRM-196
		ДанныеСтроки.Значение      = ПутьКСтроке[Элемент.Имя + "Значение"];
		// -- VOG Солодов В.В. 03.03.2020
		
	КонецЕсли;
	
	// +CRM	
	Если НЕ (ДанныеСтроки = Неопределено) И CRM_ОбщегоНазначенияСервер.ПоТипуКонтактнойИнформацииПолучитьНомер(ДанныеСтроки.Тип) = 2 Тогда
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
			мБизнесРегион = Форма.Объект.БизнесРегион;
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Если ЗначениеЗаполнено(Форма.БизнесРегион) Тогда
				мБизнесРегион = Форма.БизнесРегион;
			Иначе				
			//	мБизнесРегион = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Форма.Объект.Владелец, "БизнесРегион");
			КонецЕсли;				
		Иначе
			мБизнесРегион = Неопределено;
		КонецЕсли;	
		Если НЕ (мБизнесРегион = Неопределено) Тогда
			ЭтоСтрокаXML = CRM_ОбщегоНазначенияСервер.ЭтоСтрокаXML(ДанныеСтроки.ЗначенияПолей);
			Если ЭтоСтрокаXML Тогда
				СтарыйФормат = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(ДанныеСтроки.ЗначенияПолей);
				ЗначенияПолей = СтарыйФормат.ЗначенияПолей;
			ИначеЕсли ТипЗнч(ДанныеСтроки.ЗначенияПолей) = Тип("СписокЗначений") Тогда
				ЗначенияПолей = ДанныеСтроки.ЗначенияПолей;
			Иначе
				// ++ VOG Солодов В.В. 25.02.2020 CRM-196
				ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ПреобразоватьСтрокуВСписокПолей(ДанныеСтроки.ЗначенияПолей);
				// До изменения
				//ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеСтроки.ЗначенияПолей);
				// -- VOG Солодов В.В. 25.02.2020
			КонецЕсли;
			КодСтраны = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(мБизнесРегион, "CRM_КодСтраны");
			Если СтрНайти(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ДанныеСтроки.Вид, "ИмяПредопределенныхДанных"), "Мобильный") = 0 Тогда
				КодГорода = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(мБизнесРегион, "CRM_КодГорода");
			КонецЕсли;
			Если НЕ ПустаяСтрока(КодСтраны) И НЕ (Лев(КодСтраны, 1) = "+") Тогда
				КодСтраны = "+" + КодСтраны;
			КонецЕсли;	
			ЗначениеКодаСтраны 	= "";
			ЗначениеКодаГорода 	= "";
			ЗначениеНомера		= "";
			ЗначениеДобавочный	= "";
			ЗначениеКомментарий	= "";
			СтрокаКодаСтраны 	= Неопределено;
			СтрокаКодаГорода 	= Неопределено;
			Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
				Если ЗначениеПоля.Представление = "КодСтраны" Тогда
					ЗначениеКодаСтраны	= ЗначениеПоля.Значение;
					СтрокаКодаСтраны	= ЗначениеПоля;
					Если НЕ ПустаяСтрока(ЗначениеКодаСтраны) И НЕ (Лев(ЗначениеКодаСтраны, 1) = "+") Тогда
						ЗначениеКодаСтраны = "+" + ЗначениеКодаСтраны;
						СтрокаКодаСтраны.Значение = ЗначениеКодаСтраны;
					КонецЕсли;	
				ИначеЕсли ЗначениеПоля.Представление = "КодГорода" Тогда
					ЗначениеКодаГорода	= ЗначениеПоля.Значение;
					СтрокаКодаГорода	= ЗначениеПоля;
				ИначеЕсли ЗначениеПоля.Представление = "НомерТелефона" Тогда
					ЗначениеНомера	= ЗначениеПоля.Значение;	
				ИначеЕсли ЗначениеПоля.Представление = "Добавочный" Тогда
					ЗначениеДобавочный	= ЗначениеПоля.Значение;	
				ИначеЕсли ЗначениеПоля.Представление = "Комментарий" Тогда
					ЗначениеКомментарий	= ЗначениеПоля.Значение;	
				КонецЕсли;	
			КонецЦикла;
			Если ПустаяСтрока(ЗначениеКодаСтраны) Тогда
				Если ПустаяСтрока(ЗначениеКодаГорода) Тогда
					Если СтрокаКодаСтраны = Неопределено Тогда
						ЗначенияПолей.Вставить(0, КодСтраны, "КодСтраны"); 
					Иначе	
						СтрокаКодаСтраны.Значение = КодСтраны;
					КонецЕсли;
					Если СтрокаКодаГорода = Неопределено Тогда
						ЗначенияПолей.Вставить(1, КодГорода, "КодГорода"); 
					Иначе	
						СтрокаКодаГорода.Значение = КодГорода;
					КонецЕсли;
					Если НЕ ПустаяСтрока(ЗначениеНомера) Тогда
						Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
							КодСтраны, КодГорода, ЗначениеНомера, ЗначениеДобавочный, ЗначениеКомментарий);
						ЗначенияПолей.Добавить(Представление, "Представление");
					КонецЕсли;	
				ИначеЕсли ЗначениеКодаГорода = КодГорода Тогда
					Если СтрокаКодаСтраны = Неопределено Тогда
						ЗначенияПолей.Вставить(0, КодСтраны, "КодСтраны"); 
					Иначе	
						СтрокаКодаСтраны.Значение = КодСтраны;
					КонецЕсли;
					Если НЕ ПустаяСтрока(ЗначениеНомера) Тогда
						Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
							КодСтраны, КодГорода, ЗначениеНомера, ЗначениеДобавочный, ЗначениеКомментарий);
						ЗначенияПолей.Добавить(Представление, "Представление");
					КонецЕсли;	
				КонецЕсли;
			ИначеЕсли ЗначениеКодаСтраны = КодСтраны Тогда
				Если ПустаяСтрока(ЗначениеКодаГорода) Тогда
					Если СтрокаКодаГорода = Неопределено Тогда
						ЗначенияПолей.Вставить(1, КодГорода, "КодГорода"); 
					Иначе	
						СтрокаКодаГорода.Значение = КодГорода;
					КонецЕсли;
					Если НЕ ПустаяСтрока(ЗначениеНомера) Тогда
						Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
							КодСтраны, КодГорода, ЗначениеНомера, ЗначениеДобавочный, ЗначениеКомментарий);
						ЗначенияПолей.Добавить(Представление, "Представление");
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			Если ЭтоСтрокаXML Тогда
				ДанныеСтроки.ЗначенияПолей = CRM_ОбщегоНазначенияСервер.ЗначениеПолейВXML(ДанныеСтроки.ЗначенияПолей, ДанныеСтроки.Тип);
				СтруктураКИ = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияПоЗначениюРеквизитов(
					CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияСлужебный_ДесериализацияТелефона(ДанныеСтроки.ЗначенияПолей, ,
					ДанныеСтроки.Тип), ДанныеСтроки.Тип);
				ДанныеСтроки.ЗначенияПолей	= СтруктураКИ.КонтактнаяИнформация;
				ДанныеСтроки.Представление	= СтруктураКИ.Представление;
				ДанныеСтроки.Комментарий	= СтруктураКИ.Комментарий;
			Иначе
				ДанныеСтроки.ЗначенияПолей = ЗначенияПолей;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// -CRM	
	
	Возврат ДанныеСтроки;
	
КонецФункции

Функция ЭтоТабличнаяЧасть(Элемент)
	
	Родитель = Элемент.Родитель;
	
	Пока ТипЗнч(Родитель) <> Тип("УправляемаяФорма") Цикл
		
		Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определение команды контекстного меню.
Функция КомандаКонтекстногоМеню(ИмяКоманды)
	
	Результат = Новый Структура("Команда, НаправлениеПеремещения, ИмяРеквизита", Неопределено, 0, Неопределено);
	
	ИмяРеквизита = СтрЗаменить(ИмяКоманды, "КонтекстноеМеню", "");
	Если СтрНачинаетсяС(ИмяРеквизита, "Вверх") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Вверх", "");
		Результат.НаправлениеПеремещения = -1;
		Результат.Команда = "Вверх";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "История") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "История", "");
		Результат.Команда = "История";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "Вниз") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Вниз", "");
		Результат.НаправлениеПеремещения = 1;
		Результат.Команда = "Вниз";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "КартаЯндекс") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "КартаЯндекс", "");
		Результат.Команда = "КартаЯндекс";
	ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "КартаGoogle") Тогда
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "КартаGoogle", "");
		Результат.Команда = "КартаGoogle";
	Иначе
		Результат.ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Комментарий", "");
		Результат.Команда = "Комментарий";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Ввод комментария из контекстного меню.
Процедура ВвестиКомментарий(Знач Форма, Знач ИмяРеквизита, Знач НайденнаяСтрока, Знач Результат)
	Комментарий = НайденнаяСтрока.Комментарий;
	
	Оповещение = Новый ОписаниеОповещения("ВвестиКомментарийЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяРеквизитаКомментария", "Комментарий" + ИмяРеквизита);
	Оповещение.ДополнительныеПараметры.Вставить("НайденнаяСтрока", НайденнаяСтрока);
	Оповещение.ДополнительныеПараметры.Вставить("ПредыдущийКомментарий", Комментарий);
	Оповещение.ДополнительныеПараметры.Вставить("Результат", Результат);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Комментарий, 
		НСтр("ru = 'Комментарий'"));
КонецПроцедуры

// Завершение немодального диалога.
Процедура ВвестиКомментарийЗавершение(Знач Комментарий, Знач ДополнительныеПараметры) Экспорт
	Если Комментарий = Неопределено Или Комментарий = ДополнительныеПараметры.ПредыдущийКомментарий Тогда
		// Отказ от ввода или нет изменений.
		Возврат;
	КонецЕсли;
	
	КомментарийБылПустой  = ПустаяСтрока(ДополнительныеПараметры.ПредыдущийКомментарий);
	КомментарийСталПустой = ПустаяСтрока(Комментарий);
	
	ДополнительныеПараметры.НайденнаяСтрока.Комментарий = Комментарий;
	
	Если КомментарийБылПустой И Не КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
	ИначеЕсли Не КомментарийБылПустой И КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
	Иначе
		Элемент = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.ИмяРеквизитаКомментария];
		Элемент.Заголовок = Комментарий;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Результат)
КонецПроцедуры

Процедура ПозвонитьПоТелефону(НомерТелефона)
	
	НомерТелефона = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", НомерТелефона, "");
	
	// По умолчанию используем "tel".
	ИмяПротокола = "tel";

	#Если НЕ ВебКлиент Тогда
		ДоступноеИмяПротокола = ПрограммаТелефонииУстановлена();
		Если ДоступноеИмяПротокола = Неопределено Тогда
			СтрокаСПредупреждением = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Для совершения звонка требуется установить программу телефонии, например'"),
					 " ", Новый ФорматированнаяСтрока("Skype",,,, "http://www.skype.com"), ".");
			ПоказатьПредупреждение(Неопределено, СтрокаСПредупреждением);
			Возврат;
		ИначеЕсли НЕ ПустаяСтрока(ДоступноеИмяПротокола) Тогда
			ИмяПротокола = ДоступноеИмяПротокола;
		КонецЕсли;
	#КонецЕсли
	
	СтрокаЗапуска = ИмяПротокола + ":" + НомерТелефона;
	
	Оповещение = Новый ОписаниеОповещения("СовершитьЗвонок", ЭтотОбъект, СтрокаЗапуска);
	ТекстСообщения = НСтр("ru = 'Для совершения звонка необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);
	
КонецПроцедуры

Процедура СовершитьЗвонок(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

// Контекстный вызов
Процедура ОбновитьКонтактнуюИнформациюФормы(Форма, Результат)

	Форма.Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

// Заполнение адреса другим адресом.
Процедура ЗаполнитьАдрес(Знач Форма, Знач ИмяРеквизита, Знач НайденнаяСтрока, Знач Результат)
	
	// Все строки - адреса,
	ВсеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НайденныеСтроки = ВсеСтроки.НайтиСтроки( Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", НайденнаяСтрока.Тип, Ложь) );
	НайденныеСтроки.Удалить( НайденныеСтроки.Найти(НайденнаяСтрока) );
	
	ЗначенияПолейДляАнализа = Новый Массив;
	Для Каждого Адрес Из НайденныеСтроки Цикл
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Идентификатор", Адрес.ПолучитьИдентификатор());
		СтруктураАдреса.Вставить("Представление", Адрес.Представление);
		СтруктураАдреса.Вставить("ЗначениеПолей", Адрес.ЗначенияПолей);
		СтруктураАдреса.Вставить("ВидАдреса", Адрес.Вид);
		ЗначенияПолейДляАнализа.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	АдресаДляЗаполнения = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.ДоступныеДляКопированияАдреса(ЗначенияПолейДляАнализа, НайденнаяСтрока.Вид);
		
	Если АдресаДляЗаполнения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для того чтобы не вводить один и тот же адрес несколько раз, можно скопировать в это поле значение, ранее введенное в соседнем поле.'")
			,, НСтр("ru = 'Копирование адреса'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьАдресЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Форма", Форма);
	Оповещение.ДополнительныеПараметры.Вставить("НайденнаяСтрока", НайденнаяСтрока);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяРеквизита",    ИмяРеквизита);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",       Результат);
	
	Форма.ПоказатьВыборИзМеню(Оповещение, АдресаДляЗаполнения, Форма.Элементы["Команда" + ИмяРеквизита]);
КонецПроцедуры

// Завершение немодального диалога.
Процедура ЗаполнитьАдресЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСтроки = ДополнительныеПараметры.Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	СтрокаИсточник = ВсеСтроки.НайтиПоИдентификатору(ВыбранныйЭлемент.Значение);
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДополнительныеПараметры.НайденнаяСтрока.ЗначенияПолей = СтрокаИсточник.ЗначенияПолей;
	ДополнительныеПараметры.НайденнаяСтрока.Значение = СтрокаИсточник.Значение; // Кайдашов 673 23/07/2020
	ДополнительныеПараметры.НайденнаяСтрока.Представление = СтрокаИсточник.Представление;
	ДополнительныеПараметры.НайденнаяСтрока.Комментарий   = СтрокаИсточник.Комментарий;
		
	ДополнительныеПараметры.Форма[ДополнительныеПараметры.ИмяРеквизита] = СтрокаИсточник.Представление;
		
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Результат);

КонецПроцедуры

// Проверяет, установлена ли программа телефонии на компьютер.
//  Проверка возможна только в тонком клиенте для Windows.
//
// Параметры:
//  ИмяПротокола - Строка - Имя проверяемого URI протокола, возможные варианты "skype", "tel", "sip".
//                          Если параметр не указан, то проверяются все протоколы. 
// 
// Возвращаемое значение:
//  Строка - имя доступного URI протокола зарегистрирована в реестре. Пустая строка - если протокол не доступен.
//  Неопределенно если проверка не возможна.
//
Функция ПрограммаТелефонииУстановлена(ИмяПротокола = Неопределено)
	
		Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			Если ЗначениеЗаполнено(ИмяПротокола) Тогда
				Возврат ?(ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола), ИмяПротокола, "");
			Иначе
				СписокПротоколов = Новый Массив;
				СписокПротоколов.Добавить("tel");
				СписокПротоколов.Добавить("sip");
				СписокПротоколов.Добавить("skype");
				Для каждого ИмяПротокола Из СписокПротоколов Цикл
					Если ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола) Тогда
						Возврат ИмяПротокола;
					КонецЕсли;
				КонецЦикла;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола)
	
	Попытка
		Оболочка = Новый COMОбъект("Wscript.Shell");
		Результат = Оболочка.RegRead("HKEY_CLASSES_ROOT\" + ИмяПротокола + "\");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции


#КонецОбласти // СлужебныеПроцедурыИФункции


#Область МетодыCRM

// Событие ПриИзменении в колонке Представление таблицы контактной информации.
Функция CRM_ПолучитьТипПроверитьЗаполнение(Форма, Элемент) Экспорт
	
	ДанныеЗаполнения = Форма;
	
	// Если это очистка, то сбрасываем представление.
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, Ложь);
	Если ДанныеСтроки=Неопределено ИЛИ НЕ ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(Текст);
	
КонецФункции

// Событие Нажатие в поле "Основной для связи" таблицы контактной информации.
//
Процедура ОсновнойДляСвязиНажатие(Форма, Элемент) Экспорт
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ОсновнойДляСвязи", "");
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].CRM_ОсновнойДляСвязи = (НЕ НайденныеСтроки[0].CRM_ОсновнойДляСвязи);
	Элемент.Картинка = ?(НайденныеСтроки[0].CRM_ОсновнойДляСвязи, БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная, БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная);
	Форма.Элементы[ИмяРеквизита].Шрифт	= Новый Шрифт(Форма.Элементы[ИмяРеквизита].Шрифт, , , Истина, , , );
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
	
	Если НЕ НайденныеСтроки[0].CRM_ОсновнойДляСвязи Тогда
		Возврат;
	КонецЕсли;
	
	// Производим корректировку остальных полей текущего типа КИ.
	Для Каждого СтрокаТабличнойЧасти Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип", НайденныеСтроки[0].Тип)) Цикл
		
		Если СтрокаТабличнойЧасти.ИмяРеквизита = ИмяРеквизита Тогда
			Продолжить;
		КонецЕсли;
		Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт	= Новый Шрифт(Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт, , , Ложь, , , );
		СтрокаТабличнойЧасти.CRM_ОсновнойДляСвязи = Ложь;
		Форма.Элементы["ОсновнойДляСвязи" + СтрокаТабличнойЧасти.ИмяРеквизита].Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
	КонецЦикла;
	
КонецПроцедуры // ОсновнойДляСвязиНажатие()

#КонецОбласти // МетодыCRM
