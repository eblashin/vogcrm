
////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Функция получает свойство по ссылке.
//
Функция ПолучитьСвойствоПоСсылке(Ссылка, ИмяСвойства) Экспорт
	Попытка 
		Возврат Ссылка[ИмяСвойства];
	Исключение
		// Временная заглушка
		Если (ИмяСвойства = "ДатаРегистрации") ИЛИ (ИмяСвойства = "ДатаРегистрацииСвязи") Тогда
			Попытка
				Возврат Ссылка["ДатаРегистрации"];
			Исключение
				Попытка
					Возврат Ссылка["ДатаРегистрацииСвязи"];
				Исключение
					ВызватьИсключение "ПолучитьСвойствоПоСсылке(): не известное свойство : " + ИмяСвойства;
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		ВызватьИсключение "ПолучитьСвойствоПоСсылке(): не известное свойство : " + ИмяСвойства;
	КонецПопытки;
КонецФункции

// Процедура сохраняет связь с объектом Outlook.
//
Процедура СохранитьСвязьСОбъектомOutlook(СтруктураЗаполнения) Экспорт
	МенеджерЗаписи						= РегистрыСведений.CRM_СоответствиеОбъектовOutlook.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПрограммаOutlook		= СтруктураЗаполнения.ПрограммаOutlook;
	МенеджерЗаписи.СобственнаяСсылка	= СтруктураЗаполнения.СобственнаяСсылка;
	МенеджерЗаписи.СсылкаВOutlook		= СтруктураЗаполнения.СсылкаВOutlook;
	МенеджерЗаписи.Записать();
КонецПроцедуры

// Функция заполняет объект свойствами.
//
Функция ЗаполнитьОбъектСвойствами(Ссылка,СтруктураЗаполнения) Экспорт
	Объект = Ссылка.ПолучитьОбъект();
	Если НЕ (Объект = Неопределено) Тогда 
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения.Реквизиты);
		Объект.Записать();
		Возврат Объект.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Функция помещает массив структур в таблицу значений.
//
Функция МассивСтруктурВТаблицуЗначений(мСтруктур, стрКолонки = "")Экспорт 
	Если НЕ (ТипЗнч(мСтруктур) = Тип("Массив")) ИЛИ (мСтруктур.Количество() = 0) ИЛИ (мСтруктур[0].Количество() = 0) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;		
	ТЗ = Новый ТаблицаЗначений;
	мКолонки = СокрЛП(стрКолонки);
	СтруктураПолей = "";
	Если мКолонки = "" Тогда 
		СтруктураКолонок = мСтруктур[0];
		Для Каждого Поле Из СтруктураКолонок Цикл
			СтруктураПолей = СтруктураПолей + "," + Поле.Ключ;
		КонецЦикла;
	Иначе	
		СтруктураПолей = мКолонки;
	КонецЕсли; 
	СтруктураКолонок = Новый Структура(СтруктураПолей);
	Для Каждого Поле Из СтруктураКолонок Цикл
		ТЗ.Колонки.Добавить(Поле.Ключ);
	КонецЦикла;
	Для Каждого Строка Из мСтруктур Цикл
		СтрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Строка);
	КонецЦикла;
	Возврат ТЗ;
КонецФункции

// Процедура сохраняет длину GUID программы Outlook.
//
// Параметры:
//	ПрограммаOutlook	- СправочникСсылка	- Программа Outlook 
//	GUIDOutlook			- Строка			- GUID Outlook.
//
Процедура УстановитьДлинуGUIDOutlook(ПрограммаOutlook, GUIDOutlook) Экспорт
	ПрограммаOutlookОбъект				= ПрограммаOutlook.ПолучитьОбъект();
	ПрограммаOutlookОбъект.ДлинаGUID	= СтрДлина(GUIDOutlook);		
	Попытка
		ПрограммаOutlookОбъект.Записать();
	Исключение
	КонецПопытки;	
КонецПроцедуры // УстановитьДлинуGUIDOutlook()

// Функция возвращает массив e-mail адресов контакта.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт.
//
// Возвращаемое значение:
//	Массив	- Массив адресов e-mail.
//
Функция ПолучитьМассивАдресовКонтакта(Контакт) Экспорт
	МассивАдресов = Новый Массив;
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		Если (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			И НЕ ПустаяСтрока(СтрокаКИ.Представление) Тогда
			МассивАдресов.Добавить(СтрокаКИ.Представление);
		КонецЕсли;	
	КонецЦикла;	
	Возврат МассивАдресов;
КонецФункции // ПолучитьМассивАдресовКонтакта()	

// Процедура заполняет массив сторонних лиц.
//
// Параметры:
//	Событие			- ДокументСсылка	- Событие
//	СторонниеЛица	- Массив			- Массив сторонних лиц.
//
Процедура ЗаполнитьСтронниеЛицаСобытия(Событие, СторонниеЛица) Экспорт
	Для Каждого ТекСтрока Из Событие.СторонниеЛица Цикл
		СтрокаТЧ = Новый Структура;
		СтрокаТЧ.Вставить("Партнер", 				ТекСтрока.Партнер);
		СтрокаТЧ.Вставить("КонтактноеЛицо",			ТекСтрока.КонтактноеЛицо);
		СтрокаТЧ.Вставить("Телефон",				ТекСтрока.Телефон);
		СтрокаТЧ.Вставить("Адрес",					ТекСтрока.Адрес);
		СтрокаТЧ.Вставить("ПредставлениеАдреса",	ТекСтрока.ПредставлениеАдреса);
		СтрокаТЧ.Вставить("Принадлежность",			ТекСтрока.Принадлежность);
		СтрокаТЧ.Вставить("ОтправлятьСМС",			ТекСтрока.ОтправлятьСМС);
		СтрокаТЧ.Вставить("ОтправлятьПоПочте",		ТекСтрока.ОтправлятьПоПочте);
		СторонниеЛица.Добавить(СтрокаТЧ);
	КонецЦикла;	
КонецПроцедуры // ЗаполнитьСтронниеЛицаСобытия()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБМЕНА С MS OUTLOOK

// Добавляет новую настройку
//
// Параметры:
//	ПрограммаOutlook	 - 
//  Копирование	 - 
//  ТекущаяНастройка	 - 
//
// Возвращаемое значение:
//
Функция ДобавитьНовуюНастройку(ПрограммаOutlook, Копирование = Ложь, ТекущаяНастройка = Неопределено)Экспорт
	Наименование = "Новая настройка";
	сч = 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрограммаOutlook", ПрограммаOutlook );
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиОбменаСOutlook.ПрограммаOutlook,
	|	CRM_НастройкиОбменаСOutlook.Наименование
	|ИЗ
	|	РегистрСведений.CRM_НастройкиОбменаСOutlook КАК CRM_НастройкиОбменаСOutlook
	|ГДЕ
	|	CRM_НастройкиОбменаСOutlook.Наименование = &Наименование
	|	И CRM_НастройкиОбменаСOutlook.ПрограммаOutlook = &ПрограммаOutlook";
	ПолученоИмяНастройки = Ложь;
	Пока НЕ ПолученоИмяНастройки Цикл
		сч = сч + 1;
		НаименованиеНовойНастройки = Наименование + " " + Строка(сч);
		Запрос.УстановитьПараметр("Наименование", НаименованиеНовойНастройки );
		Результат = Запрос.Выполнить();
		ПолученоИмяНастройки  = Результат.Пустой(); 
	КонецЦикла;	
	Если Копирование И НЕ (ТекущаяНастройка = Неопределено) Тогда
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиОбменаСOutlook.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ТекущаяНастройка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			КопируемаяНастройка = МенеджерЗаписи.Настройка.Получить();
			Если НЕ (КопируемаяНастройка = Неопределено) Тогда
				Попытка
					КопируемаяНастройка.ИмяСохраненнойНастройки = НаименованиеНовойНастройки;
					МенеджерЗаписи				= РегистрыСведений.CRM_НастройкиОбменаСOutlook.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ТекущаяНастройка);
					МенеджерЗаписи.Наименование	= НаименованиеНовойНастройки;
					МенеджерЗаписи.Настройка	= Новый ХранилищеЗначения(КопируемаяНастройка);
					МенеджерЗаписи.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтруктураНастройки = Новый Структура("ПрограммаOutlook,Наименование", ПрограммаOutlook, НаименованиеНовойНастройки);
	Возврат СтруктураНастройки;
КонецФункции	

// Получает основную настройку обмена.
//
//	Параметры:
//  ПрограммаOutlook	 - 
//
// Возвращаемое значение:
//
Функция ПолучитьОсновнуюНастройкуОбмена(ПрограммаOutlook) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрограммаOutlook", ПрограммаOutlook);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиОбменаСOutlook.ПрограммаOutlook,
	|	CRM_НастройкиОбменаСOutlook.Наименование,
	|	CRM_НастройкиОбменаСOutlook.Настройка,
	|	CRM_НастройкиОбменаСOutlook.Основная КАК Основная
	|ИЗ
	|	РегистрСведений.CRM_НастройкиОбменаСOutlook КАК CRM_НастройкиОбменаСOutlook
	|ГДЕ
	|	CRM_НастройкиОбменаСOutlook.ПрограммаOutlook = &ПрограммаOutlook 
	|	И CRM_НастройкиОбменаСOutlook.Основная = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основная";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда 
		стрРезультат = Новый Структура("ПрограммаOutlook,Наименование,Настройка");
		ЗаполнитьЗначенияСвойств(стрРезультат, Результат[0]);
		Возврат стрРезультат;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Функция получает настройку обмена.
//
Функция ПолучитьНастройкуОбмена(ПрограммаOutlook, ИмяНастройки) Экспорт 
	Возврат CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ОбменСMSOutlookПолучитьНастройкуОбмена(ПрограммаOutlook, ИмяНастройки);
КонецФункции

// Процедура сохраняет дату синхронизации.
//
Процедура СохранитьДатуСинхронизации(СсылкаПрограммаOutlook,СтруктураДатыСинхронизации) Экспорт
	ОбъектПрограммы = СсылкаПрограммаOutlook.ПолучитьОбъект();
	Если ЗначениеЗаполнено(СтруктураДатыСинхронизации.ДатаПоследнейСинхронизацииСобытий) Тогда
		ОбъектПрограммы.ДатаПоследнейСинхронизацииСобытий = СтруктураДатыСинхронизации.ДатаПоследнейСинхронизацииСобытий;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДатыСинхронизации.ДатаПоследнейСинхронизацииКонтактов) Тогда
		ОбъектПрограммы.ДатаПоследнейСинхронизацииКонтактов = СтруктураДатыСинхронизации.ДатаПоследнейСинхронизацииКонтактов;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДатыСинхронизации.ДатаПоследнейСинхронизацииПисем) Тогда
		ОбъектПрограммы.ДатаПоследнейСинхронизацииПисем = СтруктураДатыСинхронизации.ДатаПоследнейСинхронизацииПисем;
	КонецЕсли;
	ОбъектПрограммы.Записать();
КонецПроцедуры

// Функция получает дату синхронизации.
//
Функция ПолучитьДатуСинхронизации(СсылкаПрограммаOutlook) Экспорт
	Возврат Новый Структура("ДатаПоследнейСинхронизацииКонтактов,
	|ДатаПоследнейСинхронизацииСобытий,
	|ДатаПоследнейСинхронизацииПисем",
	СсылкаПрограммаOutlook.ДатаПоследнейСинхронизацииКонтактов,
	СсылкаПрограммаOutlook.ДатаПоследнейСинхронизацииСобытий,
	СсылкаПрограммаOutlook.ДатаПоследнейСинхронизацииПисем
	);
КонецФункции

// Функция получает дату модификации объекта в 1С.
Функция ПолучитьДатуМодификацииВ1С(Ссылка, Настройка) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",		Ссылка);
	Запрос.УстановитьПараметр("Настройка",	Настройка);
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствиеОбъектовOutlook.ДатаПоследнейМодификации КАК ДатаПоследнейМодификации
	|ИЗ
	|	РегистрСведений.CRM_СоответствиеОбъектовOutlook КАК СоответствиеОбъектовOutlook
	|ГДЕ
	|	СоответствиеОбъектовOutlook.СобственнаяСсылка = &Ссылка
	|	И СоответствиеОбъектовOutlook.ПрограммаOutlook = &Настройка";
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.ДатаПоследнейМодификации;
	Иначе
		Возврат '00010101';
	КонецЕсли;
КонецФункции

// Получает программу MSOutlook.
//
//	Параметры:
//  ЭтаФорма	 - 
//  Пользователь	 - 
//  Компьютер	 - 
//
// Возвращаемое значение:
//
Функция ПолучитьПрограммуMSOutlook(Пользователь,Компьютер) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",	Пользователь);
	Запрос.УстановитьПараметр("Компьютер",		Компьютер );
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_ПрограммыMSOutlook.Ссылка
	|ИЗ
	|	Справочник.CRM_ПрограммыMSOutlook КАК CRM_ПрограммыMSOutlook
	|ГДЕ
	|	CRM_ПрограммыMSOutlook.Компьютер = &Компьютер
	|	И CRM_ПрограммыMSOutlook.Пользователь = &Пользователь";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат  Выборка.Ссылка;
	Иначе	
		Возврат Справочники.CRM_ПрограммыMSOutlook.ПустаяСсылка();	
	КонецЕсли;
КонецФункции

// Функция создает элемент справочника "Программы MSOutlook".
//
Функция СоздатьПрограммуMSOutlook(Пользователь,Компьютер) Экспорт
	НовыйЭлемент				= Справочники.CRM_ПрограммыMSOutlook.СоздатьЭлемент(); 
	НовыйЭлемент.Компьютер		=  Компьютер;
	НовыйЭлемент.Пользователь	=  Пользователь;
	НовыйЭлемент.УстановитьНовыйКод();
	НовыйЭлемент.Наименование	= Строка(Пользователь) + " (" + Строка(Компьютер) + ")";
	НовыйЭлемент.Записать();
	Возврат НовыйЭлемент.Ссылка;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запросы к базе данных

// Функция получает синхронизируемые события 1С.
//
Функция ПолучитьСинхронизируемыеСобытия1С(ТекстЗапроса, Отбор, Знач ДатаПоследнегоОбмена = Неопределено) Экспорт
	Если НЕ (ТипЗнч(ДатаПоследнегоОбмена) = Тип("Дата")) Тогда
		ДатаПоследнегоОбмена = Дата("00010101");
	КонецЕсли;
	Параметры = Новый Соответствие();
	Параметры.Вставить("ДатаПоследнейМодификации", ДатаПоследнегоОбмена);
	ТЗ = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор, Параметры);
	ТаблицаСинхронизируемыхСобытий1С = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ);
	Возврат ТаблицаСинхронизируемыхСобытий1С;
КонецФункции

// Функция получает синхронизируемые контакты 1С.
//
Функция ПолучитьСинхронизируемыеКонтакты1С(ТекстЗапроса, Отбор, Параметры = Неопределено, Знач ДатаПоследнегоОбмена = Неопределено) Экспорт
	Если НЕ (ТипЗнч(ДатаПоследнегоОбмена) = Тип("Дата")) Тогда
		ДатаПоследнегоОбмена = Дата("00010101");
	КонецЕсли;
	Если НЕ (ТипЗнч(Параметры) = Тип("Соответствие")) Тогда
		Параметры = Новый Соответствие();
	КонецЕсли;
	Параметры.Вставить("ДатаПоследнейМодификации", ДатаПоследнегоОбмена);
	ТЗ = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор, Параметры);
	ТаблицаСинхронизируемыхСобытий1С = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ);
	Возврат ТаблицаСинхронизируемыхСобытий1С;
КонецФункции

// Функция удаляет объекты 1С из базы.
//
Функция УдалитьОбъекты1СИзБазы(мОбъекты1С,мПрограммаOutlook) Экспорт
	Для Каждого Объект1С Из мОбъекты1С Цикл
		НаборЗаписей = РегистрыСведений.CRM_СоответствиеОбъектовOutlook.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрограммаOutlook.Установить(мПрограммаOutlook, Истина);
		НаборЗаписей.Отбор.СобственнаяСсылка.Установить(Объект1С, Истина);
		НаборЗаписей.Записать();
	КонецЦикла;
КонецФункции

// Функция получает объекты Outlook из 1С.
//
Функция ПолучитьОбъектыOutlookИз1С(Объект1С, мПрограммаOutlook) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрограммаOutlook",	мПрограммаOutlook);
	Запрос.УстановитьПараметр("СобственнаяСсылка",	Объект1С);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СоответствиеОбъектовOutlook.СсылкаВOutlook
	|ИЗ
	|	РегистрСведений.CRM_СоответствиеОбъектовOutlook КАК CRM_СоответствиеОбъектовOutlook
	|ГДЕ
	|	CRM_СоответствиеОбъектовOutlook.ПрограммаOutlook = &ПрограммаOutlook
	|	И CRM_СоответствиеОбъектовOutlook.СобственнаяСсылка = &СобственнаяСсылка";
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
КонецФункции

// Функция получает объект 1С
//
Функция ПолучитьОбъект1С(ПрограммаOutlook, СсылкаВOutlook) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрограммаOutlook",	ПрограммаOutlook);
	Запрос.УстановитьПараметр("СсылкаВOutlook",		СсылкаВOutlook);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СоответствиеОбъектовOutlook.СобственнаяСсылка
	               |ИЗ
	               |	РегистрСведений.CRM_СоответствиеОбъектовOutlook КАК CRM_СоответствиеОбъектовOutlook
	               |ГДЕ
	               |	CRM_СоответствиеОбъектовOutlook.ПрограммаOutlook = &ПрограммаOutlook
	               |	И CRM_СоответствиеОбъектовOutlook.СсылкаВOutlook = &СсылкаВOutlook";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СобственнаяСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Функция получает контакты 1С.
//
Функция ПолучитьКонтакты1С(ИмяТаблицы, ВидКонтакта, Фамилия, Имя, Отчество, Организация)Экспорт 
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ 
	|	" + ИмяТаблицы + ".Ссылка
	|ИЗ
	|	Справочник." + ИмяТаблицы + " КАК " + ИмяТаблицы + "
	|ГДЕ ";
	Если ВидКонтакта = "КЛК" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	" + ИмяТаблицы + ".Владелец.Наименование = &Наименование
		|	И " + ИмяТаблицы + ".CRM_Фамилия = &Фамилия
		|	И " + ИмяТаблицы + ".CRM_Имя = &Имя
		|	И " + ИмяТаблицы + ".CRM_Отчество = &Отчество";
	ИначеЕсли ВидКонтакта = "К" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	" + ИмяТаблицы + ".Наименование = &Наименование";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Наименование",	Организация);
	Запрос.УстановитьПараметр("Фамилия",		Фамилия);
	Запрос.УстановитьПараметр("Имя",			Имя);
	Запрос.УстановитьПараметр("Отчество",		Отчество);
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Выборка);
КонецФункции

// Функция находит контакт 1С по e-mail.
//
// Параметры:
//	ВидКонтакта	- Строка	- Вид контакта.
//	Адрес		- Строка	- Адрес e-mail.
//
// Возвращаемое значение:
//	СправочникСсылка	- Контакт
//
Функция НайтиКонтакт1CПоEMail(ВидКонтакта, Адрес) Экспорт
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	ИначеЕсли ВидКонтакта = "КЛК" Тогда
		ИмяТаблицы = "КонтактныеЛицаПартнеров";
	ИначеЕсли ВидКонтакта = "К" Тогда
		ИмяТаблицы = "Партнеры";
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	" + ИмяТаблицы + "КонтактнаяИнформация.Ссылка
	               |ИЗ
	               |	Справочник." + ИмяТаблицы + ".КонтактнаяИнформация КАК " + ИмяТаблицы + "КонтактнаяИнформация
	               |ГДЕ
	               |	НЕ " + ИмяТаблицы + "КонтактнаяИнформация.Ссылка.ПометкаУдаления 
	               |	И " + ИмяТаблицы + "КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	               |	И " + ИмяТаблицы + "КонтактнаяИнформация.Представление = &Адрес";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // НайтиКонтакт1CПоEMail()
	
////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с событиями.

Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если НЕ (ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.CRM_Мероприятие")) Тогда
		Возврат;
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Возврат;
	ИначеЕсли НЕ Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить() Тогда
		Возврат;
	КонецЕсли;
	Участники = Новый ТаблицаЗначений;
	Участники.Колонки.Добавить("Партнер");
	мСторонниеЛица = ТекущийОбъект.СторонниеЛица.ВыгрузитьКолонку("Партнер");
	Для Каждого Лицо Из мСторонниеЛица Цикл
		Если ТипЗнч(Лицо) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(Лицо) Тогда
			Участник = Участники.Добавить();
			Участник.Партнер = Лицо;
		КонецЕсли;
	КонецЦикла;
	//Если ЗначениеЗаполнено(ТекущийОбъект.Партнер) Тогда
	//	пПартнер			= ТекущийОбъект.Партнер;
	//	Участник			= Участники.Добавить();
	//	Участник.Партнер	= пПартнер;
	//КонецЕсли;
	Участники.Свернуть("Партнер");
	Если Участники.Количество() > 0 Тогда
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсточникиПервичногоИнтереса.Период КАК Период
		               |ИЗ
		               |	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
		               |ГДЕ
		               |	ИсточникиПервичногоИнтереса.Сделка = &Сделка
		               |	И ИсточникиПервичногоИнтереса.Партнер = &Партнер";
		Для Каждого Уч Из Участники Цикл
			Запрос.УстановитьПараметр("Партнер", Уч.Партнер);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи			= РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период	= Выборка.Период;
				МенеджерЗаписи.Сделка	= ТекущийОбъект.Ссылка;
				МенеджерЗаписи.Партнер	= Уч.Партнер;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			Запись							= НаборЗаписей.Добавить();
			Запись.Период					= ТекущийОбъект.Дата;
			Запись.Партнер					= Уч.Партнер;
			Запись.Сделка					= ТекущийОбъект.Ссылка;
			Запись.КаналПервичногоИнтереса	= ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_БезУказанияИсточника;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

// Функция создает событие
//
Функция СоздатьСобытие(СтруктураЗаполнения) Экспорт
	Если СтруктураЗаполнения = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Событие = Документы.CRM_Мероприятие.СоздатьДокумент();	
	ЗаполнитьЗначенияСвойств(Событие, СтруктураЗаполнения);
	Событие.Записать();
	Возврат Событие.Ссылка;
КонецФункции

// Функция очищает всех участников события.
//
Функция ОчиститьВсехУчастниковСобытия(Ссылка) Экспорт
	Объект					= Ссылка.ПолучитьОбъект();
	Объект.Партнер			= Справочники.Партнеры.ПустаяСсылка();
	Объект.КонтактноеЛицо	= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	Объект.СторонниеЛица.Очистить();
	Объект.Записать();
	Возврат Объект.Ссылка;
КонецФункции

// Функция создает объект по структуре.
//
Функция ЗаполнитьМероприятиеПоСтруктуре(Ссылка, СтруктураОбъекта, ОчиститьУчастников = Ложь, СтрокаСобытия) Экспорт
	Попытка 
		Если ЗначениеЗаполнено(Ссылка) Тогда
			мОбъект = Ссылка.ПолучитьОбъект();
		Иначе	
			мОбъект = Документы.CRM_Мероприятие.СоздатьДокумент();	
		КонецЕсли;
	Исключение
	КонецПопытки;
	Попытка
		Если ОчиститьУчастников Тогда
			мОбъект.СторонниеЛица.Очистить();
		КонецЕсли;
	Исключение
	КонецПопытки;
	Попытка
		Для Каждого Реквизит Из СтруктураОбъекта.Реквизиты Цикл
			мОбъект[Реквизит.Ключ] = Реквизит.Значение;			
		КонецЦикла;
	Исключение
	КонецПопытки;
	Попытка
		Для Каждого ТабЧасть Из СтруктураОбъекта.ТабличныеЧасти Цикл
			Для Каждого СтрокаТЧ Из ТабЧасть.Значение Цикл
				Попытка
					СтруктураПоиска = Новый Структура();
					Для Каждого КлючЗначение Из СтрокаТЧ Цикл
						Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
							СтруктураПоиска.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
						КонецЕсли;
					КонецЦикла;
					Если СтруктураПоиска.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					НайденныеСтроки = мОбъект[ТабЧасть.Ключ].НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;
				мСтрокаТЧ = мОбъект[ТабЧасть.Ключ].Добавить();
				Для Каждого Реквизит Из СтрокаТЧ Цикл
					мСтрокаТЧ[Реквизит.Ключ] = Реквизит.Значение;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;
	Попытка
		мОбъект.Записать();
		Если ТипЗнч(мОбъект) = Тип("ДокументОбъект.CRM_Мероприятие") Тогда
			Если Ложь Тогда // Временное условие чтобы был "фиктивный" вызов метода ЗаписатьПервичныйИнтерес.
				ЗаписатьПервичныйИнтерес(мОбъект.Ссылка);
			КонецЕсли;
		КонецЕсли;
		СтрокаСобытия.Объект_1С			= мОбъект.Ссылка;
		СтрокаСобытия.ДатаИзменения_1С	= мОбъект.Дата;
	Исключение
		СтрОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрОписаниеОшибки);
	КонецПопытки;
	Возврат мОбъект.Ссылка;
КонецФункции

// Функция создает объект по структуре.
//
Функция ЗаполнитьПисьмоПоСтруктуре(Ссылка, СтруктураОбъекта, ОчиститьУчастников = Ложь, СтрокаСобытия) Экспорт
	Попытка 
		Если ЗначениеЗаполнено(Ссылка) Тогда
			мОбъект = Ссылка.ПолучитьОбъект();
		Иначе	
			Если СтруктураОбъекта.Реквизиты.ВходящееИсходящее = "Входящее" Тогда
				мОбъект = Документы.ЭлектронноеПисьмоВходящее.СоздатьДокумент();
			Иначе
				мОбъект = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Для Каждого Реквизит Из СтруктураОбъекта.Реквизиты Цикл
		Попытка
			мОбъект[Реквизит.Ключ] = Реквизит.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Попытка
		Для Каждого ТабЧасть Из СтруктураОбъекта.ТабличныеЧасти Цикл
			Для Каждого СтрокаТЧ Из ТабЧасть.Значение Цикл
				Попытка
					СтруктураПоиска = Новый Структура();
					Для Каждого КлючЗначение Из СтрокаТЧ Цикл
						Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
							СтруктураПоиска.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
						КонецЕсли;
					КонецЦикла;
					Если СтруктураПоиска.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					НайденныеСтроки = мОбъект[ТабЧасть.Ключ].НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;
				мСтрокаТЧ = мОбъект[ТабЧасть.Ключ].Добавить();
				Для Каждого Реквизит Из СтрокаТЧ Цикл
					мСтрокаТЧ[Реквизит.Ключ] = Реквизит.Значение;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;
	Попытка
		мОбъект.Записать();
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(мОбъект.Ссылка, СтруктураОбъекта.Реквизиты.Папка);
		СтрокаСобытия.Объект_1С			= мОбъект.Ссылка;
		СтрокаСобытия.ДатаИзменения_1С	= мОбъект.Дата;
		Если СтруктураОбъекта.Реквизиты.Непрочитано Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Письмо = мОбъект.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	Исключение
		СтрОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрОписаниеОшибки);
	КонецПопытки;
	Возврат мОбъект.Ссылка;
КонецФункции

// Функция заполняет объект
//
Функция ЗаполнитьОбъект(мСсылка,СтруктураОбъекта) Экспорт
	Попытка 
		мОбъект = мСсылка.ПолучитьОбъект();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Попытка
		Для Каждого Реквизит Из СтруктураОбъекта.Реквизиты Цикл
			мОбъект[Реквизит.Ключ] = Реквизит.Значение;			
		КонецЦикла;
	Исключение
	КонецПопытки;
	Попытка
		Для Каждого ТабЧасть Из СтруктураОбъекта.ТабличныеЧасти Цикл
			Для Каждого СтрокаТЧ Из ТабЧасть.Значение Цикл
				Отбор = Новый Структура("Тип,Вид",СтрокаТЧ.Тип,СтрокаТЧ.Вид);
				НайденныеСтроки = мОбъект[ТабЧасть.Ключ].НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					мСтрокаТЧ = мОбъект[ТабЧасть.Ключ].Добавить();
				Иначе	
					мСтрокаТЧ = НайденныеСтроки[0];
				КонецЕсли;
				Для Каждого Реквизит Из СтрокаТЧ Цикл
					мСтрокаТЧ[Реквизит.Ключ] = Реквизит.Значение;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;
	Попытка
		мОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат мОбъект.Ссылка;
	КонецПопытки;						
	Возврат мСсылка;
КонецФункции

// Функция получает структуру свойств события.
//
Функция ПолучитьСтруктуруСвойствСобытия(Ссылка) Экспорт
	СвойстваОбъекта =  Новый Структура("Описание,Тема,Дата,ОкончаниеМероприятия,НаВесьДень,Место");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта,Ссылка);
	Возврат СвойстваОбъекта;
КонецФункции

// Функция получает контакты события.
//
Функция ПолучитьКонтактыСобытия(Ссылка) Экспорт
	КонтактыСобытия = Новый СписокЗначений; 			
	// Обход контактов 1С
	Для Каждого Контакт Из Ссылка.СторонниеЛица  Цикл
		Контакт1С = ?(ЗначениеЗаполнено(Контакт.КонтактноеЛицо), Контакт.КонтактноеЛицо, Контакт.Партнер);		
		Если ТипЗнч(Контакт1С) <> Тип("Строка") И Контакт1С.ПометкаУдаления Тогда Продолжить; КонецЕсли;	
		Если ЗначениеЗаполнено(Контакт1С) Тогда
			КонтактыСобытия.Добавить(Контакт1С);
		КонецЕсли;
	КонецЦикла;	 
	Возврат КонтактыСобытия;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с Контактами.

// Функция создает контакт по структуре.
//
Функция СоздатьКонтактПоСтруктуре(Ссылка,СтруктураОбъекта,СтрокаКонтакта) Экспорт
	Попытка 
		Если ЗначениеЗаполнено(Ссылка) Тогда
			мОбъект = Ссылка.ПолучитьОбъект();
		Иначе	
			СсылкаНового = Справочники[Ссылка.Метаданные().Имя].ПолучитьСсылку();
			мОбъект = Справочники[Ссылка.Метаданные().Имя].СоздатьЭлемент();
			мОбъект.Заполнить(Неопределено);
			мОбъект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Для Каждого Реквизит Из СтруктураОбъекта.Реквизиты Цикл
			мОбъект[Реквизит.Ключ] = Реквизит.Значение;			
		КонецЦикла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	Попытка
		мОбъект.Записать();
		СтрокаКонтакта.Объект_1С		= мОбъект.Ссылка;
		СтрокаКонтакта.ДатаИзменения_1С	= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;						
	Возврат мОбъект.Ссылка;
КонецФункции

// Функция находит владельца по наименованию.
//
Функция НайтиВладельцаПоНаименованию(Наименование) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Партнеры.Ссылка
	              |ИЗ
	              |	Справочник.Партнеры КАК Партнеры
	              |ГДЕ
	              |	Партнеры.Наименование = &Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Функция получает структуру свойств контакта.
//
Функция ПолучитьСтруктуруСвойствКонтакта(Ссылка,ВидКонтакта) Экспорт
	СтруктураОбъекта = Новый Структура;
	Попытка
		СтруктураОбъекта.Вставить("CRM_Фамилия", Ссылка.CRM_Фамилия);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураОбъекта.Вставить("CRM_Имя", Ссылка.CRM_Имя);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураОбъекта.Вставить("CRM_Отчество", Ссылка.CRM_Отчество);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураОбъекта.Вставить("Наименование", Ссылка.Наименование);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураОбъекта.Вставить("ДатаРождения", Ссылка.ДатаРождения);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураОбъекта.Вставить("Комментарий", Ссылка.Комментарий);
	Исключение
	КонецПопытки;
	Если ВидКонтакта = "К" Тогда
		Попытка
			СтруктураОбъекта.Вставить("ЮрФизЛицо", Ссылка.ЮрФизЛицо);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если (ВидКонтакта = "КЛК") И (ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
		Владелец = Ссылка.Владелец;
		Если Владелец.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
			СтруктураОбъекта.Вставить("Организация", Владелец.Наименование);
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураОбъекта;
КонецФункции

// Функция получает контактную информацию.
//
Функция ПолучитьКонтактнуюИнформацию(Ссылка) Экспорт
	ТекстЗапроса	= "";
	ИмяТаблицы		= "";
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда 
		ИмяТаблицы = "Партнеры";
	Иначе
		ИмяТаблицы = "КонтактныеЛицаПартнеров";
	КонецЕсли;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка,
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	Справочник." + ИмяТаблицы + ".КонтактнаяИнформация КАК КонтактнаяИнформация
				   |ГДЕ КонтактнаяИнформация.Ссылка = &Ссылка";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТЗ  = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с Программами Outlook.

// Устанавливает настройку основной.
//
//	Параметры:
//  ПрограммаOutlook	 - 
//  Настройка	 - 
//
Процедура УстановитьНастройкуОсновной(ПрограммаOutlook,Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_НастройкиОбменаСOutlook.ПрограммаOutlook,
	               |	CRM_НастройкиОбменаСOutlook.Наименование,
	               |	CRM_НастройкиОбменаСOutlook.Основная
	               |ИЗ
	               |	РегистрСведений.CRM_НастройкиОбменаСOutlook КАК CRM_НастройкиОбменаСOutlook
	               |ГДЕ
	               |	CRM_НастройкиОбменаСOutlook.ПрограммаOutlook = &ПрограммаOutlook
	               |	И CRM_НастройкиОбменаСOutlook.Основная";
	
	Запрос.УстановитьПараметр("ПрограммаOutlook", ПрограммаOutlook );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_НастройкиОбменаСOutlook.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
		МенеджерЗаписи.Основная = Ложь;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиОбменаСOutlook.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Настройка);
	МенеджерЗаписи.Основная = Истина;
	МенеджерЗаписи.Записать();
КонецПроцедуры	

// Функция возвращает контакт по адресу E-Mail.
//
Функция ПолучитьКонтактПоАдресу(Адрес, СоответствияАдресовИКонтактов = Неопределено) Экспорт
	Если НЕ (ТипЗнч(СоответствияАдресовИКонтактов) = Тип("Соответствие")) Тогда
		СоответствияАдресовИКонтактов = Новый Соответствие();
	КонецЕсли;
	КонтактВСоответствии = СоответствияАдресовИКонтактов[Адрес];
	Если ТипЗнч(КонтактВСоответствии) = Тип("Структура") Тогда
		Возврат КонтактВСоответствии;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АдресЭП",	Адрес);
	Запрос.УстановитьПараметр("Тип",		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка КАК Ссылка,
	|	NULL КАК Владелец,
	|	1 КАК Флаг
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	ОбъектСКонтактнойИнформацией.Ссылка.Владелец,
	|	0
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	Флаг";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураРезультат = Новый Структура("Адрес,Ссылка,Владелец", Адрес, Выборка.Ссылка, Выборка.Владелец);
		СоответствияАдресовИКонтактов.Вставить(Адрес, СтруктураРезультат);
		Возврат СтруктураРезультат;
	Иначе
		СоответствияАдресовИКонтактов.Вставить(Адрес, Ложь);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьВидПапки(СписокПапок, ПапкаEntryID, Входящее) Экспорт
	ПапкаНайдена = СписокПапок.НайтиПоЗначению(ПапкаEntryID);
	Если ПапкаНайдена <> Неопределено Тогда
		Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты[ПапкаНайдена.Представление];
	Иначе
		Если Входящее Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие;
		Иначе
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие;
		КонецЕсли;
	КонецЕсли;
КонецФункции