#Область КлиентскиеПроцедурыИФункцииСофтФон

/////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет инициализацию подсистемы СофтФон
//
// Параметры:
//	Нет.
//
Процедура сфпПодключитьСофтФон() Экспорт
	Если НЕ сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		сфпСофтФонПроСервер.сфпУстановитьПараметрыСеанса(ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.ПустаяСсылка"));
		Возврат;
	ИначеЕсли НЕ сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		сфпСофтФонПроСервер.сфпУстановитьПараметрыСеанса(ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.ПустаяСсылка"));
		Возврат;
	КонецЕсли;
	#Если ВебКлиент Тогда
		Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		Если НЕ сфпПодключиться() Тогда Возврат; КонецЕсли;
		сфпЗаполнитьПрефиксыИНастройки();
		Если сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда
			Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
				сфпПодключитьCLON();
			КонецЕсли;	
		КонецЕсли;
		Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьВнутреннююПанель") Тогда
			ПараметрыФормы = Новый Структура;
			ОткрытьФорму("ОбщаяФорма.сфпВнутренняяПанельУправления", ПараметрыФормы);
		КонецЕсли;	
		сфпВариантСофтфона = сфпСофтФонПроСервер.сфпПрочитатьПараметрыСеанса();
		Если сфпВариантСофтфона = ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпНативнаяКомпонента") Тогда
			Если сфпСоответствиеЛинийИСтатусов = Неопределено Тогда
				сфпСоответствиеЛинийИСтатусов = Новый Соответствие;
				// Добавлено вместо вызова из форм - ибо томозит открыетие формы
				сфпВерсияПанели = сфпСофтФонПроКлиент.сфпПолучитьВерсиюПанели();
				Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(сфпВерсияПанели,"3.0.3.120") >= 0 Тогда
					сфпСофтФонПроКлиент.сфпПолучитьСостоянияЛиний();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // сфпПереподключитьСофтФон()	

// Процедура очищает глобальные переменные и закрывает панель
//
// Параметры:
//	Нет.
//
Процедура сфпОтключитьСофтФон() Экспорт
	сфпObjCLON			= Неопределено;
	сфпСтруктураЗвонков	= Новый Структура;	
	сфпДанныеЗаполнения	= Неопределено;		
	сфпСоответствиеЛинийИСтатусов = Неопределено;
	Если НЕ (сфпПанельУправления = Неопределено) Тогда
		Оповестить("СофтФон_ЗакрытьВнутреннююПанель");
		#Если НЕ ВебКлиент Тогда
			сфпПанельУправления.PanelExit();
		#КонецЕсли
		сфпПанельУправления = Неопределено;
	КонецЕсли;	
КонецПроцедуры // сфпОтключитьСофтФон()

// Функция проверяет доступность использования СофтФон
//
// Параметры:
//	ВыводитьПредупреждения	- Булево	- Признак вывода предупреждений
//
// Возвращаемое значение:
//	Булево	- Доступность СофтФона
//
Функция сфпПроверитьДоступностьСофтФон(ВыводитьПредупреждения = Истина) Экспорт
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#Иначе
		Если НЕ сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
			Если ВыводитьПредупреждения Тогда
				CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СофтФон");
			КонецЕсли;	
			Возврат Ложь;
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда	
			Если ВыводитьПредупреждения Тогда
				ПоказатьПредупреждение(, НСтр("ru='В персональных настройках пользователя отключено использование СофтФон'"), 5);
			КонецЕсли;	
			Возврат Ложь;
		ИначеЕсли сфпПанельУправления = Неопределено Тогда
			Если ВыводитьПредупреждения Тогда
				ПоказатьПредупреждение(, НСтр("ru='Отсутствует подключение к серверу СофтФона'"), 5);
			КонецЕсли;	
			Возврат Ложь;
		КонецЕсли;	
		Возврат Истина;
	#КонецЕсли
КонецФункции // сфпПроверитьДоступностьСофтФон()	

// Процедура заново заполняет регистр поиска по номерам
//
// Параметры:
//	Нет.
//
Процедура сфпПерезаполнитьРегистрПоискаПоНомерам() Экспорт
	
	ОбщееКоличество = сфпСофтФонПроСервер.сфпВычислитьОбщееКоличествоОбъектовДляПерезаполненияПоНомерам();
	Если ОбщееКоличество = 0 Тогда Возврат КонецЕсли;
	СписокОбъектов = сфпСофтФонПроСервер.сфпПолучитьСписокОбъектовДляПерезаполнения();
	
	ШагИндикатора = (100 / ОбщееКоличество);
	Индикатор = ШагИндикатора;
	Для Сч = 0 по ОбщееКоличество-1 Цикл 
		Состояние(НСтр("ru='Выполняется обновление регистра поиска по номеру телефона'"), Индикатор,,БиблиотекаКартинок.ДлительнаяОперация48);  
		ЭлементСписка = СписокОбъектов[Сч].Значение;
		сфпСофтФонПроСервер.сфпЗаполнитьРегистрПоискаПоНомерам(ЭлементСписка, Ложь);
		Индикатор = Индикатор + ШагИндикатора;
	КонецЦикла;	
	
	Если сфпСофтФонПроСервер.сфпИспользоватьМаршрутизацию() Тогда
		// Если включена маршрутизация, то заменяем таблицу маршрутизации
		СтарыйНабор = Новый Массив;
		НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации();
		СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
		сфпСофтФонПроСервер.сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации);
	КонецЕсли;	
		
КонецПроцедуры

// Процедура выполняет необходимые действия после записи телефонного звонка в базу
//
// Параметры:
//	НовыйЗвонок		- ДокументСсылка 	- Ссылка на записанный звонок
//	СтруктураЗвонка	- Структура			- Структура данных звонка
//
Процедура сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка) Экспорт
	Если ЗначениеЗаполнено(НовыйЗвонок) Тогда
		// Добавляем звонок в структуру
		СтруктураЗвонка["НовыйЗвонок"] = НовыйЗвонок;
		сфпДобавитьДанныеВСтруктуру(СтруктураЗвонка.hCall, "НовыйЗвонок", НовыйЗвонок);
		Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
			Если сфпДанныеЗаполнения = Неопределено Тогда
				сфпПанельУправления.GetCallInfoCoMagic(СтруктураЗвонка.LineName, СтруктураЗвонка.CallerID);
			ИначеЕсли НЕ сфпДанныеЗаполнения.Свойство("СтруктураCoMagic") Тогда
				сфпПанельУправления.GetCallInfoCoMagic(СтруктураЗвонка.LineName, СтруктураЗвонка.CallerID);
			КонецЕсли;	
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
			// Изменяем таблицу маршрутизации
			сфпСофтФонПроСервер.сфпОбновитьТаблицуМаршрутизации(НовыйЗвонок);
		КонецЕсли;
		// Если звонок выполнен из телемаркетинга и не открыто событие, то оповещаем телемаркетинг о звонке
		ОснованиеЗвонка = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(НовыйЗвонок, "ВзаимодействиеОснование");
		Если ЗначениеЗаполнено(ОснованиеЗвонка) И ТипЗнч(ОснованиеЗвонка) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Основание",		ОснованиеЗвонка);
			Если ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				СтруктураОповещения.Вставить("Партнер",			сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт));
				СтруктураОповещения.Вставить("КонтактноеЛицо",	СтруктураЗвонка.Контакт);
			ИначеЕсли ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				СтруктураОповещения.Вставить("Партнер",			СтруктураЗвонка.Контакт);
				СтруктураОповещения.Вставить("КонтактноеЛицо",	ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"));
			Иначе
				СтруктураОповещения.Вставить("Партнер",			ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
				СтруктураОповещения.Вставить("КонтактноеЛицо",	ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"));
			КонецЕсли;	
			СтруктураОповещения.Вставить("ПартнерСтрокой",	CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НовыйЗвонок, "АбонентПредставление"));
			СтруктураОповещения.Вставить("НомерТелефона",	СтруктураЗвонка.НомерТелефона);
			СтруктураОповещения.Вставить("Звонок",			НовыйЗвонок);
			Оповестить("СофтФон_ЗаписьСобытия", СтруктураОповещения);
			
// +bpm
		ИначеЕсли ЗначениеЗаполнено(ОснованиеЗвонка) И ТипЗнч(ОснованиеЗвонка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Оповестить("ЗаписанНовыйЗвонок",ОснованиеЗвонка ,НовыйЗвонок);
// -bpm
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

// Процедура заполняет соответствие сфпСоответствиеЛинийИСтатусов по данным, полученных с сервера СФ
//
//  Параметры 
//    МассивНомеров 			- Массив - Массив, содержащий таблицу состояний и номеров
//
Процедура сфпПерезаполнитьСоответствиеСостоянияЛиний(МассивНомеров) Экспорт
	Если сфпСоответствиеЛинийИСтатусов = Неопределено Тогда Возврат; КонецЕсли;
	Для Каждого ЭлементМассива Из МассивНомеров Цикл
		Если ПустаяСтрока(ЭлементМассива.Number) Тогда Продолжить КонецЕсли;
		ОчищенныйНомер = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ЭлементМассива.Number);
		Если СтрДлина(ОчищенныйНомер) = СтрДлина(ЭлементМассива.Number) Тогда
			Если ТипЗнч(ЭлементМассива.LineState) = Тип("Число") Тогда
				сфпСоответствиеЛинийИСтатусов.Вставить(ЭлементМассива.Number, ЭлементМассива.LineState - 1);
			ИначеЕсли ТипЗнч(ЭлементМассива.LineState) = Тип("Строка") Тогда
				Если ЭлементМассива.LineState = "free" Тогда 
					LineState = 0;
				ИначеЕсли ЭлементМассива.LineState = "busy"	Тогда
					LineState = 1;
				Иначе
					LineState = 2;
				КонецЕсли;		
				сфпСоответствиеЛинийИСтатусов.Вставить(ЭлементМассива.Number, LineState);
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла;		
	Оповестить("сфпПерезаполнитьСтатусыЛиний");
КонецПроцедуры	

// Функция получает версию используемой панели Софтфона
//
Функция сфпПолучитьВерсиюПанели() Экспорт
	ВерсияПанели = "0.0.0.0";
	Если НЕ (сфпПанельУправления = Неопределено) Тогда
		сфпВариантСофтфона = сфпСофтФонПроСервер.сфпПрочитатьПараметрыСеанса();
		Если сфпВариантСофтфона = ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпНативнаяКомпонента") Тогда
			Попытка
				ВерсияПанели		= сфпПанельУправления.Release();	
			Исключение
				ВерсияПанели = "0.0.0.0";
			КонецПопытки;
		Иначе
			Попытка
				Shell = Новый COMОбъект("WScript.Shell");
				Ключ = "HKEY_LOCAL_MACHINE\SOFTWARE\1C-Rarus\SoftPhone\Versions\";
				ВерсияПанели = Shell.RegRead(Ключ + "Client 2.0");
			Исключение
				ВерсияПанели = "0.0.0.0";
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат ВерсияПанели;
КонецФункции	

// Функция обрабатывает внешнее событие, которое приходит от нативной компоненты Софтфона
//
// Параметры:
//	Источник 	- Строка 	- Источник внешнего события
//  Событие 	- Строка	- Имя события источника
//	Данные		- JSON		- Данные события
//
Процедура сфпВнешнееСобытияСофтфона(Источник, Событие, Данные) Экспорт
	#Если Вебклиент Тогда
	#Иначе		
		Если Источник = "SoftPhone" Тогда
			МассивСоответствия = сфпСофтФонПроСервер.UnJSON(ЗаменитьНедопустимыеСимволыXML(Данные));
			Если МассивСоответствия = Неопределено Тогда
				Возврат;
			ИначеЕсли НЕ (ТипЗнч(МассивСоответствия)  = Тип("Соответствие")) Тогда
				Возврат;
			ИначеЕсли МассивСоответствия.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			СтруктураДанных = Новый Структура();
			Для Каждого ЭлементМассива Из МассивСоответствия Цикл
				СтруктураДанных.Вставить(ЭлементМассива.Ключ, ЭлементМассива.Значение); 
			КонецЦикла;
			Если Событие = "OnCallInfoEx" Тогда
				сфпOnCallInfo(СтруктураДанных["hCall"], СтруктураДанных["LineName"],СтруктураДанных["LineType"], СтруктураДанных["CallerID"],
				СтруктураДанных["CallerInfoName"], СтруктураДанных["CalledId"], СтруктураДанных["CalledInfoName"], СтруктураДанных["State"],
				СтруктураДанных["Origin"], СтруктураДанных["DopInfo"], СтруктураДанных["AvailableActions"], СтруктураДанных["AppValue"],
				СтруктураДанных["ImageData"],СтруктураДанных["ContactID"], СтруктураДанных["Caller_Destination_Number"]);
			ИначеЕсли  Событие = "PutSettingsJSON" Тогда									
				сфпПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
				ТребуетсяОбновитьРегистр = НЕ (СтруктураДанных["LastNumberCount"] = сфпПараметрыСервера.ПоследниеЦифрыТелефонногоНомера);
				
				сфпПараметрыСервера.ПрефиксВыходаВГород					= СтруктураДанных["PrefCity"];
				сфпПараметрыСервера.ПрефиксВыходаВМежгород				= СтруктураДанных["PrefContry"];
				сфпПараметрыСервера.ПрефиксВыходаНаМеждународную		= СтруктураДанных["PrefWorld"];
				сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров	= СтруктураДанных["InternalNumMaxLen"];
				сфпПараметрыСервера.ПоследниеЦифрыТелефонногоНомера		= СтруктураДанных["LastNumberCount"];
				сфпПараметрыСервера.СтрокаПодключенияИстории			= СтруктураДанных["SQLConnectionString"];
				сфпПараметрыСервера.КодСтраны                           = СтруктураДанных["ContryCode"];
				сфпПараметрыСервера.КодГорода							= СтруктураДанных["CityCode"];
				сфпСофтФонПроСервер.сфпЗаписатьПараметрыСервераНативнаяКомпонента(СтруктураДанных);
				
				Если ТребуетсяОбновитьРегистр Тогда
					сфпСофтФонПроКлиент.сфпПерезаполнитьРегистрПоискаПоНомерам();
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтруктураДанных["LocalPhoneNum"]) Тогда
					// Если изменился текущий внутренний номер пользователя
					Если НЕ (СтруктураДанных["LocalPhoneNum"] = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер()) Тогда
						// Запишем внутренний номер для текущего пользователя
						ТекущийПользователь	= сфпСофтФонПроСервер.сфпТекущийПользователь();
						МассивПользователей = сфпСофтФонПроСервер.сфпЗаписатьНомерПользователю(СтруктураДанных["LocalPhoneNum"], ТекущийПользователь);
						Если сфпСофтФонПроСервер.сфпИспользоватьМаршрутизацию() и Не сфпСофтФонПроСервер.сфпИспользоватьМаршрутизациюПоНомеруИзКИПользователя() Тогда
							// Изменим маршрутизацию в АТС
							СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
							Для Каждого ПользовательМассива Из МассивПользователей Цикл
								НаборПользователя	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ПользовательМассива);
								Для Каждого СтрокаНабора Из НаборПользователя Цикл
									СтарыйНабор.Добавить(СтрокаНабора);
								КонецЦикла;	
							КонецЦикла;	
							НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
							// Изменяем внутренний номер на новый
							Для Каждого СтрокаНабора Из НовыйНабор Цикл
								СтрокаНабора.ВнутреннийНомер = СтруктураДанных["LocalPhoneNum"];
							КонецЦикла;	
							СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
							сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
							сфпСофтФонПроСервер.сфпПерезаписатьНомерЛинииТекущегоПользователяВРегистреПоиска(ТекущийПользователь, СтруктураДанных["LocalPhoneNum"]);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если СтруктураДанных.Свойство("UseRouter") И НЕ (СтруктураДанных["UseRouter"]  = Неопределено) Тогда
					Если НЕ (СтруктураДанных["UseRouter"] = сфпПараметрыСервера.ИспользоватьМаршрутизацию) Тогда
						сфпПараметрыСервера.ИспользоватьМаршрутизацию	= СтруктураДанных["UseRouter"];
						ОбновитьИнтерфейс();
					КонецЕсли;	
				ИначеЕсли СтруктураДанных.Свойство("HistoryOn") И НЕ (СтруктураДанных["HistoryOn"]  = Неопределено) Тогда
					// Если изменилась видимость отчетов
					Если НЕ (СтруктураДанных["HistoryOn"] = сфпПараметрыСервера.ИспользоватьИсториюЗвонков) Тогда
						сфпПараметрыСервера.ИспользоватьИсториюЗвонков = СтруктураДанных["HistoryOn"];
						ОбновитьИнтерфейс();
					КонецЕсли;	
				ИначеЕсли СтруктураДанных.Свойство("UseHistory") И НЕ (СтруктураДанных["UseHistory"]  = Неопределено) Тогда
					Если НЕ (СтруктураДанных["UseHistory"] = сфпПараметрыСервера.ИспользоватьИсториюЗвонков) Тогда
						сфпПараметрыСервера.ИспользоватьИсториюЗвонков = СтруктураДанных["UseHistory"]; 
						ОбновитьИнтерфейс();
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли  Событие = "OnEvent" Тогда
				сфпOnEvent(СтруктураДанных["EventType"], СтруктураДанных["Origin"], СтруктураДанных["ContactID"],
				СтруктураДанных["PhoneNumber"]);
			ИначеЕсли  Событие = "OnEventData" Тогда
				сфпOnEventData(СтруктураДанных["LineName"], СтруктураДанных["DataType"], СтруктураДанных["StrData"]);
			ИначеЕсли  Событие = "OnAllLinesInfo" Тогда
				сфпOnAllLinesInfo(СтруктураДанных["items"]);
			ИначеЕсли  Событие = "OnLinesStatus" Тогда	
				// Только для CRM 3.0 пока
				сфпOnLinesStatus(Данные);
			ИначеЕсли  Событие = "OnRecordInfo" Тогда	
				сфпOnRecordInfo(СтруктураДанных["RecordEventType"], СтруктураДанных["hCall"], СтруктураДанных["LineID"],
				СтруктураДанных["RecordID"], СтруктураДанных["TimeStart"], СтруктураДанных["DurationTalk"],
				СтруктураДанных["FileName"], СтруктураДанных["ResultDescription"]);
			ИначеЕсли  Событие = "OnResultInfo" Тогда
				сфпOnResultInfo(СтруктураДанных["OperationName"], СтруктураДанных["OperationResult"],
				СтруктураДанных["OperationResultDescription"], СтруктураДанных["DopInfo"]);
			ИначеЕсли  Событие = "OnCallInfoCoMagic" Тогда
				сфпOnCallInfoCoMagic(СтруктураДанных["LineName"], СтруктураДанных["CallInfo"]);
			КонецЕсли;
		ИначеЕсли Источник = "DbControl" Тогда
			// Ожидаем окончания сохранения файла
			Если (Событие = "OnLoadProgress") И (Данные = "100") Тогда
				FileName = сфпСофтФонПроКлиент.сфпПолучитьИмяФайлаЗаписиРазговора();
				Попытка
					ЗапуститьПриложение(FileName);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

// Функция выясняет, используется ли обработчик получения статусов линий
//
Функция сфпИспользуетсяОбработчикOnLinesStatus() Экспорт
	сфпВариантСофтфона = сфпСофтФонПроСервер.сфпПрочитатьПараметрыСеанса();
	Если сфпВариантСофтфона = ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпНативнаяКомпонента") Тогда
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(сфпСофтФонПроКлиент.сфпПолучитьВерсиюПанели(),"3.0.3.121") >= 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДКЛЮЧЕНИЯ К СОФТФОН

// Функция выполняет подключение к серверу СофтФона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Результат подключения
//
Функция сфпПодключиться()
	
	Если сфпСофтФонПроКлиентComОбъект.сфпПодключитьсяComОбъект() Тогда
		Если сфпСофтФонПроКлиентНативнаяКомпонента.сфпПодключитьсяНативнаяКомпонента() Тогда
			сфпСофтФонПроСервер.сфпУстановитьПараметрыСеанса(ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпНативнаяКомпонента"));
			ВерсияПанели = сфпПолучитьВерсиюПанели();
			Состояние("Версия компоненты СофтФон: " + ВерсияПанели);
			Возврат Истина;
		Иначе
			сфпСофтФонПроСервер.сфпУстановитьПараметрыСеанса(ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпComОбъект"));
			ВерсияПанели = сфпПолучитьВерсиюПанели();
			Состояние("Версия ПанельСофтФон: " + ВерсияПанели);
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли сфпСофтФонПроКлиентНативнаяКомпонента.сфпПодключитьсяНативнаяКомпонента(Истина) Тогда
		сфпСофтФонПроСервер.сфпУстановитьПараметрыСеанса(ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпНативнаяКомпонента"));
		ВерсияПанели = сфпПолучитьВерсиюПанели();
		Состояние("Версия компоненты СофтФон: " + ВерсияПанели);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // сфпПодключиться()

// Процедура заполняет префиксы и настройки
//
// Параметры:
//	Нет.
//
Процедура сфпЗаполнитьПрефиксыИНастройки() Экспорт
	сфпВариантСофтфона = сфпСофтФонПроСервер.сфпПрочитатьПараметрыСеанса();
	Если сфпВариантСофтфона = Неопределено Тогда Возврат; КонецЕсли;
	Если сфпВариантСофтфона = ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпComОбъект") Тогда
		сфпСофтФонПроКлиентComОбъект.сфпЗаполнитьПрефиксыИНастройкиComОбъект();
	Иначе
		сфпСофтФонПроКлиентНативнаяКомпонента.сфпЗаполнитьПрефиксыИНастройкиНативнаяКомпонента();
	КонецЕсли;
КонецПроцедуры // сфпЗаполнитьПрефиксыИНастройки()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАПРАВЛЕНИЯ ЗВОНКА

// Функция определяет внутренний или внешний звонок
//
// Параметры:
//	НаправлениеЗвонка	- Число		- Направление звонка
//	НомерТелефона		- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Булево	- Признак внешнего звонка
//
Функция сфпОпределитьВнешнийЗвонок(НаправлениеЗвонка, НомерТелефона) Экспорт 
	Если НаправлениеЗвонка = 3 Тогда // Внешний входящий
		Возврат Истина;
	ИначеЕсли НаправлениеЗвонка = 6 Тогда // Внешний исходящий
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(НомерТелефона) Тогда                  
		НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		сфпПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
		Если ПустаяСтрока(НомерТелефона) Тогда
			Возврат Истина;	
		ИначеЕсли сфпОпределитьВнутреннийЗвонокПоНомеру(НомерТелефона, сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;	
		КонецЕсли;	
	ИначеЕсли НаправлениеЗвонка = 1 Тогда // Внутренний
		Возврат Ложь;
	ИначеЕсли НаправлениеЗвонка = 0 Тогда  // Внешний
		Возврат Истина;	
	Иначе
		Возврат Ложь;  // 4, 5
	КонецЕсли;
КонецФункции // сфпОпределитьВнешнийЗвонок()

// Функция определяет входящий или исходящий звонок
//
// Параметры:
//	НомерСобытия	- Число	- Состояние звонка
//
// Возвращаемое значение:
//	Булево	- Признак входящего звонка
//
Функция сфпОпределитьВходящийЗвонок(НаправлениеЗвонка) Экспорт
	Если НаправлениеЗвонка = 1 Тогда // Внутренний исходящий
		Возврат Ложь;
	ИначеЕсли НаправлениеЗвонка = 6 Тогда // Внешний исходящий
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // сфпОпределитьВходящийЗвонок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРУКТУРОЙ ЗВОНКА

// Функция формирует структуру с данными звонка
//
// Параметры:
//	hCall				- Число			- Идентификатор звонка.
//	LineName			- Строка		- Имя линии.
//	CallerID			- Строка		- Номер звонящего.
//	CallerInfoName		- Строка		- Представление звонящего.
//	CalledId			- Строка		- Номер принимающего звонок.
//	CalledInfoName		- Строка		- Представление принимающего звонок.
//	State				- Число			- Состояние звонка.
//	Origin				- Число			- Направление звонка звонка. (0 – Неопределенно; 1 – Внутренний исходящий;
//											2 – Внутренний входящий; 3 – Внешний входящий; 4 – Недоступно;
//											5 – Конференция; 6 – Входящий)
//	AvailableActions	- Число			- Доступные действия со звонком. Битовая маска (aa_Drop	= $00000001; aa_Answer = $00000002;
//											aa_Hold = $00000004; aa_UnHold = $00000008; aa_Redirect = $00000010; aa_Transfer = $00000020;
//											aa_CompleteTransfer = $00000040; aa_CancelTransfer = $00000080)
//	ContactID			- Строка		- Идентификатор контакта во внешней учетной системе. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	Контакт				- СправочникСсылка	- Ссылка на контакт в ИБ
//	ВходящийЗвонок		- Булево			- Признак входящего звонка
//	ВнешнийЗвонок		- Булево			- Признак внешнего звонка
//	НомерТелефона		- Строка			- Очищенный номер телефона
//	НовыйЗвонок			- ДокументСсылка	- Ссылка на документ "Телефонный звонок"
//	МассивЗвонящих		- Массив			- Массив контактов, найденных по номеру телефона
//
// Возвращаемое значение:
//	Структура	- Структура с данными звонка
//
Функция сфпСформироватьСтруктуруЗвонка(hCall, LineName, CallerID, CallerInfoName, CalledId, CalledInfoName, State,
		Origin, AvailableActions, ContactID, Caller_Destination_Number, Контакт, ВходящийЗвонок, ВнешнийЗвонок, НомерТелефона, НовыйЗвонок,
		МассивЗвонящих) Экспорт
	СтруктураЗвонка = Новый Структура;
	СтруктураЗвонка.Вставить("hCall",						hCall);
	СтруктураЗвонка.Вставить("LineName",					LineName);
	СтруктураЗвонка.Вставить("CallerID",					CallerID);
	СтруктураЗвонка.Вставить("CallerInfoName",				CallerInfoName);
	СтруктураЗвонка.Вставить("CalledId",					CalledId);
	СтруктураЗвонка.Вставить("CalledInfoName",				CalledInfoName);
	СтруктураЗвонка.Вставить("State",						State);
	СтруктураЗвонка.Вставить("Origin",						Origin);
	СтруктураЗвонка.Вставить("AvailableActions",			AvailableActions);
	СтруктураЗвонка.Вставить("ContactID",					ContactID);
	СтруктураЗвонка.Вставить("Caller_Destination_Number",	Caller_Destination_Number);
	СтруктураЗвонка.Вставить("Контакт",						Контакт);
	СтруктураЗвонка.Вставить("ВходящийЗвонок",				ВходящийЗвонок);
	СтруктураЗвонка.Вставить("ВнешнийЗвонок",				ВнешнийЗвонок);
	СтруктураЗвонка.Вставить("НомерТелефона",				НомерТелефона);
	СтруктураЗвонка.Вставить("НовыйЗвонок",					НовыйЗвонок);
	СтруктураЗвонка.Вставить("МассивЗвонящих",				МассивЗвонящих);
	СтруктураЗвонка.Вставить("ИдентификаторЗаписи",			"");			
	СтруктураЗвонка.Вставить("ЗаписьЗапущена",				Ложь);			
	Возврат СтруктураЗвонка;
КонецФункции // сфпСформироватьСтруктуруЗвонка() 	

// Функция возвращает структуру звонка
//
// Параметры:
//	hCall	- Число	- Идентификатор звонка.
//
// Возвращаемое значение:
//	Структура	- Структура данных звонка
//
Функция сфпНайтиДанныеЗвонка(hCall) Экспорт
	Если сфпСтруктураЗвонков = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	КлючПоиска		= "_" + Формат(hCall, "ЧГ=0"); 
	НайденныйЗвонок	= Неопределено;
	сфпСтруктураЗвонков.Свойство(КлючПоиска, НайденныйЗвонок);
	Возврат НайденныйЗвонок;
КонецФункции // сфпНайтиДанныеЗвонка()	

// Функция возвращает структуру звонка
//
// Параметры:
//	Origin		- Число		- Идентификатор звонка.
//	ContactID	- Строка	- Идентификатор контакта.
//	PhoneNumber	- Число		- Номер телефона.
//
// Возвращаемое значение:
//	Структура	- Структура данных звонка
//
Функция сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber) Экспорт
	НайденныйЗвонок	= Неопределено;
	Если сфпСтруктураЗвонков = Неопределено Тогда
		Возврат НайденныйЗвонок;
	КонецЕсли;
	Если сфпСтруктураЗвонков.Количество() = 0 Тогда
		Возврат НайденныйЗвонок;
	КонецЕсли;
	Для Каждого ЭлементСписка Из сфпСтруктураЗвонков Цикл
		СтруктураЗвонка	= ЭлементСписка.Значение;
		Если СтруктураЗвонка.ContactID = ContactID Тогда
			НайденныйЗвонок	= СтруктураЗвонка;
			Прервать;
		ИначеЕсли сфпОпределитьВходящийЗвонок(Origin) Тогда
			Если Прав(СтруктураЗвонка.CallerID, 10) = Прав(PhoneNumber, 10) Тогда
				НайденныйЗвонок	= СтруктураЗвонка;
				Прервать;
			КонецЕсли;
		Иначе
			Если СтруктураЗвонка.CalledID = PhoneNumber Тогда
				НайденныйЗвонок	= СтруктураЗвонка;
				Прервать;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	Возврат НайденныйЗвонок;
КонецФункции // сфпНайтиДанныеЗвонка()	

// Процедура обновляет или добавляет данные звонка
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура с данными звонка
//
Процедура сфпОбновитьДанныеЗвонка(СтруктураЗвонка) Экспорт
	КлючПоиска		= "_" + Формат(СтруктураЗвонка.hCall, "ЧГ=0"); 
	НайденныйЗвонок	= Неопределено;
	Если сфпСтруктураЗвонков = Неопределено Тогда
		сфпСтруктураЗвонков	= Новый Структура;	
	КонецЕсли;	
	Если сфпСтруктураЗвонков.Свойство(КлючПоиска, НайденныйЗвонок) Тогда
		// Обновляем данные звонка
		Для Каждого КлючИЗначение Из СтруктураЗвонка Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Если КлючИЗначение.Ключ = "ВнешнийЗвонок" Тогда
					НайденныйЗвонок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				ИначеЕсли КлючИЗначение.Ключ = "ВходящийЗвонок" Тогда
					НайденныйЗвонок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				ИначеЕсли НЕ ЗначениеЗаполнено(НайденныйЗвонок[КлючИЗначение.Ключ]) Тогда
					НайденныйЗвонок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьВнутреннююПанель") Тогда
			// Оповещаем внутреннюю панель
			Оповестить("СофтФон_ОбновитьЗвонок", НайденныйЗвонок);          
		КонецЕсли;
	ИначеЕсли СтруктураЗвонка.State < 11 Тогда
		// Добавляем новый звонок
		сфпСтруктураЗвонков.Вставить(КлючПоиска, СтруктураЗвонка);
		Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьВнутреннююПанель") Тогда
			// Оповещаем внутреннюю панель
			Оповестить("СофтФон_ОбновитьЗвонок", СтруктураЗвонка);          
		КонецЕсли;
	Иначе	
		// Ищем в таблице первый звонок от SIP-клиента
		Для НомерSIP = 1 По 10 Цикл
			КлючПоискаSIP = "_" + Формат(НомерSIP,"ЧГ=0"); 
			Если сфпСтруктураЗвонков.Свойство(КлючПоискаSIP) Тогда
				НайденныйЗвонок = сфпСтруктураЗвонков[КлючПоискаSIP];
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если НайденныйЗвонок = Неопределено Тогда
			// Добавляем новый звонок
			сфпСтруктураЗвонков.Вставить(КлючПоиска, СтруктураЗвонка);
			Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьВнутреннююПанель") Тогда
				// Оповещаем внутреннюю панель
				Оповестить("СофтФон_ОбновитьЗвонок", СтруктураЗвонка);          
			КонецЕсли;
		Иначе
			// Обновляем данные звонка
			Для Каждого КлючИЗначение Из НайденныйЗвонок Цикл
				Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
					Если КлючИЗначение.Ключ = "ВнешнийЗвонок" Тогда
						СтруктураЗвонка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					ИначеЕсли КлючИЗначение.Ключ = "ВходящийЗвонок" Тогда
						СтруктураЗвонка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураЗвонка[КлючИЗначение.Ключ]) Тогда
						СтруктураЗвонка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
			    КонецЕсли;
			КонецЦикла;
			// Добавляем новый звонок
			сфпСтруктураЗвонков.Вставить(КлючПоиска, СтруктураЗвонка);
			// Удаляем старый звонок
			сфпСтруктураЗвонков.Удалить(КлючПоискаSIP);
			Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьВнутреннююПанель") Тогда
				// Оповещаем внутреннюю панель
				Оповестить("СофтФон_УдалитьЗвонок", НомерSIP); 
				// Оповещаем внутреннюю панель
				Оповестить("СофтФон_ОбновитьЗвонок", СтруктураЗвонка);          
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	// сфпОбновитьДанныеЗвонка()

// Процедура удаляет данные звонка
//
// Параметры:
//	hCall	- Число	- Идентификатор звонка.
//
Процедура сфпУдалитьДанныеЗвонка(hCall) Экспорт
	КлючПоиска		= "_" + Формат(hCall,"ЧГ=0"); 
	НайденныйЗвонок	= Неопределено;
	Если сфпСтруктураЗвонков.Свойство(КлючПоиска, НайденныйЗвонок) Тогда
		сфпСтруктураЗвонков.Удалить(КлючПоиска);
		Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьВнутреннююПанель") Тогда
			// Оповещаем внутреннюю панель
			Оповестить("СофтФон_УдалитьЗвонок", hCall); 
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // сфпУдалитьДанныеЗвонка()

// Процедура добавляет данные в структуру звонка
//
// Параметры:
//	hCall		- Число			- Идентификатор звонка.
//	Ключ		- Строка		- Имя элемента данных
//	Значение	- Произвольный	- Значение элемента данных
//
Процедура сфпДобавитьДанныеВСтруктуру(hCall, Ключ, Значение)
	КлючПоиска		= "_" + Формат(hCall, "ЧГ=0"); 
	НайденныйЗвонок	= Неопределено;
	Если сфпСтруктураЗвонков.Свойство(КлючПоиска, НайденныйЗвонок) Тогда
		Если НайденныйЗвонок.Свойство(Ключ) Тогда
			НайденныйЗвонок[Ключ] = Значение;
		Иначе
			НайденныйЗвонок.Вставить(Ключ, Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // сфпДобавитьДанныеВСтруктуру()

// Функция создает и заполняет структуру звонка
Функция сфпИнициализироватьСтруктуруЗвонка(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId, CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID, Caller_Destination_Number)
	
	Контакт			= Неопределено;
	НовыйЗвонок		= Неопределено;
	МассивЗвонящих	= Неопределено;
	ВходящийЗвонок	= сфпОпределитьВходящийЗвонок(Origin);
	Если ВходящийЗвонок Тогда
		PhoneNumber	= CallerID;
	Иначе
		PhoneNumber	= CalledId;
	КонецЕсли;	
	НомерТелефона	= сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(PhoneNumber);
	ВнешнийЗвонок	= сфпОпределитьВнешнийЗвонок(Origin, НомерТелефона);
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		Если ЗначениеЗаполнено(СокрЛП(AppValue)) Тогда
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(AppValue);
			СтарыйНомер = Текст.ПолучитьСтроку(3);
			Если НЕ ПустаяСтрока(СтарыйНомер) И НЕ (СтарыйНомер = НомерТелефона) Тогда
				Если (СтрДлина(СтарыйНомер) > 7) И (Найти(НомерТелефона, СтарыйНомер) > 0) Тогда
					НомерТелефона = СтарыйНомер;
				Иначе	
					AppValue = "";
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(AppValue)) Тогда
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(AppValue);
			Если ВходящийЗвонок Тогда
				CallerInfoName = Текст.ПолучитьСтроку(1);
			Иначе
				CalledInfoName = Текст.ПолучитьСтроку(1);	
			КонецЕсли;
		ИначеЕсли НЕ ПустаяСтрока(ContactID) Тогда
			Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(ContactID);
			Если НЕ (Контакт = Неопределено) Тогда
				ИмяКонтакта	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
				ContactID	= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
				ВладелецКонтакта	= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт);
				Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
					DopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
				Иначе	
					DopInfo	= "";
				КонецЕсли;	
				CalledInfoName = ИмяКонтакта;
				ImageData = сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
				AppValue = ИмяКонтакта + Символы.ПС + DopInfo + Символы.ПС + НомерТелефона;
			КонецЕсли;	
		Иначе
			МассивЗвонящих = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(НомерТелефона);
			Если МассивЗвонящих.Количество() = 1 Тогда
				Контакт		= МассивЗвонящих[0];
				ИмяКонтакта	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
				ContactID	= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
				ВладелецКонтакта	= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт);
				Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
					DopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
				Иначе	
					DopInfo	= "";
				КонецЕсли;	
				Если ВходящийЗвонок Тогда
					CallerInfoName = ИмяКонтакта;
				Иначе
					CalledInfoName = ИмяКонтакта;	
				КонецЕсли;
				ImageData	= сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
				AppValue	= ИмяКонтакта + Символы.ПС + DopInfo + Символы.ПС + НомерТелефона;
			ИначеЕсли МассивЗвонящих.Количество() > 1 Тогда
				Если ВходящийЗвонок Тогда
					ПервыйНайденный	= МассивЗвонящих[0];
					ИмяКонтакта		= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ПервыйНайденный);
					CallerInfoName 	= НСтр("ru='Первый найденный контакт: '") + Символы.ПС + ИмяКонтакта;
					DopInfo			= Нстр("ru = 'Есть и другие совпадения'");
					AppValue	= CallerInfoName + Символы.ПС + DopInfo + Символы.ПС + НомерТелефона;
					CallerInfoName = CallerInfoName + Символы.ПС;
					// Составим многострочный текст из контактов для показа в панели, первая строка будет проигнорирована
					Сч = 0;
					Для Каждого СтрокаМассива Из МассивЗвонящих Цикл
						Сч = Сч + 1;
						Если Сч = 5 Тогда
							CallerInfoName = CallerInfoName + "...";
							Прервать;
						КонецЕсли;
						CallerInfoName = CallerInfoName + ?(Сч = 1, "", ", ") + Строка(СтрокаМассива); 
					КонецЦикла;
				ИначеЕсли НЕ ПустаяСтрока(ContactID) Тогда
					Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(ContactID);
					Если НЕ (Контакт = Неопределено) Тогда
						ИмяКонтакта	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
						ContactID	= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
						ВладелецКонтакта	= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт);
						Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
							DopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
						Иначе	
							DopInfo	= "";
						КонецЕсли;	
						CalledInfoName = ИмяКонтакта;
						ImageData = сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
						AppValue = ИмяКонтакта + Символы.ПС + DopInfo + Символы.ПС + НомерТелефона;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗвонка = сфпСформироватьСтруктуруЗвонка(hCall, LineName, CallerID, CallerInfoName, CalledId, CalledInfoName,
		State, Origin, AvailableActions, ContactID, Caller_Destination_Number, Контакт, ВходящийЗвонок, ВнешнийЗвонок, НомерТелефона, НовыйЗвонок,
		МассивЗвонящих);
		
	Возврат СтруктураЗвонка;	
			
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ВНЕШНЕЙ ПАНЕЛИ

// Динамически подключаемый обработчик события "OnCallInfo" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	hCall				- Число			- Идентификатор линии.
//	LineName			- Строка		- Имя линии.
//	LineType			- Строка		- Тип линии.
//	CallerID			- Строка		- Номер звонящего.
//	CallerInfoName		- Строка		- Представление звонящего. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	CalledId			- Строка		- Номер принимающего звонок.
//	CalledInfoName		- Строка		- Представление принимающего звонок. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	State				- Число			- Состояние звонка.
//	Origin				- Число			- Направление звонка звонка. (0 – Неопределенно; 1 – Внутренний исходящий;
//											2 – Внутренний входящий; 3 – Внешний входящий; 4 – Недоступно;
//											5 – Конференция; 6 – Входящий)
//	DopInfo				- Строка		- Дополнительная информация о звонке. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	AvailableActions	- Число			- Доступные действия со звонком. Битовая маска (aa_Drop	= $00000001; aa_Answer = $00000002;
//											aa_Hold = $00000004; aa_UnHold = $00000008; aa_Redirect = $00000010; aa_Transfer = $00000020;
//											aa_CompleteTransfer = $00000040; aa_CancelTransfer = $00000080)
//	AppValue			- Произвольный	- Произвольная, служебная информация, хранимая приложением. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	ImageData			- Строка		- Картинка контакта в формате Base64. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	ContactID			- Строка		- Идентификатор контакта во внешней учетной системе. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	Caller_Destination_Number	- Строка - Номер, на который пришел входящий (например городской номер организации, на который звонит клиент).
//											
Процедура сфпOnCallInfo(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId, CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID, Caller_Destination_Number = "") Экспорт
	Если State = 0 Тогда
		СтруктураЗвонка	= сфпНайтиДанныеЗвонка(hCall);
		Если НЕ (СтруктураЗвонка = Неопределено) Тогда
			Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
				// Оповещаем об окончании разговора
				СтруктураОповещения = Новый Структура;
				НомерЛинии	= сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(LineName);
				НовыйОтветственный = сфпСофтФонПроСервер.сфпНайтиОтветственного(НомерЛинии);
				Если ЗначениеЗаполнено(НовыйОтветственный) 
				И НовыйОтветственный <> сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(СтруктураЗвонка.НовыйЗвонок, "Ответственный") Тогда
					СтруктураОповещения.Вставить("НовыйОтветственный",	НовыйОтветственный);
				КонецЕсли;
				СтруктураОповещения.Вставить("Звонок",	СтруктураЗвонка.НовыйЗвонок);
				Оповестить("СофтФон_КонецРазговора", СтруктураОповещения);
				ПараметрыФормы		= Новый Структура("Ключ", СтруктураЗвонка.НовыйЗвонок);
				ФормаЗвонка = ПолучитьФорму("Документ.ТелефонныйЗвонок.Форма.сфпФормаДокумента", ПараметрыФормы);
				Если НЕ ФормаЗвонка.Открыта() Тогда
					// Записываем в документ время окончания разговора
					Если СтруктураОповещения.Свойство("НовыйОтветственный") Тогда
						сфпСофтФонПроСервер.сфпЗаписатьОкончаниеЗвонка(СтруктураЗвонка.НовыйЗвонок, НовыйОтветственный);
					Иначе
						сфпСофтФонПроСервер.сфпЗаписатьОкончаниеЗвонка(СтруктураЗвонка.НовыйЗвонок);
					КонецЕсли;
				КонецЕсли;	
				// Записываем окончание разговора в регистр
				сфпСофтФонПроСервер.сфпЗаписатьОкончаниеЗвонкаВРегистр(СтруктураЗвонка.НовыйЗвонок, hCall);
			КонецЕсли;	
			// Удаляем звонок
			сфпУдалитьДанныеЗвонка(hCall);
		КонецЕсли;
		сфпДанныеЗаполнения	= Неопределено;
	ИначеЕсли State = 8 Тогда
		ТекНомерЛинии = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(сфпСофтФонПроСервер.сфпТекущийПользователь());		
		НомерЛинии 	  = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(LineName);
		НомерCallerID = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(CallerID);
		НомерCalledId = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(CalledId);
		Если (ТекНомерЛинии <> НомерЛинии И Origin = 3) ИЛИ (НЕ ЗначениеЗаполнено(НомерCallerID) И НЕ ЗначениеЗаполнено(НомерCalledId)) Тогда
			// звонок не нам
			Возврат;
		КонецЕсли;								
		
		СтруктураЗвонка	= сфпНайтиДанныеЗвонка(hCall);
		Если СтруктураЗвонка = Неопределено Тогда
			СтруктураЗвонка = сфпИнициализироватьСтруктуруЗвонка(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId, CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID, Caller_Destination_Number);
			сфпОбновитьДанныеЗвонка(СтруктураЗвонка);
		КонецЕсли;		
		
		// Для случая, когда Origin меняется в ходе коммуникации (в случае перевода между своими номерами)
		Если НЕ (СтруктураЗвонка = Неопределено) И СтруктураЗвонка.Origin <> Origin Тогда
			СтруктураЗвонка.ВнешнийЗвонок = сфпОпределитьВнешнийЗвонок(Origin, СтруктураЗвонка.НомерТелефона); 			
			СтруктураЗвонка.ВходящийЗвонок	= сфпОпределитьВходящийЗвонок(Origin);			
			сфпПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
			сфпМаксимальнаяДлинаВнутреннегоНомера = сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров;
			Если НЕ сфпОпределитьВнутреннийЗвонокПоНомеру(CallerID, сфпМаксимальнаяДлинаВнутреннегоНомера) Тогда
				СтруктураЗвонка.НомерТелефона	= сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(CallerID);
				СтруктураЗвонка.МассивЗвонящих = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(СтруктураЗвонка.НомерТелефона);
				Если СтруктураЗвонка.МассивЗвонящих.Количество() = 1 Тогда
					СтруктураЗвонка.Контакт		= СтруктураЗвонка.МассивЗвонящих[0];
					Контакт						= СтруктураЗвонка.Контакт;
					ИмяКонтакта					= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
					ContactID					= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
					ВладелецКонтакта			= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт);
					Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
						DopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
					Иначе	
						DopInfo	= "";
					КонецЕсли;	
					Если СтруктураЗвонка.ВходящийЗвонок Тогда
						CallerInfoName = ИмяКонтакта;
					Иначе
						CalledInfoName = ИмяКонтакта;	
					КонецЕсли;
					ImageData	= сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
					AppValue	= ИмяКонтакта + Символы.ПС + DopInfo + Символы.ПС + СтруктураЗвонка.НомерТелефона;
				ИначеЕсли СтруктураЗвонка.МассивЗвонящих.Количество() > 1 Тогда
					Если СтруктураЗвонка.ВходящийЗвонок Тогда
						ПервыйНайденный	= СтруктураЗвонка.МассивЗвонящих[0];
						ИмяКонтакта		= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ПервыйНайденный);
						CallerInfoName 	= НСтр("ru='Первый найденный контакт: '") + Символы.ПС + ИмяКонтакта;
						DopInfo			= Нстр("ru = 'Есть и другие совпадения'");
						AppValue = CallerInfoName + Символы.ПС + DopInfo + Символы.ПС + СтруктураЗвонка.НомерТелефона;
						CallerInfoName = CallerInfoName + Символы.ПС;
						// Составим многострочный текст из контактов для показа в панели, первая строка будет проигнорирована
						Сч = 0;
						Для Каждого СтрокаМассива Из СтруктураЗвонка.МассивЗвонящих Цикл
							Сч = Сч + 1;
							Если Сч = 5 Тогда
								CallerInfoName = CallerInfoName + "...";
								Прервать;
							КонецЕсли;
							CallerInfoName = CallerInfoName + ?(Сч = 1, "", ", ") + Строка(СтрокаМассива); 
						КонецЦикла;
					ИначеЕсли НЕ ПустаяСтрока(ContactID) Тогда
						Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(ContactID);
						Если НЕ (Контакт = Неопределено) Тогда
							СтруктураЗвонка.Контакт		= Контакт;									
							ИмяКонтакта					= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
							ContactID					= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
							ВладелецКонтакта			= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт);
							Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
								DopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
							Иначе	
								DopInfo	= "";
							КонецЕсли;	
							CalledInfoName = ИмяКонтакта;
							ImageData = сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
							AppValue = ИмяКонтакта + Символы.ПС + DopInfo + Символы.ПС + СтруктураЗвонка.НомерТелефона;
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			сфпВариантСофтфона = сфпСофтФонПроСервер.сфпПрочитатьПараметрыСеанса();
			Если сфпВариантСофтфона = ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпНативнаяКомпонента") Тогда
				сфпПанельУправления.SetCallInfo(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId, CalledInfoName, State,Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID, Caller_Destination_Number);
			КонецЕсли;	
			// -
			сфпОбновитьДанныеЗвонка(СтруктураЗвонка);
		КонецЕсли;
		Если НЕ (СтруктураЗвонка = Неопределено) Тогда
			Если ПустаяСтрока(СтруктураЗвонка.НомерТелефона)
			// изменился номер телефона, нужно изменить по нему данные в структуре
			ИЛИ ((СтруктураЗвонка.НомерТелефона <> CallerID) 
			И (СтруктураЗвонка.НомерТелефона <> CalledId)) Тогда
				Контакт			= Неопределено;
				НовыйЗвонок		= Неопределено;
				МассивЗвонящих	= Неопределено;
				ВходящийЗвонок	= сфпОпределитьВходящийЗвонок(Origin);
				Если ВходящийЗвонок Тогда
					PhoneNumber	= CallerID;
				Иначе
					PhoneNumber	= CalledId;
				КонецЕсли;	
				НомерТелефона	= сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(PhoneNumber);
				ВнешнийЗвонок	= сфпОпределитьВнешнийЗвонок(Origin, НомерТелефона);
				Если ЗначениеЗаполнено(НомерТелефона) Тогда
					Если ЗначениеЗаполнено(СокрЛП(AppValue)) Тогда
						Текст = Новый ТекстовыйДокумент;
						Текст.УстановитьТекст(AppValue);
						СтарыйНомер = Текст.ПолучитьСтроку(3);
						Если НЕ ПустаяСтрока(СтарыйНомер) И НЕ (СтарыйНомер = НомерТелефона) Тогда
							Если (СтрДлина(СтарыйНомер) > 7) И (Найти(НомерТелефона, СтарыйНомер) > 0) Тогда
								НомерТелефона = СтарыйНомер;
							Иначе	
								AppValue = "";
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СокрЛП(AppValue)) Тогда
						Текст = Новый ТекстовыйДокумент;
						Текст.УстановитьТекст(AppValue);
						Если ВходящийЗвонок Тогда
							CallerInfoName = Текст.ПолучитьСтроку(1);
						Иначе
							CalledInfoName = Текст.ПолучитьСтроку(1);	
						КонецЕсли;
					ИначеЕсли НЕ ПустаяСтрока(ContactID) Тогда
						Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(ContactID);
						Если НЕ (Контакт = Неопределено) Тогда
							ИмяКонтакта	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
							ContactID	= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
							ВладелецКонтакта	= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт);
							Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
								DopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
							Иначе	
								DopInfo	= "";
							КонецЕсли;	
							CalledInfoName = ИмяКонтакта;
							ImageData = сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
							AppValue = ИмяКонтакта + Символы.ПС + DopInfo + Символы.ПС + НомерТелефона;
						КонецЕсли;	
					Иначе
						МассивЗвонящих = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(НомерТелефона);
						Если МассивЗвонящих.Количество() = 1 Тогда
							Контакт		= МассивЗвонящих[0];
							ИмяКонтакта	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
							ContactID	= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
							ВладелецКонтакта	= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт);
							Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
								DopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
							Иначе	
								DopInfo	= "";
							КонецЕсли;	
							Если ВходящийЗвонок Тогда
								CallerInfoName = ИмяКонтакта;
							Иначе
								CalledInfoName = ИмяКонтакта;	
							КонецЕсли;
							ImageData	= сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
							AppValue	= ИмяКонтакта + Символы.ПС + DopInfo + Символы.ПС + НомерТелефона;
						ИначеЕсли МассивЗвонящих.Количество() > 1 Тогда
							Если ВходящийЗвонок Тогда
								ПервыйНайденный	= МассивЗвонящих[0];
								ИмяКонтакта		= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ПервыйНайденный);
								CallerInfoName 	= НСтр("ru='Первый найденный контакт: '") + Символы.ПС + ИмяКонтакта;
								DopInfo			= Нстр("ru = 'Есть и другие совпадения'");
								AppValue = CallerInfoName + Символы.ПС + DopInfo + Символы.ПС + НомерТелефона;
								CallerInfoName = CallerInfoName + Символы.ПС;
								// Составим многострочный текст из контактов для показа в панели, первая строка будет проигнорирована
								Сч = 0;
								Для Каждого СтрокаМассива Из МассивЗвонящих Цикл
									Сч = Сч + 1;
									Если Сч = 5 Тогда
										CallerInfoName = CallerInfoName + "...";
										Прервать;
									КонецЕсли;
									CallerInfoName = CallerInfoName + ?(Сч = 1, "", ", ") + Строка(СтрокаМассива); 
								КонецЦикла;
							ИначеЕсли НЕ ПустаяСтрока(ContactID) Тогда
								Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(ContactID);
								Если НЕ (Контакт = Неопределено) Тогда
									ИмяКонтакта	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(Контакт);
									ContactID	= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
									ВладелецКонтакта	= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт);
									Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
										DopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
									Иначе	
										DopInfo	= "";
									КонецЕсли;	
									CalledInfoName = ИмяКонтакта;
									ImageData = сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
									AppValue = ИмяКонтакта + Символы.ПС + DopInfo + Символы.ПС + НомерТелефона;
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					СтруктураЗвонка = сфпСформироватьСтруктуруЗвонка(hCall, LineName, CallerID, CallerInfoName, CalledId,
						CalledInfoName, State, Origin, AvailableActions, ContactID, Caller_Destination_Number, Контакт, ВходящийЗвонок, ВнешнийЗвонок,
						НомерТелефона, НовыйЗвонок, МассивЗвонящих);
					сфпОбновитьДанныеЗвонка(СтруктураЗвонка);
					сфпВариантСофтфона = сфпСофтФонПроСервер.сфпПрочитатьПараметрыСеанса();
					Если сфпВариантСофтфона = ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпНативнаяКомпонента") Тогда
						сфпПанельУправления.SetCallInfo(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId, CalledInfoName, State,Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID, Caller_Destination_Number);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			Если СтруктураЗвонка.ВнешнийЗвонок Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураЗвонка["НовыйЗвонок"]) Тогда
					СтарыйАлгоритм = Ложь;
					Если СтруктураЗвонка.ВходящийЗвонок Тогда
						сфпТекущееДействиеПриВходящемЗвонке = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке");	
						Если сфпТекущееДействиеПриВходящемЗвонке = Нстр("ru='Открыть телефонный звонок'") 
							ИЛИ сфпТекущееДействиеПриВходящемЗвонке = Нстр("ru='Нет действий'") Тогда
							СтарыйАлгоритм = Истина;
						КонецЕсли;						
					Иначе						
						сфпТекущееДействиеПриИсходящемЗвонке = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке");
						Если сфпТекущееДействиеПриИсходящемЗвонке = Нстр("ru='Открыть телефонный звонок'") 
							ИЛИ сфпТекущееДействиеПриИсходящемЗвонке = Нстр("ru='Нет действий'") Тогда
							СтарыйАлгоритм = Истина;						
						КонецЕсли;						
					КонецЕсли;
					Если сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда
						Если сфпСофтФонПроСервер.сфпИспользоватьСпрут7() Тогда
							// Передаем команду на запись разговора
							Если НЕ СтруктураЗвонка.ЗаписьЗапущена Тогда
								сфпПанельУправления.StartRecord(СтруктураЗвонка.LineName, СтруктураЗвонка.hCall);	
								СтруктураЗвонка.Вставить("ЗаписьЗапущена", Истина);
							КонецЕсли;								
						КонецЕсли;	
					КонецЕсли;																											
					Если СтарыйАлгоритм Тогда
						НовыйЗвонок	= сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
						Если ЗначениеЗаполнено(НовыйЗвонок) Тогда
							сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
							сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьАвтоматическоеДействие(СтруктураЗвонка);
						КонецЕсли;							
					Иначе
						сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьАвтоматическоеДействие(СтруктураЗвонка);
						НовыйЗвонок = ПредопределенноеЗначение("Документ.ТелефонныйЗвонок.ПустаяСсылка");
					КонецЕсли;												
				КонецЕсли;	
			КонецЕсли;
			Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьВнутреннююПанель") Тогда
				// Оповещаем внутреннюю панель
				СтруктураЗвонка.State				= State;
				СтруктураЗвонка.AvailableActions	= AvailableActions;
				Оповестить("СофтФон_ОбновитьЗвонок", СтруктураЗвонка);          
			КонецЕсли;
		КонецЕсли;

	Иначе
		СтруктураЗвонка = сфпИнициализироватьСтруктуруЗвонка(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId, CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID, Caller_Destination_Number);
		сфпОбновитьДанныеЗвонка(СтруктураЗвонка);
		
		сфпВариантСофтфона = сфпСофтФонПроСервер.сфпПрочитатьПараметрыСеанса();
		Если сфпВариантСофтфона = ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпНативнаяКомпонента") Тогда
			сфпПанельУправления.SetCallInfo(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId, CalledInfoName, State,Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID, Caller_Destination_Number);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // сфпOnCallInfo()

// Динамически подключаемый обработчик события "OnEvent" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	EventType	- Число		- Тип события (-1 – Таймер; -2 – Изменились настройки; 0 – Автоматический при ответе на звонок;
//										1 – Ручной вызов для создания события;	Прочие при регистрации событий из 1С)
//	Origin		- Число		- Направление звонка звонка (0 – Неопределенно; 1 – Внутренний исходящий; 2 – Внутренний входящий;
//										3 – Внешний входящий; 4 – Недоступно; 5 – Конференция; 6 – Входящий)
//	ContactID	- Строка	- Идентификатор контакта во внешней учетной системе
//	PhoneNumber	- Строка	- Номер телефона контакта
//
Процедура сфпOnEvent(EventType, Origin, ContactID, PhoneNumber) Экспорт
	Если EventType = -2 Тогда
		// Событие изменения номера основной линии
		сфпЗаполнитьПрефиксыИНастройки();
	ИначеЕсли EventType = -1 Тогда
		// Событие таймера, для обновления истории звонков
	ИначеЕсли EventType = 0 Тогда
		// Событие ответа на звонок панели управления
		СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);		
	ИначеЕсли EventType = 1 Тогда
		// Событие нажатия кнопки "Передать в 1С" панели управления
		СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);
		сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьАвтоматическоеДействие(СтруктураЗвонка, Истина);
	Иначе
		// Прочие кнопки, определенные пользователем
		СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);
		Если ТипЗнч(СтруктураЗвонка) = Тип("Структура") Тогда
			СтруктураЗвонка.Вставить("ФормаПолучена", Ложь);
		КонецЕсли;
		сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьДоступноеДействие(EventType, СтруктураЗвонка);
	КонецЕсли;
КонецПроцедуры // сфпOnEvent()

// Динамически подключаемый обработчик события "OnRecordInfo" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	RecordEventType		- Число		- Тип события
// 	hCall				- Число		- Идентификатор звонка. Может быть = 0.
//	LineID				- Строка	- Имя линии, на которой происходит звонок. Может быть = "".
//	RecordID			- Строка	- Идентификатор записи
//	TimeStart			- ДатаВремя	- Время начала записи
//	DurationTalk		- Число		- Продолжительность записи в секундах.
//	FileName			- Строка	- Имя файла звонка. Может быть = "".
//	ResultDescription	- Строка	- Описание ошибки. Может быть = "".
//	
Процедура сфпOnRecordInfo(RecordEventType, hCall, LineID, RecordID, TimeStart, DurationTalk, FileName, ResultDescription) Экспорт
	Если НЕ сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда Возврат; КонецЕсли;
	Если RecordEventType = 0 Тогда
		// Запись остановлена
		ПоказатьПредупреждение(, ResultDescription, 5);
	ИначеЕсли RecordEventType = 1 Тогда
		// Запись запущена
		СтруктураЗвонка	= сфпНайтиДанныеЗвонка(hCall);
		Если НЕ (СтруктураЗвонка = Неопределено) Тогда
			// Записываем в регистр истории звонков идентификатор записи
			сфпСофтФонПроСервер.сфпЗаписатьИдентификаторЗаписиВРегистр(СтруктураЗвонка.НовыйЗвонок, hCall, RecordID);			
			// Для системы записей CLON передаём в структуру идентификатор
			СтруктураЗвонка.Вставить("ИдентификаторЗаписи", RecordID);
		КонецЕсли;
	ИначеЕсли RecordEventType = 2 Тогда
		// Файл записи сохранен
		Если ПустаяСтрока(FileName) Тогда
			FileName = сфпПолучитьИмяФайлаЗаписиРазговора();
		КонецЕсли;	
		Попытка
			НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), FileName);
		Исключение
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры // сфпOnRecordInfo()

// Динамически подключаемый обработчик события "OnEvent" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	SA	- COMSafeArray	- Массив описания состояния линий
//
Процедура сфпOnAllLinesInfo(ПараметрыЛиний) Экспорт
	сфпВариантСофтфона = сфпСофтФонПроСервер.сфпПрочитатьПараметрыСеанса();
	Если сфпВариантСофтфона = Неопределено Тогда Возврат; КонецЕсли;
	Если сфпВариантСофтфона = ПредопределенноеЗначение("Перечисление.сфпВариантИспользованияСофтфона.сфпComОбъект") Тогда
		сфпСофтФонПроКлиентComОбъект.сфпOnAllLinesInfoComОбъект(ПараметрыЛиний);
	Иначе
		сфпСофтФонПроКлиентНативнаяКомпонента.сфпOnAllLinesInfoНативнаяКомпонента(ПараметрыЛиний);
	КонецЕсли;	
КонецПроцедуры // сфпOnAllLinesInfo()

// Динамически подключаемый обработчик события "OnResultInfo" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	OperationName				- Строка	- Наименование операции
//	OperationResult				- Число		- Результат. Успешное выполнение, если = 0
//  OperationResultDescription	- Строка	- Описание результата
//	DopInfo						- Строка	- Дополнительная информация
//
Процедура сфпOnResultInfo(OperationName, OperationResult, OperationResultDescription, DopInfo) Экспорт
	Если OperationName = "Autorization" Тогда
		Если OperationResult = 0 Тогда	// Нет ошибки
			сфпЗаполнитьПрефиксыИНастройки(); // Получаем настройки сервера СофтФон
		ИначеЕсли OperationResult = 1 Тогда	// Неверный пароль
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(OperationResultDescription);
		ИначеЕсли OperationResult = 2 Тогда	// Пользователь не найден
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(OperationResultDescription);
			Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПривязатьВнутреннийНомер") Тогда
				ЛогинСофтфон 	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпЛогинНаСерверСофтФон");
				ПарольСофтфон 	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПарольНаСерверСофтФон");
				НомерСофтфон	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпТекущийВнутреннийНомер");
				сфпПанельУправления.Registration(ЛогинСофтфон, ПарольСофтфон, НомерСофтфон,"","",1);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Регистрация нового пользователя...'"));
			КонецЕсли;
		ИначеЕсли OperationResult = 3 Тогда	// Отказано в самостоятельной регистрации пользователя
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(OperationResultDescription);
		ИначеЕсли OperationResult = 4 Тогда	// Пользователь уже зарегистрирован		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(OperationResultDescription);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // Подключаемый_OnResultInfo()

// Динамически подключаемый обработчик события "OnEventData" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	LineName	- Строка	- Имя линии
//  DataType	- Число		- Тип данных
//	StrData		- Строка	- Строковые данные
//
Процедура сфпOnEventData(LineName, DataType, StrData) Экспорт
	Если (DataType = 51) ИЛИ (DataType = 52) Тогда
		Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
			Если ПустаяСтрока(StrData) Тогда Возврат; КонецЕсли;						
			СтруктураВнешнихДанных	= сфпСофтФонПроКлиент.сфпПолучитьСтруктуруВнешнихДанных(StrData);
			Origin		= 0;
			ContactID	= "";
			PhoneNumber	= Прав(СтруктураВнешнихДанных.ani, 10);
			СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);
			Если СтруктураЗвонка = Неопределено Тогда
				// Сохраняем данные CoMagic в структуре заполнения
				Если сфпДанныеЗаполнения = Неопределено Тогда
					сфпДанныеЗаполнения = Новый Структура;
					сфпДанныеЗаполнения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
				Иначе
					Если сфпДанныеЗаполнения.Свойство("СтруктураCoMagic") Тогда
						сфпДанныеЗаполнения.Удалить("СтруктураCoMagic");
					КонецЕсли;	
					сфпДанныеЗаполнения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
				КонецЕсли;	
			Иначе	
				// Оповещаем о структуре CoMagic
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Звонок",				СтруктураЗвонка.НовыйЗвонок);
				СтруктураОповещения.Вставить("СтруктураCoMagic",	СтруктураВнешнихДанных);
				Оповестить("Софтфон_CoMagic", СтруктураОповещения);
				ПараметрыФормы	= Новый Структура("Ключ", СтруктураЗвонка.НовыйЗвонок);
				ФормаЗвонка		= ПолучитьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыФормы);
				Если НЕ ФормаЗвонка.Открыта() Тогда
					// Записываем в документ структуру CoMagic
					сфпСофтФонПроСервер.сфпЗаписатьСтруктуруCoMagic(СтруктураЗвонка.НовыйЗвонок, СтруктураВнешнихДанных);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;		
	Конецесли;		
КонецПроцедуры // сфпOnEventData()


// Динамически подключаемый обработчик события "OnCallInfoCoMagic" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	LineName	- Строка	- Имя линии
//	StrData		- Строка	- Строковые данные
//
Процедура сфпOnCallInfoCoMagic(LineName, StrData) Экспорт
	Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
		Если ПустаяСтрока(StrData) Тогда Возврат; КонецЕсли;						
		СтруктураВнешнихДанных	= сфпСофтФонПроКлиент.сфпПолучитьСтруктуруВнешнихДанных(StrData);
		Origin		= 0;
		ContactID	= "";
		PhoneNumber	= Прав(СтруктураВнешнихДанных.ani, 10);
		СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);
		Если СтруктураЗвонка = Неопределено Тогда
			// Сохраняем данные CoMagic в структуре заполнения
			Если сфпДанныеЗаполнения = Неопределено Тогда
				сфпДанныеЗаполнения = Новый Структура;
				сфпДанныеЗаполнения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
			Иначе
				Если сфпДанныеЗаполнения.Свойство("СтруктураCoMagic") Тогда
					сфпДанныеЗаполнения.Удалить("СтруктураCoMagic");
				КонецЕсли;	
				сфпДанныеЗаполнения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
			КонецЕсли;	
		Иначе	
			// Оповещаем о структуре CoMagic
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Звонок",				СтруктураЗвонка.НовыйЗвонок);
			СтруктураОповещения.Вставить("СтруктураCoMagic",	СтруктураВнешнихДанных);
			Оповестить("Софтфон_CoMagic", СтруктураОповещения);
			ПараметрыФормы	= Новый Структура("Ключ", СтруктураЗвонка.НовыйЗвонок);
			ФормаЗвонка		= ПолучитьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыФормы);
			Если НЕ ФормаЗвонка.Открыта() Тогда
				// Записываем в документ структуру CoMagic
				сфпСофтФонПроСервер.сфпЗаписатьСтруктуруCoMagic(СтруктураЗвонка.НовыйЗвонок, СтруктураВнешнихДанных);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры // сфпOnCallInfoCoMagic()

// Динамически подключаемый обработчик события "сфпOnLinesStatus" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	StrData		- Строка	- Строковые данные
//
Процедура сфпOnLinesStatus(StrData) Экспорт
	РезультатСоответствие = сфпСофтФонПроСервер.UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(StrData));
	Если РезультатСоответствие = Неопределено Тогда Возврат; КонецЕсли;
	МассивРезультата = РезультатСоответствие.Получить("lines");
	Если МассивРезультата = Неопределено Тогда Возврат; КонецЕсли;
	МассивИзменений = Новый Массив;
	Для Каждого ЭлементМассива Из МассивРезультата Цикл
		СтруктураКлючей = Новый Структура();
		Для Каждого	ЭлементСоответствия Из ЭлементМассива Цикл
			СтруктураКлючей.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение); 
		КонецЦикла;	
		МассивИзменений.Добавить(СтруктураКлючей);
	КонецЦикла;	
	Если МассивИзменений.Количество() > 0 Тогда
		сфпПерезаполнитьСоответствиеСостоянияЛиний(МассивИзменений);
	КонецЕсли;
КонецПроцедуры // сфпOnLinesStatus()

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫПОЛНЕНИЯ ЗВОНКА 

// Функция разбирает переданную структуру номера телефона и возвращает строку номера, которую будет набирать АТС.
//
// Параметры:
//	СтруктураНомера	- Структура	- Структура телефонного номера.
//
// Возвращаемое значение:
//	Строка	- Строка для набора АТС.
//
Функция сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера)
	сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
	Если ПустаяСтрока(СтруктураНомера.НомерТелефона) Тогда
		Если ПустаяСтрока(СтруктураНомера.Добавочный) Тогда
			// Номера нет.
			РезультатНомер = "";
		Иначе
			// Внутренний номер.
			РезультатНомер = СтруктураНомера.Добавочный;
		КонецЕсли;			
		
	// проверяем длину номеру вместе с длиной кода города, т.к. в ряде компаний внутренний 
	// номер может быть достаточно длинным, до 9 символов
	// у внутренних же номеров код города отсутствует

	ИначеЕсли СтрДлина(СтруктураНомера.НомерТелефона)+СтрДлина(СтруктураНомера.КодГорода) > сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров Тогда
		КодСтраныНомера	= СокрЛП(СтрЗаменить(СтруктураНомера.КодСтраны, "+", ""));
		КодСтраныНомера	= ?(КодСтраныНомера = "8", "7", КодСтраныНомера);
		КодСтраныПользователя	= СокрЛП(СтрЗаменить(сфпПараметрыСервера.КодСтраны, "+", ""));
		КодСтраныПользователя	= ?(КодСтраныПользователя = "8", "7", КодСтраныПользователя);
		Если ПустаяСтрока(КодСтраныНомера) Тогда
			// Номер нашей страны.
			РезультатНомер = СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		ИначеЕсли ПустаяСтрока(КодСтраныПользователя) Тогда
			// Номер нашей страны.
			РезультатНомер = СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		ИначеЕсли (КодСтраныНомера	= КодСтраныПользователя) Тогда
			// Номер нашей страны.
			РезультатНомер = СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		Иначе
			// Номер друой страны.
			РезультатНомер = СтруктураНомера.КодСтраны + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		КонецЕсли;	
	Иначе
		// Внутренний номер.
		РезультатНомер = СтруктураНомера.НомерТелефона;
	КонецЕсли;	
	Возврат РезультатНомер;
КонецФункции // ПреобразоватьНомерСУчетомПрефиксов()

// Процедура выполняет звонок через панель СофтФон
//
// Параметры:
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура сфпВыполнитьЗвонок(ДополнительныеПараметры)
	Если ПустаяСтрока(ДополнительныеПараметры.Телефон) Тогда Возврат; КонецЕсли;
	ContactID		= "";
	ContactName		= "";
	ContactDopInfo	= "";
	ContactImage	= ""; 
	Если ЗначениеЗаполнено(ДополнительныеПараметры.СсылкаНаОбъект) Тогда
		ContactName = сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ДополнительныеПараметры.СсылкаНаОбъект);
		Если НЕ (ТипЗнч(ДополнительныеПараметры.СсылкаНаОбъект) = Тип("Строка")) Тогда
			ContactID			= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(ДополнительныеПараметры.СсылкаНаОбъект);
			ВладелецКонтакта	= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(ДополнительныеПараметры.СсылкаНаОбъект);
			Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
				ContactDopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
			Иначе	
				ContactDopInfo	= "";
			КонецЕсли;	
			ContactImage		= сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(ДополнительныеПараметры.СсылкаНаОбъект, Истина);	
		КонецЕсли;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("МеждународныйЗвонок") и ДополнительныеПараметры.МеждународныйЗвонок Тогда
		ДополнительныеПараметры.Телефон = СтрЗаменить(ДополнительныеПараметры.Телефон, "+", "");
	КонецЕсли;					
	Попытка
		Результат = сфпПанельУправления.MakeCall("", ДополнительныеПараметры.Телефон, ContactID, ContactName, ContactDopInfo, ContactImage);
		сфпДанныеЗаполнения	= ДополнительныеПараметры.ДанныеЗаполнения;
	Исключение
		сфпДанныеЗаполнения	= Неопределено;
		Состояние(НСтр("ru='Не удалось создать звонок'"));	
	КонецПопытки;
КонецПроцедуры // сфпВыполнитьЗвонок()

// Процедура - обработчик ответа на вопрос о совершении международного звонка
//
// Параметры:
//	ОтветНаВопрос			- КодВозвратаДиалога	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура сфпВыполнитьМеждународныйЗвонок(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда	
		ДополнительныеПараметры.Вставить("МеждународныйЗвонок", Истина);						
		сфпВыполнитьЗвонок(ДополнительныеПараметры);
	КонецЕсли;	
КонецПроцедуры // ВыполнитьМеждународныйЗвонок()

// Процедура выполняет звонок по номеру телефона
//
// Параметры:
//	Телефон					- Строка			- Номер телефона
//	Объект					- СправочникСсылка	- Контакт
//	ДанныеЗаполнения		- Структура			- Данные для заполнения создаваемого телефонного звонка
//
Процедура сфпПозвонить(Телефон, Объект = Неопределено, ДанныеЗаполнения = Неопределено) Экспорт
	Если ПустаяСтрока(Телефон) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран номер телефона!'"), 5);
		Возврат;
	ИначеЕсли НЕ сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	ИначеЕсли Телефон = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер() Тогда
		Возврат;
	КонецЕсли;
	сфпЗаполнитьПрефиксыИНастройки();	
	ContactID		= "";
	ContactName		= "";
	ContactDopInfo	= "";
	ContactImage	= "";
	СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
	Телефон = сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Телефон",				Телефон);
	ДополнительныеПараметры.Вставить("СсылкаНаОбъект",		Объект);
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
	Если СтрДлина(Телефон) > 10 Тогда
		ОповещениеОтвета = Новый ОписаниеОповещения("сфпВыполнитьМеждународныйЗвонок", сфпСофтФонПроКлиент, ДополнительныеПараметры);
		ТекстЗаголовка	= НСтр("ru='ВНИМАНИЕ!!! Выполняется звонок в другую страну'");
		ТекстВопроса	= НСтр("ru='ВОЗМОЖНО!!! Телефонный номер набран неверно"  + Символы.ПС + "Подтвердите выполнение международного звонка'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,	НСтр("ru='Набрать номер'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет,	НСтр("ru='Отменить'"));
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, СписокКнопок, 30, КодВозвратаДиалога.Нет, ТекстЗаголовка, КодВозвратаДиалога.Нет);
	Иначе
		сфпВыполнитьЗвонок(ДополнительныеПараметры);		
	КонецЕсли;	
КонецПроцедуры // сфпПозвонить()	

// Процедура - обработчик оповещения для выполнения звонка
//
// Параметры:
//	ВыбранныйНомер			- ЭлементСпискаЗначений	- Выбранный номер
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура сфпВыполнитьЗвонокПоНомеру(ВыбранныйНомер, ДополнительныеПараметры) Экспорт
	Если ВыбранныйНомер = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран номер телефона!'"), 5);
		Возврат;
	КонецЕсли;
	сфпПозвонить(ВыбранныйНомер.Значение.Телефон, ВыбранныйНомер.Значение.Контакт, ДополнительныеПараметры.ДанныеЗаполнения);
КонецПроцедуры // сфпВыполнитьЗвонокПоНомеру()

// Процедура выполняет звонок после выбора номера телефона из списка номеров
//
// Параметры:
//	СписокОбъектов			- СписокЗначений	- Список объектов, для которых выбираются телефоны
//	ДанныеЗаполнения		- Структура			- Данные для заполнения создаваемого события
//
Процедура сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения = Неопределено) Экспорт
	Если СписокОбъектов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран абонент'"), 5);
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
	СписокТелефонов = сфпЗаполнитьСписокТелефонов(СписокОбъектов);	
	Если СписокТелефонов.Количество() = 2 Тогда
		сфпВыполнитьЗвонокПоНомеру(СписокТелефонов[0], ДополнительныеПараметры);
	Иначе	
		ОписаниеВыбора = Новый ОписаниеОповещения("сфпВыполнитьЗвонокПоНомеру", сфпСофтФонПроКлиент, ДополнительныеПараметры); 
		СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеВыбора, НСтр("ru='Выбор телефона'"));
	КонецЕсли;
КонецПроцедуры // сфпПозвонитьВыбравТелефон()	

/////////////////////////////////////////////////
// ЗВОНОК

// Функция проверяет строку на пустоту
//
// Параметры:
//	ВыбСтрока		- Строка	- Проверяемая строка
//	ПризнакЗапятой  - Булево	- Признак добавления запятой
//
// Возвращаемое значение:
//	Строка	- Строка после проверки
//
Функция сфпПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой = Истина) Экспорт
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой, ",", "") + " ";
	КонецЕсли; 
КонецФункции // сфпПроверкаПустойСтроки()

// Функция определяет внутренний или внешний звонок исходя
//  из длины переданного номера телефона, и максимальной длины внутреннего номера 
//  телефона установленного в системе. Если длина номера > 0 И <= макс, то это внутренний
//
// Параметры:
//	НомерТелефона						- Строка	- Номер телефона
//	МаксимальнаяДлинаВнутреннегоНомера	- Число		- Максимальная длина внутреннего номера
//
// Возвращаемое значение:
//	Булево	- Признак внутреннего звонка
//
Функция сфпОпределитьВнутреннийЗвонокПоНомеру(НомерТелефона, МаксимальнаяДлинаВнутреннегоНомера) Экспорт
	НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	ДлинаНомераТелефона = СтрДлина(НомерТелефона);
	Возврат (ДлинаНомераТелефона <= МаксимальнаяДлинаВнутреннегоНомера);
КонецФункции // сфпОпределитьВнутреннийЗвонокПоНомеру()

// Функция формирует структуру телефонного звонка по контактной информации,
//  если значение неопределено, то создает пустую структуру, сделано для удобства
//  создание структуры в одном месте
//
// Параметры:
//	ТекущаяСтрока	- СтрокаТабличнойЧасти	- Строка контактной информации
//
// Возвращаемое значение:
//	СтруктураНомера	- Структура телефонного номера
//
Функция сфпСформироватьСтруктуруНомераИзПолей(ТекущаяСтрока = Неопределено) Экспорт
	СтруктураТелефона = Новый Структура;
	Если ТекущаяСтрока = Неопределено Тогда
		СтруктураТелефона.Вставить("НомерТелефона", 	"");
		СтруктураТелефона.Вставить("Добавочный",    	"");
		СтруктураТелефона.Вставить("КодГорода",     	"");
		СтруктураТелефона.Вставить("КодСтраны",     	"");
		СтруктураТелефона.Вставить("Представление",		"");
	Иначе
		СтруктураТелефона = сфпПреобразоватьСтрокуВСписокПолей(ТекущаяСтрока.ЗначенияПолей);
	КонецЕсли;
	сфпСформироватьПредставлениеТелефонаПоСтруктуре(СтруктураТелефона);
	Возврат СтруктураТелефона;
КонецФункции // сфпСформироватьСтруктуруНомераИзПолей()	

// Функция преобразовывает строку полей в список значений
//
// Параметры:
//	СтрокаПолей	- Строка	- Строка, содержащая контактную информацию
//
// Возвращаемое значение:
//	СписокЗначений	- Список полей контактной информации
//
Функция сфпПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт 
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
		Если Лев(Стр, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
			КонецЕсли;
		Иначе
			Поз = Найти(Стр, "=");
			Если Поз <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции // сфпПреобразоватьСтрокуВСписокПолей()

// Процедура формирует строковое представление адреса
//
// Параметры:
//	СтруктураТелефона	- Структура	- Структура телефонного номера
//
Процедура сфпСформироватьПредставлениеТелефонаПоСтруктуре(СтруктураТелефона) Экспорт
	Если ПустаяСтрока(СтруктураТелефона.НомерТелефона) Тогда
		// Если не заполнено поле НомерТелефона, то принудительно скидываем представление,
		// потому что код страны и код города явно мало для создания номера.
		СтруктураТелефона.КодСтраны = "";
		СтруктураТелефона.КодГорода = "";
		СтруктураТелефона.Представление = "";
	Иначе	
		СтруктураТелефона.Представление = СокрЛП(СтруктураТелефона.КодСтраны);
		Если НЕ ПустаяСтрока(СтруктураТелефона.КодГорода) Тогда
			СтруктураТелефона.Представление = СтруктураТелефона.Представление + ?(ПустаяСтрока(СтруктураТелефона.Представление), "", " ") + "(" + СокрЛП(СтруктураТелефона.КодГорода) + ")";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураТелефона.НомерТелефона) Тогда
			СтруктураТелефона.Представление = СтруктураТелефона.Представление + ?(ПустаяСтрока(СтруктураТелефона.Представление), "", " ") + СокрЛП(СтруктураТелефона.НомерТелефона);
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураТелефона.Добавочный) Тогда
			СтруктураТелефона.Представление = СтруктураТелефона.Представление + ?(ПустаяСтрока(СтруктураТелефона.Представление), "", ", ") + "доб. " + СокрЛП(СтруктураТелефона.Добавочный);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // сфпСформироватьПредставлениеТелефонаПоСтруктуре()

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Функция возвращает список телефонов объектов из списка
//
// Параметры:
//	СписокОбъектов	- СписокЗначений	- Список объектов, для которых выбираются телефоны
//
// Возвращаемое значение:
//	СписокЗначений	- Список телефонов объектов
//
Функция сфпЗаполнитьСписокТелефонов(СписокОбъектов) Экспорт
	СписокТелефонов = Новый СписокЗначений;
	ТекКонтакт = "";
	Для Каждого СтрокаКонтакт Из СписокОбъектов Цикл
		ТелефоныКонтакта = сфпСофтФонПроСервер.сфпПолучитьМассивТелефоновИФаксов(СтрокаКонтакт.Значение);
		Для Каждого Телефон Из ТелефоныКонтакта Цикл
			Значение = Новый Структура;
			Значение.Вставить("Контакт", СтрокаКонтакт.Значение);
			Значение.Вставить("Телефон", Телефон.Представление);
			Если НЕ (ТекКонтакт = СтрокаКонтакт.Значение)Тогда
				//+вог
				//СписокТелефонов.Добавить(Значение, СокрЛП(СтрокаКонтакт.Значение));
				СписокТелефонов.Добавить(Значение, СокрЛП(Телефон.ПредставлениеОбъекта));
				//-вог
				ТекКонтакт = СтрокаКонтакт.Значение;
			КонецЕсли;
			СписокТелефонов.Добавить(Значение, "  " + СокрЛП(Телефон.Вид) + ": " + Телефон.Представление);
		КонецЦикла;
	КонецЦикла;
	Возврат СписокТелефонов;
КонецФункции // сфпЗаполнитьСписокТелефонов()

/////////////////////////////////////////////////
// ОБЩИЕ ТЕЛЕФОННЫЕ КНИГИ СЕРВЕРА СОФТФОН

// Процедура записывает телефонную книгу на сервере СофтФон
//
// Параметры:
//	СтруктураКниги	- Структура	- Структура телефонной книги
//
Процедура сфпЗаписатьТелефоннуюКнигу(СтруктураКниги) Экспорт
	Если НЕ сфпПроверитьДоступностьСофтФон(Ложь) Тогда Возврат; КонецЕсли;
	ОписаниеТелефоннойКниги = сфпСофтФонПроСервер.сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, Ложь);
	Если ПустаяСтрока(ОписаниеТелефоннойКниги) Тогда Возврат; КонецЕсли;
	ОписаниеОшибки = "";
	Попытка
		сфпПанельУправления.PutAddressBooks(ОписаниеТелефоннойКниги, ОписаниеОшибки);
	Исключение
	КонецПопытки;
	Если НЕ (ОписаниеОшибки = "Ok") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;	
КонецПроцедуры // сфпЗаписатьТелефоннуюКнигу()

// Процедура удаляет телефонную книгу на сервере СофтФон
//
// Параметры:
//	СтруктураКниги	- Структура	- Структура телефонной книги
//
Процедура сфпУдалитьТелефоннуюКнигу(СтруктураКниги) Экспорт
	Если НЕ сфпПроверитьДоступностьСофтФон(Ложь) Тогда Возврат; КонецЕсли;
	ОписаниеТелефоннойКниги = сфпСофтФонПроСервер.сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, Истина);
	ОписаниеОшибки = "";
	Попытка
		сфпПанельУправления.PutAddressBooks(ОписаниеТелефоннойКниги, ОписаниеОшибки);
	Исключение
	КонецПопытки;
	Если НЕ (ОписаниеОшибки = "Ok") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;	
КонецПроцедуры // сфпУдалитьТелефоннуюКнигу()

/////////////////////////////////////////////////
// СОСТОЯНИЯ ЛИНИЙ

// Процедура получает состояния внутренних линий
//
// Параметры:
//	Нет.
//
Процедура сфпПолучитьСостоянияЛиний() Экспорт
	Если НЕ сфпПроверитьДоступностьСофтФон(Ложь) Тогда Возврат; КонецЕсли;
	#Если ВебКлиент Тогда
		Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
		Попытка
			сфпПанельУправления.GetAllLinesInfo();
		Исключение
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры // сфпПолучитьСостоянияЛиний()

/////////////////////////////////////////////////
// МАСТЕР НАСТРОЙКИ IP-АТС AGAT UX

// Процедура выполняет запуск мастера настройки IP-АТС AgatUX
//
// Параметры:
//	Нет.
//
Процедура сфпЗапуститьМастерНастройкиAgatUX() Экспорт
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru='Работа мастера настройки AgatUX возможна только в тонком клиенте 1С'"), 5);
	#Иначе
		// Формируем и сохраняем список пользователей
		ФайлСпискаПользователей = Новый ТекстовыйДокумент;	
		МассивПользователей = сфпСофтФонПроСервер.сфпПолучитьМассивПользователей();
		Для Каждого ЭлементМассива Из МассивПользователей Цикл
			ФайлСпискаПользователей.ДобавитьСтроку(ЭлементМассива);
		КонецЦикла;
		Попытка
			ФайлСпискаПользователей.Записать(КаталогВременныхФайлов() + "personal.txt"); 
		Исключение
		КонецПопытки;	
		// Извлекаем и сохраняем файл настроек мастера настройки Agat UX
		ОписаниеОповещения = Новый ОписаниеОповещения("сфпЗапуститьМастерНастройкиAgatUXЗавершение", сфпСофтФонПроКлиент);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения); 
	#КонецЕсли
КонецПроцедуры // сфпЗапуститьМастерНастройкиAgatUX()

Процедура сфпЗапуститьМастерНастройкиAgatUXЗавершение(КаталогВременныхФайлов, ДополнительныеПараметры) Экспорт
		// Извлекаем и сохраняем файл настроек мастера настройки Agat UX
	#Если НЕ ВебКлиент Тогда
		Попытка 
			АдресХранилища = сфпСофтФонПроСервер.сфпВернутьХранилищеФайлаНастройкиМастера();
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
			ВременныйФайл = КаталогВременныхФайлов + "SetupSettings.ini"; 
			ДвоичныеДанные.Записать(ВременныйФайл);
		Исключение
		КонецПопытки;
		// Извлекаем и запускаем мастер настройки Agat UX
		Попытка 
			АдресХранилища = сфпСофтФонПроСервер.сфпВернутьХранилищеМастераНастройки();
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
			ВременныйФайл = ПолучитьИмяВременногоФайла("exe"); 
			ДвоичныеДанные.Записать(ВременныйФайл);
			НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), ВременныйФайл);
			ОписаниеОшибки = НСтр("ru='Установка мастера настройки AgatUX'") + Символы.ПС + ОписаниеОшибки;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось запустить установку мастера настройки AgatUX'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры // сфпЗапуститьМастерНастройкиAgatUX()

/////////////////////////////////////////////////
// ЗАПИСЬ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ

// Функция возвращает имя временного файла, в который выгружается запись разговора,
// полученная с сервера СофтФона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Имя файла для сохранения записи разговора
//
Функция сфпПолучитьИмяФайлаЗаписиРазговора() Экспорт
	// Определяем путь к файлу для сохранение записи разговора
	ИмяКаталога = "c:\";
	#Если НЕ ВебКлиент Тогда
	ИмяКаталога = КаталогВременныхФайлов();
	#КонецЕсли
	Возврат  (ИмяКаталога + "softphone.wav");
КонецФункции // сфпПолучитьИмяФайлаЗаписиРазговора()		

// Процедура получает файл записи разговора
//
// Параметры:
//	ИдентификаторЗаписи	- Строка	- ИдентификаторЗаписи
//
Процедура сфпПолучитьФайлРазговора(ИдентификаторЗаписи) Экспорт
	#Если ВебКлиент Тогда
		Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		Если сфпПанельУправления = Неопределено Тогда
			Возврат;
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда
			Возврат;
		КонецЕсли;
		FileName = сфпПолучитьИмяФайлаЗаписиРазговора();
		Если сфпСофтФонПроСервер.сфпИспользоватьСпрут7() Тогда
			Попытка
				сфпПанельУправления.SaveRecordedFile(, ИдентификаторЗаписи, FileName);
			Исключение	
			КонецПопытки;	
		КонецЕсли;
		Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
			Попытка
				КодВозврата = сфпObjCLON.GetSoundFile(ИдентификаторЗаписи, FileName);
			Исключение	
				КодВозврата = -1;
			КонецПопытки;
			Если КодВозврата = -1 Тогда
				// Переподключимся к CLON
				сфпПодключитьCLON();
				// Повторим получение файла
				Попытка
					КодВозврата = сфпObjCLON.GetSoundFile(ИдентификаторЗаписи, FileName);
				Исключение	
					КодВозврата = -1;
				КонецПопытки;
			КонецЕсли;	
			Если КодВозврата = -1 Тогда
				ПоказатьПредупреждение(, НСтр("ru='Ошибка получения файла записи разговора!'"), 5);
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // сфпПолучитьФайлРазговора()

/////////////////////////////////////////////////
// СИСТЕМА ЗАПИСИ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ CLON

// Процедура - обработчик установки внешней компоненты CLON
//
// Параметры:
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура УстановкаВнешнейКомпонентыCLON(ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.ПодключитьВнешнююКомпоненту Тогда
		КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.сфпКомпонентаCLON", "CLON", ТипВнешнейКомпоненты.Native);
		Если КодВозврата Тогда
			Попытка
				сфпObjCLON = Новый ("AddIn.CLON.DbControl");
			Исключение
				сфпObjCLON = Неопределено;
			КонецПопытки;	
			Если сфпObjCLON = Неопределено Тогда
				ПоказатьПредупреждение(, НСтр("ru='Не удалось загрузить компоненту записи разговоров CLON'"), 5);
				Возврат;
			Иначе
				// Проверяем версию подключенной компоненты
				Попытка
					ВерсияКомпонентыCLON = сфпObjCLON.GetVersion();	
				Исключение
					ВерсияКомпонентыCLON = "0.0.0.0";	
				КонецПопытки;	
				Если ВерсияКомпонентыCLON < "1.0.8.0" Тогда
					сфпObjCLON = Неопределено;
					ПоказатьПредупреждение(, НСтр("ru='Не удалось обновить компоненту записи разговоров CLON. Удалите вручную файл компоненты'")
					+ """SearchModuleNative.dll""" + НСтр("ru=' и перезапустите программу'"), 5);
					Возврат;
				КонецЕсли;	
			КонецЕсли;
		Иначе	
			ПоказатьПредупреждение(, НСтр("ru='Не удалось подключить компоненту записи разговоров CLON'"), 5);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Подключаемся к серверу CLON
	НастройкиCLON = сфпСофтФонПроСервер.сфпПолучитьНастройкиCLON(); 
	КодВозврата = сфпObjCLON.Connect(НастройкиCLON.CLONServerIP, НастройкиCLON.CLONServerPort, НастройкиCLON.CLONType,
			НастройкиCLON.CLONServerLogin, НастройкиCLON.CLONServerPassword);				
	Если КодВозврата = -1 Тогда
		сфпCLON = Неопределено;
		КодВозврата = сфпObjCLON.GetLastError();
		Если КодВозврата = 8 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Проверьте параметры подключения к системе записи телефонных переговоров CLON!'"), 5);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Не удалось подключиться к системе записи разговоров CLON'"), 5);
		КонецЕсли;	
		сфпObjCLON = Неопределено;
	КонецЕсли;	
КонецПроцедуры // УстановкаВнешнейКомпонентыCLON()
	
// Процедура выполняет отключение от сервера CLON
//
// Параметры:
//	Нет.
//
Процедура сфпОтключитьCLON()
	Если сфпObjCLON = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Попытка
		сфпObjCLON.Disconnect();				
	Исключение
	КонецПопытки;
	сфпObjCLON = Неопределено;
КонецПроцедуры // сфпОтключитьCLON()

// Процедура выполняет подключение к серверу CLON
//
// Параметры:
//	Нет.
//
Процедура сфпПодключитьCLON() Экспорт
	сфпОтключитьCLON();
	Состояние("Загрузка компоненты записи разговоров CLON");
	КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.сфпКомпонентаCLON", "CLON", ТипВнешнейКомпоненты.Native);
	Если КодВозврата Тогда
		Попытка
			сфпObjCLON = Новый ("AddIn.CLON.DbControl");
		Исключение
			сфпObjCLON = Неопределено;
		КонецПопытки;	
		Если сфпObjCLON = Неопределено Тогда
			ДополнительныеПараметры	= Новый Структура("ПодключитьВнешнююКомпоненту", Истина);			
			ОповещениеУстановкиКомпоненты	= Новый ОписаниеОповещения("УстановкаВнешнейКомпонентыCLON", сфпСофтФонПроКлиент, ДополнительныеПараметры);
			НачатьУстановкуВнешнейКомпоненты(ОповещениеУстановкиКомпоненты ,"ОбщийМакет.сфпКомпонентаCLON");
		Иначе
			// Проверяем версию подключенной компоненты
			Попытка
				ВерсияКомпонентыCLON = сфпObjCLON.GetVersion();	
			Исключение
				ВерсияКомпонентыCLON = "0.0.0.0";	
			КонецПопытки;	
			Если ВерсияКомпонентыCLON = "1.0.8.0" Тогда
				ДополнительныеПараметры	= Новый Структура("ПодключитьВнешнююКомпоненту", Ложь);
				УстановкаВнешнейКомпонентыCLON(ДополнительныеПараметры);
			Иначе	
				сфпОтключитьCLON();
				ДополнительныеПараметры	= Новый Структура("ПодключитьВнешнююКомпоненту", Истина);			
				ОповещениеУстановкиКомпоненты	= Новый ОписаниеОповещения("УстановкаВнешнейКомпонентыCLON", сфпСофтФонПроКлиент, ДополнительныеПараметры);
				НачатьУстановкуВнешнейКомпоненты(ОповещениеУстановкиКомпоненты ,"ОбщийМакет.сфпКомпонентаCLON");
			КонецЕсли;	
		КонецЕсли;
	Иначе	
		ДополнительныеПараметры	= Новый Структура("ПодключитьВнешнююКомпоненту", Истина);			
		ОповещениеУстановкиКомпоненты	= Новый ОписаниеОповещения("УстановкаВнешнейКомпонентыCLON", сфпСофтФонПроКлиент, ДополнительныеПараметры);
		НачатьУстановкуВнешнейКомпоненты(ОповещениеУстановкиКомпоненты ,"ОбщийМакет.сфпКомпонентаCLON");
	КонецЕсли;
КонецПроцедуры // сфпПодключитьCLON()

// Функция определяет продолжительность разговора
//
// Параметры:
//	ПродолжительностьРазговора	- Строка	- Продолжительность разговора
//
// Возвращаемое значение:
//	Число	- Продолжительность разговора
//
Функция сфпПолучитьПродолжительностьРазговораCLON(ПродолжительностьРазговора) Экспорт
	Попытка
		КоличествоЧасов 	= Число(Лев(ПродолжительностьРазговора, 2));
	Исключение
		КоличествоЧасов 	= 0;
	КонецПопытки;	
	Попытка
		КоличествоМинут 	= Число(Сред(ПродолжительностьРазговора, 4, 2));
	Исключение
		КоличествоМинут 	= 0;
	КонецПопытки;	
	Попытка
		КоличествоСекунд	= Число(Сред(ПродолжительностьРазговора, 7, 2));
	Исключение
		КоличествоСекунд 	= 0;
	КонецПопытки;	
	Возврат 1000 * (КоличествоЧасов * 3600 + КоличествоМинут * 60 + КоличествоСекунд);	
КонецФункции // сфполучитьПродолжительностьРазговораCLON()

// Функция определяет разницу во времени с сервером CLON
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- Смещение времени
//
Функция сфпПолучитьСмещениеВремениCLON() Экспорт
	СмещениеВремениCLON = 0;
	ДатаВремяКомпьютера = сфпСофтФонПроСервер.сфпТекущаяДата();
	Стр = сфпObjCLON.GetCurrentTime();
	Если НЕ ПустаяСтрока(Стр) Тогда
		ВремяКомпьютера = ДатаВремяКомпьютера - НачалоДня(ДатаВремяКомпьютера);
		ВремяСервераCLON = сфпПолучитьПродолжительностьРазговораCLON(Стр) / 1000;
		СмещениеВремениCLON = ВремяСервераCLON - ВремяКомпьютера;
	КонецЕсли;	
	Возврат СмещениеВремениCLON;
КонецФункции // сфпПолучитьСмещениеВремениCLON()	

// Функция выполняет поиск записей телефонных переговоров
//
// Параметры:
//	СтруктураПоискаCLON	 - Структура	- Структура параметров поиска
//
// Возвращаемое значение:
//	Массив	- Массив структур записей разговоров
//
Функция сфпНайтиВсеЗаписиРазговоровCLON(СтруктураПоискаCLON)
	ВремяНачалаЗвонка		= СтруктураПоискаCLON.ВремяНачалаЗвонка;
	ВремяЗавершенияЗвонка	= СтруктураПоискаCLON.ВремяЗавершенияЗвонка;
	НомерА					= СтруктураПоискаCLON.ТелефонА;
	НомерБ					= СтруктураПоискаCLON.ТелефонБ;
	Входящий				= СтруктураПоискаCLON.Входящий;
	Дата1 = Лев(Строка(ВремяНачалаЗвонка), 10);
	Дата2 = Лев(Строка(ВремяЗавершенияЗвонка), 10);
	В1Ч = Строка(Час(ВремяНачалаЗвонка));
	Если СтрДлина(В1Ч) = 1 Тогда 
		В1Ч = "0" + В1Ч;
	КонецЕсли;	
	В1М = Строка(Минута(ВремяНачалаЗвонка));
	Если СтрДлина(В1М) = 1 Тогда 
		В1М = "0" + В1М;
	КонецЕсли;	
	В1С = Строка(Секунда(ВремяНачалаЗвонка));
	Если СтрДлина(В1С) = 1 Тогда 
		В1С = "0" + В1С;
	КонецЕсли;
	Дата1День = День(ВремяНачалаЗвонка);
	Если СтрДлина(Строка(Дата1День)) = 1 Тогда
		Дата1День = "0" + Строка(Дата1День);
	КонецЕсли;	
	Дата1Месяц = Месяц(ВремяНачалаЗвонка);
	Если СтрДлина(Строка(Дата1Месяц)) = 1 Тогда
		Дата1Месяц = "0" + Строка(Дата1Месяц);
	КонецЕсли;
	Дата1Год = Сред(Дата1, 7, 4);
	Дата2День = День(ВремяЗавершенияЗвонка);
	Если СтрДлина(Строка(Дата2День)) = 1 Тогда
		Дата2День = "0" + Строка(Дата2День);
	КонецЕсли;
	Дата2Месяц = Месяц(ВремяЗавершенияЗвонка);
	Если СтрДлина(Строка(Дата2Месяц)) = 1 Тогда
		Дата2Месяц = "0" + Строка(Дата2Месяц);
	КонецЕсли;
	Дата2Год = Сред(Дата2, 7, 4);
	В2Ч = Строка(Час(ВремяЗавершенияЗвонка));
	Если СтрДлина(В2Ч) = 1 Тогда 
		В2Ч = "0" + В2Ч;
	КонецЕсли;	
	В2М = Строка(Минута(ВремяЗавершенияЗвонка));
	Если СтрДлина(В2М) = 1 Тогда 
		В2М = "0" + В2М;
	КонецЕсли;	
	В2С = Строка(Секунда(ВремяЗавершенияЗвонка));
	Если СтрДлина(В2С) = 1 Тогда 
		В2С = "0" + В2С;
	КонецЕсли;	
    Время1 = В1Ч + ":" + В1М + ":" + В1С;
	Время2 = В2Ч + ":" + В2М + ":" + В2С;
	Если Время2 = "00:00:00" Тогда
		Время2 = "23:59:59";
	КонецЕсли;
	ДН = СтрЗаменить(Строка(Дата1Год), " ", "") + "." + Строка(Дата1Месяц) + "." + Строка(Дата1День);
	ДК = СтрЗаменить(Строка(Дата2Год), " ", "") + "." + Строка(Дата2Месяц) + "." + Строка(Дата2День);
	Если ПустаяСтрока(НомерА) Тогда
		НомерА = "";
	КонецЕсли;
	Если ПустаяСтрока(НомерБ) Тогда
		НомерБ = "";
	КонецЕсли;
	МассивCLON = Новый Массив;
	Попытка		
		Список = сфпСофтФонПроСервер.сфпПолучитьНастройкиCLON(); 
		Если Список.CLONType = 1 Тогда
			Если Входящий Тогда
				Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,extra,file", ДН, ДК, Время1, Время2, "", "", "", "", НомерА, "", "", 0, "", 0, 0, 0);
			Иначе
				Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,extra,file", ДН, ДК, Время1, Время2, "", "", "", "", "", НомерБ, "", 0, "", 0, 0, 0);
			КонецЕсли;	
		Иначе
			Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,extra,file", ДН, ДК, Время1, Время2, "", "", "", "", НомерА, НомерБ, "", 0, "", 0, 0, 0);
			// для случаев, когда не удалось найти запись по двум телефонам, ищем только по одному
			Если Стр = Неопределено Тогда
				Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,file", ДН, ДК, Время1, Время2, "", "", "", "", "", НомерБ, "", 0, "", 0, 0, 0);
				Если Стр = Неопределено Тогда
					Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,file", ДН, ДК, Время1, Время2, "", "", "", "", НомерБ, "", "", 0, "", 0, 0, 0);
					Если Стр = Неопределено Тогда
						Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,file", ДН, ДК, Время1, Время2, "", "", "", "", НомерА, "", "", 0, "", 0, 0, 0);
						Если Стр = Неопределено Тогда
							Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,file", ДН, ДК, Время1, Время2, "", "", "", "", "", НомерА, "", 0, "", 0, 0, 0);
						КонецЕсли;										
					КонецЕсли;						
				КонецЕсли;							
			КонецЕсли;				
		КонецЕсли;	
		Пока НЕ ПустаяСтрока(Стр) Цикл
			НомерВхождения = Найти(Стр, "$");
			Если НомерВхождения = 0 Тогда
				Стр1	= Стр;
				Стр		= "";
			Иначе	
				Стр1	= Лев(Стр, НомерВхождения - 1);
				Стр		= Сред(Стр, НомерВхождения + 1);
			КонецЕсли;		
			СтруктураЗаписи = Новый Структура;
			НомерЗначения = 1;
			Пока НЕ ПустаяСтрока(Стр1) Цикл
				НомерВхождения = Найти(Стр1, "@");
				Если НомерВхождения = 0 Тогда
					Значение	= Стр1;
					Стр1		= "";
				Иначе	
					Значение	= Лев(Стр1, НомерВхождения - 1);
					Стр1		= Сред(Стр1, НомерВхождения + 1);
				КонецЕсли;
				Если НомерЗначения = 1 Тогда
					СтруктураЗаписи.Вставить("date", Значение);
				ИначеЕсли НомерЗначения = 2 Тогда
					СтруктураЗаписи.Вставить("time", Значение);
				ИначеЕсли НомерЗначения = 3 Тогда
					СтруктураЗаписи.Вставить("duration", Значение);
				ИначеЕсли НомерЗначения = 4 Тогда
					СтруктураЗаписи.Вставить("number_a", Значение);
				ИначеЕсли НомерЗначения = 5 Тогда
					СтруктураЗаписи.Вставить("number_b", Значение);
				ИначеЕсли НомерЗначения = 6 Тогда
					СтруктураЗаписи.Вставить("extra", Значение);
				ИначеЕсли НомерЗначения = 7 Тогда
					СтруктураЗаписи.Вставить("file", Значение);					
				КонецЕсли;	
				НомерЗначения = НомерЗначения + 1;
			КонецЦикла;
			МассивCLON.Добавить(СтруктураЗаписи); 
		КонецЦикла;
	Исключение
	КонецПопытки;
	Возврат МассивCLON;
КонецФункции // сфпНайтиВсеЗаписиРазговоровCLON()

// Функция ищет запись разговора в CLON по переданной структуре поиска 
//
// Параметры:
//	ТелефонА		- Строка	- Номер звонящего
//	ТелефонБ		- Строка	- Номер принимающего звонок
//	ДатаНачала		- Дата		- Дата начала звонка
//	ДатаОкончания	- Дата		- Дата окончания звонка
//	Входящий		- Булево	- Признак входящего звонка
//
// Возвращаемое значение:
//  Элемент массива (структура) или неопределено
//
Функция сфпНайтиЗаписьРазговораCLON(ТелефонА, ТелефонБ, ДатаНачала, ДатаОкончания, Входящий) Экспорт
	ТелефонА = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ТелефонА);
	ТелефонБ = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ТелефонБ);
	СтруктураПоискаCLON = Новый Структура;
	СтруктураПоискаCLON.Вставить("ВремяНачалаЗвонка",		ДатаНачала - 60);
	СтруктураПоискаCLON.Вставить("ВремяЗавершенияЗвонка",	ДатаОкончания);
	СтруктураПоискаCLON.Вставить("Входящий", 				Входящий);
	СтруктураПоискаCLON.Вставить("ТелефонА",				"");
	СтруктураПоискаCLON.Вставить("ТелефонБ",				"");
	// Находим все записи разговоров за переданный период
	МассивCLON = сфпНайтиВсеЗаписиРазговоровCLON(СтруктураПоискаCLON);
	// +Дополнительный поиск с расширенным периодом по времени
	Если МассивCLON.Количество() = 0 Тогда
		СтруктураПоискаCLON.ВремяНачалаЗвонка = СтруктураПоискаCLON.ВремяНачалаЗвонка - 60;
		СтруктураПоискаCLON.ВремяЗавершенияЗвонка = СтруктураПоискаCLON.ВремяЗавершенияЗвонка + 60;
		МассивCLON = сфпНайтиВсеЗаписиРазговоровCLON(СтруктураПоискаCLON);
	КонецЕсли;		
	// Если в результате поиска ничего не найдено, то сразу возвращаем неопределено
	Если МассивCLON.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
	// Обрабатываем массив записей
	Для Каждого Запись Из МассивCLON Цикл
		Если Входящий Тогда
			Запись.number_a = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Запись.number_a);
			Если Запись.number_a = ТелефонА Тогда
				// Совпал номер звонящего
				Возврат Запись;
			ИначеЕсли Запись.number_b = ТелефонБ Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли Запись.extra = ТелефонБ Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли НЕ ПустаяСтрока(Запись.number_a) И (Прав(ТелефонА, СтрДлина(Запись.number_a)) = Запись.number_a) Тогда
				// Частично совпал номер звонящего
				Возврат Запись;
			ИначеЕсли (СтрДлина(Запись.number_b) > 10) И (Прав(Запись.number_b, СтрДлина(ТелефонБ)) = ТелефонБ) Тогда
				// Найдено вхождение внутреннего номера (донабор)
				Возврат Запись;
			ИначеЕсли ПустаяСтрока(Запись.number_a) И ПустаяСтрока(Запись.number_b) Тогда
				// Не определились оба номера
				Возврат Запись;
			// Данное условие работает только для нас	
			ИначеЕсли Прав(Запись.number_b, СтрДлина(ТелефонБ)) = ТелефонБ Тогда
				// Найдено вхождение внутреннего номера (донабор)
				Возврат Запись;
			КонецЕсли;
		Иначе
			Запись.number_b = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Запись.number_b);
			Если Запись.number_b = ТелефонБ Тогда
				// Совпал набираемый номер
				Возврат Запись;
			ИначеЕсли Запись.number_a = ТелефонА Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли НЕ ПустаяСтрока(Запись.number_b) И (Прав(ТелефонБ, СтрДлина(Запись.number_b)) = Запись.number_b) Тогда
				// Частично совпал набираемый номер
				Возврат Запись;
			ИначеЕсли ПустаяСтрока(Запись.number_a) И ПустаяСтрока(Запись.number_b) Тогда
				// Не определились оба номера
				Возврат Запись;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	// Если запись не найдена, то меняем направление звонка
	Входящий = НЕ Входящий;
	// Обрабатываем массив записей еще раз
	Для Каждого Запись Из МассивCLON Цикл
		Если Входящий Тогда
			Запись.number_a = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Запись.number_a);
			Если Запись.number_a = ТелефонА Тогда
				// Совпал номер звонящего
				Возврат Запись;
			ИначеЕсли Запись.number_b = ТелефонБ Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли Запись.extra = ТелефонБ Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли НЕ ПустаяСтрока(Запись.number_a) И (Прав(ТелефонА, СтрДлина(Запись.number_a)) = Запись.number_a) Тогда
				// Частично совпал номер звонящего
				Возврат Запись;
			ИначеЕсли (СтрДлина(Запись.number_b) > 10) И (Прав(Запись.number_b, СтрДлина(ТелефонБ)) = ТелефонБ) Тогда
				// Найдено вхождение внутреннего номера (донабор)
				Возврат Запись;
			ИначеЕсли ПустаяСтрока(Запись.number_a) И ПустаяСтрока(Запись.number_b) Тогда
				// Не определились оба номера
				Возврат Запись;
			// Данное условие работает только для нас	
			ИначеЕсли Прав(Запись.number_b, СтрДлина(ТелефонБ)) = ТелефонБ Тогда
				// Найдено вхождение внутреннего номера (донабор)
				Возврат Запись;
			КонецЕсли;
		Иначе
			Запись.number_b = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Запись.number_b);
			Если Запись.number_b = ТелефонБ Тогда
				// Совпал набираемый номер
				Возврат Запись;
			ИначеЕсли Запись.number_a = ТелефонА Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли НЕ ПустаяСтрока(Запись.number_b) И (Прав(ТелефонБ, СтрДлина(Запись.number_b)) = Запись.number_b) Тогда
				// Частично совпал набираемый номер
				Возврат Запись;
			ИначеЕсли ПустаяСтрока(Запись.number_a) И ПустаяСтрока(Запись.number_b) Тогда
				// Не определились оба номера
				Возврат Запись;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	// Если запись не найдена
	Возврат Неопределено;
КонецФункции // сфпНайтиЗаписьРазговораCLON()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С JSON

// Заменяет недопустимые символы в XML-строке на заданные символы
//
// Параметры:
//   Текст – Строка – строка, в которой требуется выполнить замену недопустимых символов.
//   СимволЗамены – Строка – строка, на которую требуется выполнить замену недопустимого символа в XML-строке
// 
//  Возвращаемое значение:
//    Строка - cтрока, полученная заменой недопустимых символов в XML-строке.
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
	
#Если НЕ ВебКлиент Тогда
	ПозицияНачала = 1;
	Пока Истина Цикл
		Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Если Позиция > 1 Тогда
			НедопустимыйСимвол = Сред(Текст, Позиция - 1, 1);
			Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
				Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
			КонецЕсли;
		КонецЕсли;
		НедопустимыйСимвол = Сред(Текст, Позиция, 1);
		Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
			Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
		КонецЕсли;
		ПозицияНачала = Позиция + 1;
	КонецЦикла;
#КонецЕсли

	Возврат Текст;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОНТЕКСТНАЯ РЕКЛАМА COMAGIC

// Функция переводит строку внешних данных в структуру
//
// Параметры:
//	СтрокаДанных	- Строка	- Строка внешних данных
//
// Возвращаемое значение:
//	Структура	- Структура внешних данных
//
Функция сфпПолучитьСтруктуруВнешнихДанных(СтрокаВнешнихДанных) Экспорт
	СтруктураВнешнихДанных = Новый Структура;
	// Убираем символы перевода строк
	СтрокаПоиска = СтрЗаменить(СтрокаВнешнихДанных, Символы.ПС, "");
	// Убираем скобки
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "{", "");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "}", "");
	// Убираем проблеы слева и справа
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	// Ищем тег "comagic_context"
	ПозицияРазделителя = Найти(СтрокаПоиска, """" + "comagic_context" + """" + ":");
	ПерваяСтрока = СокрЛП(Лев(СтрокаПоиска, ПозицияРазделителя - 1));
	ВтораяСтрока = СокрЛП(Сред(СтрокаПоиска, ПозицияРазделителя + 18));
	// Разбираем первую строку
	Пока Истина Цикл
		ПозицияРазделителя = Найти(ПерваяСтрока, ",");
		Если ПозицияРазделителя = 0 Тогда
			РабочаяСтрока	= СтрокаПоиска;
			ПерваяСтрока	= "";	
		Иначе
			РабочаяСтрока	= СокрЛП(Лев(ПерваяСтрока, ПозицияРазделителя - 1));
			ПерваяСтрока	= СокрЛП(Сред(ПерваяСтрока, ПозицияРазделителя + 1));	
		КонецЕсли;
		ПозицияРазделителя = Найти(РабочаяСтрока, ":");
		СтрокаКлюч = СокрЛП(Лев(РабочаяСтрока, ПозицияРазделителя - 1));
		СтрокаКлюч = Сред(СтрокаКлюч, 2, СтрДлина(СтрокаКлюч) - 2);
		СтрокаЗначение	= СокрЛП(Сред(РабочаяСтрока, ПозицияРазделителя + 1));
		СтрокаЗначение = Сред(СтрокаЗначение, 2, СтрДлина(СтрокаЗначение) - 2);
		СтруктураВнешнихДанных.Вставить(СтрокаКлюч, СтрокаЗначение);
		Если СтрДлина(ПерваяСтрока) = 0 Тогда Прервать; КонецЕсли;
	КонецЦикла;
	// Разбираем вторую строку
	СтруктураЗначений = Новый Структура;
	Пока Истина Цикл
		ПозицияРазделителя = Найти(ВтораяСтрока, ",");
		Если ПозицияРазделителя = 0 Тогда
			РабочаяСтрока	= ВтораяСтрока;
			ВтораяСтрока	= "";	
		Иначе
			РабочаяСтрока	= СокрЛП(Лев(ВтораяСтрока, ПозицияРазделителя - 1));
			ВтораяСтрока	= СокрЛП(Сред(ВтораяСтрока, ПозицияРазделителя + 1));	
		КонецЕсли;
		ПозицияРазделителя = Найти(РабочаяСтрока, ":");
		СтрокаКлюч = СокрЛП(Лев(РабочаяСтрока, ПозицияРазделителя - 1));
		СтрокаКлюч = Сред(СтрокаКлюч, 2, СтрДлина(СтрокаКлюч) - 2);
		СтрокаЗначение	= СокрЛП(Сред(РабочаяСтрока, ПозицияРазделителя + 1));
		Если НЕ ПустаяСтрока(СтрокаЗначение) Тогда
			Если СтрокаЗначение = "null" Тогда
				СтрокаЗначение = "";
			Иначе
				Если НЕ СтрокаКлюч = "visitor_id" Тогда
					СтрокаЗначение = Сред(СтрокаЗначение, 2, СтрДлина(СтрокаЗначение) - 2);
					СтрокаЗначение = ПреобразоватьСтрокуИзУТФ8(СтрокаЗначение);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		СтруктураЗначений.Вставить(СтрокаКлюч, СтрокаЗначение);
		Если СтрДлина(ВтораяСтрока) = 0 Тогда Прервать; КонецЕсли;
	КонецЦикла;
	СтруктураВнешнихДанных.Вставить("comagic_context", СтруктураЗначений);
	Возврат СтруктураВнешнихДанных;
КонецФункции // сфпПолучитьСтруктуруВнешнихДанных()

// Функция преобразовает строку из UTF-8
//
// Параметры:
//	Стр	- Строка	- Строка с шестнадцатеричными символами
//
// Возвращаемое значение:
//	Строка	- Строка после преобразования
//
Функция ПреобразоватьСтрокуИзУТФ8(Стр)
	РабочаяСтрока = Стр;
	Пока Истина Цикл
		ПозицияНачала = Найти(РабочаяСтрока, "\u");
		Если ПозицияНачала = 0 Тогда Прервать; КонецЕсли;
		СтрокаСимвола = Сред(РабочаяСтрока, ПозицияНачала, 6); 	
		НовыйСимвол = Символ(HexToDec(ВРег(Сред(СтрокаСимвола, 3))));
		РабочаяСтрока = СтрЗаменить(РабочаяСтрока, СтрокаСимвола, НовыйСимвол);
	КонецЦикла;	
	Возврат РабочаяСтрока; 
КонецФункции // ПреобразоватьСтрокуИзУТФ8()

// Функция переводит шестнадцатеричное число в десятичное
//
// Параметры:
//	_Hex	- Строка	- Шестнадцатеричное число
//
// Возвращаемое значение:
//	Число	- Десятичное число
//
Функция HexToDec(Знач _Hex)
	База = 16;
	_Hex = СокрЛП(_Hex);
	СтаршаяСтепень = СтрДлина(_Hex) - 1;
	Результат = 0;
	счСимволов = 1;
	Пока СтаршаяСтепень >=0 Цикл
		_HexСимвол = Сред(_Hex, счСимволов, 1);
		Представление = Найти("0123456789ABCDEF", _HexСимвол) - 1;
		Результат = Результат + Представление * Степень(База, СтаршаяСтепень);
		СтаршаяСтепень = СтаршаяСтепень - 1;
		СчСимволов = СчСимволов + 1;
	КонецЦикла;	
	Возврат Результат;
КонецФункции // HexToDec()

// Функция вычисляет степень числа
//
// Параметры:
//	_База	- Число	- Число, возводимое в степень
//	_Степ	- Число	- Степень числа
//
// Возвращаемое значение:
//	Число	- Число, возведенное в степень
//
Функция Степень(_База, _Степ)
	Результат = 1;
	Для К = 1 По _Степ Цикл
		Результат = Результат *_База;		
	КонецЦикла;
	Возврат Результат;
КонецФункции // Степень()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ЗВОНКОВ

// Процедура открывает список записей регистра истории звонков
//
// Параметры:
//	Ссылка	- ДокументСсылка	- Ссылка на телефонный звонок
//
Процедура сфпОткрытьИсториюРазговора(Ссылка) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Звонок", Ссылка);
	ОткрытьФорму("РегистрСведений.сфпИсторияЗвонков.ФормаСписка", ПараметрыФормы);	
КонецПроцедуры // сфпОткрытьИсториюРазговора()

#КонецОбласти
