////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Обработчик для события формы ПриСозданииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной.
//                           Информации.
//    Объект               - Произвольный - Объект-владелец контактной информации.
//    ПоложениеЗаголовкаКИ - ПоложениеЗаголовкаЭлементаФормы - Может принимать значения
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх (по умолчанию).
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "", ПоложениеЗаголовкаКИ = "",
	Знач ИсключаемыеВиды = Неопределено, ОтложеннаяИнициализация = Ложь) Экспорт
	
	Если ИсключаемыеВиды = Неопределено Тогда
		ИсключаемыеВиды = Новый Массив;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов);
	
	// Получим список видов КИ
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	// { VOG RMV 2019-03-26 task 158
	ЕстьКоординатыТЧ = CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("Широта", МетаданныеОбъекта, "КонтактнаяИнформация") 
					 И CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("Долгота", МетаданныеОбъекта, "КонтактнаяИнформация");
	// } VOG RMV 2019-03-26 task 158
		
// +CRM
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи = CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи", МетаданныеОбъекта, "КонтактнаяИнформация");
	Если ИмяОбъектаМетаданных = "Проекты" Тогда
		//КИ есть только у кейсов
		ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
		ИмяОбъекта = МетаданныеОбъекта.Имя;
		ИмяГруппыВидовКИ = "CRM_СправочникПроектыКейс";
		Перейти ~CRM_ИмяОбъектаПолучено;
	КонецЕсли;
// -CRM
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
// +CRM
	~CRM_ИмяОбъектаПолучено:
	Если (ИмяОбъектаМетаданных = "Партнеры") Тогда
		ГруппаВидовКИ = Новый Массив();
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"Компания"]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"ЧастноеЛицо"]);
		
		ИспользуетсяКонтактнаяИнформацияСоответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ГруппаВидовКИ, "Используется");
		ИспользуетсяКонтактнаяИнформация			 = ИспользуетсяКонтактнаяИнформацияСоответствие[Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]];
	ИначеЕсли (ИмяОбъектаМетаданных = "Проекты") Тогда
		ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
		ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Иначе
		ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	КонецЕсли;
	//ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
// -CRM
	
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		// Добавим новые реквизиты
		Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		КонецЕсли;
		ДобавленныеРеквизиты = Новый Массив;
		Для Каждого СтрокаРеквизита Из МассивДобавляемыхРеквизитов Цикл
			Если ПустаяСтрока(СтрокаРеквизита.Путь) Тогда
				ДобавленныеРеквизиты.Добавить(СтрокаРеквизита.Имя);
			КонецЕсли;
		КонецЦикла;
		Форма.ПараметрыКонтактнойИнформации = Новый Структура;
		Форма.ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения", ИмяЭлементаДляРазмещения);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка", Строка(ПоложениеЗаголовкаКИ));
		Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеРеквизиты", ДобавленныеРеквизиты);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация", ОтложеннаяИнициализация);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды", ИсключаемыеВиды);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
		Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы", Новый СписокЗначений);
		Если Не ПустаяСтрока(ИмяЭлементаДляРазмещения) Тогда
			Форма.Элементы[ИмяЭлементаДляРазмещения].Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	Если РеквизитыОбъекта.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено Тогда
		ДанныеИдентификатораСтрокиТабличнойЧасти = "0";
	Иначе
		ДанныеИдентификатораСтрокиТабличнойЧасти = "ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0)";
	КонецЕсли;
	
	Если РеквизитыОбъекта.Найти("ДействуетС") = Неопределено Тогда
		ДанныеДействуетСТабличнойЧасти = " """" КАК ДействуетС, ";
	Иначе
		ДанныеДействуетСТабличнойЧасти  = " КонтактнаяИнформация.ДействуетС КАК ДействуетС, ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
		|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	КонтактнаяИнформация.Вид КАК Вид, " + ДанныеДействуетСТабличнойЧасти + "
		|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
		// +CRM
		|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
		// -CRM
		// { VOG RMV 2019-03-26 task 158 
		|	" + ?(ЕстьКоординатыТЧ = Ложь, "", "
		|	КонтактнаяИнформация.Широта,
		|	КонтактнаяИнформация.Долгота,") + "
		// } VOG RMV 2019-03-26 task 158
		|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти,
		|	КонтактнаяИнформация.ЗначенияПолей,
		// ++ VOG Солодов В.В. 02.03.2020 CRM-196
		|	КонтактнаяИнформация.Значение
		// -- VOG Солодов В.В. 02.03.2020
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ " +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка УПОРЯДОЧИТЬ ПО РеквизитДопУпорядочивания, Вид, ДействуетС";

		// +CRM
		Если НЕ ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
		КонецЕсли;
		// -CRM
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
		ПредыдущийВид = Неопределено;
		Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
				И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
					Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
					НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
					ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
					Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
							НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
						КонецЕсли;
					КонецЦикла;
					ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
			КонецЕсли;
		КонецЦикла;
		ТекстЗапросаИсторическаяИнформация = " КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация КАК ЭтоИсторическаяКонтактнаяИнформация,
										|	КонтактнаяИнформация.ДействуетС                  КАК ДействуетС, "
	Иначе
		КонтактнаяИнформация = Объект.КонтактнаяИнформация.Выгрузить();
		ТекстЗапросаИсторическаяИнформация = "ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,0 КАК ДействуетС, ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление               КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	|	КонтактнаяИнформация.Значение 					 КАК Значение,
	// -- VOG Солодов В.В. 02.03.2020
	|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки, " + ТекстЗапросаИсторическаяИнформация + "
	|	КонтактнаяИнформация.Вид                         КАК Вид,
	// +CRM
	|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
	// -CRM
	// { VOG RMV 2019-03-26 task 158 
	|	" + ?(ЕстьКоординатыТЧ = Ложь, "", "
	|	КонтактнаяИнформация.Широта,
	|	КонтактнаяИнформация.Долгота,") + "
	// } VOG RMV 2019-03-26 task 158
	|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ 
	|	КонтактнаяИнформация
	|ИЗ
	|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид
	|;////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
	// { VOG RMV 2019-03-26 task 158 
	|	" + ?(ЕстьКоординатыТЧ = Ложь, "", "
	|	ЕСТЬNULL(КонтактнаяИнформация.Широта, 0)			  КАК Широта,
	|	ЕСТЬNULL(КонтактнаяИнформация.Долгота, 0)			  КАК Долгота,") + "
	// } VOG RMV 2019-03-26 task 158
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных    КАК ИмяПредопределенныхДанных,
	|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.Наименование                 КАК Наименование,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений      КАК ХранитьИсториюИзменений,
	// ++ VOG Солодов В.В. 03.03.2020 CRM-196
	|	ВидыКонтактнойИнформации.ВидРедактирования            КАК ВидРедактирования,
	|	ЕСТЬNULL(КонтактнаяИнформация.Значение, """")         КАК Значение,
	// До изменения
	//|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге КАК РедактированиеТолькоВДиалоге,
	// -- VOG Солодов В.В. 03.03.2020
	|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация, ЛОЖЬ)    КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
	|	ЕСТЬNULL(КонтактнаяИнформация.ДействуетС, 0)          КАК ДействуетС,
	|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
// +CRM
	|	ЕСТЬNULL(КонтактнаяИнформация.CRM_ОсновнойДляСвязи,Ложь) КАК CRM_ОсновнойДляСвязи,
	|	ВЫБОР
	|		КОГДА (ЕСТЬNULL(КонтактнаяИнформация.CRM_ОсновнойДляСвязи,Ложь) ИЛИ ЕСТЬNULL(ВидыКонтактнойИнформации.CRM_Основной,Ложь))
	|			ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выводить,
// -CRM
	|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + "      КАК ИдентификаторСтроки,
	|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(200))                    КАК ИмяРеквизита,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий,
// +CRM
	|	ВидыКонтактнойИнформации.Родитель КАК РодительКИ,
	|	ВидыКонтактнойИнформации.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 4
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 3
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДопПолеСортировки,
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Колонка
// -CRM
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КонтактнаяИнформация КАК КонтактнаяИнформация
	|ПО 
	|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И ВидыКонтактнойИнформации.Используется
	|	И ЕстьNULL(ВидыКонтактнойИнформации.Родитель.Используется, Истина)
	// + Тищенко В.В.
//	|	И ВидыКонтактнойИнформации.CRM_Основной
	// - Тищенко В.В.
	|";
// +CRM
	Если (ИмяОбъектаМетаданных = "Партнеры") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (
		|		ВидыКонтактнойИнформации.Родитель В (&ГруппаВидовКИ)
		|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель В (&ГруппаВидовКИ))";
		
	ИначеЕсли (ИмяОбъектаМетаданных = "Проекты") Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И (
		|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
		|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
		|	И ВидыКонтактнойИнформации.Ссылка В (ВЫБРАТЬ
		|				ВидыКонтактнойИнформацииМоделиКейсов.Вид
		|			ИЗ
		|				Справочник.CRM_МоделиКейсов.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформацииМоделиКейсов
		|			ГДЕ
		|				ВидыКонтактнойИнформацииМоделиКейсов.Ссылка = &МодельКейса)";
		
		Запрос.УстановитьПараметр("МодельКейса", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "CRM_МодельКейса"));
	Иначе
// -CRM
		Запрос.Текст = Запрос.Текст + "
		|	И (
		|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
		|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
	|";
	
	// +CRM
	Если НЕ ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
	КонецЕсли;
	// -CRM
	Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", КонтактнаяИнформация);
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
// +CRM
	КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	//КонтактнаяИнформация.Сортировать("Колонка, ДопПолеСортировки, НомерСтроки");
// -CRM
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	
	СозданныеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	ПредыдущийВид = Неопределено;
	ПорядковыйНомер = 1;
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
			Поз = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
				
				ТекущийВид = СтрокаКИ.Вид;
				
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3%4",
						"КонтактнаяИнформацияПоле",
						ИмяТабличнойЧасти,
						СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x"),
						ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ));
					
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			
			ТекущийВид = ОбъектКонтактнойИнформации.Вид;
			
			Если ТекущийВид <> ПредыдущийВид Тогда
				ПредыдущийВид = ТекущийВид;
			//	ПорядковыйНомер = 1;
			//Иначе
			//	ПорядковыйНомер = ПорядковыйНомер + 1;
			КонецЕсли;
			
			Индекс = СозданныеРеквизиты.Найти(ТекущийВид);
			
			Если Индекс = Неопределено Тогда
				
				ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
					"КонтактнаяИнформацияПоле",
					СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x"),
					ПорядковыйНомер);
				ПорядковыйНомер = ПорядковыйНомер + 1;
				
				ОбъектКонтактнойИнформации.ИмяРеквизита = ИмяРеквизита;
				Если Не ОтложеннаяИнициализация Тогда
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Наименование, Истина));
				КонецЕсли;
			Иначе
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
				СозданныеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
			// При обнаружении ошибок распознавания не прерываем генерацию.
			Попытка
				ОбъектКонтактнойИнформации.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ОбъектКонтактнойИнформации.ЗначенияПолей);
			Исключение
				ЗаписьЖурналаРегистрации(УправлениеКонтактнойИнформациейСлужебный.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ОбъектКонтактнойИнформации.ЗначенияПолей, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Некорректный формат контактной информации.'"), ,
				ОбъектКонтактнойИнформации.ИмяРеквизита);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	Форма.ПараметрыКонтактнойИнформации = Новый Структура;
	Форма.ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка", Строка(ПоложениеЗаголовкаКИ));
	Форма.ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения", ИмяЭлементаДляРазмещения);
	Форма.ПараметрыКонтактнойИнформации.Вставить("СписокДобавляемыхЭлементов", Новый СписокЗначений);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы", Новый СписокЗначений);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды", ИсключаемыеВиды);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация", ОтложеннаяИнициализация);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
	
	ПредыдущийВид = Неопределено;
	
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов.
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	Если ТипЗнч(Родитель) = Тип("ГруппаФормы") И Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
		
		Родитель.СквозноеВыравнивание = СквозноеВыравнивание.НеИспользовать;
		
	КонецЕсли;	
	
	// Создаем группы для контактной информации.
	//+вог
	Если вогОбщегоНазначенияКлиентСерверПовтИсп.ИспользуетсяРасширеннаяКарточка(МетаданныеОбъекта.ПолноеИмя()) Тогда
		ГруппировкаКомпоновки = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;	
	Иначе
		ГруппировкаКомпоновки = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;	
	КонецЕсли;
	//-вог
	ГруппаКомпоновки = Группа("ГруппаКомпоновкиКонтактнойИнформации",
	Форма, Родитель, ГруппировкаКомпоновки, 5);
// +CRM
	Если ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
		ГруппаОсновнойДляСвязи = Группа("ГруппаОсновнойДляСвязиКонтактнойИнформации",
		Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	КонецЕсли;
// -CRM
	ГруппаЗаголовков = Группа("ГруппаЗаголовковКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаПолейВвода = Группа("ГруппаПолейВводаКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаДействий = Группа("ГруппаДействийКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
// +CRM
	ГруппаКолонка_1 = Группа("ГруппаКолонка_1",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 4);
	ГруппаКолонка_2 = Группа("ГруппаКолонка_2",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 4);
	
	Если ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
		ГруппаОсновнойДляСвязи_1 = Группа("ГруппаОсновнойДляСвязиКонтактнойИнформации_1",
		Форма, ГруппаКолонка_1, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	КонецЕсли;
	ГруппаЗаголовков_1 = Группа("ГруппаЗаголовковКонтактнойИнформации_1",
	Форма, ГруппаКолонка_1, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	ГруппаПолейВвода_1 = Группа("ГруппаПолейВводаКонтактнойИнформации_1",
	Форма, ГруппаКолонка_1, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	ГруппаДействий_1 = Группа("ГруппаДействийКонтактнойИнформации_1",
	Форма, ГруппаКолонка_1, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
//	ГруппаДействий_1.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Если ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
		ГруппаОсновнойДляСвязи_2 = Группа("ГруппаОсновнойДляСвязиКонтактнойИнформации_2",
		Форма, ГруппаКолонка_2, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	КонецЕсли;
	ГруппаЗаголовков_2 = Группа("ГруппаЗаголовковКонтактнойИнформации_2",
	Форма, ГруппаКолонка_2, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	ГруппаПолейВвода_2 = Группа("ГруппаПолейВводаКонтактнойИнформации_2",
	Форма, ГруппаКолонка_2, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
	ГруппаДействий_2 = Группа("ГруппаДействийКонтактнойИнформации_2",
	Форма, ГруппаКолонка_2, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 3);
//	ГруппаДействий_2.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
// -CRM
	ЗаголовокСлева = ЗаголовокСлева(Форма, ПоложениеЗаголовкаКИ);
	СозданныеЭлементы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	СтатусКонтекстногоМеню = 0;
	ПредыдущийЭлемент = Неопределено;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
				
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаКИ.Вид, "ИмяПредопределенныхДанных");
			Поз = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВидТЧ = Неопределено;
			
			Для Каждого СтрокаТабличнойЧастиКИ Из СтрокаКИ.Строки Цикл
				
				ВидТЧ = СтрокаТабличнойЧастиКИ.Вид;
				
				Если ВидТЧ <> ПредыдущийВидТЧ Тогда
					
					ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
					
					Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧастиКИ.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧастиКИ.ИмяРеквизита;
					
					Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧастиКИ.Тип) Тогда
						Элемент.КнопкаВыбора = Истина;
						// ++ VOG Солодов В.В. 03.03.2020 CRM-196
						Если ВидТЧ.ВидРедактирования = "Диалог" Тогда
						// До изменения
						//Если ВидТЧ.РедактированиеТолькоВДиалоге Тогда
						// -- VOG Солодов В.В. 03.03.2020
							Элемент.РедактированиеТекста = Ложь;
						КонецЕсли;
						
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
					КонецЕсли;
					Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
					
					Если ВидТЧ.ОбязательноеЗаполнение Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
					
					ДобавитьОписаниеЭлемента(Форма, СтрокаТабличнойЧастиКИ.ИмяРеквизита, 2);
					ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧастиКИ, Ложь, Истина);
					ПредыдущийВидТЧ = ВидТЧ;
										
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиКИ.ИдентификаторСтроки);
				
				СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
				
				Если СтрокиТаблицы.Количество() = 1 Тогда
					
					СтрокаТаблицы = СтрокиТаблицы[0];
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита] = СтрокаТабличнойЧастиКИ.Представление;
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита + "ЗначенияПолей"] = СтрокаТабличнойЧастиКИ.ЗначенияПолей;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ИндексЭлемента = СозданныеЭлементы.Найти(СтрокаКИ.Вид);
		СтатическийЭлемент = ИндексЭлемента <> Неопределено;
		
		ЭтоНовыйВидКИ = (СтрокаКИ.Вид <> ПредыдущийВид);
		
		Если ОтложеннаяИнициализация Тогда
			
			ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ,, СтатическийЭлемент);
			Если СтатическийЭлемент Тогда
				СозданныеЭлементы.Удалить(ИндексЭлемента);
			КонецЕсли;
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ,, НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация);
		
		Если СтатическийЭлемент Тогда
			
			СозданныеЭлементы.Удалить(ИндексЭлемента);
			
		Иначе
			
			СледующаяСтрока = ?(СозданныеЭлементы.Количество() = 0, Неопределено,
			КонтактнаяИнформация.Получить(КонтактнаяИнформация.Индекс(СтрокаКИ) + 1));
			Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
				// +Тищенко В.В.
				Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Очистить();
				// -Тищенко В.В.
				ДобавитьСтрокуКонтактнойИнформации(Форма, СтрокаКИ, ЭтоНовыйВидКИ, КоличествоАдресов, СледующаяСтрока, ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи);
			КонецЕсли;
			
		КонецЕсли;
		
		// + Тищенко В.В.
		// Установка видимости элементов формы
		Для каждого ЭлементКИ Из Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов Цикл
			Форма.Элементы[ЭлементКИ.Значение].Видимость = СтрокаКИ.Выводить;
		КонецЦикла;
		// - Тищенко В.В.
		
		Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
			ПредыдущийВид = СтрокаКИ.Вид;
		КонецЕсли;
		
		// + Тищенко В.В.
		// НЕ доступно редактирование в форме объекта контактную информацию
		Если СтрокаКИ.Вид.вогЗапретитьРедактированиеВДиалоге Тогда
			Форма.Элементы[СтрокаКИ.ИмяРеквизита].УстановитьДействие("ИзменениеТекстаРедактирования","Подключаемый_КонтактнаяИнформацияЗапретРедактированиеТекста")
		КонецЕсли;
		// - Тищенко В.В.
	
	КонецЦикла;
	
	Если Не ОтложеннаяИнициализация И Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Количество() > 0 Тогда
		
		// + Тищенко В.В.
		// Закоментировал данный  код 
		
		//{[+](фрагмент добавлен), Виноградов Дмитрий 19.06.2018 14:19:18 ID
		//Если Форма.ИмяФормы = "Справочник.вогТорговыеТочки.Форма.ФормаЭлемента" Тогда // Добавлена одна общая конпка
		//}Администратор 19.06.2018 14:19:18
		
		//ГруппаКоманды = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода",
		//Форма, ГруппаПолейВвода_1, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
		//ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		//
		//ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода";
		//Команда = Форма.Команды.Добавить(ИмяКоманды);
		//Команда.Подсказка = НСтр("ru = 'Добавить дополнительное поле контактной информации'");
		//Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		//Команда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		//Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		//
		//ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		//
		//Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
		//Кнопка.Заголовок = НСтр("ru = 'Добавить'");
		//Команда.ИзменяетСохраняемыеДанные = Истина;
		//Кнопка.ИмяКоманды = ИмяКоманды;
		//ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		
		//{[+](фрагмент добавлен), Виноградов Дмитрий 19.06.2018 14:19:33 ID
		//КонецЕсли; 
		//}Администратор 19.06.2018 14:19:33
		
		// - Тищенко В.В.
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПриЧтенииНаСервере(Форма, Объект) Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПервыйЗапуск = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" И ТипЗнч(Форма.ПараметрыКонтактнойИнформации) = Тип("Структура") Тогда
			ПервыйЗапуск = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
// +CRM
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	Если ИмяОбъектаМетаданных = "Проекты" Тогда
		//КИ есть только у кейсов
		ИмяОбъекта = МетаданныеОбъекта.Имя;
		ИмяГруппыВидовКИ = "CRM_СправочникПроектыКейс";
		Перейти ~CRM_ИмяОбъектаПолучено;
	КонецЕсли;
/// -CRM
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	
	// +CRM
	~CRM_ИмяОбъектаПолучено:
	// -CRM
	Параметры = Форма.ПараметрыКонтактнойИнформации;
	
	ИмяЭлементаДляРазмещения = Параметры.ГруппаДляРазмещения;
	ПоложениеЗаголовкаКИ = Параметры.ПоложениеЗаголовка;
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПоложениеЗаголовкаКИ), ПоложениеЗаголовкаЭлементаФормы[ПоложениеЗаголовкаКИ], ПоложениеЗаголовкаЭлементаФормы.Верх);
	ВыполненаОтложеннаяИнициализация = Параметры.ВыполненаОтложеннаяИнициализация;
	ОтложеннаяИнициализация = Параметры.ОтложеннаяИнициализация И Не ВыполненаОтложеннаяИнициализация;
	
	// +CRM
	//ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Если (ИмяОбъектаМетаданных = "Партнеры") Тогда
		ГруппаВидовКИ = Новый Массив();
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"Компания"]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"ЧастноеЛицо"]);
		
		ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ГруппаВидовКИ, "Используется");
	ИначеЕсли (ИмяОбъектаМетаданных = "Проекты") Тогда
		ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
		ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Иначе
		ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	КонецЕсли;
	// -CRM
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		МассивУдаляемыхРеквизитов = Параметры.ДобавленныеРеквизиты;
	Иначе
		УдалитьКомандыИЭлементыФормы(Форма);
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		
		СтатическиеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.ИсключаемыеВиды);
		ИменаТабличныхЧастейПоВидамКИ = Неопределено;
		
		Для Каждого РеквизитФормы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
				
				Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
					Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
					ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор , "Вид");
					ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
				КонецЕсли;
				
				ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[РеквизитФормы.Вид];
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита);
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита + "ЗначенияПолей");
				
			Иначе
				
				Индекс = СтатическиеРеквизиты.Найти(РеквизитФормы.Вид);
				
				Если Индекс = Неопределено Тогда // Реквизит создается динамически.
					Если Не ОтложеннаяИнициализация Тогда
						МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
					КонецЕсли;
				Иначе
					СтатическиеРеквизиты.Удалить(Индекс);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	КонецЕсли;
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, Параметры.ИсключаемыеВиды, ОтложеннаяИнициализация);
	Параметры.ВыполненаОтложеннаяИнициализация = ВыполненаОтложеннаяИнициализация;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок = 0;
	ПредыдущийВид = Неопределено;
	
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		Комментарий   = СтрокаТаблицы.Комментарий;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор , "Вид");
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Представление = СтрокаТабличнойЧастиФормы[ИмяРеквизита];
				Поле = "Объект." + ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧастиФормы.НомерСтроки - 1) + "]." + ИмяРеквизита;
				
				Если ОбязательноеЗаполнение И ПустаяСтрока(Представление) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Поле ""%1"" не заполнено.'"), ВидИнформации.Наименование),,Поле);
					ТекущийУровеньОшибок = 2;
					
				Иначе
					
					ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
					
					ТекущийУровеньОшибок = УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации,
					ТипИнформации, ИмяРеквизита, , Поле);
					
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = ЗначенияПолей;
					
				КонецЕсли;
				
				УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
				
			КонецЦикла;
			
		Иначе
			
			ЭлементФормы = Форма.Элементы.Найти(ИмяРеквизита);
			Если ЭлементФормы = Неопределено Тогда
				Продолжить; // Элемент не был создан. Не была вызвана отложенная инициализация.
			КонецЕсли;
			
			Представление = Форма[ИмяРеквизита];
			
			// +CRM		
			Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница 
			И Представление = "<адрес сайта не указан>" Тогда
				Представление = "";
			ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес 
			И Представление = "<адрес не указан>" Тогда
				Представление = "";
			КонецЕсли;
			// -CRM
			
			Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление)
				И Не ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Форма, СтрокаТаблицы, ВидИнформации) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Поле ""%1"" не заполнено.'"), ВидИнформации.Наименование),,, ИмяРеквизита);
				ТекущийУровеньОшибок = 2;
				
			Иначе
				
				ТекущийУровеньОшибок = ПроверитьЗаполнениеКонтактнойИнформации(Представление, СтрокаТаблицы.ЗначенияПолей,
					ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
	
				
			КонецЕсли;
			
			УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	Объект.КонтактнаяИнформация.Очистить();
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	ПредыдущийВид = Неопределено;
	
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		// + Тищенко В.В.
		//Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначенияПолей) И ЗначениеЗаполнено(СтрокаТаблицы.Представление) Тогда
		//	СтрокаТаблицы.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(СтрокаТаблицы.Представление,ТипИнформации);
		//ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Представление) Тогда
		//	СтрокаТаблицы.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтрокаТаблицы.ЗначенияПолей);
		//КонецЕсли;
		// - Тищенко В.В.
	
		// +CRM
		//Если Форма[ИмяРеквизита] = "<адрес сайта не указан>" ИЛИ СтрокаТаблицы.Комментарий = "Не выводить" Тогда
		//	Продолжить;
		//КонецЕсли;
		
		CRM_ОсновнойДляСвязи = СтрокаТаблицы.CRM_ОсновнойДляСвязи;
		// -CRM
		
		Если НЕ Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
				Элемент = Форма.Элементы[СтрокаТаблицы.ИмяРеквизита];
				Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
					Если ПустаяСтрока(СтрокаТаблицы.Представление) ИЛИ
						СтрокаТаблицы.Представление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
							Продолжить;
					КонецЕсли;
				КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор, "Вид");
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				ИдентификаторСтроки = СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				// ++ VOG Солодов В.В. 03.03.2020 CRM-196
				Значение = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "Значение"];
				ЗаписатьКонтактнуюИнформацию(
					Объект,
					Значение,
					ВидИнформации,
					ТипИнформации,
					ИдентификаторСтроки,
					CRM_ОсновнойДляСвязи,
					СтрокаТаблицы.Представление);
				// До изменения
				//ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
				//
				//// +CRM
				////ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки);
				//ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки, CRM_ОсновнойДляСвязи,СтрокаТаблицы.Представление);
				//// -CRM
				// -- VOG Солодов В.В. 03.03.2020
				
			КонецЦикла;
			
		Иначе
			
			ДействуетС = ?(СтрокаТаблицы.Свойство("ДействуетС"), СтрокаТаблицы.ДействуетС, Неопределено);
			// ++ VOG Солодов В.В. 03.03.2020 CRM-196
			ЗаписатьКонтактнуюИнформацию(
				Объект,
				СтрокаТаблицы.Значение,
				ВидИнформации,
				ТипИнформации,
				,
				ДействуетС,
				CRM_ОсновнойДляСвязи,
				СтрокаТаблицы.Представление);
			// До изменения
			// +CRM
			//ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.ЗначенияПолей, ВидИнформации, ТипИнформации,, ДействуетС);
			//ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.ЗначенияПолей, ВидИнформации, ТипИнформации, , ДействуетС, CRM_ОсновнойДляСвязи,СтрокаТаблицы.Представление);
			// +CRM
			// -- VOG Солодов В.В. 03.03.2020
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму, обновляя данные.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма     - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект    - Произвольный - Объект-владелец контактной информации.
//    Результат - Произвольный - Необязательный служебный реквизит, полученный из предыдущего обработчика события.
//
// Возвращаемое значение:
//    Неопределено
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		ИзменитьКомментарий(Форма, Результат.ИмяРеквизита, Результат.ЭтоДобавлениеКомментария);
		
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат);
	ИначеЕсли Результат.Свойство("ПоменятьМестамиЭлементы") Тогда
		ЗначениеПервогоЭлемента = Форма[Результат.ПервыйЭлемент];
		Форма[Результат.ПервыйЭлемент] = Форма[Результат.ВторойЭлемент];
		Форма[Результат.ВторойЭлемент] = ЗначениеПервогоЭлемента ;
		
		// Перемещение комментариев если они есть.
		Отбор = Новый Структура("ИмяРеквизита", Результат.ПервыйЭлемент);
		ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		НайденнаяСтрокаПервыйЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		Отбор = Новый Структура("ИмяРеквизита", Результат.ВторойЭлемент);
		НайденнаяСтрокаВторойЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		Если ЗначениеЗаполнено(НайденнаяСтрокаПервыйЭлемент.Комментарий)
			И ЗначениеЗаполнено(НайденнаяСтрокаВторойЭлемент.Комментарий) Тогда
				КомментарийПервыйЭлемент = НайденнаяСтрокаПервыйЭлемент.Комментарий;
				НайденнаяСтрокаПервыйЭлемент.Комментарий = НайденнаяСтрокаВторойЭлемент.Комментарий;
				НайденнаяСтрокаВторойЭлемент.Комментарий = КомментарийПервыйЭлемент;
				Форма.Элементы["Комментарий" + Результат.ПервыйЭлемент].Заголовок = НайденнаяСтрокаПервыйЭлемент.Комментарий;
				Форма.Элементы["Комментарий" + Результат.ВторойЭлемент].Заголовок = НайденнаяСтрокаВторойЭлемент.Комментарий;
			
		ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрокаПервыйЭлемент.Комментарий)
			ИЛИ ЗначениеЗаполнено(НайденнаяСтрокаВторойЭлемент.Комментарий) Тогда
				КомментарийПервыйЭлемент = НайденнаяСтрокаПервыйЭлемент.Комментарий;
				НайденнаяСтрокаПервыйЭлемент.Комментарий = НайденнаяСтрокаВторойЭлемент.Комментарий;
				НайденнаяСтрокаВторойЭлемент.Комментарий = КомментарийПервыйЭлемент;
				
				ИзменитьКомментарий(Форма, Результат.ПервыйЭлемент, ЗначениеЗаполнено(НайденнаяСтрокаПервыйЭлемент.Комментарий));
				ИзменитьКомментарий(Форма, Результат.ВторойЭлемент, ЗначениеЗаполнено(НайденнаяСтрокаВторойЭлемент.Комментарий));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Записывает контактную информацию из XML в поля табличной части Контактная информация объекта.
//
// Параметры:
//    Объект - ЛюбаяСсылка - номер телефона или факса.
//    ЗначенияПолей - Строка - контактная информация в формате XML.
//    ВидИнформации - Справочник.ВидыКонтактнойИнформация - ссылка на вид контактной информации.
//    ТипИнформации - Перечисление.ТипыКонтактнойИнформация - тип контактной информации.
//    ИдентификаторСтроки - Число - идентификатор строки табличной части.
//    Дата - Дата - Дата с которой действует запись контактной информации,
//                  используется при хранение истории изменения контактной информации.
//Процедура ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки = 0, Дата = Неопределено) Экспорт
Процедура ЗаписатьКонтактнуюИнформацию(Объект, Значение, ВидИнформации, ТипИнформации, ИдентификаторСтроки = 0, Дата = Неопределено, CRM_ОсновнойДляСвязи = Ложь,Знач Представление = "") Экспорт
	
	// ++ VOG Солодов В.В. 25.02.2020 CRM-196
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Значение) Тогда
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Значение, ТипИнформации);
	Иначе
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(Значение, ТипИнформации);
	КонецЕсли;
	
	Если Не УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
	// До изменения
	//ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ВидИнформации);
	//
	//Если Не УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
	// -- VOG Солодов В.В. 25.02.2020
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	// ++ VOG Солодов В.В. 27.02.2020 CRM-196
	НоваяСтрока.Представление 	= ?(ОбъектКИ.Value = "", Представление, ОбъектКИ.Value);
	НоваяСтрока.Значение 		= УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ОбъектКИ);
	НоваяСтрока.ЗначенияПолей 	= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(ОбъектКИ, ТипИнформации);
	// До изменения
	//// + Тищенко В.В.
	//// Добавлен параметр пердставление и проверка на пустоту
	//НоваяСтрока.Представление = ?(ОбъектКИ.Представление = "",Представление,ОбъектКИ.Представление);
	//// - Тищенко В.В.
	//НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	// -- VOG Солодов В.В. 27.02.2020
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	// +CRM
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи", Объект.Ссылка.Метаданные(), "КонтактнаяИнформация") Тогда
		НоваяСтрока.CRM_ОсновнойДляСвязи = CRM_ОсновнойДляСвязи;
	КонецЕсли;
	// -CRM
	// ++ VOG Солодов В.В. 27.02.2020 CRM-196
	Если ЗначениеЗаполнено(Дата) 
		И УправлениеКонтактнойИнформациейСлужебныйПовтИсп.КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(Объект.Ссылка) Тогда
			НоваяСтрока.ДействуетС  = Дата;
	КонецЕсли;
	// До изменения
	//Если ЗначениеЗаполнено(Дата) Тогда
	//	НоваяСтрока.ДействуетС = Дата;
	//КонецЕсли;
	// -- VOG Солодов В.В. 27.02.2020
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов ТЧ.
	// ++ VOG Солодов В.В. 27.02.2020 CRM-196
	УправлениеКонтактнойИнформациейСлужебный.ЗаполнитьТехническиеПоляКонтактнойИнформации(НоваяСтрока, ОбъектКИ, ТипИнформации);
	// До изменения
	//Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	//	ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(НоваяСтрока, ОбъектКИ);
	//	
	//ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	//	ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрока, ОбъектКИ);
	//	
	//ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
	//	ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
	//	
	//ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
	//	ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
	//	
	//ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
	//	ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(НоваяСтрока, ОбъектКИ);
	//	
	//КонецЕсли;
	// -- VOG Солодов В.В. 27.02.2020
	
КонецПроцедуры

#КонецОбласти //ПрограммныйИнтерфейс


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация элементов на форме объект-владельца контактной информации.

Процедура ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, Приоритет, ЭтоКоманда = Ложь)
	
	Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяЭлемента, Приоритет, ЭтоКоманда);
	// + Тищенко В.В.
	Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(ИмяЭлемента);
	// - Тищенко В.В.
	
КонецПроцедуры

Процедура УдалитьОписаниеЭлемента(Форма, ИмяЭлемента)
	
	ДобавленныеЭлементы = Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	НайденнаяСтрока = ДобавленныеЭлементы.НайтиПоЗначению(ИмяЭлемента);
	ДобавленныеЭлементы.Удалить(НайденнаяСтрока);
	
КонецПроцедуры

Функция ЗаголовокСлева(Форма, Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		
		СохраненноеПоложениеЗаголовка = Форма.ПараметрыКонтактнойИнформации.ПоложениеЗаголовка;
		Если ЗначениеЗаполнено(СохраненноеПоложениеЗаголовка) Тогда
			Если СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Верх) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Верх;
			ИначеЕсли СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Лево) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Лево;
			ИначеЕсли СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Право) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Право;
			ИначеЕсли СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Низ) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Низ;
			ИначеЕсли СохраненноеПоложениеЗаголовка = Строка(ПоложениеЗаголовкаЭлементаФормы.Нет) Тогда
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Нет;
			Иначе
				ПоложениеЗаголовкаКИ =  ПоложениеЗаголовкаЭлементаФормы.Авто;
			КонецЕсли;
		Иначе
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Процедура ИзменитьКомментарий(Форма, ИмяРеквизита, ЭтоДобавлениеКомментария)
	
	Если Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
	
	// Заголовок и поле ввода
	ЗаголовокЭлемента = Форма.Элементы.Найти("Заголовок" + ИмяРеквизита);
	ИмяКомментария = "Комментарий" + ИмяРеквизита;
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		ПолеВвода = Форма.Элементы.Найти(ИмяРеквизита);
		// +CRM
		//ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
		ГруппаПолейВвода = Форма.Элементы["ГруппаПолейВводаКонтактнойИнформации_"+Строка(НайденнаяСтрока.Колонка)];
		// -CRM
		
		ТекущийЭлемент = ?(ГруппаПолейВвода.ПодчиненныеЭлементы.Найти(ПолеВвода.Имя) = Неопределено, ПолеВвода.Родитель, ПолеВвода);
		ИндексТекущегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(ТекущийЭлемент);
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексТекущегоЭлемента + 1);
		
		Комментарий = Комментарий(Форма, НайденнаяСтрока.Комментарий, ИмяКомментария, ГруппаПолейВвода);
		Форма.Элементы.Переместить(Комментарий, ГруппаПолейВвода, СледующийЭлемент);
		
		Если ЗаголовокСлева Тогда
			
			// +CRM
			//ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
			ГруппаЗаголовков = Форма.Элементы["ГруппаЗаголовковКонтактнойИнформации_"+Строка(НайденнаяСтрока.Колонка)];
			// -CRM
			ИндексЗаголовка = ГруппаЗаголовков.ПодчиненныеЭлементы.Индекс(ЗаголовокЭлемента);
			СледующийЗаголовок = ГруппаЗаголовков.ПодчиненныеЭлементы.Получить(ИндексЗаголовка + 1);
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
			Форма.Элементы.Переместить(Заглушка, ГруппаЗаголовков, СледующийЗаголовок);
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
			
		КонецЕсли;
		
	Иначе
		
		Комментарий = Форма.Элементы[ИмяКомментария];
		Форма.Элементы.Удалить(Комментарий);
		УдалитьОписаниеЭлемента(Форма, ИмяКомментария);
		
		Если ЗаголовокСлева Тогда
			
			ЗаголовокЭлемента.Высота = 1;
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			ЗаглушкаЗаголовка = Форма.Элементы[ИмяЗаглушки];
			Форма.Элементы.Удалить(ЗаглушкаЗаголовка);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	// +CRM
	//ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	ГруппаДействий = Форма.Элементы["ГруппаДействийКонтактнойИнформации_"+Строка(НайденнаяСтрока.Колонка)];
	// -CRM
	ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
	ЗаглушкаДействия = Форма.Элементы.Найти(ИмяЗаглушкиДействия);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		Если ЗаглушкаДействия = Неопределено Тогда
			
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			// +CRM
			//Действие = Форма.Элементы["Команда" + ИмяРеквизита];
			Действие_1 = "";
			Если НайденнаяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				// Отправить E-mail
				Действие = Форма.Элементы["Команда" + ИмяРеквизита + "ОтправитьEmail"];
			КонецЕсли;
			
			Если НайденнаяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
				// Редактировать адрес сайта
				Действие = Форма.Элементы["Команда" + ИмяРеквизита + "РедактироватьАдресСайтаКомпании"];
			КонецЕсли;
			
			Если НайденнаяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				// Редактировать адрес
				//Действие = Форма.Элементы["Команда" + ИмяРеквизита + "РедактироватьАдресКомпании"];
				 Действие = Форма.Элементы["Команда" + ИмяРеквизита];
				 
				// Открыть адрес на интернет карте.
				Действие_1 = Форма.Элементы["Команда" + ИмяРеквизита + "ОткрытьАдресНаИнтернетКарте"];
			КонецЕсли;
			
			Если НайденнаяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				// Отправить СМС
				Действие = Форма.Элементы["Команда" + ИмяРеквизита + "ОтправитьСМСНаНомер"];
				
				// Позвонить
				Действие_1 = Форма.Элементы["Команда" + ИмяРеквизита + "ПозвонитьНаНомер"];
			КонецЕсли;
			
			Если НайденнаяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
				// Позвонить
				Действие_1 = Форма.Элементы["Команда" + ИмяРеквизита + "ПозвонитьНаНомер"];
			КонецЕсли;
			
			Если НайденнаяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
				// Редактировать прочее
				Действие = Форма.Элементы["Команда" + ИмяРеквизита + "РедактироватьПрочее"];
			КонецЕсли;
			
			Если НЕ Действие_1 = "" Тогда
				Действие = Форма.Элементы["ГруппаКоманд" + ИмяРеквизита];
			КонецЕсли;
			// -CRM
			ИндексКоманды = ГруппаДействий.ПодчиненныеЭлементы.Индекс(Действие);
			СледующийЭлемент = ГруппаДействий.ПодчиненныеЭлементы.Получить(ИндексКоманды + 1);
			Если ЗаглушкаДействия <> СледующийЭлемент Тогда
				Форма.Элементы.Переместить(ЗаглушкаДействия, ГруппаДействий, СледующийЭлемент);
			КонецЕсли;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 2;
			
		КонецЕсли;
		
	Иначе
		// +CRM
		Если НЕ ЗаглушкаДействия = Неопределено Тогда
			Если ЗаглушкаДействия.Высота = 1 Тогда
				
				Форма.Элементы.Удалить(ЗаглушкаДействия);
				УдалитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия);
				
			Иначе
				
				ЗаглушкаДействия.Высота = 1;
				
			КонецЕсли;
		КонецЕсли;
		// -CRM
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, ЭтоНовыйВидКИ = Ложь, КоличествоАдресов = Неопределено, СледующаяСтрока = Неопределено, ЕстьОсновнойДляСвязи = Ложь)
	ДобавлениеНовогоЗначения = ТипЗнч(Результат) = Тип("Структура");
	
	Если ДобавлениеНовогоЗначения Тогда
		ДобавляемыйВид = Результат.ДобавляемыйВид;
		Если ТипЗнч(ДобавляемыйВид)= Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			// ++ VOG Солодов В.В. 03.03.2020 CRM-196
			ИнформацияОВидеКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавляемыйВид, "Тип, Наименование, ВидРедактирования");
			// До изменения
			//ИнформацияОВидеКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавляемыйВид, "Тип, Наименование, РедактированиеТолькоВДиалоге");
			// -- VOG Солодов В.В. 03.03.2020
		Иначе
			ИнформацияОВидеКИ = ДобавляемыйВид;
			ДобавляемыйВид    = ДобавляемыйВид.Ссылка;
		КонецЕсли;
		// +CRM
		ИнформацияОВидеКИ.Вставить("CRM_ОсновнойДляСвязи", Ложь);
		
		Попытка
			
			ТаблицаКонтактнойИнформацииФормы = Форма.Объект.КонтактнаяИнформация.Выгрузить();
			
			ЕстьОсновнойДляСвязи = ТаблицаКонтактнойИнформацииФормы.Колонки.Найти("CRM_ОсновнойДляСвязи") <> Неопределено;
			
		Исключение
		КонецПопытки;	
		// -CRM
	Иначе
		ИнформацияОВидеКИ = Результат;
		ДобавляемыйВид    = Результат.Вид;
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	ОтборПоВиду = Новый Структура("Вид, ЭтоИсторическаяКонтактнаяИнформация", ДобавляемыйВид, Ложь);
	
	Если ДобавлениеНовогоЗначения Тогда
		
		НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
		
		КоличествоСтрокВида = НайденныеСтроки.Количество();
		ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоСтрокВида - 1);
		ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
		ЭтоПоследняяСтрока = Ложь;
		Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
			ЭтоПоследняяСтрока = Истина;
		Иначе
			ИмяСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].ИмяРеквизита;
		// +CRM
			ТипСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].Тип;
		// -CRM
		КонецЕсли;
		// +CRM
		ЭтоПоследняяСтрокаКолонки = Ложь;
		Если ЭтоПоследняяСтрока Тогда
			ЭтоПоследняяСтрокаКолонки = Истина;
		Иначе
			ЭтоПоследняяСтрокаКолонки = (НЕ ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Колонка = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].Колонка);
		КонецЕсли;
		// -CRM
		НоваяСтрока = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
		
		НеУникальноеИмяРеквизита = Истина;
		
		ДобавляемыйВидУникальныйИдентификатор = СтрЗаменить(ДобавляемыйВид.УникальныйИдентификатор(), "-", "x");
		
		НомерНовогоРеквизита = КоличествоСтрокВида + 1;
		
		ОтборПоИмениРеквизита = Новый Структура;
		
		Пока НеУникальноеИмяРеквизита Цикл
			
			ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
				"КонтактнаяИнформацияПоле",
				ДобавляемыйВидУникальныйИдентификатор,
				НомерНовогоРеквизита);
				
			ОтборПоИмениРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
					
			Если ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоИмениРеквизита).Количество() > 0 Тогда
					
				НомерНовогоРеквизита = НомерНовогоРеквизита + 1;
					
			Иначе
				
				НеУникальноеИмяРеквизита = Ложь;
			
			КонецЕсли;				
				
		КонецЦикла;				
				
		НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		НоваяСтрока.Вид = ДобавляемыйВид;
		НоваяСтрока.Тип = ИнформацияОВидеКИ.Тип;
		НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Ложь;
		// +CRM
		НоваяСтрока.CRM_ОсновнойДляСвязи = Ложь;
		НоваяСтрока.Выводить = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Выводить;
		НоваяСтрока.Родитель = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Родитель;
		НоваяСтрока.Колонка  = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Колонка;
		// -CRM
		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), , ИнформацияОВидеКИ.Наименование, Истина));
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		ЕстьКомментарий = Ложь;
		ОбязательноеЗаполнение = Ложь;
	Иначе
		ЭтоПоследняяСтрока = СледующаяСтрока = Неопределено;
		Если Не ЭтоПоследняяСтрока Тогда
			ИмяСледующегоРеквизита = СледующаяСтрока.ИмяРеквизита;
			// +CRM
			ТипСледующегоРеквизита = СледующаяСтрока.Тип;
			// -CRM
		КонецЕсли;
		// +CRM
		ЭтоПоследняяСтрокаКолонки = Ложь;
		Если ЭтоПоследняяСтрока Тогда
			ЭтоПоследняяСтрокаКолонки = Истина;
		КонецЕсли;
		// -CRM
		ИмяРеквизита = ИнформацияОВидеКИ.ИмяРеквизита;
		ЕстьКомментарий = ЗначениеЗаполнено(ИнформацияОВидеКИ.Комментарий);
		ОбязательноеЗаполнение = ИнформацияОВидеКИ.ОбязательноеЗаполнение;
	КонецЕсли;
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	// Отрисовка на форме
	// +CRM
	Если ЕстьОсновнойДляСвязи Тогда
		Если (ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) ИЛИ (ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			ИЛИ (ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
			ГруппаОсновнойДляСвязи = Форма.Элементы.ГруппаОсновнойДляСвязиКонтактнойИнформации_1;
		Иначе
			ГруппаОсновнойДляСвязи = Форма.Элементы.ГруппаОсновнойДляСвязиКонтактнойИнформации_2;
		КонецЕсли;
		
		Если ЭтоПоследняяСтрокаКолонки Тогда
			ДобавитьЭлементОсновнойДляСвязи(Форма, ИнформацияОВидеКИ.CRM_ОсновнойДляСвязи, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаОсновнойДляСвязи, ЗаголовокСлева, ЭтоНовыйВидКИ);
		Иначе	
			ДобавитьЭлементОсновнойДляСвязи(Форма, ИнформацияОВидеКИ.CRM_ОсновнойДляСвязи, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаОсновнойДляСвязи, ЗаголовокСлева, ЭтоНовыйВидКИ, , ИмяСледующегоРеквизита);
		КонецЕсли;

	КонецЕсли;
	// -CRM
	Если ЗаголовокСлева Тогда
		// +CRM
		//ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
		Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации_1;
		Иначе
			ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации_2;
		КонецЕсли;
		// -CRM
		Заголовок = Заголовок(Форма, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаЗаголовков, ИнформацияОВидеКИ.Наименование, ЭтоНовыйВидКИ, ЕстьКомментарий);
		
		Если Не ЭтоПоследняяСтрока Тогда
			СледующийЗаголовок = Форма.Элементы["Заголовок" + ИмяСледующегоРеквизита];
			Форма.Элементы.Переместить(Заголовок, ГруппаЗаголовков, СледующийЗаголовок);
		КонецЕсли;
	КонецЕсли;
	// +CRM
	//ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации_1;
	Иначе
		ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации_2;
	КонецЕсли;
	//ПолеВвода = ПолеВвода(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ЭтоНовыйВидКИ, ОбязательноеЗаполнение);
	ПолеВвода = ПолеВвода(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ЭтоНовыйВидКИ, ОбязательноеЗаполнение, ГруппаПолейВвода);
		
	// -CRM
	
	Если Не ЭтоПоследняяСтрока Тогда
		
		Если СледующаяСтрока = Неопределено Тогда
			
			ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
			// +CRM
			//Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) Тогда
			Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) И НЕ (ПоследняяСтрока.Комментарий = "Не выводить") Тогда
			// -CRM
				ИмяСледующегоЭлемента = "Комментарий" + ИмяСледующегоЭлемента;
			КонецЕсли;
			
			ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
			СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
			
		Иначе
			
			СледующийЭлемент = Форма.Элементы[СледующаяСтрока.ИмяРеквизита];
			
		КонецЕсли;
		// +CRM
		//Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		Если НЕ ЭтоПоследняяСтрокаКолонки Тогда
			Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		КонецЕсли;
		// -CRM
	КонецЕсли;
	// +CRM
	//ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации_1;
	Иначе
		ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации_2;
	КонецЕсли;
	// -CRM
	Если КоличествоАдресов = Неопределено Тогда
		ОтборПоТипу = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоТипу).Количество();
	КонецЕсли;
	// +CRM
	//ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
	ИмяДействия_1 = "";
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		// Отправить E-mail
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "ОтправитьEmail";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		// Редактировать адрес сайта
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "РедактироватьАдресСайтаКомпании";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		// Редактировать адрес
		//ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "РедактироватьАдресКомпании";
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
		
		// Открыть адрес на интернет карте.
		ИмяДействия_1 = "Команда" + ИмяСледующегоРеквизита + "ОткрытьАдресНаИнтернетКарте";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		// Отправить СМС
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "ОтправитьСМСНаНомер";
		
		// Позвонить
		ИмяДействия_1 = "Команда" + ИмяСледующегоРеквизита + "ПозвонитьНаНомер";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		// Позвонить
		ИмяДействия_1 = "Команда" + ИмяСледующегоРеквизита + "ПозвонитьНаНомер";
	КонецЕсли;
	
	Если ТипСледующегоРеквизита = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		// Редактировать прочее
		ИмяДействия = "Команда" + ИмяСледующегоРеквизита + "РедактироватьПрочее";
	КонецЕсли;
	ИмяСледующегоДействия_1 = "";
	// -CRM
	ИмяЗаглушки = "ДекорацияВерх" + ИмяСледующегоРеквизита;
	
	Если Форма.Элементы.Найти(ИмяЗаглушки) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяЗаглушки;
	ИначеЕсли Форма.Элементы.Найти(ИмяДействия) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяДействия;
	// +CRM
		Если НЕ ИмяДействия_1 = "" Тогда
			ИмяСледующегоДействия_1 = ИмяДействия_1;
		КонецЕсли;
	// -CRM
	Иначе
		ИмяСледующегоДействия = "ЗаглушкаДействия" + ИмяСледующегоРеквизита;
	КонецЕсли;
	
	// Выводим комментарий
	Если ЕстьКомментарий Тогда
		
		ИмяКомментария = "Комментарий" + ИмяРеквизита;
		Комментарий = Комментарий(Форма, Результат.Комментарий, ИмяКомментария, ГруппаПолейВвода);
		
		Если Не ЭтоПоследняяСтрока Тогда
			
			ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
			
			Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) Тогда
				ИмяСледующегоЭлемента = "Комментарий" + ИмяСледующегоЭлемента;
			КонецЕсли;
			
			ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
			СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
			
			Форма.Элементы.Переместить(Комментарий, ГруппаПолейВвода, СледующийЭлемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заглушка , если заголовок у поля сверху.
	Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
		
		ИмяДекорации = "ДекорацияВерх" + ИмяРеквизита;
		Декорация = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаДействий);
		Декорация.Высота = 1;
		ДобавитьОписаниеЭлемента(Форма, ИмяДекорации, 1);
		
	КонецЕсли;
	
	Действие = Действие(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий);
	
	Если Не ЭтоПоследняяСтрока Тогда
		// +CRM
		Если НЕ ЭтоПоследняяСтрокаКолонки Тогда
			СледующееДействие = Форма.Элементы[ИмяСледующегоДействия];
			Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
		КонецЕсли;	
		Если НЕ ИмяСледующегоДействия_1 = "" Тогда
			СледующееДействие = Форма.Элементы[ИмяСледующегоДействия_1];
			Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
		КонецЕсли;
		// -CRM
	КонецЕсли;
	
	Если Не ЭтоНовыйВидКИ Тогда
		Если ТаблицаКонтактнойИнформации.Количество() > 1 И ТаблицаКонтактнойИнформации[0].Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
			ПунктКонтекстногоМенюПеремещения(ПолеВвода, Форма, 1);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ПредыдущаяСтрока = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 2);
				ПунктКонтекстногоМенюПеремещения(Форма.Элементы[ПредыдущаяСтрока.ИмяРеквизита], Форма, - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлениеНовогоЗначения Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
		
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			// ++ VOG Солодов В.В. 03.03.2020 CRM-196
			И ИнформацияОВидеКИ.ВидРедактирования = "Диалог" Тогда
			// До изменения
			//И ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
			// -- VOG Солодов В.В. 03.03.2020
				Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, Наименование, ЭтоНовыйВидКИ = Ложь, ЕстьКомментарий = Ложь)
	
	ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ГруппаЗаголовков);
	Элемент.Заголовок = ?(ЭтоНовыйВидКИ, Наименование + ":", "");
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		// +CRM
		//Элемент.Высота = 5;
		// -CRM
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	Иначе
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	Если ЕстьКомментарий Тогда
		
		ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
		Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолеВвода(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь, Родитель = Неопределено)
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	// добавим заголовок, иначе элементы не выравниваются
	
	Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
		
		ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
		Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ?(Родитель=Неопределено,Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации,Родитель));
		Элемент.Заголовок = ИнформацияОВидеКИ.Наименование + ":";
		Элемент.Высота = 1;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	КонецЕсли; 
	
	// +CRM
	//Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации);
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ?(Родитель=Неопределено,Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации,Родитель));
	// -CRM
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.РастягиватьПоГоризонтали = Истина;
	//Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева Или Не ЭтоНовыйВидКИ, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Верх);
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	// ++ VOG Солодов В.В. 03.03.2020 CRM-196
	Если ИнформацияОВидеКИ.ВидРедактирования = "Диалог" И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	// До изменения
	//Если ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	// -- VOG Солодов В.В. 03.03.2020
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.Гиперссылка = Истина;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
	Иначе
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяРеквизита, 2);
	
	// Устанавливаем свойства поля ввода.
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		// +CRM
		//Если ИнформацияОВидеКИ.Вид.МногострочноеПоле Тогда
		//	Элемент.Высота = 5;
		//	Элемент.МногострочныйРежим = Истина;
		//Иначе
		//	Элемент.Высота = 1;
		//	Элемент.МногострочныйРежим = Ложь;
		//КонецЕсли;
		//Элемент.РастягиватьПоВертикали = Ложь;
		// -CRM
	Иначе
		
		// Ввод комментария через контекстное меню.
		ИмяКоманды = "КонтекстноеМеню" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru = 'Ввести комментарий'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = НСтр("ru = 'Ввести комментарий'");
		Команда.Картинка = БиблиотекаКартинок.Комментарий;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
// +CRM
	//Если ИнформацияОВидеКИ.ХранитьИсториюИзменений Тогда
	Если ТипЗнч(ИнформацияОВидеКИ) = Тип("СтрокаДереваЗначений") Тогда
		ХранитьИсториюИзменений = ИнформацияОВидеКИ.ХранитьИсториюИзменений;
	ИначеЕсли ИнформацияОВидеКИ.Свойство("ХранитьИсториюИзменений") Тогда
		ХранитьИсториюИзменений = ИнформацияОВидеКИ.ХранитьИсториюИзменений;
	Иначе
		ХранитьИсториюИзменений = Ложь;
	КонецЕсли;
	Если ХранитьИсториюИзменений Тогда
// -CRM
		// Вывод истории контактной информации через контекстное меню.
		ИмяКоманды = "КонтекстноеМенюИстория" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru = 'История изменений...'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.ИсторияИзменений;
		Команда.Подсказка = НСтр("ru = 'Показывает историю изменения контактной информации'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Ложь;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ИмяКоманды = "КонтекстноеМенюКартаЯндекс" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru = 'Адрес на Яндекс.Картах'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.ЯндексКарты;
		Команда.Подсказка = НСтр("ru = 'Показывает адрес на картах Яндекс.Карты'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
		ИмяКоманды = "КонтекстноеМенюКартаGoogle" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru = 'Адрес на Google Maps'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.GoogleMaps;
		Команда.Подсказка = НСтр("ru = 'Показывает адрес на карте Google Maps'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);

	КонецЕсли;
	
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ИнформацияОВидеКИ.Тип) 
		И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		
			Элемент.КнопкаВыбора = Истина;
			
			// ++ VOG Солодов В.В. 03.03.2020 CRM-196
			Если ИнформацияОВидеКИ.ВидРедактирования = "Диалог" Тогда
			// До изменения
			//Если ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
			// -- VOG Солодов В.В. 03.03.2020
				Элемент.РедактированиеТекста = Ложь;
				Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
			КонецЕсли;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			
	КонецЕсли;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	// +CRM
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Элемент.Вид			= ВидПоляФормы.ПолеНадписи;
		Элемент.Гиперссылка	= Истина;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании");
	КонецЕсли;
	
	Элемент.Высота = 1;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
	Если ИнформацияОВидеКИ.CRM_ОсновнойДляСвязи Тогда
		Элемент.Шрифт			= Новый Шрифт(Элемент.Шрифт, , , Истина, , , );
	КонецЕсли;	
	
	// -CRM
	
	Возврат Элемент;
	
КонецФункции

Процедура ПунктКонтекстногоМенюПеремещения(ПредыдущийЭлемент, Форма, Направление)
	
	Если Направление > 0 Тогда
		ИмяКоманды = "КонтекстноеМенюВверх" + ПредыдущийЭлемент.Имя;
	Иначе
		ИмяКоманды = "КонтекстноеМенюВниз" + ПредыдущийЭлемент.Имя;
	КонецЕсли;
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПредыдущийЭлемент.КонтекстноеМеню);
	
	Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	Если Направление > 0 Тогда 
		ТекстКоманды = НСтр("ru = 'Переместить вверх'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВверх;
	Иначе
		ТекстКоманды = НСтр("ru = 'Переместить вниз'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВниз;
	КонецЕсли;
	Кнопка.Заголовок = ТекстКоманды;
	Команда.Подсказка = ТекстКоманды;
	Кнопка.ИмяКоманды = ИмяКоманды;
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Кнопка.Доступность = Истина;
	ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);

КонецПроцедуры

Функция Действие(Форма, ВидКонтактнойИнформации, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь)
	
	Тип = ВидКонтактнойИнформации.Тип;
	Если (Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница)
		Или (Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		Или (Тип = Перечисления.ТипыКонтактнойИнформации.Адрес) Тогда
		Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			// Отправить E-mail
			ИмяКоманды = "Команда" + ИмяРеквизита + "ОтправитьEmail";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.CRM_ЭлектронноеПисьмоСоздать;
			Команда.Действие = "Подключаемый_ОтправитьEmail";
			Команда.Подсказка		= "Отправить Email по данному адресу";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаДействий);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
		КонецЕсли;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			
			// Редактировать адрес сайта
			ИмяКоманды = "Команда" + ИмяРеквизита + "РедактироватьАдресСайтаКомпании";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.bmp_ЗапуститьПроцесс;
			Команда.Действие = "Подключаемый_РедактироватьАдресСайтаКомпании";
			Команда.Подсказка		= "Редактировать адрес сайта компании";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаДействий);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
		КонецЕсли;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			ГруппаКоманд = Группа("ГруппаКоманд"+ИмяРеквизита,
			Форма, ГруппаДействий, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 3);
			
			// Открыть адрес на интернет карте.
			ИмяКоманды = "Команда" + ИмяРеквизита + "ОткрытьАдресНаИнтернетКарте";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.CRM_ГлобусСЛупой;
			Команда.Действие = "Подключаемый_ОткрытьАдресНаИнтернетКарте";
			Команда.Подсказка		= "Открыть адрес на интернет-карте";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманд);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
			ИмяКоманды = "Команда" + ИмяРеквизита;
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманд);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Заголовок = НСтр("ru='Заполнить'");
			Команда.Подсказка = НСтр("ru='Заполнить адрес'");
			Команда.Картинка = БиблиотекаКартинок.CRM_Влево;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
			Элемент = ГруппаКоманд;
			
		КонецЕсли;
		
		Если ЕстьКомментарий Тогда
			
			ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		КонецЕсли;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
		ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс
		ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Другое
		ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			
			ГруппаКоманд = Группа("ГруппаКоманд"+ИмяРеквизита,
			Форма, ГруппаДействий, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 3);
			
			// Отправить СМС
			ИмяКоманды = "Команда" + ИмяРеквизита + "ОтправитьСМСНаНомер";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.sms4bSMSИсходящее;
			Команда.Действие = "Подключаемый_ОтправитьСМСНаНомер";
			Команда.Подсказка = "Отправить SMS сообщение на данный номер телефона";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманд);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
			
			// Позвонить
			ИмяКоманды = "Команда" + ИмяРеквизита + "ПозвонитьНаНомер";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.CRM_ТелефонныйЗвонок;
			Команда.Действие = "Подключаемый_ПозвонитьНаНомер";
			Команда.Подсказка = "Позвонить на данный номер телефона";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманд);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			// Большие картинки, зададим размер кнопки
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
			Элемент = ГруппаКоманд;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			
			ГруппаКоманд = Группа("ГруппаКоманд" + ИмяРеквизита,
			Форма, ГруппаДействий, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 3);
			
			// Позвонить
			ИмяКоманды = "Команда" + ИмяРеквизита + "ПозвонитьНаНомер";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.CRM_ТелефонныйЗвонокИсходящий;
			Команда.Действие = "Подключаемый_ПозвонитьНаНомер";
			Команда.Подсказка = "Позвонить на данный номер телефона";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманд);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
			Элемент = ГруппаКоманд;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			
			// { VOG RMV 2019-03-26 task 158
			// пока топорно для теста, потом может исправлю
			ЭтоКоординатыТТ = (ВидКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.КоординатыGPSТорговойТочки);
			Если ЭтоКоординатыТТ Тогда
				ГруппаКоманд = Группа("ГруппаКоманд" + ИмяРеквизита,
				Форма, ГруппаДействий, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 3);
				// Открыть адрес на интернет карте.
				ИмяКоманды = "Команда" + ИмяРеквизита + "ОткрытьАдресНаИнтернетКарте";
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
				Команда.Отображение = ОтображениеКнопки.Картинка;
				Команда.Картинка		= БиблиотекаКартинок.CRM_ГлобусСЛупой;
				Команда.Действие = "Подключаемый_ОткрытьАдресНаИнтернетКарте";
				Команда.Подсказка		= "Открыть адрес на интернет-карте";
				Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманд);
				ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
				Элемент.ИмяКоманды = ИмяКоманды;
				Элемент.Ширина = 3;
				Элемент.Высота = 1;
				Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			//Иначе
			КонецЕсли;
			// } VOG RMV 2019-03-26 task 158
			
			// Редактировать прочее
			ИмяКоманды = "Команда" + ИмяРеквизита + "РедактироватьПрочее";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.bmp_ЗапуститьПроцесс;
			Команда.Действие = "Подключаемый_РедактироватьПрочее";
			Команда.Подсказка = НСтр("ru = 'Редактировать'");
			// { VOG RMV 2019-03-26 task 158
			//Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаДействий);
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ?(ЭтоКоординатыТТ, ГруппаКоманд, ГруппаДействий));
			// } VOG RMV 2019-03-26 task 158
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
			// { VOG RMV 2019-03-26 task 158
			//КонецЕсли;
			// } VOG RMV 2019-03-26 task 158
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			ГруппаКоманд = Группа("ГруппаКоманд"+ИмяРеквизита,
			Форма, ГруппаДействий, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 3);
			
			// Редактировать адрес
			ИмяКоманды = "Команда" + ИмяРеквизита + "РедактироватьАдресКомпании";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.bmp_ЗапуститьПроцесс;
			Команда.Действие = "Подключаемый_РедактироватьАдресКомпании";
			Команда.Подсказка		= "Редактировать адрес компании";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманд);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
			// Открыть адрес на интернет карте.
			ИмяКоманды = "Команда" + ИмяРеквизита + "ОткрытьАдресНаИнтернетКарте";
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Картинка		= БиблиотекаКартинок.CRM_ГлобусСЛупой;
			Команда.Действие = "Подключаемый_ОткрытьАдресНаИнтернетКарте";
			Команда.Подсказка		= "Открыть адрес на интернет-карте";
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманд);
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 3;
			Элемент.Высота = 1;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			
			Элемент = ГруппаКоманд;
			
		КонецЕсли;
		
		Если ЕстьКомментарий Тогда
			
			ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		КонецЕсли;
		
	Иначе
		// Действия нет, ставим заглушку.
		ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
		Элемент = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
		Если ЕстьКомментарий Тогда
			Элемент.Высота = 2;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота = 5;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция Комментарий(Форма, Комментарий, ИмяКомментария, ГруппаДляРазмещения)
	
	Элемент = Форма.Элементы.Добавить(ИмяКомментария, Тип("ДекорацияФормы"), ГруппаДляРазмещения);
	Элемент.Заголовок = Комментарий;
	
	Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.РастягиватьПоВертикали  = Ложь;
	Элемент.ВертикальноеПоложение  = ВертикальноеПоложениеЭлемента.Верх;
	
	Элемент.Высота = 1;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяКомментария, 2);
	
	Возврат Элемент;
	
КонецФункции

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Родитель, Группировка, ПорядокУдаления) 
	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда
		Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = Группировка;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяГруппы, ПорядокУдаления);		
		
	КонецЕсли;
	
	Группа.Объединенная = Ложь;
	Группа.СквозноеВыравнивание = СквозноеВыравнивание.НеИспользовать;
	
	Возврат Группа;
	
КонецФункции

Процедура ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов)
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	СоздатьПараметрыКонтактнойИнформации = Истина;
	СоздатьТаблицуКонтактнойИнформации = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" Тогда
			СоздатьПараметрыКонтактнойИнформации = Ложь;
		ИначеЕсли Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			СоздатьТаблицуКонтактнойИнформации = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если СоздатьТаблицуКонтактнойИнформации Тогда
		
		Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
// +CRM
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
// -CRM
		// Создадим таблицу значений
		ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений", Новый ОписаниеТипов("Булево"), ИмяОписания));
// +CRM
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Выводить",				 Новый ОписаниеТипов("Булево"),										ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Родитель",				 Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"),	ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_ОсновнойДляСвязи",	 Новый ОписаниеТипов("Булево"),										ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Колонка",					 ОписаниеТипаЧисло			,										ИмяОписания));
// -CRM
		// { VOG RMV 2019-03-26 task 158
		ОписаниеТипаКоординаты = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6, ДопустимыйЗнак.Любой)); 
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Широта", ОписаниеТипаКоординаты, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Долгота", ОписаниеТипаКоординаты, ИмяОписания));
		// } VOG RMV 2019-03-26 task 158
		// ++ VOG Солодов В.В. 27.02.2020 CRM-196
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяОписания));
		// -- VOG Солодов В.В. 27.02.2020
	КонецЕсли;
	
	Если СоздатьПараметрыКонтактнойИнформации Тогда
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыКонтактнойИнформации", Новый ОписаниеТипов()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ, ЭтоРеквизитТабличнойЧасти = Ложь, ЗаполнятьЗначениеРеквизита = Истина)
	
	НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКИ.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКИ.Вид;
	НоваяСтрока.Тип           = СтрокаКИ.Тип;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	// +CRM
	НоваяСтрока.CRM_ОсновнойДляСвязи = СтрокаКИ.CRM_ОсновнойДляСвязи;
	НоваяСтрока.Родитель      = СтрокаКИ.РодительКИ;
	НоваяСтрока.Выводить      = СтрокаКИ.Выводить;
	НоваяСтрока.Колонка       = СтрокаКИ.Колонка;
	// -CRM
	// { VOG RMV 2019-03-26 task 158
	//Широты и Долготы может не быть, поэтому чтобы исключить ошибку, сделаю заполнение этих параметров через буферную структуру
	Координаты = Новый Структура("Широта, Долгота");
	ЗаполнитьЗначенияСвойств(Координаты, СтрокаКИ);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Координаты);	
	// } VOG RMV 2019-03-26 task 158
	Если НоваяСтрока.Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
		НоваяСтрока.ЭтоИсторическаяКонтактнаяИнформация = СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация;
	КонецЕсли;
	Если НоваяСтрока.Свойство("ДействуетС") Тогда
		НоваяСтрока.ДействуетС = СтрокаКИ.ДействуетС;
	КонецЕсли;
	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") Тогда
		НоваяСтрока.ХранитьИсториюИзменений = СтрокаКИ.ХранитьИсториюИзменений;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 25.02.2020 CRM-196
	Если Не ЗначениеЗаполнено(СтрокаКИ.Значение) И ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаКИ.ЗначенияПолей) Тогда
			ДанныеXML = СтрокаКИ.ЗначенияПолей;
		Иначе
			
			СтруктураКИ = Новый Структура;
			СтруктураКИ.Вставить("ЗначенияПолей", 			СтрокаКИ.ЗначенияПолей);
			СтруктураКИ.Вставить("Представление", 			СтрокаКИ.Представление);
			СтруктураКИ.Вставить("ВидКонтактнойИнформации", СтрокаКИ.Вид);
			
			Результат = УправлениеКонтактнойИнформациейСлужебный.ПривестиКонтактнуюИнформациюXML(СтруктураКИ);
			ДанныеXML = Результат.ДанныеXML;
			
		КонецЕсли;
		
		НоваяСтрока.ЗначенияПолей 	= ДанныеXML;
		НоваяСтрока.Значение 		= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеXML);
		
	Иначе
		
		НоваяСтрока.ЗначенияПолей 	= СтрокаКИ.ЗначенияПолей;
		НоваяСтрока.Значение 		= СтрокаКИ.Значение;
		
	КонецЕсли;
	// До изменения
	//Если ПустаяСтрока(СтрокаКИ.ЗначенияПолей) Тогда
	//	НоваяСтрока.ЗначенияПолей = "";
	//Иначе
	//	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаКИ.ЗначенияПолей);
	//КонецЕсли;
	// -- VOG Солодов В.В. 25.02.2020
	
	НоваяСтрока.Представление = СтрокаКИ.Представление;
	НоваяСтрока.Комментарий   = СтрокаКИ.Комментарий;
	
	Если ЗаполнятьЗначениеРеквизита И Не ЭтоРеквизитТабличнойЧасти Тогда
		
		// ++ VOG Солодов В.В. 03.03.2020 CRM-196
		Если Форма.Элементы.Найти(СтрокаКИ.ИмяРеквизита) <> Неопределено 
			И Форма.Элементы[СтрокаКИ.ИмяРеквизита].Вид = ВидПоляФормы.ПолеНадписи Тогда
			ЭтоПолеНадписи = Истина;
		Иначе
			ЭтоПолеНадписи = Ложь;
		КонецЕсли;
		// -- VOG Солодов В.В. 03.03.2020
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			// ++ VOG Солодов В.В. 03.03.2020 CRM-196
			И (СтрокаКИ.ВидРедактирования = "Диалог" ИЛИ ЭтоПолеНадписи)
			// До изменения
			//И СтрокаКИ.РедактированиеТолькоВДиалоге
			// -- VOG Солодов В.В. 03.03.2020
			И ПустаяСтрока(СтрокаКИ.Представление) Тогда
			Форма[СтрокаКИ.ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		Иначе
			Форма[СтрокаКИ.ИмяРеквизита] = СтрокаКИ.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВидаКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(СтрокаКИ.Вид);
	СтруктураВидаКИ.Вставить("Ссылка", СтрокаКИ.Вид);
	
	Если ЭтоНовыйВидКИ И СтруктураВидаКИ.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(СтруктураВидаКИ, СтрокаКИ.Вид.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомандыИЭлементыФормы(Форма)
	
	ДобавленныеЭлементы = Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	ДобавленныеЭлементы.СортироватьПоПредставлению();
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		
		Если УдаляемыйЭлемент.Пометка Тогда
			// +CRM
			Попытка
				Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.Значение]);
			Исключение
			КонецПопытки;
		Иначе
			Попытка
				Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.Значение]);
			Исключение
			КонецПопытки;
			// -CRM
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//    Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает имена табличных частей документа по виду контактной информации.
//
// Параметры:
//    ТаблицаВидовКонтактнойИнформации - ТаблицаЗначений - Список видов контактной информации.
//     * Вид - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//    ИмяОбъекта                       - Строка - полное имя объекта метаданного.
//
// Возвращаемое значение:
//    Соответствие - имена табличных части или пустая строка, если табличной части нет.
//
Функция ИменаТабличныхЧастейПоВидамКИ(ТаблицаВидовКонтактнойИнформации, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Вид КАК ВидКИ
	               |ПОМЕСТИТЬ ВидыКИ
	               |ИЗ
	               |	&ТаблицаВидовКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяТабличнойЧасти,
	               |	ВидыКИ.ВидКИ КАК ВидКонтактнойИнформации
	               |ИЗ
	               |	ВидыКИ КАК ВидыКИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |		ПО ВидыКИ.ВидКИ = ВидыКонтактнойИнформации.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаВидовКонтактнойИнформации", ТаблицаВидовКонтактнойИнформации);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ИмяТабличнойЧасти) Тогда
			ИмяТабличнойЧасти = Сред(РезультатЗапроса.ИмяТабличнойЧасти, СтрНайти(РезультатЗапроса.ИмяТабличнойЧасти, ИмяОбъекта) + СтрДлина(ИмяОбъекта));
		Иначе
			ИмяТабличнойЧасти = "";
		КонецЕсли;
		
		Результат.Вставить(РезультатЗапроса.ВидКонтактнойИнформации, ИмяТабличнойЧасти);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет на наличие в форме заполненных строк КИ того же вида (за исключением текущей).
//
Функция ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Знач Форма, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока Тогда
			Представление = Форма[СтрокаВида.ИмяРеквизита];
			Если Не ПустаяСтрока(Представление) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация".

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Источник) Экспорт
	
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Регион = "";
	СтрокаТабличнойЧасти.Город  = "";
	
	Адрес = Источник.Состав;
	
	// ++ VOG Солодов В.В. 25.02.2020 CRM-196
	ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
	// До изменения
	//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	// -- VOG Солодов В.В. 25.02.2020
	ЭтоАдрес = ТипЗнч(Адрес) = Тип("ОбъектXDTO") И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес");
	Если ЭтоАдрес И Адрес.Состав <> Неопределено Тогда
		СтрокаТабличнойЧасти.Страна = Адрес.Страна;
		
		Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
			Обработки["РасширенныйВводКонтактнойИнформации"].ЗаполнитьРасширенныеРеквизитыТабличнойЧастиДляАдреса(Адрес, СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник) Экспорт
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Источник) Экспорт
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	Телефон = Источник.Состав;
	// ++ VOG Солодов В.В. 25.02.2020 CRM-196
	ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
	// До изменения
	//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	// -- VOG Солодов В.В. 25.02.2020
	Если Телефон <> Неопределено И Телефон.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		КодСтраны     = Телефон.КодСтраны;
		КодГорода     = Телефон.КодГорода;
		НомерТелефона = Телефон.Номер;
		
		Если СтрНачинаетсяС(КодСтраны, "+") Тогда
			КодСтраны = Сред(КодСтраны, 2);
		КонецЕсли;
		
		Поз = СтрНайти(НомерТелефона, ",");
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		Поз = СтрНайти(НомерТелефона, Символы.ПС);
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
		СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник) Экспорт
	
	// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = "";
	
	АдресСтраницы = Источник.Состав;
	// ++ VOG Солодов В.В. 25.02.2020 CRM-196
	ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
	// До изменения
	//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	// -- VOG Солодов В.В. 25.02.2020
	Если АдресСтраницы <> Неопределено И АдресСтраницы.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
		АдресСтрокой = АдресСтраницы.Значение;
		
		// Удалим протокол
		АдресСервера = Прав(АдресСтрокой, СтрДлина(АдресСтрокой) - СтрНайти(АдресСтрокой, "://") );
		Поз = СтрНайти(АдресСервера, "/");
		// Удалим путь
		АдресСервера = ?(Поз = 0, АдресСервера, Лев(АдресСервера,  Поз-1));
		
		СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет контактную информацию электронной почты и сообщает об ошибках. 
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияЭлектроннойПочты(Источник, ВидИнформации, Знач ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаОшибки = "";
	
	АдресЭП = Источник.Состав;
	// ++ VOG Солодов В.В. 25.02.2020 CRM-196
	ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
	// До изменения
	//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	// -- VOG Солодов В.В. 25.02.2020
	Если АдресЭП <> Неопределено И АдресЭП.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП.Значение);
			Если Результат.Количество() > 1 Тогда
				
				СтрокаОшибки = НСтр("ru = 'Допускается ввод только одного адреса электронной почты'");
				
			КонецЕсли;
		Исключение
			СтрокаОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВывестиСообщениеПользователю(СтрокаОшибки, ИмяРеквизита, ПолеРеквизита);
		УровеньОшибки = ?(ВидИнформации.ПроверятьКорректность, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;
	
	Возврат УровеньОшибки;
	
КонецФункции

// Проверяет контактную информацию.
//
Функция ПроверитьЗаполнениеКонтактнойИнформации(Представление, ЗначенияПолей, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "")
	
	ТекстСериализации = ?(ПустаяСтрока(ЗначенияПолей), Представление, ЗначенияПолей);
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ТекстСериализации, ВидИнформации,,Представление);
	Если Комментарий <> Неопределено Тогда
		ОбъектКИ.Комментарий = Комментарий;
	КонецЕсли;
	ОбъектКИ.Представление = Представление;
	
	Если ПустаяСтрока(Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	
	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		//УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ.Состав, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту); //Кайдашов
		УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое (прочее) не проверяем.
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

// Проверяет контактную информацию адреса и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	
	// +++ VOG Кулаков П.Л. 02.07.2020 CRM-741
	// Для ОбъектаXDTО национальный адрес проверяется после, при использовании этой функции выдается ошибка
	Если ТипЗнч(Источник) <> Тип("ОбъектXDTO") Тогда
		Если НЕ УправлениеКонтактнойИнформациейСлужебный.ЭтоНациональныйАдрес(Источник) Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	// ++ VOG Солодов В.В. 25.02.2020 CRM-196
	ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
	// До изменения
	//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	// -- VOG Солодов В.В. 25.02.2020
	
	Если Источник <> Неопределено И Источник.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Адрес = Источник;
	Иначе
		Адрес = Источник;
	КонецЕсли;
	
	Если Адрес <> Неопределено И Адрес.Состав.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
			СписокОшибок = Обработки["РасширенныйВводКонтактнойИнформации"].ОшибкиЗаполненияАдресаXDTO(Адрес, ВидИнформации);
			Для Каждого Элемент Из СписокОшибок Цикл
				ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита, ПолеРеквизита);
				ЕстьОшибки = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки И ВидИнформации.ПроверятьКорректность Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Проверяет контактную информацию телефона и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

// Проверяет контактную информацию веб страницы и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита)
	
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПолеРеквизита, ИмяРеквизита);
	
КонецПроцедуры


#КонецОбласти // СлужебныеПроцедурыИФункции


#Область МетодыCRM

// Обновляет один вид контактной информации.
//
// Параметры:
//    ВидКИ - Справочник.ВидыКонтактнойИнформации - вид контактной информации.
//    Тип - Перечисление.ТипыКонтактнойИнформации - тип контактной информации.
//    МожноИзменятьСпособРедактирования - Булево - Истина, если есть возможность изменять способ редактирования, Ложь -
//                                                 иначе.
//    РедактированиеТолькоВДиалоге - Булево - Истина, если редактировать только в диалоге, Ложь - иначе.
//    АдресТолькоРоссийский - Булево - Истина, если адрес только российский, Ложь - Иначе.
//    Порядок - Неопределено или Число - порядок вида контактной информации.
//
Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, ТолькоНациональныйАдрес,
	Порядок = Неопределено) Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Вид = ВидКИ;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.Порядок = Порядок;
	Если ПараметрыВида.Свойство("ТолькоНациональныйАдрес") Тогда
		ПараметрыВида.ТолькоНациональныйАдрес = ТолькоНациональныйАдрес;
	КонецЕсли;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	// ++ VOG Солодов В.В. 03.03.2020 CRM-196
	Если РедактированиеТолькоВДиалоге Тогда
		ПараметрыВида.ВидРедактирования = "Диалог";
	Иначе
		ПараметрыВида.ВидРедактирования = "ПолеВвода";
	КонецЕсли;
	// До изменения
	//ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	// -- VOG Солодов В.В. 03.03.2020
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Функция ДобавитьЭлементОсновнойДляСвязи(Форма, ОсновнойДляСвязи, Тип, ИмяРеквизита, ГруппаОсновнойДляСвязи, ЗаголовокСлева, ЭтоНовыйВидКИ = ЛОЖЬ, ЕстьКомментарий = ЛОЖЬ, ИмяСледующегоРеквизита = "")
	// Заглушка , если заголовок у поля сверху.
	Если (НЕ ЗаголовокСлева) И ЭтоНовыйВидКИ Тогда
		ИмяЗаглушки = "Заглушка1ОсновнойДляСвязи" + ИмяРеквизита;
		Заглушка1 = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаОсновнойДляСвязи);
		Заглушка1.Высота = 1;
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
	КонецЕсли;
	ИмяЭлемента = "ОсновнойДляСвязи" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаОсновнойДляСвязи);
	Элемент.Вид                   = ВидДекорацииФормы.Картинка;
	Элемент.Высота                = 1;
	Элемент.Ширина                = 2;
	Элемент.Подсказка             = "Использовать как основной способ связи данного типа";
	Элемент.ПропускатьПриВводе    = ИСТИНА;
	Элемент.Гиперссылка           = ИСТИНА;
	Элемент.Картинка              = ?(ОсновнойДляСвязи, БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная, БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная);
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи");
	ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, 2);
	Если ЕстьКомментарий Тогда
		ИмяЗаглушки = "Заглушка3ОсновнойДляСвязи" + ИмяРеквизита;
		Заглушка3 = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаОсновнойДляСвязи);
		Заглушка3.Высота = 1;
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяСледующегоРеквизита) Тогда
		ИмяСледующегоЭлемента = Форма.Элементы[?(ЗаголовокСлева, "", "Заглушка1") + "ОсновнойДляСвязи" + ИмяСледующегоРеквизита];
		Форма.Элементы.Переместить(Элемент, ГруппаОсновнойДляСвязи, ИмяСледующегоЭлемента);
		Если ЕстьКомментарий Тогда
			Форма.Элементы.Переместить(Заглушка3, ГруппаОсновнойДляСвязи, ИмяСледующегоЭлемента);
		КонецЕсли;
	КонецЕсли;
	Возврат Элемент;
КонецФункции // ДобавитьЭлементОсновнойДляСвязи()

#КонецОбласти // МетодыCRM
