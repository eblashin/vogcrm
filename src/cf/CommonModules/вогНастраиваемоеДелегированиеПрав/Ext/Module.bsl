
#Область ПрограммныйИнтерфейс

Процедура ПриОбновленииИнформационнойБазы(Параметры = Неопределено) Экспорт
	
	ОписаниеОбластейДелегирования = ОписанияНачальногоЗаполненияОбластейДелегирования();
	
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		ОбластьДелегированияСсылка = Справочники.вогОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.вогОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда // Элемента данных нет, нужно создать новый
			
			ОбластьОбъект = Справочники.вогОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование 				= Строка.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = Строка.ИмяПредопределенного;
			
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			
			ОбластьОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет активность каждого правила делегирования на текущий момент времени с учетом
// срока действия.
//
Процедура ОбработкаПравилДелегированияПрав() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Делегирование прав'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		НСтр("ru = 'Начата обработка правил делегирования прав'"));
		
	// Выборка недействующих правил с наступившим сроком действия и действующих с истекшим сроком действия.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДелегированиеПрав.Ссылка КАК Ссылка,
		|	ДелегированиеПрав.Кому КАК Кому,
		|	ДелегированиеПрав.ОтКого КАК ОтКого,
		|	ДелегированиеПрав.Действует КАК Действует,
		|	ДелегированиеПрав.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ДелегированиеПрав.ДатаОкончанияДействия КАК ДатаОкончанияДействия
		|ИЗ
		|	Справочник.вогДелегированиеПрав КАК ДелегированиеПрав
		|ГДЕ
		|	НЕ ДелегированиеПрав.ПометкаУдаления
		|	И (ДелегированиеПрав.ДатаНачалаДействия < &ТекущаяДата
		|			И (ДелегированиеПрав.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ДелегированиеПрав.ДатаОкончанияДействия > &ТекущаяДата)) <> ДелегированиеПрав.Действует";
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Обработано = 0;
	КоличествоЗаписейДляОбработки = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			// Объект уже заблокирован
			Продолжить;
		КонецПопытки;
		
		Элемент = Выборка.Ссылка.ПолучитьОбъект();
		
		// Проверка: не поменялись ли данные?
		Если Элемент.Кому <> Выборка.Кому
			ИЛИ Элемент.ОтКого <> Выборка.ОтКого
			ИЛИ Элемент.Действует <> Выборка.Действует
			ИЛИ Элемент.ДатаНачалаДействия <> Выборка.ДатаНачалаДействия
			ИЛИ Элемент.ДатаОкончанияДействия <> Выборка.ДатаОкончанияДействия Тогда
			
			РазблокироватьДанныеДляРедактирования(Элемент.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Элемент.Записать();
		РазблокироватьДанныеДляРедактирования(Элемент.Ссылка);
		
		Обработано = Обработано + 1;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Делегирование прав'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		,
	 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершена обработка правил делегирования прав. Обработано записей: %1.'"),
			Обработано
		));
		
	ОбновитьДелегированныеОбъектыДоступа();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает массив структур с описанием поставляемых областей делегирования
Функция ОписанияНачальногоЗаполненияОбластейДелегирования() Экспорт
	
	ОписанияОбластейДелегирования = Новый Массив;
	
	// Клиентская база
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ИмяПредопределенного, Состав", "", "", "", Новый Массив);
	ОписаниеОбластиДелегирования.Идентификатор = "65a19e5a-fd0a-4a24-93de-64cd98f60e8b";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Клиентская база'");
	ОписаниеОбластиДелегирования.ИмяПредопределенного = "КлиентскаяБаза";
	ОписаниеОбластиДелегирования.Состав.Добавить("Справочник.Партнеры");
	ОписаниеОбластиДелегирования.Состав.Добавить("Справочник.КонтактныеЛицаПартнеров");
	ОписаниеОбластиДелегирования.Состав.Добавить("Справочник.вогТорговыеТочки");
	ОписаниеОбластиДелегирования.Состав.Добавить("Справочник.вогЮридическиеЛица");
	ОписанияОбластейДелегирования.Добавить(ОписаниеОбластиДелегирования);
	
	// Документы
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ИмяПредопределенного, Состав", "", "", "", Новый Массив);
	ОписаниеОбластиДелегирования.Идентификатор = "df8dda2c-a4d3-4b2d-823f-74df41598a4f";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Анкеты'");
	ОписаниеОбластиДелегирования.ИмяПредопределенного = "Анкеты";
	ОписаниеОбластиДелегирования.Состав.Добавить("Документ.вогАнкета");
	ОписанияОбластейДелегирования.Добавить(ОписаниеОбластиДелегирования);
	
    // Процессы и задачи
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ИмяПредопределенного, Состав", "", "", "", Новый Массив);
	ОписаниеОбластиДелегирования.Идентификатор = "59817e28-8acd-4f96-967f-4dc29cf7b94c";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Процессы и задачи'");
	ОписаниеОбластиДелегирования.ИмяПредопределенного = "ПроцессыИЗадачи";
	ОписаниеОбластиДелегирования.Состав.Добавить("БизнесПроцесс.CRM_БизнесПроцесс");
	ОписаниеОбластиДелегирования.Состав.Добавить("БизнесПроцесс.Задание");
	ОписаниеОбластиДелегирования.Состав.Добавить("Задача.ЗадачаИсполнителя");
	ОписанияОбластейДелегирования.Добавить(ОписаниеОбластиДелегирования);
	
	// Почта
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ИмяПредопределенного, Состав", "", "", "", Новый Массив);
	ОписаниеОбластиДелегирования.Идентификатор = "b0b32fc2-a0f8-4124-82f9-71e56b035570";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Почта'");
	ОписаниеОбластиДелегирования.ИмяПредопределенного = "Почта";
	ОписаниеОбластиДелегирования.Состав.Добавить("Документ.ЭлектронноеПисьмоВходящее");
	ОписаниеОбластиДелегирования.Состав.Добавить("Документ.ЭлектронноеПисьмоИсходящее");
	ОписаниеОбластиДелегирования.Состав.Добавить("Справочник.УчетныеЗаписиЭлектроннойПочты");
	ОписаниеОбластиДелегирования.Состав.Добавить("Справочник.ПапкиЭлектронныхПисем");
	ОписаниеОбластиДелегирования.Состав.Добавить("Справочник.ШаблоныСообщений");
	ОписанияОбластейДелегирования.Добавить(ОписаниеОбластиДелегирования);
	
	// Мероприятия
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ИмяПредопределенного, Состав", "", "", "", Новый Массив);
	ОписаниеОбластиДелегирования.Идентификатор = "51c24c1c-4a25-4c32-9100-a6482eb3b00e";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Мероприятия'");
	ОписаниеОбластиДелегирования.ИмяПредопределенного = "Мероприятия";
	ОписаниеОбластиДелегирования.Состав.Добавить("Документ.CRM_Мероприятие");
	ОписаниеОбластиДелегирования.Состав.Добавить("Справочник.CRM_МероприятиеПрисоединенныеФайлы");
	ОписанияОбластейДелегирования.Добавить(ОписаниеОбластиДелегирования);
	
	Возврат ОписанияОбластейДелегирования;
	
КонецФункции	

// Возвращает область делегирования по уникальному идентификатору
Функция ПолучитьОбластьДелегированияПоИдентификатору(Идентификатор) Экспорт 
	
	Ссылка = Справочники.вогОбластиДелегированияПрав.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.вогОбластиДелегированияПрав КАК ОбластиДелегированияПрав
	|ГДЕ
	|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда 
		Возврат Ссылка;
	КонецЕсли;	
	
	Возврат Справочники.вогОбластиДелегированияПрав.ПустаяСсылка();
	
КонецФункции

// Возвращает массив пользователей, роли которых делегированы текущему пользователю
// Возвращает список делегирующих пользователей свои полномочия
// переданному в качестве параметра пользователю.
//
// Параметры:
//  ИмяОбластиДелегирования - Строка
//  ДобавитьТекущегоПользователя - Булево - Добавить в возвращаемый массив текущего пользователя
//  ТекущийПользователь - СправочникСсылка.Пользователи
//
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.Пользователи
//
Функция ПолучитьМассивПользователейДелегата(ИмяОбластиДелегирования,
										ДобавитьТекущегоПользователя = Ложь,
										Знач ТекущийПользователь = Неопределено) Экспорт
	
	МассивПользователей = Новый Массив;
	Если Не ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогИсполнителиРолейИДелегаты.РольПользователь КАК РольПользователь
		|ИЗ
		|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|ГДЕ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		// ++ VOG Солодов В.В. 16.12.2019 
		|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)";
		// До изменения
		//|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = &ИмяОбластиДелегирования";
		// -- VOG Солодов В.В. 16.12.2019
	
	Запрос.УстановитьПараметр("ТекущийПользователь", 		ТекущийПользователь);
	Запрос.УстановитьПараметр("ИмяОбластиДелегирования", 	ИмяОбластиДелегирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивПользователей.Добавить(ВыборкаДетальныеЗаписи.РольПользователь);
	КонецЦикла;
	
	Если ДобавитьТекущегоПользователя Тогда
		МассивПользователей.Добавить(ТекущийПользователь);
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив делегатов, которым делегированы роли текущего пользователя
Функция ПолучитьМассивДелегатовПользователя(ИмяОбластиДелегирования, ТекущийИсполнитель, ТолькоЗапись) Экспорт
	
	МассивДелегатов = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ИсполнительДелегат
		|ИЗ
		|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|ГДЕ
		|	вогИсполнителиРолейИДелегаты.РольПользователь = &ТекущийПользователь
		|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = &ИмяОбластиДелегирования
		|	%ТекстУсловия%
		// ++ VOG Солодов В.В. 23.12.2020 DEV-44
		|	
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ИсполнительДелегат
		|ИЗ
		|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|ГДЕ
		|	вогИсполнителиРолейИДелегаты.РольПользователь = &ТекущийПользователь
		|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = """"
		|	%ТекстУсловия%";
		// -- VOG Солодов В.В. 23.12.2020 DEV-44
	
	Запрос.УстановитьПараметр("ТекущийПользователь", 		ТекущийИсполнитель);
	Запрос.УстановитьПараметр("ИмяОбластиДелегирования", 	ИмяОбластиДелегирования);
	
	Если ТолькоЗапись Тогда
		ТекстЗамены = "И вогИсполнителиРолейИДелегаты.Запись = ИСТИНА";
	Иначе
		ТекстЗамены = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ТекстУсловия%", ТекстЗамены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивДелегатов.Добавить(ВыборкаДетальныеЗаписи.ИсполнительДелегат);
	КонецЦикла;
	
	Возврат МассивДелегатов;
	
КонецФункции

//Функция ПолучитьСписокПодчиненныхСотрудниковДелегата(Делегат, ИмяОбластиДелегирования, ТолькоЗапись = Ложь) Экспорт //Павелко, CRM-69, 18.12.2019
Функция ПолучитьСписокПодчиненныхСотрудниковДелегата(Делегат, ИмяОбластиДелегирования, ТолькоЗапись = Ложь, СтрокаПоиска = Неопределено) Экспорт //VOG Ульянов И.В. 15.01.2020 CRM-121
	
	СписокПодчиненных = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогИсполнителиРолейИДелегаты.ПодчиненныйСотрудник КАК ПодчиненныйСотрудник
		|ИЗ
		|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|ГДЕ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &Делегат
		|	И вогИсполнителиРолейИДелегаты.ПодчиненныйСотрудник <> &ПустойПользователь
		|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)
		|	%ТекстУсловия%
		|СГРУППИРОВАТЬ ПО
		|	вогИсполнителиРолейИДелегаты.ПодчиненныйСотрудник";
	
	Запрос.УстановитьПараметр("Делегат", 					Делегат);
	Запрос.УстановитьПараметр("ИмяОбластиДелегирования", 	ИмяОбластиДелегирования);
	Запрос.УстановитьПараметр("ПустойПользователь", 		Справочники.Пользователи.ПустаяСсылка());
	
	Если ТолькоЗапись Тогда
		ТекстЗамены = "И вогИсполнителиРолейИДелегаты.Запись = ИСТИНА";
	Иначе
		ТекстЗамены = "";
	КонецЕсли;
	
	//++ VOG Ульянов И.В. 15.01.2020 CRM-121
	Если СтрокаПоиска <> Неопределено И СтрокаПоиска <> "" тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска+"%");
		ТекстЗамены = ТекстЗамены + "И вогИсполнителиРолейИДелегаты.ПодчиненныйСотрудник.Наименование ПОДОБНО &СтрокаПоиска"
	КонецЕсли;	
	//-- VOG Ульянов И.В. 15.01.2020 CRM-121	
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ТекстУсловия%", ТекстЗамены);
	
	СписокПодчиненных.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПодчиненныйСотрудник"));
	
	Возврат СписокПодчиненных;
	
КонецФункции	

Процедура ДополнитьСписокОтветственныхДелегатами(СписокПользователей, ИмяОбластиДелегирования, ТекущийИсполнитель) Экспорт
	
	ИсходныйМассивПользователей = СписокПользователей.ВыгрузитьЗначения();
	МассивДелегатов 			= ПолучитьМассивДелегатовПользователя(ИмяОбластиДелегирования, ТекущийИсполнитель, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсходныйМассивПользователей, МассивДелегатов, Истина);
	СписокПользователей.ЗагрузитьЗначения(ИсходныйМассивПользователей);
	
КонецПроцедуры

Процедура ОбновитьДелегированныеОбъектыДоступа(Параметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	СхемаКомпоновкиДанных = РегистрыСведений.вогДелегированныеОбъектыДоступа.ПолучитьМакет("МакетПолученияДанных");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		Настройки,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаОбъектов = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	НаборЗаписей = РегистрыСведений.вогДелегированныеОбъектыДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ТаблицаОбъектов);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти