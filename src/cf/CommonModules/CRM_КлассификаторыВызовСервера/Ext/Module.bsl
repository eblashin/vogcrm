
#Область ПрограммныйИнтерфейс

Процедура ФормаОбъектаПриЧтенииНаСервере(Форма, ОбъектСсылка, Знач ОбластьДобавления = Неопределено, МассивДоступныхКлассификаторов = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы") Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	//Проверка доступа к данным
	Если Не вогУправлениеОпросамиПовтИспСеанс.ПользовательИмеетПраваЧитатьКлассификатор() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОбластьДобавления = Неопределено Тогда
		ОбластьДобавления = Форма.Элементы.Найти("CRM_Классификаторы");
		Если ОбластьДобавления = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определена область для размещения данных классификаторов. '"));
			Возврат;		
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектСсылка);
	ТаблицаКлассификаторов = ТаблицаСоставаКлассификаторовОбъекта(ОбъектСсылка, ИмяТаблицы,МассивДоступныхКлассификаторов);
	Если ТаблицаКлассификаторов.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;	
	
	//Формирование вспомагательных данных
	Если Не вогУправлениеОпросамиПовтИспСеанс.ПользовательИмеетПравоСохранятьЗначенияКлассификаторов() Тогда
		ОбластьДобавления.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ИмяОписанияКлассификаторов = "CRM_ТаблицаКлассификаторов";
	ОтображенияКлассификаторов = Перечисления.CRM_ВидыОтображенияКлассификаторов;
	
	ПовторнаяИнициализация = РеквизитФормыСуществует(Форма, ИмяОписанияКлассификаторов);
	Если ПовторнаяИнициализация Тогда
		Форма.CRM_ТаблицаКлассификаторов.Очистить();
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		Для каждого СтрокаОписания Из Форма.CRM_ТаблицаКлассификаторов_Вспомогательная Цикл
			Элемент = Форма.Элементы.Найти(СтрокаОписания.ИмяЭлемента);		
			Если Элемент <> Неопределено Тогда
				Форма.Элементы.Удалить(Элемент);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОписания.ПутьКДанным) Тогда
				МассивУдаляемыхРеквизитов.Добавить(СтрокаОписания.ПутьКДанным);	
			КонецЕсли;
			
		КонецЦикла;
		
		//Удалим реквизиты
		Если МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);	
		КонецЕсли;
		
		Форма.CRM_ТаблицаКлассификаторов_Вспомогательная.Очистить();
		
	Иначе
		СформироватьГруппыКлассификаторов(Форма, ОбластьДобавления, ИмяТаблицы);
		СформироватьТаблицыКлассификаторов(Форма, ИмяОписанияКлассификаторов);	
		
	КонецЕсли;
	
	//Формирование элементов управления
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКлассификаторов", ТаблицаКлассификаторов);
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКлассификаторов.Классификатор КАК Классификатор,
		//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:27:14 ID
		|	ТаблицаКлассификаторов.ОсобоеРазмещение КАК ОсобоеРазмещение,
		|	ТаблицаКлассификаторов.РазмещениеИмяГруппы КАК РазмещениеИмяГруппы,
		|	ТаблицаКлассификаторов.РазмещениеФорма КАК РазмещениеФорма,
		|	ТаблицаКлассификаторов.РазмещениеВыводитьЗаголовок КАК РазмещениеВыводитьЗаголовок,
		//}Администратор 10.07.2018 15:27:14
		|	ТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	ТаблицаКлассификаторов.Аналитика КАК Аналитика
		|ПОМЕСТИТЬ втТаблицаКлассификаторов
		|ИЗ
		|	&ТаблицаКлассификаторов КАК ТаблицаКлассификаторов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Классификатор,
		|	Аналитика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
		|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
		|ПОМЕСТИТЬ втТекущиеЗначенияКлассификаторов
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &ОбъектСсылка
		|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец, CRM_ОбъектыЗначенийКлассификаторов.Аналитика) В
		|			(ВЫБРАТЬ
		|				втТаблицаКлассификаторов.Классификатор,
		|				втТаблицаКлассификаторов.Аналитика
		|			ИЗ
		|				втТаблицаКлассификаторов КАК втТаблицаКлассификаторов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеКлассификатора,
		|	Аналитика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
		//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:34:25 ID
		|	втТаблицаКлассификаторов.ОсобоеРазмещение КАК ОсобоеРазмещение,
		|	втТаблицаКлассификаторов.РазмещениеИмяГруппы КАК РазмещениеИмяГруппы,
		|	втТаблицаКлассификаторов.РазмещениеФорма КАК РазмещениеФорма,
		|	втТаблицаКлассификаторов.РазмещениеВыводитьЗаголовок КАК РазмещениеВыводитьЗаголовок,
		//}Администратор 10.07.2018 15:34:25
		|	втТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	втТаблицаКлассификаторов.Аналитика КАК Аналитика,
		|	CRM_ЗначенияКлассификаторов.Владелец.ВидОтображения КАК ВидОтображения,
		|	CRM_ЗначенияКлассификаторов.Владелец.ХранитьИсториюИзменения КАК ХранитьИсториюИзменения,
		|	CRM_ЗначенияКлассификаторов.Ответственный КАК Ответственный,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит.ТипЗначения КАК ТипЗначения
		|ПОМЕСТИТЬ втВсеЗначенияКлассификаторов
		|ИЗ
		|	втТаблицаКлассификаторов КАК втТаблицаКлассификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|		ПО втТаблицаКлассификаторов.Классификатор = CRM_ЗначенияКлассификаторов.Владелец
		|ГДЕ
		|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Классификатор
		// ++ Харченко Д.И. №  - 27.09.2018 / 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вогАнкетаДополнительныеРеквизитыРеспондента.Свойство КАК Реквизит,
		|	МАКСИМУМ(вогАнкетаДополнительныеРеквизитыРеспондента.Значение) КАК Значение
		|ПОМЕСТИТЬ ТаблицаДопРеквизитов
		|ИЗ
		|	Справочник.вогРаспределительныеЦентры.ДополнительныеРеквизиты КАК вогАнкетаДополнительныеРеквизитыРеспондента
		|ГДЕ
		|	вогАнкетаДополнительныеРеквизитыРеспондента.Ссылка = &ОбъектСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	вогАнкетаДополнительныеРеквизитыРеспондента.Свойство

		// -- Харченко Д.И. №  - 27.09.2018
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсеЗначенияКлассификаторов.Классификатор КАК Классификатор,
		|	втВсеЗначенияКлассификаторов.Классификатор.Представление,
		|	втВсеЗначенияКлассификаторов.Значение,
		|	втВсеЗначенияКлассификаторов.Значение.Представление,
		//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:34:25 ID
		|	втВсеЗначенияКлассификаторов.ОсобоеРазмещение КАК ОсобоеРазмещение,
		|	втВсеЗначенияКлассификаторов.РазмещениеИмяГруппы КАК РазмещениеИмяГруппы,
		|	втВсеЗначенияКлассификаторов.РазмещениеФорма КАК РазмещениеФорма,
		|	втВсеЗначенияКлассификаторов.РазмещениеВыводитьЗаголовок КАК РазмещениеВыводитьЗаголовок,
		//}Администратор 10.07.2018 15:34:25
		|	втВсеЗначенияКлассификаторов.ИспользуемаяАналитика,
		|	втВсеЗначенияКлассификаторов.Аналитика,
		|	втВсеЗначенияКлассификаторов.ВидОтображения КАК ВидОтображения,
		|	втВсеЗначенияКлассификаторов.Классификатор.СпособФормирования КАК СпособФормирования,
		|	втВсеЗначенияКлассификаторов.ДополнительныйРеквизит,
		|	втВсеЗначенияКлассификаторов.ТипЗначения,
		|	втВсеЗначенияКлассификаторов.ХранитьИсториюИзменения,
		|	втВсеЗначенияКлассификаторов.Ответственный,
		|	ВЫБОР
		|		КОГДА втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Включен,
		|	ЕСТЬNULL(втТекущиеЗначенияКлассификаторов.ЗначениеРеквизита, НЕОПРЕДЕЛЕНО) КАК ЗначениеРеквизита,
		|	ВЫБОР
		|		КОГДА втВсеЗначенияКлассификаторов.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
		|			ТОГДА ЕСТЬNULL(ТаблицаДопРеквизитов.Значение, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ЗначениеДополнительногоРеквизита
		
		|ИЗ
		|	втВсеЗначенияКлассификаторов КАК втВсеЗначенияКлассификаторов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗначенияКлассификаторов КАК втТекущиеЗначенияКлассификаторов
		|		ПО втВсеЗначенияКлассификаторов.Значение = втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора
		|			И втВсеЗначенияКлассификаторов.Аналитика = втТекущиеЗначенияКлассификаторов.Аналитика
		// ++ Харченко Д.И. №  - 27.09.2018 / 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДопРеквизитов КАК ТаблицаДопРеквизитов
		|		ПО втВсеЗначенияКлассификаторов.ДополнительныйРеквизит = ТаблицаДопРеквизитов.Реквизит
		// -- Харченко Д.И. №  - 27.09.2018
		|
		|УПОРЯДОЧИТЬ ПО
		|	втВсеЗначенияКлассификаторов.Классификатор.РеквизитДопУпорядочивания,
		|	втВсеЗначенияКлассификаторов.Значение.РеквизитДопУпорядочивания
		|ИТОГИ
		//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:40:59 ID
		|	МАКСИМУМ(ОсобоеРазмещение),
		|	МАКСИМУМ(РазмещениеИмяГруппы),
		|	МАКСИМУМ(РазмещениеВыводитьЗаголовок),
		|	МАКСИМУМ(РазмещениеФорма)
		//}Администратор 10.07.2018 15:40:59
		|ПО
		|	ВидОтображения,
		|	Классификатор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВидОтображения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидОтображения.Следующий() Цикл
		
		//Общим списком (элемент)
		Если ВыборкаВидОтображения.ВидОтображения = ОтображенияКлассификаторов.ОбщимСписком Тогда
			СформироватьОбщийСписокКлассификаторов(Форма);
			
		КонецЕсли;
		
		ВыборкаКлассификатор = ВыборкаВидОтображения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКлассификатор.Следующий() Цикл
			
			//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:41:40 ID
			Если  
				// Проверка особого размещения на основной форме
				(ВыборкаКлассификатор.ОсобоеРазмещение
				И ВыборкаКлассификатор.РазмещениеФорма <> ФормаРазмещения().ОсновнаяФорма
				И СтрЗаканчиваетсяНа(Форма.ИмяФормы, ОбъектСсылка.Метаданные().ОсновнаяФормаОбъекта.Имя))
				
				ИЛИ 
				// Проверка особого размещения на дополнительной форме
				(ВыборкаКлассификатор.ОсобоеРазмещение
				И ВыборкаКлассификатор.РазмещениеФорма <> ФормаРазмещения().ДополнительнаяФорма
				И СтрЗаканчиваетсяНа(Форма.ИмяФормы, "КлассификаторыДополнительнаяФорма"))
				
				ИЛИ
				// Проверка запрета размещения на форме
				(ВыборкаКлассификатор.ОсобоеРазмещение
				И ВыборкаКлассификатор.РазмещениеФорма = ФормаРазмещения().НеРазмещать) Тогда
				
				Продолжить
			КонецЕсли; 

			ПараметрыРазмещенияНаФорме = Новый Структура("ОсобоеРазмещение,РазмещениеИмяГруппы,РазмещениеФорма,РазмещениеВыводитьЗаголовок");
			ЗаполнитьЗначенияСвойств(ПараметрыРазмещенияНаФорме, ВыборкаКлассификатор);
			//}Администратор 10.07.2018 15:41:40
			
			//Отдельным списком (классификатор)
			Если ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.ОтдельнымСписком Тогда
				СформироватьОтдельныйСписокКлассификатора(Форма, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление, ПараметрыРазмещенияНаФорме);	
				
			//Одиночное значение (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.ОдиночноеЗначение Тогда
				СформироватьОдиночноеЗначениеКлассификатора(Форма, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление, ПараметрыРазмещенияНаФорме);		
				
			//Вхождение (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.Вхождение Тогда
				СформироватьВхождениеКлассификатора(Форма, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление, ПараметрыРазмещенияНаФорме);		
				
			//Тег (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.Тег Тогда
				СформироватьВводТегаКлассификатора(Форма, ВыборкаКлассификатор.СпособФормирования, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление, ПараметрыРазмещенияНаФорме);
	
			//Общим списком (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.ОбщимСписком Тогда
				СтрокаОбщегоСписка = ДобавитьВОбщийСписокКлассификатора_Классификатор(Форма, ВыборкаКлассификатор.Классификатор);	
				
			//Дополнительный реквизит (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
				СформироватьДополнительныеРеквизитыКлассификатора(Форма, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление, ПараметрыРазмещенияНаФорме);
				
			КонецЕсли;
			
			ВыборкаЗаписи = ВыборкаКлассификатор.Выбрать();
			Пока ВыборкаЗаписи.Следующий() Цикл

				//Отдельным списком (значение)
				Если ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.ОтдельнымСписком Тогда
					ДобавитьВОтдельныйСписокКлассификатора(Форма, ВыборкаЗаписи);		
					
				//Одиночное значение (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.ОдиночноеЗначение Тогда
					ДобавитьОдиночноеЗначениеКлассификатора(Форма, ВыборкаЗаписи);		
					
				//Вхождение (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.Вхождение Тогда
					ДобавитьВхождениеКлассификатора(Форма, ВыборкаЗаписи);		
					
				//Тег (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.Тег Тогда
					ДобавитьЗначениеТегаКлассификатора(Форма, ВыборкаЗаписи);		
					
				//Общим списком (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.ОбщимСписком Тогда
					ДобавитьВОбщийСписокКлассификатора_Значение(Форма, СтрокаОбщегоСписка, ВыборкаЗаписи);		
					
				//Дополнительный реквизит (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
					СформироватьЗначениеДополнительногоРеквизитаКлассификатора(Форма, ВыборкаЗаписи);		
					
				КонецЕсли;
				
				НоваяСтрока = Форма.CRM_ТаблицаКлассификаторов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписи);
				
				НоваяСтрока.КлючСтроки 		   = "Значение" + ИдентификаторЭлемента(ВыборкаЗаписи.Значение);
				НоваяСтрока.КлючКлассификатора = "CRM_Классификатор" + ИдентификаторЭлемента(ВыборкаЗаписи.Классификатор);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//Тег (элементы)
	СформироватьТегиКлассификаторов(Форма);
	
КонецПроцедуры

Процедура ФормаОбъектаПослеЗаписиНаСервере(Форма, Объект) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы") Тогда
		Возврат;	
	КонецЕсли;
		
	//Возврат для новых элементов
	Если Объект.ДополнительныеСвойства.Свойство("ЭтоНовый")
	  И Объект.ДополнительныеСвойства.ЭтоНовый = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//Возврат при отстутствии реквизита таблицы классификаторов
	ЕстьРеквизитФормы = РеквизитФормыСуществует(Форма, "CRM_ТаблицаКлассификаторов");
	Если Не ЕстьРеквизитФормы Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Модифицированность Тогда
		Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов) Тогда
			//Никаких ошибок не выдаем. т.к. элемент формы в таком случае должен быть доступен только на просмотр.
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов");
		ЭлементБлокировки.УстановитьЗначение("Объект", Объект.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Для каждого СтрокаКлассификатора Из Форма.CRM_ТаблицаКлассификаторов Цикл
			НаборЗаписей = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
			НаборЗаписей.Отбор.Аналитика.Установить(СтрокаКлассификатора.Аналитика);
			НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(СтрокаКлассификатора.Значение);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
	
			Если СтрокаКлассификатора.Включен Тогда
				ИзменитьКлассификатор(НаборЗаписей,
					Объект.Ссылка, СтрокаКлассификатора);	
				
			КонецЕсли;
			
			Попытка
				НаборЗаписей.Записать();	
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				Прервать;
				
			КонецПопытки;				
			
		КонецЦикла;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьКлассификатор(НаборЗаписей, ОбъектСсылка, СтрокаКлассификатора,ОбъектРегистратор = Неопределено) Экспорт
			
	Запись = НаборЗаписей.Добавить();
	
	Запись.Объект  				   = ОбъектСсылка;
	Запись.Аналитика  			   = СтрокаКлассификатора.Аналитика;
	Запись.ЗначениеКлассификатора  = СтрокаКлассификатора.Значение;
	Запись.ЗначениеРеквизита	   = СтрокаКлассификатора.ЗначениеРеквизита;
	
	Запись.ДатаВключения           = ТекущаяДата();
	Запись.ХранитьИсториюИзменения = СтрокаКлассификатора.ХранитьИсториюИзменения;
	
	Если ОбъектРегистратор<>Неопределено тогда
		Запись.ОбъектРегистратор 	= ОбъектРегистратор;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьКлассификатор()

Функция ТаблицаСоставаКлассификаторовОбъекта(ОбъектСсылка, ИмяТаблицы = Неопределено,МассивДоступныхКлассификаторов = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектСсылка);
	КонецЕсли;	

	//Определение состава классификторов объекта
	МассивСтрокКлассификаторовДляУдаления = Новый Массив;
		
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаКлассификаторов = ТаблицаКлассификаторов(ИмяТаблицы,МассивДоступныхКлассификаторов);
	Для каждого СтрокаКлассификатора Из ТаблицаКлассификаторов Цикл
		//Формирование таблицы объекта		
		НастройкиКомпоновкиДанных = СтрокаКлассификатора.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если НЕ НастройкиКомпоновкиДанных = Неопределено И НастройкиКомпоновкиДанных.Отбор.Элементы.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор, "Объект", ОбъектСсылка);
			
			ИспользуетсяОтборПоКлассификатору = Ложь;
			
			ПараметрыДанных = Новый Соответствие;
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиКомпоновкиДанных.Отбор, "ЗначениеКлассификатора");
				Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
					Если ЭлементОтбора.Использование Тогда  
						ИспользуетсяОтборПоКлассификатору = Истина;
					КонецЕсли;
					Прервать;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ИспользуетсяОтборПоКлассификатору Тогда
				ПараметрыДанных.Вставить("ИспользуетсяОтборПоКлассификатору", Истина);
			КонецЕсли;
			
			ТаблицаОбъекта = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(
				СформироватьТекстЗапросаПринадлежностиКлассификатора(СтрокаКлассификатора.Классификатор, СтрокаКлассификатора.ТипЗначения), 
				?(НастройкиКомпоновкиДанных <> Неопределено, НастройкиКомпоновкиДанных.Отбор, Неопределено), ПараметрыДанных
			);
				
			Если ТаблицаОбъекта.Количество() = 0 Тогда
				МассивСтрокКлассификаторовДляУдаления.Добавить(СтрокаКлассификатора);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаКлассификатора.Аналитика = ПолучитьЗначениеИспользуемойАналитикиКлассификатора(СтрокаКлассификатора.Классификатор);
		
	КонецЦикла;
	
	Для каждого СтрокаКлассификаторовДляУдаления Из МассивСтрокКлассификаторовДляУдаления Цикл
		ТаблицаКлассификаторов.Удалить(СтрокаКлассификаторовДляУдаления);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаКлассификаторов;
	
КонецФункции // ТаблицаСоставаКлассификаторовОбъекта()

Функция ТаблицаКлассификаторов(ИмяТаблицы,МассивДоступныхКлассификаторов = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_КлассификаторыПринадлежность.Ссылка КАК Классификатор,
		|	CRM_КлассификаторыПринадлежность.Ссылка.Представление КАК КлассификаторПредставление,
		|	CRM_КлассификаторыПринадлежность.Ссылка.СпособФормирования КАК СпособФормирования,
		|	CRM_КлассификаторыПринадлежность.Ссылка.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	CRM_КлассификаторыПринадлежность.Ссылка.ТипЗначения КАК ТипЗначения,
		//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:15:50 ID
		|	CRM_КлассификаторыПринадлежность.Ссылка.ОсобоеРазмещение КАК ОсобоеРазмещение,
		|	CRM_КлассификаторыПринадлежность.Ссылка.РазмещениеИмяГруппы КАК РазмещениеИмяГруппы,
		|	CRM_КлассификаторыПринадлежность.Ссылка.РазмещениеФорма КАК РазмещениеФорма,
		|	CRM_КлассификаторыПринадлежность.Ссылка.РазмещениеВыводитьЗаголовок КАК РазмещениеВыводитьЗаголовок,
		//}Администратор 10.07.2018 15:15:50
		|	CRM_КлассификаторыПринадлежность.Ссылка.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных
		|ИЗ
		|	ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
		|ГДЕ
		|	CRM_КлассификаторыПринадлежность.ИмяТаблицы = &ИмяТаблицы
		|	И НЕ CRM_КлассификаторыПринадлежность.Ссылка.ПометкаУдаления
		|	И ИСТИНА
		//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:15:50 ID
		|";
		//}Администратор 10.07.2018 15:15:50
		
		// + Тищенко В.В.
		Если МассивДоступныхКлассификаторов <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИСТИНА","CRM_КлассификаторыПринадлежность.Ссылка В (&МассивКлассификаторов)");
			Запрос.УстановитьПараметр("МассивКлассификаторов",МассивДоступныхКлассификаторов);
		КонецЕсли; 
		// - Тищенко В.В.
	
	ТаблицаКлассификаторов = Запрос.Выполнить().Выгрузить();                    
	ТаблицаКлассификаторов.Колонки.Добавить("Аналитика", Метаданные.ПланыВидовХарактеристик.CRM_АналитикаКлассификаторов.Тип);
	
	Возврат ТаблицаКлассификаторов;
	
КонецФункции // ТаблицаКлассификаторов()

#Область ФормированиеРеквизитовИЭлементовФормы

Процедура СформироватьГруппыКлассификаторов(Форма, ОбластьДобавления, ИмяТаблицы = Неопределено) Экспорт
	
	ОбщаяПанельФормы = СоздатьНайтиОбычнуюГруппу(Форма, 
		"CRM_ГруппаКлассификаторы_Общая",
		ОбластьДобавления,
		ГруппировкаОбщейГруппыКлассификаторов(ИмяТаблицы));
		
	ОдиночноеЗначение_ВхождениеПанельФормы = СоздатьНайтиОбычнуюГруппу(Форма, 
		"CRM_ГруппаКлассификаторы_ОдиночноеЗначение_Вхождение",
		ОбщаяПанельФормы);
		
	ОбщимСпискомПанельФормы = СоздатьНайтиОбычнуюГруппу(Форма, 
		"CRM_ГруппаКлассификаторы_ОбщимСписком",
		ОбщаяПанельФормы);
		
	ОтдельнымСпискомПанельФормы = СоздатьНайтиОбычнуюГруппу(Форма, 
		"CRM_ГруппаКлассификаторы_ОтдельнымСписком",
		ОбщаяПанельФормы);
				
	ТегиПанельФормы = СоздатьНайтиОбычнуюГруппу(Форма, 
		"CRM_ГруппаКлассификаторы_Теги",
		ОбластьДобавления,
		ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ТегиПанельФормы.ЦветФона = ЦветаСтиля.CRM_ФонОблакаТегов;	
		
КонецПроцедуры

Процедура СформироватьТаблицыКлассификаторов(Форма, ИмяОписания) Экспорт

	МассивДобавляемыхРеквизитов = Новый Массив;                                              
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Классификатор"     		 , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_Классификаторы"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КлассификаторПредставление", Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение"     		 	 , Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначениеПредставление"     , Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Аналитика"     			 , Метаданные.ПланыВидовХарактеристик.CRM_АналитикаКлассификаторов.Тип, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИспользуемаяАналитика"     , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_АналитикаКлассификаторов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидОтображения"   	 	 , Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ВидыОтображенияКлассификаторов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СпособФормирования"		 , Новый ОписаниеТипов("ПеречислениеСсылка.СпособыФормированияСегментов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменения"   , Новый ОписаниеТипов("Булево"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Ответственный"     		 , Новый ОписаниеТипов("СправочникСсылка.Пользователи"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДополнительныйРеквизит"    , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_ДополнительныеРеквизитыКлассификаторов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначениеРеквизита"         , Метаданные.ПланыВидовХарактеристик.CRM_ДополнительныеРеквизитыКлассификаторов.Тип, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Включен"     		 		 , Новый ОписаниеТипов("Булево"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КлючСтроки"   	 		 , Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КлючКлассификатора"   	 , Новый ОписаниеТипов("Строка"), ИмяОписания));
	//*** Описание
	//*** 18 июня 2019 г.
	//*** Блашин Евгений Игоревич VOG Начало
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ОтветПолучен"     		 , Новый ОписаниеТипов("Булево"), ИмяОписания));
	//*** Блашин Евгений Игоревич VOG Окончание 
	
	//Вспомогательная ТЧ
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания + "_Вспомогательная", Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлемента", Новый ОписаниеТипов("Строка"), ИмяОписания + "_Вспомогательная"));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПутьКДанным", Новый ОписаниеТипов("Строка"), ИмяОписания + "_Вспомогательная"));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СсылкаДляВидимости", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_Классификаторы"), ИмяОписания + "_Вспомогательная"));

	// { VOG RMV 2019-02-06 изменение 2591
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06 изменение 2591
	
	//Создадим реквизиты                     
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

Процедура СформироватьОбщийСписокКлассификаторов(Форма) Экспорт

	ИмяОписания = "CRM_ОбщийСписокКлассификаторов";	

	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ДеревоЗначений")));
	
	МассивОписанияТипов = Новый Массив;
	МассивОписанияТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы"));
	МассивОписанияТипов.Добавить(Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов"));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Включен"     		     , Новый ОписаниеТипов("Булево"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Классификатор_Значение", Новый ОписаниеТипов(МассивОписанияТипов), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СпособФормирования"    , Новый ОписаниеТипов("ПеречислениеСсылка.СпособыФормированияСегментов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КлючСтроки"   	     , Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИндексКартинки"        , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0)), ИмяОписания));
	
	// { VOG RMV 2019-02-06 изменение 2591
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06 изменение 2591
	
	//Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	ЭлементТаблица = Форма.Элементы.Добавить("Дерево_" + ИмяОписания, Тип("ТаблицаФормы"), Форма.Элементы.CRM_ГруппаКлассификаторы_ОбщимСписком);
	ЭлементТаблица.ПутьКДанным 				  = ИмяОписания;
	ЭлементТаблица.КартинкаСтрок			  = БиблиотекаКартинок.КоллекцияКартинокСопоставлениеОбъектов;	
	ЭлементТаблица.ПутьКДаннымКартинкиСтроки  = ИмяОписания + ".ИндексКартинки";
	ЭлементТаблица.Шапка	   				  = Ложь;
	ЭлементТаблица.ПоложениеКоманднойПанели   = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТаблица.ПоложениеЗаголовка		  = ПоложениеЗаголовкаЭлементаФормы.Верх;	
	ЭлементТаблица.Заголовок 				  = НСтр("ru = 'Общие классификаторы'");
	ЭлементТаблица.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	ЭлементТаблица.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ЗапретМодификацииСоставаКлассификаторов");
	ЭлементТаблица.УстановитьДействие("ПередУдалением"        , "Подключаемый_ЗапретМодификацииСоставаКлассификаторов");
	
	Колонка = Форма.Элементы.Добавить(
		"Колонка_Включен_" + ИмяОписания, Тип("ПолеФормы"), ЭлементТаблица);
		
	Колонка.Вид				   = ВидПоляФормы.ПолеФлажка;
	Колонка.ПутьКДанным		   = ИмяОписания + ".Включен";
	Колонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Колонка.УстановитьДействие("ПриИзменении", "Подключаемый_ОбщимСписком_ВключенПриИзменении");
	
	Колонка = Форма.Элементы.Добавить(
		"Колонка_Классификатор_Значение" + ИмяОписания, Тип("ПолеФормы"), ЭлементТаблица);
		
	Колонка.Вид				   = ВидПоляФормы.ПолеФлажка;
	Колонка.ПутьКДанным		   = ИмяОписания + ".Классификатор_Значение";
	Колонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Колонка.ТолькоПросмотр 	   = Истина;
	
	//Условное оформление
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы["Колонка_Включен_" + ИмяОписания].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОписания + ".СпособФормирования");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	//+вог
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять);
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("ДокументСсылка.вогАнкета") Тогда
		СписокОтбора.Добавить(Перечисления.СпособыФормированияСегментов.вогАнкетирование);
	КонецЕсли;
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	//-вог
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, ЭлементТаблица.Имя, ЭлементТаблица.ПутьКДанным);
	
КонецПроцедуры

Процедура СформироватьОтдельныйСписокКлассификатора(Форма, Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме = Неопределено) Экспорт

	ИмяОписания = "CRM_Классификатор" + ИдентификаторЭлемента(Классификатор);	

	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Включен"     		 , Новый ОписаниеТипов("Булево"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение"     	 , Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СпособФормирования", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыФормированияСегментов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КлючСтроки"   	 , Новый ОписаниеТипов("Строка"), ИмяОписания));
		
	// { VOG RMV 2019-02-06 изменение 2591
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06 изменение 2591
	
	//Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	// ++ Харченко Д.И. №  - 06.09.2018 / 
	
	ГруппаРазмещенияЭлемента = Неопределено;
	
	Если ПараметрыРазмещенияНаФорме <> Неопределено Тогда
		
		Если ПараметрыРазмещенияНаФорме.Свойство("КонкретныйЭлемент") Тогда
			
			ГруппаРазмещенияЭлемента = ПараметрыРазмещенияНаФорме.КонкретныйЭлемент;	
			
			//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:55:43 ID
		ИначеЕсли ПараметрыРазмещенияНаФорме.ОсобоеРазмещение 
			И Форма.Элементы.Найти(ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы) <> Неопределено  Тогда
			
			ГруппаРазмещенияЭлемента = Форма.Элементы[ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы];
			
		КонецЕсли;
		// -- Харченко Д.И. №  - 06.09.2018
	КонецЕсли;
	
	Если ГруппаРазмещенияЭлемента = Неопределено Тогда
		ГруппаРазмещенияЭлемента = Форма.Элементы.CRM_ГруппаКлассификаторы_ОдиночноеЗначение_Вхождение;
	КонецЕсли;

	// -- Харченко Д.И. №  - 06.09.2018

	ЭлементТаблица = Форма.Элементы.Добавить("Таблица_" + ИмяОписания, Тип("ТаблицаФормы"), ГруппаРазмещенияЭлемента);
	//}Администратор 10.07.2018 15:55:43
	ЭлементТаблица.ПутьКДанным				= ИмяОписания;
	ЭлементТаблица.Шапка	   				= Ложь;
	ЭлементТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТаблица.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Верх;	
	ЭлементТаблица.Заголовок 				= КлассификаторПредставление;
	ЭлементТаблица.ВысотаВСтрокахТаблицы 	= 5;
	ЭлементТаблица.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ЗапретМодификацииСоставаКлассификаторов");
	ЭлементТаблица.УстановитьДействие("ПередУдалением"        , "Подключаемый_ЗапретМодификацииСоставаКлассификаторов");
		
	Колонка = Форма.Элементы.Добавить(
		"Колонка_Включен_" + ИмяОписания, Тип("ПолеФормы"), ЭлементТаблица);
		
	Колонка.Вид				   = ВидПоляФормы.ПолеФлажка;
	Колонка.ПутьКДанным		   = ИмяОписания + ".Включен";
	Колонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Колонка.ТолькоПросмотр 	   = Ложь;
	
	Колонка.УстановитьДействие("ПриИзменении", "Подключаемый_ОтдельнымСписком_ВключенПриИзменении");
	
	Колонка = Форма.Элементы.Добавить(
		"Колонка_Значение" + ИмяОписания, Тип("ПолеФормы"), ЭлементТаблица);
		
	Колонка.Вид				   = ВидПоляФормы.ПолеФлажка;
	Колонка.ПутьКДанным		   = ИмяОписания + ".Значение";
	Колонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Колонка.ТолькоПросмотр 	   = Истина;
	
	//Условное оформление	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы["Колонка_Включен_" + ИмяОписания].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОписания + ".СпособФормирования");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	//+вог
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять);
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("ДокументСсылка.вогАнкета") Тогда
		СписокОтбора.Добавить(Перечисления.СпособыФормированияСегментов.вогАнкетирование);
	КонецЕсли;
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	//-вог

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, ЭлементТаблица.Имя, ЭлементТаблица.ПутьКДанным, Классификатор);
	
КонецПроцедуры

Процедура СформироватьОдиночноеЗначениеКлассификатора(Форма, Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме = Неопределено) Экспорт

	ИмяОписания = "CRM_Классификатор" + ИдентификаторЭлемента(Классификатор);	
	
	МассивДобавляемыхРеквизитов = Новый Массив;	
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов")));
	
	// { VOG RMV 2019-02-06 изменение 2591
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06 изменение 2591
	
	//Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// ++ Харченко Д.И. №  - 06.09.2018 / Добавил указание конкретного элемента
	
	ГруппаРазмещенияЭлемента = Неопределено;
	
	Если ПараметрыРазмещенияНаФорме <> Неопределено Тогда
		
		Если ПараметрыРазмещенияНаФорме.Свойство("КонкретныйЭлемент") Тогда
			
			ГруппаРазмещенияЭлемента = ПараметрыРазмещенияНаФорме.КонкретныйЭлемент;	
			
			//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:55:43 ID
		ИначеЕсли ПараметрыРазмещенияНаФорме.ОсобоеРазмещение 
			И Форма.Элементы.Найти(ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы) <> Неопределено  Тогда
			
			ГруппаРазмещенияЭлемента = Форма.Элементы[ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы];
			
		КонецЕсли;
		// -- Харченко Д.И. №  - 06.09.2018
	КонецЕсли;
	
	Если ГруппаРазмещенияЭлемента = Неопределено Тогда
		ГруппаРазмещенияЭлемента = Форма.Элементы.CRM_ГруппаКлассификаторы_ОдиночноеЗначение_Вхождение;
	КонецЕсли;
	
	Группа_ДляКнопкиЗаполнить = СоздатьНайтиОбычнуюГруппу(Форма, "ГруппаЭлементаСКнопкой_"+ИмяОписания, ГруппаРазмещенияЭлемента, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	
	Элемент = Форма.Элементы.Добавить(ИмяОписания, Тип("ПолеФормы"), Группа_ДляКнопкиЗаполнить);
	//}Администратор 10.07.2018 15:55:43
		
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяОписания;
		
	Элемент.Заголовок		    = КлассификаторПредставление;
	Элемент.РежимВыбораИзСписка = Истина;
	Элемент.КнопкаОчистки       = Истина;
	Элемент.КнопкаОткрытия		= Ложь;
	Элемент.КнопкаСоздания      = Ложь;
	Элемент.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Верх;                 
	Элемент.ПодсказкаВвода		= НСтр("ru = 'Укажите значение'");
	Элемент.АвтоОтметкаНезаполненного = Классификатор.Обязательный;
	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОдиночноеЗначение_ВключенПриИзменении");
	
	//++ VOG Иванов С.А. 16.10.2019 ID заявки: 706
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода И Не ПустаяСтрока(Классификатор.ОбработчикНачалоВыбора) Тогда 
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ОдиночноеЗначение_НачалоВыбора");
	КонецЕсли;	
	//-- VOG Иванов С.А. 16.10.2019 ID заявки: 706 
	
	
	//Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.вогАнкета") Тогда
	//	// КОМАНДА ЗАПОЛНИТЬ ПО ПРЕДЫДУЩЕМУ
	//	ИмяКоманды = "Команда_ЗаполнитьПоПредыдущему_" + ИмяОписания;
	//	
	//	Форма.ДобавитьОписание(ИмяОписания, , ИмяКоманды, Классификатор, "Классификаторы");
	//	
	//	Команда = СоздатьНайтиКоманду(Форма, ИмяКоманды, "Подключаемый_Команда_ЗаполнитьПоПредыдущему_", ОтображениеКнопки.Картинка, БиблиотекаКартинок.CRM_ИсходящееСобытие, "Заполнить данные по предыдущему значению"); 
	//	
	//	ЭлементКнопка 						= Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Группа_ДляКнопкиЗаполнить);	
	//	ЭлементКнопка.ИмяКоманды 			= ИмяКоманды;
	//	ЭлементКнопка.Ширина 	  			= 3;
	//	ЭлементКнопка.МаксимальнаяШирина 	= 3;
	//КонецЕсли;

	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, Элемент.Имя, Элемент.ПутьКДанным, Классификатор);
	
КонецПроцедуры

Процедура СформироватьВхождениеКлассификатора(Форма, Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме = Неопределено) Экспорт

	ИмяОписания = "CRM_Классификатор_Вхождение" + ИдентификаторЭлемента(Классификатор);
	
	// ++ Харченко Д.И. №  - 06.09.2018 / Добавил указание конкретного элемента
	
	ГруппаРазмещенияЭлемента = Форма;
	
	ОтображениеГруппы = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ЗаголовокГруппы = КлассификаторПредставление;
	
	Если ПараметрыРазмещенияНаФорме = Неопределено Тогда
		
		ГруппаРазмещенияЭлемента = Форма.Элементы.CRM_ГруппаКлассификаторы_ОдиночноеЗначение_Вхождение;
	Иначе 
		
		Если ПараметрыРазмещенияНаФорме.Свойство("КонкретныйЭлемент") Тогда
			
			ГруппаРазмещенияЭлемента = ПараметрыРазмещенияНаФорме.КонкретныйЭлемент;	
			Если ПараметрыРазмещенияНаФорме.Свойство("РазмещениеВыводитьЗаголовок") Тогда
				ОтображениеГруппы = ?(ПараметрыРазмещенияНаФорме.РазмещениеВыводитьЗаголовок, ОтображениеОбычнойГруппы.СлабоеВыделение,ОтображениеОбычнойГруппы.Нет);
				ЗаголовокГруппы = ?(ПараметрыРазмещенияНаФорме.РазмещениеВыводитьЗаголовок, КлассификаторПредставление, "");
			КонецЕсли;
			
			
		ИначеЕсли ПараметрыРазмещенияНаФорме.ОсобоеРазмещение 
			И Форма.Элементы.Найти(ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы) <> Неопределено  Тогда
			
			ГруппаРазмещенияЭлемента = Форма.Элементы[ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы];
			ОтображениеГруппы = ?(ПараметрыРазмещенияНаФорме.РазмещениеВыводитьЗаголовок
			,ОтображениеОбычнойГруппы.СлабоеВыделение
			,ОтображениеОбычнойГруппы.Нет);
			ЗаголовокГруппы = ?(ПараметрыРазмещенияНаФорме.РазмещениеВыводитьЗаголовок
			,КлассификаторПредставление
			,"");
			
		КонецЕсли;
		// -- Харченко Д.И. №  - 06.09.2018
	КонецЕсли;
	
	Если Классификатор.ГоризонтальноеРазмещение Тогда
		Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	
	Группа = СоздатьНайтиОбычнуюГруппу(Форма, 
		ИмяОписания,
		ГруппаРазмещенияЭлемента, Группировка,
		ОтображениеГруппы,,,
		ЗаголовокГруппы);
	//}Администратор 10.07.2018 15:55:43

	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, Группа.Имя,, Классификатор);
		
КонецПроцедуры

Процедура СформироватьДополнительныеРеквизитыКлассификатора(Форма, Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме = Неопределено) Экспорт

	ИмяОписания = "CRM_Классификатор_ДополнительныеРеквизиты" + ИдентификаторЭлемента(Классификатор);
	
	
	// ++ Харченко Д.И. №  - 06.09.2018 / Добавил указание конкретного элемента
	
	ГруппаРазмещенияЭлемента = Форма;
	
	ОтображениеГруппы = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ЗаголовокГруппы = КлассификаторПредставление;
	
	Если ПараметрыРазмещенияНаФорме = Неопределено Тогда
		
		ГруппаРазмещенияЭлемента = Форма.Элементы.CRM_ГруппаКлассификаторы_ОдиночноеЗначение_Вхождение;
	Иначе 
		
		Если ПараметрыРазмещенияНаФорме.Свойство("КонкретныйЭлемент") Тогда
			
			ГруппаРазмещенияЭлемента = ПараметрыРазмещенияНаФорме.КонкретныйЭлемент;	
			Если ПараметрыРазмещенияНаФорме.Свойство("РазмещениеВыводитьЗаголовок") Тогда
				ОтображениеГруппы = ?(ПараметрыРазмещенияНаФорме.РазмещениеВыводитьЗаголовок, ОтображениеОбычнойГруппы.СлабоеВыделение,ОтображениеОбычнойГруппы.Нет);
				ЗаголовокГруппы = ?(ПараметрыРазмещенияНаФорме.РазмещениеВыводитьЗаголовок, КлассификаторПредставление, "");
			КонецЕсли;
			
			
		ИначеЕсли ПараметрыРазмещенияНаФорме.ОсобоеРазмещение 
			И Форма.Элементы.Найти(ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы) <> Неопределено  Тогда
			
			ГруппаРазмещенияЭлемента = Форма.Элементы[ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы];
			ОтображениеГруппы = ?(ПараметрыРазмещенияНаФорме.РазмещениеВыводитьЗаголовок
			,ОтображениеОбычнойГруппы.СлабоеВыделение
			,ОтображениеОбычнойГруппы.Нет);
			ЗаголовокГруппы = ?(ПараметрыРазмещенияНаФорме.РазмещениеВыводитьЗаголовок
			,КлассификаторПредставление
			,"");
			
		КонецЕсли;		
	КонецЕсли;
	
	Если Классификатор.ГоризонтальноеРазмещение Тогда
		Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;

	// -- Харченко Д.И. №  - 06.09.2018
	
	Группа = СоздатьНайтиОбычнуюГруппу(Форма, 
		ИмяОписания,
		ГруппаРазмещенияЭлемента, Группировка,
		ОтображениеГруппы,,,
		ЗаголовокГруппы);
	//}Администратор 10.07.2018 15:55:43


	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, Группа.Имя,,Классификатор);
		
КонецПроцедуры

Процедура СформироватьЗначениеДополнительногоРеквизитаКлассификатора(Форма, Выборка) Экспорт
	
	Идентификатор = ИдентификаторЭлемента(Выборка.Значение);	
	ИмяОписания = "Значение" + Идентификатор;
		МассивДобавляемыхРеквизитов = Новый Массив;	
		
	// ++ VOG Ульянов И.В. 06.11.2019 bugs 760 		
	Если Форма.Элементы.Найти(ИмяОписания) <> Неопределено тогда
		Возврат;
	КонецЕсли;
	// -- VOG Ульянов И.В. 06.11.2019 bugs 760
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Выборка.ТипЗначения));
	
	// { VOG RMV 2019-02-06 изменение 2591
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06 изменение 2591
	
	//Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЭлементРодитель = Форма.Элементы["CRM_Классификатор_ДополнительныеРеквизиты" + ИдентификаторЭлемента(Выборка.Классификатор)];
	
	Группа_ДляКнопкиЗаполнить = СоздатьНайтиОбычнуюГруппу(Форма, "ГруппаЭлементаСКнопкой_"+ИмяОписания, ЭлементРодитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);

	Элемент = Форма.Элементы.Добавить(ИмяОписания, Тип("ПолеФормы"), Группа_ДляКнопкиЗаполнить);
		
	Элемент.Заголовок = Выборка.ЗначениеПредставление;
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Выборка.ТипЗначения, Тип("Булево")) Тогда
		
		Элемент.Вид				   = ВидПоляФормы.ПолеФлажка;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		
	Иначе	
		
		Элемент.Вид 			   = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		
		Элемент.АвтоОтметкаНезаполненного = Выборка.Классификатор.Обязательный;
		
		// Поддержка строк неограниченной длины.
		Если УправлениеСвойствамиСлужебный.ИспользоватьНеограниченнуюСтроку(Выборка.ТипЗначения, 0) Тогда
			Элемент.МногострочныйРежим = Истина;
		КонецЕсли;
				
	КонецЕсли;
	
	Элемент.ПутьКДанным = ИмяОписания;
	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_Вхождение_ВключенПриИзменении");
	
	Если Выборка.ВидОтображения = ПредопределенноеЗначение("Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит") Тогда
		Если ЗначениеЗаполнено(Выборка.ЗначениеДополнительногоРеквизита) Тогда
			Форма[ИмяОписания] = Выборка.ЗначениеДополнительногоРеквизита;
//START Кайдашов 22/07/19 462			
			СтруктураПоиска = Новый Структура;
			// ++ VOG Солодов В.В. 24.07.2019 task 476
			СтруктураПоиска.Вставить("Свойство", Выборка.ДополнительныйРеквизит);
			// До изменения
			//СтруктураПоиска.Вставить("Свойство", Выборка.Значение);
			// -- VOG Солодов В.В. 24.07.2019
			ПоискСтрокРеквизита = Форма.Объект.ДополнительныеРеквизитыРеспондента.НайтиСтроки(СтруктураПоиска);
			Если ПоискСтрокРеквизита.Количество()=0 Тогда
				НоваяСтрока = Форма.Объект.ДополнительныеРеквизитыРеспондента.Добавить();
				НоваяСтрока.Свойство = Выборка.Значение.ДополнительныйРеквизит;
				НоваяСтрока.Значение = Выборка.ЗначениеДополнительногоРеквизита;
			КонецЕсли;
//END Кайдашов			
		КонецЕсли;
	Иначе 
		Форма[ИмяОписания] = Выборка.Значение;
	КонецЕсли;
	
	//Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.вогАнкета") Тогда
	//	
	//	// КОМАНДА ЗАПОЛНИТЬ ПО ПРЕДЫДУЩЕМУ
	//	ИмяКоманды = "Команда_ЗаполнитьПоПредыдущему_" + ИмяОписания;
	//	
	//	Форма.ДобавитьОписание(ИмяОписания, , ИмяКоманды, Выборка.Значение, "Классификаторы");
	//	
	//	Команда = СоздатьНайтиКоманду(Форма, ИмяКоманды, "Подключаемый_Команда_ЗаполнитьПоПредыдущему_", ОтображениеКнопки.Картинка, БиблиотекаКартинок.CRM_ИсходящееСобытие, "Заполнить данные по предыдущему значению"); 
	//	
	//	ЭлементКнопка 						= Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Группа_ДляКнопкиЗаполнить);	
	//	ЭлементКнопка.ИмяКоманды 			= ИмяКоманды;
	//	ЭлементКнопка.Ширина 	  			= 3;
	//	ЭлементКнопка.МаксимальнаяШирина 	= 3;
	//КонецЕсли;
	//
	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, Элемент.Имя, Элемент.ПутьКДанным);
	
КонецПроцедуры

Процедура СформироватьВводТегаКлассификатора(Форма, СпособФормирования, Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме = Неопределено) Экспорт

	ИдентификаторЭлемента = ИдентификаторЭлемента(Классификатор);
	
	ИмяОписания = "CRM_Классификатор_ВводТегов" + ИдентификаторЭлемента;	
	
	// ++ Харченко Д.И. №  - 06.09.2018
	
	ГруппаРазмещенияЭлемента = Неопределено;
	
	Если ПараметрыРазмещенияНаФорме <> Неопределено Тогда
		
		Если ПараметрыРазмещенияНаФорме.Свойство("КонкретныйЭлемент") Тогда
			
			ГруппаРазмещенияЭлемента = ПараметрыРазмещенияНаФорме.КонкретныйЭлемент;	
			
			//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:55:43 ID
		ИначеЕсли ПараметрыРазмещенияНаФорме.ОсобоеРазмещение 
			И Форма.Элементы.Найти(ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы) <> Неопределено  Тогда
			
			ГруппаРазмещенияЭлемента = Форма.Элементы[ПараметрыРазмещенияНаФорме.РазмещениеИмяГруппы];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ГруппаРазмещенияЭлемента = Неопределено Тогда
		ГруппаРазмещенияЭлемента = Форма.Элементы.CRM_ГруппаКлассификаторы_Теги;
	КонецЕсли;

	// -- Харченко Д.И. №  - 06.09.2018
	
	Группа = СоздатьНайтиОбычнуюГруппу(Форма, 
		"CRM_Классификатор_ГруппаТегов" + ИдентификаторЭлемента,
		ГруппаРазмещенияЭлемента,
		ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	//}Администратор 10.07.2018 15:55:43
		
	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, Группа.Имя);
	
	МассивДобавляемыхРеквизитов = Новый Массив;	
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов")));

	// { VOG RMV 2019-02-06 изменение 2591
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06 изменение 2591
	
	//Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Элемент = Форма.Элементы.Добавить(
		ИмяОписания, Тип("ПолеФормы"), Группа);
				
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяОписания;
		
	Элемент.РежимВыбораИзСписка		 = Истина;
	Элемент.КнопкаВыпадающегоСписка  = Ложь;
	Элемент.КнопкаОткрытия			 = Ложь;
	Элемент.КнопкаСоздания           = Ложь;
	Элемент.ПоложениеЗаголовка  	 = ПоложениеЗаголовкаЭлементаФормы.Нет;                 
	Элемент.ПодсказкаВвода		     = КлассификаторПредставление;
	Элемент.Ширина					 = 17;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_Классификатор_ДобавитьТег");
		
	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, Элемент.Имя, Элемент.ПутьКДанным, Классификатор);

КонецПроцедуры

Функция ДобавитьВОбщийСписокКлассификатора_Классификатор(Форма, Классификатор) Экспорт
	
	ИмяОписания = "CRM_ОбщийСписокКлассификаторов";	
	
	ЭлементыДерева = Форма[ИмяОписания].ПолучитьЭлементы();
	НоваяСтрока = ЭлементыДерева.Добавить();
	
	НоваяСтрока.Классификатор_Значение = Классификатор;
	НоваяСтрока.ИндексКартинки		   = 1;
	                                                
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДобавитьВОтдельныйСписокКлассификатора(Форма, Выборка) Экспорт
	
	ИмяОписания = "CRM_Классификатор" + ИдентификаторЭлемента(Выборка.Классификатор);	
	НоваяСтрока = Форма[ИмяОписания].Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	НоваяСтрока.КлючСтроки = "Значение" + ИдентификаторЭлемента(Выборка.Значение);	
	
КонецПроцедуры

Процедура ДобавитьВОбщийСписокКлассификатора_Значение(Форма, СтрокаОбщегоСписка, Выборка) Экспорт
	
	ЭлементыДерева = СтрокаОбщегоСписка.ПолучитьЭлементы();
	
	НоваяСтрока = ЭлементыДерева.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	
	НоваяСтрока.Классификатор_Значение = Выборка.Значение;
	НоваяСтрока.ИндексКартинки		   = 2;
	НоваяСтрока.КлючСтроки			   = "Значение" + ИдентификаторЭлемента(Выборка.Значение);	
	
КонецПроцедуры

Процедура ДобавитьОдиночноеЗначениеКлассификатора(Форма, Выборка) Экспорт
	
	ИмяОписания = "CRM_Классификатор" + ИдентификаторЭлемента(Выборка.Классификатор);	
	
	Форма.Элементы[ИмяОписания].СписокВыбора.Добавить(Выборка.Значение); 
	
	Если Выборка.Включен Тогда
		Форма[ИмяОписания] = Выборка.Значение;
		
		// ++ VOG Солодов В.В. 05.07.2019 task 437
		ПроверкаВыборки = Новый Структура;
		ПроверкаВыборки.Вставить("ОтветПолучен", Ложь);
		
		ЗаполнитьЗначенияСвойств(ПроверкаВыборки, Выборка);
		
		Если ПроверкаВыборки.ОтветПолучен Тогда
			Форма.Элементы[ИмяОписания].Родитель.ЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
		КонецЕсли;
		// До изменения
		//*** Описание
		//*** 18 июня 2019 г.
		//*** Блашин Евгений Игоревич VOG Начало
		//Если Выборка.ОтветПолучен Тогда
		//	Форма.Элементы[ИмяОписания].Родитель.ЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;	
		//КонецЕсли; 
		//*** Блашин Евгений Игоревич VOG Окончание
		// -- VOG Солодов В.В. 05.07.2019 
		
	КонецЕсли;
	
	//Условное оформление
	//+вог
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("ДокументСсылка.вогАнкета")
		И Форма.ИмяФормы <> "Справочник.вогТорговыеТочки.Форма.вогФормаБыстрогоВвода" Тогда // VOG Солодов В.В. 28.05.2019 task 240 // Добавил условие
		Форма.Элементы[ИмяОписания].ТолькоПросмотр = 
			Выборка.СпособФормирования <> Перечисления.СпособыФормированияСегментов.ФормироватьВручную;
	КонецЕсли;
	//-вог

КонецПроцедуры

Процедура ДобавитьВхождениеКлассификатора(Форма, Выборка) Экспорт
	
	ИмяОписания = "Значение" + ИдентификаторЭлемента(Выборка.Значение);	
	
	// ++ VOG Солодов В.В. 16.01.2020 
	СтруктураФормы = Новый Структура;
	СтруктураФормы.Вставить(ИмяОписания);
	
	ЗаполнитьЗначенияСвойств(СтруктураФормы, Форма);
	
	Если Не СтруктураФормы[ИмяОписания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// -- VOG Солодов В.В. 16.01.2020
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("Булево")));
	
	// { VOG RMV 2019-02-06 изменение 2591
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06 изменение 2591
	
	//Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Элемент = Форма.Элементы.Добавить(
		ИмяОписания, Тип("ПолеФормы"), Форма.Элементы["CRM_Классификатор_Вхождение" + ИдентификаторЭлемента(Выборка.Классификатор)]);
		
	Элемент.Вид			= ВидПоляФормы.ПолеФлажка;
	Элемент.ПутьКДанным = ИмяОписания;
	
	Элемент.Заголовок		   = Выборка.ЗначениеПредставление;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
	//Условное оформление
	//+вог
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("ДокументСсылка.вогАнкета") Тогда
		Элемент.ТолькоПросмотр = 
				Выборка.СпособФормирования <> Перечисления.СпособыФормированияСегментов.ФормироватьВручную;	
	КонецЕсли;
	//-вог
	
	//*** Описание
	//*** 18 июня 2019 г.
	//*** Блашин Евгений Игоревич VOG Начало
	
	Если Выборка.ОтветПолучен Тогда
		 Форма.Элементы["CRM_Классификатор_Вхождение" + ИдентификаторЭлемента(Выборка.Классификатор)].ЦветФона = ЦветаСтиля.ДобавленныйРеквизитФон;
	КонецЕсли; 	
	
	//*** Блашин Евгений Игоревич VOG Окончание 
	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_Вхождение_ВключенПриИзменении");
	
	//++ VOG Иванов С.А. 16.10.2019 ID заявки: 706
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода И Не ПустаяСтрока(Выборка.Классификатор.ОбработчикНачалоВыбора) Тогда 
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_Вхождение_НачалоВыбора");
	КонецЕсли;	
	//-- VOG Иванов С.А. 16.10.2019 ID заявки: 706
	
	Форма[ИмяОписания] = Выборка.Включен;
	
	//Вспмогательные данные
	ДобавитьВспмогательныеДанные(Форма, Элемент.Имя, Элемент.ПутьКДанным);
	
КонецПроцедуры

Процедура ДобавитьЗначениеТегаКлассификатора(Форма, Выборка) Экспорт
	
	ИмяОписания = "CRM_Классификатор_ВводТегов" + ИдентификаторЭлемента(Выборка.Классификатор);
	Если Выборка.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьВручную Тогда
		Форма.Элементы[ИмяОписания].СписокВыбора.Добавить(Выборка.Значение); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТегиКлассификаторов(Форма) Экспорт

	Если НЕ CRM_КлассификаторыВызовСервера.РеквизитФормыСуществует(Форма, "CRM_ВидыОтображенияКлассификаторов") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКлассификаторов = Форма.CRM_ТаблицаКлассификаторов.НайтиСтроки(
		Новый Структура("ВидОтображения", Перечисления.CRM_ВидыОтображенияКлассификаторов.Тег)
	);
	
	Если СтрокиКлассификаторов.Количество() > 0 Тогда
		Для каждого СтрокаКлассификатора Из СтрокиКлассификаторов Цикл
			УдалитьТегКлассификатора(Форма, СтрокаКлассификатора.КлючСтроки);
			Если Не СтрокаКлассификатора.Включен Тогда
				Продолжить;
			КонецЕсли;	
			
		    ДобавитьТегКлассификатора(Форма, СтрокаКлассификатора);
			Форма["CRM_Классификатор_ВводТегов" + ИдентификаторЭлемента(СтрокаКлассификатора.Классификатор)] = Неопределено;
							
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТегКлассификатора(Форма, Выборка)
			
	ИмяОписания = "Значение" + ИдентификаторЭлемента(Выборка.Значение);	
	
	Представление = Выборка.ЗначениеПредставление;
	Если СтрДлина(Представление) > 15 Тогда
		Представление = Лев(Представление, 15) + "...";
		Ширина	 	  = 15 - 1;
		
	Иначе
		Ширина = СтрДлина(Представление) + 1;
		
	КонецЕсли;
	
	Компоненты = Новый Массив;
	Компоненты.Добавить(Новый ФорматированнаяСтрока(Представление + " "));
	//+вог
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("ДокументСсылка.вогАнкета") Тогда
		Если Выборка.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьВручную Тогда
			Компоненты.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, ИмяОписания));
		Иначе
			Компоненты.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Лупа));
		КонецЕсли;
		
	Иначе
		Компоненты.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, ИмяОписания));
		
	КонецЕсли;
	//-вог
	Элемент = Форма.Элементы.Найти(ИмяОписания);
	Если Элемент = Неопределено Тогда
		Элемент = Форма.Элементы.Добавить(
			ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы["CRM_Классификатор_ГруппаТегов" + ИдентификаторЭлемента(Выборка.Классификатор)]);
						
	КонецЕсли;

	Элемент.Вид						= ВидДекорацииФормы.Надпись;
	Элемент.Заголовок 				= Новый ФорматированнаяСтрока(Компоненты);
	Элемент.Подсказка			    = Выборка.КлассификаторПредставление;
	Элемент.ЦветФона  			    = ЦветаСтиля.ЦветФонаФормы;
	Элемент.Рамка     			    = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	Элемент.Ширина				    = Ширина;
	
	Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ТегКлассификатора_ОбработкаСсылки");
	
КонецПроцедуры

Процедура УдалитьТегКлассификатора(Форма, ИмяОписания)

	Элемент = Форма.Элементы.Найти(ИмяОписания);
	Если Элемент <> Неопределено Тогда
		Форма.Элементы.Удалить(Элемент);	
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьНайтиОбычнуюГруппу(Форма,
						   		ИмяГруппы,
						   		Родитель = Неопределено,
						   		Группировка = Неопределено,
						   		Отображение = Неопределено, 
						   		РастягиватьПоГоризонтали = Истина,
						   		РастягиватьПоВертикали = Истина,
						   		ЗаголовокГруппы = "") Экспорт
						   	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	Если Группа = Неопределено Тогда
		Группа   		   		  		= Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Форма, Родитель));	
		Группа.Вид		   		  		= ВидГруппыФормы.ОбычнаяГруппа;	
		Группа.Группировка 		  		= ?(Группировка = Неопределено, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, Группировка);
		Группа.Отображение 		   		= ?(Отображение = Неопределено, ОтображениеОбычнойГруппы.Нет, Отображение);
		Группа.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
		Группа.РастягиватьПоВертикали   = РастягиватьПоВертикали;   
		Группа.ОтображатьЗаголовок 		= ЗначениеЗаполнено(ЗаголовокГруппы);	
		Группа.Заголовок 				= ЗаголовокГруппы;
					
	КонецЕсли;
	
	Возврат Группа;	
	
КонецФункции // СоздатьНайтиГруппу()

Функция ИдентификаторЭлемента(Ссылка)

	Возврат СтрЗаменить(Ссылка.УникальныйИдентификатор(), "-", "_");	
	
КонецФункции // ИдентификаторЭлемента()

Процедура ДобавитьВспмогательныеДанные(Форма, ИмяЭлемента, ПутьКДанным = "", СсылкаДляВидимости=Неопределено)

	НоваяСтрока = Форма.CRM_ТаблицаКлассификаторов_Вспомогательная.Добавить();	
	НоваяСтрока.ИмяЭлемента = ИмяЭлемента;
	НоваяСтрока.ПутьКДанным = ПутьКДанным;
	НоваяСтрока.СсылкаДляВидимости = СсылкаДляВидимости;
	
КонецПроцедуры

Функция РеквизитФормыСуществует(Форма, ИмяРеквизита) Экспорт

	Результат = Ложь; 
	
	МассивРеквизитовФормы = Форма.ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
		Если РеквизитФормы.Имя = ИмяРеквизита Тогда
			Результат = Истина;
		    Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // РеквизитФормыСуществует()

Процедура ВключитьОтборПоКлассификаторуВСКД(КомпоновщикНастроек) Экспорт
	
	ПараметрИспользуетсяОтборПоКлассификатору  = CRM_КлассификаторыКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.Настройки, 
		"ИспользуетсяОтборПоКлассификатору");
	
	Если ПараметрИспользуетсяОтборПоКлассификатору = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрИспользуетсяОтборПоКлассификатору.Значение      = Ложь;
	ПараметрИспользуетсяОтборПоКлассификатору.Использование = Ложь;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиОсновнойСхемы.Отбор, "ЗначениеКлассификатора");
	
	ИспользуетсяОтборПоКлассификатору = Ложь;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда  
			ИспользуетсяОтборПоКлассификатору = Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	ПараметрИспользуетсяОтборПоКлассификатору  = CRM_КлассификаторыКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.ФиксированныеНастройки, 
		"ИспользуетсяОтборПоКлассификатору");
	
	ПараметрИспользуетсяОтборПоКлассификатору.Значение = Истина;
	ПараметрИспользуетсяОтборПоКлассификатору.Использование = ИспользуетсяОтборПоКлассификатору;
	
КонецПроцедуры

#КонецОбласти

#Область АналитикаКлассификаторов

Функция ПолучитьЗначениеИспользуемойАналитикиКлассификатора(Классификатор) Экспорт
	Возврат ПараметрыСеанса.CRM_ЗначенияАналитикКлассификаторов.Получить(Классификатор);		
КонецФункции // ПолучитьЗначениеИспользуемойАналитикиКлассификатора()

Функция ПолучитьИспользуемуюАналитикуКлассификатора(Знач Пользователь, Знач Классификатор, ИспользуемаяАналитика) Экспорт

	Перем Результат;
	
	Если Не ЗначениеЗаполнено(ИспользуемаяАналитика) Тогда
		Возврат Результат;	
		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипЗначения");
	СтруктураРеквизитов.Вставить("ВариантПолучения");
	СтруктураРеквизитов.Вставить("АлгоритмПолучения");
	
	РеквизитыИспользуемойАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИспользуемаяАналитика, СтруктураРеквизитов); 
	РеквизитыИспользуемойАналитики.Вставить("ТипЗначенияАналитики", РеквизитыИспользуемойАналитики.ТипЗначения.Типы()[0]);	
	
	Если РеквизитыИспользуемойАналитики.ВариантПолучения = Перечисления.CRM_ВариантыПолученияАналитикиКлассификатора.НастройкиПользователя Тогда
		Если РеквизитыИспользуемойАналитики.ТипЗначенияАналитики = Тип("СправочникСсылка.НаправленияДеятельности") Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "CRM_НаправлениеДеятельности");
			
		ИначеЕсли РеквизитыИспользуемойАналитики.ТипЗначенияАналитики = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Подразделение");
			
		ИначеЕсли РеквизитыИспользуемойАналитики.ТипЗначенияАналитики = Тип("СправочникСсылка.Организации") Тогда	
			Результат = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Результат = Неопределено;
			
		КонецЕсли;
		
	Иначе	
		Попытка
		    Выполнить(РеквизитыИспользуемойАналитики.АлгоритмПолучения);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для классификатора ""%1"" по используемой аналитике ""%2"" 
                      |не удалось определить значение аналитики. 
                      |Причина: %3. 
                      |Получено пустое значение аналитики. '"),
				Классификатор,
				ИспользуемаяАналитика,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	//Проверим тип значения полученной аналитики
	Если Результат <> Неопределено Тогда
		Если РеквизитыИспользуемойАналитики.ТипЗначенияАналитики <> ТипЗнч(Результат) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для классификатора ""%1"" по используемой аналитике ""%2"" 
                      |получено неверное значение аналитики. 
                      |Получен тип ""%3"", ожидаемый тип ""%4"".
                      |Получено пустое значение аналитики. '"),
				Классификатор,
				ИспользуемаяАналитика,
				ТипЗнч(Результат),
				РеквизитыИспользуемойАналитики.ТипЗначенияАналитики);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			Результат = Неопределено;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьИспользуемуюАналитикуКлассификатора()

Функция ЗначенияИспользуемыхАналитикКлассификаторов() Экспорт

	СоответствиеЗначений = Новый Соответствие;
	МассивЗначений 		 = Новый Массив;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_Классификаторы.Ссылка КАК Классификатор,
		|	CRM_Классификаторы.ИспользуемаяАналитика КАК ИспользуемаяАналитика
		|ИЗ
		|	ПланВидовХарактеристик.CRM_Классификаторы КАК CRM_Классификаторы
		|ГДЕ
		|	CRM_Классификаторы.ИспользуемаяАналитика <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_АналитикаКлассификаторов.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлассификатор = РезультатЗапроса.Выбрать();
	Пока ВыборкаКлассификатор.Следующий() Цикл
		Аналитика = ПолучитьИспользуемуюАналитикуКлассификатора(ТекущийПользователь, 
			ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.ИспользуемаяАналитика);

		СоответствиеЗначений.Вставить(ВыборкаКлассификатор.Классификатор, Аналитика);	
		Если ЗначениеЗаполнено(Аналитика) Тогда
			МассивЗначений.Добавить(Аналитика);
			
		КонецЕсли;
		
	КонецЦикла;

	//Классификаторы без учета аналитик
	МассивЗначений.Добавить(Неопределено);	
	
	Возврат Новый Структура("СоответствиеЗначений, МассивЗначений", СоответствиеЗначений, МассивЗначений);
	
КонецФункции // ЗначенияИспользуемыхАналитикКлассификаторов()

Процедура ОбновитьЗначенияИспользуемыхАналитик() Экспорт
	
	СтруктураЗначений = ЗначенияИспользуемыхАналитикКлассификаторов();
	
	ПараметрыСеанса.CRM_ЗначенияАналитикКлассификаторов		 = Новый ФиксированноеСоответствие(СтруктураЗначений.СоответствиеЗначений);
	//ПараметрыСеанса.CRM_ИспользуемаяАналитикаКлассификаторов = Новый ФиксированныйМассив(СтруктураЗначений.МассивЗначений);
	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("CRM_ЗначенияАналитикКлассификаторов"     , "CRM_КлассификаторыВызовСервера.УстановкаПараметровСеанса");
	//Обработчики.Вставить("CRM_ИспользуемаяАналитикаКлассификаторов", "CRM_КлассификаторыВызовСервера.УстановкаПараметровСеанса");
	
КонецПроцедуры

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "CRM_ЗначенияАналитикКлассификаторов"
	   И ИмяПараметра <> "CRM_ИспользуемаяАналитикаКлассификаторов" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьЗначенияИспользуемыхАналитик();
	
	УстановленныеПараметры.Добавить("CRM_ЗначенияАналитикКлассификаторов");
	//УстановленныеПараметры.Добавить("CRM_ИспользуемаяАналитикаКлассификаторов");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормИМодулейОбъектовСправочниковКлассификаторов

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	ОбъектСсылка = Объект.Ссылка;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СпособФормирования");
	СтруктураРеквизитов.Вставить("ВидОтображения");
	СтруктураРеквизитов.Вставить("Представление");
	РеквзитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец, СтруктураРеквизитов);

	Форма.СпособФормирования = РеквзитыВладельца.СпособФормирования;
	Форма.ВидОтображения	 = РеквзитыВладельца.ВидОтображения;
	
	Форма.Заголовок = РеквзитыВладельца.Представление;	
	Если Форма.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьВручную Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		СКД = Объект.Ссылка.СхемаКомпоновкиДанных.Получить();
		Настройки = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных.Получить();
		
		Если СКД <> Неопределено Тогда
			Форма.АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
		КонецЕсли;
		Если Настройки <> Неопределено Тогда
			Форма.АдресНастроекСКД = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе

		Объект.ИмяШаблонаСКД = "ОбщаяОсновнаяСхема";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.ИмяШаблонаСКД) Тогда
		МетаданныеШаблона = Метаданные.Справочники.CRM_ЗначенияКлассификаторов.Макеты.Найти(Объект.ИмяШаблонаСКД);
		Если МетаданныеШаблона = Неопределено Тогда
			Форма.ПредставлениеШаблонаСКД = НСтр("ru = 'Произвольная'");
		Иначе
			Форма.ПредставлениеШаблонаСКД = МетаданныеШаблона.Синоним;
		КонецЕсли;
		
	Иначе
		Форма.ПредставлениеШаблонаСКД = НСтр("ru = 'Произвольная'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если НЕ ПустаяСтрока(Форма.АдресСКД) Тогда 
		ТекущийОбъект.СхемаКомпоновкиДанных =
			Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресСКД));
	Иначе
		ТекущийОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);

	КонецЕсли;
		
	Если НЕ ПустаяСтрока(Форма.АдресНастроекСКД) Тогда 
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных =
			Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресНастроекСКД));
			
	Иначе
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 17:26:03 ID
Функция ФормаРазмещения()
	Возврат Новый Структура("ОсновнаяФорма,ДополнительнаяФорма,НеРазмещать",0,1,-1);		
КонецФункции
//}Администратор 10.07.2018 17:26:03

Функция СписокЭлементовСКД(ЗначениеСсылка)

	Настройки = ПолучитьНастройкиСписка(ЗначениеСсылка);
	Возврат ТаблицаСКД(Настройки.СКД, Настройки.Настройки);

КонецФункции

Функция ПолучитьНастройкиСписка(ЗначениеСсылка)
	
	РеквизитыСКДЗначения = CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(
		ЗначениеСсылка,
		"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
		
	НастройкиЗначения = РеквизитыСКДЗначения.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ПустаяСтрока(РеквизитыСКДЗначения.ИмяШаблонаСКД) Тогда
		СКД = РеквизитыСКДЗначения.СхемаКомпоновкиДанных.Получить();
	Иначе
		СКД_Макета = ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(ЗначениеСсылка, РеквизитыСКДЗначения.ИмяШаблонаСКД);
		СКД = СКД_Макета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Если  СКД.НаборыДанных.Найти("ФормированиеСостава") <> Неопределено Тогда
		Если НастройкиЗначения <> Неопределено Тогда
			НастройкиСписка = НастройкиЗначения;
			
		Иначе
			НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСостава.Настройки;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Новый Структура("СКД, Настройки", СКД, НастройкиСписка);
	
КонецФункции

Функция ТаблицаСКД(СКД, Настройки)

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СКД,Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Колонка = ТаблицаЗначений.Колонки.Найти("Объект");
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = "ЭлементСписка";
	КонецЕсли;

	Колонка = ТаблицаЗначений.Колонки.Найти("Аналитика");
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = "АналитикаЭлемента";
	КонецЕсли;
	
	Колонка = ТаблицаЗначений.Колонки.Найти("ЗначениеРеквизита");
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = "ЗначениеРеквизитаЭлемента";
	КонецЕсли;	
	
	СворачиваемыКолонки = "";
	Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если ЗначениеЗаполнено(СворачиваемыКолонки) Тогда
			СворачиваемыКолонки = СворачиваемыКолонки + ",";
		
		КонецЕсли;
		
		СворачиваемыКолонки = СворачиваемыКолонки + Колонка.Имя;
	
	КонецЦикла;
	
	ТаблицаЗначений.Свернуть(СворачиваемыКолонки);
	
	Возврат ТаблицаЗначений;

КонецФункции

Функция НайтиРегламентноеЗадание(Знач УникальныйНомерЗадания) Экспорт
	
	Если ПустаяСтрока(УникальныйНомерЗадания) Тогда
		Возврат Неопределено;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(УникальныйНомерЗадания));
	
КонецФункции

Функция СформироватьТекстЗапросаПринадлежностиКлассификатора(Классификатор, Знач ТипЗначения = Неопределено) Экспорт
	
	Если ТипЗначения = Неопределено Тогда
		ТипЗначения = Классификатор.ТипЗначения;
	КонецЕсли;
	
	Типы = ТипЗначения.Типы();
	ТекстЗапроса = "";	
		
	ШаблонТекстаЗапроса = "ВЫБРАТЬ
		 |	Ссылка КАК Объект ИЗ %%Источник%%";
		 
	КоличествоТипов  = Типы.Количество();	
	Для Инд = 1 По КоличествоТипов Цикл
		МетаданныеИсточника = Метаданные.НайтиПоТипу(Типы[Инд - 1]);
		ТекщийТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "%%Источник%%", МетаданныеИсточника.ПолноеИмя());
		
		ТекстЗапроса = ТекстЗапроса + Символы.ВК + ТекщийТекстЗапроса + 
			?(Инд = КоличествоТипов, "", " ОБЪЕДИНИТЬ ВСЕ " + Символы.ВК);	
		
	КонецЦикла;	
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
		|	ИСТИНА КАК ИспользуетсяОтборПоКлассификатору
		|ПОМЕСТИТЬ ОтборПоКлассификатору
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|ГДЕ
		|	НЕ CRM_ОбъектыЗначенийКлассификаторов.ДатаВключения ЕСТЬ NULL
		|{ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.* КАК ЗначениеКлассификатора}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	ИспользуетсяОтборПоКлассификатору
		|;
		|" + ТекстЗапроса + " 
		|{ГДЕ
		|(Ссылка В
		|		(ВЫБРАТЬ
		|			ОтборПоКлассификатору.Объект
		|		ИЗ
		|			ОтборПоКлассификатору КАК ОтборПоКлассификатору
		|		ГДЕ
		|			ОтборПоКлассификатору.ИспользуетсяОтборПоКлассификатору = &ИспользуетсяОтборПоКлассификатору))}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(
	ЗначениеСсылка,
	ИмяШаблонаСКД,
	АдресСКД,
	АдресНастроекСКД,
	УникальныйИдентификатор) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ЗначениеЗаполнено(ИмяШаблонаСКД) И ПустаяСтрока(АдресСКД) Тогда
		СхемаИНастройки = ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(ЗначениеСсылка, ИмяШаблонаСКД);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,УникальныйИдентификатор)
	Иначе
		Адреса.СхемаКомпоновкиДанных = АдресСКД;
	КонецЕсли;

	// Настройки
	Если НЕ ПустаяСтрока(АдресНастроекСКД) Тогда
		Адреса.НастройкиКомпоновкиДанных = АдресНастроекСКД;
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции 

Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Ссылка, ИмяШаблона) Экспорт

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗначенияКлассификаторов.СхемаКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	ЗначенияКлассификаторов.ХранилищеНастроекКомпоновкиДанных
	|ИЗ
	|	Справочник.CRM_ЗначенияКлассификаторов КАК ЗначенияКлассификаторов
	|ГДЕ
	|	ЗначенияКлассификаторов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяШаблона) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяШаблона;
		Если Выборка.Следующий() Тогда
			
			СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьМакет("ОбщаяОсновнаяСхема");
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = ВозвращаемоеЗначение.СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
			Иначе
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СхемаКомпоновкиДанных;
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.Описание = Метаданные.Справочники.CRM_ЗначенияКлассификаторов.Макеты.Найти(ИмяШаблона).Синоним;
		ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьМакет(ИмяШаблона);
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(ЗначениеСсылка, ИмяШаблонаСКД, АдресСКД, АдресНастроекСКД, УникальныйИдентификатор) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ИмяШаблонаСКД", ИмяШаблонаСКД);
	ВозвращаемоеЗначение.Вставить("ПредставлениеШаблонаСКД",НСтр("ru = 'Произвольный'"));
	ВозвращаемоеЗначение.Вставить("АдресСКД", "");
	ВозвращаемоеЗначение.Вставить("АдресНастроекСКД","");
	
	Если ЗначениеЗаполнено(ИмяШаблонаСКД) Тогда
		
		СхемаИНастройки = ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(ЗначениеСсылка, ИмяШаблонаСКД);
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных.
		Если ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСКД)) Тогда
			
			ВозвращаемоеЗначение.ИмяШаблонаСКД  = "";
			ВозвращаемоеЗначение.АдресСКД = АдресСКД;
			
		Иначе
			
			ВозвращаемоеЗначение.ПредставлениеШаблонаСКД = СхемаИНастройки.Описание;
			
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекСКД)) Тогда
			ВозвращаемоеЗначение.АдресНастроекСКД = АдресНастроекСКД;
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.АдресСКД = АдресСКД;
		
		Схема = ПолучитьИзВременногоХранилища(АдресСКД);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекСКД)) Тогда
			ВозвращаемоеЗначение.АдресНастроекСКД = АдресНастроекСКД;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала = Неопределено, ИмяСобытия = "", 
		Знач КомментарийСПараметрами = "", ИнформацияОбОшибке = Неопределено, 
		Параметр1 = Неопределено, 
		Параметр2 = Неопределено, 
		Параметр3 = Неопределено, 
		Параметр4 = Неопределено
	) Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	// Комментарий для журнала регистрации и пользователя.
	Если Параметр1 <> Неопределено Тогда
		КомментарийСПараметрами = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийСПараметрами, Параметр1, Параметр2, Параметр3, Параметр4
		);
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТестСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТестСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТестСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(
		ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", ". "+ ИмяСобытия), 
		УровеньЖурнала, 
		ПараметрыЖурнала.Метаданные, 
		ПараметрыЖурнала.Данные, 
		КомментарийСПараметрами
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТестСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'")
		Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеЗначенияКлассификаторов(Знач Источник) Экспорт
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Источник.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияКлассификаторов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ЗначенияКлассификаторов КАК ЗначенияКлассификаторов
	|ГДЕ
	|	ЗначенияКлассификаторов.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗначениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗначениеОбъект.Заблокировать();
		ЗначениеОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияИОчистки

Процедура ВыполнитьПериодическоеФормирование(Классификатор) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Классификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Формирование классификатора. Запуск по расписанию'");
	ПараметрыЖурнала.Метаданные    = Классификатор.Метаданные();
	ПараметрыЖурнала.Данные        = Классификатор;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, , НСтр("ru = 'Запуск'"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
		|	CRM_ЗначенияКлассификаторов.Представление КАК Представление,
		|	CRM_ЗначенияКлассификаторов.ПометкаУдаления КАК ПометкаУдаления,
		|	CRM_ЗначенияКлассификаторов.Владелец.ХранитьИсториюИзменения КАК ХранитьИсториюИзменения,
		|	CRM_ЗначенияКлассификаторов.Владелец.СпособФормирования КАК СпособФормирования
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &Классификатор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлассификаторы = РезультатЗапроса.Выбрать();
	Пока ВыборкаКлассификаторы.Следующий() Цикл
		Если ВыборкаКлассификаторы.ПометкаУдаления Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, , ,
				НСтр("ru = 'Завершение'"), НСтр("ru = 'Значение классификатора помечено на удаление'")
			);
			Продолжить;
		ИначеЕсли ВыборкаКлассификаторы.СпособФормирования <> Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, , ,
				НСтр("ru = 'Завершение'"), НСтр("ru = 'Значение классификатора не периодически обновляемое'")
			);
			Продолжить;
		КонецЕсли;
		
		Попытка
			Сформировать(ВыборкаКлассификаторы.Значение, ВыборкаКлассификаторы.ХранитьИсториюИзменения);
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, , ,
				НСтр("ru = 'Ошибка формирования состава значения классификатора %1'"), ИнформацияОбОшибке(), 
				"'"+ ВыборкаКлассификаторы.Представление +"'"
			);
		КонецПопытки;
		
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, ,НСтр("ru = 'Завершение'"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Сформировать(ЗначениеСсылка, ХранитьИсториюИзменения = Ложь) Экспорт

	ПР = ПривилегированныйРежим();
	Если НЕ ПР Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	СписокЭлементов = СписокЭлементовСКД(ЗначениеСсылка);
	
	ЕстьАналитика =
		СписокЭлементов.Колонки.Найти("АналитикаЭлемента") <> Неопределено;
	ЕстьЗначениеРеквизита =
		СписокЭлементов.Колонки.Найти("ЗначениеРеквизитаЭлемента") <> Неопределено;
		
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(ЗначениеСсылка);
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если НЕ ЗначениеЗаполнено(Элемент.ЭлементСписка) Тогда
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей.Добавить();
		Запись.ЗначениеКлассификатора = ЗначениеСсылка;
		Запись.Объект = Элемент.ЭлементСписка;
		Если ЕстьАналитика Тогда
			Запись.Аналитика = Элемент.АналитикаЭлемента;
		КонецЕсли;
		
		Если ЕстьЗначениеРеквизита Тогда
			Запись.ЗначениеРеквизита = Элемент.ЗначениеРеквизитаЭлемента;
		КонецЕсли;
		
		Запись.ДатаВключения = ТекущаяДата();
		Запись.ХранитьИсториюИзменения = ХранитьИсториюИзменения;
		
	КонецЦикла;

	НаборЗаписей.Записать();

	Если НЕ ПР Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура Очистить(ЗначениеСсылка) Экспорт

	НаборЗначения = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
	НаборЗначения.Отбор.ЗначениеКлассификатора.Установить(ЗначениеСсылка);
	
	НаборЗначения.Записать();

КонецПроцедуры

#КонецОбласти

#Область СинхронизацияКлассификаторов

Функция ПолучитьОписаниеТаблицИсточника(ПринадлежностьКлассификаторов = Неопределено) Экспорт

	Если ПринадлежностьКлассификаторов = Неопределено Тогда
		ПринадлежностьКлассификаторов = CRM_КлассификаторыПовтИсп.ПринадлежностьКлассификаторов();	
	
	КонецЕсли;	
	
	СообщениеОбОшибке = "";
	Прокси = CRM_КлассификаторыПовтИсп.ПолучитьПрокси(СообщениеОбОшибке);
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			Возврат Неопределено;
		
		КонецЕсли;	
	
	КонецЕсли;
	
	ОписаниеТаблицИсточника = Прокси.GetTablesDescription(
		вогОбщегоНазначения.СериализоватьОбъект(ПринадлежностьКлассификаторов));

	Возврат вогОбщегоНазначения.ДесериализоватьОбъект(ОписаниеТаблицИсточника);	
		
КонецФункции // ПолучитьОписанияТаблицИсточника()

Функция СформироватьЗначениеКлассификатора(Классификатор, ЗначенияЗаполнения, МенеджерЗначения = Неопределено) Экспорт

	Если МенеджерЗначения = Неопределено Тогда
		МенеджерЗначения = Справочники.CRM_ЗначенияКлассификаторов;	
	КонецЕсли;
	
	Если ЗначенияЗаполнения.Свойство("Идентификатор") Тогда
		ЗначениеСсылка = МенеджерЗначения.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначенияЗаполнения.Идентификатор));	
		Если ЗначениеСсылка.ПолучитьОбъект() = Неопределено Тогда
		 	ЗначениеСсылка = МенеджерЗначения.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ЗначенияЗаполнения.Свойство("Наименование") Тогда	
		ЗначениеСсылка = МенеджерЗначения.НайтиПоНаименованию(ЗначенияЗаполнения.Наименование, Истина,, Классификатор);
	Иначе	
	 	ЗначениеСсылка = МенеджерЗначения.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначенияЗаполнения.Свойство("Наименование") Тогда
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеСсылка) Тогда
		НовоеЗначение = МенеджерЗначения.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовоеЗначение, ЗначенияЗаполнения);
		
		Если Не ЗначениеЗаполнено(НовоеЗначение.Наименование) Тогда
			НовоеЗначение.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Значение классификатора ""%1""'"), 
				Классификатор); 	
		КонецЕсли;
		
		НовоеЗначение.Владелец      = Классификатор;
		НовоеЗначение.ИмяШаблонаСКД = "ОбщаяОсновнаяСхема";
		
		НовоеЗначение.УстановитьНовыйКод();
		НовоеЗначение.Записать();
		
		ЗначениеСсылка = НовоеЗначение.Ссылка;
		
	КонецЕсли;
	
	Возврат ЗначениеСсылка;	
	
КонецФункции // СформироватьЗначениеКлассификатора()

Процедура ЗаполнитьДеревоКлассификаторов(ДеревоПриемник, 
										 Знач СхемаКомпоновкиДанных = Неопределено, 
										 Знач НастройкиКомпоновкиДанных = Неопределено) Экспорт

	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.вогВыгрузкаКлассификаторов.ПолучитьМакет("СхемаПолученияКлассификаторов");
	
	КонецЕсли;										 
	
	Если НастройкиКомпоновкиДанных = Неопределено Тогда
		НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;	
	
	КонецЕсли;			
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);		
			
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ДеревоПриемник);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
		
КонецПроцедуры

Процедура ВыгрузитьКлассификаторы(ДеревоКлассификаторов, ТекстОшибки = "") Экспорт
		
	Прокси = CRM_КлассификаторыПовтИсп.ПолучитьПрокси(ТекстОшибки);
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация классификаторов объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
				
		КонецЕсли;	
		
		Возврат;		
				
	КонецЕсли;

	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Принадлежность"            , ОбщегоНазначения.ОписаниеТипаСтрока("1024"));
	ТаблицаРезультат.Колонки.Добавить("ОбъектИдентификатор"       , ОбщегоНазначения.ОписаниеТипаСтрока("36"));
	ТаблицаРезультат.Колонки.Добавить("КлассификаторИдентификатор", ОбщегоНазначения.ОписаниеТипаСтрока("36"));
	ТаблицаРезультат.Колонки.Добавить("ЗначениеИдентификатор"     , ОбщегоНазначения.ОписаниеТипаСтрока("36"));
	ТаблицаРезультат.Колонки.Добавить("РеквизитИдентификатор"	  , Новый ОписаниеТипов("Строка"));
	ТаблицаРезультат.Колонки.Добавить("Аналитика" 				  , Новый ОписаниеТипов("Строка")); // VOG Солодов
	
	Для каждого ВыборкаОбъект Из ДеревоКлассификаторов.Строки Цикл
		МассивПринадлежность = СтрРазделить(ВыборкаОбъект.Объект.Метаданные().ПолноеИмя(), ".");
		Принадлежность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1_%2'"), 
			МассивПринадлежность[0], МассивПринадлежность[МассивПринадлежность.ВГраница()]);	
			
		ОбъектИдентификатор = XMLСтрока(ВыборкаОбъект.Объект);	
			
		Для каждого ВыборкаКлассификатор Из ВыборкаОбъект.Строки Цикл
			КлассификаторИдентификатор = XMLСтрока(ВыборкаКлассификатор.Классификатор);
			
			Для каждого ВыборкаЗаписи Из ВыборкаКлассификатор.Строки Цикл
				НоваяСтрока = ТаблицаРезультат.Добавить();
				
				НоваяСтрока.Принадлежность	    	   = Принадлежность;
				НоваяСтрока.ОбъектИдентификатор		   = ОбъектИдентификатор;
				НоваяСтрока.КлассификаторИдентификатор = КлассификаторИдентификатор;
				НоваяСтрока.ЗначениеИдентификатор 	   = XMLСтрока(ВыборкаЗаписи.ЗначениеКлассификатора);
				НоваяСтрока.РеквизитИдентификатор 	   = XMLСтрока(ВыборкаЗаписи.ЗначениеРеквизита);
				НоваяСтрока.Аналитика 	   			   = ВыборкаЗаписи.Аналитика; // VOG Солодов
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = Прокси.PutClassifiersValueTable(вогОбщегоНазначения.СериализоватьОбъект(ТаблицаРезультат));
	Если Результат Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация классификаторов объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Выгрузка классификаторов объектов выполнена успешно. '"));
			
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не удалось выгрузить классификаторы объектов. Подробности см. в журнале регистрации.'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация классификаторов объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапроситьКлассификаторыОбъектов(МассивОбъектов, ИмяМетаданныхУС, ТекстОшибки = "") Экспорт

	Прокси = CRM_КлассификаторыПовтИсп.ПолучитьПрокси(ТекстОшибки);
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация классификаторов объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
				
		КонецЕсли;	
		
		Возврат;		
				
	КонецЕсли;

	МассивИдентификаторов = Новый Массив;
	Для каждого Объект Из МассивОбъектов Цикл
		МассивИдентификаторов.Добавить(XMLСтрока(Объект));
	
	КонецЦикла;
	
	Результат = Прокси.RequestClassifiersValueTable(вогОбщегоНазначения.СериализоватьОбъект(МассивИдентификаторов), ИмяМетаданныхУС);
	Если Результат Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация классификаторов объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Выгрузка классификаторов объектов выполнена успешно. '"));
			
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не удалось выгрузить классификаторы объектов. Подробности см. в журнале регистрации.'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация классификаторов объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
			
	КонецЕсли;
	
КонецПроцедуры

#Область ИнтерфейсВыгрузки

Процедура СинхронизироватьОбъектыКлассификаторов(ОписаниеСхемыНастроек, АдресХранилища = Неопределено) Экспорт
	
	ТекстСообщения = "";
	
	Если Не ОписаниеСхемыНастроек.Свойство("СхемаКомпоновкиДанных") Тогда
		ОписаниеСхемыНастроек.Вставить("СхемаКомпоновкиДанных", Обработки.вогВыгрузкаКлассификаторов.ПолучитьМакет("СхемаПолученияКлассификаторов"));
		
	КонецЕсли;
	
	Если Не ОписаниеСхемыНастроек.Свойство("НастройкиКомпоновкиДанных") Тогда
		ОписаниеСхемыНастроек.Вставить("НастройкиКомпоновкиДанных", ОписаниеСхемыНастроек.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
	КонецЕсли;
	
	РезультатСинхронизации = Новый Структура;
	РезультатСинхронизации.Вставить("Результат"		, Истина);
	РезультатСинхронизации.Вставить("ТекстСообщения", ТекстСообщения);
	
	ДеревоКлассификаторов = Новый ДеревоЗначений;
	ЗаполнитьДеревоКлассификаторов(ДеревоКлассификаторов, ОписаниеСхемыНастроек.СхемаКомпоновкиДанных, ОписаниеСхемыНастроек.НастройкиКомпоновкиДанных);
	
	Если ДеревоКлассификаторов.Строки.Количество() > 0 Тогда
		ВыгрузитьКлассификаторы(ДеревоКлассификаторов, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			РезультатСинхронизации.Результат 	  = Ложь;
			РезультатСинхронизации.ТекстСообщения = ТекстСообщения;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(РезультатСинхронизации, АдресХранилища);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьМассивОбъектовКлассификаторов(МассивОбъектов) Экспорт
		
	СхемаКомпоновкиДанных 	  = Обработки.вогВыгрузкаКлассификаторов.ПолучитьМакет("СхемаПолученияКлассификаторов");
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор, 
		"Объект", МассивОбъектов, ВидСравненияКомпоновкиДанных.ВСписке);

	ДеревоКлассификаторов = Новый ДеревоЗначений;
	ЗаполнитьДеревоКлассификаторов(ДеревоКлассификаторов, СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	Если ДеревоКлассификаторов.Строки.Количество() > 0 Тогда
		ВыгрузитьКлассификаторы(ДеревоКлассификаторов);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//+вог
#Область КлассификаторыПереопределяемый

Функция ГруппировкаОбщейГруппыКлассификаторов(ИмяТаблицы)
	
	Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Если ИмяТаблицы <> Неопределено 
	  И вогОбщегоНазначенияКлиентСерверПовтИсп.ИспользуетсяРасширеннаяКарточка(ИмяТаблицы) Тогда
		Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	Возврат Группировка;

КонецФункции // ГруппировкаОбщейГруппыКлассификаторов()

Функция ИмяОсновногоЭлементаКлассификатора(Классификатор, ВидОтображения = Неопределено) Экспорт

	Если ВидОтображения = Неопределено Тогда
		ВидОтображения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Классификатор, "ВидОтображения");	
	КонецЕсли;
	
	ОтображенияКлассификаторов = Перечисления.CRM_ВидыОтображенияКлассификаторов;
	Если ВидОтображения = ОтображенияКлассификаторов.ОбщимСписком Тогда
		Возврат "Дерево_CRM_ОбщийСписокКлассификаторов" + ИдентификаторЭлемента(Классификатор);
		
	ИначеЕсли ВидОтображения = ОтображенияКлассификаторов.ОтдельнымСписком Тогда	
		Возврат "Таблица_CRM_Классификатор" + ИдентификаторЭлемента(Классификатор);
		
	ИначеЕсли ВидОтображения = ОтображенияКлассификаторов.ОдиночноеЗначение Тогда	
		Возврат "CRM_Классификатор" + ИдентификаторЭлемента(Классификатор);
		
	ИначеЕсли ВидОтображения = ОтображенияКлассификаторов.Вхождение Тогда	
		Возврат "CRM_Классификатор_Вхождение" + ИдентификаторЭлемента(Классификатор);
		
	ИначеЕсли ВидОтображения = ОтображенияКлассификаторов.Тег Тогда	
		Возврат "CRM_Классификатор_ВводТегов" + ИдентификаторЭлемента(Классификатор);
		
	ИначеЕсли ВидОтображения = ОтображенияКлассификаторов.ДополнительныйРеквизит Тогда	
		Возврат "CRM_Классификатор_ДополнительныеРеквизиты" + ИдентификаторЭлемента(Классификатор);
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ИмяОсновногоЭлементаКлассификатора()

//Вроде как не используется //TODO: удалить при рефакторинге
Процедура ФормаОпросаПриЧтенииНаСервере(Форма, ОбъектОпроса, РеспондентСсылка, ВариантОпроса, Знач ОбластьДобавления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы") Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	//Проверка доступа к данным
	Если Не вогУправлениеОпросамиПовтИспСеанс.ПользовательИмеетПраваЧитатьКлассификатор() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОбластьДобавления = Неопределено Тогда
		ОбластьДобавления = Форма.Элементы.Найти("CRM_Классификаторы");
		Если ОбластьДобавления = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определена область для размещения данных классификаторов. '"));
			Возврат;		
			
		КонецЕсли;

	КонецЕсли;
	
	//Определение состава классификторов объекта
	МассивСтрокКлассификаторовДляУдаления = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантОпроса", ВариантОпроса);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_Классификаторы.Ссылка КАК Классификатор,
		|	CRM_Классификаторы.СпособФормирования КАК СпособФормирования,
		|	CRM_Классификаторы.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	CRM_Классификаторы.ТипЗначения КАК ТипЗначения,
		|	CRM_Классификаторы.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных
		|ИЗ
		|	ПланВидовХарактеристик.CRM_Классификаторы КАК CRM_Классификаторы
		|ГДЕ
		|	НЕ CRM_Классификаторы.ПометкаУдаления
		|	И CRM_Классификаторы.Ссылка В
		|			(ВЫБРАТЬ
		|				НаборКлассификаторов.Классификатор
		|			ИЗ
		|				ПланВидовХарактеристик.вогВариантыОпросов.НаборКлассификаторов КАК НаборКлассификаторов
		|			ГДЕ
		|				НаборКлассификаторов.Ссылка = &ВариантОпроса)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаКлассификаторов = Запрос.Выполнить().Выгрузить();                    
	ТаблицаКлассификаторов.Колонки.Добавить("Аналитика", Метаданные.ПланыВидовХарактеристик.CRM_АналитикаКлассификаторов.Тип);
	
	Для каждого СтрокаКлассификатора Из ТаблицаКлассификаторов Цикл
		//Формирование таблицы объекта		
		НастройкиКомпоновкиДанных = СтрокаКлассификатора.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если НастройкиКомпоновкиДанных <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор, "Объект", РеспондентСсылка);
		КонецЕсли;
		
		ТаблицаОбъекта = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(
			СформироватьТекстЗапросаПринадлежностиКлассификатора(СтрокаКлассификатора.Классификатор, СтрокаКлассификатора.ТипЗначения), 
			?(НастройкиКомпоновкиДанных <> Неопределено, НастройкиКомпоновкиДанных.Отбор, Неопределено)
		);
			
		Если ТаблицаОбъекта.Количество() = 0 Тогда
			МассивСтрокКлассификаторовДляУдаления.Добавить(СтрокаКлассификатора);
			Продолжить;
		КонецЕсли;
		
		СтрокаКлассификатора.Аналитика = ПолучитьЗначениеИспользуемойАналитикиКлассификатора(СтрокаКлассификатора.Классификатор);
				
	КонецЦикла;
	
	Для каждого СтрокаКлассификаторовДляУдаления Из МассивСтрокКлассификаторовДляУдаления Цикл
		ТаблицаКлассификаторов.Удалить(СтрокаКлассификаторовДляУдаления);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаКлассификаторов.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;	
	
	//Формирование вспомагательных данных
	Если НЕ вогУправлениеОпросамиПовтИспСеанс.ПользовательИмеетПравоСохранятьЗначенияКлассификаторов() Тогда
		ОбластьДобавления.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ИмяОписанияКлассификаторов = "CRM_ТаблицаКлассификаторов";
	ОтображенияКлассификаторов = Перечисления.CRM_ВидыОтображенияКлассификаторов;
	
	ПовторнаяИнициализация = РеквизитФормыСуществует(Форма, ИмяОписанияКлассификаторов);
	Если ПовторнаяИнициализация Тогда
		Форма.CRM_ТаблицаКлассификаторов.Очистить();
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		Для каждого СтрокаОписания Из Форма.CRM_ТаблицаКлассификаторов_Вспомогательная Цикл
			Элемент = Форма.Элементы.Найти(СтрокаОписания.ИмяЭлемента);		
			Если Элемент <> Неопределено Тогда
				Форма.Элементы.Удалить(Элемент);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОписания.ПутьКДанным) Тогда
				МассивУдаляемыхРеквизитов.Добавить(СтрокаОписания.ПутьКДанным);	
			КонецЕсли;
			
		КонецЦикла;
		
		//Удалим реквизиты
		Если МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);	
		КонецЕсли;
		
		Форма.CRM_ТаблицаКлассификаторов_Вспомогательная.Очистить();
		
	Иначе
		СформироватьГруппыКлассификаторов(Форма, ОбластьДобавления);
		СформироватьТаблицыКлассификаторов(Форма, ИмяОписанияКлассификаторов);	
		
	КонецЕсли;
	
	
	//Формирование элементов управления
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКлассификаторов"		  , ТаблицаКлассификаторов);
	Запрос.УстановитьПараметр("ОбъектыЗначенийКлассификаторов", ОбъектОпроса.СоставКлассификаторов.Выгрузить());
	
	//--> VOG Бей В.В.  29.08.2018 17:21:04 ID заявки:000002174  	
	РеквизитыВариантОпроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантОпроса,"НаправлениеДеятельности,УказатьНаправлениеДеятельности");
	
	НаправленияДеятельности = Новый Массив;
	НаправленияДеятельности.Добавить(Справочники.НаправленияДеятельности.ПустаяСсылка());
	НаправленияДеятельности.Добавить(РеквизитыВариантОпроса.НаправлениеДеятельности);
	
	Запрос.УстановитьПараметр("НаправленияДеятельности",НаправленияДеятельности);
	Запрос.УстановитьПараметр("ОтборПоНаправлениюДеятельности",РеквизитыВариантОпроса.УказатьНаправлениеДеятельности);	
	//<-- VOG Бей В.В.  29.08.2018 17:21:05 ID заявки:000002174	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКлассификаторов.Классификатор КАК Классификатор,
		|	ТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	ТаблицаКлассификаторов.Аналитика КАК Аналитика
		|ПОМЕСТИТЬ втТаблицаКлассификаторов
		|ИЗ
		|	&ТаблицаКлассификаторов КАК ТаблицаКлассификаторов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Классификатор,
		|	Аналитика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
		|ПОМЕСТИТЬ втТекущиеЗначенияКлассификаторов
		|ИЗ
		|	&ОбъектыЗначенийКлассификаторов КАК ОбъектыЗначенийКлассификаторов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеКлассификатора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
		|	втТаблицаКлассификаторов.Аналитика КАК Аналитика,
		|	втТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
		|	CRM_ЗначенияКлассификаторов.Владелец.ВидОтображения КАК ВидОтображения,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит.ТипЗначения КАК ТипЗначения,
		|	CRM_ЗначенияКлассификаторов.Владелец.ХранитьИсториюИзменения КАК ХранитьИсториюИзменения,
		|	CRM_ЗначенияКлассификаторов.Ответственный КАК Ответственный
		|ПОМЕСТИТЬ втВсеЗначенияКлассификаторов
		|ИЗ
		|	втТаблицаКлассификаторов КАК втТаблицаКлассификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|		ПО втТаблицаКлассификаторов.Классификатор = CRM_ЗначенияКлассификаторов.Владелец
		|ГДЕ
		|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		//--> VOG Бей В.В.  29.08.2018 17:18:42 ID заявки:000002174
		|	И ВЫБОР КОГДА &ОтборПоНаправлениюДеятельности=ИСТИНА ТОГДА CRM_ЗначенияКлассификаторов.НаправлениеДеятельности в (&НаправленияДеятельности) ИНАЧЕ ИСТИНА КОНЕЦ
		//<-- VOG Бей В.В.  29.08.2018 17:18:43 ID заявки:000002174
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Классификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсеЗначенияКлассификаторов.Классификатор КАК Классификатор,
		|	втВсеЗначенияКлассификаторов.Классификатор.Представление,
		|	втВсеЗначенияКлассификаторов.Значение,
		|	втВсеЗначенияКлассификаторов.Значение.Представление,
		|	втВсеЗначенияКлассификаторов.Аналитика,
		|	втВсеЗначенияКлассификаторов.ИспользуемаяАналитика,
		|	втВсеЗначенияКлассификаторов.ВидОтображения КАК ВидОтображения,
		|	втВсеЗначенияКлассификаторов.Классификатор.СпособФормирования КАК СпособФормирования,
		|	втВсеЗначенияКлассификаторов.ДополнительныйРеквизит,
		|	втВсеЗначенияКлассификаторов.ТипЗначения,
		|	втВсеЗначенияКлассификаторов.ХранитьИсториюИзменения,
		|	втВсеЗначенияКлассификаторов.Ответственный,
		|	ВЫБОР
		|		КОГДА втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Включен
		|ИЗ
		|	втВсеЗначенияКлассификаторов КАК втВсеЗначенияКлассификаторов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗначенияКлассификаторов КАК втТекущиеЗначенияКлассификаторов
		|		ПО втВсеЗначенияКлассификаторов.Значение = втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора
		|
		|УПОРЯДОЧИТЬ ПО
		|	втВсеЗначенияКлассификаторов.Классификатор.РеквизитДопУпорядочивания,
		|	втВсеЗначенияКлассификаторов.Значение.РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	ВидОтображения,
		|	Классификатор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВидОтображения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидОтображения.Следующий() Цикл
		
		//Общим списком (элемент)
		Если ВыборкаВидОтображения.ВидОтображения = ОтображенияКлассификаторов.ОбщимСписком Тогда
			СформироватьОбщийСписокКлассификаторов(Форма);
			
		КонецЕсли;
		
		ВыборкаКлассификатор = ВыборкаВидОтображения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКлассификатор.Следующий() Цикл
			
			//Отдельным списком (классификатор)
			Если ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.ОтдельнымСписком Тогда
				СформироватьОтдельныйСписокКлассификатора(Форма, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление);	
				
			//Одиночное значение (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.ОдиночноеЗначение Тогда
				СформироватьОдиночноеЗначениеКлассификатора(Форма, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление);		
				
			//Вхождение (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.Вхождение Тогда
				СформироватьВхождениеКлассификатора(Форма, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление);		
				
			//Тег (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.Тег Тогда
				СформироватьВводТегаКлассификатора(Форма, ВыборкаКлассификатор.СпособФормирования, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление);
	
			//Общим списком (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.ОбщимСписком Тогда
				СтрокаОбщегоСписка = ДобавитьВОбщийСписокКлассификатора_Классификатор(Форма, ВыборкаКлассификатор.Классификатор);	
				
			//Дополнительный реквизит (классификатор)
			ИначеЕсли ВыборкаКлассификатор.ВидОтображения = ОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
				СформироватьДополнительныеРеквизитыКлассификатора(Форма, ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление);
				
			КонецЕсли;
			
			ВыборкаЗаписи = ВыборкаКлассификатор.Выбрать();
			Пока ВыборкаЗаписи.Следующий() Цикл

				//Отдельным списком (значение)
				Если ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.ОтдельнымСписком Тогда
					ДобавитьВОтдельныйСписокКлассификатора(Форма, ВыборкаЗаписи);		
					
				//Одиночное значение (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.ОдиночноеЗначение Тогда
					ДобавитьОдиночноеЗначениеКлассификатора(Форма, ВыборкаЗаписи);		
					
				//Вхождение (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.Вхождение Тогда
					ДобавитьВхождениеКлассификатора(Форма, ВыборкаЗаписи);		
					
				//Тег (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.Тег Тогда
					ДобавитьЗначениеТегаКлассификатора(Форма, ВыборкаЗаписи);		
					
				//Общим списком (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.ОбщимСписком Тогда
					ДобавитьВОбщийСписокКлассификатора_Значение(Форма, СтрокаОбщегоСписка, ВыборкаЗаписи);		
					
				//Дополнительный реквизит (значение)
				ИначеЕсли ВыборкаЗаписи.ВидОтображения = ОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
					СформироватьЗначениеДополнительногоРеквизитаКлассификатора(Форма, ВыборкаЗаписи);		
					
				КонецЕсли;
				
				НоваяСтрока = Форма.CRM_ТаблицаКлассификаторов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписи);
				
				НоваяСтрока.КлючСтроки 		   = "Значение" + ИдентификаторЭлемента(ВыборкаЗаписи.Значение);
				НоваяСтрока.КлючКлассификатора = "CRM_Классификатор" + ИдентификаторЭлемента(ВыборкаЗаписи.Классификатор);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//Тег (элементы)
	СформироватьТегиКлассификаторов(Форма);
	
КонецПроцедуры

Процедура ПослеИницализацииНабораДанныхСписка(Форма, Список, ПараметрыСписка) Экспорт

	Если ПараметрыСписка.ИмяСписка = "СписокТорговыеТочки" Тогда
		//Исключить из списка РЦ
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
			"Вид", вогОбщегоНазначенияПовтИсп.ИсключительныеВидыТорговыхТочек(), ВидСравненияКомпоновкиДанных.НеВСписке);
		
	КонецЕсли;
	
КонецПроцедуры

// ++ Харченко Д.И. №  - 05.09.2018 / Отдельная инициализация и размещение на форме

Функция ФормаОпросаАнкетыИнициализация(Форма, ОбъектОпроса, РеспондентСсылка, ВариантОпроса, ТаблицаКлассификаторов, ЗаполнятьДанными = Ложь) Экспорт
	
	ИмяОписанияКлассификаторов = "CRM_ТаблицаКлассификаторов";
	ОтображенияКлассификаторов = Перечисления.CRM_ВидыОтображенияКлассификаторов;
	
	ПовторнаяИнициализация = РеквизитФормыСуществует(Форма, ИмяОписанияКлассификаторов);
	
	Если ПовторнаяИнициализация Тогда
		
		Форма.CRM_ТаблицаКлассификаторов.Очистить();
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		Для каждого СтрокаОписания Из Форма.CRM_ТаблицаКлассификаторов_Вспомогательная Цикл
			Элемент = Форма.Элементы.Найти(СтрокаОписания.ИмяЭлемента);		
			Если Элемент <> Неопределено Тогда
				Форма.Элементы.Удалить(Элемент);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОписания.ПутьКДанным) Тогда
				МассивУдаляемыхРеквизитов.Добавить(СтрокаОписания.ПутьКДанным);	
			КонецЕсли;
			
		КонецЦикла;
		
		//Удалим реквизиты
		Если МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);	
		КонецЕсли;
		
		Форма.CRM_ТаблицаКлассификаторов_Вспомогательная.Очистить();
		
	Иначе
		
		//СформироватьГруппыКлассификаторов(Форма, ОбластьДобавления);
		СформироватьТаблицыКлассификаторов(Форма, ИмяОписанияКлассификаторов);	
		
	КонецЕсли;
	
	
	//Формирование элементов управления
	// ++ VOG Солодов В.В. 02.04.2020 CRM-521
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	
	времТаблицаКлассификаторов = ТаблицаКлассификаторов.СкопироватьКолонки();
	// ++ VOG Солодов В.В. 14.12.2020 DEV-3
	ОписаниеТипаБулево = вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаБулево();
	времТаблицаКлассификаторов.Колонки.Добавить("ОтборПоНаправлениюДеятельности", ОписаниеТипаБулево);
	времТаблицаКлассификаторов.Колонки.Добавить("ОтборПоПодразделению", ОписаниеТипаБулево);
	времТаблицаКлассификаторов.Колонки.Добавить("ОтборПоОрганизации", ОписаниеТипаБулево);
	// -- VOG Солодов В.В. 14.12.2020 DEV-3
	
	Для Каждого СтрокаКлассификатор Из ТаблицаКлассификаторов Цикл
		
		НоваяСтрока = времТаблицаКлассификаторов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКлассификатор);
		НоваяСтрока.ОтборПоНаправлениюДеятельности 	= Ложь;
		// ++ VOG Солодов В.В. 14.12.2020 DEV-3
		НоваяСтрока.ОтборПоПодразделению 			= Ложь;
		НоваяСтрока.ОтборПоОрганизации 				= Ложь;
		// -- VOG Солодов В.В. 14.12.2020 DEV-3
		
		Если ЗначениеЗаполнено(СтрокаКлассификатор.ИспользуемаяАналитика)
			И Не СтрокаКлассификатор.ИспользуемаяАналитика.ТипЗначения = Неопределено Тогда
			
			// ++ VOG Солодов В.В. 14.12.2020 DEV-3
			ОписаниеТипаАналитики = СтрокаКлассификатор.ИспользуемаяАналитика.ТипЗначения;
			
			Если ВариантОпроса.УказатьНаправлениеДеятельности
				И ЗначениеЗаполнено(ВариантОпроса.НаправлениеДеятельности) Тогда
				НоваяСтрока.ОтборПоНаправлениюДеятельности = ОписаниеТипаАналитики.СодержитТип(Тип("СправочникСсылка.НаправленияДеятельности"));
			КонецЕсли;
			
			НоваяСтрока.ОтборПоПодразделению = ОписаниеТипаАналитики.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия"));
			НоваяСтрока.ОтборПоОрганизации = ОписаниеТипаАналитики.СодержитТип(Тип("СправочникСсылка.Организации"));
			// До изменения
			//НоваяСтрока.ОтборПоНаправлениюДеятельности = 
			//	СтрокаКлассификатор.ИспользуемаяАналитика.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НаправленияДеятельности"));
			// -- VOG Солодов В.В. 14.12.2020 DEV-3
			
		КонецЕсли;
		
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКлассификаторов", 		времТаблицаКлассификаторов);
	// До изменения
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТаблицаКлассификаторов"		  , ТаблицаКлассификаторов);
	// -- VOG Солодов В.В. 02.04.2020
	Запрос.УстановитьПараметр("ОбъектыЗначенийКлассификаторов", ОбъектОпроса.СоставКлассификаторов.Выгрузить());
	
	
	РеквизитыВариантОпроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантОпроса,"НаправлениеДеятельности,УказатьНаправлениеДеятельности");
	
	// ++ Тищенко В.В. 16.01.2019
	// Отбор по направлениям деятельности
	НаправленияДеятельности = Новый Массив;
	Если ОбъектОпроса.ВариантОпроса.УказатьНаправлениеДеятельности Тогда
		НаправленияДеятельности.Добавить(ОбъектОпроса.ВариантОпроса.НаправлениеДеятельности);
		// ++ VOG Солодов В.В. 02.04.2020 CRM-521
		// До изменения
		//НаправленияДеятельности.Добавить(Справочники.НаправленияДеятельности.ПустаяСсылка());
		// -- VOG Солодов В.В. 02.04.2020
	КонецЕсли;	
	// -- Тищенко В.В.
	
	// ++ VOG Солодов В.В. 14.12.2020 DEV-3
	// Отбор по организации и подразделению
	ПодразделениеАвтора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОпроса.Автор, "Подразделение", Истина);
	ОбособленноеПодразделение = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ПодразделениеАвтора);
	Организация = Справочники.СтруктураПредприятия.ПолучитьОрганизациюПоПодразделению(ОбособленноеПодразделение);
	
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", ОбособленноеПодразделение);
	Запрос.УстановитьПараметр("Организация", Организация);
	// -- VOG Солодов В.В. 14.12.2020 DEV-3
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектОпроса.Ссылка);
	Запрос.УстановитьПараметр("НаправленияДеятельности", НаправленияДеятельности);
	Запрос.УстановитьПараметр("ОтборПоНаправлениюДеятельности", РеквизитыВариантОпроса.УказатьНаправлениеДеятельности);	
	
	Запрос.УстановитьПараметр("РеспондентСсылка", РеспондентСсылка);
	Запрос.УстановитьПараметр("ЗаполнятьДанными", ЗаполнятьДанными);
	
	// ++ VOG Ульянов И.В. 03.01.2020 CRM-161 Доработан запрос
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКлассификаторов.Классификатор КАК Классификатор,
	|	ТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
	|	ТаблицаКлассификаторов.Аналитика КАК Аналитика,
	// ++ VOG Солодов В.В. 02.04.2020 CRM-521
	|	ТаблицаКлассификаторов.ОтборПоНаправлениюДеятельности КАК ОтборПоНаправлениюДеятельности,
	// -- VOG Солодов В.В. 02.04.2020 CRM-521
	// ++ VOG Солодов В.В. 14.12.2020 DEV-3
	|	ТаблицаКлассификаторов.ОтборПоПодразделению КАК ОтборПоПодразделению,
	|	ТаблицаКлассификаторов.ОтборПоОрганизации КАК ОтборПоОрганизации
	// -- VOG Солодов В.В. 14.12.2020 DEV-3
	|ПОМЕСТИТЬ втТаблицаКлассификаторов
	|ИЗ
	|	&ТаблицаКлассификаторов КАК ТаблицаКлассификаторов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Классификатор,
	|	Аналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
	 //*** Описание
	 //*** 18 июня 2019 г.
	 //*** Блашин Евгений Игоревич VOG Начало
	|	ОбъектыЗначенийКлассификаторов.ОтветПолучен
	//*** Блашин Евгений Игоревич VOG Окончание 
	|ПОМЕСТИТЬ втТекущиеЗначенияКлассификаторов
	|ИЗ
	|	&ОбъектыЗначенийКлассификаторов КАК ОбъектыЗначенийКлассификаторов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗначениеКлассификатора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогАнкетаДополнительныеРеквизитыРеспондента.Свойство КАК Реквизит,
	|	МАКСИМУМ(вогАнкетаДополнительныеРеквизитыРеспондента.Значение) КАК Значение
	|ПОМЕСТИТЬ ТаблицаДопРеквизитов
	|ИЗ
	|	Документ.вогАнкета.ДополнительныеРеквизитыРеспондента КАК вогАнкетаДополнительныеРеквизитыРеспондента
	|ГДЕ
	|	вогАнкетаДополнительныеРеквизитыРеспондента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	вогАнкетаДополнительныеРеквизитыРеспондента.Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
	|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
	|	втТаблицаКлассификаторов.Аналитика КАК Аналитика,
	|	втТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
	|	CRM_ЗначенияКлассификаторов.Владелец.ВидОтображения КАК ВидОтображения,
	|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит КАК ДополнительныйРеквизит,
	|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит.ТипЗначения КАК ТипЗначения,
	|	CRM_ЗначенияКлассификаторов.Владелец.ХранитьИсториюИзменения КАК ХранитьИсториюИзменения,
	|	CRM_ЗначенияКлассификаторов.Ответственный КАК Ответственный,
	// ++ VOG Солодов В.В. 02.04.2020 CRM-521
	|	втТаблицаКлассификаторов.ОтборПоНаправлениюДеятельности КАК ОтборПоНаправлениюДеятельности,
	// -- VOG Солодов В.В. 02.04.2020 CRM-521
	// ++ VOG Солодов В.В. 14.12.2020 DEV-3
	|	втТаблицаКлассификаторов.ОтборПоПодразделению КАК ОтборПоПодразделению,
	|	втТаблицаКлассификаторов.ОтборПоОрганизации КАК ОтборПоОрганизации
	// -- VOG Солодов В.В. 14.12.2020 DEV-3
	|ПОМЕСТИТЬ втВсеЗначенияКлассификаторов
	|ИЗ
	|	втТаблицаКлассификаторов КАК втТаблицаКлассификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
	|		ПО втТаблицаКлассификаторов.Классификатор = CRM_ЗначенияКлассификаторов.Владелец
	|ГДЕ
	|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ОтборПоНаправлениюДеятельности = ИСТИНА
	|				ТОГДА CRM_ЗначенияКлассификаторов.НаправлениеДеятельности В (&НаправленияДеятельности)
	// ++ VOG Солодов В.В. 02.04.2020 CRM-521
	|					ИЛИ CRM_ЗначенияКлассификаторов.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	// -- VOG Солодов В.В. 02.04.2020 CRM-521
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Классификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ++ VOG Солодов В.В. 30.12.2019 
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// До изменения
	//|ВЫБРАТЬ
	// -- VOG Солодов В.В. 30.12.2019
	|	втВсеЗначенияКлассификаторов.Классификатор КАК Классификатор,
	|	втВсеЗначенияКлассификаторов.Классификатор.Представление КАК КлассификаторПредставление,
	|	втВсеЗначенияКлассификаторов.Значение КАК Значение,
	|	втВсеЗначенияКлассификаторов.Значение.Представление КАК ЗначениеПредставление,
	|	втВсеЗначенияКлассификаторов.Аналитика КАК Аналитика,
	|	втВсеЗначенияКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
	|	втВсеЗначенияКлассификаторов.ВидОтображения КАК ВидОтображения,
	|	втВсеЗначенияКлассификаторов.Классификатор.СпособФормирования КАК СпособФормирования,
	|	втВсеЗначенияКлассификаторов.ДополнительныйРеквизит КАК ДополнительныйРеквизит,
	|	втВсеЗначенияКлассификаторов.ТипЗначения КАК ТипЗначения,
	|	втВсеЗначенияКлассификаторов.ХранитьИсториюИзменения КАК ХранитьИсториюИзменения,
	|	втВсеЗначенияКлассификаторов.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	// ++ VOG Солодов В.В. 14.12.2020 DEV-3
	|		КОГДА (втВсеЗначенияКлассификаторов.ОтборПоНаправлениюДеятельности
	|		ИЛИ втВсеЗначенияКлассификаторов.ОтборПоПодразделению
	|		ИЛИ втВсеЗначенияКлассификаторов.ОтборПоОрганизации)
	|			И &Ссылка = ЗНАЧЕНИЕ(Документ.вогАнкета.ПустаяСсылка)
	|			И ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	// -- VOG Солодов В.В. 14.12.2020 DEV-3
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Включен,
	//--> VOG Солодов
	//*** Описание
	//*** 18 июня 2019 г.
	//*** Блашин Евгений Игоревич VOG Начало
	| ЕСТЬNULL(втТекущиеЗначенияКлассификаторов.ОтветПолучен,Ложь) КАК ОтветПолучен,
	//*** Блашин Евгений Игоревич VOG Окончание 
	|	ВЫБОР
	|		КОГДА втВсеЗначенияКлассификаторов.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЗаполнятьДанными = ИСТИНА
	|						И &Ссылка = ЗНАЧЕНИЕ(Документ.вогАнкета.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита, НЕОПРЕДЕЛЕНО)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаДопРеквизитов.Значение, НЕОПРЕДЕЛЕНО)
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗначениеДополнительногоРеквизита
	// До изменения
	//|	ВЫБОР
	//|		КОГДА втВсеЗначенияКлассификаторов.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
	//|			ТОГДА ЕСТЬNULL(ТаблицаДопРеквизитов.Значение, НЕОПРЕДЕЛЕНО)
	//|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|	КОНЕЦ КАК ЗначениеДополнительногоРеквизита
	//<-- VOG Солодов
	|ИЗ
	|	втВсеЗначенияКлассификаторов КАК втВсеЗначенияКлассификаторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗначенияКлассификаторов КАК втТекущиеЗначенияКлассификаторов
	|		ПО втВсеЗначенияКлассификаторов.Значение = втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДопРеквизитов КАК ТаблицаДопРеквизитов
	|		ПО втВсеЗначенияКлассификаторов.ДополнительныйРеквизит = ТаблицаДопРеквизитов.Реквизит
	//--> VOG Солодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК ОбъектыЗначенийКлассификаторов
	|		ПО втВсеЗначенияКлассификаторов.Значение = ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|			И ОбъектыЗначенийКлассификаторов.Объект = &РеспондентСсылка
	//<-- VOG Солодов
	// { VOG RMV 2019-02-07
	// Возможно, не самое лучшее решение и в будущем удастся придумать что-то получше, пока просто «в лоб» передаю в качестве параметра направление деятельности
	//Кайдашов 22-07-2019 Задача 462 
	|			И %1
	//|			И ОбъектыЗначенийКлассификаторов.Аналитика В(&НаправленияДеятельности)	
	// } VOG RMV 2019-02-07	
	|
	|УПОРЯДОЧИТЬ ПО
	|	втВсеЗначенияКлассификаторов.Классификатор.РеквизитДопУпорядочивания,
	|	втВсеЗначенияКлассификаторов.Значение.РеквизитДопУпорядочивания
	|ИТОГИ
	|	МАКСИМУМ(ВидОтображения)
	|ПО
	|	Классификатор";
	
	// ++ VOG Солодов В.В. 14.12.2020 DEV-3
	УсловиеАналитика =
	"ВЫБОР
	|	КОГДА втВсеЗначенияКлассификаторов.ОтборПоНаправлениюДеятельности
	|		ТОГДА (ОбъектыЗначенийКлассификаторов.Аналитика В (&НаправленияДеятельности))
	|	КОГДА втВсеЗначенияКлассификаторов.ОтборПоПодразделению
	|		ТОГДА (ОбъектыЗначенийКлассификаторов.Аналитика = &ОбособленноеПодразделение)
	|	КОГДА втВсеЗначенияКлассификаторов.ОтборПоОрганизации
	|		ТОГДА (ОбъектыЗначенийКлассификаторов.Аналитика = &Организация)
	|	ИНАЧЕ ИСТИНА
	|КОНЕЦ";
	// До изменения
	////START Кайдашов 22/07/19 462	
	//Если НЕ ЗначениеЗаполнено(ВариантОпроса.НаправлениеДеятельности) тогда
	//	УсловиеАналитика = "ИСТИНА";	
	//Иначе
	//	// ++ VOG Солодов В.В. 02.04.2020 CRM-521
	//	УсловиеАналитика = 
	//	"ВЫБОР
	//	|	КОГДА втВсеЗначенияКлассификаторов.ОтборПоНаправлениюДеятельности
	//	|		ТОГДА (ОбъектыЗначенийКлассификаторов.Аналитика в (&НаправленияДеятельности))
	//	|	ИНАЧЕ ОбъектыЗначенийКлассификаторов.Аналитика = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	//	|КОНЕЦ";
	//	// До изменения
	//	//УсловиеАналитика = "(ОбъектыЗначенийКлассификаторов.Аналитика в (&НаправленияДеятельности))";
	//	// -- VOG Солодов В.В. 02.04.2020
	//КонецЕсли;
	////END Кайдашов
	// -- VOG Солодов В.В. 14.12.2020 DEV-3
	Запрос.Текст = СтрШаблон(Запрос.Текст, УсловиеАналитика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлассификатор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаКлассификатор;
	
КонецФункции
	
// -- Харченко Д.И. №  - 05.09.2018

#Область ВариантыСписковКлассификаторов

Процедура ЗаполнитьИменаСписковУправленияКлассификацией(СписокПриемник, ОчиститьПриемник = Ложь) Экспорт

	Если ОчиститьПриемник Тогда
		СписокПриемник.Очистить();	
	КонецЕсли;
	
	СписокИсточник = CRM_КлассификаторыПовтИсп.СпискиУправленияКлассификацией();
	Для каждого ЭлементСписка Из СписокИсточник Цикл
		СписокПриемник.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		
	КонецЦикла;

КонецПроцедуры

Процедура ИнициализироватьВариантыСписка(Форма, ПараметрыСписка) Экспорт
	
	//Формирование элементов управления
	//Основной вариант
	Команда = СоздатьНайтиКоманду(
		Форма,
		"ОсновнойВариант" + ПараметрыСписка.ИмяСписка,
		"Подключаемый_ВариантСпискаПриИзменении",
	);
	Кнопка = СоздатьНайтиКнопку(
		Форма,
		Команда.Имя,
		Команда.Имя,
		НСтр("ru = 'Основной'"),
		ПараметрыСписка.ОбластьВарианты
	);
	
	//Пользовательские варианты 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяСписка", 	ПараметрыСписка.ИмяСписка);
	Запрос.УстановитьПараметр("Автор", 		ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыСписковУправленияКлассификацией.Ссылка КАК Ссылка,
		|	ВариантыСписковУправленияКлассификацией.Представление КАК Представление
		|ИЗ
		|	Справочник.вогВариантыСписковУправленияКлассификацией КАК ВариантыСписковУправленияКлассификацией
		|ГДЕ
		|	ВариантыСписковУправленияКлассификацией.ИмяСписка = &ИмяСписка
		|	И (ВариантыСписковУправленияКлассификацией.Автор = &Автор
		|			ИЛИ ВариантыСписковУправленияКлассификацией.ТолькоДляАвтора = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Команда = СоздатьНайтиКоманду(
			Форма,
			"ВариантСписка__" + ИдентификаторЭлемента(Выборка.Ссылка),
			"Подключаемый_ВариантСпискаПриИзменении"
		);
		
		Кнопка = СоздатьНайтиКнопку(
			Форма,
			Команда.Имя,
			Команда.Имя,
			Выборка.Представление,
			ПараметрыСписка.ОбластьВарианты
		);
		
	КонецЦикла;
	
	//Формирование набора данных списка (основной)
	Если ПараметрыСписка.Свойство("ТекущийВариантСписка") Тогда
		ИдентификаторВарианта = "ВариантСписка__" + ИдентификаторЭлемента(ПараметрыСписка.ТекущийВариантСписка);
		// ++ Тищенко В.В. 12.01.2019
		// Не надо повторно добавлять запрос с характеристиками
		ПараметрыСписка.Вставить("НеДобовлятьХарактеристики",Истина);
		// -- Тищенко В.В. 
	Иначе	
		ИдентификаторВарианта = "ОсновнойВариант" + ПараметрыСписка.ИмяСписка;	
		ПараметрыСписка.Вставить("НеДобовлятьХарактеристики",Истина);
	КонецЕсли;
	
	ИницализироватьНаборДанныхСписка(Форма, ИдентификаторВарианта, ПараметрыСписка);	
	
	//Команда "Добавить"
	ОбластьДобавления = Форма.Элементы.Найти("ГруппаВариантыСпискаДобавить__" + ПараметрыСписка.ИмяСписка);
	Если ОбластьДобавления = Неопределено Тогда
		ОбластьДобавления     = Форма.Элементы.Добавить("ГруппаВариантыСпискаДобавить__"  + ПараметрыСписка.ИмяСписка, Тип("ГруппаФормы"), ПараметрыСписка.ОбластьВарианты);	
		ОбластьДобавления.Вид = ВидГруппыФормы.ГруппаКнопок;	
	КонецЕсли;
		
	Команда = СоздатьНайтиКоманду(
		Форма,
		"Добавить" + ПараметрыСписка.ИмяСписка,
		"Подключаемый_ДобавитьВариантСписка",,
		БиблиотекаКартинок.СоздатьЭлементСписка
	);
	Кнопка = СоздатьНайтиКнопку(
		Форма,
		Команда.Имя,
		Команда.Имя,
		НСтр("ru = 'Добавить'"),
		ОбластьДобавления
	);
	
	//Команда "Изменить"
	ОбластьДобавления = Форма.Элементы.Найти("ГруппаВариантыСпискаИзменить__" + ПараметрыСписка.ИмяСписка);
	Если ОбластьДобавления = Неопределено Тогда
		ОбластьДобавления     = Форма.Элементы.Добавить("ГруппаВариантыСпискаИзменить__"  + ПараметрыСписка.ИмяСписка, Тип("ГруппаФормы"), ПараметрыСписка.ОбластьВарианты);	
		ОбластьДобавления.Вид = ВидГруппыФормы.ГруппаКнопок;	
	КонецЕсли;
		
	Команда = СоздатьНайтиКоманду(
		Форма,
		"Изменить" + ПараметрыСписка.ИмяСписка,
		"Подключаемый_ИзменитьВариантСписка",,
		БиблиотекаКартинок.ИзменитьЭлементСписка
	);
	Кнопка = СоздатьНайтиКнопку(
		Форма,
		Команда.Имя,
		Команда.Имя,
		НСтр("ru = 'Изменить'"),
		ОбластьДобавления
	);
	
	//Последний в группе
	Форма.Элементы.Переместить(ОбластьДобавления, ПараметрыСписка.ОбластьВарианты);
	
КонецПроцедуры

Процедура ИницализироватьНаборДанныхСписка(Форма, Знач ИдентификаторВарианта, ПараметрыСписка) Экспорт
	
	Если ТипЗнч(ИдентификаторВарианта) = Тип("СправочникСсылка.вогВариантыСписковУправленияКлассификацией") Тогда
		ИдентификаторВарианта = "ВариантСписка__" + ИдентификаторЭлемента(ИдентификаторВарианта);
	КонецЕсли;
	
	//Если Форма.Элементы[ИдентификаторВарианта].Пометка Тогда
	//	Возврат;	
	//КонецЕсли;
	
	Если ИдентификаторВарианта = "ОсновнойВариант" + ПараметрыСписка.ИмяСписка Тогда
		СхемаИНастройки = Справочники.вогВариантыСписковУправленияКлассификацией.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(Справочники.вогВариантыСписковУправленияКлассификацией.ПустаяСсылка(), "НаборДанных" + ПараметрыСписка.ИмяСписка);
	Иначе	
		ВариантСсылка = СсылкаВариантаСписка(ИдентификаторВарианта);
		СхемаИНастройки = Справочники.вогВариантыСписковУправленияКлассификацией.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(ВариантСсылка, ВариантСсылка.СхемаКомпоновкиДанных);
	КонецЕсли;	
	
	ТекстЗапроса = СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
	ЗаполнитьТекстЗапроса(ТекстЗапроса, ПараметрыСписка.ОсновнаяТаблица,ПараметрыСписка.НеДобовлятьХарактеристики);
	
	Список = Форма[ПараметрыСписка.ЭлементСписка.ПутьКДанным];
	
	Список.ТекстЗапроса    = ТекстЗапроса;
	Список.ОсновнаяТаблица = ПараметрыСписка.ОсновнаяТаблица;
	
	Форма.ТекущийВариантСписка[ПараметрыСписка.ИмяСписка] = ВариантСсылка;
	
	//Параметры
	Для каждого ПараметрДанных Из СхемаИНастройки.НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
		Если ПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных("Классификатор") Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, 
			Строка(ПараметрДанных.Параметр), 
			ПараметрДанных.Значение, 
			ПараметрДанных.Использование); 
	
	КонецЦикла;
	
	УстановитьПараметрыСписковПоНастройкам(Форма, Список);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Классификатор", Форма.Классификатор);
	
	//Отбор
	ГруппаОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ОтборВариантаСписка",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);	
	CRM_ОбщегоНазначенияКлиентСервер.СкопироватьОтборКомпоновкиДанных(ГруппаОтбор.Элементы, СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор.Элементы);
	
	//Быстрые отборы
	МассивБыстрыхОтборов = Новый Массив;
	МассивБыстрыхОтборов.Добавить(Новый Структура("ИмяПоля, ЗависимыйЭлемент", 
		"ПродажиСумма" , Форма.Элементы.ГруппаОтборПродажиСумма));
	МассивБыстрыхОтборов.Добавить(Новый Структура("ИмяПоля, ЗависимыйЭлемент", 
		"ДатаВключения", Форма.Элементы.ГруппаОтборДатаВключенияКлассификатора));
	Для каждого СтруктураПоля Из МассивБыстрыхОтборов Цикл
		МассивЭлементов = Новый Массив;
		
		НайтиЭлементОтбораРекурсивно(
			Список.Отбор.ДоступныеПоляОтбора.Элементы, 
			МассивЭлементов, Тип("ДоступноеПолеОтбораКомпоновкиДанных"), 
			Новый ПолеКомпоновкиДанных(СтруктураПоля.ИмяПоля));
			
		СтруктураПоля.ЗависимыйЭлемент.Видимость = МассивЭлементов.Количество() > 0;
		Если МассивЭлементов.Количество() = 0 Тогда
			МассивЭлементов = Новый Массив;
			
			НайтиЭлементОтбораРекурсивно(
				Список.Отбор.Элементы, 
				МассивЭлементов, Тип("ЭлементОтбораКомпоновкиДанных"), 
				Новый ПолеКомпоновкиДанных(СтруктураПоля.ИмяПоля));
				
			Для каждого ЭлементОтбора Из МассивЭлементов Цикл
				Список.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	//Выбранные поля
	МассивЭлементов = Новый Массив;
	Для каждого Элемент Из ПараметрыСписка.ОбластьДобавления.Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;

		Если Элемент.ПутьКДанным = ПараметрыСписка.ЭлементСписка.ПутьКДанным + ".Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭлементов.Добавить(Элемент);
		
	КонецЦикла;
	
	Для каждого Элемент Из ПараметрыСписка.ОбластьДобавления.ПодчиненныеЭлементы Цикл
		Если Элемент.ПутьКДанным = ПараметрыСписка.ЭлементСписка.ПутьКДанным + ".Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭлементов.Добавить(Элемент);
		
	КонецЦикла;
	
	Для каждого Элемент Из МассивЭлементов Цикл
		Форма.Элементы.Удалить(Элемент);	
		
	КонецЦикла;
	
	ПараметрыСписка.ОбластьДобавления.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	
	Сч = 1;
	Для каждого ВыбранноеПоле Из СхемаИНастройки.НастройкиКомпоновкиДанных.Выбор.Элементы Цикл
		Если ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка(ВыбранноеПоле.Поле) = "ЗаполненностьИнформации" Тогда
			Элемент 				   = Форма.Элементы.Вставить("Поле_" + ПараметрыСписка.ИмяСписка + Формат(Сч, "ЧГ="), Тип("ПолеФормы"), ПараметрыСписка.ОбластьДобавления.Родитель, ПараметрыСписка.ОбластьДобавления);
			Элемент.ПутьКДанным		   = ПараметрыСписка.ЭлементСписка.ПутьКДанным + "." + Строка(ВыбранноеПоле.Поле);
			Элемент.Вид 			   = ВидПоляФормы.ПолеКартинки;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
//START Кайдашов 01/07/19 439			
			Элемент.КартинкаЗначений   = БиблиотекаКартинок.вог_ПроцентЗаполнения;
//END Кайдашов			
			Элемент.Ширина 			   = 1;
			
		Иначе
			
			Если ВыбранноеПоле.Использование = Истина Тогда
				Элемент 			= Форма.Элементы.Добавить("Поле_" + ПараметрыСписка.ИмяСписка + Формат(Сч, "ЧГ="), Тип("ПолеФормы"), ПараметрыСписка.ОбластьДобавления);
				Элемент.ПутьКДанным	= ПараметрыСписка.ЭлементСписка.ПутьКДанным + "." + Строка(ВыбранноеПоле.Поле);
				Элемент.Вид 	  	= ВидПоляФормы.ПолеНадписи;
				Элемент.Заголовок 	= ВыбранноеПоле.Заголовок;
			КонецЕсли;
			
			// ++ VOG Солодов В.В. 05.08.2019 task 525
			Если ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭтоГруппа") Тогда
				Элемент.Видимость = Ложь;
				Список.УстановитьОбязательноеИспользование("ЭтоГруппа", Истина);
			КонецЕсли;
			// -- VOG Солодов В.В. 05.08.2019
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	ПараметрыСписка.ОбластьВарианты.Видимость = ПараметрыСписка.ОбластьВарианты.ПодчиненныеЭлементы.Количество() > 1;	
	Для каждого Элемент Из ПараметрыСписка.ОбластьВарианты.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент = Форма.Элементы[ИдентификаторВарианта] Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент.Пометка = Ложь;
		
	КонецЦикла;
	
	Форма.Элементы[ИдентификаторВарианта].Пометка = Истина;
	ПараметрыСписка.ОбластьВарианты.Заголовок     = Форма.Элементы[ИдентификаторВарианта].Заголовок;
	
	//Переопределение
	ПослеИницализацииНабораДанныхСписка(Форма, Список, ПараметрыСписка);
	
	// VOG Солодов В.В.
	Если СтрНайти(ИдентификаторВарианта, "ОсновнойВариант") > 0 Тогда
		ДобавитьКолонкиХарактеристик(Форма, ПараметрыСписка.ИмяСписка, ПараметрыСписка.ОсновнаяТаблица);
	КонецЕсли;
	
КонецПроцедуры

// VOG Солодов В.В.
Функция ПолучитьВариантСпискаДляИзменения(Форма, ГруппаСписка) Экспорт
	
	ИмяГруппы = "СписокГруппаВариантыСписка" + ГруппаСписка;
	
	Если Форма.Элементы.Найти(ИмяГруппы) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого КнопкаСписка Из Форма.Элементы[ИмяГруппы].ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(КнопкаСписка) = Тип("КнопкаФормы")
			И КнопкаСписка.Пометка Тогда
			
			Если КнопкаСписка.Имя = "ОсновнойВариант" + ГруппаСписка Тогда
				
				ТекстСообщения = НСтр("ru = 'Нельзя изменять вариант списка ""Основной"".'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				Возврат Неопределено;
				
			Иначе
				
				ВариантСсылка = СсылкаВариантаСписка(КнопкаСписка.Имя);
				
				Если Не Пользователи.ЭтоПолноправныйПользователь()
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантСсылка, "ТолькоДляАвтора") = Ложь Тогда
					
					ТекстСообщения = НСтр("ru = 'Нельзя изменять данный вариант списка.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Возврат Неопределено;
					
				КонецЕсли;
				
				Возврат ВариантСсылка;
				
			КонецЕсли; 
				
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции

// ++ Тищенко В.В. 12.01.2019
// Добавил параметр Не добовлять характеристики
// -- Тищенко В.В. 
Процедура ЗаполнитьТекстЗапроса(ТекстЗапроса, ИмяТаблицыСписка,НеДобовлятьХарактеристики = Неопределено)

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
		|	ИСТИНА КАК ИспользуетсяОтборПоКлассификатору,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора) КАК КоличествоЗначенийКлассификатора
		|ПОМЕСТИТЬ ОтборПоКлассификатору
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|ГДЕ
		|	НЕ CRM_ОбъектыЗначенийКлассификаторов.ДатаВключения ЕСТЬ NULL
		|{ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.* КАК ЗначениеКлассификатора,
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита.* КАК ЗначениеРеквизита}
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	ИспользуетсяОтборПоКлассификатору,
		|	КоличествоЗначенийКлассификатора
		|;
		|" + ТекстЗапроса + " 
		|{ГДЕ
		|(Ссылка В
		|		(ВЫБРАТЬ
		|			ОтборПоКлассификатору.Объект
		|		ИЗ
		|			ОтборПоКлассификатору КАК ОтборПоКлассификатору
		|		ГДЕ
		|			ОтборПоКлассификатору.ИспользуетсяОтборПоКлассификатору = &ИспользуетсяОтборПоКлассификатору
		|			И ВЫБОР
		|				КОГДА &ЛогическоеВыражение = ""ИЛИ""
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ОтборПоКлассификатору.КоличествоЗначенийКлассификатора = &КоличествоЗначенийКлассификатора
		|			КОНЕЦ))}
		// ++ Тищенко В.В. 12.01.2019
		// Повторно не добовлять характеристики
		|" +?(НеДобовлятьХарактеристики <> Неопределено И НЕ НеДобовлятьХарактеристики,ТекстЗапросаХарактеристик(ИмяТаблицыСписка),"") +";
		|";
		// -- Тищенко В.В.

КонецПроцедуры

Функция ТекстЗапросаХарактеристик(ИмяТаблицыСписка)
	
	ТекстЗапроса = 
		"{ХАРАКТЕРИСТИКИ
		|	ТИП(%%ИмяТаблицы%%)
		|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			CRM_ЗначенияКлассификаторов.Ссылка,
		//|			""_"" + CRM_ЗначенияКлассификаторов.Код + ""_"" + CRM_ЗначенияКлассификаторов.Владелец.Наименование КАК Представление, // Солодов
		|			ВЫРАЗИТЬ(CRM_ЗначенияКлассификаторов.Владелец КАК ПланВидовХарактеристик.CRM_Классификаторы).Наименование + "" "" + CRM_ЗначенияКлассификаторов.Наименование КАК Представление,
		|			(ВЫБОР
		|				КОГДА ЕСТЬNULL(CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит, ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_ДополнительныеРеквизитыКлассификаторов.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_ДополнительныеРеквизитыКлассификаторов.ПустаяСсылка)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_ДополнительныеРеквизитыКлассификаторов.РеквизитБулево)
		|				ИНАЧЕ CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит
		|			КОНЕЦ).ТипЗначения КАК ТипЗначения
		|		ИЗ
		|			Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|		ГДЕ
		|			CRM_ЗначенияКлассификаторов.Владелец В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						CRM_КлассификаторыПринадлежность.Ссылка
		|					ИЗ
		|						ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
		|					ГДЕ
		|						CRM_КлассификаторыПринадлежность.ИмяТаблицы = ""%%ИмяТаблицы%%""
		// ++ Харченко Д.И. № 000002250 - 17.09.2018 / добавил анкетирование 
		|						И CRM_КлассификаторыПринадлежность.Ссылка.СпособФормирования в ( ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьВручную), ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.вогАнкетирование)))	
		// -- Харченко Д.И. № 000002250 - 17.09.2018
		|			И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|			И НЕ ВЫРАЗИТЬ(CRM_ЗначенияКлассификаторов.Владелец КАК ПланВидовХарактеристик.CRM_Классификаторы).ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение))
		|	ПОЛЕКЛЮЧА Ссылка
		|	ПОЛЕИМЕНИ Представление
		|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|			CRM_ОбъектыЗначенийКлассификаторов.Объект,
		|			CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора,
		|			ВЫБОР
		|				КОГДА CRM_ОбъектыЗначенийКлассификаторов.ДатаВключения ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.ДополнительныйРеквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_ДополнительныеРеквизитыКлассификаторов.ПустаяСсылка)
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
		|					КОНЕЦ
		|			КОНЕЦ КАК ПолеЗначение
		|		ИЗ
		|			РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов)
		|	ПОЛЕОБЪЕКТА Объект
		|	ПОЛЕВИДА ЗначениеКлассификатора
		|	ПОЛЕЗНАЧЕНИЯ ПолеЗначение }
		// + Солодов / добавил второй запрос характеристик
		|
		|{ХАРАКТЕРИСТИКИ
		|ТИП(%%ИмяТаблицы%%)
		|ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		CRM_КлассификаторыПринадлежность.Ссылка КАК Ссылка,
		|		CRM_КлассификаторыПринадлежность.Ссылка.Наименование КАК Представление,
		|		NULL КАК ТипЗначения
		|	ИЗ
		|		ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
		|	ГДЕ
		|		CRM_КлассификаторыПринадлежность.ИмяТаблицы = ""%%ИмяТаблицы%%""
		|		И CRM_КлассификаторыПринадлежность.Ссылка.СпособФормирования В (ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьВручную), ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.вогАнкетирование))
		|		И НЕ CRM_КлассификаторыПринадлежность.Ссылка.ПометкаУдаления
		|		И CRM_КлассификаторыПринадлежность.Ссылка.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение))
		|ПОЛЕКЛЮЧА Ссылка
		|ПОЛЕИМЕНИ Представление
		|ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
		|ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
		|		CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
		|		CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец КАК ЗначениеКлассификатора,
		|		CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ПолеЗначение
		|	ИЗ
		|		РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов)
		|ПОЛЕОБЪЕКТА Объект
		|ПОЛЕВИДА ЗначениеКлассификатора
		|ПОЛЕЗНАЧЕНИЯ ПолеЗначение }";
		// - Солодов
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%%ИмяТаблицы%%", ИмяТаблицыСписка);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаХарактеристик()

Процедура НайтиЭлементОтбораРекурсивно(КоллекцияЭлементов, МассивЭлементов, Тип, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип Тогда
			Если Тип = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
				Имя = "Поле";
			Иначе	
				Имя = "ЛевоеЗначение";
			КонецЕсли;
			Если ЭлементОтбора[Имя] = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
		Иначе
			
			НайтиЭлементОтбораРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, Тип, ЗначениеПоиска);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыСписковПоНастройкам(Форма, Список)
	
	КонецПериода  = КонецДня(ТекущаяДата());
	НачалоПериода = CRM_КлассификаторыКлиентСервер.РассчитатьНачалоПериода(КонецПериода, Форма.Настройки.ИнтервалПродаж, Форма.Настройки.ПериодичностьПродаж);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НачалоПериода", НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "КонецПериода" , КонецПериода);	
	
КонецПроцедуры // УстановитьПараметрыСписковПоНастройкам()

Функция СсылкаВариантаСписка(ИмяЭлемента)
	
	МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлемента, "__");	

	Возврат Справочники.вогВариантыСписковУправленияКлассификацией.ПолучитьСсылку(
		Новый УникальныйИдентификатор(СтрЗаменить(МассивИмени[1], "_", "-"))
	);
	
КонецФункции // СсылкаВариантаСписка()

Функция СоздатьНайтиКоманду(Форма,
							ИмяКоманды, 
							Действие,
							ОтображениеКнопки = Неопределено,
							Картинка = Неопределено,
							Подсказка = Неопределено)
							
	Команда = Форма.Команды.Найти(ИмяКоманды);						
	Если Команда = Неопределено Тогда
		Команда 			= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Действие	= Действие;
		
		Если ОтображениеКнопки <> Неопределено Тогда
			Команда.Отображение	= ОтображениеКнопки;
		КонецЕсли;
		
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
		КонецЕсли;
		
		Если НЕ Подсказка = Неопределено Тогда
			Команда.Подсказка = Подсказка;
		КонецЕсли;
		
	КонецЕсли;			
	
	Возврат Команда;
	
КонецФункции // СоздатьНайтиКоманду()

Функция СоздатьНайтиКнопку(Форма,
						   ИмяКнопки, 
						   ИмяКоманды,
						   Заголовок = "",
						   Родитель = Неопределено,
						   Ширина = 0, 
						   Высота = 0);  
						   
	Элементы = Форма.Элементы;	
						   
	Кнопка = Элементы.Найти(ИмяКнопки);
	Если Кнопка = Неопределено Тогда
		Кнопка 			  = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ?(Родитель = Неопределено, Форма, Родитель));
		Кнопка.Заголовок  = Заголовок;
		Кнопка.ИмяКоманды = ИмяКоманды;
		Кнопка.Ширина 	  = Ширина;
		Кнопка.Высота 	  = Высота;
			 		
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции // СоздатьНайтиКнопку()

//--> VOG Солодов
Процедура ДобавитьКолонкиХарактеристик(Форма, ИмяСписка, ОсновнаяТаблица)
	
	Если Форма.Элементы.Найти(ИмяСписка) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКлассификаторов = ПолучитьТаблицуВыводимыхХарактеристик(ОсновнаяТаблица);
	
	Если ТипЗнч(Форма[ИмяСписка]) <> Тип("ДинамическийСписок") Тогда
		Возврат;
	КонецЕсли;
	
	ПолеСсылка = Форма[ИмяСписка].КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти("Ссылка");
	
	Если ПолеСсылка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Индекс = 0 По ТаблицаКлассификаторов.Количество() - 1 Цикл
		
		ИмяКолонки = ТаблицаКлассификаторов[Индекс].ИмяКолонки;
		
		Если ПолеСсылка.Элементы.Найти(ИмяКолонки) <> Неопределено Тогда
			
			ИмяРеквизита = ИмяСписка + "_Классификатор_" + Строка(Индекс + 1);
			
			Если Форма.Элементы.Найти("ПоляСписка" + ИмяСписка) <> Неопределено Тогда
				ВладелецРеквизитов = Форма.Элементы["ПоляСписка" + ИмяСписка];
			Иначе
				ВладелецРеквизитов = Форма.Элементы[ИмяСписка];
			КонецЕсли;
			
			Если Форма.Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
				
				НоваяКолонкаТаблицы = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ВладелецРеквизитов);
				НоваяКолонкаТаблицы.Заголовок = ТаблицаКлассификаторов[Индекс].Заголовок; 
				
				НоваяКолонкаТаблицы.ПутьКДанным = ИмяСписка + "." + ИмяКолонки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуВыводимыхХарактеристик(ИмяТаблицыПринадлежность)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_КлассификаторыПринадлежность.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_КлассификаторыОдиночное
		|ИЗ
		|	ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
		|ГДЕ
		|	CRM_КлассификаторыПринадлежность.ИмяТаблицы = &ИмяТаблицы
		|	И CRM_КлассификаторыПринадлежность.Ссылка.ВыводитьВФормеСписка = ИСТИНА
		|	И CRM_КлассификаторыПринадлежность.Ссылка.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_КлассификаторыПринадлежность.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_КлассификаторыДругое
		|ИЗ
		|	ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
		|ГДЕ
		|	CRM_КлассификаторыПринадлежность.ИмяТаблицы = &ИмяТаблицы
		|	И CRM_КлассификаторыПринадлежность.Ссылка.ВыводитьВФормеСписка = ИСТИНА
		|	И НЕ CRM_КлассификаторыПринадлежность.Ссылка.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""Ссылка.["" + ВТ_КлассификаторыОдиночное.Ссылка.Наименование + ""]"" КАК ИмяКолонки,
		|	ВТ_КлассификаторыОдиночное.Ссылка.Наименование КАК Заголовок
		|ИЗ
		|	ВТ_КлассификаторыОдиночное КАК ВТ_КлассификаторыОдиночное
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ссылка.["" + ВЫРАЗИТЬ(CRM_ЗначенияКлассификаторов.Владелец КАК ПланВидовХарактеристик.CRM_Классификаторы).Наименование + "" "" + CRM_ЗначенияКлассификаторов.Наименование + ""]"",
		|	CRM_ЗначенияКлассификаторов.Наименование
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлассификаторыДругое КАК ВТ_КлассификаторыДругое
		|		ПО CRM_ЗначенияКлассификаторов.Владелец = ВТ_КлассификаторыДругое.Ссылка";
	
	Если ИмяТаблицыПринадлежность = "Справочник.вогТорговыеТочки" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ссылка.КИ_"" + ВидыКонтактнойИнформации.Наименование,
		|	ВидыКонтактнойИнформации.Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных = &ВладелецИмя
		|	И ВидыКонтактнойИнформации.ИмяПредопределенныхДанных = ""Месторасположение""";
		
		Запрос.УстановитьПараметр("ВладелецИмя", СтрЗаменить(ИмяТаблицыПринадлежность, ".", ""));	
		
	КонецЕсли;	
		
	Запрос.Текст = ТекстЗапроса;	
		
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицыПринадлежность);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //<-- VOG Солодов

#КонецОбласти

#Область ПодборПоКлассифкации

&НаСервере
Процедура ОбработкаВыбораТаблицы(Форма, ИмяТаблицы, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ВыбранноеЗначение.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение[0]);
	
	Если ИмяТаблицы = "ТаблицаКлиентов" Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			Если ТипЗначения = Тип("СправочникСсылка.Партнеры") Тогда
				Если Значение.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("Партнер", Значение);
				
			ИначеЕсли ТипЗначения = Тип("СправочникСсылка.вогТорговыеТочки") Тогда 
				СтруктураПоиска = Новый Структура("ТорговаяТочка, Партнер", Значение, Значение.Партнер);
				
			КонецЕсли;
			
			СтрокиПоиска = Форма[ИмяТаблицы].НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоиска.Количество() = 0 Тогда
				НоваяСтрока = Форма[ИмяТаблицы].Добавить();
			Иначе
				НоваяСтрока = СтрокиПоиска[0];
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
			Форма.Модифицированность = Истина;
			
		КонецЦикла;
					  
	ИначеЕсли ИмяТаблицы = "ТаблицаНоменклатураКоллекции" 
	  ИЛИ ИмяТаблицы = "ТаблицаНоменклатура"
	  ИЛИ ИмяТаблицы = "ТаблицаКоллекции" Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			Если ТипЗначения = Тип("СправочникСсылка.Номенклатура") Тогда
				Если Значение.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("Номенклатура", Значение);
				
			ИначеЕсли ТипЗначения = Тип("СправочникСсылка.вогКоллекцииНоменклатуры") Тогда 
				СтруктураПоиска = Новый Структура("Коллекция", Значение);
				
			КонецЕсли;
			
			СтрокиПоиска = Форма[ИмяТаблицы].НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоиска.Количество() = 0 Тогда
				НоваяСтрока = Форма[ИмяТаблицы].Добавить();
			Иначе
				НоваяСтрока = СтрокиПоиска[0];
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
			Форма.Модифицированность = Истина;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

#КонецОбласти

#КонецОбласти

//-вог
