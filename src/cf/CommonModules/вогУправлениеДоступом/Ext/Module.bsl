#Область Менеджеры

Процедура ПрочитатьМенеджеровТорговойТочки(Форма, Объект, Параметры) Экспорт
		
	//Запрос = Новый Запрос;	
	//Запрос.УстановитьПараметр("ТорговаяТочка", Объект.Ссылка);
	//
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	МенеджерыТорговыхТочек.Менеджер,
	//	|	МенеджерыТорговыхТочек.Организация
	//	|ИЗ
	//	|	РегистрСведений.вогМенеджерыТорговыхТочек КАК МенеджерыТорговыхТочек
	//	|ГДЕ
	//	|	МенеджерыТорговыхТочек.ТорговаяТочка = &ТорговаяТочка";
	//
	//Форма[Параметры.ИмяРеквизитаФормы].Загрузить(Запрос.Выполнить().Выгрузить());		

КонецПроцедуры

Процедура ЗаписатьМенеджеровТорговойТочки(Форма, Объект, Параметры) Экспорт
	
	//Если Не Форма.Модифицированность Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Набор = РегистрыСведений.вогМенеджерыТорговыхТочек.СоздатьНаборЗаписей();
	//Набор.Отбор.ТорговаяТочка.Установить(Объект.Ссылка);
	//Для каждого СтрокаТЧ Из Форма[Параметры.ИмяРеквизитаФормы] Цикл
	//	НоваяСтрока = Набор.Добавить();
	//	НоваяСтрока.ТорговаяТочка = Объект.Ссылка;
	//    НоваяСтрока.Менеджер      = СтрокаТЧ.Менеджер;
	//    НоваяСтрока.Роль          = СтрокаТЧ.Роль;
	//    НоваяСтрока.Организация   = СтрокаТЧ.Организация;
	//	
	//КонецЦикла;	

	//Набор.Записать();
	
КонецПроцедуры

Процедура ПрочитатьМенеджеровВладельца(Форма, Объект, Параметры) Экспорт
		
	МенеджерыВладельца = МенеджерыВладельца(Объект.Ссылка);
	Форма[Параметры.ИмяРеквизитаФормы].Загрузить(МенеджерыВладельца);		

КонецПроцедуры

Функция МенеджерыВладельца(Владелец) Экспорт

	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МенеджерыОбъектов.Подразделение КАК Организация,
		|	МенеджерыОбъектов.Роль КАК Роль,
		|	МенеджерыОбъектов.Менеджер КАК Менеджер,
		|	МенеджерыОбъектов.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	РегистрСведений.вогМенеджерыОбъектов КАК МенеджерыОбъектов
		|ГДЕ
		|	МенеджерыОбъектов.Владелец = &Владелец";

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // МенеджерыВладельца()

Процедура ЗаписатьМенеджеровВладельца(Форма, Объект, Параметры) Экспорт
	
	Если Не Форма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Период = ТекущаяДатаСеанса();
	
	Для каждого СтрокаТЧ Из Форма[Параметры.ИмяРеквизитаФормы] Цикл   
		Если СтрокаТЧ.НеДействует Тогда
			Возврат; 	
		КонецЕсли;		
		
		Запись = РегистрыСведений.вогМенеджерыОбъектов.СоздатьМенеджерЗаписи();
		
		Запись.Владелец	  			   = Объект.Ссылка;
	    Запись.Организация 			   = СтрокаТЧ.Организация;
	    Запись.Роль       			   = СтрокаТЧ.Роль;
	    Запись.НаправлениеДеятельности = СтрокаТЧ.НаправлениеДеятельности;
		
	    Запись.Менеджер    = СтрокаТЧ.Менеджер;
		
		Запись.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ДоступныеОрганизации

Процедура ПрочитатьДоступныеОрганизацииОбъекта(Форма, Объект, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеОрганизации", Объект[Параметры.ИмяРеквизитаОбъекта].Выгрузить());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступныеОрганизации.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_ДоступныеОрганизации
		|ИЗ
		|	&ДоступныеОрганизации КАК ДоступныеОрганизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникОрганизации.Ссылка КАК Организация,
		|	ВЫБОР
		|		КОГДА ВТ_ДоступныеОрганизации.Организация ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка
		|ИЗ
		|	Справочник.Организации КАК СправочникОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеОрганизации КАК ВТ_ДоступныеОрганизации
		|		ПО СправочникОрганизации.Ссылка = ВТ_ДоступныеОрганизации.Организация
		|ГДЕ
		|	НЕ СправочникОрганизации.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Форма[Параметры.ИмяРеквизитаФормы].Загрузить(Запрос.Выполнить().Выгрузить());		

КонецПроцедуры

Процедура ЗаписатьДоступныеОрганизацииОбъекта(Форма, Объект, Параметры) Экспорт
	
	Объект[Параметры.ИмяРеквизитаОбъекта].Очистить();
	Для каждого СтрокаТЧ Из Форма[Параметры.ИмяРеквизитаФормы] Цикл
		Если Не СтрокаТЧ.Пометка Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = Объект[Параметры.ИмяРеквизитаОбъекта].Добавить();
	    НоваяСтрока.Организация = СтрокаТЧ.Организация;
		
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область ДоступныеПодрозделения

Процедура ПрочитатьДоступныеПодразделенияОбъекта(Форма, Объект, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеПодразделения", Объект[Параметры.ИмяРеквизитаОбъекта].Выгрузить());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступныеПодразделения.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ДоступныеПодразделения
		|ИЗ
		|	&ДоступныеПодразделения КАК ДоступныеПодразделения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникПодразделения.Ссылка КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ВТ_ДоступныеПодразделения.Подразделение ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СправочникПодразделения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеПодразделения КАК ВТ_ДоступныеПодразделения
		|		ПО СправочникПодразделения.Ссылка = ВТ_ДоступныеПодразделения.Подразделение
		|ГДЕ
		|	НЕ СправочникПодразделения.ПометкаУдаления
		|	И СправочникПодразделения.ОбособленноеПодразделение
		|	И НЕ СправочникПодразделения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Форма[Параметры.ИмяРеквизитаФормы].Загрузить(Запрос.Выполнить().Выгрузить());		

КонецПроцедуры

Процедура ЗаписатьДоступныеПодразделенияОбъекта(Форма, Объект, Параметры) Экспорт
	
	Объект[Параметры.ИмяРеквизитаОбъекта].Очистить();
	Для каждого СтрокаТЧ Из Форма[Параметры.ИмяРеквизитаФормы] Цикл
		Если Не СтрокаТЧ.Пометка Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = Объект[Параметры.ИмяРеквизитаОбъекта].Добавить();
	    НоваяСтрока.Подразделение = СтрокаТЧ.Подразделение;
		
	КонецЦикла;	

КонецПроцедуры

Функция ПолучитьОбособленноеПодразделениеПользователя(Пользователь) Экспорт
	Возврат ПолучитьОбособленноеПодразделениеРекурсивно(Пользователь.Подразделение);
КонецФункции

Функция ПолучитьОбособленноеПодразделениеРекурсивно(Знач ТекущиеПодразделение)

	Если НЕ ЗначениеЗаполнено(ТекущиеПодразделение) Тогда Возврат Справочники.СтруктураПредприятия.ПустаяСсылка(); КонецЕсли;
	
	Если НЕ ТекущиеПодразделение.ОбособленноеПодразделение Тогда
		ТекущиеПодразделение = ТекущиеПодразделение.Родитель;
		// ++ VOG Солодов В.В. 29.08.2019 bugs 618
		ТекущиеПодразделение = ПолучитьОбособленноеПодразделениеРекурсивно(ТекущиеПодразделение);
		// До изменения
		//ПолучитьОбособленноеПодразделениеРекурсивно(ТекущиеПодразделение);
		// -- VOG Солодов В.В. 29.08.2019
	КонецЕсли;
	
	Возврат ТекущиеПодразделение;
	
КонецФункции

#КонецОбласти

#Область ИерархияСтруктурыПредприятия

Процедура ВыполнитьЗаписьИерархияПодразделений(МассивПодразделений = Неопределено) Экспорт
	
	Если МассивПодразделений = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписатьИерархиюПодразделения(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого ЭлементМассива Из МассивПодразделений Цикл
			
			ЗаписатьИерархиюПодразделения(ЭлементМассива);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРегистрСведенийИерархияПартнеров() Экспорт
	
	НаборЗаписей = РегистрыСведений.вогИерархияСтруктурыПредприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаписатьИерархиюПодразделения(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоИерархии = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЭлементТекущегоСправочника = ДеревоИерархии.Строки.Найти(Ссылка,"Ссылка",Истина);
	
	Если ЭлементТекущегоСправочника <> Неопределено Тогда
		ВыполнитьЗаписьВРегистрПоПодразделению(ЭлементТекущегоСправочника);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ВыполнитьЗаписьПоПодчиненнымПодразделениям(СтрокиДерева,ТекущийЭлементОбработки)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.Ссылка <> ТекущийЭлементОбработки Тогда
			ВыполнитьЗаписьВРегистрПоПодразделению(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьВРегистрПоПодразделению(СтрокаДерева);
	
	НаборЗаписей = РегистрыСведений.вогИерархияСтруктурыПредприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Подразделение.Установить(СтрокаДерева.Ссылка);
	
	РодительСтрокиДерева = СтрокаДерева;
	Пока РодительСтрокиДерева <> Неопределено Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Подразделение 	= СтрокаДерева.Ссылка;
		ЗаписьНабора.Родитель       = РодительСтрокиДерева.Ссылка;
		ЗаписьНабора.Уровень	    = РодительСтрокиДерева.Уровень();
		РодительСтрокиДерева 		= РодительСтрокиДерева.Родитель;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ВыполнитьЗаписьПоПодчиненнымПодразделениям(СтрокаДерева.Строки, СтрокаДерева.Ссылка);
	
КонецПроцедуры

Функция ПолучитьРуководителяПодразделенияРекурсивно(Подразделение) Экспорт
	
	Если ЗначениеЗаполнено(Подразделение.ТекущийРуководитель) Тогда
		Возврат Подразделение.ТекущийРуководитель;	
		
	ИначеЕсли ЗначениеЗаполнено(Подразделение.Родитель) Тогда 	
		Возврат ПолучитьРуководителяПодразделенияРекурсивно(Подразделение.Родитель);	
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьРуководителяПодразделенияРекурсивно()

#КонецОбласти

#Область ОграниченияДоступа

Процедура ЗаполнитьДеревоПодразделенийПоДаннымПользователя(Форма, ДеревоПодразделений, Знач Пользователь = Неопределено) Экспорт

	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();	
	
	КонецЕсли;	
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Подразделение");	
	СтруктураРеквизитов.Вставить("CRM_ДолжностнаяПозиция");
	// ++ VOG Солодов В.В. 05.08.2019 task 464
	СтруктураРеквизитов.Вставить("вогРуководитель");
	// -- VOG Солодов В.В. 05.08.2019
	
	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь, СтруктураРеквизитов);
	
	ДеревоПодразделений.Строки.Очистить();
	
	//Подчиненные 
	СтрокаУзда 				  = ДеревоПодразделений.Строки.Добавить();
	СтрокаУзда.Ссылка 		  = РеквизитыПользователя.Подразделение;          
	СтрокаУзда.Представление  = НСтр("ru = 'Подчиненные'");
	СтрокаУзда.ИндексКартинки = 6;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Предопределенный");	
	СтруктураРеквизитов.Вставить("ПометкаУдаления");	
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыПользователя.Подразделение, СтруктураРеквизитов);
	Если РеквизитыПодразделения.Предопределенный = Истина Тогда
		ИндексКартинки = 5;	
	ИначеЕсли РеквизитыПодразделения.ПометкаУдаления = Истина Тогда
		ИндексКартинки = 4;	
	Иначе
		ИндексКартинки = 3;	
	КонецЕсли;
	
	ЗаполнитьСтрокиДереваПодразделенийРекурсивно(СтрокаУзда.Строки, РеквизитыПользователя.Подразделение, ИндексКартинки);
	
	// ++ VOG Солодов В.В. 05.08.2019 task 464
	// По руководителю пользователя
	Если ЗначениеЗаполнено(РеквизитыПользователя.вогРуководитель) Тогда
		
		ПодразделениеРуководителя 
			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПользователя.вогРуководитель, "Подразделение");
		
		Если ЗначениеЗаполнено(ПодразделениеРуководителя)
			И ПодразделениеРуководителя <> РеквизитыПользователя.Подразделение Тогда
			
			СтрокаУзда 					= ДеревоПодразделений.Строки.Добавить();
			СтрокаУзда.Ссылка 			= ПодразделениеРуководителя;
			СтрокаУзда.Представление 	= НСтр("ru = 'Руководитель'");
			СтрокаУзда.ИндексКартинки 	= 0;
			
			НоваяСтрока 				= СтрокаУзда.Строки.Добавить();
			НоваяСтрока.Ссылка 			= ПодразделениеРуководителя;
			НоваяСтрока.Представление 	= ПодразделениеРуководителя;
			НоваяСтрока.ИндексКартинки 	= 3;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 05.08.2019
	
	//Того же уровня
	Если Не ЗначениеЗаполнено(РеквизитыПользователя.Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", РеквизитыПользователя.Подразделение);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИерархияСтруктурыПредприятия.Уровень КАК Уровень
		|ПОМЕСТИТЬ ТекущийУровень
		|ИЗ
		|	РегистрСведений.вогИерархияСтруктурыПредприятия КАК ИерархияСтруктурыПредприятия
		|ГДЕ
		|	ИерархияСтруктурыПредприятия.Родитель = &Подразделение
		|	И ИерархияСтруктурыПредприятия.Подразделение = ИерархияСтруктурыПредприятия.Родитель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Уровень
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИерархияСтруктурыПредприятия.Подразделение,
		|	ВЫБОР
		|		КОГДА ИерархияСтруктурыПредприятия.Подразделение.Предопределенный
		|			ТОГДА 5
		|		КОГДА ИерархияСтруктурыПредприятия.Подразделение.ПометкаУдаления
		|			ТОГДА 4
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	РегистрСведений.вогИерархияСтруктурыПредприятия КАК ИерархияСтруктурыПредприятия
		|ГДЕ
		|	ИерархияСтруктурыПредприятия.Подразделение <> &Подразделение
		|	И ИерархияСтруктурыПредприятия.Уровень В
		|			(ВЫБРАТЬ
		|				ТекущийУровень.Уровень
		|			ИЗ
		|				ТекущийУровень КАК ТекущийУровень)
		|	И ИерархияСтруктурыПредприятия.Подразделение = ИерархияСтруктурыПредприятия.Родитель";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СтрокаУзда 				  = ДеревоПодразделений.Строки.Добавить();
		СтрокаУзда.Ссылка 		  = РеквизитыПользователя.Подразделение;
		СтрокаУзда.Представление  = НСтр("ru = 'По уровню подразделения'");
		СтрокаУзда.ИндексКартинки = 7;
	
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьСтрокиДереваПодразделенийРекурсивно(СтрокаУзда.Строки, Выборка.Подразделение, Выборка.ИндексКартинки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДереваПодразделенийРекурсивно(Строки, Подразделение, ИндексКартинки) Экспорт // VOG Солодов В.В. 16.11.2020 CRM-992 // Добавлен Экспорт
		
	НоваяСтрока		  		   = Строки.Добавить();	
	НоваяСтрока.Ссылка 		   = Подразделение;
	НоваяСтрока.Представление  = Подразделение;
	НоваяСтрока.ИндексКартинки = ИндексКартинки;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Предопределенный
		|			ТОГДА 5
		|		КОГДА СтруктураПредприятия.ПометкаУдаления
		|			ТОГДА 4
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Родитель = &ТекущийРодитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТекущийРодитель", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьСтрокиДереваПодразделенийРекурсивно(НоваяСтрока.Строки, Выборка.Ссылка, Выборка.ИндексКартинки);	
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьСтрокиДереваПодразделенийРекурсивно()

#Область УровниДоступа

Процедура ПриЗаписиОбъектаДоступаОбработчик(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОграниченияДоступа") Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(Источник.Ссылка);
	
	НаименованиеЗадания = НСтр("ru = 'Формирование состава уровня доступа.'");
	ФоновыеЗадания.Выполнить("вогУправлениеДоступом.ВыполнитьФормированиеПриПроверкеНаВхождение", 
		ПараметрыВыполнения,, НаименованиеЗадания);
	
КонецПроцедуры

Процедура ВыполнитьПериодическоеФормированиеУровенейДоступа(УровеньДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(УровеньДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОграниченияДоступа") Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Формирование состава уровня доступа. Запуск по расписанию'");
	ПараметрыЖурнала.Метаданные    = УровеньДоступа.Метаданные();
	ПараметрыЖурнала.Данные        = УровеньДоступа;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, , НСтр("ru = 'Запуск'"));
	
	Попытка
		СформироватьУровеньДоступа(УровеньДоступа);
	Исключение
		ЗаписьЖурнала(ПараметрыЖурнала, , ,
			НСтр("ru = 'Ошибка формирования состава уровня доступа %1'"), ИнформацияОбОшибке(), 
			"'"+ УровеньДоступа +"'"
		);
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, ,НСтр("ru = 'Завершение'"));
	
КонецПроцедуры

Процедура ВыполнитьФормированиеПриПроверкеНаВхождение(ОбъектДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ОбъектДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Формирование состава уровня доступа. Проверка на вхождение'");
	ПараметрыЖурнала.Метаданные    = ОбъектДоступа.Метаданные();
	ПараметрыЖурнала.Данные        = ОбъектДоступа;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, , НСтр("ru = 'Запуск'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_УровниДоступа.Ссылка КАК УровеньДоступа,
		|	CRM_УровниДоступа.Представление КАК УровеньДоступаПредставление
		|ИЗ
		|	Справочник.CRM_УровниДоступа КАК CRM_УровниДоступа
		|ГДЕ
		|	CRM_УровниДоступа.ПроверятьНаВхождениеПриЗаписиОбъекта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			СформироватьУровеньДоступа(Выборка.УровеньДоступа, ОбъектДоступа);
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, , ,
				НСтр("ru = 'Ошибка формирования состава уровня доступа %1'"), ИнформацияОбОшибке(), 
				"'"+ Выборка.УровеньДоступаПредставление +"'"
			);
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, ,НСтр("ru = 'Завершение'"));
	
КонецПроцедуры

Процедура СформироватьУровеньДоступа(УровеньДоступа, ОбъектДоступа = Неопределено) Экспорт

	ПР = ПривилегированныйРежим();
	Если НЕ ПР Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СхемаКомпоновкиДанных");
	СтруктураРеквизитов.Вставить("Чтение");
	СтруктураРеквизитов.Вставить("Изменение");
	
	РеквизитыУровняДоступа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УровеньДоступа, СтруктураРеквизитов);
	
	//Формирование таблицы объекта
	СхемаИНастройки = Справочники.CRM_УровниДоступа.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(УровеньДоступа, РеквизитыУровняДоступа.СхемаКомпоновкиДанных);
	
	Если ОбъектДоступа <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор, "ОбъектДоступа", ОбъектДоступа);
		
	КонецЕсли;
	
	СписокЭлементов = ТаблицаСКДУровняДоступа(СхемаИНастройки.СхемаКомпоновкиДанных, СхемаИНастройки.НастройкиКомпоновкиДанных);
	Если СписокЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.вогОбъектыУровнейДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УровеньДоступа.Установить(УровеньДоступа);
	Если ОбъектДоступа <> Неопределено Тогда
		НаборЗаписей.Отбор.ОбъектДоступа.Установить(ОбъектДоступа);
		
	КонецЕсли;
	
	Для Каждого Элемент Из СписокЭлементов Цикл
		Если НЕ ЗначениеЗаполнено(Элемент.ОбъектДоступа) Тогда
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей.Добавить();
		Запись.УровеньДоступа = УровеньДоступа;
		Запись.ОбъектДоступа  = Элемент.ОбъектДоступа;
		
		Запись.Чтение = РеквизитыУровняДоступа.Чтение;
		Запись.Изменение = РеквизитыУровняДоступа.Изменение;
		
		Запись.ДатаВключения = ТекущаяДатаСеанса();
		
	КонецЦикла;

	НаборЗаписей.Записать();
	
	Если НЕ ПР Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаСКДУровняДоступа(СКД, Настройки)

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СКД,Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаЗначений.Свернуть("ОбъектДоступа");

	Возврат ТаблицаЗначений;

КонецФункции

Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала = Неопределено, ИмяСобытия = "", 
		Знач КомментарийСПараметрами = "", ИнформацияОбОшибке = Неопределено, 
		Параметр1 = Неопределено, 
		Параметр2 = Неопределено, 
		Параметр3 = Неопределено, 
		Параметр4 = Неопределено
	) Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	// Комментарий для журнала регистрации и пользователя.
	Если Параметр1 <> Неопределено Тогда
		КомментарийСПараметрами = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийСПараметрами, Параметр1, Параметр2, Параметр3, Параметр4
		);
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТестСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТестСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТестСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(
		ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", ". "+ ИмяСобытия), 
		УровеньЖурнала, 
		ПараметрыЖурнала.Метаданные, 
		ПараметрыЖурнала.Данные, 
		КомментарийСПараметрами
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТестСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'")
		Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// РЕГЛАМЕНТНОЕ ЗАДАНИЕ
Процедура вогПредоставлениеСнятиеВременногоДоступа() Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	вогВременныйДоступ.Ссылка КАК Ссылка,
	//	|	ВЫБОР
	//	|		КОГДА &ТекущаяДата МЕЖДУ вогВременныйДоступ.ДействуетС И вогВременныйДоступ.ДействуетПо
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК Включить,
	//	|	ВЫБОР
	//	|		КОГДА вогВременныйДоступ.ДействуетПо < &ТекущаяДата
	//	|				И НЕ вогВременныйДоступ.ПометкаУдаления  И НЕ вогВременныйДоступ.ДействуетПо = ДатаВремя(1,1,1)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК Выключить,
	//	|	вогВременныйДоступ.ПометкаУдаления КАК ПометкаУдаления
	//	|ИЗ
	//	|	Документ.вогДелегированиеПравДоступа КАК вогВременныйДоступ
	//	|ГДЕ
	//	|	НЕ вогВременныйДоступ.ПометкаУдаления
	//	|	И (вогВременныйДоступ.ДействуетПо < &ТекущаяДата И НЕ вогВременныйДоступ.ДействуетПо = ДатаВремя(1,1,1)
	//	|				И (НЕ вогВременныйДоступ.Выключен ИЛИ вогВременныйДоступ.Активно)
	//	|			ИЛИ &ТекущаяДата МЕЖДУ вогВременныйДоступ.ДействуетС И вогВременныйДоступ.ДействуетПо
	//	|				И (НЕ вогВременныйДоступ.Включен ИЛИ НЕ вогВременныйДоступ.Активно)
	//	|				И НЕ вогВременныйДоступ.ПометкаУдаления)";
	//
	//Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	Действие = Неопределено;
	//	
	//	Если ВыборкаДетальныеЗаписи.Выключить ИЛИ ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
	//		Действие = Ложь;
	//	ИначеЕсли ВыборкаДетальныеЗаписи.Включить Тогда
	//		Действие = Истина;
	//	Иначе 
	//		Продолжить;
	//	КонецЕсли;
	//		
	//	Документы.вогДелегированиеПравДоступа.ВыполнитьВключениеВыключениеВременногоДоступа(ВыборкаДетальныеЗаписи.Ссылка, Действие);
	//	
	//КонецЦикла;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт    //--> VOG Бей  22.05.2018 16:50:51 ID заявки:000001880
	
	Если ИмяПараметра = "вогПодчиненныеСотрудники" Тогда
		
		ПодчиненныеСотрудники = Новый Массив;
		
		// ++ Тищенко В.В. 19.04.2019
		// Изменил запрос. Оригинальный запрос не учитывал подчиненные позиции
		
		// Оригинальный запрос
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	Пользователи.Ссылка КАК Сотрудник
		//|ИЗ
		//|	Справочник.Пользователи КАК Пользователи
		//|ГДЕ
		//|	Пользователи.CRM_ДолжностнаяПозиция В ИЕРАРХИИ (&СписокДолжностныхПозиций)
		//|	И (НЕ Пользователи.CRM_ДолжностнаяПозиция = &ТекущаяДолжностнаяПозиция
		//|			ИЛИ Пользователи.Ссылка = &ТекущийПользователь)";
		//
		
		// Новый запрос
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|ПОМЕСТИТЬ ВТ_ДолжностныеПозиции
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_ДолжностныеПозиции.Ссылка
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.CRM_ДолжностнаяПозиция В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ВТ_ДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|			ИЗ
		|				ВТ_ДолжностныеПозиции КАК ВТ_ДолжностныеПозиции)
		|	И (НЕ Пользователи.CRM_ДолжностнаяПозиция = &ТекущаяДолжностнаяПозиция
		|			ИЛИ Пользователи.Ссылка = &ТекущийПользователь)
		|
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование");
		
		// -- Тищенко В.В
		
		ТекущийПользователь  = ПараметрыСеанса.ТекущийПользователь;
		ТекущаяДолжностнаяПозиция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь,"CRM_ДолжностнаяПозиция");
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("СписокДолжностныхПозиций", ПараметрыСеанса.вогДолжностныеПозиции);
		Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция", ТекущаяДолжностнаяПозиция);
		
		ПодчиненныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");

		//ПодчиненныеСотрудники = Новый Массив;
		//ТекущийПользователь  = ПараметрыСеанса.ТекущийПользователь;
		//ТекущаяДолжностнаяПозиция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь,"CRM_ДолжностнаяПозиция");
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	CRM_ДолжностныеПозиции.Ссылка КАК Позиция
		//|ПОМЕСТИТЬ Позиции
		//|ИЗ
		//|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		//|ГДЕ
		//|	(CRM_ДолжностныеПозиции.Ссылка В ИЕРАРХИИ (&ТекущаяДолжностнаяПозиция)
		//|			ИЛИ CRM_ДолжностныеПозиции.Ссылка В ИЕРАРХИИ
		//|				(ВЫБРАТЬ
		//|					CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция
		//|				ИЗ
		//|					Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
		//|				ГДЕ
		//|					CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка = &ТекущаяДолжностнаяПозиция
		//|					И НЕ CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка.ПометкаУдаления))
		//|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		//|	И НЕ CRM_ДолжностныеПозиции.ПометкаУдаления
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	Пользователи.Ссылка КАК Сотрудник
		//|ИЗ
		//|	Справочник.Пользователи КАК Пользователи
		//|ГДЕ
		//|	(Пользователи.CRM_ДолжностнаяПозиция В
		//|					(ВЫБРАТЬ
		//|						Позиции.Позиция КАК Позиция
		//|					ИЗ
		//|						Позиции КАК Позиции)
		//|				И НЕ Пользователи.ПометкаУдаления
		//|			ИЛИ Пользователи.Ссылка = &ТекущийПользователь)";
		//
		//Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		//Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция", ТекущаяДолжностнаяПозиция);
		//
		//ПодчиненныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		
		
		////
		
		///
		
		
		//МассивПодразделений = Новый Массив;
		//
		//ТекущийПользователь  = ПараметрыСеанса.ТекущийПользователь;
		//ТекущееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь,"Подразделение");
		//ТекущийРуководитель  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущееПодразделение,"ТекущийРуководитель");
		//
		//Если ТекущийРуководитель = ТекущийПользователь Тогда
		//	
		//	МассивПодразделений.Добавить(ТекущееПодразделение);
		//	
		//	CRM_МетодыМодулейМенеджеровСправочников.ПолучитьПодчиненныеПодразделенияПользователя(ТекущееПодразделение,МассивПодразделений);
		//	
		//	Запрос = Новый Запрос;
		//	Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	Пользователи.Ссылка КАК Сотрудник
		//	|ИЗ
		//	|	Справочник.Пользователи КАК Пользователи
		//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		//	|		ПО Пользователи.Подразделение = СтруктураПредприятия.Ссылка
		//	|ГДЕ
		//	|	СтруктураПредприятия.Ссылка В(&ПодразделенияТекущегоПользователя)";
		//	
		//	Запрос.УстановитьПараметр("ПодразделенияТекущегоПользователя", МассивПодразделений);
		//	
		//	ПодчиненныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		//	
		//Иначе
		//	
		//	ПодчиненныеСотрудники = Новый Массив;
		//	ПодчиненныеСотрудники.Добавить(ТекущийПользователь);
		//	
		//КонецЕсли;
		
		ПараметрыСеанса.вогПодчиненныеСотрудники = Новый ФиксированныйМассив(ПодчиненныеСотрудники);
		
		УстановленныеПараметры.Добавить("вогПодчиненныеСотрудники");
		
	ИначеЕсли ИмяПараметра = "вогДолжностныеПозиции" Тогда
		
		ДолжностныеПозиции = Новый Массив;
		ТекущийПользователь  = ПараметрыСеанса.ТекущийПользователь;
		ТекущаяДолжностнаяПозиция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь,"CRM_ДолжностнаяПозиция");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|ПОМЕСТИТЬ Подичененные
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
		|	И НЕ CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка.ПометкаУдаления
		|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_ДолжностныеПозиции.Ссылка КАК Позиция
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
		|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		|	И НЕ CRM_ДолжностныеПозиции.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Подичененные.CRM_ДолжностнаяПозиция
		|ИЗ
		|	Подичененные КАК Подичененные";
		
		Запрос.УстановитьПараметр("ТекущийПользователь"			, ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция"	, ТекущаяДолжностнаяПозиция);
		
		ДолжностныеПозиции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Позиция");
		
		Если ДолжностныеПозиции.Количество() = 0 Тогда
			ДолжностныеПозиции.Добавить(ПредопределенноеЗначение("Справочник.CRM_ДолжностныеПозиции.УПользователяНеУстановленоДолжностнойПозиции"));
		КонецЕсли;
		
		ПараметрыСеанса.вогДолжностныеПозиции = Новый ФиксированныйМассив(ДолжностныеПозиции);
		
		УстановленныеПараметры.Добавить("вогДолжностныеПозиции");
		
	ИначеЕсли ИмяПараметра = "CRM_ИспользуемаяАналитикаКлассификаторов" Тогда
		МассивПодразделений = Новый Массив;
		//МассивПодразделений.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
		МассивПодразделений.Добавить(ПолучитьОбособленноеПодразделениеПользователя(Пользователи.ТекущийПользователь()));
		ПараметрыСеанса.CRM_ИспользуемаяАналитикаКлассификаторов = Новый ФиксированныйМассив(МассивПодразделений);
		
	//++ VOG Ульянов И.В. 15.01.2020 CRM-121	
	ИначеЕсли ИмяПараметра = "вогСотрудникиДелегированиеПравМероприятия" Тогда
		
		ОбластьДелегированияПрав = "Мероприятия";
		
		СписокДоступныхПользователей = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПользователей();
		ОтчетыКлиентСервер.ДополнитьСписок(СписокДоступныхПользователей, вогНастраиваемоеДелегированиеПрав.ПолучитьСписокПодчиненныхСотрудниковДелегата(ПараметрыСеанса.ТекущийПользователь, "Мероприятия")); 
		
		МассивПользователей = СписокДоступныхПользователей.ВыгрузитьЗначения();

		ПараметрыСеанса.вогСотрудникиДелегированиеПравМероприятия = Новый ФиксированныйМассив(МассивПользователей);
		
		УстановленныеПараметры.Добавить("вогСотрудникиДелегированиеПравМероприятия");
		
	//-- VOG Ульянов И.В. 15.01.2020 CRM-121
	
	// +++ VOG Кулаков П.Л. 05.03.2020 CRM-385
	ИначеЕсли ИмяПараметра = "вогРолиИсполнителя" Тогда
		МассивРолей = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
				|ИЗ
				|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
				|ГДЕ
				|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
				
		Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ТекущийПользователь);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		МассивРолей = РезультатЗапроса.ВыгрузитьКолонку("РольИсполнителя");
		ПараметрыСеанса.вогРолиИсполнителя = Новый ФиксированныйМассив(МассивРолей);
		
		УстановленныеПараметры.Добавить("вогРолиИсполнителя");
		
	ИначеЕсли ИмяПараметра = "вогОсновныеОбъектыАдресации" Тогда
		
		МассивОбъектовАдресации = Новый Массив;
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
				|ИЗ
				|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
				|ГДЕ
				|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
				
		Запрос.УстановитьПараметр("Исполнитель", ТекущийПользователь);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		МассивОбъектовАдресацииПользователя = РезультатЗапроса.ВыгрузитьКолонку("ОсновнойОбъектАдресации");
		
		Для Каждого ОбъектАдресации Из МассивОбъектовАдресацииПользователя Цикл
			МассивРодителейАдресации = CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОбъектАдресации,Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектовАдресации,МассивРодителейАдресации,Истина);
		КонецЦикла;
		
		ПараметрыСеанса.вогОсновныеОбъектыАдресации = Новый ФиксированныйМассив(МассивОбъектовАдресации);
		
		УстановленныеПараметры.Добавить("вогОсновныеОбъектыАдресации");
		
	// --- VOG Кулаков П.Л.
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

