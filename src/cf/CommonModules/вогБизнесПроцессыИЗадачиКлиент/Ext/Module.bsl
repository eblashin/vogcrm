
#Область ПрограммныйИнтерфейс

Процедура ПоказатьФормуВопроса(Форма, ОписаниеОповещенияОЗавершении, ТекстСообщения, Кнопки, Заголовок = "") Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщения", 						ТекстСообщения);
	ПараметрыФормы.Вставить("Кнопки", 								Кнопки);
	ПараметрыФормы.Вставить("Заголовок", 							Заголовок);
	ПараметрыФормы.Вставить("Картинка", 							БиблиотекаКартинок.ДиалогВопрос);
	ПараметрыФормы.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.Вопрос", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,, ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

Процедура ДобавитьТиповуюЗадачу(Форма, ПринадлежностьОбъекта = Неопределено) Экспорт
	
	Форма.ВыполняетсяДобавлениеТиповогоПункта = Истина;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДобавитьТиповуюЗадачуЗавершение", Форма);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	
	Если ЗначениеЗаполнено(Форма.Объект.вогНаправлениеДеятельности)
		Или ЗначениеЗаполнено(ПринадлежностьОбъекта) Тогда
		
		СтруктураОтбора = Новый Структура;
		
		Если ЗначениеЗаполнено(Форма.Объект.вогНаправлениеДеятельности) Тогда
			
			МассивНаправленний = Новый Массив;
			МассивНаправленний.Добавить(Форма.Объект.вогНаправлениеДеятельности);
			МассивНаправленний.Добавить(ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"));
			
			СтруктураОтбора.Вставить("НаправлениеДеятельности", МассивНаправленний);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПринадлежностьОбъекта) Тогда
			СтруктураОтбора.Вставить("ПринадлежностьОбъекта", ПринадлежностьОбъекта);
		КонецЕсли;
		
		ПараметрыФормыВыбора.Вставить("Отбор", СтруктураОтбора);
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.ПунктыЧекЛистовЗадач.Форма.ФормаВыбораТиповыхЗадачНаборов",
		ПараметрыФормыВыбора,
		Форма,
		,
		,
		,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Функция ПредметСоответствуетПринадлежностиОбъекта(Предмет, ПринадлежностьОбъекту) Экспорт
	
	Возврат (ПринадлежностьОбъекту = Неопределено Или ТипЗнч(Предмет) = ТипЗнч(ПринадлежностьОбъекту));
	
КонецФункции

#Область РаботаСДеревомПредметов

Процедура ПредметыПередНачаломДобавленияФрагмент(Форма, ВыбранныйТип, ДополнительноеЗначение) Экспорт
	
	Если ВыбранныйТип = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	// ++ VOG Солодов В.В. 24.11.2020 CRM-1010
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	// -- VOG Солодов В.В. 24.11.2020 CRM-1010
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияЗавершение",
		Форма,
		ДополнительноеЗначение);
	
	ПолноеИмяОбъектаМетаданных = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(
		ТипЗнч(ВыбранныйТип.Значение));
	
	Если ТипЗнч(ВыбранныйТип.Значение) = Тип("СправочникСсылка.вогТорговыеТочки")
		Или ТипЗнч(ВыбранныйТип.Значение) = Тип("СправочникСсылка.вогЮридическиеЛица")
		Или ТипЗнч(ВыбранныйТип.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		
		ВариантКлассификации = СтрЗаменить(ПолноеИмяОбъектаМетаданных, "Справочник.", "");
		ПараметрыФормы.Вставить("ВариантКлассификации", 			ВариантКлассификации);
		ПараметрыФормы.Вставить("ОтключитьПривилегированныйРежим", 	Истина);
		// ++ VOG Солодов В.В. 24.11.2020 CRM-1010
		ФормаИмя = "ОбщаяФорма.вогПодборКлиентскаяБазаДинамический";
		// До изменения
		//ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		//ФормаИмя = "ОбщаяФорма.вогПодборКлиентскаяБаза";
		// -- VOG Солодов В.В. 24.11.2020 CRM-1010
		
		// Отбор по партнеру
		Если ТипЗнч(ВыбранныйТип.Значение) = Тип("СправочникСсылка.Партнеры")
			И ТипЗнч(ДополнительноеЗначение.Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
			
			НовыйОтбор = Новый ОтборКомпоновкиДанных;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				НовыйОтбор,
				"Ссылка",
				ДополнительноеЗначение.Предмет,
				ВидСравненияКомпоновкиДанных.Равно);
			
			ПараметрыФормы.Вставить("ОтборКомпоновкиДанных", НовыйОтбор);
			
		ИначеЕсли ТипЗнч(ДополнительноеЗначение.Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
			
			НовыйОтбор = Новый ОтборКомпоновкиДанных;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				НовыйОтбор,
				"Партнер",
				ДополнительноеЗначение.Предмет,
				ВидСравненияКомпоновкиДанных.Равно);
			
			ПараметрыФормы.Вставить("ОтборКомпоновкиДанных", НовыйОтбор);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранныйТип.Значение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		И (ТипЗнч(ДополнительноеЗначение.Предмет) = Тип("СправочникСсылка.Партнеры")
			Или ТипЗнч(ДополнительноеЗначение.Предмет) = Тип("СправочникСсылка.вогТорговыеТочки")
			Или ТипЗнч(ДополнительноеЗначение.Предмет) = Тип("СправочникСсылка.вогЮридическиеЛица")) Тогда
		
		ПараметрыФормы.Вставить("ОбъектСвязи", 	ДополнительноеЗначение.Предмет);
		ФормаИмя = СтрШаблон("%1.Форма.вогФормаПодбораКонтактногоЛица", ПолноеИмяОбъектаМетаданных);
		
	Иначе
		
		// ++ VOG Солодов В.В. 04.12.2020 CRM-1096
		Если ТипЗнч(ВыбранныйТип.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПараметрыФормы.Вставить("Ротация", Истина);
			ПараметрыФормы.Вставить("ТекущийАртикул");
			
			Если ЗначениеЗаполнено(Форма.Объект.вогНаправлениеДеятельности) Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НаправлениеДеятельности", Форма.Объект.вогНаправлениеДеятельности);
				
				ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		// -- VOG Солодов В.В. 04.12.2020 CRM-1096
		ФормаИмя = СтрШаблон("%1.ФормаВыбора", ПолноеИмяОбъектаМетаданных);
		
	КонецЕсли;
	
	ОткрытьФорму(ФормаИмя, ПараметрыФормы, Форма,,,, ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПредметыПредметНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Форма.Элементы.Предметы.ТекущиеДанные;
	
	ФормаИмя = "";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОпопвещениеОЗавершении = Новый ОписаниеОповещения(
		"ПредметыПредметНачалоВыбораЗавершение",
		Форма);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.Предмет));
	
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	
	ПолноеИмяОбъектаМетаданных = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(
		ТипЗнч(ТекущиеДанные.Предмет));
	
	Если ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.вогТорговыеТочки"))
		Или ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.вогЮридическиеЛица"))
		Или ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.Партнеры")) Тогда
		
		ВариантКлассификации = СтрЗаменить(ПолноеИмяОбъектаМетаданных, "Справочник.", "");
		ПараметрыФормы.Вставить("ВариантКлассификации", ВариантКлассификации);
		ПараметрыФормы.Вставить("ОтключитьПривилегированныйРежим", 	Истина);
		
		// Отбор по партнеру
		Если ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.вогТорговыеТочки"))
			Или ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.вогЮридическиеЛица")) Тогда
			
			СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
			
			Если Не СтрокаРодитель = Неопределено Тогда
				
				Если ТипЗнч(СтрокаРодитель.Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
					
					НовыйОтбор = Новый ОтборКомпоновкиДанных;
					
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						НовыйОтбор,
						"Партнер",
						СтрокаРодитель.Предмет,
						ВидСравненияКомпоновкиДанных.Равно);
					
					ПараметрыФормы.Вставить("ОтборКомпоновкиДанных", НовыйОтбор);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаИмя = "ОбщаяФорма.вогПодборКлиентскаяБазаДинамический";
		
	ИначеЕсли ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
		
		СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Не СтрокаРодитель = Неопределено Тогда
			
			Если ТипЗнч(СтрокаРодитель.Предмет) = Тип("СправочникСсылка.Партнеры")
				Или ТипЗнч(СтрокаРодитель.Предмет) = Тип("СправочникСсылка.вогТорговыеТочки")
				Или ТипЗнч(СтрокаРодитель.Предмет) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
				
				ПараметрыФормы.Вставить("ОбъектСвязи", 	СтрокаРодитель.Предмет);
				ФормаИмя = СтрШаблон("%1.Форма.вогФормаПодбораКонтактногоЛица", ПолноеИмяОбъектаМетаданных);
				
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		// ++ VOG Солодов В.В. 04.12.2020 CRM-1096
		Если ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
			
			ПараметрыФормы.Вставить("Ротация", Истина);
			ПараметрыФормы.Вставить("ТекущийАртикул", ТекущиеДанные.Предмет);
			
			Если ЗначениеЗаполнено(Форма.Объект.вогНаправлениеДеятельности) Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НаправлениеДеятельности", Форма.Объект.вогНаправлениеДеятельности);
				
				ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		// -- VOG Солодов В.В. 04.12.2020 CRM-1096
		ФормаИмя = СтрШаблон("%1.%2", ПолноеИмяОбъектаМетаданных, "ФормаВыбора");
		
	КонецЕсли;
	
	ОткрытьФорму(
		ФормаИмя,
		ПараметрыФормы,
		Форма,
		,
		,
		,
		ОпопвещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПредметыПеретаскивание(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИДПриемник = Строка;
	
	Если ИДПриемник = Неопределено Тогда
		Приемник = Неопределено;
	Иначе
		Приемник = Форма.ДеревоПредметы.НайтиПоИдентификатору(ИДПриемник);
	КонецЕсли;
	
	Для Каждого ИДИсточник Из ПараметрыПеретаскивания.Значение Цикл
		
		Источник = Форма.ДеревоПредметы.НайтиПоИдентификатору(ИДИсточник);
		НоваяСтрока = СкопироватьСтрокуДерева(Форма, Приемник, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПредметыПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	// Узел нельзя переносить в узлы подчиненные ему самому
	// т.е. родительский узел нельзя переносить в дочерние.
	// Проверим это условие для всех выделенных элементов
	
	СтандартнаяОбработка = Ложь;
	
	ИДНовыйРодитель = Строка;
	
	Если ИДНовыйРодитель = Неопределено Тогда
		НовыйРодитель = Неопределено;
	Иначе
		НовыйРодитель = Форма.ДеревоПредметы.НайтиПоИдентификатору(ИДНовыйРодитель);
	КонецЕсли;
	
	МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;
	
	Для Каждого ИДПереносимыйЭлемент Из МассивИДПереносимыхЭлементов Цикл
		
		ПереносимыйЭлемент = Форма.ДеревоПредметы.НайтиПоИдентификатору(ИДПереносимыйЭлемент);
		
		Если Не ПроверитьВозможностьПереноса(ПереносимыйЭлемент, НовыйРодитель) Тогда
			ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокуДереваРекурсивно(ДеревоЗначений, СтруктураОтбора) Экспорт
	
	СтрокаДерева 	= Неопределено;
	ЭлементыДерева 	= ДеревоЗначений.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		СтруктураЭлемента = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементДерева);
		
		ПоискУспешен = Ложь;
		
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			
			Если СтруктураЭлемента[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				ПоискУспешен = Истина;
			Иначе
				ПоискУспешен = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоискУспешен Тогда
			СтрокаДерева = ЭлементДерева;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева = Неопределено Тогда
		
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			СтрокаДерева = НайтиСтрокуДереваРекурсивно(ЭлементДерева, СтруктураОтбора);
			Если Не СтрокаДерева = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции

#КонецОбласти

#Область ОтборИсполнителей

Процедура ДеревоОтборовПриАктивизацииЯчейки(Форма, Элемент) Экспорт
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не Элемент.ТекущийЭлемент = Неопределено
		И Элемент.ТекущийЭлемент.Имя = "ДеревоОтборовПравоеЗначение"
		И Не ТекущиеДанные = Неопределено Тогда
		
		МассивТипов = ТекущиеДанные.ОписаниеТипа.Типы();
		Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		
		Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СписокЗначений")
			И Не ТекущиеДанные.ДоступныеЗначения = Неопределено
			И ТекущиеДанные.ДоступныеЗначения.Количество() > 0 Тогда
			
			ТекущиеДанные.ПравоеЗначение.ДоступныеЗначения = ТекущиеДанные.ДоступныеЗначения;
			
		КонецЕсли;
		
		Если Не ТекущиеДанные.ДоступныеЗначения = Неопределено
			И ТекущиеДанные.ДоступныеЗначения.Количество() > 0 Тогда
			ИспользованиеИсторииВыбора = ИсторияВыбораПриВводе.НеИспользовать;
		Иначе
			ИспользованиеИсторииВыбора = ИсторияВыбораПриВводе.Авто;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДеревоОтборовПравоеЗначение",
			"ИсторияВыбораПриВводе",
			ИспользованиеИсторииВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоОтборовПравоеЗначениеПодбор(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ТекущиеДанные 	= Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ЭлементыДереваОтборов = Форма.ДеревоОтборов.ПолучитьЭлементы();
		
		Если ЭлементыДереваОтборов.Количество() > 0 Тогда
			ТекущиеДанные = ЭлементыДереваОтборов[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТипПравогоЗначения = ТипЗнч(ТекущиеДанные.ПравоеЗначение);
		
		Если Не ТекущиеДанные.ДоступныеЗначения = Неопределено
			И ТекущиеДанные.ДоступныеЗначения.Количество() > 0
			И Не ТипПравогоЗначения = Тип("СписокЗначений") Тогда
			
			СтандартнаяОбработка 	= Ложь;
			ДанныеВыбора 			= ТекущиеДанные.ДоступныеЗначения;
			
		ИначеЕсли ТипПравогоЗначения = Тип("СправочникСсылка.Пользователи")
			Или ТипПравогоЗначения = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 
			
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ТолькоДоступные", 			Истина));
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ВсеПользователи", 			Истина));
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("СДополнительными", 			Истина));
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ОбластьДелегированияПрав", 	"ПроцессыИЗадачи"));
			
			Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоОтборовВидСравненияПриИзменении(Форма, Элемент) Экспорт
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ВидСравнения");
	СтруктураСтроки.Вставить("ПравоеЗначение");
	СтруктураСтроки.Вставить("ОписаниеТипа");
	СтруктураСтроки.Вставить("ДоступныеЗначения");
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущиеДанные);
	вогБизнесПроцессыИЗадачиВызовСервера.ДеревоОтборовВидСравненияПриИзмененииНаСервере(СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСтроки,, "ДоступныеЗначения");
	
КонецПроцедуры

#КонецОбласти

Процедура ОткрытьФормуПрисоединенныхФайловЗавершение(Форма, СсылкаНаОбъект, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", 	СсылкаНаОбъект);
	ПараметрыФормы.Вставить("ТолькоПросмотр", 	Ложь);
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ТекущаяСтрока") Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", ДополнительныеПараметры.ТекущаяСтрока);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("Идентификатор") Тогда
			ПараметрыФормы.Вставить("ИдентификаторГруппы", ДополнительныеПараметры.Идентификатор);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("НаименованиеЗадачи") Тогда
			ПараметрыФормы.Вставить("НаименованиеГруппы", ДополнительныеПараметры.НаименованиеЗадачи);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ТолькоПросмотр") Тогда
			ПараметрыФормы.ТолькоПросмотр = ДополнительныеПараметры.ТолькоПросмотр;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВидФайла") Тогда
			ПараметрыФормы.Вставить("ВидФайла", ДополнительныеПараметры.ВидФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		ПараметрыФормы,
		Форма,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Функция СформироватьУникальныйИдентификатор(Идентификатор = Неопределено) Экспорт
	
	Если Идентификатор = Неопределено Тогда
		Возврат СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
	КонецЕсли;
	
	Возврат СтрЗаменить(Идентификатор, "-", "_");
	
КонецФункции

Функция СформироватьСписокВыбораТипаПриложения(Предмет) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Предмет = Неопределено
		Или вогБизнесПроцессыИЗадачиВызовСервера.ПредметуДоступныВариантыОпроса(Предмет) Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.вогВариантыОпросов.ПустаяСсылка"), "Анкета");
	КонецЕсли;
	
	Если Предмет = Неопределено
		Или ТипЗнч(Предмет) = Тип("СправочникСсылка.Партнеры")
		Или ТипЗнч(Предмет) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Документ.CRM_Мероприятие.ПустаяСсылка"), 				"Мероприятие");
	КонецЕсли;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Документ.вогКомандировка.ПустаяСсылка"), 					"Командировка");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка"), 					"Задача");
	СписокВыбора.Добавить("", 																					"Текстовое описание");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.ПустаяСсылка"), 	"Фото");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"), 					"Номенклатура");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.вогБренды.ПустаяСсылка"), 						"Бренд");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.вогДизайныНоменклатуры.ПустаяСсылка"), 			"Дизайн");
	//СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"), 			"Договор");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"), 			"Контактное лицо");
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"), 					"Пользователь");
	//СписокВыбора.Добавить(Справочники.КоллекцииДляСайта.ПустаяСсылка(), 										"Коллекция");
	
	Возврат СписокВыбора;
	
КонецФункции

#Область ОжидаемыйРезультат

Процедура ПриложенияПередНачаломДобавленияФрагмент(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма 					= ДополнительныеПараметры.Форма;
	НаправлениеДеятельности = ДополнительныеПараметры.НаправлениеДеятельности;
	Предмет 				= ДополнительныеПараметры.Предмет;
	
	Если ВыбранноеЗначение.Представление = "Анкета" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор", 		Ложь);
		ПараметрыФормы.Вставить("ФиксированныеНастройки", 	
			СформироватьФиксированныеНастройкиОтбораВариантаОпроса(НаправлениеДеятельности, Предмет));
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриложенияПередНачаломДобавленияЗавершение", Форма);
		
		ОткрытьФорму("ПланВидовХарактеристик.вогВариантыОпросов.Форма.ФормаВыбораСгруппированная",
			ПараметрыФормы,
			,
			,
			,
			,
			ОповещениеОЗавершении,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ВыбранноеЗначение.Представление = "Фото" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор", 		Ложь);
		ПараметрыФормы.Вставить("ФиксированныеНастройки", 	СформироватьФиксированныеНастройкиОтбораВидаПрисоединенныхФайлов());
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриложенияПередНачаломДобавленияЗавершение", Форма);
		
		ОткрытьФорму("Справочник.вогВидыПрисоединенныхФайлов.ФормаВыбора",
			ПараметрыФормы,
			,
			,
			,
			,
			ОповещениеОЗавершении,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ВыбранноеЗначение.Представление = "Текстовое описание" Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриложенияПередНачаломДобавленияЗавершение", Форма);
		ПоказатьВводСтроки(ОповещениеОЗавершении, "", НСтр("ru = 'Введите описание результата'"),, Истина);
		
	Иначе
		Форма.ПриложенияПередНачаломДобавленияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриложенияВыбор(ДополнительныеПараметры) Экспорт
	
	Форма 					= ДополнительныеПараметры.Форма;
	НаправлениеДеятельности = ДополнительныеПараметры.НаправлениеДеятельности;
	Предмет 				= ДополнительныеПараметры.Предмет;
	
	ТекущиеДанные = Форма.Элементы.Приложения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Приложение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор", 		Ложь);
		ПараметрыФормы.Вставить("ФиксированныеНастройки", 	
			СформироватьФиксированныеНастройкиОтбораВариантаОпроса(НаправлениеДеятельности, Предмет));
		ПараметрыФормы.Вставить("ТекущаяСтрока", 			ТекущиеДанные.Приложение);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриложенияВыборЗавершение", Форма);
		
		ОткрытьФорму(
			"ПланВидовХарактеристик.вогВариантыОпросов.Форма.ФормаВыбораСгруппированная",
			ПараметрыФормы,
			,
			,
			,
			,
			ОповещениеОЗавершении,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Приложение) = Тип("Строка") Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриложенияВыборЗавершение", Форма);
		ПоказатьВводСтроки(
			ОповещениеОЗавершении,
			ТекущиеДанные.Приложение,
			НСтр("ru = 'Введите описание результата'"),
			,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриложенияПередНачаломИзменения(ДополнительныеПараметры) Экспорт
	
	Форма 					= ДополнительныеПараметры.Форма;
	НаправлениеДеятельности = ДополнительныеПараметры.НаправлениеДеятельности;
	Предмет 				= ДополнительныеПараметры.Предмет;
	
	ТекущиеДанные = Форма.Элементы.Приложения.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.Приложение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор", 		Ложь);
		ПараметрыФормы.Вставить("ФиксированныеНастройки", 	
			СформироватьФиксированныеНастройкиОтбораВариантаОпроса(НаправлениеДеятельности, Предмет));
		ПараметрыФормы.Вставить("ТекущаяСтрока", 			ТекущиеДанные.Приложение);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриложенияВыборЗавершение", ЭтотОбъект);
		
		ОткрытьФорму(
			"ПланВидовХарактеристик.вогВариантыОпросов.Форма.ФормаВыбораСгруппированная",
			ПараметрыФормы,
			,
			,
			,
			,
			ОповещениеОЗавершении,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Приложение) = Тип("Строка") Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриложенияВыборЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(ОповещениеОЗавершении, ТекущиеДанные.Приложение, НСтр("ru = 'Введите описание результата'"),, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДеревоПредметов

Функция СкопироватьСтрокуДерева(Форма, Приемник, Источник)
	
	Если Источник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Приемник = Неопределено Тогда
		// Добавляем в корень
		НоваяСтрока = Форма.ДеревоПредметы.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	
	КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
	
	Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
		
		ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
		СкопироватьСтрокуДерева(Форма, НоваяСтрока, ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	Если Источник.ПолучитьРодителя() = Неопределено Тогда
		Форма.ДеревоПредметы.ПолучитьЭлементы().Удалить(Источник);
	Иначе
		Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)
	
	Пока Не НовыйРодитель = Неопределено Цикл
		
		Если ПереносимыйЭлемент = НовыйРодитель Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция СформироватьФиксированныеНастройкиОтбораВариантаОпроса(НаправлениеДеятельности, Предмет)
	
	фиксНастройки = Новый НастройкиКомпоновкиДанных;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		фиксНастройки.Отбор,
		"ИспользоватьДляПоручения",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Если ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		
		НаправленияДеятельности = Новый Массив;
		НаправленияДеятельности.Добавить(НаправлениеДеятельности);
		НаправленияДеятельности.Добавить(ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			фиксНастройки.Отбор,
			"НаправлениеДеятельности",
			НаправленияДеятельности,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
	Если Не Предмет = Неопределено Тогда
		
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		//	фиксНастройки.Отбор,
		//	//"ТипыРеспондента.ТипРеспондента",
		//	"ТипРеспондента",
		//	вогБизнесПроцессыИЗадачиВызовСервера.ПолучитьТипРеспондента(Предмет),
		//	ВидСравненияКомпоновкиДанных.Равно,
		//	,
		//	,
		//	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
	Возврат фиксНастройки;
	
КонецФункции

Функция СформироватьФиксированныеНастройкиОтбораВидаПрисоединенныхФайлов()
	
	фиксНастройки = Новый НастройкиКомпоновкиДанных;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		фиксНастройки.Отбор,
		"ТипФайла",
		ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	Возврат фиксНастройки;
	
КонецФункции

#КонецОбласти
