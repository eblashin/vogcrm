////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ДОСТУПОМ

// Функция проверяет, есть ли доступ к контактной информации клиента у переданного пользователя.
//
// Параметры:
//	Клиент						- СправочникСсылка	- Клиент, владелец контакта.
//	Пользователь				- СправочникСсылка	- Пользователь, права которого проверяются.
//	ПроверятьВверхПоИерархии	- Булево			- Признак проверки пользователей вышестоящих подразделений.
//
// Возвращаемое значение:
//	Булево	- Наличие прав доступа к контактной информации.
//
Функция ЕстьДоступУровняАккаунтМенеджера(Клиент, Знач Пользователь = Неопределено, ПроверятьВверхПоИерархии = Истина) Экспорт
	
	// Если не заполнен клиент, то нет управления защитой.
	Если НЕ ЗначениеЗаполнено(Клиент) Тогда Возврат Истина; КонецЕсли;
	
	// У пользователей с полными правами всегда есть доступ уровня аккаунт менеджера.
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если пользователь не указан, то проверяем текущего пользователя.
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	АккаунтМенеджер = Клиент.ОсновнойМенеджер;
	// +ЕИС доработка для внедрения ЕИС. Если пользователь не является пользователе БД - даем доступ всем.
	Если НЕ ЗначениеЗаполнено(Клиент.ОсновнойМенеджер) Тогда
		Возврат Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Клиент.ОсновнойМенеджер) И НЕ ЗначениеЗаполнено(Клиент.ОсновнойМенеджер.ИдентификаторПользователяИБ) Тогда
		Возврат Истина;
	КонецЕсли;
	// -ЕИС
	// Если текущий пользователь является аккаунт-менеджером, то есть права доступа.
	Если Пользователь = АккаунтМенеджер Тогда Возврат Истина; КонецЕсли;
	// Проверяем, является ли пользователь руководителем в одном из вышестоящих подразделений или подразделении
	// аккаунт-менеджера.
	МассивРуководителей = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(АккаунтМенеджер);
	Если НЕ (МассивРуководителей.Найти(Пользователь) = Неопределено) Тогда
		Возврат Истина;
	КонецЕсли;
	// Проверяем,входит ли пользователь в одно из вышестоящих подразделений.
	МассивПользователей = CRM_УправлениеДоступомПовтИсп.ПолучитьПользователейВышестоящихПодразделений(АккаунтМенеджер);
	Если НЕ (МассивПользователей.Найти(Пользователь) = Неопределено) Тогда
		Возврат Истина;
	КонецЕсли;
	// Если не сработало ни одно условие.
	Возврат Ложь;
КонецФункции // ЕстьДоступУровняАккаунтМенеджера()

// Функция возвращает массив прав доступа к контакту.
//
// Параметры:
//	Клиент			- СправочникСсылка	- Клиент, владелец контакта.
//	Контакт			- СправочникСсылка	- Контакт	
//
// Возвращаемое значение:
//	Массив	- Массив прав доступа к контакту.
//
Функция ПолучитьМассивПравДоступаККонтакту(Клиент, Контакт)
	МассивПрав = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент",		Клиент);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Запрос.УстановитьПараметр("Контакт",	Контакт);
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДоступККонтактам.Клиент,
	               |	CRM_ДоступККонтактам.Контакт,
	               |	CRM_ДоступККонтактам.Подразделение КАК Подразделение,
	               |	CRM_ДоступККонтактам.Офис,
	               |	CRM_ДоступККонтактам.ОтветственныйМенеджер
	               |ИЗ
	               |	РегистрСведений.CRM_ДоступККонтактам КАК CRM_ДоступККонтактам
	               |ГДЕ
	               |	CRM_ДоступККонтактам.Клиент = &Клиент"+?(ЗначениеЗаполнено(Контакт),"
	               |	И CRM_ДоступККонтактам.Контакт = &Контакт","")+"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подразделение";
	Выборка = Запрос.Выполнить().Выбрать();				   
	Пока Выборка.Следующий() Цикл
		СтруктураПрава = Новый Структура;
		СтруктураПрава.Вставить("Клиент",			Выборка.Клиент);
		СтруктураПрава.Вставить("Контакт",			Выборка.Контакт);
		СтруктураПрава.Вставить("Подразделение",	Выборка.Подразделение);
		СтруктураПрава.Вставить("Офис",				Выборка.Офис);
		СтруктураПрава.Вставить("Ответственный",	Выборка.ОтветственныйМенеджер);
		МассивПрав.Добавить(СтруктураПрава);
	КонецЦикла;	
	Возврат МассивПрав;
КонецФункции // ПолучитьМассивПравДоступаККонтакту()

// Функция возвращает массив прав доступа к контактам клиента.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//
// Возвращаемое значение:
//	Массив	- Массив прав доступа к контактам клиента.
//
Функция ПолучитьМассивПравДоступаККлиенту(Клиент)
	МассивПрав = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент",		Клиент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДоступККонтактам.Клиент,
	               |	CRM_ДоступККонтактам.Контакт,
	               |	CRM_ДоступККонтактам.Подразделение КАК Подразделение,
	               |	CRM_ДоступККонтактам.Офис,
	               |	CRM_ДоступККонтактам.ОтветственныйМенеджер
	               |ИЗ
	               |	РегистрСведений.CRM_ДоступККонтактам КАК CRM_ДоступККонтактам
	               |ГДЕ
	               |	CRM_ДоступККонтактам.Клиент = &Клиент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Подразделение";
	Выборка = Запрос.Выполнить().Выбрать();				   
	Пока Выборка.Следующий() Цикл
		СтруктураПрава = Новый Структура;
		СтруктураПрава.Вставить("Клиент",			Выборка.Клиент);
		СтруктураПрава.Вставить("Контакт",			Выборка.Контакт);
		СтруктураПрава.Вставить("Подразделение",	Выборка.Подразделение);
		СтруктураПрава.Вставить("Офис",				Выборка.Офис);
		СтруктураПрава.Вставить("Ответственный",	Выборка.ОтветственныйМенеджер);
		МассивПрав.Добавить(СтруктураПрава);
	КонецЦикла;	
	Возврат МассивПрав;
КонецФункции // ПолучитьМассивПравДоступаККлиенту()

// Функция проверяет, есть ли право доступа к любому другому контакту у переданного пользователя.
//
// Параметры:
//	Клиент			- СправочникСсылка	- Клиент, владелец контакта.
//	Контакт			- СправочникСсылка	- Контакт			
//	Пользователь	- СправочникСсылка	- Пользователь, права которого проверяются.
//	
// Возвращаемое значение:
//	Булево	- Наличие права доступа.
//
Функция ЕстьПраваДоступаКДругомуКонтакту(Клиент, Знач Контакт = Неопределено, Знач Пользователь = Неопределено) Экспорт
	// Если контакт не указан, то используем пустаую ссылку.
	Если Контакт = Неопределено Тогда
		Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	// Если пользователь не указан, то проверяем текущего пользователя.
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент",			Клиент);
	Запрос.УстановитьПараметр("Контакт",		Контакт);
	Запрос.УстановитьПараметр("Пользователь",	Пользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДоступККонтактам.Клиент,
	               |	CRM_ДоступККонтактам.Контакт,
	               |	CRM_ДоступККонтактам.Подразделение КАК Подразделение,
	               |	CRM_ДоступККонтактам.Офис,
	               |	CRM_ДоступККонтактам.ОтветственныйМенеджер
	               |ИЗ
	               |	РегистрСведений.CRM_ДоступККонтактам КАК CRM_ДоступККонтактам
	               |ГДЕ
	               |	CRM_ДоступККонтактам.Клиент = &Клиент
	               |	И НЕ CRM_ДоступККонтактам.Контакт = &Контакт
	               |	И CRM_ДоступККонтактам.ОтветственныйМенеджер = &Пользователь";
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции // ЕстьПраваДоступаКДругомуКонтакту()

// Функция проверяет, есть ли право доступа к контакту у переданного пользователя.
//
// Параметры:
//	Клиент			- СправочникСсылка	- Клиент, владелец контакта.
//	Контакт			- СправочникСсылка	- Контакт			
//	Пользователь	- СправочникСсылка	- Пользователь, права которого проверяются.
//	
// Возвращаемое значение:
//	Булево	- Наличие права доступа.
//
Функция ЕстьПраваДоступаККонтакту(Клиент, Контакт, Знач Пользователь = Неопределено) Экспорт
	
	// Если нет владельца, то нет и права доступа.
	Если НЕ ЗначениеЗаполнено(Клиент) Тогда Возврат Ложь; КонецЕсли;
	// Если пользователь не указан, то проверяем текущего пользователя.
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	// Если текущий пользователь является ответственным менеджером, то есть право доступа.
	Если Пользователь = Клиент.ОсновнойМенеджер Тогда Возврат Истина; КонецЕсли;
	// Если текущий пользователь пользователь входит в одно подразделение с ответственным менеджером, то есть право
	// доступа.
	Если Пользователь.Подразделение = Клиент.ОсновнойМенеджер.Подразделение Тогда Возврат Истина; КонецЕсли;
	// Если у текущего пользователя есть права аккаунт-менеджера, то есть право доступа.
	Если ЕстьДоступУровняАккаунтМенеджера(Клиент, Пользователь) Тогда Возврат Истина; КонецЕсли;
	// Проверяем наличие права доступа в правах доступа.
	МассивПравДоступа = ПолучитьМассивПравДоступаККонтакту(Клиент, Контакт);
	Для Каждого ЭлементМассива Из МассивПравДоступа Цикл
		Если ЗначениеЗаполнено(ЭлементМассива.Подразделение) Тогда
			// Если текущий пользователь пользователь входит в одно подразделение с ответственным менеджером, то есть право
			// доступа.
			Если Пользователь.Подразделение = ЭлементМассива.Подразделение Тогда Возврат Истина; КонецЕсли;
			// Проверяем не является ли подраздение.
			МассивПодразделений = CRM_УправлениеДоступомПовтИсп.ПолучитьВышестоящиеПодразделения(ЭлементМассива.Ответственный, , Истина);
			Если НЕ (МассивПодразделений.Найти(Пользователь.Подразделение) = Неопределено) Тогда Возврат Истина;	КонецЕсли;
		Иначе
			// Если текущий пользователь пользователь входит в один офис с ответственным менеджером, то есть право доступа.
			Если Пользователь.Подразделение.CRM_Офис = ЭлементМассива.Офис Тогда Возврат Истина; КонецЕсли;
			МассивПодразделенийОфиса = CRM_УправлениеДоступомПовтИсп.ПолучитьВсеПодразделенияОфиса(ЭлементМассива.Офис);
			Для Каждого ЭлементМассиваОфиса Из МассивПодразделенийОфиса Цикл
				МассивПодразделений = CRM_УправлениеДоступомПовтИсп.ПолучитьВышестоящиеПодразделения(ЭлементМассиваОфиса, , Истина);
				Если НЕ (МассивПодразделений.Найти(Пользователь.Подразделение) = Неопределено) Тогда Возврат Истина;	КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	// Иначе прав нет
	Возврат Ложь;
КонецФункции // ЕстьПраваДоступаККонтакту()	

// Функция проверяет, есть ли право доступа к клиенту у переданного пользователя.
//
// Параметры:
//	Клиент			- СправочникСсылка	- Клиент, владелец контакта.
//	Контакт			- СправочникСсылка	- Контакт			
//	Пользователь	- СправочникСсылка	- Пользователь, права которого проверяются.
//	
// Возвращаемое значение:
//	Булево	- Наличие права доступа.
//
Функция ЕстьПраваДоступаККлиенту(Клиент, Знач Пользователь = Неопределено) Экспорт
	// Если нет владельца, то нет и права доступа.
	Если НЕ ЗначениеЗаполнено(Клиент) Тогда Возврат Истина; КонецЕсли;
	// Если пользователь не указан, то проверяем текущего пользователя.
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	// Если текущий пользователь является ответственным менеджером, то есть право доступа.
	Если Пользователь = Клиент.ОсновнойМенеджер Тогда Возврат Истина; КонецЕсли;
	// Если текущий пользователь пользователь входит в одно подразделение с ответственным менеджером, то есть право
	// доступа.
	Если Пользователь.Подразделение = Клиент.ОсновнойМенеджер.Подразделение Тогда Возврат Истина; КонецЕсли;
	// Если у текущего пользователя есть права аккаунт-менеджера, то есть право доступа.
	Если ЕстьДоступУровняАккаунтМенеджера(Клиент, Пользователь) Тогда Возврат Истина; КонецЕсли;
	// Проверяем наличие права доступа в правах доступа.
	МассивПравДоступа = ПолучитьМассивПравДоступаККлиенту(Клиент);
	Для Каждого ЭлементМассива Из МассивПравДоступа Цикл
		Если ЗначениеЗаполнено(ЭлементМассива.Подразделение) Тогда
			// Если текущий пользователь пользователь входит в одно подразделение с ответственным менеджером, то есть право
			// доступа.
			Если Пользователь.Подразделение = ЭлементМассива.Подразделение Тогда Возврат Истина;	КонецЕсли;
			МассивПодразделений = CRM_УправлениеДоступомПовтИсп.ПолучитьВышестоящиеПодразделения(ЭлементМассива.Ответственный, , Истина);
			Если НЕ (МассивПодразделений.Найти(Пользователь.Подразделение) = Неопределено) Тогда Возврат Истина;	КонецЕсли;
		Иначе
			// Если текущий пользователь пользователь входит в один офис с ответственным менеджером, то есть право доступа.
			Если Пользователь.Подразделение.CRM_Офис = ЭлементМассива.Офис Тогда Возврат Истина; КонецЕсли;
			МассивПодразделенийОфиса = CRM_УправлениеДоступомПовтИсп.ПолучитьВсеПодразделенияОфиса(ЭлементМассива.Офис);
			Для Каждого ЭлементМассиваОфиса Из МассивПодразделенийОфиса Цикл
				МассивПодразделений = CRM_УправлениеДоступомПовтИсп.ПолучитьВышестоящиеПодразделения(ЭлементМассиваОфиса, , Истина);
				Если НЕ (МассивПодразделений.Найти(Пользователь.Подразделение) = Неопределено) Тогда Возврат Истина;	КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	// Иначе прав нет
	Возврат Ложь;
КонецФункции // ЕстьПраваДоступаККлиенту()

// Функция проверяет, есть ли запись по контакту с основным менеджером.
//
// Параметры:
//	Клиент			- СправочникСсылка	- Клиент, владелец контакта.
//	Контакт			- СправочникСсылка	- Контакт			
//	Пользователь	- СправочникСсылка	- Пользователь, права которого проверяются.
//	
// Возвращаемое значение:
//	Булево	- Наличие права доступа.
//
Функция ЕстьЗаписьСОсновнымМенеджером(Клиент, Контакт) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Клиент",		Клиент);
	Запрос.УстановитьПараметр("Контакт",	Контакт);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДоступККонтактам.Клиент,
	               |	CRM_ДоступККонтактам.Контакт,
	               |	CRM_ДоступККонтактам.Подразделение КАК Подразделение,
	               |	CRM_ДоступККонтактам.Офис,
	               |	CRM_ДоступККонтактам.ОтветственныйМенеджер
	               |ИЗ
	               |	РегистрСведений.CRM_ДоступККонтактам КАК CRM_ДоступККонтактам
	               |ГДЕ
	               |	CRM_ДоступККонтактам.Клиент = &Клиент
	               |	И CRM_ДоступККонтактам.Контакт = &Контакт
	               |	И CRM_ДоступККонтактам.Основной = ИСТИНА";
				   
	Выборка = Запрос.Выполнить().Выбрать();				   
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции // ЕстьЗаписьСОсновнымМенеджером()	

// Процедура убират признак Основной у старых записей.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//	Контакт	- СправочникСсылка	- Контакт
//  Автор	- СправочникСсылка	- Автор
//	Основной	- Булево, по умолчанию Люжь.
//	Заместить	- Булево, по умолчанию Истина.
//
Процедура УбратьПризнакОсновнойУСтарыхЗаписей(Клиент, Контакт) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ДоступККонтактам.Клиент,
		|	CRM_ДоступККонтактам.Контакт,
		|	CRM_ДоступККонтактам.Подразделение,
		|	CRM_ДоступККонтактам.Офис,
		|	CRM_ДоступККонтактам.ОтветственныйМенеджер
		|ИЗ
		|	РегистрСведений.CRM_ДоступККонтактам КАК CRM_ДоступККонтактам
		|ГДЕ
		|	CRM_ДоступККонтактам.Клиент = &Клиент
		|	И CRM_ДоступККонтактам.Контакт = &Контакт
		|	И CRM_ДоступККонтактам.Основной = ИСТИНА";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_ДоступККонтактам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Клиент 			= Выборка.Клиент;
		МенеджерЗаписи.Контакт			= Выборка.Контакт;
		МенеджерЗаписи.Подразделение 	= Выборка.Подразделение;
		МенеджерЗаписи.Офис				= Выборка.Офис;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ОтветственныйМенеджер 	= Выборка.ОтветственныйМенеджер;
			МенеджерЗаписи.Основной 				= Ложь;
		КонецЕсли;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры // УбратьПризнакОсновнойУСтарыхЗаписей()	

// Процедура добавляет или обновляет право доступа к клиенту для основного менеджера.
//
// Параметры:
//	Клиент				- СправочникСсылка	- Клиент
//  ОсновнойМенеджер	- СправочникСсылка	- Основной менеджер.
//
Процедура ДобавитьОбновитьПравоДоступаККлиенту(Клиент, ОсновнойМенеджер) Экспорт
	НаборЗаписей = РегистрыСведений.CRM_ДоступККонтактам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Клиент.Установить(Клиент);
	НаборЗаписей.Отбор.Контакт.Установить(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Если ЗначениеЗаполнено(ОсновнойМенеджер) Тогда
		// Добавляем новую запись
		НоваяЗапись							= НаборЗаписей.Добавить();
		НоваяЗапись.Клиент					= Клиент;
		НоваяЗапись.Контакт					= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		НоваяЗапись.Подразделение			= ОсновнойМенеджер.Подразделение;
		НоваяЗапись.Офис					= ОсновнойМенеджер.Подразделение.CRM_Офис;
		НоваяЗапись.ОтветственныйМенеджер	= ОсновнойМенеджер;
	КонецЕсли;	
	НаборЗаписей.Записать(Истина);
КонецПроцедуры // ДобавитьОбновитьПравоДоступаККлиенту()	

// Процедура добавляет автору право доступа к контакту.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//	Контакт	- СправочникСсылка	- Контакт
//  Автор	- СправочникСсылка	- Автор
//	Основной	- Булево, по умолчанию Люжь.
//	Заместить	- Булево, по умолчанию Истина.
//
Процедура ДобавитьПравоДоступаККонтакту(Клиент, Контакт, Ответственный, Подразделение, Офис, Основной = Ложь, Заместить = Истина) Экспорт
	// Убрать запись об отвественном.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ДоступККонтактам.Клиент,
		|	CRM_ДоступККонтактам.Контакт,
		|	CRM_ДоступККонтактам.Подразделение,
		|	CRM_ДоступККонтактам.Офис,
		|	CRM_ДоступККонтактам.ОтветственныйМенеджер
		|ИЗ
		|	РегистрСведений.CRM_ДоступККонтактам КАК CRM_ДоступККонтактам
		|ГДЕ
		|	CRM_ДоступККонтактам.Клиент = &Клиент
		|	И CRM_ДоступККонтактам.Контакт = &Контакт
		|	И CRM_ДоступККонтактам.Основной = ИСТИНА";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_ДоступККонтактам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Клиент 			= Выборка.Клиент;
		МенеджерЗаписи.Контакт			= Выборка.Контакт;
		МенеджерЗаписи.Подразделение 	= Выборка.Подразделение;
		МенеджерЗаписи.Офис				= Выборка.Офис;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ОтветственныйМенеджер 	= Выборка.ОтветственныйМенеджер;
			МенеджерЗаписи.Основной 				= Ложь;
		КонецЕсли;
		МенеджерЗаписи.Записать();
	КонецЦикла;

	// записать ответсвенного
	НоваяЗапись							= РегистрыСведений.CRM_ДоступККонтактам.СоздатьМенеджерЗаписи();
	НоваяЗапись.Клиент					= Клиент;
	НоваяЗапись.Контакт					= Контакт;
	НоваяЗапись.Подразделение			= Подразделение;
	НоваяЗапись.Офис					= Офис;
	НоваяЗапись.ОтветственныйМенеджер	= Ответственный;
	НоваяЗапись.Основной				= Основной;
	Попытка
		НоваяЗапись.Записать(Истина);
	Исключение
	КонецПопытки;	
КонецПроцедуры // ДобавитьПравоДоступаККонтакту()	

// Процедура добавляет автору право доступа к контакту.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//	Контакт	- СправочникСсылка	- Контакт
//  Автор	- СправочникСсылка	- Автор
//
Процедура ДобавитьАвторуПравоДоступаККонтакту(Клиент, Контакт, Автор) Экспорт
	Подразделение	= Автор.Подразделение;
	Офис			= Автор.Подразделение.CRM_Офис;
	ДобавитьПравоДоступаККонтакту(Клиент, Контакт, Автор, Подразделение, Офис);
КонецПроцедуры // ДобавитьАвторуПравоДоступаККонтакту()	

// Функция возвращает аккаунт-менеджера для переданного контакта.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Клиент или контакт, для которого возвращается аккаунт-менеджер.
//
// Возвращаемое значение:
//	СправочникСсылка	- Аккаунт-менеджер
//
Функция ПолучитьАккаунтМенеджера(Контакт) Экспорт
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат Контакт.ОсновнойМенеджер;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Возврат Контакт.Владелец.ОсновнойМенеджер;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	
КонецФункции // ПолучитьАккаунтМенеджера()
