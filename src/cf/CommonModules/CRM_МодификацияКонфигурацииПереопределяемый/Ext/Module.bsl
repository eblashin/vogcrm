////////////////////////////////////////////////////////////////////////////////
// Переопределяемые процедуры, вызываемые из обработчиков форм, таких как:
// "ПриСозданииНаСервере", "ПриЧтенииНаСервере", "ПередЗаписьюНаСервере", 
// "ПослеЗаписи", а также при изменении некоторых реквизитов табличной части,
// таких как "Номенклатура", "Характеристика".
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеОбработчиковФормы

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Кнопка = Форма.Элементы.Найти("ФормаОбщаяКомандаНапомнить");
	
	Если Кнопка <> Неопределено Тогда
		
		Кнопка.Видимость = Ложь;
		
	КонецЕсли;
	
	// +CRM
	Попытка
		Форма_Объект = Форма.Объект;
		Если НЕ ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(Форма.Объект.Ссылка) Тогда
				CRM_БизнесПроцессыСервер.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
			КонецЕсли;
		КонецЕсли;
		CRM_ТригерыСервер.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	Исключение
	КонецПопытки;
	// -CRM
	
	// + вог Программное создание статусов
	СоздатьСтатусыДокументов(Форма,Ложь);
	// - вог Программное создание статусов
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	Попытка
		Форма_Объект = Форма.Объект;
		Если НЕ ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(Форма.Объект.Ссылка) Тогда
				CRM_БизнесПроцессыСервер.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
			КонецЕсли;
		КонецЕсли;
		CRM_ТригерыСервер.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	Попытка
		Форма_Объект = Форма.Объект;
		Если НЕ ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(Форма.Объект.Ссылка) Тогда
				CRM_БизнесПроцессыСервер.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
			КонецЕсли;
		КонецЕсли;
		CRM_ТригерыСервер.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНоменклатуры

// Переопределяемая процедура, вызываемая из обработчика реквизита "Номенклатура" табличной части.
//
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка табличной части.
// 	ПараметрыДействия - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - Структура - Кэшированные значения табличной части.
Процедура НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока, ПараметрыДействия, КэшированныеЗначения)Экспорт


КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеХарактеристики

// Переопределяемая процедура, вызываемая из обработчика реквизита "Характеристика" табличной части.
//
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка табличной части.
// 	ПараметрыДействия - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - Структура - Кэшированные значения табличной части.
Процедура ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока, ПараметрыДействия, КэшированныеЗначения)Экспорт


КонецПроцедуры
	
#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ++ Тищенко В.В. 
Процедура СоздатьСтатусыДокументов(Форма, УдалитьКнопки = Ложь) Экспорт
	
	Если Форма.Элементы.Найти("КоманднаяПаенльФормыПрограммно") <> Неопределено Тогда
		
		ИмяТаблицы 			= "ТаблицаКнопок";
		ИмяСписокРеквизитов = "УдаляемыеРеквизиты";
		
		// { VOG RMV 2019-03-01
		ЭтоПолноправныйПользователь = РольДоступна("ПолныеПрава"); //Пользователи.ЭтоПолноправныйПользователь();
		// } VOG RMV 2019-03-01
		
		Если УдалитьКнопки Тогда
			// ++ VOG Солодов В.В. 14.06.2019 task 351
			// рефакторинг
			УдалитьРеквизитыФормы(ИмяСписокРеквизитов, ИмяТаблицы, Форма);
			// -- VOG Солодов В.В. 14.06.2019
		КонецЕсли;
		
		// ++ VOG Солодов В.В. 14.06.2019 task 351
		//МассивСтрок 		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы,".");
		//ИмяОбъекта 			= МассивСтрок[1];
		// рефакторинг
		СтруктураРеквизитов = СформироватьСтруктуруРеквизитов(Форма.Объект.ВариантОпроса.СостояниеПроцессов, Форма); // ++ VOG Солодов В.В. 05.10.2020 CRM-932 // Добавлен параметр Форма
		// -- VOG Солодов В.В. 14.06.2019
		
		// ++ VOG Солодов В.В. 14.06.2019 task 351
		Если Не ПроверкаДоступностиКнопкиСогласоватьПоРолиТекущегоПользователя(Форма, СтруктураРеквизитов) Тогда
			
			АнкетаСсылка = Форма.Объект.Ссылка;
		// -- VOG Солодов В.В. 14.06.2019
			
			Для Каждого Стр Из СтруктураРеквизитов.СтатусыДокументов Цикл
				
				// ++ VOG Солодов В.В. 19.06.2019
				СтруктураПроверки = Новый Структура;
				СтруктураПроверки.Вставить("АнкетаСсылка", 					АнкетаСсылка);
				СтруктураПроверки.Вставить("ОтборПоКнопке", 				Истина);
				СтруктураПроверки.Вставить("ВидимостьКнопки", 				Ложь);
				СтруктураПроверки.Вставить("ЭтоПолноправныйПользователь", 	ЭтоПолноправныйПользователь);
				СтруктураПроверки.Вставить("СтатусКоманды", 				СтруктураРеквизитов.СтатусКоманды);
				// ++ VOG Солодов В.В. 05.10.2020 CRM-932
				СтруктураПроверки.Вставить("ВозможноСогласование", 			СтруктураРеквизитов.ВозможноСогласование);
				// -- VOG Солодов В.В. 05.10.2020 CRM-932
				
				// { VOG RMV 2019-03-01
				Если ЭтоПолноправныйПользователь = Ложь Тогда
					// } VOG RMV 2019-03-01
					
					// ++ VOG Солодов В.В. 19.06.2019
					//ОтборПоКнопке 	= Истина;
					//ВидимостьКнопки = Ложь;
					// -- VOG Солодов В.В. 19.06.2019
					
					// ++ VOG Солодов В.В. 14.06.2019 task 351
					// рефакторинг
					// Видимость
					ПроверкаДоступностиКнопкиПоУсловию(Стр, СтруктураПроверки.ВидимостьКнопки);
					// Проверка условия Страница Условия
					//ПроверкаВыполненияУсловийОтбора(АнкетаСсылка, Стр, ОтборПоКнопке, СтруктураРеквизитов.СтатусКоманды);
					//ПроверкаВыполненияУсловийОтбора(Стр, СтруктураПроверки);
					// -- VOG Солодов В.В. 14.06.2019
					
					// { VOG RMV 2019-03-01
				Иначе
					
					// ++ VOG Солодов В.В. 19.06.2019
					//НастройкиОтбора = ЗначениеИзСтрокиВнутр(Стр.Отбор);
					//СтруктураРеквизитов.СтатусКоманды	= НастройкиОтбора.Статус;
					// -- VOG Солодов В.В. 19.06.2019
					
				КонецЕсли;
				// } VOG RMV 2019-03-01
				
				// ++ VOG Солодов В.В. 19.06.2019
				ПроверкаВыполненияУсловийОтбора(Стр, СтруктураПроверки);
				// -- VOG Солодов В.В. 19.06.2019
				
				// Создание кнопок
				// { VOG RMV 2019-03-01
				//Если Стр.Настройки <> "" И ВидимостьКнопики И ОтборПоКнопке Тогда
				// ++ VOG Солодов В.В. 19.06.2019
				Если Стр.Настройки <> "" 
					И СтруктураПроверки.ОтборПоКнопке 
					И (ЭтоПолноправныйПользователь 
						ИЛИ СтруктураПроверки.ВидимостьКнопки) Тогда
				//Если Стр.Настройки <> "" И ОтборПоКнопке И (ЭтоПолноправныйПользователь ИЛИ ВидимостьКнопки) Тогда
				// До изменения
				//Если Стр.Настройки <> "" И ЭтоПолноправныйПользователь ИЛИ (ВидимостьКнопки И ОтборПоКнопке) Тогда
				// -- VOG Солодов В.В. 19.06.2019
					// ++ VOG Солодов В.В. 14.06.2019 task 351 
					// рефакторинг
					СтруктураРеквизитов.СтатусКоманды = СтруктураПроверки.СтатусКоманды;
					
					ДобавитьКнопкуСтатуса(Форма, Стр, СтруктураРеквизитов);
					// -- VOG Солодов В.В. 14.06.2019
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Произволный код статуса
		
		// ++ VOG Солодов В.В. 14.06.2019 task 351 
		// рефакторинг
		СоздатьРеквизитыФормы(Форма, ИмяТаблицы, ИмяСписокРеквизитов, СтруктураРеквизитов); 
		// -- VOG Солодов В.В. 14.06.2019
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьРеквизитыФормы(ИмяСписокРеквизитов, ИмяТаблицы, Форма)
	
	Если Форма[ИмяТаблицы].Количество() <> 0 Тогда
		
		Для Каждого СтрКомандаФормы Из Форма[ИмяТаблицы] Цикл
			Форма.Команды.Удалить(Форма.Команды[СтрКомандаФормы.ИмяКоманды]);
			Форма.Элементы.Удалить(Форма.Элементы[СтрКомандаФормы.ИмяЭлемента]);
		КонецЦикла;
		// Удаление реквизитов
		МассивУдаляемыхРеквизитов 		= Новый Массив;
		МассивИменУдаляемыхРеквизитов 	= ЗначениеИзСтрокиВнутр(Форма[ИмяСписокРеквизитов]);
		РеквизитыФормы 					= Форма.ПолучитьРеквизиты();
		
		Для Каждого УдаляемыйЭлемент Из МассивИменУдаляемыхРеквизитов Цикл
			Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
				Если РеквизитФормы.Имя = УдаляемыйЭлемент Тогда
					МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Форма.Изменитьреквизиты(, МассивУдаляемыхреквизитов);
		
	КонецЕсли;

КонецПроцедуры // -- Тищенко В.В.

Функция СформироватьСтруктуруРеквизитов(Знач СостояниеПроцессов, Форма);
	
	// ++ VOG Солодов В.В. 05.10.2020 CRM-932
	ИсключаемыеСтатусы 		= Новый Массив;
	ВозможноСогласование 	= Неопределено;
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование)
		И ТипЗнч(Форма.Объект.ДокументОснование) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		
		СостояниеПроцессов_УИД = Новый УникальныйИдентификатор("cd9f8411-2f6c-11e9-b0ca-005056bcd3e3");
		СостояниеПроцессов = Справочники.вогСостояниеПроцессов.ПолучитьСсылку(СостояниеПроцессов_УИД);
		
		ВозможноСогласование = Форма.Параметры.ВозможноСогласование;
		
		Если ВозможноСогласование = Истина Тогда
			ИсключаемыеСтатусы.Добавить(Справочники.вогШаблоныСтатусов.НаСогласовании);
		Иначе
			ИсключаемыеСтатусы.Добавить(Справочники.вогШаблоныСтатусов.НаСогласовании);
			ИсключаемыеСтатусы.Добавить(Справочники.вогШаблоныСтатусов.Проверено);
			ИсключаемыеСтатусы.Добавить(Справочники.вогШаблоныСтатусов.Согласован);
			ИсключаемыеСтатусы.Добавить(Справочники.вогШаблоныСтатусов.НеСогласован);
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 05.10.2020 CRM-932
	
	ТЗСтатусы = Новый ТаблицаЗначений;
	ТЗСтатусы.Колонки.Добавить("ИмяКоманды"	, 			Новый ОписаниеТипов("Строка"));
	ТЗСтатусы.Колонки.Добавить("ИмяЭлемента", 			Новый ОписаниеТипов("Строка"));
	ТЗСтатусы.Колонки.Добавить("Статус"	, 				Новый ОписаниеТипов("СправочникСсылка.вогШаблоныСтатусов"));
	
	СтруктураРеквизитов = Новый Структура;
	// ++ VOG Солодов В.В. 25.06.2019 
	// ++ VOG Солодов В.В. 05.10.2020 CRM-932
	Если ИсключаемыеСтатусы.Количество() > 0 Тогда
		
		врТаблицаСтатусов 	= СостояниеПроцессов.Статусы.Выгрузить();
		ТаблицаСтатусов 	= врТаблицаСтатусов.СкопироватьКолонки();
		
		Для Каждого СтрокаТабличнойЧасти Из врТаблицаСтатусов Цикл
			
			НастройкиОтбора = ЗначениеИзСтрокиВнутр(СтрокаТабличнойЧасти.Отбор);
			
			Если Не ИсключаемыеСтатусы.Найти(НастройкиОтбора.Статус) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаСтатусов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
		СтруктураРеквизитов.Вставить("СтатусыДокументов", ТаблицаСтатусов);
		
	Иначе
		СтруктураРеквизитов.Вставить("СтатусыДокументов", 	СостояниеПроцессов.Статусы.Выгрузить());
	КонецЕсли;
	// До изменения
	//СтруктураРеквизитов.Вставить("СтатусыДокументов", 	СостояниеПроцессов.Статусы.Выгрузить());
	// -- VOG Солодов В.В. 05.10.2020 CRM-932
	// До изменения
	//СтруктураРеквизитов.Вставить("СтатусыДокументов", 	Справочники.вогСостояниеПроцессов.ПустаяСсылка());
	// -- VOG Солодов В.В. 25.06.2019
	СтруктураРеквизитов.Вставить("СписокКнопок", 		Новый СписокЗначений);
	СтруктураРеквизитов.Вставить("СписокОбработчиков", 	Новый Соответствие);
	СтруктураРеквизитов.Вставить("СтатусКоманды", 		Справочники.вогШаблоныСтатусов.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("ТЗСтатусы", 			ТЗСтатусы);
	// ++ VOG Солодов В.В. 05.10.2020 CRM-932
	СтруктураРеквизитов.Вставить("ВозможноСогласование", ВозможноСогласование);
	// -- VOG Солодов В.В. 05.10.2020 CRM-932
	
	// ++ VOG Солодов В.В. 25.06.2019
	// До изменения
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СостояниеПроцессов.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.вогСостояниеПроцессов КАК СостояниеПроцессов
	//|ГДЕ
	//|	НЕ СостояниеПроцессов.ПометкаУдаления
	//|	И СостояниеПроцессов.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", СостояниеПроцессов);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если Не РезультатЗапроса.Пустой() Тогда
	//	
	//	ВыборкаИзРезультатаЗапроса 				= Результатзапроса.Выбрать();
	//	
	//	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
	//		СтатусыДокументов 					= ВыборкаИзРезультатаЗапроса.Ссылка;
	//	КонецЕсли;
	//	
	//	СтруктураРеквизитов.СтатусыДокументов 	= СтатусыДокументов.Статусы.Выгрузить();
	//	
	//КонецЕсли;
	// -- VOG Солодов В.В. 25.06.2019
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Процедура ПроверкаДоступностиКнопкиПоУсловию(СтатусСостоянияПроцессов, ВидимостьКнопки)
	
	Если Не ЗначениеЗаполнено(СтатусСостоянияПроцессов.ДоступностьПоСтатусу) Тогда
		ВидимостьКнопки = Истина;
		Возврат;
	КонецЕсли;
	
	НастройкиДоступности = ЗначениеИзСтрокиВнутр(СтатусСостоянияПроцессов.ДоступностьПоСтатусу);
	
	// Видимость по ролям
	Если НастройкиДоступности.ПереключательПользовательРоли = 0 Тогда
		
		КоллекцияРолей = НастройкиДоступности.ДоступностьТаблица;
		
		Если КоллекцияРолей.Количество() <> 0 Тогда
			
			Для Каждого СтрРоль Из КоллекцияРолей Цикл
				ОбъектМетаданных = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектМетаданныхПоИдентификатору(СтрРоль.Роль);
				Если РольДоступна(ОбъектМетаданных.Имя) Тогда
					ВидимостьКнопки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ВидимостьКнопки = Истина;
		КонецЕсли;
		
		// Видимость по пользователям
	ИначеЕсли НастройкиДоступности.ПереключательПользовательРоли = 1 Тогда
		
		СписокПользователей 		= Новый Массив;
		СтрокиДеревоПользователей 	= НастройкиДоступности.ДоступностьТаблица.Строки;
		
		Для Каждого ВерхнийУровеньСтрок Из СтрокиДеревоПользователей Цикл
			СписокПользователей.Добавить(ВерхнийУровеньСтрок.Пользователь);
			Для Каждого НижнийУровеньСтрок Из ВерхнийУровеньСтрок.Строки Цикл
				СписокПользователей.Добавить(НижнийУровеньСтрок.Пользователь);
			КонецЦикла;
		КонецЦикла;
		
		Если СписокПользователей.Количество() <> 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_СписокПользователей
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Ссылка В ИЕРАРХИИ(&СписокПользователей)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_СписокПользователей.Ссылка КАК Ссылка
			|ИЗ
			|	ВТ_СписокПользователей КАК ВТ_СписокПользователей
			|ГДЕ
			|	ВТ_СписокПользователей.Ссылка = &ТекущийПользователь";
			
			Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() тогда
				ВидимостьКнопки = Истина;
			КонецЕсли;
		Иначе	
			ВидимостьКнопки = Истина;
		КонецЕсли;
		// { VOG RMV 2019-02-08
		// Видимость кнопки по ролям исполнителей
		//ИначеЕсли	НастройкиДоступности.ПереключательПользовательРоли = 2 Тогда
		//	
		//	// ++ Тищенко В.В. 18.02.2019
		//	// Появляется кнопка когда условие не выполняется
		//	// Изменил запрос
		//	
		//		// Оригинал
		//		//Запрос = Новый Запрос;
		//		//Запрос.Текст = "ВЫБРАТЬ
		//		//|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
		//		//|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
		//		//|ПОМЕСТИТЬ втРоли
		//		//|ИЗ
		//		//|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		//		//|ГДЕ
		//		//|	ИсполнителиЗадач.Исполнитель = &Исполнитель
		//		//|;
		//		//|
		//		//|////////////////////////////////////////////////////////////////////////////////
		//		//|ВЫБРАТЬ
		//		//|	1 КАК Поле1
		//		//|ИЗ
		//		//|	(ВЫБРАТЬ
		//		//|		втРоли.РольИсполнителя КАК РольИсполнителя
		//		//|	ИЗ
		//		//|		втРоли КАК втРоли
		//		//|	
		//		//|	ОБЪЕДИНИТЬ
		//		//|	
		//		//|	ВЫБРАТЬ
		//		//|		ИсполнителиЗадач.РольИсполнителя
		//		//|	ИЗ
		//		//|		РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		//		//|	ГДЕ
		//		//|		ИсполнителиЗадач.ОсновнойОбъектАдресации В
		//		//|				(ВЫБРАТЬ
		//		//|					СтруктураПредприятия.Ссылка КАК Ссылка
		//		//|				ИЗ
		//		//|					Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		//		//|				ГДЕ
		//		//|					СтруктураПредприятия.Ссылка В ИЕРАРХИИ
		//		//|						(ВЫБРАТЬ
		//		//|							втРоли.ОсновнойОбъектАдресации
		//		//|						ИЗ
		//		//|							втРоли))) КАК Роли
		//		//|ГДЕ
		//		//|	Роли.РольИсполнителя В(&РолиИсполнителей)";
		//		
		//		
		//		Если РольДоступна("ПолныеПрава") Тогда
		//			ВидимостьКнопики = Истина;	
		//		Иначе
		//			// Новый запрос
		//		Запрос = Новый Запрос("ВЫБРАТЬ
		//		                      |	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		//		                      |ИЗ
		//		                      |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		//		                      |ГДЕ
		//		                      |	ИсполнителиЗадач.РольИсполнителя В(&РолиИсполнителей)
		//		                      |	И ИсполнителиЗадач.Исполнитель В (&Исполнитель)");
		//		
		//		// -- Тищенко В.В. 
		
		//		Запрос.УстановитьПараметр("Исполнитель"		, ПараметрыСеанса.вогПодчиненныеСотрудники);
		//		Запрос.УстановитьПараметр("РолиИсполнителей", НастройкиДоступности.ДоступностьТаблица.ВыгрузитьКолонку("Роль"));
		//		РезультатЗапроса = Запрос.Выполнить();
		//		
		//		ВидимостьКнопики = Не РезультатЗапроса.Пустой();
		
		//		КонецЕсли;
		//							
		// } VOG RMV 2019-02-08
	Иначе
		ВидимостьКнопки = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаВыполненияУсловийОтбора(СтатусСостояния, СтруктураПроверки)
//Процедура ПроверкаВыполненияУсловийОтбора(АнкетаСсылка, СтатусСостояния, ОтборПоКнопке, СтатусКоманды)
	
	Если Не ЗначениеЗаполнено(СтатусСостояния.Отбор) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтбора = ЗначениеИзСтрокиВнутр(СтатусСостояния.Отбор);
	СтруктураПроверки.СтатусКоманды	= НастройкиОтбора.Статус;
	
	Если Не СтруктураПроверки.ЭтоПолноправныйПользователь 
		И НастройкиОтбора.СхемаКомпановкиДанных <> Справочники.вогШаблоныСхемКомпановкиДанных.ПустаяСсылка() Тогда
		
		Если НастройкиОтбора.НовыйОбъект И СтруктураПроверки.АнкетаСсылка.Пустая() Тогда
			Если НастройкиОтбора.РежимВыполненеияУсловия = 0 Тогда
				СтруктураПроверки.ОтборПоКнопке = НастройкиОтбора.ВидимостьКнопки;
			КонецЕсли;						
		Иначе
			// Проверка схемы СКД
			// ++ VOG Солодов В.В. 05.10.2020 CRM-932
			РеквизитыСхемы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				НастройкиОтбора.СхемаКомпановкиДанных,
				"ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных");
			
			СтруктураУсловия = Новый Структура;
			СтруктураУсловия.Вставить("ХранилищеСхемыКомпоновкиДанных", РеквизитыСхемы.ХранилищеСхемыКомпоновкиДанных);
			
			СтатусАнкеты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПроверки.АнкетаСсылка, "Статус");
			
			Если СтруктураПроверки.ВозможноСогласование = Истина
				И СтатусАнкеты = Справочники.вогШаблоныСтатусов.Зарегистрирован
				И (НастройкиОтбора.Статус = Справочники.вогШаблоныСтатусов.Согласован
					Или НастройкиОтбора.Статус = Справочники.вогШаблоныСтатусов.НеСогласован) Тогда
				
				НастройкаКомпоновкиДанных = РеквизитыСхемы.ХранилищеНастроекКомпоновкиДанных.Получить();
				
				Для Каждого ЭлементОтбора Из НастройкаКомпоновкиДанных.Отбор.Элементы Цикл
					
					Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.вогШаблоныСтатусов") Тогда
						
						ЭлементОтбора.ПравоеЗначение = СтатусАнкеты;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				СтруктураУсловия.Вставить("ХранилищеНастроекКомпоновкиДанных", Новый ХранилищеЗначения(НастройкаКомпоновкиДанных));
				
			Иначе
				СтруктураУсловия.Вставить("ХранилищеНастроекКомпоновкиДанных", РеквизитыСхемы.ХранилищеНастроекКомпоновкиДанных);
			КонецЕсли;
			
			РезультатОтбора = Справочники.вогШаблоныСхемКомпановкиДанных.ПроверкаУсловияСтатуса(
				СтруктураПроверки.АнкетаСсылка,
				СтруктураУсловия);
			// До изменения
			//РезультатОтбора = Справочники.вогШаблоныСхемКомпановкиДанных.ПроверкаУсловияСтатуса(
			//	СтруктураПроверки.АнкетаСсылка, 
			//	НастройкиОтбора.СхемаКомпановкиДанных);
			// -- VOG Солодов В.В. 05.10.2020 CRM-932
			// РезультатОтбора - Истина - СКД Пустой
			// РезультатОтбора- Ложть - Есть данные
			Если РезультатОтбора <> Неопределено Тогда	
				РезультатСравненения = НастройкиОтбора.РезультатУсловия;
				// Видимость кнопки
				Если НастройкиОтбора.РежимВыполненеияУсловия = 0 Тогда
					Если РезультатСравненения <> РезультатОтбора Тогда
						СтруктураПроверки.ОтборПоКнопке = Не НастройкиОтбора.ВидимостьКнопки;
					Иначе
						СтруктураПроверки.ОтборПоКнопке = НастройкиОтбора.ВидимостьКнопки;
					КонецЕсли;
					// Сообщение	
				Иначе	
					// Нет обработчика	
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Настройка видимости без использования СКД
	Иначе
		Если НастройкиОтбора.НовыйОбъект И СтруктураПроверки.АнкетаСсылка.Пустая() И НастройкиОтбора.ВидимостьКнопки Тогда
			СтруктураПроверки.ОтборПоКнопке = НастройкиОтбора.ВидимостьКнопки;
		ИначеЕсли НЕ НастройкиОтбора.НовыйОбъект И НЕ СтруктураПроверки.АнкетаСсылка.Пустая() Тогда
			СтруктураПроверки.ОтборПоКнопке = НастройкиОтбора.ВидимостьКнопки;
		Иначе 
			СтруктураПроверки.ОтборПоКнопке = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаДоступностиКнопкиЗаписиПоРолиТекущегоПользователя(ТекущийДокумент) Экспорт
	
	КнопкаДоступна = Ложь;
	
	Если ЗначениеЗаполнено(ТекущийДокумент.Объект.Респондент) Тогда
		КнопкаДоступна = Истина;
	КонецЕсли;
	
	Возврат КнопкаДоступна;
	
КонецФункции

Функция ПроверкаДоступностиКнопкиСогласоватьПоРолиТекущегоПользователя(Форма, СтруктураРеквизитов)
	
	КнопкаДоступна = Ложь;
	ЭтоНовыйОбъект = Форма.Объект.Ссылка.Пустая();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// ++ VOG Солодов В.В. 05.09.2019 task 605
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ИсполнительДелегат,
	|	вогИсполнителиРолейИДелегаты.РольПользователь КАК РольПользователь
	|ПОМЕСТИТЬ ВТ_Делегаты
	|ИЗ
	|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
	|ГДЕ
	|	вогИсполнителиРолейИДелегаты.РольПользователь = &Автор
	|	И вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
	|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = ""Анкеты""
	|	И вогИсполнителиРолейИДелегаты.Запись = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.вогРолиИсполнителейПоВариантамОпроса КАК вогРолиИсполнителейПоВариантамОпроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|		ПО вогРолиИсполнителейПоВариантамОпроса.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
	|			И (вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса = &ВариантОпроса)
	|			И (ИсполнителиЗадач.Исполнитель = &Автор)
	|			И (ИсполнителиЗадач.Исполнитель = &ТекущийПользователь)
	|			И (ВЫРАЗИТЬ(вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса КАК ПланВидовХарактеристик.вогВариантыОпросов).ПрямоеСогласование = ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Делегаты.ИсполнительДелегат
	|ИЗ
	|	РегистрСведений.вогРолиИсполнителейПоВариантамОпроса КАК вогРолиИсполнителейПоВариантамОпроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Делегаты КАК ВТ_Делегаты
	|			ПО ИсполнителиЗадач.Исполнитель = ВТ_Делегаты.РольПользователь
	|		ПО вогРолиИсполнителейПоВариантамОпроса.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
	|			И (вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса = &ВариантОпроса)
	|			И (ВЫРАЗИТЬ(вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса КАК ПланВидовХарактеристик.вогВариантыОпросов).ПрямоеСогласование = ИСТИНА)";
	// До изменения
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
	//|ИЗ
	//|	РегистрСведений.вогРолиИсполнителейПоВариантамОпроса КАК вогРолиИсполнителейПоВариантамОпроса
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	//|		ПО вогРолиИсполнителейПоВариантамОпроса.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
	//|			И (вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса = &ВариантОпроса)
	//|			И (ИсполнителиЗадач.Исполнитель = &Автор)
	//|			И (ИсполнителиЗадач.Исполнитель = &ТекущийПользователь)
	//|			И (ВЫРАЗИТЬ(вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса КАК ПланВидовХарактеристик.вогВариантыОпросов).ПрямоеСогласование = ИСТИНА)";
	// -- VOG Солодов В.В. 05.09.2019
	
	Запрос.УстановитьПараметр("ВариантОпроса", 			Форма.Объект.ВариантОпроса);
	Запрос.УстановитьПараметр("Автор", 					Форма.Объект.Автор);
	Запрос.УстановитьПараметр("ТекущийПользователь", 	Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой()
		И Форма.Объект.Статус <> Справочники.вогШаблоныСтатусов.Согласован
		И Форма.Объект.Статус <> Справочники.вогШаблоныСтатусов.НаСогласовании Тогда
		
		Для Каждого СтрокаСтатус Из СтруктураРеквизитов.СтатусыДокументов Цикл
			
			НастройкиОтбора = ЗначениеИзСтрокиВнутр(СтрокаСтатус.Отбор);
			
			Если НастройкиОтбора.Статус = Справочники.вогШаблоныСтатусов.Согласован Тогда
				
				// ++ VOG Солодов В.В. 27.06.2019
				ВидимостьКнопки = Ложь;
				ПроверкаДоступностиКнопкиПоУсловию(СтрокаСтатус, ВидимостьКнопки);
				
				Если ВидимостьКнопки = Истина Тогда
				// -- VOG Солодов В.В. 27.06.2019
					СтруктураРеквизитов.СтатусКоманды = НастройкиОтбора.Статус;
					ДобавитьКнопкуСтатуса(Форма, СтрокаСтатус, СтруктураРеквизитов);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтоНовыйОбъект Тогда
			Форма.Элементы.ЗаписатьСтандартная.Видимость = Истина;
		КонецЕсли;
		
		КнопкаДоступна = Истина;
		
	КонецЕсли;
	
	Возврат КнопкаДоступна;
	
КонецФункции

Процедура ДобавитьКнопкуСтатуса(Форма, СтатусСостоянияПроцессов, СтруктураРеквизитов)
	
	НастройкиКнопки = ЗначениеИзСтрокиВнутр(СтатусСостоянияПроцессов.Настройки);
	
	НоваяКоманда 					= Форма.Команды.Добавить(СтатусСостоянияПроцессов.ИД);
	НоваяКоманда.Действие 			= "Подключаемый_СтатусыДокументов";
	НоваяКоманда.Заголовок			= СтатусСостоянияПроцессов.Имя;
	НоваяКоманда.Картинка			= БиблиотекаКартинок[НастройкиКнопки.Картинка];
	
	Если НастройкиКнопки.ОтображениеСтатуса 		= Перечисления.вогОтображениеКнопки.Картинка Тогда
		НоваяКоманда.Отображение 					= ОтображениеКнопки.Картинка;
	ИначеЕсли НастройкиКнопки.ОтображениеСтатуса	= Перечисления.вогОтображениеКнопки.КартинкаИТекст Тогда
		НоваяКоманда.Отображение 					= ОтображениеКнопки.КартинкаИТекст;
	Иначе
		НоваяКоманда.Отображение 					= ОтображениеКнопки.Текст;
	КонецЕсли;
	
	РодительЭлемента = Форма.Элементы.КоманднаяПаенльФормыПрограммно;
	
	НовыйЭлемент 				= Форма.Элементы.Добавить("Элемент_" + НоваяКоманда.Имя, Тип("КнопкаФормы"), РодительЭлемента);
	НовыйЭлемент.ИмяКоманды 	= НоваяКоманда.Имя;
	НовыйЭлемент.заголовок		= НоваяКоманда.Заголовок;
	НовыйЭлемент.Фигура			= ФигураКнопки.Обычная;
	НовыйЭлемент.ЦветФона		= НастройкиКнопки.ЦветФона;
	НовыйЭлемент.Шрифт			= НастройкиКнопки.Шрифт;
	НовыйЭлемент.ЦветТекста		= НастройкиКнопки.ЦветТекста;
	Если НастройкиКнопки.Свойство("ФигураОтображения") Тогда
		НовыйЭлемент.Фигура		= ?(НастройкиКнопки.ФигураОтображения = Перечисления.вогФигураКнопки.Овальная, ФигураКнопки.Овал, ФигураКнопки.Обычная);
	КонецЕсли;
	
	СтруктураРеквизитов.СписокКнопок.Добавить(НовыйЭлемент.Имя);
	
	Если СтатусСостоянияПроцессов.ОбработчикСобытия <> "" Тогда
		НастройкиСобытияОбработчиковДействия= ЗначениеИзСтрокиВнутр(СтатусСостоянияПроцессов.ОбработчикСобытия);
		СтруктураРеквизитов.СписокОбработчиков.Вставить("Обработчик_"+НоваяКоманда.Имя,НастройкиСобытияОбработчиковДействия.ТекстДействия);
	Иначе
		СтруктураРеквизитов.СписокОбработчиков.Вставить("Обработчик_"+НоваяКоманда.Имя,"");
	КонецЕсли;
	
	// Добавление в таблицу команд
	СтрокаДобавления 			= СтруктураРеквизитов.ТЗСтатусы.Добавить();
	СтрокаДобавления.ИмяКоманды = НоваяКоманда.Имя;
	СтрокаДобавления.ИмяЭлемента= НовыйЭлемент.Имя;
	СтрокаДобавления.Статус		= СтруктураРеквизитов.СтатусКоманды;
	
КонецПроцедуры

Процедура СоздатьРеквизитыФормы(Форма, ИмяТаблицы, ИмяСписокРеквизитов, СтруктураРеквизитов)
	
	// Создание реквизитов обработчики
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого ОбработчикСобытия Из СтруктураРеквизитов.СписокОбработчиков Цикл
		
		ТипыРеквизита = Новый Массив;
		ТипыРеквизита.Добавить(Тип("Строка"));
		ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита);
		
		НовыйРеквизит = Новый РеквизитФормы(
			ОбработчикСобытия.Ключ,
			ОписаниеТиповДляРеквизита,   	// тип
			,                           	// путь
			ОбработчикСобытия.Ключ,     	// заголовок
			Ложь);                     		// сохраняемые данные
			
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	ИмяРеквизитаСхема 			= "ТекущаяСхема";
	ТипыРеквизита 				= Новый Массив;
	ТипыРеквизита.Добавить(Тип("СправочникСсылка.вогСостояниеПроцессов"));
	ОписаниеТиповДляРеквизита 	= Новый ОписаниеТипов(ТипыРеквизита);
	НовыйРеквизит 				= Новый РеквизитФормы(ИмяРеквизитаСхема,ОписаниеТиповДляРеквизита,,,Ложь);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	// Список кнопок
	ИмяРеквизитаКнопки 			= "СписокКнопок";
	ТипыРеквизита 				= Новый Массив;
	ТипыРеквизита.Добавить(Тип("СписокЗначений"));
	ОписаниеТиповДляРеквизита 	= Новый ОписаниеТипов(ТипыРеквизита);
	НовыйРеквизит 				= Новый РеквизитФормы(ИмяРеквизитаКнопки,ОписаниеТиповДляРеквизита,,,Ложь);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	// Таблица кнопок
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов("ТаблицаЗначений");
	РеквизитТаблица 	= Новый РеквизитФормы(ИмяТаблицы, ОписаниеТиповДляРеквизита,, "Таблица", Ложь);
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблица);
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов("Строка");
	РеквизитТаблицы_1 	= Новый РеквизитФормы("ИмяКоманды", ОписаниеТиповДляРеквизита, ИмяТаблицы , "Имя команд", Ложь);
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблицы_1);
	
	РеквизитТаблицы_2 	= Новый РеквизитФормы("ИмяЭлемента", ОписаниеТиповДляРеквизита, ИмяТаблицы , "Имя элемента", Ложь);
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблицы_2);
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов("СправочникСсылка.вогШаблоныСтатусов");
	РеквизитТаблицы_3 	= Новый РеквизитФормы("Статус", ОписаниеТиповДляРеквизита, ИмяТаблицы, "Статусы", Ложь);
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблицы_3);
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов("Строка");
	РекквизитСписок 	= Новый РеквизитФормы(ИмяСписокРеквизитов, ОписаниеТиповДляРеквизита);
	ДобавляемыеРеквизиты.Добавить(РекквизитСписок);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавление кода в обработчики
	Для Каждого РеквизитФормы Из ДобавляемыеРеквизиты Цикл
		Если СтрНайти(РеквизитФормы.Имя,"Обработчик") <> 0 Тогда
			Форма[РеквизитФормы.Имя] = СтруктураРеквизитов.СписокОбработчиков.Получить(РеквизитФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Форма[ИмяРеквизитаСхема] 	= СтруктураРеквизитов.СтатусыДокументов;
	Форма[ИмяРеквизитаКнопки] 	= СтруктураРеквизитов.СписокКнопок;
	Форма[ИмяТаблицы].Загрузить(СтруктураРеквизитов.ТЗСтатусы);
	
	МассивИменРеквизитов = Новый Массив;
	
	Для Каждого ЭлементРеквизит Из ДобавляемыеРеквизиты Цикл
		МассивИменРеквизитов.Добавить(ЭлементРеквизит.Имя);	
	КонецЦикла;
	
	Форма[ИмяСписокРеквизитов] 	= ЗначениеВСтрокуВнутр(МассивИменРеквизитов);
	
КонецПроцедуры

#КонецОбласти
