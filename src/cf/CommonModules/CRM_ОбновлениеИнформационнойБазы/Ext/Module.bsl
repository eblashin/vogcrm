////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы CRM.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля
//                                  ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя	= "CRM";
	Описание.Версия = "3.0.7.1";
	
	Если ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = "УТИВСК" Тогда
		Описание.ТребуемыеПодсистемы.Добавить("УправлениеТорговлей");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПервыйЗапуск";
	
	// Все версии
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьЗначениеКонстантыИспользоватьНапоминанияПользователя";
		Обработчик.Комментарий = НСтр("ru = 'Устанавливаем константу Использовать Напоминания Пользователя в Ложь'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПроверитьПВХОбъектыЖурнала";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьОбновляемыеПриПереходеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьДанныеНСИ_Редакции3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкопироватьПериодыПланирования";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьДанныеПоСобытиям";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьДанныеПоПартнерамПортретИКИ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьРеквизитДопУпорядочивания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьВидЭтапаВоронокПродаж";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьОфисУПодразделений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаписатьОбъектыЗадачПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет свойства предопределенных видов контактной информации'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УдалитьИзРегистраОбъектыЭтаповСсылкуНаСобытие";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчисткаСсылкиНаСобытиеИЗаменаДокументаСМСВГруппахУниверсальногоЖурнала";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьПризнакИспользоватьДляОповещенийДляВидовКИEmailРассылки";
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.1.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПеренестиОсновнойПроизводственныйКалендарь";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.1.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьНовыеИзмеренияРегистраПродажи";
	КонецЕсли;
	
	// 3.0.1.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкорретироватьНаименованиеРегЗадания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьТипСобытиеВОбъектах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.РежимВыполнения = "Отложенно";
	КонецЕсли;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаписатьКлиентыКонтакты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьСтароеОповещениеОНовыхЭлектронныхПисьмах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет свойства предопределенных видов контактной информации'");
	
	// 3.0.1.3
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьПараметрыВзаимодействийИзИнтереса";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет данные взаимодействий Интересов.'");
	
	// 3.0.1.4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет свойства предопределенных видов контактной информации'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ВключитьИспользованиеВидовКИ";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает признак ""Используется"" для предопределенных видов контактной информации'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.Перезаполнить_CRM_АРМ_ПорядокОбъектов";
	Обработчик.Комментарий = НСтр("ru = 'Переименовывает колонку в АРМ Мои дела'");
	
	
	// 3.0.1.5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьКартуЗапроса";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новую предопределенную карту маршрута'");
	
	// 3.0.1.6
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьРегистр_CRM_СобытияКалендаря";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет поля ""Партнер"" и ""Подразделение"" для АРМ Календарь менеджера'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьСписокУчастниковВДокументах";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит  СписокУчастников в документах CRM_КонтрольнаяТочкаПроекта и CRM_Мероприятие'");
	
	// 3.0.2.1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение шаблонов автотекста'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПроверкаНаборовДополнительныхРеквизитовИСведений";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение НаборовДополнительныхРеквизитовИСведений'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьШаблоныПоказателей";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет шаблоны ключивых показателей предопределенными данными'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.CRM_СобытияКалендаря.ЗаполнитьВремяОкончанияДляВзаимодействий";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет в регистре событий для взаимодействий минимальный период 30 минут'");
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.2.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПеренестиВзаиморасчетыВРасчеты";
		Обработчик.Комментарий = НСтр("ru = 'Переносит записи регистра Взаиморасчеты с контрагентами в регистр Расчеты с покупателями'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.2.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьВидДоговора";
		Обработчик.Комментарий = НСтр("ru = 'Устанавливает у всех договоров вид договора с покупателем'");
	КонецЕсли;
	
	// 3.0.2.2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьЗначениеПризнакаИспользуется";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значения свойства Используется в значение Истина у дополнительныйх свойств'");
	
	// 3.0.2.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеДлиныТокенов";
	Обработчик.Комментарий = НСтр("ru = 'Обновление токенов Google'");
	
	// 3.0.2.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПерезаполнитьКартуМаршрутаПоручение";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение карты маршрута Поручение из макета'");
	
	// 3.0.3.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбъектыЭтаповВУсловияЭтапов";
	Обработчик.Комментарий = НСтр("ru = 'Перенос записей регистра Объекты этапов в Условия этапов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьСостоянияКартИПроцессов";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает состояние в Картах маршрута и Процессах'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Документы.CRM_УстановкаИспользуемыхПоказателей.ПерепровестиУстановкиПоказателейСКратностью";
	Обработчик.Комментарий = НСтр("ru = 'Перепроведение установок показателей'");
	
	// 3.0.3.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьВидОбъектаКартИПроцессов";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает вид объекта Интерес в картах маршрутов'");
	
	// 3.0.4.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьКонстантуИспользоватьПочтовыйКлиент";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает константу ИспользоватьПочтовыйКлиент в Истина'");
	
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаменитьБанкиНаКлассификаторБанков";
		Обработчик.Комментарий = НСтр("ru = 'Заменяет в банковских счетах Банк на Классификатор'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "РегистрыСведений.УдалитьCRMЗначенияГруппДоступа.ПереместитьДанныеВНовыйРегистр";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.Процедура = "РегистрыСведений.УдалитьГруппыЗначенийДоступа.ПереместитьДанныеВНовыйРегистр";
		Обработчик.РежимВыполнения = "Монопольно";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.Процедура = "РегистрыСведений.УдалитьНаборыЗначенийДоступа.ПереместитьДанныеВНовыйРегистр";
		Обработчик.РежимВыполнения = "Монопольно";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.Процедура = "РегистрыСведений.УдалитьНастройкиВерсионированияОбъектов.ПереместитьДанныеВНовыйРегистр";
		Обработчик.РежимВыполнения = "Монопольно";
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИнициализироватьКонстантуИспользоватьПрочиеВзаимодействия";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьПрисоединенныеФайлыРешений";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьПрисоединенныеФайлыТелемаркетинга";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегламентныеЗаданияСлужебный.ОбновитьПараметрыБлокировкиРаботыСВнешнимиРесурсами";
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПредметыПапкиПисем";
		Обработчик.Комментарий = НСтр("ru = 'Создает записи регистра ПредметыПапкиВзаимодействий для писем, у которых их нет'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЭлектронноеПисьмоВходящееПеренестиРеквизит_Комментарий";
		Обработчик.Комментарий = НСтр("ru = 'Переносит во входящих электронных письмах значение реквизита ""_Комментарий"" в реквизит ""Комментарий"" '");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.1";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьЮрФизЛицоПартнеров";
		Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение реквизита ""Юр/Физлицо"" в справочнике ""Партнеры"" '");
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.4.3
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.3";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьЕдиницыИзмеренияПоказателей";
		Обработчик.Комментарий = НСтр("ru = 'Заполняет справочник ""Единицы измерения показателей"" и сами единицы в показателях'");
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.4.5
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.5";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьНоменклатурныеГруппы";
		Обработчик.Комментарий = НСтр("ru = 'Обновляет справочник номенклатурные группы после перехода на иерархию групп и элементов'");
		
		// 3.0.4.6
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.6";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации";
		
		// 3.0.4.8
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.8";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьНаборыДополнительныхРеквизитовИСведений";
		Обработчик.Комментарий = НСтр("ru = 'Обновляет справочник НаборыДополнительныхРеквизитовИСведений'");
	КонецЕсли;
	
	// 3.0.4.9
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.9";
	Обработчик.РежимВыполнения = "Монопольно";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьНастройкуИмениОтправителяSMS";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет настройку имени отправителя SMS-сообщений'");
	
	// 3.0.4.11
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение шаблонов автотекста'");
	
	// 3.0.4.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.УдалитьУстаревшиеЭлементы";
	Обработчик.Комментарий = НСтр("ru = 'Пометка на удаление устаревших шаблонов автотекста'");
	
	// 3.0.4.13
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.4.13";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "Справочники.CRM_КартыМаршрутов.СкорретироватьСКД_В_КартахМаршрутовИПроцессах";
		Обработчик.Комментарий = НСтр("ru = 'Удаление из СКД, карт маршрутов и процессов несуществующих полей'");
	КонецЕсли;
	
	// 3.0.4.14
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.14";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Создание предопределенных условий срабатывания триггеров'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.14";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия";
	Обработчик.Комментарий = НСтр("ru = 'Создание предопределенных действий триггеров'");
	
	// 3.0.4.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкорретироватьНастройкиЭтапов";
	Обработчик.Комментарий = НСтр("ru = 'Корретирует настройки этапов'");
	
	// 3.0.4.16
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.16";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение шаблонов автотекста'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.16";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.CRM_РасшифровкиСтатусовПисемEmailРассылки.ОбновитьРасшифровкиСтатусов";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение расшифровки статусов писем Email рассылки'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.16";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Перечисления.CRM_СпособыОтправкиРассылок.УстановитьСпособОтправкиРассылокПоУмолчанию";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""CRM_СпособОтправкиРассылок""'");
	
	// 3.0.5.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_РаботаАРМСервер.ПервоначальноеЗаполнениеАРМ";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение данными новых АРМ'");
	
	// 3.0.5.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьПредопределенныеДействияТриггеров";
	Обработчик.Комментарий = НСтр("ru = 'Обновление предопределенных действий триггеров'");
	
	// 3.0.5.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьКартуСогласованиеКоммерческогоПредолжения";
	Обработчик.Комментарий = НСтр("ru = 'Заполняем новую карту Согласование Коммерческого Предолжения'");
	
	// 3.0.5.5
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.5";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.СкорретироватьШаблоныПоказателей";
		Обработчик.Комментарий = НСтр("ru = 'Корретирует шаблоны ключевых показателей'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.5";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаменаСтатусовВКоммерческомПредложении";
		Обработчик.Комментарий = НСтр("ru = 'Заполняем реквизит Статус документа КоммерческоеПредложениеКлиенту'");
	КонецЕсли;
	
	// 3.0.5.7
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.7";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИсправитьРазделыДатЗапретаРедактирования";
		Обработчик.Комментарий = НСтр("ru = 'Заменяет предопределенное значение измерения Раздел в регистре сведений ""Даты запрета изменения данных""'");
	КонецЕсли;	
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.7";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИсправитьРолиИсполнителейЗадач";
		Обработчик.Комментарий = НСтр("ru = 'Очищает поле Роль исполнителя в задачах, которые уже приняты к исполнению.'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет свойства предопределенных видов контактной информации'");
	
	// 3.0.5.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПереносФайловИзЗадачВБизнесПроцесс";
	Обработчик.Комментарий = НСтр("ru = 'Переносим присоединенные к задачам БП файлы в бизнес процессы'");
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.5.9
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.11";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбновитьКлючевыеПоказатели";
		Обработчик.Комментарий = НСтр("ru = 'Обновляет шаблоны ключевых показателей'");
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.5.12
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.12";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_КлиентыСервер.ЗаполнитьПроверитьПВХОбъектыЖурнала";
		Обработчик.Комментарий = НСтр("ru = 'Обновляет ПВХ Объекты журнала документов'");
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// 3.0.5.13
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.13";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьРасположениеРеквизитовКлиентов";
		Обработчик.Комментарий = НСтр("ru = 'Устанавливаем расположение стандартных реквизитов'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.13";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьПериодАктуальностиПоказателей";
		Обработчик.Комментарий = НСтр("ru = 'Устанавливаем глубину пересчета значений ключевых показателей'");
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.13";
		Обработчик.РежимВыполнения = "Монопольно";
		Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПереименоватьПроценты";
		Обработчик.Комментарий = НСтр("ru = 'Устанавливаем глубину пересчета значений ключевых показателей'");
	КонецЕсли;
	
	// 3.0.5.14
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.14";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИзменитьТипПроцессаУПоручения";
	Обработчик.Комментарий = НСтр("ru = 'Меняет тип процесса у карты маршрута Поручение на Независимый'");
	
	// 3.0.5.15
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =  "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДействияТриггеровРассылкаЗаявкаВосстановление";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет предопределенные действия триггеров'");
	
	// 3.0.5.16
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура =  "CRM_РежимФормЗакладкиСервер.ИсключитьФормыИзЗакладок";
	Обработчик.Комментарий = НСтр("ru = 'Удаляем формы из режима закладок.'");
	
	// 3.0.5.17
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.17";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение шаблонов автотекста'");
	
	// 3.0.6.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОбработатьНаборыДопРеквизитов";
	Обработчик.Комментарий = НСтр("ru = 'Заполняем новый набор доп. реквизитов'");
	
	// 3.0.6.2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.CRM_СостоянияВоронкиПродаж.ЗарегистрироватьСостоянияВоронкиПродажПриОбновлении";
	Обработчик.Комментарий = НСтр("ru = 'Первичное заполнение регистра CRM_СостоянияВоронкиПродаж'");
	
	// 3.0.6.3
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.CRM_СостоянияЛидов.ЗаполнениеИсточниковЛидовПриОбновлении";
	Обработчик.Комментарий = НСтр("ru = 'Заполняем реквизит ИсточникЛидов в учетных записях'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.CRM_СостоянияЛидов.ЗаполнениеСостоянийЛидовПриОбновлении";
	Обработчик.Комментарий = НСтр("ru = 'Первичное заполнение регистра CRM_СостоянияЛидов'");
	
	// 3.0.6.5
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.5";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьма.ОбработкаПереходаНаНовуюСтруктуру";
	Обработчик.Комментарий = НСтр("ru = 'Обновляем регистр непрочитанных писем'");
	
	// 3.0.6.6
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.6";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_МетодыМодулейМенеджеровСправочников.ОбновитьВидКонтактнойИнформацииВК";
	Обработчик.Комментарий = НСтр("ru = 'Обновляем вид контактной информации ВКонтакте'");
	
	// 3.0.6.7
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.7";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.УстановитьКонстантуСинхронизацияДанных";
	Обработчик.Комментарий = НСтр("ru = 'Настраиваем параметры синхронизации данных'");
	
	// 3.0.6.8
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.УдалитьCRM_ТипыОтношений.УдалениеСправочникаCRMТипыОтношений";
	Обработчик.Комментарий = НСтр("ru = 'Подготовка к удалению справочника УдалитьCRM_ТипыОтношений'");
	
	// 3.0.6.10
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.10";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ПереименоватьПоказатели";
	Обработчик.Комментарий = НСтр("ru = 'Изменение краткого наименования показателей'");

	// 3.0.6.11
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.11";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ОчиститьЖурналОтДокументовПланирование";
	Обработчик.Комментарий = НСтр("ru = 'Удаляет записи из обжего журнала документов'");	
	
	// 3.0.6.12
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ИзменитьТипПроцессаУЗапросаНаИзменениеСроков";
	Обработчик.Комментарий = НСтр("ru = 'Меняет тип процесса у карты маршрута ЗапросНаИзменениеСроков на Независимый'");
	
	// 3.0.7.1
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "CRM_ОбновлениеИнформационнойБазы.ЗаполнитьСлужебныйРекизитИнтересаСледующеДействие";
	
	// ++ VOG Солодов В.В. 26.07.2019 task 106
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "вогНастраиваемоеДелегированиеПрав.ПриОбновленииИнформационнойБазы";
	// -- VOG Солодов В.В. 26.07.2019
	
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура       = "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	// -- VOG Солодов В.В. 02.03.2020
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры // ПередОбновлениемИнформационнойБазы()

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекуонстантыщаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры // ПослеОбновленияИнформационнойБазы()

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры // ПриПодготовкеМакетаОписанияОбновлений()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры // ПриЗавершенииПереходаСДругойПрограммы()

// Получает версию CRM, которая хранится в информационной базе.
//
// Возвращаемое значение:
//   Строка   - версия.
//
Функция ВерсияCRM() Экспорт
	
	Возврат ОбновлениеИнформационнойБазы.ВерсияИБ("CRM");
	
КонецФункции

// Получить режим обновления данных информационной базы
Функция ПолучитьРежимОбновленияДанных() Экспорт
	Возврат ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных();
КонецФункции

#КонецОбласти

#Область МетодыТолькоДляCRM3

// Процедура заполняет предопределенный элемент справочника "Организации".
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПредопределеннуюОрганизацию() Экспорт
	
	СправочникОбъект = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию().ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.Префикс) Тогда
		СправочникОбъект.Префикс = "НФ";
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПредопределеннуюОрганизацию()

// Функция заполняет в ИБ спрвочник "Ставки НДС" и возвращает
// ссылку на ставку НДС 18% для дальнейшего использования.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//  СправочникСсылка	- Ставка НДС
//	
Функция ЗаполнитьСтавкиНДСПервыйЗапуск()
	
	// 10%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "10%";
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.Записать();
	
	// 18% / 118%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "18% / 118%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 18;
	СтавкаНДС.Записать();
	
	// 10% / 110%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "10% / 110%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.Записать();
	
	// 0%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "0%";
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать();
	
	// Без НДС
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = НСтр("ru='Без НДС'");
	СтавкаНДС.НеОблагается = Истина;
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.Записать(); 
	
	// 18%
	СтавкаНДС = Справочники["СтавкиНДС"].СоздатьЭлемент();
	СтавкаНДС.Наименование = "18%";
	СтавкаНДС.Ставка = 18;	
	СтавкаНДС.Записать();
	
	Возврат СтавкаНДС.Ссылка;
	
КонецФункции // ЗаполнитьСтавкиНДСПервыйЗапуск()

// Процедура создает регламентные задания для сегментов.
//
// Параметры:
//	Нет.
//
Процедура СоздатьРегламентныеЗаданияДляСегментов()
	
	// Создает регламентные задания для сегментов партнеров и номенклатуры с типом формирования
	// "Периодически обновлять".
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные",Метаданные.РегламентныеЗадания.ФормированиеСегментов));
	Если МассивЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденноеЗадание = Неопределено;
	
	Для каждого Задание Из МассивЗаданий Цикл
		
		Если Задание.Параметры.Количество() = 0 Тогда
			НайденноеЗадание = Задание;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СегментыНоменклатуры.Ссылка КАК Сегмент,
	|	""СегментыНоменклатуры"" КАК ТипСегмента,
	|	СегментыНоменклатуры.Наименование
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|ГДЕ
	|	(НЕ СегментыНоменклатуры.ЭтоГруппа)
	|	И (НЕ СегментыНоменклатуры.ПометкаУдаления)
	|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять)
	|	И СегментыНоменклатуры.РегламентноеЗадание = &ПустойУникальныйИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СегментыПартнеров.Ссылка,
	|	""СегментыПартнеров"",
	|	СегментыПартнеров.Наименование
	|ИЗ
	|	Справочник.СегментыПартнеров КАК СегментыПартнеров
	|ГДЕ
	|	(НЕ СегментыПартнеров.ЭтоГруппа)
	|	И (НЕ СегментыПартнеров.ПометкаУдаления)
	|	И СегментыПартнеров.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять)
	|	И СегментыПартнеров.РегламентноеЗадание = &ПустойУникальныйИдентификатор";
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСегмента = "СегментыНоменклатуры" Тогда
			
			Наименование =  НСтр("ru = 'Формирование сегмента номенклатуры: '");
			
		ИначеЕсли Выборка.ТипСегмента = "СегментыПартнеров" Тогда
			
			Наименование =  НСтр("ru = 'Формирование сегмента партнеров: '");
			
		КонецЕсли;
		
		НовоеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ФормированиеСегментов);
		НовоеЗадание.Использование = НайденноеЗадание.Использование;
		НовоеЗадание.Наименование = Наименование + СокрЛП(Выборка.Наименование);
		НовоеЗадание.Расписание = НайденноеЗадание.Расписание;
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Выборка.Сегмент);
		НовоеЗадание.Параметры = ПараметрыЗадания;
		НовоеЗадание.Записать();
		
		СегментОбъект = Выборка.Сегмент.ПолучитьОбъект();
		СегментОбъект.РегламентноеЗадание = НовоеЗадание.УникальныйИдентификатор;
		СегментОбъект.ОбменДанными.Загрузка = Истина;
		СегментОбъект.Записать();
		
	КонецЦикла;
	
	Если НайденноеЗадание.Параметры.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Справочники.СегментыНоменклатуры.ПустаяСсылка());
		НайденноеЗадание.Параметры = ПараметрыЗадания;
		НайденноеЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры //  СоздатьРегламентныеЗаданияДляСегментов()

Функция ЗапускатьМастерНастройкиРешения() Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Данные = CRM_ХранилищеНастроек.Загрузить("Запускать_CRM_МастерНастройкиРешения",,, "CRM_МастерНастройкиРешения");
		Возврат (Данные = Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет реквизит "офис" у предопределенного элемента справочника "Подразделения организации"
//
Процедура ЗаполнитьРеквизитОфисУОсновногоПодразделения() 
	
	ОсновнойОфис = Справочники.CRM_ОфисыКомпании.НайтиПоНаименованию(НСтр("ru='Основной офис'"));
	Если НЕ ЗначениеЗаполнено(ОсновнойОфис) Тогда
		// повторно создадим элемент справочника, если этого не удалось сделать ранее
		НовыйОфис = Справочники.CRM_ОфисыКомпании.СоздатьЭлемент();
		НовыйОфис.Наименование	= НСтр("ru='Основной офис'");
		НовыйОфис.CRM_ВремяПоГринвичу_GMT = 3;
		Попытка
			НовыйОфис.Записать();
			ОсновнойОфис = НовыйОфис.Ссылка;
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;		
	
	ПодразделениеОбъект = Справочники.СтруктураПредприятия["ОсновноеПодразделение"].ПолучитьОбъект();
	ПодразделениеОбъект.CRM_Офис = ОсновнойОфис.Ссылка;
	Попытка
		ПодразделениеОбъект.Записать();
	Исключение
	КонецПопытки;
	
Конецпроцедуры  //ЗаполнитьРеквизитОфисУОсновногоПодразделения()

// Процедура заполняет измерения регистра продаж.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьНовыеИзмеренияРегистраПродажи() Экспорт
	
	Выборка = Документы["CRM_СчетНаОплатуПокупателю"].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления["CRM_Продажи"].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Подразделение = Запись.ДокументПродажи.Подразделение;
				Запись.Менеджер = Запись.ДокументПродажи.Ответственный;
				Запись.Проект = Запись.ДокументПродажи.Проект;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНовыеИзмеренияРегистраПродажи()

// Процедура выполняет перенос основного производственного календаря.
//
// Параметры:
//	Нет.
//
Процедура ПеренестиОсновнойПроизводственныйКалендарь() Экспорт
	
	ОсновнойКалендарь = Справочники.Календари.НайтиПоНаименованию("Российская Федерация");
	Если ЗначениеЗаполнено(ОсновнойКалендарь) Тогда
		Константы.ОсновнойКалендарьПредприятия.Установить(ОсновнойКалендарь);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиОсновнойПроизводственныйКалендарь()

Процедура ПеренестиВзаиморасчетыВРасчеты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ВзаиморасчетыСКонтрагентами.Период,
	|	CRM_ВзаиморасчетыСКонтрагентами.Регистратор,
	|	CRM_ВзаиморасчетыСКонтрагентами.НомерСтроки,
	|	CRM_ВзаиморасчетыСКонтрагентами.Активность,
	|	CRM_ВзаиморасчетыСКонтрагентами.ВидДвижения,
	|	CRM_ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	|	CRM_ВзаиморасчетыСКонтрагентами.Партнер КАК Контрагент,
	|	CRM_ВзаиморасчетыСКонтрагентами.Сделка КАК Документ,
	|	CRM_ВзаиморасчетыСКонтрагентами.Сделка КАК Заказ,
	|	CRM_ВзаиморасчетыСКонтрагентами.Сумма КАК Сумма,
	|	CRM_ВзаиморасчетыСКонтрагентами.СуммаВал КАК СуммаВал,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов
	|ИЗ
	|	РегистрНакопления.удалитьCRM_ВзаиморасчетыСКонтрагентами КАК CRM_ВзаиморасчетыСКонтрагентами
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Организация";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		Выборка = ВыборкаОрганизации.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборРегистра = РегистрыНакопления["РасчетыСПокупателями"].СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборРегистра.Прочитать();
			НаборРегистра.Очистить();
			
			Запись = НаборРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(Запись,Выборка);
			
			НаборРегистра.Записать(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидДоговора() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка как Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.ПустаяСсылка)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Договор = Выборка.Ссылка.ПолучитьОбъект();
		Договор.ВидДоговора = Перечисления["ВидыДоговоров"].СПокупателем;
		Договор.ОбменДанными.Загрузка = Истина;
		Попытка
		Исключение
			Договор.Записать();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#Область Обновление_3_0_4_3

Процедура ЗаполнитьЕдиницыИзмеренияПоказателей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствияЕдиниц = новый Соответствие;
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка,
	|	КлассификаторЕдиницИзмерения.Код,
	|	КлассификаторЕдиницИзмерения.Наименование,
	|	КлассификаторЕдиницИзмерения.НаименованиеПолное,
	|	КлассификаторЕдиницИзмерения.МеждународноеСокращение
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	НЕ КлассификаторЕдиницИзмерения.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].Балл Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].Балл, Справочники.CRM_ЕдиницыИзмеренияПоказателей.Балл);
		ИначеЕсли Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].Процент Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].Процент, Справочники.CRM_ЕдиницыИзмеренияПоказателей.Процент);
		ИначеЕсли Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].руб Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].руб, Справочники.CRM_ЕдиницыИзмеренияПоказателей.руб);
		ИначеЕсли Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].ч Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].ч, Справочники.CRM_ЕдиницыИзмеренияПоказателей.ч);
		ИначеЕсли Выборка.Ссылка = Справочники["КлассификаторЕдиницИзмерения"].шт Тогда
			СоответствияЕдиниц.Вставить(Справочники["КлассификаторЕдиницИзмерения"].шт, Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт);
		Иначе
			
			СпрСсылка = Справочники.CRM_ЕдиницыИзмеренияПоказателей.НайтиПоНаименованию(Выборка.Наименование,Истина);
			
			Если СпрСсылка = Справочники.CRM_ЕдиницыИзмеренияПоказателей.ПустаяСсылка() Тогда
				НовыйЭлемент = Справочники.CRM_ЕдиницыИзмеренияПоказателей.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,Выборка,,"Ссылка");
				НовыйЭлемент.ОбменДанными.Загрузка = Истина;
				НовыйЭлемент.Записать();
				
				СпрСсылка = НовыйЭлемент.Ссылка;
			КонецЕсли;
			
			СоответствияЕдиниц.Вставить(Выборка.Ссылка, СпрСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ШаблоныКлючевыхПоказателей.Ссылка КАК Ссылка,
	|	CRM_ШаблоныКлючевыхПоказателей.удалитьЕдиницаИзмерения КАК удалитьЕдиницаИзмерения
	|ИЗ
	|	Справочник.CRM_ШаблоныКлючевыхПоказателей КАК CRM_ШаблоныКлючевыхПоказателей
	|ГДЕ
	|	НЕ CRM_ШаблоныКлючевыхПоказателей.удалитьЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если СоответствияЕдиниц.Получить(Выборка.удалитьЕдиницаИзмерения) = Неопределено Тогда Продолжить; КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ЕдиницаИзмерения = СоответствияЕдиниц.Получить(Выборка.удалитьЕдиницаИзмерения);
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			СпрОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_4_3

#Область Обновление_3_0_4_5

Функция ОбработатьКоллекциюСтрок(КоллекциюСтрок, ТекущийРодитель = Неопределено)
	
	Для Каждого СтрокаДерева ИЗ КоллекциюСтрок Цикл
		
		Если НЕ СтрокаДерева.Ссылка.ЭтоГруппа И НЕ ТекущийРодитель = Неопределено Тогда
			СпрОбъек						= СтрокаДерева.Ссылка.ПолучитьОбъект();
			СпрОбъек.Родитель				= ТекущийРодитель;
			СпрОбъек.ОбменДанными.Загрузка	= Истина;
			СпрОбъек.Записать();
		ИначеЕсли СтрокаДерева.Ссылка.ЭтоГруппа Тогда
			НоваяГруппа = Справочники["НоменклатурныеГруппы"].СоздатьГруппу();
			НоваяГруппа.Наименование = СтрокаДерева.Ссылка.Наименование;
			Если НЕ ТекущийРодитель = Неопределено Тогда
				НоваяГруппа.Родитель = ТекущийРодитель;
			КонецЕсли;
			//НоваяГруппа.ОбменДанными.Загрузка	= Истина;
			НоваяГруппа.Записать();
			
			ОбработатьКоллекциюСтрок(СтрокаДерева.Строки, НоваяГруппа.Ссылка);
			
			УникальнаяСсылка = СтрокаДерева.Ссылка;
			
			НовыйЭлемент = Справочники["НоменклатурныеГруппы"].СоздатьЭлемент();
			НовыйЭлемент.УстановитьСсылкуНового(УникальнаяСсылка);
			
			НовыйЭлемент.Код			= СтрокаДерева.Ссылка.Код;
			НовыйЭлемент.Наименование	= СтрокаДерева.Ссылка.Наименование;
			НовыйЭлемент.Родитель		= НоваяГруппа.Ссылка;
			
			СтрокаДерева.Ссылка.ПолучитьОбъект().Удалить();
			
			НовыйЭлемент.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ОбновитьНоменклатурныеГруппы() Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	ДеревоГруппИЭлементов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ОбработатьКоллекциюСтрок(ДеревоГруппИЭлементов.Строки);
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_4_5


#Область Обновление_3_0_4_8

Процедура ОбновитьНаборыДополнительныхРеквизитовИСведений() Экспорт
	
	УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	НаборОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Партнеры_Компании_CRM"].ПолучитьОбъект();
	НаборОбъект.Используется = Ложь;
	НаборОбъект.Записать();
	
	НаборОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_Партнеры_Компании_CRM"].ПолучитьОбъект();
	Набор = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Партнеры_Компании_CRM"];
	НаборОбъект.ДополнительныеРеквизиты.Загрузить(Набор.ДополнительныеРеквизиты.Выгрузить());
	НаборОбъект.ДополнительныеСведения.Загрузить(Набор.ДополнительныеСведения.Выгрузить());
	НаборОбъект.Записать();
	
	НаборОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Партнеры_ЧастныеЛица_CRM"].ПолучитьОбъект();
	НаборОбъект.Используется = Ложь;
	НаборОбъект.Записать();
	
	НаборОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_Партнеры_ЧастныеЛица_CRM"].ПолучитьОбъект();
	Набор = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Партнеры_ЧастныеЛица_CRM"];
	НаборОбъект.ДополнительныеРеквизиты.Загрузить(Набор.ДополнительныеРеквизиты.Выгрузить());
	НаборОбъект.ДополнительныеСведения.Загрузить(Набор.ДополнительныеСведения.Выгрузить());
	НаборОбъект.Записать();
	
	МассивЗамен = Новый Массив;
	МассивЗамен.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Партнеры_Компании_CRM"]);
	МассивЗамен.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Партнеры_ЧастныеЛица_CRM"]);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств В(&НаборыСвойств)");
	Запрос.УстановитьПараметр("НаборыСвойств", МассивЗамен);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПВХОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ПВХОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Партнеры_Компании_CRM"] Тогда
			ПВХОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_Партнеры_Компании_CRM"];
		ИначеЕсли ПВХОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений["УдалитьСправочник_Партнеры_ЧастныеЛица_CRM"] Тогда
			ПВХОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_Партнеры_ЧастныеЛица_CRM"];
		КонецЕсли;
		ПВХОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_4_8


#КонецОбласти // МетодыТолькоДляCRM3

#Область ПервыйЗапуск

Функция ПервыйЗапускИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Константы.ИспользоватьРазделениеПоОбластямДанных.Получить()
	И НЕ Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить()
	И НЕ Константы.ЭтоАвтономноеРабочееМесто.Получить();
	
КонецФункции // ПервыйЗапускИнформационнойБазы()

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи = ПараметрыПрописиНаРусском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
	ИначеЕсли Ссылка.Предопределенный 
		И ПустаяСтрока(Ссылка.НаименованиеПолное) Тогда
		
		// Это первое обращение к предопределенному элементу.
		СправочникОбъект = Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи = ПараметрыПрописиНаРусском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	// Установим курс и кратность = 1 на 1 января 1980.
	РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
	
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьВалюту()

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт
	
	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;
	
	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru = '<без кода>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);
	
	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьСправочникОбъект()

// Процедура выполняет заполнение реквизита "CRM_ИспользоватьДляОповещений" предопределенных элементов.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений() Экспорт
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.EmailПользователя.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ПолучитьОбъект();
	СправочникОбъект.CRM_ИспользоватьДляОповещений = Истина;
	СправочникОбъект.Записать();
	
КонецПроцедуры	// ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений()

// Процедура выполняет заполнение предопределенного элемента "CRM_СайтПартнера".
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьВидКонтактнойИнформацииСайтПартнера() Экспорт
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера.ПолучитьОбъект();
	СправочникОбъект.Тип								= Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	СправочникОбъект.МожноИзменятьСпособРедактирования	= Истина;
	СправочникОбъект.РедактированиеТолькоВДиалоге		= Ложь;
	СправочникОбъект.РеквизитДопУпорядочивания			= 4;
	СправочникОбъект.Записать();
	
КонецПроцедуры // ЗаполнитьВидКонтактнойИнформацииСайтПартнера()

// Процедура заполняет значение ключевого события "День рождения" 
// у контактного лица на основе реквизита ДеньРождения
//
Процедура ЗаполнитьКлючевоеСобытиеДеньРожденияКЛНаОсновеДатыРождения()
	
	ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию(Нстр("ru = 'День рождения контактного лица'"), Истина);
	Если ЗначениеЗаполнено(ВидСобытия) Тогда
		
		Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
				ВыборкаОбъект 			= Выборка.ПолучитьОбъект();
				НоваяСтрока 			= ВыборкаОбъект.CRM_КлючевыеСобытия.Добавить();
				НоваяСтрока.ВидСобытия 	= ВидСобытия;
				НоваяСтрока.ДатаСобытия = Выборка.ДатаРождения;
				Если Выборка.CRM_НапоминатьОДнеРождения Тогда
					НоваяСтрока.НапоминатьОСобытии = Истина;
				Иначе
					НоваяСтрока.НапоминатьОСобытии = Ложь;
				КонецЕсли;
				ВыборкаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры	

// Процедура заполняет пустую ИБ.
//
// Параметры:
//	Нет.
//
Процедура ПервыйЗапуск() Экспорт
	
	НачатьТранзакцию();
	
	Константы.CRM_ДемонстрационныйРежим.Установить(Ложь);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		// Заполним валюты.
		РУБСсылка = НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		
		// Заполним ставки НДС.
		СтавкаНДС18 = Справочники["СтавкиНДС"].НайтиПоНаименованию("18%");
		Если Не ЗначениеЗаполнено(СтавкаНДС18) Тогда
			СтавкаНДС18 = ЗаполнитьСтавкиНДСПервыйЗапуск();
		КонецЕсли; 
		
		// Заполним организации.
		НашаОрганизацияСсылка = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
		НашаОрганизация = НашаОрганизацияСсылка.ПолучитьОбъект();
		НашаОрганизация.НаименованиеПолное	  = НСтр("ru='ООО ""Наша фирма""'");
		НашаОрганизация.Префикс				  = "НФ-";
		НашаОрганизация.ЮрФизЛицо			  = Перечисления.ЮрФизЛицо.ЮрЛицо;
		НашаОрганизация.НДСВключатьВСтоимость = Истина;
		НашаОрганизация.СтавкаНДСПоУмолчанию  = СтавкаНДС18;
		НашаОрганизация.Записать();
		
		// Заполним виды цен.
		ВалютаВКонстанте = Константы.ВалютаУправленческогоУчета.Получить();
		Если НЕ ЗначениеЗаполнено(ВалютаВКонстанте) Тогда
			ВалютаВКонстанте = Справочники.Валюты.НайтиПоКоду("643");
		КонецЕсли;
		// Оптовая.
		ОптоваяСсылка = Справочники.ВидыЦен["Оптовая"];
		Оптовая = ОптоваяСсылка.ПолучитьОбъект();
		Оптовая.ВалютаЦены = ВалютаВКонстанте;
		Оптовая.ЦенаВключаетНДС = Истина;
		Оптовая.ПорядокОкругления = Перечисления["ПорядкиОкругления"].Окр1;
		Оптовая.ОкруглятьВБольшуюСторону = Ложь;
		Оптовая.РассчитываетсяДинамически	= Ложь;
		Оптовая.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
		Оптовая.Записать();
		
		// Учетная.
		УчетнаяСсылка = Справочники.ВидыЦен["Учетная"];
		Учетная = УчетнаяСсылка.ПолучитьОбъект();
		Учетная.ВалютаЦены = ВалютаВКонстанте;
		Учетная.ЦенаВключаетНДС = Истина;
		Учетная.ПорядокОкругления = Перечисления["ПорядкиОкругления"].Окр1;
		Учетная.ОкруглятьВБольшуюСторону = Ложь;
		Учетная.РассчитываетсяДинамически	= Ложь;
		Учетная.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
		Учетная.Записать();
		
		// Заполним константы.
		Константы.ВалютаУправленческогоУчета.Установить(РУБСсылка);
		Константы.ВалютаРегламентированногоУчета.Установить(РУБСсылка);
		Константы.ИзвлекатьТекстыФайловНаСервере.Установить(истина);
		
		// Заполним наборы свойств.
		ОсновнаяНГСсылка = Справочники["НоменклатурныеГруппы"].ОсновнаяГруппа;
		ОсновнаяНГ = ОсновнаяНГСсылка.ПолучитьОбъект();
		ОсновнаяНГ.Записать();
		
		// Заполним реквизиты предопределенных единиц измерения.
		// Штука.
		ШтСсылка = Справочники["КлассификаторЕдиницИзмерения"].шт;
		ШтОбъект = ШтСсылка.ПолучитьОбъект();
		ШтОбъект.НаименованиеПолное = НСтр("ru='Штука'");
		ШтОбъект.МеждународноеСокращение = "PCE";
		ШтОбъект.Записать();
		
		ЗаполнитьПредопределеннуюОрганизацию();
		
		// Заполним константу ОсновнойКалендарьПредприятия.
		ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		Если ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
			Календарь = Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
			Если ЗначениеЗаполнено(Календарь) Тогда
				Константы.ОсновнойКалендарьПредприятия.Установить(Календарь);
			КонецЕсли;
		КонецЕсли;
		
		// Заполним предопределенный сегмент
		ИмяСпрСегменты = "СегментыПартнеров";
		Справочники[ИмяСпрСегменты].ЗаполнитьПредопределенныйСегмент();
		
		// Создаем регламентные задания для сегментов.
		СоздатьРегламентныеЗаданияДляСегментов();
	КонецЕсли; // только для CRM 3
	
	// Создание групп доступа на основании профилей групп доступа.
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеДоступом");
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_Модуль_УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_УправлениеДоступом");
	КонецЕсли;
	МодульУправлениеДоступом.СоздатьЭлементыСправочникаГруппыДоступа();
	
	// Ззаполнение констант.
	Константы.sms4bСрокЖизниSMS.Установить(24);
	Константы.сфпКодСтраны.Установить("+7");
	Константы.CRM_НачалоРабочегоДня.Установить(Дата("00010101090000"));
	Константы.CRM_КонецРабочегоДня.Установить(Дата("00010101180000"));
	Константы.CRM_НачалоОбеда.Установить(Дата("00010101130000"));
	Константы.CRM_КонецОбеда.Установить(Дата("00010101140000"));
	Константы.ОтправлятьПисьмаВФорматеHTML.Установить(Истина);
	Константы.ФиксироватьПервичныйИнтерес.Установить(Истина);
	Константы.ИспользоватьПочтовыйКлиент.Установить(Истина);
	Константы.CRM_ВыполнятьПоискДублейПриЗаписиПартнера.Установить(Истина);
	
	РеквизитыПоискаДублейПартнеров = Новый СписокЗначений;
	РеквизитыПоискаДублейПартнеров.Добавить("Наименование;ПОДОБНО","Наименование",Истина);
	РеквизитыПоискаДублейПартнеров.Добавить("НаименованиеПолное;ПОДОБНО","Наименование полное",Истина);
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		РеквизитыПоискаДублейПартнеров.Добавить("CRM_ИНН;=","ИНН",Истина);
	КонецЕсли;
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_Адрес;ПОДОБНО","Адрес");
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_АдресЭлектроннойПочты;ПОДОБНО","Email");
	РеквизитыПоискаДублейПартнеров.Добавить("Контакт_Телефон;ПОДОБНО","Телефон");
	
	Константы.CRM_РеквизитыПоискаДублейПартнеров.Установить(Новый ХранилищеЗначения(РеквизитыПоискаДублейПартнеров));
	Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	Константы.ИспользоватьДатуНачалаЗадач.Установить(Истина);
	
	// Заполним константы подсистемы Оповещений.
	Константы.CRM_ИспользоватьНапоминания.Установить(Истина); 
	Константы.CRM_ПериодПроверкиНовыхНапоминаний.Установить(30);
	Константы.CRM_УчетнаяЗаписьОповещений.Установить(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
	Константы.CRM_ПериодОповещенияОПросроченныхСобытиях.Установить(Перечисления.Периодичность.Месяц);
	Константы.CRM_ПериодВыводаНезавершенныхОповещений.Установить(Перечисления.Периодичность.Месяц);
	
	Константы.ИспользоватьПрочиеВзаимодействия.Установить(Истина);
	
	// Заполним предопределенные элементы справочников.
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ВидыКонтактнойИнформации").ЗаполнитьСвойстваВидовКонтактнойИнформации();
	КонецЕсли;
	CRM_МетодыМодулейМенеджеровСправочников.ЗаполнитьСвойстваВидовКонтактнойИнформации();
	ЗаполнитьПредопределенныеВидыКонтактнойИнформацииДляОповещений();
	
	// Заполним ПВХ каналы рекламных воздействий.
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Акция", Истина);
	
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Акция'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.МаркетинговыеМероприятия");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Сайт компании", Истина);
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Сайт компании'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация клиента", Истина);
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация клиента'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация сотрудника", Истина);
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация сотрудника'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	Элемент = Неопределено;
	Элемент = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию("Рекомендация сотрудника клиента", Истина);
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		ЭлементПВХ = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.СоздатьЭлемент();
		ЭлементПВХ.Наименование		= НСтр("ru='Рекомендация сотрудника клиента'");
		ЭлементПВХ.ТипЗначения 		= Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
		ЭлементПВХ.Записать();
	КонецЕсли; 
	
	// Заполним справочник цветовые категории.
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Командировка", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='Командировка'");
		ЭлементСправочника.ЦветПредставление 	= "Зеленый";
		ЭлементСправочника.ЦветИндекс 			= 4;
		ЭлементСправочника.ЦветКрасный 			= 122;
		ЭлементСправочника.ЦветЗеленый 			= 231;
		ЭлементСправочника.ЦветСиний 			= 191;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("График руководителя", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='График руководителя'");
		ЭлементСправочника.ЦветПредставление 	= "Красный";
		ЭлементСправочника.ЦветИндекс 			= 0;
		ЭлементСправочника.ЦветКрасный 			= 255;
		ЭлементСправочника.ЦветЗеленый 			= 136;
		ЭлементСправочника.ЦветСиний 			= 124;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Совещание (внутреннее)", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='Совещание (внутреннее)'");
		ЭлементСправочника.ЦветПредставление 	= "Лиловый";
		ЭлементСправочника.ЦветИндекс 			= 8;
		ЭлементСправочника.ЦветКрасный 			= 219;
		ЭлементСправочника.ЦветЗеленый 			= 173;
		ЭлементСправочника.ЦветСиний 			= 255;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Встреча (внешняя)", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='Встреча (внешняя)'");
		ЭлементСправочника.ЦветПредставление 	= "Оранжевый";
		ЭлементСправочника.ЦветИндекс 			= 1;
		ЭлементСправочника.ЦветКрасный 			= 255;
		ЭлементСправочника.ЦветЗеленый 			= 184;
		ЭлементСправочника.ЦветСиний 			= 120;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	ЭлементСправочника = Справочники.CRM_Категории.НайтиПоНаименованию("Личные", Истина);
	Если ЭлементСправочника = Справочники.CRM_Категории.ПустаяСсылка() Тогда
		ЭлементСправочника = Справочники.CRM_Категории.СоздатьЭлемент();
		ЭлементСправочника.Наименование			= НСтр("ru='Личные'");
		ЭлементСправочника.ЦветПредставление 	= "Синий";
		ЭлементСправочника.ЦветИндекс 			= 7;
		ЭлементСправочника.ЦветКрасный 			= 164;
		ЭлементСправочника.ЦветЗеленый 			= 189;
		ЭлементСправочника.ЦветСиний 			= 252;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
	// Для системной учетной записи электронной почты заполним папки электронных писем по умолчанию.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		СсылкаУЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		ОбъектУЗ = СсылкаУЗ.ПолучитьОбъект();
		ОбъектУЗ.Записать();
	КонецЕсли;
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	УчетнаяЗапись.ПортСервераИсходящейПочты	= 25;
	УчетнаяЗапись.ПортСервераВходящейПочты	= 110;
	УчетнаяЗапись.ВремяОжидания				= 30;
	УчетнаяЗапись.СпособPOP3Аутентификации	= Перечисления.СпособыPOP3Аутентификации.Обычная;
	УчетнаяЗапись.СпособSMTPАутентификации	= Перечисления.СпособыSMTPАутентификации.БезАутентификации;
	УчетнаяЗапись.SMTPАутентификация		= Перечисления.ВариантыSMTPАутентификации.АналогичноPOP3;
	УчетнаяЗапись.Записать();
	
	// Заполним ПВХ CRM_ОбъектыЖурналаДокументов
	CRM_КлиентыСервер.ЗаполнитьПроверитьПВХОбъектыЖурнала();
	
	// Заполним справочник CRM_ГруппыУниверсальногоЖурнала.
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьКонтакты();
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьПродажи();
	
	// Заполнение пользовательских настроек динамических списков по умолчанию.
	CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаЗаполнитьПоУмолчанию();
	
	// Заполнение элементов справочника CRM_СостоянияСобытий.
	Справочники.CRM_СостоянияСобытий.ЗаполнитьЭлементыСправочника();
	
	// Заполнение константы CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.
	Константы.CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.Установить(1);
	
	// Заполнение регистра CRM_ОписаниеРеквизитовМетаданных.
	РегистрыСведений.CRM_ОписаниеРеквизитовМетаданных.ОбновитьЗаписи();
	
	// Видам КИ с типом АдресЭлектроннойПочты включим флаг проверки корректности.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПроверятьКорректность = Истина;
		Попытка
			СправочникОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Заполним шаблон рассылки для анкетирования.
	Справочники.CRM_ШаблоныРассылки.CRM_ЗаполнитьШаблонДляАнкетирования();
	
	// Заполним шаблоны автотекста.
	Справочники.CRM_ШаблоныАвтотекста.ЗаполнитьПредопределенныеДанные();
	
	// Заполнение ролей партнеров для предопределенных элементов справочника ВидыСвязейМеждуПартнерами.
	CRM_МетодыМодулейМенеджеровСправочников.CRM_ЗаполнитьРолиПартнеровДляВидовСвязей();
	
	// Заполним реквизиты предопределенных элементов справочника обработчики событий точек маршрута.
	
	// Вложенный бизнес-процесс
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ПриСозданииВложенногоБизнесПроцесса.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ПослеСозданияВложенногоБизнесПроцесса.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВложенныйБизнесПроцессПередСозданиемЗадач.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВложенныйБизнесПроцессПриСозданииЗадач.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	СпрОбъект.Записать();
	
	// Выбор варианта
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ВыборВарианта.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта;
	СпрОбъект.Записать();
	
	// Действие
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПриВыполнении.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПослеВыполнения.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПередСозданиемЗадач.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ДействиеПриСозданииЗадач.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Действие;
	СпрОбъект.Записать();
	
	// Завершение
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.ЗавершениеПриЗавершении.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Завершение;
	СпрОбъект.Записать();
	
	// Обработка
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.Обработка.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Обработка;
	СпрОбъект.Записать();
	
	// Старт
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПередСтартом.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПриСтарте.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
	СпрОбъект.Записать();
	
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.СтартПослеСтарта.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Старт;
	СпрОбъект.Записать();
	
	// Условие
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.УсловиеПроверкаУсловия.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Условие;
	СпрОбъект.Записать();
	
	// Обработка
	СпрОбъект = Справочники.CRM_ОбработчикиСобытийТочекМаршрута.Обработка.ПолучитьОбъект();
	СпрОбъект.ВидТочкиМаршрута = Перечисления.CRM_ВидыТочекМаршрута.Обработка;
	СпрОбъект.Записать();
	
	// Заполним предопределенный БП Поручение, создадим и заполним Продажа, Продажа (несколько направлений деятельности).
	
	Для Каждого МакетКарты Из Метаданные.Справочники.CRM_КартыМаршрутов.Макеты Цикл
		
		Если МакетКарты.Имя = "КартаМаршрутаПоУмолчанию" Тогда Продолжить; КонецЕсли;
		
		ИмяФайла = КаталогВременныхФайлов() + "Схема.xml";
		ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет(МакетКарты.Имя);
		Если ТипЗнч(ДвоичныеДанные)<>Тип("ДвоичныеДанные") Тогда Продолжить конецЕсли;
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Если МакетКарты.Имя = "Поручение" Тогда
			Если НЕ Справочники.CRM_КартыМаршрутов.Поручение.Наименование = МакетКарты.Синоним Тогда
				ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.Поручение.ПолучитьОбъект();
				ПредопределенныйОбъект.Наименование = МакетКарты.Синоним;
				ПредопределенныйОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
				ПредопределенныйОбъект.Записать();
				
				CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.Поручение, ИмяФайла);
			КонецЕсли;
			
		ИначеЕсли МакетКарты.Имя = "ЗапросНаИзменениеСроков" Тогда
			Если НЕ Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.Наименование = МакетКарты.Синоним Тогда
				ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.ПолучитьОбъект();
				ПредопределенныйОбъект.Наименование = МакетКарты.Синоним;
				ПредопределенныйОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
				ПредопределенныйОбъект.Записать();
			КонецЕсли;
			
			CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков, ИмяФайла);
			
		ИначеЕсли МакетКарты.Имя = "Обращение" Тогда
			Элемент = Неопределено;
			Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("Обращение");
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				
				НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
				НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
				НоваяКарта.ИспользоватьПриПринятииОбращения = Истина;
				НоваяКарта.СостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
				НоваяКарта.Наименование = "Обращение";
				НоваяКарта.Записать();
				
				CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
			КонецЕсли;	
		Иначе
			Элемент = Неопределено;
			Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию(МакетКарты.Синоним);
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				
				НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
				НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
				НоваяКарта.Наименование = МакетКарты.Синоним;
				НоваяКарта.Записать();
				
				CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
				
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
				АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
				НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(Новый КомпоновщикНастроекКомпоновкиДанных, АдресСхемыКомпоновкиДанных);
				НоваяКарта.Прочитать();
				НоваяКарта.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
				НоваяКарта.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновки);
				НоваяКарта.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение реквизита УспешностьЗавершения у предопределенных элементов справочника
	// CRM_ВариантыЗавершенияБизнесПроцесса.
	Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.ЗаполнитьРеквизитУспешностьЗавершения();
	
	// Установим виды точек маршрута.
	Справочники.CRM_ОбработчикиСобытийТочекМаршрута.УстановитьВидТочкиВОбработчиках();
	
	// Заполнение реквизитов предопределенных элементов справочника "CRM_КатегорииРешений".
	Справочники.CRM_КатегорииРешений.ЗаполнитьПредопределенныеКатегорииРешений();
	
	// Объекты НСИ CRM 3.0
	ЗаполнитьДанныеНСИ_Редакции3();
	
	// Заполнение предопределенных данных для работы механизма триггеров.
	Справочники.CRM_ДействияТриггеров.СоздатьПредопределенныеДействия();
	Справочники.CRM_УсловияСрабатыванияТриггеров.СоздатьПредопределенныеДействия();
	
	// Заполнение шаблонов ключевых показателей
	ЗаполнитьШаблоныПоказателей();
	
	Перечисления.CRM_СпособыОтправкиРассылок.УстановитьСпособОтправкиРассылокПоУмолчанию();
	
	РегистрыСведений.CRM_РасшифровкиСтатусовПисемEmailРассылки.ОбновитьРасшифровкиСтатусов();
	
	ЗаполнитьРасположениеРеквизитовКлиентов();
	
	УстановитьПериодАктуальностиПоказателей();
	
	ПереименоватьПроценты();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПервыйЗапуск()

// Процедура заполняет новые объекты ИБ данными по умолчанию
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеНСИ_Редакции3() Экспорт
	
	// Заполним константу использования тегов.
	Константы.CRM_ИспользоватьТеги.Установить(Истина);
	
	// Заполним справочник "Сегменты рынка".
	Справочники.CRM_СегментыРынка.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Численность сотрудников клиента".
	Справочники.CRM_ЧисленностьСотрудниковКлиента.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Численность рабочих мест клиента".
	Справочники.CRM_ЧисленностьРабочихМестКлиента.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Виды ключевых событий".
	Справочники.CRM_ВидыКлючевыхСобытий.СоздатьЭлементыСправочникаПоУмолчанию();
	
	// Заполним справочник "Важность клиентов".
	Справочники.CRM_ВажностьКлиентов.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним справочник "Состояния интересов".
	Справочники.CRM_СостоянияИнтересов.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним предопределенные элементы справочника "Виды взаимодействий".
	Справочники.CRM_ВидыВзаимодействий.ЗаполнитьПредопределенныеЭлементы();
	
	// Заполним предопределенные элементы справочника "Офисы компании".
	Справочники.CRM_ОфисыКомпании.СоздатьЭлементыСправочникаПоУмолчанию();
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// сразу же после заполнения офисов, заполним реквизит "Офис" у основного подразделения
		ЗаполнитьРеквизитОфисУОсновногоПодразделения();
	КонецЕсли;
	
	// Заполняем у всех контактных лиц элемент "День рождения" ТЧ "Ключевые события". 
	ЗаполнитьКлючевоеСобытиеДеньРожденияКЛНаОсновеДатыРождения();	
	
	// Загружаем всем пользователям базы настройки полей отображения содержания из типового макета.
	CRM_ОбщегоНазначенияСервер.УстановитьВсемПользователямНастройкиОтображенияСодержанияИзМакета();
	
	// Заполним предопределенные ключевые показатели.
	//CRM_РаботаСВиджетамиВызовСервера.ЗаполнитьПредопределенныеКлючевыеПоказатели();
	
	// Заполним предопределенные виджеты.
	Справочники.CRM_Виджеты.ЗаполнитьПредопределенныеВиджеты();
	
	// Доступ к ключевым показателям и представления по умолчанию.
	ЗаполнитьДоступККлючевымПоказателямИПредставления();
	
	// Заполнение справочника CRM_ВоронкиПродаж.
	Справочники.CRM_ВоронкиПродаж.СоздатьЭлементыСправочникаПоУмолчанию();
	
КонецПроцедуры // ЗаполнитьДанныеНСИ_Редакции3()

#КонецОбласти

#Область ВызываемыеПриКаждомОбновлении

//Заполняет ПВХ CRM_ОбъектыЖурналаДокументов
//
Процедура ЗаполнитьПроверитьПВХОбъектыЖурнала(Параметры) Экспорт
	
	CRM_КлиентыСервер.ЗаполнитьПроверитьПВХОбъектыЖурнала();
	
КонецПроцедуры

#КонецОбласти

Процедура ПроверкаНаборовДополнительныхРеквизитовИСведений() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	|	НаборыДополнительныхРеквизитовИСведений.Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|		ПО ДополнительныеРеквизитыИСведения.НаборСвойств = НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления
	|	И НаборыДополнительныхРеквизитовИСведений.Используется");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Наименование = "Пользователь" Тогда 
			Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Пользователи;
		ИначеЕсли Выборка.Наименование = "Сообщение SMS" Тогда 
			Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СообщениеSMS;
		Иначе
			Возврат;
		КонецЕсли;
		НаборОбъект = Набор.ПолучитьОбъект();
		ПервоеЗаполнение = НаборОбъект.ДополнительныеРеквизиты.Количество()=0 И НаборОбъект.ДополнительныеСведения.Количество()=0;
		Для каждого Реквизит из Выборка.Ссылка.ДополнительныеРеквизиты Цикл
			Если НаборОбъект.ДополнительныеРеквизиты.Найти(Реквизит.Свойство) = Неопределено Тогда
				НовыйРеквизит = НаборОбъект.ДополнительныеРеквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйРеквизит, Реквизит);
				РеквизитОбъект = Реквизит.Свойство.ПолучитьОбъект();
				РеквизитОбъект.НаборСвойств = Набор;
				Если ПервоеЗаполнение Тогда
					РеквизитОбъект.ПометкаУдаления = Ложь;
				КонецЕсли;
				РеквизитОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		Для каждого Реквизит из Выборка.Ссылка.ДополнительныеСведения Цикл
			Если НаборОбъект.ДополнительныеСведения.Найти(Реквизит.Свойство) = Неопределено Тогда
				НовыйРеквизит = НаборОбъект.ДополнительныеСведения.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйРеквизит, Реквизит);
				РеквизитОбъект = Реквизит.Свойство.ПолучитьОбъект();
				РеквизитОбъект.НаборСвойств = Набор;
				Если ПервоеЗаполнение Тогда
					РеквизитОбъект.ПометкаУдаления = Ложь;
				КонецЕсли;
				РеквизитОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		НаборОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

#Область Обновление_3_0_1_1

// Процедура заполняет, очищает и перезаполняет все необходимые для перехода данные
Процедура ПерезаполнитьОбновляемыеПриПереходеДанные() Экспорт
	
	// Перезаполним справочник CRM_ГруппыУниверсальногоЖурнала.
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьКонтакты(Истина);
	Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьПродажи(Истина);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// Перенести реквизиты доступа к учетной записи
		Выборка = Справочники.УчетныеЗаписиЭлектроннойПочты.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты = Объект["УдалитьCRM_ИспользоватьSSLSMTP"];
			Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты = Объект["УдалитьCRM_ИспользоватьSSLPOP3"];
			Если НЕ Объект.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
				Объект.ПользовательSMTP = Объект.Пользователь;
				ПарольSMTP = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, ПарольSMTP, "ПарольSMTP");
			КонецЕсли;
			Попытка
				Объект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// Перезаполним справочник НаборыДополнительныхРеквизитовИСведений.
	ПроверкаНаборовДополнительныхРеквизитовИСведений();
	
КонецПроцедуры

Процедура ОбработатьСтрокуДереваПапок(СтрокаДерева, Знач Родитель = Неопределено, СоответствиеПапок)
	
	Если (СтрокаДерева.Уровень() = 0) ИЛИ (НЕ СтрокаДерева.Ссылка = СтрокаДерева.Родитель.Ссылка) Тогда
		
		тПапка = Справочники.ПапкиЭлектронныхПисем.НайтиПоНаименованию(СтрокаДерева.Наименование, Истина, ?(Родитель = Неопределено, Неопределено, Родитель), СтрокаДерева.Владелец); 
		
		Если НЕ ЗначениеЗаполнено(тПапка) Тогда
			НоваяПапка = Справочники.ПапкиЭлектронныхПисем.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НоваяПапка, СтрокаДерева, , "Ссылка,Родитель");
			НоваяПапка.CRM_Вид = СтрокаДерева.Вид;
			НоваяПапка.CRM_ПапкаMSExchange = СтрокаДерева.ПапкаMSExchange;
		Иначе
			НоваяПапка = тПапка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(НоваяПапка, СтрокаДерева, , "Ссылка,Родитель");
			НоваяПапка.CRM_Вид = СтрокаДерева.Вид;
			НоваяПапка.CRM_ПапкаMSExchange = СтрокаДерева.ПапкаMSExchange;
		КонецЕсли;
		
		Если НЕ Родитель = Неопределено Тогда
			НоваяПапка.Родитель = Родитель;
		КонецЕсли;
		
		НоваяПапка.ОбменДанными.Загрузка = Истина;
		НоваяПапка.Записать();
		
		СоответствиеПапок.Вставить(СтрокаДерева.Ссылка, НоваяПапка.Ссылка);
		
		тПапка = НоваяПапка.Ссылка;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			Для Каждого СтрокаСтроки ИЗ СтрокаДерева.Строки Цикл
				ОбработатьСтрокуДереваПапок(СтрокаСтроки, тПапка, СоответствиеПапок);
			КонецЦИкла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет копирование периодов планирования.
//
// Параметры:
//	Нет.
//
Процедура СкопироватьПериодыПланирования() Экспорт
	
	Попытка
		
		Выборка = Справочники.УдалитьCRM_ПериодыПланирования.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ПометкаУдаления Тогда
				НовыйПериод = Справочники.CRM_ПериодыПланирования.СоздатьЭлемент();
				НовыйПериод.Наименование = Выборка.Наименование + " (*)";
				НовыйПериод.ДатаНачала = Выборка.ДатаНачала;
				НовыйПериод.ДатаОкончания = Выборка.ДатаОкончания;
				НовыйПериод.Периодичность = Перечисления.Периодичность[Строка(Выборка.Периодичность)];
				СтарыйПериод = Выборка.ПолучитьОбъект();
				СтарыйПериод.ПометкаУдаления = Истина;
				Попытка
					НовыйПериод.Записать();
					СтарыйПериод.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		// Справочник удален
	КонецПопытки;
	
КонецПроцедуры // СкопироватьПериодыПланирования()

// Процедура очищает данные по событиям.
//
// Параметры:
//	Нет.
//
Процедура ОчиститьДанныеПоСобытиям() Экспорт
	
	// Разрегистрировать документы CRM_Событие в журнале документов.
	ПВХСобытие = ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.НайтиПоНаименованию("Событие");
	Если ПВХСобытие <> Неопределено Тогда
		МассивПомеченныхОбъектов = Новый Массив();
		МассивПомеченныхОбъектов.Добавить(ПВХСобытие);
		Обработки.CRM_РегистрацияОбъектовВУниверсальномЖурналеДокументов.ЗарегистрироватьРазрегистрироватьОбъекты(МассивПомеченныхОбъектов, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ОчиститьДанныеПоСобытиям()

// Процедура заполняет данные партнеров.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеПоПартнерамПортретИКИ() Экспорт
	
	// Заполнение реквизитов партнера CRM_ПроцентЗаполненностиПортрет и CRM_ПроцентЗаполненностиКИ
	// (МодульОбъекта.ПередЗаписью).
	Выборка = Справочники.Партнеры.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				Объект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеПоПартнерамПортретИКИ()

// Процедура заполняет доступ к ключевым показателям.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДоступККлючевымПоказателямИПредставления() Экспорт
	
		
КонецПроцедуры // ЗаполнитьДоступККлючевымПоказателямИПредставления()

// Процедура перезаполняет реквизит упорядочивания.
//
// Параметры:
//	Нет.
//
Процедура ПерезаполнитьРеквизитДопУпорядочивания() Экспорт
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Справочник.Ссылка,
	|	Справочник.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.#ИмяСправочника# КАК Справочник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
	ТипыСправочников = Метаданные.ОпределяемыеТипы.CRM_ОбъектСНастраиваемымПорядком.Тип.Типы();
	Для Каждого ТипСправочника Из ТипыСправочников Цикл
		СправочникСсылка = Новый(ТипСправочника);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ИмяСправочника#", СправочникСсылка.Метаданные().Имя);
		Выборка = Запрос.Выполнить().Выбрать();
		ДопНомер = 1;
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.РеквизитДопУпорядочивания = ДопНомер;
			ДопНомер = ДопНомер + 1;
			Попытка
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;	
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры	// ПерезаполнитьРеквизитДопУпорядочивания()

// Процедура заполняет реквизит "ВидЭтапа" у элементов справочника "CRM_ВоронкиПродаж".
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьВидЭтапаВоронокПродаж() Экспорт
	
	Выборка = Справочники.CRM_ВоронкиПродаж.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.Предопределенный Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВидЭтапа) И ЗначениеЗаполнено(Выборка.Родитель) Тогда
				
				ВоронкаОбъект			= Выборка.Ссылка.ПолучитьОбъект();
				ВоронкаОбъект.ВидЭтапа	= Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоЭтапам;
				Попытка
					ВоронкаОбъект.Записать();
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидЭтапаВоронокПродаж()

// Процедура заполняет офис во всех всех подразделениях.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьОфисУПодразделений() Экспорт
	
	ОсновнойОфис = Справочники.CRM_ОфисыКомпании.НайтиПоНаименованию(НСтр("ru='Основной офис'"));
	
	Если ЗначениеЗаполнено(ОсновнойОфис) Тогда
		
		Выборка = Справочники.СтруктураПредприятия.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.CRM_Офис	= ОсновнойОфис;
			СправочникОбъект.CRM_МаксимальноеКоличествоБалловВДень = 48;
			СправочникОбъект.CRM_ПроцентПревышенияКоличестваБаллов = 10;
			Попытка
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОфисУПодразделений()

// Процедура создает записи по задачам в регистре сведений CRM_ЗадачиПользователей
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьОбъектыЗадачПользователей() Экспорт
	
	Выборка = Задачи.ЗадачаИсполнителя.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектЗадачи = Выборка.ПолучитьОбъект();
		Попытка
			ОбъектЗадачи.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьОбъектыЗадачПользователей()

// Процедура удаляет из регистра сведений "Объекты этапов" И "Объекты этапов бизнес-процессов" ссылку на документ "Событие"
//  	а также зачищает записи регистра сведений "Объекты по бизнес-процессам" по ресурсу "ВидОбъекта", имеющих
//  		ссылку на Событие. Затем помечается на удаление сам элемент ПВХ "CRM_ВидыОбъектовБизнесПроцессов"
// 
// Параметры:
//	Нет.
//
Процедура УдалитьИзРегистраОбъектыЭтаповСсылкуНаСобытие() Экспорт
	
	// Проверим наличие в ИБ элемента
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ВидыОбъектовБизнесПроцессов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов КАК CRM_ВидыОбъектовБизнесПроцессов
	|ГДЕ
	|    CRM_ВидыОбъектовБизнесПроцессов.ИмяПредопределенныхДанных = ""Событие""";	 
	
	ЭлементОтсутсвуетВДанных = Запрос.Выполнить().Пустой();
	Если ЭлементОтсутсвуетВДанных Тогда
		Возврат;
	КонецЕсли;		
	
	// сначала зачищаем регистр "CRM_ОбъектыЭтапов" по виду объекта
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	CRM_ОбъектыЭтапов.Объект,
	|	CRM_ОбъектыЭтапов.ТочкаМаршрута,
	|	CRM_ОбъектыЭтапов.ВидОбъекта,
	|	CRM_ОбъектыЭтапов.ЭтапОснования,
	|	CRM_ОбъектыЭтапов.Обязательный
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЭтапов КАК CRM_ОбъектыЭтапов
	|ГДЕ
	|	CRM_ОбъектыЭтапов.ВидОбъекта = &Событие";
	
	Запрос.УстановитьПараметр("Событие", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ОбъектыЭтапов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Результат.Объект);
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(Результат.ТочкаМаршрута);
		НаборЗаписей.Отбор.ВидОбъекта.Установить(Результат.ВидОбъекта);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;		
	
	// теперь зачищаем регистр "CRM_ОбъектыЭтаповБизнесПроцессов" по виду объекта
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	CRM_ОбъектыЭтаповБизнесПроцессов.Объект,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ТочкаМаршрута,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ВидОбъекта,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ЭтапОснования,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.Обязательный
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЭтаповБизнесПроцессов КАК CRM_ОбъектыЭтаповБизнесПроцессов
	|ГДЕ
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ВидОбъекта = &Событие";
	
	Запрос.УстановитьПараметр("Событие", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ОбъектыЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Результат.Объект);
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(Результат.ТочкаМаршрута);
		НаборЗаписей.Отбор.ВидОбъекта.Установить(Результат.ВидОбъекта);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;			
	
	// обнуляем ссылку на ВидОбъекта в регистре CRM_ОбъектыПоБизнесПроцессам
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс,
	|	CRM_ОбъектыПоБизнесПроцессам.Задача,
	|	CRM_ОбъектыПоБизнесПроцессам.ТочкаМаршрута,
	|	CRM_ОбъектыПоБизнесПроцессам.Объект,
	|	CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации,
	|	CRM_ОбъектыПоБизнесПроцессам.ВидОбъекта
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
	|ГДЕ
	|	CRM_ОбъектыПоБизнесПроцессам.ВидОбъекта = &Событие";
	
	Запрос.УстановитьПараметр("Событие", ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие);
	
	Результат = Запрос.Выполнить().Выбрать();	
	Пока Результат.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(Результат.БизнесПроцесс);
		НаборЗаписей.Отбор.Задача.Установить(Результат.Задача);
		НаборЗаписей.Отбор.ТочкаМаршрута.Установить(Результат.ТочкаМаршрута);
		НаборЗаписей.Отбор.Объект.Установить(Результат.Объект);
		НаборЗаписей.Прочитать();
		Для Каждого СтрокаЗаписи Из НаборЗаписей Цикл
			СтрокаЗаписи.ВидОбъекта = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ПустаяСсылка();
		КонецЦикла;	
		НаборЗаписей.Записать();
	КонецЦикла;	
	
	// помечаем на удаление предопеределенный элемент ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие
	ВидОбъектаСобытие = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие.ПолучитьОбъект();
	ВидОбъектаСобытие.ОбменДанными.Загрузка = Истина;
	ВидОбъектаСобытие.ИмяПредопределенныхДанных	= "";
	ВидОбъектаСобытие.Записать();
	ВидОбъектаСобытие.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры	

// Процедура удаляет ссылку на событие во всех элементах справочника "CRM_ГруппыУниверсальногоЖурнала",
//  а также добавляет ссылки на Интерес и Взаимодействие в группу журнала "Взаимодействие",
//    а также заменяет ссылку старого документа СМС на новый документ СМС в группах универсального журнала
//
// Параметры:
//	Нет.
//
Процедура ОчисткаСсылкиНаСобытиеИЗаменаДокументаСМСВГруппахУниверсальногоЖурнала() Экспорт 
	
	Выборка		= Справочники.CRM_ГруппыУниверсальногоЖурнала.Выбрать();
	ЭтоСобытие	= CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта("Документ.УдалитьCRM_Событие");
	ДокументСМС = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта("Документ.СообщениеSMS"); 
	Пока Выборка.Следующий() Цикл
		ЗаписыватьВыборку = Ложь;
		ВыборкаОбъект = Выборка.ПолучитьОбъект();			
		КоличествоЭлементов = ВыборкаОбъект.Состав.Количество();
		Сч = 0;
		Пока Сч <= КоличествоЭлементов - 1 Цикл
			СтрокаСостава = ВыборкаОбъект.Состав.Получить(Сч);
			Если СтрокаСостава.Объект = ЭтоСобытие Тогда
				ВыборкаОбъект.Состав.Удалить(СтрокаСостава);
				КоличествоЭлементов = КоличествоЭлементов - 1;
				ЗаписыватьВыборку = Истина;
			ИначеЕсли СтрокаСостава.Объект.Наименование = Нстр("ru ='SMS сообщение'") Тогда
				СтрокаСостава.Объект = ДокументСМС;
				ЗаписыватьВыборку = Истина;
				Сч = Сч + 1;
			Иначе
				Сч = Сч + 1;
			КонецЕсли;			
		КонецЦикла;
		Если ЗаписыватьВыборку Тогда
			Попытка
				ВыборкаОбъект.Записать();
			Исключение
			КонецПопытки;			
		КонецЕсли;
	КонецЦикла;		
	
	// в группу "Контакты" добавляем ссылку на взаимодействие и интерес, если этих ссылок ещё там нет
	ГруппаКонтакты = Справочники.CRM_ГруппыУниверсальногоЖурнала.Контакты;
	ДобавлятьВзаимодействие = Ложь;
	ДобавлятьИнтерес = Ложь;
	
	// проверим, есть ли в ТЧ ссылка на взаимодействие
	МассивСтрок = ГруппаКонтакты.Состав.НайтиСтроки(Новый Структура("Объект", CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта("Документ.CRM_Взаимодействие"))); 		
	Если МассивСтрок.Количество() = 0 Тогда
		ДобавлятьВзаимодействие = Истина;
	КонецЕсли;	
	
	// проверим, есть ли в ТЧ ссылка на интерес	
	МассивСтрок = ГруппаКонтакты.Состав.НайтиСтроки(Новый Структура("Объект", CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоМетаданнымОбъекта("Документ.CRM_Интерес"))); 		
	Если МассивСтрок.Количество() = 0 Тогда
		ДобавлятьИнтерес = Истина;
	КонецЕсли;
	
	Если ДобавлятьВзаимодействие ИЛИ ДобавлятьИнтерес Тогда
		
		МассивТипов = Новый Массив();
		Если ДобавлятьВзаимодействие Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Взаимодействие"));
		КонецЕсли;			
		Если ДобавлятьВзаимодействие Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
		КонецЕсли;
		
		ГруппаКонтактыОбъект = ГруппаКонтакты.ПолучитьОбъект();
		Справочники.CRM_ГруппыУниверсальногоЖурнала.ЗаполнитьОбъектПоМассивуТипов(ГруппаКонтактыОбъект, МассивТипов);
		Попытка
			ГруппаКонтактыОбъект.Записать();
		Исключение
		КонецПопытки;			
		
	КонецЕсли;		
	
КонецПроцедуры	

// Процедура снимает пометку "Использовать для оповещений" у всех видов КИ Emailов Контактных лиц и Партнёров-частников
//   а также устанавливает аналогичную пометку у нового Вида "Email для рассылки" у них же
//
// Параметры:
//	Нет.
//
Процедура УстановитьПризнакИспользоватьДляОповещенийДляВидовКИEmailРассылки() Экспорт
	
	УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица,   Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,    Истина,	Ложь, Ложь,	3);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь, Ложь,	5);	
	
	// сначала снимаем флаг у необходимых видах КИ
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
	МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК КонтактнаяИнформация
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель В(&МассивРодителей)
	|	И ВидыКонтактнойИнформации.Тип = &ТипКИ
	|	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.CRM_ИспользоватьДляОповещений";
	
	Запрос.УстановитьПараметр("МассивРодителей", МассивРодителей);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектКИ = Выборка.КонтактнаяИнформация.ПолучитьОбъект();
		ОбъектКИ.CRM_ИспользоватьДляОповещений = Ложь;
		Попытка
			ОбъектКИ.Записать();
		Исключение
		КонецПопытки;			
	КонецЦикла;	
	
	//устанавливаем флаг у новых видов КИ
	ОбъектКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица.ПолучитьОбъект();
	ОбъектКИ.CRM_ИспользоватьДляОповещений 	= Истина;
	ОбъектКИ.ПроверятьКорректность			= Истина;
	Попытка
		ОбъектКИ.Записать();
	Исключение
	КонецПопытки;	
	
	ОбъектКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица.ПолучитьОбъект();
	ОбъектКИ.CRM_ИспользоватьДляОповещений 	= Истина;
	ОбъектКИ.ПроверятьКорректность			= Истина;	
	Попытка
		ОбъектКИ.Записать();
	Исключение
	КонецПопытки;				
	
КонецПроцедуры	

#КонецОбласти //Обновление_3_0_1_1

#Область Обновление_3_0_1_2

// Процедура заполняет реквизит Наименование у регшламентного задания".
//
// Параметры:
//	Нет.
//
Процедура СкорретироватьНаименованиеРегЗадания() Экспорт
	
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийПоСМС);
	РегЗадание.Наименование = Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийПоСМС.Синоним;
	Попытка
		РегЗадание.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры // СкорретироватьНаименованиеРегЗадания()

// Процедура удаляет записи объектов с типом "Событие".
//
// Параметры:
//	Нет.
//
Процедура ОчиститьТипСобытиеВОбъектах() Экспорт
	
	// задачи по исправлению клиентской базы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ЗадачиПоИсправлениюКлиентскойБазы.БизнесПроцесс,
	|	CRM_ЗадачиПоИсправлениюКлиентскойБазы.Исполнитель,
	|	CRM_ЗадачиПоИсправлениюКлиентскойБазы.Партнер
	|ИЗ
	|	РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы КАК CRM_ЗадачиПоИсправлениюКлиентскойБазы
	|ГДЕ
	|	CRM_ЗадачиПоИсправлениюКлиентскойБазы.Партнер ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(ВыборкаДетальныеЗаписи.БизнесПроцесс);
		НаборЗаписей.Отбор.Исполнитель.Установить(ВыборкаДетальныеЗаписи.Исполнитель);
		НаборЗаписей.Отбор.Партнер.Установить(ВыборкаДетальныеЗаписи.Партнер);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// используемые решения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ИспользуемыеРешения.Объект
	|ИЗ
	|	РегистрСведений.CRM_ИспользуемыеРешения КАК CRM_ИспользуемыеРешения
	|ГДЕ
	|	CRM_ИспользуемыеРешения.Объект ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Объект);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// события календаря
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_СобытияКалендаря.ПериодНачало,
	|	CRM_СобытияКалендаря.ПериодОкончание,
	|	CRM_СобытияКалендаря.Пользователь,
	|	CRM_СобытияКалендаря.Объект
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
	|ГДЕ
	|	CRM_СобытияКалендаря.Объект ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодНачало.Установить(ВыборкаДетальныеЗаписи.ПериодНачало);
		НаборЗаписей.Отбор.ПериодОкончание.Установить(ВыборкаДетальныеЗаписи.ПериодОкончание);
		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.Объект);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// напоминания
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь,
	|	CRM_Напоминания.Предмет,
	|	CRM_Напоминания.ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.Предмет ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
		НаборЗаписей.Отбор.Предмет.Установить(ВыборкаДетальныеЗаписи.Предмет);
		НаборЗаписей.Отбор.ДатаНачала.Установить(ВыборкаДетальныеЗаписи.ДатаНачала);
		НаборЗаписей.Отбор.ДатаОповещения.Установить(ВыборкаДетальныеЗаписи.ДатаОповещения);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// оповещения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Оповещения.Получатель,
	|	CRM_Оповещения.Предмет,
	|	CRM_Оповещения.ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения,
	|	CRM_Оповещения.Канал
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.Предмет ССЫЛКА Документ.УдалитьCRM_Событие";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Получатель.Установить(ВыборкаДетальныеЗаписи.Получатель);
		НаборЗаписей.Отбор.Предмет.Установить(ВыборкаДетальныеЗаписи.Предмет);
		НаборЗаписей.Отбор.ДатаОповещения.Установить(ВыборкаДетальныеЗаписи.ДатаОповещения);
		НаборЗаписей.Отбор.ВидОповещения.Установить(ВыборкаДетальныеЗаписи.ВидОповещения);
		НаборЗаписей.Отбор.Канал.Установить(ВыборкаДетальныеЗаписи.Канал);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Разрегистрировать документы CRM_Событие в журнале документов.
	ПВХСобытие = ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.НайтиПоНаименованию("Событие");
	Если ПВХСобытие <> Неопределено Тогда
		МассивПомеченныхОбъектов = Новый Массив();
		МассивПомеченныхОбъектов.Добавить(ПВХСобытие);
		Обработки.CRM_РегистрацияОбъектовВУниверсальномЖурналеДокументов.ЗарегистрироватьРазрегистрироватьОбъекты(МассивПомеченныхОбъектов, Ложь);
	КонецЕсли;
	
КонецПроцедуры // СкорретироватьНаименованиеРегЗадания()

// Процедура перезаписывать всех клиентов и контактных лиц для заполнения данных о портрете и контактной информации
//
// Параметры:
//	Нет.
//
Процедура ПерезаписатьКлиентыКонтакты(Параметры) Экспорт
	
	Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать();
	Пока Выборка.Следующий() Цикл
		тОбъект = Выборка.ПолучитьОбъект();
		Попытка
			тОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Выборка = Справочники.Партнеры.Выбрать();
	Пока Выборка.Следующий() Цикл
		тОбъект = Выборка.ПолучитьОбъект();
		Попытка
			тОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ПерезаписатьКлиентыКонтакты()

// Процедура очищает неиспользуемый вариант оповещения
//
// Параметры:
//	Нет.
//
Процедура ОчиститьСтароеОповещениеОНовыхЭлектронныхПисьмах() Экспорт
	
	Выборка = Справочники.Пользователи.Выбрать();
	ВидОповещения = Справочники.CRM_ВидыОповещений.НайтиПоНаименованию(НСтр("ru = 'Оповещать о новых электронных письмах'"));
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.CRM_ОповещенияПользовательскиеНастройки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидОповещения.Установить(ВидОповещения);
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Ссылка);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидОповещения.Установить(ВидОповещения);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь,
	|	CRM_Напоминания.Предмет,
	|	CRM_Напоминания.ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.ВидОповещения = &ВидОповещения";
	
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
		НаборЗаписей.Отбор.Предмет.Установить(ВыборкаДетальныеЗаписи.Предмет);
		НаборЗаписей.Отбор.ДатаНачала.Установить(ВыборкаДетальныеЗаписи.ДатаНачала);
		НаборЗаписей.Отбор.ДатаОповещения.Установить(ВыборкаДетальныеЗаписи.ДатаОповещения);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры // ОчиститьСтароеОповещениеОНовыхЭлектронныхПисьмах()

#КонецОбласти //Обновление_3_0_1_2

#Область Обновление_3_0_1_3

// Процедура заполняет реквизит Наименование у регламентного задания".
//
// Параметры:
//	Нет.
//
Процедура ОбновитьПараметрыВзаимодействийИзИнтереса() Экспорт
	
	Выборка = Документы.CRM_Взаимодействие.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			вОбъект = Выборка.Ссылка.ПолучитьОбъект();
			тИнтерес = Выборка.ДокументОснование;
			Если вОбъект.СтатусВзаимодействия <> Справочники.CRM_СостоянияСобытий.Завершено
				ИЛИ вОбъект.СтатусВзаимодействия <> Справочники.CRM_СостоянияСобытий.Отменено Тогда
				вОбъект.Ответственный = тИнтерес.Ответственный;
				вОбъект.Подразделение = тИнтерес.Подразделение;
			КонецЕсли;
			вОбъект.КонтактноеЛицо = тИнтерес.КонтактноеЛицо;
			вОбъект.Организация = тИнтерес.Организация;
			вОбъект.Партнер = тИнтерес.Партнер;
			вОбъект.ПотенциальныйКлиент = тИнтерес.ПотенциальныйКлиент;
			Попытка
				вОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкорретироватьНаименованиеРегЗадания()

#КонецОбласти //Обновление_3_0_1_3

#Область Обновление_3_0_1_4

// Процедура заполняет реквизит "Используется" у видов КИ
//
// Параметры:
//	Нет.
//
Процедура ВключитьИспользованиеВидовКИ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И НЕ ВидыКонтактнойИнформации.Используется";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектКИ = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектКИ.Используется = Истина;
		Попытка
			ОбъектКИ.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ВключитьИспользованиеВидовКИ()

// Процедура перезаполняет регистр сведений CRM_АРМ_ПорядокОбъектов, в связи с изменением названия колонок в АРМе
//
// Параметры:
//	Нет.
//
Процедура Перезаполнить_CRM_АРМ_ПорядокОбъектов() Экспорт
	
	Выборка = РегистрыСведений.CRM_АРМ_ПорядокОбъектов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИзмерениеАРМ <> "Сделать сегодня" Тогда Продолжить конецЕсли;
		Менеджер = Выборка.ПолучитьМенеджерЗаписи();
		МенеджерНовый = РегистрыСведений.CRM_АРМ_ПорядокОбъектов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерНовый, Менеджер);
		МенеджерНовый.ИзмерениеАРМ = "Текущие (сегодня";
		МенеджерНовый.Записать(Истина);
		Менеджер.Удалить();
	КонецЦикла;	
	
КонецПроцедуры // Перезаполнить_CRM_АРМ_ПорядокОбъектов()

// Процедура заполняет новую предопределенную карту
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьКартуЗапроса() Экспорт
	
	Для Каждого МакетКарты Из Метаданные.Справочники.CRM_КартыМаршрутов.Макеты Цикл
		
		Если МакетКарты.Имя = "ЗапросНаИзменениеСроков" Тогда
			
			ИмяФайла = КаталогВременныхФайлов() + "Схема.xml";
			ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет(МакетКарты.Имя);
			Если ТипЗнч(ДвоичныеДанные)<>Тип("ДвоичныеДанные") Тогда Продолжить конецЕсли;
			ДвоичныеДанные.Записать(ИмяФайла);
			
			Если НЕ Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.Наименование = МакетКарты.Синоним Тогда
				ПредопределенныйОбъект = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.ПолучитьОбъект();
				ПредопределенныйОбъект.Наименование = МакетКарты.Синоним;
				ПредопределенныйОбъект.Записать();
			КонецЕсли;
			
			CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков, ИмяФайла);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Перезаполнить_CRM_АРМ_ПорядокОбъектов()

#КонецОбласти //Обновление_3_0_1_4

#Область Обновление_3_0_1_6

Процедура ЗаполнитьСписокУчастниковВДокументах(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	CRM_Мероприятие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Мероприятие КАК CRM_Мероприятие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	|		ПО (CRM_МероприятиеСторонниеЛица.Ссылка = CRM_Мероприятие.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	|		ПО CRM_Мероприятие.Ссылка = CRM_МероприятиеСвоиЛица.Ссылка
	|ГДЕ
	|	(НЕ CRM_МероприятиеСторонниеЛица.Ссылка ЕСТЬ NULL 
	|				И (ВЫРАЗИТЬ(CRM_Мероприятие.СписокКлиентов КАК СТРОКА(10))) = """"
	|			ИЛИ НЕ CRM_МероприятиеСвоиЛица.Ссылка ЕСТЬ NULL 
	|				И (ВЫРАЗИТЬ(CRM_Мероприятие.СписокУчастников КАК СТРОКА(10))) = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	CRM_КонтрольнаяТочкаПроектаПользователиКТ.Ссылка
	|ИЗ
	|	Документ.CRM_КонтрольнаяТочкаПроекта.ПользователиКТ КАК CRM_КонтрольнаяТочкаПроектаПользователиКТ
	|ГДЕ
	|	(ВЫРАЗИТЬ(CRM_КонтрольнаяТочкаПроектаПользователиКТ.Ссылка.СписокУчастников КАК СТРОКА(10))) = """"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			СписокКлиентов = "";
			СписокУчастников = "";
			Для Каждого Участник Из ДокументОбъект.СторонниеЛица Цикл
				Если ЗначениеЗаполнено(Участник.Партнер) Тогда
					СписокКлиентов = СписокКлиентов + ?(СписокКлиентов = "","","; ") + Участник.Партнер;
				КонецЕсли;
				Если ЗначениеЗаполнено(Участник.КонтактноеЛицо) Тогда
					СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ") + Участник.КонтактноеЛицо;
				КонецЕсли;
			КонецЦикла;
			ДокументОбъект.СписокКлиентов = СписокКлиентов;
			Для Каждого Участник Из ДокументОбъект.СвоиЛица Цикл
				СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ") + Участник.Лицо;
			КонецЦикла;
		Иначе
			СписокУчастников = "";
			Для Каждого Участник Из ДокументОбъект.ПользователиКТ Цикл
				СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ") + Участник.Пользователь;
			КонецЦикла;
		КонецЕсли;
		ДокументОбъект.СписокУчастников = СписокУчастников;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьРегистр_CRM_СобытияКалендаря(Параметры) Экспорт
	
	ВыборкаДокументов = Документы.CRM_Мероприятие.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
	ВыборкаДокументов = Документы.CRM_Взаимодействие.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_1_6

#Область Обновление_3_0_2_1

Процедура ЗаполнитьШаблоныПоказателей() Экспорт
	
	Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗаполнитьПредопределенныеПоказатели();
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_2_1

#Область Обновление_3_0_2_2

// Устанавливает значения свойства Используется в значение Истина.
//
Процедура УстановитьЗначениеПризнакаИспользуется() Экспорт
	
	УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется();
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_2_2

#Область Обновление_3_0_2_3

// Устанавливает значения свойства Используется в значение Истина.
//
Процедура ИзменитьТипыХарактеристик() Экспорт
	
	
	Квалификатор = Новый КвалификаторыСтроки(255);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеСтроки = Новый ОписаниеТипов(Массив, , Квалификатор);
	
	Характеристика = ПланыВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi.ПолучитьОбъект();
	Характеристика.ТипЗначения = ОписаниеСтроки;
	Характеристика.Записать();		
	
	Характеристика = ПланыВидовХарактеристик.CRM_НастройкиПользователей.RefreshTokenGApi.ПолучитьОбъект();
	Характеристика.ТипЗначения = ОписаниеСтроки;
	Характеристика.Записать();
	
КонецПроцедуры

// Процедура обновляет токены Google.
//
Процедура ВыполнитьОбновлениеДлиныТокенов() Экспорт
	// Проверяем текущую длину токена.
	Квалификатор = Новый КвалификаторыСтроки(255);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеСтроки = Новый ОписаниеТипов(Массив, , Квалификатор);
	Если ПланыВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi.ТипЗначения = ОписаниеСтроки Тогда Возврат; КонецЕсли;
	// Обновляем длину токена обновления.
	Характеристика	= ПланыВидовХарактеристик.CRM_НастройкиПользователей.RefreshTokenGApi.ПолучитьОбъект();
	Характеристика.ТипЗначения	= ОписаниеСтроки;
	Попытка
		Характеристика.Записать();
	Исключение
	КонецПопытки;	
	// Обновляем длину токена авторизации.
	Характеристика	= ПланыВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi.ПолучитьОбъект();
	Характеристика.ТипЗначения	= ОписаниеСтроки;
	ХарактеристикаИзменена	= Истина;
	Попытка
		Характеристика.Записать();
	Исключение
		ХарактеристикаИзменена	= Ложь;
	КонецПопытки;	
	Если ХарактеристикаИзменена Тогда
		// Удаляем токены авторизации.
		НаборЗаписей	= РегистрыСведений.CRM_НастройкиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi);
		НаборЗаписей.Прочитать();
		МассивПользователей	= НаборЗаписей.ВыгрузитьКолонку("Пользователь");
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		// Получаем новые токены авторизации.
		Для Каждого ТекПользователь Из МассивПользователей Цикл
			Если ЗначениеЗаполнено(ТекПользователь) Тогда
				СтруктураТокенаАвторизации = CRM_GoogleИнтеграция.ПолучитьКодАвторизации(ТекПользователь);
				Если НЕ (СтруктураТокенаАвторизации = Неопределено) Тогда 
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(СтруктураТокенаАвторизации.access_token, "AccessTokenGApi", ТекПользователь);
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() + Число(СтруктураТокенаАвторизации.TTL), "ВремяЖизниТокенаAPI", ТекПользователь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

// Перезаполнение карты маршрута Поручение из макета.
//
Процедура ПерезаполнитьКартуМаршрутаПоручение() Экспорт
	
	ИмяФайла = КаталогВременныхФайлов() + "Схема.xml";
	ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("Поручение");
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда ДвоичныеДанные.Записать(ИмяФайла); конецЕсли;
	
	CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(Справочники.CRM_КартыМаршрутов.Поручение, ИмяФайла);
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_2_3

#Область Обновление_3_0_3_1

//Перенос записей регистра Объекты этапов в Условия этапов
//
Процедура ОбъектыЭтаповВУсловияЭтапов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыЭтапов.Объект,
	|	CRM_ОбъектыЭтапов.ТочкаМаршрута,
	|	CRM_ОбъектыЭтапов.ВидОбъекта,
	|	CRM_ОбъектыЭтапов.ЭтапОснования,
	|	CRM_ОбъектыЭтапов.Обязательный,
	|	ЛОЖЬ КАК ЭтоБизнесПроцесс
	|ПОМЕСТИТЬ ВсеЗаписи
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЭтапов КАК CRM_ОбъектыЭтапов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ОбъектыЭтаповБизнесПроцессов.Объект,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ТочкаМаршрута,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ВидОбъекта,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.ЭтапОснования,
	|	CRM_ОбъектыЭтаповБизнесПроцессов.Обязательный,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЭтаповБизнесПроцессов КАК CRM_ОбъектыЭтаповБизнесПроцессов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗаписи.Объект КАК Объект,
	|	ВсеЗаписи.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВсеЗаписи.ВидОбъекта КАК ВидОбъекта,
	|	ВсеЗаписи.ЭтапОснования КАК ЭтапОснования,
	|	ВсеЗаписи.Обязательный КАК Обязательный,
	|	ВсеЗаписи.ЭтоБизнесПроцесс КАК ЭтоБизнесПроцесс
	|ИЗ
	|	ВсеЗаписи КАК ВсеЗаписи
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТочкаМаршрута),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидОбъекта),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапОснования),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Обязательный)
	|ПО
	|	ЭтоБизнесПроцесс,
	|	Объект";
	
	ВыборкаПоФлагу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоФлагу.Следующий() Цикл
		
		Если ВыборкаПоФлагу.ЭтоБизнесПроцесс Тогда
			НаборРегистра = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
		Иначе
			НаборРегистра = РегистрыСведений.bpmУсловияЭтапов.СоздатьНаборЗаписей();
		КонецЕсли;
		
		ВыборкаПоОбъектам = ВыборкаПоФлагу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОбъектам.Следующий() Цикл
			НаборРегистра.Отбор.Объект.Установить(ВыборкаПоОбъектам.Объект);
			НаборРегистра.Прочитать();
			НаборРегистра.Очистить();
			
			Выборка = ВыборкаПоОбъектам.Выбрать();
			Пока Выборка.Следующий() Цикл
				Идентификатор = Новый УникальныйИдентификатор();
				
				новаяСтрока = НаборРегистра.Добавить();
				новаяСтрока.Объект			= ВыборкаПоОбъектам.Объект;
				новаяСтрока.ТочкаМаршрута	= Выборка.ТочкаМаршрута;
				новаяСтрока.Идентификатор	= Идентификатор;
				новаяСтрока.Событие			= Перечисления.bpmСобытияЭтапа.ПриЗавершении;
				новаяСтрока.ТипДействия		= Перечисления.bpmТипыДействий.ВводДокумента;
				новаяСтрока.Проверка		= Выборка.Обязательный;
				новаяСтрока.Цель			= Выборка.ВидОбъекта;
			КонецЦикла;
			
			НаборРегистра.Записать();
			НаборРегистра.Отбор.Сбросить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает состояние в Картах маршрута и Процессах
//
Процедура УстановитьСостоянияКартИПроцессов() Экспорт
	
	ИмяФайла = КаталогВременныхФайлов() + "Схема.xml";
	ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("Обращение");
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда ДвоичныеДанные.Записать(ИмяФайла); конецЕсли;
	
	Элемент = Неопределено;
	Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("Обращение");
	Если Не ЗначениеЗаполнено(Элемент) Тогда
		
		НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
		НоваяКарта.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
		НоваяКарта.ИспользоватьПриПринятииОбращения = Истина;
		НоваяКарта.СостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
		НоваяКарта.Наименование = "Обращение";
		НоваяКарта.Записать();
		
		CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КартаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если КартаОбъект.Редактируется Тогда
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Запланирован;
		ИначеЕсли КартаОбъект.ПометкаУдаления Тогда
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Отменен;
		Иначе
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Действует;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КартаОбъект.ТипПроцесса) Тогда
			Если Выборка.Ссылка = Справочники.CRM_КартыМаршрутов.Поручение Тогда
				КартаОбъект.ТипПроцесса = перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
			Иначе
				КартаОбъект.ТипПроцесса = перечисления.bpmТипыПроцессов.ПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		КартаОбъект.ОбменДанными.Загрузка = Истина;
		КартаОбъект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Проекты.Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.CRM_ЭтоПроект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если КартаОбъект.ПометкаУдаления Тогда
			ПроцессОбъект.bpmСостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Отменен;
		Иначе
			ПроцессОбъект.bpmСостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Действует;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПроцессОбъект.bpmТипПроцесса) Тогда
			ПроцессОбъект.bpmТипПроцесса = перечисления.bpmТипыПроцессов.ПоУмолчанию;
		КонецЕсли;
		
		ПроцессОбъект.ОбменДанными.Загрузка = Истина;
		ПроцессОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_3_1

#Область Обновление_3_0_3_2

//Устанавливает вид объекта в Картах маршрута и Процессах
//
Процедура УстановитьВидОбъектаКартИПроцессов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КартаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если КартаОбъект.Редактируется Тогда
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Запланирован;
		ИначеЕсли КартаОбъект.ПометкаУдаления Тогда
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Отменен;
		Иначе
			КартаОбъект.СостояниеПроцесса = перечисления.bpmСостояниеПроцесса.Действует;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КартаОбъект.ТипПроцесса) Тогда
			КартаОбъект.ТипПроцесса = перечисления.bpmТипыПроцессов.ПоУмолчанию;
		КонецЕсли;
		КартаОбъект.удалитьВидОбъекта = Перечисления.bpmВидыОбъектовПроцесса.Интерес;
		КартаОбъект.ОбменДанными.Загрузка = Истина;
		КартаОбъект.Записать();
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_3_2

#Область Обновление_3_0_4_1

//Устанавливает константу ИспользоватьПочтовыйКлиент в Истина
//
Процедура УстановитьКонстантуИспользоватьПочтовыйКлиент() Экспорт
	
	Константы.ИспользоватьПочтовыйКлиент.Установить(Истина);
	
КонецПроцедуры


//Устанавливает константу ИспользоватьПочтовыйКлиент в Истина
//
Процедура ЗаменитьБанкиНаКлассификаторБанков() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.УдалитьБанк КАК УдалитьБанк,
	|	БанковскиеСчета.УдалитьБанкРасчетов КАК УдалитьБанкРасчетов
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	(НЕ БанковскиеСчета.УдалитьБанк = ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
	|			ИЛИ НЕ БанковскиеСчета.УдалитьБанкРасчетов = ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка))");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОбработанныеБанки = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.УдалитьБанк) Тогда
			СчетОбъект.Банк = НайтиСоздатьБанкВКлассификаторе(Выборка.УдалитьБанк, ОбработанныеБанки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.УдалитьБанкРасчетов) Тогда
			СчетОбъект.БанкРасчетов = НайтиСоздатьБанкВКлассификаторе(Выборка.УдалитьБанкРасчетов, ОбработанныеБанки);
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект, Ложь, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьБанкВКлассификаторе(СтарыйБанк, ОбработанныеБанки)
	Банк = Справочники.КлассификаторБанков.НайтиПоКоду(СтарыйБанк.Код);
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		БанкОбъект = Справочники.КлассификаторБанков.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(БанкОбъект, СтарыйБанк,, "Владелец");
		БанкОбъект.Записать();
		Банк = БанкОбъект.Ссылка;
		ОбработанныеБанки.Добавить(Банк);
	КонецЕсли;
	Если ОбработанныеБанки.НайтиПоЗначению(Банк) = Неопределено Тогда
		Если Банк.Город <> СтарыйБанк.Город
			ИЛИ Банк.КоррСчет <> СтарыйБанк.КоррСчет
			ИЛИ Банк.Адрес <> СтарыйБанк.Адрес
			ИЛИ Банк.Телефоны <> СтарыйБанк.Телефоны
			ИЛИ Банк.Наименование <> СтарыйБанк.Наименование Тогда
			
			БанкОбъект = Банк.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(БанкОбъект, СтарыйБанк,, "Владелец");
			БанкОбъект.Записать();
			
		КонецЕсли;	
		ОбработанныеБанки.Добавить(Банк);
	КонецЕсли;
	Возврат Банк;	
КонецФункции

Процедура ИнициализироватьКонстантуИспользоватьПрочиеВзаимодействия() Экспорт
	
	Константы.ИспользоватьПрочиеВзаимодействия.Установить(Истина);
	
КонецПроцедуры

Процедура ОбновитьПрисоединенныеФайлыРешений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСоответствийИменВложенийИдентификаторам = Новый ТаблицаЗначений;
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИмяФайла");
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИдентификаторФайлаДляHTML");
	ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("Картинка");
	
	ТаблицаСоответствийИменВложенийИдентификаторамОтветы = Новый ТаблицаЗначений;
	ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Колонки.Добавить("ИмяФайла");
	ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Колонки.Добавить("ИдентификаторФайлаДляHTML");
	ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Колонки.Добавить("Картинка");
	
	УдаленныеВложения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_РешенияПрисоединенныеФайлы.Ссылка КАК Файл,
	|	CRM_РешенияПрисоединенныеФайлы.ВладелецФайла КАК Решение,
	|	CRM_РешенияПрисоединенныеФайлы.удалитьCRM_НомерСтроки КАК CRM_НомерСтроки,
	|	ПОДСТРОКА(CRM_РешенияПрисоединенныеФайлы.удалитьCRM_ИдентификаторПочтовогоВложения, 1, 200) КАК удалитьCRM_ИдентификаторПочтовогоВложения,
	|	CRM_РешенияПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК CRM_РешенияПрисоединенныеФайлы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Решение,
	|	CRM_НомерСтроки
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Файл),
	|	СУММА(CRM_НомерСтроки),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ удалитьCRM_ИдентификаторПочтовогоВложения),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИДФайлаЭлектронногоПисьма)
	|ПО
	|	Решение";
	
	ВыборкаРешения = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивРешений = Новый Массив;
	
	Пока ВыборкаРешения.Следующий() Цикл
		
		СтруктураВложений = Новый Структура;
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВыборкаРешения.Решение.ТекстВопросаHTML);
		
		МассивФайловРешения = Новый Массив;
		МассивФайловОтветов = Новый Массив;
		
		Выборка = ВыборкаРешения.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Файл.удалитьCRM_НомерСтроки > 0 Тогда
				МассивФайловОтветов.Добавить(Выборка.Файл);
			Иначе
				МассивФайловРешения.Добавить(Выборка.Файл);
			КонецЕслИ;
		КонецЦикла;
		
		Для каждого ПрисоединенныйФайл Из МассивФайловРешения Цикл
			
			Если ПрисоединенныйФайл.удалитьCRM_ИдентификаторПочтовогоВложения = "" Тогда Продолжить; КонецЕсли;
			
			Для каждого Картинка Из ДокументHTML.Картинки Цикл
				
				АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
				
				Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.удалитьCRM_ИдентификаторПочтовогоВложения) > 0 Тогда
					
					НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
					НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
					Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
					
					СтруктураВложений.Вставить(
					ПрисоединенныйФайл.Наименование,
					Новый Картинка(ПолучитьИзВременногоХранилища(
					РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СтруктураРешения = Новый Структура;
		СтруктураРешения.Вставить("Решение", ВыборкаРешения.Решение);
		СтруктураРешения.Вставить("ТекстВопросаHTML", Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML));
		СтруктураРешения.Вставить("СтруктураВложений", СтруктураВложений);
		СтруктураРешения.Вставить("Ответы", Новый Массив);
		
		Для Каждого Ответ ИЗ ВыборкаРешения.Решение.Ответы Цикл
			
			СтрутураОтвета = Новый Структура;
			
			СтруктураВложений = Новый Структура;
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Ответ.ВариантОтветаHTML);
			
			Для каждого ПрисоединенныйФайл Из МассивФайловОтветов Цикл
				//Если НЕ ПрисоединенныйФайл.CRM_НомерСтроки = Ответ.CRM_НомерСтроки
				Если НЕ ПрисоединенныйФайл.удалитьCRM_НомерСтроки = Ответ.удалитьCRM_НомерСтроки
					ИЛИ НЕ ЗначениеЗаполнено(ПрисоединенныйФайл.удалитьCRM_ИдентификаторПочтовогоВложения) Тогда Продолжить; КонецЕсли;
				
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.удалитьCRM_ИдентификаторПочтовогоВложения) > 0 Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
						СтруктураВложений.Вставить(
						ПрисоединенныйФайл.Наименование,
						Новый Картинка(ПолучитьИзВременногоХранилища(
						РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			//СтрутураОтвета.Вставить("CRM_НомерСтроки", Ответ.CRM_НомерСтроки);
			СтрутураОтвета.Вставить("CRM_НомерСтроки", Ответ.удалитьCRM_НомерСтроки);
			СтрутураОтвета.Вставить("ВариантОтветаHTML", Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML));
			СтрутураОтвета.Вставить("СтруктураВложений", СтруктураВложений);
			
			СтруктураРешения.Ответы.Добавить(СтрутураОтвета);
		КонецЦикла;
		
		МассивРешений.Добавить(СтруктураРешения);
	КонецЦикла;
	
	Для Каждого ПараметрыРешения ИЗ МассивРешений Цикл
		
		ТекущийОбъектРешение = ПараметрыРешения.Решение.ПолучитьОбъект();
		
		ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		
		Для каждого Вложение Из ПараметрыРешения.СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПараметрыРешения.ТекстВопросаHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам);
			ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			
		КонецЕсли;
		
		Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
			
			ТекущийОбъектРешение.ТекстВопросаHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			ТекущийОбъектРешение.ТекстВопроса     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъектРешение.ТекстВопросаHTML);
			
		КонецЕсли;
		
		Для Каждого СтрокаТЧ ИЗ ТекущийОбъектРешение.Ответы Цикл
			СтрокаТЧ.ИДСтроки	= СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		КонецЦИкла;
		
		Для Каждого ПараметрыОтвета ИЗ ПараметрыРешения.Ответы Цикл
			
			СтрокаТЧ			= ТекущийОбъектРешение.Ответы.Найти(ПараметрыОтвета.CRM_НомерСтроки,"удалитьCRM_НомерСтроки");
			
			ДокументHTMLТекущегоОтветаПодготовлен = Ложь;
			ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Очистить();
			
			Для каждого Вложение Из ПараметрыОтвета.СтруктураВложений Цикл
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Добавить();
				НоваяСтрока.ИмяФайла = Вложение.Ключ;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Строка(Новый УникальныйИдентификатор)+"_"+СтрокаТЧ.ИДСтроки;
				НоваяСтрока.Картинка = Вложение.Значение;
				
			КонецЦикла;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Количество() > 0 Тогда
				
				ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПараметрыОтвета.ВариантОтветаHTML);
				Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
				ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторамОтветы);
				ДокументHTMLТекущегоОтветаПодготовлен = Истина;
				
			КонецЕсли;
			
			Если ДокументHTMLТекущегоОтветаПодготовлен Тогда
				
				СтрокаТЧ.ВариантОтветаHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
				СтрокаТЧ.ВариантОтвета     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(СтрокаТЧ.ВариантОтветаHTML);
				
				Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторамОтветы Цикл
					НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Вложение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ТекущийОбъектРешение.ОбменДанными.Загрузка = Истина;
		ТекущийОбъектРешение.Записать();
		
		// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
		ТаблицаВложенийКартинокФорматированногоДокумента = ПолучитьВложенияПисьмаСНеПустымИД(ТекущийОбъектРешение.Ссылка);
		Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			УдаленныеВложения.Добавить(Вложение.Ссылка);
		КонецЦикла;
		
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЦикла;
		
		УдаленныеВложения.Очистить();
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, Новый УникальныйИдентификатор());
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			ТекущийОбъектРешение.Ссылка,
			АдресКартинкиВоВременномХранилище,
			ИмяФайлаВложения,
			ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.удалитьCRM_ИдентификаторПочтовогоВложения = "";
				ПрисоединенныйФайлОбъект.удалитьCRM_НомерСтроки = 0;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		НаборРегистра = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Решение.Установить(ТекущийОбъектРешение.Ссылка);
		НаборРегистра.Прочитать();
		Если НаборРегистра.Количество() > 0 Тогда
			Для Каждого СтрокаНабора ИЗ НаборРегистра Цикл
				Если СтрокаНабора.УдалитьОтвет > 0 Тогда
					СтрокаТЧ					= ТекущийОбъектРешение.Ответы.Найти(СтрокаНабора.УдалитьОтвет,"удалитьCRM_НомерСтроки");
					СтрокаНабора.ВыбранныйОтвет	= СтрокаТЧ.ИДСтроки;
				КонецЕсли;
			КонецЦИкла;
			НаборРегистра.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВложенияПисьмаСНеПустымИД(Письмо)
	
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = УправлениеЭлектроннойПочтой.ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
		ВладелецФайлов       = Письмо;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлыПисьма.Ссылка,
	|	ПрисоединенныеФайлыПисьма.Наименование,
	|	ПрисоединенныеФайлыПисьма.Размер,
	|	ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК ПрисоединенныеФайлыПисьма
	|ГДЕ
	|	ПрисоединенныеФайлыПисьма.ВладелецФайла = &ВладелецФайлов
	|	И (НЕ ПрисоединенныеФайлыПисьма.ПометкаУдаления)
	|	И ПОДСТРОКА(ПрисоединенныеФайлыПисьма.удалитьCRM_ИдентификаторПочтовогоВложения,1,200) <> &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("ВладелецФайлов",ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Процедура ЗаполнитьПредметыПапкиПисем(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Взаимодействие,
	|	ЭлектронноеПисьмоИсходящее.УдалитьПредмет КАК Предмет,
	|	ЭлектронноеПисьмоИсходящее.Удалить_Рассмотрено КАК Рассмотрено,
	|	ЭлектронноеПисьмоИсходящее.Удалить_РассмотретьПосле КАК РассмотретьПосле,
	|	ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка КАК ПапкаЭлектронногоПисьма,
	|	ЭлектронноеПисьмоИсходящее.Дата КАК Дата
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|ГДЕ
	|	(ПредметыПапкиВзаимодействий.Предмет ЕСТЬ NULL
	|			ИЛИ ЭлектронноеПисьмоИсходящее.УдалитьПредмет <> ПредметыПапкиВзаимодействий.Предмет
	|				И ЭлектронноеПисьмоИсходящее.УдалитьПредмет <> НЕОПРЕДЕЛЕНО
	|			ИЛИ ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка <> ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
	|				И ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка <> ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)
	|				И ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка <> НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.УдалитьПредмет,
	|	ЭлектронноеПисьмоВходящее.Удалить_Рассмотрено,
	|	ЭлектронноеПисьмоВходящее.Удалить_РассмотретьПосле,
	|	ЭлектронноеПисьмоВходящее.УдалитьCRM_Папка,
	|	ЭлектронноеПисьмоВходящее.Дата
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящее.Ссылка)
	|ГДЕ
	|	(ПредметыПапкиВзаимодействий.Предмет ЕСТЬ NULL
	|			ИЛИ ЭлектронноеПисьмоВходящее.УдалитьПредмет <> ПредметыПапкиВзаимодействий.Предмет
	|				И ЭлектронноеПисьмоВходящее.УдалитьПредмет <> НЕОПРЕДЕЛЕНО
	|			ИЛИ ЭлектронноеПисьмоВходящее.УдалитьCRM_Папка <> ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
	|				И ЭлектронноеПисьмоВходящее.УдалитьCRM_Папка <> ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)
	|				И ЭлектронноеПисьмоВходящее.УдалитьCRM_Папка <> НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	БылиИсправления = Ложь;
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
		Запись.Взаимодействие = Выборка.Взаимодействие;
		Запись.Прочитать();
		Запись.Взаимодействие = Выборка.Взаимодействие;
		Если ЗначениеЗаполнено(Выборка.Предмет) И Запись.Предмет <> Выборка.Предмет Тогда
			Запись.Предмет = Выборка.Предмет;
			БылиИсправления = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ПапкаЭлектронногоПисьма) И Запись.ПапкаЭлектронногоПисьма <> Выборка.ПапкаЭлектронногоПисьма Тогда
			Запись.ПапкаЭлектронногоПисьма = Выборка.ПапкаЭлектронногоПисьма;
			БылиИсправления = Истина;
		КонецЕсли;
		Запись.Записать();
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ БылиИсправления;
	
КонецПроцедуры

Процедура ОбновитьПрисоединенныеФайлыТелемаркетинга() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Ссылка КАК Вложение,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.удалитьCRM_ИдентификаторПочтовогоВложения,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма
	|ПОМЕСТИТЬ Вложения
	|ИЗ
	|	Справочник.CRM_ТелемаркетингПрисоединенныеФайлы КАК CRM_ТелемаркетингПрисоединенныеФайлы
	|ГДЕ
	|	НЕ (ВЫРАЗИТЬ(CRM_ТелемаркетингПрисоединенныеФайлы.удалитьCRM_ИдентификаторПочтовогоВложения КАК СТРОКА(200))) = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вложения.Вложение КАК Вложение,
	|	Вложения.ВладелецФайла КАК ВладелецФайла,
	|	Вложения.удалитьCRM_ИдентификаторПочтовогоВложения,
	|	Вложения.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Вложения КАК Вложения
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Вложение)
	|ПО
	|	ВладелецФайла";
	
	ВыборкаПоВладельцу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВладельцу.Следующий() Цикл
		
		ВладалецОбъект				= ВыборкаПоВладельцу.ВладелецФайла.ПолучитьОбъект();
		ДокументHTML				= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВладалецОбъект.Сценарий);
		
		ВыборкаПоВложениям = ВыборкаПоВладельцу.Выбрать();
		
		Пока ВыборкаПоВложениям.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоВложениям.Вложение.ИДФайлаЭлектронногоПисьма) Тогда
				ВложениеОбъект								= ВыборкаПоВложениям.Вложение.ПолучитьОбъект();
				ВложениеОбъект.ИДФайлаЭлектронногоПисьма	= Новый УникальныйИдентификатор;
				ВложениеОбъект.Наименование					= "_" + СтрЗаменить(ВложениеОбъект.ИДФайлаЭлектронногоПисьма, "-", "_");
				ВложениеОбъект.Расширение					= ВложениеОбъект.Расширение;
				ВложениеОбъект.ОбменДанными.Загрузка		= Истина;
				ВложениеОбъект.Записать();
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если АтрибутИсточникКартинки.ТекстовоеСодержимое = ВложениеОбъект.удалитьCRM_ИдентификаторПочтовогоВложения Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:"+ВложениеОбъект.ИДФайлаЭлектронногоПисьма);
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ВладалецОбъект.Сценарий = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
		ВладалецОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ВладалецОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭлектронноеПисьмоВходящееПеренестиРеквизит_Комментарий(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЭлектронноеПисьмоВходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	НЕ(ЭлектронноеПисьмоВходящее.ПометкаУдаления
	|				ИЛИ (ВЫРАЗИТЬ(ЭлектронноеПисьмоВходящее.Удалить_Комментарий КАК СТРОКА(10))) = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ПустаяСтрока(ПисьмоОбъект.Комментарий) Тогда
			
			ПисьмоОбъект.Комментарий = ПисьмоОбъект.Удалить_Комментарий;
			
		Иначе	
			
			ПисьмоОбъект.Комментарий = ПисьмоОбъект.Комментарий + Символы.ПС + ПисьмоОбъект.Удалить_Комментарий;
			
		КонецЕсли;
		
		ПисьмоОбъект.Удалить_Комментарий = "";
		
		ПисьмоОбъект.Записать();
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (Выборка.Количество() = 0);
	
КонецПроцедуры

Процедура ЗаполнитьЮрФизЛицоПартнеров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Партнеры.Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПартнерОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ПартнерОбъект["удалитьCRM_ВидПартнера"] = Перечисления["удалитьCRM_ВидПартнера"].Компания Тогда
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		ИначеЕсли ПартнерОбъект["удалитьCRM_ВидПартнера"] = Перечисления["удалитьCRM_ВидПартнера"].ЧастноеЛицо Тогда
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		
		ПартнерОбъект.ОбменДанными.Загрузка = Истина;
		ПартнерОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_4_1

#Область Обновление_3_0_4_9

Процедура ОбновитьНастройкуИмениОтправителяSMS() Экспорт
	
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяОтправителяХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ИмяОтправителя");
	ИмяОтправителяКонстанта = Константы.Удалитьsms4bИмяОтправителя.Получить();
	Если ЗначениеЗаполнено(ИмяОтправителяКонстанта) И
		Не ЗначениеЗаполнено(ИмяОтправителяХранилище) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ИмяОтправителяКонстанта, "ИмяОтправителя");
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_4_9

#Область Обновление_3_0_4_15

Процедура СкорретироватьНастройкиЭтапов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка,
	|	ЛОЖЬ КАК ЭтоПроцесс
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	CRM_КартыМаршрутов.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И НЕ CRM_КартыМаршрутов.Редактируется
	|	И НЕ CRM_КартыМаршрутов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проекты.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.bpmТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И НЕ Проекты.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоПроцесс Тогда
			Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.удалитьbpmВидОбъекта) Тогда Продолжить; КонецЕсли;
			
			ПроцессКартаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроцессКартаОбъект.bpmВидОбъектаСтрокой			= "CRM_Интерес";
			ПроцессКартаОбъект.bpmРеквизитОбъектаСтрокой	= "СостояниеИнтереса";
		Иначе
			Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.удалитьВидОбъекта) Тогда Продолжить; КонецЕсли;
			
			ПроцессКартаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроцессКартаОбъект.ВидОбъектаСтрокой		= "CRM_Интерес";
			ПроцессКартаОбъект.РеквизитОбъектаСтрокой	= "СостояниеИнтереса";
		КонецЕсли;
		ПроцессКартаОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ПроцессКартаОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_НастройкиЭтапов.Объект,
	|	CRM_НастройкиЭтапов.Объект.НомерВерсии КАК НомерВерсии,
	|	0 КАК ВидОбъекта
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтапов КАК CRM_НастройкиЭтапов
	|ГДЕ
	|	CRM_НастройкиЭтапов.Объект ССЫЛКА Справочник.CRM_КартыМаршрутов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_НастройкиЭтапов.Объект,
	|	CRM_НастройкиЭтапов.Объект.CRM_КартаМаршрута.НомерВерсии,
	|	1
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтапов КАК CRM_НастройкиЭтапов
	|ГДЕ
	|	CRM_НастройкиЭтапов.Объект ССЫЛКА Справочник.Проекты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект.НомерВерсииКартыМаршрута,
	|	2
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|ГДЕ
	|	НЕ CRM_НастройкиЭтаповБизнесПроцессов.Объект.Завершен
	|	И НЕ CRM_НастройкиЭтаповБизнесПроцессов.Объект.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидОбъекта = 0 Тогда
			Карта		= Выборка.Объект;
			НомерВерсии	= Выборка.НомерВерсии;
			
		ИначеЕсли Выборка.ВидОбъекта = 1 Тогда
			Карта		= Выборка.Объект.CRM_КартаМаршрута;
			НомерВерсии	= Выборка.НомерВерсии;
			
		ИначеЕсли Выборка.ВидОбъекта = 2 Тогда
			Карта		= Выборка.Объект.КартаМаршрута;
			НомерВерсии	= Выборка.НомерВерсии;
			
		КонецЕсли;
		
		Если Выборка.ВидОбъекта = 2 Тогда
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Выборка.Объект);
		Иначе
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Выборка.Объект);
		КонецЕсли;
		
		Добавляли = Ложь;
		НаборЭтапов.Прочитать();
		Если НаборЭтапов.Количество() > 0 Тогда
			ТабНабора = НаборЭтапов.Выгрузить();
			
			ЗапросПоТочкам = Новый Запрос;
			ЗапросПоТочкам.УстановитьПараметр("Владелец",Карта);
			ЗапросПоТочкам.УстановитьПараметр("НомерВерсии",НомерВерсии);
			ЗапросПоТочкам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
			|ГДЕ
			|	CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
			|	И CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Завершение)
			|	И НЕ CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.ПометкаУдаления
			|	И CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Владелец = &Владелец";
			
			ВыборкаПоТочкам = ЗапросПоТочкам.Выполнить().Выбрать();
			Пока ВыборкаПоТочкам.Следующий() Цикл
				Если ТабНабора.Найти(ВыборкаПоТочкам.Ссылка, "ТочкаМаршрута") = Неопределено Тогда
					НоваяСтрока = ТабНабора.Добавить();
					НоваяСтрока.Объект			= Выборка.Объект;
					НоваяСтрока.ТочкаМаршрута	= ВыборкаПоТочкам.Ссылка;
					НоваяСтрока.Используется	= Истина;
					Добавляли = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Добавляли Тогда
				НаборЭтапов.Загрузить(ТабНабора);
				Попытка
					НаборЭтапов.записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_4_15

#Область Обновление_3_0_5_2

Процедура ОбновитьПредопределенныеДействияТриггеров() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ЗапретитьРедактированиеДокументаКоммерческоеПредложение.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ЗапретитьРедактированиеКП"));
	ОбработкаТриггера.НазваниеОбработки = "ЗапретитьРедактированиеДокументаКоммерческоеПредложение";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
		
КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_2

#Область Обновление_3_0_5_3

Процедура ЗаполнитьКартуСогласованиеКоммерческогоПредолжения() Экспорт
	
	МакетКарты = Метаданные.Справочники.CRM_КартыМаршрутов.Макеты.Найти("СогласованиеКоммерческогоПредолжения");
	
	Если НЕ МакетКарты = Неопределено Тогда
		
		ИмяФайла = КаталогВременныхФайлов() + "Схема.xml";
		ДвоичныеДанные = Справочники.CRM_КартыМаршрутов.ПолучитьМакет(МакетКарты.Имя);
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Элемент = Неопределено;
		Элемент = Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию(МакетКарты.Синоним);
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			
			НоваяКарта = Справочники.CRM_КартыМаршрутов.СоздатьЭлемент();
			НоваяКарта.Наименование = МакетКарты.Синоним;
			НоваяКарта.Записать();
			
			CRM_БизнесПроцессыСервер.ЗаполнитьКартуМаршрутаПоМакету(НоваяКарта.Ссылка, ИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_3


#Область Обновление_3_0_5_4

Процедура УстановитьЗначениеКонстантыИспользоватьНапоминанияПользователя(Параметры) Экспорт
	
	Константы.ИспользоватьНапоминанияПользователя.Установить(Ложь);
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_4

#Область Обновление_3_0_5_5

Процедура ЗаменаСтатусовВКоммерческомПредложении(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КоммерческоеПредложениеКлиенту.Ссылка,
	|	КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Отменено)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
	|		КОГДА КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Действует)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
	|		КОГДА КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.ПустаяСсылка)
	|	И КоммерческоеПредложениеКлиенту.Удалить_CRM_Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоммерческоеПредложениеКлиенту.Дата УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КПОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КПОбъект.Статус = Выборка.Статус;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КПОбъект, Ложь, Ложь);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (Выборка.Количество() = 0);
	
КонецПроцедуры

Процедура СкорретироватьШаблоныПоказателей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ШаблоныКлючевыхПоказателей.Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныКлючевыхПоказателей КАК CRM_ШаблоныКлючевыхПоказателей
	|ГДЕ
	|	НЕ CRM_ШаблоныКлючевыхПоказателей.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Показатель = Выборка.Ссылка.ПолучитьОбъект();
		СКД = Показатель.ХранилищеСхемыКомпоновкиДанных.Получить();
		
		Если СКД = Неопределено Тогда
			
			Продолжить;		
			
		КонецЕсли;		
		
		ЕстьИзменения = Ложь;
		Для Каждого НаборКоллекции ИЗ СКД.НаборыДанных Цикл
			Если НЕ ТипЗнч(НаборКоллекции) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда Продолжить; КонецЕсли;
			
			ТекстЗапроса = НаборКоллекции.Запрос;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоммерческоеПредложениеКлиенту.CRM_Состояние","КоммерческоеПредложениеКлиенту.Статус");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоммерческоеПредложениеКлиенту.Состояние","КоммерческоеПредложениеКлиенту.Статус");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"КоммерческоеПредложениеКлиенту.Ответственный","КоммерческоеПредложениеКлиенту.Менеджер");
			
			Если НЕ НаборКоллекции.Запрос = ТекстЗапроса Тогда
				НаборКоллекции.Запрос = ТекстЗапроса;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Параметр ИЗ СКД.Параметры Цикл
			ОписаниеТиповСтарый = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКоммерческихПредложенийКлиентам");
			ОписаниеТиповНовый = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКоммерческихПредложенийКлиентам");
			Если Параметр.ТипЗначения = ОписаниеТиповСтарый Тогда
				Значение = Параметр.Значение;
				Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.СостоянияКоммерческихПредложенийКлиентам") Тогда
					Если Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.Действует Тогда
						Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
					ИначеЕсли Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование Тогда
						Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
					ИначеЕсли Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.Отменено Тогда
						Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					Для каждого ЭлементСписка из Значение Цикл
						Если ЭлементСписка.Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.Действует Тогда
							ЭлементСписка.Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
						ИначеЕсли ЭлементСписка.Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование Тогда
							ЭлементСписка.Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
						ИначеЕсли ЭлементСписка.Значение = Перечисления.СостоянияКоммерческихПредложенийКлиентам.Отменено Тогда
							ЭлементСписка.Значение = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Параметр.ТипЗначения = ОписаниеТиповНовый;
				Параметр.Значение = Значение;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			
			Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СКД);
			Показатель.ОбменДанными.Загрузка = Истина;
			Показатель.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_5

#Область Обновление_3_0_5_5

Процедура ИсправитьРазделыДатЗапретаРедактирования() Экспорт
	
	СтарыйРаздел_CRM_Документы = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.НайтиПоНаименованию(НСтр("ru = 'Старые документы (CRM, не используется)'"));
	
	НовыйРаздел_CRM_Документы = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.НайтиПоНаименованию(НСтр("ru = 'Документы CRM'"));
	
	Если НЕ (СтарыйРаздел_CRM_Документы = Неопределено Или НовыйРаздел_CRM_Документы = Неопределено) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ДатыЗапретаИзменения.Раздел,
		|	ДатыЗапретаИзменения.Объект,
		|	ДатыЗапретаИзменения.Пользователь
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	ДатыЗапретаИзменения.Раздел = &Раздел";
		
		Запрос.УстановитьПараметр("Раздел", СтарыйРаздел_CRM_Документы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписиРегистра = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, Выборка);
			
			МенеджерЗаписиРегистра.Прочитать();
			
			Если МенеджерЗаписиРегистра.Выбран() Тогда
				
				МенеджерЗаписиРегистра.Раздел = НовыйРаздел_CRM_Документы;
				
				МенеджерЗаписиРегистра.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры //ИсправитьРазделыДатЗапретаРедактирования() Экспорт

Процедура ИсправитьРолиИсполнителейЗадач() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ссылка.ПринятаКИсполнению Тогда Продолжить КонецЕсли;
		ОбъектЗадача = Выборка.ссылка.ПолучитьОбъект();
		ОбъектЗадача.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
		ОбъектЗадача.ОбменДанными.Загрузка = Истина;
		ОбъектЗадача.Записать();
	КонецЦикла;
	
КонецПроцедуры //ИсправитьРазделыДатЗапретаРедактирования() Экспорт

#КонецОбласти //Обновление_3_0_5_5

#Область Обновление_3_0_5_8

Процедура ПереносФайловИзЗадачВБизнесПроцесс(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 500
	|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	Справочник.ЗадачаИсполнителяПрисоединенныеФайлы КАК ЗадачаИсполнителяПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла.CRM_Личная
	|	И НЕ ЗадачаИсполнителяПрисоединенныеФайлы.ПометкаУдаления
	|ИТОГИ ПО
	|	БизнесПроцесс");
	
	ВыборкаБП = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБП.Следующий() Цикл
		ВыборкаФайл = ВыборкаБП.Выбрать();
		Пока ВыборкаФайл.Следующий() Цикл
			Файл = ВыборкаФайл.Ссылка;
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл,, Истина);
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Файл.Автор);
			ПараметрыФайла.Вставить("ВладелецФайлов", ВыборкаБП.БизнесПроцесс);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеФайла.Наименование);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ДанныеФайла.ДатаМодификацииУниверсальная);
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,, Файл.Описание);
			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = (ВыборкаБП.Количество() = 0);
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_8

#Область Обновление_3_0_5_11

Процедура ОбновитьКлючевыеПоказатели() Экспорт
	
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗабытыеКлиенты.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗабытыеКлиенты");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗабытыеКлиенты");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//ЗагрузкаКалендаря
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗагрузкаКалендаря.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗагрузкаКалендаря");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗагрузкаКалендаря");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//КасанияНаОдногоКлиента
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.КасанияНаОдногоКлиента.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КасанияНаОдногоКлиента");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КасанияНаОдногоКлиента");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//КачествоКлиентскойБазы
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.КачествоКлиентскойБазы.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КачествоКлиентскойБазы");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КачествоКлиентскойБазы");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//ОбращенияКлиентов
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ОбращенияКлиентов.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ОбращенияКлиентов");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ОбращенияКлиентов");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//Продажи
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.Продажи.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Продажи");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Продажи");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//ПроведениеВстреч
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПроведениеВстреч.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ПроведениеВстреч");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ПроведениеВстреч");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//ТелефонныеЗвонки
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ТелефонныеЗвонки.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТелефонныеЗвонки");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТелефонныеЗвонки");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//ВысланныеКП
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВысланныеКП.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВысланныеКП");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВысланныеКП");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//ВыставленныеСчета
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВыставленныеСчета.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВыставленныеСчета");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВыставленныеСчета");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//ТеплыеКлиенты
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ТеплыеКлиенты.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТеплыеКлиенты");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТеплыеКлиенты");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//Взаимодействия
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.Взаимодействия.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Взаимодействия");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Взаимодействия");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	//СреднийЧек
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.СреднийЧек.ПолучитьОбъект();
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("СреднийЧек");
	Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("СреднийЧек");
	Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	Показатель.Записать();
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_11

#Область Обновление_3_0_5_13

Процедура ЗаполнитьРасположениеРеквизитовКлиентов() Экспорт
	
	НаборЗаписей = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_ОсновнаяОтрасль";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Левая";
	МенеджерЗаписи.Видимость = Истина;
	МенеджерЗаписи.ПорядокРасположения = 1;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_СегментРынка";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Правая";
	МенеджерЗаписи.Видимость = Истина;
	МенеджерЗаписи.ПорядокРасположения = 1;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_Важность";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Левая";
	МенеджерЗаписи.Видимость = Истина;
	МенеджерЗаписи.ПорядокРасположения = 2;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_ЧисленностьСотрудников";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Правая";
	МенеджерЗаписи.Видимость = Истина;
	МенеджерЗаписи.ПорядокРасположения = 2;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_СтатусРаботы";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Левая";
	МенеджерЗаписи.Видимость = Истина;
	МенеджерЗаписи.ПорядокРасположения = 3;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяРеквизита = "CRM_ЧисленностьРабочихМест";
	МенеджерЗаписи.ПредставлениеРеквизита = Метаданные.Справочники.Партнеры.Реквизиты[МенеджерЗаписи.ИмяРеквизита].Синоним;
	МенеджерЗаписи.Колонка = "Правая";
	МенеджерЗаписи.Видимость = Истина;
	МенеджерЗаписи.ПорядокРасположения = 3;
	МенеджерЗаписи.Активность = Истина;
	МенеджерЗаписи.Записать(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Свойство,
	|	ВложенныйЗапрос.НаборСвойств
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДополнительныеРеквизиты.Свойство КАК Свойство,
	|		ДополнительныеРеквизиты.Ссылка КАК НаборСвойств
	|	ИЗ
	|		Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|	ГДЕ
	|		НЕ ДополнительныеРеквизиты.Ссылка.ЭтоГруппа
	|		И ДополнительныеРеквизиты.Ссылка В ИЕРАРХИИ(&ГруппаНабора)) КАК ВложенныйЗапрос");
	
	Запрос.УстановитьПараметр("ГруппаНабора", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры);
	ТабНаборов = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТабНаборов Цикл
		Если НЕ Строка.НаборСвойств.ПринадлежитЭлементу(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры) И Строка.НаборСвойств <> Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры Тогда Продолжить КонецЕсли;
		Если Найти(Строка.НаборСвойств.Наименование, "не  используется") > 0 Тогда Продолжить конецЕсли;
		Реквизит = Строка.Свойство;
		Если Реквизит.Пустая() Тогда Продолжить КонецЕсли;
		Менеджер = РегистрыСведений.CRM_РасположениеРеквизитовКлиентов.СоздатьМенеджерЗаписи();
		ИмяУникальнаяЧасть = 
		СтрЗаменить(ВРег(Строка(Строка.НаборСвойств.УникальныйИдентификатор())), "-", "x")
		+ "_"
		+ СтрЗаменить(ВРег(Строка(Реквизит.УникальныйИдентификатор())), "-", "x");
		
		Менеджер.ИмяРеквизита =	"ДополнительныйРеквизитЗначение_" + ИмяУникальнаяЧасть;
		Менеджер.ДопРеквизит = Реквизит;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(CRM_РасположениеРеквизитовКлиентов.ПорядокРасположения) КАК ПорядокРасположения
		|ИЗ
		|	РегистрСведений.CRM_РасположениеРеквизитовКлиентов КАК CRM_РасположениеРеквизитовКлиентов
		|ГДЕ
		|	CRM_РасположениеРеквизитовКлиентов.Колонка = &ИмяКолонки";
		Запрос.УстановитьПараметр("ИмяКолонки", "Дополнительно");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПорядокЭлемента = ?(ЗначениеЗаполнено(Выборка.ПорядокРасположения), Выборка.ПорядокРасположения + 1, 1);
		Иначе
			ПорядокЭлемента = 1;
		КонецЕсли;
		
		
		
		Менеджер.ПредставлениеРеквизита = Реквизит.Наименование;
		Менеджер.Колонка = "Дополнительно";
		Менеджер.Видимость = Истина;
		Менеджер.ПорядокРасположения = ПорядокЭлемента;
		Менеджер.Записать(Истина);
	КонецЦикла;	
КонецПроцедуры

Процедура УстановитьПериодАктуальностиПоказателей() Экспорт
	
	Константы.CRM_ГлубинаПересчетаПоказателей.Установить(1);
	
КонецПроцедуры

Процедура ПереименоватьПроценты() Экспорт
	
	ЕдиницаПроценты = Справочники.CRM_ЕдиницыИзмеренияПоказателей.Процент.ПолучитьОбъект();
	ЕдиницаПроценты.Наименование = "%";
	ЕдиницаПроценты.Записать();
	
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВысланныеКП.ПолучитьОбъект();
	Показатель.Наименование = "Кол-во выставленных коммерческих предложений";
	Показатель.КраткоеНаименование = "Выставленные КП";
	Показатель.Записать();
КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_13

#Область Обновление_3_0_5_14

Процедура ИзменитьТипПроцессаУПоручения() Экспорт
	
	КартаОбъект = Справочники.CRM_КартыМаршрутов.Поручение.ПолучитьОбъект();
	КартаОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	КартаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_14

#Область Обновление_3_0_5_15

Процедура ЗаполнитьПредопределенныеДействияТриггеровРассылкаЗаявкаВосстановление() Экспорт
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.РассылкаПоСегменту.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерРассылкаПоСегменту"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерРассылкаПоСегменту";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ЗаявкаССайта.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерЗаявкаССайта"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерЗаявкаССайта";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();
	
	ОбработкаТриггера = Справочники.CRM_ДействияТриггеров.ВосстановлениеИнтереса.ПолучитьОбъект();
	ОбработкаТриггера.ОбработкаДействия = Новый ХранилищеЗначения(Справочники.CRM_ДействияТриггеров.ПолучитьМакет("CRM_ТриггерВосстановлениеИнтереса"));
	ОбработкаТриггера.НазваниеОбработки = "CRM_ТриггерВосстановлениеИнтереса";
	ОбработкаТриггера.ИспользуетсяСтандартнаяОбработка = Истина;
	ОбработкаТриггера.Записать();


КонецПроцедуры

#КонецОбласти //Обновление_3_0_5_15

#Область Обновление_3_0_6_1

Процедура ОбработатьНаборыДопРеквизитов() Экспорт
	
	НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_ИсточникиПолученияЛидов.ПолучитьОбъект();
	НаборДопРеквизитов.Используется = Истина;
	НаборДопРеквизитов.Записать();


КонецПроцедуры

#КонецОбласти //Обновление_3_0_6_1

#Область Обновление_3_0_6_7

Процедура УстановитьКонстантуСинхронизацияДанных() Экспорт
	
	Если Константы.ИспользоватьСинхронизациюДанных.Получить() И НЕ Константы.УдалитьCRM_ИспользоватьОбменЧерезУниверсальныйФормат.Получить() Тогда
		Константы.ИспользоватьСинхронизациюДанных.Установить(Ложь);
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти //Обновление_3_0_6_7

#Область Обновление_3_0_6_10

Процедура ПереименоватьПоказатели() Экспорт
	
	Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ОбращенияКлиентов.ПолучитьОбъект();
	Показатель.КраткоеНаименование = "Просрочено взаимодействий";
	Показатель.Наименование = "Просрочено взаимодействий";
	Показатель.Записать();

	Виджет = Справочники.CRM_Виджеты.ОбращенияКлиентов.ПолучитьОбъект();
	Виджет.Наименование = "Просрочено взаимодействий";
	Виджет.Записать();
КонецПроцедуры

#КонецОбласти //Обновление_3_0_6_10

#Область Обновление_3_0_6_11

Процедура ОчиститьЖурналОтДокументовПланирование() Экспорт
	
	Выборка = РегистрыСведений.CRM_ЖурналДокументов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.удалитьCRM_Планирование") Тогда
			Менеджер = Выборка.ПолучитьМенеджерЗаписи();
			Менеджер.Удалить();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_6_11

#Область Обновление_3_0_6_12

Процедура ИзменитьТипПроцессаУЗапросаНаИзменениеСроков() Экспорт
	
	КартаОбъект = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.ПолучитьОбъект();
	КартаОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	КартаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_6_12

#Область Обновление_3_0_7_1

Процедура ЗаполнитьСлужебныйРекизитИнтересаСледующеДействие() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Интерес.Ссылка КАК Интерес,
	                      |	CRM_Взаимодействие.Ссылка КАК Взаимодействие
	                      |ИЗ
	                      |	Документ.CRM_Интерес КАК CRM_Интерес
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |		ПО (CRM_Взаимодействие.ДокументОснование = CRM_Интерес.Ссылка)
	                      |			И (CRM_Взаимодействие.ДатаЗавершенияВзаимодействия = ДАТАВРЕМЯ(1, 1, 1))
	                      |ГДЕ
	                      |	CRM_Интерес.СледующееДействиеПредставление = """"
	                      |	И НЕ CRM_Интерес.Завершен
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_Взаимодействие.ПлановаяДата
	                      |ИТОГИ ПО
	                      |	Интерес");
	
	ВыборкаИнтересов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИнтересов.Следующий() Цикл
		ИнтересОбъект = ВыборкаИнтересов.Интерес.ПолучитьОбъект();
		ИнтересОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //Обновление_3_0_7_1
