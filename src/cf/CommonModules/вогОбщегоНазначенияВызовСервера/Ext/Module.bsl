
#Область ПрограммныйИнтерфейс

Функция ПолучитьМассивЭлектронныхАдресов(Ссылка) Экспорт
	Запрос = Новый Запрос;
	УстановитьПривилегированныйРежим(Истина); 
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Ссылка = &Объект";
	МассивЭлектронныхАдресов = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Вид",			Выборка.Вид);
		СтруктураАдреса.Вставить("Представление",	Выборка.Представление);
		//+вог
		СтруктураАдреса.Вставить("ПредставлениеОбъекта", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1: %2",
		вогОбщегоНазначенияКлиентСерверПовтИсп.ПредставлениеОбъектаКонтаткнойИнформации(Ссылка), СокрЛП(Ссылка))
		);
		//-вог
		МассивЭлектронныхАдресов.Добавить(СтруктураАдреса);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат МассивЭлектронныхАдресов;
КонецФункции // ПолучитьМассивЭлектронныхАдресов()

Функция ПроверитьЭтоСсылка(ПроверяемыйТип) Экспорт
	Возврат ОбщегоНазначения.ЭтоСсылка(ПроверяемыйТип)
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//  ИмяРеквизита - Строка - имя получаемого реквизита.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то вернется значение Неопределено.
// 
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,ИмяРеквизита,ВыбратьРазрешенные);
КонецФункции

Процедура ВыполнитьПроизвольныйКод(СтруктураПолей,Отказ=Ложь) Экспорт
	
	Если СтруктураПолей.ТолькоПроверка Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Выполнить(СтруктураПолей.Код);
	
	Если СтруктураПолей.ТолькоПроверка Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Если СтруктураПолей.ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Синтаксический контроль " + СтруктураПолей.ЗаголовокСобытия + " пройден");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруПолейДляВыполненияПроизвольногоКода() Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Код");
	СтруктураПолей.Вставить("ЗаголовокСобытия");
	СтруктураПолей.Вставить("Отказ");
	СтруктураПолей.Вставить("Ссылка");
	СтруктураПолей.Вставить("Идентификатор");
	СтруктураПолей.Вставить("Объект");
	СтруктураПолей.Вставить("Форма");
	СтруктураПолей.Вставить("ТолькоПроверка");
	СтруктураПолей.Вставить("ВыводитьСообщения");
	СтруктураПолей.Вставить("ВыполнятьПроизвольныйКод");
	
	Возврат СтруктураПолей;
	
КонецФункции

Процедура ИнициализацияМакета() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вогНастройкиПолейОтображенияСодержания.ИспользоватьДляВсех КАК ИспользоватьДляВсех,
	|	вогНастройкиПолейОтображенияСодержания.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.вогНастройкиПолейОтображенияСодержания КАК вогНастройкиПолейОтображенияСодержания");
	Результатзапроса = Запрос.Выполнить();
	
	Если Результатзапроса.Пустой() Тогда
		
		ТекстМакета = ПолучитьОбщийМакет("CRM_НастройкиПолейОтображенияСодержания").ПолучитьТекст();
		
		ЧтениеXML 	= Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстМакета);
		Хранилище 	= ПрочитатьXML(ЧтениеXML);
		
		РСвогНастройкиПолейОтображенияСодержания = РегистрыСведений.вогНастройкиПолейОтображенияСодержания.СоздатьМенеджерЗаписи();
		РСвогНастройкиПолейОтображенияСодержания.ИспользоватьДляВсех 	= Истина;
		РСвогНастройкиПолейОтображенияСодержания.Макет 					= Хранилище;
		РСвогНастройкиПолейОтображенияСодержания.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПолейОтображенияСодержания() Экспорт
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(CRM_ХранилищеНастроек.ЗагрузитьНастройкиОтображения());
КонецПроцедуры 

Функция ПолучитьЗначениеИзСтрокиВнутр(ВходящаяСтрока) Экспорт
	
	Возврат ЗначениеИзСтрокиВнутр(ВходящаяСтрока);
	
КонецФункции 

// ++ Тищенко В.В.
// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено для всех реквизитов.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то все реквизиты вернутся со значением Неопределено;
//                                если Ложь, то возникнет исключение при отсутствии прав на любой из реквизитов.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь,ИспользоватьПривилегированныйРежим = Ложь) Экспорт
	
	Если ИспользоватьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты, ВыбратьРазрешенные);
	
КонецФункции // -- Тищенко В.В.

Функция ЭтоПримитивныйТип(Знач ПроверяемыйТип) Экспорт
	
	ПримитивныеТипы = Новый ОписаниеТипов("Число, Строка, Булево, Дата, УникальныйИдентификатор, ОписаниеТипов");
	
	Возврат ПримитивныеТипы.СодержитТип(Тип(ПроверяемыйТип));
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  УИН  - Форма объекта - Открытая форма объекта и уникальный ИД
//                 <продолжение описания параметра>
//  Ссылка  - Ссылка - Ссылка на объект базы данных
//                 <продолжение описания параметра>
//
Процедура РазблокироватьОбъектИзФормы(Ссылка,УИН) Экспорт // ++ Тищенко В.В.	
	РазблокироватьДанныеДляРедактирования(Ссылка,УИН);		
КонецПроцедуры // -- Тищенко В.В.

Функция РасшифрокаВнешниеДанныеМакетСервер(Параметры,ТекстВыполнения) Экспорт // ++ Тищенко В.В.

	Попытка
		Если ЗначениеЗаполнено(ТекстВыполнения) Тогда
			Выполнить(ТекстВыполнения);
		КонецЕсли;	
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки; 
	
	Возврат Параметры;
	
КонецФункции // -- Тищенко В.В.

// Возвращает таблицу ответственных лиц, сформированную в соответствии с произвольным отбором.
//
// Параметры:
//  см. вогОбщегоНазначения.ПолучитьТаблицуОтветственныхЛицПоОтбору.
//
Функция ПолучитьТаблицуОтветственныхЛицПоОтбору(Знач Отбор, ДопустимыПомеченныеНаУдаление = Ложь, СтрокаПоиска = "") Экспорт
	
	Возврат вогОбщегоНазначения.ПолучитьТаблицуОтветственныхЛицПоОтбору(Отбор, ДопустимыПомеченныеНаУдаление, СтрокаПоиска);
	
КонецФункции

// ++ VOG Солодов В.В. 24.06.2020 CRM-724
Функция ПользовательЯвляетсяСобственником(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ДолжностнаяПозицияПользователя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "CRM_ДолжностнаяПозиция");
	РольПользователя 				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностнаяПозицияПользователя, "Роль");
	
	Возврат (РольПользователя = Справочники.РолиКонтактныхЛицПартнеров.Собственник);
	
КонецФункции
// -- VOG Солодов В.В. 24.06.2020 CRM-724

#КонецОбласти




//START Кайдашов 25/06/19
//Ульянов 25/09/2019 доработано для корректной обработки классификаторов с видом вхождение

//Функция предназначена для записи значения классификаторов(Одиночное значение и дополнительный реквизит) в регистр сведений CRM_ОбъектыЗначенийКлассификаторов
//
//Параметры
//	Объект - Объект по которому необходимо записать значение классификатора
//	ЗначениеКлассификатора - Значение классификатора - СправочникСсылка.CRM_ЗначенияКлассификаторов
//	ЗначениеРеквизита - Если классификатор вид - Дополнительный реквизит, то необходимо передать значение дополнительного реквизита
//	Аналитика - Аналитика с таким же типом как указано в классификаторе, если в ЗначенииКлассификатора указано Направление деятельности, то берется из значения классификатора 
//  УдалятьПредыдущиеДляВхождения - Булево. Если истина то чистит записи для вхождения перед созданием новой, если ложь то только добавляет новую.
Функция ЗаписатьЗначениеКлассификатора(Объект,ЗначениеКлассификатора,ЗначениеРеквизита = Неопределено,Аналитика = Неопределено, УдалятьПредыдущиеДляВхождения = Ложь, ХранитьИсторию = Ложь, ОтключитьПроверкуИзменения = Ложь,Регистратор = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект) или НЕ ЗначениеЗаполнено(ЗначениеКлассификатора) тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеКлассификатора.Владелец.ИспользуемаяАналитика) тогда
		Если ТипЗнч(ЗначениеКлассификатора.Владелец.ИспользуемаяАналитика) = Тип("СправочникСсылка.НаправленияДеятельности") и ЗначениеЗаполнено(ЗначениеКлассификатора.НаправлениеДеятельности) тогда
			Аналитика = ЗначениеКлассификатора.НаправлениеДеятельности;	
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(Аналитика) тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеКлассификатора.Владелец.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение 
		или  ЗначениеКлассификатора.Владелец.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит 
		или  ЗначениеКлассификатора.Владелец.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение тогда
		Если НЕ(ЗначениеКлассификатора.Владелец.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение) ИЛИ УдалятьПредыдущиеДляВхождения тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект",Объект);
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
			|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК ЗначениеРеквизита
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
			|ГДЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект
			|	И  ";
			
			
			Если ЗначениеКлассификатора.Владелец.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение 
				или  ЗначениеКлассификатора.Владелец.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение тогда
				Запрос.Текст = Запрос.Текст + "CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Владелец ";
				Запрос.УстановитьПараметр("Владелец",ЗначениеКлассификатора.Владелец);
			КонецЕсли;
			Если  ЗначениеКлассификатора.Владелец.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит тогда
				Запрос.Текст = Запрос.Текст + "CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &Владелец ";
				Запрос.УстановитьПараметр("Владелец",ЗначениеКлассификатора);
			КонецЕсли;
			Если ЗначениеЗаполнено(Аналитика) тогда
				Запрос.УстановитьПараметр("Аналитика",Аналитика);	
				Запрос.Текст = Запрос.Текст + " И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика";
			КонецЕсли;
			ВыборкаСуществующихДанных = Запрос.Выполнить().Выбрать();
			Пока ВыборкаСуществующихДанных.Следующий() Цикл
				Набор = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
				Набор.Отбор.Объект.Установить(ВыборкаСуществующихДанных.Объект);
				Набор.Отбор.Аналитика.Установить(ВыборкаСуществующихДанных.Аналитика);
				Набор.Отбор.ЗначениеКлассификатора.Установить(ВыборкаСуществующихДанных.ЗначениеКлассификатора);
				Набор.Прочитать();
				Набор.Очистить();
				Набор.Записать();
			КонецЦикла;	
		КонецЕсли;	
			
		МенеджерЗаписи = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Объект;
		МенеджерЗаписи.Аналитика = Аналитика;
		МенеджерЗаписи.ЗначениеКлассификатора = ЗначениеКлассификатора;
		Если ЗначениеЗаполнено(ЗначениеРеквизита) тогда
			МенеджерЗаписи.ЗначениеРеквизита = ЗначениеРеквизита;
		КонецЕсли;
		Если Регистратор<>Неопределено тогда
			МенеджерЗаписи.ОбъектРегистратор = Регистратор;	
		КонецЕсли;
		МенеджерЗаписи.ДатаВключения = ТекущаяДата();
		МенеджерЗаписи.Записать();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
	
КонецФункции
//END Кайдашов

//START Кайдашов 05/08/19 486
Функция ПолучитьРольУчастникМероприятияНаСервере() Экспорт
	
	Возврат вогОбщегоНазначенияПовтИсп.РольУчастникаМероприятия();
	
КонецФункции
//END Кайдашов 486

// +++ VOG Кулаков П.Л. 28.10.2020 CRM-999
&НаСервере
Функция ПолучитьМассивВариантовВыполненияЗадачиПоСсылке(Ссылка) Экспорт
	
	МассивВариантов = Новый Массив;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.вогАнкета") Тогда
		СогласованиеДоговораФормаВОГ = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("a6f5621e-d3c1-11e9-b656-005056bc3fe8"));
		СогласованиеДоговораФормаКлиента = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("ea3b5014-1021-11ea-8d81-005056bc3fe8"));
		Если Ссылка.ВариантОпроса = СогласованиеДоговораФормаВОГ ИЛИ Ссылка.ВариантОпроса = СогласованиеДоговораФормаКлиента Тогда
			Возврат МассивВариантов;
		КонецЕсли;
		// +++ удалить
		ЗаявкаНаПроектирование = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("8916f686-087f-11eb-8314-005056bc3fe8"));
		Если Ссылка.ВариантОпроса = ЗаявкаНаПроектирование Тогда
			Возврат МассивВариантов;
		КонецЕсли;
		//---
		Если ЗначениеЗаполнено(Ссылка.ДокументОснование) И (ТипЗнч(Ссылка.ДокументОснование) = Тип("ДокументСсылка.вогАнкета") ИЛИ ТипЗнч(Ссылка.ДокументОснование) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")) Тогда
			Возврат МассивВариантов;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	// +++ VOG Кулаков П.Л. 13.01.2021 DEV-77
		"ВЫБРАТЬ
		|	вогИсполнителиРолейИДелегаты.РольПользователь КАК РольПользователь
		|ПОМЕСТИТЬ вт_Делегирование
		|ИЗ
		|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|ГДЕ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &Исполнитель
		|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.)
		|				ИЛИ ЗадачаИсполнителя.Исполнитель ЕСТЬ NULL
		|			ТОГДА ЗадачаИсполнителя.РольИсполнителя
		|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.БизнесПроцесс.Предмет КАК Командировка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	(ЗадачаИсполнителя.Исполнитель = &Исполнитель
		|			ИЛИ ЗадачаИсполнителя.РольИсполнителя В (&РолиПользователя)
		|			ИЛИ ЗадачаИсполнителя.Исполнитель В
		|				(ВЫБРАТЬ
		|					вт_Делегирование.РольПользователь КАК РольПользователь
		|				ИЗ
		|					вт_Делегирование КАК вт_Делегирование))
		|			И НЕ ЗадачаИсполнителя.Выполнена
		|			И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен
		|			И ЗадачаИсполнителя.БизнесПроцесс.Предмет = &Предмет";
	// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("РолиПользователя", РолиПользователя);
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивВариантов;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоЗадач = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоличествоЗадач = КоличествоЗадач + 1;
		
		ВариантыВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(ВыборкаДетальныеЗаписи.Задача);
		Если ВариантыВыполнения.СписокВариантов.Количество() = 0 Тогда
			СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ВыборкаДетальныеЗаписи.Задача.CRM_ТочкаМаршрута,
					ВыборкаДетальныеЗаписи.Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, 0);
					Если НЕ СтруктураТочки = Неопределено 
						И (СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие 
							ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка
							ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение) Тогда
				ВариантСиноним = "Выполнить";
				ВариантыВыполнения.СписокВариантов.Добавить(0, ВариантСиноним, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ВариантыВыполнения.СписокВариантов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Вариант Из ВариантыВыполнения.СписокВариантов Цикл
			Если КоличествоЗадач = 1 Тогда
				МассивВариантов.Добавить(Вариант.Представление);
			Иначе
				Если МассивВариантов.Найти(Вариант.Представление) = Неопределено Тогда
					Возврат МассивВариантов;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивВариантов;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 26.10.2020
&НаСервере
Процедура СогласоватьЗадачи(ВидСогласования,Предмет,РезультатВыполнения = "") Экспорт
	
	РезультатЗапроса = вогОбщегоНазначенияКлиентСервер.ПолучитьСписокЗадачПоДокументу(Предмет);
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ЗадачаВыполнена = Ложь;
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Сообщить("Не найдено задач для выполнения");
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ВариантВыполнения = Неопределено;
		
		ВариантыВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(ВыборкаДетальныеЗаписи.Задача);
		Если ВариантыВыполнения.СписокВариантов.Количество() = 0 Тогда
			СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ВыборкаДетальныеЗаписи.Задача.CRM_ТочкаМаршрута,
					ВыборкаДетальныеЗаписи.Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, 0);
			Если НЕ СтруктураТочки = Неопределено И (СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие 
					ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка
					ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение) Тогда
				ВариантСиноним = "Выполнить";
				ВариантыВыполнения.СписокВариантов.Добавить(0, ВариантСиноним, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ВариантыВыполнения.СписокВариантов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Вариант Из ВариантыВыполнения.СписокВариантов Цикл
			Если Вариант.Представление = ВидСогласования Тогда
				ВариантВыполнения = Вариант.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВариантВыполнения = Неопределено Тогда
			Сообщить("Для задачи: " + ВыборкаДетальныеЗаписи.Задача + " нет варианта """ + ВидСогласования + """");
			Продолжить;
		КонецЕсли;
		
		ЗадачаПринятаКИсполнению = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыборкаДетальныеЗаписи.Задача, "ПринятаКИсполнению");
			
		Если НЕ ЗадачаПринятаКИсполнению Тогда
			CRM_БизнесПроцессыСервер.ПринятьЗадачуКИсполнениюИзФормыДокумента(ВыборкаДетальныеЗаписи.Задача,ТекущийПользователь);
		КонецЕсли;
		
		Если ВариантВыполнения = "Выполнить" Тогда
			ВариантВыполнения = Неопределено;
		КонецЕсли;
		
		Попытка
			CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ВыборкаДетальныеЗаписи.Задача,ВариантВыполнения);
			
			УспешноеСообщение = "Успешно: """ + ВидСогласования + """, по задаче: " + ВыборкаДетальныеЗаписи.Задача;
			
			Если ВариантВыполнения = Неопределено Тогда
				ВариантВыполнения = "";
				ВидСогласования = ВыборкаДетальныеЗаписи.Задача.CRM_ВариантВыполненияСтрокой;
				РезультатВыполнения = ВариантВыполнения + ?(РезультатВыполнения = "","",Символы.ПС + РезультатВыполнения);
			Иначе 
				РезультатВыполнения = ВидСогласования + ?(РезультатВыполнения = "","",Символы.ПС + РезультатВыполнения);
			КонецЕсли;
			Результат = Новый Структура("РезультатВыполнения",РезультатВыполнения);
			ПараметрыВыполнения = Новый Структура("ВариантВыполнения,ВариантВыполненияСтрокой",ВариантВыполнения,ВидСогласования);
			CRM_БизнесПроцессыСервер.ЗафиксироватьРезультатВыполненияЗадачи(ВыборкаДетальныеЗаписи.Задача,Результат,ПараметрыВыполнения);
			ЗадачаВыполнена = Истина;
			Сообщить(УспешноеСообщение);
		Исключение
			Сообщить("При выполнении задачи произошла ошибка:" + ОписаниеОшибки() + "Обратитесь к администратору");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 11.11.2020 CRM-999
&НаСервере
Функция ПолучитьИмяФормыПоСсылке(Ссылка) Экспорт
	
	Возврат Ссылка.Метаданные().ОсновнаяФормаОбъекта.ПолноеИмя();
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 18.12.2020 DEV-8
Функция ПолучитьМассивЗадач(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// +++ VOG Кулаков П.Л. 13.01.2021 DEV-77
		"ВЫБРАТЬ
		|	вогИсполнителиРолейИДелегаты.РольПользователь КАК РольПользователь
		|ПОМЕСТИТЬ вт_Делегирование
		|ИЗ
		|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|ГДЕ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &Исполнитель
		|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.)
		|				ИЛИ ЗадачаИсполнителя.Исполнитель ЕСТЬ NULL
		|			ТОГДА ЗадачаИсполнителя.РольИсполнителя
		|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.БизнесПроцесс.Предмет КАК Командировка,
		|	ЗадачаИсполнителя.Наименование КАК Наименование
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	(ЗадачаИсполнителя.Исполнитель = &Исполнитель
		|			ИЛИ ЗадачаИсполнителя.РольИсполнителя В (&РолиПользователя)
		|			ИЛИ ЗадачаИсполнителя.Исполнитель В
		|				(ВЫБРАТЬ
		|					вт_Делегирование.РольПользователь КАК РольПользователь
		|				ИЗ
		|					вт_Делегирование КАК вт_Делегирование))
		|			И ЗадачаИсполнителя.БизнесПроцесс.Предмет = &Предмет";
	// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("РолиПользователя", РолиПользователя);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Задача");
	
КонецФункции // --- VOG Кулаков П.Л.

Функция ПолучитьНаправлениеДеятельностиТекущегоПользователя() экспорт  //VOG Ульянов И.В. CRM-1117
	
	НаправлениеДеятельности = вогОбщегоНазначения.ПолучитьНаправлениеДеятельностиТекущегоПользователя();
	Если ЗначениеЗаполнено(НаправлениеДеятельности) тогда
		Возврат НаправлениеДеятельности;
	Иначе
		Возврат Справочники.НаправленияДеятельности.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции