
#Область ОбщиеПроцедурыИФункции

Функция ВыполнитьЗапрос(Сервер, СтрокаЗапроса = "", Ресурс) Экспорт  
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "Content-Type: application/json");
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс);
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса,"UTF-8",ИспользованиеByteOrderMark.НеИспользовать);
		Ответ = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Иначе	
		Ответ = HTTP.Получить(HTTPЗапрос);
	КонецЕсли;
	
    ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Возврат ТекстОтвета;
КонецФункции

Функция CRM_ПолучитьФайл(Сервер, Ресурс, ИмяФайла) Экспорт  
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTP.Получить(Ресурс, ИмяФайла);
	ПутьКФайлу = HTTPОтвет.Заголовки.Получить("Location");
	Если ПутьКФайлу<>Неопределено Тогда
		КопироватьФайл(ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеИзОтветаJSON(ТекстJSON)Экспорт 
	ЧтениеJSON=Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Значение=ПрочитатьJSON(ЧтениеJSON);
	Возврат Значение
КонецФункции

Функция ПолучитьСтрокуJSON(Значение)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,Ложь));
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ОтправитьСообщение(ТекстСообщения, УчетнаяЗапись, Группа, IDПользователя, Контакт, СписокФайлов) Экспорт
	
	Сообщение = Документы.CRM_СообщениеМессенджера.СоздатьДокумент();
	Сообщение.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Сообщение.ТекстСообщения = ТекстСообщения;
	Сообщение.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее;
	Сообщение.ID_Пользователя = IDПользователя;
	Если ТипЗнч(Контакт)<>Тип("Строка") Тогда
		Сообщение.Контакт = Контакт;
	Иначе
		Сообщение.КонтактПредставление = Контакт;
	КонецЕсли;
	Сообщение.Группа = Группа;
	Сообщение.УчетнаяЗапись = УчетнаяЗапись;
	Сообщение.Ответственный = Пользователи.ТекущийПользователь();
	Если УчетнаяЗапись.ТипМессенджера = Перечисления.CRM_ТипыМессенджеров.ВКонтакте Тогда
		ID_Сообщения = ОтправитьСообщениеVK(ТекстСообщения, УчетнаяЗапись, Группа, IDПользователя, СписокФайлов);
	КонецЕсли;
	Если ID_Сообщения<> Неопределено Тогда 
		Сообщение.ID_Сообщения = ID_Сообщения;
		Сообщение.Записать();
		Для каждого Вложение из СписокФайлов Цикл
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("ВладелецФайлов", Сообщение.Ссылка);
			ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
			ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(Вложение.Представление, СтрНайти(Вложение.Представление, ".")-1));
			ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(Вложение.Представление, СтрНайти(Вложение.Представление, ".")+1));
			ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Вложение.Значение);
		КонецЦикла;
		Возврат Сообщение.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

Процедура ОжиданиеСобытийМессенджера(Параметры) Экспорт
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
	Если Параметры.Свойство("УникальныйИдентификаторЗадания") Тогда
		Если Параметры.ТипМессенджера = Перечисления.CRM_ТипыМессенджеров.ВКонтакте Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	CRM_УчетныеЗаписиМессенджеров.ТокенГруппы,
			                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка,
			                      |	CRM_УчетныеЗаписиМессенджеров.IDГруппы
			                      |ИЗ
			                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
			                      |ГДЕ
			                      |	CRM_УчетныеЗаписиМессенджеров.УникальныйИдентификаторЗадания = &УникальныйИдентификаторЗадания
			                      |	И CRM_УчетныеЗаписиМессенджеров.ТипМессенджера = &ТипМессенджера");
			Запрос.УстановитьПараметр("УникальныйИдентификаторЗадания", Параметры.УникальныйИдентификаторЗадания);
			Запрос.УстановитьПараметр("ТипМессенджера", Параметры.ТипМессенджера);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПолучитьСообщенияГруппыVK(Выборка.Ссылка, Выборка.IDГруппы, Выборка.ТокенГруппы);
				Если ЭтоФайловаяБаза Тогда Возврат; КонецЕсли;
				ОжиданиеСобытийVK(Выборка.Ссылка, Выборка.IDГруппы, Выборка.ТокенГруппы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВидКИМессенджера(УчетнаяЗапись, Контакт) Экспорт
	
	Если УчетнаяЗапись.ТипМессенджера = Перечисления.CRM_ТипыМессенджеров.ВКонтакте Тогда
		Начало = "CRM_ИдентификаторВКонтакте";
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Окончание = "ЧастногоЛица";
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Окончание = "КонтактногоЛица";
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Окончание = "ПотенциальногоКлиента";
	КонецЕсли;
	
	Возврат Справочники.ВидыКонтактнойИнформации[Начало+Окончание];
	
КонецФункции

Функция НеСвязанныеСообщенияКонтакта(УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	CRM_СообщениеМессенджера.Ссылка
	                       |ПОМЕСТИТЬ НеСвязанныеСообщения
	                       |ИЗ
	                       |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                       |ГДЕ
	                       |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                       |	И CRM_СообщениеМессенджера.Группа = &Группа
	                       |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	НеСвязанныеСообщения.Ссылка
	                       |ИЗ
	                       |	НеСвязанныеСообщения КАК НеСвязанныеСообщения
	                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                       |		ПО НеСвязанныеСообщения.Ссылка = CRM_ЖурналДокументов.Объект
	                       |			И (CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка))");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Процедура СкрытьИзАрмаПредыдущиеСообщения(Сообщение)
	 Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                       |ИЗ
	                       |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                       |ГДЕ
	                       |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                       |	И CRM_СообщениеМессенджера.Группа = &Группа
	                       |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
						   //|	И CRM_СообщениеМессенджера.Дата < &Дата
	                       |	И НЕ CRM_СообщениеМессенджера.CRM_СкрытьВАРМ
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	CRM_СообщениеМессенджера.Дата УБЫВ");
	Запрос.УстановитьПараметр("УчетнаяЗапись", Сообщение.УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Сообщение.Группа);
	Запрос.УстановитьПараметр("ID_Пользователя", Сообщение.ID_Пользователя);
//	Запрос.УстановитьПараметр("Дата", Сообщение.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Первый = Истина;
	Пока Выборка.Следующий() Цикл
		Если Первый Тогда
			Первый = Ложь;
			Продолжить;
		КонецЕсли;
		РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(Выборка.Ссылка);
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.CRM_СкрытьВАРМ = Истина;
		СообщениеОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Функция ТекущийПользовательПолучитьПравоУчетнойЗаписи(УчетнаяЗапись, ИмяПрава) Экспорт
	
	ЗначениеПраваУчетнойЗаписи = Ложь;
	
	// Полноправным пользователям разрешены все действия независимо от настроек.
	Если ИмяПрава = "Администрирование" Тогда
		
		ЗначениеПраваУчетнойЗаписи = Пользователи.ЭтоПолноправныйПользователь()
	
	КонецЕсли; 
	
	Если НЕ ЗначениеПраваУчетнойЗаписи Тогда
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	CRM_УчетныеЗаписиМессенджеров.Администрирование,
			               |	CRM_УчетныеЗаписиМессенджеров.Запись
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
			               |ГДЕ
			               |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись
			               |	И CRM_УчетныеЗаписиМессенджеров.Пользователь = &Пользователь";
			
			Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
			Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ЗначениеПраваУчетнойЗаписи = Выборка[ИмяПрава];
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЕсли; 
	
	Возврат ЗначениеПраваУчетнойЗаписи;

КонецФункции // ПолучитьПравоПользователяУчетнойЗаписи() 

Функция НайтиСообщениеМессенджера(УчетнаяЗапись, Группа, ID_Пользователя, ID_Сообщения)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |	И CRM_СообщениеМессенджера.ID_Сообщения = &ID_Сообщения");
	Запрос.УстановитьПараметр("ID_Сообщения", ID_Сообщения);
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

Процедура ПометитьИсходящиеКакПрочтенные(УчетнаяЗапись, Группа, ID_Пользователя)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Прочитано = Истина;
		СообщениеОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ПометитьВходящиеКакПрочтенные(УчетнаяЗапись, Группа, ID_Пользователя) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |	И НЕ CRM_СообщениеМессенджера.Прочитано");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Прочитано = Истина;
		СообщениеОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьСобытиеМессенджера(Событие, УчетнаяЗапись, ID_Пользователя, Значение=Неопределено)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.Пользователь
	                      |ИЗ
	                      |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьМенеджерЗаписи();
		Запись.Пользователь = Выборка.Пользователь;
		Запись.Событие = Событие;
		Запись.УчетнаяЗапись = УчетнаяЗапись;
		Запись.ID_Пользователя = ID_Пользователя;
		Запись.Значение = Значение;
		Запись.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСобытияМессенджера(Пользователь) Экспорт
	НаборЗаписей = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	События = Новый Массив;
	
	Для каждого Запись из НаборЗаписей Цикл
		Событие = Новый Структура("Событие, УчетнаяЗапись, ID_Пользователя, Значение", Неопределено, Неопределено, Неопределено, Неопределено);
		ЗаполнитьЗначенияСвойств(Событие, Запись);
		События.Добавить(Событие);
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	Возврат События;
КонецФункции

Процедура ОчиститьСобытияМессенджера(Пользователь) Экспорт
	НаборЗаписей = РегистрыСведений.CRM_СобытияМессенджеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура СвязатьВсеСообщенияПользователяСКонтактом(ТипМессенджера, ID_Пользователя, Контакт) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись.ТипМессенджера = &ТипМессенджера");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("ТипМессенджера", ТипМессенджера);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Контакт = Контакт;
		СообщениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВКонтакте

Функция ПолучитьСписокГруппПользователяVK(Токен) Экспорт
	Ресурс = "/method/groups.get?v=5.67&extended=1&filter=admin&access_token="+Токен;
	СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		СписокГрупп = Новый СписокЗначений;
		Для каждого Группа из СтруктураОтвета.response.items Цикл
			СписокГрупп.Добавить(СтрЗаменить(Строка(Группа.id), Символы.НПП, ""), Группа.name);
		КонецЦикла;
		Возврат СписокГрупп;
	КонецЕсли;
КонецФункции

Процедура ПолучитьСообщенияГруппVK(УчетнаяЗапись) Экспорт
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Если ЗначениеЗаполнено(УчетнаяЗапись.ТокенГруппы) Тогда
			ПолучитьСообщенияГруппыVK(УчетнаяЗапись, УчетнаяЗапись.IDГруппы, УчетнаяЗапись.ТокенГруппы);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка,
		                      |	CRM_УчетныеЗаписиМессенджеров.ТокенГруппы,
		                      |	CRM_УчетныеЗаписиМессенджеров.IDГруппы
		                      |ИЗ
		                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		                      |ГДЕ
		                      |	CRM_УчетныеЗаписиМессенджеров.ТипМессенджера = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыМессенджеров.ВКонтакте)");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ТокенГруппы) Тогда
				ПолучитьСообщенияГруппыVK(Выборка.Ссылка, Выборка.IDГруппы, Выборка.ТокенГруппы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьСообщенияГруппыVK(УчетнаяЗапись, IDГруппы, Токен)
	
	РесурсПрочтение = "/method/messages.markAsRead?v=5.67&access_token="+Токен+"&message_ids=";
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Дата КАК Дата,
	                      |	CRM_СообщениеМессенджера.ID_Сообщения
	                      |ПОМЕСТИТЬ ВыбранныеСообщения
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВыбранныеСообщения.ID_Сообщения
	                      |ИЗ
	                      |	ВыбранныеСообщения КАК ВыбранныеСообщения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			МАКСИМУМ(ВыбранныеСообщения.Дата) КАК МаксДата
	                      |		ИЗ
	                      |			ВыбранныеСообщения КАК ВыбранныеСообщения) КАК ВложенныйЗапрос
	                      |		ПО ВыбранныеСообщения.Дата = ВложенныйЗапрос.МаксДата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ВыбранныеСообщения");
	Запрос.УстановитьПараметр("Группа", IDГруппы);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ID_Сообщения) Тогда
		Ресурс = "/method/messages.getDialogs?v=5.67&count=200&offset=-200&start_message_id="+Выборка.ID_Сообщения+"&access_token="+Токен;
	ИначеЕсли ЗначениеЗаполнено(УчетнаяЗапись.ДатаНачальнойЗагрузки) Тогда
		Ресурс = "/method/messages.getDialogs?v=5.67&count=200&access_token="+Токен+"&time_offset="+СтрЗаменить(Строка(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()-УчетнаяЗапись.ДатаНачальнойЗагрузки), Символы.НПП, "");
	Иначе		
		Ресурс = "/method/messages.getDialogs?v=5.67&count=200&access_token="+Токен;
	КонецЕсли;
	
	СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	ИначеЕсли СтруктураОтвета.response.count > 0 Тогда
		Для каждого Диалог из СтруктураОтвета.response.items Цикл
			
			user_id = СтрЗаменить(Строка(Диалог.message.user_id), Символы.НПП, "");
			РесурсИсторияДиалога = "/method/messages.getHistory?v=5.67&count=200&offset=-200&user_id="+user_id+"&start_message_id="+Выборка.ID_Сообщения+"&access_token="+Токен;
			ПолучитьСообщенияVK(РесурсИсторияДиалога, РесурсПрочтение, УчетнаяЗапись, IDГруппы);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправитьСообщениеVK(Сообщение, УчетнаяЗапись, Группа, IDПользователя, СписокФайлов) Экспорт
	
	Токен = УчетнаяЗапись.ТокенГруппы;
	Ресурс = "/method/messages.send?v=5.67&message="+Сообщение+"&user_id="+IDПользователя+"&access_token="+Токен;
	Если СписокФайлов.Количество()> 0 Тогда
		attachment = "";
		Для каждого Вложение из СписокФайлов Цикл
			Файл = ЗагрузитьФайлНаСерверVK(Вложение.Значение, Вложение.Представление, IDПользователя, Токен);
			attachment = attachment + ?(attachment="", "", ",") + Файл;
		КонецЦикла;
		Ресурс = Ресурс + "&attachment="+attachment;
	КонецЕсли;
	СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Возврат СтрЗаменить(Строка(СтруктураОтвета.response), Символы.НПП, "");
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьФайлНаСерверVK(АдресВХранилище, ИмяФайла, IDПользователя, Токен)
	
	Ресурс = "/method/docs.getMessagesUploadServer?v=5.67&peer_id="+IDПользователя+"&access_token="+Токен;
	СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		СерверЗагрузки = СтрЗаменить(СтруктураОтвета.response.upload_url, "https://", "");
		//Позиция = СтрНайти(СерверЗагрузки, "/");
		//АдресРесурса = Сред(СерверЗагрузки, Позиция);
		//СерверЗагрузки = Лев(СерверЗагрузки, Позиция-1);
	КонецЕсли;
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");

	Тело         = Новый ПотокВПамяти();
    ЗаписьДанных = Новый ЗаписьДанных(Тело,КодировкаТекста.ANSI);
    ЗаписьДанных.ЗаписатьСтроку("--"+Boundary);
    ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename="""+ИмяФайла+"""");
	//ЗаписьДанных.ЗаписатьСтроку("Content-Type: image/jpeg");
    ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.Записать(ПолучитьИзВременногоХранилища(АдресВХранилище));
	ЗаписьДанных.ЗаписатьСтроку("");
    ЗаписьДанных.ЗаписатьСтроку("--"+Boundary);

    ДвоичныеДанныеДляОтправки = Тело.ЗакрытьИПолучитьДвоичныеДанные();
    ЗаголовокHTTP = Новый Соответствие;
    ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);
    ЗаголовокHTTP.Вставить("Content-Length", XMLСтрока(ДвоичныеДанныеДляОтправки.Размер()));
        
    Соединение = Новый HTTPСоединение(СерверЗагрузки,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
       
    ЗапросHTTP      = Новый HTTPЗапрос("",ЗаголовокHTTP);
    ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеДляОтправки);
    
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	
    ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	СтруктураОтвета = ПолучитьЗначениеИзОтветаJSON(ТекстОтвета);
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Ресурс = "/method/docs.save?v=5.67&file="+СтруктураОтвета.file+"&access_token="+Токен;
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",Ресурс));
		Если СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error.error_msg;
		КонецЕсли;
		Ответ = СтруктураОтвета.response[0];
		Документ = "doc"+СтрЗаменить(Строка(Ответ.owner_id), Символы.НПП, "")+"_"+СтрЗаменить(Строка(Ответ.id), Символы.НПП, "");
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Процедура ОжиданиеСобытийVK(УчетнаяЗапись, IDГруппы, Токен)
	ПолучитьСообщенияГруппыVK(УчетнаяЗапись, IDГруппы, Токен);	
	Ресурс = "/method/messages.getLongPollServer?v=5.67&lp_version=2&need_pts=0&access_token="+Токен;
	РесурсПрочтение = "/method/messages.markAsRead?v=5.67&access_token="+Токен+"&message_ids=";
	СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Позиция = СтрНайти(СтруктураОтвета.response.server, "/");
		Сервер = Лев(СтруктураОтвета.response.server, Позиция-1);
		Путь = Сред(СтруктураОтвета.response.server, Позиция);
		ts = СтруктураОтвета.response.ts;
		Ресурс = Путь+"?act=a_check&key="+СтруктураОтвета.response.key+"&ts={$ts}&wait=25&mode=2&version=2";
	КонецЕсли;
	Пока Истина Цикл
		Ресурс1 = СтрЗаменить(Ресурс, "{$ts}", СтрЗаменить(Строка(ts), Символы.НПП, ""));
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(Сервер,"",Ресурс1));
		Если СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error.error_msg;
		Иначе
			ts = СтруктураОтвета.ts;
			Для каждого Событие из СтруктураОтвета.updates Цикл
				Если Событие[0] = 4 Тогда
					ID_Сообщения = СтрЗаменить(Строка(Событие[1]), Символы.НПП, "");
					Если Событие[6].Количество()>1 Тогда
						РесурсСообщение = "/method/messages.getById?v=5.67&message_ids="+ID_Сообщения+"&access_token="+Токен;
						ПолучитьСообщенияVK(РесурсСообщение, РесурсПрочтение, УчетнаяЗапись, IDГруппы);
					Иначе
						ID_Пользователя = СтрЗаменить(Строка(Событие[3]), Символы.НПП, "");
						Если НайтиСообщениеМессенджера(УчетнаяЗапись, IDГруппы, ID_Пользователя, ID_Сообщения) <> Неопределено Тогда Продолжить; КонецЕсли;
						Дата = МестноеВремя(Дата(1970,1,1)+Событие[4]);
						Сообщение = Документы.CRM_СообщениеМессенджера.СоздатьДокумент();
						Сообщение.Дата = Дата;
						Сообщение.ID_Сообщения = ID_Сообщения;
						Сообщение.ТекстСообщения = СтрЗаменить(Событие[5], "<br>", Символы.ПС);
						Сообщение.ВидСообщения = ?(Событие[6].Свойство("from_admin"), Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее, Перечисления.CRM_ВидыСообщенияМессенджера.Входящее);
						Сообщение.ID_Пользователя = ID_Пользователя;
						Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(Сообщение.ID_Пользователя, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
						Если ЗначениеЗаполнено(Контакт) Тогда
							Сообщение.Контакт = Контакт;
						КонецЕсли;
						Сообщение.КонтактПредставление = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьИмяПользователяVK(Сообщение.ID_Пользователя);
						Сообщение.Группа = IDГруппы;
						Сообщение.УчетнаяЗапись = УчетнаяЗапись;
						Сообщение.Ответственный = УчетнаяЗапись.Ответственный;
						Сообщение.Записать();
						СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",РесурсПрочтение+Сообщение.ID_Сообщения));
						СкрытьИзАрмаПредыдущиеСообщения(Сообщение);
						ЗаписатьСобытиеМессенджера(Перечисления.CRM_СобытияМессенджеров.ПолученоНовоеСообщение, УчетнаяЗапись, Сообщение.ID_Пользователя, Сообщение.Ссылка);
						Если УчетнаяЗапись.CRM_ИсточникЛидов Тогда
							РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Сообщение.Ссылка);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Событие[0] = 7 Тогда
					ID_Пользователя = СтрЗаменить(Строка(Событие[1]), Символы.НПП, "");
					ПометитьИсходящиеКакПрочтенные(УчетнаяЗапись, IDГруппы, ID_Пользователя);
					ЗаписатьСобытиеМессенджера(Перечисления.CRM_СобытияМессенджеров.ПрочитаныСообщения, УчетнаяЗапись, ID_Пользователя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьСообщенияVK(РесурсИсторияДиалога, РесурсПрочтение, УчетнаяЗапись, IDГруппы)
	
	СтруктураОтветаДиалог = ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",РесурсИсторияДиалога));
	Если СтруктураОтветаДиалог.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтветаДиалог.error.error_msg;
	ИначеЕсли СтруктураОтветаДиалог.response.count > 0 Тогда
		Для каждого ТекСообщение из СтруктураОтветаДиалог.response.items Цикл
			user_id = СтрЗаменить(Строка(ТекСообщение.user_id), Символы.НПП, "");
			Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации("https://vk.com/id"+user_id, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			ИмяПользователя = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьИмяПользователяVK(user_id);
			Дата = МестноеВремя(Дата(1970,1,1)+ТекСообщение.date);
			Сообщение = Документы.CRM_СообщениеМессенджера.СоздатьДокумент();
			Сообщение.Дата = Дата;
			Сообщение.ID_Сообщения = СтрЗаменить(Строка(ТекСообщение.id), Символы.НПП, "");
			Сообщение.ТекстСообщения = СтрЗаменить(ТекСообщение.body, "<br>", Символы.ПС);
			Сообщение.ВидСообщения = ?(ТекСообщение.out = 0, Перечисления.CRM_ВидыСообщенияМессенджера.Входящее, Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее);
			Сообщение.ID_Пользователя = user_id;
			Если ЗначениеЗаполнено(Контакт) Тогда
				Сообщение.Контакт = Контакт;
			КонецЕсли;
			Сообщение.КонтактПредставление = ИмяПользователя;
			Сообщение.Группа = IDГруппы;
			Сообщение.УчетнаяЗапись = УчетнаяЗапись;
			Сообщение.Ответственный = УчетнаяЗапись.Ответственный;
			ТекСообщение.Свойство("read_state", Сообщение.Прочитано);
			Сообщение.Записать();
			Если ТекСообщение.Свойство("attachments") Тогда
				КаталогВременныхФайлов = КаталогВременныхФайлов();
				Для каждого Вложение из ТекСообщение.attachments Цикл
					Если Вложение.type = "doc" Тогда
						ПутьКФайлу = Вложение.doc.url;
						CRM_ПолучитьФайл("vk.com", СтрЗаменить(ПутьКФайлу, "https://vk.com", ""), КаталогВременныхФайлов+Вложение.doc.title);
						Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов+Вложение.doc.title);
						АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
						ПараметрыФайла = Новый Структура;
						ПараметрыФайла.Вставить("ВладелецФайлов", Сообщение.Ссылка);
						ПараметрыФайла.Вставить("Автор", Неопределено);
						ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(Вложение.doc.title, СтрНайти(Вложение.doc.title, ".")-1));
						ПараметрыФайла.Вставить("РасширениеБезТочки", Вложение.doc.ext);
						ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
						ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
						РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
						УдалитьФайлы(КаталогВременныхФайлов+Вложение.doc.title);
					ИначеЕсли Вложение.type = "photo" Тогда
						СписокРазмеров = Новый СписокЗначений;
						Для каждого Свойство из Вложение.photo Цикл
							Если СтрНайти(Свойство.Ключ, "photo_") = 1 Тогда
								СписокРазмеров.Добавить(Число(Сред(Свойство.Ключ, 7)));
							КонецЕсли;
						КонецЦикла;
						Если СписокРазмеров.Количество()>0 Тогда
							СписокРазмеров.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
							Размер = СписокРазмеров[0].Значение;
							ПутьКФайлу = Вложение.photo["photo_"+СтрЗаменить(Строка(Размер), Символы.НПП, "")];
							МассивПодстрок = СтрРазделить(ПутьКФайлу, "/", Ложь);
							ИмяФайла = МассивПодстрок[МассивПодстрок.Количество()-1];
							КопироватьФайл(ПутьКФайлу, КаталогВременныхФайлов+ИмяФайла);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов+ИмяФайла);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Сообщение.Ссылка);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".")-1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".")+1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
							УдалитьФайлы(КаталогВременныхФайлов+ИмяФайла);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос("api.vk.com","",РесурсПрочтение+Сообщение.ID_Сообщения));
			СкрытьИзАрмаПредыдущиеСообщения(Сообщение);
			ЗаписатьСобытиеМессенджера(Перечисления.CRM_СобытияМессенджеров.ПолученоНовоеСообщение, УчетнаяЗапись, Сообщение.ID_Пользователя, Сообщение.Ссылка);
			Если УчетнаяЗапись.CRM_ИсточникЛидов И Сообщение.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Входящее Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Сообщение.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
	
#КонецОбласти
