
#Область ОбработчикиСобытийРеквизитов

// Процедура - обработчик события "ПриИзменении" для поля ввода тега в форме объекта.
//
// Параметры:
//  Форма	 - форма объекта
//  Элемент	 - поле ввода тега.
Процедура ТегПриИзменении(Форма, Элемент) Экспорт
	ПоместитьТегВТабличнуюЧасть(Форма);
КонецПроцедуры

// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение) Экспорт
	СтандартнаяОбработка = Ложь;
	ПарамФормы  = Новый Структура("Владелец, Наименование", ТекущееПодразделение, Элемент.ТекстРедактирования);
	ОткрытьФорму("Справочник.CRM_Теги.ФормаОбъекта", ПарамФормы); 
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" для поля значения тега в форме объекта.
//
// Параметры:
//  Форма				 - форма объекта
//  Элемент				 - элемент формы - значение тега.
//  НавигационнаяСсылка	 - строка - навигационная ссылка содержащая ИД тега.
//  СтандартнаяОбработка - булево - стандартная обработка навигационной ссылки.
Процедура ТегОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если Лев(НавигационнаяСсылка, 6) <> "ТегИД_" Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	Форма.Модифицированность = Истина;
	
	Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	
	ТегИД = Сред(НавигационнаяСсылка, 7);
	ЭлементСписка = Объект.CRM_Теги.Получить(Число(ТегИД)-1);
	
	Объект.CRM_Теги.Удалить(ЭлементСписка);
	
	Форма.Подключаемый_ОбновитьОблакоТегов();
	
КонецПроцедуры

// Функция - обработчик события "Нажатие" для предопределенных вариантов периодов или события "ПриИзменении" для
//           произвольного периода.
//
// Параметры:
//  Форма			 - форма списка
//  ИмяСписка		 - строка - имя динамического списка формы для которого устанавливается отбор.
//  ВариантПериода	 - строка - принимает значения: "ПроизвольныйПериод", "Сегодня", "3 дня", "Неделя", "Месяц".
//  Элемент			 - элемент формы.
// Возвращаемое значение:
//  Булево - включен или выключен отбор по данному элементу.
Функция СозданыОтборНажатие(Форма, ИмяСписка, ВариантПериода, Элемент = Неопределено, ПолеДата = "", ВключатьПросроченные = Ложь) Экспорт
	Если ВариантПериода = "3Дня" Тогда  // Обработка сохраненных значений
		ВариантПериода = "3 дня";
	КонецЕсли;	
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	
	Период = Форма.ОтборСозданы[НомерПериода];
	
	Если Элемент<>Неопределено Тогда
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Не Период.Пометка;
		КонецЕсли;
		
		// Вариант периода может быть выбран только один.
		Для Индекс = 0 По Форма.ОтборСозданы.Количество()-1 Цикл
			
			ЭлементСпискаПериодов = Форма.ОтборСозданы[Индекс];
			Если ЭлементСпискаПериодов <> Период Тогда
				ЭлементСпискаПериодов.Пометка = Ложь;
			КонецЕсли;
			
			Если Индекс = 0 Тогда
				ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыПроизвольныйПериод;
				Если НЕ ЭлементСпискаПериодов.Пометка Тогда
					ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
				КонецЕсли;
			ИначеЕсли Индекс = 1 Тогда
				ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыСегодня;
			ИначеЕсли Индекс = 2 Тогда
				ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗа3Дня;
			ИначеЕсли Индекс = 3 Тогда
				ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗаНеделю;
			ИначеЕсли Индекс = 4 Тогда
				ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗаМесяц;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭлементСпискаПериодов.Пометка Тогда
				//ЭлементОтображенияПериода.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоЗначенияОтбора");
				Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
					ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
				КонецЕсли;
			Иначе
				ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
			КонецЕсли;
			
		КонецЦикла;
		
		СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОтборПериод, ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборСозданы).Количество());
		
	КонецЕсли;
	
	ГруппаОтбораПериод = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Форма[ИмяСписка].Отбор.Элементы, "ОтборПериод", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ГруппаОтбораПериод.Использование = Период.Пометка;
	Если ГруппаОтбораПериод.Элементы.Количество() = 0 Тогда
		Если ПолеДата = "" Тогда
			Если Форма[ИмяСписка].Отбор.ДоступныеПоляОтбора.Элементы.Найти("Дата") = Неопределено Тогда
				ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
				ЭлементОтбора.Использование = Истина;
			Иначе
				ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
				ЭлементОтбора.Использование = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ВключатьПросроченные Тогда
				ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеДата);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
				ЭлементОтбора.Использование = Истина;
			КонецЕсли;
			ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеДата);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
	ИначеЕсли ГруппаОтбораПериод.Элементы.Количество() = 2 Тогда
		ГруппаОтбораПериод.Элементы[0].ПравоеЗначение = Период.Значение.ДатаНачала;
		ГруппаОтбораПериод.Элементы[1].ПравоеЗначение = Период.Значение.ДатаОкончания;
	КонецЕсли;
	
	Возврат Период.Пометка;
	
КонецФункции

// Функция - обработчик события "Нажатие" кнопки отчистки отборов по периоду.
//
// Параметры:
//  Форма			 - форма списка
//  ИмяСписка		 - строка - имя динамического списка формы для которого устанавливается отбор.
// Возвращаемое значение:
//  Булево - включен или выключен отбор по данному элементу.
Процедура ОчиститьОтборНажатие(Форма, ИмяСписка, ПолеДата = "") Экспорт
	
	// Снимем все отборы по периоду.
	Для Индекс = 0 По Форма.ОтборСозданы.Количество()-1 Цикл
		
		ЭлементСпискаПериодов = Форма.ОтборСозданы[Индекс];
		ЭлементСпискаПериодов.Пометка = Ложь;
		
		Если Индекс = 0 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыПроизвольныйПериод;
			ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
		ИначеЕсли Индекс = 1 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыСегодня;
		ИначеЕсли Индекс = 2 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗа3Дня;
		ИначеЕсли Индекс = 3 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗаНеделю;
		ИначеЕсли Индекс = 4 Тогда
			ЭлементОтображенияПериода = Форма.Элементы.ОтборСозданыЗаМесяц;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСпискаПериодов.Пометка Тогда
			//ЭлементОтображенияПериода.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоЗначенияОтбора");
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
			
		Иначе
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОтборПериод, ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборСозданы).Количество());
	
	Если ПолеДата = "" Тогда
		Если Форма[ИмяСписка].Отбор.ДоступныеПоляОтбора.Элементы.Найти("Дата") = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма[ИмяСписка], "ДатаНачала", "ДатаНачала");
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма[ИмяСписка], "ДатаОкончания", "ДатаОкончания");
		Иначе
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма[ИмяСписка], "Дата", "Дата");
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма[ИмяСписка], ПолеДата, ПолеДата);
	КонецЕсли;
	
КонецПроцедуры


// Функция - обработчик события "Нажатие" для полей-тегов в форме списка.
//
// Параметры:
//  Форма				 - форма списка
//  ИмяСписка			 - строка - имя динамического списка формы для которого устанавливается отбор.
//  Элемент				 - элемент формы.
//  СтандартнаяОбработка - булево - стандартная обработка нажатия.
// Возвращаемое значение:
//  булево - включен или выключен отбор по данному элементу
Функция ТегОтборНажатие(ОбъектМетаданных, Форма, ИмяСписка, Элемент = Неопределено, СтандартнаяОбработка,
		ЗаписатьСсылкиВСписок = Ложь, СписокОбъектов = Неопределено,ОтбиратьПоТегам = Ложь,
		ОтбиратьОбъектыБезТегов = Ложь, СписокВышестоящихПодразделений = Неопределено) Экспорт
	
	Если Элемент <> Неопределено Тогда	
		Если Лев(Элемент.Имя, 4) <> "Тег_" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	   	Если Элемент.Имя = "Тег_Очистить" Тогда
			Теги  = Новый Массив;
			
			// Не имеет значения ЭлементСписка для тега очистки, поэтому берем первый.
			//ЭлементСписка = Форма.ОтборТеги[0];
			ЭлементСписка = Неопределено;
			
			Элемент.Видимость = Ложь;
			
		// тег для отбора объектов без тега
		ИначеЕсли Элемент.Имя = "Тег_Нет" Тогда
			
			Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);		
			
			// не имеет значения ЭлементСписка для тега очистки, поэтому берем первый
			ЭлементСписка = Форма.ОтборТеги[0];
			
		// остальные теги	
		Иначе
			ТегИД = Сред(Элемент.Имя, 5);
			ЭлементСписка = Форма.ОтборТеги.НайтиПоИдентификатору(ТегИД);
			ЭлементСписка.Пометка = НЕ ЭлементСписка.Пометка;
			Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);
		КонецЕсли; 
	Иначе
		Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);
	КонецЕсли;
	
	//СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОтборТеги, Теги.Количество());
	
	Объекты = Новый Массив;
	//Если Теги.Количество() > 0  Тогда
	Если Теги.Количество() > 0 ИЛИ ОтбиратьОбъектыБезТегов Тогда
		Если ЗаписатьСсылкиВСписок Тогда
			СписокОбъектов.ЗагрузитьЗначения(CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам(ОбъектМетаданных, Теги, ОтбиратьОбъектыБезТегов, СписокВышестоящихПодразделений));
		Иначе
			СсылкиНаОбъектыСтегами = CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам(ОбъектМетаданных, Теги);
		КонецЕсли;
		ОтборВключен = Истина;
	Иначе
		СсылкиНаОбъектыСтегами = Новый Массив;
		ОтборВключен = Ложь;
	КонецЕсли;
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма[ИмяСписка], "Ссылка", СсылкиНаОбъектыСтегами, ВидСравненияКомпоновкиДанных.ВСписке, , ОтборВключен);
	Если НЕ ЗаписатьСсылкиВСписок Тогда
		СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОтборТеги, Теги.Количество());
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма[ИмяСписка], "Ссылка", СсылкиНаОбъектыСтегами, ВидСравненияКомпоновкиДанных.ВСписке, , ОтборВключен);	
	Иначе
		ОтбиратьПоТегам = ОтборВключен;
	КонецЕсли;
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭлементСписка.Пометка;
	КонецЕсли;
	
КонецФункции

// Функция - обработчик события "ПриИзменении" для полей быстрого отбора в форме списка.
// Параметры:
//  Форма  - форма списка
//  Отбор1 - значение отбора на форме списка (по умолчанию "").
//  Отбор2 - значение отбора на форме списка (по умолчанию "").
//  Отбор3 - значение отбора на форме списка (по умолчанию "").
//  Отбор4 - значение отбора на форме списка (по умолчанию "").
Процедура БыстрыйОтборИзменение(Форма,Отбор1 = "", Отбор2 = "", Отбор3 = "", Отбор4 = "", Отбор5 = "") Экспорт
	
	КоличествоОтборов = 0;
	
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор1), 1, 0);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор2), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор3), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор4), КоличествоОтборов + 1, КоличествоОтборов);	
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор5), КоличествоОтборов + 1, КоличествоОтборов);	
	
	СформироватьЗаголовокВариантаОтбора(Форма.Элементы.БыстрыеОтборы, КоличествоОтборов);
		
КонецПроцедуры

// Функция - обработчик события "ПриИзменении" для полей быстрого отбора в форме списка.
// Параметры:
//  Форма  - форма списка
//  Отбор1 - значение отбора на форме списка (по умолчанию "").
//  Отбор2 - значение отбора на форме списка (по умолчанию "").
//  Отбор3 - значение отбора на форме списка (по умолчанию "").
//  Отбор4 - значение отбора на форме списка (по умолчанию "").
Процедура ПрочиеОтборыИзменение(Форма, Отбор1 = "", Отбор2 = "", Отбор3 = "", Отбор4 = "") Экспорт
	
	КоличествоОтборов = 0;
	
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор1), 1, 0);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор2), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор3), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор4), КоличествоОтборов + 1, КоличествоОтборов);	
	
	СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ПрочиеОтборы, КоличествоОтборов);
		
КонецПроцедуры

// Функция - обработчик события "ПриИзменении" для полей быстрого отбора в форме списка.
// Параметры:
//  Форма  - форма списка
//  Отбор1 - значение отбора на форме списка (по умолчанию "").
//  Отбор2 - значение отбора на форме списка (по умолчанию "").
//  Отбор3 - значение отбора на форме списка (по умолчанию "").
//  Отбор4 - значение отбора на форме списка (по умолчанию "").
Процедура ОсновныеОтборыИзменение(Форма,Отбор1 = "", Отбор2 = "", Отбор3 = "", Отбор4 = "") Экспорт
	
	КоличествоОтборов = 0;
	
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор1), 1, 0);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор2), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор3), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор4), КоличествоОтборов + 1, КоличествоОтборов);	
	
	СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОсновныеОтборы, КоличествоОтборов);
		
КонецПроцедуры

// Процедура - обработчик смены варианта отбора на панели отборов.
//
// Параметры:
//  Форма	 - форма списка
//  Команда	 - команда формы
Процедура ВыборВариантаОтбора(Форма, Команда) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Команда.Имя = "ОтборПериод" Тогда
		ИмяСтраницы = "ЗначенияОтбораПериод";
	ИначеЕсли Команда.Имя = "ОтборТеги" Тогда
		ИмяСтраницы = "ЗначенияОтбораТеги";
	ИначеЕсли Команда.Имя = "ОтборСегменты" Тогда
		ИмяСтраницы = "ЗначенияОтбораСегменты";
	ИначеЕсли Команда.Имя = "БыстрыеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораБыстрыеОтборы";
	ИначеЕсли Команда.Имя = "ОсновныеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораОсновныеОтборы";
	ИначеЕсли Команда.Имя = "ПрочиеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораПрочиеОтборы";
	Иначе
		Возврат;
	КонецЕсли;
	
	СтраницаКОтображению = Элементы.Найти(ИмяСтраницы);
	Если СтраницаКОтображению = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельЗначенийОтбора.Видимость И Элементы.ПанельЗначенийОтбора.ТекущаяСтраница = СтраницаКОтображению Тогда
		Элементы.ПанельЗначенийОтбора.Видимость = Ложь;
		Элементы[Команда.Имя].ЦветФона = Новый Цвет;
	Иначе
		Элементы.ПанельЗначенийОтбора.Видимость = Истина;
		Элементы.ПанельЗначенийОтбора.ТекущаяСтраница = СтраницаКОтображению;
		Если Элементы.Найти("ОтборПериод") <> Неопределено Тогда
			Элементы.ОтборПериод.ЦветФона = Новый Цвет;
		КонецЕсли;
		Если Элементы.Найти("ОтборТеги") <> Неопределено Тогда
			Элементы.ОтборТеги.ЦветФона = Новый Цвет;
		КонецЕсли;
		Если Элементы.Найти("БыстрыеОтборы") <> Неопределено Тогда
			Элементы.БыстрыеОтборы.ЦветФона = Новый Цвет;
		КонецЕсли;
		Если Элементы.Найти("ОсновныеОтборы") <> Неопределено Тогда
			Элементы.ОсновныеОтборы.ЦветФона = Новый Цвет;
		КонецЕсли;
		Если Элементы.Найти("ПрочиеОтборы") <> Неопределено Тогда
			Элементы.ПрочиеОтборы.ЦветФона = Новый Цвет;
		КонецЕсли;

		//Элементы[Команда.Имя].ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоЗначенияОтбора");
		Элементы[Команда.Имя].ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
		СтраницаКОтображению.Видимость = Истина;
		Для каждого СтраницаЗначенийОтбора из Элементы.ПанельЗначенийОтбора.ПодчиненныеЭлементы Цикл
			Если СтраницаЗначенийОтбора <> СтраницаКОтображению Тогда
				СтраницаЗначенийОтбора.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процеура - помещает тег в табличную часть объекта.
//
// Параметры:
//  Форма	 - форма объекта
Процедура ПоместитьТегВТабличнуюЧасть(Форма)
	
	Если НЕ ЗначениеЗаполнено(Форма.Тег) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.CRM_Теги.НайтиСтроки(Новый Структура("Тег", Форма.Тег)).Количество() = 0 Тогда
		
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
		Форма.Модифицированность = Истина;
		
		НоваяСтрока = Объект.CRM_Теги.Добавить();
		НоваяСтрока.Тег = Форма.Тег;
		
		Форма.Подключаемый_ОбновитьОблакоТегов();
		
	КонецЕсли;
	
	Форма.Тег = Неопределено;
	
КонецПроцедуры

// Процедура - формирует заголовок вариана отбора с учётом количества уствновленных отборов.
// 
// Параметры:
//  ЭлементВариантОтбора - элемент формы, в котором должен быть установлен заголовок.
//  УстановленоОтборов   - количество установленных отборов.
Процедура СформироватьЗаголовокВариантаОтбора(ЭлементВариантОтбора, УстановленоОтборов) Экспорт
	
	ПозицияНачало = Найти(ЭлементВариантОтбора.Заголовок, " (");
	Если ПозицияНачало <> 0 Тогда
		ЭлементВариантОтбора.Заголовок = Лев(ЭлементВариантОтбора.Заголовок, ПозицияНачало-1);
	КонецЕсли;
	
	Если УстановленоОтборов <> 0 Тогда
		ЭлементВариантОтбора.Заголовок = ЭлементВариантОтбора.Заголовок + " (" + УстановленоОтборов + ")";
	КонецЕсли;
	
КонецПроцедуры

Функция КоличествоЗаполненныхЭлементовВГруппе(Форма, ГруппаФормы) Экспорт
	
	Количество = 0;
	
	Для каждого ЭлементГруппы из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда
			Количество = Количество + КоличествоЗаполненныхЭлементовВГруппе(Форма, ЭлементГруппы);
		ИначеЕсли ТипЗнч(ЭлементГруппы) = Тип("ПолеФормы") Тогда
			Попытка
				Если ЗначениеЗаполнено(Форма[ЭлементГруппы.Имя]) Тогда
					Если ТипЗнч(Форма[ЭлементГруппы.Имя]) = Тип("Булево") Тогда
						Если Форма[ЭлементГруппы.Имя] Тогда
							Количество = Количество + 1;
						КонецЕсли;
					Иначе
						Количество = Количество + 1;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Попытка
					Если ЗначениеЗаполнено(ЭлементГруппы.ТекстРедактирования) Тогда
						Количество = Количество + 1;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

#КонецОбласти

#Область РаботаСПанельюОтборовВОбработках

// Процедура - обработчик смены варианта отбора на панели отборов.
//
// Параметры:
//  Форма	 - форма списка
//  Команда	 - команда формы
Процедура ВыборВариантаОтбораДанных(ГруппаЭлементовОтбора, Элемент, СтраницаКОтображению) Экспорт
	
	ПанельЗначенийОтбора = СтраницаКОтображению.Родитель;
	Если ПанельЗначенийОтбора.Видимость И ПанельЗначенийОтбора.ТекущаяСтраница = СтраницаКОтображению Тогда
		ПанельЗначенийОтбора.Видимость = Ложь;
		Элемент.ЦветФона = Новый Цвет;
	Иначе
		ПанельЗначенийОтбора.Видимость = Истина;
		ПанельЗначенийОтбора.ТекущаяСтраница = СтраницаКОтображению;
		Для каждого ТекЭлемент из ГруппаЭлементовОтбора.ПодчиненныеЭлементы Цикл
			ТекЭлемент.ЦветФона = Новый Цвет;
		КонецЦикла;

		Элемент.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
		СтраницаКОтображению.Видимость = Истина;
		Для каждого СтраницаЗначенийОтбора из ПанельЗначенийОтбора.ПодчиненныеЭлементы Цикл
			Если СтраницаЗначенийОтбора <> СтраницаКОтображению Тогда
				СтраницаЗначенийОтбора.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция - обработчик события "ПриИзменении" для полей быстрого отбора в форме списка.
// Параметры:
//  Форма  - форма списка
//  Отбор1 - значение отбора на форме списка (по умолчанию "").
//  Отбор2 - значение отбора на форме списка (по умолчанию "").
//  Отбор3 - значение отбора на форме списка (по умолчанию "").
//  Отбор4 - значение отбора на форме списка (по умолчанию "").
Процедура ЗначенияОтборовИзменение(Форма, ЭлементВариантаОтбора, СтраницаЗначенийОтбора) Экспорт
	
	КоличествоОтборов = КоличествоЗаполненныхЭлементовВГруппе(Форма, СтраницаЗначенийОтбора);
	СформироватьЗаголовокВариантаОтбора(ЭлементВариантаОтбора, КоличествоОтборов);
		
КонецПроцедуры

// Функция - обработчик события "Нажатие" для предопределенных вариантов периодов или события "ПриИзменении" для
//           произвольного периода.
//
// Параметры:
//  Форма			 - форма списка
//  ИмяСписка		 - строка - имя динамического списка формы для которого устанавливается отбор.
//  ВариантПериода	 - строка - принимает значения: "ПроизвольныйПериод", "Сегодня", "3 дня", "Неделя", "Месяц".
//  Элемент			 - элемент формы.
// Возвращаемое значение:
//  Булево - включен или выключен отбор по данному элементу.
Функция ОтборПоПеридуНажатие(СписокПериодов, ВариантПериода, ЭлементВариантаОтбора, ГруппаЗначенияОтбораПериод, Элемент = Неопределено) Экспорт
	
	Для каждого ТекПериод из СписокПериодов Цикл
		Если ТекПериод.Представление = ВариантПериода Тогда
			Период = ТекПериод;
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Если ТекПериод.Пометка Тогда
				Если ТекПериод.Представление = "ПроизвольныйПериод" Тогда
					ТекПериод.Значение = Новый СтандартныйПериод;
				КонецЕсли;
				ТекПериод.Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементФормы из ГруппаЗначенияОтбораПериод.ПодчиненныеЭлементы Цикл
		Попытка
			ЭлементФормы.ЦветФона = Новый Цвет;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		Элемент = ГруппаЗначенияОтбораПериод.ПодчиненныеЭлементы.Найти("Отбор"+ВариантПериода);
	КонецЕсли;
	Если Элемент <> Неопределено Тогда
		Если Период.Пометка Тогда
			Элемент.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
		Иначе
			Элемент.ЦветФона = Новый Цвет;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьЗаголовокВариантаОтбора(ЭлементВариантаОтбора, ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокПериодов).Количество());
	
	Возврат Период.Пометка;
	
КонецФункции

Процедура УстановитьОтборПоПериоду(Форма, ИмяСписка, СписокПериодов, ВариантПериода, ПолеДата = "", ВключатьПросроченные = Ложь) Экспорт
	
	Для каждого ТекПериод из СписокПериодов Цикл
		Если ТекПериод.Представление = ВариантПериода Тогда
			Период = ТекПериод;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяСписка) Тогда
		ГруппаОтбораПериод = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Форма[ИмяСписка].Отбор.Элементы, "ОтборПериод", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаОтбораПериод.Использование = Период.Пометка;
		Если ГруппаОтбораПериод.Элементы.Количество() = 0 Тогда
			Если ПолеДата = "" Тогда
				Если Форма[ИмяСписка].Отбор.ДоступныеПоляОтбора.Элементы.Найти("Дата") = Неопределено Тогда
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
					ЭлементОтбора.Использование = Истина;
				Иначе
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
					ЭлементОтбора.Использование = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ВключатьПросроченные Тогда
					ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеДата);
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаНачала;
					ЭлементОтбора.Использование = Истина;
				КонецЕсли;
				ЭлементОтбора = ГруппаОтбораПериод.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеДата);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ЭлементОтбора.ПравоеЗначение = Период.Значение.ДатаОкончания;
				ЭлементОтбора.Использование = Истина;
			КонецЕсли;
		ИначеЕсли ГруппаОтбораПериод.Элементы.Количество() = 2 Тогда
			ГруппаОтбораПериод.Элементы[0].ПравоеЗначение = Период.Значение.ДатаНачала;
			ГруппаОтбораПериод.Элементы[1].ПравоеЗначение = Период.Значение.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция - обработчик события "Нажатие" кнопки отчистки отборов по периоду.
//
// Параметры:
//  Форма			 - форма списка
//  ИмяСписка		 - строка - имя динамического списка формы для которого устанавливается отбор.
// Возвращаемое значение:
//  Булево - включен или выключен отбор по данному элементу.
Процедура ОчиститьОтборПоПеридуНажатие(СписокПериодов, ЭлементВариантаОтбора, СтраницаЗначенийОтбора) Экспорт
	
	// Снимем все отборы по периоду.
	Для Каждого ЭлементСпискаПериодов из СписокПериодов Цикл
		ЭлементСпискаПериодов.Пометка = Ложь;
		Если ЭлементСпискаПериодов.Представление = "ПроизвольныйПериод" Тогда
			ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементФормы Из СтраницаЗначенийОтбора.ПодчиненныеЭлементы Цикл
		Попытка 
			ЭлементФормы.ЦветФона = Новый Цвет;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СформироватьЗаголовокВариантаОтбора(ЭлементВариантаОтбора, ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокПериодов).Количество());
	
КонецПроцедуры

#КонецОбласти

