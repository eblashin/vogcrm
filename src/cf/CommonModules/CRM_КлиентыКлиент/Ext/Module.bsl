
// Функция отделяет часть наименования физического лица (обращение и ФИО).
//
// Параметры:
//  ИсходнаяСтрока	- Строка	- Строка наименования, у которого надо отделить часть.
//
// Возвращаемое значение:
//	Строка	- Выделенная часть наименования. 
//
Функция ВыделитьЧастьНаименованияКонтактногоЛица(ИсходнаяСтрока) Экспорт
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	Возврат ВыделенноеСлово;
КонецФункции // ВыделитьЧастьНаименованияКонтактногоЛица()

// Функция возвращает список выбора представлений физического лица исходя из его обращения и ФИО.
//
// Параметры:
//  Объект	- СправочникСсылка	- Изменяемый объект. 
//
// Возвращаемое значение:
//	Массив	- Массив представлений физического лица.
//
Функция ПолучитьСписокПредставленийФизЛица(Объект) Экспорт
	СписокВыбора = Новый Массив;
	Если НЕ ПустаяСтрока(Объект.CRM_Фамилия) И НЕ ПустаяСтрока(Объект.CRM_Имя) Тогда
		СписокВыбора.Добавить("ИП "+СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Объект.CRM_Имя)+?(ЗначениеЗаполнено(Объект.CRM_Отчество), " "+Объект.CRM_Отчество, ""));
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Объект.CRM_Имя)));
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Имя) + " " + СокрЛП(Объект.CRM_Фамилия)));
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Сред(Объект.CRM_Имя, 1, 1)) + "."));
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Объект.CRM_Фамилия) И НЕ ПустаяСтрока(Объект.CRM_Имя)
		 И НЕ ПустаяСтрока(Объект.CRM_Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Объект.CRM_Имя) + " " 
			+ СокрЛП(Объект.CRM_Отчество)));
		СписокВыбора.Добавить((СокрЛП(Объект.CRM_Фамилия) + " " + СокрЛП(Сред(Объект.CRM_Имя, 1, 1)) 
			+ "." + СокрЛП(Сред(Объект.CRM_Отчество,1,1)) + "."));
	КонецЕсли; 
	Возврат СписокВыбора;
КонецФункции // ПолучитьСписокПредставленийФизЛица()

// Функция возвращает список выбора представлений физического лица исходя из его обращения и ФИО.
//
// Параметры:
//  Объект	- СправочникСсылка	- Изменяемый объект. 
//
// Возвращаемое значение:
//	Массив	- Массив представлений физического лица.
//
Функция ПолучитьСписокПредставленийФизЛицаИзФИО(Фамилия, Имя, Отчество) Экспорт
	СписокВыбора = Новый Массив;
	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) Тогда
		СписокВыбора.Добавить("ИП "+СокрЛП(Фамилия) + " " + СокрЛП(Имя)+?(ЗначениеЗаполнено(Отчество), " "+Отчество, ""));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя)));
		СписокВыбора.Добавить((СокрЛП(Имя) + " " + СокрЛП(Фамилия)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя, 1, 1)) + "."));
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя)
		 И НЕ ПустаяСтрока(Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " 
			+ СокрЛП(Отчество)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя, 1, 1)) 
			+ "." + СокрЛП(Сред(Отчество,1,1)) + "."));
	КонецЕсли; 
	Возврат СписокВыбора;
КонецФункции // ПолучитьСписокПредставленийФизЛица()

// Функция определяет пол человека по его имени.
//
// Параметры:
//  Имя	– Строка	– Имя, по последней букве которого пытаемся определить пол.
//
// Возвращаемое значение:
//  ПеречислениеСсылка	– Пол человека, определенный по его имени.
//
Функция ОпределитьПол(Имя) Экспорт
	СписокМужскихИсключений = Новый СписокЗначений;
	СписокМужскихИсключений.Добавить("ИЛЬЯ");
	СписокМужскихИсключений.Добавить("НИКОЛА");
	СписокМужскихИсключений.Добавить("САВВА");
	СписокМужскихИсключений.Добавить("КУЗЬМА");
	СписокМужскихИсключений.Добавить("НИКИТА");
	СписокМужскихИсключений.Добавить("ДАНИЛА");
	СписокМужскихИсключений.Добавить("ЕМЕЛЯ");
	СписокЖенскихИсключений = Новый СписокЗначений;
	СписокЖенскихИсключений.Добавить("ЛЮБОВЬ");
	Окончание = ВРег(Прав(СокрП(Имя),1));
	Если (Найти("АЯ",Окончание) И СписокМужскихИсключений.НайтиПоЗначению(ВРег(Имя)) = Неопределено) Или
		СписокЖенскихИсключений.НайтиПоЗначению(ВРег(Имя)) <> Неопределено Тогда // Вероятно женщина
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	Иначе
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	КонецЕсли; 
	Возврат Пол;
КонецФункции // ОпределитьПол()

// Процедура заполняет КПП на базе ИНН.
//
// Параметры:
//  ИНН  - Строка - ИНН на основании которого будет сгенерирован КПП.
//  КПП  - Строка - КПП, текущий КПП контрагента.
//  БезусловноеЗаполнениеКПП  - Булево - если Истина, то не будет запрашиваться подтверждение пользователя при смене
//                                       КПП.
//
Процедура ЗаполнитьКППпоИНН(Знач ИНН, КПП, БезусловноеЗаполнениеКПП = Истина, УникальныйИдентификаторФормы) Экспорт
	
	// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
	// первые 4 цифры ИНН + 01001, например:
	// ИНН 7712563009
	// КПП 771201001
		
	// Если не указано ИНН или заполнено КПП то прерываем выполнение операции.
	Если (СтрДлина(ИНН) < 4) Тогда
		Возврат;
	КонецЕсли;
	
	ПревыеСимволыИНН = Лев(ИНН, 4);
	НовоеЗначениеКПП = ПревыеСимволыИНН + "01001";
	
	// Если новое значение КПП и старое значение КПП совпадают, то прерываем выполнение операции.
	Если (НовоеЗначениеКПП = КПП) Тогда
		Возврат;
	КонецЕсли;
	
	// Если безусловно нужно поменять - меняем.
	Если БезусловноеЗаполнениеКПП ИЛИ НЕ ЗначениеЗаполнено(КПП) Тогда
		КПП = НовоеЗначениеКПП;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменить КПП  на ""%1""?'"), НовоеЗначениеКПП);
	// +ЕИС
	//ОтветНужноМенятьКПП = (Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да);
	//Если ОтветНужноМенятьКПП Тогда
	//	КПП = НовоеЗначениеКПП;
	//КонецЕсли;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовоеЗначениеКПП", НовоеЗначениеКПП);
	Дополнительно.Вставить("КПП", КПП);
	Дополнительно.Вставить("УникальныйИндентфикаторФормы", УникальныйИдентификаторФормы);
	
	ОповещениеОбработкиДиалога = Новый ОписаниеОповещения("ОбработкаОповещенияВопросаКПП", ЭтотОбъект, Дополнительно);
	ПоказатьВопрос(ОповещениеОбработкиДиалога, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	// -ЕИС
КонецПроцедуры

// +CRM
Процедура ОбработкаОповещенияВопросаКПП(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		КПП = Дополнительно.НовоеЗначениеКПП;
	Иначе
		КПП = Дополнительно.КПП;
	КонецЕсли;
	Оповестить("Изменение КПП", КПП , Дополнительно.УникальныйИндентфикаторФормы);
КонецПроцедуры

// Процедура открывает форму быстрого ввода партнера
//
Процедура ОткрытьФормуБыстрогоВводаПартнера(Знач ФормаВладелец = Неопределено, Знач ПараметрыФормы = Неопределено) Экспорт
	
	ИмяФормыБыстрогоВводаПартнера = "";
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы", "CRM_Модуль_ФормаБыстрогоВвода") Тогда
		
		ИмяФормыБыстрогоВводаПартнера = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаБыстрогоВвода";
		
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы", "CRM_ФормаБыстрогоВвода") Тогда
		
		ИмяФормыБыстрогоВводаПартнера = "Справочник.Партнеры.Форма.CRM_ФормаБыстрогоВвода";
		
	КонецЕсли;	
		
	Если НЕ ПустаяСтрока(ИмяФормыБыстрогоВводаПартнера) Тогда
	
		ФормаБыстрогоВводаПартнера = ПолучитьФорму(ИмяФормыБыстрогоВводаПартнера, ПараметрыФормы, ФормаВладелец);
		//+вог
		//Если ПараметрыФормы.Свойство("Наименование") Тогда
		//	Если Не ЗначениеЗаполнено(ФормаБыстрогоВводаПартнера.Наименование) Тогда
		//		ФормаБыстрогоВводаПартнера.Наименование = ПараметрыФормы.Наименование;				
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если ПараметрыФормы.Свойство("КонтактноеЛицо") Тогда
		//	ФИОКЛ = ПараметрыФормы.КонтактноеЛицо;
		//	ФамилияКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
		//	ИмяКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
		//	ОтчествоКЛ = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
		//	Если ЗначениеЗаполнено(ФамилияКЛ) Тогда
		//		ФормаБыстрогоВводаПартнера.ФамилияКонтактногоЛица = ФамилияКЛ;
		//	КонецЕсли;
		//	Если ЗначениеЗаполнено(ИмяКЛ) Тогда
		//		ФормаБыстрогоВводаПартнера.ИмяКонтактногоЛица = ИмяКЛ;
		//	КонецЕсли;
		//	Если ЗначениеЗаполнено(ОтчествоКЛ) Тогда
		//		ФормаБыстрогоВводаПартнера.ОтчествоКонтактногоЛица = ОтчествоКЛ;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если ПараметрыФормы.Свойство("Наименование") Тогда
			Если Не ЗначениеЗаполнено(ФормаБыстрогоВводаПартнера.ПартнерНаименование) Тогда
				ФормаБыстрогоВводаПартнера.ПартнерНаименование = ПараметрыФормы.Наименование;	
				
			КонецЕсли;
			
			Если ПараметрыФормы.Свойство("КонтактноеЛицо") Тогда
				ФИО      = ПараметрыФормы.КонтактноеЛицо;
				
				Фамилия  = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				Имя      = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				Если ЗначениеЗаполнено(Фамилия) Тогда
					ФормаБыстрогоВводаПартнера.КонтактноеЛицоФамилия = Фамилия;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Имя) Тогда
					ФормаБыстрогоВводаПартнера.КонтактноеЛицоИмя = Имя;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Отчество) Тогда
					ФормаБыстрогоВводаПартнера.ОтчествоКонтактногоЛица = Отчество;
				КонецЕсли;
				
				ФормаБыстрогоВводаПартнера.ИспользоватьКонтактноеЛицо = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		//-вог
		
		ФормаБыстрогоВводаПартнера.Открыть();		
	
	КонецЕсли; 
	

КонецПроцедуры
 
// -CRM
