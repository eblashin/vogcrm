
Функция ВернутьОбработкуДействия(Триггер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = Триггер.Действие.ПутьКОбработке;
	
	Обработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Истина);
	Возврат Обработка;
КонецФункции	

Функция ВернутьОбработкуУсловия(Триггер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = Триггер.УсловиеСрабатывания.ПутьКОбработке;
	
	Обработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Истина);
	Возврат Обработка;
КонецФункции

Процедура яCRM_ТригерыДокументыПриЗаписи(Источник, Отказ) Экспорт
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Метаданные.Документы[Источник.Метаданные().Имя]);
 	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ Тищенко В.В. 11.04.2019
	 Если Источник.ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	// -- Тищенко В.В. 
	
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Действует
	|	И CRM_Триггеры.УсловиеСрабатывания.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПриЗаписи)
	|	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	|	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Документ""";
	Запрос.УстановитьПараметр("ОбъектОбработки", Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник);
		Если ПроверкаПрошла Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник);
				Если ТриггерВыполнен И ВыборкаТриггеров.Ссылка.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, "Действие не выполнено.");		
				КонецЕсли;
			Исключение
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура яCRM_ТригерыСправочникиПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Метаданные.Справочники[Источник.Метаданные().Имя]);
 	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ Тищенко В.В. 11.04.2019
	Если Источник.ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	// -- Тищенко В.В. 
	
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Действует
	|	И CRM_Триггеры.УсловиеСрабатывания.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПриЗаписи)
	|	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	|	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Справочник""";
	Запрос.УстановитьПараметр("ОбъектОбработки", Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник);
		Если ПроверкаПрошла Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник);
				Если ТриггерВыполнен И ВыборкаТриггеров.Ссылка.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, "Действие не выполнено.");			
				КонецЕсли;
			Исключение
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура яCRM_ТригерыБизнесПроцессыПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Метаданные.БизнесПроцессы[Источник.Метаданные().Имя]);
 	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ Тищенко В.В. 11.04.2019
	Если Источник.ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	// -- Тищенко В.В. 
	
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Действует
	|	И CRM_Триггеры.УсловиеСрабатывания.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПриЗаписи)
	|	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	|	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Бизнес-процесс""";
	Запрос.УстановитьПараметр("ОбъектОбработки", Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник);
		Если ПроверкаПрошла Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник);
				Если ТриггерВыполнен И ВыборкаТриггеров.Ссылка.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, "Действие не выполнено.");			
				КонецЕсли;
			Исключение
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

Процедура яCRM_ТригерыЗадачиПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Метаданные.Задачи[Источник.Метаданные().Имя]);
 	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ Тищенко В.В. 11.04.2019
	Если Источник.ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	// -- Тищенко В.В. 
	
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Действует
	|	И CRM_Триггеры.УсловиеСрабатывания.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПриЗаписи)
	|	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	|	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Задача""";
	Запрос.УстановитьПараметр("ОбъектОбработки", Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник);
		Если ПроверкаПрошла Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник);
				Если ТриггерВыполнен И ВыборкаТриггеров.Ссылка.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, "Действие не выполнено.");			
				КонецЕсли;
			Исключение
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

Процедура яCRM_ТригерыДокументыПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Метаданные.Документы[Источник.Метаданные().Имя]);
 	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ Тищенко В.В. 11.04.2019
	Если Источник.ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	// -- Тищенко В.В. 
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.Ссылка.Пустая());
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Действует
	|	И CRM_Триггеры.УсловиеСрабатывания.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПередЗаписью)
	|	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	|	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Документ""";
	Запрос.УстановитьПараметр("ОбъектОбработки", Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник);
		Если ПроверкаПрошла Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник);
				Если ТриггерВыполнен И ВыборкаТриггеров.Ссылка.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, "Действие не выполнено.");			
				КонецЕсли;
			Исключение
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура яCRM_ТригерыСправочникиПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Метаданные.Справочники[Источник.Метаданные().Имя]);
 	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ Тищенко В.В. 11.04.2019
	Если Источник.ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	// -- Тищенко В.В. 
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.Ссылка.Пустая());
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Действует
	|	И CRM_Триггеры.УсловиеСрабатывания.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПередЗаписью)
	|	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	|	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Справочник""";
	Запрос.УстановитьПараметр("ОбъектОбработки", Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник);
		Если ПроверкаПрошла Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник);
				Если ТриггерВыполнен И ВыборкаТриггеров.Ссылка.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, "Действие не выполнено.");			
				КонецЕсли;
			Исключение
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура яCRM_ТригерыБизнесПроцессыПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Метаданные.БизнесПроцессы[Источник.Метаданные().Имя]);
 	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ Тищенко В.В. 11.04.2019
	Если Источник.ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	// -- Тищенко В.В. 
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.Ссылка.Пустая());
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Действует
	|	И CRM_Триггеры.УсловиеСрабатывания.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПередЗаписью)
	|	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	|	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Бизнес-процесс""";
	Запрос.УстановитьПараметр("ОбъектОбработки", Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник);
		Если ПроверкаПрошла Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник);
				Если ТриггерВыполнен И ВыборкаТриггеров.Ссылка.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, "Действие не выполнено.");			
				КонецЕсли;
			Исключение
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

Процедура яCRM_ТригерыЗадачиПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.Состав.Найти(Метаданные.Задачи[Источник.Метаданные().Имя]);
 	Если  ЭлементСостава = Неопределено Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда Возврат конецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ Тищенко В.В. 11.04.2019
	Если Источник.ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	// -- Тищенко В.В. 
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.Ссылка.Пустая());
	Если Источник.ДополнительныеСвойства.Свойство("НеЗапускатьТриггер") Тогда Возврат КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Действует
	|	И CRM_Триггеры.УсловиеСрабатывания.Событие = ЗНАЧЕНИЕ(Перечисление.CRM_СобытияТриггеров.ПередЗаписью)
	|	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	|	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Задача""";
	Запрос.УстановитьПараметр("ОбъектОбработки", Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТриггеров.Следующий() Цикл
		Если НЕ Справочники.CRM_Триггеры.ПроверитьПовторноеИспользование(ВыборкаТриггеров.Ссылка, Источник) Тогда Продолжить конецЕсли;
		ПроверкаПрошла = Справочники.CRM_Триггеры.ПроверитьУсловияТриггера(ВыборкаТриггеров.Ссылка, Источник);
		Если ПроверкаПрошла Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьТриггер(ВыборкаТриггеров.Ссылка, Источник);
				Если ТриггерВыполнен И ВыборкаТриггеров.Ссылка.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(ВыборкаТриггеров.Ссылка, Источник);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, "Действие не выполнено.");			
				КонецЕсли;
			Исключение
				Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(ВыборкаТриггеров.Ссылка, Источник, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры


Функция ПолучитьОбработкуДействийДляКлиента(Источник, Событие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Триггеры.Ссылка
	               |ИЗ
	               |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	               |ГДЕ
	               |	CRM_Триггеры.Действует
	               |	И CRM_Триггеры.УсловиеСрабатывания.Событие = &Событие
	               |	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	               |	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Документ""
	               |	И НЕ CRM_Триггеры.Действие = ЗНАЧЕНИЕ(Справочник.CRM_ДействияТриггеров.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Событие"			, Событие);
	Запрос.УстановитьПараметр("ОбъектОбработки"	, Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТриггеров.Следующий() Цикл
		
		НастройкиДействий = ВыборкаТриггеров.Ссылка.НастройкиДействий.Получить();
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ВыборкаТриггеров.Ссылка.Действие.ОбработкаДействия.Получить(), Новый УникальныйИдентификатор());
		
		Возврат Новый Структура("ОбработкаДействий,НастройкиДействий",ВнешниеОбработки.Подключить(АдресХранилища),НастройкиДействий);;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТриггер(Источник, Событие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Триггеры.Ссылка
	               |ИЗ
	               |	Справочник.CRM_Триггеры КАК CRM_Триггеры
	               |ГДЕ
	               |	CRM_Триггеры.Действует
	               |	И CRM_Триггеры.УсловиеСрабатывания.Событие = &Событие
	               |	И CRM_Триггеры.УсловиеСрабатывания.ОбъектОбработки = &ОбъектОбработки
	               |	И CRM_Триггеры.УсловиеСрабатывания.ТипОбъекта = ""Документ""
	               |	И НЕ CRM_Триггеры.Действие = ЗНАЧЕНИЕ(Справочник.CRM_ДействияТриггеров.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Событие"			, Событие);
	Запрос.УстановитьПараметр("ОбъектОбработки"	, Источник.Метаданные().Имя);
	ВыборкаТриггеров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТриггеров.Следующий() Цикл
		
		Возврат ВыборкаТриггеров.Ссылка;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПриСозданииНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = CRM_ТригерыСервер.ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		Попытка
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение ИЗ НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки ИЗ КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки ИЗ СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					Иначе
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
			
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка);
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПередЗаписьюНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = CRM_ТригерыСервер.ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		Попытка
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение ИЗ НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки ИЗ КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки ИЗ СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					Иначе
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка);
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Триггер = ПолучитьТриггер(Форма.Объект.Ссылка, Перечисления.CRM_СобытияТриггеров.ПослеЗаписиНаСервере);
	
	Если НЕ Триггер = Неопределено Тогда
		Если Триггер.Действие.РежимОтладки Тогда
			Обработка = CRM_ТригерыСервер.ВернутьОбработкуДействия(Триггер);
		Иначе	
			Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
		КонецЕсли;
		Попытка
			НастройкиДействий = Триггер.НастройкиДействий.Получить();
			Если ТипЗнч(НастройкиДействий) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение ИЗ НастройкиДействий Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если НЕ Обработка.Метаданные().ТабличныеЧасти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							Обработка[КлючИЗначение.Ключ].Очистить();
							Для Каждого СтруктураСтроки ИЗ КлючИЗначение.Значение Цикл
								НоваяСтрока = Обработка[КлючИЗначение.Ключ].Добавить();
								Для Каждого КлючИЗначениеСтроки ИЗ СтруктураСтроки Цикл
									Если НЕ Обработка.Метаданные().ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты.Найти(КлючИЗначениеСтроки.Ключ) = Неопределено Тогда
										
										НоваяСтрока[КлючИЗначениеСтроки.Ключ] = КлючИЗначениеСтроки.Значение;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					Иначе
						Обработка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Обработка.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
			Если Триггер.ВключатьВЛоги Тогда
				Справочники.CRM_Триггеры.ЗаписатьОбработанныйОбъектТриггера(Триггер, Форма.Объект.Ссылка);
			КонецЕсли;
		Исключение
			Справочники.CRM_Триггеры.ЗаписатьОшибкуТриггера(Триггер, Форма.Объект.Ссылка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


#Область ПериодическиеТриггеры

Процедура ВыполнениеПериодическогоТриггера(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры.Свойство("УникальныйИдентификаторЗадания") Тогда
		Триггер = Справочники.CRM_Триггеры.НайтиПоРеквизиту("УникальныйИдентификаторЗадания", Параметры.УникальныйИдентификаторЗадания);
		Если ЗначениеЗаполнено(Триггер) Тогда
			Попытка
				ТриггерВыполнен = Справочники.CRM_Триггеры.ВыполнитьПериодическийТриггер(Триггер);
				Если ТриггерВыполнен И Триггер.ВключатьВЛоги Тогда
					Справочники.CRM_Триггеры.ЗаписатьВыполнениеПериодическогоТриггера(Триггер);
				ИначеЕсли НЕ ТриггерВыполнен Тогда
					Справочники.CRM_Триггеры.ЗаписатьОшибкуПериодическогоТриггера(Триггер, "Действие не выполнено.");			
				КонецЕсли;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Справочники.CRM_Триггеры.ЗаписатьОшибкуПериодическогоТриггера(Триггер, ОписаниеОшибки());
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти