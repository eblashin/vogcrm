
//////////////////////////////////////////////////////////////////////////////////////////////////////
// ПОДПИСКИ НА СОБЫТИЯ

// Процедура - обработчик подписки на событие "ПриЗаписи" для объектов, отображаемых в календаре.
//
// Параметры:
//	Источник	- Ссылка	- Источник события.
//	Отказ		- Булево	- Флаг отмены.
//
Процедура ПриЗаписиОбъектаКалендаря(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим запись в региср сведений CRM_СостоянияИнтересов, если требуется
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		Если ЗначениеЗаполнено(Источник.ДокументОснование) И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			
			// Если взаимодествие новое и по интересу еще нет записей, то просто добавляем
			// новую запись
			Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
				
				НаборЗаписей = РегистрыСведений.CRM_СостоянияИнтересов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Интерес.Установить(Источник.ДокументОснование);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 0 Тогда
					
					НаборЗаписей.Отбор.Сбросить();
					
					НоваяЗапись = РегистрыСведений.CRM_СостоянияИнтересов.СоздатьМенеджерЗаписи();
					НоваяЗапись.Интерес			= Источник.ДокументОснование;
					НоваяЗапись.Взаимодействие	= Источник.Ссылка;
					НоваяЗапись.Состояние		= Источник.СостояниеИнтереса;
					НоваяЗапись.Записать();
				КонецЕсли;
			КонецЕсли;
			
			Если Источник.ДополнительныеСвойства.Свойство("ИзмененоСостояниеИнтереса") И Источник.ДополнительныеСвойства.ИзмененоСостояниеИнтереса Тогда
				
				НаборЗаписей = РегистрыСведений.CRM_СостоянияИнтересов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Интерес.Установить(Источник.ДокументОснование);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Интерес			= Источник.ДокументОснование;
				НоваяЗапись.Взаимодействие	= Источник.Ссылка;
				НоваяЗапись.Состояние		= Источник.СостояниеИнтереса;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			Если Источник.ДополнительныеСвойства.Свойство("ИнтересЗавершен") И Источник.ДополнительныеСвойства.ИнтересЗавершен Тогда
				
				НаборЗаписей = РегистрыСведений.CRM_СостоянияИнтересов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Интерес.Установить(Источник.ДокументОснование);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					ВзаимодействиеПредыдущегоСостояния	= НаборЗаписей[0].Взаимодействие;
					ПредыдущееСостояние					= НаборЗаписей[0].Состояние;
				Иначе
					ВзаимодействиеПредыдущегоСостояния	= Документы.CRM_Взаимодействие.ПустаяСсылка();
					ПредыдущееСостояние					= Справочники.CRM_СостоянияИнтересов.ПустаяСсылка();
				КонецЕсли;
				
				НаборЗаписей.Очистить();
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Интерес								= Источник.ДокументОснование;
				НоваяЗапись.Взаимодействие						= Источник.Ссылка;
				НоваяЗапись.Состояние							= Источник.СостояниеИнтереса;
				НоваяЗапись.ВзаимодействиеПредыдущегоСостояния	= ВзаимодействиеПредыдущегоСостояния;
				НоваяЗапись.ПредыдущееСостояние					= ПредыдущееСостояние;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			Если Источник.ДополнительныеСвойства.Свойство("ИнтересОтменаЗавершения") И Источник.ДополнительныеСвойства.ИнтересОтменаЗавершения Тогда
				
				НаборЗаписей = РегистрыСведений.CRM_СостоянияИнтересов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Интерес.Установить(Источник.ДокументОснование);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Интерес			= Источник.ДокументОснование;
				НоваяЗапись.Взаимодействие	= Источник.Ссылка;
				НоваяЗапись.Состояние		= Источник.СостояниеИнтереса;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		
		бОчиститьЗаписи = Ложь;
		Если Не Источник.ПометкаУдаления И ЗначениеЗаполнено(Источник.Автор) И (Источник.СтатусВзаимодействия <> Справочники.CRM_СостоянияСобытий.Отменено) Тогда
			Если 	ЗначениеЗаполнено(Источник.ПлановаяДата) Тогда

				НачалоПериода	= Источник.ПлановаяДата;
				
			Иначе
				бОчиститьЗаписи = Истина;
			КонецЕсли;
			
			Если Не бОчиститьЗаписи Тогда
				НоваяСтрока = НаборЗаписей.Добавить();
				
				НоваяСтрока.ПериодНачало		= НачалоПериода;
				Если ЗначениеЗаполнено(Источник.ПлановаяДатаЗавершение) Тогда
					НоваяСтрока.ПериодОкончание		= Источник.ПлановаяДатаЗавершение;
				ИначеЕсли НачалоПериода <> НачалоДня(НачалоПериода) Тогда
					НоваяСтрока.ПериодОкончание		= НачалоПериода+30*60;
				КонецЕсли;
				НоваяСтрока.Пользователь		= Источник.Ответственный;
				НоваяСтрока.Объект				= Источник.Ссылка;
				НоваяСтрока.Подразделение		= Источник.Подразделение;
				
				НоваяСтрока.Тема 						= Источник.Содержание;
				НоваяСтрока.ВходящееИсходящееСобытие 	= Источник.ВидВзаимодействия.Направление;
				НоваяСтрока.ВидСобытия					= Источник.ВидВзаимодействия.ВидСобытия;

				НоваяСтрока.ВидВзаимодействия			= Источник.ВидВзаимодействия;
				НоваяСтрока.ВидДела						= Источник.ВидВзаимодействия.ВидДела;
				НоваяСтрока.НаВесьДень					= Источник.НаВесьДень;
				НоваяСтрока.СостояниеСобытия			= Источник.СтатусВзаимодействия;
				
				Если Источник.СтатусВзаимодействия 		= Справочники.CRM_СостоянияСобытий.Завершено Тогда
					НоваяСтрока.Завершено				= Истина;
				Иначе
					НоваяСтрока.Завершено 				= Ложь;
				КонецЕсли;
				
				НоваяСтрока.Партнер				= ?(ЗначениеЗаполнено(Источник.Партнер), Источник.Партнер, Источник.ПотенциальныйКлиент);
				НоваяСтрока.Балл				= Источник.Баллы;
				
				Если (ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") И Источник.ДокументОснование.Избранный) 
					ИЛИ (ТипЗнч(Источник.ДокументОснование) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Источник.ДокументОснование.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая) Тогда
					НоваяСтрока.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			бОчиститьЗаписи = Истина;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Или бОчиститьЗаписи Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Мероприятие") Тогда
			
		
		//НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		//
		//бОчиститьЗаписи = Ложь;
		//Если Источник.ПометкаУдаления Тогда
		//	бОчиститьЗаписи = Истина;
		//КонецЕсли;
		//
		//Если НаборЗаписей.Количество() > 0 Или бОчиститьЗаписи Тогда
		//	НаборЗаписей.Записать();
		//КонецЕсли;
		
		//+GOOGLE
		ОбновлятьСобытиеВGoogle = (ПолучитьФункциональнуюОпцию("CRM_СинхронизироватьКалендарьСКалендаремGoogle"));
		АвторСобытия = Неопределено;
		Если ТипЗнч(Источник.ОрганизаторGApi) = Тип("Строка") Тогда
			ТаблицаОрганизатор =    CRM_GoogleИнтеграция.НайтиКонтакт(Источник.ОрганизаторGApi); 
			Если ТаблицаОрганизатор.Количество()<>0 Тогда
				Если ТипЗнч(ТаблицаОрганизатор[0].Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
					АвторСобытия = ТаблицаОрганизатор[0].Контакт;
				Иначе
					АвторСобытия = Источник.ОрганизаторGApi;	
				КонецЕсли;
			Иначе 
				АвторСобытия = Источник.ОрганизаторGApi;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Источник.ОрганизаторGApi) = Тип("СправочникСсылка.Пользователи") Тогда
			АвторСобытия = Источник.ОрганизаторGApi;	
		КонецЕсли;
		//-GOOGLE
		
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить("Пользователь");
		
		Если ЗначениеЗаполнено(Источник.Ответственный) Тогда
			НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
			НоваяСтрокаТаблицыПользователей.Пользователь = Источник.Ответственный;
		КонецЕсли;
		
		//START Кайдашов 05/07/19 436
		Если Источник.Состояние <> Справочники.CRM_СостоянияСобытий.ВСтадииПодготовки тогда
			Для Каждого СтрокаТаблицыРаботников Из Источник.СвоиЛица Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыРаботников.Лицо) Или ТипЗнч(СтрокаТаблицыРаботников.Лицо) <> Тип("СправочникСсылка.Пользователи") Тогда
					Продолжить;
				КонецЕсли; 
				
				НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
				НоваяСтрокаТаблицыПользователей.Пользователь = СтрокаТаблицыРаботников.Лицо;
			КонецЦикла;
		КонецЕсли;
		//END Кайдашов
		
		ТаблицаПользователей.Свернуть("Пользователь");
		
		СписокПользователей = Новый СписокЗначений;
		
		СписокПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
		
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		
		//+GOOGLE
		ИдСобытия = "";
		НомерПоследовательности = 0;
		Источник.ДополнительныеСвойства.Свойство("ИдСобытияGApi",ИдСобытия);
		Если ОбновлятьСобытиеВGoogle И НЕ Источник.ДополнительныеСвойства.Свойство("ИдСобытияGApi",ИдСобытия)Тогда
			// найдем ИД события
			НаборСохраненныхЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
			НаборСохраненныхЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
			НаборСохраненныхЗаписей.Прочитать();
			Если НЕ НаборСохраненныхЗаписей.Количество()= 0 Тогда
				ИдСобытия = НаборСохраненныхЗаписей[0].ИдСобытияGApi;
				НомерПоследовательности = НаборСохраненныхЗаписей[0].НомерПоследовательностиGApi;
			КонецЕсли;
		КонецЕсли;
		//-GOOGLE
		
		Если Не Источник.ПометкаУдаления ИЛИ Источник.ДополнительныеСвойства.Свойство("ЗагруженоИзGoogle") ИЛИ ОбновлятьСобытиеВGoogle Тогда
			// Обновим метку времени,чтобы потом удалить событие из гугл-календаря
			Если СписокПользователей.Количество() = 0 Тогда
				//очистим в фоновом задании
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.ПериодНачало				= Источник.Дата;
				НоваяСтрока.ПериодОкончание				= Источник.ОкончаниеМероприятия;
				НоваяСтрока.Объект						= Источник.Ссылка;
				// +GOOGLE
				Если ТипЗнч(АвторСобытия) = Тип("Строка") ИЛИ (ТипЗнч(АвторСобытия) = Тип("СправочникСсылка.Пользователи") И Источник.Автор <> АвторСобытия)Тогда
					НоваяСтрока.ОрганизаторGApi = АвторСобытия;	
				Иначе
					НоваяСтрока.ОрганизаторGApi			= Источник.Ответственный;
				КонецЕсли;
				НоваяСтрока.Пользователь			    = Источник.Автор;
				НоваяСтрока.Расписание			        = Новый ХранилищеЗначения(Источник.РядСобытий.Расписание.Получить(),Новый СжатиеДанных());
				// -GOOGLE
				НоваяСтрока.Тема						= Источник.Тема;
				НоваяСтрока.НаВесьДень					= Источник.НаВесьДень;
				НоваяСтрока.ПомещениеСобытия			= Источник.Помещение;
//				НоваяСтрока.ВидСобытия					= Источник.ВидСобытия;
//				НоваяСтрока.ВходящееИсходящееСобытие	= Источник.ВходящееИсходящее;
				НоваяСтрока.СостояниеСобытия			= Источник.Состояние;
				НоваяСтрока.ОсновнаяКатегорияСобытия	= Источник.ОсновнаяКатегория;
//				НоваяСтрока.Проект						= Источник.Проект;
				НоваяСтрока.Подразделение				= Источник.Подразделение;
//				НоваяСтрока.Важность					= Источник.Важность;
				НоваяСтрока.Завершено					= (Источник.Состояние.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено Или Источник.Состояние.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Отменено);
				
				НоваяСтрока.ИдСобытияGApi = ИдСобытия;
				Если Источник.ДополнительныеСвойства.Свойство("НомерПоследовательностиGApi") Тогда
					Источник.ДополнительныеСвойства.Свойство("НомерПоследовательностиGApi",НоваяСтрока.НомерПоследовательностиGApi);
				Иначе
					НоваяСтрока.НомерПоследовательностиGApi = НомерПоследовательности;	
				КонецЕсли;	
				Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗагруженоИзGoogle") Тогда
					НоваяСтрока.ТаймСтампGApi = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				Иначе
					Источник.ДополнительныеСвойства.Свойство("ТаймСтампGApi",НоваяСтрока.ТаймСтампGApi);
				КонецЕсли;
				// -GOOGLE
				
				//+вог
				НоваяСтрока.ВидВзаимодействия = Источник.вогВидВзаимодействия;
				НоваяСтрока.Балл 			  = Источник.вогВидВзаимодействия.Баллы;
				//-вог
			Иначе		
				Для Каждого Пользователь Из СписокПользователей  Цикл
					Если Источник.СторонниеЛица.Количество() > 0 Тогда
						Для Каждого СтрокаПартнер Из Источник.СторонниеЛица Цикл
							НужноПропустить = Ложь;
							//START Кайдашов 05/07/19 436
							Для каждого Запись из НаборЗаписей цикл
								Если Запись.вогТорговаяТочка = СтрокаПартнер.вогТорговаяТочка и Запись.Партнер = СтрокаПартнер.Партнер и
									Запись.ПериодНачало = Источник.Дата и Запись.ПериодОкончание = Источник.ОкончаниеМероприятия и Запись.Пользователь = Пользователь.Значение тогда
									НужноПропустить = Истина;
								КонецЕсли;
							КонецЦикла;
							Если НужноПропустить тогда
								продолжить;
							КонецЕсли;
							//END Кайдашов
							НоваяСтрока = НаборЗаписей.Добавить();
							
							НоваяСтрока.ПериодНачало				= Источник.Дата;
							НоваяСтрока.ПериодОкончание				= Источник.ОкончаниеМероприятия;
							НоваяСтрока.Пользователь				= Пользователь.Значение;
							// +GOOGLE	
							Если ТипЗнч(АвторСобытия) = Тип("Строка") ИЛИ (ТипЗнч(АвторСобытия) = Тип("СправочникСсылка.Пользователи") И Пользователь.Значение <> АвторСобытия) Тогда
								НоваяСтрока.ОрганизаторGApi = АвторСобытия;	
							Иначе
								НоваяСтрока.ОрганизаторGApi			= Источник.Ответственный;
							КонецЕсли;
							НоваяСтрока.Пользователь			= Пользователь.Значение;
							НоваяСтрока.Расписание			        = Новый ХранилищеЗначения(Источник.РядСобытий.Расписание.Получить(),Новый СжатиеДанных());
							// -GOOGLE
							НоваяСтрока.Партнер 					= СтрокаПартнер.Партнер;
							НоваяСтрока.Объект						= Источник.Ссылка;
							НоваяСтрока.Тема						= Источник.Тема;
							НоваяСтрока.НаВесьДень					= Источник.НаВесьДень;
							НоваяСтрока.ПомещениеСобытия			= Источник.Помещение;
							НоваяСтрока.СостояниеСобытия			= Источник.Состояние;
							НоваяСтрока.ОсновнаяКатегорияСобытия	= Источник.ОсновнаяКатегория;
							НоваяСтрока.Подразделение				= Источник.Подразделение;
							НоваяСтрока.Завершено					= (Источник.Состояние.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено Или Источник.Состояние.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Отменено);
							// +GOOGLE
							Если ОбновлятьСобытиеВGoogle Тогда
								НоваяСтрока.ИдСобытияGApi = ИдСобытия;
								Если Источник.ДополнительныеСвойства.Свойство("НомерПоследовательностиGApi") Тогда
									Источник.ДополнительныеСвойства.Свойство("НомерПоследовательностиGApi",НоваяСтрока.НомерПоследовательностиGApi);
								Иначе
									НоваяСтрока.НомерПоследовательностиGApi = НомерПоследовательности;	
								КонецЕсли;
								Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗагруженоИзGoogle") Тогда
									НоваяСтрока.ТаймСтампGApi = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
								Иначе
									Источник.ДополнительныеСвойства.Свойство("ТаймСтампGApi",НоваяСтрока.ТаймСтампGApi);
								КонецЕсли;
							КонецЕсли;
							// -GOOGLE
							//+вог
							НоваяСтрока.вогТорговаяТочка  = СтрокаПартнер.вогТорговаяТочка;
							НоваяСтрока.ВидВзаимодействия = Источник.вогВидВзаимодействия;
							НоваяСтрока.Балл 			  = Источник.вогВидВзаимодействия.Баллы;
							//-вог
						КонецЦикла;
					Иначе
							НоваяСтрока = НаборЗаписей.Добавить();
							
							НоваяСтрока.ПериодНачало				= Источник.Дата;
							НоваяСтрока.ПериодОкончание				= Источник.ОкончаниеМероприятия;
							НоваяСтрока.Пользователь				= Пользователь.Значение;
							// +GOOGLE	
							Если ТипЗнч(АвторСобытия) = Тип("Строка") ИЛИ (ТипЗнч(АвторСобытия) = Тип("СправочникСсылка.Пользователи") И Пользователь.Значение <> АвторСобытия) Тогда
								НоваяСтрока.ОрганизаторGApi = АвторСобытия;	
							Иначе
								НоваяСтрока.ОрганизаторGApi			= Источник.Ответственный;
							КонецЕсли;
							НоваяСтрока.Пользователь			= Пользователь.Значение;
							НоваяСтрока.Расписание			        = Новый ХранилищеЗначения(Источник.РядСобытий.Расписание.Получить(),Новый СжатиеДанных());
							// -GOOGLE
							НоваяСтрока.Объект						= Источник.Ссылка;
							НоваяСтрока.Тема						= Источник.Тема;
							НоваяСтрока.НаВесьДень					= Источник.НаВесьДень;
							НоваяСтрока.ПомещениеСобытия			= Источник.Помещение;
							НоваяСтрока.СостояниеСобытия			= Источник.Состояние;
							НоваяСтрока.ОсновнаяКатегорияСобытия	= Источник.ОсновнаяКатегория;
							НоваяСтрока.Подразделение				= Источник.Подразделение;
							НоваяСтрока.Завершено					= (Источник.Состояние.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено Или Источник.Состояние.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Отменено);
							// +GOOGLE
							Если ОбновлятьСобытиеВGoogle Тогда
								НоваяСтрока.ИдСобытияGApi = ИдСобытия;
								Если Источник.ДополнительныеСвойства.Свойство("НомерПоследовательностиGApi") Тогда
									Источник.ДополнительныеСвойства.Свойство("НомерПоследовательностиGApi",НоваяСтрока.НомерПоследовательностиGApi);
								Иначе
									НоваяСтрока.НомерПоследовательностиGApi = НомерПоследовательности;	
								КонецЕсли;
								Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗагруженоИзGoogle") Тогда
									НоваяСтрока.ТаймСтампGApi = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
								Иначе
									Источник.ДополнительныеСвойства.Свойство("ТаймСтампGApi",НоваяСтрока.ТаймСтампGApi);
								КонецЕсли;
							КонецЕсли;
							// -GOOGLE
							
							//+вог
							НоваяСтрока.ВидВзаимодействия = Источник.вогВидВзаимодействия;
							НоваяСтрока.Балл 			  = Источник.вогВидВзаимодействия.Баллы;
							//-вог

					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Или Источник.ПометкаУдаления Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		//+GOOGLE
		// запустим фоновое задание для синхронизации с гуглом
		// периодичесвое запишем после записи, когда все события рядя будут уже созданы
		Если ОбновлятьСобытиеВGoogle И Источник.ДополнительныеСвойства.Свойство("ОбъектЗаписанПользователем") И Не Источник.Периодическое Тогда
			Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗагруженоИзGoogle")  Тогда
				// отправим это событие в Google
				Автор = Неопределено;
				Если ТипЗнч(АвторСобытия) = Тип("Строка") ИЛИ (ТипЗнч(АвторСобытия) = Тип("СправочникСсылка.Пользователи") И Источник.Ответственный <> АвторСобытия) Тогда
					Автор = АвторСобытия;	
				Иначе
					Автор = Источник.Ответственный;
				КонецЕсли;
				Если Источник.ПометкаУдаления Тогда
					CRM_GoogleИнтеграция.УдалитьСобытиеИзКалендаря(Источник,Автор);
				Иначе
					CRM_GoogleИнтеграция.ОбновитьСобытиеВКалендаре(Источник,Автор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//-GOOGLE
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_КонтрольнаяТочкаПроекта") Тогда
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		
		Если Не Источник.ПометкаУдаления Тогда
			Для Каждого Пользователь Из Источник.ПользователиКТ Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				
				НоваяСтрока.ПериодНачало			= Источник.Дата;
				НоваяСтрока.ПериодОкончание			= Источник.ДатаЗакрытия;
				НоваяСтрока.Пользователь			= Пользователь.Пользователь;
				НоваяСтрока.Объект					= Источник.Ссылка;
				
				НоваяСтрока.Тема					= Источник.Тема;
				НоваяСтрока.НаВесьДень				= Источник.НаВесьДень;
				НоваяСтрока.СтатусКонтрольнойТочки	= Источник.Статус;
				НоваяСтрока.Важность				= Источник.Важность;
				
				НоваяСтрока.Проект					= Источник.Проект;
				НоваяСтрока.Подразделение			= Источник.Проект.CRM_Подразделение;
				
				НоваяСтрока.Завершено				= (Источник.Статус = Перечисления.CRM_СтатусыКонтрольныхТочек.Завершена);
			КонецЦикла;
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Или Источник.ПометкаУдаления Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Телемаркетинг") Тогда
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		
		бОчиститьЗаписи = Ложь;
		Если Не Источник.ПометкаУдаления И ЗначениеЗаполнено(Источник.Ответственный) Тогда
			Если 	ЗначениеЗаполнено(Источник.ДатаНачала)
				И	ЗначениеЗаполнено(Источник.ДатаОкончания) Тогда
				//
				НачалоПериода	= Источник.ДатаНачала;
				КонецПериода	= Источник.ДатаОкончания;
			ИначеЕсли Источник.НаВесьДень И ЗначениеЗаполнено(Источник.Дата) Тогда
				НачалоПериода	= Источник.Дата;
				КонецПериода	= Источник.Дата;
			Иначе
				бОчиститьЗаписи = Истина;
			КонецЕсли;
			
			Если Не бОчиститьЗаписи Тогда
				НоваяСтрока = НаборЗаписей.Добавить();
				
				НоваяСтрока.ПериодНачало		= НачалоПериода;
				НоваяСтрока.ПериодОкончание		= КонецПериода;
				НоваяСтрока.Пользователь		= Источник.Ответственный;
				НоваяСтрока.Объект				= Источник.Ссылка;
				
				НоваяСтрока.Тема				= Источник.Тема;
				НоваяСтрока.НаВесьДень			= Источник.НаВесьДень;
				
				НоваяСтрока.Важность			= Источник.Важность;
				НоваяСтрока.Подразделение		= Источник.Подразделение;
				НоваяСтрока.Проект				= Источник.Проект;
				
				НоваяСтрока.Завершено			= Источник.Завершен;
				
			КонецЕсли;
			
		Иначе
			бОчиститьЗаписи = Истина;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Или бОчиститьЗаписи Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.МаркетинговыеМероприятия") Тогда
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		
		Если Не Источник.ПометкаУдаления Тогда
			ТаблицаУчастники = Источник.CRM_СвоиУчастники.Выгрузить();
			МассивОбязательныхУчастников = Новый Массив();
			Если ЗначениеЗаполнено(Источник.CRM_Автор) И МассивОбязательныхУчастников.Найти(Источник.CRM_Автор) = Неопределено Тогда
				МассивОбязательныхУчастников.Добавить(Источник.CRM_Автор);
			КонецЕсли;
			Если ЗначениеЗаполнено(Источник.Ответственный) И МассивОбязательныхУчастников.Найти(Источник.Ответственный) = Неопределено Тогда
				МассивОбязательныхУчастников.Добавить(Источник.Ответственный);
			КонецЕсли;
			Для Каждого ОбязательныйУчастник Из МассивОбязательныхУчастников Цикл
				Если ТаблицаУчастники.Найти(ОбязательныйУчастник, "Участник") = Неопределено Тогда
					НовыйУчастник = ТаблицаУчастники.Добавить();
					НовыйУчастник.Участник = ОбязательныйУчастник;
					НовыйУчастник.ДатаНачала = НачалоДня(Источник.ДатаНачала);
					НовыйУчастник.ДатаОкончания = КонецДня(Источник.ДатаОкончания);
					Если Не ЗначениеЗаполнено(НовыйУчастник.ДатаНачала) Тогда
						НовыйУчастник.ДатаНачала = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
					КонецЕсли;
					Если НовыйУчастник.ДатаОкончания < НовыйУчастник.ДатаНачала Тогда
						НовыйУчастник.ДатаОкончания = НовыйУчастник.ДатаНачала;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаУчастники.Свернуть("Участник,ДатаНачала,ДатаОкончания");
			Для Каждого СтрокаТаблицы Из ТаблицаУчастники Цикл
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Участник) Или ТипЗнч(СтрокаТаблицы.Участник) <> Тип("СправочникСсылка.Пользователи") Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачала) Или Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = НаборЗаписей.Добавить();
				
				НоваяСтрока.ПериодНачало		= СтрокаТаблицы.ДатаНачала;
				НоваяСтрока.ПериодОкончание		= СтрокаТаблицы.ДатаОкончания;
				НоваяСтрока.Пользователь		= СтрокаТаблицы.Участник;
				НоваяСтрока.Объект				= Источник.Ссылка;
				
				НоваяСтрока.Тема				= Источник.Наименование;
				
				НоваяСтрока.Важность			= Источник.CRM_Важность;
				НоваяСтрока.Подразделение		= Источник.CRM_Подразделение;
				НоваяСтрока.Проект				= Источник.CRM_Проект;
				
				НоваяСтрока.Завершено			= Источник.Завершено;
			КонецЦикла;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	//ВОГ ++
	Иначе
		вогСобытия.ПриЗаписиОбъектаКалендаря(Источник, Отказ)
	//ВОГ --
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ДОКУМЕНТОВ

// Функция возвращает список документов Взаимодействия по переданному в параметре документу Интерес.
Функция ПолучитьВзаимодействия(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_Взаимодействие.Ссылка,
	|	CRM_Взаимодействие.Дата КАК ДатаСоздания,
	|	CRM_Взаимодействие.Автор,
	|	CRM_Взаимодействие.Партнер,
	|	CRM_Взаимодействие.КонтактноеЛицо,
	|	CRM_Взаимодействие.ПотенциальныйКлиент,
	|	CRM_Взаимодействие.ПлановаяДата,
	|	CRM_Взаимодействие.ВидВзаимодействия,
	|	CRM_Взаимодействие.ОжидаемаяВыручка,
	|	CRM_Взаимодействие.СтатусВзаимодействия,
	|	CRM_Взаимодействие.Содержание,
	|	CRM_Взаимодействие.Результат,
	|	CRM_Взаимодействие.Баллы,
	|	CRM_Взаимодействие.ДатаЗавершенияВзаимодействия,
	|	CRM_Взаимодействие.ЗавершившийПользователь,
	|	CRM_Взаимодействие.СостояниеИнтереса,
	|	CRM_Взаимодействие.НаВесьДень,
	|	CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия КАК ВидСобытия,
	|	CRM_Взаимодействие.ВидВзаимодействия.Направление,
	|	ВЫБОР
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 1
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 2
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЛичнаяВстреча)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 3
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЛичнаяВстреча)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 4
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЭлектронноеПисьмо)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 5
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЭлектронноеПисьмо)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 6
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ПочтовоеПисьмо)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 7
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ПочтовоеПисьмо)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 8
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.Прочее)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 9
	|		КОГДА CRM_Взаимодействие.ВидВзаимодействия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.Прочее)
	|				И CRM_Взаимодействие.ВидВзаимодействия.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидСобытияКартинка,
	|	CRM_Взаимодействие.Подразделение,
	|	ВЫБОР
	|		КОГДА ДокументыВзаимодействия.КоличествоДокументов ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьДокументы,
	|	CRM_Взаимодействие.Задача.Выполнена КАК ЗадачаВыполнена,
	|	CRM_Взаимодействие.Задача,
	|	CRM_Взаимодействие.Задача.CRM_ТочкаМаршрута КАК Этап,
	|	CRM_Взаимодействие.ПлановаяДатаЗавершение,
	|	ВЫБОР
	|		КОГДА CRM_Взаимодействие.Задача.Выполнена
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА CRM_Взаимодействие.Задача.СрокИсполнения < &ТекущаяДата
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗадачаПросрочена
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			CRM_ДокументыВзаимодействия.Взаимодействие КАК Взаимодействие,
	|			СУММА(1) КАК КоличествоДокументов
	|		ИЗ
	|			РегистрСведений.CRM_ДокументыВзаимодействия КАК CRM_ДокументыВзаимодействия
	|		
	|		СГРУППИРОВАТЬ ПО
	|			CRM_ДокументыВзаимодействия.Взаимодействие) КАК ДокументыВзаимодействия
	|		ПО CRM_Взаимодействие.Ссылка = ДокументыВзаимодействия.Взаимодействие
	|ГДЕ
	|	CRM_Взаимодействие.ПометкаУдаления = ЛОЖЬ
	|	И CRM_Взаимодействие.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Взаимодействие.ПлановаяДата УБЫВ";
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()));
	Запрос.УстановитьПараметр("Интерес", Документ);
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Функция определяет возможность планирования взаимодействия.
//
// Параметры:
//	  Дата         - Дата, дата, для которой проверяется возможность планирования.
//	  Пользователь - СправочникСсылка.Пользователи, пользователь, для которого производится проверка возможности
//	                 планирования.
//	  Клиент       - СправочникСсылка.Партнеры, клиент, по важности которого определяется возможность планирования.
//	  ТипУслуги      - СправочникСсылка.CRM_ТипУслуги, тип услуги, для которой определяется возможность планирования.
//
// Возвращаемое значение:
//    Структура    - МожноПланировать, Булево, результат проверки возможности планирования
//                   ДатаПланирования, Дата, крайняя дата, до которой (включая) можно планировать взаимодействие.
//
Функция ПроверитьВозможностьПланирования(Дата, Пользователь, Клиент, ТипУслуги = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КомпанияОфис",	Пользователь.Подразделение.CRM_Офис);
	Запрос.УстановитьПараметр("ТипУслуги",		ТипУслуги);
	Если ТипЗнч(Клиент) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Запрос.УстановитьПараметр("Важность",	Справочники.CRM_ВажностьКлиентов.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Важность",	Клиент.CRM_Важность);
	КонецЕсли;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ГоризонтПланированияВзаимодействий.КомпанияОфис,
	               |	CRM_ГоризонтПланированияВзаимодействий.Дней,
	               |	1 КАК Сортировка
	               |ИЗ
	               |	РегистрСведений.CRM_ГоризонтПланированияВзаимодействий КАК CRM_ГоризонтПланированияВзаимодействий
	               |ГДЕ
	               |	CRM_ГоризонтПланированияВзаимодействий.КомпанияОфис = &КомпанияОфис
	               |	И CRM_ГоризонтПланированияВзаимодействий.ТипУслуги = &ТипУслуги
	               |	И CRM_ГоризонтПланированияВзаимодействий.Важность = &Важность
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ГоризонтПланированияВзаимодействий.КомпанияОфис,
	               |	CRM_ГоризонтПланированияВзаимодействий.Дней,
	               |	2
	               |ИЗ
	               |	РегистрСведений.CRM_ГоризонтПланированияВзаимодействий КАК CRM_ГоризонтПланированияВзаимодействий
	               |ГДЕ
	               |	CRM_ГоризонтПланированияВзаимодействий.Важность = &Важность
	               |	И CRM_ГоризонтПланированияВзаимодействий.ТипУслуги = ЗНАЧЕНИЕ(Справочник.CRM_ТипУслуги.ПустаяСсылка)
	               |	И CRM_ГоризонтПланированияВзаимодействий.КомпанияОфис = &КомпанияОфис
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сортировка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураРезультата = Новый Структура("МожноПланировать", Истина);
	Если Выборка.Следующий() Тогда
		Дней = Выборка.Дней;
		ДатаПланирования = НачалоДня(ТекущаяДатаСеанса()) + Дней * 86400;
		Если НачалоДня(Дата) > ДатаПланирования Тогда
			СтруктураРезультата.МожноПланировать = Ложь;
			СтруктураРезультата.Вставить("ДатаПланирования", ДатаПланирования);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Процедура удаляет событие из календаря пользователя.
// 
// Параметры:
//	  Объект       - событие, которое необходимо удалить из календаря пользователя.
//	  Пользователь - СправочникСсылка.Пользователи - пользователь, из календаря которого удаляется событие.
//
Процедура УдалитьСобытиеИзКалендаря(Объект, Пользователь = Неопределено) Экспорт
	
	НаборРегистра = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект);
	Если НЕ Пользователь = Неопределено Тогда
		НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	КонецЕсли;
	НаборРегистра.Прочитать();
	Если НаборРегистра.Количество() > 0 Тогда
		НаборРегистра.Очистить();
		НаборРегистра.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Функция ищет интерес или консультацию, к которой можно привязать новое взаимодействие.
//
// Параметры:
//	  ОбъектВзаимодействие  - Дата, дата, для которой проверяется возможность планирования.
//	  Сделка 				- Строка(36), ГУИД существующего Интереса.
//	  ИнтересДата       	- Дата, клиент, по важности которого определяется возможность планирования.
//	  ИнтересЗавершен      	- Булево, тип услуги, для которой определяется возможность планирования.
//	  ИнтересОтветственный  - СправочникСсылка.Пользователи, тип услуги, для которой определяется возможность
//	                          планирования.
//	  НазваниеСделки      	- Строка, тип услуги, для которой определяется возможность планирования.
//	  Консультация      	- Булево, тип услуги, для которой определяется возможность планирования.
//
// Возвращаемое значение:
//    ДокументОснованиеВзаимодействия    - ДокументСсылка.CRM_Интерес, ДокументСсылка.CRM_Консультация.
Процедура ИзменитьДокументОснованиеВзаимодействия(СоздатьНовыйИнтерес = Ложь, ОбъектВзаимодействие = Неопределено, Сделка = "", ИнтересДата = Неопределено, 
															ИнтересЗавершен = Ложь, ИнтересОтветственный = Неопределено, 
															НазваниеСделки = "", Консультация = Ложь)  Экспорт
															 														
	//Если Консультация Тогда
	//	Документ = "CRM_Консультация";
	//Иначе	
	//    Документ = "CRM_Интерес";
	//КонецЕсли; 														
	//														
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ДокументОснование1.Ссылка,
	//	|	1 КАК Порядок,
	//	|	ДокументОснование1.Дата КАК Дата,
	//	|	ДокументОснование1.Завершен
	//	|ИЗ
	//	|	Документ." + Документ + " КАК ДокументОснование1
	//	|ГДЕ
	//	|	ДокументОснование1.Партнер = &Партнер
	//	|	И ДокументОснование1.Подразделение = &Подразделение
	//	|	И ДокументОснование1.Тема = &Тема
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ДокументОснование1.Ссылка,
	//	|	2,
	//	|	ДокументОснование1.Дата,
	//	|	ДокументОснование1.Завершен
	//	|ИЗ                  
	//	|	Документ." + Документ + " КАК ДокументОснование1
	//	|ГДЕ
	//	|	ДокументОснование1.Партнер = &Партнер
	//	|	И ДокументОснование1.Подразделение = &Подразделение
	//	|	И ДокументОснование1.Завершен = ЛОЖЬ
	//	|	И ДокументОснование1.КонтактноеЛицо = &КонтактноеЛицо
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ДокументОснование1.Ссылка,
	//	|	3,
	//	|	ДокументОснование1.Дата,
	//	|	ДокументОснование1.Завершен
	//	|ИЗ
	//	|	Документ." + Документ + " КАК ДокументОснование1
	//	|ГДЕ
	//	|	ДокументОснование1.Партнер = &Партнер
	//	|	И ДокументОснование1.Подразделение = &Подразделение
	//	|	И ДокументОснование1.Ответственный = &Ответственный
	//	|	И ДокументОснование1.Завершен = ЛОЖЬ
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ДокументОснование1.Ссылка,
	//	|	4,
	//	|	ДокументОснование1.Дата,
	//	|	ДокументОснование1.Завершен
	//	|ИЗ
	//	|	Документ." + Документ + " КАК ДокументОснование1
	//	|ГДЕ
	//	|	ДокументОснование1.Партнер = &Партнер
	//	|	И ДокументОснование1.Подразделение = &Подразделение
	//	|	И ДокументОснование1.Завершен = ЛОЖЬ
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Порядок,
	//	|	Дата УБЫВ";
	//
	//Запрос.УстановитьПараметр("КонтактноеЛицо", ОбъектВзаимодействие.КонтактноеЛицо);
	//Запрос.УстановитьПараметр("Ответственный", 	ОбъектВзаимодействие.Ответственный);
	//Запрос.УстановитьПараметр("Партнер", 		ОбъектВзаимодействие.Партнер);
	//Запрос.УстановитьПараметр("Подразделение", 	ОбъектВзаимодействие.Подразделение);
	//Запрос.УстановитьПараметр("Тема", 			НазваниеСделки);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОповеститьОЗавершенииДокумента = Ложь;
	ОповеститьОбОткрытииДокумента = Ложь;
	ОповеститьОСозданииДокумента = Ложь;
	
	Если Не СоздатьНовыйИнтерес Тогда
		ДокументОснованиеВзаимодействия = ИзменитьСуществующиийДокумент(ОбъектВзаимодействие.ДокументОснование, ОбъектВзаимодействие, Консультация, ОповеститьОЗавершенииДокумента, ОповеститьОбОткрытииДокумента);
	Иначе
		//ДокументОснованиеВзаимодействия = СоздатьНовыйДокумент(ОбъектВзаимодействие, Консультация, НазваниеСделки, ИнтересДата, ИнтересЗавершен, ИнтересОтветственный);		
		ДокументОснованиеВзаимодействия = Документы.CRM_Интерес.ПустаяСсылка();
		ОповеститьОСозданииДокумента = Истина;	
	КонецЕсли;														
															
	ОбъектВзаимодействие.ДокументОснование = ДокументОснованиеВзаимодействия;
	
	Если Не Консультация Тогда
		ОбъектВзаимодействие.СостояниеИнтереса = ?(ЗначениеЗаполнено(ОбъектВзаимодействие.СостояниеИнтереса), ОбъектВзаимодействие.СостояниеИнтереса, ДокументОснованиеВзаимодействия.СостояниеИнтереса);	
	КонецЕсли; 		
	
	СоздатьНапоминаниеПользователю(ОбъектВзаимодействие,ДокументОснованиеВзаимодействия,ОповеститьОЗавершенииДокумента, ОповеститьОбОткрытииДокумента, ОповеститьОСозданииДокумента);
	
КонецПроцедуры // ПоискИнтересаИлиКонсультацииДляВзаимодействия()

// Функция создаёт интерес или консультацию, к которой можно привязать новое взаимодействие.
//
// Параметры:
//	  ОбъектВзаимодействие  - Дата, дата, для которой проверяется возможность планирования.
//	  Консультация      	- Булево, тип услуги, для которой определяется возможность планирования.
//	  НазваниеСделки      	- Строка, тип услуги, для которой определяется возможность планирования.
//	  ИнтересДата       	- Дата, клиент, по важности которого определяется возможность планирования.
//	  ИнтересЗавершен      	- Булево, тип услуги, для которой определяется возможность планирования.
//	  ИнтересОтветственный  - СправочникСсылка.Пользователи, тип услуги, для которой определяется возможность
//	                          планирования.
//
// Возвращаемое значение:
//    ДокументСсылка    	- ДокументСсылка.CRM_Интерес, ДокументСсылка.CRM_Консультация
Функция СоздатьНовыйДокумент(ОбъектВзаимодействие, Консультация, НазваниеСделки, ИнтересДата, ИнтересЗавершен, ИнтересОтветственный) Экспорт
	
	ОбъектИнтерес							 = Документы.CRM_Интерес.СоздатьДокумент();
	ОбъектИнтерес.Дата						 = ?(ЗначениеЗаполнено(ИнтересДата), ИнтересДата, ОбъектВзаимодействие.Дата);
	ОбъектИнтерес.Автор						 = ОбъектВзаимодействие.Автор;
	СостояниеИнтереса						 = ?(ОбъектВзаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено, Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт,  Справочники.CRM_СостоянияИнтересов.ВыявлениеПотребностей);
	ОбъектИнтерес.СостояниеИнтереса			 = ?(ЗначениеЗаполнено(ОбъектВзаимодействие.СостояниеИнтереса), ОбъектВзаимодействие.СостояниеИнтереса, СостояниеИнтереса);
	ОбъектИнтерес.Партнер					 = ОбъектВзаимодействие.Партнер;
	ОбъектИнтерес.КонтактноеЛицо			 = ОбъектВзаимодействие.КонтактноеЛицо;
	ОбъектИнтерес.Описание					 = ОбъектВзаимодействие.Содержание;
	ОбъектИнтерес.Ответственный				 = ОбъектВзаимодействие.Ответственный;
	ОбъектИнтерес.Подразделение				 = ОбъектВзаимодействие.Подразделение;
	
	ОбъектИнтерес.Офис						 = ОбъектИнтерес.Подразделение.CRM_Офис;
	ОбъектИнтерес.Тема						 = НазваниеСделки;
	ОбъектИнтерес.Завершен					 = ?(ОбъектВзаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено, Истина, Ложь);
	ОбъектИнтерес.ТипУслуги					 = Справочники.CRM_ТипУслуги.НайтиПоНаименованию("Поставка. ПО");
	
	ОбъектИнтерес.Записать();
	
	ДокументСсылка = ОбъектИнтерес.Ссылка;
	
	Возврат  ДокументСсылка;
	
КонецФункции // СоздатьНовыйДокумент()
 
Функция ИзменитьСуществующиийДокумент(ДокументСсылка, ОбъектВзаимодействие, Консультация, ОповеститьОЗавершенииДокумента, ОповеститьОбОткрытииДокумента)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	CRM_Взаимодействие.Дата КАК Дата,
		|	CRM_Взаимодействие.СтатусВзаимодействия
		|ИЗ
		|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|ГДЕ
		|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДатаПоследнегоВзаимодействия = Дата(1, 1, 1);
	СостояниеПоследнегоВзаимодействия = Неопределено;	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДатаПоследнегоВзаимодействия = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Дата), ВыборкаДетальныеЗаписи.Дата, ДатаПоследнегоВзаимодействия);	
		СостояниеПоследнегоВзаимодействия = ВыборкаДетальныеЗаписи.СтатусВзаимодействия;
	КонецЕсли;
	
	Если ДатаПоследнегоВзаимодействия < ОбъектВзаимодействие.Дата Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект.Завершен <> (ОбъектВзаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено) Тогда
			// Тут нужно оповещать ответственному.
			ДокументОбъект.Завершен = (ОбъектВзаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено);

			Если ДокументОбъект.Завершен Тогда
				ОповеститьОЗавершенииДокумента = Истина;
			Иначе	
			    ОповеститьОбОткрытииДокумента = Истина;
			КонецЕсли; 
		
		КонецЕсли; 
		ДокументОбъект.КонтактноеЛицо = ОбъектВзаимодействие.КонтактноеЛицо;
		ДокументОбъект.Ответственный =  ОбъектВзаимодействие.Ответственный;
		Если Консультация Тогда
			ДокументОбъект.Состояние =  ?(ДокументОбъект.Завершен, Справочники.CRM_СостоянияСобытий.Завершено, ДокументОбъект.Состояние);
		Иначе	
		    ДокументОбъект.СостояниеИнтереса = ?(ЗначениеЗаполнено(ОбъектВзаимодействие.СостояниеИнтереса), ОбъектВзаимодействие.СостояниеИнтереса, ДокументОбъект.СостояниеИнтереса);
			ДокументОбъект.ВероятностьСделки = ДокументОбъект.СостояниеИнтереса.ВероятностьСделки;
		КонецЕсли;
		ДокументОбъект.Записать();
		ИзмененныйДокумент = ДокументОбъект.Ссылка;
	Иначе
		ИзмененныйДокумент = ДокументСсылка;
	КонецЕсли; 
	
	Возврат ИзмененныйДокумент;
	
КонецФункции // ИзменитьСуществующиийДокумент()

Процедура СоздатьНапоминаниеПользователю(Объект, ДокументОснование,ОповеститьОЗавершенииДокумента, ОповеститьОбОткрытииДокумента, ОповеститьОСозданииДокумента) Экспорт

	Если Не Объект.ДополнительныеСвойства.Свойство("НаборыЗаписей") Тогда 
		Объект.ДополнительныеСвойства.Вставить("НаборыЗаписей", Новый Массив);
	КонецЕсли;
	
	ПараметрыНапоминания = Новый Структура;
	
	Если ОповеститьОЗавершенииДокумента Тогда
		ОписаниеНапоминания = "Автоматически завершен интерес клиента <" + ДокументОснование.Партнер + ">";
	ИначеЕсли ОповеститьОбОткрытииДокумента Тогда
		ОписаниеНапоминания = "Автоматически открыт интерес клиента <" + ДокументОснование.Партнер + ">";
	ИначеЕсли ОповеститьОСозданииДокумента Тогда
		ОписаниеНапоминания = "Новое событие по клиенту <" + Объект.Партнер+ ">";
	Иначе	
		Возврат;	
	КонецЕсли; 
	
	ПараметрыНапоминания.Вставить("Описание", ОписаниеНапоминания);
	ПараметрыНапоминания.Вставить("ВремяСобытия", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() + 60); // добавляем минуту 
	
	Если ОповеститьОСозданииДокумента Тогда
		ПараметрыНапоминания.Вставить("Источник", Объект.ПолучитьСсылкуНового());		
	Иначе
		ПараметрыНапоминания.Вставить("Источник", ДокументОснование);		
	КонецЕсли;
	
	Напоминание = НапоминанияПользователяКлиентСервер.ОписаниеНапоминания(ПараметрыНапоминания, Истина);
	
	Напоминание.Пользователь = Объект.Ответственный;
	Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
	Напоминание.СрокНапоминания = Напоминание.ВремяСобытия;
	
	НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Напоминание.Пользователь);
	НаборЗаписей.Отбор.Источник.Установить(Напоминание.Источник);
	НаборЗаписей.Отбор.ВремяСобытия.Установить(Напоминание.ВремяСобытия);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
	Иначе
		НоваяЗапись = НаборЗаписей[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяЗапись, Напоминание);
	Объект.ДополнительныеСвойства.НаборыЗаписей.Добавить(НаборЗаписей);

КонецПроцедуры // СоздатьНапоминаниеПользователю()
 
// Функция ищет первое или последнее взаимодействие в Интересе.
Функция ПервоеИлиПоследнееВзаимодействиеВИнтересе(Интерес, Последнее = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_Взаимодействие.Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
	|	И CRM_Взаимодействие.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Взаимодействие.ПлановаяДата,
	|	CRM_Взаимодействие.Дата";
	
	Запрос.УстановитьПараметр("ДокументОснование", Интерес);
	
	Если Последнее Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Взаимодействие.Дата", "CRM_Взаимодействие.Дата УБЫВ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Взаимодействие.ПлановаяДата", "CRM_Взаимодействие.ПлановаяДата УБЫВ");		
	КонецЕсли;		
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Документы.CRM_Взаимодействие.ПустаяСсылка();
	КонецЕсли;

КонецФункции 

//////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ СПИСКА ДОКУМЕНТОВ ВЗАИМОДЕЙСТВИЯ

// Процедура добавляет документ в регистр документов взаимодействия.
//
// Параметры:
//	Взаимодействие	- ДокументСсылка	- Взаимодействие.
//	Документ		- ДокументСсылка	- Добавляемый документ.
//
Процедура ДобавитьДокументВРегистр(Взаимодействие, Документ) Экспорт
	Если НЕ ЗначениеЗаполнено(Взаимодействие) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;		
	НаборЗаписей	= РегистрыСведений.CRM_ДокументыВзаимодействия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Взаимодействие.Установить(Взаимодействие);
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НоваяЗапись					= НаборЗаписей.Добавить();
	НоваяЗапись.Взаимодействие	= Взаимодействие;
	НоваяЗапись.Документ	= Документ;
	Попытка
		НаборЗаписей.Записать(Истина);	
	Исключение	
	КонецПопытки;	
КонецПроцедуры // ДобавитьДокументВРегистр()

// Функция возвращает представление дня недели.
//
// Параметры:
//	День	- Дата	- Дата.
//
// Возвращаемое значение:
//	Строка	- Представление дня недели.
//
Функция ПолучитьПредставлениеДняНедели(День)
	НомерДняНедели = ДеньНедели(День);
	Если НомерДняНедели = 1 Тогда
		Результат = "Пн";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Результат = "Вт";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Результат = "Ср";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Результат = "Чт";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Результат = "Пт";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Результат = "Сб";
	ИначеЕсли НомерДняНедели = 7 Тогда
		Результат = "Вс";
	Иначе
		// Непонятно, что это такое. Пусть будет воскресенье.
		Результат = "Вс";
	КонецЕсли;
	Возврат Результат;
КонецФункции // ПолучитьПредставлениеДняНедели()

// Функция возвращает массив документов взаимодействия.
//
// Параметры:
//	Взаимодействие	- ДокументСсылка	- Взаимодействие.
//
// Возвращаемое значение:
//	Массив	- Массив документов.
//
Функция ПолучитьМассивДокументовВзаимодействия(Взаимодействие) Экспорт
	МассивДокументов	= Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ДокументыВзаимодействия.Документ
	               |ИЗ
	               |	РегистрСведений.CRM_ДокументыВзаимодействия КАК CRM_ДокументыВзаимодействия
	               |ГДЕ
	               |	CRM_ДокументыВзаимодействия.Взаимодействие = &Взаимодействие
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_ДокументыВзаимодействия.Документ.Дата";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
КонецФункции // ПолучитьМассивДокументовВзаимодействия()	

// Функция возвращает записи звонка.
//
// Параметры:
//	Звонок	- ДокументСсылка	- Звонок.
//
// Возвращаемое значение:
//	Массив	- Массив записей звонка.
//
Функция ПолучитьМассивЗаписейЗвонка(Звонок) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Звонок", Звонок);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийсфпИсторияЗвонков.ИдентификаторЗаписи
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК РегистрСведенийсфпИсторияЗвонков
	               |ГДЕ
	               |	РегистрСведенийсфпИсторияЗвонков.Звонок = &Звонок";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторЗаписи");
КонецФункции // ПолучитьМассивЗаписейЗвонка()

// Функция возвращает вложения письма.
//
// Параметры:
//	Письмо	- ДокументСсылка	- Письмо.
//
// Возвращаемое значение:
//	Массив	- Массив вложений письма.
//
Функция ПолучитьМассивВложенийПисьма(Письмо) Экспорт
	ТаблицаВложений	= CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Письмо, Истина);
	МассивВложений	= Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаВложений Цикл
		Если ПустаяСтрока(СтрокаТаблицы.ИДФайлаЭлектронногоПисьма) Тогда
			МассивВложений.Добавить(СтрокаТаблицы.Ссылка);
		КонецЕсли;	
	КонецЦикла;	
	Возврат МассивВложений;
КонецФункции // ПолучитьМассивВложенийПисьма()

// Функция возвращает ссылку на документ по строке навигационной ссылки.
//
// Параметры:
//	СтрокаСсылки	- Строка	- Строка навигационной ссылки.
//
// ДокументСсылка	- Ссылка на документ.
//
Функция ПолучитьСсылкуНаДокумент(СтрокаСсылки) Экспорт
	ПозицияСсылки		= Найти(СтрокаСсылки, "?ref=");
	ПредставлениеТипа	= Сред(СтрокаСсылки, 21, ПозицияСсылки - 21);
	СтрокаGUID			= Сред(СтрокаСсылки, ПозицияСсылки + 5);
	НовыйGUID			= Новый УникальныйИдентификатор(Сред(СтрокаGUID, 25) + "-" + Сред(СтрокаGUID, 21, 4) + "-" 
		+ Сред(СтрокаGUID, 17, 4) + "-" + Лев(СтрокаGUID, 4) + "-" + Сред(СтрокаGUID, 5, 12));
	Возврат Документы[ПредставлениеТипа].ПолучитьСсылку(НовыйGUID);
КонецФункции // ПолучитьСсылкуНаДокумент()

// Функция возвращает наличие доступных учетных записей почты.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Наличие доступных учетных записей почты.
//
Функция ПолучитьИспользованиеПочты()
	// Получение доступных учетных записей.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|		ПО (CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|ГДЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления";
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции // ПолучитьИспользованиеПочты()

Функция ПолучитьТекстОПросрочке(Задача, Состояние = "")
	
	ВозвращаемыйТекст = "";
	Если Задача.СрокИсполнения < ТекущаяДатаСеанса() Тогда
		
		СекДень	= 60*60*24;
		СекЧас	= 60*60;
		СекМин	= 60;
		
		Разница = ТекущаяДатаСеанса()-Задача.СрокИсполнения;
		
		Дней = ЦЕЛ(Разница/СекДень);
		Если Дней > 0 Тогда
			Разница = Разница-(Дней*СекДень);
		КонецЕсли;
		
		Часов = ЦЕЛ(Разница/СекЧас);
		Если Часов > 0 Тогда
			Разница = Разница-(Часов*СекЧас);
		КонецЕсли;
		
		Минут = ЦЕЛ(Разница/СекМин);
		
		//ВозвращаемыйТекст = "<h6>Выполнение "+Строка(Задача.CRM_ТочкаМаршрута)+"/"+Строка(Состояние)+ " просрочено на"+
		//?(Дней>0," "+Строка(Дней)+" д.","")+?(Часов>0," "+Строка(Часов)+" ч.","")+?(Минут>0," "+Строка(Минут)+" м.","")+"</h6>";
		ВозвращаемыйТекст = "Выполнение "+Строка(Задача.CRM_ТочкаМаршрута)+"/"+Строка(Состояние)+ " просрочено на"+
		?(Дней>0," "+Строка(Дней)+" д.","")+?(Часов>0," "+Строка(Часов)+" ч.","")+?(Минут>0," "+Строка(Минут)+" м.","");
	КонецЕсли;
	
	Возврат ВозвращаемыйТекст;
	
КонецФункции

// Функция возвращает HTML-текст списка документов взаимодействия.
//
// Параметры:
//	Взаимодействие	- ДокументСсылка	- Взаимодействие.
//
// Возвращаемое значение:
//	Строка	- Текст HTML-документа.
//
Функция СписокДокументовВзаимодействия(Взаимодействие, Задача = Неопределено) Экспорт
	АдресЖурналРегистрации	= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ЖурналРегистрации.ПолучитьДвоичныеДанные());
	АдресТелефонныйЗвонок	= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.CRM_ТелефонныйЗвонок.ПолучитьДвоичныеДанные());
	АдресЭлектронноеПисьмо	= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.CRM_ОтветитьНаЭлектронноеПисьмо.ПолучитьДвоичныеДанные());
	АдресВложенияВПисьмо	= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.CRM_ВложенияВПисьмо.ПолучитьДвоичныеДанные());
	ИспользоватьСофтФон		= сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон");
	ИспользоватьЗапись		= сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров();
	ИспользоватьПочту		= ПолучитьИспользованиеПочты();
	Описание =
		"<html>
		|<head>
		|<meta http-equiv=Content-Type content=""text/html; charset=utf-8"">
		|<title></title>
		|<style>
		|a img {border: none;}
		|h6 { 
		| color: #FF0000;
		|}
		|</style>
		|</head>
		|<body>
		|<p style=""font-family: arial; font-size: 14px; color: #FF0000"">%ТекстПоЗадаче%</p>
		|<table width=""100%"" cellspacing=""9"">";
	ТекстПоЗадаче = "";
	Если НЕ Задача = Неопределено Тогда
		ТекстПоЗадаче = ПолучитьТекстОПросрочке(Задача, Взаимодействие.СостояниеИнтереса);
	КонецЕсли;
	Описание = СтрЗаменить(Описание,"%ТекстПоЗадаче%",ТекстПоЗадаче);
	
	ДатаВывода	= Дата('00010101');
	МассивДокументовВзаимодействия	= ПолучитьМассивДокументовВзаимодействия(Взаимодействие);
	Для Каждого ДокументМассива Из МассивДокументовВзаимодействия Цикл
		НавигационнаяСсылка	= ПолучитьНавигационнуюСсылку(ДокументМассива);
		Если НЕ (ДатаВывода = НачалоДня(ДокументМассива.Дата)) Тогда
			ДатаВывода	= НачалоДня(ДокументМассива.Дата);
			Описание = Описание + "
				|<tr>
				|<td colspan=""4"" width=""100%""><span style=""font-family: arial; font-size: 14px"">"
				+ Формат(ДатаВывода, "ДФ='d MMMM'; ДЛФ=DD") + ", " + ПолучитьПредставлениеДняНедели(ДатаВывода) + ":</span></td>
				|</tr>";
			КонецЕсли;
		Если  ТипЗнч(ДокументМассива) = Тип("ДокументСсылка.СообщениеSMS") Тогда	
			Описание = Описание + "
				|<tr>
				|<td width=18pt></td>
				|<td width=""90%""><span style=""font-family: arial; font-size: 14px; color: #0000ff"">"
				+ "<a href=" + НавигационнаяСсылка +  ":Открыть>" + Формат(ДокументМассива.Дата, "ДФ=H:mm; ДЛФ=T")
				+ " SMS (" + Строка(ДокументМассива.Состояние) + ") " + ДокументМассива.ТекстСообщения + "</a></span></td>
				|</tr>";
		ИначеЕсли  ТипЗнч(ДокументМассива) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда	
			Описание = Описание + "
				|<tr>
				|<td width=18pt></td>
				|<td width=""90%""><span style=""font-family: arial; font-size: 14px; color: #0000ff"">";
			Если НачалоДня(ДокументМассива.Дата) = НачалоДня(ДокументМассива.ОкончаниеМероприятия) Тогда
				Описание = Описание + "<a href=" + НавигационнаяСсылка + ":Открыть>" + Формат(ДокументМассива.Дата, "ДФ=H:mm; ДЛФ=T");
			Иначе
				Описание = Описание + "<a href=" + НавигационнаяСсылка + ":Открыть>" + Формат(ДокументМассива.Дата, "ДФ='dd.MM H:mm'; ДЛФ=DT")
					+ " - " + Формат(ДокументМассива.ОкончаниеМероприятия, "ДФ='dd.MM H:mm'; ДЛФ=DT");
			КонецЕсли;	
			Описание = Описание + " Мероприятие " + ДокументМассива.Тема;
			Если НЕ ПустаяСтрока(ДокументМассива.Место) Тогда
				Описание = Описание + " [" + ДокументМассива.Место + "]";
			КонецЕсли;	
			Описание = Описание + "</a></span></td>
				|</tr>";
		ИначеЕсли ТипЗнч(ДокументМассива) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			Если ИспользоватьЗапись Тогда
				КоличествоЗаписей	= ПолучитьМассивЗаписейЗвонка(ДокументМассива).Количество();
			Иначе
				КоличествоЗаписей	= 0;
			КонецЕсли;	
			Описание = Описание + "
				|<tr>
				|<td width=18pt></td>
				|<td width=""90%""><span style=""font-family: arial; font-size: 14px; color: #0000ff"">"
				+ "<a href=" + НавигационнаяСсылка + ":Открыть>" + Формат(ДокументМассива.Дата, "ДФ=H:mm; ДЛФ=T");
			Если ДокументМассива.Входящий Тогда
				Описание = Описание + " Звонок (вх) [";
			Иначе	
				Описание = Описание + " Звонок (исх) [";
			КонецЕсли;
			Описание = Описание + Строка(ДокументМассива.сфпДлительностьЗвонка) + " сек] - " + Строка(ДокументМассива.Автор) + "</a></span></td>";
			Если ИспользоватьСофтФон Тогда
				Описание = Описание + "
					|<td width=6pt><a href=" + НавигационнаяСсылка + ":ПозвонитьНаНомер><img src=""" + АдресТелефонныйЗвонок + """ width=""24"" height=""24""></a></td>";
				Если КоличествоЗаписей = 1 Тогда
					Описание = Описание + "
						|<td width=6pt><a href=" + НавигационнаяСсылка + ":ПрослушатьЗапись><img src=""" + АдресЖурналРегистрации + """ width=""24"" height=""24""></a></td>";
				ИначеЕсли КоличествоЗаписей > 1 Тогда
					Описание = Описание + "
						|<td width=6pt><a href=" + НавигационнаяСсылка + ":ПрослушатьЗаписи><img src=""" + АдресЖурналРегистрации + """ width=""24"" height=""24""></a></td>";
				Иначе
					Описание = Описание + "
						|<td width=6pt></td>";
				КонецЕсли;
			Иначе
				Описание = Описание + "
					|<td width=6pt></td>
					|<td width=6pt></td>";
			КонецЕсли;
			Описание = Описание + "
				|</tr>";
		ИначеЕсли ТипЗнч(ДокументМассива) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			МассивВложений		= ПолучитьМассивВложенийПисьма(ДокументМассива);
			КоличествоВложений	= МассивВложений.Количество();
			Описание = Описание + "
				|<tr>
				|<td width=18pt></td>
				|<td width=""90%""><span style=""font-family: arial; font-size: 14px; color: #0000ff"">"
				+ "<a href=" + НавигационнаяСсылка + ":Открыть>" + Формат(ДокументМассива.Дата, "ДФ=H:mm; ДЛФ=T")
				+ " Email (исх) ";
			Если ДокументМассива.ПолучателиПисьма.Количество() > 0 Тогда
				Описание = Описание + "[" + ДокументМассива.ПолучателиПисьма[0].Адрес + "]"; 
			КонецЕсли;
			Описание = Описание + "- " + ДокументМассива.Тема + "</a></span></td>";
			Если ИспользоватьПочту Тогда
				// Ответ на исходящее письмо сейчас не используется
				//Описание = Описание + "
				//	|<td width=6pt><a href=" + НавигационнаяСсылка + ":ОтветитьНаПисьмо><img src=""" + АдресЭлектронноеПисьмо + """></a></td>";
				Если КоличествоВложений = 1 Тогда 				
					Описание = Описание + "
						|<td width=6pt><a href=" + НавигационнаяСсылка + ":ОткрытьВложение><img src=""" + АдресВложенияВПисьмо + """></a></td>";
				ИначеЕсли КоличествоВложений > 1 Тогда 				
					Описание = Описание + "
						|<td width=6pt><a href=" + НавигационнаяСсылка + ":ОткрытьВложения><img src=""" + АдресВложенияВПисьмо + """></a></td>";
				Иначе
					Описание = Описание + "
						|<td width=6pt></td>";
				КонецЕсли;				
			Иначе
				Описание = Описание + "
					|<td width=6pt></td>
					|<td width=6pt></td>";
			КонецЕсли;				
			Описание = Описание + "
				|</tr>";
		// +CRM не переносить в объединенные решения
		ИначеЕсли ТипЗнч(ДокументМассива) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю") Тогда
			Описание = Описание + "
				|<tr>
				|<td width=18pt></td>
				|<td width=""90%""><span style=""font-family: arial; font-size: 14px; color: #0000ff"">";
				
			Описание = Описание + "<a href=" + НавигационнаяСсылка + ":Открыть>" + Формат(ДокументМассива.Дата, "ДФ=H:mm; ДЛФ=T");
			Описание = Описание + " Счет на оплату ";
			Описание = Описание + "</a></span></td>
				|</tr>";
		// -CRM не переносить в объединенные решения
		ИначеЕсли ТипЗнч(ДокументМассива) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
			Описание = Описание + "
				|<tr>
				|<td width=18pt></td>
				|<td width=""90%""><span style=""font-family: arial; font-size: 14px; color: #0000ff"">";
				
			Описание = Описание + "<a href=" + НавигационнаяСсылка + ":Открыть>" + Формат(ДокументМассива.Дата, "ДФ=H:mm; ДЛФ=T");
			Описание = Описание + " Рассылка электронных писем ";
			Описание = Описание + "</a></span></td>
				|</tr>";
		ИначеЕсли ТипЗнч(ДокументМассива) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			Описание = Описание + "
				|<tr>
				|<td width=18pt></td>
				|<td width=""90%""><span style=""font-family: arial; font-size: 14px; color: #0000ff"">";
				
			Описание = Описание + "<a href=" + НавигационнаяСсылка + ":Открыть>" + Формат(ДокументМассива.Дата, "ДФ=H:mm; ДЛФ=T");
			Описание = Описание + " Коммерческое предложение ";
			Описание = Описание + "</a></span></td>
				|</tr>";
		КонецЕсли;
	КонецЦикла;		
	Описание = Описание + "
		|</table>
		|</body>
		|</html>";
	Возврат Описание;
КонецФункции // СписокДокументовВзаимодействия()

// Проверяет, является ли переданная ссылка предметом взаимодействий.
//
// Параметры:
//  ОбъектСсылка - Ссылка - ссылка, для которой выполняется проверка,
//                          является ли она ссылкой на предмет взаимодействий.
//
// Возвращаемое значение:
//   Булево   - Истина если является, Ложь в обратном случае.
//
Функция ЯвляетсяПредметом(ОбъектСсылка) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ПредметВзаимодействия.Тип.СодержитТип(ТипЗнч(ОбъектСсылка));
	
КонецФункции 

Функция ЕстьДокументыВзаимодействия(Взаимодействие) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ДокументыВзаимодействия.Документ
	                      |ИЗ
	                      |	РегистрСведений.CRM_ДокументыВзаимодействия КАК CRM_ДокументыВзаимодействия
	                      |ГДЕ
	                      |	CRM_ДокументыВзаимодействия.Взаимодействие = &Взаимодействие");
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
