// В данный модуль вынесены методы подсистемы CRM, вызываемые из модулей типовых объектов. 
// Выносить можно только те методы, которые не вызывают стандартные методы типового модуля или обработчики форм. 
// Т.е. вызывают только те методы, что тоже вынесены из типового или не содержат таких вызовов.

// Для каждого объекта необходимо задать свою #Область с именем объекта и модуля, как он называется в метаданных.

#Область ОпределениеФормОбъектов

Процедура ОбработкаПолученияФормОбъектовCRM(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	#Область ПолученияФормШаблоныАнкет
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ШаблоныАнкет") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.ШаблоныАнкет.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область ПолученияФормВидыКонтактнойИнформации
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ВидыКонтактнойИнформации") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.ВидыКонтактнойИнформации.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормПользователи
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Пользователи") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.Пользователи.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.Пользователи.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			
			Если Параметры.Свойство("РасширенныйПодбор") И Параметры.РасширенныйПодбор Тогда
				ВыбраннаяФорма = "Справочник.Пользователи.Форма.ФормаСписка";
			Иначе
				ВыбраннаяФорма = "Справочник.Пользователи.Форма.CRM_ФормаСписка";
			КонецЕсли;
			
			//++ VOG Ульянов И.В. CRM-121, 10.01.2020
			Если Параметры.Свойство("ОбластьДелегированияПрав") Тогда 
				//Если Параметры.ОбластьДелегированияПрав = "Мероприятия" тогда
				Если Параметры.ОбластьДелегированияПрав = "Мероприятия" или Параметры.ОбластьДелегированияПрав = "ПроцессыИЗадачи" тогда //VOG Ульянов И.В. 03.02.2020 CRM-264
					ВыбраннаяФорма = "Справочник.Пользователи.Форма.вогФормаВыбора";
				КонецЕсли;
			КонецЕсли;			
			//-- VOG Ульянов И.В. CRM-121, 10.01.2020			
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормЗначенияСвойчтвОбъектов
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ЗначенияСвойствОбъектов") Тогда
		
		Если ВидФормы = "ФормаВыбора" Тогда
			
			ВыбраннаяФорма = "Справочник.ЗначенияСвойствОбъектов.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормУчетныеЗаписиЭлектроннойПочты
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Если ВидФормы = "ФормаВыбора" Тогда
			
			ВыбраннаяФорма = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВидФормы = "ФормаЭлемента" Тогда
			
			ВыбраннаяФорма = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
			Если Не Параметры.Свойство("ЗначениеКопирования")
			И (Не Параметры.Свойство("Ключ") Или Не РаботаСПочтовымиСообщениямиВызовСервера.УчетнаяЗаписьНастроена(Параметры.Ключ)) Тогда
				ВыбраннаяФорма = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПомощникНастройкиУчетнойЗаписи";
			Иначе
				ВыбраннаяФорма = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаЭлемента";
			КонецЕсли;	
			СтандартнаяОбработка = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПапкиЭлектронныхПисем
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ПапкиЭлектронныхПисем") Тогда
		
		Если ВидФормы = "ФормаСписка" Тогда
			
			ВыбраннаяФорма = "Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			
			ВыбраннаяФорма = "Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормКонтактныеЛицаПартнеров
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.КонтактныеЛицаПартнеров") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			ВыбраннаяФорма = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормБизнесРегионы
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.БизнесРегионы") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы", "CRM_Модуль_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_Модуль_ФормаЭлемента";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы", "CRM_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_ФормаЭлемента";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы", "CRM_Модуль_ФормаСписка") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_Модуль_ФормаСписка";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы", "CRM_ФормаСписка") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_ФормаСписка";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы", "CRM_ФормаВыбора") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_ФормаВыбора";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область ПолученияФормМаркетинговыеМероприятия
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.МаркетинговыеМероприятия") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			ВыбраннаяФорма = "Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормПроекты
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Проекты") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Проекты.Формы", "CRM_Модуль_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_Модуль_ФормаЭлемента";
			Иначе
				ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_ФормаЭлемента";
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
			
			Ссылка  = Неопределено;
			ЭтоКейс = Ложь;
			
			Если Параметры.Свойство("Ключ", Ссылка) Тогда
				//открывает форму существующего элемента
				ЭтоКейс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"CRM_ЭтоКейс");
			ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
				// открываем форму нового
				Попытка
					ЭтоКейс = Параметры.ЗначенияЗаполнения.CRM_ЭтоКейс;
				Исключение
					//обработка не требуется
				КонецПопытки;
			ИначеЕсли Параметры.Свойство("ЗначениеКопирования",Ссылка) Тогда 
				//открываем форму нового копированием
				ЭтоКейс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"CRM_ЭтоКейс");
			КонецЕсли;

			Если ЭтоКейс Тогда 
				ВыбраннаяФорма = "CRM_ФормаКейса";
			КонецЕсли;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаГруппы" Тогда 
			ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_ФормаГруппы";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормСтруктураПредприятия
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.СтруктураПредприятия") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.СтруктураПредприятия.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.СтруктураПредприятия.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			ВыбраннаяФорма = "Справочник.СтруктураПредприятия.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область ПолученияФормФизическиеЛица
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ФизическиеЛица") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.ФизическиеЛица.Формы", "CRM_Модуль_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.ФизическиеЛица.Форма.CRM_Модуль_ФормаЭлемента";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.ФизическиеЛица.Формы", "CRM_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.ФизическиеЛица.Форма.CRM_ФормаЭлемента";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область ПолученияФормРолиИсполнителей
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.РолиИсполнителей") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.РолиИсполнителей.Формы", "CRM_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.РолиИсполнителей.Форма.CRM_ФормаЭлемента";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область Партнеры
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Партнеры") Тогда
		
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				
			Если ВидФормы = "ФормаОбъекта" Тогда
				
				Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
					
					Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы", "CRM_Модуль_ФормаБыстрогоВвода") Тогда
				
						ВыбраннаяФорма = "CRM_Модуль_ФормаБыстрогоВвода";
						СтандартнаяОбработка = Ложь;
						
					КонецЕсли;
					
				Иначе
					
					Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы", "CRM_Модуль_ФормаЭлементаРеквизитыКонтрагента") Тогда

						ВыбраннаяФорма = "CRM_Модуль_ФормаЭлементаРеквизитыКонтрагента";
						СтандартнаяОбработка = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		//+вог
		Если ВидФормы = "ФормаСписка" Тогда
			Если Не Параметры.Свойство("ТипОтношений") Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "вогФормаВыбораТипаОтношений";
				
			КонецЕсли;
			
		КонецЕсли;
		//-вог
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти // ОпределениеФормОбъектов

#Область ОбработкаПолученияДанныхВыбора

Процедура ОбработкаПолученияДанныхВыбора(Источник, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	#Область Пользователи
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Пользователи") Тогда
		
		Если Параметры.Свойство("ТолькоДоступные") И Параметры.ТолькоДоступные Тогда
			ДанныеВыбора = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПользователей(, Параметры.СтрокаПоиска);
			Если Параметры.Свойство("ОбластьДелегированияПрав") Тогда //Павелко, CRM-69, 18.12.2019
				//++ VOG Ульянов И.В. 15.01.2020 CRM-121
				//ОтчетыКлиентСервер.ДополнитьСписок(ДанныеВыбора, вогНастраиваемоеДелегированиеПрав.ПолучитьСписокПодчиненныхСотрудниковДелегата(ПараметрыСеанса.ТекущийПользователь, Параметры.ОбластьДелегированияПрав));
				ОтчетыКлиентСервер.ДополнитьСписок(ДанныеВыбора, вогНастраиваемоеДелегированиеПрав.ПолучитьСписокПодчиненныхСотрудниковДелегата(ПараметрыСеанса.ТекущийПользователь, Параметры.ОбластьДелегированияПрав,,Параметры.СтрокаПоиска));
				//-- VOG Ульянов И.В. 15.01.2020 CRM-121
			КонецЕсли;	
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	#КонецОбласти
	
	#Область Пользователи
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.СтруктураПредприятия") Тогда
		
		Если Параметры.Свойство("ТолькоДоступные") И Параметры.ТолькоДоступные Тогда
			ДанныеВыбора = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПодразделений(, Параметры.СтрокаПоиска);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти // ОбработкаПолученияДанныхВыбора

#Область Справочник_ВидыКонтактнойИнформации

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
// Параметры функции CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ:
// 1. Вид КИ - Ссылка на предопределенный вид КИ.
// 2. Тип КИ - Ссылка на перечисление.
// 3. МожноИзменятьСпособРедактирования  - Определяет, можно ли в режиме Предприятие изменить способ редактирования,
//                                         например, для адресов, которые попадают в регл. отчетность, нужно
//                                         запретить возможность изменения.
// 4. РедактированиеТолькоВДиалоге       - Если установить Истина, то будет значение вида КИ можно будет
//                                         редактировать только в форме ввода (имеет смысл только для
//                                         адресов, телефонов и факсов).
// 5. АдресТолькоРоссийский              - Если установить Истина, то для адресов можно будет ввести 
//                                         только российский адрес (имеет смысл только для адресов).
// 6. Порядок                            - Определяет порядок элемента, для сортировки относительно других.
//
//
Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	// Виды контактной информации CRM
	
	// Справочник "Потенциальные клиенты".
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	1);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь, Ложь,	2);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеПотенциальногоКлиента,	Перечисления.ТипыКонтактнойИнформации.ВебСтраница,	Истина,	Ложь, Ложь,	9);
	
	// Справочник "Партнеры"
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера,				Перечисления.ТипыКонтактнойИнформации.ВебСтраница,				Истина,	Ложь, Ложь,	4);
	
	// Справочник "Партнеры" частное лицо.
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица,Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	1);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_МестоРожденияЧастногоЛица,	Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина,	Ложь, Ложь,	2);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица,	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,    Истина,	Ложь, Ложь,	3);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеЧастногоЛица,	Перечисления.ТипыКонтактнойИнформации.ВебСтраница,			Истина,	Ложь, Ложь,	9);
	
	// Справочник "Партнеры" юридическое лицо.
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес,						Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина,	Ложь, Истина,1);
	
	// Справочник "Контактные лица партнеров".
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_МестоРожденияКонтактногоЛица,Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина,	Ложь, Ложь,	4);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь, Ложь,	5);	
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеКонтактногоЛица,	Перечисления.ТипыКонтактнойИнформации.ВебСтраница,		Истина,	Ложь, Ложь,	9);
	
	// Справочник "Пользователи"
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий,	Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	1);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	2);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		// Справочник "Организации"
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,				Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Истина, 1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,			Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 2);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,				Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,					Перечисления.ТипыКонтактнойИнформации.Факс,						Истина, Ложь, Ложь, 4);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь, Ложь, 5);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 6);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,		Перечисления.ТипыКонтактнойИнформации.Другое,					Истина, Ложь, Ложь, 7);
		
		// Справочник "Партнеры"
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера,					Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина,	Ложь, Ложь,	3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,					Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера,					Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь, Ложь,	2);
		
		// Справочник "Контактные лица партнеров".
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,			Перечисления.ТипыКонтактнойИнформации.Телефон,					Ложь,	Ложь, Ложь,	1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,	Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	2);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь, Ложь,	3);
		
		// Справочник "Пользователи"
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,        		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь, Ложь, 3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,				Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	4);
		
		// Справочник "Физические лица".
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,				   Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь, Ложь,	1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина,	Ложь, Ложь,	2);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,	   Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,	   Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	4);
		
		// Справочник "Проекты" кейсы.
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКейса, Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь, Ложь,	1);
		
		//+вог
		// Справочник "Торговые точки".
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки, 		   Перечисления.ТипыКонтактнойИнформации.Адрес,				    Истина,	Ложь, Ложь,	1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонТорговойТочки, 	   Перечисления.ТипыКонтактнойИнформации.Телефон,				Истина,	Ложь, Ложь,	2);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailТорговойТочки,		   Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь, Ложь,	3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.КоординатыGPSТорговойТочки, Перечисления.ТипыКонтактнойИнформации.Другое,				Истина,	Ложь, Ложь,	4);
		
		// Справочник "Юридические лица".
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресЮридическогоЛица, 		Перечисления.ТипыКонтактнойИнформации.Адрес,				 Истина,	Ложь, Ложь,	1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресЮридическогоЛица, 	Перечисления.ТипыКонтактнойИнформации.Адрес,				 Истина,	Ложь, Ложь,	2);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонЮридическогоЛица, 	Перечисления.ТипыКонтактнойИнформации.Телефон,				 Истина,	Ложь, Ложь,	3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailЮридическогоЛица,		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина,	Ложь, Ложь,	4);
		//-вог
		
	КонецЕсли; 
	
	// Устнавливает признак "Основной".
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКейса);
	
	//+вог
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.ТелефонТорговойТочки);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.EmailТорговойТочки);
	
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресЮридическогоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.ТелефонЮридическогоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.EmailЮридическогоЛица);
	//-вог
	
КонецПроцедуры // ЗаполнитьСвойстваВидовКонтактнойИнформации()

// Процедура устанавливает признак основной для переданного вида контактной информации.
//
// Параметры:
//	ВидКИ	- СправочникСсылка	- Вид контактной информации.
//
Процедура УстановитьПризнакОсновнойДляВКИ(ВидКИ)
	
	Объект = ВидКИ.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
	Объект.CRM_Основной = Истина;
	Объект.Записать();
	
КонецПроцедуры // УстановитьПризнакОсновнойДляВКИ()

Процедура ОбновитьВидКонтактнойИнформацииВК() Экспорт
	
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеПотенциальногоКлиента,	Перечисления.ТипыКонтактнойИнформации.ВебСтраница,	Истина,	Ложь, Ложь,	9);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеЧастногоЛица,	Перечисления.ТипыКонтактнойИнформации.ВебСтраница,	Истина,	Ложь, Ложь,	9);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеКонтактногоЛица,	Перечисления.ТипыКонтактнойИнформации.ВебСтраница,	Истина,	Ложь, Ложь,	9);
	
	Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК CRM_ПотенциальныеКлиентыКонтактнаяИнформация
	                      |ГДЕ
	                      |	CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Вид = &Вид
	                      |	И CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Тип = &Тип");
	
	Вид = Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеПотенциальногоКлиента;
	Запрос.УстановитьПараметр("Вид", Вид);
	Запрос.УстановитьПараметр("Тип", Тип);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектКИ = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаКИ из ОбъектКИ.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Вид = Вид И СтрокаКИ.Тип = Тип Тогда
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Представление = "https://vk.com/id"+СтрокаКИ.Представление;
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СтрокаКИ.Представление, Вид);
			КонецЕсли;
		КонецЦикла;
		ОбъектКИ.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	                      |ГДЕ
	                      |	ПартнерыКонтактнаяИнформация.Вид = &Вид
	                      |	И ПартнерыКонтактнаяИнформация.Тип = &Тип");
	
	Вид = Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеЧастногоЛица;
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.УстановитьПараметр("Вид", Вид);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектКИ = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаКИ из ОбъектКИ.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Вид = Вид И СтрокаКИ.Тип = Тип Тогда
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Представление = "https://vk.com/id"+СтрокаКИ.Представление;
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СтрокаКИ.Представление, Вид);
			КонецЕсли;
		КонецЦикла;
		ОбъектКИ.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = &Вид
	                      |	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип");
	
	Вид = Справочники.ВидыКонтактнойИнформации.CRM_ИдентификаторВКонтактеКонтактногоЛица;
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.УстановитьПараметр("Вид", Вид);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектКИ = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаКИ из ОбъектКИ.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Вид = Вид И СтрокаКИ.Тип = Тип Тогда
				СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				СтрокаКИ.Представление = "https://vk.com/id"+СтрокаКИ.Представление;
				СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СтрокаКИ.Представление, Вид);
			КонецЕсли;
		КонецЦикла;
		ОбъектКИ.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВидыКонтактнойИнформации

// Процедура заполнения ролей партнеров для предопределенных элементов справочника ВидыСвязейМеждуПартнерами.
//
Процедура CRM_ЗаполнитьРолиПартнеровДляВидовСвязей() Экспорт
	
	// Заполнение ролей партнеров для предопределенных элементов справочника ВидыСвязейМеждуПартнерами.
	СправочникОбъект = Справочники.ВидыСвязейМеждуПартнерами.CRM_Холдинг.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(СправочникОбъект.РольПартнера1) И Не ЗначениеЗаполнено(СправочникОбъект.РольПартнера2) Тогда
		СправочникОбъект.РольПартнера1 = НСтр("ru = 'Является холдингом'");
		СправочникОбъект.РольПартнера2 = НСтр("ru = 'Входит в холдинг'");
		Если Не ЗначениеЗаполнено(СправочникОбъект.Наименование) Тогда
			СправочникОбъект.Наименование = СправочникОбъект.РольПартнера1 + " - " + СправочникОбъект.РольПартнера2;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СправочникОбъект.ОбратноеНаименование) Тогда
			СправочникОбъект.Наименование = СправочникОбъект.РольПартнера2 + " - " + СправочникОбъект.РольПартнера1;
		КонецЕсли;
		СправочникОбъект.Записать();
	КонецЕсли;
	СправочникОбъект = Справочники.ВидыСвязейМеждуПартнерами.CRM_СвязанноеЮрЛицо.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(СправочникОбъект.РольПартнера1) И Не ЗначениеЗаполнено(СправочникОбъект.РольПартнера2) Тогда
		СправочникОбъект.РольПартнера1 = НСтр("ru = 'Связанное юр. лицо'");
		СправочникОбъект.РольПартнера2 = НСтр("ru = 'Связанное юр. лицо'");
		Если Не ЗначениеЗаполнено(СправочникОбъект.Наименование) Тогда
			СправочникОбъект.Наименование = СправочникОбъект.РольПартнера1 + " - " + СправочникОбъект.РольПартнера2;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СправочникОбъект.ОбратноеНаименование) Тогда
			СправочникОбъект.Наименование = СправочникОбъект.РольПартнера2 + " - " + СправочникОбъект.РольПартнера1;
		КонецЕсли;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	// Заполнение ОбратноеНаименование для справочника ВидыСвязейМеждуПартнерами.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыСвязейМеждуПартнерами.РольПартнера1 КАК Роль1,
	|	ВидыСвязейМеждуПартнерами.РольПартнера2 КАК Роль2,
	|	ВидыСвязейМеждуПартнерами.Ссылка
	|ИЗ
	|	Справочник.ВидыСвязейМеждуПартнерами КАК ВидыСвязейМеждуПартнерами
	|ГДЕ
	|	ВидыСвязейМеждуПартнерами.ОбратноеНаименование = """"";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ОбратноеНаименование = Выборка.Роль2 + " - " + Выборка.Роль1;
		СправочникОбъект.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_КонтактныеЛицаПартнеров

Процедура КонтактныеЛицаПартнеровЗаполнитьПоФизЛицу(КонтактноеЛицоСсылка, ФизЛицо) Экспорт
	Если ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Объект = КонтактноеЛицоСсылка.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		Объект = КонтактноеЛицоСсылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.ДатаРождения		= ФизЛицо.ДатаРождения;
	Объект.Пол				= ФизЛицо.Пол;
	Объект.CRM_Фамилия		= ФизЛицо.CRM_Фамилия;
	Объект.CRM_Имя			= ФизЛицо.CRM_Имя;
	Объект.CRM_Отчество		= ФизЛицо.CRM_Отчество;
	Объект.Наименование		= ФизЛицо.Наименование;
	
	// В случае удаления КИ из клиента, необходимо зачистить КИ и в КЛ, поэтому заводим номера строк, которые точно не
	// пустые.
	МассивНомеровВыбранныхСтрок = Новый Массив;
	
	СписокИзмененныхСтрок = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ФизЛицо.КонтактнаяИнформация Цикл
		ТекТипКИ = Неопределено;
		ТекВидКИ = Неопределено;
		Если СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекТипКИ) И ЗначениеЗаполнено(ТекВидКИ) Тогда
			НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип,Вид", ТекТипКИ, ТекВидКИ));
			НайденныеНеИзмененныеСтроки = Новый Массив;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если СписокИзмененныхСтрок.НайтиПоЗначению(НайденнаяСтрока.НомерСтроки)<>Неопределено Тогда Продолжить; КонецЕсли;
				НайденныеНеИзмененныеСтроки.Добавить(НайденнаяСтрока);
			КонецЦикла;
			Если НайденныеНеИзмененныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеНеИзмененныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТаблицы,, "Вид");
					НайденнаяСтрока.Вид = ТекВидКИ;
					СписокИзмененныхСтрок.Добавить(НайденнаяСтрока.НомерСтроки);
					Прервать;
				КонецЦикла;
			Иначе
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "Вид");
				НоваяСтрока.Вид = ТекВидКИ;
				СписокИзмененныхСтрок.Добавить(НоваяСтрока.НомерСтроки);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Далее определяем строчки предопределённой КИ, которые были очищены во владельце (физ. лице), чтобы удалить их у КЛ.
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого СтрокаКИ Из Объект.КонтактнаяИнформация Цикл
		Если СписокИзмененныхСтрок.НайтиПоЗначению(СтрокаКИ.НомерСтроки)<>Неопределено Тогда Продолжить; КонецЕсли;
		Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица 
			ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица
			ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица Тогда
				Объект.КонтактнаяИнформация.Удалить(СтрокаКИ);	
		КонецЕсли;									
	КонецЦикла;	
	
	Объект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Проекты

Процедура УстановитьПараметрыАвтостарта(Проект) Экспорт
	
	Если Проект.CRM_Периодический Тогда
		
		Если НЕ Проект.CRM_КартаМаршрута = Проект.Ссылка.CRM_КартаМаршрута Тогда
			СписокТочекСтарта = CRM_БизнесПроцессыСервер.ПолучитьВозможныеТочкуАвтоСтартаБизнесПроцесса(Проект.CRM_КартаМаршрута);
		Иначе
			СписокТочекСтарта = CRM_БизнесПроцессыСервер.ПолучитьВозможныеТочкуАвтоСтартаБизнесПроцесса(Проект.Ссылка);
		КонецЕсли;
		
		ВозможенСтарт	= Ложь;
		ТочкаСтарта		= Неопределено;
		Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
			ТочкаСтарта		= ЭлементСписка.Значение;
			ВозможенСтарт	= ЭлементСписка.Пометка;
			Если ЭлементСписка.Пометка Тогда Прервать; КонецЕсли;
		КонецЦикла;
		
		Если ВозможенСтарт Тогда
			
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Проект.CRM_КартаМаршрута, ТочкаСтарта);
		
			НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборМаршрут.Отбор.Объект.Установить(Проект.CRM_КартаМаршрута);
			НаборМаршрут.Прочитать();
			Отказ = (НаборМаршрут.Количество() = 0);
			Если НЕ Отказ Тогда
				НастройкиЭтаповБизнесПроцесса = НаборМаршрут.Выгрузить();
				НастройкиЭтаповБизнесПроцесса.Колонки.Удалить("Объект");
				НастройкиЭтаповБизнесПроцесса.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
				НастройкиЭтаповБизнесПроцесса.Колонки.Добавить("ДатаНачала");
				НастройкиЭтаповБизнесПроцесса.Колонки.Добавить("ДатаВыполнения");
				НастройкиЭтаповБизнесПроцесса.Колонки.Добавить("ДатаНачалаВходящая");
				
				ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
				Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
					Организация = ЗначениеНастройки;
				Иначе
					Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
				КонецЕсли;
				
				НачПериода = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Проект.CRM_КартаМаршрута.НомерВерсии, Организация, ТочкаСтарта, НастройкиЭтаповБизнесПроцесса, НачПериода);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Отсутствуют настройки этапов карты маршрута бизнес-процесса!'");		
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТочкаСтарта"						,ТочкаСтарта);
			СтруктураПараметров.Вставить("МассивИсходящихТочек"				,МассивИсходящихТочек);
			СтруктураПараметров.Вставить("НастройкиЭтаповБизнесПроцесса"	,НастройкиЭтаповБизнесПроцесса);
			СтруктураПараметров.Вставить("СостояниеСтрокой"					,"Не принята к исполнению");
			
			Проект.CRM_ПараметрыАвтостарта = Новый ХранилищеЗначения(СтруктураПараметров);
		Иначе
			Проект.CRM_Периодический		= Ложь;
			Проект.CRM_ПараметрыАвтостарта	= Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
	Иначе
		Проект.CRM_ПараметрыАвтостарта = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление расписания.
//
Функция ПолучитьПредставлениеРасписания(Знач Расписание = Неопределено) Экспорт
	Если Расписание = Неопределено Тогда Возврат ""; КонецЕсли;
	
	ПредставлениеРасписания = Строка(Расписание);
	
	ПозицияТочкаСЗапятой = Найти(ПредставлениеРасписания, ";");
	Если ПозицияТочкаСЗапятой > 0 Тогда
	ПредставлениеРасписания = Лев(ПредставлениеРасписания, ПозицияТочкаСЗапятой - 1);
	КонецЕсли;
	
	Возврат Строка(ПредставлениеРасписания);
КонецФункции

#КонецОбласти

#Область Справочник_СтруктураПредприятия

Функция ПолучитьВсеПодразделенияРодители(Подразделение, ВключатьСвоеПодразделение = Истина) Экспорт
	МассивПодразделений = Новый Массив;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ВключатьСвоеПодразделение Тогда
			// Добавляем подразделение пользователя.
			МассивПодразделений.Добавить(Подразделение);
		КонецЕсли;	
		// Добавляем все вышестоящие подразделения.
		ПодразделениеРодитель = Подразделение;
		Пока ЗначениеЗаполнено(ПодразделениеРодитель.Родитель) Цикл
			ПодразделениеРодитель = ПодразделениеРодитель.Родитель;
			МассивПодразделений.Добавить(ПодразделениеРодитель);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивПодразделений;		
КонецФункции // ПолучитьВсеПодразделенияРодители()

// функция возвращает подчиненные по иерерахии подразделения.
// 
// Параметры:
//	ПодраздениеРодитель	- СправочникСсылка	- Подразделение
//  МассивПодразделений - формируемый рекурсивно массив.
//
// Возвращаемое значение:
//	МассивПодразделений	- Массив подразделений.
//
Функция ПолучитьПодчиненныеПодразделенияПользователя(ПодраздениеРодитель, МассивПодразделений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", ПодраздениеРодитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивПодразделений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		ПолучитьПодчиненныеПодразделенияПользователя(ВыборкаДетальныеЗаписи.Ссылка, МассивПодразделений);
	КонецЦикла;
	
	Возврат МассивПодразделений; 
		
КонецФункции // ПолучитьПодчиненныеПодразделенияПользователя()

#КонецОбласти
