
#Область ОбщиеПроцедурыФункции

Процедура ДобавитьВСтрокуОшибки(СтрокаОшибки, Текст) Экспорт
	Если Не ЗначениеЗаполнено(Текст) Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(СтрокаОшибки) <> Тип("Строка") Тогда
		СтрокаОшибки = "";
	КонецЕсли;
	ДобавляемыйТекст = Строка(Текст);
	
	СтрокаОшибки = СтрокаОшибки + ?(ПустаяСтрока(СтрокаОшибки), "", Символы.ПС);
	СтрокаОшибки = СтрокаОшибки + ДобавляемыйТекст;
КонецПроцедуры

Функция ПолучитьЭлементСтруктурыПапокMSExchangeПоID(УчетнаяЗапись, ID) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка,
	|	скFolderID КАК ID
	|ИЗ
	|	Справочник.CRM_ПапкиЭлектронныхПисем
	|ГДЕ
	|	Владелец = &УчетнаяЗапись
	|	И скFolderID = &ID
	|");
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда	
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	Иначе	
		Пока Выборка.Следующий() Цикл
			Если Выборка.ID = ID Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ОпределитьВидПапкиЭлектроннойПочты1С(Папка) Экспорт
	//Перечисление.CRM_ВидыПапокЭлектроннойПочты
		//Входящие
		//Исходящие
		//Отправленные
		//Удаленные
		//Обработанные
	
	//Входящие = inbox = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие
	//Черновики = drafts = НЕТ
	//Отправленные = sentitems = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные
	//Удаленные = deleteditems = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные
	//Исходящие = outbox = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие
	//Нежелательная почта = junkemail = НЕТ
	
	Если Папка.FolderClass = "IPF.Note" И ЗначениеЗаполнено(Папка.DistinguishedFolderId) Тогда
		Если Папка.DistinguishedFolderId = "inbox" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие;
		ИначеЕсли Папка.DistinguishedFolderId = "sentitems" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные;
		ИначеЕсли Папка.DistinguishedFolderId = "deleteditems" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные;
		ИначеЕсли Папка.DistinguishedFolderId = "outbox" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие;
		ИначеЕсли Папка.DistinguishedFolderId = "drafts" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики;
		ИначеЕсли Папка.DistinguishedFolderId = "junkemail" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОпределитьПапку1С(СтрокаДерева, УчетнаяЗаписьЭлектроннойПочты) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПапкиЭлектронныхПисем.Ссылка
		|ИЗ
		|	Справочник.CRM_ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
		|	И ПапкиЭлектронныхПисем.Владелец = &УчетнаяЗапись";
		
	ТекстУсловия = "";
	Если ЗначениеЗаполнено(СтрокаДерева.ВидПапкиЭлектроннойПочты1С) Тогда
		ТекстУсловия = ТекстУсловия + " И ПапкиЭлектронныхПисем.Вид = &Вид";
	ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.DisplayName) Тогда	
		ТекстУсловия = ТекстУсловия + " И ПапкиЭлектронныхПисем.Наименование = &Наименование";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстУсловия;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Вид"			 , СтрокаДерева.ВидПапкиЭлектроннойПочты1С);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьЭлектроннойПочты);
	Запрос.УстановитьПараметр("Наименование" , СтрокаДерева.DisplayName);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаДерева.Папка1С = Выборка.Ссылка;
	Иначе
		СтрокаДерева.Папка1С = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОпределитьПапку1С()

Функция ОпределитьВажностьMSExchange(ПочтовоеСообщение)
	
	Если ПочтовоеСообщение.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
		Возврат "Low";
	ИначеЕсли ПочтовоеСообщение.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
		Возврат "Normal";
	ИначеЕсли ПочтовоеСообщение.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
		Возврат "High";
	Иначе
		Возврат "Normal";
	КонецЕсли;
	
КонецФункции

Функция ОпределитьВажность1С(ВажностьMSExchange)
	Если ВажностьMSExchange = "Low" Тогда
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Низкая;
	ИначеЕсли ВажностьMSExchange = "Normal" Тогда
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ИначеЕсли ВажностьMSExchange = "High" Тогда
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Высокая;
	Иначе
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	КонецЕсли;
КонецФункции

Функция ПолучитьУзелОбменаУчетнойЗаписиЭлектроннойПочты(УчетнаяЗапись, Создать = Ложь) Экспорт

	Перем Узел;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбменПочтовымиСообщениями.Ссылка
		|ИЗ
		|	ПланОбмена.скMSExchange_ОбменПочтовымиСообщениями КАК ОбменПочтовымиСообщениями
		|ГДЕ
		|	ОбменПочтовымиСообщениями.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Узел = Выборка.Ссылка;	
	ИначеЕсли Создать Тогда
		НовыйУзел = ПланыОбмена.скMSExchange_ОбменПочтовымиСообщениями.СоздатьУзел();
		НовыйУзел.УчетнаяЗаписьЭлектроннойПочты = УчетнаяЗапись;
		НовыйУзел.Наименование 					= УчетнаяЗапись.Наименование;
		НовыйУзел.Код							= XMLСтрока(УчетнаяЗапись);
		
		НовыйУзел.Записать();
		
		Узел = НовыйУзел.Ссылка;
		
	КонецЕсли;
	
	Возврат Узел;
	
КонецФункции // УзелОбменаУчетнойЗаписиЭлектроннойПочты()

Процедура ВыполнитьУдалениеДанных(Знач ТаблицаДанных, Знач ИндексНачала, Знач РазмерПорции) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Для Индекс = ИндексНачала По РазмерПорции Цикл
		Попытка
			Объект = ТаблицаДанных[Индекс].Ссылка.ПолучитьОбъект();
			Объект.УстановитьПометкуУдаления(Истина);
			
			ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоОбъекту1С(Объект.Ссылка);
			Если ДанныеСообщения.Выбран() Тогда
				ДанныеСообщения.Удалить();
			КонецЕсли;
			
			Объект = Объект.Ссылка.ПолучитьОбъект();
			Объект.Удалить();		
		Исключение
			Продолжить;
		КонецПопытки;
			
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область РегламентныеПроцедурыФункции
	
Процедура ВыполнитьОбменПочтовымиСообщениями(КодНастройки) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("скИспользоватьОбменПочтовымиСообщениямиСMSExchange") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Регламентный обмен электронными сообщениями с MS Exchange",
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начат регламентный обмен электронными сообщениями с MS Exchange'"));
			
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодНастройки) Тогда
		ВызватьИсключение НСтр("ru = 'Не определена настройка обмена электронными сообщениями с MS Exchange.'");
	КонецЕсли;
			
	Попытка
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
		|	УчетныеЗаписиЭлектроннойПочты.скНастройкаОбменаПочтовымиСообщениями КАК Настройка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.скНастройкаОбменаПочтовымиСообщениями.Код = &Код
		|	И НЕ УчетныеЗаписиЭлектроннойПочты.скНастройкаОбменаПочтовымиСообщениями.ПометкаУдаления";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Код", КодНастройки);
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СтрокаОшибки = "";
				
				Попытка
					СинхронизироватьПоНастройкеОбмена(Выборка.Настройка, Выборка.УчетнаяЗапись, СтрокаОшибки);
					
					Если Не ПустаяСтрока(СтрокаОшибки) Тогда
						ЗаписьЖурналаРегистрации("Регламентный обмен электронными сообщениями с MS Exchange",
								УровеньЖурналаРегистрации.Предупреждение,,,
								НСтр("ru = 'При обмене электронными сообщениями по настройке '")
								+ """" + Строка(Выборка.Настройка) + """ "
								+ НСтр("ru = 'произошли ошибки: '")
								+ СтрокаОшибки); 

					КонецЕсли;
					
				Исключение
					ИнфОбОшибке = ИнформацияОбОшибке();
					
					ЗаписьЖурналаРегистрации("Регламентный обмен электронными сообщениями с MS Exchange",
							УровеньЖурналаРегистрации.Ошибка,,,
							НСтр("ru = 'При обмене электронными сообщениями по настройке '")
							+ """" + Строка(Выборка.Настройка) + """ "
							+ НСтр("ru = 'произошло исключение: '")
							+ ПодробноеПредставлениеОшибки(ИнфОбОшибке)); 
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Регламентный обмен электронными сообщениями с MS Exchange",
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Закончен регламентный обмен электронными сообщениями с MS Exchange'"));
		
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации("Регламентный обмен электронными сообщениями с MS Exchange",
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнфОбОшибке));
		
	КонецПопытки;
			
КонецПроцедуры

Процедура СинхронизироватьПоНастройкеОбмена(Настройка, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка.УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'В настройке не заполнена учетная запись!'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Настройка.Подключение) Тогда
		ВызватьИсключение НСтр("ru = 'В настройке не заполнено подключение!'");
	КонецЕсли;
	
	Если НЕ (Настройка.Подключение.СерверMSExchange = Настройка.УчетнаяЗапись.СерверMSExchange) Тогда
		ВызватьИсключение НСтр("ru = 'Реквизит ""Сервер MS Exchange"" в подключении отличается от значения, указанного в учетной записи!'");
	КонецЕсли;
	
	Подключение				= скMSExchange_ОбменПочтовымиСообщениямиСервер.СформироватьСтруктуруПодключения(Настройка);
	Направление1С			= ((Настройка.НаправлениеОбмена = Перечисления.CRM_НаправленияОбменаСMSExchange.MSExchangeПредприятие)
		ИЛИ (Настройка.НаправлениеОбмена = Перечисления.CRM_НаправленияОбменаСMSExchange.ВОбеСтороны));
	НаправлениеMSExchange	= ((Настройка.НаправлениеОбмена = Перечисления.CRM_НаправленияОбменаСMSExchange.ПредприятиеMSExchange)
		ИЛИ (Настройка.НаправлениеОбмена = Перечисления.CRM_НаправленияОбменаСMSExchange.ВОбеСтороны));
	ДвустороннийОбмен		= (Направление1С И НаправлениеMSExchange);
		
	Подключение.Вставить("АдресEmail"        , УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты);
	Подключение.Вставить("MaxChangesReturned",
		?(НЕ ЗначениеЗаполнено(УчетнаяЗаписьЭлектроннойПочты.скМаксимальноеКоличествоИзмененийMSExchange), 100, УчетнаяЗаписьЭлектроннойПочты.скМаксимальноеКоличествоИзмененийMSExchange));
	
		
	Если УчетнаяЗаписьЭлектроннойПочты.скСинхронизироватьПочтовыеСообщенияВходящие
	 ИЛИ УчетнаяЗаписьЭлектроннойПочты.скСинхронизироватьПочтовыеСообщенияОтправленные Тогда
	 
		ДатаВремяНачалаДвустороннегоОбмена  = ТекущаяДата();
						
		Если Направление1С Тогда
			
			//Струкура папок
			СинхронизироватьСтруктуруПапокВ1С(Настройка, Подключение,, "msgfolderroot", УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки);	
			
			//Почтовые сообщения
			ПапкиСинхронизацииПочтовыхСообщений = ПолучитьПапкиСинхронизацииПочтовыхСообщений(Настройка, УчетнаяЗаписьЭлектроннойПочты);
			
			МассивСвойств = Новый Массив;
			МассивСвойств.Добавить("IsRead");
			МассивСвойств.Добавить("Папка1С");
			МассивСвойств.Добавить("Действие");
			МассивСвойств.Добавить("ID");
			
			ТаблицаДанных = Новый ТаблицаЗначений;
			Для каждого Свойство Из МассивСвойств Цикл
				ТаблицаДанных.Колонки.Добавить(Свойство);		
			КонецЦикла;	
	
			Для Каждого СтрокаТаблицыПапка Из ПапкиСинхронизацииПочтовыхСообщений Цикл
				ДанныеИзменений = скMSExchange_ОбменПочтовымиСообщениямиСервер.СинхронизироватьЭлементы(Подключение, СтрокаТаблицыПапка.FolderID, СтрокаТаблицыПапка.DistinguishedFolderId, СтрокаТаблицыПапка.СостояниеСинхронизации,, Подключение.MaxChangesReturned, СтрокаОшибки);
				Если ТипЗнч(ДанныеИзменений) = Тип("ТаблицаЗначений") И ДанныеИзменений.Количество() > 0 Тогда
					
					СтрокаТаблицыПапка.ТекущееСостояниеСинхронизации = ДанныеИзменений[0].SyncState;
					Для каждого СтрокаИзменения Из ДанныеИзменений[0].Changes Цикл	
						ОбработатьСтрокуИзмененияЭлементов(ТаблицаДанных, СтрокаИзменения, СтрокаТаблицыПапка, СтрокаОшибки);
					КонецЦикла;
					
				КонецЕсли;  
				
			КонецЦикла;
			
			ОбработатьТаблицуДанныхИзмененийЭлементов(Подключение, Настройка, ПапкиСинхронизацииПочтовыхСообщений, ТаблицаДанных, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки);
			
		КонецЕсли;
		
		Если НаправлениеMSExchange Тогда
			УзелДляОбмена = ПолучитьУзелОбменаУчетнойЗаписиЭлектроннойПочты(УчетнаяЗаписьЭлектроннойПочты);
			Если НЕ ЗначениеЗаполнено(УзелДляОбмена) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для учетной записи: ""%1"" не определен узел для обмена!'"),
					Строка(УчетнаяЗаписьЭлектроннойПочты));
			КонецЕсли;
			
			УзелДляОбменаОбъект		= УзелДляОбмена.ПолучитьОбъект();
			МассивВыгруженныхДанных = Новый Массив;
			
			//Почтовые сообщения 
			СинхронизироватьЭлементыВMSExchange(Настройка, Подключение, УчетнаяЗаписьЭлектроннойПочты, УзелДляОбмена, МассивВыгруженныхДанных, СтрокаОшибки);
			
			//Струкура папок
			СинхронизироватьСтруктуруПапокВMSExchange(Настройка, Подключение, УчетнаяЗаписьЭлектроннойПочты, УзелДляОбмена, МассивВыгруженныхДанных, СтрокаОшибки);	
						
			//Удаляем регистрацию изменений
			Для каждого ВыгруженныеДанные Из МассивВыгруженныхДанных Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелДляОбмена, ВыгруженныеДанные);
			КонецЦикла;
			
		КонецЕсли;
		
		скMSExchange_ОбменПочтовымиСообщениямиСервер.ЗаписатьДатыПоследнегоОбмена(УчетнаяЗаписьЭлектроннойПочты, ДатаВремяНачалаДвустороннегоОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбновлениеСтрукутрыПапок

Процедура СинхронизироватьСтруктуруПапокВ1С(Настройка, Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки = "") Экспорт
		
	ДанныеИзменений = скMSExchange_ОбменПочтовымиСообщениямиСервер.СинхронизироватьПапки(Подключение, FolderId, DistinguishedFolderId, УчетнаяЗаписьЭлектроннойПочты.скСостояниеСинхронизацииMSExchange,,СтрокаОшибки); 
	Если ТипЗнч(ДанныеИзменений) = Тип("ТаблицаЗначений") И ДанныеИзменений.Количество() > 0 Тогда
		Для каждого СтрокаИзменения Из ДанныеИзменений[0].Changes Цикл	
			ОбработатьСтрокуИзмененияПапок(Подключение, СтрокаИзменения, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки);		
		КонецЦикла;
		
		скMSExchange_ОбменПочтовымиСообщениямиСервер.ЗаписатьСостояниеСинхронизации(УчетнаяЗаписьЭлектроннойПочты, ДанныеИзменений[0].SyncState);
		
	КонецЕсли;    
	
КонецПроцедуры

Процедура ОбработатьСтрокуИзмененияПапок(Подключение, СтрокаИзменения, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки)
	
	//Создание/Изменение
	Если СтрокаИзменения.Create.Количество() > 0
	  ИЛИ СтрокаИзменения.Update.Количество() > 0 Тогда		
		DistinguishedFolderIds = 
		"deleteditems
		|drafts
		|inbox
		|outbox
		|sentitems
		|junkemail";
		
		СоответствиеDistinguishedFolderIds = Новый Соответствие();
		Для н = 1 По СтрЧислоСтрок(DistinguishedFolderIds) Цикл
			Попытка
				СтрId = СтрПолучитьСтроку(DistinguishedFolderIds, н);
				Папка = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьПапку(Подключение,, СтрId, "IdOnly");
				Если ТипЗнч(Папка) = Тип("ТаблицаЗначений") И Папка.Количество() > 0 Тогда
					СоответствиеDistinguishedFolderIds.Вставить(Папка[0].ID, СтрId);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
			
		МассивID = Новый Массив;
		
		//Создание
		Для каждого ДанныеСоздания Из СтрокаИзменения.Create Цикл
			Если ТипЗнч(ДанныеСоздания.Folder) = Тип("ТаблицаЗначений") Тогда
				Для каждого СтрокаПапки Из ДанныеСоздания.Folder Цикл
					МассивID.Добавить(СтрокаПапки.ID);	
				КонецЦикла;			
			КонецЕсли;
		КонецЦикла;	
		
		//Изменение
		Для каждого ДанныеИзменения Из СтрокаИзменения.Update Цикл
			Если ТипЗнч(ДанныеИзменения.Folder) = Тип("ТаблицаЗначений") Тогда
				Для каждого СтрокаПапки Из ДанныеИзменения.Folder Цикл
					МассивID.Добавить(СтрокаПапки.ID);	
				КонецЦикла;			
			КонецЕсли;
		КонецЦикла;	
		
		ЗагрузитьОбновитьСтруктуруПапокВ1С(Подключение, МассивID, УчетнаяЗаписьЭлектроннойПочты, СоответствиеDistinguishedFolderIds, СтрокаОшибки);
		
	КонецЕсли;
		
	//Удаление
	Если СтрокаИзменения.Delete.Количество() > 0 Тогда		
		МассивID = Новый Массив;
		Для каждого ДанныеУдаления Из СтрокаИзменения.Delete Цикл
			Если ТипЗнч(ДанныеУдаления.Folder) = Тип("ТаблицаЗначений") Тогда
				Для каждого СтрокаПапки Из ДанныеУдаления.Folder Цикл
					МассивID.Добавить(СтрокаПапки.ID);	
				КонецЦикла;			
			КонецЕсли;
		КонецЦикла;	
		
		ПометитьНеИспользуемыеЭлементыСтруктурыПапокНаУдаление(Подключение, МассивID, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗагрузитьОбновитьСтруктуруПапокВ1С(Подключение, МассивID, УчетнаяЗаписьЭлектроннойПочты, СоответствиеDistinguishedFolderIds, СтрокаОшибки) Экспорт
	
	СинхронизируемыеПапки = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьПапку(Подключение, МассивID,,, СтрокаОшибки);
	Если ТипЗнч(СинхронизируемыеПапки) = Тип("ТаблицаЗначений") Тогда
		ТаблицаПапок = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьТаблицуПапок(Подключение, УчетнаяЗаписьЭлектроннойПочты, СоответствиеDistinguishedFolderIds, СинхронизируемыеПапки, СтрокаОшибки);
		Если ТипЗнч(ТаблицаПапок) = Тип("ТаблицаЗначений") И ТаблицаПапок.Количество() > 0 Тогда
			МассивID = Новый Массив;
			Порядок  = 0;
			НачатьТранзакцию();
				ЗагрузитьЭлементыСтруктурыПапокMSExchange(ТаблицаПапок, УчетнаяЗаписьЭлектроннойПочты, Порядок, МассивID);
			ЗафиксироватьТранзакцию();					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьЭлементыСтруктурыПапокMSExchange(ТаблицаПапок, УчетнаяЗапись, Порядок, МассивID)
	Для Каждого СтрокаТаблицы Из ТаблицаПапок Цикл				
		Попытка		ID = СтрокаТаблицы.ID;
		Исключение	ID = Неопределено;
		КонецПопытки;
		Если Не ЗначениеЗаполнено(ID) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка		DistinguishedID = СтрокаТаблицы.DistinguishedFolderId;
		Исключение	DistinguishedID = Неопределено;
		КонецПопытки;
		
		Попытка		ParentFolderId = СтрокаТаблицы.ParentFolderId;
		Исключение	ParentFolderId = Неопределено;
		КонецПопытки;
				
		ПапкаСсылка = СтрокаТаблицы.Папка1С;
		
		Если ЗначениеЗаполнено(ПапкаСсылка) Тогда
			ПапкаОбъект = ПапкаСсылка.ПолучитьОбъект();
			ПапкаОбъект.ПометкаУдаления = Ложь;
		Иначе
			ПапкаОбъект = Справочники.УдалитьCRM_ПапкиЭлектронныхПисем.СоздатьЭлемент();
		КонецЕсли;
		
		ПапкаОбъект.Владелец	 = УчетнаяЗапись;
		ПапкаОбъект.РеквизитДопУпорядочивания = Порядок;
		
		Порядок = Порядок + 1;
		
		Если ЗначениеЗаполнено(ParentFolderId) Тогда
			РодительСсылка = ПолучитьЭлементСтруктурыПапокMSExchangeПоID(УчетнаяЗапись, ParentFolderId);
			Если ЗначениеЗаполнено(РодительСсылка) Тогда
				ПапкаОбъект.Родитель = РодительСсылка;
			КонецЕсли;
			
		КонецЕсли;
		
		ПапкаОбъект.Наименование = СтрокаТаблицы.DisplayName;
		ПапкаОбъект.Вид 	 = СтрокаТаблицы.ВидПапкиЭлектроннойПочты1С;
		
		ПапкаОбъект.скFolderID 		  = ID;
		ПапкаОбъект.скDistinguishedID = DistinguishedID;
		
		ПапкаОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		ПапкаОбъект.Записать();
		
		Если МассивID.Найти(ПапкаОбъект.скFolderID) = Неопределено Тогда
			МассивID.Добавить(ПапкаОбъект.скFolderID);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПометитьНеИспользуемыеЭлементыСтруктурыПапокНаУдаление(Подключение, МассивID, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки)
	
	Для каждого ID Из МассивID Цикл
		Папка1С = ПолучитьЭлементСтруктурыПапокMSExchangeПоID(УчетнаяЗаписьЭлектроннойПочты, ID);
		
		Если ЗначениеЗаполнено(Папка1С) Тогда
			Папка1СОбъект = Папка1С.ПолучитьОбъект();
			Папка1СОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			Попытка
				Папка1СОбъект.ПометкаУдаления = Истина;
				Папка1СОбъект.Записать();
			Исключение
				ДобавитьВСтрокуОшибки(СтрокаОшибки, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбновлениеПочтовыхСообщений
	    
Функция ПолучитьПапкиСинхронизацииПочтовыхСообщений(Настройка, УчетнаяЗаписьЭлектроннойПочты)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Папка1С,
		|	ПапкиЭлектронныхПисем.скFolderID КАК FolderID,
		|	ПапкиЭлектронныхПисем.скDistinguishedID КАК DistinguishedFolderId,
		|	ПапкиЭлектронныхПисем.скСостояниеСинхронизацииMSExchange КАК СостояниеСинхронизации
		|ИЗ
		|	Справочник.УдалитьCRM_ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец = &УчетнаяЗапись
		|	И НЕ ПапкиЭлектронныхПисем.ПометкаУдаления
		|	И (ПапкиЭлектронныхПисем.скFolderID <> """"
		|			ИЛИ ПапкиЭлектронныхПисем.скDistinguishedID <> """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьЭлектроннойПочты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПапок = РезультатЗапроса.Выгрузить();
	ТаблицаПапок.Колонки.Добавить("ТекущееСостояниеСинхронизации");
		
	Возврат ТаблицаПапок;
	
КонецФункции

Процедура ОбработатьСтрокуИзмененияЭлементов(ТаблицаДанных, СтрокаИзменения, СтрокаТаблицыПапка, СтрокаОшибки)

	//Флаг прочтения
	ЗаполнитьТаблицуДанных(ТаблицаДанных, СтрокаИзменения, СтрокаТаблицыПапка, "ReadFlagChange");
	//Создание
	ЗаполнитьТаблицуДанных(ТаблицаДанных, СтрокаИзменения, СтрокаТаблицыПапка, "Create");
	//Изменение
	ЗаполнитьТаблицуДанных(ТаблицаДанных, СтрокаИзменения, СтрокаТаблицыПапка, "Update");
	//Удаление
	ЗаполнитьТаблицуДанных(ТаблицаДанных, СтрокаИзменения, СтрокаТаблицыПапка, "Delete");
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуДанных(ТаблицаДанных, СтрокаИзменения, СтрокаТаблицыПапка, Действие)

	Если СтрокаИзменения[Действие].Количество() > 0 Тогда		
		Для каждого ДанныеДействия Из СтрокаИзменения[Действие] Цикл
			Если Действие = "ReadFlagChange" Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДействия);
				НоваяСтрока.Действие = Действие;
				НоваяСтрока.Папка1С  = СтрокаТаблицыПапка.Папка1С;
			ИначеЕсли Действие = "Delete" Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДействия);
				НоваяСтрока.Действие = Действие;
				НоваяСтрока.Папка1С  = СтрокаТаблицыПапка.Папка1С;
			Иначе	
				Если СтрокаИзменения[Действие].Колонки.Найти("Message") <> Неопределено 
				  И ТипЗнч(ДанныеДействия.Message) = Тип("ТаблицаЗначений") Тогда
					Для каждого СтрокаЭлемента Из ДанныеДействия.Message Цикл
						НоваяСтрока = ТаблицаДанных.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭлемента);
						НоваяСтрока.Действие = Действие;
						НоваяСтрока.Папка1С  = СтрокаТаблицыПапка.Папка1С;
					КонецЦикла;			
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьТаблицуДанныхИзмененийЭлементов(Подключение, Настройка, ПапкиСинхронизацииПочтовыхСообщений, ТаблицаДанных, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки)
	
	//Дополним таблицу данных строк удаления
	ТаблицаДанных.Колонки.Добавить("Дата");
	ТаблицаДанных.Колонки.Добавить("Тема");
	
	СтрокиУдаления = ТаблицаДанных.НайтиСтроки(
		Новый Структура("Действие", "Delete"));	
	Для каждого СтрокаУдаления Из СтрокиУдаления Цикл
		ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(Настройка.УчетнаяЗапись, СтрокаУдаления.ID);	
		Если ДанныеСообщения.Выбран() Тогда
			СтрокаУдаления.Дата		= ДанныеСообщения.Дата;  
			СтрокаУдаления.Тема		= ДанныеСообщения.Тема;  
		
		КонецЕсли;
	
	КонецЦикла;
		
	Для каждого СтрокаПапки Из ПапкиСинхронизацииПочтовыхСообщений Цикл		
		
		//Флаг прочтения
		СтрокиID = ТаблицаДанных.НайтиСтроки(
			Новый Структура("Действие, Папка1С", "ReadFlagChange", СтрокаПапки.Папка1С));	
		Для каждого СтрокаID Из СтрокиID Цикл
			ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(Настройка.УчетнаяЗапись, СтрокаID.ID);
			Если ДанныеСообщения.Выбран() Тогда
				ДанныеСообщения.Рассмотрено = Булево(СтрокаID.IsRead);	
				ДанныеСообщения.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		МассивID = Новый Массив;
		
		//Создание
		СтрокиID = ТаблицаДанных.НайтиСтроки(
			Новый Структура("Действие, Папка1С", "Create", СтрокаПапки.Папка1С));	
		Для каждого СтрокаID Из СтрокиID Цикл
			МассивID.Добавить(СтрокаID);	
		КонецЦикла;
		
		//Изменение
		СтрокиID = ТаблицаДанных.НайтиСтроки(
			Новый Структура("Действие, Папка1С", "Update", СтрокаПапки.Папка1С));	
		Для каждого СтрокаID Из СтрокиID Цикл
			МассивID.Добавить(СтрокаID);	
		КонецЦикла;
		
		СинхронизируемыеПочтовыеСообщения = Новый ТаблицаЗначений();	
		СинхронизируемыеПочтовыеСообщения.Колонки.Добавить("ID");
		
		Если МассивID.Количество() > 0 Тогда
			СинхронизируемыеПочтовыеСообщения = ПолучитьСинхронизируемыеПочтовыеСообщенияMSExchange(Подключение, МассивID, УчетнаяЗаписьЭлектроннойПочты,, СтрокаОшибки);
			Если ТипЗнч(СинхронизируемыеПочтовыеСообщения) <> Тип("ТаблицаЗначений") Тогда
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		
		Если ЗагрузитьОбновитьДанныеПочтовыхСообщенийВ1С(Подключение, Настройка, СтрокаПапки.Папка1С, ТаблицаДанных, СинхронизируемыеПочтовыеСообщения, УчетнаяЗаписьЭлектроннойПочты, "Create", СтрокаОшибки) Тогда
			скMSExchange_ОбменПочтовымиСообщениямиСервер.ЗаписатьСостояниеСинхронизации(СтрокаПапки.Папка1С, СтрокаПапки.ТекущееСостояниеСинхронизации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСинхронизируемыеПочтовыеСообщенияMSExchange(Подключение, МассивID, УчетнаяЗаписьЭлектроннойПочты, МассивСвойств = Неопределено, СтрокаОшибки = "") Экспорт
	
	Если ТипЗнч(МассивСвойств) = Тип("Массив") Тогда
		BaseShape = "IdOnly";
	КонецЕсли;
	
	Возврат скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьПочтовоеСообщение(Подключение, МассивID,, BaseShape, МассивСвойств, СтрокаОшибки);
	
КонецФункции

Функция ЗагрузитьОбновитьДанныеПочтовыхСообщенийВ1С(Подключение, Настройка, Папка1С, ТаблицаДанных, Данные, УчетнаяЗаписьЭлектроннойПочты, Действие, СтрокаОшибки)
	
	Результат = Истина;
	
	СтруктураСтроки = ПолучитьПустуюСтруктуруХранения(Данные.Колонки);
		
	ТекущиеОшибки = "";
	Для Каждого СтрокаТаблицы Из Данные Цикл		
		ЗагрузитьОбновитьДанныеПочтовогоСообщенияВ1С(Подключение, Настройка, Папка1С, ТаблицаДанных, СтрокаТаблицы, СтруктураСтроки, УчетнаяЗаписьЭлектроннойПочты, Действие, ТекущиеОшибки);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущиеОшибки) Тогда
		СтрокаОшибки = СтрокаОшибки + Символы.ПС + ТекущиеОшибки;
		Возврат Ложь;
	Иначе
		
		//Удаление
		СтрокиID = ТаблицаДанных.НайтиСтроки(
			Новый Структура("Действие, Папка1С", "Delete", Папка1С));	
			
		Для каждого СтрокаID Из СтрокиID Цикл
			ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(
				Настройка.УчетнаяЗапись, СтрокаID.ID);			
				
			Если ДанныеСообщения.Выбран() Тогда
				УдалитьДанныеПочтовогоСообщенияВ1С(ДанныеСообщения, УчетнаяЗаписьЭлектроннойПочты, ТекущиеОшибки);			
			КонецЕсли;	
				
		КонецЦикла;		
		
		Если ЗначениеЗаполнено(ТекущиеОшибки) Тогда
			СтрокаОшибки = СтрокаОшибки + Символы.ПС + ТекущиеОшибки;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруХранения(КолонкиТаблицы)

	Структура = Новый Структура;
	Для каждого Колонка Из КолонкиТаблицы Цикл
		Структура.Вставить(Колонка.Имя);	
	КонецЦикла;	
	
	Возврат Структура; 
	
КонецФункции // ПолучитьПустуюСтруктуруХранения()

Процедура ЗагрузитьОбновитьДанныеПочтовогоСообщенияВ1С(Подключение, Настройка, Папка1С, ТаблицаДанных, СтрокаТаблицы, СтруктураСтроки, УчетнаяЗаписьЭлектроннойПочты, Действие, СтрокаОшибки)	
	
	Тема = "";
	Если СтруктураСтроки.Свойство("Subject") Тогда
		Тема = СтрокаТаблицы.Subject;
	КонецЕсли;
	Дата	 	  = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДатаMSExchangeВДату1С(СтрокаТаблицы.DateTimeCreated, Настройка.СмещениеВремениВМинутах);	
	УчетнаяЗапись = Настройка.УчетнаяЗапись;
	
	Если Действие = "Create" Тогда
	
		СтрокиУдаления = ТаблицаДанных.НайтиСтроки(
				Новый Структура("Действие, Тема, Дата", "Delete", Тема, Дата));
		Если СтрокиУдаления.Количество() > 0 Тогда
			ДанныеСообщенияДляУдаления = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(
				УчетнаяЗапись, СтрокиУдаления[0].ID);	
				
			ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(
				УчетнаяЗапись, СтрокаТаблицы.ID);	
				
			ЗаполнитьЗначенияСвойств(ДанныеСообщения, ДанныеСообщенияДляУдаления);	
			
			Попытка
			    ДанныеСообщенияДляУдаления.Удалить();
				Для каждого СтрокаУдаления Из СтрокиУдаления Цикл
					ТаблицаДанных.Удалить(СтрокаУдаления);
				КонецЦикла; 
				
			Исключение
				СтрокаОшибки = СтрокаОшибки + Символы.ПС + ОписаниеОшибки();
				Возврат;
			КонецПопытки;	
			
		Иначе	
			ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(
				УчетнаяЗапись, СтрокаТаблицы.ID);	
		КонецЕсли;
	Иначе
		ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(
			УчетнаяЗапись, СтрокаТаблицы.ID);			
	КонецЕсли;
	
	ДанныеСообщения.ID 		 		 = СтрокаТаблицы.ID;
	ДанныеСообщения.ChangeKey		 = СтрокаТаблицы.ChangeKey;
	ДанныеСообщения.СерверMSExchange = УчетнаяЗапись.СерверMSExchange;
	
	ДанныеСообщения.УчетнаяЗапись				  = УчетнаяЗапись;
	ДанныеСообщения.УчетнаяЗаписьЭлектроннойПочты = УчетнаяЗаписьЭлектроннойПочты;
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицы);
	//Запишем вложения	
	Если СтруктураСтроки.Свойство("Attachments") 
	  И ТипЗнч(СтруктураСтроки.Attachments) = Тип("ТаблицаЗначений") 
	  И СтруктураСтроки.Attachments.Количество() > 0 Тогда
		Для каждого ТаблицаВложения Из СтруктураСтроки.Attachments Цикл
			Если СтруктураСтроки.Attachments.Колонки.Найти("ItemAttachment") <> Неопределено Тогда
				ТаблицаВложения.ItemAttachment.Колонки.Добавить("ДанныеВложения");
				Для каждого ItemAttachment Из ТаблицаВложения.ItemAttachment Цикл						
					ItemAttachment.ДанныеВложения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьВложение(Подключение, ItemAttachment.Атрибут_Id,, СтрокаОшибки); 
			    КонецЦикла;
			КонецЕсли;
			
			Если СтруктураСтроки.Attachments.Колонки.Найти("FileAttachment") <> Неопределено Тогда
				ТаблицаВложения.FileAttachment.Колонки.Добавить("ДанныеВложения");
				Для каждого FileAttachment Из ТаблицаВложения.FileAttachment Цикл
					FileAttachment.ДанныеВложения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьВложение(Подключение, FileAttachment.Атрибут_Id,, СтрокаОшибки); 
			    КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;	
	
	ДанныеСообщения.ХранилищеДанныхСообщения = Новый ХранилищеЗначения(СтруктураСтроки, Новый СжатиеДанных(9));	
	
	ДанныеСообщения.Важность	  = ОпределитьВажность1С(СтрокаТаблицы.Importance);
	ДанныеСообщения.ЕстьВложения  = Булево(СтрокаТаблицы.HasAttachments);
	ДанныеСообщения.Дата		  = Дата;
	ДанныеСообщения.Тема	 	  = Тема;
	ДанныеСообщения.CRM_Папка     = Папка1С;
	ДанныеСообщения.Рассмотрено	  = Булево(СтрокаТаблицы.IsRead);
	
	Если СтруктураСтроки.Свойство("DateTimeReceived")
	  И ЗначениеЗаполнено(СтруктураСтроки.DateTimeReceived) Тогда
		ДанныеСообщения.Получено = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДатаMSExchangeВДату1С(СтруктураСтроки.DateTimeReceived, Настройка.СмещениеВремениВМинутах);	
	КонецЕсли;
	
	Если СтруктураСтроки.Свойство("DateTimeSent")
	  И ЗначениеЗаполнено(СтруктураСтроки.DateTimeSent) Тогда
		ДанныеСообщения.Отправлено = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДатаMSExchangeВДату1С(СтруктураСтроки.DateTimeSent, Настройка.СмещениеВремениВМинутах);	
	КонецЕсли;
	
	Если СтруктураСтроки.Свойство("Sender") 
	  И СтруктураСтроки.Sender <> Неопределено Тогда
		ДанныеСообщения.Отправитель = ЗаполнитьПредставлениеПочтовогоАдреса(СтруктураСтроки.Sender, "Name");
		ДанныеСообщения.АдресОтправителя = ЗаполнитьПредставлениеПочтовогоАдреса(СтруктураСтроки.Sender, "EmailAddress");
	ИначеЕсли СтруктураСтроки.Свойство("From")
	  И СтруктураСтроки.From <> Неопределено Тогда
		ДанныеСообщения.Отправитель		 = ЗаполнитьПредставлениеПочтовогоАдреса(СтруктураСтроки.From, "Name");
		ДанныеСообщения.АдресОтправителя = ЗаполнитьПредставлениеПочтовогоАдреса(СтруктураСтроки.From, "EmailAddress");
	КонецЕсли;
	
	Если СтруктураСтроки.Свойство("ToRecipients") 
	  И СтруктураСтроки.ToRecipients <> Неопределено Тогда
		ДанныеСообщения.Получатель = ЗаполнитьПредставлениеПочтовогоАдреса(СтруктураСтроки.ToRecipients, "Name");
	ИначеЕсли СтруктураСтроки.Свойство("ReceivedBy")
	  И СтруктураСтроки.ReceivedBy <> Неопределено Тогда
		ДанныеСообщения.Получатель = ЗаполнитьПредставлениеПочтовогоАдреса(СтруктураСтроки.ReceivedBy, "Name");
	КонецЕсли;
		
	Если (Действие = "Update" И ЗначениеЗаполнено(ДанныеСообщения.Объект1С)) 
	  ИЛИ Не УчетнаяЗаписьЭлектроннойПочты.скПолучатьТолькоЗаголовкиПочтовыхСообщенийMSExchange Тогда
		ДанныеСообщения.Объект1С = ЗагрузитьОбновитьПочтовоеСообщенияВ1С(ДанныеСообщения, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки);	
	КонецЕсли;
	
	ДанныеСообщения.Записать();
	
КонецПроцедуры

Процедура УдалитьДанныеПочтовогоСообщенияВ1С(ДанныеСообщения, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки)

	СсылкаСообщения = ДанныеСообщения.Объект1С;	
	НачатьТранзакцию();
		Если ЗначениеЗаполнено(СсылкаСообщения) Тогда
			ОбъектСообщения = СсылкаСообщения.ПолучитьОбъект();
			ОбъектСообщения.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			Попытка
				Если УчетнаяЗаписьЭлектроннойПочты.скУдалятьНепосредственноВ1С Тогда
					ОбъектСообщения.Удалить();
				Иначе	
					ОбъектСообщения.ПометкаУдаления = Истина;
					ОбъектСообщения.Записать();
				КонецЕсли;
			
			Исключение
				СтрокаОшибки = СтрокаОшибки;		
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
			
			КонецПопытки;
			
		КонецЕсли;
		
		Если УчетнаяЗаписьЭлектроннойПочты.скУдалятьНепосредственноВ1С Тогда
			Попытка
				ДанныеСообщения.Удалить();			
			Исключение
				СтрокаОшибки = СтрокаОшибки + Символы.ПС + ОписаниеОшибки();	
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
		Иначе
			Если ОбъектСообщения <> Неопределено Тогда
				ДанныеСообщения.CRM_Папка = ОбъектСообщения.Ссылка.CRM_Папка;
			Иначе	
				ДанныеСообщения.CRM_Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(УчетнаяЗаписьЭлектроннойПочты, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные);
			КонецЕсли;
			
			Попытка
				ДанныеСообщения.Записать();			
			Исключение
				СтрокаОшибки = СтрокаОшибки + Символы.ПС + ОписаниеОшибки();	
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
				
		КонецЕсли;
				
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры

Функция ЗагрузитьОбновитьПочтовоеСообщенияВ1С(ДанныеСообщения, УчетнаяЗаписьЭлектроннойПочты, СтрокаОшибки) Экспорт
	
	СтруктураСтроки = ДанныеСообщения.ХранилищеДанныхСообщения.Получить();
	Если СтруктураСтроки = Неопределено Тогда
		//Повторный вызов сервера MS Exchange (пропуск)
		Возврат Неопределено;
	КонецЕсли;
	
	Если Найти(ВРег(ДанныеСообщения.АдресОтправителя), ВРег(УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты)) = 0
	  И Не (СтруктураСтроки.Свойство("IsDraft") И Булево(СтруктураСтроки.IsDraft)) Тогда
		МенеджерДокумента = Документы.ЭлектронноеПисьмоВходящее;
		ТипДокумента = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее");
		
	ИначеЕсли Найти(ВРег(ДанныеСообщения.АдресОтправителя), ВРег(УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты)) > 0 
		 ИЛИ (СтруктураСтроки.Свойство("IsDraft") И Булево(СтруктураСтроки.IsDraft)) Тогда
		МенеджерДокумента = Документы.ЭлектронноеПисьмоИсходящее;
		ТипДокумента = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее");
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПочтовоеСообщениеСсылка = ДанныеСообщения.Объект1С;
	Если ЗначениеЗаполнено(ПочтовоеСообщениеСсылка) И ТипЗнч(ПочтовоеСообщениеСсылка) <> ТипДокумента Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПочтовоеСообщениеСсылка) Тогда
		ПочтовоеСообщениеОбъект = ПочтовоеСообщениеСсылка.ПолучитьОбъект();
	Иначе	
		////Попробуем найти старое сообщение (заплатка)
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	ЭлектронноеПисьмо.Ссылка,
		//	|	ЭлектронноеПисьмо.ИдентификаторСообщения
		//	|ИЗ
		//	|	" + ОбщегоНазначения.ИмяТаблицыПоСсылке(МенеджерДокумента.ПустаяСсылка()) + " КАК ЭлектронноеПисьмо
		//	|ГДЕ
		//	|	ЭлектронноеПисьмо.ИдентификаторСообщения = &Идентификатор И ЭлектронноеПисьмо.УчетнаяЗапись = &УчетнаяЗапись";
		//	
		//Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьЭлектроннойПочты);
		//Запрос.УстановитьПараметр("Идентификатор", Лев(ДанныеСообщения.ID, 200));
		//Выборка = Запрос.Выполнить().Выбрать();
		//
		//Если Выборка.Количество() = 1 Тогда	
		//	Выборка.Следующий();
		//	ПочтовоеСообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		//	
		//ИначеЕсли Выборка.Количество() > 1 Тогда	
		//	Пока Выборка.Следующий() Цикл
		//		Если Выборка.ИдентификаторСообщения = ДанныеСообщения.ID Тогда
		//			ПочтовоеСообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		//		КонецЕсли;	
		//	КонецЦикла;
		//Иначе
			//// Новое почтовое сообщение
			//ПочтовоеСообщениеОбъект = МенеджерДокумента.СоздатьДокумент();		
		//КонецЕсли;
		// Новое почтовое сообщение
		ПочтовоеСообщениеОбъект = МенеджерДокумента.СоздатьДокумент();		
		
	КонецЕсли;
		
	НачатьТранзакцию();
	
		Если ЗначениеЗаполнено(ПочтовоеСообщениеОбъект.Ссылка) Тогда
			МассивФайлов = Новый Массив;
			ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(ПочтовоеСообщениеОбъект.Ссылка, МассивФайлов);
			Для каждого Файл Из МассивФайлов Цикл
				ФайлОбъект = Файл.ПолучитьОбъект();
				ФайлОбъект.Удалить();
			КонецЦикла;
		
		КонецЕсли;	
		
		ПочтовоеСообщениеОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Если ТипДокумента = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ПочтовоеСообщениеСсылка = ЗаписатьВходящееЭлектронноеПисьмо(УчетнаяЗаписьЭлектроннойПочты.скНастройкаОбменаПочтовымиСообщениями, 
				УчетнаяЗаписьЭлектроннойПочты, ДанныеСообщения, СтруктураСтроки, ПочтовоеСообщениеОбъект, СтрокаОшибки);		
		Иначе	
			ПочтовоеСообщениеСсылка = ЗаписатьИсходящееЭлектронноеПисьмо(УчетнаяЗаписьЭлектроннойПочты.скНастройкаОбменаПочтовымиСообщениями, 
				УчетнаяЗаписьЭлектроннойПочты, ДанныеСообщения, СтруктураСтроки, ПочтовоеСообщениеОбъект, СтрокаОшибки);		
		КонецЕсли;
	
	ЗафиксироватьТранзакцию();	
	
	Возврат ПочтовоеСообщениеСсылка;
	
КонецФункции // ЗагрузитьОбновитьПочтовоеСообщенияВ1С()

Функция ЗаполнитьПредставлениеПочтовогоАдреса(Адреса, ИмяПоля)

	Представление = "";
	
	Если ТипЗнч(Адреса) = Тип("ТаблицаЗначений")  Тогда
		Для Каждого СтрокаАдреса Из Адреса Цикл
			
			Адрес = СтрокаАдреса.Mailbox[0]; 
			Если ЗначениеЗаполнено(Представление) Тогда
				Представление = Представление + ", ";
			КонецЕсли;
			
			Представление = Представление + Адрес[ИмяПоля];
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Представление;

КонецФункции

#Область Входящее

Функция ЗаписатьВходящееЭлектронноеПисьмо(
	Настройка,
	УчетнаяЗапись,
	ДанныеСообщения, 
	Сообщение,
	Письмо,
	СтрокаОшибки) Экспорт
		
	// Заполним реквизиты документа на основе сообщения
	Письмо.УчетнаяЗапись = УчетнаяЗапись;
	ЗаполнитьДокументЭлектронноеПисьмоВходящее(Письмо, ДанныеСообщения, Сообщение);

	// Найдем основание письма, определим предмет и контакты
	Предмет = Неопределено;
	Папка   = Неопределено;
	ЗаполнитьПредметИКонтакты(Письмо, Предмет);
	
	// Заполним ответственного
	Письмо.Ответственный = ДанныеСообщения.Ответственный;
	Письмо.CRM_Папка 	 = ДанныеСообщения.CRM_Папка;
	
	// Запишем письмо
	Письмо.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Письмо.Записать();
	
	ДанныеСообщения.Объект1С = Письмо.Ссылка;
	
	// Создадим напоминание о новом письме
	CRM_ОповещенияСервер.СформироватьНапоминаниеОНовомПисьме(Письмо.Ссылка);
	
	// Снимем установим отметку о прочтение
	ДанныеСообщения.Рассмотрено = Истина;
		
	//Установим папку письма  и предмет
	//СтруктураДляЗаписи = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(
	//                    Папка,?(ЗначениеЗаполнено(Предмет),Предмет,Письмо.Ссылка), , , Ложь);
	//ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, СтруктураДляЗаписи);
	
	//Запишем вложения	
	Если Сообщение.Свойство("Attachments") 
	  И ТипЗнч(Сообщение.Attachments) = Тип("ТаблицаЗначений") 
	  И Сообщение.Attachments.Количество() > 0 Тогда
	  
		МассивИменВложений   = Новый Массив;
		МассивДанныхВложений = Новый Массив;
	  
		Подключение  = скMSExchange_ОбменПочтовымиСообщениямиСервер.СформироватьСтруктуруПодключения(Настройка);
		Для каждого ТаблицаВложения Из Сообщение.Attachments Цикл
			Если Сообщение.Attachments.Колонки.Найти("ItemAttachment") <> Неопределено Тогда
				Для каждого ItemAttachment Из ТаблицаВложения.ItemAttachment Цикл
					МассивИменВложений.Добавить(ItemAttachment.Name);
					МассивДанныхВложений.Добавить(ItemAttachment);
			    КонецЦикла;
			КонецЕсли;
			
			Если Сообщение.Attachments.Колонки.Найти("FileAttachment") <> Неопределено Тогда
				Для каждого FileAttachment Из ТаблицаВложения.FileAttachment Цикл
					МассивИменВложений.Добавить(FileAttachment.Name);
					МассивДанныхВложений.Добавить(FileAttachment);
			    КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		
		РасширениеДляФайловПодписи =  ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "РасширениеДляФайловПодписи");
		Если РасширениеДляФайловПодписи = Неопределено ИЛИ ПустаяСтрока(РасширениеДляФайловПодписи) Тогда
			РасширениеДляФайловПодписи = "p7s";
		КонецЕсли;
		
		//+вог
		//СоответствиеВложенийИПодписей =
		//	ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСоответствиеФайловИПодписей(МассивИменВложений, РасширениеДляФайловПодписи);
		СоответствиеВложенийИПодписей = Новый Соответствие;
		//-вог	
			
		КоличествоПустыхИменВоВложениях = 0;
		Для каждого ЭлементСоответствия Из СоответствиеВложенийИПодписей Цикл
			
			НайденноеВложение = Неопределено;
			МассивПодписей    = Новый Массив;
			
			Для каждого Вложение Из МассивДанныхВложений Цикл
				Если Вложение.Name = ЭлементСоответствия.Ключ Тогда
					НайденноеВложение = Вложение;
					Прервать;
				КонецЕсли
			КонецЦикла;
						
			Если НайденноеВложение <> Неопределено И ЭлементСоответствия.Значение.Количество() > 0 Тогда
				Для каждого Вложение Из МассивДанныхВложений Цикл
					Если ЭлементСоответствия.Значение.Найти(Вложение.Name) <> Неопределено Тогда
						МассивПодписей.Добавить(Вложение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НайденноеВложение <> Неопределено Тогда
				//+CRM
				// Проверим расширение вложения электронного письма	
				СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(Вложение.Name);
				Если СтрокиПути.Количество() > 1 Тогда
					РасширениеФайла = СтрокиПути[СтрокиПути.Количество()-1];
					Если НЕ РаботаСФайламиСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, Ложь) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
					//-CRM
				ЗаписатьВложениеЭлектронногоПисьма(
					Подключение,
					Письмо,НайденноеВложение,
					МассивПодписей,
					КоличествоПустыхИменВоВложениях,
					СтрокаОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Письмо.НепринятыеВложения.Количество() Тогда
			Письмо.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			Письмо.Записать();
		КонецЕсли;
		
	КонецЕсли;
		
	// Запишем идентификатор
	ЗаписатьИдентификаторПолученногоПисьма(УчетнаяЗапись,
		Письмо.ИдентификаторНаСервере,
		ДанныеСообщения.Дата);
		
	Если Письмо.УведомитьОПрочтении Тогда
		ЗаписатьНеобходимостьОбработкиУведомленияОПрочтении(Письмо.Ссылка);
	КонецЕсли;
		
	ДанныеСообщения.Записать();
	
	Возврат Письмо.Ссылка;
	
КонецФункции

Процедура ЗаполнитьДокументЭлектронноеПисьмоВходящее(Письмо, ДанныеСообщения, Сообщение) Экспорт
	
	Письмо.Важность				  = ДанныеСообщения.Важность;
	Письмо.Дата 				  = ДанныеСообщения.Дата;
	Письмо.ДатаПолучения		  = ДанныеСообщения.Получено;
	
	Если Сообщение.Свойство("InternetMessageHeaders")
	  И ТипЗнч(Сообщение.InternetMessageHeaders) = Тип("ТаблицаЗначений")
	  И Сообщение.InternetMessageHeaders.Количество() > 0 Тогда
		Письмо.ВнутреннийЗаголовок 	  = Сообщение.InternetMessageHeaders[0].InternetMessageHeader;
	КонецЕсли;
	
	Письмо.ИдентификаторНаСервере = Сообщение.InternetMessageId;
	Письмо.ИдентификаторСообщения = Сообщение.ID;
	Письмо.Кодировка			  = "utf-8";
	Если Сообщение.Свойство("IsDeliveryReceiptRequested")
	  И ЗначениеЗаполнено(Сообщение.IsDeliveryReceiptRequested) Тогда
		Письмо.УведомитьОДоставке = Булево(Сообщение.IsDeliveryReceiptRequested);
	КонецЕсли;
	
	Если Сообщение.Свойство("IsReadReceiptRequested")
	  И ЗначениеЗаполнено(Сообщение.IsReadReceiptRequested) Тогда
		Письмо.УведомитьОПрочтении = Булево(Сообщение.IsReadReceiptRequested);
	КонецЕсли;
	
	Письмо.ОтправительАдрес = ДанныеСообщения.АдресОтправителя;
	
	Письмо.ОтправительПредставление = 
		?(ПустаяСтрока(ДанныеСообщения.Отправитель), ДанныеСообщения.АдресОтправителя, ДанныеСообщения.Отправитель + " <"+ДанныеСообщения.АдресОтправителя+">");
		
	Письмо.Размер = Сообщение.Size;
	Письмо.Тема   = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ДанныеСообщения.Тема,"_");
	
	УстановитьТекстПисьма(Письмо, Сообщение);
	
	Если Сообщение.Свойство("CcRecipients") 
	  И Сообщение.CcRecipients <> Неопределено Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиКопий,  Сообщение.CcRecipients);
	КонецЕсли;
		
	Если Сообщение.Свойство("ReplyTo") 
	  И Сообщение.ReplyTo <> Неопределено Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиОтвета, Сообщение.ReplyTo);
	КонецЕсли;
	
	Если Сообщение.Свойство("ToRecipients") 
	  И Сообщение.ToRecipients <> Неопределено Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиПисьма, Сообщение.ToRecipients);
	ИначеЕсли Сообщение.Свойство("ReceivedBy") 
	  И Сообщение.ReceivedBy <> Неопределено Тогда	
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиПисьма, Сообщение.ReceivedBy);
	КонецЕсли;
	
	Если Письмо.УведомитьОПрочтении Тогда
		НоваяСтрока = Письмо.АдресаУведомленияОПрочтении.Добавить();
		НоваяСтрока.Адрес = Письмо.ОтправительАдрес;
		НоваяСтрока.Представление = Письмо.ОтправительПредставление;	
		
	КонецЕсли;
	
	//+CRM	
	Письмо.СписокПолучателейПисьма	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма),"_");
	Письмо.СписокПолучателейКопий	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий),"_");
	//-CRM	
	
	Письмо.ИдентификаторОснования    = ИзПисьмаПолучитьИдентификаторОснования(Сообщение);
	Если Сообщение.Свойство("References") Тогда
		Письмо.ИдентификаторыОснований = Сообщение.References;
	КонецЕсли;
	Письмо.ЕстьВложения              = ДанныеСообщения.ЕстьВложения;
	
КонецПроцедуры

Процедура УстановитьКонтактыВоВходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса)

	ОбработатьПоляКонтактИАдрес(Письмо.ОтправительАдрес, Письмо.ОтправительКонтакт, СоответствиеКонтактов, НеопределенныеАдреса);
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиПисьма Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиКопий Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиОтвета Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьНеобходимостьОбработкиУведомленияОПрочтении(Письмо)
	
	Запись = РегистрыСведений.УведомленияОПрочтении.СоздатьМенеджерЗаписи();
	Запись.Письмо = Письмо;
	Запись.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Исходящее

Функция ЗаписатьИсходящееЭлектронноеПисьмо(
	Настройка,
	УчетнаяЗапись,
	ДанныеСообщения, 
	Сообщение,
	Письмо,
	СтрокаОшибки) Экспорт
	
	// Заполним реквизиты документа на основе сообщения
	Письмо.УчетнаяЗапись = УчетнаяЗапись;
	ЗаполнитьДокументЭлектронноеПисьмоИсходящее(Письмо, ДанныеСообщения, Сообщение);

	// Найдем основание письма, определим предмет и контакты
	Предмет = Неопределено;
	Папка   = Неопределено;
	ЗаполнитьПредметИКонтакты(Письмо, Предмет);
	
	// Заполним ответственного
	Письмо.Автор		 = ДанныеСообщения.Ответственный;
	Письмо.Ответственный = ДанныеСообщения.Ответственный;
	Письмо.CRM_Папка 	 = ДанныеСообщения.CRM_Папка;
	Если Сообщение.Свойство("IsDraft")
	  И Булево(Сообщение.IsDraft)Тогда
		Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
	Иначе
		Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
	КонецЕсли;
	
	//Письмо.скОтправлятьВФорматеHTML = Истина;
	
	// Запишем письмо
	Письмо.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Письмо.Записать();
	
	ДанныеСообщения.Объект1С = Письмо.Ссылка;
	
	// Создадим напоминание о новом письме
	CRM_ОповещенияСервер.СформироватьНапоминаниеОНовомПисьме(Письмо.Ссылка);
	
	// Снимем установим отметку о прочтение
	ДанныеСообщения.Рассмотрено = Истина;
		
	//Установим папку письма  и предмет
	//СтруктураДляЗаписи = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(
	//                    Папка,?(ЗначениеЗаполнено(Предмет),Предмет,Письмо.Ссылка), , , Ложь);
	//ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, СтруктураДляЗаписи);
	
	//Запишем вложения	
	Если Сообщение.Свойство("Attachments") 
	  И ТипЗнч(Сообщение.Attachments) = Тип("ТаблицаЗначений") 
	  И Сообщение.Attachments.Количество() > 0 Тогда
	  
		МассивИменВложений   = Новый Массив;
		МассивДанныхВложений = Новый Массив;
	  
		Подключение  = скMSExchange_ОбменПочтовымиСообщениямиСервер.СформироватьСтруктуруПодключения(Настройка);
		Для каждого ТаблицаВложения Из Сообщение.Attachments Цикл
			Если Сообщение.Attachments.Колонки.Найти("ItemAttachment") <> Неопределено Тогда
				Для каждого ItemAttachment Из ТаблицаВложения.ItemAttachment Цикл
					МассивИменВложений.Добавить(ItemAttachment.Name);
					МассивДанныхВложений.Добавить(ItemAttachment);
			    КонецЦикла;
			КонецЕсли;
			
			Если Сообщение.Attachments.Колонки.Найти("FileAttachment") <> Неопределено Тогда
				Для каждого FileAttachment Из ТаблицаВложения.FileAttachment Цикл
					МассивИменВложений.Добавить(FileAttachment.Name);
					МассивДанныхВложений.Добавить(FileAttachment);
			    КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		
		РасширениеДляФайловПодписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "РасширениеДляФайловПодписи");
		Если РасширениеДляФайловПодписи = Неопределено ИЛИ ПустаяСтрока(РасширениеДляФайловПодписи) Тогда
			РасширениеДляФайловПодписи = "p7s";
		КонецЕсли;
		
		//+вог
		//СоответствиеВложенийИПодписей =
		//	ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСоответствиеФайловИПодписей(МассивИменВложений, РасширениеДляФайловПодписи);
		СоответствиеВложенийИПодписей = Новый Соответствие;
		
		//в
		КоличествоПустыхИменВоВложениях = 0;
		Для каждого ЭлементСоответствия Из СоответствиеВложенийИПодписей Цикл
			
			НайденноеВложение = Неопределено;
			МассивПодписей    = Новый Массив;
			
			Для каждого Вложение Из МассивДанныхВложений Цикл
				Если Вложение.Name = ЭлементСоответствия.Ключ Тогда
					НайденноеВложение = Вложение;
					Прервать;
				КонецЕсли
			КонецЦикла;
						
			Если НайденноеВложение <> Неопределено И ЭлементСоответствия.Значение.Количество() > 0 Тогда
				Для каждого Вложение Из МассивДанныхВложений Цикл
					Если ЭлементСоответствия.Значение.Найти(Вложение.Name) <> Неопределено Тогда
						МассивПодписей.Добавить(Вложение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НайденноеВложение <> Неопределено Тогда
				//+CRM
				// Проверим расширение вложения электронного письма	
				СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(Вложение.Name);
				Если СтрокиПути.Количество() > 1 Тогда
					РасширениеФайла = СтрокиПути[СтрокиПути.Количество()-1];
					Если НЕ РаботаСФайламиСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, Ложь) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				//-CRM
				ЗаписатьВложениеЭлектронногоПисьма(
					Подключение,
					Письмо, 
					НайденноеВложение,
					МассивПодписей,
					КоличествоПустыхИменВоВложениях,
					СтрокаОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
				
	ДанныеСообщения.Записать();
	
	Возврат Письмо.Ссылка;
	
КонецФункции

Процедура ЗаполнитьДокументЭлектронноеПисьмоИсходящее(Письмо, ДанныеСообщения, Сообщение) Экспорт
	
	Письмо.Важность				  = ДанныеСообщения.Важность;
	Письмо.Дата 				  = ДанныеСообщения.Дата;
	Письмо.ДатаОтправления		  = ДанныеСообщения.Отправлено;	
	Письмо.ИдентификаторСообщения = Сообщение.ID;
	Письмо.Кодировка			  = "utf-8";
	Если Сообщение.Свойство("IsDeliveryReceiptRequested")
	  И ЗначениеЗаполнено(Сообщение.IsDeliveryReceiptRequested) Тогда
		Письмо.УведомитьОДоставке = Булево(Сообщение.IsDeliveryReceiptRequested);
	КонецЕсли;
	
	Если Сообщение.Свойство("IsReadReceiptRequested")
	  И ЗначениеЗаполнено(Сообщение.IsReadReceiptRequested) Тогда
		Письмо.УведомитьОПрочтении = Булево(Сообщение.IsReadReceiptRequested);
	КонецЕсли;
	
	Письмо.ОтправительПредставление = 
		?(ПустаяСтрока(ДанныеСообщения.Отправитель), ДанныеСообщения.АдресОтправителя, ДанныеСообщения.Отправитель + " <"+ДанныеСообщения.АдресОтправителя+">");
		
	Письмо.Размер = Сообщение.Size;
	Письмо.Тема   = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ДанныеСообщения.Тема,"_");
	
	УстановитьТекстПисьма(Письмо, Сообщение);
	
	Если Сообщение.Свойство("CcRecipients") 
	  И Сообщение.CcRecipients <> Неопределено Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиКопий,  Сообщение.CcRecipients);
	КонецЕсли;
		
	Если Сообщение.Свойство("ReplyTo") 
	  И Сообщение.ReplyTo <> Неопределено Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиОтвета, Сообщение.ReplyTo);
	КонецЕсли;
	
	Если Сообщение.Свойство("ToRecipients") 
	  И Сообщение.ToRecipients <> Неопределено Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиПисьма, Сообщение.ToRecipients);
	ИначеЕсли Сообщение.Свойство("ReceivedBy") 
	  И Сообщение.ReceivedBy <> Неопределено Тогда	
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиПисьма, Сообщение.ReceivedBy);
	КонецЕсли;
	
	Если Сообщение.Свойство("BccRecipients") 
	  И Сообщение.BccRecipients <> Неопределено Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиСкрытыхКопий, Сообщение.BccRecipients);
	КонецЕсли;
	
	//+CRM	
	Письмо.СписокПолучателейПисьма		 = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма),"_");
	Письмо.СписокПолучателейКопий		 = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий),"_");
	Письмо.СписокПолучателейСкрытыхКопий = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиСкрытыхКопий),"_");
	//-CRM	
	
	Письмо.ИдентификаторОснования    = ИзПисьмаПолучитьИдентификаторОснования(Сообщение);
	Если Сообщение.Свойство("References") Тогда
		Письмо.ИдентификаторыОснований = Сообщение.References;
	КонецЕсли;
	
	Письмо.ЕстьВложения = ДанныеСообщения.ЕстьВложения;
	
КонецПроцедуры

Процедура УстановитьКонтактыВИсходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса)
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиПисьма Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиКопий Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиСкрытыхКопий Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиОтвета Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВходящиеИсходящие

Процедура ЗаполнитьПредметИКонтакты(Письмо, Предмет)
	
	//-----------------------------------------------------------------
	// Получим идентификаторы писем оснований
	МассивИдентификаторов = Новый Массив;
	СтрокаИдентификаторы = Письмо.ИдентификаторыОснований;
	Пока Не ПустаяСтрока(СтрокаИдентификаторы) Цикл
		Позиция = Найти(СтрокаИдентификаторы, "<");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
		
		Позиция = Найти(СтрокаИдентификаторы, ">");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТекущийИдентификатор = СокрЛП(Лев(СтрокаИдентификаторы, Позиция-1));
		СтрокаИдентификаторы = СокрЛП(Сред(СтрокаИдентификаторы, Позиция+1));
		
		Если Не ПустаяСтрока(ТекущийИдентификатор) Тогда
			МассивИдентификаторов.Добавить(ТекущийИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Если (МассивИдентификаторов.Найти(Письмо.ИдентификаторОснования) = Неопределено) И
		(НЕ ПустаяСтрока(Письмо.ИдентификаторОснования)) Тогда
		МассивИдентификаторов.Добавить(Письмо.ИдентификаторОснования);
	КонецЕсли;
	
	Если МассивИдентификаторов.Найти(Письмо.ИдентификаторСообщения) = Неопределено 
		И НЕ ПустаяСтрока(Письмо.ИдентификаторСообщения) Тогда
		МассивИдентификаторов.Добавить(Письмо.ИдентификаторСообщения);
	КонецЕсли;
	
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(МассивИдентификаторов);

	//-----------------------------------------------------------------
	// Получим все основания
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоВходящее.Дата КАК Дата
	|ПОМЕСТИТЬ ВсеЭлектронныеПисьма
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ТаблицаИдентификаторов.Идентификатор = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Дата
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ТаблицаИдентификаторов.Идентификатор = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеЭлектронныеПисьма.Ссылка,
	|	ВсеЭлектронныеПисьма.Дата КАК Дата
	|ИЗ
	|	ВсеЭлектронныеПисьма КАК ВсеЭлектронныеПисьма
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Письмо.ВзаимодействиеОснование = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
	//-----------------------------------------------------------------
	// Получим предмет взаимодействия
	Если ЗначениеЗаполнено(Письмо.ВзаимодействиеОснование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Предмет,
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка,
		|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ПредопределеннаяПапка
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Взаимодействие = &ВзаимодействиеОснование";
		
		Запрос.УстановитьПараметр("ВзаимодействиеОснование", Письмо.ВзаимодействиеОснование );
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Предмет = Письмо.Ссылка;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Предмет = Выборка.Предмет;
		КонецЕсли; 
	КонецЕсли;

	//-----------------------------------------------------------------
	// Получим проставленные контакты в предмете
	СоответствиеКонтактов = ПолучитьСоответствиеКонтактовВПисьме(Письмо.ВзаимодействиеОснование);

	//-----------------------------------------------------------------
	// Проставим контакты на основании предмета
	НеопределенныеАдреса = Новый Массив;
	Если ТипЗнч(Письмо) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		УстановитьКонтактыВоВходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса);
	Иначе	
		УстановитьКонтактыВИсходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЕсли;

	//-----------------------------------------------------------------
	// Если есть неопределенные адреса, то поищем их по контактной информации
//+CMR
	СоответствиеКонтактов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(НеопределенныеАдреса,Письмо.УчетнаяЗапись.АдресЭлектроннойПочты);
	//СоответствиеКонтактов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(НеопределенныеАдреса);
//-CMR
	Если СоответствиеКонтактов.Количество() > 0 Тогда
		Если ТипЗнч(Письмо) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
			УстановитьКонтактыВоВходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса);
		Иначе	
			УстановитьКонтактыВИсходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(масАдреса, АдресУЗ)
//+CMR
//Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(масАдреса)
//-CMR

	СоответствиеКонтактов = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка КАК Ссылка,
	|		Контакты.АдресЭП КАК АдресЭП,
//+CRM
	|		Контакты.Флаг КАК Флаг
//-CRM
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП,
//+CRM
	|		3 КАК Флаг
//-CRM
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.АдресЭП В(&масАдреса)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|		И НЕ КонтактнаяИнформация.АдресЭП = &АдресУЗ
	|";
	
	//МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	МассивОписанияТиповКонтактов = Новый Массив;
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка,
		|		КонтактнаяИнформация.АдресЭП,";
//+CRM
		Если ЭлементМассиваОписания.Имя = "КонтактныеЛицаПартнеров" Тогда
			Запрос.Текст = Запрос.Текст + "
			|		0 КАК Флаг";
		ИначеЕсли ЭлементМассиваОписания.Имя = "Партнеры" Тогда
			Запрос.Текст = Запрос.Текст + "
			|		1 КАК Флаг";
		ИначеЕсли ЭлементМассиваОписания.Имя = "ФизическиеЛица" Тогда
			Запрос.Текст = Запрос.Текст + "
			|		2 КАК Флаг";
		КонецЕсли;
//-CRM
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП В(&масАдреса)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;	
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты
//+CRM
	|УПОРЯДОЧИТЬ ПО
	|	Контакты.Флаг
//-CRM
	|ИТОГИ ПО
	|	АдресЭП";

	Запрос.УстановитьПараметр("АдресУЗ", АдресУЗ);
	Запрос.УстановитьПараметр("масАдреса", масАдреса);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если (ВыборкаПоСсылкам.Следующий()) Тогда
			СоответствиеКонтактов.Вставить(Врег(Выборка.АдресЭП), ВыборкаПоСсылкам.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;

КонецФункции

Процедура ОбработатьПоляКонтактИАдрес(Адрес, Контакт, СоответствиеКонтактов, НеопределенныеАдреса)
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйКонтакт = СоответствиеКонтактов.Получить(ВРег(Адрес));
	Если НайденныйКонтакт <> Неопределено И ТипЗнч(НайденныйКонтакт) <> Тип("Строка") Тогда
		Контакт = НайденныйКонтакт;
		Возврат;
	КонецЕсли;
	
	//Контакт = Адрес;
	Если НеопределенныеАдреса.Найти(Адрес) = Неопределено Тогда
		НеопределенныеАдреса.Добавить(Адрес);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВложениеЭлектронногоПисьма(Подключение, Объект, Вложение, МассивПодписей, КоличествоПустыхИменВоВложениях, СтрокаОшибки) Экспорт 
	
	ПисьмоСсылка = Объект.Ссылка;
	
	Попытка
		ДанныеВложения = Вложение.ДанныеВложения; 
	Исключение
		//Вызов сервера MS Exchange
		ДанныеВложения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьВложение(Подключение, Вложение.Атрибут_Id,, СтрокаОшибки); 
	КонецПопытки;
	
	Если ТипЗнч(ДанныеВложения) = Тип("ТаблицаЗначений")
	  И ДанныеВложения.Количество() > 0 Тогда
	  
		Размер		 = 0;
	  
	  	СтрокаВложения = ДанныеВложения[0];
		ДанныеВложения = Base64Значение(СтрокаВложения.Content);
		Попытка
			Идентификатор = СтрокаВложения.ContentId;						
		Исключение
		КонецПопытки;
		
		Попытка
			Если Не Булево(Вложение.IsInline)
			  И ЗначениеЗаполнено(Идентификатор) Тогда
				Идентификатор = Неопределено;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ТипЗнч(ДанныеВложения) = Тип("ДвоичныеДанные") Тогда
			Размер = Число(Вложение.Size);
		КонецЕсли;
		
		Адрес = ПоместитьВоВременноеХранилище(ДанныеВложения, "");
		
		//+CRM
		// Во вложение иногда портится Вложение.ИмяФайла, лучше использовать Вложение.Имя	
		
		//ВложениеПисьмаСсылка = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		//	Объект, Адрес, Вложение.ИмяФайла, Размер,КоличествоПустыхИменВоВложениях);
		ВложениеПисьмаСсылка = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Объект.Ссылка, Адрес,
			CRM_УправлениеЭлектроннойПочтой.ЗаменитьЗапрещенныеСимволыВИмениФайла(Вложение.Name), Размер,КоличествоПустыхИменВоВложениях, 
			?(ЗначениеЗаполнено(Идентификатор),Идентификатор,Неопределено));
		//-CRM
		
		ЕстьПодписи = (МассивПодписей.Количество() > 0);
		ЭтоОтображаемыйФайл = ЗначениеЗаполнено(Идентификатор);
		
		Если ЕстьПодписи Или ЭтоОтображаемыйФайл Тогда
			
			ВложениеПисьмаОбъект = ВложениеПисьмаСсылка.ПолучитьОбъект();
			
			Если ЕстьПодписи Тогда
				
				Для Каждого ПодписьВложения Из МассивПодписей Цикл
					ЭП = ВложениеПисьмаОбъект.ЭлектронныеПодписи.Добавить();
					
					ДанныеПодписи = ЭлектроннаяПодпись.ПрочитатьДанныеПодписи(ПодписьВложения.Данные);
					Если ДанныеПодписи <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ЭП, ДанныеПодписи);
					КонецЕсли;
					
					ЭП.Подпись = Новый ХранилищеЗначения(ПодписьВложения.Данные);
					ЭП.Комментарий = НСтр("ru = 'Вложение электронного письма'");
					ЭП.ДатаПодписи = ТекущаяДатаСеанса();
				КонецЦикла;
				
				ВложениеПисьмаОбъект.ПодписанЭП = Истина;
				
			КонецЕсли;
			
			Если ЭтоОтображаемыйФайл Тогда
				
				ВложениеПисьмаОбъект.ИДФайлаЭлектронногоПисьма = Идентификатор;
				
			КонецЕсли;
			
			ВложениеПисьмаОбъект.Записать();
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(Адрес);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
	Письмо,
	АдресВоВременномХранилище,
	ИмяФайла,
	Размер,
	//+CRM
	//КоличествоПустыхИменВоВложениях = 0) Экспорт
	КоличествоПустыхИменВоВложениях = 0,
 	ИдентификаторПочтовогоВложения = Неопределено) Экспорт
	//-CRM
	
	ИмяФайлаДляРазбора = ИмяФайла;
	//РасширениеБезТочки = ВзаимодействияКлиентСервер.ШаблоныСообщенийСлужебный(ИмяФайлаДляРазбора);
	РасширениеБезТочки = "";
//+CRM
	//ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора, "_");
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ИмяБезРасширения, "_");
//-CRM
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		
		ИмяФайлаБезРасширения =
			НСтр("ru = 'Вложение без имени'") + ?(КоличествоПустыхИменВоВложениях = 0, ""," " + Строка(КоличествоПустыхИменВоВложениях + 1));
		КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
		
	Иначе
		ИмяБезРасширения =
			?(РасширениеБезТочки = "",
			ИмяБезРасширения,
			Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	КонецЕсли;
//+CRM
	ВремяИзменения = ТекущаяДатаСеанса();
//-CRM
	Возврат ПрисоединенныеФайлы.ДобавитьФайл(
		Письмо,
		ИмяБезРасширения,
		РасширениеБезТочки,
		,
		,
		АдресВоВременномХранилище,
			//+CRM
			"",
			"",
			Неопределено,
			Ложь,
			ИдентификаторПочтовогоВложения);
			//-CRM
	
КонецФункции

Функция ИзПисьмаПолучитьИдентификаторОснования(Сообщение)
	
	Если Не Сообщение.Свойство("InReplyTo") Тогда
		Возврат "";			
	КонецЕсли;
	
	СтрокаИдентификаторы = СокрЛП(Сообщение.InReplyTo);
	
	Позиция = Найти(СтрокаИдентификаторы, "<");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
	КонецЕсли;
	
	Позиция = Найти(СтрокаИдентификаторы, ">");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Лев(СтрокаИдентификаторы, Позиция-1);
	КонецЕсли;

	Возврат СтрокаИдентификаторы;

КонецФункции

Процедура УстановитьТекстПисьма(Письмо, Сообщение)
	
	ТекстHTML = "";
	ТекстПростой = "";
	ТекстРазмеченный = "";
	
	Если Сообщение.Атрибут_BodyType = "HTML" Тогда
		ТекстHTML = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Body,"_");
	Иначе
		ТекстПростой = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Body,"_");
	КонецЕсли;
	
	Если ТекстHTML <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Письмо.ТекстHTML = ТекстHTML;
		Письмо.Текст = ?(ТекстПростой <> "", ТекстПростой, ПолучитьПростойТекстИзHTML(ТекстHTML));
		
	Иначе
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		Письмо.Текст = ТекстПростой;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПростойТекстИзHTML(ТекстHTML)
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	Возврат ДокументHTML.Тело.ТекстовоеСодержимое;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСоответствиеКонтактовВПисьме(Письмо)
	
	СоответствиеКонтактов = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Письмо) Тогда
		Возврат СоответствиеКонтактов;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адреса.Адрес,
	|	Адреса.Контакт
	|ИЗ
	|	(" + ?(ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"), "", "ВЫБРАТЬ
	|		ПОДСТРОКА(ЭлектронноеПисьмоВходящее.ОтправительАдрес, 1, 100) КАК Адрес,
	|		ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|	ГДЕ
	|		ЭлектронноеПисьмоВходящее.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	") + "ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо) КАК Адреса
	|ГДЕ
	|	(НЕ Адреса.Контакт ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контакт) <> Тип("Строка") Тогда
			СоответствиеКонтактов.Вставить(Выборка.Адрес, Выборка.Контакт);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;
	
КонецФункции

Процедура ЗаписатьИдентификаторПолученногоПисьма(УчетнаяЗапись, Идентификатор, ДатаПолучения)

	Запись = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьМенеджерЗаписи();
	Запись.УчетнаяЗапись = УчетнаяЗапись;
	Запись.Идентификатор = Идентификатор;
	Запись.ДатаПолучения = ДатаПолучения;
	Запись.Записать();

КонецПроцедуры

Процедура ЗаполнитьИнтернетПочтовыеАдреса(ТабличнаяЧасть, Адреса)
	
	Если ТипЗнч(Адреса) = Тип("ТаблицаЗначений")  Тогда
		Для Каждого СтрокаАдреса Из Адреса Цикл
			Адрес = СтрокаАдреса.Mailbox[0]; 
			
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.Адрес = Адрес.EmailAddress;
			НоваяСтрока.Представление = Адрес.Name;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьТаблицуСИдентификаторами(Идентификаторы)
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(250)));
	Для Каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Возврат ТаблицаИдентификаторов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработкаИзмененийДанных

Процедура ВыполнитьОбработкуИзмененийВMSExchange(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, УзелДляОбмена, МетаданныеОбъекта, МассивВыгруженныхДанных, СтрокаОшибки)
	
	Если ТипЗнч(МетаданныеОбъекта) <> Тип("Массив") Тогда
		МассивВыгружаемыхМетаданных = Новый Массив;
		МассивВыгружаемыхМетаданных.Добавить(МетаданныеОбъекта);
	Иначе		
		МассивВыгружаемыхМетаданных = МетаданныеОбъекта;		
	КонецЕсли;
	
	ВыборкаИзменений = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеИзмененийВ1С(УзелДляОбмена, МассивВыгружаемыхМетаданных); 
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		ТипДанныхДляВыгрузки = ТипЗнч(Данные);
		
		// отрабатываем удаление объекта
		Если ТипДанныхДляВыгрузки = Тип("УдалениеОбъекта") Тогда
			ОтработатьУдалениеОбъектаВMSExchange(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, Данные, МассивВыгруженныхДанных, СтрокаОшибки);
			Продолжить;
		КонецЕсли;
		
		Если Не ВыгрузкаДанныхРазрешена(УзелДляОбмена, Данные) Тогда
			МассивВыгруженныхДанных.Добавить(Данные.Ссылка);	
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Данные) = Тип("СправочникОбъект.ПапкиЭлектронныхПисем") Тогда
			Если ЗагрузитьЭлементыСтруктурыПапок1С(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, Данные, СтрокаОшибки) Тогда
				МассивВыгруженныхДанных.Добавить(Данные.Ссылка);
			Иначе
				ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Не удалось загрузить элемент структуры папок в MS Exchange. '"));
			КонецЕсли;	
			
			Продолжить;
			
		ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
			ТипПочтовогоСообщения = "Входящее";
		ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
			ТипПочтовогоСообщения = "Исходящее";
		Иначе
			ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Не определен тип выгружаемого объекта в MS Exchange. '"));
			Продолжить;
			
		КонецЕсли;
		
		Если ЗагрузитьОбновитьДанныеПочтовогоСообщенияВMSExchange(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, ТипПочтовогоСообщения, Данные, СтрокаОшибки) Тогда
			МассивВыгруженныхДанных.Добавить(Данные.Ссылка);	
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОтработатьУдалениеОбъектаВMSExchange(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, Данные, МассивВыгруженныхДанных, СтрокаОшибки)
	
	//Не реализовано
	
КонецПроцедуры

Функция ВыгрузкаДанныхРазрешена(УзелОбмена, ОбъектСсылки, ДополнительныеСвойства = Неопределено)
	
    Если ОбъектСсылки = Неопределено Тогда
        // Объект удален, можно всегда
        Возврат Истина;
    КонецЕсли;

    Если ДополнительныеСвойства <> Неопределено Тогда
        Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл
            ОбъектСсылки.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
        КонецЦикла;
    КонецЕсли;

    Отправка = ОтправкаЭлементаДанных.Авто;
    ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ОбъектСсылки, Отправка, , УзелОбмена);
    Возврат Отправка = ОтправкаЭлементаДанных.Авто;

КонецФункции

#КонецОбласти

#Область ВыгрузкаОбновлениеСтрукутрыПапок

Процедура СинхронизироватьСтруктуруПапокВMSExchange(Настройка, Подключение, УчетнаяЗаписьЭлектроннойПочты, УзелДляОбмена, МассивВыгруженныхДанных, СтрокаОшибки = "") Экспорт
	
	ВыполнитьОбработкуИзмененийВMSExchange(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, 
		УзелДляОбмена, Метаданные.Справочники.УдалитьCRM_ПапкиЭлектронныхПисем, МассивВыгруженныхДанных, СтрокаОшибки);		
	
КонецПроцедуры

Функция ЗагрузитьЭлементыСтруктурыПапок1С(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, Данные, СтрокаОшибки)
	
	//Не реализовано  
	Возврат Истина;	
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаОбновлениеПочтовыхСообщений 

Процедура СинхронизироватьЭлементыВMSExchange(Настройка, Подключение, УчетнаяЗаписьЭлектроннойПочты, УзелДляОбмена, МассивВыгруженныхДанных, СтрокаОшибки = "")

	МассивВыгружаемыхМетаданных = Новый Массив;
	МассивВыгружаемыхМетаданных.Добавить(Метаданные.Документы.ЭлектронноеПисьмоВходящее);
	МассивВыгружаемыхМетаданных.Добавить(Метаданные.Документы.ЭлектронноеПисьмоИсходящее);
	
	ВыполнитьОбработкуИзмененийВMSExchange(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, 
		УзелДляОбмена, МассивВыгружаемыхМетаданных, МассивВыгруженныхДанных, СтрокаОшибки);		

КонецПроцедуры

Функция ЗагрузитьОбновитьДанныеПочтовогоСообщенияВMSExchange(Подключение, Настройка, УчетнаяЗаписьЭлектроннойПочты, ТипПочтовогоСообщения, ПочтовоеСообщениеОбъект, СтрокаОшибки)
		
	ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоОбъекту1С(ПочтовоеСообщениеОбъект.Ссылка);
	НеобходимоСоздатьОбъектВMSExchange = ДанныеСообщения.ID = XMLСтрока(ПочтовоеСообщениеОбъект.Ссылка);
	
	Если ЗначениеЗаполнено(ДанныеСообщения.ID)
	  И Не НеобходимоСоздатьОбъектВMSExchange Тогда
		Если ПочтовоеСообщениеОбъект.ПометкаУдаления И УчетнаяЗаписьЭлектроннойПочты.скУдалятьНепосредственноВMSExchange Тогда
			скMSExchange_ОбменПочтовымиСообщениямиСервер.УдалитьЭлемент(Подключение, ДанныеСообщения.ID);
		Иначе
			
			// Здесь не передаем в ф-ю СтрокаОшибки чтобы не плодить ошибки, вида "такого объекта нет", которые могут сбить с толку
			ТекущиеОшибки = "";
			ОбъектMSExchange = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьПочтовоеСообщение(Подключение, ДанныеСообщения.ID,, "IdOnly",, ТекущиеОшибки);
			Если ТипЗнч(ОбъектMSExchange) = Тип("ТаблицаЗначений") И ОбъектMSExchange.Количество() > 0 Тогда
				
				Если ТипПочтовогоСообщения = "Исходящее"
				  И ПочтовоеСообщениеОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
					ДляОбновления = Ложь;
				Иначе	
					ДляОбновления = Истина;
				КонецЕсли; 
				
				СтруктураСообщения = Новый Структура;
				СтруктураСообщения.Вставить("ID"	   		  , ДанныеСообщения.ID);
				СтруктураСообщения.Вставить("ChangeKey"		  , ДанныеСообщения.ChangeKey);
				СтруктураСообщения.Вставить("ДанныеОбновления", СформироватьДанныеДляСозданияОбновленияПочтовогоСообщения(Настройка, ПочтовоеСообщениеОбъект, ДанныеСообщения, ТипПочтовогоСообщения, ДляОбновления));
				
				Папка1С = ПочтовоеСообщениеОбъект.CRM_Папка;		
				//ОбновленоУспешно = скMSExchange_ОбменПочтовымиСообщениямиСервер.ОбновитьПочтовоеСообщение(Подключение, Папка1С.скFolderID, Папка1С.скDistinguishedID, СтруктураСообщения, СтрокаОшибки);
				ОбновленоУспешно = скMSExchange_ОбменПочтовымиСообщениямиСервер.ОбновитьПочтовоеСообщение(Подключение,,, СтруктураСообщения, СтрокаОшибки);
				Если ОбновленоУспешно Тогда
					УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(ПочтовоеСообщениеОбъект.Ссылка, Ложь);
				КонецЕсли;
				
			//Нет связи	
			ИначеЕсли Найти(ВРег(ТекущиеОшибки), "ОШИБКА РАБОТЫ С ИНТЕРНЕТ") > 0 Тогда
				Возврат Ложь;	
			Иначе
				// Такого объекта в MS Exchange уже нет
				// Удаляем соответствие ID в регистре
				НачатьТранзакцию();
					Если ДанныеСообщения.Выбран() Тогда
						ДанныеСообщения.Удалить();
					КонецЕсли;
					
					ПочтовоеСообщениеОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
					Если УчетнаяЗаписьЭлектроннойПочты.скУдалятьНепосредственноВ1С Тогда
						ПочтовоеСообщениеОбъект.Удалить(); 	
					Иначе
						ПочтовоеСообщениеОбъект.ПометкаУдаления = Истина; 	
						ПочтовоеСообщениеОбъект.Записать();
					КонецЕсли;
			    ЗафиксироватьТранзакцию();
				
			КонецЕсли
			
		КонецЕсли;
		
	Иначе
		Если Не ПочтовоеСообщениеОбъект.ПометкаУдаления 
		  И ТипПочтовогоСообщения = "Исходящее"
		  И НеобходимоСоздатьОбъектВMSExchange Тогда
			Данные				 = СформироватьДанныеДляСозданияОбновленияПочтовогоСообщения(Настройка, ПочтовоеСообщениеОбъект, ДанныеСообщения, ТипПочтовогоСообщения);
			ДополнительныеДанные = Новый Структура("MessageDisposition", "SaveOnly");

			Папка1С = ПочтовоеСообщениеОбъект.УдалитьCRM_Папка;		
			
			Результат = скMSExchange_ОбменПочтовымиСообщениямиСервер.СоздатьПочтовоеСообщение(Подключение, Папка1С.скFolderID, ?(ЗначениеЗаполнено(Папка1С.скDistinguishedID), Папка1С.скDistinguishedID, "outbox"), Данные, СтрокаОшибки, ДополнительныеДанные);
			Если Результат = Неопределено Тогда
				ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления почтового сообщения в MS Exchange: '") + Строка(ПочтовоеСообщениеОбъект));
				Возврат Ложь;
			ИначеЕсли ПочтовоеСообщениеОбъект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
				Папка1С = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(УчетнаяЗаписьЭлектроннойПочты, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные);		
				
				СтатусОтвета = скMSExchange_ОбменПочтовымиСообщениямиСервер.ОтправитьЭлемент(Подключение, Результат, ?(ЗначениеЗаполнено(Папка1С.скDistinguishedID), Папка1С.скDistinguishedID, "sentitems"), СтрокаОшибки);
				Если СтатусОтвета.Успешно Тогда
					НачатьТранзакцию();
					
						ТекущиеДанныеСообщения = РегистрыСведений.скMSExchange_ДанныеПочтовыхСообщений.СоздатьМенеджерЗаписи();
						Если ДанныеСообщения.Выбран() Тогда
							ЗаполнитьЗначенияСвойств(ТекущиеДанныеСообщения, ДанныеСообщения);
							ТекущиеДанныеСообщения.ID		  = Результат[0].ID;
							ТекущиеДанныеСообщения.ChangeKey  = Результат[0].ChangeKey;
						    ТекущиеДанныеСообщения.CRM_Папка  = Папка1С;
							ТекущиеДанныеСообщения.Отправлено = ТекущаяДата();
							
							ТекущиеДанныеСообщения.Записать();
							
							ДанныеСообщения.Удалить();
							
						КонецЕсли;
											
						ПочтовоеСообщениеОбъект.УдалитьCRM_Папка = Папка1С;
						ПочтовоеСообщениеОбъект.ДатаОтправления = ТекущаяДата();
						
						ПочтовоеСообщениеОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
						ПочтовоеСообщениеОбъект.Записать();
						
				    ЗафиксироватьТранзакцию();					
					
				Иначе
					ДобавитьВСтрокуОшибки(СтатусОтвета.MessageText, НСтр("ru = 'Ошибка отправки почтового сообщения с сервера MS Exchange: '") + Строка(ПочтовоеСообщениеОбъект));
					скMSExchange_ОбменПочтовымиСообщениямиСервер.УдалитьЭлемент(Подключение, Результат[0].ID);
					
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьОбновитьДанныеПочтовогоСообщенияВMSExchange()

Функция СформироватьДанныеДляСозданияОбновленияПочтовогоСообщения(Настройка, ПочтовоеСообщение, ДанныеСообщения, ТипПочтовогоСообщения, ДляОбновления = Ложь)
	
	ДанныеПочтовогоСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьБланкДеревоСозданияДанных();
	Если ДляОбновления Тогда
		//Если ТипПочтовогоСообщения = "Входящее" Тогда
			//Запрос = Новый Запрос;
			//Запрос.Текст = 
			//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//|	УведомленияОПрочтении.Письмо
			//|ИЗ
			//|	РегистрСведений.УведомленияОПрочтении КАК УведомленияОПрочтении
			//|ГДЕ
			//|	УведомленияОПрочтении.Письмо = &Письмо
			//|	И УведомленияОПрочтении.ТребуетсяОтправка";
			//
			//Запрос.УстановитьПараметр("Письмо",ПочтовоеСообщение.Ссылка);
			//
			//Результат = Запрос.Выполнить();
			//УведомитьОПрочтении = Не Результат.Пустой();
			//
			скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:IsRead", Формат(ДанныеСообщения.Рассмотрено			 , "БЛ=false; БИ=true"));
			//КонецЕсли;		
		
	Иначе	
		скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:ItemClass", "IPM.Note");
		скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:Subject"  , ПочтовоеСообщение.Тема);
		
		МассивСтруктурыВложений = ПолучитьМассивСтруктурыВложений(ПочтовоеСообщение);	
		
		Body = СтрЗаменить(ПочтовоеСообщение.ТекстHTML, "<", "&lt;");
		Body = СтрЗаменить(Body				   		  , ">", "&gt;");
		
		СтрокаBody = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:Body BodyType=""HTML""", Body);
		Если МассивСтруктурыВложений.Количество() > 0 Тогда		
			СтрокаAttachments = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:Attachments", Неопределено);
			Для Каждого СтруктураВложения Из МассивСтруктурыВложений Цикл		
				СтрокаFileAttachment = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаAttachments.Строки, "t:FileAttachment", Неопределено);
				
				скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаFileAttachment.Строки, "t:Name"		 , СтруктураВложения.Имя + ?(ЗначениеЗаполнено(СтруктураВложения.Расширение), "." + СтруктураВложения.Расширение, ""));
				скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаFileAttachment.Строки, "t:ContentType" , СтруктураВложения.Расширение);
				скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаFileAttachment.Строки, "t:ContentId"   , СтруктураВложения.Идентификатор);
				
				СтрокаIsInline = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаFileAttachment.Строки, "t:IsInline", "");
				
				Если ЗначениеЗаполнено(СтруктураВложения.Идентификатор) Тогда
					Body = СтрЗаменить(Body, СтруктураВложения.Идентификатор, "cid:" + СтруктураВложения.Идентификатор);
					СтрокаIsInline.Значение = "true";
				Иначе
					СтрокаIsInline.Значение = "false";
				КонецЕсли;
				
				скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаFileAttachment.Строки, "t:IsContactPhoto", "false");
				скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаFileAttachment.Строки, "t:Content"	   , Base64Строка(СтруктураВложения.ДвоичныеДанные));
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаBody.Значение = Body;
		СтрокаToRecipients = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:ToRecipients", Неопределено);
		Для Каждого Получатель Из ПочтовоеСообщение.ПолучателиПисьма Цикл
			Если ЗначениеЗаполнено(Получатель.Адрес) Тогда
				СтрокаMailbox = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаToRecipients.Строки, "t:Mailbox", Неопределено);
				
				скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "t:EmailAddress", Получатель.Адрес);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаCcRecipients = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:CcRecipients", Неопределено);
		Для Каждого Получатель Из ПочтовоеСообщение.ПолучателиКопий Цикл
			Если ЗначениеЗаполнено(Получатель.Адрес) Тогда
				СтрокаMailbox = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаCcRecipients.Строки, "t:Mailbox", Неопределено);
				
				скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "t:EmailAddress", Получатель.Адрес);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаBccRecipients = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:BccRecipients", Неопределено);
		Для Каждого Получатель Из ПочтовоеСообщение.ПолучателиСкрытыхКопий Цикл
			Если ЗначениеЗаполнено(Получатель.Адрес) Тогда
				СтрокаMailbox = скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаCcRecipients.Строки, "t:Mailbox", Неопределено);
				
				скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "t:EmailAddress", Получатель.Адрес);
				
			КонецЕсли;
			
		КонецЦикла;
		
		скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:IsReadReceiptRequested"    , Формат(ПочтовоеСообщение.УведомитьОПрочтении, "БЛ=false; БИ=true"));
		скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:IsDeliveryReceiptRequested", Формат(ПочтовоеСообщение.УведомитьОДоставке , "БЛ=false; БИ=true"));
		скMSExchange_ОбменПочтовымиСообщениямиСервер.ДобавитьСтрокуДереваСозданияДанных(ДанныеПочтовогоСообщения.Строки, "t:IsRead", "true");
		
	КонецЕсли;
	
	Возврат ДанныеПочтовогоСообщения;
	
КонецФункции

Функция ПолучитьМассивСтруктурыВложений(ПочтовоеСообщение)

	МассивСтруктурыВложений = Новый Массив();
	
	МассивВложений = Новый Массив();
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(ПочтовоеСообщение.Ссылка, МассивВложений);

	Для каждого ПрисоединенныйФайл Из МассивВложений Цикл
		ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ПрисоединенныйФайл, Ложь);	
		Если ДвоичныеДанные <> Неопределено Тогда
			МассивСтруктурыВложений.Добавить(
				Новый Структура("Имя, Расширение, Идентификатор, ДвоичныеДанные",  ПрисоединенныйФайл.Наименование, ПрисоединенныйФайл.Расширение, ПрисоединенныйФайл.CRM_ИдентификаторПочтовогоВложения, ДвоичныеДанные)
			);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат МассивСтруктурыВложений;
	
КонецФункции // ПолучитьМассивСтруктурыВложений()

#КонецОбласти

#Область События

Процедура скMSExchange_ПриИзмененииПочтовогоСообщенияПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("скИспользоватьОбменПочтовымиСообщениямиСMSExchange") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоОбъекту1С(Источник.Ссылка);
	Если Не ДанныеСообщения.Выбран() Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись.скНастройкаОбменаПочтовымиСообщениями.УчетнаяЗапись.СерверMSExchange КАК СерверMSExchange,
				|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись.скНастройкаОбменаПочтовымиСообщениями.УчетнаяЗапись КАК УчетнаяЗапись,
				|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗаписьЭлектроннойПочты,
				|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Объект1С,
				|	ЭлектронноеПисьмоИсходящее.Важность КАК Важность,
				|	ЭлектронноеПисьмоИсходящее.ЕстьВложения КАК ЕстьВложения,
				|	ЭлектронноеПисьмоИсходящее.Дата КАК Дата,
				|	ЭлектронноеПисьмоИсходящее.ДатаОтправления КАК Отправлено,
				|	ЭлектронноеПисьмоИсходящее.ОтправительПредставление КАК Отправитель,
				|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись.АдресЭлектроннойПочты КАК АдресОтправителя,
				|	ЭлектронноеПисьмоИсходящее.СписокПолучателейПисьма КАК Получатель,
				|	ЭлектронноеПисьмоИсходящее.Тема КАК Тема,
				|	ЭлектронноеПисьмоИсходящее.УдалитьCRM_Папка КАК CRM_Папка,
				|	ЭлектронноеПисьмоИсходящее.Ответственный КАК Ответственный,
				|	ИСТИНА КАК Рассмотрено
				|ИЗ
				|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
				|ГДЕ
				|	ЭлектронноеПисьмоИсходящее.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДанныеСообщения, Выборка);
				ДанныеСообщения.ID = XMLСтрока(Выборка.Объект1С);
				ДанныеСообщения.Записать();
				
			КонецЦикла;
			
			Возврат;
		Иначе	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСообщения.CRM_Папка <> Источник.УдалитьCRM_Папка Тогда
		ДанныеСообщения.CRM_Папка = Источник.УдалитьCRM_Папка;	
		ДанныеСообщения.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область РегистрацияИзменений

Процедура скMSExchange_ПриИзмененииУчетнойЗаписиЭлектроннойПочтыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("скИспользоватьОбменПочтовымиСообщениямиСMSExchange") Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не Источник.скУчаствуетВОбменеПочтовымиСообщениямиСMSExchange Тогда
		Возврат;	
	КонецЕсли;
	
	ПолучитьУзелОбменаУчетнойЗаписиЭлектроннойПочты(Источник.Ссылка, Истина);
		
КонецПроцедуры

Процедура скMSExchange_ОбменПочтовымиСообщениямиЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("скИспользоватьОбменПочтовымиСообщениямиСMSExchange") Тогда
		Возврат;	
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("скMSExchange_ОбменПочтовымиСообщениями", Источник, Отказ);
	
КонецПроцедуры

Процедура скMSExchange_ОбменПочтовымиСообщениямиЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("скИспользоватьОбменПочтовымиСообщениямиСMSExchange") Тогда
		Возврат;	
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("скMSExchange_ОбменПочтовымиСообщениями", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти