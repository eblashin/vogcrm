
Функция ПолучитьИдентификаторПользователя(ИмяПользователя = Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяПользователя = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Иначе
		ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	КонецЕсли;
	Если ТекущийПользователь = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТекущийПользователь.УникальныйИдентификатор;
	КонецЕсли;
КонецФункции

// Функция загружает настройки.
//
Функция Загрузить(КлючОбъекта, КлючНастроек = "", ОписаниеНастроек = Неопределено, Знач ИмяПользователя = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователя = ПолучитьИдентификаторПользователя(ИмяПользователя);
	
	Результат = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИдентификаторПользователя);
	
	Возврат Результат;
КонецФункции

// Функция возвращает описание.
//
Функция ПолучитьОписание(КлючОбъекта, КлючНастроек = "", Знач ИмяПользователя = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователя = ПолучитьИдентификаторПользователя(ИмяПользователя);
	
	Результат = ХранилищеНастроекДанныхФорм.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИдентификаторПользователя);
	
	Возврат Результат;
КонецФункции

// Функция возвращает список настроек.
//
Функция ПолучитьСписок(КлючОбъекта, Знач ИмяПользователя = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователя = ПолучитьИдентификаторПользователя(ИмяПользователя);
	
	Результат = ХранилищеНастроекДанныхФорм.ПолучитьСписок(КлючОбъекта, ИдентификаторПользователя);
	
	Возврат Результат;
КонецФункции

// Процедура сохраняет настройки.
//
Процедура Сохранить(КлючОбъекта, КлючНастроек = "", Настройки, ОписаниеНастроек = Неопределено, Знач ИмяПользователя = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователя = ПолучитьИдентификаторПользователя(ИмяПользователя);
	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИдентификаторПользователя);
КонецПроцедуры

// Процедура удаляет настройку.
//
Процедура Удалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователя = ПолучитьИдентификаторПользователя(ИмяПользователя);
	
	ХранилищеНастроекДанныхФорм.Удалить(КлючОбъекта, КлючНастроек, ИдентификаторПользователя);
КонецПроцедуры

// Процедура устанавливает описание настройки.
//
Процедура УстановитьОписание(КлючОбъекта, КлючНастроек = "", ОписаниеНастроек, Знач ИмяПользователя = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПользователя = ПолучитьИдентификаторПользователя(ИмяПользователя);
	
	ХранилищеНастроекДанныхФорм.УстановитьОписание(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИдентификаторПользователя);
КонецПроцедуры

// Функция загружает настройки.вог
//
Функция ЗагрузитьНастройкиОтображения() Экспорт
	
	Результат 			= Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вогНастройкиПолейОтображенияСодержания.Макет КАК Макет,
	|	0 КАК Порядок
	|ПОМЕСТИТЬ ВТ_НастройкиОтображенияМакета
	|ИЗ
	|	РегистрСведений.вогНастройкиПолейОтображенияСодержания КАК вогНастройкиПолейОтображенияСодержания
	|ГДЕ
	|	вогНастройкиПолейОтображенияСодержания.ИспользоватьДляВсех
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогНастройкиПолейОтображенияСодержания.Макет,
	|	1
	|ИЗ
	|	РегистрСведений.вогНастройкиПолейОтображенияСодержания КАК вогНастройкиПолейОтображенияСодержания
	|ГДЕ
	|	вогНастройкиПолейОтображенияСодержания.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_НастройкиОтображенияМакета.Макет КАК Хранилище,
	|	ВТ_НастройкиОтображенияМакета.Порядок КАК Порядок
	|ИЗ
	|	ВТ_НастройкиОтображенияМакета КАК ВТ_НастройкиОтображенияМакета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ");
	Запрос.УстановитьПараметр("Пользователь",Пользователи.ТекущийПользователь());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
			Результат = ВыборкаИзРезультатаЗапроса.Хранилище.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
