////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "CRM_РазделБазаЗнаний".

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция определяет наличие прав на изменения статуса.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Наличие прав
//
Функция ЕстьПраваАдминистратора() Экспорт
	Возврат Пользователи.РолиДоступны("CRM_АдминистрированиеБазыЗнаний, ПолныеПрава");
КонецФункции // ЕстьПраваАдминистратора()

// Процедура удаляет из таблицы решений все неотмеченные решения.
//
// Параметры:
//	Форма	- Управляемая форма	- Форма, на котрой расположена таблица решений.
//
Процедура бзУдалитьНеотмеченныеРешения(Форма)
	КоличествоСтрок = Форма["бзРешения"].Количество();
	Если КоличествоСтрок = 0 Тогда Возврат; КонецЕсли;
	ВсеРешения = Форма.РеквизитФормыВЗначение("бзРешения");
	Для текНомер = 1 По КоличествоСтрок Цикл
		НомерСтроки = КоличествоСтрок - текНомер;
		Если ВсеРешения[НомерСтроки].Использовать Тогда Продолжить; КонецЕсли;
		ВсеРешения.Удалить(НомерСтроки);
	КонецЦикла;	
	Форма.ЗначениеВРеквизитФормы(ВсеРешения, "бзРешения");
КонецПроцедуры // БзУдалитьНеотмеченныеРешения().

// Функция добавляет в таблицу решений найденные решения и возвращает количество добавленных.
//
// Параметры:
//	Форма			- Управляемая форма	- Форма, на котрой расположена таблица решений.
//	ТаблицаРешений	- ТаблицаЗначений	- Таблица с результатами поиска.
//
// Возвращаемое значение:
//	Число	- Количество добавленных решений.
//
Функция бзДобавитьНайденныеРешения(Форма, ТаблицаРешений)
	КоличествоДобавленных = 0;
	ВсеРешения = Форма.РеквизитФормыВЗначение("бзРешения");
	Для Каждого СтрокаТаблицы Из ТаблицаРешений Цикл
		КоличествоДобавленных = КоличествоДобавленных + 1;
		НоваяСтрока = ВсеРешения.Добавить();
		НоваяСтрока.Использовать 		= Ложь;
		НоваяСтрока.Решение				= СтрокаТаблицы.Решение;
		НоваяСтрока.Пользователь		= Пользователи.АвторизованныйПользователь();
		СписокОтветов					= СтрокаТаблицы.Ответы;
		СписокОтветов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		Если (СписокОтветов.Количество() > 1) И (СписокОтветов[0].Значение = 0) Тогда
			СписокОтветов.Удалить(0);
		КонецЕсли;	
		НоваяСтрока.Ответы				= СписокОтветов;
		НоваяСтрока.ВыбранныйОтвет		= "";
	КонецЦикла;	
	Форма.ЗначениеВРеквизитФормы(ВсеРешения, "бзРешения");
	Возврат КоличествоДобавленных; 
КонецФункции // БзДобавитьНайденныеРешения().

// Функция добавляет найденное решение в таблицу найденных решений.
//
// Параметры:
//	Решение				- СправочникСсылка	- Добавляемое решение.
//	Ответ				- Число				- Номер ответа.
//	ТаблицаРешений		- Массив			- Массив для хранения результатов поиска.
//	КоличествоРешений	- Число				- Максимальный резмер массива решений.
//	
Функция бзДобавитьРешениеВТаблицуНайденныхПолнотекстовымПоиском(Решение, Ответ, ТаблицаРешений, КоличествоРешений)
	// Ограничиваем количество возвращаемых решений.
	Если ТаблицаРешений.Количество() < КоличествоРешений Тогда
		НайденноеРешение = ТаблицаРешений.Найти(Решение, "Решение");
		Если НайденноеРешение = Неопределено Тогда
			НайденноеРешение			= ТаблицаРешений.Добавить();
			НайденноеРешение.Решение	= Решение;
		КонецЕсли;
		Если НайденноеРешение.Ответы.НайтиПоЗначению(Ответ) = Неопределено Тогда
			НайденноеРешение.Ответы.Добавить(Ответ);
		КонецЕсли;	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // БзДобавитьРешениеВТаблицуНайденныхПолнотекстовымПоиском().

// Функция осуществляет расширенный поиск решений.
//
// Параметры:
//	СтрокаПоиска		- Строка			- Строка поиска.
//	ОбластьПоиска		- Строка			- Область поиска.
//	ПоискПоПодстроке	- Булево			- Признак поиска по подстроке.
//	ТаблицаРешений		- ТаблицаЗначений	- Таблица для хранения результатов поиска.
//	КоличествоРешений	- Число				- Максимальный резмер массива решений.
//	СтруктураОтбора		- Структура			- Структура, содержащая отбор по реквизитам решения.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения пользователю, если поиск неудачен, иначе Неопределено.
//
Функция бзНайтиРешения(СтрокаПоиска, ОбластьПоиска, ПоискПоПодстроке, ТаблицаРешений, КоличествоРешений, СтруктураОтбора)
	// Настроим параметры поиска
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 50);
	СписокПоиска.ПолучатьОписание	= Истина;
	мОбластьПоиска	= Новый Массив;
	мОбластьПоиска.Добавить(Метаданные.Справочники.CRM_Решения);
	СписокПоиска.ОбластьПоиска		= мОбластьПоиска;
	СтрокаПоиска	= НРег(СтрокаПоиска);
	Если ПоискПоПодстроке И НЕ (Прав(СтрокаПоиска, 1) = "*") Тогда
		СписокПоиска.СтрокаПоиска	= СтрокаПоиска + "*";
	Иначе
		СписокПоиска.СтрокаПоиска	= СтрокаПоиска;
	КонецЕсли;
	РазмерПорции					= КоличествоРешений;
	СписокПоиска.РазмерПорции		= РазмерПорции;
	// Выполним поиск
	ПоискВыполнен = Истина;
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		ПоискВыполнен = Ложь;
	КонецПопытки;	
	// Если поиск не результативен, то выйдем.
	Если НЕ ПоискВыполнен Тогда
		Возврат НСтр("ru = 'Недопустимые символы в строке поиска, уточните запрос'");
	ИначеЕсли СписокПоиска.СлишкомМногоРезультатов() Тогда
		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос'");
	ИначеЕсли СписокПоиска.ПолноеКоличество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено. Создать новое решение?'");
	КонецЕсли;
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	// Сформируем список найденных решений.
	ТаблицаРешений.Очистить();
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов) - 1;
	СтрокаПоискаВРег = ВРег(СтрокаПоиска);
	ЕстьСледующаяПорция = Истина;
	ТекПользователь = Пользователи.АвторизованныйПользователь();
	// Обработываем по порциям результаты поиска.
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			// Сформируем элемент результата.
			Элемент			= СписокПоиска.Получить(СчетчикЭлементов);
			ЭлементСсылка	= Элемент.Значение.Ссылка;
			ЭлементОписание	= Элемент.Описание;
			Если НЕ (ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.CRM_Решения")) Тогда Продолжить; КонецЕсли;
			// Пропускаем решения, которые недоступны текущему пользователю.
			Если НЕ (ЭлементСсылка.Автор = ТекПользователь) Тогда
				Если ЭлементСсылка.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное Тогда
					Продолжить;
				ИначеЕсли (ЭлементСсылка.СтатусРешения = Перечисления.CRM_СтатусыРешений.НаРассмотрении) И НЕ ЕстьПраваАдминистратора() Тогда 	
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// Проверяем на соответствие реквизитов решения значениям реквизитов структуры отбора.
			ЕстьОшибки = Ложь;
			Если НЕ (СтруктураОтбора = Неопределено) Тогда
				Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
					Попытка
						ЗначениеРеквизита = ЭлементСсылка[ЭлементСтруктуры.Ключ];
						ЕстьРеквизит = Истина;
					Исключение
						ЕстьРеквизит = Ложь;
					КонецПопытки;	
					Если НЕ ЕстьРеквизит Тогда
						Продолжить;
					ИначеЕсли НЕ (ЗначениеРеквизита = ЭлементСтруктуры.Значение) Тогда
						ЕстьОшибки = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			Если ЕстьОшибки Тогда Продолжить; КонецЕсли;
			ПозицияДвоеточия 	= Найти(ЭлементОписание, ":");
			НайденнаяОбласть	= Лев(ЭлементОписание, ПозицияДвоеточия - 1);
			ВопросНайден = Ложь;
			бзСтрокаПоиска = НРег(СтрокаПоиска);
			Если ПустаяСтрока(ОбластьПоиска) ИЛИ (ОбластьПоиска = "Любое поле") Тогда
				Если НайденнаяОбласть = "Наименование" Тогда
					ВопросНайден = Истина;
				ИначеЕсли НайденнаяОбласть = "ТекстВопроса" Тогда
					ВопросНайден = Истина;
				ИначеЕсли НайденнаяОбласть = "ОсновнаяКатегория" Тогда
					ВопросНайден = Истина;
				ИначеЕсли НайденнаяОбласть = "Проект" Тогда
					ВопросНайден = Истина;
				ИначеЕсли НайденнаяОбласть = "Автор" Тогда
					ВопросНайден = Истина;
				ИначеЕсли Найти(НРег(ЭлементСсылка.Наименование), бзСтрокаПоиска) > 0 Тогда
					ВопросНайден = Истина;
				ИначеЕсли Найти(НРег(ЭлементСсылка.ТекстВопроса), бзСтрокаПоиска) > 0 Тогда
					ВопросНайден = Истина;
				ИначеЕсли ЗначениеЗаполнено(ЭлементСсылка.ОсновнаяКатегория) 
					И (Найти(НРег(ЭлементСсылка.ОсновнаяКатегория.Наименование), бзСтрокаПоиска) > 0) Тогда
					ВопросНайден = Истина;
				ИначеЕсли ЗначениеЗаполнено(ЭлементСсылка.Проект) 
					И (Найти(НРег(ЭлементСсылка.Проект.Наименование), бзСтрокаПоиска) > 0) Тогда
					ВопросНайден = Истина;
				ИначеЕсли ЗначениеЗаполнено(ЭлементСсылка.Автор) 
					И (Найти(НРег(ЭлементСсылка.Автор.Наименование), бзСтрокаПоиска) > 0) Тогда
					ВопросНайден = Истина;
				КонецЕсли;	
			ИначеЕсли (ОбластьПоиска = "Наименование") Тогда
				Если НайденнаяОбласть = "Наименование" Тогда
					ВопросНайден = Истина;
				ИначеЕсли Найти(НРег(ЭлементСсылка.Наименование), бзСтрокаПоиска) > 0 Тогда
					ВопросНайден = Истина;
				КонецЕсли;	
			ИначеЕсли (ОбластьПоиска = "Вопрос") Тогда
				Если НайденнаяОбласть = "ТекстВопроса" Тогда
					ВопросНайден = Истина;
				ИначеЕсли Найти(НРег(ЭлементСсылка.ТекстВопроса), бзСтрокаПоиска) > 0 Тогда
					ВопросНайден = Истина;
				КонецЕсли;	
			ИначеЕсли (ОбластьПоиска = "Категория") Тогда
				Если НайденнаяОбласть = "ОсновнаяКатегория" Тогда
					ВопросНайден = Истина;
				ИначеЕсли НайденнаяОбласть = "Категория" Тогда
					ВопросНайден = Истина;
				ИначеЕсли ЗначениеЗаполнено(ЭлементСсылка.ОсновнаяКатегория)
					И (Найти(НРег(ЭлементСсылка.ОсновнаяКатегория.Наименование), бзСтрокаПоиска) > 0) Тогда
					ВопросНайден = Истина;
				КонецЕсли;	
			ИначеЕсли (ОбластьПоиска = "Проект") Тогда
				Если НайденнаяОбласть = "Проект" Тогда
					ВопросНайден = Истина;
				ИначеЕсли ЗначениеЗаполнено(ЭлементСсылка.Проект) 
					И (Найти(НРег(ЭлементСсылка.Проект.Наименование), бзСтрокаПоиска) > 0) Тогда
					ВопросНайден = Истина;
				КонецЕсли;	
			ИначеЕсли (ОбластьПоиска = "Автор") Тогда
				Если НайденнаяОбласть = "Автор" Тогда
					ВопросНайден = Истина;
				ИначеЕсли ЗначениеЗаполнено(ЭлементСсылка.Автор)
					И (Найти(НРег(ЭлементСсылка.Автор.Наименование), бзСтрокаПоиска) > 0) Тогда
					ВопросНайден = Истина;
				КонецЕсли;	
			КонецЕсли;
			Если ВопросНайден Тогда
				// Добавляем решение в список найденных решений.
				Если НЕ бзДобавитьРешениеВТаблицуНайденныхПолнотекстовымПоиском(ЭлементСсылка, 0, ТаблицаРешений, КоличествоРешений) Тогда
					Возврат НСтр("ru = 'Слишком много результатов, уточните запрос'");					
				КонецЕсли;
			КонецЕсли;
			// Дополнительно проверяем все ответы.
			Для Каждого ТекОтвет Из ЭлементСсылка.Ответы Цикл
				ОтветНайден = Ложь;
				Если ПустаяСтрока(ОбластьПоиска) ИЛИ (ОбластьПоиска = "Любое поле") Тогда
					Если Найти(НРег(ТекОтвет.НаименованиеОтвета), бзСтрокаПоиска) > 0 Тогда
						ОтветНайден = Истина;
					ИначеЕсли Найти(НРег(ТекОтвет.ВариантОтвета), бзСтрокаПоиска) > 0 Тогда
						ОтветНайден = Истина;
					ИначеЕсли Найти(НРег(ТекОтвет.АвторИзменения), бзСтрокаПоиска) > 0 Тогда
						ОтветНайден = Истина;
					ИначеЕсли Найти(НРег(ТекОтвет.СтатусОтвета), бзСтрокаПоиска) > 0 Тогда
						ОтветНайден = Истина;
					КонецЕсли;	
				ИначеЕсли (ОбластьПоиска = "Наименование") Тогда
					Если Найти(НРег(ТекОтвет.НаименованиеОтвета), бзСтрокаПоиска) > 0 Тогда
						ОтветНайден = Истина;
					КонецЕсли;	
				ИначеЕсли (ОбластьПоиска = "Ответ") Тогда
					Если Найти(НРег(ТекОтвет.ВариантОтвета), бзСтрокаПоиска) > 0 Тогда
						ОтветНайден = Истина;
					КонецЕсли;	
				ИначеЕсли (ОбластьПоиска = "Автор") Тогда
					Если Найти((ТекОтвет.АвторИзменения), бзСтрокаПоиска) > 0 Тогда
						ОтветНайден = Истина;
					КонецЕсли;	
				КонецЕсли;
				Если ОтветНайден Тогда
					// Добавляем решение в список найденных решений.
					Если НЕ бзДобавитьРешениеВТаблицуНайденныхПолнотекстовымПоиском(ЭлементСсылка, ТекОтвет.ИДСтроки, ТаблицаРешений, КоличествоРешений) Тогда
						Возврат НСтр("ru = 'Слишком много результатов, уточните запрос'");					
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	Если ТаблицаРешений.Количество() = 0 Тогда
	     Возврат НСтр("ru = 'Ничего не найдено, уточните запрос'");		
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // бзНайтиРешения()

// Функция возвращает текст с выделенными входениями строки поиска.
//
// Параметры:
//	ТекстHTML		- Строка	- Текст, в котром нужно выделить строки поиска.
//	СтрокаПоиска	- Строка	- Строка поиска, вхождения которой нужно выделить.
//
// Возвращаемое значение:
//	Строка	- Текст, после выделение строк поиска.
//
Функция бзВыделитьВхожденияСтрокиПоиска(ИсходныйТекстHTML, СтрокаПоиска) Экспорт
	Если ПустаяСтрока(СтрокаПоиска) Тогда	
		Возврат ИсходныйТекстHTML;
	ИначеЕсли ПустаяСтрока(ИсходныйТекстHTML) Тогда		
		Возврат ИсходныйТекстHTML;
	КонецЕсли;
	// Формируем строку без тегов, чтобы в ней выполнять поиск вхождений строки поиска.
	ТекстБезHTML = "";
	ТекстСHTML = ИсходныйТекстHTML;
	Пока НЕ ПустаяСтрока(ТекстСHTML) Цикл
		НачалоТега = Найти(ТекстСHTML, "<");
		Если НачалоТега = 0 Тогда
			ТекстБезHTML	= ТекстБезHTML + ТекстСHTML;
			ТекстСHTML		= "";
		Иначе
			ТекстБезHTML	= ТекстБезHTML + Лев(ТекстСHTML, НачалоТега - 1);
			ТекстСHTML		= Сред(ТекстСHTML, НачалоТега + 1);
			КонецТега		= Найти(ТекстСHTML, ">");
			Если КонецТега = 0 Тогда
				ТекстСHTML	= "";
			Иначе
				ТекстСHTML	= Сред(ТекстСHTML, КонецТега + 1);
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
	// Выполняем выделение вхождений строки поиска.
	ТекстСHTML 			= СокрЛП(ИсходныйТекстHTML);
	ТекстHTML			= "";
	ТекстБезHTML		= НРег(СокрЛП(ТекстБезHTML));
	СтрокаПоиска		= НРег(СокрЛП(СтрокаПоиска));
	ДлинаСтроки			= СтрДлина(СтрокаПоиска);
	Пока НЕ ПустаяСтрока(ТекстБезHTML) Цикл
		ПозицияНачала = Найти(ТекстБезHTML, СтрокаПоиска);
		Если ПозицияНачала = 0 Тогда
			ТекстБезHTML = "";
			ТекстHTML	= ТекстHTML + ТекстСHTML; 
		Иначе	
			НомерСимвола		= 0;
			НомерСимволаHTML	= 1;
			ФлагТега			= Ложь;
			Пока Истина Цикл
				ТекущийСимвол = Сред(ТекстСHTML, НомерСимволаHTML, 1); 
				Если ТекущийСимвол = "<" Тогда
					ФлагТега	= Истина;
				ИначеЕсли ТекущийСимвол = ">" Тогда
					ФлагТега	= Ложь;
				ИначеЕсли НЕ ФлагТега Тогда
					НомерСимвола	= НомерСимвола + 1;
				КонецЕсли;
				Если НомерСимвола = ПозицияНачала Тогда Прервать; КонецЕсли;
				НомерСимволаHTML	= НомерСимволаHTML + 1;
			КонецЦикла;	
			ТекстHTML	= ТекстHTML + Лев(ТекстСHTML, НомерСимволаHTML - 1) + "<span style='background-color: #ffff00;'>";
			// Добавляем текст строки поиска.
			СтарыйНомерСимволаHTML	= НомерСимволаHTML;
			СтарыйНомерСимвола		= НомерСимвола;
			НомерСимвола			= 0;
			Пока Истина Цикл
				ТекущийСимвол = Сред(ТекстСHTML, НомерСимволаHTML, 1); 
				Если ТекущийСимвол = "<" Тогда
					ФлагТега	= Истина;
				ИначеЕсли ТекущийСимвол = ">" Тогда
					ФлагТега	= Ложь;
				ИначеЕсли НЕ ФлагТега Тогда
					НомерСимвола	= НомерСимвола + 1;
				КонецЕсли;	
				Если НомерСимвола = ДлинаСтроки Тогда Прервать; КонецЕсли;
				НомерСимволаHTML	= НомерСимволаHTML + 1;
			КонецЦикла;
			ТекстHTML		= ТекстHTML + Сред(ТекстСHTML, СтарыйНомерСимволаHTML, НомерСимволаHTML - СтарыйНомерСимволаHTML + 1) + "</span>";
			ТекстСHTML		= Сред(ТекстСHTML, НомерСимволаHTML + 1);
			ТекстБезHTML	= Сред(ТекстБезHTML, ПозицияНачала + ДлинаСтроки);
	    КонецЕсли;
	КонецЦикла;
	Возврат ТекстHTML;
КонецФункции // бзВыделитьВхождения()	

// Возвращает массив присоединенных файлов для вопроса или ответа указанного решения (без вложенных картинок в текст
// вопроса/ответа).
//
// Параметры:
//  РешениеБЗ - Ссылка  - СправочникСсылка.CRM_РешенияПрисоединенныеФайлы
//  НомерСтроки	   - Число	 - Номер строки решения (для вопроса всегда 0, для ответа это реквизит).
//
// Возвращаемое значение:
//  Массив ссылок на присоединенные файлы.
//
Функция бзПолучитьВсеПодчиненныеФайлы(Знач РешениеБЗ, ИДСтроки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",			РешениеБЗ);
	Запрос.УстановитьПараметр("ИДФайлаЭлектронногоПисьма",	ИДСтроки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Ссылка
	|	И Файлы.ИДФайлаЭлектронногоПисьма = &ИДФайлаЭлектронногоПисьма";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОЗДАНИЯ НА ФОРМЕ ЭЛЕМЕНТОВ БАЗЫ ЗНАНИЙ

// Функция создает элементы формы для работы с базой знаний.
//
// Параметры:
//	Форма						- УправляемаяФорма	- Форма, на которой создаются элементы.
//	Объект						- ДокументОбъект	- Объект, на форме которого создаются элементы.
//	ИмяЭлементаДляРазмещения	- ЭлементФормы		- Группа формы, внутри которой создаются элементы.
//
// Возвращаемое значение:
//	Булево	- Результат создания элементов.
//
Функция бзЗаполнениеБазыЗнанийВФорме(Форма, Объект, ИмяЭлементаДляРазмещения) Экспорт
	// Проверяем наличие типа объекта в списке типов измерения "Объект" регистра сведений "CRM_Используемые решения".
	Попытка
		ТипПоддерживается = Метаданные.РегистрыСведений.CRM_ИспользуемыеРешения.Измерения.Объект.Тип.СодержитТип(ТипЗнч(Объект.Ссылка));
	Исключение
		ТипПоддерживается = Ложь;
	КонецПопытки;	
	Если НЕ ТипПоддерживается Тогда Возврат Ложь; КонецЕсли;
	// Проверяем указание имени группы для базы знаний.
	Если ПустаяСтрока(ИмяЭлементаДляРазмещения) Тогда
		Возврат Ложь;
	КонецЕсли;
	Родитель = Форма.Элементы.Найти(ИмяЭлементаДляРазмещения);
	Если Родитель = Неопределено  Тогда
		Возврат Ложь;
	ИначеЕсли НЕ (ТипЗнч(Родитель) = Тип("ГруппаФормы")) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Создаем массив добавляемых элементов формы.
	масРеквизитов = Новый Массив;
	
	// Таблица "Решения".
	ИмяОписания = "бзРешения";
	масРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания,			Новый ОписаниеТипов("ТаблицаЗначений")));
	масРеквизитов.Добавить(Новый РеквизитФормы("Использовать",		Новый ОписаниеТипов("Булево"),																	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("Решение",			Новый ОписаниеТипов("СправочникСсылка.CRM_Решения"),											ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("Ответы",			Новый ОписаниеТипов("СписокЗначений"),															ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("Пользователь",		Новый ОписаниеТипов("СправочникСсылка.Пользователи"),											ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("ВыбранныйОтвет",	Новый ОписаниеТипов("Строка"),																	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("ИДСтроки",			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)),									ИмяОписания));
	
	// Таблица "ТаблицаОтветов".
	ИмяОписания = "бзТаблицаОтветов";
	масРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания,			Новый ОписаниеТипов("ТаблицаЗначений")));
	масРеквизитов.Добавить(Новый РеквизитФормы("ИДСтроки",			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)),									ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("НомерСтроки",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)),	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("Наименование",		Новый ОписаниеТипов("Строка"),																	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("ТекстОтвета",		Новый ОписаниеТипов("Строка"),																	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("Выбранный",			Новый ОписаниеТипов("Булево"),																	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("Найденный",			Новый ОписаниеТипов("Булево"),																	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("Порядок",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)),	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("НачалоТекста",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)),	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("КонецТекста",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)),	ИмяОписания));
	
	// Таблица "бзВложения".
	ИмяОписания = "бзВложения";
	масРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания,			Новый ОписаниеТипов("ТаблицаЗначений")));
	масРеквизитов.Добавить(Новый РеквизитФормы("Ссылка",			Новый ОписаниеТипов("СправочникСсылка.CRM_РешенияПрисоединенныеФайлы"),							ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("ИмяФайла",			Новый ОписаниеТипов("Строка"),																	ИмяОписания));	
	масРеквизитов.Добавить(Новый РеквизитФормы("ИндексКартинки",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)),	ИмяОписания));	
	масРеквизитов.Добавить(Новый РеквизитФормы("Размер",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)),	ИмяОписания));	
	масРеквизитов.Добавить(Новый РеквизитФормы("Удалять",			Новый ОписаниеТипов("Булево"),																	ИмяОписания));
	масРеквизитов.Добавить(Новый РеквизитФормы("Расположение",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)),	ИмяОписания));		
	масРеквизитов.Добавить(Новый РеквизитФормы("ИмяФайлаНаКомпьютере",Новый ОписаниеТипов("Строка"),																ИмяОписания));		
	масРеквизитов.Добавить(Новый РеквизитФормы("ИДФайлаЭлектронногоПисьма",Новый ОписаниеТипов("Строка"),													ИмяОписания));		
	масРеквизитов.Добавить(Новый РеквизитФормы("РазмерСтрокой",Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)),										ИмяОписания));			
	// Область поиска.	
	масРеквизитов.Добавить(Новый РеквизитФормы("бзОбластьПоиска",		Новый ОписаниеТипов("Строка")));
	// Поиск по подстроке
	масРеквизитов.Добавить(Новый РеквизитФормы("бзПоискПоПодстроке",	Новый ОписаниеТипов("Булево")));
	// Строка поиска.	
	масРеквизитов.Добавить(Новый РеквизитФормы("бзСтрокаПоиска",		Новый ОписаниеТипов("Строка")));
	// Список выора поиска
	масРеквизитов.Добавить(Новый РеквизитФормы("бзСтрокаПоискаСписокВыбора",	Новый ОписаниеТипов("СписокЗначений")));
	// Искать по проекту.	
	масРеквизитов.Добавить(Новый РеквизитФормы("бзИскатьПоПроекту",		Новый ОписаниеТипов("Булево")));
	
	// Текст решения.
	//масРеквизитов.Добавить(Новый РеквизитФормы("бзТекстВопросаHTML",	Новый ОписаниеТипов("ФорматированныйДокумент")));
	масРеквизитов.Добавить(Новый РеквизитФормы("бзТекстВопросаHTML",	Новый ОписаниеТипов("Строка")));;	
	// Признак актуальности индекса.
	масРеквизитов.Добавить(Новый РеквизитФормы("бзИндексППДАктуален",	Новый ОписаниеТипов("Булево")));
	// Текущее решение
	масРеквизитов.Добавить(Новый РеквизитФормы("бзТекущийВопрос",		Новый ОписаниеТипов("СправочникСсылка.CRM_Решения")));
	// Текущее решение
	масРеквизитов.Добавить(Новый РеквизитФормы("бзТекущийИдентификатор",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный))));
	// Текущее решение
	масРеквизитов.Добавить(Новый РеквизитФормы("бзПозицияТекста",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный))));
	// Список файлов из решения для копирования в письмо.
	масРеквизитов.Добавить(Новый РеквизитФормы("бзСписокФайловРешения",	Новый ОписаниеТипов("СписокЗначений")));
	
	// Добавляем новые реквизиты.
	Форма.ИзменитьРеквизиты(масРеквизитов);
	// Добавляем команду управления видимостью.
	КомандаПоиска				= Форма.Команды.Добавить("бзОткрытьБазуЗнаний");
	КомандаПоиска.Действие 		= "Подключаемый_бзОткрытьБазуЗнаний";
	КомандаПоиска.Подсказка		= НСтр("ru = 'Открыть базу знаний'");
	// Добавляем команду стандартного поиска.
	КомандаПоиска				= Форма.Команды.Добавить("бзПолнотекстовыйПоискНайти");
	КомандаПоиска.Заголовок		= НСтр("ru = 'Найти...'");
	КомандаПоиска.Картинка		= БиблиотекаКартинок.Найти;
	КомандаПоиска.Отображение	= ОтображениеКнопки.КартинкаИТекст;
	КомандаПоиска.Действие 		= "Подключаемый_бзПолнотекстовыйПоискНайти";
	КомандаПоиска.Подсказка		= НСтр("ru = 'Выполнить полнотекстовый поиск'");
	// Добавляем команду отмены стандартного поиска.
	КомандаПоиска				= Форма.Команды.Добавить("бзПолнотекстовыйПоискОтменить");
	КомандаПоиска.Заголовок		= НСтр("ru = 'Отменить поиск'");
	КомандаПоиска.Картинка		= БиблиотекаКартинок.ОтменитьПоиск;
	КомандаПоиска.Отображение	= ОтображениеКнопки.Картинка;
	КомандаПоиска.Действие 		= "Подключаемый_бзПолнотекстовыйПоискОтменить";
	КомандаПоиска.Подсказка		= НСтр("ru = 'Отменить полнотекстовый поиск'");
	// Создаем элементы на форме и заполняем значения реквизитов.
	// Кнопка открытия базы знаний.
	ЭлементКнопка 				= Форма.Элементы.Добавить("бзОткрытьБазуЗнаний", Тип("КнопкаФормы"), Форма.Элементы.ФормаКоманднаяПанель);
	ЭлементКнопка.Вид 			= ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементКнопка.Заголовок		= НСтр("ru = 'База знаний'");
	//ЭлементКнопка.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
	ЭлементКнопка.Отображение 	= ОтображениеКнопки.Текст;
	ЭлементКнопка.Картинка 		= БиблиотекаКартинок.РазвернутьВсе;
	ЭлементКнопка.ИмяКоманды 	= "бзОткрытьБазуЗнаний";
	// Группа шапки.
	ГруппаШапка						= Форма.Элементы.Добавить("бзГруппаШапкаБазыЗнаний", Тип("ГруппаФормы"), Родитель);
	ГруппаШапка.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапка.ОтображатьЗаголовок	= Ложь;
	ГруппаШапка.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаШапка.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	// Группа шапки левая группа.
	ГруппаШапкаЛевая						= Форма.Элементы.Добавить("бзГруппаШапкаЛеваяБазыЗнаний", Тип("ГруппаФормы"), ГруппаШапка);
	ГруппаШапкаЛевая.Вид                	= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапкаЛевая.ОтображатьЗаголовок	= Ложь;
	ГруппаШапкаЛевая.Отображение        	= ОтображениеОбычнойГруппы.Нет;
	ГруппаШапкаЛевая.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	// Группа шапки правая группа.
	ГруппаШапкаПравая						= Форма.Элементы.Добавить("бзГруппаШапкаПраваяБазыЗнаний", Тип("ГруппаФормы"), ГруппаШапка);
	ГруппаШапкаПравая.Вид                	= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапкаПравая.ОтображатьЗаголовок	= Ложь;
	ГруппаШапкаПравая.Отображение        	= ОтображениеОбычнойГруппы.Нет;
	ГруппаШапкаПравая.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	// Группа поиска.
	Группа 						= Форма.Элементы.Добавить("бзГруппаПоиска", Тип("ГруппаФормы"), ГруппаШапкаЛевая);
	Группа.Вид                 	= ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок 	= Ложь;
	Группа.Отображение         	= ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	//Группа.Ширина				= 45;
	Группа.РастягиватьПоГоризонтали	= Ложь;	
	// Искать по проекту.
	Элемент = Форма.Элементы.Добавить("бзИскатьПоПроекту", Тип("ПолеФормы"), Группа);
	Элемент.Вид					= ВидПоляФормы.ПолеФлажка;
	Элемент.ПутьКДанным			= "бзИскатьПоПроекту";
	Элемент.Заголовок			= НСтр("ru = 'Искать по проекту'");
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Право;
	Если НЕ (Объект.Метаданные().Реквизиты.Найти("Проект") = Неопределено) Тогда
		Элемент.Доступность		= Истина;
	ИначеЕсли НЕ (Объект.Метаданные().Реквизиты.Найти("CRM_Проект") = Неопределено) Тогда
		Элемент.Доступность		= Истина;
	Иначе	
		Элемент.Доступность		= Ложь;
	КонецЕсли;	
	Элемент.УстановитьДействие("ПриИзменении",	"Подключаемый_бзИскатьПоПроектуПриИзменении");
	// Область поиска.
	Элемент = Форма.Элементы.Добавить("бзОбластьПоиска", Тип("ПолеФормы"), Группа);
	Элемент.Вид					= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным			= "бзОбластьПоиска";
	Элемент.Заголовок			= "";
	Элемент.КнопкаВыпадающегоСписка	= Истина;
	Элемент.КнопкаВыбора			= Ложь;
	Элемент.КнопкаОчистки			= Ложь;
	Элемент.КнопкаРегулирования		= Ложь;
	Элемент.КнопкаОткрытия			= Ложь;
	Элемент.КнопкаСпискаВыбора		= Ложь;
	Элемент.КнопкаСоздания			= Ложь;
	Элемент.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.РежимВыбораИзСписка	    = Истина;
	Элемент.СписокВыбора.Добавить("Любое поле");
	Элемент.СписокВыбора.Добавить("Наименование");
	Элемент.СписокВыбора.Добавить("Вопрос");
	Элемент.СписокВыбора.Добавить("Ответ");
	Элемент.СписокВыбора.Добавить("Категория");
	Элемент.СписокВыбора.Добавить("Проект");
	Элемент.СписокВыбора.Добавить("Автор");
	Элемент.ОтображениеКнопкиВыбора		= ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
	Элемент.Ширина						= 12;
	Элемент.РастягиватьПоГоризонтали	= Ложь;
	// Строка поиска.
	Элемент = Форма.Элементы.Добавить("бзСтрокаПоиска", Тип("ПолеФормы"), Группа);
	Элемент.Вид					= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным			= "бзСтрокаПоиска";
	Элемент.Заголовок			= НСтр("ru = 'содержит'");
	Элемент.Подсказка			= НСтр("ru = 'Поиск в базе знаний'");
	Элемент.КнопкаВыпадающегоСписка	= Истина;
	Элемент.КнопкаВыбора			= Истина;
	Элемент.КнопкаОчистки			= Ложь;
	Элемент.КнопкаРегулирования		= Ложь;
	Элемент.КнопкаОткрытия			= Ложь;
	Элемент.КнопкаСпискаВыбора		= Ложь;
	Элемент.КартинкаКнопкиВыбора	= БиблиотекаКартинок.CRM_Изменить12x12;
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.Ширина					= 20;	
	Элемент.УстановитьДействие("ПриИзменении",	"Подключаемый_бзСтрокаПоискаПриИзменении"); 
	Элемент.УстановитьДействие("НачалоВыбора",	"Подключаемый_бзСтрокаПоискаНачалоВыбора"); 
	Элемент.УстановитьДействие("АвтоПодбор",	"Подключаемый_бзСтрокаПоискаАвтоПодбор");
	// Командная панель поиска.
	//ГруппаПоиска = Форма.Элементы.Добавить("бзГруппаПолнотекстовогоПоиска",
	//	Тип("ГруппаФормы"), ГруппаШапкаПравая);
	ГруппаПоиска = Форма.Элементы.Добавить("бзГруппаПолнотекстовогоПоиска", Тип("ГруппаФормы"), Группа);	
	ГруппаПоиска.Вид						= ВидГруппыФормы.КоманднаяПанель;
	ГруппаПоиска.РастягиватьПоГоризонтали	= Ложь;
	// Кнопка "бзПолнотекстовыйПоискНайти".
	ЭлементКнопка 				= Форма.Элементы.Добавить("бзПолнотекстовыйПоискНайти", Тип("КнопкаФормы"), ГруппаПоиска);
	ЭлементКнопка.Вид 			= ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементКнопка.Картинка		= БиблиотекаКартинок.Найти;
	ЭлементКнопка.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
	ЭлементКнопка.ИмяКоманды 	= "бзПолнотекстовыйПоискНайти";
	// Кнопка "бзПолнотекстовыйПоискОтменить".
	ЭлементКнопка 				= Форма.Элементы.Добавить("бзПолнотекстовыйПоискОтменить", Тип("КнопкаФормы"), ГруппаПоиска);
	ЭлементКнопка.Вид 			= ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементКнопка.Картинка 		= БиблиотекаКартинок.ОтменитьПоиск;
	ЭлементКнопка.Отображение 	= ОтображениеКнопки.Картинка;
	ЭлементКнопка.ИмяКоманды 	= "бзПолнотекстовыйПоискОтменить";
	// Группа обновления индекса
	Группа 						= Форма.Элементы.Добавить("бзГруппаПроектИндекс", Тип("ГруппаФормы"), Группа);
	//Группа 						
	//	= Форма.Элементы.Добавить("бзГруппаПроектИндекс", Тип("ГруппаФормы"), ГруппаШапкаЛевая);	
	Группа.Вид                 	= ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок 	= Ложь;
	Группа.Отображение         	= ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	//Группа.Ширина				= 45;
	Группа.РастягиватьПоГоризонтали	= Ложь;	
	// Обновить индекс.
	Элемент = Форма.Элементы.Добавить("бзДекорацияИндексППНеактуален", Тип("ДекорацияФормы"), Группа);
	Элемент.Вид							= ВидДекорацииФормы.Надпись;
	Элемент.Заголовок					= "";
	Элемент.РастягиватьПоГоризонтали	= Истина;
	Элемент.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Право;
	Элемент.Гиперссылка					= Истина;
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_бзДекорацияИндексППНеактуаленНажатие"); 
	// Группа решения.
	ГруппаРешения						= Форма.Элементы.Добавить("бзГруппаРешения", Тип("ГруппаФормы"), Родитель);
	ГруппаРешения.Вид                 	= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРешения.ОтображатьЗаголовок 	= Ложь;
	ГруппаРешения.Отображение         	= ОтображениеОбычнойГруппы.Нет;
	ГруппаРешения.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	// Таблица "Решения".
	ТаблицаРешений = Форма.Элементы.Добавить("бзРешения", Тип("ТаблицаФормы"), ГруппаРешения);
	ТаблицаРешений.ПутьКДанным			= "бзРешения";
	ТаблицаРешений.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТаблицаРешений.УстановитьДействие("Выбор",					"Подключаемый_бзРешенияВыбор"); 
	ТаблицаРешений.УстановитьДействие("ПриАктивизацииСтроки",	"Подключаемый_бзРешенияПриАктивизацииСтроки"); 
	ТаблицаРешений.УстановитьДействие("ПередНачаломДобавления",	"Подключаемый_бзРешенияПередНачаломДобавления");
	ТаблицаРешений.УстановитьДействие("ПередНачаломИзменения",	"Подключаемый_бзРешенияПередНачаломИзменения");
	ТаблицаРешений.УстановитьДействие("ПередУдалением",			"Подключаемый_бзРешенияПередУдалением"); 
	// Добавляем колонки таблицы "Решения".
	// Использовать.
	Элемент = Форма.Элементы.Добавить("бзРешенияИспользовать", Тип("ПолеФормы"), ТаблицаРешений);
	Элемент.Вид					= ВидПоляФормы.ПолеФлажка;
	Элемент.ПутьКДанным			= "бзРешения.Использовать";
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	// Категория.
	Элемент = Форма.Элементы.Добавить("бзРешенияКатегория", Тип("ПолеФормы"), ТаблицаРешений);
	Элемент.ПутьКДанным			= "бзРешения.Решение.ОсновнаяКатегория.ЦветИндекс";
	Элемент.Вид					= ВидПоляФормы.ПолеКартинки;
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.КартинкаЗначений	= БиблиотекаКартинок.CRM_ЦветаКатегорий;
	// Наименование.
	Элемент = Форма.Элементы.Добавить("бзРешенияРешение", Тип("ПолеФормы"), ТаблицаРешений);
	Элемент.ПутьКДанным			= "бзРешения.Решение";
	Элемент.Вид					= ВидПоляФормы.ПолеВвода;
	Элемент.Заголовок			= НСтр("ru = 'Решение'");
	Элемент.КнопкаВыбора		= Ложь;
	Элемент.КнопкаОчистки		= Ложь;
	Элемент.КнопкаОткрытия		= Истина;
	Элемент.КнопкаРегулирования	= Ложь;
	Элемент.КнопкаСпискаВыбора	= Ложь;
	Элемент.КнопкаВыпадающегоСписка = Ложь;
	// Выбранный ответ.
	Элемент = Форма.Элементы.Добавить("бзРешенияВыбранныйОтвет", Тип("ПолеФормы"), ТаблицаРешений);
	Элемент.Вид					= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным			= "бзРешения.ВыбранныйОтвет";
	Элемент.Заголовок			= НСтр("ru = 'Выбранный ответ'");
	Элемент.КнопкаВыбора		= Ложь;
	Элемент.КнопкаОчистки		= Ложь;
	Элемент.КнопкаОткрытия		= Ложь;
	Элемент.КнопкаРегулирования	= Ложь;
	Элемент.КнопкаСпискаВыбора	= Ложь;
	Элемент.КнопкаВыпадающегоСписка = Ложь;
	Элемент.ТолькоПросмотр		= Истина;
	// Вспомогательная группа с надписью, для выравнивания полей формы.
	ГруппаВспомогательная						= Форма.Элементы.Добавить("бзГруппаВспомогательная", Тип("ГруппаФормы"), ГруппаРешения);
	ГруппаВспомогательная.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВспомогательная.ОтображатьЗаголовок	= Ложь;
	ГруппаВспомогательная.Отображение			= ОтображениеОбычнойГруппы.Нет;
	ГруппаВспомогательная.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элемент = Форма.Элементы.Добавить("бзВспомогательнаяНадпись", Тип("ДекорацияФормы"), ГруппаВспомогательная);
	Элемент.Вид							= ВидДекорацииФормы.Надпись;
	Элемент.Заголовок					= "";
	Элемент.Доступность					= Истина;
	// Группа вопросы-ответы.
	// ГруппаРешения.
	ГруппаВопросы = Форма.Элементы.Добавить("бзГруппаВопросы", Тип("ГруппаФормы"), ГруппаВспомогательная);
	ГруппаВопросы.Вид                 	= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВопросы.ОтображатьЗаголовок 	= Ложь;
	ГруппаВопросы.Отображение         	= ОтображениеОбычнойГруппы.Нет;
	ГруппаВопросы.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	// Текст вопроса.
	Элемент = Форма.Элементы.Добавить("бзТекстВопросаHTML", Тип("ПолеФормы"), ГруппаВопросы);
	//Элемент.Вид
	//	= ВидПоляФормы.ПолеФорматированногоДокумента;
	Элемент.Вид					= ВидПоляФормы.ПолеHTMLДокумента;	
	Элемент.ПутьКДанным			= "бзТекстВопросаHTML";
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ТолькоПросмотр		= Ложь;
	Элемент.УстановитьДействие("ПриНажатии", "Подключаемый_бзТекстВопросаHTMLПриНажатии");
	// Сворачиваем базу знаний.
	Родитель.Видимость	= Ложь;
	Возврат Истина;
КонецФункции // ЗаполнениеБазыЗнанийВФорме()

//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛНОТЕКСТОВОГО ПОИСКА РЕШЕНИЙ

// Процедура определяет доступность полнотекстового поиска для справочника "Решения".
//
// Параметры:
//	Форма	- УправляемаяФорма	- Форма, для которой определяется доступность.
//
Процедура бзДоступностьПолнотекстовыйПоискСписокРешений(Форма) Экспорт
	// Настроим видимость элементов.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск") Тогда
		Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
			ИсторияПоискаРешений = ХранилищеОбщихНастроек.Загрузить("ИсторияПоискаРешений");
			Если НЕ (ИсторияПоискаРешений = Неопределено) Тогда
				Форма.бзСтрокаПоискаСписокВыбора.ЗагрузитьЗначения(ИсторияПоискаРешений);
			КонецЕсли;
			Форма.бзИндексППДАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
		Иначе
			Форма.Элементы.бзГруппаПоиска.Видимость			= Ложь;
			Форма.Элементы.бзГруппаПроектИндекс.Видимость	= Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // БзДоступностьПолнотекстовыйПоискСписокРешений().

// Функция находит решения по заданным условиям.
//
// Параметры:
//	Форма			- УправляемаяФорма	- Форма, на которой выполняется поиск.
//	СтруктураОтбора	- Структура			- Структура, содержащая параметры отбора решений.
//
// Возвращаемое значение:
//	Строка	- Текст ошибки
//
Функция бзНайтиРешенияПолнотекстовыйПоиск(Форма, СтруктураОтбора) Экспорт
	// Удаляем из таблицы решений все непомеченные решения.
	бзУдалитьНеотмеченныеРешения(Форма);
	// Получим результаты поиска
	Если Форма.Элементы.Найти("бзСтрокаПоиска") = Неопределено Тогда
		СтрокаДляПоиска	= "";
	Иначе
		СтрокаДляПоиска	= Форма.бзСтрокаПоиска;
	КонецЕсли;	
	Если Форма.Элементы.Найти("бзОбластьПоиска") = Неопределено Тогда
		ОбластьПоиска	= "Любое поле";
	ИначеЕсли ПустаяСтрока(Форма.бзОбластьПоиска) Тогда
		ОбластьПоиска	= "Любое поле";
	Иначе	
		ОбластьПоиска	= Форма.бзОбластьПоиска;
	КонецЕсли;	
	Если Форма.Элементы.Найти("бзПоискПоПодстроке") = Неопределено Тогда
		ПоискПоПодстроке	= Ложь;
	Иначе
		ПоискПоПодстроке	= Форма.бзПоискПоПодстроке;
	КонецЕсли;	
	ТаблицаРешений	= Новый ТаблицаЗначений;
	ТаблицаРешений.Колонки.Добавить("Решение",	Новый ОписаниеТипов("СправочникСсылка.CRM_Решения"));
	ТаблицаРешений.Колонки.Добавить("Ответы",	Новый ОписаниеТипов("СписокЗначений"));
	КоличествоРешений	= 100;
	// Выполняем полнотекстовый поиск.
	ТекстОшибки = бзНайтиРешения(СтрокаДляПоиска, ОбластьПоиска, ПоискПоПодстроке, ТаблицаРешений, КоличествоРешений, СтруктураОтбора);
	Если ТекстОшибки = Неопределено Тогда
		// Удалим элемент из истории поиска, если он там был.
		НомерНайденногоЭлементаСписка = Форма.бзСтрокаПоискаСписокВыбора.НайтиПоЗначению(Форма.бзСтрокаПоиска);
		Пока НЕ (НомерНайденногоЭлементаСписка = Неопределено) Цикл
			Форма.бзСтрокаПоискаСписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
			НомерНайденногоЭлементаСписка = Форма.бзСтрокаПоискаСписокВыбора.НайтиПоЗначению(Форма.бзСтрокаПоиска);
		КонецЦикла;	
		// Поставим элемент на первое место.
		Форма.бзСтрокаПоискаСписокВыбора.Вставить(0, Форма.бзСтрокаПоиска);
		Пока Форма.бзСтрокаПоискаСписокВыбора.Количество() > 100 Цикл
			Форма.бзСтрокаПоискаСписокВыбора.Удалить(Форма.бзСтрокаПоискаСписокВыбора.Количество() - 1);
		КонецЦикла;	
		ХранилищеОбщихНастроек.Сохранить("ИсторияПоискаРешений", , Форма.бзСтрокаПоискаСписокВыбора.ВыгрузитьЗначения());
		// Добавляем найденные решения в таблицу решений.
		КоличествоДобавленных = бзДобавитьНайденныеРешения(Форма, ТаблицаРешений);
		// Меняем цвет строки поиска
		Форма.Элементы.бзСтрокаПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		Если КоличествоДобавленных = 0 Тогда
			Возврат НСтр("ru = 'Не найдено новых решений'");
		Иначе	
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	// Меняем цвет строки поиска
	Форма.Элементы.бзСтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	Возврат ТекстОшибки;
КонецФункции // БзНайтиРешенияПолнотекстовыйПоиск().

Функция ОбработатьТекстHTML(Решение, ИДСтроки = "", ИдентификаторФормы = Неопределено) Экспорт
	
	Если ИДСтроки = "" Тогда
		ТекстHTML = Решение.ТекстВопросаHTML;
	Иначе
		МассивСтрок = Решение.Ответы.НайтиСтроки(Новый Структура("ИДСтроки",ИДСтроки));
		ТекстHTML = МассивСтрок[0].ВариантОтветаHTML;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		ТаблицаФайлов = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Решение);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			ДокументHTML = CRM_Взаимодействия.CRM_ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML, ТаблицаФайлов, "utf-8",,ИдентификаторФормы);
			
			Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		Иначе
			Возврат ТекстHTML;
		КонецЕсли;
	Иначе
		Возврат ТекстHTML;
	КонецЕсли;
	
КонецФункции
