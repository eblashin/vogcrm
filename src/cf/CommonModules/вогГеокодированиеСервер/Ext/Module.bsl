////////////////////////////////////////////////////////////////////////////////
#Область ИНТЕРФЕЙС

Функция ПолучитьДанныеГеокодированияПоАдресу(АдресПоиска, ОбластьПоиска=Неопределено, НеИскатьОрганизации=Ложь,КоличествоОтветов = 5) Экспорт
	
	// ++ Тищенко В.В. 22.01.2019
	// Изменен вызов функции
	//ДанныеЗапроса = ПолучитьДанныеПоЗапросу(АдресПоиска,, ОбластьПоиска); 
	ДанныеЗапроса = ПолучитьДанныеПоЗапросу(АдресПоиска,?(НеИскатьОрганизации = Ложь,"biz",Неопределено), ОбластьПоиска, КоличествоОтветов);
	// -- Тищенко В.В. 
	
	СтруктураИтог = ПолучитьСтруктуруРезультатаОбработки(ДанныеЗапроса);
	
	Если НЕ СтруктураИтог.Успешно Тогда
		Возврат СтруктураИтог;
	КонецЕсли;

	// ++ Тищенко В.В. 22.01.2019
	// Если тип поиска по организации 
	Если НеИскатьОрганизации = Ложь Тогда
		СтруктураИтог.Результат = ПолучитьОбработанныеАдресаОрганизации(СтруктураИтог.Результат, ОбластьПоиска, НеИскатьОрганизации);
	Иначе
		СтруктураИтог.Результат = ПолучитьОбработанныеАдреса(СтруктураИтог.Результат, ОбластьПоиска);
	КонецЕсли;
	
	// -- Тищенко В.В.
	
	Возврат СтруктураИтог;
	
КонецФункции

Функция ПолучитьСтруктуруРезультатаОбработки(ДанныеЗапроса) Экспорт 
	
	СтруктураИтог = Новый Структура("Успешно, Результат", Истина, Неопределено);
	
	Если НЕ ДанныеЗапроса.Успешно Тогда
				
		Возврат СтруктураИтог;
		
	КонецЕсли;
	
	ДанныеСервиса = ДанныеЗапроса.Результат;
	
	Если ДанныеСервиса.Получить("code") = Неопределено Тогда
		
		СтруктураИтог.Результат = ДанныеСервиса;
		
	Иначе 
		
		СтруктураИтог.Успешно = Ложь;
		
		СтруктураИтог.Результат = СтрШаблон("Ошибка Яндекс %1, %2", ДанныеСервиса.Получить("code"), ДанныеСервиса.Получить("message"));
		
	КонецЕсли;
	
	Возврат СтруктураИтог;
	
КонецФункции

Функция ПолучитьДанныеПоЗапросу(АдресПоиска, ТипПоиска=Неопределено, ОбластьПоиска=Неопределено, КоличествоОтветов = 5) Экспорт
	
	ТекстЗапроса = "/v1/?text=%1&lang=ru_RU&apikey=%2";
	
	//АдресСервера = "search-maps.yandex.ru";
	
	// ++ Тищенко В.В. 15.01.2019
	// Подставлять по умолчанию тип поиска 
	
	Если ТипПоиска = Неопределено Тогда
		ТекстЗапроса = "/1.x/?geocode=%1&lang=ru_RU&apikey=%2&format=json&" + "results=" + КоличествоОтветов + "";
		АдресСервера = "geocode-maps.yandex.ru";
	Иначе
		ТекстЗапроса = "/v1/?text=%1&lang=ru_RU&apikey=%2";
		АдресСервера = "search-maps.yandex.ru";
	КонецЕсли;

	// -- Тищенко В.В. 
	
    Если ЗначениеЗаполнено(ТипПоиска) Тогда
		ТекстЗапроса = ТекстЗапроса + "&type=" + ТипПоиска;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбластьПоиска) Тогда
		ТекстЗапроса = ТекстЗапроса + "&bbox=" + ВернутьСтрокуОбластиПоиска(ОбластьПоиска);
	КонецЕсли;
	
	// ++ Тищенко В.В. 22.01.2019
	// Если это поиск не по организации тогда подменяем ключ и строку поиска
	//  не кодируем в строку URL
	
	Если ТипПоиска <> Неопределено Тогда
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, КодироватьСтроку(АдресПоиска, СпособКодированияСтроки.КодировкаURL), вогГеокодированиеСерверПовтИсп.ПолучитьКлючЯндекс());
	Иначе
		ТекстЗапроса = СтрШаблон(ТекстЗапроса,АдресПоиска,вогГеокодированиеСерверПовтИсп.ПолучитьКлючЯндексJava());
	КонецЕсли;
	
	// -- Тищенко В.В.
	
	ЗапросHTTP = Новый HTTPЗапрос(ТекстЗапроса);
	
	Соединение = Новый HTTPСоединение(АдресСервера,,,,,10, Новый ЗащищенноеСоединениеOpenSSL);
									  
	Ответ = Соединение.Получить(ЗапросHTTP);
	
	СтруктураИтог = Новый Структура("Успешно, Результат", Истина, Неопределено);
	
	Если НЕ Ответ.КодСостояния = 200 Тогда
		
		СтруктураИтог.Успешно = Ложь;
		
		СтруктураИтог.Результат = "Ошибка выполнения HTTP запроса";
		
		Возврат СтруктураИтог;
		
	КонецЕсли;

	ДанныеСервиса = ПолучитьЗначениеИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
	
	СтруктураИтог.Результат = ДанныеСервиса;
	
	Возврат СтруктураИтог;
	
КонецФункции

Функция ПолучитьВхожденияВПолигоны(Точки, МассивТипов=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПолигонов.НомерТочки КАК НомерТочкиПолигона,
		|	ДанныеПолигонов.Широта КАК Х,
		|	ДанныеПолигонов.Долгота КАК У,
		|	ДанныеПолигонов.НомерПолигона КАК НомерПолигона,
		|	ДанныеПолигонов.Объект КАК Ссылка,
		|	1 КАК РазмерПолигона
		|ПОМЕСТИТЬ Полигон
		|ИЗ
		|	РегистрСведений.вогПолигоныОбъектов КАК ДанныеПолигонов
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоТипам
		|				ТОГДА ТИПЗНАЧЕНИЯ(ДанныеПолигонов.Объект) В (&МассивТипов)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НЕ ДанныеПолигонов.Объект.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Полигон.Ссылка КАК Ссылка,
		|	СУММА(Полигон.РазмерПолигона) КАК РазмерПолигона,
		|	Полигон.НомерПолигона КАК НомерПолигона
		|ПОМЕСТИТЬ РазмерыПолигонов
		|ИЗ
		|	Полигон КАК Полигон
		|
		|СГРУППИРОВАТЬ ПО
		|	Полигон.Ссылка,
		|	Полигон.НомерПолигона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Полигон.НомерТочкиПолигона КАК НомерТочкиПолигона,
		|	Полигон.Х КАК Х,
		|	Полигон.У КАК У,
		|	Полигон.НомерПолигона КАК НомерПолигона,
		|	Полигон.Ссылка КАК Ссылка,
		|	РазмерыПолигонов.РазмерПолигона КАК РазмерПолигона
		|ПОМЕСТИТЬ ПолигоныСРазмером
		|ИЗ
		|	Полигон КАК Полигон
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмерыПолигонов КАК РазмерыПолигонов
		|		ПО Полигон.Ссылка = РазмерыПолигонов.Ссылка
		|			И Полигон.НомерПолигона = РазмерыПолигонов.НомерПолигона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Точки.Точка КАК НаименованиеТочки,
		|	Точки.Х КАК Х,
		|	Точки.У КАК У
		|ПОМЕСТИТЬ Точки
		|ИЗ
		|	&Точки КАК Точки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Точки.НаименованиеТочки КАК НаименованиеТочки,
		|	Точки.Х КАК Точка_Х,
		|	Точки.У КАК Точка_У,
		|	Полигон.НомерТочкиПолигона КАК НомерТочкиПолигона,
		|	Полигон.Х КАК Полигон_Х,
		|	Полигон.У КАК Полигон_У,
		|	Полигон.Х - Точки.Х КАК Разница_Х,
		|	Полигон.У - Точки.У КАК Разница_У,
		|	ВЫБОР
		|		КОГДА Полигон.Х - Точки.Х < 0
		|				И Полигон.У - Точки.У < 0
		|			ТОГДА 2
		|		КОГДА Полигон.Х - Точки.Х < 0
		|				И Полигон.У - Точки.У >= 0
		|			ТОГДА 1
		|		КОГДА Полигон.Х - Точки.Х >= 0
		|				И Полигон.У - Точки.У < 0
		|			ТОГДА 3
		|		КОГДА Полигон.Х - Точки.Х >= 0
		|				И Полигон.У - Точки.У >= 0
		|			ТОГДА 0
		|	КОНЕЦ КАК К,
		|	Полигон.НомерПолигона КАК НомерПолигона,
		|	Полигон.Ссылка КАК Ссылка,
		|	Полигон.РазмерПолигона КАК РазмерПолигона
		|ПОМЕСТИТЬ Таб
		|ИЗ
		|	Точки КАК Точки,
		|	ПолигоныСРазмером КАК Полигон
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Точки.НаименованиеТочки,
		|	Полигон.НомерТочкиПолигона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб.НаименованиеТочки КАК НаименованиеТочки,
		|	Таб.Точка_Х КАК Точка_Х,
		|	Таб.Точка_У КАК Точка_У,
		|	Таб.НомерТочкиПолигона КАК НомерТочкиПолигона,
		|	Таб.Полигон_Х КАК Полигон_Х,
		|	Таб.Полигон_У КАК Полигон_У,
		|	Таб.К КАК К,
		|	ТабПред.К КАК ПредК,
		|	Таб.К - ТабПред.К КАК ДельтаКу,
		|	ВЫБОР
		|		КОГДА Таб.К - ТабПред.К = -3
		|			ТОГДА 1
		|		КОГДА Таб.К - ТабПред.К = 3
		|			ТОГДА -1
		|		КОГДА Таб.К - ТабПред.К = -2
		|				И ТабПред.Разница_Х * Таб.Разница_У >= ТабПред.Разница_У * Таб.Разница_Х
		|			ТОГДА 1
		|		КОГДА Таб.К - ТабПред.К = 2
		|				И НЕ ТабПред.Разница_Х * Таб.Разница_У >= ТабПред.Разница_У * Таб.Разница_Х
		|			ТОГДА -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Результат,
		|	Таб.Ссылка КАК Ссылка,
		|	Таб.НомерПолигона КАК НомерПолигона
		|ПОМЕСТИТЬ Развернуто
		|ИЗ
		|	Таб КАК Таб
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таб КАК ТабПред
		|		ПО Таб.НаименованиеТочки = ТабПред.НаименованиеТочки
		|			И (Таб.НомерТочкиПолигона = ТабПред.НомерТочкиПолигона + 1
		|				ИЛИ Таб.НомерТочкиПолигона = 1
		|					И ТабПред.НомерТочкиПолигона = Таб.РазмерПолигона)
		|			И Таб.Ссылка = ТабПред.Ссылка
		|			И Таб.НомерПолигона = ТабПред.НомерПолигона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Развернуто.НаименованиеТочки КАК НаименованиеТочки,
		|	Развернуто.Точка_Х КАК Х,
		|	Развернуто.Точка_У КАК У,
		|	ВЫБОР
		|		КОГДА СУММА(Развернуто.Результат) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Результат,
		|	Развернуто.Ссылка КАК Ссылка,
		|	Развернуто.НомерПолигона КАК НомерПолигона
		|ПОМЕСТИТЬ ПромежуточныйИтог
		|ИЗ
		|	Развернуто КАК Развернуто
		|
		|СГРУППИРОВАТЬ ПО
		|	Развернуто.НаименованиеТочки,
		|	Развернуто.Точка_Х,
		|	Развернуто.Точка_У,
		|	Развернуто.Ссылка,
		|	Развернуто.НомерПолигона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПромежуточныйИтог.Ссылка КАК Ссылка,
		|	ПромежуточныйИтог.НаименованиеТочки КАК Точка,
		|	ПромежуточныйИтог.Х КАК Х,
		|	ПромежуточныйИтог.У КАК У
		|ИЗ
		|	ПромежуточныйИтог КАК ПромежуточныйИтог
		|ГДЕ
		|	ПромежуточныйИтог.Результат";
	
	Запрос.УстановитьПараметр("МассивТипов", 	МассивТипов);
	Запрос.УстановитьПараметр("ОтборПоТипам", ?(МассивТипов=Неопределено, Ложь, МассивТипов.Количество()>0));
	
	Запрос.УстановитьПараметр("Точки", 		Точки);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуАдресовДляПроверкиПересечений() Экспорт 
	
	Таблица = Новый ТаблицаЗначений;
	
	ОписаниеКоординаты =  Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(16,12));
	
	Таблица.Колонки.Добавить("Точка", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	Таблица.Колонки.Добавить("Х", ОписаниеКоординаты);
	Таблица.Колонки.Добавить("У", ОписаниеКоординаты);
		
	Возврат Таблица;
	
КонецФункции

#Область ОбщиеОбработчикиФорм

Процедура ПриСозданииЗаСервереСформироватьДанныеФормы(Форма) Экспорт
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ИмяТаблицы = "Полигоны";
	
	ТаблицаПолигоны = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаПолигоны.СохраняемыеДанные = Истина;
	
	МассивДобавляемыхРеквизитов.Добавить(ТаблицаПолигоны);
			
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("НомерПолигона", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0)), ИмяТаблицы));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Контур", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0)), ИмяТаблицы));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("НомерТочки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0)), ИмяТаблицы));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Долгота", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(16,9)), ИмяТаблицы));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Широта", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(16,9)), ИмяТаблицы));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогПолигоныОбъектов.Объект КАК Объект,
		|	вогПолигоныОбъектов.НомерПолигона КАК НомерПолигона,
		|	вогПолигоныОбъектов.Контур КАК Контур,
		|	вогПолигоныОбъектов.НомерТочки КАК НомерТочки,
		|	вогПолигоныОбъектов.Долгота КАК Долгота,
		|	вогПолигоныОбъектов.Широта КАК Широта
		|ИЗ
		|	РегистрСведений.вогПолигоныОбъектов КАК вогПолигоныОбъектов
		|ГДЕ
		|	вогПолигоныОбъектов.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Объект,
		|	НомерПолигона,
		|	Контур,
		|	НомерТочки";
		
		Запрос.УстановитьПараметр("Объект", Форма.Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрока = Форма.Полигоны.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиНаСервереСохранитьДанные(Форма, ПараметрыЗаписи, Ссылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.вогПолигоныОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	
	НомерТочки = 1;
	Для Каждого стр из Форма.Полигоны Цикл 
		
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, стр);
		НоваяСтрока.Объект = Ссылка;
		НоваяСтрока.НомерТочки = НомерТочки;
		
		НомерТочки = НомерТочки + 1;
	КонецЦикла;

	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область dadata

Функция ПолучитьДанныеСервиса_dadata_ПоЗапросу(ТекстЗапроса, ВидЗапроса) Экспорт
	
	АдресЗапроса = ПолучитьАдресаСервисаПоВидуЗапроса(ВидЗапроса);
	
	АдресСервера = "dadata.ru";
	
	
	Если ТипЗнч(ТекстЗапроса) = Тип("Строка") Тогда
		
		МассивТела = Новый Массив;
		МассивТела.Добавить(ТекстЗапроса);
		ВернутьМассив = Ложь;
	ИначеЕсли ТипЗнч(ТекстЗапроса) = Тип("Массив") Тогда
		
		МассивТела = ТекстЗапроса;
		ВернутьМассив = Истина;
		
	Иначе 
		ВызватьИсключение "Не поодерживается тип данных для проверки";
	КонецЕсли;
	
	ТелоЗапроса = ПолучитьСтрокуJSON(МассивТела);
	
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса);
	
	ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
	
	ЗапросHTTP.Заголовки.Вставить("Authorization", "Token " + вогГеокодированиеСерверПовтИсп.ПолучитьКлючDaDaTa());
	ЗапросHTTP.Заголовки.Вставить("X-Secret", вогГеокодированиеСерверПовтИсп.ПолучитьСекретныйКлючDaDaTa());
	
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Соединение = Новый HTTPСоединение(АдресСервера,,,,,10, Новый ЗащищенноеСоединениеOpenSSL);
	
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	
	СтруктураИтог = Новый Структура("Успешно, Результат", Истина, Неопределено);
	
	Если НЕ Ответ.КодСостояния = 200 Тогда
		
		СтруктураИтог.Успешно = Ложь;
		
		СтруктураИтог.Результат = "Ошибка выполнения HTTP запроса " + Ответ.ПолучитьТелоКакСтроку();
		
		Возврат СтруктураИтог;
		
	КонецЕсли;
	
	ДанныеСервиса = ПолучитьЗначениеИзОтветаJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Если НРег(ВидЗапроса) = НРег("Телефон") Тогда;
		СтруктураИтог.Результат = ПолучитьДанныеВозвратаПоНомеруТелефона(ДанныеСервиса, ВернутьМассив);
	ИначеЕсли НРег(ВидЗапроса) = НРег("Адрес") Тогда
		СтруктураИтог.Результат = ПолучитьДанныеВозвратаАдресу(ДанныеСервиса, ВернутьМассив);
	Иначе 
		ВызватьИсключение "Не поддерживаемый вид запросв";
	КонецЕсли;
	
	Возврат СтруктураИтог;

КонецФункции

Функция ПолучитьДанныеВозвратаПоНомеруТелефона(ДанныеСервиса, ВернутьМассив)
	
	Если ВернутьМассив Тогда
		ДанныеВозврата = Новый Массив;
	КонецЕсли;
		
	Для Каждого СтрДанных Из ДанныеСервиса Цикл 
		
		СтруктураДанных = Новый Структура("КодСтраны, КодГорода, Номер, Добавочный, ТипНомера, Исходный, КодКачества", "country_code", "city_code", "number", "extension", "type", "source", "qc");
		
		Для Каждого стр из СтруктураДанных Цикл 
			
			Данные = СтрДанных.Получить(стр.Значение);
			
			Если Данные = Неопределено Тогда
				СтруктураДанных.Вставить(стр.Ключ, "");
			Иначе 
				СтруктураДанных.Вставить(стр.Ключ, СокрЛП(Данные));
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ВернутьМассив Тогда
			Возврат СтруктураДанных; 	
		КонецЕсли;
		
		ДанныеВозврата.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ПолучитьДанныеВозвратаАдресу(ДанныеСервиса, ВернутьМассив)
	
	Если ВернутьМассив Тогда
		ДанныеВозврата = Новый Массив;
	КонецЕсли;
		
	Для Каждого СтрДанных Из ДанныеСервиса Цикл 
		
		СтруктураДанных = Новый Структура("Исходный, Индекс, Страна, Регион, Город, Улица, Дом, Корпус, Квартира, Долгота, Широта, ТипКвартиры, ТипДома, ТипСтроения",
						"source", "postal_code", "country", "region", "city", "street", "house", "block", "flat", "geo_lat", "geo_lon", "flat_type_full", "house_type_full", "block_type_full");
		
		Для Каждого стр из СтруктураДанных Цикл 
			
			Данные = СтрДанных.Получить(стр.Значение);
			
			Если Данные = Неопределено Тогда
				СтруктураДанных.Вставить(стр.Ключ, "");
			Иначе 
				СтруктураДанных.Вставить(стр.Ключ, СокрЛП(Данные));
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ВернутьМассив Тогда
			Возврат СтруктураДанных; 	
		КонецЕсли;
		
		ДанныеВозврата.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ПолучитьАдресаСервисаПоВидуЗапроса(ВидЗапроса) 
	
	Если НРег(ВидЗапроса) = НРег("Телефон") Тогда;
		Возврат "/api/v2/clean/phone";
	ИначеЕсли НРег(ВидЗапроса) = НРег("Адрес") Тогда
		Возврат "/api/v2/clean/address";	
	Иначе 
		ВызватьИсключение "Не поддерживаемый вид запросв";
	КонецЕсли;
			
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

Функция ПолучитьОбработанныеАдресаОрганизации(ДанныеСервиса, ОбластьПоиска, НеИскатьОрганизации=Ложь)
	
	МассивАдресов = Новый Массив;
	
	Для каждого КонтейнераОтвета Из ДанныеСервиса["features"] Цикл
		
		ОписаниеОбъекта = КонтейнераОтвета["properties"];
		
		ДанныеПоАдресу = ОписаниеОбъекта.Получить("GeocoderMetaData");
		
		Если НЕ ДанныеПоАдресу = Неопределено Тогда
			
			СтруткураАдреса = РазобратьДанныеПоАдресу(ДанныеПоАдресу, ОбластьПоиска, НеИскатьОрганизации);
			
			СтруткураАдреса.Вставить("ИД", ОписаниеОбъекта.Получить("id"));
			СтруткураАдреса.Вставить("Организаций", СтруткураАдреса.Компании.Количество());
			
			СтруктураКоординат = ПолучитьСтруктуруКоординатОрганизации(КонтейнераОтвета.Получить("geometry"));
			
			ЗаполнитьЗначенияСвойств(СтруткураАдреса, СтруктураКоординат);
			
			МассивАдресов.Добавить(СтруткураАдреса);
	
		КонецЕсли; 
				
	КонецЦикла; 

	Возврат МассивАдресов;
	
КонецФункции

// Тищенко В.В.
Функция ПолучитьОбработанныеАдреса(ДанныеСервиса, ОбластьПоиска)

	
	МассивАдресов = Новый Массив;
	
	ОтветЯндекс 		= ДанныеСервиса.Получить("response");
	ПолученныеЭлемнты 	= ОтветЯндекс.Получить("GeoObjectCollection");
	
	Для каждого КонтейнераОтвета Из ПолученныеЭлемнты["featureMember"] Цикл
		
		ОписаниеОбъекта = КонтейнераОтвета["GeoObject"]["metaDataProperty"];
		Координаты		= КонтейнераОтвета["GeoObject"]["Point"];
		
		ДанныеПоАдресу 	= ОписаниеОбъекта.Получить("GeocoderMetaData");
		
		Если НЕ ДанныеПоАдресу = Неопределено Тогда
			
			СтруткураАдреса = РазобратьДанныеПоАдресу(ДанныеПоАдресу, ОбластьПоиска,Истина);
			
			// { VOG RMV 2019-03-26 task 158
			//Для любой ситуации, кроме как точное соответствие, оставляю координаты из тега ответа metaDataProperty.GeocoderResponseMetaData, при условии, что они заполнены
			Если ДанныеПоАдресу.Получить("precision") <> "exact" Тогда				
				МетаКоординаты = ПолученныеЭлемнты["metaDataProperty"]["GeocoderResponseMetaData"]["Point"];
				Если ЗначениеЗаполнено(МетаКоординаты) Тогда
					Координаты = МетаКоординаты;
				КонецЕсли;
			КонецЕсли;
			// } VOG RMV 2019-03-26 task 158
			
			СтруктураКоординат = ПолучитьСтруктуруКоординат(Координаты);
			
			ЗаполнитьЗначенияСвойств(СтруткураАдреса, СтруктураКоординат);
			
			МассивАдресов.Добавить(СтруткураАдреса);
	
		КонецЕсли; 
				
	КонецЦикла; 

	Возврат МассивАдресов;
	
КонецФункции // -- Тищенко В.В.

Функция ПолучитьСоответствиеПолигонов(ТаблицаДанных, Наименование="") Экспорт
	
	Если ТаблицаДанных.Колонки.Найти("Наименование") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
		ТаблицаДанных.ЗаполнитьЗначения(Наименование, "Наименование");
	КонецЕсли;
	
	Если ТаблицаДанных.Колонки.Найти("Объект") = Неопределено Тогда
		
		ТаблицаДанных.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));		
		
		Для Каждого стр из ТаблицаДанных Цикл 
			стр.Объект = стр.Наименование;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.НомерПолигона КАК НомерПолигона,
		|	ТЗ.Контур КАК Контур,
		|	ТЗ.Наименование КАК Наименование,
		|	ТЗ.Долгота КАК Долгота,
		|	ТЗ.Широта КАК Широта,
		|	ТЗ.Объект КАК Объект
		|ПОМЕСТИТЬ Врем
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Врем.НомерПолигона КАК НомерПолигона,
		|	Врем.Контур КАК Контур,
		|	Врем.Долгота КАК Долгота,
		|	Врем.Широта КАК Широта,
		|	Врем.Объект КАК Объект,
		|	Врем.Наименование КАК Наименование
		|ИЗ
		|	Врем КАК Врем
		|ИТОГИ
		|	МАКСИМУМ(Наименование)
		|ПО
		|	Объект,
		|	НомерПолигона,
		|	Контур";
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбъект = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивОбъектов = Новый Массив;
	
	Пока ВыборкаОбъект.Следующий() Цикл
	
		ВыборкаНомерПолигона = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтруктураОбъекта = Новый Структура("name, polygons", ВыборкаОбъект.Наименование, Новый Массив);
		
		Пока ВыборкаНомерПолигона.Следующий() Цикл
				
			ВыборкаКонутр = ВыборкаНомерПолигона.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			МассивКонтуров = Новый Массив;
			
			Пока ВыборкаКонутр.Следующий() Цикл
				
				МассивКонтура = Новый Массив;
				
				ВыборкаДетальныеЗаписи = ВыборкаКонутр.Выбрать();
	
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Координата = Новый Массив;
					Координата.Добавить(ВыборкаДетальныеЗаписи.Долгота);
					Координата.Добавить(ВыборкаДетальныеЗаписи.Широта);
					
					МассивКонтура.Добавить(Координата);
					
				КонецЦикла;
				
				МассивКонтуров.Добавить(МассивКонтура);
				
			КонецЦикла;
			
			СтруктураОбъекта.polygons.Добавить(МассивКонтуров);
			
		КонецЦикла;
		
		МассивОбъектов.Добавить(СтруктураОбъекта);
		
	КонецЦикла;
			
	Возврат МассивОбъектов;
	
КонецФункции // ПолучитьДанныеПолигонов()

Процедура РазвернутьДанныеПоПолигонам(Приемник, МассивОбъектов, ИспользоватьНаименование=Ложь) Экспорт
	
	Приемник.Очистить();
	
	НомерПолигона = 1;
	
	Для Каждого Объект из МассивОбъектов Цикл 
		
		Для Каждого Полигон из Объект.polygons Цикл 
			
			НомерКонтура = 1;
			
			Для Каждого Контур из Полигон Цикл 
				
				Для Каждого Точка из Контур Цикл
					
					НоваяСтрока 				= Приемник.Добавить();
					НоваяСтрока.Долгота 		= Точка.Получить(0);
					НоваяСтрока.Широта 			= Точка.Получить(1);
					НоваяСтрока.Контур 			= НомерКонтура;
					НоваяСтрока.НомерПолигона 	= НомерПолигона;
					
					Если ИспользоватьНаименование Тогда
						НоваяСтрока.Наименование = Объект.name; 
					КонецЕсли;
					
				КонецЦикла;

				НомерКонтура = НомерКонтура + 1;
				
			КонецЦикла;
			
			НомерПолигона = НомерПолигона + 1;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

Функция ПолучитьСтруктуруКоординатОрганизации(ДанныеКоррдинат)
	
	СтруктураИтог = Новый Структура("Широта, Долгота", 0, 0);
	
	Если ДанныеКоррдинат = Неопределено Тогда
		Возврат СтруктураИтог;
	КонецЕсли;
	
	Координаты = ДанныеКоррдинат.Получить("coordinates");
	
	Если Координаты = Неопределено Тогда
		Возврат СтруктураИтог;
	КонецЕсли;
	
	Если Координаты.Количество() > 1 Тогда
		СтруктураИтог.Широта = Координаты.Получить(0);
		СтруктураИтог.Долгота = Координаты.Получить(1);
	КонецЕсли;
	
	Возврат СтруктураИтог;
	
КонецФункции

// ++ Тищенко В.В.
Функция ПолучитьСтруктуруКоординат(ДанныеКоррдинат)
	
	СтруктураИтог = Новый Структура("Широта, Долгота", 0, 0);
	
	Если ДанныеКоррдинат = Неопределено Тогда
		Возврат СтруктураИтог;
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеКоррдинат["pos"]," ");
	
	Если МассивСтрок.Количество() > 1 Тогда
		СтруктураИтог.Широта 	= Число(МассивСтрок[0]);
		СтруктураИтог.Долгота 	= Число(МассивСтрок[1]);
	КонецЕсли;
	
	Возврат СтруктураИтог;
	
КонецФункции // -- Тищенко В.В.

Функция РазобратьДанныеПоАдресу(ДанныеПоАдресу, ОбластьПоиска, НеИскатьОрганизации=Ложь)
		
	СтруктураОбъекта = Новый Структура;
	
	СтруктураОбъекта.Вставить("Широта", 0);
	СтруктураОбъекта.Вставить("Долгота", 0);
	СтруктураОбъекта.Вставить("Компании", Новый Массив);
	
	СтруктураОбъекта.Вставить("Представление", ДанныеПоАдресу.Получить("text"));
	СтруктураОбъекта.Вставить("Комментарий",  вогГеокодированиеСерверПовтИсп.ОпределитьТочностьСоответсвия(ДанныеПоАдресу.Получить("precision")));
	
	Если НЕ НеИскатьОрганизации Тогда
		ДобавитьИнформацияПоКомпаниям(СтруктураОбъекта.Представление, ОбластьПоиска, СтруктураОбъекта.Компании);
	КонецЕсли;
	
	Возврат СтруктураОбъекта;

КонецФункции

//В параметре bbox задаются географические координаты углов прямоугольника, ограничивающего область просмотра/поиска.
//Указываются координаты левого нижнего и правого верхнего углов (в последовательности «долгота, широта»).
//bbox=36.6,54.6~38.6,56.6
Функция ВернутьСтрокуОбластиПоиска(ГраницыОбласти) Экспорт
	
	bbox = "";
	
	Для каждого УголГраницы Из ГраницыОбласти Цикл
		
		ТекущийУгол = "";
		
		Для каждого КоординатыУгла Из УголГраницы Цикл
			
			ТекЗначение = СтрЗаменить(КоординатыУгла,",",".");
			
			ТекущийУгол = ТекЗначение + ?(ПустаяСтрока(ТекущийУгол),"",",") +  ТекущийУгол;
			 
		 КонецЦикла;
		 
		bbox = bbox + ?(ПустаяСтрока(bbox),"","~") + ТекущийУгол;	
		
	КонецЦикла; 
	
	Возврат bbox; 
	
КонецФункции // ()

Процедура ДобавитьИнформацияПоКомпаниям(АдресПоиска, ОбластьПоиска, МассивКомпаний) Экспорт
	
	ДанныеЗапроса = ПолучитьДанныеПоЗапросу(АдресПоиска, "biz", ОбластьПоиска); 
	
	СтруктураПоОрганизациям = ПолучитьСтруктуруРезультатаОбработки(ДанныеЗапроса);
	
	Если НЕ СтруктураПоОрганизациям.Успешно Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ответ геокодирования:" + СтруктураПоОрганизациям.Результат);
		Возврат;
	КонецЕсли;
	
	Для каждого КонтейнераОтвета Из СтруктураПоОрганизациям.Результат["features"] Цикл
		
		ОписаниеОбъекта = КонтейнераОтвета["properties"];
		
		ДанныеПоАдресу = ОписаниеОбъекта.Получить("CompanyMetaData");
		
		Если НЕ ДанныеПоАдресу = Неопределено Тогда
			
			СтруктураАдреса = Новый Структура;
			
			СтруктураАдреса.Вставить("Наименование", ДанныеПоАдресу.Получить("name"));
			СтруктураАдреса.Вставить("Адрес", ДанныеПоАдресу.Получить("address"));
			СтруктураАдреса.Вставить("Категории", ПолучитьСтрокуКатегорий(ДанныеПоАдресу.Получить("Categories")));
			СтруктураАдреса.Вставить("Сайт", ДанныеПоАдресу.Получить("url"));
			СтруктураАдреса.Вставить("Телефон", ПолучитьСтрокуТелефонов(ДанныеПоАдресу.Получить("Phones")));
			СтруктураАдреса.Вставить("ИДОбъекта", ДанныеПоАдресу.Получить("id"));
			СтруктураАдреса.Вставить("Индекс", ДанныеПоАдресу.Получить("postalCode"));
			
			МассивКомпаний.Добавить(СтруктураАдреса);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	
КонецПроцедуры

Функция ПолучитьСтрокуКатегорий(ДанныеКатегорий)
	
	СтрокаИтог = "";
	
	Если ДанныеКатегорий = Неопределено Тогда
		Возврат СтрокаИтог;
	КонецЕсли;
	
	Для Каждого стр ИЗ ДанныеКатегорий Цикл 
		
		ИмяКатегории = стр.Получить("name");
		
		Если ЗначениеЗаполнено(ИмяКатегории) Тогда
			
			СтрокаИтог = СтрокаИтог + ?(ЗначениеЗаполнено(СтрокаИтог), "; ", "") +  ИмяКатегории;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаИтог);
	
КонецФункции

Функция ПолучитьСтрокуТелефонов(ДанныеТелефонов)
	
	СтрокаИтог = "";
	
	Если ДанныеТелефонов = Неопределено Тогда
		Возврат СтрокаИтог;
	КонецЕсли;
	
	Для Каждого стр ИЗ ДанныеТелефонов Цикл 
		
		Телефон = стр.Получить("formatted");
		
		Если ЗначениеЗаполнено(Телефон) Тогда
			
			СтрокаИтог = СтрокаИтог + ?(ЗначениеЗаполнено(СтрокаИтог), "; ", "") +  Телефон;
			
		КонецЕсли;
		

	КонецЦикла;
	
	Возврат СокрЛП(СтрокаИтог);
	
КонецФункции

Функция ПолучитьЗначениеИзОтветаJSON(ТекстJSON)Экспорт 
	
	ЧтениеJSON	= Новый ЧтениеJSON;
	
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	Значение	= ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьСтрокуJSON(Значение) Экспорт 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции


#КонецОбласти

