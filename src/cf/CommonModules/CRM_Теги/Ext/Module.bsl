

#Область ФормаОбъекта

// Процедура создает элементы отображения тегов в форме объекта.
//
// Параметры:
//  Форма			 					-  форма объекта.
Процедура ОбновитьОблакоТегов(Форма) Экспорт
	СписокВышестоящихПодразделений = Новый СписокЗначений;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_УправлениеДоступомПовтИсп.ПолучитьВышестоящиеПодразделения(ТекущийПользователь,Истина));
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	МассивУдаляемых = Новый Массив;
	Для Каждого ЭлементТег Из Элементы.ОблакоТегов.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементТег.Имя, 12) = "СтрокаТегов_" И НЕ ЭлементТег.Имя = "СтрокаТегов_1" Тогда
			МассивУдаляемых.Добавить(ЭлементТег);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементТег Из Элементы.СтрокаТегов_1.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементТег.Имя, 4) = "Тег_" Тогда
			МассивУдаляемых.Добавить(ЭлементТег);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементТег Из МассивУдаляемых Цикл
		Элементы.Удалить(ЭлементТег);
	КонецЦикла;
	
	МаксДлинаПервойСтроки = 61;
	МаксДлинаСтроки = МаксДлинаПервойСтроки + 24;
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 1;
	ТекущаяДлинаСтроки = 0;
	ГруппаТегов = Элементы.СтрокаТегов_1;
	
	СписокТегов = Объект.CRM_Теги.Выгрузить();
	Запрос = Новый Запрос;
	
	Запрос.Текст = 		
		"ВЫБРАТЬ
		|	Теги.Тег,
		|	Теги.НомерСтроки
		|ПОМЕСТИТЬ Теги
		|ИЗ
		|	&Теги КАК Теги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Теги.Тег,
		|	ВЫБОР
		|		КОГДА CRM_Теги.Владелец = &ТекущееПодразделение
		|			ТОГДА 1
		|		КОГДА CRM_Теги.Владелец В (&СписокВышестоящихПодразделений)
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК Приоритет,
		|	Теги.НомерСтроки
		|ИЗ
		|	Теги КАК Теги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_Теги КАК CRM_Теги
		|		ПО Теги.Тег = CRM_Теги.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	Запрос.УстановитьПараметр("Теги", СписокТегов);	
	Запрос.УстановитьПараметр("ТекущееПодразделение", ТекущееПодразделение);
	Запрос.УстановитьПараметр("СписокВышестоящихПодразделений", СписокВышестоящихПодразделений);
	
	СписокТеговОбработанный = Запрос.Выполнить().Выгрузить();	
	
	Для Каждого СтрокаТегов Из СписокТеговОбработанный Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		ПредставлениеТега = Строка(СтрокаТегов.Тег);
		Если СтрДлина(ПредставлениеТега) > 15 Тогда
			ПредставлениеТега = Лев(ПредставлениеТега, 15) + "...";
			ДлинаТега = 15 - 1;
		Иначе
			ДлинаТега = СтрДлина(ПредставлениеТега) + 1;
		КонецЕсли;
		
		ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ДлинаТега;
		
		Если (НомерСтрокиЭлементов = 1 И ТекущаяДлинаСтроки > МаксДлинаПервойСтроки) Или (НомерСтрокиЭлементов > 1 И ТекущаяДлинаСтроки > МаксДлинаСтроки) Тогда
			
			ТекущаяДлинаСтроки = ДлинаТега;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаТегов = Элементы.Добавить("СтрокаТегов_" + НомерСтрокиЭлементов, Тип("ГруппаФормы"), ?(НомерСтрокиЭлементов = 1, Элементы.ПерваяСтрока, Элементы.ОблакоТегов));
			ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаТегов.ОтображатьЗаголовок = Ложь;
			ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТегов.РастягиватьПоВертикали = Ложь;
			ГруппаТегов.Высота = 1;
			
		КонецЕсли;
		
		КомпонентыТега = Новый Массив;
		КомпонентыТега.Добавить(Новый ФорматированнаяСтрока(ПредставлениеТега + " "));
		КомпонентыТега.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , "ТегИД_" + СтрокаТегов.НомерСтроки));
		
		ЭлементТег = Элементы.Добавить("Тег_" + НомерЭлемента, Тип("ДекорацияФормы"), ГруппаТегов);
		ЭлементТег.Вид = ВидДекорацииФормы.Надпись;
		ЭлементТег.Заголовок = Новый ФорматированнаяСтрока(КомпонентыТега);
		// Если у тега проставлены цвета - сразу покрасим фон.
		Если ЗначениеЗаполнено(СтрокаТегов.Тег.Цвет) Тогда
			ЦветТекущий = СтрокаТегов.Тег.Цвет;
			ЦветТега = Новый Цвет(ЦветТекущий.ЦветКрасный, ЦветТекущий.ЦветЗеленый, ЦветТекущий.ЦветСиний);
		Иначе
			ЦветТега = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;
		ЭлементТег.Подсказка = Строка(СтрокаТегов.Тег);
		ЭлементТег.ЦветФона = ЦветТега;
		ЭлементТег.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементТег.Ширина = ДлинаТега;
		
		ЭлементТег.Доступность = (СтрокаТегов.Приоритет <> 3);
		
		ЭлементТег.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ТегОбработкаНавигационнойСсылки");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает элементы формы для отборов по тегам.
//
// Параметры:
//  Форма					 			- форма списка.
//  МаксимальнаяДлинаСтроки	 			- число - максимальное количество символов помещающихся в одну строку.
//  Подразделение			 			- подразделение, чьи теги должны отображаться первыми.
//  СписокВышестоящихПодразделений 		- подразделения, чьи теги выводятся после Подразделение.
Процедура ОбновитьЗначенияОтбораТегов(Форма, МаксимальнаяДлинаСтроки = 85, Подразделение = Неопределено, СписокВышестоящийхПодразделений = Неопределено, ИспользоватьТегНет = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	Форма.ОтборТеги.Очистить();
	
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы Цикл
		Если Лев(Элемент.Имя, 4) = "Тег_" Или Лев(Элемент.Имя, 11) = "СтрокаТегов" Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Теги.Ссылка,
		|	Теги.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА Теги.Владелец = &ПодразделениеПользователя
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.CRM_Теги КАК Теги
		|ГДЕ
		|	Теги.ПометкаУдаления = ЛОЖЬ
		|	И Теги.Владелец В(&СписокВышестоящийхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Представление";
		
	Запрос.УстановитьПараметр("ПодразделениеПользователя", Подразделение);
	Запрос.УстановитьПараметр("СписокВышестоящийхПодразделений", СписокВышестоящийхПодразделений);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 0;
	ТекущаяДлинаСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если СтрДлина(Выборка.Представление) > 15 Тогда
			ПредставлениеТега = Лев(Выборка.Представление, 15) + "...";
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + 15 + 2;
		Иначе
			ПредставлениеТега = Выборка.Представление;
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + СтрДлина(ПредставлениеТега) + 2;
		КонецЕсли;
		
		СтрокаОтбораТегов = Форма.ОтборТеги.Добавить(Выборка.Ссылка, ПредставлениеТега);
		
		Если НомерСтрокиЭлементов = 0 Или ТекущаяДлинаСтроки > МаксимальнаяДлинаСтроки Тогда
			
			ТекущаяДлинаСтроки = СтрДлина(ПредставлениеТега) + 2;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаТегов = Элементы.Добавить("СтрокаТегов" + НомерСтрокиЭлементов, Тип("ГруппаФормы"), Элементы.ЗначенияОтбораТеги);
			ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаТегов.ОтображатьЗаголовок = Ложь;
			ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТегов.РастягиватьПоВертикали = Ложь;
			ГруппаТегов.Высота = 1;
			
		КонецЕсли;
		
		ЭлементТег = Элементы.Добавить("Тег_" + СтрокаОтбораТегов.ПолучитьИдентификатор(), Тип("ПолеФормы"), ГруппаТегов);
		ЭлементТег.Вид = ВидПоляФормы.ПолеНадписи;
		ЭлементТег.ПутьКДанным = "ОтборТеги[" + НомерЭлемента + "].Представление";
		ЭлементТег.Гиперссылка = Истина;
		ЭлементТег.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементТег.Подсказка = Выборка.Представление;
		ЭлементТег.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементТег.Ширина = СтрДлина(ПредставлениеТега);
		ЭлементТег.РастягиватьПоГоризонтали = Ложь;
		ЭлементТег.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");
		
		НомерЭлемента = НомерЭлемента + 1;
		
	КонецЦикла;
	
	Если ИспользоватьТегНет И НомерЭлемента > 0 Тогда
		ЭлементДляОтбораБезТегов = Элементы.Добавить("Тег_Нет", Тип("ДекорацияФормы"), Элементы.ЗначенияОтбораТеги);
		ЭлементДляОтбораБезТегов.Вид = ВидДекорацииФормы.Надпись;
		ЭлементДляОтбораБезТегов.Гиперссылка = Истина;
		ЭлементДляОтбораБезТегов.Заголовок = "[нет тегов]";
		ЭлементДляОтбораБезТегов.Видимость = Истина;
		ЭлементДляОтбораБезТегов.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ЭлементДляОтбораБезТегов.Ширина = 12;
		ЭлементДляОтбораБезТегов.Высота = 1;
		ЭлементДляОтбораБезТегов.РастягиватьПоГоризонтали = Ложь;	
		ЭлементДляОтбораБезТегов.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");	
	КонецЕсли; 
	
	ЭлементДляОчистки = Элементы.Добавить("Тег_Очистить", Тип("КнопкаФормы"), Элементы.ЗначенияОтбораТеги);
	ЭлементДляОчистки.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементДляОчистки.Картинка = БиблиотекаКартинок.Очистить;
	ЭлементДляОчистки.Отображение 	= ОтображениеКнопки.Картинка;
	ЭлементДляОчистки.ИмяКоманды = "ТегОтборОчистить";
	ЭлементДляОчистки.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	//ЭлементДляОчистки.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");
	
КонецПроцедуры

// Процедура создает элементы формы для отборов по периодам.
//
// Параметры:
//  Форма	 - форма списка
Процедура ОбновитьЗначенияОтбораПериодов(Форма, БудущиеПериоды = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	Форма.ОтборСозданы.Очистить();
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	ПериодПроизвольный = Форма.ОтборСозданы.Добавить();
	
	ПериодСегодня = Форма.ОтборСозданы.Добавить();
	ПериодСегодня.Значение.Вариант = ВариантСтандартногоПериода.Сегодня;
	
	Если НЕ БудущиеПериоды Тогда
		Период3Дня = Форма.ОтборСозданы.Добавить();
		Период3Дня.Значение.ДатаНачала = НачалоДня(ДатаСеанса) - 2*24*3600;
		Период3Дня.Значение.ДатаОкончания = КонецДня(ДатаСеанса);
		
		ПериодНеделя = Форма.ОтборСозданы.Добавить();
		ПериодНеделя.Значение.Вариант = ВариантСтандартногоПериода.Последние7Дней;
		
		ПериодМесяц = Форма.ОтборСозданы.Добавить();
		ПериодМесяц.Значение.Вариант = ВариантСтандартногоПериода.Месяц;
	Иначе	
		Период3Дня = Форма.ОтборСозданы.Добавить();
		Период3Дня.Значение.ДатаНачала = НачалоДня(ДатаСеанса);
		Период3Дня.Значение.ДатаОкончания = КонецДня(ДатаСеанса) + 2*24*3600;
		
		ПериодНеделя = Форма.ОтборСозданы.Добавить();
		ПериодНеделя.Значение.Вариант = ВариантСтандартногоПериода.Следующие7Дней;
		
		ПериодМесяц = Форма.ОтборСозданы.Добавить();
		ПериодТемп = Новый СтандартныйПериод;
		ПериодТемп.Вариант = ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты;
		ПериодМесяц.Значение.ДатаНачала = НачалоДня(ДатаСеанса);
		ПериодМесяц.Значение.ДатаОкончания = ПериодТемп.ДатаОкончания;
	КонецЕсли;
		
КонецПроцедуры

// Процедура изменяет цвет элемента отбора в зависимости от признака использования.
// Необходимо вызывать с сервера для подключаемых процедур, иначе не отрисовывается цвет.
//
// Параметры:
//  Форма		 - форма списка
//  Пометка		 - булево - признак использования отбора по данному элементу.
//  ИмяЭлемента	 - строка - имя элемента формы.
Процедура ИзменитьЦветЭлементаОтбора(Форма, Пометка, ИмяЭлемента) Экспорт
	
	ЭлементОтбора = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Пометка Тогда
		//ЭлементОтбора.ЦветФона = ЦветаСтиля.ФонАктивногоЗначенияОтбора;
		ЭлементОтбора.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
	Иначе
		ЭлементОтбора.ЦветФона = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора тегов строго по доступному подразделению
// пользователя + всем вышестоящим подразделениями.
Процедура УстановитьПараметрыВыбора(Элементы) Экспорт
	СписокВышестоящихПодразделений = Новый СписокЗначений;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_УправлениеДоступомПовтИсп.ПолучитьВышестоящиеПодразделения(ТекущийПользователь,Истина));
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", СписокВышестоящихПодразделений); 
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Тег.ПараметрыВыбора = НовыеПараметры;
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма,Элементы) Экспорт
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда		
		ОбновитьОблакоТегов(Форма);
	Иначе
		Элементы.ОблакоТегов.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Процедура копирует теги из одного объекта в другой.
//
// Параметры:
//  Источник		 - объект или ссылка, из которой берем теги.
//  Приемник		 - объект, в который пишем теги.
Процедура СкопироватьТеги(Источник, Приемник) Экспорт

	Для каждого ТекТег Из Источник.CRM_Теги Цикл
		НовыйТег = 	Приемник.CRM_Теги.Добавить();
		НовыйТег.Тег = ТекТег.Тег;
	КонецЦикла; 	

КонецПроцедуры
 