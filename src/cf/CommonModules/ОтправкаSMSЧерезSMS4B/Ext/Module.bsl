////////////////////////////////////////////////////////////////////////////////
// Подсистема "Отправка SMS"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБЩЕГО МОДУЛЯ "ОтправкаSMSПереопределяемый"

// Функция отправляет SMS через веб-сервис SMS4B и возвращает идентификатор сообщения
//
// Параметры:
//  НомераПолучателей - Массив - номера получателей в формате +7ХХХХХХХХХХ;
//  Текст 			  - Строка - текст сообщения, длиной не более 480 символов;
//  ИмяОтправителя 	  - Строка - имя отправителя, которое будет отображаться вместо номера входящего SMS;
//  Логин			  - Строка - логин пользователя услуги отправки sms;
//  Пароль			  - Строка - пароль пользователя услуги отправки sms.
//
// Возвращаемое значение:
//  Структура: ОтправленныеСообщения - Массив 	- Элемент массива структура: НомерОтправителя, ИдентификаторСообщения
//             ОписаниеОшибки        - Строка	- Пользовательское представление ошибки
//
Функция ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль) Экспорт
	// Подготавливаем сообщения для отправки
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерПолучателя");
	Таблица.Колонки.Добавить("GUID");
	Таблица.Колонки.Добавить("ТекстСообщения");
	Таблица.Колонки.Добавить("КодОшибки");
	// Выбираем сообщения для отправки
	Для Каждого НомерПолучателя Из НомераПолучателей Цикл  
		НовСтрока = Таблица.Добавить();
		НовСтрока.НомерПолучателя	= УбратьЛишниеСимволыТелефона(НомерПолучателя);
		НовСтрока.GUID				= смсПолучитьИдентификаторСообщения();
		НовСтрока.ТекстСообщения	= Текст;
		НовСтрока.КодОшибки			= 0;
	КонецЦикла;  
	// Заполняем номер отправителя
	Если ПустаяСтрока(ИмяОтправителя) Тогда
		Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
		УстановитьПривилегированныйРежим(Истина);
		ИмяОтправителя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ИмяОтправителя");
		УстановитьПривилегированныйРежим(Ложь);
		Если ИмяОтправителя = Неопределено Тогда
			ИмяОтправителя = "";
		КонецЕсли;
	КонецЕсли;
	// Заполняем параметры отправки сообщений
	СписокСообщений	= смсТаблицаЗначенийВМассивСтруктур(Таблица);
	Результат = Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Новый Массив, "");
	// Отправляем сообщения
	ДатаОтправки = ТекущаяДатаСеанса();
	КодОшибки = смсОтправитьСообщения(СписокСообщений, ИмяОтправителя, Текст, ДатаОтправки);
	Если КодОшибки > 0 Тогда
		// Может быть что отправились не все сообщения, а только часть из них
		КолОтправленных = 0;
		ВсегоСообщений = СписокСообщений.Количество();
		ОписаниеОшибки = "";
		Для Каждого Строка Из СписокСообщений Цикл
			Если Строка.КодОшибки >= 1 Тогда // Отправленное(-ые) сообщение(-я), части сообщений
				ОтправленноеСообщение = Новый Структура("НомерПолучателя,ИдентификаторСообщения", "+" + Строка.НомерПолучателя, Лев(Строка.GUID, 20));
				Результат.ОтправленныеСообщения.Добавить(ОтправленноеСообщение);
				КолОтправленных = КолОтправленных + 1;
			Иначе
				ОписаниеОшибки = ОписаниеОшибки +  смсОписаниеОшибокВебСервиса(Строка.КодОшибки) + Символы.ПС;
			КонецЕсли; 
		КонецЦикла; 
		// Если отправились не все сообщения
		Если КолОтправленных < ВсегоСообщений Тогда
			ВывестиСообщение(НСтр("ru = 'Отправлено: " + КолОтправленных + " из " + ВсегоСообщений + "'"),
				СтатусСообщения.Важное, "Отправка сообщений", УровеньЖурналаРегистрации.Предупреждение);
		КонецЕсли;
		Результат.ОписаниеОшибки = СокрП(ОписаниеОшибки);
	ИначеЕсли КодОшибки < 0 Тогда
		// Если метод вернул ошибку
		ВывестиСообщение(НСтр("ru = 'Не удалось отправить сообщения. " +  смсОписаниеОшибокВебСервиса(КодОшибки) + "'"),
			СтатусСообщения.Важное, "Отправка сообщений", УровеньЖурналаРегистрации.Предупреждение);
		Результат.ОписаниеОшибки = смсОписаниеОшибокВебСервиса(КодОшибки);
	КонецЕсли;	
	Возврат Результат;
КонецФункции // ОтправитьSMS()

// Функция возвращает текстовое представление статуса доставки сообщения
//
// Параметры:
//  ИдентификаторСообщения - Строка - идентификатор, присвоенный sms при отправке;
//  Логин			- Строка - логин пользователя услуги отправки sms;
//  Пароль			- Строка - пароль пользователя услуги отправки sms.
//
// Возвращаемое значение:
//  Строка - статус доставки. См. описание функции ОтправкаSMS.СтатусДоставки
//
Функция СтатусДоставки(ИдентификаторСообщения, Логин, Пароль) Экспорт
	КодОшибки = смсПолучитьСтатус(смсПолучитьИдентификаторСообщения(ИдентификаторСообщения));
	Если КодОшибки < 0 Тогда
		ВывестиСообщение(НСтр("ru = 'Не удалось получить статус сообщения. " +  смсОписаниеОшибокВебСервиса(КодОшибки) + "'"),
			СтатусСообщения.Важное,  Нстр("ru='Обновление статусов сообщений'"), УровеньЖурналаРегистрации.Предупреждение);
		КодОшибки = 7;
	КонецЕсли;
	Возврат смсКодВСтатус(КодОшибки);
КонецФункции // СтатусДоставки()

// Функция возвращает список разрешений для отправки SMS с использованием всех доступных провайдеров.
//
// Возвращаемое значение:
//  Массив.
//
Функция Разрешения() Экспорт
	Протокол	= "HTTP";
	Адрес		= "sms4b.ru";
	Порт		= 443;
	Описание	= НСтр("ru = 'Отправка SMS через SMS4B.'");
	Разрешения	= Новый Массив;
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	Возврат Разрешения;
КонецФункции // Разрешения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕГЛАМЕНТНОГО ЗАДАНИЯ

// Функция проверяет есть в базе дубли сообщений
//
// Параметры:
//	СписокГУИД	- массив - Массив GUID сообщений
//	ДатаВхСообщения	- Дата	- Дата входящего сообщений
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Найденные в базе сообщения 
//
Функция смсПроверитьДублиСообщений(СписокГУИД, ДатаВхСообщения)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Массив",	СписокГУИД);
	Запрос.УстановитьПараметр("Дата",	ДатаВхСообщения - 86400);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеSMSАдресаты.ИдентификаторСообщения КАК GUID,
	               |	СообщениеSMSАдресаты.СостояниеСообщения КАК Состояние,
	               |	СообщениеSMSАдресаты.Ссылка КАК ДокументСсылка
	               |ИЗ
	               |	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	               |ГДЕ
	               |	СообщениеSMSАдресаты.ИдентификаторСообщения В(&Массив)
	               |	И СообщениеSMSАдресаты.sms4bДатаЗавершения > &Дата";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // смсПроверитьДублиСообщений()

// Функция получает сообщений из регистра сведений, предназначенные для отправки
//
// Возвращаемое значение:
//	Результат запроса - сообщения для отправки 
//
Функция смсПолучитьСообщенияДляОтправки()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	sms4bСостоянияСообщений.Сообщение КАК Сообщение,
	|	sms4bСостоянияСообщений.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	СообщениеSMSАдресаты.НомерДляОтправки КАК НомерПолучателя,
	|	СообщениеSMSАдресаты.sms4bТекстСообщения КАК ТекстСообщения,
	|	sms4bСостоянияСообщений.ИдентификаторСообщения КАК GUID
	|ИЗ
	|	РегистрСведений.sms4bСостоянияСообщений КАК sms4bСостоянияСообщений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|		ПО sms4bСостоянияСообщений.Сообщение = СообщениеSMSАдресаты.Ссылка
	|			И sms4bСостоянияСообщений.НомерСтрокиДокумента = СообщениеSMSАдресаты.НомерСтроки
	|ГДЕ
	|	sms4bСостоянияСообщений.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.Исходящее)
	|ИТОГИ ПО
	|	Сообщение";
	Возврат Запрос.Выполнить();
КонецФункции // смсПолучитьСообщенияДляОтправки()

// Функция получает сообщения статусы которых нужно обновить
//
Функция смсПолучитьСообщенияДляОбновления()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	sms4bСостоянияСообщений.ИдентификаторСообщения КАК GUID,
	|	sms4bСостоянияСообщений.СостояниеСообщения КАК СтатусСообщения,
	|	sms4bСостоянияСообщений.ТекстОшибки КАК ОписаниеОшибки,
	|	sms4bСостоянияСообщений.Сообщение,
	|	sms4bСостоянияСообщений.НомерСтрокиДокумента
	|ИЗ
	|	РегистрСведений.sms4bСостоянияСообщений КАК sms4bСостоянияСообщений
	|ГДЕ
	|	(sms4bСостоянияСообщений.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправляетсяПровайдером)
	|			ИЛИ sms4bСостоянияСообщений.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправленоПровайдером))";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // смсПолучитьСообщенияДляОбновления()

// Процедура регламентного задания для получения/отправки/обновления статусов сообщений
Процедура РегламентноеЗаданиеПроверкаСМС() Экспорт
	
	смсПровайдерSMS	= Константы.ПровайдерSMS.Получить();
	
	//////////////////////////////////////////////////////////////
	// РАБОТА ЧЕРЕЗ МЕХАНИЗМ SMS4B
		
	Если смсПровайдерSMS = Перечисления.ПровайдерыSMS.SMS4B Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда Возврат; КонецЕсли;
		
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НЕ НастройкаОтправкиSMSВыполнена() Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Ошибка, , ,
				НСтр("ru = 'Не выполнены настройки отправки SMS.'"));
			Возврат;
		КонецЕсли;	
		
		// Обновляем параметры сессии
		СтруктураПараметров = Новый Структура;
		КодОшибки = ПолучитьПараметрыСессии(СтруктураПараметров);
		Если КодОшибки < 0 Тогда Возврат; КонецЕсли;
		
		КодОшибки			= 0;
		ПрерватьОбработку	= Ложь;	
		
		//////////////////////////////////////////////////////////////
		// ОТПРАВКА СООБЩЕНИЙ
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Регламентная отправка сообщений SMS.'"));
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("НомерПолучателя");
		Таблица.Колонки.Добавить("GUID");
		Таблица.Колонки.Добавить("ТекстСообщения");
		Таблица.Колонки.Добавить("КодОшибки");
		Таблица.Колонки.Добавить("НомерСтрокиДокумента");
		// Выбираем сообщения для отправки
		РезультатЗапроса = смсПолучитьСообщенияДляОтправки();
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			ВыборкаРегистра = Выборка.Выбрать();
			Таблица.Очистить();
			Пока ВыборкаРегистра.Следующий() Цикл
				НовСтрока						= Таблица.Добавить();
				НовСтрока.НомерПолучателя		= УбратьЛишниеСимволыТелефона(ВыборкаРегистра.НомерПолучателя);
				НовСтрока.GUID					= смсПолучитьИдентификаторСообщения(ВыборкаРегистра.GUID);
				НовСтрока.ТекстСообщения		= ВыборкаРегистра.ТекстСообщения;
				НовСтрока.НомерСтрокиДокумента	= ВыборкаРегистра.НомерСтрокиДокумента;
				НовСтрока.КодОшибки			= 0;
			КонецЦикла;  
			// Заполняем параметры отправки сообщений
			СписокСообщений				= смсТаблицаЗначенийВМассивСтруктур(Таблица);
			ДокументСсылка				= Выборка.Сообщение;
			НомерОтправителя			= ДокументСсылка.sms4bНомерОтправителя;
			ТекстСообщенияПоУмолчанию	= ДокументСсылка.ТекстСообщения;
			Актуальность 	 		 	= ДокументСсылка.ДатаАктуальностиОтправки;
			ДатаОтправки			  	= ДокументСсылка.ДатаКогдаОтправить;
			РавномернаяРассылка 	  	= ДокументСсылка.sms4bРавномернаяРассылка;
			НачалоПериодаЗапрета 	  	= ДокументСсылка.sms4bНачалоПериодаЗапрета;
			КонецПериодаЗапрета 	 	= ДокументСсылка.sms4bКонецПериодаЗапрета;
			// Отправляем сообщения
			КодОшибки = смсОтправитьСообщения(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию, ДатаОтправки,
				Актуальность, НачалоПериодаЗапрета, КонецПериодаЗапрета, РавномернаяРассылка);
			Если КодОшибки < -100000 Тогда
				// Перешли на другой сервер
				ПрерватьОбработку = Истина;
				КодОшибки = КодОшибки + 100000;
			КонецЕсли;
			// Если метод вернул ошибку
			Если КодОшибки < 0 Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Предупреждение, , ,
					НСтр("ru = 'Документ №" + ДокументСсылка.Номер + ". Не удалось отправить сообщения. " 
					+ смсОписаниеОшибокВебСервиса(КодОшибки) + "'"));
			КонецЕсли;	
			// Может быть что отправились не все сообщения, а только часть из них
			КолОтправленных	= 0;
			ВсегоСообщений	= СписокСообщений.Количество();
			Для Каждого Строка Из СписокСообщений Цикл
				Если Строка.КодОшибки > 0 Тогда // Отправленное(-ые) сообщение(-я), части сообщений
					КолОтправленных = КолОтправленных + 1;
				КонецЕсли; 
			КонецЦикла; 
			// Меняем состояния сообщений в регистре сведений "sms4bСостоянияСообщений"
			НаборЗаписей = РегистрыСведений.sms4bСостоянияСообщений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Значение		= ДокументСсылка;
			НаборЗаписей.Отбор.Сообщение.Использование	= Истина;
			НаборЗаписей.Прочитать();
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			Для Каждого Строка Из СписокСообщений Цикл
				НайденнаяСтрока = ТаблицаЗаписей.Найти(Лев(Строка.GUID, 20), "ИдентификаторСообщения");
				Если НЕ (НайденнаяСтрока = Неопределено) Тогда
					Если Строка.КодОшибки = 0 Тогда // Сообщение не отправилось
						НайденнаяСтрока.СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.Исходящее;
					ИначеЕсли Строка.КодОшибки < 0 Тогда // Ошибка отправки
						НайденнаяСтрока.СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру;
						НайденнаяСтрока.ТекстОшибки			= смсОписаниеОшибокВебСервиса(Строка.КодОшибки);
					ИначеЕсли Строка.КодОшибки > 0 Тогда // Успешно Отправленное(-ые) сообщение(-я), части сообщений
						НайденнаяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
			НаборЗаписей.Записать();
			// Изменим статус документа, если произошла ошибка
			Если КодОшибки < 0 тогда
				Попытка
					СтруктураСтатуса					= смсПолучитьСтатусДокумента(ДокументСсылка);
					ДокументОбъект						= ДокументСсылка.ПолучитьОбъект();
					ДокументОбъект.sms4bСтатусСтрокой	= СтруктураСтатуса.СтатусСтрокой;
					ДокументОбъект.Состояние       		= СтруктураСтатуса.Состояние;
					ДокументОбъект.Записать();
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Предупреждение, , ,
						НСтр("ru = 'Не удалось записать документ: " + ДокументОбъект.Номер + "'"));
				КонецПопытки; 
			КонецЕсли;
			// Если отправились не все сообщения
			Если КолОтправленных < ВсегоСообщений Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Предупреждение, , ,
					НСтр("ru = 'Документ №" + ДокументСсылка.Номер + " Отправлено: " 
					+ КолОтправленных + " из " + ВсегоСообщений + "'"));
			КонецЕсли;
			Если ПрерватьОбработку Тогда
				// Перешли на другой сервер, прерываем регламентное задание
				Возврат;	
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончена регламентная отправка сообщений SMS.'"));
		
		//////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ СООБЩЕНИЙ
		
		Если СтруктураПараметров.КоличествоНомеров > 0 Тогда
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Информация, , ,
				НСтр("ru = 'Регламентное получение сообщений SMS.'"));
			
			// Получаем входящие сообщения
			ЕстьВходящиеСообщение	= Ложь;
			СписокСообщений			= Новый ТаблицаЗначений;
			ДатаПолученияСМС		= Константы.sms4bДатаПолученияСМС.Получить();
			Миллисекунда			= Константы.sms4bМиллисекунда.Получить();
			ТолькоПолные			= Константы.sms4bПолучатьТолькоПолныеСообщения.Получить();
			КодОшибки				= смсПолучитьСообщения(СписокСообщений, ДатаПолученияСМС, Миллисекунда, ТолькоПолные);
			Если КодОшибки < -100000 Тогда // Перешли на другой сервер
				ПрерватьОбработку = Истина;
				КодОшибки = КодОшибки + 100000;
			КонецЕсли;
			// Если есть полученные сообщения
			Если КодОшибки = 1 Тогда 
				МассивГУИД = Новый Массив;
				Для Каждого Строка Из СписокСообщений Цикл
					МассивГУИД.Добавить(Лев(Строка.GUID, 20));
				КонецЦикла;
				// Ищем уже полученные сообщения
				ДублиСообщений = смсПроверитьДублиСообщений(МассивГУИД, ДатаПолученияСМС);
				Для Каждого Строка Из СписокСообщений Цикл
					НайденноеСооб = ДублиСообщений.Найти(Лев(Строка.GUID, 20), "GUID");
					Если НайденноеСооб = Неопределено Тогда
						// Создаем документ для входящего сообщения
						ЕстьВходящиеСообщение				= Истина;
						ВходящееСообщение					= Документы.СообщениеSMS.СоздатьДокумент();
						ВходящееСообщение.Дата				= ТекущаяДатаСеанса();
						ВходящееСообщение.sms4bТипСообщения		= Перечисления.sms4ВходящееИсходящееSMS.Входящее;
						ВходящееСообщение.sms4bНомерОтправителя	= Строка.Отправитель;
						ВходящееСообщение.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
						ВходящееСообщение.Автор 			= Пользователи.ТекущийПользователь();
						Если НЕ ЗначениеЗаполнено(ВходящееСообщение.Автор) Тогда
							ВходящееСообщение.Автор			= Константы.sms4bРоботРегламентныхЗаданий.Получить();
						КонецЕсли;	
						ВходящееСообщение.Ответственный		= ВходящееСообщение.Автор;
						ВходящееСообщение.ТекстСообщения	= Строка.ТекстСообщения;
						ВходящееСообщение.Тема				= ВзаимодействияКлиентСервер.ТемаПоТекстуСообщения(Строка.ТекстСообщения);
						ДатаДок								= Лев(СтрЗаменить(Строка.ДатаПолучения, " ", ""), 16);
						ДатаДок								= СтрЗаменить(ДатаДок, ":", "");
						ДатаПослСообщения 					= Дата(ДатаДок);
						НовСтрока							= ВходящееСообщение.Адресаты.Добавить();
						НовСтрока.ИдентификаторСообщения	= Лев(Строка.GUID, 20);
						НовСтрока.sms4bДатаЗавершения		= ДатаПослСообщения;
						Миллисекунда  			  			= Строка.Миллисекунда;
						НовСтрока.ПредставлениеКонтакта		= Строка.Получатель;
						СтруктураПолей						= ЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Строка.Получатель);
						Если НЕ ЛЕВ(СтруктураПолей.КодСтраны, 1) = "+" Тогда 	
							СтруктураПолей.КодСтраны		= "+" + СтруктураПолей.КодСтраны;
						КонецЕсли;
						НовСтрока.КакСвязаться				= СтруктураПолей.КодСтраны + "(" + СтруктураПолей.КодГорода + ")" + СтруктураПолей.НомерТелефона;
						НовСтрока.НомерДляОтправки			= "+" + УбратьЛишниеСимволыТелефона(НовСтрока.КакСвязаться);
						НовСтрока.sms4bТекстСообщения		= Строка.ТекстСообщения;
						НовСтрока.sms4bМиллисекунда			= Строка.Миллисекунда;
						Если Число(Строка.ТекущаяЧасть) < Число(Строка.ВсегоЧастей) Тогда
							НовСтрока.СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.sms4bПолученоЧастично;
							ВходящееСообщение.Состояние		= Перечисления.СостоянияДокументаСообщениеSMS.sms4bПолученоЧастично;
						Иначе
							НовСтрока.СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.sms4bПолучено;
							ВходящееСообщение.Состояние		= Перечисления.СостоянияДокументаСообщениеSMS.sms4bПолучено;
						КонецЕсли; 
						Попытка
							ВходящееСообщение.Записать();
						Исключение
							ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Предупреждение, , ,
								НСтр("ru = 'Не удалось записать входящее сообщение от номера: " + Строка.Получатель + "'"));
						КонецПопытки; 
					ИначеЕсли НайденноеСооб.Состояние = Перечисления.СостоянияСообщенияSMS.sms4bПолученоЧастично Тогда 
						// Записываем части сообщений в существующий документ
						Попытка
							ДокОбъект		= НайденноеСооб.ДокументСсылка.ПолучитьОбъект();
							ТекстСообщения	= ДокОбъект.ТекстСообщения;
							Если ДокОбъект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.sms4bПолучено Тогда   
								ДокОбъект.Адресаты[0].СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.sms4bПолучено;
								ДокОбъект.Адресаты[0].sms4bТекстСообщения	= Строка.ТекстСообщения;
								ДокОбъект.ТекстСообщения					= Строка.ТекстСообщения;
							ИначеЕсли (ДокОбъект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.sms4bПолученоЧастично)
								И (Число(Строка.ТекущаяЧасть) = Число(Строка.ВсегоЧастей)) Тогда 
								ДокОбъект.Адресаты[0].СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.sms4bПолучено;
								ДокОбъект.Адресаты[0].sms4bТекстСообщения	= ТекстСообщения + Строка.ТекстСообщения;
								ДокОбъект.ТекстСообщения					= ТекстСообщения + Строка.ТекстСообщения;
								ДокОбъект.Состояние							= Перечисления.СостоянияДокументаСообщениеSMS.sms4bПолучено;
								ДатаДок										= Лев(СтрЗаменить(Строка.ДатаПолучения, " ", ""), 16);
								ДатаДок										= СтрЗаменить(ДатаДок, ":", "");
								ДатаПослСообщения							= Дата(ДатаДок);
								ДокОбъект.Адресаты[0].sms4bДатаЗавершения	= ДатаПослСообщения;
								ДокОбъект.Адресаты[0].sms4bМиллисекунда		= Строка.Миллисекунда;
								Миллисекунда								= Строка.Миллисекунда;
								ЕстьВходящиеСообщение						= Истина;
							КонецЕсли; 
							ДокОбъект.Записать();
						Исключение
							ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Предупреждение, , ,
								НСтр("ru = 'Не удалось записать документ: " + ДокОбъект.Номер + "'"));
						КонецПопытки; 
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли КодОшибки < 0 Тогда  
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Предупреждение, , ,
					НСтр("ru = 'Не удалось получить сообщения. " 
					+ смсОписаниеОшибокВебСервиса(КодОшибки) + "'"));
			КонецЕсли;
			// Установим дату получения сообщения равной дате последнего полученного сообщения
			Если ЕстьВходящиеСообщение Тогда
				Константы.sms4bДатаПолученияСМС.Установить(ДатаПослСообщения);
				Константы.sms4bМиллисекунда.Установить(Миллисекунда);
			КонецЕсли; 
			Если ПрерватьОбработку Тогда
				// Перешли на другой сервер, прерываем регламентное задание
				Возврат;	
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Информация, , ,
				НСтр("ru = 'Закончено регламентное получение сообщений SMS.'"));
			
		КонецЕсли;	
		
		//////////////////////////////////////////////////////////////	
		// ОБНОВЛЕНИЕ СТАТУСОВ СООБЩЕНИЙ
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Регламентная проверка статусов сообщений SMS.'"));
			
		// Получаем сообщения для обновления статусов
		СписокСообщений = смсТаблицаЗначенийВМассивСтруктур(смсПолучитьСообщенияДляОбновления());
		Для Каждого Строка Из СписокСообщений Цикл
			Строка.СтатусСообщения	= смсСтатусВКод(Строка.СтатусСообщения);
			Строка.GUID				= смсПолучитьИдентификаторСообщения(Строка.GUID);
		КонецЦикла; 
		// Запрашиваем на сервере состояния сообщений
		КодОшибки = смсОбновитьСтатусы(СписокСообщений);
		Если КодОшибки < -100000 Тогда
			// Перешли на другой сервер
			ПрерватьОбработку = Истина;
			КодОшибки = КодОшибки + 100000;
		КонецЕсли;
		Если КодОшибки = 1 Тогда
			Для Каждого Строка Из СписокСообщений Цикл
				МенеджерЗаписи							= РегистрыСведений.sms4bСостоянияСообщений.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Сообщение				= Строка.Сообщение;
				МенеджерЗаписи.НомерСтрокиДокумента		= Строка.НомерСтрокиДокумента;
				МенеджерЗаписи.ИдентификаторСообщения	= Лев(Строка.GUID, 20);
				Если ПустаяСтрока(Строка.СтатусСообщения) Тогда
					МенеджерЗаписи.СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру;
					МенеджерЗаписи.ТекстОшибки			= смсОписаниеОшибокВебСервиса(-10);
				ИначеЕсли Число(Строка.СтатусСообщения) > 0 Тогда
					МенеджерЗаписи.СостояниеСообщения	= смсКодВСтатус(Число(Строка.СтатусСообщения));
				Иначе
					МенеджерЗаписи.СостояниеСообщения	= Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру;
					МенеджерЗаписи.ТекстОшибки			= смсОписаниеОшибокВебСервиса(Число(Строка.СтатусСообщения));
				КонецЕсли; 
				МенеджерЗаписи.Записать();
			КонецЦикла; 
		ИначеЕсли (КодОшибки = -21) ИЛИ (КодОшибки = -22) Тогда
			// Глобальная ошибка из которой ясно, что в первой строке ошибка.  
			Строка									= СписокСообщений[0];
			МенеджерЗаписи							= РегистрыСведений.sms4bСостоянияСообщений.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Сообщение				= Строка.Сообщение;
			МенеджерЗаписи.НомерСтрокиДокумента		= Строка.НомерСтрокиДокумента;
			МенеджерЗаписи.ИдентификаторСообщения	= Лев(Строка.GUID, 20);
			МенеджерЗаписи.СостояниеСообщения		= Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру;
			МенеджерЗаписи.ТекстОшибки				= смсОписаниеОшибокВебСервиса(КодОшибки);
			МенеджерЗаписи.Записать();
		ИначеЕсли КодОшибки < 0 Тогда 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Предупреждение, , ,
				НСтр("ru = 'Не удалось обновить статусы сообщений. "
				+ смсОписаниеОшибокВебСервиса(КодОшибки) + "'"));
		КонецЕсли;
		ЗаписанныйДок = "";
		// Обновляем статусы документов
		Для Каждого Строка Из СписокСообщений Цикл
			ДокументСсылка = Строка.Сообщение;
			Если НЕ (ДокументСсылка = ЗаписанныйДок) Тогда
				Попытка
					СтруктураСтатуса					= смсПолучитьСтатусДокумента(ДокументСсылка);
					ДокументОбъект						= ДокументСсылка.ПолучитьОбъект();
					ДокументОбъект.sms4bСтатусСтрокой	= СтруктураСтатуса.СтатусСтрокой;
					ДокументОбъект.Состояние			= СтруктураСтатуса.Состояние;
					ДокументОбъект.Записать();
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Предупреждение, , ,
						НСтр("ru = 'Не удалось записать документ: " + ДокументСсылка.Номер + "'"));
				КонецПопытки; 
				ЗаписанныйДок = ДокументСсылка;
			КонецЕсли;
		КонецЦикла; 
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Взаимодействия'"), УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончена регламентная проверка статусов сообщений SMS.'"));
		
		УстановитьПривилегированныйРежим(Ложь);
		
	//////////////////////////////////////////////////////////////
	// РАБОТА ЧЕРЕЗ МЕХАНИЗМ БСП
	
	Иначе
		
		//////////////////////////////////////////////////////////////
		// ОТПРАВКА СООБЩЕНИЙ
		
		Взаимодействия.ОтправкаSMS();		
		
		//////////////////////////////////////////////////////////////	
		// ОБНОВЛЕНИЕ СТАТУСОВ СООБЩЕНИЙ
		
		Взаимодействия.ОбновлениеСтатусовДоставкиSMS();
		
	КонецЕсли;	
		
КонецПроцедуры // РегламентноеЗаданиеПроверкаСМС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫЗЫВАЮЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЕЙ БСП

// Функция возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного) без учета привилегированного режима.
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(Знач ИменаРолей, Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны(ИменаРолей, Пользователь);
КонецФункции // РолиДоступны()

// Функция проверяет правильность сохраненных настроек отправки SMS
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Правильность сохраненных настроек отправки SMS
//
Функция НастройкаОтправкиSMSВыполнена() Экспорт
	Возврат ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
КонецФункции // НастройкаОтправкиSMSВыполнена()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Функция возвращает массив телефонов и факсов контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Массив	- Массив телефонов и факсов
//
Функция ПолучитьМассивТелефоновИФаксов(Контакт) Экспорт
	МассивТелефоновИФаксов = Новый Массив;
	Если ЗначениеЗаполнено(Контакт) Тогда
		Попытка
			ТаблицКИ = Контакт.КонтактнаяИнформация;
		Исключение
			ТаблицКИ = Новый ТаблицаЗначений;
		КонецПопытки;	
		Для Каждого СтрокаКИ Из ТаблицКИ Цикл
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				Если НЕ ПустаяСтрока(СтрокаКИ.Представление) Тогда
					СтруктураКИ = Новый Структура;
					СтруктураКИ.Вставить("Вид", 			СтрокаКИ.Вид);
					СтруктураКИ.Вставить("Представление",	СтрокаКИ.Представление);
					МассивТелефоновИФаксов.Добавить(СтруктураКИ);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	Возврат МассивТелефоновИФаксов;
КонецФункции // ПолучитьМассивТелефоновИФаксов()	

// Функция по полю "Представление" заполняет структуры полей для номера телефона
//
// Параметры:
//	Представление	- Строка	- Представление номера телефона
//
// Возвращаемое значение:
//	Структура	- Структура телефонного номера
//
Функция ЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Представление) Экспорт
	КодСтраны		= "";
	КодГорода		= "";
	НомерТелефона	= "";
	Добавочный		= "";
	Комментарий		= "";
	ТекСтр = СокрЛП(Представление);
	// Вырежем добавочный номер с комментарием
	ПозДоб = Найти(ВРЕГ(ТекСтр), "ДОБ.");
	Если ПозДоб > 0 Тогда
		ДобавочныйСКомментарием = СокрЛП(Сред(ТекСтр, ПозДоб + 4));
		ТекСтр = СокрЛП(Лев(ТекСтр, ПозДоб - 1));
		Если Прав(ТекСтр, 1) = "," Тогда
			ТекСтр = Лев(ТекСтр, СтрДлина(ТекСтр) - 1);
		КонецЕсли;
		ПозДоб = Найти(ВРЕГ(ДобавочныйСКомментарием), ", ");
		Если ПозДоб > 0 Тогда
			Добавочный	= СокрЛП(Лев(ДобавочныйСКомментарием, ПозДоб - 1));
			Комментарий	= СокрЛП(Сред(ДобавочныйСКомментарием, ПозДоб + 2));
		Иначе
			Добавочный = ДобавочныйСКомментарием;
		КонецЕсли;
	КонецЕсли;
	// Вырежем код города
	Поз = Найти(ТекСтр, "(");
	Если Поз > 0 Тогда
		КодСтраны = СокрЛП(Лев(ТекСтр, Поз - 1));
		ТекСтр = СокрЛП(Сред(ТекСтр, Поз + 1));
		Поз = Найти(ТекСтр, ")");
		Если Поз > 0 Тогда
			КодГорода = СокрЛП(Лев(ТекСтр, Поз - 1));
			ТекСтр = СокрЛП(Сред(ТекСтр, Поз + 1));
		КонецЕсли;
	КонецЕсли;
	Поз = Найти(текСтр, ", ");
	// Если Добавочного номера нет - ориентируемся по номеру телефона и комментарию
	Если (ПозДоб = 0) И (Поз > 0) Тогда
		// Вырежем комментарий
		НомерТелефона = СокрЛП(Лев(ТекСтр, Поз - 1));
		Комментарий = СокрЛП(Сред(ТекСтр, Поз + 2));
	Иначе
		// Все оставшееся это номер
		НомерТелефона = ТекСтр;
	КонецЕсли;
	// Удаляем лишние символы из номера телефона
	ЕстьПлюс		= (Лев(НомерТелефона, 1) = "+");
	НомерТелефона	= УбратьЛишниеСимволыТелефона(НомерТелефона);
	// Если номер телефона не разобран, то заново разбираем его
	ДлинаНомера = СтрДлина(НомерТелефона);
	Если ПустаяСтрока(КодГорода) И (ДлинаНомера > 4) Тогда
		// Выделяем код страны
		Если ДлинаНомера > 10 Тогда
			КодСтраны = Лев(НомерТелефона, ДлинаНомера - 10);
			НомерТелефона = Сред(НомерТелефона, ДлинаНомера - 9);
			Если КодСтраны = "8" Тогда
				Если НЕ ЕстьПлюс Тогда
					КодСтраны = "+7";
				КонецЕсли;	
			ИначеЕсли КодСтраны = "7" Тогда
				КодСтраны = "+7";
			ИначеЕсли КодСтраны = "+8" Тогда
				КодСтраны = "+7";
			ИначеЕсли НЕ Найти(КодСтраны, "+") = 1 Тогда
				КодСтраны = "+" + КодСтраны;
			КонецЕсли;	
			ДлинаНомера = СтрДлина(НомерТелефона);
		КонецЕсли;	
		// Выделяем код города
		Если ДлинаНомера = 10 Тогда
			КодГорода		= Лев(НомерТелефона, 3);
			НомерТелефона	= Сред(НомерТелефона, 4);
		КонецЕсли;	
	КонецЕсли;	
	Если ПустаяСтрока(КодСтраны) Тогда
		КодСтраны = "+7";
	КонецЕсли;
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КодСтраны",		КодСтраны);
	СтруктураПолей.Вставить("КодГорода",		КодГорода);
	СтруктураПолей.Вставить("НомерТелефона",	НомерТелефона);
	СтруктураПолей.Вставить("Добавочный",		Добавочный);
	СтруктураПолей.Вставить("Комментарий",		Комментарий);
	Возврат СтруктураПолей;
КонецФункции // ЗаполнитьСтруктуруПолейПоПредставлениюТелефон()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет использование SMS4B
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СМС
//
Функция ИспользоватьSMS4B() Экспорт
	ПровайдерSMS = Константы.ПровайдерSMS.Получить();
	Если ПровайдерSMS = Перечисления.ПровайдерыSMS.SMS4B Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции // ИспользоватьSMS4B()

// Процедура записывает в журнал регистрации и выводит пользователю переданное сообщение
//
// Параметры:
//	Сообщение		- Строка					- Текст сообщения
//	Статус			- СтатусСообщения			- Статус сообщения
//	Заголовок		- Строка					- Событие для журнала регистрации
//	Уровень			- УровеньЖурналаРегистрации	- Уровень для журнала регистрации
//	ТолькоСообщить  - Булево					- Признак вывода только сообщения
//
Процедура ВывестиСообщение(Сообщение, Статус, Заголовок, Уровень, ТолькоСообщить = Ложь) Экспорт
	Если НЕ ТолькоСообщить Тогда
		ЗаписьЖурналаРегистрации(Заголовок, Уровень, , , Сообщение);
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, Статус);
КонецПроцедуры // ВывестиСообщение()

// Функция преобразует таблицу значений в массив структур
//
// Параметры:
//	ТаблицаЗначений	- ТаблицаЗначений	- Таблица значений
//
// Возвращаемое значение:
//	Массив	- Массив структур
//
Функция смсТаблицаЗначенийВМассивСтруктур(ТаблицаЗначений)
	Результат = Новый Массив;
	// Обходим таблицу значений
	Для Каждого Строка Из ТаблицаЗначений Цикл
		// Создаем структуру
		Свойства = Новый Структура;
		// Заполняем структуру колонками таблицы значений
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Свойства.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		// Добавляем созданную структуру в таблицу значений
		Результат.Добавить(Свойства);
	КонецЦикла;
	Возврат Результат;
КонецФункции // смсТаблицаЗначенийВМассивСтруктур()

// Функция возвращает массив доступных номеров отправителя из строки доступных номеров
//
// Параметры:
//	НомерОтправителя - Строка	- Строка, содержащая список номеров
//
// Возвращаемое значение:
//	Массив	- Массив номеров отправителя
//
Функция ПолучитьМассивНомеровИзСтроки(НомерОтправителя) Экспорт
	// Создаем массив
	МассивВозврата = Новый Массив;
	// Берем строку с номерами
	ТекстКонстанты = СокрЛП(СтрЗаменить(НомерОтправителя, Символы.ВК, ""));
	Пока НЕ ПустаяСтрока(ТекстКонстанты) Цикл
		// Ищем позицию разделителя
		НомерРазделителя = Найти(ТекстКонстанты, Символы.ПС);
		Если НомерРазделителя = 0 Тогда // всего один номер
			МассивВозврата.Добавить(СокрЛП(ТекстКонстанты));
			ТекстКонстанты = "";	
		Иначе // если больше одного
			// Получаем номер
			ЛевСтрокаНомера = Лев(ТекстКонстанты, НомерРазделителя - 1);
			// Добавляем в список
			МассивВозврата.Добавить(СокрЛП(ЛевСтрокаНомера));
			Если НомерРазделителя = СтрДлина(ТекстКонстанты) Тогда
				ТекстКонстанты = "";	
			Иначе	
				ТекстКонстанты = Сред(ТекстКонстанты, НомерРазделителя + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивВозврата;
КонецФункции //  ПолучитьМассивНомеровИзСтроки()

// Функция возвращает описание ошибки по ее коду
// 
// Параметры:
//	КодОшибки	- Число	- Код ошибки
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке
//
Функция смсОписаниеОшибокВебСервиса(КодОшибки) Экспорт
	Если КодОшибки = 0 Тогда
		ТекстСообщить = "ru = ""Превышен предел открытых сессий!""";
	ИначеЕсли КодОшибки = -1 Тогда
		ТекстСообщить = "ru = ""Неверный логин или пароль (Необходимо использовать пароль для доступа к SMS сервису из внешних программ)!""";
	ИначеЕсли КодОшибки = -2 Тогда
		ТекстСообщить = "ru = ""Сессия закрыта!""";
	ИначеЕсли (КодОшибки < -2) И (КодОшибки > -20) Тогда
		ТекстСообщить = "ru = ""Отказ сервиса!""";
	ИначеЕсли КодОшибки = -20 Тогда
		ТекстСообщить = "ru = ""Сбой сеанса связи!""";
	ИначеЕсли КодОшибки = -21 Тогда
		ТекстСообщить = "ru = ""Сообщение не идентифицировано!""";
	ИначеЕсли КодОшибки = -22 Тогда
		ТекстСообщить = "ru = ""Неверный идентификатор сообщения!""";
	ИначеЕсли КодОшибки = -23 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - GMT""";
	ИначеЕсли КодОшибки = -29 Тогда
		ТекстСообщить = "ru = ""Сообщение не прошло проверки! (спам-фильтр)""";
	ИначеЕсли КодОшибки = -30 Тогда
		ТекстСообщить = "ru = ""Неверная кодировка сообщения! (не заполнен текст сообщения)""";
	ИначеЕсли КодОшибки = -31 Тогда
		ТекстСообщить = "ru = ""Неразрешенная зона тарификации!""";
	ИначеЕсли КодОшибки = -32 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - дата начала или окончания доставки сообщения!""";
	ИначеЕсли КодОшибки = -33 Тогда
		ТекстСообщить = "ru = ""Превышение длительности доставки!""";
	ИначеЕсли КодОшибки = -34 Тогда
		ТекстСообщить = "ru = ""Превышение срока актуальности доставки!""";
	ИначеЕсли КодОшибки = -35 Тогда
		ТекстСообщить = "ru = ""Неверный параметр - период доставки сообщения!""";
	ИначеЕсли КодОшибки = -36 Тогда
		ТекстСообщить = "ru = ""Неизвестный код группы!""";
	ИначеЕсли КодОшибки = -50 Тогда
		ТекстСообщить = "ru = ""Неверный отправитель!""";
	ИначеЕсли КодОшибки = -51 Тогда
		ТекстСообщить = "ru = ""Неразрешенный получатель!""";
	ИначеЕсли КодОшибки = -52 Тогда
		ТекстСообщить = "ru = ""Недостаточно средств на Вашем счете!""";
	ИначеЕсли КодОшибки = -53 Тогда
		ТекстСообщить = "ru = ""Незарегистрированный отправитель!""";
	ИначеЕсли (КодОшибки < -53) И (КодОшибки > -60) Тогда
		ТекстСообщить = "ru = ""Таймаут изменения счета!""";
	ИначеЕсли КодОшибки = -65 Тогда
		ТекстСообщить = "ru = ""Требуется предоставить гарантийное письмо! (отправка на МТС и Мегафон невозможна)""";
	ИначеЕсли КодОшибки = -66 Тогда
		ТекстСообщить = "ru = ""Не задан отправитель!""";
	ИначеЕсли КодОшибки = -66 Тогда
		ТекстСообщить = "ru = ""Не задан отправитель!""";
	ИначеЕсли КодОшибки = -67 Тогда
		ТекстСообщить = "ru = ""Превышение сроков отправки""";
	ИначеЕсли КодОшибки = -68 Тогда
		ТекстСообщить = "ru = ""Пользователь заблокирован!""";
	ИначеЕсли КодОшибки = -99999 Тогда
		ТекстСообщить = "ru = ""Ошибка соединения (нет доступа к интернету или не указаны настройки прокси-сервера)!""";
	Иначе
		ТекстСообщить = "ru = ""Неизвестная ошибка... код ошибки: " + Строка(КодОшибки) + "!""";
	КонецЕсли;
	Возврат НСтр(ТекстСообщить);
КонецФункции //  смсОписаниеОшибокВебСервиса()

// Функция определяет, какую кодировку необходимо применять к тексту сообщения
//
// Параметры:
//	Сообщение	- Строка	- Текст сообщения
//
// Возвращаемое значение:
//	Число	- Вид кодировки	- 0 - латинский, 1 - другие алфавиты, в т.ч. русский
//
Функция Использовать7БитСообщение(Сообщение) Экспорт
	ДлинаСообщения = СтрДлина(Сообщение);
	Результат = 0;
	Для К = 1 По ДлинаСообщения Цикл
		ТекСимвол = Сред(Сообщение, К, 1);
		Если ТекСимвол = "@" Тогда
			Продолжить;
		ИначеЕсли ТекСимвол = "$" Тогда
			Продолжить;
		ИначеЕсли КодСимвола(ТекСимвол) > 122 Тогда
  			Результат = 1;
			Прервать;
		ИначеЕсли КодСимвола(ТекСимвол) > 96 Тогда
			Продолжить;
		ИначеЕсли  КодСимвола(ТекСимвол) > 91 Тогда
  			Результат = 1;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;
КонецФункции //  Использовать7БитСообщение()

// Функция выполняет транслитерацию переданного текста и возвращает результат
//этого преобразования.Для транслитерации используется последовательность GSM3.38.
// 
// Параметры:
//  Сообщение (строка) - Содержит текст для транслитерации
//
// Возвращаемое значение (строка):
//  Преобразованный в транслит текст.
Функция Транслитерация(Текст) Экспорт
	// Заполняем список соответствий
	СписокСоответствийТранслитерации = Новый СписокЗначений;
	СписокСоответствийТранслитерации.Добавить("а", "a");
	СписокСоответствийТранслитерации.Добавить("б", "b");
	СписокСоответствийТранслитерации.Добавить("в", "v");
	СписокСоответствийТранслитерации.Добавить("г", "g");
	СписокСоответствийТранслитерации.Добавить("д", "d");
	СписокСоответствийТранслитерации.Добавить("е", "e");
	СписокСоответствийТранслитерации.Добавить("ё", "yo");
	СписокСоответствийТранслитерации.Добавить("ж", "zh");
	СписокСоответствийТранслитерации.Добавить("з", "z");
	СписокСоответствийТранслитерации.Добавить("и", "i");
	СписокСоответствийТранслитерации.Добавить("й", "j");
	СписокСоответствийТранслитерации.Добавить("к", "k");
	СписокСоответствийТранслитерации.Добавить("л", "l");
	СписокСоответствийТранслитерации.Добавить("м", "m");
	СписокСоответствийТранслитерации.Добавить("н", "n");
	СписокСоответствийТранслитерации.Добавить("о", "o");
	СписокСоответствийТранслитерации.Добавить("п", "p");
	СписокСоответствийТранслитерации.Добавить("р", "r");
	СписокСоответствийТранслитерации.Добавить("с", "s");
	СписокСоответствийТранслитерации.Добавить("т", "t");
	СписокСоответствийТранслитерации.Добавить("у", "u");
	СписокСоответствийТранслитерации.Добавить("ф", "f");
	СписокСоответствийТранслитерации.Добавить("х", "x"); 
	СписокСоответствийТранслитерации.Добавить("ц", "c"); 
	СписокСоответствийТранслитерации.Добавить("ч", "ch");
	СписокСоответствийТранслитерации.Добавить("ш", "sh");
	СписокСоответствийТранслитерации.Добавить("щ", "w"); 
	СписокСоответствийТранслитерации.Добавить("ъ", "''");
	СписокСоответствийТранслитерации.Добавить("Ъ", "''");
	СписокСоответствийТранслитерации.Добавить("ы", "y");
	СписокСоответствийТранслитерации.Добавить("Ы", "Y");
	СписокСоответствийТранслитерации.Добавить("ь", "'");
	СписокСоответствийТранслитерации.Добавить("Ь", "'");
	СписокСоответствийТранслитерации.Добавить("э", "eh");
	СписокСоответствийТранслитерации.Добавить("ю", "yu");
	СписокСоответствийТранслитерации.Добавить("я", "ya");
	СписокСоответствийТранслитерации.Добавить("А", "A");
	СписокСоответствийТранслитерации.Добавить("Б", "B");
	СписокСоответствийТранслитерации.Добавить("В", "V");
	СписокСоответствийТранслитерации.Добавить("Г", "G");
	СписокСоответствийТранслитерации.Добавить("Д", "D");
	СписокСоответствийТранслитерации.Добавить("Е", "E");
	СписокСоответствийТранслитерации.Добавить("Ё", "YO");
	СписокСоответствийТранслитерации.Добавить("Ж", "ZH");
	СписокСоответствийТранслитерации.Добавить("З", "Z");
	СписокСоответствийТранслитерации.Добавить("И", "I");
	СписокСоответствийТранслитерации.Добавить("Й", "J");
	СписокСоответствийТранслитерации.Добавить("К", "K");
	СписокСоответствийТранслитерации.Добавить("Л", "L");
	СписокСоответствийТранслитерации.Добавить("М", "M");
	СписокСоответствийТранслитерации.Добавить("Н", "N");
	СписокСоответствийТранслитерации.Добавить("О", "O");
	СписокСоответствийТранслитерации.Добавить("П", "P");
	СписокСоответствийТранслитерации.Добавить("Р", "R");
	СписокСоответствийТранслитерации.Добавить("С", "S");
	СписокСоответствийТранслитерации.Добавить("Т", "T");
	СписокСоответствийТранслитерации.Добавить("У", "U");
	СписокСоответствийТранслитерации.Добавить("Ф", "F");
	СписокСоответствийТранслитерации.Добавить("Х", "X");
	СписокСоответствийТранслитерации.Добавить("Ц", "C");
	СписокСоответствийТранслитерации.Добавить("Ч", "CH");
	СписокСоответствийТранслитерации.Добавить("Ш", "SH");
	СписокСоответствийТранслитерации.Добавить("Щ", "W");
	СписокСоответствийТранслитерации.Добавить("Э", "EH");
	СписокСоответствийТранслитерации.Добавить("Ю", "YU");
	СписокСоответствийТранслитерации.Добавить("Я", "YA");
	СписокСоответствийТранслитерации.Добавить("«", "<");
	СписокСоответствийТранслитерации.Добавить("»", ">");
	СписокСоответствийТранслитерации.Добавить("№", "N");
	СписокСоответствийТранслитерации.Добавить("{", "(");
	СписокСоответствийТранслитерации.Добавить("[", "(");
	СписокСоответствийТранслитерации.Добавить("}", ")");
	СписокСоответствийТранслитерации.Добавить("]", ")");
	СписокСоответствийТранслитерации.Добавить("\", "/");
	СписокСоответствийТранслитерации.Добавить("|", "I");
	СписокСоответствийТранслитерации.Добавить("^", "'");
	СписокСоответствийТранслитерации.Добавить("_", "-");
	СписокСоответствийТранслитерации.Добавить("~", "-");
	СписокСоответствийТранслитерации.Добавить("`", "'");
	СписокСоответствийТранслитерации.Добавить(Символы.НПП, " ");
	РезультирующийТекст = "";
	// Общая длина текста
	ДлинаТекста = СтрДлина(Текст);
	// Транслитерируем
	Для Сч = 1 По ДлинаТекста Цикл
		// Получаем код текущего символа
		КодСимвола = КодСимвола(Текст, Сч);
		// Проверяем что текущий символ заглавная буква
		РусскаяЗаглавная = Ложь;
		Если ((КодСимвола > 1039) И (КодСимвола < 1072)) ИЛИ (КодСимвола = 1025) Тогда
			РусскаяЗаглавная = Истина;
		КонецЕсли;
		Символ = Сред(Текст, Сч, 1);
		// Ищем в таблице соответствие
		Соответствие = СписокСоответствийТранслитерации.НайтиПоЗначению(Символ);
		Если Соответствие = Неопределено Тогда
			// Остальные символы остаются без изменений 
			Если НЕ Найти(" !@#$%&'""()*+,-./0123456789:;<=>?ABCDEFGIKLMNJOPQRSTUVWXYZHabcdefgiklmnjopqrstuvwxyzh"
				+ Символы.ПС + Символы.Таб + Символы.ВК, Символ) Тогда
				// Меняем неизвестный символ на "?"
				Символ = "?";
			КонецЕсли;
		Иначе	
			// Меняем символ
			Символ = Соответствие.Представление;
			Если РусскаяЗаглавная Тогда
				ПервыйСимвол = Сред(Символ, 1, 1);
				Символ = СтрЗаменить(Символ, ПервыйСимвол, ВРег(ПервыйСимвол));
			КонецЕсли;
		КонецЕсли;
		// Результат транслитерации
		РезультирующийТекст = РезультирующийТекст + Символ;
	КонецЦикла;
	Возврат РезультирующийТекст;
КонецФункции // Транслитерация()	

// Функция переводит дату из текстового формата вида 'YYYYMMDD hh:mm:ss' в канонический формат
//
// Параметры:
//	СтрокаДаты	- Строка	- Строка даты
//
// Возвращаемое значение:
//	Дата	- Дата
//
Функция смсСтрокаВДату(СтрокаДаты)
	Стр = СтрЗаменить(СтрокаДаты, "-", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, " ", "");
	Возврат Дата(Стр);
КонецФункции // смсСтрокаВДату()

// Функция переводит дату из формата 1С в международный текстовый формат 
// вида 'YYYYMMDD hh:mm:ss'
//
// Параметры:
//	СтруктураДаты - Структура - Структура, содержащая дату и количество миллисекунд
//	
// Возвращаемое значение:
//	Строка	- Дата в международном текстовом формате
//
Функция смсДатаВСтроку(СтруктураДаты)
	Если ТипЗнч(СтруктураДаты) = Тип("Структура") Тогда 
		Дата1С			= СтруктураДаты.Дата;
		Миллисекунда1С	= СтруктураДаты.Миллисекунда;
	Иначе
		Дата1С			= СтруктураДаты;
		Миллисекунда1С	= 0;
	КонецЕсли;
	Если Дата1С = Дата('00010101') Тогда
		Результат = "";
	Иначе
		Результат = Формат(Год(Дата1С), "ЧГ=0") 
		+ ?(СтрДлина(Строка(Месяц(Дата1С))) < 2,"0" + Строка(Месяц(Дата1С)) , Строка(Месяц(Дата1С)))
		+ ?(СтрДлина(Строка(День(Дата1С))) < 2, "0" + Строка(День(Дата1С)), Строка(День(Дата1С))) + " "
		+ ?(СтрДлина(Строка(Час(Дата1С))) < 2, "0" + Строка(Час(Дата1С)), Строка(Час(Дата1С))) + ":" 
		+ ?(СтрДлина(Строка(Минута(Дата1С))) < 2, "0" + Строка(Минута(Дата1С)), Строка(Минута(Дата1С))) + ":"
		+ ?(СтрДлина(Строка(Секунда(Дата1С))) < 2, "0" + Строка(Секунда(Дата1С)), Строка(Секунда(Дата1С)))+ "."	
		+ Строка(Миллисекунда1С);
	КонецЕсли;	
	Возврат Результат;
КонецФункции // смсДатаВСтроку()

// Функция предназначена для перевода числового кода статуса в его строковое представление
//
// Параметры:
//  КодСтатуса	- Число	- Числовой код статуса.
// 
// Возвращаемое значение:
//	Строка	- Представление статуса
//
Функция смсКодВСтатус(КодСтатуса) Экспорт
	Если КодСтатуса = 1 Тогда
		Статус = Перечисления.СостоянияСообщенияSMS.Исходящее;
	ИначеЕсли КодСтатуса = 2 Тогда 
		Статус = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
	ИначеЕсли КодСтатуса = 3 Тогда 
		Статус = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером;
	ИначеЕсли КодСтатуса = 4 Тогда 
		Статус = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером;
	ИначеЕсли КодСтатуса = 5 Тогда 
		Статус = Перечисления.СостоянияСообщенияSMS.Доставлено;
	ИначеЕсли КодСтатуса = 6 Тогда 
		Статус = Перечисления.СостоянияСообщенияSMS.НеДоставлено;
	ИначеЕсли КодСтатуса = 7 Тогда 
		Статус = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру;
	ИначеЕсли КодСтатуса = 8 Тогда 
		Статус = Перечисления.СостоянияСообщенияSMS.sms4bПолучено;
	ИначеЕсли КодСтатуса = 9 Тогда 
		Статус = Перечисления.СостоянияСообщенияSMS.sms4bПолученоЧастично;
	КонецЕсли; 
	Возврат Статус;
КонецФункции // смсКодВСтатус()

// Функция предназначена для перевода статуса в числовое представление  
//
// Параметры:
//
//  Статус (Перечисления.sms4bСостоянияСообщений)- Статус.
// 
// Возвращаемое значение (число):
// 
// Возвращает числовое представление статуса
//
Функция смсСтатусВКод(Статус) Экспорт
	Если Статус = Перечисления.СостоянияСообщенияSMS.Исходящее Тогда
		КодСтатуса = 1;
	ИначеЕсли Статус = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером Тогда
		КодСтатуса = 2;
	ИначеЕсли Статус = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером Тогда
		КодСтатуса = 3;
	ИначеЕсли Статус = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
		КодСтатуса = 4;
	ИначеЕсли Статус = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
		КодСтатуса = 5;
	ИначеЕсли Статус = Перечисления.СостоянияСообщенияSMS.НеДоставлено Тогда
		КодСтатуса = 6;
	ИначеЕсли Статус = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру Тогда
		КодСтатуса = 7;
	ИначеЕсли Статус = Перечисления.СостоянияСообщенияSMS.sms4bПолучено Тогда
		КодСтатуса = 8;
	ИначеЕсли Статус = Перечисления.СостоянияСообщенияSMS.sms4bПолученоЧастично Тогда
		КодСтатуса = 9;
	КонецЕсли; 
	Возврат КодСтатуса;
КонецФункции // смсСтатусВКод()

// Функция возвращает обраотанный идентификатор сообщения
//
// Параметры:
//	ИдентификаторСообщения	- Строка	- Идентификатор сообщения
//
// Возврааемое значение:
//	Строка	- Идентификатор сообщения
//
Функция смсПолучитьИдентификаторСообщения(Знач ИдентификаторСообщения = "")
	Если ПустаяСтрока(ИдентификаторСообщения) Тогда
		ИдентификаторСообщения = Лев(Строка(Новый УникальныйИдентификатор), 20);
	КонецЕсли;	
	Если СтрДлина(ИдентификаторСообщения) = 20 Тогда
		ИдентификаторСообщения	= ИдентификаторСообщения + Сред(ИдентификаторСообщения, 16, 3) + "-" + Сред(ИдентификаторСообщения, 10, 4 ) + Лев(ИдентификаторСообщения, 8);
	КонецЕсли;	
	Возврат ИдентификаторСообщения;
КонецФункции // смсПолучитьИдентификаторСообщения()

// Функция приводит переданную дату к времени UTC  
//
// Параметры:
//  Дата		- ДатаВремя	- Дата, которую корректируем
//  Вычитать	- Булево	- Признак знака корректировки, для входящих сообщений - Ложь, для исходящих - Истина
//
// Возвращаемое значение:
//	ДатаВремя - Дата, приведенная к UTC
//
Функция смсПривестиДатуКUTC(Дата, Вычитать = Истина)
	// Получаем корректировку времени UTC
	КорректировкаUTC = Константы.sms4bКорректировкаUTC.Получить();
	// Если сообщение входящее то время надо прибавить!
	Если Вычитать Тогда
		Возврат Дата - КорректировкаUTC;
	Иначе 
		Возврат Дата + КорректировкаUTC;
	КонецЕсли; 
КонецФункции // смсПривестиДатуКUTC()

// Функция осуществляет поиск значения в массиве структур
//
// Параметры:
//	Массив		- Массив	- Массив структур
//	Значение	- Строка	- Значение для поиска
//
// Возвращаемое значение:
//	Строка	- Найденная структура
//
Функция смсМассивСтруктурНайти(Массив, Значение)
	Для Каждого Строка Из Массив Цикл
		Если Строка.GUID = Значение Тогда
			Возврат Строка;
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // смсМассивСтруктурНайти()

// Функция возвращает строковое представление статуса документа
//
// Параметры:
//	Документ	- ДокументСсылка	- Докумиент
//
// Возвращаемое значение:
//	Структура	- Структура статусов документа
//
Функция смсПолучитьСтатусДокумента(Документ) Экспорт
	СтруктураСтатуса = Новый Структура;
	СтруктураСтатуса.Вставить("Состояние",		Перечисления.СостоянияДокументаСообщениеSMS.Черновик);
	СтруктураСтатуса.Вставить("СтатусСтрокой",	"");
	ВсегоКоличество 			= Документ.Адресаты.Количество();
	КоличествоОтправляемых		= 0;
	КоличествоВОчереди 			= 0;
	КоличествоОтправленных 		= 0;
	КоличествоНеОтправленных	= 0;
	КоличествоДоставленных 		= 0;
	КоличествоНеДоставленных	= 0;
	КоличествоОшибок 			= 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Док", Документ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	sms4bСостоянияСообщений.СостояниеСообщения КАК Статус
	               |ИЗ
	               |	РегистрСведений.sms4bСостоянияСообщений КАК sms4bСостоянияСообщений
	               |ГДЕ
	               |	sms4bСостоянияСообщений.Сообщение = &Док";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрокаДокумента Из РезультатЗапроса Цикл
		Если ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.ПустаяСсылка() Тогда
			Продолжить;	
		ИначеЕсли ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.Черновик Тогда
			Продолжить;	
		ИначеЕсли ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.Исходящее Тогда
			КоличествоОтправляемых = КоличествоОтправляемых + 1;
		ИначеЕсли ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером Тогда
			КоличествоВОчереди = КоличествоВОчереди + 1;
		ИначеЕсли ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером Тогда
			КоличествоОтправленных 	= КоличествоОтправленных + 1;
		ИначеЕсли ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
			КоличествоНеОтправленных = КоличествоНеОтправленных + 1;
		ИначеЕсли ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
			КоличествоДоставленных 	= КоличествоДоставленных + 1;
			КоличествоОтправленных 	= КоличествоОтправленных + 1;
		ИначеЕсли ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.НеДоставлено Тогда
			КоличествоНеДоставленных = КоличествоНеДоставленных + 1;
			КоличествоОтправленных 	= КоличествоОтправленных + 1;
		ИначеЕсли ТекСтрокаДокумента.Статус = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоОтправляемых >  0 Тогда
		СтруктураСтатуса.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Исходящее; 	
	ИначеЕсли КоличествоВОчереди > 0 Тогда
		СтруктураСтатуса.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Доставляется; 	
	ИначеЕсли КоличествоОтправленных > 0 Тогда
		Если КоличествоОтправленных = КоличествоДоставленных Тогда
			СтруктураСтатуса.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено; 	
		Иначе
			СтруктураСтатуса.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.sms4bОтправлено; 	
		КонецЕсли;
	ИначеЕсли КоличествоНеДоставленных > 0 Тогда	
		СтруктураСтатуса.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено; 	
	ИначеЕсли КоличествоНеОтправленных > 0 Тогда	
		СтруктураСтатуса.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.sms4bНеОтправлено; 	
	ИначеЕсли КоличествоОшибок > 0 Тогда	
		СтруктураСтатуса.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.sms4bОшибка; 	
	КонецЕсли;
    СтруктураСтатуса.СтатусСтрокой = СтрЗаменить(НСтр("ru = 'Всего: %ВсегоКол%'"), "%ВсегоКол%", ВсегоКоличество) + ";"
    + ?((КоличествоВОчереди + КоличествоОтправленных + КоличествоНеОтправленных + КоличествоДоставленных 
    + КоличествоНеДоставленных + КоличествоОшибок = 0), НСтр("ru = ' записано, но не отправлено'"), НСтр("ru = ' из них:'"))
    + ?(КоличествоВОчереди = 0, "", НСтр("ru = ' в очереди-'") + КоличествоВОчереди + ";")
    + ?(КоличествоОтправленных = 0, "", НСтр("ru = ' отправлено-'") + КоличествоОтправленных + ";")
    + ?(КоличествоНеОтправленных = 0, "", НСтр("ru = ' не отправлено-'") + КоличествоНеОтправленных + ";")
    + ?(КоличествоДоставленных = 0, "", НСтр("ru = ' доставлено-'") + КоличествоДоставленных + ";")
    + ?(КоличествоНеДоставленных = 0, "", НСтр("ru = ' не доставлено-'") + КоличествоНеДоставленных + ";")
    + ?(КоличествоОшибок = 0, "", НСтр("ru = ' ошибок-'") + КоличествоОшибок);
	Возврат СтруктураСтатуса;
КонецФункции // смсПолучитьСтатусДокумента()

// Процедура записывает в регистр статусов статусы новых сообщений
//
// Параметры:
//	Объект	- ДокументСсылка	- Документ SMS
//
Процедура ЗаписатьСтатусыВРегистр(Объект) Экспорт
	НаборЗаписей = РегистрыСведений.sms4bСостоянияСообщений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Значение = Объект.Ссылка;
	НаборЗаписей.Отбор.Сообщение.Использование = Истина;
	Для Каждого Строка Из Объект.Адресаты Цикл
		НовСтрока							= НаборЗаписей.Добавить();
		НовСтрока.Сообщение					= Объект.Ссылка;
		НовСтрока.НомерСтрокиДокумента		= Строка.НомерСтроки;
		НовСтрока.ИдентификаторСообщения	= Строка.ИдентификаторСообщения;
		НовСтрока.СостояниеСообщения		= Перечисления.СостоянияСообщенияSMS.Исходящее;
	КонецЦикла; 
	НаборЗаписей.Записать();
КонецПроцедуры // ЗаписатьСтатусыВРегистр()

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРОКАМИ

// Функция убирает лишние символы и разделители из строки с номером телефона
// 
// Параметры:
//	Телефон	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Номер телефона после обработки
//
Функция УбратьЛишниеСимволыТелефона(Телефон) Экспорт
	// Вырежем добавочный номер с комментарием
	ПозДоб = Найти(ВРЕГ(Телефон), "ДОБ.");
	Если ПозДоб > 0 Тогда
		Телефон = Лев(Телефон, ПозДоб);
	КонецЕсли;	
	// Убираем все ненужные символы
	ДлинаНомера	= СтрДлина(Телефон);
	ЕстьПлюс	= (Лев(Телефон, 1) = "+");	
	НовыйТелефон = "";
	Для а = 1 По ДлинаНомера Цикл
		Симв 		= Сред(Телефон, а, 1);
		КодСимвола 	= КодСимвола(Симв);
		Если КодСимвола < 58 И КодСимвола > 47 Тогда
			НовыйТелефон = НовыйТелефон + Симв;
		КонецЕсли;	
	КонецЦикла;
	// Проверяем полученный номер телефона
	Если НЕ ПустаяСтрока(НовыйТелефон) Тогда
		Если СтрДлина(НовыйТелефон) = 11 Тогда
			Если Лев(НовыйТелефон, 1) = "8" Тогда 
				Если НЕ ЕстьПлюс Тогда
					НовыйТелефон = "7" + Сред(НовыйТелефон, 2, СтрДлина(НовыйТелефон));
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли СтрДлина(НовыйТелефон) = 10 Тогда
			Если НЕ ЕстьПлюс Тогда
				НовыйТелефон = "7" + НовыйТелефон;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат НовыйТелефон;
КонецФункции // УбратьЛишниеСимволыТелефона()

// Функция дополняет строку до указанной длины определенным символов
//
// Параметры:
//	Стр		- Строка	- Строка
//	Длина	- Число		- Длина строки
//	Чем		- Строка	- Символ для добавления
//
// Возвращаемое значение:
//	Строка	- Строка, дополненная до указанной длины
//
Функция смсДополнитьСтроку(Знач Стр, Длина, Чем = " ")
	СимволовДополнить = Длина - СтрДлина(Стр);
	Добавок = "";
	Для Н = 1 По СимволовДополнить Цикл
		Добавок = Добавок + Чем;
	КонецЦикла;
	Возврат  Добавок + Стр;
КонецФункции // смсДополнитьСтроку()

// Функция переводит десятичное число в шестнадцатеричное
//
// Параметры:
//	Число	- Число	- Десятичное число
//
// Возвращаемое значение:
//	Строка	- Шестнадцатеричное число
//
Функция смсДесятичноеВШестнадцатеричное(Знач _Число)
	База = 16;
	Результат = "";
	Пока _Число <> 0 Цикл
		Поз =_Число % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		_Число = Цел(_Число / База);
	КонецЦикла;
	Возврат Результат;
КонецФункции // смсДесятичноеВШестнадцатеричное()

// Функция переводит шестнадцатеричное число в десятичное
//
// Параметры:
//	_Hex	- Строка	- Шестнадцатеричное число
//
// Возвращаемое значение:
//	Число	- Десятичное число
//
Функция смсШестнадцатеричноеЧислоВДесятичное(Знач _Hex)
	База = 16;
	_Hex = СокрЛП(_Hex);
	СтаршаяСтепень = СтрДлина(_Hex) - 1;
	Результат = 0;
	счСимволов = 1;
	Пока СтаршаяСтепень >=0 Цикл
		_HexСимвол = Сред(_Hex, счСимволов, 1);
		Представление = Найти("0123456789ABCDEF", _HexСимвол) - 1;
		Результат = Результат + Представление * Pow(База, СтаршаяСтепень);
		СтаршаяСтепень = СтаршаяСтепень - 1;
		СчСимволов = СчСимволов + 1;
	КонецЦикла;	
	Возврат Результат;
КонецФункции // HexToDec()

// Функция переводит обычную строку в шестнадцатеричное представление
//
// Параметры:
//	ТекстСообщения	- Строка	- Текст сообщения
//	ТипКодировки	- Число		- Тип кодировки (1 - каждый символ 
//								  представляется 2 байтами, 0 - 1 байтом)
//
// Возвращаемое значение:
//	Строка	- Строка после перекодировки
//
Функция смсСтрокуВШестнадцатеричноеПредставление(ТекстСообщения, ТипКодировки)
	СтрокаЗнаков = "";
	Если ТипКодировки = 1 Тогда
		ДлинаКодаСимвола = 4;
	Иначе
		ДлинаКодаСимвола = 2;
	КонецЕсли;
	Для К = 1 По СтрДлина(ТекстСообщения) Цикл
		СтрокаЗнаков = СтрокаЗнаков + смсДополнитьСтроку(смсДесятичноеВШестнадцатеричное(КодСимвола(Сред(ТекстСообщения, К, 1))), ДлинаКодаСимвола, "0");
	КонецЦикла;
	Возврат СтрокаЗнаков;
КонецФункции // смсСтрокуВШестнадцатеричноеПредставление()

// Функция переводит строку из шестнадцатеричного представления в обычную строку
//
// Параметры:
//	СтрокаСимволов	- Строка	- Текст в шестнадцатеричном виде
//	ПризнакКода		- Строка	- Тип кодировки ("0" - каждый символ 
//								  представляется 1 байтами, "1" - 2 байтами)
//
// Возвращаемое значение:
//	Строка	- Строка после перекодировки
//
Функция смсСтрокуВОбычноеПредставление(СтрокаСимволов, ПризнакКода)
	// StrHexToStr
	Если Число(ПризнакКода) = 0 Тогда
		КоличествоСимволов = 2;
	Иначе
		КоличествоСимволов = 4;
	КонецЕсли;
	к = 1;
	Результат = "";
	Пока к < СтрДлина(СтрокаСимволов) Цикл
		Строка = Сред(СтрокаСимволов, к, КоличествоСимволов);
		Результат = Результат + Символ(смсШестнадцатеричноеЧислоВДесятичное(Строка));
		к = к + КоличествоСимволов;
	КонецЦикла;
	Возврат Результат;
КонецФункции // смсСтрокуВОбычноеПредставление()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПАРАМЕТРОВ СЕАНСА

// Функция возвращает значение параметра сеанса "смсНомерСессии"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- Номер сессии
//
Функция смсПолучитьНомерСессии()
	Попытка
		НомерСессии = ПараметрыСеанса.sms4bНомерСессии;
	Исключение	
		НомерСессии = 0;
		ПараметрыСеанса.sms4bНомерСессии = НомерСессии;
	КонецПопытки;	
	Возврат НомерСессии;
КонецФункции // смсПолучитьНомерСессии()	

// Функция возвращает значение параметра сеанса "смсОсновнойСервер"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- Номер сессии
//
Функция смсПолучитьОсновнойСервер()
	Попытка
		ОсновнойСервер = ПараметрыСеанса.sms4bОсновнойСервер;
	Исключение
		ОсновнойСервер = Истина;
		ПараметрыСеанса.sms4bОсновнойСервер = ОсновнойСервер;
	КонецПопытки;	
	Возврат ОсновнойСервер;
КонецФункции // смсПолучитьОсновнойСервер()	

//////////////////////////////////////////////////////////////
//
// ЯДРО (API) ДЛЯ РАБОТЫ С WEB-СЕРВИСОМ SMS4B
//
// Ядро включает в себя весь необходимый функционал для взаимодействия  с веб-сервисом SMS4B. 
// Оно независимо от конкретной конфигурации. Ядро реализует функциональность низшего уровня, поэтому 
// оно не содержит обращений к метаданным конфигурации и вызовов методов других модулей.

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает версию ядра
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Номер версии ядра
//
Функция смсВернутьВерсиюЯдра() Экспорт
	Возврат "3.0.1.1";
КонецФункции // смсВернутьВерсиюЯдра()

// Функция выполняет подключение к ВебСервису
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	WS-ссылка	- Ссылка на ВебСервис
//
Функция смсПодключитьВебСервис() Экспорт
	// Получаем имя пользователя и пароль
	Владелец		= ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	УстановитьПривилегированныйРежим(Истина);
	ПарольИЛогин	= ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Пароль, Логин");
	УстановитьПривилегированныйРежим(Ложь);
	ИмяПользователя		= ПарольИЛогин.Логин;
	ПарольПользователя	= ПарольИЛогин.Пароль;
	смсОсновнойСервер	= смсПолучитьОсновнойСервер();
	Попытка
		Если смсОсновнойСервер Тогда
			// Основной сервер
			Определения = Новый WSОпределения("https://sms4b.ru/webservices/sms.asmx?WSDL", ИмяПользователя, ПарольПользователя);
			ВебСервис = Новый WSПрокси(Определения, "SMS client", "WSSM", "WSSMSoap12");
		Иначе
			// Резервный сервер
			Определения = Новый WSОпределения("https://s.sms4b.ru/webservices/sms.asmx?WSDL", ИмяПользователя, ПарольПользователя);
			ВебСервис = Новый WSПрокси(Определения, "SMS client", "WSSM", "WSSMSoap12");
		КонецЕсли; 
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	Возврат ВебСервис;
КонецФункции // смсПодключитьВебСервис()

// Процедура меняет основной сервер
//
// Параметры:
//	Нет.
//
Процедура смсПоменятьСервер()
	ОсновнойСервер	= смсПолучитьОсновнойСервер();
	ПараметрыСеанса.sms4bОсновнойСервер = НЕ ОсновнойСервер;
КонецПроцедуры // смсПоменятьСервер()

//////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЯДРА

// Функция предназначена для подключению к серверу SMS4B. Вызывается перед первой попыткой обращения
// к функциям сервера либо после разрыва сервером SMS4B открытой ранее сессии.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- НомерСессии > 0, если функция выполнена успешно,
//				или код ошибки < 0, если функция выполнена не успешно 
//				(см описание функции ОписаниеОшибокВебСервиса ()). 
//
Функция Подключиться() Экспорт
	Если НЕ ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		// Не были определены имя или пароль пользователя для отправки СМС
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"),,"Объект");
		КодОшибки = -1;
		Возврат КодОшибки;
	КонецЕсли;
	// Получаем имя пользователя и пароль
	Владелец	= ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	УстановитьПривилегированныйРежим(Истина);
	ПарольИЛогин	= ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Пароль, Логин");
	УстановитьПривилегированныйРежим(Ложь);
	ИмяПользователя		= ПарольИЛогин.Логин;
	ПарольПользователя	= ПарольИЛогин.Пароль;
	// Устанавливаем GMT=0, т.к. всегда будем работать по UTC (как сервер SMS4B)
	GMT = 0;
	// Собираем информацию о конфигурации (для статистики на сервере SMS4B)
	ИмяКонфигурации 	= СтрЗаменить(Метаданные.Имя, " ", "_");
	КраткаяИнформация 	= СтрЗаменить(Метаданные.КраткаяИнформация," ","_");
	ИмяКонфигурации = ИмяКонфигурации + "(" + КраткаяИнформация + ")";
	Если СтрДлина(ИмяКонфигурации) > 425 Тогда
		ИмяКонфигурации = Лев(ИмяКонфигурации, 425);
	КонецЕсли;	
	ВерсияЯдра			= смсВернутьВерсиюЯдра();
	ИнформацияОСистеме	= Новый СистемнаяИнформация;
	// Дополняем имя пользователя сведениями о конфигурации
	Пользователь = " S_" + ВерсияЯдра + "_" + Метаданные.Версия + "_" + ИмяКонфигурации + "_" + ИнформацияОСистеме.ВерсияПриложения + " " + ИмяПользователя;
	Пароль 		 = ПарольПользователя;
	// Всегда пробуем сначала подключиться на основной сервер
	ВебСервис = смсПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		смсПоменятьСервер();
		ВебСервис = смсПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Открываем сессию для работы с веб-сервисом
	Попытка
		РезультатПодключения = ВебСервис.StartSession(Пользователь, Пароль, GMT); 
	Исключение
		РезультатПодключения = Неопределено;
	КонецПопытки;
	// Запомним код ошибки
	КодОшибки = РезультатПодключения;
	// Проверяем результат подключения первый раз
	// Если нет связи, либо ошибки от -1 до -19, то подключаемся на резервный сервер
	Если (РезультатПодключения = Неопределено) ИЛИ ((РезультатПодключения < 0) И (РезультатПодключения > -20)) Тогда
		// Подключаемся к резервному серверу
		смсПоменятьСервер();
		ВебСервис = смсПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			смсПоменятьСервер();
			ВебСервис = смсПодключитьВебСервис();
			Если ВебСервис = Неопределено Тогда
				КодОшибки = -9;
				Возврат КодОшибки;
			КонецЕсли;	
		КонецЕсли; 
		Попытка
			РезультатПодключения = ВебСервис.StartSession(Пользователь, Пароль, GMT); 
		Исключение
			РезультатПодключения = Неопределено;
		КонецПопытки;
		// Запомним код ошибки
		КодОшибки = РезультатПодключения;
	КонецЕсли;
	// Проверяем результат подключения второй раз
	Если РезультатПодключения = Неопределено Тогда
		// Проверяем код ошибки, если не доступен резервный сервер
		Если КодОшибки = Неопределено Тогда
			// Проблема с интернетом (сервис не ответил)
			КодОшибки = -99999;
		КонецЕсли; 
	Иначе
		// Проверяем РезультатПодключения на ошибки 
		КодОшибки = РезультатПодключения;
		Если КодОшибки > 0 Тогда
			ПараметрыСеанса.sms4bНомерСессии = КодОшибки;
		ИначеЕсли КодОшибки < 0 Тогда
			ВывестиСообщение(смсОписаниеОшибокВебСервиса(КодОшибки), СтатусСообщения.Важное, "Подключение SMS", УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;
	КонецЕсли;	
	// Возвращаем результат работы функции
	Возврат КодОшибки;	
КонецФункции // Подключиться()

// Функция предназначена для получения параметров пользователя. 
// Вызывается после подключения к серверу, и после отправки sms-сообщений,
// чтобы пользователь видел остаток sms-сообщений. 
//
// Параметры:
//	СтруктураПараметровСессии	- Структура	- Возвращаемый параметр. 
// 
// Возвращаемое значение:
//	Число	- Числовой код ошибки, 1 – если функция выполнена успешно, 
// 				и код ошибки < 0, если функция выполнена не успешно.
//
Функция ПолучитьПараметрыСессии(СтруктураПараметровСессии) Экспорт
	НомерСессии		= смсПолучитьНомерСессии();
	ОсновнойСервер	= смсПолучитьОсновнойСервер();
	КодОшибки		= 1;
	// Подключаем веб-сервис
	ВебСервис = смсПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		смсПоменятьСервер();
		ВебСервис = смсПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Получаем фабрику XDTO
	ТекущееВремя	= ТекущаяДатаСеанса();
	Фабрика			= ВебСервис.ФабрикаXDTO;		
	Попытка
		// Получаем с веб-сервиса параметры сессии
		ПараметрыСессии = ВебСервис.ParamSMS(НомерСессии);
	Исключение
		ПараметрыСессии = Неопределено;
	КонецПопытки;
	// Проверяем результат выполнения
	Если ПараметрыСессии = Неопределено Тогда
		 // Проблема с интернетом (сервис не ответил)
		 КодОшибки = -99999;
	Иначе	
		// Код ошибки при неуспешном выполнении метода
		КодОшибки = Число(ПараметрыСессии.Result);
		// Если сессия устарела или её нет
		Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
			// Подключаемся
			КодОшибкиПодключения = Подключиться();
			// Если удалось подключится
			Если КодОшибкиПодключения > 0 Тогда
				// Пробуем получить ещё раз
				ПараметрыСеанса.sms4bНомерСессии = КодОшибкиПодключения;
				НомерСессии		= смсПолучитьНомерСессии();
				ТекущееВремя	= ТекущаяДатаСеанса();
				Попытка
					// Получаем с веб сервиса параметры сессии
					ПараметрыСессии = ВебСервис.ParamSMS(НомерСессии);
				Исключение
					ПараметрыСессии = Неопределено;
				КонецПопытки;
				Если ПараметрыСессии = Неопределено Тогда
				 // Проблема с интернетом (сервис не ответил)
					КодОшибки = -99999;
				Иначе	
					КодОшибки = Число(ПараметрыСессии.Result);
				КонецЕсли;							
			КонецЕсли;
		КонецЕсли;
		Если КодОшибки > 0 Тогда 
			СтруктураПараметровСессии.Вставить("НомерСессии",		НомерСессии);
			СтруктураПараметровСессии.Вставить("Номера",			ПараметрыСессии.Addresses);
			Константы.sms4bНомераОтправителя.Установить(СтруктураПараметровСессии.Номера);
			СтруктураПараметровСессии.Вставить("ОстатокСМС",		ПараметрыСессии.Rest);
			Константы.sms4bОстатокСМС.Установить(СтруктураПараметровСессии.ОстатокСМС);
			СтруктураПараметровСессии.Вставить("КоличествоНомеров",	ПараметрыСессии.AddrMask);
			Константы.sms4bКоличествоНомеров.Установить(СтруктураПараметровСессии.КоличествоНомеров);
			// Получаем время веб-сервера в UTC
			СтрВремяСервера = Сред(ПараметрыСессии.UTC, 1, 19);
			ВремяСервера = смсСтрокаВДату(СтрЗаменить(СтрВремяСервера, "T", " "));
			СтруктураПараметровСессии.Вставить("ВремяСервера",		ВремяСервера);
			// Уберем "лишние" секунды от корректировки UTC
			КорректировкаUTC = Окр((ТекущееВремя - ВремяСервера) / 3600) * 3600;
			СтруктураПараметровСессии.Вставить("КорректировкаUTC",	КорректировкаUTC);
			Константы.sms4bКорректировкаUTC.Установить(СтруктураПараметровСессии.КорректировкаUTC);
			СтруктураПараметровСессии.Вставить("МаксАктуальностьДоставки",	ПараметрыСессии.Limit);
			Константы.sms4bАктуальностьДоставки.Установить(СтруктураПараметровСессии.МаксАктуальностьДоставки);
			СтруктураПараметровСессии.Вставить("МаксДлительностьДоставки",	ПараметрыСессии.Duration);
			Константы.sms4bДлительностьДоставки.Установить(СтруктураПараметровСессии.МаксДлительностьДоставки);
		ИначеЕсли КодОшибки < 0 Тогда 
			// Выводим текст с описанием ошибки
			ВывестиСообщение(смсОписаниеОшибокВебСервиса(КодОшибки), СтатусСообщения.Важное, "Подключение SMS", УровеньЖурналаРегистрации.Предупреждение);
		КонецЕсли;
	КонецЕсли;
	Возврат КодОшибки;
КонецФункции // ПолучитьПараметрыСессии()

// Функция предназначена для получения входящих sms-сообщений
// Функция по возможности склеит части входящих сообщений в одно sms-сообщение. В случае,
// если в момент вызова какие то из частей сообщения еще не получены сервером SMS4B,
// в конец текста будет вставлен специальный маркер. Формат маркера: «[…]». На основании маркера
// при получении оставшихся частей сообщений можно будет «дособрать» его на стороне клиента.
//
// Параметры:
//
//  СписокСообщений (массив)- Возвращаемый параметр, содержит массив структур, содержащих 
//							  поля полученных sms-сообщений.
//							
//  ДатаПолученияСообщения (Дата и время) - Возвращаемый параметр. В метод передается дата, 
//											начиная с которой нужно получать сообщения, возвращается
//											дата последнего полученного сообщения. Если не передана
//											дата получения сообщений, то будут получены сообщения 
//											с начала дня текущей даты. В этом случае значение 
//											миллисекунд будет проигнорировано. 
//							
//  Миллисекунда (число(3)) - 	Возвращаемый параметр. В дополнение ко времени получения сообщений
//								передается миллисекунда, поскольку на сервере SMS4B время хранится
//								с точностью до миллисекунд. Возвращается миллисекунда времени 
//								последнего полученного сообщения.
//							
//  ПолучатьТолькоПолныеСМС (булево) - 	Необязательный параметр, по умолчанию Ложь. На сервере SMS4B
//										реализован механизм, позволяющий получать sms, состоящие из 
//										нескольких частей, только когда будут получены все ее части. 
//										Этот механизм будет использоваться,	если значение параметра 
//										равно Истина. Если значение равно Ложь, части sms будут 
//										возвращаться сразу по мере их прихода. Действия по склеиванию 
//										пришедших частей с полученными ранее необходимо выполнять на 
//										стороне клиента в предметной логике.
//										Следует понимать, что при использовании режима получения только
//										полных сообщений есть риск того, что некоторые сообщения никогда
//										не будут получены с сервера (если на сервер не дойдут какие то
//										части сообщений).
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно,
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция смсПолучитьСообщения(СписокСообщений, ДатаПолученияСообщения, Миллисекунда = 0, ПолучатьТолькоПолныеСМС = Ложь)
	
	КодОшибки	= 1;
	Маркер		= "[…]";	// Признак частично полученного сообщения, добавляется в конец сообщения,
							// если оно не было получено полностью с сервера
	
	// Если дата не заполнена, то получаем сообщения с начала дня текущей даты
	Если НЕ ЗначениеЗаполнено(ДатаПолученияСообщения) Тогда
		ДатаПолученияСообщения = НачалоДня(ТекущаяДатаСеанса());
	ИначеЕсли ДатаПолученияСообщения = Дата('00010101') Тогда
		ДатаПолученияСообщения = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	// Переводим дату получения сообщений к времени по UTC
	ДатаПолученияСообщенияUTC = смсПривестиДатуКUTC(ДатаПолученияСообщения);
	// Создаем структуру даты, с которой необходимо получить входящие сообщения
	СтруктураДаты = Новый Структура;
	СтруктураДаты.Вставить("Дата",			ДатаПолученияСообщенияUTC);
	СтруктураДаты.Вставить("Миллисекунда",	Миллисекунда);
	// Переводим дату в строку
	МоментВремени = смсДатаВСтроку(СтруктураДаты);
	
	// Создаем таблицу значений для полученных сообщений
	ПолученныеСообщения = Новый ТаблицаЗначений;
	ПолученныеСообщения.Колонки.Добавить("GUID");
	ПолученныеСообщения.Колонки.Добавить("ДатаПолучения"); 
	ПолученныеСообщения.Колонки.Добавить("Миллисекунда");
	ПолученныеСообщения.Колонки.Добавить("Отправитель");
	ПолученныеСообщения.Колонки.Добавить("Получатель");
	ПолученныеСообщения.Колонки.Добавить("ТекстСообщения");
	ПолученныеСообщения.Колонки.Добавить("ВсегоЧастей");
	ПолученныеСообщения.Колонки.Добавить("ТекущаяЧасть");
				
	ВебСервис = смсПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		КодОшибки = -9;
		Возврат КодОшибки;
	КонецЕсли; 
	// Получаем фабрику XDTO 
	Фабрика			= ВебСервис.ФабрикаXDTO;
	ЕстьСообщения	= Истина;
	Пока ЕстьСообщения Цикл
		// Получаем сообщения с сервера
		Попытка
			НовыеСообщения = ВебСервис.LoadSMS(смсПолучитьНомерСессии(), МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
		Исключение
			НовыеСообщения = Неопределено;
		КонецПопытки;
		Если НовыеСообщения = Неопределено Тогда
			// Проблема с интернетом (сервис не ответил)
			КодОшибки = -99999;
		Иначе	
			КодОшибки = Число(НовыеСообщения.Result);
			// Если код ошибки > 0, то есть сообщения
			Если (КодОшибки > -20) И (КодОшибки < 0) Тогда
				// Возможно, что Основной сервер не доступен, пробуем переключится на резервный.
				смсПоменятьСервер();
				КодОшибки = Подключиться();
				// Если есть ошибки при подключении, то возвращаем код ошибки
				Если КодОшибки > 0 Тогда
					// Пробуем получить еще раз
					Попытка
						НовыеСообщения = ВебСервис.LoadSMS(смсПолучитьНомерСессии(), МоментВремени, ?(ПолучатьТолькоПолныеСМС, 1, 0));
					Исключение
						НовыеСообщения = Неопределено;
					КонецПопытки;
					Если НовыеСообщения = Неопределено Тогда
						// Проблема с интернетом
						КодОшибки = -199999;
					Иначе
						КодОшибки = Число(НовыеСообщения.Result);
					КонецЕсли;							
				КонецЕсли;	
			КонецЕсли; 
		КонецЕсли;	
		Если КодОшибки < 0 Тогда
			// Есть ошибки при получении сообщений
			Возврат КодОшибки;
		КонецЕсли; 
		// Получаем список сообщений
		Попытка
			СписокВходящихСообщений = НовыеСообщения.List.SMSList;
		Исключение
		    СписокВходящихСообщений = Неопределено;
		КонецПопытки;
		// Обрабатываем полученные сообщения
		Если СписокВходящихСообщений = Неопределено Тогда
			ЕстьСообщения = Ложь;
		Иначе	
			КолПолученных = 0;
			Для Каждого Строка Из СписокВходящихСообщений Цикл
				// Пропускаем повторно полученные сообщения
				ИскомаяСтрока = ПолученныеСообщения.Найти(Строка.G);
				Если НЕ (ИскомаяСтрока = Неопределено) Тогда 
					Если (ИскомаяСтрока.ТекущаяЧасть >= Строка.P) И (ИскомаяСтрока.ВсегоЧастей = Строка.A) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				КолПолученных = КолПолученных + 1;
				// Склеиваем сообщения только тогда, когда получаем их частями
				Если НЕ ПолучатьТолькоПолныеСМС Тогда
					Если НЕ (ИскомаяСтрока = Неопределено) Тогда
						// Склеиваем сообщение, если сообщение не полное, то добавляем маркер
						// (признак того, что сообщение получено не полностью)
						Если (ИскомаяСтрока.ВсегоЧастей = Строка.A) И (ИскомаяСтрока.ТекущаяЧасть < Число(Строка.P)) Тогда
							ИскомаяСтрока.ТекстСообщения = СтрЗаменить(ИскомаяСтрока.ТекстСообщения, Маркер, "") 
							+ смсСтрокуВОбычноеПредставление(Строка.B, Строка.E) + ?(Число(Строка.P) = Число(Строка.A), "", Маркер);
							ИскомаяСтрока.ТекущаяЧасть      = Строка.P;
							// Запишем дату получения последней части сообщения
							ДатаСтрокой = смсСтрокаВДату(Лев(Строка.M, 19));
							ДатаUTC = смсПривестиДатуКUTC(ДатаСтрокой, Ложь);
							ИскомаяСтрока.ДатаПолучения  = смсДатаВСтроку(ДатаUTC);
							ИскомаяСтрока.Миллисекунда   = Прав(МоментВремени, СтрДлина(МоментВремени)-Найти(МоментВремени,"."));
							МоментВремени = Строка.M;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ТекСообщение = ПолученныеСообщения.Добавить();
				ТекСообщение.GUID 			= Строка.G;
				// Переводим время входящей смс из UTC в "наше"
				ДатаСтрокой = смсСтрокаВДату(Лев(Строка.M,19));
				ДатаUTC = смсПривестиДатуКUTC(ДатаСтрокой, Ложь);
				ТекСообщение.ДатаПолучения  = смсДатаВСтроку(ДатаUTC);
				ТекСообщение.Миллисекунда   = Прав(Строка.M, 3);
				ТекСообщение.Отправитель 	= Строка.S;
				ТекСообщение.Получатель 	= Строка.D;
				ТекстСообщения = смсСтрокуВОбычноеПредставление(Строка.B, Строка.E) + ?(Число(Строка.A) > 1 И Число(Строка.P) = 1, Маркер, "");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(0), "@");
				ТекСообщение.ТекстСообщения = СтрЗаменить(ТекстСообщения, Символ(2), "$");
				ТекСообщение.ВсегоЧастей 	= Строка.A;
				ТекСообщение.ТекущаяЧасть 	= Строка.P;
				МоментВремени = Строка.M;
			КонецЦикла;
			// Проверка что полученный пакет был полностью получен ранее 
			// (зациклились на одной миллисекунде)
			Если КолПолученных = 0 Тогда 
				ЕстьСообщения = Ложь;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	Если ПолученныеСообщения.Количество() > 0 Тогда
 		// Преобразуем таблицу значений в массив структур и записываем в возвращаемый параметр
		СписокСообщений = смсТаблицаЗначенийВМассивСтруктур(ПолученныеСообщения);
	КонецЕсли; 
	Если КодОшибки > 0 Тогда
		// КодОшибки = 0 - нет входящих сообщений, КодОшибки > 0 - повторный пакет.
		КодОшибки = 1;
	КонецЕсли; 
	Возврат КодОшибки;
КонецФункции // смсПолучитьСообщения()

// Функция предназначена для отправки группы sms-сообщений на сервер SMS4B. 
// Группу сообщений объединяют единые временные характеристики отправки 
// (дата отправки, актуальность и т.п.). В предметной реализации группой 
// можно считать отдельный документ рассылки либо, например, набор сообщений 
// с незаполненными временными характеристиками.
//							
// Параметры:
//							
//  СписокСообщений (массив) -	Обязательный параметр. Содержит массив структур, содержащих поля
//								sms-сообщений, предназначенных для отправки на сервер.
//							
// НомерОтправителя (строка) - 	Обязательный параметр. Номер, с которого отправляются сообщения.
//							
//  ТекстСообщенияПоУмолчанию (строка) - Необязательный параметр. Данный текст будет использоваться
//								для отправки тем получателям, для которых в списке сообщений не указан
//								текст сообщения. В случае групповой рассылки сообщений с одним общим
//								текстом достаточно заполнить данный параметр и в списке сообщений 
//								нигде не указывать текст сообщения. В случае если для получателя указан
//								персональный текст, текст по умолчанию не будет использоваться для
//								отправки сообщения данному получателю.
//							
//  ДатаОтправки (дата) - 		Необязательный параметр. Дата начала отправки sms-сообщения
//							
//  Актуальность (дата) - 		Необязательный параметр. Дата, до которой сообщение будет пытаться
//								отправиться сервером sms4b.
//							
//  НачалоПериодаЗапрета (дата) - Необязательный параметр. Указывает, с какого времени начинается период,
//								в который сообщения не должны отправляться (например, чтобы они не 
//								приходили получателям ночью). Актуальным является только временная часть
//								даты (ЧЧ:ММ:СС). Сама дата (ДД.ММ,ГГГГ) не анализируется и может быть 
//								передана любая (в том числе пустая).
//							
// - КонецПериодаЗапрета (дата) - Необязательный параметр. Указывает время окончания периода, в который
//								сообщения не должны отправляться (например, чтобы они не приходили 
//								получателям ночью). Актуальным является только временная часть даты 
//								(ЧЧ:ММ:СС). Сама дата (ДД.ММ,ГГГГ) не анализируется и может быть передана 
//								любая (в том числе пустая).
//							
// - РавномернаяРассылка(булево) - Необязательный параметр. Содержит признак равномерной рассылки. При 
//								использовании равномерной рассылки сообщения группы будут отправляться
//								через равные промежутки времени пропорционально периоду рассылки. 
//								Значение по умолчанию – ложь.
//
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, 
// и код ошибки < 0, если функция выполнена не успешно.
//
Функция смсОтправитьСообщения(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию, _ДатаОтправки, _Актуальность = '00010101', НачалоПериодаЗапрета = '00010101', КонецПериодаЗапрета = '00010101', РавномернаяРассылка = Ложь)
	// Проверяем наличие сессии
	НомерСессии = смсПолучитьНомерСессии();
	Если НомерСессии = 0 Тогда
		КодОшибки = Подключиться();
		Если КодОшибки < 0 Тогда
			// Пробуем переключиться на резервный сервер
			смсПоменятьСервер();
			КодОшибки = Подключиться();
			Если КодОшибки < 0 Тогда
				// Проблема с интернетом
				КодОшибки = -199999;
				Возврат КодОшибки;
			КонецЕсли;
		КонецЕсли;	
		ПараметрыСеанса.sms4bНомерСессии = КодОшибки;
		НомерСессии = смсПолучитьНомерСессии();
	КонецЕсли;	
	// Проверяем номер отправителя
	Если ПустаяСтрока(НомерОтправителя) Тогда
		НомерОтправителя = Константы.sms4bНомераОтправителя.Получить();
	КонецЕсли;	
	ПараметрыСессии	= Новый Структура;
	КодОшибки = ПолучитьПараметрыСессии(ПараметрыСессии);
	Если КодОшибки > 0 Тогда
		Если НЕ ПараметрыСессии.Свойство("Номера") Тогда
			КодОшибки =  - 50;
		ИначеЕсли ПустаяСтрока(ПараметрыСессии.Номера) Тогда
			КодОшибки =  - 50;
		Иначе	
			МассивНомеров = ПолучитьМассивНомеровИзСтроки(ПараметрыСессии.Номера);
			Если МассивНомеров.Количество() = 0 Тогда
				КодОшибки =  - 50;
			ИначеЕсли ПустаяСтрока(НомерОтправителя) Тогда
				НомерОтправителя = МассивНомеров[0];
			ИначеЕсли МассивНомеров.Найти(НомерОтправителя) = Неопределено Тогда
				НомерОтправителя = МассивНомеров[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если КодОшибки < 0 Тогда
		Возврат КодОшибки;
	КонецЕсли;
	ОсновнойСервер	= смсПолучитьОсновнойСервер();
	КодОшибки		= 1;
	// Устанавливаем код группы равным 0
	КодГруппы = 0;
	// Количество отправляемых сообщений
	КолвоСообщений = СписокСообщений.Количество();
	// Размер пакета сообщений для отправки на сервер
	РазмерПакета = 100;
	// Все сообщения отправились успешно
	ЕстьНеОтправленныеСообщения = Ложь;
	// Создаем структуру с путой датой
	СтруктураДаты = Новый Структура();
	СтруктураДаты.Вставить("Дата",			Дата('00010101'));
	СтруктураДаты.Вставить("Миллисекунда",	0);
	// Переводим дату отправки и дату актуальности к времени UTC
	ДатаОтправкиUTC		= ПараметрыСессии.ВремяСервера;
	АктуальностьUTC		= _Актуальность;
	// Переводим дату отправки и дату актуальности в строку
	СтруктураДаты.Дата	= ДатаОтправкиUTC;
	ДатаОтправки		= смсДатаВСтроку(СтруктураДаты); // Дата отправки СМС в формате "YYYYMMDD"
	СтруктураДаты.Дата	= АктуальностьUTC;
	Актуальность		= смсДатаВСтроку(СтруктураДаты); // Дата жизни СМС в формате "YYYYMMDD"
	Период				= "";	
	// Обработка таблицы сообщений
	СчетчикПакетаСообщений = 0;
	// Подключаем веб-сервис
	ВебСервис = смсПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		смсПоменятьСервер();
		ВебСервис = смсПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Получаем фабрику XDTO
	Фабрика  = ВебСервис.ФабрикаXDTO;
	МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfGroupSMSList"));
	// Если какие то сообщения не удастся отправить с первого раза, отправим на второй итерации
	КолвоОтправок = 2;
	Для Индекс = 1 По КолвоОтправок Цикл
		ТекущийИндекс = -1;
		Для Каждого Сообщение Из СписокСообщений Цикл
			ТекущийИндекс = ТекущийИндекс + 1;
			// Уже отправленное сообщение
			Если Сообщение.КодОшибки = 1 Тогда Продолжить; КонецЕсли; 
			СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;
			// Получаем кодировку сообщения, если русский текст то 1, иначе 0
			Кодировка =  Использовать7БитСообщение(Сообщение.ТекстСообщения);
			// Создаем и заполняем строку массива сообщений
			СтрокаМассива = Фабрика.Создать(Фабрика.Тип("SMS client", "GroupSMSList"));
			СтрокаМассива.Установить("B", ?(ЗначениеЗаполнено(Сообщение.ТекстСообщения), смсСтрокуВШестнадцатеричноеПредставление(Сообщение.ТекстСообщения, Кодировка), ""));
			СтрокаМассива.Установить("D", Сообщение.НомерПолучателя);
			СтрокаМассива.Установить("E", Кодировка);
			СтрокаМассива.Установить("G", Сообщение.GUID);
			МассивСообщений.GroupSMSList.Добавить(СтрокаМассива);
			// Отправка пакета сообщений или остатка сообщений
			Если (СчетчикПакетаСообщений = РазмерПакета) ИЛИ (СчетчикПакетаСообщений = КолвоСообщений) Тогда
				КолвоСообщений = КолвоСообщений - РазмерПакета;
				Если ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию) Тогда
					КодировкаСообщенияШапки =  Использовать7БитСообщение(ТекстСообщенияПоУмолчанию);
				Иначе
					КодировкаСообщенияШапки = 0;
				КонецЕсли; 
				Попытка
					// Если первая отправка, то код группы = -2, если требуется равномерная рассылка, или -1 если не требуется
					Cod = ?(КодГруппы = 0, ?(РавномернаяРассылка, -2, -1), КодГруппы); // КодГруппы
					// Переводим общий текст в шестнадцатеричное представление
					Bdy = ?(ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию), смсСтрокуВШестнадцатеричноеПредставление(ТекстСообщенияПоУмолчанию, КодировкаСообщенияШапки), "");
					// Оправка сообщений на сервер
					РезультатОтправки = ВебСервис.GroupSMS(НомерСессии, Cod, Строка(НомерОтправителя),
						КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
				Исключение
					РезультатОтправки = Неопределено;
				КонецПопытки;
				// Проверяем результат отправки
				Если РезультатОтправки = Неопределено Тогда
					// Проблема с интернетом (сервис не ответил)
					КодОшибки = -99999;
				Иначе					
					// Получаем код ошибки
					КодОшибки = РезультатОтправки.Result;
					Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
						// Если сессия устарела или её нет
						КодОшибки = Подключиться();
						Если КодОшибки > 0 Тогда
							ПараметрыСеанса.sms4bНомерСессии = КодОшибки;
							НомерСессии = смсПолучитьНомерСессии();
							Попытка
								// Пробуем отправить ещё раз
								РезультатОтправки = ВебСервис.GroupSMS(НомерСессии, Cod, Строка(НомерОтправителя),
									КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
							Исключение
								РезультатОтправки = Неопределено;
							КонецПопытки;
							// Получим результат отправки
							Если РезультатОтправки = Неопределено Тогда
								КодОшибки = -99999;
							Иначе	
								КодОшибки = РезультатОтправки.Result;
							КонецЕсли;							
						КонецЕсли;							
					ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
						// Возможно, что Основной сервер не доступен, пробуем переключится на резервный.
						смсПоменятьСервер();
						КодОшибки = Подключиться();
						// Если ошибка подключения
						Если КодОшибки > 0 Тогда
							ПараметрыСеанса.sms4bНомерСессии = КодОшибки;
							НомерСессии = смсПолучитьНомерСессии();
							Попытка
								// Пробуем отправить ещё раз
								РезультатОтправки = ВебСервис.GroupSMS(НомерСессии, Cod, Строка(НомерОтправителя),
									КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, Период, МассивСообщений);
							Исключение
								РезультатОтправки = Неопределено;
							КонецПопытки;
							// Получим результат отправки
							Если РезультатОтправки = Неопределено Тогда
								КодОшибки = -99999;
							Иначе	
								КодОшибки = РезультатОтправки.Result;
							КонецЕсли;							
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
				Если КодОшибки > 0 Тогда 
					// Запоминаем код созданной группы
					КодГруппы = РезультатОтправки.Group;
					// Записываем результат отправки каждого из сообщений
					КолвоОтправленных = РезультатОтправки.List.CheckSMSList.Количество();
					Для Счетчик = 1 По КолвоОтправленных Цикл
						ТекСообщение  = СписокСообщений.Получить((ТекущийИндекс-КолвоОтправленных) + Счетчик);
						ОтпрСообщение = РезультатОтправки.List.CheckSMSList.Получить(Счетчик-1);
						Если ТекСообщение.GUID = ОтпрСообщение.G Тогда
							ТекСообщение.КодОшибки = ОтпрСообщение.R;
						КонецЕсли;
						// Есть ли неотправленные сообщения
						Если ТекСообщение.КодОшибки < 0 Тогда 
							ЕстьНеОтправленныеСообщения = Истина;
						КонецЕсли;
					КонецЦикла; 
					// Очищаем список отправленных сообщений
					СчетчикПакетаСообщений = 0;
					МассивСообщений.GroupSMSList.Очистить();
				ИначеЕсли КодОшибки < 0 Тогда 						
					ЕстьНеОтправленныеСообщения = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		// Если есть не отправленные, то повторяем отправку ещё один раз
		Если НЕ ЕстьНеОтправленныеСообщения Тогда Прервать; КонецЕсли; 
	КонецЦикла;
	Возврат КодОшибки;
КонецФункции // смсОтправитьСообщения()

// Функция предназначена для обновления статусов отправленных sms-сообщений. 
// Для получения статусов необходимо передать в метод массив структур, 
// содержащих GUID тех сообщений, которые необходимо проверить. При успешном 
// выполнении функции все переданные структуры в массиве будут дополнены 
// статусами соответствующих со-общений.
//
// Параметры:
//
//  СписокСообщений (массив) - 	В данный параметр при вызове метода помещается массив структур,
//								содержащих поля sms-сообщений, статус доставки которых необходимо
//								обновить. Статусы сообщений будут записываться при вызове метода 
// 								в поле структуры «СтатусСообщения» для каждого обрабатываемого
//								сообщения.
// 
// Возвращаемое значение (число):
// 
// Возвращает числовой код ошибки, 1 – если функция выполнена успешно, и 
// код ошибки < 0, если функция выполнена не успешно.
//
// Состояние сообщения с сервера возвращается в виде числа, представляющего собой битовую маску.
// Маска представляет собой сложение четырех наборов бит (всего 32 бита):
//
// Бит:	    31                            16 15 		   8 7             0
// Схема	|0|_|_|_|_|_|_|_|_|_|_|_|_|_|_|F|D|D|D|D|D|D|D|D|A|A|A|A|A|A|A|A| 
// Описание	        зарезервировано	      |   доставлено	|  всего частей
//
// Где,
// - один младший бит F в старшем слове - флаг завершения жизни sms (достижения конечно-го состояния);
// - один байт D - количество частей, доставленных, если требовалось уведомление о доставке, либо 
//   отправленных, если не требовалось;
// - один младший байт A - количество частей, принятых к отправке/доставке;
//
// Описание возвращаемых статусов сообщений:
//  1 - Доставка 
//  2 - В очереди
//  3 - Отправлено 
//  4 - Не отправлено
//  5 - Доставлено
//  6 - Не доставлено 
//  7 - Ошибка отправки 
//  8 - Получено 
//  9 - Частично получено
//
Функция смсОбновитьСтатусы(СписокСообщений)
	КодОшибки = 1;
	// Количество сообщений у которых необходимо обновить статус
	КолвоСообщений = СписокСообщений.Количество();
	// Обработка сообщений
	СчетчикПакетаСообщений = 0;
	// Создаем WS-ссылку
	ВебСервис = смсПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		смсПоменятьСервер();
		ВебСервис = смсПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Получаем фабрику XDTO
	Фабрика   = ВебСервис.ФабрикаXDTO;
	МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfString"));
	// Размер пакета сообщений
	РазмерПакета = 200;
	// Обрабатываем список сообщений
	Для Каждого Сообщение Из СписокСообщений Цикл
		СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;
		// Добавляем GUID сообщения в массив
		МассивСообщений.string.Добавить(Сообщение.GUID);
		// Отправка пакета размером "РазмерПакета" (или 1 пакета с количеством меньше "РазмерПакета") или остатка сообщений
		Если СчетчикПакетаСообщений = РазмерПакета ИЛИ СчетчикПакетаСообщений = КолвоСообщений Тогда
			КолвоСообщений = КолвоСообщений - РазмерПакета;
			Попытка	
				// Запрос статусов сообщений на сервере
				РезультатОтправки = ВебСервис.CheckSMS(смсПолучитьНомерСессии(), МассивСообщений);
			Исключение
				РезультатОтправки = Неопределено;
			КонецПопытки; 
			Если РезультатОтправки = Неопределено Тогда
				// Проблема с интернетом
				КодОшибки = -199999;
				Возврат КодОшибки;
			КонецЕсли; 
			// Получаем код ошибки
			КодОшибки = РезультатОтправки.Result;
			// Ошибка при обновлении статусов
			Если КодОшибки < 0 Тогда 
				Если (КодОшибки > -20) И (КодОшибки < 0) Тогда
					// Возможно, что Основной сервер не доступен, пробуем переключится на резервный.
					смсПоменятьСервер();
					КодОшибки = Подключиться();
					// Если ошибка подключения
					Если КодОшибки < 0 Тогда
						Возврат КодОшибки;
					КонецЕсли;
				КонецЕсли;
				Возврат КодОшибки;
			КонецЕсли;
			// Получаем список со статусами
			СписокСтатусов = РезультатОтправки.List.CheckSMSList;
			Если Тип(СписокСтатусов) = ТипЗнч("ОбъектXDTO") Тогда
				НовыйСписок	= Новый ТаблицаЗначений;
				НовыйСписок.Колонки.Добавить("G");
				НовыйСписок.Колонки.Добавить("R");
				НовСтрока		= НовыйСписок.Добавить();
				НовСтрока.G		= СписокСтатусов.G;
				НовСтрока.R		= СписокСтатусов.R;
				СписокСтатусов	= НовыйСписок;
			КонецЕсли;
			// Обрабатываем таблицу со статусами
			Для Каждого Строка Из СписокСтатусов Цикл
				// Статус возвращается в виде числа представляющего из себя битовую маску
				КодСтатуса = Строка.R;
				ТекСтатус = "";
				ГУИДСообщения = Строка.G;
				ИскомаяСтрока = смсМассивСтруктурНайти(СписокСообщений, ГУИДСообщения);
				Если ИскомаяСтрока = Неопределено Тогда Продолжить; КонецЕсли; 
				// Ошибка 
				Если Число(КодСтатуса) < 0 Тогда
					ИскомаяСтрока.СтатусСообщения = КодСтатуса;
					Продолжить;
				КонецЕсли; 
				// Раскладываем битовую маску статуса
				к3 = Цел(КодСтатуса / 65536); // если нечетное то статус окончательный, 
											  // если четное - то еще идет обработка сообщения
				к2 = Цел((КодСтатуса - (к3 * 65536)) / 256);       // количество доставленных частей
				к1 = Цел(КодСтатуса - (к3 * 65536) - (к2 * 256));  // количество частей всего
				// Вычисляем статус сообщения
				Если НЕ к3/2 = Цел(к3/2) Тогда // нечетное
					Если к1 = к2 Тогда
						Если к2 = 0 Тогда
							ТекСтатус = 7; // Ошибка
						Иначе 
							ТекСтатус = 5; // Доставлено
						КонецЕсли;
					Иначе
						Если ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
							ТекСтатус = 4; // Не отправлено
						ИначеЕсли ИскомаяСтрока.СтатусСообщения = 3 Тогда // статус "Отправлено"
							ТекСтатус = 6; // Не доставлено
						КонецЕсли;	
						Если к2 > 0 Тогда // Обработана часть(и) сообщения
							Если ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
								// "Отправлено частей " + Строка(к2) + " из " + Строка(к1));
							ИначеЕсли ИскомаяСтрока.СтатусСообщения = 3 Тогда // статус "Отправлено"
								// "Доставлено частей " + Строка(к2) + " из " + Строка(к1));
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;	
				Иначе // четное !!!
					Если к1 = к2 И ИскомаяСтрока.СтатусСообщения = 2 Тогда // статус "В очереди"
						ТекСтатус = 3; // Отправлено
					ИначеЕсли к2 = 0 ИЛИ (к3 = 0 И к2 < к1) Тогда
						ТекСтатус = 3; // Отправлено
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ИскомаяСтрока = Неопределено Тогда
					ИскомаяСтрока.СтатусСообщения = ТекСтатус;
				КонецЕсли;
			КонецЦикла; 
			СчетчикПакетаСообщений = 0;
			МассивСообщений.string.Очистить();
		КонецЕсли; 
	КонецЦикла; 
	// Обновление статусов прошло успешно
	Если КодОшибки > 0 Тогда
		КодОшибки = 1;
	КонецЕсли; 
	Возврат КодОшибки;
КонецФункции // смсОбновитьСтатусы()

// Функция предназначена для получения статуса отправленного sms-сообщения 
//
// Параметры:
//	ИдентификаторСообщения	- Строка	- Уникальный идентификатор сообщения
// 
// Возвращаемое значение:
//	Число	- Числовой код ошибки < 0 или код текущего статуса > 0
//
Функция смсПолучитьСтатус(ИдентификаторСообщения)
	// Проверяем наличие сесии
	НомерСессии = смсПолучитьНомерСессии();
	Если НомерСессии = 0 Тогда
		КодОшибки = Подключиться();
		Если КодОшибки < 0 Тогда
			// Пробуем переключиться на резервный сервер
			смсПоменятьСервер();
			КодОшибки = Подключиться();
			Если КодОшибки < 0 Тогда
				// Проблема с интернетом
				КодОшибки = -199999;
				Возврат КодОшибки;
			КонецЕсли;
		КонецЕсли;	
		ПараметрыСеанса.sms4bНомерСессии = КодОшибки;
		НомерСессии = смсПолучитьНомерСессии();
	КонецЕсли;	
	КодОшибки = 1;
	// Подключаем веб-сервис
	ВебСервис = смсПодключитьВебСервис();
	Если ВебСервис = Неопределено Тогда
		смсПоменятьСервер();
		ВебСервис = смсПодключитьВебСервис();
		Если ВебСервис = Неопределено Тогда
			КодОшибки = -9;
			Возврат КодОшибки;
		КонецЕсли;	
	КонецЕсли; 
	// Получаем фабрику XDTO
	Фабрика			= ВебСервис.ФабрикаXDTO;
	МассивСообщений	= Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfString"));
	// Добавляем GUID сообщения в массив
	МассивСообщений.string.Добавить(ИдентификаторСообщения);
	Попытка	
		// Запрос статусов сообщений на сервере
		РезультатОтправки = ВебСервис.CheckSMS(НомерСессии, МассивСообщений);
	Исключение
		РезультатОтправки = Неопределено;
	КонецПопытки; 
	Если РезультатОтправки = Неопределено Тогда
		КодОшибки = -199999;
	Иначе
		// Получаем код ошибки
		КодОшибки = РезультатОтправки.Result;
		Если (КодОшибки = -1) ИЛИ (КодОшибки = -2) Тогда
			// Если сессия устарела или её нет
			КодОшибкиПодключения = Подключиться();
			Если КодОшибкиПодключения > 0 Тогда
				// Пробуем получить ещё раз
				ПараметрыСеанса.sms4bНомерСессии = КодОшибкиПодключения;
				НомерСессии = смсПолучитьНомерСессии();
				Попытка
					// Запрос статусов сообщений на сервере
					РезультатОтправки = ВебСервис.CheckSMS(НомерСессии, МассивСообщений);
				Исключение
					РезультатОтправки = Неопределено;
				КонецПопытки;
				Если РезультатОтправки = Неопределено Тогда
					КодОшибки = -99999;
				Иначе	
					КодОшибки = РезультатОтправки.Result;
				КонецЕсли;							
			КонецЕсли;
		ИначеЕсли (КодОшибки > -20) И (КодОшибки < -2) Тогда
			// Возможно, что Основной сервер не доступен, пробуем переключится на резервный.
			смсПоменятьСервер();
			КодОшибкиПодключения = Подключиться();
			// Если ошибка подключения
			Если КодОшибкиПодключения < 1 Тогда
				КодОшибки = -199999;
				Возврат КодОшибки; // Проблема с интернетом
			Иначе
				ПараметрыСеанса.sms4bНомерСессии = КодОшибки;
				НомерСессии = смсПолучитьНомерСессии();
				Попытка	
					// Запрос статусов сообщений на сервере
					РезультатОтправки = ВебСервис.CheckSMS(НомерСессии, МассивСообщений);
				Исключение
					РезультатОтправки = Неопределено;
				КонецПопытки; 
				Если РезультатОтправки = Неопределено Тогда
					КодОшибки = -199999;
					Возврат КодОшибки; // Проблема с интернетом
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если КодОшибки > 0 Тогда
		// Получаем список со статусами
		СписокСтатусов = РезультатОтправки.List.CheckSMSList;
		Если Тип(СписокСтатусов) = ТипЗнч("ОбъектXDTO") Тогда
			НовыйСписок = Новый ТаблицаЗначений;
			НовыйСписок.Колонки.Добавить("G");
			НовыйСписок.Колонки.Добавить("R");
			НовСтрока = НовыйСписок.Добавить();
			НовСтрока.G		= СписокСтатусов.G;
			НовСтрока.R		= СписокСтатусов.R;
			СписокСтатусов	= НовыйСписок;
		КонецЕсли;
		// статус возвращается в виде числа представляющего из себя битовую маску
		КодСтатуса		= СписокСтатусов[0].R;
		Если Число(КодСтатуса) < 0 Тогда
			// Ошибка 
			КодОшибки = КодСтатуса;
		Иначе
			// Раскладываем битовую маску статуса
			к3 = Цел(КодСтатуса / 65536);						// если нечетное, то статус окончательный, 
																// если четное, то ещё идет обработка сообщения
			к2 = Цел((КодСтатуса - (к3 * 65536)) / 256);		// количество доставленных частей
			к1 = Цел(КодСтатуса - (к3 * 65536) - (к2 * 256));	// количество частей всего
			// Вычисляем статус сообщения
			Если НЕ (к3/2 = Цел(к3/2)) Тогда // нечетное
				Если к1 = к2 Тогда
					Если к2 = 0 Тогда
						ТекСтатус = 7; // Ошибка
					Иначе 
						ТекСтатус = 5; // Доставлено
					КонецЕсли;
				Иначе
					ТекСтатус = 4; // Не отправлено
				КонецЕсли;	
			Иначе // четное !!!
				Если к1 = к2 Тогда
					ТекСтатус = 3; // Отправлено
				ИначеЕсли к2 = 0 ИЛИ (к3 = 0 И к2 < к1) Тогда
					ТекСтатус = 3; // Отправлено
				КонецЕсли;
			КонецЕсли;
			КодОшибки = ТекСтатус;
		КонецЕсли; 
		МассивСообщений.string.Очистить();
	КонецЕсли; 
	Возврат КодОшибки;
КонецФункции // смсПолучитьСтатус()

#КонецОбласти
