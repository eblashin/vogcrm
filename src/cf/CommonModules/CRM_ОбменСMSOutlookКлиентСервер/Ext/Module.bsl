
// Заменяет недопустимые символы в XML-строке на заданные символы.
//
// Параметры:
//   Текст – Строка – строка, в которой требуется выполнить замену недопустимых символов.
//   СимволЗамены – Строка – строка, на которую требуется выполнить замену недопустимого символа в XML-строке.
// 
//  Возвращаемое значение:
//    Строка - cтрока, полученная заменой недопустимых символов в XML-строке.
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
	
#Если НЕ ВебКлиент Тогда
	ПозицияНачала = 1;
	Пока Истина Цикл
		Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		// Если возращается позиция, больше чем должна быть, то корректируем ее.
		Если Позиция > 1 Тогда
			НедопустимыйСимвол = Сред(Текст, Позиция - 1, 1);
			Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
				Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
			КонецЕсли;
		КонецЕсли;
		НедопустимыйСимвол = Сред(Текст, Позиция, 1);
		Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
			Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
		КонецЕсли;
		ПозицияНачала = Позиция + 1;
	КонецЦикла;
#КонецЕсли

	Возврат Текст;
КонецФункции

// Возвращает идентификатор участника события или получателя письма по идентификатору AddressEntry.
//
Функция ПолучитьИдентификаторУчастника(Знач ID, ДлинаGUID = 48) Экспорт
	Идентификатор =  Прав(ID, ДлинаGUID + 6);
	Идентификатор = Лев(Идентификатор, ДлинаGUID);
	Возврат Идентификатор;
КонецФункции

// Функция находит строки
//
Функция НайтиСтроки(мТаблица,СтрПоиска = Неопределено,Ошибка = "") Экспорт
	
	Ошибка = "";
	мНайденных = Новый Массив;
	Если ТипЗнч(мТаблица) <> Тип("Массив") Тогда 
		Возврат мНайденных;	
	КонецЕсли;
	
	Если СтрПоиска = Неопределено Тогда
		Для Каждого эл  Из мТаблица Цикл
			мНайденных.Добавить(эл);
		КонецЦикла;
		Возврат мНайденных;
	КонецЕсли;
	
	Если мТаблица.Количество()= 0
		ИЛИ СтрПоиска.Количество() = 0
		Тогда 
		Возврат Новый Массив;	
	КонецЕсли;
	
	Для Каждого элОтбора Из СтрПоиска Цикл
		Если Не мТаблица[0].Свойство(элОтбора.Ключ) Тогда
			ТекстОшибки = "ru='"+"Поля "+ элОтбора.Ключ + " не существует"+"'";
			Ошибка = НСтр(ТекстОшибки);
			Возврат Новый Массив;
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого элТаб Из мТаблица Цикл
		
		бКопировать = Истина;
		Для Каждого поле Из СтрПоиска Цикл
			
			Если элТаб[поле.Ключ] <> поле.Значение Тогда 
				бКопировать = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если бКопировать Тогда
			мНайденных.Добавить(элТаб);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат мНайденных;	
		
КонецФункции

// Функция получает структуру таблицы COMОбъектов контактов.
//
Функция ПолучитьСтруктуруТаблицыCOMОбъектовКонтактов() Экспорт
	
	Возврат Новый Структура("СтрокаТЧ,ОбъектOutlook,ОбъектOutlookID");
	
КонецФункции

// Функция получает структуру таблицы COMОбъектов событий.
//
Функция ПолучитьСтруктуруТаблицыCOMОбъектовСобытий() Экспорт
	
	Возврат Новый Структура("СтрокаТЧ,ОбъектOutlook,ОбъектOutlookID");
	
КонецФункции

// Функция получает структуру таблицы COMОбъектов писем.
//
Функция ПолучитьСтруктуруТаблицыCOMОбъектовПисем() Экспорт
	
	Возврат Новый Структура("СтрокаТЧ,ОбъектOutlook,ОбъектOutlookID");
	
КонецФункции
	
