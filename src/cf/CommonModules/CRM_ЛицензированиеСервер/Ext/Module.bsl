
// Процедура возвращает основной вариант поставки конфигурации.
Функция ПолучитьОсновнойВариантПоставки() Экспорт
	Возврат Константы.CRM_ОсновнойВариантПоставки.Получить();
КонецФункции

// Функция возвращает текущий вариант поставки конфигурации для пользователя.
//
// Возвращаемое значение:
//	ПеречислениеСсылкаCRM_ВариантыПоставки - текущий вариант поставки конфигурации для пользователя.
//
Функция ПолучитьВариантПоставкиПользователя() Экспорт
	Возврат ПараметрыСеанса.CRM_ВариантПоставки;
КонецФункции

// Функция возвращает признак использования данного варианта поставки.
//
// Возвращаемое значение:
//	Булево - признак исползования данного вварианта поставки.
//
Функция ВариантПоставкиСТАРТ() Экспорт
	Возврат (ПолучитьВариантПоставкиПользователя() = Перечисления.CRM_ВариантыПоставки.СТАРТ);
КонецФункции

// Функция возвращает признак использования данного варианта поставки.
//
// Возвращаемое значение:
//	Булево - признак исползования данного вварианта поставки.
//
Функция ВариантПоставкиПРОФ() Экспорт
	Возврат (ПолучитьВариантПоставкиПользователя() = Перечисления.CRM_ВариантыПоставки.ПРОФ);
КонецФункции

// Функция возвращает признак использования данного варианта поставки.
//
// Возвращаемое значение:
//	Булево - признак исползования данного вварианта поставки.
//
Функция ВариантПоставкиКОРП() Экспорт
	Возврат (ПолучитьВариантПоставкиПользователя() = Перечисления.CRM_ВариантыПоставки.КОРП);
КонецФункции

// Функция создает и инициализирует защищенную обработку. В дальнейшем, в течении 
// сеанса, значение будет закешировано, и вызов будет возвращать тот же
// экземпляр обработки
// ИмяОбработки - строка с именем защищенной обработки
// параметра лицензирования будет совпадать или превышать переданную в этом параметре
// ОписаниеОшибки - возвращаемый параметр, содержит описание результата операции
Функция ПолучитьЗащищеннуюОбработку() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СерияМодульCRM = ПолучитьСтрокуСерииКлючейМодульCRM();
	ОписаниеОшибки = "";
	
	ВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьВариантПоставкиПользователя();
	
	Если НЕ ЗначениеЗаполнено(ВариантПоставки) Тогда
		ПараметрыСеанса.CRM_ВариантПоставки = Константы.CRM_ОсновнойВариантПоставки.Получить();
	КонецЕсли;
	
	Если ВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАРТ Тогда
		ОбработкаЗащиты = слкМенеджерЗащиты.СоздатьОбъект(СерияМодульCRM, "CRM_ФайлДанныхОРСР_СТАРТ.CRM_ЗащищеннаяОбработка_СТАРТ", ОписаниеОшибки);
	ИначеЕсли ВариантПоставки = Перечисления.CRM_ВариантыПоставки.ПРОФ Тогда
		ОбработкаЗащиты = слкМенеджерЗащиты.СоздатьОбъект(СерияМодульCRM, "CRM_ФайлДанныхОРСР_ПРОФ.CRM_ЗащищеннаяОбработка_ПРОФ", ОписаниеОшибки);
	ИначеЕсли ВариантПоставки = Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		ОбработкаЗащиты = слкМенеджерЗащиты.СоздатьОбъект(СерияМодульCRM, "CRM_ФайлДанныхОРСР_КОРП.CRM_ЗащищеннаяОбработка_КОРП", ОписаниеОшибки);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить версию ключа защиты!'");;
	КонецЕсли;
	
	Если ОписаниеОшибки <> "" Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Возврат ОбработкаЗащиты;
	
КонецФункции // ПолучитьЗащищеннуюОбработку

// Процедура записывает признак использования подсистемы CRM.
//
// Параметры:
//  ИспользоватьCRM - булево, признак использования подсистемы CRM
//
Процедура УстановитьИспользованиеCRM(ИспользоватьCRM) Экспорт
	ПараметрыСеанса.CRM_ИспользоватьCRM = ИспользоватьCRM;
КонецПроцедуры // УстановитьИспользованиеCRM()

// Функция возвращает признак использования подсистемы CRM.
//
// Возврат - булево, признак использования подсистемы CRM
//
Функция ПодсистемаCRMИспользуется() Экспорт
	Возврат ПараметрыСеанса.CRM_ИспользоватьCRM;
КонецФункции// ПодсистемаCRMИспользуется()

// Процедура записывает вариант поставки подсистемы CRM.
//
Процедура УстановитьВариантПоставки() Экспорт
	
	ВариантПоставки = Неопределено;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		ВариантПоставки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ИспользуемыйВариантПоставки");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантПоставки) Тогда
		ПараметрыСеанса.CRM_ВариантПоставки = ВариантПоставки;
	Иначе
		ПараметрыСеанса.CRM_ВариантПоставки = Константы.CRM_ОсновнойВариантПоставки.Получить();
	КонецЕсли;
	
КонецПроцедуры // УстановитьВариантПоставки()

// Возвращает признак:текущая конфигурация является типовой от 1С или нет
//
// Параметры:
//   Нет
//
// Возвращаемое значение:
//   Булево - признак что тек. конфигурация - "типовая"
//
Функция ЭтоТиповаяКонфигурация() Экспорт
	
	ИмяКонфигурации = ВРег(Метаданные.Имя);
	Возврат (ИмяКонфигурации = ВРег("УправлениеТорговлей") ИЛИ ИмяКонфигурации = ВРег("УправлениеПредприятием") ИЛИ 
			 ИмяКонфигурации = ВРег("КомплекснаяАвтоматизация"));
	
КонецФункции

// Функция возвращает серию ключа продукта
// Режим - Число - 0: просто строка с серией, 1, серия и только ключ (1/0)
Функция ПолучитьСтрокуСерииКлючейМодульCRM(Режим = 0) Экспорт
	
	СерияКлюча = "";
	ВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьВариантПоставкиПользователя();
	Если ВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАРТ Тогда
		СерияКлюча = "6ACE";
	ИначеЕсли ВариантПоставки = Перечисления.CRM_ВариантыПоставки.ПРОФ Тогда
		СерияКлюча = "32D6";
	ИначеЕсли ВариантПоставки = Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		СерияКлюча = "52BA";
	КонецЕсли;
		
	Если Режим = 1 Тогда
		Возврат СерияКлюча + ",0";
Иначе
		Возврат СерияКлюча;
	КонецЕсли;
КонецФункции
 
// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("CRM_ВариантПоставки", "CRM_ЛицензированиеСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("CRM_ИспользоватьCRM", "CRM_ЛицензированиеСервер.УстановкаПараметровСеанса");
	
КонецПроцедуры // ПриДобавленииОбработчиковУстановкиПараметровСеанса()

Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "CRM_ВариантПоставки" Тогда
		ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		ВариантПоставки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ИспользуемыйВариантПоставки");
		Если ЗначениеЗаполнено(ВариантПоставки) Тогда
			ПараметрыСеанса.CRM_ВариантПоставки = ВариантПоставки;
		Иначе
			ПараметрыСеанса.CRM_ВариантПоставки = Константы.CRM_ОсновнойВариантПоставки.Получить();
		КонецЕсли;
		УстановленныеПараметры.Добавить("CRM_ВариантПоставки");
	КонецЕсли;
	
	Если ИмяПараметра = "CRM_ИспользоватьCRM" Тогда
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ПараметрыСеанса.CRM_ИспользоватьCRM = Истина;
		Иначе
			ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
			ПараметрыСеанса.CRM_ИспользоватьCRM = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ИспользоватьCRM");
		КонецЕсли;
		УстановленныеПараметры.Добавить("CRM_ИспользоватьCRM");
	КонецЕсли;
	
КонецПроцедуры // УстановкаПараметровСеанса()

// Обработчик подписки на событие CRM_Модуль_ПриЗаписиКонстантыОсновнойВариантПоставки.
//
Процедура ПриЗаписиКонстантыОсновнойВариантПоставки(Источник, Отказ) Экспорт
	
	ТекущийВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьВариантПоставкиПользователя();
	
	ВариантПоставки = Неопределено;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		ВариантПоставки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ИспользуемыйВариантПоставки");
	КонецЕсли;
	
	Если Источник.Значение <> ТекущийВариантПоставки И НЕ ЗначениеЗаполнено(ВариантПоставки) Тогда
		ОсвободитьТекущуюЛицензию();
	КонецЕсли;
	
КонецПроцедуры //ПриЗаписиКонстантыОсновнойВариантПоставки()

// Процедура освобождает текущую лицензию СЛК
//
Процедура ОсвободитьТекущуюЛицензию() Экспорт
	
	ТекущийВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьВариантПоставкиПользователя();
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Серия = "";
		Если ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.СТАРТ Тогда
			Серия = "6ACE";
		ИначеЕсли ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.ПРОФ Тогда
			Серия = "32D6";
		ИначеЕсли ТекущийВариантПоставки = Перечисления.CRM_ВариантыПоставки.КОРП Тогда
			Серия = "52BA";
		КонецЕсли;
		
		Если Серия <> "" Тогда
			
			МенеджерСерииЗащиты = слкМенеджерЗащитыПовтИсп.ПолучитьМенеджерСерииЗащиты(Серия);
			Если МенеджерСерииЗащиты <> Неопределено Тогда
			
				Если слкМенеджерЗащитыСервер.СерияЗащитыИнициализирована(Серия) Тогда
					слкМенеджерЗащиты.ПолучитьМенеджерОбъектовСерииЗащиты(Серия).ОсвободитьЛицензиюСеанса();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//Удалим инициализацию серии защиты
	МассивСерийЗащиты = СтрРазделить(ПараметрыСеанса.слкМенеджерЗащиты, ";", Ложь);
	
	СерияЗащитыКУдалению = Неопределено;
	Для каждого СерияЗащиты Из МассивСерийЗащиты Цикл
		
		МассивСерии = СтрРазделить(СерияЗащиты, ",");
		Если МассивСерии[0] = Серия Тогда
			СерияЗащитыКУдалению = СерияЗащиты;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если СерияЗащитыКУдалению <> Неопределено Тогда
		МассивСерийЗащиты.Удалить(МассивСерийЗащиты.Найти(СерияЗащитыКУдалению));	
		ПараметрыСеанса.слкМенеджерЗащиты = СтрСоединить(МассивСерийЗащиты, ";");
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.УстановитьВариантПоставки();
	ОбновитьПовторноИспользуемыеЗначения();
	
	
КонецПроцедуры // ОсвободитьТекущуюЛицензию()
