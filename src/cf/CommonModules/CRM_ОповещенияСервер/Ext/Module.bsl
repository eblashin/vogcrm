
// ******РЕГЛАМЕНТНОЕ ФОРМИРОВАНИЕ И ОТПРАВКА ОПОВЕЩЕНИЙ******

//
//
Функция СформироватьТемуПисьма(Предмет,ВидОповещения)
	
	Тема = "";
	ТекстПисьма = "";
	
	Если ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия Тогда
		Тема = НСтр("ru = 'Оповещение о запланированном событии'");
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ЗавершениеБизнесПроцесса Тогда
		
		Тема = НСтр("ru = 'Завершен бизнес-процесс'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхЗадачах Тогда
		
		Тема = НСтр("ru = 'Новая задача'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах Тогда
		
		Тема = НСтр("ru = 'Переадресована задача/событие'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи Тогда
		
		Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			Тема = НСтр("ru = 'Истек срок выполнения задачи'");
			
		КонецЕсли;
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки Тогда
		
		Тема = НСтр("ru = 'Истек срок исполнения контрольной точки'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
		
		Тема = НСтр("ru = 'Новый документ по партнерам'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
		
		Тема = НСтр("ru = 'Новый документ по проекту'");
		
	КонецЕсли;
	
	Возврат Новый Структура("Тема, ТекстПисьма",Тема,ТекстПисьма);
	
КонецФункции

// Функция возвращает список номеров телефонов получателя.
//
// Парамеры:
//	Получатель	- СправочникСсылка	- Получатель.
//
// Возвращаемое значение:
//	СписокЗначений	- Список номеров телефонов.
//
Функция ПолучитьСписокНомеровТелефоновКонтрагента(Получатель)
	ТаблицаКЛ = Новый ТаблицаЗначений;
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда 
		ТаблицаКИ = Новый ТаблицаЗначений;
		ТаблицаКЛ = Новый ТаблицаЗначений;
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель,, Перечисления.ТипыКонтактнойИнформации.Телефон);
		КонтактныеЛицаКонтрагента = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагента(Получатель);
		Если КонтактныеЛицаКонтрагента.Количество() > 0 Тогда
			КонтактныеЛицаМассив = КонтактныеЛицаКонтрагента.ВыгрузитьКолонку("КонтактноеЛицо");
			ТаблицаКЛ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта( , КонтактныеЛицаМассив, Перечисления.ТипыКонтактнойИнформации.Телефон);
		Иначе
			ТаблицаКЛ = Новый ТаблицаЗначений;
		КонецЕсли;	
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(,Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТаблицаКЛ = Новый ТаблицаЗначений;
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТаблицаКЛ = Новый ТаблицаЗначений;
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюФизЛиц(Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТаблицаКЛ = Новый ТаблицаЗначений;
	Иначе	
		ТаблицаКИ = Новый ТаблицаЗначений;
		ТаблицаКЛ = Новый ТаблицаЗначений;
	КонецЕсли;	
	// Заполним список выбора
	СписокВозврата = Новый СписокЗначений;
	Для Каждого Строка Из ТаблицаКИ Цикл
		Если НЕ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда Продолжить; КонецЕсли;
		НомерТелефона = ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Строка.Представление);
		Если СтрДлина(НомерТелефона) > 10 Тогда
			Если Найти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Для Каждого Строка Из ТаблицаКЛ Цикл
		Если НЕ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда Продолжить; КонецЕсли;
		НомерТелефона = ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Строка.Представление);
		Если СтрДлина(НомерТелефона) > 10 Тогда
			Если Найти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции // ПолучитьСписокНомеровТелефоновКонтрагента()

Функция ПолучитьНачалоПериодаПоПериодичностиОповещений() Экспорт
	
	ПериодичностьОповещений = Константы.CRM_ПериодОповещенияОПросроченныхСобытиях.Получить();
	Если ПериодичностьОповещений = Перечисления.Периодичность.День Тогда
		НачалоПериода = ТекущаяДатаСеанса() - (24*60*60);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Неделя Тогда
		НачалоПериода = ТекущаяДатаСеанса() - (24*60*60*7);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Декада Тогда
		НачалоПериода = ТекущаяДатаСеанса() - (24*60*60*10);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -3);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Полугодие Тогда
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -6);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Год Тогда
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -12);
	Иначе
		НачалоПериода = Дата("00010101");	
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

//
//
Процедура ФормированиеОповещений() Экспорт
	
	// 1. Формирование записей оповещений о просроченных задачах, незавершенных событиях, контрольных точках.
	НачалоПериода = ПолучитьНачалоПериодаПоПериодичностиОповещений();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("ПустаяДата",ДАТА("00010101"));
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь,
	|	CRM_Напоминания.Предмет,
	|	CRM_Напоминания.ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения,
	|	CRM_Напоминания.ДатаАктуальности,
	|	CRM_Напоминания.Содержание,
	|	CRM_Напоминания.Важность,
	|	CRM_Напоминания.Счетчик,
	|	CRM_Напоминания.СрокОповещения,
	|	CRM_Напоминания.Периодичность,
	|	CRM_Напоминания.ВидОповещения
	|ПОМЕСТИТЬ Напоминания
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи)
	|	ИЛИ CRM_Напоминания.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Оповещения.Получатель,
	|	CRM_Оповещения.Предмет,
	|	CRM_Оповещения.ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения,
	|	CRM_Оповещения.Канал,
	|	CRM_Оповещения.ДатаАктуальности,
	|	CRM_Оповещения.Содержание,
	|	CRM_Оповещения.СрокОповещения,
	|	CRM_Оповещения.Периодичность
	|ПОМЕСТИТЬ Оповещения
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи)
	|	ИЛИ CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиКТ.Ссылка КАК Предмет,
	|	ПользователиКТ.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ КонтрольныеТочки
	|ИЗ
	|	Документ.CRM_КонтрольнаяТочкаПроекта.ПользователиКТ КАК ПользователиКТ
	|ГДЕ
	|	НЕ ПользователиКТ.Ссылка.ПометкаУдаления
	|	И ПользователиКТ.Ссылка.ДатаЗакрытия < &ТекущаяДата
	|	И ПользователиКТ.Ссылка.ДатаЗакрытия > &НачалоПериода
	|	И ПользователиКТ.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыКонтрольныхТочек.Запланирована)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Предмет,
	|	ВЫБОР
	|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЗадачаИсполнителя.БизнесПроцесс.Ответственный
	|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
	|	КОНЕЦ КАК Пользователь
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
	|	И ЗадачаИсполнителя.СрокИсполнения > &НачалоПериода
	|	И ВЫБОР
	|			КОГДА НЕ ЗадачаИсполнителя.CRM_Личная
	|				ТОГДА НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс)
	|			ИНАЧЕ НЕ ЗадачаИсполнителя.СрокИсполнения = &ПустаяДата
	|		КОНЕЦ
	|;
	|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПросроченныеСобытия.Предмет,
	//|	ПросроченныеСобытия.Пользователь,
	//|	ПросроченныеСобытия.Напоминания,
	//|	ПросроченныеСобытия.Оповещения
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		События.Предмет КАК Предмет,
	//|		События.Пользователь КАК Пользователь,
	//|		СУММА(ВЫБОР
	//|				КОГДА Напоминания.ВидОповещения ЕСТЬ NULL 
	//|					ТОГДА 0
	//|				ИНАЧЕ 1
	//|			КОНЕЦ) КАК Напоминания,
	//|		СУММА(ВЫБОР
	//|				КОГДА Оповещения.ВидОповещения ЕСТЬ NULL 
	//|					ТОГДА 0
	//|				ИНАЧЕ 1
	//|			КОНЕЦ) КАК Оповещения
	//|	ИЗ
	//|		События КАК События
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Напоминания КАК Напоминания
	//|			ПО События.Предмет = Напоминания.Предмет
	//|				И События.Пользователь = Напоминания.Пользователь
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Оповещения КАК Оповещения
	//|			ПО События.Предмет = Оповещения.Предмет
	//|				И События.Пользователь = Оповещения.Получатель
	//|	
	//|	СГРУППИРОВАТЬ ПО
	//|		События.Предмет,
	//|		События.Пользователь) КАК ПросроченныеСобытия
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПросроченныеКонтрольныеТочки.Предмет,
	|	ПросроченныеКонтрольныеТочки.Пользователь,
	|	ПросроченныеКонтрольныеТочки.Напоминания,
	|	ПросроченныеКонтрольныеТочки.Оповещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтрольныеТочки.Предмет КАК Предмет,
	|		КонтрольныеТочки.Пользователь КАК Пользователь,
	|		СУММА(ВЫБОР
	|				КОГДА Напоминания.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Напоминания,
	|		СУММА(ВЫБОР
	|				КОГДА Оповещения.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Оповещения
	|	ИЗ
	|		КонтрольныеТочки КАК КонтрольныеТочки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Напоминания КАК Напоминания
	|			ПО КонтрольныеТочки.Предмет = Напоминания.Предмет
	|				И КонтрольныеТочки.Пользователь = Напоминания.Пользователь
	|			ЛЕВОЕ СОЕДИНЕНИЕ Оповещения КАК Оповещения
	|			ПО КонтрольныеТочки.Предмет = Оповещения.Предмет
	|				И КонтрольныеТочки.Пользователь = Оповещения.Получатель
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КонтрольныеТочки.Предмет,
	|		КонтрольныеТочки.Пользователь) КАК ПросроченныеКонтрольныеТочки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПросроченныеЗадачи.Предмет,
	|	ПросроченныеЗадачи.Пользователь,
	|	ПросроченныеЗадачи.Напоминания,
	|	ПросроченныеЗадачи.Оповещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Задачи.Предмет КАК Предмет,
	|		Задачи.Пользователь КАК Пользователь,
	|		СУММА(ВЫБОР
	|				КОГДА Напоминания.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Напоминания,
	|		СУММА(ВЫБОР
	|				КОГДА Оповещения.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Оповещения
	|	ИЗ
	|		Задачи КАК Задачи
	|			ЛЕВОЕ СОЕДИНЕНИЕ Напоминания КАК Напоминания
	|			ПО Задачи.Предмет = Напоминания.Предмет
	|				И Задачи.Пользователь = Напоминания.Пользователь
	|			ЛЕВОЕ СОЕДИНЕНИЕ Оповещения КАК Оповещения
	|			ПО Задачи.Предмет = Оповещения.Предмет
	|				И Задачи.Пользователь = Оповещения.Получатель
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Задачи.Предмет,
	|		Задачи.Пользователь) КАК ПросроченныеЗадачи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато формирование регламентных оповещений'"));
	ВариантПоставкиКонфигурации = CRM_ЛицензированиеСервер.ПолучитьОсновнойВариантПоставки();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Напоминания > 0 ИЛИ Выборка.Оповещения > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Выборка.Предмет) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
			ОсновнойВариантПоставки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Выборка.Пользователь, "ИспользуемыйВариантПоставки");
			Если Не ЗначениеЗаполнено(ОсновнойВариантПоставки) Тогда
				ОсновнойВариантПоставки = ВариантПоставкиКонфигурации;
			КонецЕсли;
			Если ОсновнойВариантПоставки <> Перечисления.CRM_ВариантыПоставки.КОРП Тогда
				ПараметрыОповещения =  Неопределено;
			Иначе
				ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Выборка.Пользователь,Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки, Выборка.Предмет);
			КонецЕсли;
		Иначе
			ПараметрыОповещения = ПолучитьПараметрыОповещения(Выборка.Пользователь,Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи, Выборка.Предмет);
		КонецЕсли;
		
		Если НЕ (ПараметрыОповещения = Неопределено) Тогда
			Попытка
				ДобавитьОповещение(ПараметрыОповещения);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Формирование записей оповещений о участии выбранных проектов/процессов, партнеров в документах.
	ФормированиеЗаписейОповещенийПоНовымПроектамПартнерам();
	
	// 3. Формирование записей оповещений о скором окончании срока задач.
	ФормированиеЗаписейОповещенийОСкоромОкончанииСрокаЗадач();
	
	ЗаписьЖурналаРегистрации("Формирование регламентных оповещений", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено формирование регламентных оповещений'"));
	
КонецПроцедуры

// Формирование записей оповещений о скором окончании срока задач.
//
Процедура ФормированиеЗаписейОповещенийОСкоромОкончанииСрокаЗадач() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь,
	|	CRM_Напоминания.Предмет,
	|	CRM_Напоминания.ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения,
	|	CRM_Напоминания.ДатаАктуальности,
	|	CRM_Напоминания.Содержание,
	|	CRM_Напоминания.Важность,
	|	CRM_Напоминания.Счетчик,
	|	CRM_Напоминания.СрокОповещения,
	|	CRM_Напоминания.Периодичность,
	|	CRM_Напоминания.ВидОповещения
	|ПОМЕСТИТЬ Напоминания
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Оповещения.Получатель,
	|	CRM_Оповещения.Предмет,
	|	CRM_Оповещения.ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения,
	|	CRM_Оповещения.Канал,
	|	CRM_Оповещения.ДатаАктуальности,
	|	CRM_Оповещения.Содержание,
	|	CRM_Оповещения.СрокОповещения,
	|	CRM_Оповещения.Периодичность
	|ПОМЕСТИТЬ Оповещения
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	СУММА(ВЫБОР
	|			КОГДА Напоминания.ВидОповещения ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Напоминания,
	|	СУММА(ВЫБОР
	|			КОГДА Оповещения.ВидОповещения ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Оповещения
	|ПОМЕСТИТЬ ВсеЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Напоминания КАК Напоминания
	|		ПО ЗадачаИсполнителя.Ссылка = Напоминания.Предмет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оповещения КАК Оповещения
	|		ПО ЗадачаИсполнителя.Ссылка = Оповещения.Предмет
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка)
	|	И ЗадачаИсполнителя.СрокИсполнения > &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачаИсполнителя.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗадачи.Задача.Ссылка КАК Ссылка,
	|	ВсеЗадачи.Задача.СрокИсполнения КАК СрокИсполнения,
	|	ВсеЗадачи.Задача.Исполнитель КАК Исполнитель,
	|	ВсеЗадачи.Задача.РольИсполнителя КАК РольИсполнителя,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииДней КАК НапомнитьОбОкончанииДней,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииЧасов КАК НапомнитьОбОкончанииЧасов,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииМинут КАК НапомнитьОбОкончанииМинут
	|ИЗ
	|	ВсеЗадачи КАК ВсеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|		ПО ВсеЗадачи.Задача.БизнесПроцесс = CRM_НастройкиЭтаповБизнесПроцессов.Объект
	|			И ВсеЗадачи.Задача.CRM_ТочкаМаршрута = CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута
	|ГДЕ
	|	ВсеЗадачи.Напоминания = 0
	|	И ВсеЗадачи.Оповещения = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато формирование регламентных оповещений'"));
			
	Пока Выборка.Следующий() Цикл
		Если (Выборка.НапомнитьОбОкончанииДней = 0) И (Выборка.НапомнитьОбОкончанииЧасов = 0) И (Выборка.НапомнитьОбОкончанииМинут = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтруктур = Новый Массив;
		
		СрокОповещения		= ?(ЗначениеЗаполнено(Выборка.НапомнитьОбОкончанииМинут), Выборка.НапомнитьОбОкончанииМинут,0)
								+ ?(ЗначениеЗаполнено(Выборка.НапомнитьОбОкончанииЧасов), Выборка.НапомнитьОбОкончанииЧасов*60, 0)
								+ ?(ЗначениеЗаполнено(Выборка.НапомнитьОбОкончанииДней), Выборка.НапомнитьОбОкончанииДней*24*60, 0);
								
		Если НЕ ЗначениеЗаполнено(СрокОповещения) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			
			ПараметрыОповещения	= CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Выборка.Исполнитель,Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач);
			Если ПараметрыОповещения = Неопределено Тогда Продолжить; КонецЕсли;
			
			Для Каждого СтрокаПараметров Из ПараметрыОповещения Цикл
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Предмет",			Выборка.Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач);
				СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
				СтруктураОповещения.Вставить("Периодичность",	Перечисления.CRM_ПериодичностьОповещений.Минута);
				СтруктураОповещения.Вставить("Получатель",		Выборка.Исполнитель);
				СтруктураОповещения.Вставить("Канал",			СтрокаПараметров.Канал);
				
				МассивСтруктур.Добавить(СтруктураОповещения);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.РольИсполнителя) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("РольИсполнителя",Выборка.РольИсполнителя);
			Запрос.Текст = "ВЫБРАТЬ
			|	ИсполнителиЗадач.Исполнитель
			|ИЗ
			|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|ГДЕ
			|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
			
			МассивИсполнителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
			
			Для Каждого ИсполнительРоли Из МассивИсполнителей Цикл
				ПараметрыОповещения	= CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Выборка.Исполнитель,Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач);
				Если ПараметрыОповещения = Неопределено Тогда Продолжить; КонецЕсли;
				
				Для Каждого СтрокаПараметров Из ПараметрыОповещения Цикл
					СтруктураОповещения = Новый Структура;
					СтруктураОповещения.Вставить("Предмет",			Выборка.Ссылка);
					СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач);
					СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
					СтруктураОповещения.Вставить("Периодичность",	Перечисления.CRM_ПериодичностьОповещений.Минута);
					СтруктураОповещения.Вставить("Получатель",		ИсполнительРоли);
					СтруктураОповещения.Вставить("Канал",			СтрокаПараметров.Канал);
					
					МассивСтруктур.Добавить(СтруктураОповещения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			ДобавитьОповещение(МассивСтруктур);
		Исключение
			ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
				УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Формирует оповещения по новым партнерам / проектам.
//
Процедура ФормированиеЗаписейОповещенийПоНовымПроектамПартнерам() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОповещенияПользовательскиеНастройки.Пользователь	КАК Пользователь,
	|	ОповещенияПользовательскиеНастройки.ВидОповещения	КАК ВидОповещения
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК ОповещенияПользовательскиеНастройки
	|ГДЕ
	|	(ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ДействияПоПроектам)
	|	ИЛИ ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ДействияПоПартнерам))
	|	И НЕ ОповещенияПользовательскиеНастройки.Пользователь.ПометкаУдаления
	|	И НЕ ОповещенияПользовательскиеНастройки.Пользователь.Недействителен
	|	И (ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	|		ИЛИ ОповещенияПользовательскиеНастройки.СМС
	|		ИЛИ ОповещенияПользовательскиеНастройки.Напоминание)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ОбъектыДляРегламентногоФормированияОповещений.Объект		КАК Предмет,
	|	ОбъектыДляРегламентногоФормированияОповещений.Объект.Автор	КАК Автор
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыДляРегламентногоФормированияОповещений КАК ОбъектыДляРегламентногоФормированияОповещений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|");
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПользователи = РезультатЗапроса[0].Выбрать();
	ВыборкаПредметы = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаПользователи.Следующий() Цикл
		ВыборкаПредметы.Сбросить();
		
		Пока ВыборкаПредметы.Следующий() Цикл
			Если ВыборкаПредметы.Автор = ВыборкаПользователи.Пользователь Тогда
				// Если документ создал сам пользователь, оповещать его об этом смысла нет - пропускаем его.
				Продолжить;
			КонецЕсли;
			
			ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ВыборкаПользователи.Пользователь, ВыборкаПользователи.ВидОповещения, ВыборкаПредметы.Предмет);
			
			Если НЕ ПараметрыОповещения = Неопределено Тогда
				Попытка
					CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения, Истина);
				Исключение
					ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
						УровеньЖурналаРегистрации.Ошибка, , ,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыДляРегламентногоФормированияОповещений.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

//
//
Функция СоздатьЗаполнитьСообщение(Выборка)
	
	ТекПровайдерSMS				= Константы.ПровайдерSMS.Получить();
	СписокНомеровОтправителя	= Новый СписокЗначений;
	Если ТекПровайдерSMS = Перечисления.ПровайдерыSMS.SMS4B Тогда
		НомераОтправителя = Константы.sms4bНомераОтправителя.Получить();
		МассивНомеров = ОтправкаSMSЧерезSMS4B.ПолучитьМассивНомеровИзСтроки(НомераОтправителя);
		Для Каждого Номер Из МассивНомеров Цикл
			Если НЕ ПустаяСтрока(Номер) Тогда
				СписокНомеровОтправителя.Добавить(Номер);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	СтруктураКонстант = Новый Структура;
	СтруктураКонстант.Вставить("НеОтправлятьSMS",			Константы.sms4bНеОтправлятьSMS.Получить());
	СтруктураКонстант.Вставить("НачалоПериодаЗапрета",		Константы.sms4bНачалоПериодаЗапрета.Получить());
	СтруктураКонстант.Вставить("КонецПериодаЗапрета",		Константы.sms4bКонецПериодаЗапрета.Получить());
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	УстановитьПривилегированныйРежим(Истина);
	ИмяОтправителя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ИмяОтправителя");
	УстановитьПривилегированныйРежим(Ложь);
	СтруктураКонстант.Вставить("ИмяОтправителя", 			?(ИмяОтправителя = Неопределено, "", ИмяОтправителя));
	СтруктураКонстант.Вставить("СрокЖизниSMS",				Константы.sms4bСрокЖизниSMS.Получить());
	Если ЗначениеЗаполнено(Выборка.Предмет) Тогда
		Попытка
			СтруктураКонстант.Вставить("ТекущийПользователь", Выборка.Предмет.Автор);
		Исключение
			СтруктураКонстант.Вставить("ТекущийПользователь", Неопределено);
		КонецПопытки;
	Иначе
		СтруктураКонстант.Вставить("ТекущийПользователь", Неопределено);
	КонецЕсли;
	
	
	НовоеСообщение = Документы.СообщениеSMS.СоздатьДокумент();
	
	НовоеСообщение.Дата 					= ТекущаяДатаСеанса();
	НовоеСообщение.ДатаКогдаОтправить		= ТекущаяДатаСеанса();
	НовоеСообщение.sms4bТипСообщения 		= ПредопределенноеЗначение("Перечисление.sms4ВходящееИсходящееSMS.Исходящее");
	НовоеСообщение.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовоеСообщение.Состояние				= Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
	Если ЗначениеЗаполнено(Выборка.Шаблон) Тогда
	Иначе
		НовоеСообщение.Тема					= Выборка.Тема;
	КонецЕсли;
	
	Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
	И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
		НовоеСообщение.ВзаимодействиеОснование	= Выборка.Предмет.БизнесПроцесс.Интерес;
	Иначе
		НовоеСообщение.ВзаимодействиеОснование	= Выборка.Предмет;
	КонецЕсли;
	
	Если НЕ СтруктураКонстант.ТекущийПользователь = Неопределено Тогда
		НовоеСообщение.Автор				= СтруктураКонстант.ТекущийПользователь;
		НовоеСообщение.Ответственный		= СтруктураКонстант.ТекущийПользователь;
	КонецЕсли;
	
	Если ТекПровайдерSMS = Перечисления.ПровайдерыSMS.SMS4B Тогда
		НовоеСообщение.sms4bНомерОтправителя	= СтруктураКонстант.ИмяОтправителя;
		
		Если НЕ ЗначениеЗаполнено(НовоеСообщение.sms4bНомерОтправителя) Тогда 
			Если СписокНомеровОтправителя.Количество() > 0 Тогда
				НовоеСообщение.sms4bНомерОтправителя = СписокНомеровОтправителя[0];
			КонецЕсли;
		КонецЕсли;
		
		НовоеСообщение.sms4bНеОтправлятьSMS	= СтруктураКонстант.НеОтправлятьSMS;
		
		Если НовоеСообщение.sms4bНеОтправлятьSMS Тогда
			НовоеСообщение.sms4bНачалоПериодаЗапрета	= СтруктураКонстант.НачалоПериодаЗапрета;
			НовоеСообщение.sms4bКонецПериодаЗапрета		= СтруктураКонстант.КонецПериодаЗапрета;
		КонецЕсли;
		
		Если СтруктураКонстант.СрокЖизниSMS 	= 0 Тогда
			НовоеСообщение.sms4bФлагАктуальность	= Ложь;
		Иначе
			НовоеСообщение.sms4bФлагАктуальность	= Истина;
			НовоеСообщение.ДатаАктуальностиОтправки	= НовоеСообщение.ДатаКогдаОтправить + (СтруктураКонстант.СрокЖизниSMS * 3600);
		КонецЕсли;
	КонецЕсли;
	НовоеСообщение.ТекстСообщения			= Выборка.Содержание;
	
	СписокТелефонов							= ПолучитьСписокНомеровТелефоновКонтрагента(Выборка.Получатель);
	НомерПолучателя							= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(СписокТелефонов[0].Значение);

	СтрокаПолучателя						= НовоеСообщение.Адресаты.Добавить();
	СтрокаПолучателя.Контакт				= Выборка.Получатель;
	СтрокаПолучателя.ПредставлениеКонтакта	= Выборка.Получатель.Наименование;
	СтрокаПолучателя.КакСвязаться			= СписокТелефонов[0].Представление;
	СтрокаПолучателя.НомерДляОтправки		= НомерПолучателя;
	//СтрокаПолучателя.ТекстСообщения			= Выборка.Содержание;
	Если ЗначениеЗаполнено(Выборка.Шаблон) Тогда
		НовоеСообщение.ТекстСообщения		= ПолучитьТекстСообщенияПоШаблону(Выборка.Шаблон, Выборка.Получатель, Выборка.Предмет);
	КонецЕсли;
	
	СтрокаПолучателя.ИдентификаторСообщения	= Новый УникальныйИдентификатор;
	
	Возврат НовоеСообщение;
	
КонецФункции

Функция ПолучитьТекстСообщенияПоШаблону(Шаблон, Получатель, Предмет = Неопределено)
	
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстСМССообщение);
	
	Если Шаблон.CRM_ШаблонОповещения И ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЗадачаИсполнителя,,,ТаблицаАвтотекста.Количество());
	КонецЕсли;
	
	РедактируемыйТекст = Шаблон.Содержание;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если Найти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			СтруктураАвтотекста = Новый Структура;
			СтруктураАвтотекста.Вставить("Тэг",			СтрокаАвтотекста.Тэг);
			СтруктураАвтотекста.Вставить("Действие",	СтрокаАвтотекста.Действие);
			Если Шаблон.CRM_ШаблонОповещения И ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэгаСМС(СтруктураАвтотекста, Новый Структура("Получатель,Задача",Получатель,Предмет));
			Иначе
				ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэгаСМС(СтруктураАвтотекста, Получатель);
			КонецЕсли;
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РедактируемыйТекст;
	
КонецФункции


//
//
Процедура ОтправкаСМСОповещений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации("Регламентное оповещение по SMS",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное оповещение по SMS'"));
	
	// Обработка непосредственно записей регистра оповещений с последующим созданием СМС.
	ИспользоватьСМС				= ЗначениеЗаполнено(Константы.ПровайдерSMS.Получить());
	ИспользоватьОповещенияСМС	= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	
	НачалоПериода = ПолучитьНачалоПериодаПоПериодичностиОповещений();
	
	Если ИспользоватьСМС И ИспользоватьОповещенияСМС Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОповещения",	ТекущаяДатаСеанса());
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_Оповещения.Получатель,
		               |	CRM_Оповещения.Предмет,
		               |	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
		               |	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
		               |	CRM_Оповещения.Канал КАК Канал,
		               |	CRM_Оповещения.ДатаАктуальности,
		               |	CRM_Оповещения.Содержание,
		               |	CRM_Оповещения.СрокОповещения,
		               |	CRM_Оповещения.Периодичность,
		               |	CRM_Оповещения.Документ,
		               |	CRM_Оповещения.Тема,
					   |	CRM_Оповещения.Шаблон,
					   |	CRM_Оповещения.Взаимодействие
		               |ИЗ
		               |	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		               |ГДЕ
		               |	CRM_Оповещения.ДатаОповещения <= &ДатаОповещения
		               |	И CRM_Оповещения.Канал = ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Канал,
		               |	ВидОповещения,
		               |	ДатаОповещения";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Получатель		= Выборка.Получатель;
			МенеджерЗаписи.Предмет			= Выборка.Предмет;
			МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
			МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
			МенеджерЗаписи.Канал			= Выборка.Канал;
			МенеджерЗаписи.Прочитать();
			
			// Если Дата актуальности меньше НачалоПериода, то удаляем запись регистра.
			Если НЕ (Выборка.ДатаАктуальности = Дата("00010101")) И (Выборка.ДатаАктуальности <= НачалоПериода) Тогда
				Если МенеджерЗаписи.Выбран() Тогда
					Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
						СтруктураДлительности = Новый Структура();
						СтруктураДлительности.Вставить("Дней"	,0);
						СтруктураДлительности.Вставить("Часов"	,0);
						СтруктураДлительности.Вставить("Минут"	,0);
						СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
						СтруктураДлительности.Вставить("ВидОповещения"		,МенеджерЗаписи.ВидОповещения);
						
						Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
							СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
							СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
							СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
							СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения*7;
						КонецЕсли;
						
						ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,12)),СтруктураДлительности,,Неопределено);
						
						МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
						МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60*60*24*7);
						МенеджерЗаписи.Записать();
					Иначе
						МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
			// Если Дата актуальности меньше текущей даты, то уже нет смысла отправлять.
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.Документ) И НЕ (Выборка.ДатаАктуальности = Дата("00010101")) И (Выборка.ДатаАктуальности <= ТекущаяДатаСеанса()) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если документа нет, то значит еще не отправляли смс.
			Если НЕ ЗначениеЗаполнено(Выборка.Документ) Тогда
				
				СписокТелефонов = ПолучитьСписокНомеровТелефоновКонтрагента(Выборка.Получатель);
				Если СписокТелефонов.Количество() = 0 Тогда Продолжить; КонецЕсли;
				
				НовоеСообщение = СоздатьЗаполнитьСообщение(Выборка);
				
				Попытка
					НовоеСообщение.Записать();
					
					НаборЗаписей = РегистрыСведений.sms4bСостоянияСообщений.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Сообщение.Значение = НовоеСообщение.Ссылка;
					НаборЗаписей.Отбор.Сообщение.Использование = Истина;
					Для Каждого Строка Из НовоеСообщение.Адресаты Цикл
						НовСтрока							= НаборЗаписей.Добавить();
						НовСтрока.Сообщение					= НовоеСообщение.Ссылка;
						НовСтрока.НомерСтрокиДокумента		= Строка.НомерСтроки;
						НовСтрока.ИдентификаторСообщения	= Строка.ИдентификаторСообщения;
						НовСтрока.СостояниеСообщения		= Перечисления.СостоянияСообщенияSMS.Исходящее;
					КонецЦикла; 
					НаборЗаписей.Записать();
					
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Документ = НовоеСообщение.Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
					
					Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
					И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
						Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
						Набор.Отбор.БизнесПроцесс.Установить(Выборка.Предмет.БизнесПроцесс);
						Набор.Отбор.Объект.Установить(НовоеСообщение.Ссылка);
						Набор.Прочитать();
						Набор.Очистить();
						Набор.Записать();
						
						ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
						ЗаписьРегистра.БизнесПроцесс	= Выборка.Предмет.БизнесПроцесс;
						ЗаписьРегистра.Задача			= Выборка.Предмет;
						ЗаписьРегистра.ТочкаМаршрута	= Выборка.Предмет.CRM_ТочкаМаршрута;
						ЗаписьРегистра.Объект			= НовоеСообщение.Ссылка;
						ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
						ЗаписьРегистра.ВидОбъекта		= ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ИсходящееЭлектронноеПисьмо;
						ЗаписьРегистра.Записать();
						
						Если ЗначениеЗаполнено(Выборка.Взаимодействие) Тогда
							CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Выборка.Взаимодействие, НовоеСообщение.Ссылка);
						КонецЕсли;
					КонецЕсли;
					
				Исключение
					ЗаписьЖурналаРегистрации("Регламентное оповещение по SMS",
						УровеньЖурналаРегистрации.Ошибка, , ,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
			Иначе
			// Надо проверить состояние документа, если он отправлен, то просто удаляем запись регистра
			// об оповещении, если же состояние показывает ошибку, то удаляем запись регистра,
			// при состоянии, когда находится еще у провайдера, ничего не делаем.
				НаборЗаписей = РегистрыСведений.sms4bСостоянияСообщений.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сообщение.Установить(Выборка.Документ);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					Если НаборЗаписей[0].СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Доставлено
					ИЛИ НаборЗаписей[0].СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеДоставлено
					ИЛИ НаборЗаписей[0].СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером
					ИЛИ НаборЗаписей[0].СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру
					ИЛИ НаборЗаписей[0].СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
						
						Если МенеджерЗаписи.Выбран() Тогда
							Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
								СтруктураДлительности = Новый Структура();
								СтруктураДлительности.Вставить("Дней"	,0);
								СтруктураДлительности.Вставить("Часов"	,0);
								СтруктураДлительности.Вставить("Минут"	,0);
								СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
								СтруктураДлительности.Вставить("ВидОповещения"		,МенеджерЗаписи.ВидОповещения);
								
								Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
									СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
								ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
									СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
								ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
									СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
								ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
									СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения*7;
								КонецЕсли;
								
								ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,12)),СтруктураДлительности,,Неопределено);
								
								МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
								МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60*60*24*7);
								МенеджерЗаписи.Записать();
							Иначе
								МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
								МенеджерЗаписи.Записать();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации("Регламентное оповещение по SMS", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное оповещение по SMS'"));
КонецПроцедуры

//
//
Функция СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(УчетнаяЗапись,ПараметрыПисьма)
	
	НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		
	НовоеЭлектронноеПисьмо.Дата						= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовоеЭлектронноеПисьмо.УчетнаяЗапись			= ПараметрыПисьма.УчетнаяЗапись;
	НовоеЭлектронноеПисьмо.ОтправительПредставление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(НовоеЭлектронноеПисьмо.УчетнаяЗапись.ИмяПользователя,НовоеЭлектронноеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты,"");
	Попытка
	НовоеЭлектронноеПисьмо.Ответственный			= ПараметрыПисьма.Предмет.Автор;
	НовоеЭлектронноеПисьмо.Автор					= ПараметрыПисьма.Предмет.Автор;
	Исключение
	КонецПопытки;
	НовоеЭлектронноеПисьмо.Важность					= ПараметрыПисьма.Важность;
	НовоеЭлектронноеПисьмо.Тема						= ПараметрыПисьма.Тема;
	НовоеЭлектронноеПисьмо.СтатусПисьма				= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	НовоеЭлектронноеПисьмо.Кодировка				= ПараметрыПисьма.Кодировка;
	НовоеЭлектронноеПисьмо.ТипТекста				= ПараметрыПисьма.ТипТекста;
	НовоеЭлектронноеПисьмо.Текст					= ПараметрыПисьма.Тело;
	НовоеЭлектронноеПисьмо.ТекстHTML				= ПараметрыПисьма.Тело;
	
	СписокПолучателейПисьма = "";
	
	Для Каждого СтруктураПолучателя Из ПараметрыПисьма.Кому Цикл
		ПредставлениеПолучателя					= Строка(СтруктураПолучателя.Контакт) + "< "+СтруктураПолучателя.Адрес+">";
		СписокПолучателейПисьма					= СписокПолучателейПисьма + ?(СписокПолучателейПисьма="","",",") + ПредставлениеПолучателя;
		
		НоваяСтрокаПолучателей					= НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
		НоваяСтрокаПолучателей.Адрес			= СтруктураПолучателя.Адрес;
		НоваяСтрокаПолучателей.Представление	= ПредставлениеПолучателя;
		НоваяСтрокаПолучателей.Контакт			= СтруктураПолучателя.Контакт;
	КонецЦикла;
	
	НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = СписокПолучателейПисьма;
	
	Возврат НовоеЭлектронноеПисьмо;
	
КонецФункции

Процедура ЗаполнитьАвтотекст(ПолучателиПисьма, ТекстСТегами, Предмет = Неопределено)
	
	Если ПолучателиПисьма.Количество() > 0 Тогда
		
		// заполним автотекст
		СтруктураЗаполненияАвтотекста = Новый Структура;
		СтруктураЗаполненияАвтотекста.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		СтруктураЗаполненияАвтотекста.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		
		Клиент = ПолучателиПисьма[0].Контакт;
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				СтруктураЗаполненияАвтотекста.КонтактноеЛицо = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Пользователи") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("Строка") Тогда
				
				Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
				Иначе
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент));
				КонецЕсли;
			Иначе
				Попытка
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе	
			Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
			Иначе
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Адрес));
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаАвтотекста = Новый ТаблицаЗначений;
		
		ТаблицаАвтотекста.Колонки.Добавить("Тэг");
		ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
		ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
		ТаблицаАвтотекста.Колонки.Добавить("Действие");
		
		CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо);
		Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЗадачаИсполнителя,,,ТаблицаАвтотекста.Количество());
		КонецЕсли;
		
		Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
			Если Найти(ТекстСТегами, СтрокаАвтотекста.Тэг) > 0 Тогда
				Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
					СтруктураЗаполненияАвтотекста.Вставить("Задача",Предмет);
					ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтруктураЗаполненияАвтотекста);
				Иначе
					ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтруктураЗаполненияАвтотекста);
				КонецЕсли;
				ТекстСТегами	= СтрЗаменить(ТекстСТегами, СтрокаАвтотекста.Тэг, ЗначениеТэга);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура ОтправкаОповещенийЭлектроннойПочтой() Экспорт
	
	// Обработка непосредственно записей регистра оповещений с последующим созданием
	// писем.
	НачалоПериода = ПолучитьНачалоПериодаПоПериодичностиОповещений();
	
	УчетнаяЗаписьДляОтправки = Константы.CRM_УчетнаяЗаписьОповещений.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОповещения"				,ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(CRM_Оповещения.Получатель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Получатель,
	               |	CRM_Оповещения.Предмет,
	               |	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
	               |	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
	               |	CRM_Оповещения.Канал КАК Канал,
	               |	CRM_Оповещения.ДатаАктуальности,
	               |	CRM_Оповещения.Содержание,
	               |	CRM_Оповещения.СрокОповещения,
	               |	CRM_Оповещения.Периодичность,
	               |	CRM_Оповещения.Тема,
	               |	CRM_Оповещения.Документ,
				   |	CRM_Оповещения.Шаблон,
				   |	CRM_Оповещения.Взаимодействие
	               |ИЗ
	               |	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	               |ГДЕ
	               |	CRM_Оповещения.ДатаОповещения <= &ДатаОповещения
	               |	И CRM_Оповещения.Канал = ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Канал,
	               |	ВидОповещения,
	               |	ДатаОповещения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное оповещение по E-Mail'"));
	
	Пока Выборка.Следующий() Цикл
		
		// Если Дата актуальности меньше НачалоПериода, то удаляем запись регистра.
		Если НЕ (Выборка.ДатаАктуальности = Дата("00010101")) И (Выборка.ДатаАктуальности <= НачалоПериода) Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Получатель		= Выборка.Получатель;
			МенеджерЗаписи.Предмет			= Выборка.Предмет;
			МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
			МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
			МенеджерЗаписи.Канал			= Выборка.Канал;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
					СтруктураДлительности = Новый Структура();
					СтруктураДлительности.Вставить("Дней"	,0);
					СтруктураДлительности.Вставить("Часов"	,0);
					СтруктураДлительности.Вставить("Минут"	,0);
					СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
					СтруктураДлительности.Вставить("ВидОповещения"		,МенеджерЗаписи.ВидОповещения);
					
					Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
						СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
						СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
						СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
						СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения*7;
					КонецЕсли;
					
					ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,12)),СтруктураДлительности,,Неопределено);
					
					МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
					МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60*60*24*7);
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
		// Если Дата актуальности меньше текущей даты, то уже нет смысла отправлять.
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.Документ) И НЕ (Выборка.ДатаАктуальности = Дата("00010101")) И (Выборка.ДатаАктуальности <= ТекущаяДатаСеанса()) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.Документ) Тогда
			// получим емайл получателя
			Если НЕ ЗначениеЗаполнено(Выборка.Получатель) Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Выборка.Получатель, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
				
				Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Выборка.Получатель,Неопределено,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Неопределено);
				
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Выборка.Получатель.Владелец,Выборка.Получатель,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Неопределено);
				
			КонецЕсли;
			
			// Если емайл получателя нет, то продолжим.
			Если Таб.Количество() = 0 Тогда Продолжить; КонецЕсли;
			
			Адресаты = Новый Массив;
			
			// Нам нужны адреса, у которых стоит признак, что их можно использовать для оповещений
			// выбираем все адреса, отвечающие этому требованию.
			Для Каждого СтрокаТаб Из Таб Цикл
				Если СтрокаТаб.Вид.CRM_ИспользоватьДляОповещений Тогда
					Адресаты.Добавить(Новый Структура("Адрес,Представление,Контакт", СтрокаТаб.АдресЭП, СтрокаТаб.Представление, СтрокаТаб.Ссылка));
				КонецЕсли;
			КонецЦикла;
			
			// Если таких адресов не нашлось, то не отправляем.
			Если Адресаты.Количество() = 0 Тогда Продолжить; КонецЕсли;
			
			// Заполняем письмо по выбранному шаблону
			Если ЗначениеЗаполнено(Выборка.Шаблон) Тогда
				
				ТребуетсяДобавитьЗаписьОбъектаБизнесПроцесса = Ложь;
				ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
				
				ТекстHTML = "";
				Текст = "";
				
				СтруктураВложений		= Новый Структура;
				
				ТаблицаСоответствийИменВложенийИдентификаторам = Новый ТаблицаЗначений;
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИмяФайла");
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИдентификаторФайлаДляHTML");
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("Картинка");
				
				Если Выборка.Шаблон.ИзHTMLФайла Тогда
					
					ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Выборка.Шаблон, Выборка.Шаблон.Текст, СтруктураВложений);
					Если Выборка.Шаблон.ШаблонОповещения И ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
						ЗаполнитьАвтотекст(Адресаты, ТекстHTML, Выборка.Предмет);
					Иначе
						ЗаполнитьАвтотекст(Адресаты, ТекстHTML);
					КонецЕсли;
					
					Для каждого Вложение Из СтруктураВложений Цикл
						
						НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
						НоваяСтрока.ИмяФайла = Вложение.Ключ;
						НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
						НоваяСтрока.Картинка = Вложение.Значение;
						
					КонецЦикла;
					
					ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
				Иначе
					ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Выборка.Шаблон, Выборка.Шаблон.Текст, СтруктураВложений);
					Если Выборка.Шаблон.ШаблонОповещения И ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
						ЗаполнитьАвтотекст(Адресаты, ТекстHTML, Выборка.Предмет);
					Иначе
						ЗаполнитьАвтотекст(Адресаты, ТекстHTML);
					КонецЕсли;
					
					Для каждого Вложение Из СтруктураВложений Цикл
						
						НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
						НоваяСтрока.ИмяФайла = Вложение.Ключ;
						НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
						НоваяСтрока.Картинка = Вложение.Значение;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
					
					ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
					Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
					ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам);
					ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
					
				КонецЕсли;
				
				Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
					ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
					Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстHTML);
				КонецЕсли;
				
				// Заполним параметры письма и отправим его.
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("УчетнаяЗапись",	УчетнаяЗаписьДляОтправки);
				ПараметрыПисьма.Вставить("Кому",			Адресаты);
				ПараметрыПисьма.Вставить("Тема",			Выборка.Шаблон.Тема);
				ПараметрыПисьма.Вставить("Тело",			ТекстHTML);
				ПараметрыПисьма.Вставить("Кодировка",		"utf-8");
				ПараметрыПисьма.Вставить("ТипТекста",		Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
				ПараметрыПисьма.Вставить("Важность",	ВажностьИнтернетПочтовогоСообщения.Обычная);
				Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
					ТребуетсяДобавитьЗаписьОбъектаБизнесПроцесса = Истина;
					ПараметрыПисьма.Вставить("Предмет",			Выборка.Предмет.БизнесПроцесс.Интерес);
				Иначе
					ПараметрыПисьма.Вставить("Предмет",			Выборка.Предмет);
				КонецЕсли;
				НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(УчетнаяЗаписьДляОтправки, ПараметрыПисьма);
				
				НовоеЭлектронноеПисьмо.CRM_ИзHTMLФайла = Выборка.Шаблон.ИзHTMLФайла;
				
				Вложения = Новый ТаблицаЗначений;
				Вложения.Колонки.Добавить("Ссылка");
				Вложения.Колонки.Добавить("ИмяФайла");
				Вложения.Колонки.Добавить("ИндексКартинки");
				Вложения.Колонки.Добавить("Размер");
				Вложения.Колонки.Добавить("Удалять");
				Вложения.Колонки.Добавить("Расположение");
				Вложения.Колонки.Добавить("ИмяФайлаНаКомпьютере");
				Вложения.Колонки.Добавить("РазмерСтрокой");
				Вложения.Колонки.Добавить("РазмерПредставление");
				Вложения.Колонки.Добавить("ПодписанЭП");
				Вложения.Колонки.Добавить("ИДФайлаЭлектронногоПисьма");
				
				табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Выборка.Шаблон, Истина);
				
				Для Каждого Стр Из табВложения Цикл
					Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
						новСтр = Вложения.Добавить();
						новСтр.Ссылка								= Стр.Ссылка;
						новСтр.ИмяФайла								= Стр.ИмяФайла;
						новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
						новСтр.Размер								= Стр.Размер;
						РазмерВложения								= Цел(новСтр.Размер/1024);
						новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
						новСтр.РазмерПредставление					= Стр.РазмерПредставление;
						новСтр.Расположение							= 1;
						новСтр.ИДФайлаЭлектронногоПисьма	= "#";
					КонецЕсли;
				КонецЦикла;
				
				Если Вложения.Количество() > 0 Тогда
					НовоеЭлектронноеПисьмо.ЕстьВложения = Истина;
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И НЕ Выборка.Предмет.CRM_Личная Тогда
					МассивФайлов = Новый Массив;
					РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Выборка.Предмет.БизнесПроцесс, МассивФайлов);
					
					Если МассивФайлов.Количество() > 0 Тогда
						НовоеЭлектронноеПисьмо.ЕстьВложения = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
					
					Строка250 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250));
					Строка200 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
					Строка11 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
					ОписаниеДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
					
					ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
					
					ТаблицаИнтересов = новый ТаблицаЗначений;
					ТаблицаИнтересов.Колонки.Добавить("Дата"				, ОписаниеДата);
					ТаблицаИнтересов.Колонки.Добавить("Номер"				, Строка11);
					ТаблицаИнтересов.Колонки.Добавить("Тема"				, Строка200);
					ТаблицаИнтересов.Колонки.Добавить("Партнер"				, Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
					ТаблицаИнтересов.Колонки.Добавить("Ответственный"		, Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
					ТаблицаИнтересов.Колонки.Добавить("Подразделение"		, Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
					ТаблицаИнтересов.Колонки.Добавить("Организация"			, Новый ОписаниеТипов("СправочникСсылка.Организации"));
					ТаблицаИнтересов.Колонки.Добавить("Ссылка"				, Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес"));
					ТаблицаИнтересов.Колонки.Добавить("СостояниеИнтереса"	, Новый ОписаниеТипов("СправочникСсылка.CRM_СостоянияИнтересов"));
					ТаблицаИнтересов.Колонки.Добавить("ВведенНаОсновании"	, ОписаниеТипаБулево);
					ТаблицаИнтересов.Колонки.Добавить("ОсновнойИнтерес"		, ОписаниеТипаБулево);
					
					НоваяСтрока = ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Предмет.БизнесПроцесс.Интерес);
					НоваяСтрока.ВведенНаОсновании = Истина;
					
					НовоеЭлектронноеПисьмо.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаИнтересов);
				КонецЕсли;
				
				Попытка
					НовоеЭлектронноеПисьмо.Записать();
					
					Если НовоеЭлектронноеПисьмо.ЕстьВложения Тогда
						Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
							Если НЕ СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма = "" И НЕ СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма = "#" Тогда
								Продолжить;
							КонецЕсли;
							ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
							
							CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
							НовоеЭлектронноеПисьмо.Ссылка, СтрокаТаблицыВложений.Ссылка, новый УникальныйИдентификатор());
						КонецЦикла;
					КонецЕсли;
					
					Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
						
						ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
						
						ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
						АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
						ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
						НовоеЭлектронноеПисьмо.Ссылка,
						АдресКартинкиВоВременномХранилище,
						ИмяФайлаВложения,
						ДвоичныеДанныеКартинки.Размер());
						
						Если ПрисоединенныйФайл <> Неопределено Тогда
							ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
							ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
							ПрисоединенныйФайлОбъект.Записать();
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого СсылкаНаФайл Из МассивФайлов Цикл
						CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
						НовоеЭлектронноеПисьмо.Ссылка, СсылкаНаФайл, Неопределено);
					КонецЦикла;
					
					Взаимодействия.УстановитьПредмет(НовоеЭлектронноеПисьмо.Ссылка, Выборка.Предмет);
					ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка, 
							CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.УчетнаяЗапись,"Исходящие"), Ложь);
					
					// Добавим этот документ в запись регистра.
					МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Получатель		= Выборка.Получатель;
					МенеджерЗаписи.Предмет			= Выборка.Предмет;
					МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
					МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
					МенеджерЗаписи.Канал			= Выборка.Канал;
					МенеджерЗаписи.Прочитать();
					
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Документ = НовоеЭлектронноеПисьмо.Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
					
					Если ТребуетсяДобавитьЗаписьОбъектаБизнесПроцесса Тогда
						Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
						Набор.Отбор.БизнесПроцесс.Установить(Выборка.Предмет.БизнесПроцесс);
						Набор.Отбор.Объект.Установить(НовоеЭлектронноеПисьмо.Ссылка);
						Набор.Прочитать();
						Набор.Очистить();
						Набор.Записать();
						
						ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
						ЗаписьРегистра.БизнесПроцесс	= Выборка.Предмет.БизнесПроцесс;
						ЗаписьРегистра.Задача			= Выборка.Предмет;
						ЗаписьРегистра.ТочкаМаршрута	= Выборка.Предмет.CRM_ТочкаМаршрута;
						ЗаписьРегистра.Объект			= НовоеЭлектронноеПисьмо.Ссылка;
						ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
						ЗаписьРегистра.ВидОбъекта		= ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ИсходящееЭлектронноеПисьмо;
						ЗаписьРегистра.Записать();
						
						Если ЗначениеЗаполнено(Выборка.Взаимодействие) Тогда
							CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Выборка.Взаимодействие, НовоеЭлектронноеПисьмо.Ссылка);
						КонецЕсли;
					КонецЕсли;
					
				Исключение
					ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail",
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			Иначе
				// Сформируем тему и текст письма.
				Если Выборка.Тема = "" Тогда
					СтруктураТекста = СформироватьТемуПисьма(Выборка.Предмет,Выборка.ВидОповещения);
				КонецЕсли;
				
				ФДок = Новый ФорматированныйДокумент;
				ФДок.Добавить(Выборка.Содержание);
				Если Найти(Выборка.Содержание,"<html>") > 0 Тогда
					ТекстHTML = Выборка.Содержание;
				Иначе
					ТекстHTML = "";
					Вложение = "";
					ФДок.ПолучитьHTML(ТекстHTML,Вложение);
				КонецЕсли;
				
				// Заполним параметры письма и отправим его.
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("УчетнаяЗапись",	УчетнаяЗаписьДляОтправки);
				ПараметрыПисьма.Вставить("Кому",			Адресаты);
				ПараметрыПисьма.Вставить("Тема",			?(НЕ Выборка.Тема = "",Выборка.Тема,СтруктураТекста.Тема));
				ПараметрыПисьма.Вставить("Тело",			ТекстHTML);
				ПараметрыПисьма.Вставить("Кодировка",		"utf-8");
				ПараметрыПисьма.Вставить("ТипТекста",		Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
				ПараметрыПисьма.Вставить("Предмет",			Выборка.Предмет);
				Попытка
					ПараметрыПисьма.Вставить("Важность",	УправлениеЭлектроннойПочтой.ПолучитьВажность(Выборка.Предмет.Важность));
				Исключение
					ПараметрыПисьма.Вставить("Важность",	ВажностьИнтернетПочтовогоСообщения.Обычная);
				КонецПопытки;
				
				НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(УчетнаяЗаписьДляОтправки, ПараметрыПисьма);
				
				Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И НЕ Выборка.Предмет.CRM_Личная Тогда
					МассивФайлов = Новый Массив;
					РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Выборка.Предмет.БизнесПроцесс, МассивФайлов);
					
					Если МассивФайлов.Количество() > 0 Тогда
						НовоеЭлектронноеПисьмо.ЕстьВложения = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					НовоеЭлектронноеПисьмо.Записать();
					
					Если НовоеЭлектронноеПисьмо.ЕстьВложения Тогда
						Для Каждого СсылкаНаФайл Из МассивФайлов Цикл
							CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
								НовоеЭлектронноеПисьмо.Ссылка, СсылкаНаФайл, Неопределено);
						КонецЦикла;
					КонецЕсли;
					
					Взаимодействия.УстановитьПредмет(НовоеЭлектронноеПисьмо.Ссылка, Выборка.Предмет);
					ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка, 
							CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.УчетнаяЗапись,"Исходящие"), Ложь);
					
					// Добавим этот документ в запись регистра.
					МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Получатель		= Выборка.Получатель;
					МенеджерЗаписи.Предмет			= Выборка.Предмет;
					МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
					МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
					МенеджерЗаписи.Канал			= Выборка.Канал;
					МенеджерЗаписи.Прочитать();
					
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Документ = НовоеЭлектронноеПисьмо.Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
				Исключение
					ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail",
						УровеньЖурналаРегистрации.Ошибка, , ,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_Оповещения.Документ.УчетнаяЗапись КАК УчетнаяЗапись,
	|	CRM_Оповещения.Документ.Автор КАК Автор,
	|	CRM_Оповещения.Документ.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(CRM_НеотправленныеПисьма.Итерация, 0) КАК Итерация,
	|	CRM_Оповещения.Получатель,
	|	CRM_Оповещения.Предмет,
	|	CRM_Оповещения.ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения,
	|	CRM_Оповещения.Канал
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НеотправленныеПисьма КАК CRM_НеотправленныеПисьма
	|		ПО CRM_Оповещения.Документ = CRM_НеотправленныеПисьма.Рассылка
	|ГДЕ
	|	CRM_Оповещения.Документ ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|	И НЕ CRM_Оповещения.Документ = ЗНАЧЕНИЕ(Документ.ЭлектронноеПисьмоИсходящее.ПустаяСсылка)
	|	И НЕ CRM_Оповещения.Документ.ПометкаУдаления
	|	И CRM_Оповещения.ДатаОповещения <= &ДатаОповещения
	|	И CRM_Оповещения.Канал = ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	|	И CRM_Оповещения.Документ.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|ИТОГИ ПО
	|	УчетнаяЗапись,
	|	Автор";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивНеотправленныхПисемПоУчетнымЗаписям = Новый Массив;
	СпособОтправки = Константы.CRM_СпособОтправкиОповещенийПоЭлектроннойПочте.Получить();
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.SMTP Тогда
			Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
			
			Попытка
				Соединение = Новый ИнтернетПочта;
				Соединение.Подключиться(Профиль);
			Исключение
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ВыборкаУчетныеЗаписи.УчетнаяЗапись, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
				                         УровеньЖурналаРегистрации.Ошибка, , ,
				                         ТекстСообщенияОбОшибке);
				
				МассивНеотправленныхПисемПоАвторам = Новый Массив;
				// Если не можем подключиться к учетной записи, то для всех писем по этой учетной записи
				// создаем запись в РС CRM_НеОтправленныеПисьма.
				ВыборкаПоАвторам = ВыборкаУчетныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоАвторам.Следующий() Цикл
					
					МассивНеотправленныхПисем = Новый Массив;
					ВыборкаПисьма = ВыборкаПоАвторам.Выбрать();
					Пока ВыборкаПисьма.Следующий() Цикл
						Если ВыборкаПисьма.Итерация > 1 Тогда
							МассивНеотправленныхПисем.Добавить(ВыборкаПисьма.Ссылка);
						Иначе
							CRM_УправлениеЭлектроннойПочтой.ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ТекстСообщенияОбОшибке);
						КонецЕсли;
					КонецЦикла;
					
					Если МассивНеотправленныхПисем.Количество() > 0 Тогда
						МассивНеотправленныхПисемПоАвторам.Добавить(Новый Структура("Автор,Письма",ВыборкаПоАвторам.Автор,МассивНеотправленныхПисем));
					КонецЕсли;
				КонецЦикла;
				
				Если МассивНеотправленныхПисемПоАвторам.Количество() > 0 Тогда
					МассивНеотправленныхПисемПоУчетнымЗаписям.Добавить(Новый Структура("УчетнаяЗапись,Письма",ВыборкаУчетныеЗаписи.УчетнаяЗапись,МассивНеотправленныхПисемПоАвторам));
				КонецЕсли;
				
				Продолжить;
			КонецПопытки;
		ИначеЕсли СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
			ДанныеДоступаКUniSender = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender();
			api_key = ДанныеДоступаКUniSender.КлючДоступа;
			СписокРассылки = ДанныеДоступаКUniSender.СписокДляОповещений;
			Отправитель = ВыборкаУчетныеЗаписи.УчетнаяЗапись.ИмяПользователя;
			EmailОтправителя = ВыборкаУчетныеЗаписи.УчетнаяЗапись.АдресЭлектроннойПочты;
		КонецЕсли;
		
		МассивНеотправленныхПисемПоАвторам = Новый Массив;
		ВыборкаПоАвторам = ВыборкаУчетныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоАвторам.Следующий() Цикл
			
			МассивНеотправленныхПисем = Новый Массив;
			ВыборкаПисьма = ВыборкаПоАвторам.Выбрать();
			Пока ВыборкаПисьма.Следующий() Цикл
				// Попытаемся отправить письмо.
				ПисьмоОбъект		= ВыборкаПисьма.Ссылка.ПолучитьОбъект();
				Попытка
					ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
					Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.SMTP Тогда
						ИдентификаторПисьма	= CRM_Взаимодействия.CRM_ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение, ПараметрыПисьма);
					ИначеЕсли СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
						ТекстОшибки = "";
						ИдентификаторПисьма = CRM_ИнтеграцияСUniSenderКлиентСервер.ОтправитьПисьмо(ПараметрыПисьма, api_key, СписокРассылки, Отправитель, EmailОтправителя, , ТекстОшибки);
						Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
							Если ТипЗнч(ИдентификаторПисьма) = Тип("ПеречислениеСсылка.CRM_СтатусыПисемEmailРассылки") Тогда
								ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
								ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
								ЗаписьСтатуса.Статус = ИдентификаторПисьма;
								ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
								ЗаписьСтатуса.Записать();
								ВызватьИсключение ТекстОшибки;
							Иначе
								ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
								ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
								ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется;
								ЗаписьСтатуса.Записать();
							КонецЕсли;
						Иначе
							ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
							ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
							ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.ОшибкаОтправки;
							ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
							ЗаписьСтатуса.Записать();
							ВызватьИсключение ТекстОшибки;
						КонецЕсли;
					КонецЕсли;
				Исключение
					
					Если ВыборкаПисьма.Итерация > 1 Тогда
						МассивНеотправленныхПисем.Добавить(ВыборкаПисьма.Ссылка);
					Иначе
						CRM_УправлениеЭлектроннойПочтой.ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail",
						УровеньЖурналаРегистрации.Ошибка, , ,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					Продолжить;
				КонецПопытки;
					
				// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
				// если есть, то удалим.
				CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(ПисьмоОбъект.Ссылка);
				
				ПисьмоОбъект.ИдентификаторСообщения	= ИдентификаторПисьма;
				Если ПараметрыПисьма.Свойство("ПротоколПочты") И ПараметрыПисьма.ПротоколПочты = "IMAP" Тогда
					ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщения;
				КонецЕсли;
				ПисьмоОбъект.СтатусПисьма			= ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
				ПисьмоОбъект.ДатаОтправления		= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись,Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные));
				
				// Если удачно все отправили, то удаляем запись регистра оповещений.
				МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Получатель		= ВыборкаПисьма.Получатель;
				МенеджерЗаписи.Предмет			= ВыборкаПисьма.Предмет;
				МенеджерЗаписи.ДатаОповещения	= ВыборкаПисьма.ДатаОповещения;
				МенеджерЗаписи.ВидОповещения	= ВыборкаПисьма.ВидОповещения;
				МенеджерЗаписи.Канал			= ВыборкаПисьма.Канал;
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					// Для напоминаний о ДР просто переносим дату оповещения на один год.
					Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
						
						СтруктураДлительности = Новый Структура();
						СтруктураДлительности.Вставить("Дней"	,0);
						СтруктураДлительности.Вставить("Часов"	,0);
						СтруктураДлительности.Вставить("Минут"	,0);
						СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
						СтруктураДлительности.Вставить("ВидОповещения"		,МенеджерЗаписи.ВидОповещения);
						
						Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
							СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
							СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
							СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
							СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения*7;
						КонецЕсли;
						
						ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,12)),СтруктураДлительности,,Неопределено);
						
						МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
						МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60*60*24*7);
						МенеджерЗаписи.Записать();
					// Для записи устанавливаем ДатуАктуальности как ТекущуюДату и при следующих выполнениях
					// рег. задания она будет удалена или пропущена.
					Иначе
						МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
						МенеджерЗаписи.Записать();
						//МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если МассивНеотправленныхПисем.Количество() > 0 Тогда
				МассивНеотправленныхПисемПоАвторам.Добавить(Новый Структура("Автор,Письма",ВыборкаПоАвторам.Автор,МассивНеотправленныхПисем));
			КонецЕсли;
		КонецЦикла;
		
		Если МассивНеотправленныхПисемПоАвторам.Количество() > 0 Тогда
			МассивНеотправленныхПисемПоУчетнымЗаписям.Добавить(Новый Структура("УчетнаяЗапись,Письма",ВыборкаУчетныеЗаписи.УчетнаяЗапись,МассивНеотправленныхПисемПоАвторам));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНеотправленныхПисемПоУчетнымЗаписям.Количество() > 0 Тогда
		CRM_НапоминанияСервер.ДобавитьНапоминанияОНеотправленныхПисьмах(МассивНеотправленныхПисемПоУчетнымЗаписям);
		CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписиОНеотправленныхПисьмахПеренестиПисьмоВЧерновики(МассивНеотправленныхПисемПоУчетнымЗаписям);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное оповещение по E-Mail'"));
			
	
КонецПроцедуры

// ************************************************************

// Функция возвращает настройки оповещения пользователя для переданного
// вида оповещения.
//
Функция ПолучитьПараметрыОповещения(Пользователь, ВидОповещения, Предмет = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"	,Пользователь);
	Запрос.УстановитьПараметр("ВидОповещения"	,ВидОповещения);
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.Задание") Тогда
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", Предмет.ОсновнойОбъектАдресации);
	Иначе 
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", Предмет);
	КонецЕсли;
	

	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Запрос.УстановитьПараметр("ТекущийПользователь"	,Пользователи.ТекущийПользователь());
		// + Тищенко В.В.
		Запрос.УстановитьПараметр("ТекущаяДата"			,КонецДня(ТекущаяДата()));
		// - Тищенко В.В.
		// + Тищенко В.В.
		// Харченко Д. Запрос
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
		//               |	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
		//               |	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
		//               |	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Сумма КАК Сумма,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Хранилище КАК Хранилище,
		//               |	НЕОПРЕДЕЛЕНО КАК Замещение
		//               |ПОМЕСТИТЬ Врем
		//               |ИЗ
		//               |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		//               |		ПО ИсполнителиЗадач.Исполнитель = CRM_ОповещенияПользовательскиеНастройки.Пользователь
		//               |ГДЕ
		//               |	ИсполнителиЗадач.РольИсполнителя = &Пользователь
		//               |	И НЕ ИсполнителиЗадач.Исполнитель = &ТекущийПользователь
		//               |	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения
		//               |
		//               |ОБЪЕДИНИТЬ ВСЕ
		//               |
		//               |ВЫБРАТЬ
		//               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Пользователь,
		//               |	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		//               |	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта,
		//               |	CRM_ОповещенияПользовательскиеНастройки.СМС,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Сумма,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Хранилище,
		//               |	вогДелегированиеПравДоступа.Пользователь
		//               |ИЗ
		//               |	Справочник.Пользователи КАК Пользователи
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		//               |		ПО Пользователи.Ссылка = CRM_ОповещенияПользовательскиеНастройки.Пользователь
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.вогДелегированиеПравДоступа КАК вогДелегированиеПравДоступа
		//               |		ПО (вогДелегированиеПравДоступа.ПользовательИсточник = Пользователи.Ссылка)
		//               //|			И (вогДелегированиеПравДоступа.Пользователь = &ТекущийПользователь)
		//               |			И (вогДелегированиеПравДоступа.Активно)
		//               |ГДЕ
		//               |	ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.вогЗадачиДолжностнойПозиции) = &Пользователь
		//               |	И НЕ Пользователи.Ссылка = &ТекущийПользователь
		//               |	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения
		//               |	И Пользователи.CRM_ДолжностнаяПозиция В
		//               |			(ВЫБРАТЬ
		//               |				CRM_ДолжностныеПозиции.Ссылка КАК Ссылка
		//               |			ИЗ
		//               |				Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		//               |			ГДЕ
		//               |				CRM_ДолжностныеПозиции.Ссылка = &ОсновнойОбъектАдресации
		//               |				И НЕ CRM_ДолжностныеПозиции.ПометкаУдаления
		//               |		
		//               |			ОБЪЕДИНИТЬ ВСЕ
		//               |		
		//               |			ВЫБРАТЬ
		//               |				CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка
		//               |			ИЗ
		//               |				Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
		//               |			ГДЕ
		//               |				CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция = &ОсновнойОбъектАдресации
		//               |				И НЕ CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка.ПометкаУдаления)
		//               |;
		//               |
		//               |////////////////////////////////////////////////////////////////////////////////
		//               |ВЫБРАТЬ
		//               |	Врем.ВидОповещения КАК ВидОповещения,
		//               |	Врем.Пользователь КАК Пользователь,
		//               |	Врем.СрокОповещения КАК СрокОповещения,
		//               |	Врем.Периодичность КАК Периодичность,
		//               |	Врем.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
		//               |	Врем.СМС КАК СМС,
		//               |	Врем.Напоминание КАК Напоминание,
		//               |	Врем.Сумма КАК Сумма,
		//               |	Врем.Хранилище КАК Хранилище
		//               |ИЗ
		//               |	Врем КАК Врем
		//               |
		//               |ОБЪЕДИНИТЬ ВСЕ
		//               |
		//               |ВЫБРАТЬ
		//               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения,
		//               |	Врем.Замещение,
		//               |	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		//               |	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта,
		//               |	CRM_ОповещенияПользовательскиеНастройки.СМС,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Сумма,
		//               |	CRM_ОповещенияПользовательскиеНастройки.Хранилище
		//               |ИЗ
		//               |	Врем КАК Врем
		//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		//               |		ПО Врем.Замещение = CRM_ОповещенияПользовательскиеНастройки.Пользователь
		//               |			И (&ВидОповещения = CRM_ОповещенияПользовательскиеНастройки.ВидОповещения)
		//               |ГДЕ
		//               |	НЕ Врем.Замещение = НЕОПРЕДЕЛЕНО
		//               |	И НЕ Врем.Замещение = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
		
		// Оригинал запроса CRM
		// Из конфигурации CRM. Харченко Д. Удалил  оригинальный запрос. 
		// Какой раньше оригинальный запрос был неизвестно.
		
		//Запрос.Текст = "ВЫБРАТЬ
		//|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения,
		//|	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
		//|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		//|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		//|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта,
		//|	CRM_ОповещенияПользовательскиеНастройки.СМС,
		//|	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
		//|	CRM_ОповещенияПользовательскиеНастройки.Сумма,
		//|	CRM_ОповещенияПользовательскиеНастройки.Хранилище
		//|ИЗ
		//|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		//|		ПО ИсполнителиЗадач.Исполнитель = CRM_ОповещенияПользовательскиеНастройки.Пользователь
		//|ГДЕ
		//|	ИсполнителиЗадач.РольИсполнителя = &Пользователь
		//|	И НЕ ИсполнителиЗадач.Исполнитель = &ТекущийПользователь
		//|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Пользователь";
		
		// Новый запрос оповещения
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
		|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
		|	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
		|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
		|	CRM_ОповещенияПользовательскиеНастройки.Сумма КАК Сумма,
		|	CRM_ОповещенияПользовательскиеНастройки.Хранилище КАК Хранилище,
		|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
		|ПОМЕСТИТЬ ВТ_НастройкиОповещения
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|		ПО ИсполнителиЗадач.Исполнитель = CRM_ОповещенияПользовательскиеНастройки.Пользователь
		|		#ОтборПоОбъектуАдресации
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &Пользователь
		|	И НЕ ИсполнителиЗадач.Исполнитель = &ТекущийПользователь
		|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НастройкиОповещения.ВидОповещения КАК ВидОповещения,
		|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_НастройкиОповещения.Пользователь) КАК Пользователь,
		|	ВТ_НастройкиОповещения.СрокОповещения КАК СрокОповещения,
		|	ВТ_НастройкиОповещения.Периодичность КАК Периодичность,
		|	ВТ_НастройкиОповещения.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
		|	ВТ_НастройкиОповещения.СМС КАК СМС,
		|	ВТ_НастройкиОповещения.Напоминание КАК Напоминание,
		|	ВТ_НастройкиОповещения.Сумма КАК Сумма,
		|	ВТ_НастройкиОповещения.Хранилище КАК Хранилище
		|ИЗ
		|	ВТ_НастройкиОповещения КАК ВТ_НастройкиОповещения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированиеРолиИсполнителя.СрезПоследних КАК вогДелегированиеРолиИсполнителяСрезПоследних
		|		ПО ВТ_НастройкиОповещения.Пользователь = вогДелегированиеРолиИсполнителяСрезПоследних.ВладелецРоли
		|			И ВТ_НастройкиОповещения.РольИсполнителя = вогДелегированиеРолиИсполнителяСрезПоследних.РольИсполнителя
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаНачала <= &ТекущаяДата
		|				И вогДелегированиеРолиИсполнителяСрезПоследних.ДатаОкончания >= &ТекущаяДата)";

		// - Тищенко В.В.
		
		// +++ VOG Кулаков П.Л. 28.02.2020 CRM-385
		Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.Задание") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ОтборПоОбъектуАдресации"," И CRM_ОповещенияПользовательскиеНастройки.Пользователь.Подразделение В ИЕРАРХИИ (&ОсновнойОбъектАдресации)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ОтборПоОбъектуАдресации","");
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Пользователь,
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта,
		|	CRM_ОповещенияПользовательскиеНастройки.СМС,
		|	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
		|	CRM_ОповещенияПользовательскиеНастройки.Сумма,
		|	CRM_ОповещенияПользовательскиеНастройки.Хранилище
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения
		|	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Напоминание Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Выборка.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			,Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	,Выборка.ВидОповещения);
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.Напоминание);
			СтруктураОповещения.Вставить("СрокОповещения"	,Выборка.СрокОповещения);
			СтруктураОповещения.Вставить("Периодичность"	,Выборка.Периодичность);
			СтруктураОповещения.Вставить("Сумма"			,Выборка.Сумма);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если Выборка.ЭлектроннаяПочта Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Выборка.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			,Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	,Выборка.ВидОповещения);
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	,Выборка.СрокОповещения);
			СтруктураОповещения.Вставить("Периодичность"	,Выборка.Периодичность);
			СтруктураОповещения.Вставить("Сумма"			,Выборка.Сумма);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если Выборка.СМС Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Выборка.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			,Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	,Выборка.ВидОповещения);
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	,Выборка.СрокОповещения);
			СтруктураОповещения.Вставить("Периодичность"	,Выборка.Периодичность);
			СтруктураОповещения.Вставить("Сумма"			,Выборка.Сумма);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		
		Если ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
			ОтборПоПартнерам = Выборка.Хранилище.Получить();
			Если ТипЗнч(ОтборПоПартнерам) = Тип("ОтборКомпоновкиДанных") Тогда
				Если ОтборПоПартнерам.Элементы.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				Для каждого Элемент из ОтборПоПартнерам.Элементы Цикл
					Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрЗаменить(Строка(Элемент.ЛевоеЗначение), "Клиент", "Партнер"));
				КонецЦикла;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.Ссылка КАК Партнер
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	НЕ Партнеры.ЭтоГруппа
			|	И НЕ Партнеры.ПометкаУдаления
			|";
			ПартнерыПоОтбору = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, ОтборПоПартнерам);
			Если ПартнерыПоОтбору.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если	ТипЗнч(Предмет) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
				// +CRM не переносить в объединенные решения
				ИЛИ	ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю")
				// -CRM не переносить в объединенные решения
				ИЛИ	ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")Тогда
				//
				НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.Партнер));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Партнеры") Тогда
						Структура.Вставить("Партнеры", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
							Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
				бНайдено = Ложь;
				Для Каждого СтрокаПолучатель Из Предмет.Получатели Цикл
					НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаПолучатель.Партнер));
					Если НайденныеСтроки.Количество() > 0 Тогда
						бНайдено = Истина;
						
						Для Каждого Структура Из МассивСтруктур Цикл
							Если Не Структура.Свойство("Партнеры") Тогда
								Структура.Вставить("Партнеры", Новый Массив());
							КонецЕсли;
							Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
									Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				бНайдено = Ложь;
				
				НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.ОтправительКонтакт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					бНайдено = Истина;
					Для Каждого Структура Из МассивСтруктур Цикл
						Если Не Структура.Свойство("Партнеры") Тогда
							Структура.Вставить("Партнеры", Новый Массив());
						КонецЕсли;
						Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
								Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				МассивТЧ = Новый Массив();
				МассивТЧ.Добавить("ПолучателиПисьма");
				МассивТЧ.Добавить("ПолучателиКопий");
				МассивТЧ.Добавить("ПолучателиОтвета");
				
				Для Каждого ТЧ Из МассивТЧ Цикл
					Для Каждого СтрокаТЧ Из Предмет[ТЧ] Цикл
						НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаТЧ.Контакт));
						Если НайденныеСтроки.Количество() > 0 Тогда
							бНайдено = Истина;
							Для Каждого Структура Из МассивСтруктур Цикл
								Если Не Структура.Свойство("Партнеры") Тогда
									Структура.Вставить("Партнеры", Новый Массив());
								КонецЕсли;
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
										Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				бНайдено = Ложь;
				
				МассивТЧ = Новый Массив();
				МассивТЧ.Добавить("ПолучателиПисьма");
				МассивТЧ.Добавить("ПолучателиКопий");
				МассивТЧ.Добавить("ПолучателиОтвета");
				
				Для Каждого ТЧ Из МассивТЧ Цикл
					Для Каждого СтрокаТЧ Из Предмет[ТЧ] Цикл
						НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаТЧ.Контакт));
						Если НайденныеСтроки.Количество() > 0 Тогда
							бНайдено = Истина;
							Для Каждого Структура Из МассивСтруктур Цикл
								Если Не Структура.Свойство("Партнеры") Тогда
									Структура.Вставить("Партнеры", Новый Массив());
								КонецЕсли;
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
										Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.СообщениеSMS") Тогда
				бНайдено = Ложь;
				Для Каждого СтрокаПолучатель Из Предмет.Адресаты Цикл
					НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаПолучатель.Контакт));
					Если НайденныеСтроки.Количество() > 0 Тогда
						бНайдено = Истина;
						
						Для Каждого Структура Из МассивСтруктур Цикл
							Если Не Структура.Свойство("Партнеры") Тогда
								Структура.Вставить("Партнеры", Новый Массив());
							КонецЕсли;
							Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
									Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
				бНайдено = Ложь;
				Для Каждого СтрокаПолучатель Из Предмет.Участники Цикл
					НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаПолучатель.Партнер));
					Если НайденныеСтроки.Количество() > 0 Тогда
						бНайдено = Истина;
						
						Для Каждого Структура Из МассивСтруктур Цикл
							Если Не Структура.Свойство("Партнеры") Тогда
								Структура.Вставить("Партнеры", Новый Массив());
							КонецЕсли;
							Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
									Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			Иначе
				// Попытки поиска у предмета реквизита "Партнер".
				Попытка		НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.Партнер));
				Исключение	НайденныеСтроки = Неопределено;
				КонецПопытки;
				Если НайденныеСтроки = Неопределено Тогда
					Попытка		НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.CRM_Партнер));
					Исключение	НайденныеСтроки = Неопределено;
					КонецПопытки;
				КонецЕсли;
				Если НайденныеСтроки = Неопределено Тогда
					Попытка		НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.Контрагент));
					Исключение	НайденныеСтроки = Неопределено;
					КонецПопытки;
				КонецЕсли;
				Если НайденныеСтроки = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Партнеры") Тогда
						Структура.Вставить("Партнеры", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
							Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
			ОтборПоПроектам = Выборка.Хранилище.Получить();
			Если ТипЗнч(ОтборПоПроектам) = Тип("ОтборКомпоновкиДанных") Тогда
				Если ОтборПоПроектам.Элементы.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Проекты.Ссылка КАК Проект
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	НЕ Проекты.ЭтоГруппа
			|	И НЕ Проекты.ПометкаУдаления
			|";
			ПроектыПоОтбору = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, ОтборПоПроектам);
			Если ПроектыПоОтбору.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если	ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
				// +CRM не переносить в объединенные решения
				ИЛИ	ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю")
				// -CRM не переносить в объединенные решения
				ИЛИ	ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_Телемаркетинг")
				ИЛИ	ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
				//
				НайденныеСтроки = ПроектыПоОтбору.НайтиСтроки(Новый Структура("Проект", Предмет.Проект));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Проекты") Тогда
						Структура.Вставить("Проекты", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Проекты.Найти(НайденнаяСтрока.Проект) = Неопределено Тогда
							Структура.Проекты.Добавить(НайденнаяСтрока.Проект);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли	ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				ИЛИ		ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
				ИЛИ		ТипЗнч(Предмет) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				//
				НайденныеСтроки = ПроектыПоОтбору.НайтиСтроки(Новый Структура("Проект", Предмет.CRM_Проект));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Проекты") Тогда
						Структура.Вставить("Проекты", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Проекты.Найти(НайденнаяСтрока.Проект) = Неопределено Тогда
							Структура.Проекты.Добавить(НайденнаяСтрока.Проект);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") И МассивСтруктур.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивСтруктур;
	КонецЕсли;
	
КонецФункции

//
//
Функция ПолучитьДатуОповещения(ПараметрыОповещения) Экспорт
	
	// 1. Запланированные события и дни рождения.
	Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия
	ИЛИ ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения
	ИЛИ ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
		
		// Если срок оповещения передан в виде даты, значит формируется мгновенное оповещение
		// на пример оповещения участников события.
		Если ТипЗнч(ПараметрыОповещения.СрокОповещения) = Тип("Дата") Тогда
			Возврат ПараметрыОповещения.СрокОповещения;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.Дата;
			Организация				= ПараметрыОповещения.Предмет.Организация;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.ПлановаяДата;
			Организация				= ПараметрыОповещения.Предмет.Организация;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("Структура") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.Дата;
			Организация				= ?(ПараметрыОповещения.Предмет.Свойство("Организация"), ПараметрыОповещения.Предмет.Организация, Неопределено);
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.Дата;
			Организация				= Неопределено;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
				ДатаНачалаПоПредмету= ПараметрыОповещения.Предмет.СрокИсполнения;
			Иначе
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.СрокИсполнения) И ПараметрыОповещения.Предмет.CRM_Личная Тогда
					ДатаНачалаПоПредмету= ПараметрыОповещения.Предмет.СрокИсполнения;
					ПараметрыОповещения.Вставить("ВпередПоКалендарю"	, Ложь);
				Иначе	
					ДатаНачалаПоПредмету= ПараметрыОповещения.Предмет.ДатаНачала;
					ПараметрыОповещения.Вставить("ВпередПоКалендарю"	, Истина);
				КонецЕсли;	
			КонецЕсли;
			Организация				= Неопределено;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.Партнеры")
		ИЛИ ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			ДатаНачалаПоПредмету = ДобавитьМесяц(ПараметрыОповещения.Предмет.ДатаРождения,(Год(ТекущаяДатаСеанса()) - Год(ПараметрыОповещения.Предмет.ДатаРождения))*12);
			Если ДатаНачалаПоПредмету < ТекущаяДатаСеанса() Тогда
				ДатаНачалаПоПредмету = ДобавитьМесяц(ДатаНачалаПоПредмету,12);
			КонецЕсли;
			Организация				= Неопределено;
		КонецЕсли;
		
		СтруктураДлительности = Новый Структура();
		СтруктураДлительности.Вставить("Дней"	,0);
		СтруктураДлительности.Вставить("Часов"	,0);
		СтруктураДлительности.Вставить("Минут"	,0);
		Если ПараметрыОповещения.Свойство("ВпередПоКалендарю") Тогда
			СтруктураДлительности.Вставить("ВпередПоКалендарю"	, ПараметрыОповещения.ВпередПоКалендарю);
		Иначе	
			СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
		КонецЕсли;	
		СтруктураДлительности.Вставить("ВидОповещения"		,ПараметрыОповещения.ВидОповещения);
		
		Если ПараметрыОповещения.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
			
			СтруктураДлительности.Минут = ПараметрыОповещения.СрокОповещения;
			
		ИначеЕсли ПараметрыОповещения.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
			
			СтруктураДлительности.Часов = ПараметрыОповещения.СрокОповещения;
			
		ИначеЕсли ПараметрыОповещения.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
			
			СтруктураДлительности.Дней = ПараметрыОповещения.СрокОповещения;
			
		ИначеЕсли ПараметрыОповещения.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
			
			СтруктураДлительности.Дней = ПараметрыОповещения.СрокОповещения*7;
			
		КонецЕсли;
		
		Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия Тогда
			// Получим настройку пользователя не использовать графики в оповещениях.
			СтруктураДлительности.Вставить("ИспользоватьКалендарьВОповещениях",CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПараметрыОповещения.Получатель,"ИспользоватьКалендарьВОповещениях"));
		КонецЕсли;
		
		Возврат CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(ДатаНачалаПоПредмету,СтруктураДлительности,,Организация);
		
	// 2. Действия по партнерам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
		
		Возврат ТекущаяДатаСеанса();
		
	// 3. Действия по проектам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
		
		Возврат ТекущаяДатаСеанса();
		
	// ++ VOG Солодов В.В. 24.04.2019
	// 4. Ключевые события контактных лиц
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях 
		И ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		И ПараметрыОповещения.Свойство("ДатаНачала") Тогда
		
		Возврат ПараметрыОповещения.ДатаНачала;
	// -- VOG Солодов В.В. 24.04.2019
		
	Иначе
		
		Возврат ТекущаяДатаСеанса();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуАктуальностиОповещенийОтПериода(ДатаАктуальности, ПериодВывода)
	
	Если ПериодВывода = Перечисления.Периодичность.День Тогда
		ДатаАктуальности = ДатаАктуальности + (24*60*60);
	ИначеЕсли ПериодВывода = Перечисления.Периодичность.Неделя Тогда
		ДатаАктуальности = ДатаАктуальности + (24*60*60*7);
	ИначеЕсли ПериодВывода = Перечисления.Периодичность.Декада Тогда
		ДатаАктуальности = ДатаАктуальности + (24*60*60*10);
	ИначеЕсли ПериодВывода = Перечисления.Периодичность.Месяц Тогда
		ДатаАктуальности = ДобавитьМесяц(ДатаАктуальности, +1);
	ИначеЕсли ПериодВывода = Перечисления.Периодичность.Квартал Тогда
		ДатаАктуальности = ДобавитьМесяц(ДатаАктуальности, +3);
	ИначеЕсли ПериодВывода = Перечисления.Периодичность.Полугодие Тогда
		ДатаАктуальности = ДобавитьМесяц(ДатаАктуальности, +6);
	ИначеЕсли ПериодВывода = Перечисления.Периодичность.Год Тогда
		ДатаАктуальности = ДобавитьМесяц(ДатаАктуальности, +12);
	ИначеЕсли ПериодВывода = Перечисления.Периодичность.ПустаяСсылка() Тогда
		ДатаАктуальности = Дата("00010101");
	КонецЕсли;
	
	Возврат ДатаАктуальности;
	
КонецФункции

//
//
Функция ПолучитьАктуальностиДатуОповещения(ПараметрыОповещения) Экспорт
	
	ПериодВывода = Константы.CRM_ПериодВыводаНезавершенныхОповещений.Получить();
	
	// 1. Запланированные события и дни рождения.
	Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия
	ИЛИ ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения
	ИЛИ ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
		
		ДатаНачалаПоПредмету = ТекущаяДатаСеанса();
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.Дата - 180;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.ПлановаяДата  - 180;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("Структура") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.Дата;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.Дата;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
				ДатаНачалаПоПредмету= ПараметрыОповещения.Предмет.СрокИсполнения;
			Иначе
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.СрокИсполнения) И ПараметрыОповещения.Предмет.CRM_Личная Тогда
					ДатаНачалаПоПредмету = ПараметрыОповещения.Предмет.СрокИсполнения;

				Иначе	
					ДатаНачалаПоПредмету = КонецДня(ПолучитьДатуОповещения(ПараметрыОповещения));
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.Партнеры")
		ИЛИ ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			ДатаНачалаПоПредмету = ДобавитьМесяц(ПараметрыОповещения.Предмет.ДатаРождения,(Год(ТекущаяДатаСеанса()) - Год(ПараметрыОповещения.Предмет.ДатаРождения))*12);
			Если ДатаНачалаПоПредмету < ТекущаяДатаСеанса() Тогда
				ДатаНачалаПоПредмету = ДобавитьМесяц(ДатаНачалаПоПредмету,12);
			КонецЕсли;
			
			Если ПериодВывода = Перечисления.Периодичность.День Тогда
				ДатаНачалаПоПредмету = КонецДня(ДатаНачалаПоПредмету + (60*60*24*7));
			Иначе
				ДатаНачалаПоПредмету = ПолучитьДатуАктуальностиОповещенийОтПериода(КонецДня(ДатаНачалаПоПредмету), ПериодВывода);
			КонецЕсли;
				
		КонецЕсли;
		
		Возврат ДатаНачалаПоПредмету;
		
	// 2. Действия по партнерам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
		
		Возврат ПолучитьДатуАктуальностиОповещенийОтПериода(КонецДня(ТекущаяДатаСеанса()), ПериодВывода);
		
	// 3. Действия по проектам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
		
		Возврат ПолучитьДатуАктуальностиОповещенийОтПериода(КонецДня(ТекущаяДатаСеанса()), ПериодВывода);
		
	// ++ VOG Солодов В.В. 24.04.2019
	// 4. Ключевые события контактных лиц
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях 
		И ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		И ПараметрыОповещения.Свойство("ДатаСобытия") Тогда
		
		Возврат КонецДня(ПараметрыОповещения.ДатаСобытия);
	// -- VOG Солодов В.В. 24.04.2019	
	Иначе
		
		Возврат ПолучитьДатуАктуальностиОповещенийОтПериода(КонецДня(ТекущаяДатаСеанса()), ПериодВывода);
		
	КонецЕсли;
	
КонецФункции

// Вспомогательная функция, используется в функции СформироватьТекстТемыИСодержанияОповещения().
//
Функция СформироватьСписокУчастниковКонтрольнойТочкиСтрокой(КонтрольнаяТочка)
	
	СтруктураРезультат = Новый Структура("Ответственный,СписокУчастников", Неопределено, Неопределено);
	
	СписокУчастников = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", КонтрольнаяТочка);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиКТ.Пользователь,
	|	ПользователиКТ.Ответственный
	|ИЗ
	|	Документ.CRM_КонтрольнаяТочкаПроекта.ПользователиКТ КАК ПользователиКТ
	|ГДЕ
	|	ПользователиКТ.Ссылка = &Ссылка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СписокУчастников = "" Тогда
			СписокУчастников = СписокУчастников + "," + Символы.ПС;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРезультат.Ответственный) И Выборка.Ответственный Тогда
			СтруктураРезультат.Ответственный = Выборка.Пользователь;
		КонецЕсли;
		
		СписокУчастников = СписокУчастников + Строка(Выборка.Пользователь);
		
	КонецЦикла;
	
	СтруктураРезультат.СписокУчастников = СписокУчастников;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция СформироватьСписокУчастниковСобытияСтрокой(Событие)
	
	СписокУчастников = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Событие);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_МероприятиеСторонниеЛица.Партнер,
	|	CRM_МероприятиеСторонниеЛица.КонтактноеЛицо,
	|	ИСТИНА КАК СтороннееЛицо
	|ИЗ
	|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	|ГДЕ
	|	CRM_МероприятиеСторонниеЛица.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_МероприятиеСвоиЛица.Лицо,
	|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка),
	|	ЛОЖЬ
	|ИЗ
	|	Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	|ГДЕ
	|	CRM_МероприятиеСвоиЛица.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ СписокУчастников = "" Тогда
			СписокУчастников = СписокУчастников + "," + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.СтороннееЛицо И ЗначениеЗаполнено(Выборка.КонтактноеЛицо) Тогда
			СписокУчастников = СписокУчастников + Выборка.КонтактноеЛицо;
		Иначе
			СписокУчастников = СписокУчастников + Выборка.Партнер;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокУчастников;
	
КонецФункции

Функция СформироватьТекстОповещенияПоСобытию(ПараметрыОповещения)
	
	ТекстТемы		= "";
	ТекстСодержания	= "";
	
	// Если Событие новое, то только об этом и сообщаем.
	Если ПараметрыОповещения.Состояние.Новое ИЛИ ПараметрыОповещения.ЭтоНовыйУчастник Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ТекстСодержания = НСтр("ru = 'Вас включили в состав участников встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + НСтр("ru = '"" начало в'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Место) Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + НСтр("ru = 'место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
			КонецЕсли;
		Иначе
			ТекстТемы = НСтр("ru = 'Вас включили в состав участников встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """";
			
			УчастникиСобытия = СформироватьСписокУчастниковСобытияСтрокой(ПараметрыОповещения.Предмет);
			
			ТекстСодержания = НСтр("ru = 'Вас включили в состав участников встречи'") + " " + Символы.ПС + 
			НСтр("ru = 'Тема:'") + " " + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема))+ Символы.ПС + 
			НСтр("ru = 'Когда:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд ММММ'") + НСтр("ru = ' с'") + " " + 
									 Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='ЧЧ-мм'") + НСтр("ru = ' до'") + " " + 
									 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='ЧЧ-мм'") + 
									 ?(НачалоДня(ПараметрыОповещения.Предмет.Дата)=НачалоДня(ПараметрыОповещения.Предмет.ОкончаниеМероприятия),""," " + Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд ММММ'; ДЛФ=DD")) + Символы.ПС +
			НСтр("ru = 'Место проведения:'") + " " + ?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Место),ПараметрыОповещения.Предмет.Место,НСтр("ru = 'не указано'")) + Символы.ПС +
//START Кайдашов 19/07/19			
			НСтр("ru = 'Инициатор:'") + " " + ПараметрыОповещения.Предмет.Инициатор + Символы.ПС +
//END Кайдашов			
			НСтр("ru = 'Описание:'") + " " + ?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Описание),СокрЛП(ПараметрыОповещения.Предмет.Описание),НСтр("ru = 'не указано'")) +
			?(НЕ УчастникиСобытия = "",Символы.ПС + НСтр("ru = 'Участники:'") + " " + Символы.ПС + УчастникиСобытия,"") + Символы.ПС;
			
			ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
																										,Новый Структура("Телефон, Почта",
																										Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
																										Справочники.ВидыКонтактнойИнформации.EmailПользователя));
			
//START Кайдашов 19/07/19
			ТекстСодержания = ТекстСодержания + НСтр("ru = 'Администратор:'") + " " + ПараметрыОповещения.Предмет.Ответственный;
//END Кайдашов			
			Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + "E-mail: " + СокрЛП(ИнформацияОтветственного.Почта);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + НСтр("ru = 'Телефон:'") + " " + СокрЛП(ИнформацияОтветственного.Телефон);
			КонецЕсли;
			
			//// ВРЕМЕННО
			//ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.ПС +
			//"++++++++++++++++++++++++++ ТЕКСТ НАПОМИНАНИЯ И СМС +++++++++++++++++++++++++++++++++" + Символы.ПС +
			//НСтр("ru = 'Вас включили в состав участников встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + НСтр("ru = '"" начало в'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			//Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Место) Тогда
			//	ТекстСодержания = ТекстСодержания + Символы.ПС + НСтр("ru = 'место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
			//КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			//Если ПараметрыОповещения.Состояние.Отменено ИЛИ ПараметрыОповещения.Состояние.Завершено Тогда
			//	
			//	ТекстСодержания = ?(ПараметрыОповещения.Состояние.Отменено,НСтр("ru = 'Отменено проведение встречи: ""'")
			//															 ,НСтр("ru = 'Завершено проведение встречи: ""'")) + 
			//	СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + НСтр("ru = '"" окончание в'") + " " + Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд.ММ.гг ЧЧ:мм'");
			//	
			//Иначе
				Если ПараметрыОповещения.Состояние.ИзмененаДата И ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстСодержания =	НСтр("ru = 'Изменена дата и место проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru = 'Когда:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + " - " + 
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд.ММ.гг ЧЧ:мм'") + Символы.ПС +
										НСтр("ru = 'Место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
					
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененаДата Тогда
					
					ТекстСодержания =	НСтр("ru = 'Изменена дата проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru = 'Когда:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + " - " + 
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд.ММ.гг ЧЧ:мм'");
					
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстСодержания =	НСтр("ru = 'Изменено место проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru = 'Место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
//START Кайдашов 19/07/19					
				ИначеЕсли ПараметрыОповещения.Состояние.свойство("Отменено") И ПараметрыОповещения.Состояние.Отменено Тогда
					
					ТекстСодержания =	НСтр("ru = 'Отменена встреча: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
					НСтр("ru = 'Отменена встреча:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
//END Кайдашов	
				//++ VOG Иванов С.А. 23.10.2019 ID заявки: 000000754
				ИначеЕсли ПараметрыОповещения.Состояние.свойство("ИзмененСостав") И ПараметрыОповещения.Состояние.ИзмененСостав Тогда
					
					ТекстСодержания =	НСтр("ru = 'Изменен состав участников встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """";				
				КонецЕсли;
				//-- VOG Иванов С.А. 23.10.2019 ID заявки: 000000754
			//КонецЕсли;
		Иначе
			
			//Если ПараметрыОповещения.Состояние.Отменено ИЛИ ПараметрыОповещения.Состояние.Завершено Тогда
			//	
			//	ТекстТемы = ?(ПараметрыОповещения.Состояние.Отменено,НСтр("ru = 'Отменено проведение встречи: ""'")
			//															 ,НСтр("ru = 'Завершено проведение встречи: ""'")) + 
			//	СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """";
			//	
			//	ТекстСодержания = ?(ПараметрыОповещения.Состояние.Отменено,НСтр("ru = 'Отменено проведение встречи: ""'")
			//															 ,НСтр("ru = 'Завершено проведение встречи: ""'")) + 
			//	СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + НСтр("ru = '"" окончание в'") + " " + Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд.ММ.гг ЧЧ:мм'") + Символы.ПС;
			//	
			//	Если ПараметрыОповещения.Состояние.Отменено Тогда
			//		ТекстСодержания = ТекстСодержания + 
			//		НСтр("ru = 'По причине: ""'") + ?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.ПричинаОтказа),СокрЛП(ПараметрыОповещения.Предмет.ПричинаОтказа),НСтр("ru = 'не указана'")) + Символы.ПС;
			//	КонецЕсли;
			//	
			//	Если ПараметрыОповещения.Состояние.Завершено И ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Результат) Тогда
			//		ТекстСодержания = ТекстСодержания + 
			//		НСтр("ru = 'Результат: ""'") + СокрЛП(ПараметрыОповещения.Предмет.Результат) + Символы.ПС;
			//	КонецЕсли;
			//	
			//	ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
			//																								,Новый Структура("Телефон, Почта",
			//																								Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
			//																								Справочники.ВидыКонтактнойИнформации.EmailПользователя));
			//	
			//	ТекстСодержания = ТекстСодержания + НСтр("ru = 'Ответственный:'") + " " + ПараметрыОповещения.Предмет.Ответственный;
			//	
			//	Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
			//		ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + "E-mail: " + СокрЛП(ИнформацияОтветственного.Почта);
			//	КонецЕсли;
			//	
			//	Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
			//		ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + НСтр("ru = 'Телефон:'") + " " + СокрЛП(ИнформацияОтветственного.Телефон);
			//	КонецЕсли;
			//	
			//	
			//	// ВРЕМЕННО
			//	ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.ПС +
			//	"++++++++++++++++++++++++++ ТЕКСТ НАПОМИНАНИЯ И СМС +++++++++++++++++++++++++++++++++" + Символы.ПС +
			//	?(ПараметрыОповещения.Состояние.Отменено,НСтр("ru = 'Отменено проведение встречи: ""'")
			//															 ,НСтр("ru = 'Завершено проведение встречи: ""'")) + 
			//	СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + НСтр("ru = '"" начало в'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			//	
			//Иначе
				Если ПараметрыОповещения.Состояние.ИзмененаДата И ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстТемы = НСтр("ru = 'Изменена дата и место проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """";
					
					ТекстСодержания =	НСтр("ru = 'Изменена дата и место проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru = 'Когда:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд ММММ'") + НСтр("ru = ' с'") + " " + 
																 Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='ЧЧ-мм'") + НСтр("ru = ' до'") + " " +
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='ЧЧ-мм'") + 
																 ?(НачалоДня(ПараметрыОповещения.Предмет.Дата)=НачалоДня(ПараметрыОповещения.Предмет.ОкончаниеМероприятия),""," " + Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд ММММ'; ДЛФ=DD")) + Символы.ПС +
										НСтр("ru = 'Место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место) + Символы.ПС;
					
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененаДата Тогда
					
					ТекстТемы = НСтр("ru = 'Изменена дата проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """";
					
					ТекстСодержания =	НСтр("ru = 'Изменена дата проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru = 'Когда:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд ММММ'") + НСтр("ru = ' с'") + " " + 
																 Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='ЧЧ-мм'") + НСтр("ru = ' до'") + " " + 
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='ЧЧ-мм'") + 
																 ?(НачалоДня(ПараметрыОповещения.Предмет.Дата)=НачалоДня(ПараметрыОповещения.Предмет.ОкончаниеМероприятия),""," " + Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд ММММ'; ДЛФ=DD")) + Символы.ПС;
										
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстТемы = НСтр("ru = 'Изменено место проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """";
					
					ТекстСодержания =	НСтр("ru = 'Изменено место проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru = 'Место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место) + Символы.ПС;
//START Кайдашов 19/07/19					
				ИначеЕсли ПараметрыОповещения.Состояние.свойство("Отменено") и ПараметрыОповещения.Состояние.Отменено Тогда
					
					ТекстТемы = НСтр("ru = 'Отменена встреча: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """";
					
					ТекстСодержания =	НСтр("ru = 'Отменена встреча: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru = 'Место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место) + Символы.ПС;
//END Кайдашов					
				КонецЕсли;
				
				ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
																											,Новый Структура("Телефон, Почта",
																											Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
																											Справочники.ВидыКонтактнойИнформации.EmailПользователя));
				
				ТекстСодержания = ТекстСодержания + НСтр("ru = 'Ответственный:'") + " " + ПараметрыОповещения.Предмет.Ответственный;
				
				Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
					ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + "E-mail: " + СокрЛП(ИнформацияОтветственного.Почта);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
					ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + НСтр("ru = 'Телефон:'") + " " + СокрЛП(ИнформацияОтветственного.Телефон);
				КонецЕсли;
								
//START Кайдашов 19/07/19
				//// ВРЕМЕННО
				//ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.ПС +
				//"++++++++++++++++++++++++++ ТЕКСТ НАПОМИНАНИЯ И СМС +++++++++++++++++++++++++++++++++" + Символы.ПС;
				//
				//Если ПараметрыОповещения.Состояние.ИзмененаДата И ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
				//	
				//	ТекстСодержания  = ТекстСодержания + НСтр("ru = 'Изменена дата и место проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """"  + Символы.ПС +
				//						НСтр("ru = 'Когда:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + " - " + 
				//												 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд.ММ.гг ЧЧ:мм'") + Символы.ПС +
				//						НСтр("ru = 'Место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
				//	
				//ИначеЕсли ПараметрыОповещения.Состояние.ИзмененаДата Тогда
				//	
				//	ТекстСодержания  = ТекстСодержания + НСтр("ru = 'Изменена дата проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """"  + Символы.ПС +
				//						НСтр("ru = 'Когда:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + " - " + 
				//												 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд.ММ.гг ЧЧ:мм'");
				//						
				//ИначеЕсли ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
				//	
				//	ТекстСодержания  = ТекстСодержания + НСтр("ru = 'Изменено место проведения встречи: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """"  + Символы.ПС +
				//						НСтр("ru = 'Место проведения:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
				//	
				//КонецЕсли;
//END Кайдашов
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Тема, Содержание",ТекстТемы,ТекстСодержания);
	
КонецФункции

Функция ПолучитьТелоТекстаПисьма()
	
	ТекстШаблона = "
	|<html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
	|<meta name=""format-detection"" content=""telephone=no"" />
	|<style type=""text/css"">
	|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
	|p{line-height:1.15;margin:0;}
	|ol,ul{margin-top:0;margin-bottom:0;}
	|img{border:none;}
	|</style>
	|</head>
	|<body><p>%1
	|</p></body>
	|</html>";
	
	Возврат ТекстШаблона;
	
КонецФункции

// Функция формирует текст содержания оповещения по переданному виду оповещения
// и предмету.
//
Функция СформироватьТекстТемыИСодержанияОповещения(ПараметрыОповещения) Экспорт
	
	ТекстТемы		= "";
	ТекстСодержания	= "";
	
	// Оповещение участников события о новом/измененном событии.
	Если ПараметрыОповещения.ВидОповещения = "ОповещениеУчастниковСобытия" Тогда
		
		ТемаТекстСодержания = СформироватьТекстОповещенияПоСобытию(ПараметрыОповещения);
		
		ТекстТемы		= ТемаТекстСодержания.Тема;
		ТекстСодержания	= ТемаТекстСодержания.Содержание;
		
	ИначеЕсли ПараметрыОповещения.ВидОповещения = "ПоступлениеОплаты" Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			ТекстТемы				= НСтр("ru = 'Поступила оплата от клиента'");
			
			ПредставлениеПартнера	= СокрЛП(?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Партнер.НаименованиеПолное),ПараметрыОповещения.Предмет.Партнер.НаименованиеПолное,ПараметрыОповещения.Предмет.Партнер.Наименование));
			ПредставлениеСчета		= НСтр("ru = ' по документу Счет №'") + ПараметрыОповещения.Предмет.Номер + НСтр("ru = ' от '") + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ=dd.MM.yyyy");
			ПредставлениеСуммы		= НСтр("ru = ' на сумму '") + Формат(ПараметрыОповещения.СуммаОплаты,"ЧЦ=15; ЧДЦ=2") + " " + ПараметрыОповещения.Предмет.Валюта;
			
			ТекстСодержания			= НСтр("ru = 'Поступила оплата от клиента '") + ПредставлениеПартнера + ПредставлениеСуммы + ПредставлениеСчета;
		Иначе
			ТекстТемы				= НСтр("ru = 'Поступила оплата от клиента'");
			
			ПредставлениеПартнера	= СокрЛП(?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Партнер.НаименованиеПолное),ПараметрыОповещения.Предмет.Партнер.НаименованиеПолное,ПараметрыОповещения.Предмет.Партнер.Наименование));
			ПредставлениеСчета		= НСтр("ru = ' по документу Счет №'") + ПараметрыОповещения.Предмет.Номер + НСтр("ru = ' от '") + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ=dd.MM.yyyy");
			ПредставлениеСуммы		= НСтр("ru = ' на сумму '") + Формат(ПараметрыОповещения.СуммаОплаты,"ЧЦ=15; ЧДЦ=2") + " " + ПараметрыОповещения.Предмет.Валюта;
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет.Партнер);
			ПартнерНавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеПартнера);
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			СчетНавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСчета);
				
			ТекстСодержания = "
			|<p>" + НСтр("ru = 'Поступила оплата от клиента '") + "%1 "+ ПредставлениеСуммы +"%2</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
			ТекстСодержания = СтрЗаменить(ТекстСодержания, "%1", ПартнерНавигационнаяСсылкаСтрокой);
			ТекстСодержания = СтрЗаменить(ТекстСодержания, "%2", СчетНавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	//ИначеЕсли ПараметрыОповещения.ВидОповещения = "ПринятаЗадачаИсполнителя" ИЛИ ПараметрыОповещения.ВидОповещения = "ВыполненаЗадачаИсполнителя" Тогда
	//	
	//	Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
	//		ТекстСодержания = ПараметрыОповещения.ТекстОповещения;
	//	Иначе
	//		Если НЕ ПараметрыОповещения.ТемаОповещения = "" Тогда
	//			ТекстТемы	= ПараметрыОповещения.ТемаОповещения;
	//		Иначе
	//			Если ПараметрыОповещения.ВидОповещения = "ПринятаЗадачаИсполнителя" Тогда
	//				ТекстТемы	= НСтр("ru = 'Принята к исполнению задача""'") + Лев(СокрЛП(ПараметрыОповещения.Предмет.Наименование),50);
	//			Иначе
	//				ТекстТемы	= НСтр("ru = 'Выполнена задача""'") + Лев(СокрЛП(ПараметрыОповещения.Предмет.Наименование),50);
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		ТекстСодержания = ПараметрыОповещения.ТекстОповещения;
	//	КонецЕсли;
		
	// 1. Запланированные события
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				ТекстСодержания = НСтр("ru = 'Напоминание: Запланирована задача ""'") + Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru = '"" начало в'") + " " + Формат(ПараметрыОповещения.Предмет.ДатаНачала,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'"));
				
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				
				ТекстСодержания = НСтр("ru = 'Напоминание: Запланировано Взаимодействие ""'") + Строка(ПараметрыОповещения.Предмет.Содержание) + НСтр("ru = '"" начало в'") + " " + Формат(ПараметрыОповещения.Предмет.ПлановаяДата,"ДФ='дд.ММ.гг ЧЧ:мм'");
				
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				ТекстТемы = НСтр("ru = 'Напоминание: Запланирована задача ""'") + Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru = '"" начало в'") + " " + Формат(ПараметрыОповещения.Предмет.ДатаНачала,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'"));
				
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					Строка(ПараметрыОповещения.Предмет.Наименование));
					
				ТекстСодержания = "
				|<p>" + НСтр("ru = 'Напоминание: Запланирована задача'") + "</p>
				|<p>%1" + НСтр("ru = '"" начало в '") + Формат(ПараметрыОповещения.Предмет.ДатаНачала,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'")) + "</p>";
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				
				ТекстТемы = НСтр("ru = 'Напоминание: Запланировано Взаимодействие ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Содержание)) + """";
				
				ПредставлениеСобытия = Строка(ПараметрыОповещения.Предмет.Содержание) + НСтр("ru = ' от '") + Формат(ПараметрыОповещения.Предмет.ПлановаяДата,"ДФ='дд.ММ.гг ЧЧ:мм'");
				
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСобытия);
					
				ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
																											,Новый Структура("Телефон, Почта",
																											Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
																											Справочники.ВидыКонтактнойИнформации.EmailПользователя));
				ТекстСодержания = "
				|<p>" + НСтр("ru = 'Напоминание: Запланировано событие'") + "</p>
				|<p>%1</p>";
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Партнер) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru = 'Клиент: '") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Партнер)) + "</p>";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.КонтактноеЛицо) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru = 'Контактное лицо: '") + СокрЛП(Строка(ПараметрыОповещения.Предмет.КонтактноеЛицо)) + "</p>";
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru = 'Когда: '") + Формат(ПараметрыОповещения.Предмет.ПлановаяДата,"ДФ='дд ММММ'") + НСтр("ru = ' с '") +
											  Формат(ПараметрыОповещения.Предмет.ПлановаяДата,"ДФ='ЧЧ-мм'") + НСтр("ru = ' до '") + 
											  Формат(ПараметрыОповещения.Предмет.ПлановаяДатаЗавершение,"ДФ='ЧЧ-мм'") + 
											  ?(НачалоДня(ПараметрыОповещения.Предмет.Дата)=НачалоДня(ПараметрыОповещения.Предмет.ПлановаяДатаЗавершение),""," " + Формат(ПараметрыОповещения.Предмет.ПлановаяДатаЗавершение,"ДФ='дд ММММ'; ДЛФ=DD")) + "</p>";
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Содержание) Тогда
				МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОповещения.Предмет.Содержание,Символы.ПС);
				
				ПерваяСтрока = Истина;
				Для Каждого СтрокаИзМассива ИЗ МассивСтрок Цикл
				Если ПерваяСтрока Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru = 'Описание: '") + СтрокаИзМассива + "</p>";
				ПерваяСтрока = Ложь;
				Иначе
				ТекстСодержания = ТекстСодержания + "
				|<p style='margin-left: 80pt'>" + СтрокаИзМассива + "</p>";
				КонецЕсли;
				КонецЦикла;
				
				Иначе
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru = 'Описание: '") + НСтр("ru = 'не указано'") + "</p>";
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru = 'Ответственный: '") + ПараметрыОповещения.Предмет.Ответственный + "</p>";
				
				Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p style='margin-left: 20pt'>E-mail: " + СокрЛП(ИнформацияОтветственного.Почта) + "</p>";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p style='margin-left: 20pt'>Телефон: " + СокрЛП(ИнформацияОтветственного.Телефон) + "</p>";
				КонецЕсли;
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
				
			КонецЕсли;
			
		КонецЕсли;
	// 2. Переадресация ответственного.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах Тогда
		
		ТипОбъекта = ПараметрыОповещения.Предмет.Метаданные().Синоним;
		
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			ТемаНаименование = ПараметрыОповещения.Предмет.Тема;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
		Иначе
			ТемаНаименование = "";
		КонецЕсли;
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			ТекстСодержания = ТекстСодержания + НСтр("ru = 'Переадресован'") + " " + ТипОбъекта + ?(ТемаНаименование="",""," """+ТемаНаименование+"""") + НСтр("ru = ' от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
		Иначе
			Если ТемаНаименование = "" Тогда
				ТемаНаименование = ТипОбъекта;
			КонецЕсли;
			
			ПредставлениеСсылки = ТемаНаименование + НСтр("ru = ' от '") + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = ТекстСодержания + НСтр("ru = 'Переадресован'") + " " + ТипОбъекта + ?(ТемаНаименование="",""," """+ТемаНаименование+"""") + НСтр("ru = ' от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
			ТекстСодержания = "
			|<p>" + НСтр("ru = 'Переадресован '") + ТипОбъекта + "</p>
			|<p>%1</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// 3. Новые задачи
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхЗадачах Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.БизнесПроцесс)
			И ПараметрыОповещения.Предмет.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
				ТекстСодержания = НСтр("ru = 'Новое поручение ""'");
			Иначе
				ТекстСодержания = НСтр("ru = 'Новая задача ""'");
			КонецЕсли;
			
			ТекстСодержания = ТекстСодержания + ПараметрыОповещения.Предмет.Наименование;
			ТекстСодержания = ТекстСодержания + НСтр("ru = '"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,"ДФ='дд.ММ.гг ЧЧ:мм'");
			ТекстСодержания = ТекстСодержания + НСтр("ru = '"" Автор:'") + " " + ПараметрыОповещения.Предмет.Автор;
			
		Иначе
			Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.БизнесПроцесс)
			И ПараметрыОповещения.Предмет.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
				ТекстТемы	= НСтр("ru = 'Новое поручение ""'");
				Стр			= "<P>" + НСтр("ru = 'Новое поручение ""'");
			Иначе
				ТекстТемы	= НСтр("ru = 'Новая задача ""'");
				Стр			= "<P>" + НСтр("ru = 'Новая задача ""'");
			КонецЕсли;
			
			ТекстТемы		= ТекстТемы + ПараметрыОповещения.Предмет.Наименование;
			ПредставлениеСсылки =  ПараметрыОповещения.Предмет.Наименование;
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
			Стр = Стр + НавигационнаяСсылкаСтрокой+ """</P></BR>";
			
			//Стр	= Стр + СокрЛП(ПараметрыОповещения.Предмет.Наименование) + """</P></BR>";
			Стр = Стр + "<P>" + НСтр("ru = '"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,"ДФ='дд.ММ.гг ЧЧ:мм'");
			Стр = Стр + НСтр("ru = ' Автор:'") + " " + ПараметрыОповещения.Предмет.Автор;
			Стр = Стр + НСтр("ru = ' Ответственный:'") + " " + ПараметрыОповещения.Предмет.БизнесПроцесс.Ответственный + """</P></BR>";
			
			Стр_1 = "<P><span style='font-size: 10pt;'><span style='font-size: 10pt;'><EM><STRONG>" + НСтр("ru = 'Задача'")+"</STRONG></EM></span></P>";
			
			ТекстСодержания = "
			|<html>
			|<head>
			|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
			|<title></title>
			|</head>
			|<body>
			|" + Стр + "<P></BR>" + CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеБизнесПроцесса(ПараметрыОповещения.Предмет) + Стр_1 + CRM_БизнесПроцессыПереопределяемый.СформироватьИсториюБизнесПроцесса(ПараметрыОповещения.Предмет) + "
			|</body>
			|</html>";
		КонецЕсли;
		
	// 4. Завершение бизнес-процесса.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗавершениеБизнесПроцесса Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			ТекстСодержания = НСтр("ru = 'Завершен бизнес-процесс ""'") + Строка(ПараметрыОповещения.Предмет.Наименование) +
			НСтр("ru = '"" от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
		Иначе
			ПредставлениеСсылки = Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru = ' от '") + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = НСтр("ru = 'Завершен бизнес-процесс ""'") + Строка(ПараметрыОповещения.Предмет.Наименование) +
			НСтр("ru = '"" от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
			ТекстСодержания = "
			|<p>" + НСтр("ru = 'Завершен бизнес-процесс '") + "</p>
			|<p>%1</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// 5. Просрочено событие/задача.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи Тогда
	
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТекстСодержания = НСтр("ru = 'Истек срок выполнения задачи ""'") + Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru = '"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'"));
			КонецЕсли;
		Иначе
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
			Иначе
				ТемаНаименование = "";
			КонецЕсли;
			
			ПредставлениеСсылки = ТемаНаименование + НСтр("ru = ' от '") + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
			ТекстТемы = НСтр("ru = 'Истек срок выполнения задачи ""'") + ТемаНаименование + НСтр("ru = '"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'"));
			
			ТекстСодержания = "
			|<p>" + НСтр("ru = 'Истек срок выполнения задачи '") + "</p>
			|<p>%1</p>
			|<p>" + НСтр("ru = 'Срок: '") + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'")) + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	// 6. Дни рождения
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
		
		ДатаРожденияВТекущемГоду = ДобавитьМесяц(ПараметрыОповещения.Предмет.ДатаРождения,(Год(ТекущаяДатаСеанса()) - Год(ПараметрыОповещения.Предмет.ДатаРождения))*12);
		
		Если ДатаРожденияВТекущемГоду < ТекущаяДатаСеанса() Тогда
			ДатаРожденияВТекущемГоду = ДобавитьМесяц(ДатаРожденияВТекущемГоду,12);
		КонецЕсли;
		
		СтрокаДаты = Формат(ДатаРожденияВТекущемГоду,"ДЛФ=DD");
		УдаляемыеЗнаки = Прав(СтрокаДаты, 7);
		СтрокаДаты = СтрЗаменить(СтрокаДаты, УдаляемыеЗнаки, "");
		
		//Исполняется = Строка(Окр((ТекущаяДатаСеанса() - ПараметрыОповещения.Предмет.ДатаРождения)/(60*60*24*365)));
		
// ************************************************************************
		//ТемаНапоминания = НСтр("ru = 'Поздравить с днем рождения: '") + Строка(Выборка.Ссылка) + ?(Выборка.ВидСправочника = "КЛ"," (" 
		//	+ Строка(Выборка.Владелец) + ")","");
		//	
		//	
		//ОписаниеНапоминания = ?(Выборка.ВидСправочника = "КЛ", ?(НЕ ЗначениеЗаполнено(Выборка.РольКонтактногоЛица), "","Роль: " + Выборка.РольКонтактногоЛица + Символы.ПС) + ?(НЕ ЗначениеЗаполнено(Выборка.Должность), "", "Должность: "+ Выборка.Должность + Символы.ПС),"");
		//
		//
		//
		//ОписаниеНапоминания =ТемаНапоминания + Символы.ПС+ ОписаниеНапоминания + НСтр("ru = 'Дата рождения: '")
		//	+ Формат(Выборка.ДатаРождения, "ДФ=dd.MM.yyyy") +Символы.ПС + НСтр("ru = 'Исполняется лет: '") + Исполняется;
// ************************************************************************
		
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				
				ТекстСодержания = СтрокаДаты + НСтр("ru = '  у партнера:'") + " " + ПараметрыОповещения.Предмет.Наименование + НСтр("ru = '  День Рождения.'");
				
			Иначе
				ТекстТемы = НСтр("ru = 'День рождения партнера'");
				
				ПредставлениеСсылки = ПараметрыОповещения.Предмет.Наименование;
				
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСсылки);
					
				ТекстСодержания = "
				|<p>" + НСтр("ru = 'День Рождения у партнера: '") + "</p>
				|<p>%1</p>";
					
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				
				ТекстСодержания = СтрокаДаты + НСтр("ru = '  у :'") + " " + ПараметрыОповещения.Предмет.Наименование + "(" + ПараметрыОповещения.Предмет.Владелец.Наименование + ")" +НСтр("ru = '  День Рождения.'");
				
			Иначе
				ТекстТемы = НСтр("ru = 'День рождения контактного лица партнера'");
				ТекстСодержания = СтрокаДаты + НСтр("ru = '  у :'") + " " + ПараметрыОповещения.Предмет.Наименование + "(" + ПараметрыОповещения.Предмет.Владелец.Наименование + ")" +НСтр("ru = '  День Рождения.'");
			КонецЕсли;
			
		КонецЕсли;
	// 7. Просроченная контрольная точка.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			ТекстСодержания = НСтр("ru = 'Истек срок проведения контрольной точки ""'") + Строка(ПараметрыОповещения.Предмет.Тема) + НСтр("ru = '"" дата начала:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
		Иначе
			ПредставлениеСсылки = Строка(ПараметрыОповещения.Предмет.Тема) + НСтр("ru = ' дата начала: '") + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = НСтр("ru = 'Истек срок проведения контрольной точки ""'") + Строка(ПараметрыОповещения.Предмет.Тема) + НСтр("ru = '"" дата начала:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
			ТекстСодержания = "
			|<p>" + НСтр("ru = 'Истек срок проведения контрольной точки '") + "</p>
			|<p>%1</p>";
			
			УчастникиКТ = СформироватьСписокУчастниковКонтрольнойТочкиСтрокой(ПараметрыОповещения.Предмет);
			
			Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Описание) Тогда
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОповещения.Предмет.Описание,Символы.ПС);
			
			ПерваяСтрока = Истина;
			Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
			Если ПерваяСтрока Тогда
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru = 'Описание: '") + СтрокаИзМассива + "</p>";
			ПерваяСтрока = Ложь;
			Иначе
			ТекстСодержания = ТекстСодержания + "
			|<p style='margin-left: 80pt'>" + СтрокаИзМассива + "</p>";
			КонецЕсли;
			КонецЦикла;
			Иначе
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru = 'Описание: '") + НСтр("ru = 'не указано'") + "</p>";
			КонецЕсли;
			
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru = 'Когда: '") + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + " - " +
											 Формат(ПараметрыОповещения.Предмет.ДатаЗакрытия,"ДФ='дд.ММ.гг ЧЧ:мм'") + "</p>";
			
			Если НЕ УчастникиКТ.СписокУчастников = "" Тогда
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru = 'Участники:'") + "</p>
			|<p>" + УчастникиКТ.СписокУчастников + "</p>";
			КонецЕсли;
			
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru = 'Ответственный: '") + УчастникиКТ.Ответственный + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// 8. Действия по партнерам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
		Если ПараметрыОповещения.Свойство("Партнеры") Тогда
			Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				ПартнерыСтрокой = "";
				ПартнерыСтрокойСПереносом = "";
				Для Каждого ПартнерСсылка Из ПараметрыОповещения.Партнеры Цикл
					ПартнерыСтрокой = ПартнерыСтрокой + ?(ЗначениеЗаполнено(ПартнерыСтрокой), ", ", "") + """" + Строка(ПартнерСсылка) + """";
					ПартнерыСтрокойСПереносом = ПартнерыСтрокойСПереносом + ?(ЗначениеЗаполнено(ПартнерыСтрокойСПереносом), Символы.ПС, "") + """" + Строка(ПартнерСсылка) + """";
				КонецЦикла;
				
				ПредставлениеПредмета = ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет);
				
				ТекстСодержания = ТекстСодержания
				+ НСтр("ru = 'Новый документ ""'")
				+ ПредставлениеПредмета
				+ НСтр("ru = '"" по'") + " "
				+ ?(ПараметрыОповещения.Партнеры.Количество() = 1, НСтр("ru = 'партнеру'"), НСтр("ru = 'партнерам'"));
				//
				Если ПараметрыОповещения.Партнеры.Количество() > 3 Тогда
					ТекстСодержания = ТекстСодержания + ":" + Символы.ПС;
					ТекстСодержания = ТекстСодержания + ПартнерыСтрокойСПереносом;
				Иначе
					ТекстСодержания = ТекстСодержания + " " + ПартнерыСтрокой;
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания
				+ ?(ЗначениеЗаполнено(ТекстСодержания), Символы.ПС, "")
				+ ?(ПараметрыОповещения.Свойство("ТекстОповещения"),ПараметрыОповещения.ТекстОповещения + Символы.ПС,"")
				+ СформироватьТекстСодержанияДляОповещения(ПараметрыОповещения.Предмет);
				//
			Иначе
				СписокСсылок = Новый СписокЗначений;
				
				ПредставлениеСсылки = ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет);
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
				СписокСсылок.Добавить(НавигационнаяСсылкаСтрокой);
				
				Ном = 1;
				ТекстСодержания = "
				|<p>" + НСтр("ru = 'Новый документ '") + "</p>
				|<p>%"+Строка(Ном)+"</p>
				|<p>" + НСтр("ru = 'по '") + ?(ПараметрыОповещения.Партнеры.Количество() = 1,НСтр("ru = 'партнеру'"),НСтр("ru = 'партнерам'")) + "</p>";
				
				ПартнерыСтрокой = "";
				Для Каждого ПартнерСсылка Из ПараметрыОповещения.Партнеры Цикл
					ПартнерыСтрокой = ПартнерыСтрокой + ?(ЗначениеЗаполнено(ПартнерыСтрокой), ", ", "") + """" + Строка(ПартнерСсылка) + """";
					
					Ном = Ном + 1;
					
					ПредставлениеСсылки = ПартнерСсылка.Наименование;
					НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПартнерСсылка);
					НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСсылки);
					
					СписокСсылок.Добавить(НавигационнаяСсылкаСтрокой);
					
					ТекстСодержания = ТекстСодержания + "
					|<p>%"+Строка(Ном)+"</p>";
				КонецЦикла;
				
				ТекстТемы = ТекстТемы + НСтр("ru = 'Новый документ ""'")
				+ ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет, Истина)
				+ НСтр("ru = '"" по'") + " "
				+ ?(ПараметрыОповещения.Партнеры.Количество() = 1, НСтр("ru = 'партнеру'"), НСтр("ru = 'партнерам'"))
				+ ": " + ПартнерыСтрокой;
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
				
				Ном = 0;
				Для Каждого ЭлементСписка Из СписокСсылок Цикл
					Ном = Ном + 1;
					
					ТекстСодержания = СтрЗаменить(ТекстСодержания, "%"+Строка(Ном), ЭлементСписка.Значение);
				КонецЦикла;
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
		КонецЕсли;
		
	// 9. Действия по проектам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
		Если ПараметрыОповещения.Свойство("Проекты") Тогда
			Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				ПроектыСтрокой = "";
				ПроектыСтрокойСПереносом = "";
				Для Каждого ПроектСсылка Из ПараметрыОповещения.Проекты Цикл
					ПроектыСтрокой = ПроектыСтрокой + ?(ЗначениеЗаполнено(ПроектыСтрокой), ", ", "") + """" + Строка(ПроектСсылка) + """";
					ПроектыСтрокойСПереносом = ПроектыСтрокойСПереносом + ?(ЗначениеЗаполнено(ПроектыСтрокойСПереносом), Символы.ПС, "") + """" + Строка(ПроектСсылка) + """";
				КонецЦикла;
				
				ПредставлениеПредмета = ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет);
				
				ТекстСодержания = ТекстСодержания
				+ НСтр("ru = 'Новый документ ""'")
				+ ПредставлениеПредмета
				+ НСтр("ru = '"" по'") + " "
				+ ?(ПараметрыОповещения.Проекты.Количество() = 1, НСтр("ru = 'проекту'"), НСтр("ru = 'проектам'"));
				//
				Если ПараметрыОповещения.Проекты.Количество() > 3 Тогда
					ТекстСодержания = ТекстСодержания + ":" + Символы.ПС;
					ТекстСодержания = ТекстСодержания + ПроектыСтрокойСПереносом;
				Иначе
					ТекстСодержания = ТекстСодержания + " " + ПроектыСтрокой;
				КонецЕсли;
				
				
				ТекстСодержания = ТекстСодержания
				+ ?(ЗначениеЗаполнено(ТекстСодержания), Символы.ПС, "")
				+ ?(ПараметрыОповещения.Свойство("ТекстОповещения"),ПараметрыОповещения.ТекстОповещения + Символы.ПС,"")
				+ СформироватьТекстСодержанияДляОповещения(ПараметрыОповещения.Предмет);
				//
			Иначе
				ТекстТемы = ТекстТемы + НСтр("ru = 'Новый документ ""'")
				+ ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет, Истина)
				+ НСтр("ru = '"" по'") + " "
				+ ?(ПараметрыОповещения.Проекты.Количество() = 1, НСтр("ru = 'проекту'"), НСтр("ru = 'проектам'"))
				+ ": " + ПроектыСтрокой;
				
				СписокСсылок = Новый СписокЗначений;
				
				ПредставлениеСсылки = ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет);
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
				СписокСсылок.Добавить(НавигационнаяСсылкаСтрокой);
				
				Ном = 1;
				ТекстСодержания = "
				|<p>" + НСтр("ru = 'Новый документ '") + "</p>
				|<p>%"+Строка(Ном)+"</p>
				|<p>" + НСтр("ru = 'по '") + ?(ПараметрыОповещения.Партнеры.Количество() = 1,НСтр("ru = 'проекту'"),НСтр("ru = 'проектам'")) + "</p>";
				
				ПроектыСтрокой = "";
				Для Каждого ПартнерСсылка Из ПараметрыОповещения.Проекты Цикл
					ПроектыСтрокой = ПроектыСтрокой + ?(ЗначениеЗаполнено(ПроектыСтрокой), ", ", "") + """" + Строка(ПроектСсылка) + """";
					
					Ном = Ном + 1;
					
					ПредставлениеСсылки = Строка(ПроектСсылка);
					НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПроектСсылка);
					НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСсылки);
					
					СписокСсылок.Добавить(НавигационнаяСсылкаСтрокой);
					
					ТекстСодержания = ТекстСодержания + "
					|<p>%"+Строка(Ном)+"</p>";
				КонецЦикла;
				
				ТекстТемы = ТекстТемы + НСтр("ru = 'Новый документ ""'")
				+ ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет, Истина)
				+ НСтр("ru = '"" по'") + " "
				+ ?(ПараметрыОповещения.Проекты.Количество() = 1, НСтр("ru = 'проекту'"), НСтр("ru = 'проектам'"))
				+ ": " + ПроектыСтрокой;
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
				
				Ном = 0;
				Для Каждого ЭлементСписка Из СписокСсылок Цикл
					Ном = Ном + 1;
					
					ТекстСодержания = СтрЗаменить(ТекстСодержания, "%"+Строка(Ном), ЭлементСписка.Значение);
				КонецЦикла;
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
		КонецЕсли;
		
	// 10. Коммерческое предложение на сумму.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма Тогда
		
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		
		Если ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.Напоминание Тогда
			
			ТекстСодержания = НСтр("ru = 'Зафиксировано Коммерческое предложение с суммой более'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма,ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru = ' от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru = ' Сумма:'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,ПараметрыОповещения.Предмет.Валюта) + Символы.ПС +
			НСтр("ru = ' Организация:'") + " " + ПараметрыОповещения.Предмет.Организация + Символы.ПС +
			НСтр("ru = ' Клиент:'") + " " + ПараметрыОповещения.Предмет.Партнер + Символы.ПС +
			НСтр("ru = ' Договор:'") + " " + ПараметрыОповещения.Предмет.Договор;
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.СМС Тогда
			
			ТекстСодержания = НСтр("ru = 'Зафиксировано Коммерческое предложение с суммой более'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма,ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru = ' от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru = ' Сумма:'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,ПараметрыОповещения.Предмет.Валюта);
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ПредставлениеСсылки = "№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru = ' от '") + 
								  Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") +
								  НСтр("ru = ' Сумма: '") + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,ПараметрыОповещения.Предмет.Валюта);
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = НСтр("ru = 'Зафиксировано Коммерческое предложение с суммой более'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма,ВалютаУправленческогоУчета);
			
			ТекстСодержания = "
			|<p>" + НСтр("ru = 'Зафиксировано Коммерческое предложение с суммой более '") + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма,ВалютаУправленческогоУчета)  + "</p>
			|<p>%1</p>
			|<p>" + НСтр("ru = ' Организация: '") + ПараметрыОповещения.Предмет.Организация + "</p>
			|<p>" + НСтр("ru = ' Клиент: '") + ПараметрыОповещения.Предмет.Партнер + "</p>
			|<p>" + НСтр("ru = ' Договор: '") + ПараметрыОповещения.Предмет.Договор + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	// 11. Счет на сумму
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма Тогда
		
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		
		Если ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.Напоминание Тогда
			
			ТекстСодержания = НСтр("ru = 'Зафиксирован Счет на оплату покупателю с суммой более'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма,ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru = ' от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru = ' Сумма:'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,ПараметрыОповещения.Предмет.Валюта) + Символы.ПС +
			НСтр("ru = ' Организация:'") + " " + ПараметрыОповещения.Предмет.Организация + Символы.ПС +
			НСтр("ru = ' Клиент:'") + " " + ПараметрыОповещения.Предмет.Партнер + Символы.ПС +
			НСтр("ru = ' Договор:'") + " " + ПараметрыОповещения.Предмет.Договор;
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.СМС Тогда
			
			ТекстСодержания = НСтр("ru = 'Зафиксирован Счет на оплату покупателю с суммой более'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма,ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru = ' от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru = ' Сумма:'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,ПараметрыОповещения.Предмет.Валюта);
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ПредставлениеСсылки = "№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru = ' от '") + 
								  Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'") +
								  НСтр("ru = ' Сумма: '") + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,ПараметрыОповещения.Предмет.Валюта);
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = НСтр("ru = 'Зафиксирован Счет на оплату покупателю с суммой более'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма,ВалютаУправленческогоУчета);
			
			ТекстСодержания = "
			|<p>" + НСтр("ru = 'Зафиксирован Счет на оплату покупателю с суммой более '") + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма,ВалютаУправленческогоУчета)  + "</p>
			|<p>%1</p>
			|<p>" + НСтр("ru = ' Организация: '") + ПараметрыОповещения.Предмет.Организация + "</p>
			|<p>" + НСтр("ru = ' Клиент: '") + ПараметрыОповещения.Предмет.Партнер + "</p>
			|<p>" + НСтр("ru = ' Договор: '") + ПараметрыОповещения.Предмет.Договор + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	// 12. 
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ТекстСодержания = НСтр("ru = 'Истекает срок выполнения задачи ""'") + Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru = '"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'"));
			
		Иначе
			ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
			
			ПредставлениеСсылки = ТемаНаименование + НСтр("ru = ' от '") + Формат(ПараметрыОповещения.Предмет.Дата,"ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
			ТекстТемы = НСтр("ru = 'Истекает срок выполнения задачи ""'") + ТемаНаименование + НСтр("ru = '"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'"));
			
			ТекстСодержания = "
			|<p>" + НСтр("ru = 'Истекает срок выполнения задачи '") + "</p>
			|<p>%1</p>
			|<p>" + НСтр("ru = 'Срок: '") + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'")) + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// ++ VOG Солодов В.В. 24.04.2019
	// 13. Оповещения о ключевых событиях
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях Тогда
		
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			НаименованиеСобытия = ПараметрыОповещения.ВидСобытия.Наименование;
			
			СтрокаДаты 		= Формат(ПараметрыОповещения.ДатаСобытия, "ДЛФ=DD");
			УдаляемыеЗнаки 	= Прав(СтрокаДаты, 7);
			СтрокаДаты 		= СтрЗаменить(СтрокаДаты, УдаляемыеЗнаки, ""); 
			
			ШаблонТемы 		= НСтр("ru = '%1 у контактного лица партнера'");
			ТекстТемы 		= СтрШаблон(ШаблонТемы, НаименованиеСобытия);
			
			СтрокаФИО 		= "";
			Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Пол) Тогда
				Пол 		= ?(ПараметрыОповещения.Предмет.Пол = Перечисления.ПолФизическогоЛица.Мужской, 1, 2);	
			Иначе
				Пол 		= Неопределено;
			КонецЕсли;
			
			CRM_ФизическиеЛицаКлиентСервер.Просклонять(
				ПараметрыОповещения.Предмет.Наименование, 
				2, 
				СтрокаФИО, 
				Пол);
			
			ШаблонСодержания 	= НСтр("ru = '%1 у %2 (%3) %4'");
			ТекстСодержания 	= СтрШаблон(
				ШаблонСодержания, 
				СокрЛП(СтрокаДаты),
				СтрокаФИО,
				ПараметрыОповещения.ОбъектСвязи.НаименованиеПолное,  
				НаименованиеСобытия);
			
		КонецЕсли;
	// -- VOG Солодов В.В. 24.04.2019
	КонецЕсли;
	
	Возврат Новый Структура("Тема,Содержание",ТекстТемы,ТекстСодержания);
	
КонецФункции

// Вспомогательная функция, используется в функции СформироватьТекстТемыИСодержанияОповещения().
//
Функция ПолучитьПредставлениеПредметаДляОповещения(Предмет, РасширенноеПредставление = Ложь)
	Представление = "";
	
	ПредметМетаданные = Предмет.Метаданные();
	СинонимМетаданные = ПредметМетаданные.РасширенноеПредставлениеОбъекта;
	Если Не ЗначениеЗаполнено(СинонимМетаданные) Тогда
		СинонимМетаданные = ПредметМетаданные.Синоним;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СинонимМетаданные) Тогда
		Представление = СинонимМетаданные;
		Попытка		НомерПредмета = СокрЛП(Предмет.Номер);
		Исключение	НомерПредмета = Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(НомерПредмета) Тогда
			Представление = Представление + " №" + НомерПредмета;
		КонецЕсли;
		
		Попытка		ДатаПредмета = Предмет.Дата;
		Исключение	ДатаПредмета = Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(ДатаПредмета) Тогда
			Представление = Представление + НСтр("ru = ' от'") + " " + Формат(Предмет.Дата, "ДФ ='дд.ММ.гггг ЧЧ:мм'");
		КонецЕсли;
	Иначе
		Представление = Строка(Предмет);
	КонецЕсли;
	
	Если РасширенноеПредставление Тогда
		Если ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			ТемаПредмета = Предмет.Наименование;
		Иначе
			Попытка		ТемаПредмета = Предмет.Тема;
			Исключение	ТемаПредмета = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТемаПредмета) Тогда
			ЧислоСтрок = СтрЧислоСтрок(ТемаПредмета);
			ПерваяСтрокаТемы = "";
			
			Для НомерСтроки = 1 По ЧислоСтрок Цикл
				Стр = СтрПолучитьСтроку(ТемаПредмета, НомерСтроки);
				Если ЗначениеЗаполнено(Стр) Тогда
					ПерваяСтрокаТемы = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПерваяСтрокаТемы) Тогда
				Если СтрДлина(ПерваяСтрокаТемы) > 100 Тогда
					ПерваяСтрокаТемы = Лев(ПерваяСтрокаТемы, 97) + "...";
				КонецЕсли;
				Представление = Представление + ": " + ПерваяСтрокаТемы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

// Вспомогательная функция, используется в функции СформироватьТекстТемыИСодержанияОповещения().
//
Функция СформироватьТекстСодержанияДляОповещения(Предмет)
	Разделитель = ". ";
	РазделительПС = Символы.ПС;
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.СуммаДокумента) Тогда
			Текст = Текст + НСтр("ru = 'Сумма:'") + " " + Формат(Предмет.СуммаДокумента, "ЧДЦ=2; ЧН=0");
			Если ЗначениеЗаполнено(Предмет.Валюта) Тогда
				ВалютаУправленческогоУчета = Предмет.Валюта;
			Иначе
				ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			КонецЕсли;
			Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
				Текст = Текст + " " + Строка(ВалютаУправленческогоУчета);
			Иначе
				Текст = Текст + " " + НСтр("ru = 'руб.'");
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.Партнер) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Строка(Предмет.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.КонтактноеЛицо) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), ?(ЗначениеЗаполнено(Предмет.Партнер), ", ", Разделитель), "");
			Текст = Текст + Строка(Предмет.КонтактноеЛицо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Комментарий) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Комментарий;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.CRM_Примечание) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.CRM_Примечание;
		КонецЕсли;
		
		Возврат Текст;
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Тема) Тогда
			Текст = Текст + НСтр("ru = 'Тема:'") + " " + Предмет.Тема;
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.Комментарий) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Комментарий;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Тема) Тогда
			Текст = Текст + НСтр("ru = 'Тема:'") + " " + Предмет.Тема;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Текст) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Лев(Предмет.Текст, 100);
			Если СтрДлина(Предмет.Текст) > 100 Тогда
				Текст = Текст + "...";
			КонецЕсли;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Тема) Тогда
			Текст = Текст + НСтр("ru = 'Тема:'") + " " + Предмет.Тема;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Текст) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Лев(Предмет.Текст, 100);
			Если СтрДлина(Предмет.Текст) > 100 Тогда
				Текст = Текст + "...";
			КонецЕсли;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.СообщениеSMS") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.ТекстСообщения) Тогда
			Текст = Текст + Предмет.ТекстСообщения;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Тема) Тогда
			Текст = Текст + НСтр("ru = 'Тема:'") + " " + Предмет.Тема;
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.Комментарий) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Комментарий;
		КонецЕсли;
		
		Возврат Текст;
		
	// +CRM не переносить в объединенные решения
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.СуммаДокумента) Тогда
			Текст = Текст + НСтр("ru = 'Сумма:'") + " " + Формат(Предмет.СуммаДокумента, "ЧДЦ=2; ЧН=0");
			Если ЗначениеЗаполнено(Предмет.Валюта) Тогда
				ВалютаУправленческогоУчета = Предмет.Валюта;
			Иначе
				ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			КонецЕсли;
			Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
				Текст = Текст + " " + Строка(ВалютаУправленческогоУчета);
			Иначе
				Текст = Текст + " " + НСтр("ru = 'руб.'");
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.Партнер) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Строка(Предмет.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.КонтактноеЛицо) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), ?(ЗначениеЗаполнено(Предмет.Партнер), ", ", Разделитель), "");
			Текст = Текст + Строка(Предмет.КонтактноеЛицо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Комментарий) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Комментарий;
		КонецЕсли;
		
		Возврат Текст;
	// -CRM не переносить в объединенные решения
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Наименование) Тогда
			Текст = Текст + НСтр("ru = 'Тема:'") + " " + Предмет.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.Партнер) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Строка(Предмет.Партнер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Сумма) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + НСтр("ru = 'Сумма:'") + " " + Формат(Предмет.Сумма, "ЧДЦ=2; ЧН=0");
			
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
				Текст = Текст + " " + Строка(ВалютаУправленческогоУчета);
			Иначе
				Текст = Текст + " " + НСтр("ru = 'руб.'");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Ответственный) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + НСтр("ru = 'Ответственный:'") + " " + Строка(Предмет.Ответственный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Описание) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Описание;
		КонецЕсли;
		
		Возврат Текст;
	Иначе
		Возврат Строка(Предмет);
		
	КонецЕсли;
КонецФункции

//
//
Функция ПолучитьПараметрыНастроекОповещений()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("CRM_ИспользоватьНапоминания",Константы.CRM_ИспользоватьНапоминания.Получить());
	СтруктураПараметров.Вставить("CRM_ИспользоватьОповещенияЭлектроннаяПочта",Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить());
	СтруктураПараметров.Вставить("CRM_ИспользоватьОповещенияСМС",Константы.CRM_ИспользоватьОповещенияСМС.Получить());
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура создает оповещение по переданным в структуре данным.
//
// ПараметрыОповещения - массив структур с параметрами оповещений.
//
Процедура ДобавитьОповещение(ПараметрыОповещения, ПроверятьВозможныеПовторыИзмерений = Ложь) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
	ОповещенияПараметрыНастроек = ПолучитьПараметрыНастроекОповещений();
	
	Для Каждого СтруктураОповещения Из ПараметрыОповещения Цикл
		СтруктураОповещения.Вставить("ИспользоватьДатуИВремяВСрокахЗадач",ИспользоватьДатуИВремяВСрокахЗадач);
		ТемаИСодержание				= СформироватьТекстТемыИСодержанияОповещения(СтруктураОповещения);
		ДатаОповещения				= ПолучитьДатуОповещения(СтруктураОповещения);
		ДатаАктуальностиОповещения	= ПолучитьАктуальностиДатуОповещения(СтруктураОповещения);
		
		//++ VOG Иванов С.А. 23.10.2019 ID заявки: 000000754
		Если НЕ ЗначениеЗаполнено(ТемаИСодержание.Содержание) Тогда
			Продолжить;	
		КонецЕсли;
		//-- VOG Иванов С.А. 23.10.2019 ID заявки: 000000754
		Если (СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия) И (ДатаОповещения <= ТекущаяДатаСеанса())
			И (СтруктураОповещения.Получатель = Пользователи.ТекущийПользователь()) Тогда
			Продолжить;
		КонецЕсли;
		Если СтруктураОповещения.ВидОповещения = "ОповещениеУчастниковСобытия" Тогда
			СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия;
		КонецЕсли;
		Если ((СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма)
			ИЛИ (СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма))
			И (СтруктураОповещения.Получатель = Пользователи.ТекущийПользователь()) Тогда
			Продолжить;
		КонецЕсли;
		Если СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи
			И ТипЗнч(СтруктураОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			И ЗначениеЗаполнено(СтруктураОповещения.Предмет.БизнесПроцесс)
			И ТипЗнч(СтруктураОповещения.Предмет.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") 
			И СтруктураОповещения.Предмет.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			И СтруктураОповещения.Предмет.БизнесПроцесс.ОповещатьАвтора Тогда
			ОповеститьАвтораПорученияОВыполненииЗадачи(СтруктураОповещения.Предмет, Истина);
		КонецЕсли;
		// + Тищенко В.В.
		Если СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи
			И ТипЗнч(СтруктураОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			И ЗначениеЗаполнено(СтруктураОповещения.Предмет.БизнесПроцесс)
			И ТипЗнч(СтруктураОповещения.Предмет.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") 
			И СтруктураОповещения.Предмет.БизнесПроцесс.КартаМаршрута <> Справочники.CRM_КартыМаршрутов.Поручение
			И СтруктураОповещения.Предмет.БизнесПроцесс.ОповещатьАвтора Тогда
			ОповеститьРуководителяОПросроченнойЗадачи(СтруктураОповещения.Предмет,СтруктураОповещения.Получатель);
		КонецЕсли;	
		// - Тищенко В.В.		
		Если СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И ОповещенияПараметрыНастроек.CRM_ИспользоватьНапоминания Тогда
			ПараметрыНапоминания = Новый Структура;
			ПараметрыНапоминания.Вставить("Пользователь"	,СтруктураОповещения.Получатель);
			ПараметрыНапоминания.Вставить("ДатаОповещения"	,ДатаОповещения);
			ПараметрыНапоминания.Вставить("СрокОповещения"	,СтруктураОповещения.СрокОповещения);
			ПараметрыНапоминания.Вставить("Периодичность"	,СтруктураОповещения.Периодичность);
			ПараметрыНапоминания.Вставить("ВидОповещения"	,СтруктураОповещения.ВидОповещения);
			ПараметрыНапоминания.Вставить("ДатаАктуальности",ДатаАктуальностиОповещения);
			Если ПроверятьВозможныеПовторыИзмерений
				И (СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам
				ИЛИ	СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам) Тогда
				ПараметрыНапоминания.Вставить("ПроверятьВозможныеПовторыИзмерений");
			КонецЕсли;
			CRM_НапоминанияСервер.ДобавитьНапоминание(СтруктураОповещения.Предмет, ТемаИСодержание.Содержание, ПараметрыНапоминания);
		КонецЕсли;
		Если (СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И ОповещенияПараметрыНастроек.CRM_ИспользоватьОповещенияЭлектроннаяПочта )
			ИЛИ (СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.СМС И ОповещенияПараметрыНастроек.CRM_ИспользоватьОповещенияСМС ) И НЕ СтруктураОповещения.Получатель.CRM_ОтписалсяОтEmailРассылок Тогда
			Менеджер = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
			Менеджер.Получатель			= СтруктураОповещения.Получатель;
			Менеджер.Предмет			= СтруктураОповещения.Предмет;
			Менеджер.ДатаОповещения		= ДатаОповещения;
			Менеджер.ДатаАктуальности	= ДатаАктуальностиОповещения;
			Если СтруктураОповещения.ВидОповещения = "ПринятаЗадачаИсполнителя"
			ИЛИ СтруктураОповещения.ВидОповещения = "ВыполненаЗадачаИсполнителя"
			ИЛИ СтруктураОповещения.ВидОповещения = "СозданаЗадачаИсполнителя" Тогда
				Менеджер.ВидОповещения	= Справочники.CRM_ВидыОповещений.ЗначимыеСобытия;
				Менеджер.Шаблон			= СтруктураОповещения.Шаблон;
				Если СтруктураОповещения.Свойство("Взаимодействие") Тогда
					Менеджер.Взаимодействие = СтруктураОповещения.Взаимодействие;
				КонецЕсли;
			Иначе
				Менеджер.ВидОповещения	= СтруктураОповещения.ВидОповещения;
				Менеджер.Тема			= ТемаИСодержание.Тема;
				Менеджер.Содержание		= ТемаИСодержание.Содержание;
			КонецЕсли;
			Менеджер.Канал				= СтруктураОповещения.Канал;
			Менеджер.СрокОповещения		= СтруктураОповещения.СрокОповещения;
			Менеджер.Периодичность		= СтруктураОповещения.Периодичность;
			Если СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				Если CRM_MSExchangeВызовСервера.ВыполненОбменСMSExchange(СтруктураОповещения.Предмет) Тогда
					Менеджер.Удалить();
				Иначе	
					Менеджер.Записать();
				КонецЕсли;	
			Иначе	
				Менеджер.Записать();
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//
//
Процедура УдалитьОповещенияПоДокументу(Документ) Экспорт
	
//START Кайдашов 19/12/19 CRM-90	
	УстановитьПривилегированныйРежим(Истина);
//END Кайдашов
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",Документ);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	CRM_Оповещения.Получатель,
	               |	CRM_Оповещения.Предмет,
	               |	CRM_Оповещения.ДатаОповещения,
	               |	CRM_Оповещения.ВидОповещения,
	               |	CRM_Оповещения.Канал
	               |ИЗ
	               |	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	               |ГДЕ
	               |	CRM_Оповещения.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьРегистра = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Получатель		= Выборка.Получатель;
		ЗаписьРегистра.Предмет			= Выборка.Предмет;
		ЗаписьРегистра.ДатаОповещения	= Выборка.ДатаОповещения;
		ЗаписьРегистра.ВидОповещения	= Выборка.ВидОповещения;
		ЗаписьРегистра.Канал			= Выборка.Канал;
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			ЗаписьРегистра.Удалить();
		КонецЕсли;
	КонецЦикла;
//START Кайдашов 19/12/19 CRM-90	
	УстановитьПривилегированныйРежим(Ложь);
//END Кайдашов
КонецПроцедуры

// Процедура удаляет все оповещения по объекту.
//
Процедура УдалитьОповещения(Предмет, Пользователь = Неопределено, Переадресация = Ложь) Экспорт
	
	// напоминания
	НаборРегистра = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Предмет.Установить(Предмет);
	Если НЕ Пользователь = Неопределено Тогда
		НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	КонецЕсли;
	НаборРегистра.Прочитать();
	Если НаборРегистра.Количество() > 0 Тогда
		НаборРегистра.Очистить();
		НаборРегистра.Записать();
	КонецЕсли;
	
	// оповещения
	НаборРегистра = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Предмет.Установить(Предмет);
	Если НЕ Пользователь = Неопределено Тогда
		НаборРегистра.Отбор.Получатель.Установить(Пользователь);
	КонецЕсли;
	НаборРегистра.Прочитать();
	Если НаборРегистра.Количество() > 0 Тогда
		Для Каждого ЗаписьНабора Из НаборРегистра Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.Документ) Тогда
				Попытка
					ДокументОбъект = ЗаписьНабора.Документ.ПолучитьОбъект();
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		НаборРегистра.Очистить();
		НаборРегистра.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляет все оповещения больше указанной даты по объекту.
//
Процедура УдалитьОповещенияБольшеУказаннойДаты(Предмет, ДатаУдаления, Пользователь = Неопределено) Экспорт
	
	// напоминания
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь,
	|	CRM_Напоминания.Предмет,
	|	CRM_Напоминания.ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.Предмет = &Предмет
	|	" + ?(ЗначениеЗаполнено(Пользователь), "И CRM_Напоминания.Пользователь = &Пользователь", "") + "
	|	
	|	И
	|	(
	|		CRM_Напоминания.ДатаНачала >= &ДатаУдаления
	|		ИЛИ CRM_Напоминания.ДатаОповещения >= &ДатаУдаления
	|		ИЛИ CRM_Напоминания.ДатаАктуальности >= &ДатаУдаления
	|	)
	|");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ДатаУдаления", ДатаУдаления);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
		НаборЗаписей.Отбор.Предмет.Установить(Выборка.Предмет);
		НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
		НаборЗаписей.Отбор.ДатаОповещения.Установить(Выборка.ДатаОповещения);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// оповещения
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	CRM_Оповещения.Получатель,
	|	CRM_Оповещения.Предмет,
	|	CRM_Оповещения.ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения,
	|	CRM_Оповещения.Канал
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.Предмет = &Предмет
	|	" + ?(ЗначениеЗаполнено(Пользователь), "И CRM_Оповещения.Пользователь = &Пользователь", "") + "
	|	
	|	И
	|	(
	|		CRM_Оповещения.ДатаОповещения >= &ДатаУдаления
	|		ИЛИ CRM_Оповещения.ДатаАктуальности >= &ДатаУдаления
	|	)
	|");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ДатаУдаления", ДатаУдаления);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Получатель.Установить(Выборка.Получатель);
		НаборЗаписей.Отбор.Предмет.Установить(Выборка.Предмет);
		НаборЗаписей.Отбор.ДатаОповещения.Установить(Выборка.ДатаОповещения);
		НаборЗаписей.Отбор.ВидОповещения.Установить(Выборка.ВидОповещения);
		НаборЗаписей.Отбор.Канал.Установить(Выборка.Канал);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

//
//
Функция ПолучитьНастройкиОповещенийУчастниковСобытия(Событие)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Событие);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
	               |	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
	               |	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
	               |	ВЫБОР
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	               |	КОНЕЦ КАК Канал,
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
	               |ПОМЕСТИТЬ НастройкиОповещений
	               |ИЗ
	               |	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	               |ГДЕ
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
	               |	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
	               |	И CRM_ОповещенияПользовательскиеНастройки.Пользователь В
	               |			(ВЫБРАТЬ
	               |				CRM_МероприятиеСвоиЛица.Лицо
	               |			ИЗ
	               |				Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	               |			ГДЕ
	               |				CRM_МероприятиеСвоиЛица.Ссылка = &Ссылка
	               |				И CRM_МероприятиеСвоиЛица.Лицо ССЫЛКА Справочник.Пользователи)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_МероприятиеСвоиЛица.Лицо КАК Пользователь,
	               |	НастройкиОповещений.СрокОповещения,
	               |	НастройкиОповещений.Периодичность,
	               |	НастройкиОповещений.Канал,
	               |	НастройкиОповещений.ВидОповещения КАК ВидОповещения,
	               |	ВЫБОР
	               |		КОГДА НастройкиОповещений.ВидОповещения ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Количество,
	               |	CRM_МероприятиеСвоиЛица.ОтправлятьСМС,
	               |	CRM_МероприятиеСвоиЛица.ОтправлятьПоПочте,
	               |	CRM_МероприятиеСвоиЛица.ОтправлятьНапоминания
	               |ИЗ
	               |	Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОповещений КАК НастройкиОповещений
	               |		ПО CRM_МероприятиеСвоиЛица.Лицо = НастройкиОповещений.Пользователь
	               |ГДЕ
	               |	CRM_МероприятиеСвоиЛица.Ссылка = &Ссылка
	               |	И CRM_МероприятиеСвоиЛица.Лицо ССЫЛКА Справочник.Пользователи
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Пользователь,
	               |	ВидОповещения
	               |ИТОГИ
	               |	СУММА(Количество)
	               |ПО
	               |	Пользователь";
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

//
//
Процедура СформироватьОповещенияПоЗадаче(Задача, АдресНастроек) Экспорт
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресНастроек);
	ТаблицаНастроекОповещений					= СтруктураПараметров.ТаблицаНастроекОповещений;
	ЭтоНоваяЗадача								= СтруктураПараметров.ЭтоНоваяЗадача;
	Пользователь								= СтруктураПараметров.Пользователь;
	
	МассивСтруктур = Новый Массив;
	
	Если НЕ ЭтоНоваяЗадача Тогда
		УдалитьОповещения(Задача, Пользователь);
	КонецЕсли;
	
	// Опишем оповещения для текущего пользователя.
	Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель"		,Пользователь);
		СтруктураОповещения.Вставить("Предмет"			,Задача);
		СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("Канал"			,СтрокаОповещения.Канал);
		СтруктураОповещения.Вставить("СрокОповещения"	,СтрокаОповещения.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	,СтрокаОповещения.Периодичность);
		
		МассивСтруктур.Добавить(СтруктураОповещения);
	КонецЦикла;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

//
//
Процедура СформироватьОповещенияПоСобытию(Событие, АдресНастроек) Экспорт
	СтруктураПараметров 						= ПолучитьИзВременногоХранилища(АдресНастроек);
	ТаблицаНастроекОповещений					= СтруктураПараметров.ТаблицаНастроекОповещений;
	ЭтоНовоеСобытие								= СтруктураПараметров.ЭтоНовоеСобытие;
	ИзмененСоставУчастников						= СтруктураПараметров.ИзмененСоставУчастников;
	Пользователь								= СтруктураПараметров.Пользователь;
	ПризнакПериодическоеСобытиеИнициализация	= СтруктураПараметров.ПризнакПериодическоеСобытиеИнициализация;
	МассивСтруктур = Новый Массив;
	Если НЕ ЭтоНовоеСобытие Тогда
		УдалитьОповещения(Событие, Пользователь);
	КонецЕсли;
	// Опишем оповещения для текущего пользователя.
	Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель"		,Пользователь);
		СтруктураОповещения.Вставить("Предмет"			,Событие);
		СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("Канал"			,СтрокаОповещения.Канал);
		СтруктураОповещения.Вставить("СрокОповещения"	,СтрокаОповещения.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	,СтрокаОповещения.Периодичность);
		МассивСтруктур.Добавить(СтруктураОповещения);
	КонецЦикла;
	Если ЭтоНовоеСобытие ИЛИ ИзмененСоставУчастников ИЛИ ПризнакПериодическоеСобытиеИнициализация Тогда
		// Получим настройки участников(пользователей), если они есть.
		ВыборкаНастроекОповещенийУчастников = ПолучитьНастройкиОповещенийУчастниковСобытия(Событие);
		Пока ВыборкаНастроекОповещенийУчастников.Следующий() Цикл
			Если ВыборкаНастроекОповещенийУчастников.Количество > 0 Тогда
				ВыборкаНастроек = ВыборкаНастроекОповещенийУчастников.Выбрать();
				Пока ВыборкаНастроек.Следующий() Цикл
					
					Если ВыборкаНастроек.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ВыборкаНастроек.ОтправлятьНапоминания Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВыборкаНастроек.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ВыборкаНастроек.ОтправлятьСМС Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВыборкаНастроек.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И НЕ ВыборкаНастроек.ОтправлятьПоПочте Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураОповещения = Новый Структура;
					СтруктураОповещения.Вставить("Получатель",		ВыборкаНастроек.Пользователь);
					СтруктураОповещения.Вставить("Предмет",			Событие);
					СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
					СтруктураОповещения.Вставить("Канал",			ВыборкаНастроек.Канал);
					СтруктураОповещения.Вставить("СрокОповещения",	ВыборкаНастроек.СрокОповещения);
					СтруктураОповещения.Вставить("Периодичность",	ВыборкаНастроек.Периодичность);
					МассивСтруктур.Добавить(СтруктураОповещения);
				КонецЦикла;
			Иначе
				ВыборкаНастроек = ВыборкаНастроекОповещенийУчастников.Выбрать();
				Если ВыборкаНастроек.Следующий() Тогда
				// Если у пользователя нет настроек, то возьмем настройки пользователя, создавшего это событие.
					Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
						
						Если СтрокаОповещения.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ВыборкаНастроек.ОтправлятьНапоминания Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрокаОповещения.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ВыборкаНастроек.ОтправлятьСМС Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрокаОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И НЕ ВыборкаНастроек.ОтправлятьПоПочте Тогда
							Продолжить;
						КонецЕсли;
						
						СтруктураОповещения = Новый Структура;
						СтруктураОповещения.Вставить("Получатель",		ВыборкаНастроекОповещенийУчастников.Пользователь);
						СтруктураОповещения.Вставить("Предмет",			Событие);
						СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
						СтруктураОповещения.Вставить("Канал",			СтрокаОповещения.Канал);
						СтруктураОповещения.Вставить("СрокОповещения",	СтрокаОповещения.СрокОповещения);
						СтруктураОповещения.Вставить("Периодичность",	СтрокаОповещения.Периодичность);
						МассивСтруктур.Добавить(СтруктураОповещения);
					КонецЦикла;
				Иначе
				// Если у пользователя нет настроек, то возьмем настройки пользователя, создавшего это событие.
					Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
						СтруктураОповещения = Новый Структура;
						СтруктураОповещения.Вставить("Получатель",		ВыборкаНастроекОповещенийУчастников.Пользователь);
						СтруктураОповещения.Вставить("Предмет",			Событие);
						СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
						СтруктураОповещения.Вставить("Канал",			СтрокаОповещения.Канал);
						СтруктураОповещения.Вставить("СрокОповещения",	СтрокаОповещения.СрокОповещения);
						СтруктураОповещения.Вставить("Периодичность",	СтрокаОповещения.Периодичность);
						МассивСтруктур.Добавить(СтруктураОповещения);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДобавитьОповещение(МассивСтруктур);
КонецПроцедуры

//
Функция ПолучитьСоставУчастниковСобытия(Событие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Событие);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_МероприятиеСторонниеЛица.Партнер,
	|	CRM_МероприятиеСторонниеЛица.КонтактноеЛицо,
	|	CRM_МероприятиеСторонниеЛица.ОтправлятьСМС КАК СМС,
	|	CRM_МероприятиеСторонниеЛица.ОтправлятьПоПочте КАК Почта,
	|	ЛОЖЬ КАК Напоминание
	|ИЗ
	|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	|ГДЕ
	|	CRM_МероприятиеСторонниеЛица.Ссылка = &Ссылка
	|	И (НЕ CRM_МероприятиеСторонниеЛица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ИЛИ НЕ CRM_МероприятиеСторонниеЛица.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	|	CRM_МероприятиеСвоиЛица.Лицо,
	|	CRM_МероприятиеСвоиЛица.ОтправлятьСМС,
	|	CRM_МероприятиеСвоиЛица.ОтправлятьПоПочте,
	|	CRM_МероприятиеСвоиЛица.ОтправлятьНапоминания
	|ИЗ
	|	Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	|ГДЕ
	|	CRM_МероприятиеСвоиЛица.Ссылка = &Ссылка
	|	И (НЕ CRM_МероприятиеСвоиЛица.Лицо = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ИЛИ НЕ CRM_МероприятиеСвоиЛица.Лицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

//
//
Процедура ОповеститьУчастниковСобытия(ПараметрыОповещения) Экспорт
	МассивСтруктур = Новый Массив;
	ВыборкаУчастниковСобытия = ПолучитьСоставУчастниковСобытия(ПараметрыОповещения.Событие);
	Пока ВыборкаУчастниковСобытия.Следующий() Цикл
		Если ПараметрыОповещения.Состояние.ИзмененСостав Тогда
			МассивСтрок = ПараметрыОповещения.НовыеУчастники.НайтиСтроки(
				Новый Структура("Партнер,КонтактноеЛицо", ВыборкаУчастниковСобытия.Партнер,ВыборкаУчастниковСобытия.КонтактноеЛицо));
			ЭтоНовыйУчастник = ?(МассивСтрок.Количество() = 0,Ложь,Истина);
		Иначе
			ЭтоНовыйУчастник = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаУчастниковСобытия.КонтактноеЛицо) Тогда
			Получатель = ВыборкаУчастниковСобытия.КонтактноеЛицо;
		Иначе
			Получатель = ВыборкаУчастниковСобытия.Партнер;
		КонецЕсли;
		Если ВыборкаУчастниковСобытия.Напоминание И (НЕ ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Получатель);
			СтруктураОповещения.Вставить("Предмет"			,ПараметрыОповещения.Событие);
			СтруктураОповещения.Вставить("ВидОповещения"	,"ОповещениеУчастниковСобытия");
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.Напоминание);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,Перечисления.CRM_ПериодичностьОповещений.ПустаяСсылка());
			СтруктураОповещения.Вставить("Состояние"		,ПараметрыОповещения.Состояние);
			СтруктураОповещения.Вставить("ЭтоНовыйУчастник"	,ЭтоНовыйУчастник);
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		Если ВыборкаУчастниковСобытия.Почта Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Получатель);
			СтруктураОповещения.Вставить("Предмет"			,ПараметрыОповещения.Событие);
			СтруктураОповещения.Вставить("ВидОповещения"	,"ОповещениеУчастниковСобытия");
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,Перечисления.CRM_ПериодичностьОповещений.ПустаяСсылка());
			СтруктураОповещения.Вставить("Состояние"		,ПараметрыОповещения.Состояние);
			СтруктураОповещения.Вставить("ЭтоНовыйУчастник"	,ЭтоНовыйУчастник);
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		Если ВыборкаУчастниковСобытия.СМС Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Получатель);
			СтруктураОповещения.Вставить("Предмет"			,ПараметрыОповещения.Событие);
			СтруктураОповещения.Вставить("ВидОповещения"	,"ОповещениеУчастниковСобытия");
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,Перечисления.CRM_ПериодичностьОповещений.ПустаяСсылка());
			СтруктураОповещения.Вставить("Состояние"		,ПараметрыОповещения.Состояние);
			СтруктураОповещения.Вставить("ЭтоНовыйУчастник"	,ЭтоНовыйУчастник);
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
	КонецЦикла;
	ДобавитьОповещение(МассивСтруктур);
КонецПроцедуры

//
//
Процедура СформироватьНапоминаниеОНовомПисьме(Письмо) Экспорт
	
	// пока отложили
	
КонецПроцедуры

//
Процедура СформироватьУдалитьНапоминанияОДняхРождения(Предмет) Экспорт
	
	МассивСтруктур = Новый Массив;
	
	УдалитьОповещения(Предмет);
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
		
		//Если ЗначениеЗаполнено(Предмет.ОсновнойМенеджер) Тогда
		//	
		//	Запрос = Новый Запрос;
		//	Запрос.УстановитьПараметр("Пользователь"	, Предмет.ОсновнойМенеджер);
		//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		//	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		//	|	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
		//	|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта,
		//	|	CRM_ОповещенияПользовательскиеНастройки.СМС,
		//	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
		//	|ИЗ
		//	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		//	|ГДЕ
		//	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
		//	|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ДниРождения)
		//	|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		//	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
		//	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	ВидОповещения";
		//	
		//	Выборка = Запрос.Выполнить().Выбрать();
		//	
		//	// Если есть настройки, тогда подготовим оповещение.
		//	Если Выборка.Следующий() Тогда
		//		
		//		СрокОповещения	= Выборка.СрокОповещения;
		//		Периодичность	= Выборка.Периодичность;
		//		
		//		СписокКаналов = Новый СписокЗначений;
		//		Если Выборка.Напоминание Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Напоминание);
		//		КонецЕсли;
		//		Если Выборка.ЭлектроннаяПочта Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
		//		КонецЕсли;
		//		Если Выборка.СМС Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.СМС);
		//		КонецЕсли;
		//		
		//		ЗапросПоКЛ = Новый Запрос;
		//		ЗапросПоКЛ.УстановитьПараметр("ПустаяДата"	,Дата("00010101"));
		//		ЗапросПоКЛ.УстановитьПараметр("Владелец"	,Предмет);
		//		ЗапросПоКЛ.Текст = "ВЫБРАТЬ
		//		|	КонтактныеЛицаПартнеров.Ссылка
		//		|ИЗ
		//		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		//		|ГДЕ
		//		|	КонтактныеЛицаПартнеров.Владелец = &Владелец
		//		|	И КонтактныеЛицаПартнеров.CRM_НапоминатьОДнеРождения
		//		|	И НЕ КонтактныеЛицаПартнеров.ДатаРождения = &ПустаяДата";
		//			
		//		Для Каждого ЭлементСписка Из СписокКаналов Цикл
		//			
		//			Если (Предмет.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо
		//			И ЗначениеЗаполнено(Предмет.ДатаРождения) И Предмет.CRM_НапоминатьОДнеРождения) Тогда
		//			
		//				СтруктураОповещения = Новый Структура;
		//				СтруктураОповещения.Вставить("Получатель"		,Предмет.ОсновнойМенеджер);
		//				СтруктураОповещения.Вставить("Предмет"			,Предмет);
		//				СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения);
		//				СтруктураОповещения.Вставить("Канал"			,ЭлементСписка.Значение);
		//				СтруктураОповещения.Вставить("СрокОповещения"	,СрокОповещения);
		//				СтруктураОповещения.Вставить("Периодичность"	,Периодичность);
		//				
		//				МассивСтруктур.Добавить(СтруктураОповещения);
		//			КонецЕсли;
		//			
		//			ВыборкаПоКЛ = ЗапросПоКЛ.Выполнить().Выбрать();
		//			Пока ВыборкаПоКЛ.Следующий() Цикл
		//				
		//				УдалитьОповещения(ВыборкаПоКЛ.Ссылка);
		//				
		//				СтруктураОповещения = Новый Структура;
		//				СтруктураОповещения.Вставить("Получатель"		,Предмет.ОсновнойМенеджер);
		//				СтруктураОповещения.Вставить("Предмет"			,ВыборкаПоКЛ.Ссылка);
		//				СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения);
		//				СтруктураОповещения.Вставить("Канал"			,ЭлементСписка.Значение);
		//				СтруктураОповещения.Вставить("СрокОповещения"	,СрокОповещения);
		//				СтруктураОповещения.Вставить("Периодичность"	,Периодичность);
		//				
		//				МассивСтруктур.Добавить(СтруктураОповещения);
		//			КонецЦикла;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		//Если ЗначениеЗаполнено(Предмет.Владелец.ОсновнойМенеджер) Тогда
		//	
		//	Запрос = Новый Запрос;
		//	Запрос.УстановитьПараметр("Пользователь"	, Предмет.Владелец.ОсновнойМенеджер);
		//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		//	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		//	|	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
		//	|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта,
		//	|	CRM_ОповещенияПользовательскиеНастройки.СМС,
		//	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
		//	|ИЗ
		//	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		//	|ГДЕ
		//	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
		//	|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ДниРождения)
		//	|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		//	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
		//	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	ВидОповещения";
		//	
		//	Выборка = Запрос.Выполнить().Выбрать();
		//	
		//	// Если есть настройки, тогда подготовим оповещение.
		//	Если Выборка.Следующий() Тогда
		//		
		//		СрокОповещения	= Выборка.СрокОповещения;
		//		Периодичность	= Выборка.Периодичность;
		//		
		//		СписокКаналов = Новый СписокЗначений;
		//		Если Выборка.Напоминание Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Напоминание);
		//		КонецЕсли;
		//		Если Выборка.ЭлектроннаяПочта Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
		//		КонецЕсли;
		//		Если Выборка.СМС Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.СМС);
		//		КонецЕсли;
		//		
		//		Если ЗначениеЗаполнено(Предмет.ДатаРождения) И Предмет.CRM_НапоминатьОДнеРождения Тогда
		//			
		//			Для Каждого ЭлементСписка Из СписокКаналов Цикл
		//				
		//				СтруктураОповещения = Новый Структура;
		//				СтруктураОповещения.Вставить("Получатель"		,Предмет.Владелец.ОсновнойМенеджер);
		//				СтруктураОповещения.Вставить("Предмет"			,Предмет);
		//				СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения);
		//				СтруктураОповещения.Вставить("Канал"			,ЭлементСписка.Значение);
		//				СтруктураОповещения.Вставить("СрокОповещения"	,СрокОповещения);
		//				СтруктураОповещения.Вставить("Периодичность"	,Периодичность);
		//				
		//				МассивСтруктур.Добавить(СтруктураОповещения);
		//			КонецЦикла;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

//
Процедура ОповеститьАвтораПорученияОВыполненииЗадачи(Предмет, Просрочено = Ложь) Экспорт
	
	Если НЕ Предмет.Исполнитель = Предмет.БизнесПроцесс.Автор Тогда
		
		ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
		
		Если НЕ Просрочено Тогда
			ТекстСодержания = Формат(Предмет.ДатаИсполнения,?(ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'")) + 
			НСтр("ru = '  Выполнена задача: ""'") + Строка(Предмет.Наименование) + НСтр("ru = '""  исполнитель:'") + " " + Предмет.Исполнитель;
		Иначе
			ТекстСодержания = НСтр("ru = 'Истек срок выполнения задачи ""'") +
			Строка(Предмет.Наименование) + НСтр("ru = '"" срок:'") + " " +
			Формат(Предмет.СрокИсполнения,?(ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'")) +
			НСтр("ru = ' исполнитель:'") + " " + Предмет.Исполнитель;
		КонецЕсли;
		
		ПараметрыНапоминания = Новый Структура;
		ПараметрыНапоминания.Вставить("Пользователь"	,Предмет.БизнесПроцесс.Автор);
		ПараметрыНапоминания.Вставить("ДатаОповещения"	,ТекущаяДатаСеанса());
		ПараметрыНапоминания.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
		ПараметрыНапоминания.Вставить("Периодичность"	,Перечисления.CRM_ПериодичностьОповещений.ПустаяСсылка());
		ПараметрыНапоминания.Вставить("ДатаАктуальности",ТекущаяДатаСеанса());
		Если НЕ Просрочено Тогда
			ПараметрыНапоминания.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ПустаяСсылка());
		Иначе
			ПараметрыНапоминания.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи);
		КонецЕсли;
		CRM_НапоминанияСервер.ДобавитьНапоминание(Предмет, ТекстСодержания, ПараметрыНапоминания);
		
	КонецЕсли;
	
КонецПроцедуры

// + Тищенко В.В.

Процедура ОповеститьРуководителяОПросроченнойЗадачи(Предмет,Получатель) Экспорт
		
	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
	
	ТекстСодержания = НСтр("ru = 'Истек срок выполнения задачи ""'") +
	Строка(Предмет.Наименование) + НСтр("ru = '"" срок:'") + " " +
	Формат(Предмет.СрокИсполнения,?(ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'")) +
	НСтр("ru = ' исполнитель:'") + " " + Предмет.Исполнитель;
	
	ПараметрыНапоминания = Новый Структура;
	ПараметрыНапоминания.Вставить("Пользователь"	,Получатель);
	ПараметрыНапоминания.Вставить("ДатаОповещения"	,ТекущаяДатаСеанса());
	ПараметрыНапоминания.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
	ПараметрыНапоминания.Вставить("Периодичность"	,Перечисления.CRM_ПериодичностьОповещений.ПустаяСсылка());
	ПараметрыНапоминания.Вставить("ДатаАктуальности",ТекущаяДатаСеанса());
	ПараметрыНапоминания.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи);
	CRM_НапоминанияСервер.ДобавитьНапоминание(Предмет, ТекстСодержания, ПараметрыНапоминания);
		
КонецПроцедуры

// - Тищенко В.В.

Функция СформироватьТекстОповещенияПоЗадаче(Предмет, РедактируемыйТекст = "")
	
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЗадачаИсполнителя);
	
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		
		Если Найти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, Предмет);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РедактируемыйТекст;
	
КонецФункции
	
//
//
Процедура СформироватьОповещениеПоЗадаче(Предмет, ПараметрыОповещения, Событие, Взаимодействие = Неопределено) Экспорт
	
	МассивСтруктур = Новый Массив;
	
	Если ТипЗнч(ПараметрыОповещения.Шаблон) = Тип("СправочникСсылка.CRM_ШаблоныРассылки") Тогда
		Если ПараметрыОповещения.Исполнителю Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Предмет.Исполнитель);
			//Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			//Иначе
				СтруктураОповещения.Вставить("Предмет"			,Предмет);
			//КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("Шаблон"			,ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	,Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	,Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ПараметрыОповещения.Ответственному Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Предмет.БизнесПроцесс.Ответственный);
			//Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			//Иначе
				СтруктураОповещения.Вставить("Предмет"			,Предмет);
			//КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("Шаблон"			,ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	,Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	,Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ПараметрыОповещения.Клиенту И ЗначениеЗаполнено(Предмет.БизнесПроцесс.Партнер) Тогда
			
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,?(ЗначениеЗаполнено(Предмет.БизнесПроцесс.КонтактноеЛицо),Предмет.БизнесПроцесс.КонтактноеЛицо,Предмет.БизнесПроцесс.Партнер));
			//Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			//Иначе
				СтруктураОповещения.Вставить("Предмет"			,Предмет);
			//КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("Шаблон"			,ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	,Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	,Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыОповещения.Шаблон) = Тип("СправочникСсылка.sms4bШаблоны") Тогда
		
		Если ПараметрыОповещения.Исполнителю Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Предмет.Исполнитель);
			//Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			//Иначе
				СтруктураОповещения.Вставить("Предмет"			,Предмет);
			//КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("Шаблон"			,ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	,Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	,Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ПараметрыОповещения.Ответственному Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,Предмет.БизнесПроцесс.Ответственный);
			//Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			//Иначе
				СтруктураОповещения.Вставить("Предмет"			,Предмет);
			//КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("Шаблон"			,ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	,Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	,Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ПараметрыОповещения.Клиенту И ЗначениеЗаполнено(Предмет.БизнесПроцесс.Партнер) Тогда
			
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,?(ЗначениеЗаполнено(Предмет.БизнесПроцесс.КонтактноеЛицо),Предмет.БизнесПроцесс.КонтактноеЛицо,Предмет.БизнесПроцесс.Партнер));
			//Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			//Иначе
				СтруктураОповещения.Вставить("Предмет"			,Предмет);
			//КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	,"СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("Шаблон"			,ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	,Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	,Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

//
//
Процедура СформироватьОповещениеОПоступленииОплаты(Предмет, ПараметрыОповещения, СуммаОплаты) Экспорт
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого СтрокаПараметров Из ПараметрыОповещения Цикл
		
		Если СтрокаПараметров.Напоминание Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,СтрокаПараметров.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			,Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	,"ПоступлениеОплаты");
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.Напоминание);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("СуммаОплаты"		,СуммаОплаты);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если СтрокаПараметров.ЭлектроннаяПочта Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,СтрокаПараметров.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			,Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	,"ПоступлениеОплаты");
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("СуммаОплаты"		,СуммаОплаты);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если СтрокаПараметров.СМС Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,СтрокаПараметров.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			,Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	,"ПоступлениеОплаты");
			СтруктураОповещения.Вставить("Канал"			,Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	,ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	,0);
			СтруктураОповещения.Вставить("СуммаОплаты"		,СуммаОплаты);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

//
//
Процедура ПриСменеОтвественногоСобытия(Событие) Экспорт
	
	// Изменился ответственный, проверим, не является ли он участником события
	// если является, то надо сохранить ранее сохраненные настройки оповещений по событию (те, что флажками отмечены в ТЧ)
	// если нет настроенных оповещений, то проверим настройки оповещения для ответственного, если они есть,
	// то добавим оповещения по этим настройкам.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	, Событие);
	Запрос.УстановитьПараметр("Лицо"	, Событие.Ответственный);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_МероприятиеСвоиЛица.Ссылка
	               |ИЗ
	               |	Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	               |ГДЕ
	               |	CRM_МероприятиеСвоиЛица.Ссылка = &Ссылка
	               |	И CRM_МероприятиеСвоиЛица.Лицо = &Лицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	// Проверим, есть ли записи по оповещениям.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Получатель"		, Событие.Ответственный);
		Запрос.УстановитьПараметр("Предмет"			, Событие);
		Запрос.УстановитьПараметр("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_Оповещения.Получатель,
		|	CRM_Оповещения.Предмет,
		|	CRM_Оповещения.ДатаОповещения,
		|	CRM_Оповещения.ВидОповещения,
		|	CRM_Оповещения.Канал,
		|	CRM_Оповещения.ДатаАктуальности,
		|	CRM_Оповещения.Содержание,
		|	CRM_Оповещения.Тема,
		|	CRM_Оповещения.СрокОповещения,
		|	CRM_Оповещения.Периодичность,
		|	CRM_Оповещения.Документ
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Получатель = &Получатель
		|	И CRM_Оповещения.Предмет = &Предмет
		|	И CRM_Оповещения.ВидОповещения = &ВидОповещения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			// Уже есть записи оповещений по этому событию для ответственного.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Получим персональные настройки оповещений и создадим записи.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",Событие.Ответственный);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
	|	ВЫБОР
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	|	КОНЕЦ КАК Канал,
	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	|ГДЕ
	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
	|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
	|	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь";
	
	
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	
	МассивСтруктур = Новый Массив;
	Пока ВыборкаНастроек.Следующий() Цикл
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель",		ВыборкаНастроек.Пользователь);
		СтруктураОповещения.Вставить("Предмет",			Событие);
		СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("Канал",			ВыборкаНастроек.Канал);
		СтруктураОповещения.Вставить("СрокОповещения",	ВыборкаНастроек.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	ВыборкаНастроек.Периодичность);
		МассивСтруктур.Добавить(СтруктураОповещения);
	КонецЦикла;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

// Процедура удаляет старые и добавляет новые оповещения для ключевых событий контакта.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт, для которого формируются напоминания.
//
Процедура CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях(Контакт) Экспорт
	МассивСтруктур = Новый Массив;
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		УдалитьОповещения(Контакт);
		//Если ЗначениеЗаполнено(Контакт.Владелец.ОсновнойМенеджер) Тогда
		//	Запрос = Новый Запрос;
		//	Запрос.УстановитьПараметр("Пользователь", Контакт.Владелец.ОсновнойМенеджер);
		//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		//	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		//	|	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
		//	|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта,
		//	|	CRM_ОповещенияПользовательскиеНастройки.СМС,
		//	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
		//	|ИЗ
		//	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		//	|ГДЕ
		//	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
		//	|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.CRM_КлючевыеСобытияКонтакта)
		//	|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		//	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
		//	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	ВидОповещения";
		//	Выборка = Запрос.Выполнить().Выбрать();
		//	// Если есть настройки, тогда подготовим оповещение.
		//	Если Выборка.Следующий() Тогда
		//		СрокОповещения	= Выборка.СрокОповещения;
		//		Периодичность	= Выборка.Периодичность;
		//		СписокКаналов = Новый СписокЗначений;
		//		Если Выборка.Напоминание Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Напоминание);
		//		КонецЕсли;
		//		Если Выборка.ЭлектроннаяПочта Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
		//		КонецЕсли;
		//		Если Выборка.СМС Тогда
		//			СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.СМС);
		//		КонецЕсли;
		//		Для Каждого СтрокаКлючевогоСобытия Из Контакт.CRM_КлючевыеСобытия Цикл 
		//			Если СтрокаКлючевогоСобытия.НапоминатьОСобытии И ЗначениеЗаполнено(СтрокаКлючевогоСобытия.ДатаСобытия) Тогда
		//				Для Каждого ЭлементСписка Из СписокКаналов Цикл
		//					СтруктураОповещения = Новый Структура;
		//					СтруктураОповещения.Вставить("Получатель",		Контакт.Владелец.ОсновнойМенеджер);
		//					СтруктураОповещения.Вставить("Предмет",			Контакт);
		//					СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях);
		//					СтруктураОповещения.Вставить("Канал",			ЭлементСписка.Значение);
		//					СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		//					СтруктураОповещения.Вставить("Периодичность",	Периодичность);
		//					СтруктураОповещения.Вставить("ВидСобытия",		СтрокаКлючевогоСобытия.ВидСобытия);
		//					СтруктураОповещения.Вставить("ДатаСобытия",		СтрокаКлючевогоСобытия.ДатаСобытия);
		//					МассивСтруктур.Добавить(СтруктураОповещения);
		//				КонецЦикла;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		
		// ++ VOG Солодов В.В. 24.04.2019
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Контакт);
		
		ФоновыеЗадания.Выполнить("CRM_КлиентыСервер.СоздатьНапоминанияОКлючевыхСобытиях", ПараметрыЗадания);
		// -- VOG Солодов В.В. 24.04.2019
	КонецЕсли;
	Если МассивСтруктур.Количество() > 0 Тогда
		ДобавитьОповещение(МассивСтруктур);
	КонецЕсли;	
КонецПроцедуры // CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях()

#Область ОбработкаПодписок

Функция ПолучитьПараметрыОповещенияЗапланированныеСобытия(Пользователь, Предмет) Экспорт
	
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
	|	ВЫБОР
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	|	КОНЕЦ КАК Канал,
	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	|ГДЕ
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
	|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидОповещения";
	
	_ТаблицаОповещений = Запрос.Выполнить().Выгрузить();
	_ТаблицаОповещений.Очистить();
	_ТаблицаОповещений.Колонки.Добавить("ДатаОповещения", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ИспользоватьНапоминания)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ИспользоватьОповещенияСМС)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаб = _ТаблицаОповещений.Добавить();
		НоваяСтрокаТаб.Канал			= Выборка.Канал;
		НоваяСтрокаТаб.СрокОповещения	= Выборка.СрокОповещения;
		НоваяСтрокаТаб.Периодичность	= Выборка.Периодичность;
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Предмет);
		СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("СрокОповещения",	НоваяСтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	НоваяСтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		Пользователь);
		
		НоваяСтрокаТаб.ДатаОповещения = ПолучитьДатуОповещения(СтруктураОповещения);
		
	КонецЦикла;
	
	Возврат _ТаблицаОповещений;
	
КонецФункции

// Процедура - обработчик подписки на событие "CRM_ПередЗаписьюОбъектаОповещения".
//
Процедура ПередЗаписьюОбъектаОповещения(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовоеВзаимодействие"	, Ложь);
		Источник.ДополнительныеСвойства.Вставить("ИзменилиСтатус"			, Ложь);
		Источник.ДополнительныеСвойства.Вставить("ИзменилиОтветственного"	, Ложь);
		Источник.ДополнительныеСвойства.Вставить("ИзменилиПлановуюДату"		, Ложь);
		
		Если НЕ Источник.Ссылка = Источник.Ссылка Тогда
			Источник.ДополнительныеСвойства.ЭтоНовоеВзаимодействие = Истина;
		КонецЕсли;
		
		//Изменили статцс
		Если НЕ Источник.СтатусВзаимодействия = Источник.Ссылка.СтатусВзаимодействия Тогда
			Источник.ДополнительныеСвойства.ИзменилиСтатус = Истина;
		КонецЕсли;
		
		//Изменили ответственного
		Если НЕ Источник.Ответственный = Источник.Ссылка.Ответственный Тогда
			Источник.ДополнительныеСвойства.ИзменилиОтветственного = Истина;
		КонецЕсли;
		
		//Изменили Плановау дату
		Если НЕ Источник.ПлановаяДата = Источник.Ссылка.ПлановаяДата Тогда
			Источник.ДополнительныеСвойства.ИзменилиПлановуюДату = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик подписки на событие "CRM_ПриЗаписиОбъектаОповещения".
//
Процедура ПриЗаписиОбъектаОповещения(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		
		Если НЕ Источник.ДополнительныеСвойства.ЭтоНовоеВзаимодействие Тогда
			УдалитьОповещения(Источник.Ссылка);
		КонецЕсли;
		
		Если НЕ (Источник.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено) И
		НЕ (Источник.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено) Тогда
			
			ТаблицаНастроекОповещений = ПолучитьПараметрыОповещенияЗапланированныеСобытия(Источник.Ответственный, Источник.Ссылка);
			
			МассивСтруктур = Новый Массив;
			Для Каждого СтрокаОповещения ИЗ ТаблицаНастроекОповещений Цикл
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Получатель"		,Источник.Ответственный);
				СтруктураОповещения.Вставить("Предмет"			,Источник.Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
				СтруктураОповещения.Вставить("Канал"			,СтрокаОповещения.Канал);
				СтруктураОповещения.Вставить("СрокОповещения"	,СтрокаОповещения.СрокОповещения);
				СтруктураОповещения.Вставить("Периодичность"	,СтрокаОповещения.Периодичность);
				МассивСтруктур.Добавить(СтруктураОповещения);
			КонецЦикла;
			ДобавитьОповещение(МассивСтруктур);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //ОбработкаПодписок
