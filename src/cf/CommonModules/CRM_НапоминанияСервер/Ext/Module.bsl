
//
//
Функция ПолучитьПериодОбновленияНапоминаний() Экспорт
	
	ПериодОбновления = Константы.CRM_ПериодПроверкиНовыхНапоминаний.Получить();
	
	Возврат ?(ПериодОбновления = 0,15,ПериодОбновления);
	
КонецФункции

// Функция вычисляет срок исполнения напоминания.
//
// Параметры:
//	ДанныеСтроки	- СтрокаТабличнойЧасти	- Строка с данными напоминания.
//
// Возвращаемое значение:
//	Строка	- Текст срока исполнения напоминания.
//
Функция ВычислитьСрокИсполнения(ДанныеСтроки)
	ТекстСрокаИсполнения = "";
	// Вычислим срок исполнения
 	СрокИсполнения = Цел((ДанныеСтроки.ДатаОповещения - ТекущаяДатаСеанса()) / 60); // минут
	СтрокаПросрочено = НСтр("ru = ' осталось'");
	СтрокаСоздано  = "";
	
	Если СрокИсполнения < 0 Тогда
		СрокИсполнения = - СрокИсполнения;
		Если ДанныеСтроки.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки Или
			 ДанныеСтроки.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи Тогда
			СтрокаПросрочено = НСтр("ru = ' просрочено'");
		Иначе
			СтрокаСоздано = НСтр("ru ='Создано '");
			СтрокаПросрочено = НСтр("ru = ' назад'");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СрокИсполнения = 0 Тогда	
		КоличествоМинут = СрокИсполнения % 60;
		КоличествоЧасов = (СрокИсполнения - КоличествоМинут) / 60;
		КоличествоДней  = Цел(КоличествоЧасов / 24);
		КоличествоЧасов = КоличествоЧасов % 24;
		// Определим текст для вывода дней.
		Если КоличествоДней > 0 Тогда
			Если КоличествоДней < 21 Тогда
				КоличествоЕдиницыДней = КоличествоДней;
			ИначеЕсли КоличествоДней > 20 И КоличествоДней < 1001 Тогда
				КоличествоЕдиницыДней = КоличествоДней - (Цел(КоличествоДней / 10)) * 10;
			ИначеЕсли КоличествоДней > 1000 И КоличествоДней < 10001 Тогда
				КоличествоЕдиницыДней = КоличествоДней - (Цел(КоличествоДней / 100)) * 100;
			Иначе
				КоличествоЕдиницыДней = КоличествоДней - (Цел(КоличествоДней / 100)) * 100;
			КонецЕсли;
			Если КоличествоЕдиницыДней > 20 Тогда
				КоличествоЕдиницыДней = КоличествоДней - (Цел(КоличествоДней / 10)) * 10;
			КонецЕсли;
			Если КоличествоЕдиницыДней = 1 Тогда
				ТекстДней = НСтр("ru = ' день'");
			ИначеЕсли КоличествоЕдиницыДней > 1 И КоличествоЕдиницыДней < 5 Тогда
				ТекстДней = НСтр("ru = ' дня'");
			ИначеЕсли КоличествоЕдиницыДней > 4 И КоличествоЕдиницыДней < 21 Тогда
				ТекстДней = НСтр("ru = ' дней'");
			Иначе
				ТекстДней = НСтр("ru = ' дней'");
			КонецЕсли;
		КонецЕсли; 
		// Определим текст для вывода часов.
		Если КоличествоЧасов > 0 Тогда
			Если КоличествоЧасов < 21 Тогда
				КоличествоЕдиницыЧасов = КоличествоЧасов;
			Иначе
				КоличествоЕдиницыЧасов = КоличествоЧасов - (Цел(КоличествоЧасов / 10)) * 10;
			КонецЕсли;
			Если КоличествоЕдиницыЧасов = 1 Тогда
				ТекстЧасов = НСтр("ru = ' час'");
			ИначеЕсли КоличествоЕдиницыЧасов > 1 И КоличествоЕдиницыЧасов < 5 Тогда
				ТекстЧасов = НСтр("ru = ' часа'");
			Иначе
				ТекстЧасов = НСтр("ru = ' часов'");
			КонецЕсли;
		КонецЕсли; 
		// Определим текст для вывода минут.
		Если КоличествоМинут > 0 Тогда
			Если КоличествоМинут < 21 Тогда
				КоличествоЕдиницыМинут = КоличествоМинут;
			Иначе
				КоличествоЕдиницыМинут = КоличествоМинут - (Цел(КоличествоМинут / 10)) * 10;
			КонецЕсли;
			Если КоличествоЕдиницыМинут = 1 Тогда
				ТекстМинут = НСтр("ru = ' минута'");
			ИначеЕсли КоличествоЕдиницыМинут > 1 И КоличествоЕдиницыМинут < 5 Тогда
				ТекстМинут = НСтр("ru = ' минуты'");
			Иначе
				ТекстМинут = НСтр("ru = ' минут'");
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоДней > 2 Тогда
		
			ТекстСрокаИсполнения = Строка(КоличествоДней) + ТекстДней
								   + СтрокаПросрочено;
							   
		Иначе
			ТекстСрокаИсполнения = ?(КоличествоДней > 0, Строка(КоличествоДней) + ТекстДней + " ", "")
								   + ?(КоличествоЧасов > 0, Строка(КоличествоЧасов) + ТекстЧасов + " ", "")
								   + ?(КоличествоМинут > 0, Строка(КоличествоМинут) + ТекстМинут, "")
								   + СтрокаПросрочено;
		
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтрокаСоздано) Тогда
			ТекстСрокаИсполнения = СтрокаСоздано + ТекстСрокаИсполнения;
		КонецЕсли;							   
	КонецЕсли; 
	Возврат ТекстСрокаИсполнения; 
КонецФункции // ВычислитьСрокИсполнения()

// Функция получает напоминания текущего пользователя.
//
// Параметры:
//	Нет.
// VOG Иванов С.А. 15.10.2019 bugs: 752
// ВсеНапоминания - если истина функция вернет все напоминания по тек. пользователю
//
//
// Возвращаемое значение:
//	Массив	- Массив напоминаний.
//
Функция ПолучитьНапоминания(НапоминанияОВходящихПисьмах = Ложь, ВсеНапоминания = Ложь) Экспорт
	
	МассивНапоминаний = Новый Массив;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат МассивНапоминаний;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		Возврат МассивНапоминаний;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодичностьОповещений = Константы.CRM_ПериодОповещенияОПросроченныхСобытиях.Получить();
	Если ПериодичностьОповещений = Перечисления.Периодичность.День Тогда
		НачалоПериода = ТекущаяДатаСеанса() - (24*60*60);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Неделя Тогда
		НачалоПериода = ТекущаяДатаСеанса() - (24*60*60*7);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Декада Тогда
		НачалоПериода = ТекущаяДатаСеанса() - (24*60*60*10);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -3);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Полугодие Тогда
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -6);
	ИначеЕсли ПериодичностьОповещений = Перечисления.Периодичность.Год Тогда
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -12);
	Иначе
		НачалоПериода = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",	Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ДатаОповещения",	ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидОповещения",	Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
	
	Если НапоминанияОВходящихПисьмах Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
		|	Напоминания.Пользователь,
		|	Напоминания.Предмет,
		|	Напоминания.ДатаНачала,
		|	Напоминания.ДатаАктуальности,
		|	Напоминания.ДатаОповещения,
		|	Напоминания.Содержание,
		|	Напоминания.Счетчик,
		|	Напоминания.ВидОповещения,
		|	ВЫБОР
		|		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Обычная)
		|			ТОГДА 1
		|		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Низкая)
		|			ТОГДА 0
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Важность,
		|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись,
		|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт,
		|	Напоминания.Предмет.БизнесПроцесс,
		|	Напоминания.Предмет.БизнесПроцесс.Партнер,
		|	Напоминания.Предмет.БизнесПроцесс.КонтактноеЛицо,
		|	Напоминания.Предмет.Партнер,
		|	Напоминания.Предмет.КонтактноеЛицо,
		|	Напоминания.Предмет.CRM_КонтактноеЛицо,
		|	Напоминания.Предмет.CRM_Партнер
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК Напоминания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО Напоминания.Предмет = ЭлектронноеПисьмоВходящее.Ссылка
		|ГДЕ
		|	Напоминания.Пользователь = &Пользователь
		|	И Напоминания.ДатаОповещения < &ДатаОповещения
		|	И Напоминания.ВидОповещения = &ВидОповещения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Напоминания.ДатаОповещения УБЫВ";
					   
	Иначе  
			
		ТекстЗапроса = "ВЫБРАТЬ " + ?(ВсеНапоминания, "", "ПЕРВЫЕ 20 ") + //+ VOG Иванов С.А. 15.10.2019 Bugs: 752 
		               "	Напоминания.Пользователь КАК Пользователь,
		               |	Напоминания.Предмет КАК Предмет,
		               |	Напоминания.ДатаНачала КАК ДатаНачала,
		               |	Напоминания.ДатаАктуальности КАК ДатаАктуальности,
		               |	Напоминания.ДатаОповещения КАК ДатаОповещения,
		               |	Напоминания.Содержание КАК Содержание,
		               |	Напоминания.Счетчик КАК Счетчик,
		               |	Напоминания.ВидОповещения КАК ВидОповещения,
		               |	ВЫБОР
		               |		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Обычная)
		               |			ТОГДА 1
		               |		КОГДА Напоминания.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиВзаимодействия.Низкая)
		               |			ТОГДА 0
		               |		ИНАЧЕ 2
		               |	КОНЕЦ КАК Важность,
		               |	ВЫРАЗИТЬ(Напоминания.Предмет КАК Задача.ЗадачаИсполнителя).БизнесПроцесс КАК ПредметБизнесПроцесс,
		               |	ВЫРАЗИТЬ(Напоминания.Предмет КАК Задача.ЗадачаИсполнителя).БизнесПроцесс.Партнер КАК ПредметБизнесПроцессПартнер,
		               |	ВЫРАЗИТЬ(Напоминания.Предмет КАК Задача.ЗадачаИсполнителя).БизнесПроцесс.КонтактноеЛицо КАК ПредметБизнесПроцессКонтактноеЛицо,
		               |	Напоминания.Предмет.Партнер КАК ПредметПартнер,
		               |	Напоминания.Предмет.КонтактноеЛицо КАК ПредметКонтактноеЛицо,
		               |	Напоминания.Предмет.CRM_КонтактноеЛицо КАК ПредметCRM_КонтактноеЛицо,
		               |	Напоминания.Предмет.CRM_Партнер КАК ПредметCRM_Партнер
		               |ИЗ
		               |	РегистрСведений.CRM_Напоминания КАК Напоминания
		               |ГДЕ
		               |	Напоминания.Пользователь = &Пользователь
		               |	И Напоминания.ДатаОповещения < &ДатаОповещения
		               |	И Напоминания.ВидОповещения <> &ВидОповещения
					   // +++ VOG Кулаков П.Л. 25.12.2020 DEV-46
					   |	И Напоминания.ВидОповещения <> ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.вогОповещениеПользователя)
					   // --- VOG Кулаков П.Л.
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Напоминания.ДатаОповещения УБЫВ";
		
	КонецЕсли;
			   
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеУчетныхЗаписейИКоличестваПисем = Новый Соответствие;
	
	МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписи = 20;
	
	Пока Выборка.Следующий() Цикл
		// Удаляем записи с истекшим сроком актуальности.
		Если НЕ (Выборка.ДатаАктуальности = Дата("00010101")) И (Выборка.ДатаАктуальности < ТекущаяДатаСеанса())
		И (НЕ Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи)
		И (НЕ Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки) Тогда
			
			РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, Выборка);
			РегистрСведенийМенеджерЗаписи.Прочитать();
			Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
				Если РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
					
					СтруктураДлительности = Новый Структура();
					СтруктураДлительности.Вставить("Дней"	,0);
					СтруктураДлительности.Вставить("Часов"	,0);
					СтруктураДлительности.Вставить("Минут"	,0);
					СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
					СтруктураДлительности.Вставить("ВидОповещения"		,РегистрСведенийМенеджерЗаписи.ВидОповещения);
					
					Если РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
						СтруктураДлительности.Минут = РегистрСведенийМенеджерЗаписи.СрокОповещения;
					ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
						СтруктураДлительности.Часов = РегистрСведенийМенеджерЗаписи.СрокОповещения;
					ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
						СтруктураДлительности.Дней = РегистрСведенийМенеджерЗаписи.СрокОповещения;
					ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
						СтруктураДлительности.Дней = РегистрСведенийМенеджерЗаписи.СрокОповещения*7;
					КонецЕсли;
					
					ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(РегистрСведенийМенеджерЗаписи.ДатаОповещения,12)),СтруктураДлительности,,Неопределено);
					
					РегистрСведенийМенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
					РегистрСведенийМенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60*60*24*7);
					РегистрСведенийМенеджерЗаписи.Записать();
					
				ИначеЕсли ТипЗнч(РегистрСведенийМенеджерЗаписи.Предмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
					
					РегистрСведенийМенеджерЗаписи.ДатаАктуальности = (CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()-60*60*24);
					РегистрСведенийМенеджерЗаписи.Записать();
					
				Иначе
					РегистрСведенийМенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ (Выборка.ДатаАктуальности = Дата("00010101"))
		И (Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи
		Или Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки) Тогда
			
			Если Выборка.ДатаАктуальности < НачалоПериода Тогда
				РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, Выборка);
				РегистрСведенийМенеджерЗаписи.Прочитать();
				Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
					РегистрСведенийМенеджерЗаписи.Удалить();
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ДатаАктуальности < ТекущаяДатаСеанса() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			
		Если НапоминанияОВходящихПисьмах Тогда
			
			КоличествоПисемУчетнойЗаписи = СоответствиеУчетныхЗаписейИКоличестваПисем.Получить(Выборка.УчетнаяЗапись);
			
			КоличествоПисемУчетнойЗаписи = ?(КоличествоПисемУчетнойЗаписи = Неопределено, 1, КоличествоПисемУчетнойЗаписи + 1);
			
			СоответствиеУчетныхЗаписейИКоличестваПисем.Вставить(Выборка.УчетнаяЗапись, КоличествоПисемУчетнойЗаписи);
			
			// Если количество напоминаний по учетной записи больше максимального, создаём одно общее напоминание.
			
			Если КоличествоПисемУчетнойЗаписи > МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписи Тогда			
				
				 Продолжить;
				 
			КонецЕсли; 
			
		КонецЕсли; 
		
		СтруктураНапоминания = Новый Структура;
		СтруктураНапоминания.Вставить("Важность", 		Выборка.Важность);
		СтруктураНапоминания.Вставить("ДатаНачала", 	Выборка.ДатаНачала);
		СтруктураНапоминания.Вставить("Предмет", 		Выборка.Предмет);
		СтруктураНапоминания.Вставить("Содержание", 	Выборка.Содержание);
		СтруктураНапоминания.Вставить("Пользователь", 	Выборка.Пользователь);
		СтруктураНапоминания.Вставить("ДатаОповещения",	Выборка.ДатаОповещения);
		СтруктураНапоминания.Вставить("Счетчик",		Выборка.Счетчик);
		СтруктураНапоминания.Вставить("ВидОповещения",	Выборка.ВидОповещения);
		// Определим срок исполнения
		СрокИсполнения = ВычислитьСрокИсполнения(Выборка);
		СтруктураНапоминания.Вставить("СрокИсполнения", СрокИсполнения);
		// Получим представление объекта.
		ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Выборка.Предмет);
		СтруктураНапоминания.Вставить("ПредметПредставление", ПредметПредставление);
		// Добавим партнера и контактное лицо.
		Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И ЗначениеЗаполнено(Выборка.ПредметБизнесПроцесс)
		И ТипЗнч(Выборка.ПредметБизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		
			Попытка
				Если ЗначениеЗаполнено(Выборка.ПредметБизнесПроцессПартнер) Тогда
					СтруктураНапоминания.Вставить("Партнер", 		Выборка.ПредметБизнесПроцессПартнер);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.ПредметБизнесПроцессКонтактноеЛицо) Тогда
					СтруктураНапоминания.Вставить("КонтактноеЛицо", 		Выборка.ПредметБизнесПроцессКонтактноеЛицо);
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		ИначеЕсли НапоминанияОВходящихПисьмах Тогда
			
			Если ЗначениеЗаполнено(Выборка.ОтправительКонтакт) Тогда
				
				Если ТипЗнч(Выборка.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			
					СтруктураНапоминания.Вставить("Партнер", Выборка.ОтправительКонтакт);
					
				ИначеЕсли  ТипЗнч(Выборка.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					СтруктураНапоминания.Вставить("КонтактноеЛицо",  Выборка.ОтправительКонтакт);
					СтруктураНапоминания.Вставить("Партнер", Выборка.ОтправительКонтакт.Владелец);
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураНапоминания.Вставить("УчетнаяЗапись", Выборка.УчетнаяЗапись);
		Иначе
			Попытка
				СтруктураНапоминания.Вставить("Партнер", 		Выборка.ПредметПартнер);
			Исключение
				Попытка
					СтруктураНапоминания.Вставить("Партнер", 		Выборка.ПредметCRM_Партнер);
				Исключение
				КонецПопытки;
			КонецПопытки;
			
			Попытка
				СтруктураНапоминания.Вставить("КонтактноеЛицо", 		Выборка.ПредметКонтактноеЛицо);
			Исключение
				Попытка
					СтруктураНапоминания.Вставить("КонтактноеЛицо", 		Выборка.ПредметCRM_КонтактноеЛицо);
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		
		МассивНапоминаний.Добавить(СтруктураНапоминания);
	КонецЦикла;
	
	Если НапоминанияОВходящихПисьмах Тогда
		
		Для каждого УчетнаяЗапись Из СоответствиеУчетныхЗаписейИКоличестваПисем Цикл
			
			Если УчетнаяЗапись.Значение > МаксимальноеКоличествоНапоминанийОднойУчетнойЗаписи Тогда
				
				ИндексТекущегоЭлементаМассива = 0;
				
				// Удалим напоминания этой учетной записи.
				
				Пока ИндексТекущегоЭлементаМассива < МассивНапоминаний.Количество() Цикл
					
					ТекущееНапоминание = МассивНапоминаний[ИндексТекущегоЭлементаМассива];
					
					Если ТекущееНапоминание.Свойство("УчетнаяЗапись") И ТекущееНапоминание.УчетнаяЗапись = УчетнаяЗапись.Ключ Тогда
					
						 МассивНапоминаний.Удалить(ИндексТекущегоЭлементаМассива);
						 
					Иначе
						 
						 ИндексТекущегоЭлементаМассива = ИндексТекущегоЭлементаМассива + 1;
					
					КонецЕсли; 
					
				КонецЦикла;
				
				// Создадим одно общее напоминание для этой учетной записи.
				
				ДатаОповещения = ТекущаяДатаСеанса();
				
				ТекстНапоминания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По учетной записи %1 новых писем: %2'"),
																						   УчетнаяЗапись.Ключ,
																						   УчетнаяЗапись.Значение);
						
				СтруктураНапоминания = Новый Структура;
				СтруктураНапоминания.Вставить("Важность", 		2);
				СтруктураНапоминания.Вставить("ДатаНачала", 	ДатаОповещения);
				СтруктураНапоминания.Вставить("Предмет", 		УчетнаяЗапись.Ключ);
				СтруктураНапоминания.Вставить("Содержание", 	ТекстНапоминания);
				СтруктураНапоминания.Вставить("Пользователь", 	Пользователи.ТекущийПользователь());
				СтруктураНапоминания.Вставить("ДатаОповещения",	ДатаОповещения);
				СтруктураНапоминания.Вставить("Счетчик",		0);
				СтруктураНапоминания.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
				// Определим срок исполнения
				СрокИсполнения = ВычислитьСрокИсполнения(СтруктураНапоминания);
				СтруктураНапоминания.Вставить("СрокИсполнения", СрокИсполнения);
				// Получим представление объекта.
				ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(УчетнаяЗапись.Ключ);
				СтруктураНапоминания.Вставить("ПредметПредставление", ПредметПредставление);			
				
				МассивНапоминаний.Добавить(СтруктураНапоминания);
			
			КонецЕсли;	
		
		КонецЦикла;		
		
	КонецЕсли;
	//++ VOG Иванов С.А. 15.10.2019 bugs: 752 
	Если ВсеНапоминания Тогда
		Возврат МассивНапоминаний;		
	КонецЕсли;
	//-- VOG Иванов С.А. 15.10.2019 bugs: 752
	
	//START Кайдашов 17/09/19 596
	К=0;
	Попытка
		Если ПараметрыСеанса.вогМассивНапоминаний.Количество()>0 тогда
			Пока К<МассивНапоминаний.Количество() цикл
				ЗН = МассивНапоминаний[К];
				Для каждого СтароеНапоминаниеСтрока из ПараметрыСеанса.вогМассивНапоминаний цикл
					СтароеНапоминание = ЗначениеИзСтрокиВнутр(СтароеНапоминаниеСтрока);
					Если СтароеНапоминание.Предмет = Зн.Предмет и СтароеНапоминание.Содержание = Зн.Содержание тогда
						МассивНапоминаний.Удалить(К);	
						К=К-1;
						Прервать;	
					КонецЕсли;
				КонецЦикла;
				К=К+1;
			КонецЦикла;
		КонецЕсли;
	Исключение
	КонецПопытки;
	МассивДляПараметраСеанса = Новый массив;
	Попытка
		Для каждого ЗН из ПараметрыСеанса.вогМассивНапоминаний цикл
			МассивДляПараметраСеанса.Добавить(ЗН);	
		КонецЦикла;
	Исключение
	КонецПопытки;
	Для каждого ЗН из МассивНапоминаний цикл
		МассивДляПараметраСеанса.Добавить(ЗначениеВСтрокуВнутр(ЗН));	
	КонецЦикла;
	
	ПараметрыСеанса.вогМассивНапоминаний = Новый ФиксированныйМассив(МассивДляПараметраСеанса);
	//END Кайдашов 596	
	
	Возврат МассивНапоминаний;
	
КонецФункции // ПолучитьНапоминания()

// Функция возвращает ответственного объекта напоминания.
//
// Параметры:
//	Объект				- Произвольный  - Объект напоминания.
//
// Возвращаемое значение:
//	СправочникСсылка.Пользователи	- Ответственный объекта напоминания.
//
Функция ПолучитьОтветственногоОбъектаНапоминания(Объект)
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПользователиКТ.Пользователь КАК Пользователь
		|ИЗ
		|	Документ.CRM_КонтрольнаяТочкаПроекта.ПользователиКТ КАК ПользователиКТ
		|ГДЕ
		|	ПользователиКТ.Ссылка = &Ссылка
		|	И ПользователиКТ.Ответственный = ИСТИНА
		|");
		Запрос.УстановитьПараметр("Ссылка", Объект);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Пользователь;
		Иначе
			Возврат Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		Возврат Объект.Менеджер;
	Иначе	
		Возврат Объект.Ответственный;
	КонецЕсли;
КонецФункции

// Процедура создает новое напоминание для объекта.
//
// Параметры:
//	Объект				- Произвольный  - Объект напоминания.
//	ТекстНапоминания	- Строка		- Текст напоминания.
//
Процедура ДобавитьНапоминание(Объект, ТекстНапоминания = Неопределено, ДопПараметры = Неопределено, ДатаНапоминания = Неопределено, ДляТекущего = Ложь) Экспорт
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		Если НЕ ДопПараметры = Неопределено Тогда
			Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
			Менеджер.Пользователь	= ДопПараметры.Пользователь;
			Менеджер.Предмет		= Объект;
			Менеджер.Содержание		= ТекстНапоминания;
			Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			
			Менеджер.ДатаНачала		= Объект.ПлановаяДата;
			Менеджер.ДатаОповещения	= ДопПараметры.ДатаОповещения;
			Менеджер.СрокОповещения	= ДопПараметры.СрокОповещения;
			Менеджер.Периодичность	= ДопПараметры.Периодичность;
			Менеджер.ВидОповещения	= ДопПараметры.ВидОповещения;
			Менеджер.ДатаАктуальности= ДопПараметры.ДатаАктуальности;
			Менеджер.Записать();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь		= Объект.Исполнитель;
		Менеджер.Предмет			= Объект;
		Менеджер.ДатаНачала			= ТекущаяДатаСеанса();
		Менеджер.ДатаОповещения		= ТекущаяДатаСеанса();
		Менеджер.Содержание			= ТекстНапоминания;
		Если ЗначениеЗаполнено(Объект.Важность) Тогда
			Если Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
				Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			ИначеЕсли Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
				Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
			Иначе
				Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Низкая;
			КонецЕсли;
		Иначе
			Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		КонецЕсли;		
		Менеджер.ДатаОповещения		= ДатаНапоминания;
		
		Если НЕ ДопПараметры = Неопределено Тогда
			Менеджер.Пользователь	= ДопПараметры.Пользователь;
			Менеджер.ДатаНачала		= Объект.Дата;
			Менеджер.ДатаОповещения	= ДопПараметры.ДатаОповещения;
			Менеджер.СрокОповещения	= ДопПараметры.СрокОповещения;
			Менеджер.Периодичность	= ДопПараметры.Периодичность;
			Менеджер.ВидОповещения	= ДопПараметры.ВидОповещения;
			Менеджер.ДатаАктуальности= ДопПараметры.ДатаАктуальности;
		КонецЕсли;
		Менеджер.Записать();
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Предмет		= Объект;
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Если ДопПараметры = Неопределено Тогда
			Менеджер.Пользователь		= сфпСофтФонПроСервер.сфпТекущийПользователь();
			Менеджер.ДатаНачала			= ДатаНапоминания;
			Менеджер.ДатаОповещения		= ДатаНапоминания;
			Менеджер.СрокОповещения		= Неопределено;
			Менеджер.Периодичность		= Неопределено;
			Менеджер.ВидОповещения		= Неопределено;
			Менеджер.ДатаАктуальности	= КонецДня(ДатаНапоминания);
		Иначе
			Менеджер.Пользователь		= ДопПараметры.Пользователь;
			Менеджер.ДатаНачала			= ДопПараметры.ДатаОповещения;
			Менеджер.ДатаОповещения		= ДопПараметры.ДатаОповещения;
			Менеджер.СрокОповещения		= ДопПараметры.СрокОповещения;
			Менеджер.Периодичность		= ДопПараметры.Периодичность;
			Менеджер.ВидОповещения		= ДопПараметры.ВидОповещения;
			Менеджер.ДатаАктуальности	= ДопПараметры.ДатаАктуальности;
		КонецЕсли;	
		Менеджер.Записать();
			
	ИначеЕсли (ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры")) ИЛИ (ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ?(ДопПараметры <> Неопределено, ДопПараметры.Пользователь, Пользователи.ТекущийПользователь());
		Менеджер.Предмет		= Объект;
		Менеджер.ДатаНачала		= ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаОповещения, ДатаНапоминания);
		Менеджер.ДатаОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаОповещения, ДатаНапоминания);
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.СрокОповещения, Неопределено);
		Менеджер.Периодичность	= ?(ДопПараметры <> Неопределено, ДопПараметры.Периодичность, Неопределено);
		Менеджер.ВидОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.ВидОповещения, Неопределено);
		Менеджер.ДатаАктуальности = ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаАктуальности, Неопределено);
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Менеджер.Записать();
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ОтчетОРаботе") 
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ПланированиеВоронкиПродаж") Тогда			
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ?(ДопПараметры <> Неопределено, ДопПараметры.Пользователь, Пользователи.ТекущийПользователь());
		Менеджер.Предмет		= Объект;
		Менеджер.ДатаНачала		= ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаОповещения, ДатаНапоминания);
		Менеджер.ДатаОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаОповещения, ДатаНапоминания);
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.СрокОповещения, Неопределено);
		Менеджер.Периодичность	= ?(ДопПараметры <> Неопределено, ДопПараметры.Периодичность, Неопределено);
		Менеджер.ВидОповещения	= ?(ДопПараметры <> Неопределено, ДопПараметры.ВидОповещения, Неопределено);
		Менеджер.ДатаАктуальности = ?(ДопПараметры <> Неопределено, ДопПараметры.ДатаАктуальности, Неопределено);
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Менеджер.Записать();		
	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОВходящемЭлектронномПисьме") Тогда
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ДопПараметры.ПолучательОповещения;
		Менеджер.Предмет		= Объект;
		Менеджер.ДатаНачала		= ДатаНапоминания;
		Менеджер.ДатаОповещения	= ДатаНапоминания;
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= Неопределено;
		Менеджер.Периодичность	= Неопределено;
		Менеджер.ВидОповещения	= Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах;
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Менеджер.Записать();
		
	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОНеотправленныхПисьмах") Тогда
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		Менеджер.Пользователь	= ДопПараметры.ПолучательОповещения;
		Менеджер.Предмет		= Объект;
		Менеджер.ДатаНачала		= ДатаНапоминания;
		Менеджер.ДатаОповещения	= ДатаНапоминания;
		Менеджер.Содержание		= ТекстНапоминания;
		Менеджер.СрокОповещения	= Неопределено;
		Менеджер.Периодичность	= Неопределено;
		//Менеджер.ВидОповещения	= Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах;
		Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		Менеджер.Записать();
		
	Иначе
		Если НЕ ДопПараметры = Неопределено И ДопПараметры.Свойство("ПроверятьВозможныеПовторыИзмерений") Тогда
			СтараяДатаОповещения = ДопПараметры.ДатаОповещения;
			Счетчик = 10;
			Пока Истина Цикл
				Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
				Менеджер.Предмет		= Объект;
				Менеджер.Пользователь	= ДопПараметры.Пользователь;
				Менеджер.ДатаНачала		= Объект.Дата;
				Менеджер.ДатаОповещения	= ДопПараметры.ДатаОповещения;
				
				Менеджер.Прочитать();
				Если Не Менеджер.Выбран() Тогда
					Прервать;
				КонецЕсли;
				
				ДопПараметры.ДатаОповещения = ДопПараметры.ДатаОповещения + 1;
				Счетчик = Счетчик - 1;
				Если Счетчик < 1 Тогда
					ДопПараметры.ДатаОповещения = СтараяДатаОповещения;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Менеджер = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		
		Если ДляТекущего Тогда
		
			Менеджер.Пользователь = Пользователи.ТекущийПользователь();	
		
		Иначе
		
			Менеджер.Пользователь = ПолучитьОтветственногоОбъектаНапоминания(Объект);
			
		КонецЕсли;		
		
		Менеджер.Предмет			= Объект;
		Менеджер.ДатаНачала			= ТекущаяДатаСеанса();
		Менеджер.ДатаОповещения		= ?(ДатаНапоминания <> Неопределено, ДатаНапоминания, ТекущаяДатаСеанса());
		Менеджер.Содержание			= ТекстНапоминания;
		Если Объект.Метаданные().Реквизиты.Найти("Важность")<>Неопределено Тогда
			Менеджер.Важность		= Объект.Важность;
		Иначе
			Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Менеджер.Важность) Тогда
			Менеджер.Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		КонецЕсли;			
		
		Если НЕ ДопПараметры = Неопределено Тогда
			Менеджер.Пользователь	= ДопПараметры.Пользователь;
			Менеджер.ДатаНачала		= Объект.Дата;
			Менеджер.ДатаОповещения	= ДопПараметры.ДатаОповещения;
			Менеджер.СрокОповещения	= ДопПараметры.СрокОповещения;
			Менеджер.Периодичность	= ДопПараметры.Периодичность;
			Менеджер.ВидОповещения	= ДопПараметры.ВидОповещения;
			Менеджер.ДатаАктуальности= ДопПараметры.ДатаАктуальности;
		КонецЕсли;
		
		Менеджер.Записать();
	КонецЕсли;
КонецПроцедуры // ДобавитьНапоминание()

// Процедура удаляет напоминание для объекта.
//
// Параметры:
//	Объект	- Произвольный  - Объект напоминания.
//
Процедура УдалитьНапоминание(Объект) Экспорт
	Набор = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Набор.Отбор.Пользователь.Установить(Объект.Исполнитель);
	Иначе
		Набор.Отбор.Пользователь.Установить(Объект.Ответственный);
	КонецЕсли;
	Набор.Отбор.Предмет.Установить(Объект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
КонецПроцедуры // УдалитьНапоминание()

// Функция возвращает период обновления напоминаний о новых входящих письмах в секундах.
//
Функция ПолучитьПериодОбновленияНапоминанийОВходящихПисьмах() Экспорт

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Или ТипЗнч(ТекущийПользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат 0;
	КонецЕсли;
	
	ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах;
	
	МассивПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийПользователь, ВидОповещения);
	
	Если ТипЗнч(МассивПараметрыОповещения) = Тип("Массив") Тогда
	
		ПараметрыОповещения = МассивПараметрыОповещения[0];	
		
	Иначе
		
		ПараметрыОповещения = Неопределено;
	
	КонецЕсли; 
	
	ПериодОбновления = 0;
	
	Если НЕ ПараметрыОповещения = Неопределено Тогда
		
		СрокОповещения = ПараметрыОповещения.СрокОповещения;
		Периодичность = ПараметрыОповещения.Периодичность;
		
		Если Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
			
			ПериодОбновления = СрокОповещения * 60;
		
		ИначеЕсли Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
			
			ПериодОбновления = СрокОповещения * 60 * 60;
			
		ИначеЕсли Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
			
			ПериодОбновления = СрокОповещения * 60 * 60 * 24;
			
		ИначеЕсли Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
			
			ПериодОбновления = СрокОповещения * 60 * 60 * 24 * 7;
			
		КонецЕсли; 
		
	КонецЕсли;	
	
	Возврат ПериодОбновления;
	
КонецФункции

// Функция возвращает текст напоминания о входящем электронном письме.
//
Функция ПолучитьТекстНапоминанияОВходящемПисьме(ЭлектронноеПисьмо)

	ТекстНапоминания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Новое письмо: %1 ""%2"" от %3 (%4)'"),
																			   ЭлектронноеПисьмо.ОтправительПредставление,
																			   ЭлектронноеПисьмо.Тема,
																			   ЭлектронноеПисьмо.Дата,
																			   ЭлектронноеПисьмо.УчетнаяЗапись);																			   
	
	Возврат ТекстНапоминания;	

КонецФункции // ПолучитьТекстНапоминанияОВходящемПисьме(ЭлектронноеПисьмо)
 
// Процедура создает напоминания о новых входящих письмах.
//
Процедура ДобавитьНапоминанияОВходящихПисьмах(МассивНовыхПисем, УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь) КАК КоличествоПользователей
	               |ПОМЕСТИТЬ ПочтаУчетнаяЗапись
	               |ИЗ
	               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	               |ГДЕ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь,
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения,
	               |	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
	               |	ВЫБОР
	               |		КОГДА ПочтаУчетнаяЗапись.КоличествоПользователей = 1
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПерсональнаяУчетнаяЗапись
	               |ИЗ
	               |	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПочтаУчетнаяЗапись КАК ПочтаУчетнаяЗапись
	               |			ПО CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = ПочтаУчетнаяЗапись.УчетнаяЗапись
	               |		ПО CRM_ОповещенияПользовательскиеНастройки.Пользователь = CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь
	               |ГДЕ
	               |	CRM_ОповещенияПользовательскиеНастройки.Напоминание
	               |	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения";
				   
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	ТаблицаПолучателейОповещений = Запрос.Выполнить().Выгрузить();
	
	ЭтоПерсональнаяУчетнаяЗапись = Ложь;
	
	ДатаСозданияНапоминаний = ТекущаяДатаСеанса();

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОВходящемЭлектронномПисьме", Истина);

	Если ТаблицаПолучателейОповещений.Количество() > 0 Тогда
		
		ПервыйПолучатель = ТаблицаПолучателейОповещений[0];
	
		ЭтоПерсональнаяУчетнаяЗапись = ПервыйПолучатель.ПерсональнаяУчетнаяЗапись;
		
		Если ЭтоПерсональнаяУчетнаяЗапись Тогда
			
			ДополнительныеПараметры.Вставить("ПолучательОповещения", ПервыйПолучатель.Пользователь);
			
			Для каждого НовоеПисьмо Из МассивНовыхПисем Цикл
				
				ТекстНапоминания = ПолучитьТекстНапоминанияОВходящемПисьме(НовоеПисьмо);
			
				ДобавитьНапоминание(НовоеПисьмо, ТекстНапоминания, ДополнительныеПараметры, ДатаСозданияНапоминаний); 
			
			КонецЦикла;			
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Если НЕ ЭтоПерсональнаяУчетнаяЗапись Тогда
		
		МассивПолучателей = ТаблицаПолучателейОповещений.ВыгрузитьКолонку("Пользователь");
		
		Для каждого НовоеПисьмо Из МассивНовыхПисем Цикл
			
			Если ЗначениеЗаполнено(НовоеПисьмо.ОтправительКонтакт) Тогда
				
				ОтправительПартнер = Неопределено;
				
				Если ТипЗнч(НовоеПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					
					ОтправительПартнер = НовоеПисьмо.ОтправительКонтакт;
					
				ИначеЕсли  ТипЗнч(НовоеПисьмо.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда 
					
					ОтправительПартнер = НовоеПисьмо.ОтправительКонтакт.Владелец;
					
				Иначе
					
					Продолжить;
				
				КонецЕсли;
				
				ОсновнойМенеджерОтправителя = ОтправительПартнер.ОсновнойМенеджер;
				
				Если ЗначениеЗаполнено(ОсновнойМенеджерОтправителя) Тогда
				
					Если Не МассивПолучателей.Найти(ОсновнойМенеджерОтправителя) = Неопределено Тогда
						
						ДополнительныеПараметры.Вставить("ПолучательОповещения", ОсновнойМенеджерОтправителя);
						
						ТекстНапоминания = ПолучитьТекстНапоминанияОВходящемПисьме(НовоеПисьмо);
			
						ДобавитьНапоминание(НовоеПисьмо, ТекстНапоминания, ДополнительныеПараметры, ДатаСозданияНапоминаний); 
					
					КонецЕсли; 
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает ключи напоминаний о входящих письмах польователя для учетной записи.
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись;
//  Пользователь - СправочникСсылка.Пользователи - пользователь;
//
// ВозвращаемоеЗначение:
//  Структура - ключ записи регистра сведений CRM_Напоминания. Поля:
//   Пользователь - СправочникСсылка.Пользователи;
//   Предмет - ДокументСсылка.ЭлектронноеПисьмоВходящее;
//   ДатаНачала - Дата;
//   ДатаОповещения - Дата;
//
Функция ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя(УчетнаяЗапись, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	CRM_Напоминания.Пользователь КАК Пользователь,
	              |	CRM_Напоминания.Предмет КАК Предмет,
	              |	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
	              |	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения
	              |ПОМЕСТИТЬ НапоминанияПользователя
	              |ИЗ
	              |	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	              |ГДЕ
	              |	CRM_Напоминания.ВидОповещения = &ВидОповещения
	              |	И CRM_Напоминания.Пользователь = &Пользователь
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	НапоминанияПользователя.Пользователь КАК Пользователь,
	              |	НапоминанияПользователя.Предмет КАК Предмет,
	              |	НапоминанияПользователя.ДатаНачала КАК ДатаНачала,
	              |	НапоминанияПользователя.ДатаОповещения КАК ДатаОповещения
	              |ИЗ
	              |	НапоминанияПользователя КАК НапоминанияПользователя
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	              |		ПО НапоминанияПользователя.Предмет = ЭлектронноеПисьмоВходящее.Ссылка
	              |ГДЕ
	              |	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись";
				  
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивКлючей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		КлючНапоминания = Новый Структура("Пользователь, Предмет, ДатаНачала, ДатаОповещения"); 
		
		ЗаполнитьЗначенияСвойств(КлючНапоминания, Выборка);
		
		МассивКлючей.Добавить(КлючНапоминания);		
	
	КонецЦикла;
	
	Возврат МассивКлючей;
	
КонецФункции// ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя()

// Функция возвращает текст напоминания о неотправленном электронном письме.
//
Функция ПолучитьТекстНапоминанияОНеотправленномПисьме(ЭлектронноеПисьмо)

	ТекстНапоминания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить письмо %1 ""%2"" от %3 (%4). Письмо перенесено в ""Черновики"". Проверьте адрес получателя и настройки учетной записи'"),
																			   ЭлектронноеПисьмо.ОтправительПредставление,
																			   ЭлектронноеПисьмо.Тема,
																			   ЭлектронноеПисьмо.Дата,
																			   ЭлектронноеПисьмо.УчетнаяЗапись);
	
	Возврат ТекстНапоминания;

КонецФункции // ПолучитьТекстНапоминанияОВходящемПисьме(ЭлектронноеПисьмо)

// Процедура создает напоминание автору письма о неотправленных письмах.
//
Процедура ДобавитьНапоминанияОНеотправленныхПисьмах(МассивПисем) Экспорт
	
	Для Каждого УчетнаяЗаписьИПисьма Из МассивПисем Цикл
		
		ТекущаяУчетнаяЗапись = УчетнаяЗаписьИПисьма.УчетнаяЗапись;
		
		Для Каждого АвторИПисьма Из УчетнаяЗаписьИПисьма.Письма Цикл
			Если НЕ ЗначениеЗаполнено(АвторИПисьма.Автор) Тогда Продолжить; КонецЕсли;
				
			ТекущийАвтор = АвторИПисьма.Автор;
			
			Если АвторИПисьма.Письма.Количество() > 5 Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ОповещениеОНеотправленныхПисьмах"	, Истина);
				ДополнительныеПараметры.Вставить("ПолучательОповещения"				, ТекущийАвтор);
				
				ТекстНапоминания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По учетной записи %1 не отправлено %2 писем. Письма перенесены в ""Черновики"". Проверьте адрес получателя и настройки учетной записи'"),
								   ТекущаяУчетнаяЗапись,
								   АвторИПисьма.Письма.Количество());
				
				ДобавитьНапоминание(ТекущаяУчетнаяЗапись, ТекстНапоминания, ДополнительныеПараметры, ТекущаяДатаСеанса());
			Иначе
				Для Каждого Письмо Из АвторИПисьма.Письма Цикл
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ОповещениеОНеотправленныхПисьмах"	, Истина);
					ДополнительныеПараметры.Вставить("ПолучательОповещения"				, ТекущийАвтор);
					
					ТекстНапоминания = ПолучитьТекстНапоминанияОНеотправленномПисьме(Письмо);
					
					ДобавитьНапоминание(Письмо, ТекстНапоминания, ДополнительныеПараметры, ТекущаяДатаСеанса());
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНапоминаниеОНовомИнтересе(Ссылка) Экспорт 

	ТекстНапоминания = "Создан новый интерес клиента " + ?(ЗначениеЗаполнено(Ссылка.Партнер), Ссылка.Партнер, Ссылка.ПотенциальныйКлиент);
	ДобавитьНапоминание(Ссылка, ТекстНапоминания, Неопределено, ТекущаяДатаСеанса());
	
КонецПроцедуры

// Функция удаляет напоминания о входящем письме.
//
Функция CRM_ПроверитьНапоминанияОПисьме(ВходящееПисьмо) Экспорт
	
	УдаленыНапоминания = Ложь;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Напоминания.Пользователь,
	               |	CRM_Напоминания.Предмет,
	               |	CRM_Напоминания.ДатаНачала,
	               |	CRM_Напоминания.ДатаОповещения
	               |ИЗ
	               |	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	               |ГДЕ
	               |	CRM_Напоминания.ВидОповещения = &ВидОповещения
	               |	И CRM_Напоминания.Предмет = &Предмет";
				   
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);				   
	Запрос.УстановитьПараметр("Предмет", ВходящееПисьмо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, Выборка);
		
		РегистрСведенийМенеджерЗаписи.Прочитать();
		
		Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
			РегистрСведенийМенеджерЗаписи.Удалить();
			
			УдаленыНапоминания = Истина;
			
		КонецЕсли;	

	КонецЕсли;
	
	Возврат УдаленыНапоминания;

КонецФункции// CRM_НапоминанияСервер.ПроверитьНапоминанияОПисьме(ПисьмоСсылка) Экспорт	

// функция проверяет было ли уже напоминание по указанному объекту
//
Функция ЕстьНапоминаниеПоОбъекту(Объект, ДопПараметры = Неопределено, ДляТекущего = Ложь) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Пользователь		= Объект.Исполнитель;
		Если НЕ ДопПараметры = Неопределено Тогда
			Пользователь	= ДопПараметры.Пользователь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		Если ДопПараметры = Неопределено Тогда
			Пользователь		= сфпСофтФонПроСервер.сфпТекущийПользователь();
		Иначе
			Пользователь		= ДопПараметры.Пользователь;
		КонецЕсли;	
			
	ИначеЕсли (ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры")) ИЛИ (ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда

		Пользователь	= ?(ДопПараметры <> Неопределено, ДопПараметры.Пользователь, Пользователи.ТекущийПользователь());
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ОтчетОРаботе") 
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_ПланированиеВоронкиПродаж") Тогда			
		
		Пользователь	= ?(ДопПараметры <> Неопределено, ДопПараметры.Пользователь, Пользователи.ТекущийПользователь());

	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОВходящемЭлектронномПисьме") Тогда
		
		Пользователь	= ДопПараметры.ПолучательОповещения;
		
	ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОповещениеОНеотправленныхПисьмах") Тогда
		
		Пользователь	= ДопПараметры.ПолучательОповещения;
		
	Иначе
		
		Если ДляТекущего Тогда
		
			Пользователь = Пользователи.ТекущийПользователь();	
		
		Иначе
		
			Пользователь = ПолучитьОтветственногоОбъектаНапоминания(Объект);
			
		КонецЕсли;		
		
		Если НЕ ДопПараметры = Неопределено Тогда
			Пользователь	= ДопПараметры.Пользователь;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Напоминания.Пользователь,
	                      |	CRM_Напоминания.Предмет
	                      |ИЗ
	                      |	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	                      |ГДЕ
	                      |	CRM_Напоминания.Пользователь = &Пользователь
	                      |	И CRM_Напоминания.Предмет = &Предмет");
						  
	Запрос.УстановитьПараметр("Предмет", Объект);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
