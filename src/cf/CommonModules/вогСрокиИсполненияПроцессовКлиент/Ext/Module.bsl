
// Открывает форму выбора срока для текущей строки таблицы Исполнители
//
// Параметры:
//  Параметры - Структура - см. ПараметрыВыбораСрокаУчастникаПроцесса
//
Процедура ВыбратьСрокУчастникаПроцесса(Параметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	
	Если Не ЗначениеЗаполнено(Параметры.Форма.ДатаОтсчетаДляРасчетаСроков)
		Или Параметры.Форма.ТекущийЭлемент.КнопкаВыбора = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтсчета = ДатаОтсчетаВФорме(Параметры.Форма);
	
	Если ТипЗнч(Параметры.СрокиПредшественников) = Тип("ДанныеФормыКоллекция") Тогда
		Для Каждого СтрокаСрок Из Параметры.СрокиПредшественников Цикл
			ДатаОтсчета = Макс(ДатаОтсчета, СтрокаСрок.СрокИсполнения);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Параметры.СрокиПредшественников) = Тип("Дата") Тогда
		ДатаОтсчета = Макс(ДатаОтсчета, Параметры.СрокиПредшественников);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершитьВыборСрокаУчастникаПроцесса", вогСрокиИсполненияПроцессовКлиент, Параметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исполнитель", Параметры.Участник);
	
	ОбъектФормы = Параметры.Форма;
	Если ЗначениеЗаполнено(Параметры.ИмяОбъектаФормы) Тогда
		ОбъектФормы = Параметры.Форма[Параметры.ИмяОбъектаФормы];
	КонецЕсли;
	ПараметрыФормы.Вставить("СрокИсполнения", ОбъектФормы[Параметры.ИмяРеквизитаСрокИсполнения]);
	
	// ++ VOG Ульянов И.В. 13.01.2020 CRM-139
	Если Параметры.Форма.ИмяФормы = "Документ.CRM_Мероприятие.Форма.ФормаДокумента" тогда
		ДатаОтсчета  = Дата(2019,1,1);
	КонецЕсли;
	// -- VOG Ульянов И.В. 13.01.2020 CRM-139
	
	ПараметрыФормы.Вставить("ДатаОтсчета", ДатаОтсчета);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы, Параметры.Форма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

		
// Возвращает дату отсчета определенную в форме процесса/шаблона с учетом
// настроек отложенного старта.
//
// Параметры:
//  Форма - УправляемаяФорма - форма процесса/шаблона.
//
Функция ДатаОтсчетаВФорме(Форма)
	
	ДатаОтсчета = ТекущаяДата();
	
	РеквизитыФормы = Новый Структура(
		"ДатаОтсчетаДляРасчетаСроков, НастройкаСтарта, ОтложенныйСтартДни, ОтложенныйСтартЧасы");
		
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	
	Если Форма.ДатаОтсчетаДляРасчетаСроков = Неопределено Тогда
		Возврат ДатаОтсчета;
	КонецЕсли;
	
	ДатаОтсчета = Форма.ДатаОтсчетаДляРасчетаСроков;
	
	Если РеквизитыФормы.НастройкаСтарта <> Неопределено Тогда
		Если РеквизитыФормы.НастройкаСтарта.ДатаОтложенногоСтарта > ДатаОтсчета Тогда
			ДатаОтсчета = РеквизитыФормы.НастройкаСтарта.ДатаОтложенногоСтарта;
		КонецЕсли;
	ИначеЕсли РеквизитыФормы.ОтложенныйСтартДни <> Неопределено
		И РеквизитыФормы.ОтложенныйСтартЧасы <> Неопределено Тогда
		
		ДатаОтсчета = ДатаОтсчета
			+ РеквизитыФормы.ОтложенныйСтартДни * 86400
			+ РеквизитыФормы.ОтложенныйСтартЧасы * 3600;
	КонецЕсли;
	
	Возврат ДатаОтсчета;
	
КонецФункции
	
// см. процедуруе ВыбратьСрокУчастникаПроцесса
Процедура ЗавершитьВыборСрокаУчастникаПроцесса(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ИмяОбъектаФормы = ДопПараметры.ИмяОбъектаФормы;
	ИмяРеквизитаСрокИсполнения = ДопПараметры.ИмяРеквизитаСрокИсполнения;
	ИмяРеквизитаСрокИсполненияДни = ДопПараметры.ИмяРеквизитаСрокИсполненияДни;
	ИмяРеквизитаСрокИсполненияЧасы = ДопПараметры.ИмяРеквизитаСрокИсполненияЧасы;
	ИмяРеквизитаСрокИсполненияМинуты = ДопПараметры.ИмяРеквизитаСрокИсполненияМинуты;
	ИмяРеквизитаПредставлениеСрока = ДопПараметры.ИмяРеквизитаПредставлениеСрока;
	НаименованиеСрокаУчастника = ДопПараметры.НаименованиеСрокаУчастника;
	
	ОбъектФормы = Форма;
	Если ЗначениеЗаполнено(ИмяОбъектаФормы) Тогда
		ОбъектФормы = Форма[ИмяОбъектаФормы];
	КонецЕсли;
	
	ОбъектФормы[ИмяРеквизитаСрокИсполнения] = РезультатВыбора;
	Если ЗначениеЗаполнено(ИмяРеквизитаСрокИсполненияДни) тогда
		ОбъектФормы[ИмяРеквизитаСрокИсполненияДни] = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяРеквизитаСрокИсполненияЧасы) тогда
		ОбъектФормы[ИмяРеквизитаСрокИсполненияЧасы] = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяРеквизитаСрокИсполненияМинуты) тогда
		ОбъектФормы[ИмяРеквизитаСрокИсполненияМинуты] = 0;
	КонецЕсли;
	
	Форма[ИмяРеквизитаПредставлениеСрока] = 
		вогСрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
		РезультатВыбора, 0, 0, 0, Истина);
	Попытка
		Форма.ОбновитьСрокиИсполненияОтложенно(НаименованиеСрокаУчастника);
	Исключение
	КонецПопытки;
	Форма.Модифицированность = Истина;
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Форма",Форма);
	ПараметрОповещения.Вставить("Реквизит",ИмяРеквизитаСрокИсполнения);
	
	Оповестить("ИзменениеСрока",ПараметрОповещения);
КонецПроцедуры


// Возвращает структуру доп. параметров для изменения срока по представлению.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессовКлиент.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессовКлиент.
//
// Возвращаемое значение:
//  Структура
//   * Форма - УправляемаяФорма - форма процесса или шаблона.
//   * Поле - Строка - наименования элемент управления сроком исполнения.
//   * НаименованиеИзмененногоРеквизита - Строка - наименование измененного реквизита.
//   * Исполнитель - СправочникСсылка.Пользователи,
//                   СправочникСсылка.РолиИсполнителей - исполнитель срок которого изменяется.
//
Функция ДопПараметрыДляИзмененияСрокаПоПредставлению() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("Поле", "");
	Параметры.Вставить("НаименованиеИзмененногоРеквизита", "");
	Параметры.Вставить("Исполнитель");
	
	Возврат Параметры;
	
КонецФункции


// Изменяет срок исполнения (точный или относительный) по представлению.
//
// Параметры:
//  Дата - Дата - срок исполнения датой (точный срок).
//  Дни - Число - относительный срок, дни.
//  Часы - Число - относительный срок, часы.
//  Минуты - Число - относительный срок, минуты.
//  Представление - Строка - представление срока строкой.
//  ДопПараметры - Структура - см. ДопПараметрыДляИзмененияСрокаПоПредставлению.
//
Процедура ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
	Дата, Дни, Часы, Минуты,Представление, ДопПараметры) Экспорт
	
	ДопПараметры.Вставить("ТекстСообщенияПредупреждения", "");
	
	ВПредставленииМожетБытьДата = ЗначениеЗаполнено(ДопПараметры.Форма.ДатаОтсчетаДляРасчетаСроков)
		И (ДопПараметры.Форма.ВозможенВыборТочнойДатыВСроках);
	
	ДопПараметры.Вставить("ВПредставленииМожетБытьДата", ВПредставленииМожетБытьДата);
	
	Если ИзменитьСрокИсполненияПоПредставлению(
		Дата, Дни, Часы, Минуты,Представление, ДопПараметры) Тогда
		
		// Определяем представление по относительному сроку
		Представление = вогСрокиИсполненияПроцессовКлиентСервер.ПраедставлениеСрокаИсполнения(
			Дата, Дни, Часы, Минуты,
			ДопПараметры.Форма.ИспользоватьДатуИВремяВСрокахЗадач);
			
		ДопПараметры.Форма.ОбновитьСрокиИсполненияОтложенно(
			ДопПараметры.НаименованиеИзмененногоРеквизита);
		
		ДопПараметры.Форма.Модифицированность = Истина;
		
		Если ЗначениеЗаполнено(ДопПараметры.ТекстСообщенияПредупреждения) Тогда
			ПоказатьПредупреждение(, ДопПараметры.ТекстСообщенияПредупреждения);
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ДопПараметры.ТекстСообщенияПредупреждения,,
			ДопПараметры.Поле);
		
	КонецЕсли;
	
КонецПроцедуры


// Изменить срок (точную дату или относительный срок) по предствлению.
//
// Параметры:
//  Дата - Дата - срок исполнения датой (точный срок).
//  Дни - Число - относительный срок, дни.
//  Часы - Число - относительный срок, часы.
//  Минуты - Число - относительный срок, минуты.
//  Представление - Строка - представление срока строкой.
//  ДопПараметры - Структура - структура вспомогательных параметров.
//   * ТекстСообщенияПредупреждения - Строка - возвращаемый текст сообщения/предупреждения в
//                                  случае ошибки.
//   * ВПредставленииМожетБытьДата - Булево - признак того, что в представлении может быть дата.
//
Функция ИзменитьСрокИсполненияПоПредставлению(
	Дата, Дни, Часы, Минуты, Представление, ДопПараметры) Экспорт
	
	Результат = Истина;
	
	// Если представление пустое, то очищаем все поля сроков
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Дата = Дата(1,1,1);
		Дни = 0;
		Часы = 0;
		Минуты = 0;
		
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = НСтр("ru = 'Срок задан некорректно.'");
	
	
	// Если есть разделитель даты и длительности, тогда разделяем представление на
	// длительность (ПредставлениеДлительности) и дату (ПредставлениеДаты), иначе
	// пытаемся обработать целиком представление и как длительность и как дату.
	Представление = СтрЗаменить(Представление, ")", "");
	ПредставлениеДлительности = Представление;
	ПредставлениеДаты = Представление;
	Если ДопПараметры.ВПредставленииМожетБытьДата Тогда
		Разделитель = "(";
		
		Если СтрНайти(Представление, Разделитель) Тогда
			ЧастиПредставления = СтрРазделить(Представление, Разделитель);
			КоличествоЧастейПредствления = ЧастиПредставления.Количество();
			Если КоличествоЧастейПредствления <> 2 Тогда
				ДопПараметры.ТекстСообщенияПредупреждения = ТекстСообщенияОбОшибке;
				Возврат Ложь;
			КонецЕсли;
			ПредставлениеДлительности = СокрЛП(ЧастиПредставления[1]);
			ПредставлениеДаты = СокрЛП(ЧастиПредставления[0]);
		КонецЕсли;
	КонецЕсли;
	
	// Определяем дату по представлению.
	НоваяДата = Дата(1,1,1);
	Если ДопПараметры.ВПредставленииМожетБытьДата Тогда
		НоваяДата = вогСрокиИсполненияПроцессовКлиентСервер.ДатаПоПредставлению(ПредставлениеДаты);
	КонецЕсли;
	
	// Определяем длительность по представлению.
	Длительность = 
		вогСрокиИсполненияПроцессовКлиентСервер.ДлительностьПоПредставлению(ПредставлениеДлительности);
	
	// Если по представлению не удалось определить ни длительность
	// ни дату, то выводим сообщение об ошибке.
	Если Не ЗначениеЗаполнено(Длительность) И Не ЗначениеЗаполнено(НоваяДата) Тогда
		ДопПараметры.ТекстСообщенияПредупреждения = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	// Если удалось определить и длительность и дату,
	// и они все отличаются от предыдущих значений, тогда выводим ошибку.
	// Измененным может быть либо длительность, либо дата.
	Если ЗначениеЗаполнено(Длительность)
		И (Дни <> Длительность.Дни Или Часы <> Длительность.Часы Или Минуты <> Длительность.Минуты)
		И ЗначениеЗаполнено(НоваяДата)
		И Дата <> НоваяДата Тогда
		
		ДопПараметры.ТекстСообщенияПредупреждения = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ДопПараметры.Форма.ИспользоватьДатуИВремяВСрокахЗадач;
	
	// Установка срока исполнения по новой дате
	Если ЗначениеЗаполнено(НоваяДата) И Дата <> НоваяДата Тогда
		
		
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			Дата = НоваяДата;
		Иначе
			Дата = Дата(Год(НоваяДата), Месяц(НоваяДата), День(НоваяДата));
			Дата = КонецДня(Дата);
		КонецЕсли;
		
		Дни = 0;
		Часы = 0;
		Минуты = 0;
		
	// Установка срока исполнения по новой длительности
	ИначеЕсли ЗначениеЗаполнено(Длительность)
		И (Длительность.Дни <> Дни
			Или Длительность.Часы <> Часы
			Или Длительность.Минуты <> Минуты) Тогда
		
		Дни = Длительность.Дни;
		Часы = Длительность.Часы;
		Минуты = Длительность.Минуты;
		
		Если Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
			Часы = 0;
			Минуты = 0;
		КонецЕсли;
		
		Дата = Дата(1,1,1);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Изменяет относительный срок (дни, часы, минуты) участника процесса.
// Если задана отрицательное значение параметра Длительность, то срок уменьшается.
//
// Параметры:
//   Форма - УправляемаяФорма - форма процесса или шаблона процесса
//   Длительность - Число - значение, на которое необходимо увеличить срок
//
Процедура ИзменитьОтносительныйСрокУчастникаПроцесса(Форма, Дата, Дни=0, Часы=0, Минуты=10,
	Представление,  Длительность,
	НаименованиеИзмененногоРеквизита = "") Экспорт
	
	ИзменитьОтносительныйСрок(Дни, Часы, Минуты, Длительность);
	
	// Определяем представление по относительному сроку
	Представление = вогСрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
		Дата, Дни, Часы, Минуты, Истина);
	
	попытка
		Форма.ОбновитьСрокиИсполненияОтложенно(НаименованиеИзмененногоРеквизита);
	Исключение
	Конецпопытки;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры


// Меняет относительный срок (дни, часы, минуты), добавляя переданную длительность.
// Если заполнены минуты, то меняются только минуты.
// Если минут нет и заполнены часы, то меняются только часы.
// Если заполнены только дни, то меняются только они.
//
// Параметры:
//  Дни, Часы, Минуты - Число - срок в днях, часах и минутах.
//  Длительность - Число - добавляемая длительность (1 или -1).
//                 Для уменьшения срока используется "-1", для увеличения "1".
//
Процедура ИзменитьОтносительныйСрок(Дни, Часы, Минуты, Длительность)
	
	Если ЗначениеЗаполнено(Минуты) Тогда
		Минуты = Минуты + Длительность;
	ИначеЕсли ЗначениеЗаполнено(Часы) Тогда
		Часы = Часы + Длительность;
	Иначе
		Дни = Дни + Длительность;
	КонецЕсли;
	
	Если Минуты > 59 Тогда
		Минуты = Минуты - 60;
		Часы = Часы + 1;
	КонецЕсли;
	
	Если Часы > 23 Тогда
		Часы = Часы - 23;
		Дни = Дни + 1;
	КонецЕсли;
	
	Если Дни > 999 Тогда
		Дни = 999;
	КонецЕсли;
	
КонецПроцедуры

