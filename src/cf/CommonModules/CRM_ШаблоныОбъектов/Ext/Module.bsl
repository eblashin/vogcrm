////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ///////////////////

// Функция возвращает менеджер документа.
//
Функция ПолучитьМенеджерДокумента(ОбъектОснование) Экспорт

	ИмяОбъекта = ОбъектОснование.Метаданные().Имя;
	Возврат Документы[ИмяОбъекта];

КонецФункции

// Функция возвращает менеджер справочника.
//
Функция ПолучитьМенеджерСправочника(ОбъектОснование) Экспорт

	ИмяОбъекта = ОбъектОснование.Метаданные().Имя;
	Возврат Справочники[ИмяОбъекта];

КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ШАБЛОНАМИ СЕРВЕР ///////////////////

Функция ВыгрузкаЗагрузкаШаблоновСформироватьСтруктуруВыбранныхРеквизитов(СписокРеквизитов)
	ШаблонныеРеквизиты = Новый Структура();
	Для каждого Строка Из СписокРеквизитов.Строки Цикл
		// Пропустим невыбранные реквизиты.
		Если Не Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		// Это реквизит или табличная часть?
		Если Строка.Строки.Количество() = 0 Тогда
			ШаблонныеРеквизиты.Вставить(Строка.ИмяРеквизита, Строка.Пометка);
		Иначе
			ШаблонныеРеквизиты.Вставить(Строка.ИмяРеквизита, ВыгрузкаЗагрузкаШаблоновСформироватьСтруктуруВыбранныхРеквизитов(Строка));
		КонецЕсли;
	КонецЦикла;
	Возврат ШаблонныеРеквизиты;
КонецФункции

// Функция возвращает имя объекта.
//
Функция ПолучитьИмяОбъекта(Объект)Экспорт

	ИмяОбъекта = Неопределено;
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	Возврат ИмяОбъекта

КонецФункции

Функция ЗаменитьТэгиНаСимволы(Значение = "") Экспорт
	
	Если НЕ Значение = "" Тогда
		Значение = СтрЗаменить(Значение, "#Символы.ПС#"		, Символы.ПС);
		Значение = СтрЗаменить(Значение, "#Символы.Таб#"	, Символы.Таб);
		Значение = СтрЗаменить(Значение, "#Символы.ВК#"		, Символы.ВК);
		Значение = СтрЗаменить(Значение, "#Символы.ВТаб#"	, Символы.ВТаб);
		Значение = СтрЗаменить(Значение, "#Символы.НПП#"	, Символы.НПП);
		Значение = СтрЗаменить(Значение, "#Символы.ПФ#"		, Символы.ПФ);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗаменитьСимволыНаТэги(Значение = "") Экспорт
	
	Если НЕ Значение = "" Тогда
		Значение = СтрЗаменить(Значение, Символы.ПС		, "#Символы.ПС#");
		Значение = СтрЗаменить(Значение, Символы.Таб	, "#Символы.Таб#");
		Значение = СтрЗаменить(Значение, Символы.ВК		, "#Символы.ВК#");
		Значение = СтрЗаменить(Значение, Символы.ВТаб	, "#Символы.ВТаб#");
		Значение = СтрЗаменить(Значение, Символы.НПП	, "#Символы.НПП#");
		Значение = СтрЗаменить(Значение, Символы.ПФ		, "#Символы.ПФ#");
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Функция выгружает реквизиты документа в шаблон.
//
Функция ВыгрузитьРеквизитыДокументаВШаблон(ДокументДляВыгрузки,ДеревоМетаданных) Экспорт
	
	Если ТипЗнч(ДокументДляВыгрузки) = Тип("Строка") Тогда
		ДанныеШаблона = ПолучитьИзВременногоХранилища(ДокументДляВыгрузки).ОбъектЗначение;
	Иначе
		ДанныеШаблона = ДокументДляВыгрузки;
	КонецЕсли;
	
	МетаданныеОбъекта = ДанныеШаблона.Метаданные();
	
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.УстановитьСтроку();
	ОбъектXML.ЗаписатьОбъявлениеXML();
	
	ОбъектXML.ЗаписатьНачалоЭлемента("ШаблонДокумента");
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	Для Каждого СтрокаДерева Из ДеревоМетаданных.Строки Цикл
		СтрокиСтрок = СтрокаДерева.Строки;
		// Это табличнаяЧасть
		Если (СтрокиСтрок.Количество() > 0) ИЛИ (СтрокаДерева.ИмяРеквизита = "ДополнительныеРеквизиты") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
			ОбъектXML.ЗаписатьТекст(СтрокаДерева.ИмяРеквизита);
			ИмяЧТ = СтрокаДерева.ИмяРеквизита;
			
			Для Каждого СтрокаТЧ Из ДанныеШаблона[ИмяЧТ] Цикл
				ОбъектXML.ЗаписатьНачалоЭлемента("СтрокаТЧ");
				
				Если НЕ ИмяЧТ = "ДополнительныеРеквизиты" Тогда
					Для Каждого СтрокаСтроки Из СтрокиСтрок Цикл
						ИмяРеквизита	= СтрокаСтроки.ИмяРеквизита;
						Значение		= СтрокаТЧ[ИмяРеквизита];
						
						Если ТипЗнч(Значение) = Тип("Строка") Тогда
							Значение = ЗаменитьСимволыНаТэги(Значение);
						КонецЕсли;
						
						ТипXML		= XMLТипЗнч(Значение);
						XMLСтрока	= XMLСтрока(Значение);
						
						ОбъектXML.ЗаписатьНачалоЭлемента(ИмяРеквизита);
						ОбъектXML.ЗаписатьАтрибут("Пометка",XMLСтрока(СтрокаСтроки.Пометка));
						Если ТипXML=Неопределено Тогда
							ОбъектXML.ЗаписатьАтрибут("Неопределено","");
						Иначе
							ОбъектXML.ЗаписатьАтрибут(ТипXML.ИмяТипа,ТипXML.URIПространстваИмен,XMLСтрока);
						КонецЕсли;
						ОбъектXML.ЗаписатьКонецЭлемента();
					КонецЦикла;
					ОбъектXML.ЗаписатьКонецЭлемента();
				Иначе
					Для Каждого РеквизитТЧ Из МетаданныеОбъекта.ТабличныеЧасти[ИмяЧТ].Реквизиты Цикл
						ИмяРеквизита	= РеквизитТЧ.Имя;
						Значение		= СтрокаТЧ[ИмяРеквизита];
						
						Если ТипЗнч(Значение) = Тип("Строка") Тогда
							Значение = ЗаменитьСимволыНаТэги(Значение);
						КонецЕсли;
						
						ТипXML		= XMLТипЗнч(Значение);
						XMLСтрока	= XMLСтрока(Значение);
						
						ОбъектXML.ЗаписатьНачалоЭлемента(ИмяРеквизита);
						ОбъектXML.ЗаписатьАтрибут("Пометка",XMLСтрока(СтрокаДерева.Пометка));
						Если ТипXML=Неопределено Тогда
							ОбъектXML.ЗаписатьАтрибут("Неопределено","");
						Иначе
							ОбъектXML.ЗаписатьАтрибут(ТипXML.ИмяТипа,ТипXML.URIПространстваИмен,XMLСтрока);
						КонецЕсли;
						ОбъектXML.ЗаписатьКонецЭлемента();
					КонецЦикла;
					ОбъектXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ОбъектXML.ЗаписатьКонецЭлемента();
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита	= СтрокаДерева.ИмяРеквизита;
		Значение		= ДанныеШаблона[ИмяРеквизита];
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = ЗаменитьСимволыНаТэги(Значение);
		КонецЕсли;
		
		ТипXML		= XMLТипЗнч(Значение);
		XMLСтрока	= XMLСтрока(Значение);
		
		ОбъектXML.ЗаписатьНачалоЭлемента(ИмяРеквизита);
		ОбъектXML.ЗаписатьАтрибут("Пометка",XMLСтрока(СтрокаДерева.Пометка));
		Если ТипXML=Неопределено Тогда
			ОбъектXML.ЗаписатьАтрибут("Неопределено","");
		Иначе
			ОбъектXML.ЗаписатьАтрибут(ТипXML.ИмяТипа,ТипXML.URIПространстваИмен,XMLСтрока);
		КонецЕсли;
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
	СтрокаРезультата = ОбъектXML.Закрыть();
	Возврат СтрокаРезультата;
	
КонецФункции

Функция ЗагрузитьРеквизитыДокументаИзШаблона(ДокументОбъект, Шаблон) Экспорт
	
	ДокументОбъект = Новый Структура;

	РеквизитыШапки = Новый Структура();
	ТабличныеЧасти = Новый Структура();
		
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ТипОбъекта);
	
	ПолныйПуть = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = Шаблон.ФайлХранилище.Получить();
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные.Записать(ПолныйПуть);
	КонецЕсли;
	
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ПолныйПуть);
	
	ЭтоТабЧасть		= Ложь;
	ИмяТЧ			= "";
	Пометка			= Ложь;
	ИмяРеквизита	= "";
	Значение		= Неопределено;
	СтрокаДерева	= Неопределено;
	Пока ФайлXML.Прочитать() Цикл
		
		Если ЭтоТабЧасть И ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ИмяТЧ = СокрЛП(ФайлXML.Значение);
			
			//Попытка
			//	СтрокаДерева.ПредставлениеРеквизита	= ОбъектМетаданных.ТабличныеЧасти[ИмяТЧ].Синоним;
			//Исключение
			//	СтрокаДерева.ПредставлениеРеквизита	= ИмяТЧ;
			// КонецПопытки;
			Попытка
				ДокументОбъект.Вставить(ИмяТЧ, Новый Структура());
			Исключение
			КонецПопытки;
			
		ИначеЕсли ФайлXML.Имя = "ТабличнаяЧасть" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			//СтрокаДерева = ДеревоМетаданных.Строки.Добавить();
			ЭтоТабЧасть = Истина;
			
		ИначеЕсли ФайлXML.Имя = "ТабличнаяЧасть" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЭтоТабЧасть	= Ложь;
			ИмяТЧ		= "";
			
		ИначеЕсли НЕ ФайлXML.Имя = "ШаблонДокумента" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.КоличествоАтрибутов() > 0 Тогда
			
			ИмяРеквизита = СокрЛП(ФайлXML.Имя);
			
			Пока ФайлXML.ПрочитатьАтрибут() Цикл
				
				Если ФайлXML.Имя = "Пометка" Тогда
					Пометка = XMLЗначение(Тип("Булево"), ФайлXML.Значение);
					
				Иначе
					Если ФайлXML.ЛокальноеИмя = "Неопределено" Тогда
						Значение = Неопределено;
					Иначе
						ТипЗначения = ИзXMLТипа(ФайлXML.ЛокальноеИмя, ФайлXML.URIПространстваИмен);
						Значение = XMLЗначение(ТипЗначения, ФайлXML.Значение);
					КонецЕсли;
					
					Если НЕ (ТипЗнч(Значение) = Тип("Неопределено")) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) И НЕ ОбщегоНазначения.СсылкаСуществует(Значение) Тогда
						МенеджерОбъекта	= ОбщегоНазначения.МенеджерОбъектаПоСсылке(Значение);
						Значение		= МенеджерОбъекта.ПустаяСсылка();
					КонецЕсли;
					
					Если ТипЗнч(Значение) = Тип("Строка") Тогда
						Значение = ЗаменитьТэгиНаСимволы(Значение);
					КонецЕсли;
					
					Если НЕ ЭтоТабЧасть Тогда
						ДокументОбъект.Вставить(ИмяРеквизита,Значение);
					Иначе
						ДокументОбъект[ИмяТЧ].Вставить(ИмяРеквизита,Значение);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НЕ ФайлXML.Имя = "ШаблонДокумента" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда // Пишем реквизит;
			
			Пометка			= Ложь;
			ИмяРеквизита	="";
			Значение		= Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлXML.Закрыть();
	
	// удалим временный файл
	ФайлНаДиске = Новый Файл(ПолныйПуть);
	ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПолныйПуть);
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьРеквизитыОбъектаПоШаблону(Объект, Шаблон)
	
	МетаданныеОбъекта	= Объект.Метаданные();
	ДеревоРеквизитов	= ВосстановитьДеревоРеквизитовОбъекта(Шаблон, Истина);
	
	Для Каждого СтрокаДерева Из ДеревоРеквизитов.Строки Цикл
		Если НЕ СтрокаДерева.Пометка Тогда Продолжить; КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			Если МетаданныеОбъекта.ТабличныеЧасти.Найти(СтрокаДерева.ИмяРеквизита) = Неопределено Тогда Продолжить; КонецЕсли;
			
			Попытка
				Объект[СтрокаДерева.ИмяРеквизита].Очистить();
			Исключение
			КонецПопытки;
			
			Для Каждого СтрокаСтроки Из СтрокаДерева.Строки Цикл
				НоваяСтрока = Объект[СтрокаДерева.ИмяРеквизита].Добавить();
				
				Для Каждого СтрокаРеквизита Из СтрокаСтроки.Строки Цикл
					Если НЕ МетаданныеОбъекта.ТабличныеЧасти[СтрокаДерева.ИмяРеквизита].Реквизиты.Найти(СтрокаРеквизита.ИмяРеквизита) = Неопределено Тогда
						Если МетаданныеОбъекта.ТабличныеЧасти[СтрокаДерева.ИмяРеквизита].Реквизиты[СтрокаРеквизита.ИмяРеквизита].Тип.СодержитТип(ТипЗнч(СтрокаРеквизита.Значение)) Тогда
							НоваяСтрока[СтрокаРеквизита.ИмяРеквизита] = СтрокаРеквизита.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Если НЕ МетаданныеОбъекта.Реквизиты.Найти(СтрокаДерева.ИмяРеквизита) = Неопределено Тогда
				Если МетаданныеОбъекта.Реквизиты[СтрокаДерева.ИмяРеквизита].Тип.СодержитТип(ТипЗнч(СтрокаДерева.Значение)) Тогда
					Объект[СтрокаДерева.ИмяРеквизита] = СтрокаДерева.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьДеревоРеквизитовОбъекта(Док)
	
	Если НЕ (ТипЗнч(Док) = Тип("Неопределено")) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Док)) Тогда
		ДокументОбъект = Док.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Док;
	КонецЕсли;
	ШаблонныеРеквизиты = Новый Структура();
	НеВключать = Новый Структура("Автор");
	// +СофтФон
	НеВключать.Вставить("сфпИдентификаторЗвонка");
	// -СофтФон
	ДеревоМетаданных = Новый ДеревоЗначений();
	ДеревоМетаданных.Колонки.Добавить("ИмяРеквизита");
	ДеревоМетаданных.Колонки.Добавить("ПредставлениеРеквизита");
	ДеревоМетаданных.Колонки.Добавить("ТипРеквизита");
	ДеревоМетаданных.Колонки.Добавить("Пометка",Новый ОписаниеТипов("Булево"));
	ДеревоМетаданных.Колонки.Добавить("Значение");
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ВсеСсылкиДокументов = Новый ОписаниеТипов(Документы.ТипВсеСсылки().Типы());
	
	СтрокаДереваТабличнаяЧасть = ДеревоМетаданных.Строки.Добавить();
	СтрокаДереваТабличнаяЧасть.ИмяРеквизита = "Дата";
	СтрокаДереваТабличнаяЧасть.ПредставлениеРеквизита = СтрокаДереваТабличнаяЧасть.ИмяРеквизита;
	СтрокаДереваТабличнаяЧасть.ТипРеквизита = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	Если ВсеСсылкиДокументов.СодержитТип(ТипЗнч(Док)) Тогда
		СтрокаДереваТабличнаяЧасть.Пометка = Ложь;
	Иначе
		СтрокаДереваТабличнаяЧасть.Пометка = Истина;
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Если Реквизит.Имя = "АдресХранилищаФайлов" Тогда
			Продолжить;
		КонецЕсли;
		//Если ЗначениеЗаполнено(Док[Реквизит.Имя]) И Не НеВключать.Свойство(Реквизит.Имя) Тогда
		Если Не НеВключать.Свойство(Реквизит.Имя) Тогда
			СтрокаДерева = ДеревоМетаданных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = Реквизит.Имя;
			СтрокаДерева.ПредставлениеРеквизита = ?(ЗначениеЗаполнено(Реквизит.Синоним),Реквизит.Синоним,Реквизит.Имя);
			СтрокаДерева.ТипРеквизита = Реквизит.Тип;
			СтрокаДерева.Значение = ДокументОбъект[Реквизит.Имя];
			СтрокаДерева.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если Док[ТабличнаяЧасть.Имя].Количество() > 0 Тогда
			СтрокаДереваТабличнаяЧасть				= ДеревоМетаданных.Строки.Добавить();
			СтрокаДереваТабличнаяЧасть.ИмяРеквизита	= ТабличнаяЧасть.Имя;
			СтрокаДереваТабличнаяЧасть.ПредставлениеРеквизита = ?(ЗначениеЗаполнено(ТабличнаяЧасть.Синоним),ТабличнаяЧасть.Синоним,ТабличнаяЧасть.Имя);
			//СтрокаДереваТабличнаяЧасть.ТипРеквизита = Тип("ТаблицаЗначений");
			СтрокаДереваТабличнаяЧасть.Пометка = Истина;
			
			Если НЕ ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Тогда
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					СтрокаДерева = СтрокаДереваТабличнаяЧасть.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = Реквизит.Имя;
					СтрокаДерева.ПредставлениеРеквизита = ?(ЗначениеЗаполнено(Реквизит.Синоним),Реквизит.Синоним,Реквизит.Имя);
					СтрокаДерева.ТипРеквизита = Реквизит.Тип;
					//СтрокаДерева.Значение = ДокументОбъект[ТабличнаяЧасть.Имя][Реквизит.Имя];
					СтрокаДерева.Пометка = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоМетаданных;
	
КонецФункции

Функция ВосстановитьДеревоРеквизитовОбъекта(Шаблон, ЗаполняемОбъект = Ложь)
	
	ДеревоМетаданных = Новый ДеревоЗначений();
	ДеревоМетаданных.Колонки.Добавить("ИмяРеквизита");
	ДеревоМетаданных.Колонки.Добавить("ПредставлениеРеквизита");
	ДеревоМетаданных.Колонки.Добавить("ТипРеквизита");
	ДеревоМетаданных.Колонки.Добавить("Пометка",Новый ОписаниеТипов("Булево"));
	ДеревоМетаданных.Колонки.Добавить("Значение");
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ТипОбъекта);
	
	ПолныйПуть = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = Шаблон.ФайлХранилище.Получить();
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные.Записать(ПолныйПуть);
	КонецЕсли;
	
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ПолныйПуть);
	
	ЭтоТабЧасть		= Ложь;
	ИмяТЧ			= "";
	Пометка			= Ложь;
	ИмяРеквизита	= "";
	Значение		= Неопределено;
	СтрокаДерева	= Неопределено;
	СтрокаСтроки	= Неопределено;
	ФлагПродолжить	= Ложь;
	Пока ФайлXML.Прочитать() Цикл
		
		Если ЭтоТабЧасть И ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ИмяТЧ = СокрЛП(ФайлXML.Значение);
			СтрокаДерева.ИмяРеквизита				= ИмяТЧ;
			Попытка
				СтрокаДерева.ПредставлениеРеквизита	= ОбъектМетаданных.ТабличныеЧасти[ИмяТЧ].Синоним;
			Исключение
				СтрокаДерева.ПредставлениеРеквизита	= ИмяТЧ;
			КонецПопытки;
			
		ИначеЕсли ФайлXML.Имя = "ТабличнаяЧасть" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			СтрокаДерева = ДеревоМетаданных.Строки.Добавить();
			ЭтоТабЧасть = Истина;
			ФлагПродолжить = Ложь;
			
		ИначеЕсли ФайлXML.Имя = "ТабличнаяЧасть" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЭтоТабЧасть	= Ложь;
			ИмяТЧ		= "";
			
		ИначеЕсли ФайлXML.Имя = "СтрокаТЧ" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЗаполняемОбъект Тогда
				СтрокаСтроки = СтрокаДерева.Строки.Добавить();
				ФлагПродолжить = Ложь;
			КонецЕсли;
			
		ИначеЕсли ФайлXML.Имя = "СтрокаТЧ" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если НЕ ЗаполняемОбъект Тогда
				ФлагПродолжить = Истина;
			КонецЕсли;
			
		ИначеЕсли НЕ ФайлXML.Имя = "ШаблонДокумента" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.КоличествоАтрибутов() > 0 Тогда
			
			ИмяРеквизита = СокрЛП(ФайлXML.Имя);
			
			Если НЕ ЭтоТабЧасть Тогда
				СтрокаДерева									= ДеревоМетаданных.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита						= ИмяРеквизита;
				Попытка
					СтрокаДерева.ПредставлениеРеквизита			= ОбъектМетаданных.Реквизиты[ИмяРеквизита].Синоним;
					СтрокаДерева.ТипРеквизита					= ОбъектМетаданных.Реквизиты[ИмяРеквизита].Тип;
				Исключение
					СтрокаДерева.ПредставлениеРеквизита			= ИмяРеквизита;
				КонецПопытки;
			Иначе
				
				Если ЗаполняемОбъект Тогда
					
					СтрокаДереваСтрокаТЧ							= СтрокаСтроки.Строки.Добавить();
					СтрокаДереваСтрокаТЧ.ИмяРеквизита				= ИмяРеквизита;
					Попытка
						СтрокаДереваСтрокаТЧ.ПредставлениеРеквизита	= ОбъектМетаданных.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Синоним;
						СтрокаДереваСтрокаТЧ.ТипРеквизита			= ОбъектМетаданных.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Тип;
					Исключение
						СтрокаДереваСтрокаТЧ.ПредставлениеРеквизита	= ИмяРеквизита;
					КонецПопытки;
					
				ИначеЕсли НЕ ФлагПродолжить И НЕ ИмяТЧ = "ДополнительныеРеквизиты" Тогда
					СтрокаДереваСтрокаТЧ							= СтрокаДерева.Строки.Добавить();
					СтрокаДереваСтрокаТЧ.ИмяРеквизита				= ИмяРеквизита;
					Попытка
						СтрокаДереваСтрокаТЧ.ПредставлениеРеквизита	= ОбъектМетаданных.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Синоним;
						СтрокаДереваСтрокаТЧ.ТипРеквизита			= ОбъектМетаданных.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Тип;
					Исключение
						СтрокаДереваСтрокаТЧ.ПредставлениеРеквизита	= ИмяРеквизита;
					КонецПопытки;
					
				КонецЕсли;
			КонецЕсли;
				
			Пока ФайлXML.ПрочитатьАтрибут() Цикл
				
				Если ФайлXML.Имя = "Пометка" Тогда
					Пометка = XMLЗначение(Тип("Булево"), ФайлXML.Значение);
					
					Если НЕ ЭтоТабЧасть Тогда
						СтрокаДерева.Пометка		= Пометка;
					Иначе
						Если НЕ СтрокаДерева.Пометка И Пометка Тогда
							СтрокаДерева.Пометка = Пометка;
						КонецЕсли;
						
						Если ЗаполняемОбъект ИЛИ (НЕ ФлагПродолжить И НЕ ИмяТЧ = "ДополнительныеРеквизиты") Тогда
							СтрокаДереваСтрокаТЧ.Пометка= Пометка;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					Если ЗаполняемОбъект ИЛИ (НЕ ФлагПродолжить И НЕ ИмяТЧ = "ДополнительныеРеквизиты") Тогда
						Если ФайлXML.ЛокальноеИмя = "Неопределено" Тогда
							Значение = Неопределено;
						Иначе
							ТипЗначения = ИзXMLТипа(ФайлXML.ЛокальноеИмя, ФайлXML.URIПространстваИмен);
							Значение = XMLЗначение(ТипЗначения, ФайлXML.Значение);
						КонецЕсли;
						
						Если НЕ (ТипЗнч(Значение) = Тип("Неопределено")) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) И НЕ ОбщегоНазначения.СсылкаСуществует(Значение) Тогда
							МенеджерОбъекта	= ОбщегоНазначения.МенеджерОбъектаПоСсылке(Значение);
							Значение		= МенеджерОбъекта.ПустаяСсылка();
						КонецЕсли;
						
						Если ТипЗнч(Значение) = Тип("Строка") Тогда
							Значение = ЗаменитьТэгиНаСимволы(Значение);
						КонецЕсли;
						
						Если НЕ ЭтоТабЧасть Тогда
							СтрокаДерева.Значение			= Значение;
						ИначеЕсли ЗаполняемОбъект Тогда
							СтрокаДереваСтрокаТЧ.Значение	= Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
		ИначеЕсли НЕ ФайлXML.Имя = "ШаблонДокумента" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда // Пишем реквизит;
			
			Пометка			= Ложь;
			ИмяРеквизита	="";
			Значение		= Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлXML.Закрыть();
	
	// удалим временный файл
	ФайлНаДиске = Новый Файл(ПолныйПуть);
	ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПолныйПуть);
	
	Возврат ДеревоМетаданных;
	
КонецФункции

// Функция возвращает дерево реквизитов.
//
Функция ПолучитьДеревоРеквизитов(Объект = Неопределено, Шаблон = Неопределено) Экспорт
	
	Если НЕ Объект = Неопределено Тогда
		Возврат ПолучитьДеревоРеквизитовОбъекта(Объект);
	КонецЕсли;
	
	Если НЕ Шаблон = Неопределено Тогда
		Возврат ВосстановитьДеревоРеквизитовОбъекта(Шаблон);
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////

// Функция обновляет шаблон
//
Функция ОбновитьШаблон(Шаблон,ДеревоМетаданных) Экспорт
	
	ПолныйПуть = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = Шаблон.ФайлХранилище.Получить();
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные.Записать(ПолныйПуть);
	КонецЕсли;
	
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.УстановитьСтроку();
	ОбъектXML.ЗаписатьОбъявлениеXML();
	
	ОбъектXML.ЗаписатьНачалоЭлемента("ШаблонДокумента");
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ПолныйПуть);
	
	ЭтоТабЧасть		= Ложь;
	ИмяТЧ			= "";
	Пометка			= Ложь;
	ИмяРеквизита	= "";
	Значение		= Неопределено;
	СтрокаДерева	= Неопределено;
	СтрокаСтроки	= Неопределено;
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.Имя = "ШаблонДокумента" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Продолжить;
			
		ИначеЕсли ФайлXML.Имя = "ТабличнаяЧасть" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ЭтоТабЧасть = Истина;
			
		ИначеЕсли ФайлXML.Имя = "ТабличнаяЧасть" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЭтоТабЧасть	= Ложь;
			ИмяТЧ		= "";
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
		ИначеЕсли ЭтоТабЧасть И ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ИмяТЧ = СокрЛП(ФайлXML.Значение);
			
			ОбъектXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
			ОбъектXML.ЗаписатьТекст(ИмяТЧ);
			
		ИначеЕсли ФайлXML.Имя = "СтрокаТЧ" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ОбъектXML.ЗаписатьНачалоЭлемента("СтрокаТЧ");
			
		ИначеЕсли ФайлXML.Имя = "СтрокаТЧ" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
		ИначеЕсли НЕ ФайлXML.Имя = "ШаблонДокумента" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.КоличествоАтрибутов() > 0 Тогда
			
			ИмяРеквизита = СокрЛП(ФайлXML.Имя);
			
			МассивСтрокДерева = ДеревоМетаданных.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита",ИмяРеквизита), Истина);
			
			Если ЭтоТабЧасть И ИмяТЧ = "ДополнительныеРеквизиты" Тогда
				СтрокаДерева	= ДеревоМетаданных.Строки.Найти(ИмяТЧ,"ИмяРеквизита");
				Пометка			= СтрокаДерева.Пометка;
			Иначе
				Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
					Если ЭтоТабЧасть И СтрокаДерева.Родитель = Неопределено Тогда
						Продолжить;
					ИначеЕсли НЕ ЭтоТабЧасть И (НЕ СтрокаДерева.Родитель = Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					
					Пометка		= СтрокаДерева.Пометка;
					Значение	= СтрокаДерева.Значение;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
			Если ЭтоТабЧасть Тогда
				Пока ФайлXML.ПрочитатьАтрибут() Цикл
					
					Если ФайлXML.Имя = "Пометка" Тогда
						Продолжить;
					КонецЕсли;
					
					Если ФайлXML.ЛокальноеИмя = "Неопределено" Тогда
						Значение = Неопределено;
					Иначе
						ТипЗначения = ИзXMLТипа(ФайлXML.ЛокальноеИмя, ФайлXML.URIПространстваИмен);
						Значение = XMLЗначение(ТипЗначения, ФайлXML.Значение);
					КонецЕсли;
					
					Если НЕ (ТипЗнч(Значение) = Тип("Неопределено")) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) И НЕ ОбщегоНазначения.СсылкаСуществует(Значение) Тогда
						МенеджерОбъекта	= ОбщегоНазначения.МенеджерОбъектаПоСсылке(Значение);
						Значение		= МенеджерОбъекта.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				Значение = ЗаменитьСимволыНаТэги(Значение);
			КонецЕсли;
			
			ТипXML		= XMLТипЗнч(Значение);
			XMLСтрока	= XMLСтрока(Значение);
			
			ОбъектXML.ЗаписатьНачалоЭлемента(ИмяРеквизита);
			ОбъектXML.ЗаписатьАтрибут("Пометка",XMLСтрока(Пометка));
			Если ТипXML=Неопределено Тогда
				ОбъектXML.ЗаписатьАтрибут("Неопределено","");
			Иначе
				ОбъектXML.ЗаписатьАтрибут(ТипXML.ИмяТипа,ТипXML.URIПространстваИмен,XMLСтрока);
			КонецЕсли;
			ОбъектXML.ЗаписатьКонецЭлемента();
			
		ИначеЕсли НЕ ФайлXML.Имя = "ШаблонДокумента" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Пометка			= Ложь;
			ИмяРеквизита	="";
			Значение		= Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	ОбъектXML.ЗаписатьКонецЭлемента();
	
	ФайлXML.Закрыть();
	
	// удалим временный файл
	ФайлНаДиске = Новый Файл(ПолныйПуть);
	ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПолныйПуть);
	
	
	СтрокаРезультата = ОбъектXML.Закрыть();
	Возврат СтрокаРезультата;
	
КонецФункции

// Функция возвращает шаблон
//
Функция ПолучитьШаблон(Владелец,ИмяМетаданного) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	CRM_ШаблоныОбъектов.Ссылка КАК ШаблонОбъектаСсылка,
	|	CRM_ШаблоныОбъектов.Наименование КАК НаименованиеШаблона,
	|	CRM_ШаблоныОбъектов.ИмяОбъекта,
	|	Файлы.Ссылка КАК ПрисоединенныйФайлСсылка,
	|	Файлы.Наименование КАК НаименованиеФайла
	|ИЗ
	|	Справочник.CRM_ШаблоныОбъектовПрисоединенныеФайлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_ШаблоныОбъектов КАК CRM_ШаблоныОбъектов
	|		ПО Файлы.ВладелецФайла = CRM_ШаблоныОбъектов.Ссылка
	|ГДЕ
	|	CRM_ШаблоныОбъектов.ИмяОбъекта = &ИмяМетаданногоОбъекта
	|	И Файлы.Наименование = &ИмяШаблона
	|	И Файлы.Расширение = &Расширение";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИмяМетаданногоОбъекта", ИмяМетаданного);
	Запрос.УстановитьПараметр("ИмяШаблона", "шоШаблонОбъекта");
	Запрос.УстановитьПараметр("Расширение", "xml");
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьОбъектПоШаблону(Объект,ШаблонСсылка)
	
	ЗаполнитьРеквизитыОбъектаПоШаблону(Объект, ШаблонСсылка);
	
	Попытка
		Объект.Шаблон = ШаблонСсылка;
	Исключение
	КонецПопытки;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Подписки на события
 

// Процедура обработчик заполнения шаблона объекта.
//
Процедура ШаблонОбъектовОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ЭтоСобытие = (ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.УдалитьCRM_Событие"));
	ПроектСобытия = Справочники.Проекты.ПустаяСсылка();
	ДатаСобытия = Дата("00010101");
	ДатаОкончанияСобытия = Дата("00010101");
	Если ЭтоСобытие Тогда
		
		ПроектСобытия = Источник.Проект;
		ДатаСобытия = Источник.Дата;
		ДатаОкончанияСобытия = Источник.ОкончаниеСобытия;
		
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ШаблонОбъекта") Тогда
		
		ШаблонОбъекта = ДанныеЗаполнения.ШаблонОбъекта;
		ВыбранныйШаблон = ШаблонОбъекта.ВыбранныйШаблон;
		
		ЗаполнитьОбъектПоШаблону(Источник,ВыбранныйШаблон);
		
		Если ДанныеЗаполнения.Свойство("ДополнительныеДанные")
			 И ТипЗнч(ДанныеЗаполнения.ДополнительныеДанные) = Тип("Структура")
			Тогда
			
			ДополнительныеДанные = ДанныеЗаполнения.ДополнительныеДанные;
			
			Если ДополнительныеДанные.Свойство("Источник") 
				 И ТипЗнч(ДополнительныеДанные.Источник) = Тип("ДокументСсылка.CRM_Телемаркетинг")
				 И ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.УдалитьCRM_Событие")
				Тогда
				
				Источник.Партнер = ?(ДополнительныеДанные.Свойство("Партнер"),ДополнительныеДанные.Партнер,Справочники.Партнеры.ПустаяСсылка());
				Источник.КонтактноеЛицо = ?(ДополнительныеДанные.Свойство("КонтактноеЛицо"),ДополнительныеДанные.КонтактноеЛицо,Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
				
				Если ЗначениеЗаполнено(Источник.Партнер) Тогда
					ОсновнойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					Если ЗначениеЗаполнено(Источник.Организация) Тогда
						
						ОсновнойДоговор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Источник.Партнер, Источник.Организация);
						
					Иначе
						
						ОснОрганизация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
						Если ЗначениеЗаполнено(ОснОрганизация) Тогда
						
							ОсновнойДоговор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Источник.Партнер,ОснОрганизация);
						
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
							
							Источник.Договор = ОсновнойДоговор;
							
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроверитьСуществованиеРеквизита("Тема",Источник.Ссылка) Тогда
		
			Если Не ЗначениеЗаполнено(Источник.Тема) Тогда
			
				Источник.Тема = ВыбранныйШаблон.Наименование;
			
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	Если ЭтоСобытие Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ШаблонОбъекта") Тогда
		Иначе
			Источник.Проект = ПроектСобытия;
		КонецЕсли;
		Источник.Дата = ДатаСобытия;
		Источник.ОкончаниеСобытия = ДатаОкончанияСобытия;
		
	КонецЕсли;

КонецПроцедуры

// Процедура обработчик события ПередЗаписью шаблона объекта.
//
Процедура CRM_ШаблонОбъектовПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.Ссылка.Пустая());
	
КонецПроцедуры

// Процедура обработчик события ПриЗаписи шаблона объекта.
//
Процедура CRM_ШаблонОбъектовПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		Попытка
			Шаблон = Источник.Шаблон;
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Шаблон, Источник.Ссылка);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Функции вызываемые из форм

// Функция возвращает имя формы.
//
Функция ПолучитИмяФормы(ШаблонСсылка) Экспорт
	ТипОбъекта = ШаблонСсылка.ТипОбъекта;
	Если ЗначениеЗаполнено(ТипОбъекта) Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ТипОбъекта);
		
		ИмяФормыОбъекта = ОбъектМетаданных.ОсновнаяФормаОбъекта.ПолноеИмя();
		
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			
			Если ТипОбъекта = "Документ.КоммерческоеПредложениеКлиенту" Тогда
				
				ИмяФормыОбъекта = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаДокумента";	
			
			КонецЕсли; 
			
		КонецЕсли;
		
		Возврат ИмяФормыОбъекта;
		
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Функция заполняет представление объекта.
//
Функция ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ПредставлениеОбъекта,ОписаниеРеквизитов) Экспорт
	
	ЗаполнитьРеквизитыОбъектаПоШаблону(ПредставлениеОбъекта, ШаблонОбъект);
	
КонецФункции

// Процедура формирует дополнительные элементы формы.
//
Процедура СформироватьДополнительныеЭлементыФормы(Форма) Экспорт
	
	ЗагрузкаИзШаблона	= "ЗагрузитьИзШаблона";
	ВыгрузитьВШаблон	= "ВыгрузитьВШаблон";
	ГруппаФормы = Форма.Элементы.Найти("ГруппаШаблоны");
	Если ГруппаФормы = Неопределено Тогда
		ГруппаФормы = Форма.Элементы.Добавить("ГруппаШаблоны",Тип("ГруппаФормы"), Форма.КоманднаяПанель);
		ГруппаФормы.Вид = ВидГруппыФормы.Подменю;
		ГруппаФормы.Заголовок = НСтр("ru='Шаблоны'");
	КонецЕсли;
	
	ИмяКомандыЗагрузки = "Команда_" + ЗагрузкаИзШаблона;
	Если Форма.Команды.Найти(ИмяКомандыЗагрузки) = Неопределено Тогда
	
		Команда = Форма.Команды.Добавить(ИмяКомандыЗагрузки);
		Команда.Действие = "Подключаемый_" + ЗагрузкаИзШаблона;
		Команда.Заголовок = НСтр("ru='Заполнить из шаблона'");
		Команда.Подсказка = НСтр("ru='Заполнить документ на основании ранее сохраненного шаблона'");
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Команда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.T, Истина, Ложь, Ложь);
	
	КонецЕсли;
	
	ИмяКнопки = "_" + ЗагрузкаИЗШаблона;
	Если Форма.Элементы.Найти(ИмяКнопки) = Неопределено Тогда
		КнопкаЗагрузкиИзШаблона = Форма.Элементы.Добавить(ИмяКнопки,Тип("КнопкаФормы"), ГруппаФормы);
		КнопкаЗагрузкиИзШаблона.ИмяКоманды = ИмяКомандыЗагрузки;
		КнопкаЗагрузкиИзШаблона.ТолькоВоВсехДействиях = Истина;
		КнопкаЗагрузкиИзШаблона.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	ИмяКомандыВыгрузки = "Команда_" + ВыгрузитьВШаблон;
	Если Форма.Команды.Найти(ИмяКомандыВыгрузки) = Неопределено Тогда
		
		Команда = Форма.Команды.Добавить(ИмяКомандыВыгрузки);
		Команда.Действие = "Подключаемый_" + ВыгрузитьВШаблон;
		Команда.Заголовок = НСтр("ru='Выгрузить в шаблон'");
		Команда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.T, Ложь, Истина, Ложь);		
		
	КонецЕсли;
	ИмяКнопки = "_" + ВыгрузитьВШаблон;
	Если Форма.Элементы.Найти(ИмяКнопки) = Неопределено Тогда
	
		КнопкаВыгрузкиВШаблон = Форма.Элементы.Добавить(ИмяКнопки,Тип("КнопкаФормы"), ГруппаФормы);
		КнопкаВыгрузкиВШаблон.ИмяКоманды = ИмяКомандыВыгрузки;
		КнопкаВыгрузкиВШаблон.ТолькоВоВсехДействиях = Истина;
	
	КонецЕсли;
	
	ГруппаФормы = Форма.Элементы.Найти("ГруппаШаблоныСпец");
	Если НЕ (ГруппаФормы = Неопределено) Тогда
		
		ИмяКнопкиЗагрузкиВГруппе = "_" + ЗагрузкаИЗШаблона + "_1";
		
		Если Форма.Элементы.Найти(ИмяКнопкиЗагрузкиВГруппе) = Неопределено Тогда
			
			КнопкаЗагрузкиИзШаблона = Форма.Элементы.Добавить(ИмяКнопкиЗагрузкиВГруппе, Тип("КнопкаФормы"), ГруппаФормы);
			КнопкаЗагрузкиИзШаблона.ИмяКоманды = ИмяКомандыЗагрузки;
			КнопкаЗагрузкиИзШаблона.ТолькоВоВсехДействиях = Ложь;
			КнопкаЗагрузкиИзШаблона.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КнопкаЗагрузкиИзШаблона.Заголовок = НСтр("ru='Заполнить из шаблона'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет существование реквизита.
//
Функция ПроверитьСуществованиеРеквизита(ИмяРеквизита,Ссылка) Экспорт

	Рез = Ложь;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Ссылка) Тогда
	
		МетаданныеОбъекта = Ссылка.Метаданные();
		НайденныйРеквизит = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
		Рез = ?(НайденныйРеквизит = Неопределено,Ложь,Истина);
	КонецЕсли;
	Возврат Рез;

КонецФункции