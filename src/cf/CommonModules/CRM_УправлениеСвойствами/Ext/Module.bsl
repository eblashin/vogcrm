////////////////////////////////////////////////////////////////////////////////
// Подсистема "Свойства"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для стандартной обработки дополнительных реквизитов.

// Создает основные реквизиты и поля формы, необходимые для работы.
// Заполняет дополнительные реквизиты, если используются.
// Вызывается из обработчика ПриСозданииНаСервере формы объекта со свойствами.
// 
// Параметры:
//  Форма - УправляемаяФорма - в которой будут отображаться дополнительные реквизиты.
//
//  ДополнительныеПараметры - Неопределено - все дополнительные параметры имеют значения по умолчанию.
//                               Ранее реквизит назывался "Объект" и имел смысл,
//                               как одноименное свойство структуры, указанной ниже.
//                          - Структура - с необязательными свойствами:
//
//    * Объект - ДанныеФормыСтруктура - по типу объекта, если свойство не указано или Неопределено,
//               взять объект из реквизита формы "Объект".
//
//    * ИмяЭлементаДляРазмещения - Строка - имя группы формы, в которой будут размещены свойства.
//
//    * ПроизвольныйОбъект - Булево - если Истина, тогда в форме создается таблица описания дополнительных
//            реквизитов параметр Объект игнорируется, дополнительные реквизиты не создаются и не заполняются.
//
//            Это востребовано при последовательном использовании одной формы для просмотра или редактирования
//            дополнительных реквизитов разных объектов (в том числе разных типов).
//
//            После выполнения ПриСозданииНаСервере следует вызывать ЗаполнитьДополнительныеРеквизитыВФорме()
//            для добавления и заполнения дополнительных реквизитов.
//            Чтобы сохранить изменения следует вызвать ПеренестиЗначенияИзРеквизитовФормыВОбъект(),
//            а для обновления состава реквизитов вызвать ОбновитьЭлементыДополнительныхРеквизитов().
//
//    * ИмяЭлементаКоманднойПанели - Строка - имя группы формы, в которую будет добавлена кнопка.
//            РедактироватьСоставДополнительныхРеквизитов. Если имя элемента не указано,
//            используется стандартная группа "Форма.КоманднаяПанель".
//
//    * СкрытьУдаленные - Булево - установить/отключить режим скрытия удаленных.
//            Если параметр не указан, а параметр объект указан и свойство Ссылка не заполнено,
//            тогда начальное значение устанавливается Истина, иначе Ложь.
//            При вызове процедуры ПередЗаписьюНаСервере в режиме скрытия удаленных, удаленные значения
//            очищаются (не переносятся обратно в объект), а режим СкрытьУдаленные устанавливается Ложь.
//
Процедура ПриСозданииНаСервере(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ИспользуютсяСвойства(Форма, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Объект",                     Неопределено);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "");
	Контекст.Вставить("ОтложеннаяИнициализация",    Ложь);
	Контекст.Вставить("ПроизвольныйОбъект",         Ложь);
	Контекст.Вставить("ИмяЭлементаКоманднойПанели", "");
	Контекст.Вставить("СкрытьУдаленные",            Неопределено);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Контекст, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Контекст.ПроизвольныйОбъект Тогда
		СоздатьОписаниеДополнительныхРеквизитов = Истина;
	Иначе
		Если Контекст.Объект = Неопределено Тогда
			ОписаниеОбъекта = Форма.Объект;
		Иначе
			ОписаниеОбъекта = Контекст.Объект;
		КонецЕсли;
		СоздатьОписаниеДополнительныхРеквизитов = ИспользоватьДопРеквизиты(ОписаниеОбъекта.Ссылка);
		Если Не ЗначениеЗаполнено(ОписаниеОбъекта.Ссылка) И Контекст.СкрытьУдаленные = Неопределено Тогда
			Контекст.СкрытьУдаленные = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьОсновныеОбъектыФормы(Форма, Контекст, СоздатьОписаниеДополнительныхРеквизитов);
	
	Если Контекст.ОтложеннаяИнициализация Тогда
		
		Если НЕ Форма.Свойства_ИспользоватьСвойства
			ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
			Возврат;
		КонецЕсли;
		
		КлючНазначения = Неопределено;
		НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
			ОписаниеОбъекта, КлючНазначения);
		
		Для каждого Строка Из НаборыСвойствОбъекта Цикл
			Если УправлениеСвойствамиСлужебный.ВидыСвойствНабора(Строка.Набор).ДополнительныеРеквизиты Тогда
				
				Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта.Добавить(
					Строка.Набор, Строка.Заголовок);
			КонецЕсли;
		КонецЦикла;
		
		СведенияНеНайдены = УправлениеСвойствамиСлужебный.ДополнительныеРеквизитыИСведенияНеНайдены(
			Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта, Ложь, Истина);
		
		Если Форма.ПараметрыСвойств.Свойство("ДобавленаПустаяДекорация") Тогда
			Для Каждого ИмяДекорации Из Форма.ПараметрыСвойств.КоллекцияДекораций Цикл
				Форма.Элементы[ИмяДекорации].Видимость = Не СведенияНеНайдены;
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьКлючНазначенияФормы(Форма, КлючНазначения);
	КонецЕсли;
	
	Если Не Контекст.ПроизвольныйОбъект
		И Не Контекст.ОтложеннаяИнициализация Тогда
		ЗаполнитьДополнительныеРеквизитыВФорме(Форма, ОписаниеОбъекта, , Контекст.СкрытьУдаленные);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект из реквизитов, созданных в форме.
// Вызывается из обработчика ПередЗаписьюНаСервере формы объекта со свойствами.
//
// Параметры:
//  Форма         - УправляемаяФорма - уже настроена в процедуре ПриСозданииНаСервере.
//  ТекущийОбъект - Объект - <ВидОбъектаМетаданных>Объект.<ИмяОбъектаМетаданных>.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Структура = Новый Структура("Свойства_ИспользоватьСвойства");
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	
	Если ТипЗнч(Структура.Свойства_ИспользоватьСвойства) = Тип("Булево")
		И Структура.Свойства_ИспользоватьСвойства Тогда
		
		Если Форма.ПараметрыСвойств.Свойство("ВыполненаОтложеннаяИнициализация")
			И Не Форма.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДополнительныеРеквизитыВФорме(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект из реквизитов, созданных в форме.
// Вызывается из обработчика ПередЗаписьюНаСервере формы объекта со свойствами.
//
// Параметры:
//  Форма         - УправляемаяФорма - уже настроена в процедуре ПриСозданииНаСервере.
//  ТекущийОбъект - Объект - <ВидОбъектаМетаданных>Объект.<ИмяОбъектаМетаданных>.
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт
	
	CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, ТекущийОбъект, Истина);
	
КонецПроцедуры

// Обновляет отображаемые данные на форме объекта со свойствами.
// 
// Параметры:
//  Форма           - УправляемаяФорма - уже настроена в процедуре ПриСозданииНаСервере.
//
//  Объект          - Неопределено - взять объект из реквизита формы "Объект".
//                  - Объект - СправочникОбъект, ДокументОбъект, ... , ДанныеФормыСтруктура (по типу объекта).
//
//  СкрытьУдаленные - Неопределено - не менять текущий режим скрытия удаленных, установленный ранее.
//                  - Булево - установить/отключить режим скрытия удаленных.
//                    При вызове процедуры ПередЗаписьюНаСервере в режиме скрытия удаленных, удаленные значения
//                    очищаются (не переносятся обратно в объект), а режим СкрытьУдаленные устанавливается Ложь.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов(Форма, Объект = Неопределено, СкрытьУдаленные = Неопределено) Экспорт
	
	CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, Объект);
	
	ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект, , СкрытьУдаленные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для нестандартной обработки дополнительных свойств.

// Создает/пересоздает дополнительные реквизиты и элементы в форме владельца свойств.
//
// Параметры:
//  Форма           - УправляемаяФорма - уже настроена в процедуре ПриСозданииНаСервере.
//
//  Объект          - Неопределено - взять объект из реквизита формы "Объект".
//                  - Объект - СправочникОбъект, ДокументОбъект, ..., ДанныеФормыСтруктура (по типу объекта).
//
//  ПоляНадписей    - Булево - если указать Истина, то вместо полей ввода на форме будут созданы поля надписей.
//
//  СкрытьУдаленные - Неопределено - не менять текущий режим скрытия удаленных, установленный ранее.
//                  - Булево - установить/отключить режим скрытия удаленных.
//                    При вызове процедуры ПередЗаписьюНаСервере в режиме скрытия удаленных, удаленные значения
//                    очищаются (не переносятся обратно в объект), а режим СкрытьУдаленные устанавливается Ложь.
//
Процедура ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект = Неопределено, ПоляНадписей = Ложь, СкрытьУдаленные = Неопределено) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СкрытьУдаленные) = Тип("Булево") Тогда
		Форма.Свойства_СкрытьУдаленные = СкрытьУдаленные;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Объект;
	КонецЕсли;
	
	Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта = Новый СписокЗначений;
	
	КлючНазначения = Неопределено;
	НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
		ОписаниеОбъекта, КлючНазначения);
	
	Для каждого Строка Из НаборыСвойствОбъекта Цикл
		Если УправлениеСвойствамиСлужебный.ВидыСвойствНабора(Строка.Набор).ДополнительныеРеквизиты Тогда
			
			Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта.Добавить(
				Строка.Набор, Строка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьКлючНазначенияФормы(Форма, КлючНазначения);
	
// +CRM
	Если ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		НаборЗначенийСвойств = РегистрыСведений.bpmДополнительныеРеквизиты.СоздатьНаборЗаписей();
		НаборЗначенийСвойств.Отбор.БизнесПроцесс.Установить(ОписаниеОбъекта.БизнесПроцесс);
		НаборЗначенийСвойств.Прочитать();
		ТаблицаЗначенийСвойств = НаборЗначенийСвойств.Выгрузить(,"Свойство,Значение,ТекстоваяСтрока");
		
		ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
			ТаблицаЗначенийСвойств,
			Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта,
			Ложь);
	ИначеЕсли ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		
		НаборЗначенийСвойств = РегистрыСведений.bpmДополнительныеРеквизиты.СоздатьНаборЗаписей();
		НаборЗначенийСвойств.Отбор.БизнесПроцесс.Установить(ОписаниеОбъекта.Ссылка);
		НаборЗначенийСвойств.Прочитать();
		ТаблицаЗначенийСвойств = НаборЗначенийСвойств.Выгрузить(,"Свойство,Значение,ТекстоваяСтрока");
		
		ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
			ТаблицаЗначенийСвойств,
			Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта,
			Ложь);
	Иначе
		ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
			ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить(),
			Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта,
			Ложь);
	КонецЕсли;
	//ОписаниеСвойств = УправлениеСвойствамиСлужебный.ПолучитьТаблицуЗначенийСвойств(
	//	ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить(),
	//	Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта,
	//	Ложь);
// -CRM
	
	ОписаниеСвойств.Колонки.Добавить("ИмяРеквизитаЗначение");
	ОписаниеСвойств.Колонки.Добавить("СтрокаСсылочногоТипа");
	ОписаниеСвойств.Колонки.Добавить("ИмяСсылочногоРеквизитаЗначение");
	ОписаниеСвойств.Колонки.Добавить("ИмяУникальнаяЧасть");
	ОписаниеСвойств.Колонки.Добавить("ДополнительноеЗначение");
	ОписаниеСвойств.Колонки.Добавить("Булево");
	
	УправлениеСвойствами.УдалитьСтарыеРеквизитыИЭлементы(Форма);
	
	// Создание реквизитов.
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		ТипЗначенияСвойства = ОписаниеСвойства.ТипЗначения;
		
		// Поддержка строк неограниченной длины.
		ИспользоватьНеограниченнуюСтроку = УправлениеСвойствамиСлужебный.ИспользоватьНеограниченнуюСтроку(
			ТипЗначенияСвойства, ОписаниеСвойства.МногострочноеПолеВвода);
		
		Если ИспользоватьНеограниченнуюСтроку Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		ИначеЕсли ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
			И ТипЗначенияСвойства.КвалификаторыСтроки.Длина = 0 Тогда
			// Если нельзя использовать неограниченную строку, а в свойствах реквизита она неограниченная,
			// то устанавливаем ограничение в 1024 символа.
			ТипЗначенияСвойства = Новый ОписаниеТипов(ОписаниеСвойства.ТипЗначения,
				,,, Новый КвалификаторыСтроки(1024));
		КонецЕсли;
		
		ОписаниеСвойства.ИмяУникальнаяЧасть = 
			СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Набор.УникальныйИдентификатор())), "-", "x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Свойство.УникальныйИдентификатор())), "-", "x");
		
		ОписаниеСвойства.ИмяРеквизитаЗначение =
			"ДополнительныйРеквизитЗначение_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
		
		Если ОписаниеСвойства.Удалено Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		Реквизит = Новый РеквизитФормы(ОписаниеСвойства.ИмяРеквизитаЗначение, ТипЗначенияСвойства, , ОписаниеСвойства.Наименование, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		ОписаниеСвойства.ДополнительноеЗначение =
			УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ТипЗначенияСвойства);
		
		ОписаниеСвойства.Булево = ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначенияСвойства, Тип("Булево"));
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создание элементов формы.
	ИмяЭлементаДляРазмещения = Форма.Свойства_ИмяЭлементаДляРазмещения;
	ЭлементРазмещения = ?(ИмяЭлементаДляРазмещения = "", Неопределено, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	Для Каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		ИмяЭлементаДляРазмещения = Форма.Свойства_ИмяЭлементаДляРазмещения;
		Если ТипЗнч(ИмяЭлементаДляРазмещения) <> Тип("СписокЗначений") Тогда
			Если ИмяЭлементаДляРазмещения = Неопределено Тогда
				ИмяЭлементаДляРазмещения = "";
			КонецЕсли;
			
			ЭлементРазмещения = ?(ИмяЭлементаДляРазмещения = "", Неопределено, Форма.Элементы[ИмяЭлементаДляРазмещения]);
		Иначе
			РазделыДляРазмещения = Форма.Свойства_ИмяЭлементаДляРазмещения;
			РазмещениеНабора = РазделыДляРазмещения.НайтиПоЗначению(ОписаниеСвойства.Набор);
			Если РазмещениеНабора = Неопределено Тогда
				РазмещениеНабора = РазделыДляРазмещения.НайтиПоЗначению("ВсеОстальные");
			КонецЕсли;
			ЭлементРазмещения = Форма.Элементы[РазмещениеНабора.Представление];
		КонецЕсли;
		
// +CRM
		СтруктураДопНастройки = Неопределено;
		Если ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			ЗаписьДопНатроек = РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьМенеджерЗаписи();
			ЗаписьДопНатроек.Карта			= ОписаниеОбъекта.БизнесПроцесс.КартаМаршрута;
			ЗаписьДопНатроек.НомерВерсии	= ОписаниеОбъекта.БизнесПроцесс.НомерВерсииКартыМаршрута;
			ЗаписьДопНатроек.Свойство		= ОписаниеСвойства.Свойство;
			ЗаписьДопНатроек.Прочитать();
			Если ЗаписьДопНатроек.Выбран() Тогда
				
				МассивНастроек = ЗаписьДопНатроек.Настройки.Получить();
				Для Каждого СтруктураНастройки ИЗ МассивНастроек Цикл
					Если СтруктураНастройки.Этап = ОписаниеОбъекта.Ссылка.CRM_ТочкаМаршрута Тогда
						СтруктураДопНастройки = СтруктураНастройки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			
			ЗаписьДопНатроек = РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьМенеджерЗаписи();
			ЗаписьДопНатроек.Карта			= ОписаниеОбъекта.КартаМаршрута;
			ЗаписьДопНатроек.НомерВерсии	= ОписаниеОбъекта.НомерВерсииКартыМаршрута;
			ЗаписьДопНатроек.Свойство		= ОписаниеСвойства.Свойство;
			ЗаписьДопНатроек.Прочитать();
			Если ЗаписьДопНатроек.Выбран() Тогда
				
				МассивНастроек = ЗаписьДопНатроек.Настройки.Получить();
				Для Каждого СтруктураНастройки ИЗ МассивНастроек Цикл
					Если СтруктураНастройки.Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
						СтруктураДопНастройки = СтруктураНастройки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
// -CRM
		ФормаОписаниеСвойства = Форма.Свойства_ОписаниеДополнительныхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(ФормаОписаниеСвойства, ОписаниеСвойства);
// +CRM
		Если НЕ СтруктураДопНастройки = Неопределено Тогда
			ФормаОписаниеСвойства.ЗаполнятьОбязательно = (СтруктураДопНастройки.Обязательный И СтруктураДопНастройки.Видимость И СтруктураДопНастройки.Доступность);
		КонецЕсли;
// -CRM
		// Заполнение таблицы зависимых дополнительных реквизитов.
		Если ОписаниеСвойства.ЗависимостиДополнительныхРеквизитов.Количество() > 0 Тогда
			ОписаниеЗависимогоРеквизита = Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(ОписаниеЗависимогоРеквизита, ОписаниеСвойства);
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ОписаниеСвойства.ЗависимостиДополнительныхРеквизитов Цикл
			Если ТипЗнч(СтрокаТаблицы.Реквизит) = Тип("Строка") Тогда
				ПутьКРеквизиту = "ОписаниеОбъекта." + СтрокаТаблицы.Реквизит;
			Иначе
				ОписаниеДополнительногоРеквизита = ОписаниеСвойств.Найти(СтрокаТаблицы.Реквизит, "Свойство");
				Если ОписаниеДополнительногоРеквизита = Неопределено Тогда
					Продолжить; // Дополнительный реквизит не существует, условие игнорируется.
				КонецЕсли;
				ПутьКРеквизиту = "Форма." + ОписаниеДополнительногоРеквизита.ИмяРеквизитаЗначение;
			КонецЕсли;
			
			ШаблонУсловия = "";
			Если СтрокаТаблицы.Условие = "Равно" Тогда
				ШаблонУсловия = "%1 = %2";
			ИначеЕсли СтрокаТаблицы.Условие = "Не равно" Тогда // не ошибка, идентификатор.
				ШаблонУсловия = "%1 <> %2";
			КонецЕсли;
			
			Если СтрокаТаблицы.Условие = "В списке" Тогда // не ошибка, идентификатор.
				ШаблонУсловия = "%2.НайтиПоЗначению(%1) <> Неопределено"
			ИначеЕсли СтрокаТаблицы.Условие = "Не в списке" Тогда // не ошибка, идентификатор.
				ШаблонУсловия = "%2.НайтиПоЗначению(%1) = Неопределено"
			КонецЕсли;
			
			ПравоеЗначение = "";
			Если ЗначениеЗаполнено(ШаблонУсловия) Тогда
				ПравоеЗначение = "ЗначенияПараметров[""" + ПутьКРеквизиту + """]";
			КонецЕсли;
			
			Если СтрокаТаблицы.Условие = "Заполнено" Тогда
				ШаблонУсловия = "ЗначениеЗаполнено(%1)";
			ИначеЕсли СтрокаТаблицы.Условие = "Не заполнено" Тогда // не ошибка, идентификатор.
				ШаблонУсловия = "Не ЗначениеЗаполнено(%1)";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПравоеЗначение) Тогда
				КодУсловия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, ПутьКРеквизиту, ПравоеЗначение);
			Иначе
				КодУсловия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, ПутьКРеквизиту);
			КонецЕсли;
			
			Если СтрокаТаблицы.ЗависимоеСвойство = "Доступен" Тогда
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеДоступности, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия);
			ИначеЕсли СтрокаТаблицы.ЗависимоеСвойство = "Виден" Тогда
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеВидимости, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия);
			Иначе
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия);
			КонецЕсли;
		КонецЦикла;
		
		Форма[ОписаниеСвойства.ИмяРеквизитаЗначение] = ОписаниеСвойства.Значение;
		
		Если ОписаниеСвойства.Удалено И Форма.Свойства_СкрытьУдаленные Тогда
			Продолжить;
		КонецЕсли;
		
		Если НаборыСвойствОбъекта.Количество() > 1 Тогда
			
			ЭлементСписка = Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов.НайтиПоЗначению(
				ОписаниеСвойства.Набор);
			
			Если ЭлементСписка <> Неопределено Тогда
				Родитель = Форма.Элементы[ЭлементСписка.Представление];
			Иначе
				ОписаниеНабора = НаборыСвойствОбъекта.Найти(ОписаниеСвойства.Набор, "Набор");
				
				Если ОписаниеНабора = Неопределено Тогда
					ОписаниеНабора = НаборыСвойствОбъекта.Добавить();
					ОписаниеНабора.Набор     = ОписаниеСвойства.Набор;
					ОписаниеНабора.Заголовок = НСтр("ru = 'Удаленные реквизиты'")
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОписаниеНабора.Заголовок) Тогда
					ОписаниеНабора.Заголовок = Строка(ОписаниеСвойства.Набор);
				КонецЕсли;
				
				ИмяЭлементаНабора = "НаборДополнительныхРеквизитов" + ОписаниеСвойства.ИмяУникальнаяЧасть;
				
				Родитель = Форма.Элементы.Добавить(ИмяЭлементаНабора, Тип("ГруппаФормы"), ЭлементРазмещения);
				
				Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов.Добавить(
					ОписаниеСвойства.Набор, Родитель.Имя);
				
				Если ТипЗнч(ЭлементРазмещения) = Тип("ГруппаФормы")
				   И ЭлементРазмещения.Вид = ВидГруппыФормы.Страницы Тогда
					
					Родитель.Вид = ВидГруппыФормы.Страница;
				Иначе
					Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					Родитель.Отображение = ОтображениеОбычнойГруппы.Нет;
				КонецЕсли;
				Родитель.ОтображатьЗаголовок = Ложь;
				
				ЗаполненныеСвойстваГруппы = Новый Структура;
				Для каждого Колонка Из НаборыСвойствОбъекта.Колонки Цикл
					Если ОписаниеНабора[Колонка.Имя] <> Неопределено Тогда
						ЗаполненныеСвойстваГруппы.Вставить(Колонка.Имя, ОписаниеНабора[Колонка.Имя]);
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(Родитель, ЗаполненныеСвойстваГруппы);
			КонецЕсли;
		Иначе
			Родитель = ЭлементРазмещения;
		КонецЕсли;
		
		Если ОписаниеСвойства.ВыводитьВВидеГиперссылки Тогда
			ИмяГруппыГиперссылки = "Группа_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
			ГруппаГиперссылки = Форма.Элементы.Добавить(ИмяГруппыГиперссылки, Тип("ГруппаФормы"), Родитель);
			ГруппаГиперссылки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаГиперссылки.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаГиперссылки.ОтображатьЗаголовок = Ложь;
			ГруппаГиперссылки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаГиперссылки.Заголовок = ОписаниеСвойства.Наименование;
			
			Элемент = Форма.Элементы.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение, Тип("ПолеФормы"), ГруппаГиперссылки);
			
			Если Не ПоляНадписей Тогда
				ИмяКнопки = "Кнопка_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
				Кнопка = Форма.Элементы.Добавить(
					ИмяКнопки,
					Тип("КнопкаФормы"),
					ГруппаГиперссылки);
					
				Кнопка.ТолькоВоВсехДействиях = Истина;
				Кнопка.ИмяКоманды = "РедактироватьГиперссылкуРеквизита";
				Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			КонецЕсли;
			
			Если Не ОписаниеСвойства.СтрокаСсылочногоТипа И ЗначениеЗаполнено(ОписаниеСвойства.Значение) Тогда
				Элемент.Гиперссылка = Истина;
			КонецЕсли;
		Иначе
			Элемент = Форма.Элементы.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение, Тип("ПолеФормы"), Родитель);
		КонецЕсли;

		ФормаОписаниеСвойства.ЭлементФормыДобавлен = Истина;
		
		Если ОписаниеСвойства.Булево И ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
// +CRM
			Если НЕ СтруктураДопНастройки = Неопределено Тогда
				Элемент.Видимость					= СтруктураДопНастройки.Видимость;
				Элемент.ТолькоПросмотр				= НЕ СтруктураДопНастройки.Доступность;
			КонецЕсли;
// -CRM
		Иначе
			Если ПоляНадписей Тогда
				Элемент.Вид = ВидПоляФормы.ПолеНадписи;
				Элемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
			Иначе
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.АвтоОтметкаНезаполненного = ОписаниеСвойства.ЗаполнятьОбязательно И НЕ ОписаниеСвойства.Удалено;
// +CRM
			Если НЕ СтруктураДопНастройки = Неопределено Тогда
				Элемент.АвтоОтметкаНезаполненного	= СтруктураДопНастройки.Видимость И СтруктураДопНастройки.Доступность И 
													  СтруктураДопНастройки.Обязательный И НЕ ОписаниеСвойства.Удалено;
				Элемент.Видимость					= СтруктураДопНастройки.Видимость;
				Элемент.ТолькоПросмотр				= НЕ СтруктураДопНастройки.Доступность;
			КонецЕсли;
// -CRM
			КонецЕсли;
		КонецЕсли;
		
		// Предварительная установка видимости и доступности без учета условий.
		Элемент.Видимость = ?(НЕ ОписаниеСвойства.Удалено, ОписаниеСвойства.Виден, Истина);
		Элемент.Доступность = ?(НЕ ОписаниеСвойства.Удалено, ОписаниеСвойства.Доступен, Истина);
		
		Элемент.ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
		Элемент.Подсказка   = ОписаниеСвойства.Свойство.Подсказка;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоРеквизита");
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода
		   И Не ИспользоватьНеограниченнуюСтроку
		   И ОписаниеСвойства.ТипЗначения.Типы().Найти(Тип("Строка")) <> Неопределено Тогда
			
			Элемент.СвязьПоТипу = Новый СвязьПоТипу("Свойства_ОписаниеДополнительныхРеквизитов.Свойство",
				ОписаниеСвойств.Индекс(ОписаниеСвойства));
		КонецЕсли;
		
		Если ОписаниеСвойства.Свойство.МногострочноеПолеВвода > 0 Тогда
			Если НЕ ПоляНадписей Тогда
				Элемент.МногострочныйРежим = Истина;
			КонецЕсли;
			Элемент.Высота = ОписаниеСвойства.Свойство.МногострочноеПолеВвода;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			Если ПоляНадписей Тогда
				Элемент.Формат = ОписаниеСвойства.ФорматСвойства;
			Иначе
				ФорматнаяСтрока = "";
				Массив = СтрРазделить(ОписаниеСвойства.ФорматСвойства, ";", Ложь);
				
				Для каждого Подстрока Из Массив Цикл
					Если СтрНайти(Подстрока, "ДП=") > 0 ИЛИ СтрНайти(Подстрока, "DE=") > 0 Тогда
						Продолжить;
					КонецЕсли;
					Если СтрНайти(Подстрока, "ЧН=") > 0 ИЛИ СтрНайти(Подстрока, "NZ=") > 0 Тогда
						Продолжить;
					КонецЕсли;
					Если СтрНайти(Подстрока, "ДФ=") > 0 ИЛИ СтрНайти(Подстрока, "DF=") > 0 Тогда
						Если СтрНайти(Подстрока, "ддд") > 0 ИЛИ СтрНайти(Подстрока, "ddd") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "ддд", "дд");
							Подстрока = СтрЗаменить(Подстрока, "ddd", "dd");
						КонецЕсли;
						Если СтрНайти(Подстрока, "дддд") > 0 ИЛИ СтрНайти(Подстрока, "dddd") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "дддд", "дд");
							Подстрока = СтрЗаменить(Подстрока, "dddd", "dd");
						КонецЕсли;
						Если СтрНайти(Подстрока, "МММ") > 0 ИЛИ СтрНайти(Подстрока, "MMM") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "МММ", "ММ");
							Подстрока = СтрЗаменить(Подстрока, "MMM", "MM");
						КонецЕсли;
						Если СтрНайти(Подстрока, "ММММ") > 0 ИЛИ СтрНайти(Подстрока, "MMMM") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "ММММ", "ММ");
							Подстрока = СтрЗаменить(Подстрока, "MMMM", "MM");
						КонецЕсли;
					КонецЕсли;
					Если СтрНайти(Подстрока, "ДЛФ=") > 0 ИЛИ СтрНайти(Подстрока, "DLF=") > 0 Тогда
						Если СтрНайти(Подстрока, "ДД") > 0 ИЛИ СтрНайти(Подстрока, "DD") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "ДД", "Д");
							Подстрока = СтрЗаменить(Подстрока, "DD", "D");
						КонецЕсли;
					КонецЕсли;
					ФорматнаяСтрока = ФорматнаяСтрока + ?(ФорматнаяСтрока = "", "", ";") + Подстрока;
				КонецЦикла;
				
				Элемент.Формат = ФорматнаяСтрока;
				Элемент.ФорматРедактирования = ФорматнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеСвойства.Удалено Тогда
			Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
			Элемент.ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
// +CRM
			Если ТипЗнч(Объект.Ссылка)	= Тип("СправочникСсылка.Партнеры") Тогда
				Элемент.Подсказка		= "Реквизит недоступен для текущего вида клиента";
			КонецЕсли;
// -CRM
			Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				Элемент.КнопкаОчистки = Истина;
				Элемент.КнопкаВыбора = Ложь;
				Элемент.КнопкаОткрытия = Ложь;
				Элемент.КнопкаВыпадающегоСписка = Ложь;
				Элемент.РедактированиеТекста = Ложь;
			КонецЕсли;
			
		ИначеЕсли НЕ ПоляНадписей Тогда
			
			ТипыДополнительныхЗначений = Новый Соответствие;
			ТипыДополнительныхЗначений.Вставить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"), Истина);
			ТипыДополнительныхЗначений.Вставить(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"), Истина);
			
			ИспользуетсяТипДополнительныхЗначений = Истина;
			Для каждого Тип Из ОписаниеСвойства.ТипЗначения.Типы() Цикл
				Если ТипыДополнительныхЗначений.Получить(Тип) = Неопределено Тогда
					ИспользуетсяТипДополнительныхЗначений = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИспользуетсяТипДополнительныхЗначений Тогда
				Элемент.КнопкаОткрытия = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПоляНадписей И ОписаниеСвойства.ДополнительноеЗначение Тогда
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
				?(ЗначениеЗаполнено(ОписаниеСвойства.ВладелецДополнительныхЗначений),
					ОписаниеСвойства.ВладелецДополнительныхЗначений, ОписаниеСвойства.Свойство)));
			Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		КонецЕсли;
		
	КонецЦикла;
	
	// Установка видимости, доступности и обязательности заполнения дополнительных реквизитов.
	Для Каждого ОписаниеЗависимогоРеквизита Из Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов Цикл
		Если ОписаниеЗависимогоРеквизита.УсловиеДоступности <> Неопределено Тогда
			Если Не ОписаниеЗависимогоРеквизита.Доступен Тогда
				Продолжить;
			КонецЕсли;
			Результат = РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеДоступности);
			Элемент = Форма.Элементы[ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение];
			Если Элемент.Доступность <> Результат Тогда
				Элемент.Доступность = Результат;
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеЗависимогоРеквизита.УсловиеВидимости <> Неопределено Тогда
			Если Не ОписаниеЗависимогоРеквизита.Виден Тогда
				Продолжить;
			КонецЕсли;
			Результат = РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеВидимости);
			Элемент = Форма.Элементы[ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение];
			Если Элемент.Видимость <> Результат Тогда
				Элемент.Видимость = Результат;
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения <> Неопределено
			И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Если Не ОписаниеЗависимогоРеквизита.ЗаполнятьОбязательно Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения);
			Элемент = Форма.Элементы[ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение];
			Если Элемент.АвтоОтметкаНезаполненного <> Результат Тогда
				Элемент.АвтоОтметкаНезаполненного = Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Структура = Новый Структура("ПараметрыСвойств");
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	Если ТипЗнч(Структура.ПараметрыСвойств) = Тип("Структура")
		И Структура.ПараметрыСвойств.Свойство("ВыполненаОтложеннаяИнициализация") Тогда
		Форма.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация = Истина;
		// Удаление временной декорации, если она была добавлена.
		Если Форма.ПараметрыСвойств.Свойство("ДобавленаПустаяДекорация") Тогда
			Для Каждого ИмяДекорации Из Форма.ПараметрыСвойств.КоллекцияДекораций Цикл
				Форма.Элементы.Удалить(Форма.Элементы[ИмяДекорации]);
			КонецЦикла;
			Форма.ПараметрыСвойств.Удалить("ДобавленаПустаяДекорация");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, используются ли дополнительные реквизиты с объектом.
//
// Параметры:
//  ВладелецСвойств - Ссылка - например, СправочникСсылка.Номенклатура, ДокументСсылка.ЗаказПокупателя, ...
//
// Возвращаемое значение:
//  Булево - если Истина, тогда дополнительные реквизиты используются.
//
Функция ИспользоватьДопРеквизиты(ВладелецСвойств) Экспорт
// +CRM
	Если ((ТипЗнч(ВладелецСвойств) = Тип("ЗадачаСсылка.ЗадачаИсполнителя"))
	И ЗначениеЗаполнено(ВладелецСвойств.БизнесПроцесс)
	И (ТипЗнч(ВладелецСвойств.БизнесПроцесс)=Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")))
	ИЛИ (ТипЗнч(ВладелецСвойств) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")) Тогда
		
		Возврат Истина;
		
	Иначе
		МетаданныеВладельца = ВладелецСвойств.Метаданные();
		Возврат МетаданныеВладельца.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено
		      И МетаданныеВладельца <> Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
		КонецЕсли;
	//МетаданныеВладельца = ВладелецСвойств.Метаданные();
	//Возврат МетаданныеВладельца.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено
	//      И МетаданныеВладельца <> Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
// -CRM
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Создает основные реквизиты, команды, элементы в форме владельца свойств.
Процедура СоздатьОсновныеОбъектыФормы(Форма, Контекст, СоздатьОписаниеДополнительныхРеквизитов)
	
 	ИмяЭлементаДляРазмещения   = Контекст.ИмяЭлементаДляРазмещения;
	ИмяЭлементаКоманднойПанели = Контекст.ИмяЭлементаКоманднойПанели;
	ОтложеннаяИнициализация    = Контекст.ОтложеннаяИнициализация;
	
	Реквизиты = Новый Массив;
	
	// Проверка значения функциональной опции "Использование свойств".
	ОпцияИспользоватьСвойства = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения");
	РеквизитИспользоватьСвойства = Новый РеквизитФормы("Свойства_ИспользоватьСвойства", Новый ОписаниеТипов("Булево"));
	Реквизиты.Добавить(РеквизитИспользоватьСвойства);
	РеквизитСкрытьУдаленные = Новый РеквизитФормы("Свойства_СкрытьУдаленные", Новый ОписаниеТипов("Булево"));
	Реквизиты.Добавить(РеквизитСкрытьУдаленные);
	// Дополнительные параметры подсистемы свойства.
	РеквизитПараметрыСвойств = Новый РеквизитФормы("ПараметрыСвойств", Новый ОписаниеТипов());
	Реквизиты.Добавить(РеквизитПараметрыСвойств);
	
	Если ОпцияИспользоватьСвойства Тогда
		
		РеквизитИспользоватьДопРеквизиты = Новый РеквизитФормы("Свойства_ИспользоватьДопРеквизиты", Новый ОписаниеТипов("Булево"));
		Реквизиты.Добавить(РеквизитИспользоватьДопРеквизиты);
		
		Если СоздатьОписаниеДополнительныхРеквизитов Тогда
			
			// Добавление реквизита содержащего используемые наборы дополнительных реквизитов.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_НаборыДополнительныхРеквизитовОбъекта", Новый ОписаниеТипов("СписокЗначений")));
			
			// Добавление реквизита описания создаваемых реквизитов и элементов формы.
			ИмяОписания = "Свойства_ОписаниеДополнительныхРеквизитов";
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
					ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"МногострочноеПолеВвода", Новый ОписаниеТипов("Число"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Удалено", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Доступен", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Виден", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Наименование", Новый ОписаниеТипов("Строка"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ЭлементФормыДобавлен", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			// Добавление реквизита описания зависимых реквизитов.
			ТаблицаЗависимыхРеквизитов = "Свойства_ОписаниеЗависимыхДополнительныхРеквизитов";
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				ТаблицаЗависимыхРеквизитов, Новый ОписаниеТипов("ТаблицаЗначений")));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Доступен", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"УсловиеДоступности", Новый ОписаниеТипов(), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Виден", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));
				
			Реквизиты.Добавить(Новый РеквизитФормы(
				"УсловиеВидимости", Новый ОписаниеТипов(), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"УсловиеОбязательностиЗаполнения", Новый ОписаниеТипов(), ТаблицаЗависимыхРеквизитов));
			
			// Добавление реквизита содержащего элементы создаваемых групп дополнительных реквизитов.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_ЭлементыГруппДополнительныхРеквизитов", Новый ОписаниеТипов("СписокЗначений")));
			
			// Добавление реквизита с именем элемента в котором будут размещаться поля ввода.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_ИмяЭлементаДляРазмещения", Новый ОписаниеТипов("Строка")));
			
			// Добавление команды формы, если установлена роль "ДобавлениеИзменениеДополнительныхРеквизитовИСведений" или это
			// полноправный пользователь. +CRM
			//Если Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхРеквизитовИСведений") Тогда
			Если Пользователи.РолиДоступны("CRM_ДобавлениеИзменениеБазовойНСИ") Тогда
// -CRM
				// Добавление команды.
				Команда = Форма.Команды.Добавить("РедактироватьСоставДополнительныхРеквизитов");
				Команда.Заголовок = НСтр("ru = 'Изменить состав дополнительных реквизитов'");
				Команда.Действие = "Подключаемый_РедактироватьСоставСвойств";
				Команда.Подсказка = НСтр("ru = 'Изменить состав дополнительных реквизитов'");
				Команда.Картинка = БиблиотекаКартинок.НастройкаСписка;
				
				Кнопка = Форма.Элементы.Добавить(
					"РедактироватьСоставДополнительныхРеквизитов",
					Тип("КнопкаФормы"),
					?(ИмяЭлементаКоманднойПанели = "",
						Форма.КоманднаяПанель,
						Форма.Элементы[ИмяЭлементаКоманднойПанели]));
				
				Кнопка.ТолькоВоВсехДействиях = Истина;
				Кнопка.ИмяКоманды = "РедактироватьСоставДополнительныхРеквизитов";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	Форма.Свойства_ИспользоватьСвойства = ОпцияИспользоватьСвойства;
	
	Форма.ПараметрыСвойств = Новый Структура;
	Если ОтложеннаяИнициализация Тогда
		// Если свойства не используются, признак выполнения отложенной инициализации
		// взводится в истину.
		Значение = ?(ОпцияИспользоватьСвойства, Ложь, Истина);
		Форма.ПараметрыСвойств.Вставить("ВыполненаОтложеннаяИнициализация", Значение);
	КонецЕсли;
	
	Если ОпцияИспользоватьСвойства Тогда
		Форма.Свойства_ИспользоватьДопРеквизиты = СоздатьОписаниеДополнительныхРеквизитов;
	КонецЕсли;
	
	Если ОпцияИспользоватьСвойства И СоздатьОписаниеДополнительныхРеквизитов Тогда
		Форма.Свойства_ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
	КонецЕсли;
	
	// Если дополнительные реквизиты расположены на отдельной странице, включена
	// отложенная инициализация и свойства включены, то в страницу размещается пустая декорация.
	// Декорация удаляется автоматически при переключении на закладку.
	// Также блокируется возможность перемещения дополнительных реквизитов из группы.
	Если ОпцияИспользоватьСвойства
		И ОтложеннаяИнициализация
		И ИмяЭлементаДляРазмещения <> "" Тогда
		ГруппаФормы = Форма.Элементы[Контекст.ИмяЭлементаДляРазмещения];
		Если ГруппаФормы.Вид = ВидГруппыФормы.Страница Тогда
			Форма.Элементы.Добавить("Свойства_ПустаяДекорация", Тип("ДекорацияФормы"), ГруппаФормы);
			Форма.ПараметрыСвойств.Вставить("ДобавленаПустаяДекорация", Истина);
		КонецЕсли;
		ГруппаФормы.РазрешитьИзменениеСостава = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловиеЗависимости(СтруктураЗависимостей, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия)
	Если СтруктураЗависимостей = Неопределено Тогда
		ЗначенияПараметров = Новый Соответствие;
		ЗначенияПараметров.Вставить(ПутьКРеквизиту, СтрокаТаблицы.Значение);
		СтруктураЗависимостей = Новый Структура;
		СтруктураЗависимостей.Вставить("КодУсловия", КодУсловия);
		СтруктураЗависимостей.Вставить("ЗначенияПараметров", ЗначенияПараметров);
	Иначе
		СтруктураЗависимостей.КодУсловия = СтруктураЗависимостей.КодУсловия + " И " + КодУсловия;
		СтруктураЗависимостей.ЗначенияПараметров.Вставить(ПутьКРеквизиту, СтрокаТаблицы.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьКлючНазначенияФормы(Форма, КлючНазначения)
	
	Если КлючНазначения = Неопределено Тогда
		КлючНазначения = КлючНаборовСвойств(Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта);
	КонецЕсли;
	
	Если ПустаяСтрока(КлючНазначения) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоКлюча = "КлючНаборовСвойств";
	КлючНаборовСвойств = НачалоКлюча + Лев(КлючНазначения + "00000000000000000000000000000000", 32);
	
	НовыйКлюч = НовыйКлючНазначения(Форма.КлючНазначенияИспользования, НачалоКлюча, КлючНаборовСвойств);
	Если НовыйКлюч = Неопределено Тогда
		// Ключ уже дополнен.
		НовыйКлюч = Форма.КлючНазначенияИспользования;
	КонецЕсли;
	
	НовыйКлючПоложения = НовыйКлючНазначения(Форма.КлючСохраненияПоложенияОкна, НачалоКлюча, КлючНаборовСвойств);
	Если НовыйКлючПоложения = Неопределено Тогда
		// Ключ уже дополнен.
		НовыйКлючПоложения = Форма.КлючСохраненияПоложенияОкна;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(Форма, НовыйКлюч, НовыйКлючПоложения);
	
КонецПроцедуры

Функция РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, Параметры)
	Результат          = Неопределено;
	ЗначенияПараметров = Параметры.ЗначенияПараметров;
	Выполнить("Результат = " + Параметры.КодУсловия);
	
	Возврат Результат;
КонецФункции

Функция НовыйКлючНазначения(ТекущийКлюч, НачалоКлюча, КлючНаборовСвойств)
	
	Позиция = СтрНайти(ТекущийКлюч, НачалоКлюча);
	
	НовыйКлючНазначения = Неопределено;
	
	Если Позиция = 0 Тогда
		НовыйКлючНазначения = ТекущийКлюч + КлючНаборовСвойств;
	
	ИначеЕсли СтрНайти(ТекущийКлюч, КлючНаборовСвойств) = 0 Тогда
		НовыйКлючНазначения = Лев(ТекущийКлюч, Позиция - 1) + КлючНаборовСвойств
			+ Сред(ТекущийКлюч, Позиция + СтрДлина(НачалоКлюча) + 32);
	КонецЕсли;
	
	Возврат НовыйКлючНазначения;
	
КонецФункции

Функция КлючНаборовСвойств(Наборы)
	
	ИдентификаторыНаборов = Новый СписокЗначений;
	
	Для каждого ЭлементСписка Из Наборы Цикл
		ИдентификаторыНаборов.Добавить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()));
	КонецЦикла;
	
	ИдентификаторыНаборов.СортироватьПоЗначению();
	СтрокаИдентификаторов = "";
	
	Для каждого ЭлементСписка Из ИдентификаторыНаборов Цикл
		СтрокаИдентификаторов = СтрокаИдентификаторов + СтрЗаменить(ЭлементСписка.Значение, "-", "");
	КонецЦикла;
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(СтрокаИдентификаторов);
	
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

Функция ИспользуютсяСвойства(Форма, ДополнительныеПараметры)
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений) Тогда
		ОтключитьДополнительныеРеквизитыНаФорме(Форма, ДополнительныеПараметры);
		Возврат Ложь;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("Объект") Тогда
		ТипОбъекта = ТипЗнч(ДополнительныеПараметры.Объект.Ссылка);
		ПолноеИмя = Метаданные.НайтиПоТипу(ТипОбъекта).ПолноеИмя();
	Иначе
		ПолноеИмя = Форма.ИмяФормы;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") ИЛИ ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_КартыМаршрутов;
	Иначе
		МассивИмениФормы = СтрРазделить(ПолноеИмя, ".");
		
		ИмяЭлемента = МассивИмениФормы[0] + "_" + МассивИмениФормы[1];
		НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента];
	КонецЕсли;
	
	ИспользуютсяСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Используется");
	
	Если Не ИспользуютсяСвойства Тогда
		ОтключитьДополнительныеРеквизитыНаФорме(Форма, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ИспользуютсяСвойства;
	
КонецФункции

Процедура ОтключитьДополнительныеРеквизитыНаФорме(Форма, ДополнительныеПараметры)
	
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый РеквизитФормы("Свойства_ИспользоватьСвойства", Новый ОписаниеТипов("Булево")));
	ПараметрыСвойствДобавлены = Ложь;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ИмяЭлементаДляРазмещения") Тогда
			Форма.Элементы[ДополнительныеПараметры.ИмяЭлементаДляРазмещения].Видимость = Ложь;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОтложеннаяИнициализация") Тогда
			РеквизитПараметрыСвойств = Новый РеквизитФормы("ПараметрыСвойств", Новый ОписаниеТипов());
			МассивРеквизитов.Добавить(РеквизитПараметрыСвойств);
			ПараметрыСвойствДобавлены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	Форма.Свойства_ИспользоватьСвойства = Ложь;
	Если ПараметрыСвойствДобавлены Тогда
		Форма.ПараметрыСвойств = Новый Структура;
		Форма.ПараметрыСвойств.Вставить("ВыполненаОтложеннаяИнициализация", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


