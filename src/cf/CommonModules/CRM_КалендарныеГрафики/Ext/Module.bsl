////////////////////////////////////////////////////////////////////////////////
// Подсистема "Календарные графики".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Функция возвращает массив дат, которые отличается указанной даты на количество дней,
// входящих в указанный график.
//
// Параметры:
//	Календарь		- календарь, который необходимо использовать, тип СправочникСсылка.Календари.
//	ДатаОт			- дата, от которой нужно рассчитать количество дней, тип Дата.
//	МассивДней		- массив с количеством дней, на которые нужно увеличить дату начала, тип Массив,Число.
//	РассчитыватьСледующуюДатуОтПредыдущей	- нужно ли рассчитывать следующую дату от предыдущей или
//											  все даты рассчитываются от переданной даты.
//	ВызыватьИсключение - булево, если Истина вызывается исключение в случае незаполненного календаря.
//
// Возвращаемое значение
//	Массив		- массив дат, увеличенных на количество дней, входящих в график,
//	Если выбранный календарь не заполнен, и ВызыватьИсключение = Ложь, возвращается Неопределено.
//
Функция ПолучитьМассивДатПоКалендарю(Знач Календарь, Знач ДатаОт, Знач МассивДней, Знач РассчитыватьСледующуюДатуОтПредыдущей = Ложь, ВызыватьИсключение = Истина) Экспорт
	
	ДатаОт = НачалоДня(ДатаОт);
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаДат.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	
	КоличествоДней = 0;
	НомерСтроки = 0;
	Для Каждого СтрокаДней Из МассивДней Цикл
		КоличествоДней = КоличествоДней + СтрокаДней;
		
		Строка = ТаблицаДат.Добавить();
		Строка.ИндексСтроки			= НомерСтроки;
		Если РассчитыватьСледующуюДатуОтПредыдущей Тогда
			Строка.КоличествоДней	= КоличествоДней;
		Иначе
			Строка.КоличествоДней	= СтрокаДней;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Календарь",	Календарь);
	Запрос.УстановитьПараметр("ДатаОт",		ДатаОт);
	Запрос.УстановитьПараметр("Таблица",	ТаблицаДат);
	
	// Алгоритм работает следующим образом:
	//  Получаем для ДатаОт каким днем с начала года эта дата является.
	//  К этому дню прибавляем количество дней с начала года, которое должно быть у конечной даты.
	//  Получаем максимальный номер дня в году для этого года.
	//  Проверяем, не превышает ли полученное число количество дней.
	//  Если превышает, используем следующий год, если нет, то текущий.
	//  Ищем, минимальную дату, которая соответствует нужному нам дню в году.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДат.ИндексСтроки,
	|	ТаблицаДат.КоличествоДней
	|ПОМЕСТИТЬ ВТ_ТаблицаДат
	|ИЗ
	|	&Таблица КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода) КАК КоличествоДнейВсего
	|ПОМЕСТИТЬ ВТ_КоличествоРабочихДнейВГоду
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК ГрафикЗаГод
	|ГДЕ
	|	ГрафикЗаГод.Календарь = &Календарь
	|	И ГрафикЗаГод.Год = ГОД(&ДатаОт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикЗаГод.Год,
	|	ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДнейВГрафикеСНачалаГода,
	|	КоличествоРабочихДнейВГоду.КоличествоДнейВсего
	|ПОМЕСТИТЬ ВТ_КалендарныйГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК ГрафикЗаГод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоРабочихДнейВГоду КАК КоличествоРабочихДнейВГоду
	|		ПО (ГрафикЗаГод.Календарь = &Календарь)
	|			И (ГрафикЗаГод.ДатаГрафика = &ДатаОт)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоличествоДнейВГрафикеСНачалаГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныйГрафик.ИндексСтроки,
	|	КалендарныйГрафик.КоличествоДней,
	|	ЕСТЬNULL(КалендарныйГрафик.ДатаПоКалендарю, НЕОПРЕДЕЛЕНО) КАК ДатаПоКалендарю
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГрафикЗаГодДатаОт.ИндексСтроки КАК ИндексСтроки,
	|		ГрафикЗаГодДатаОт.КоличествоДней КАК КоличествоДней,
	|		МИНИМУМ(ГрафикЗаГод.ДатаГрафика) КАК ДатаПоКалендарю
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДат.ИндексСтроки КАК ИндексСтроки,
	|			ТаблицаДат.КоличествоДней КАК КоличествоДней,
	|			ВЫБОР
	|				КОГДА КалендарныйГрафик.КоличествоДнейВсего ЕСТЬ NULL 
	|						ИЛИ КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода - ТаблицаДат.КоличествоДней > 0
	|					ТОГДА ГОД(&ДатаОт)
	|				ИНАЧЕ ГОД(&ДатаОт) - 1
	|			КОНЕЦ КАК ГодДатыОкончания,
	|			ВЫБОР
	|				КОГДА КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода - ТаблицаДат.КоличествоДней > 0
	|					ТОГДА КалендарныйГрафик.КоличествоДнейВсего - (КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода - ТаблицаДат.КоличествоДней)
	|				КОГДА КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода - ТаблицаДат.КоличествоДней = 0
	|					ТОГДА 0
	|				КОГДА КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода - ТаблицаДат.КоличествоДней < 0
	|					ТОГДА (КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода - ТаблицаДат.КоличествоДней) * -1
	|			КОНЕЦ КАК КоличествоДнейДляДатыПо
	|		ИЗ
	|			ВТ_ТаблицаДат КАК ТаблицаДат
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КалендарныйГрафик КАК КалендарныйГрафик
	|				ПО (ИСТИНА)) КАК ГрафикЗаГодДатаОт
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				КалендарныеГрафики.Календарь КАК Календарь,
	|				КалендарныеГрафики.Год КАК Год,
	|				КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|				КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик,
	|				КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДнейВГрафикеСНачалаГода,
	|				ВложенныйЗапрос.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДнейВГоду
	|			ИЗ
	|				РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						КалендарныеГрафики.Календарь КАК Календарь,
	|						КалендарныеГрафики.Год КАК Год,
	|						МАКСИМУМ(КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода) КАК КоличествоДнейВГрафикеСНачалаГода
	|					ИЗ
	|						РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|					
	|					СГРУППИРОВАТЬ ПО
	|						КалендарныеГрафики.Календарь,
	|						КалендарныеГрафики.Год) КАК ВложенныйЗапрос
	|					ПО КалендарныеГрафики.Календарь = ВложенныйЗапрос.Календарь
	|						И КалендарныеГрафики.Год = ВложенныйЗапрос.Год) КАК ГрафикЗаГод
	|			ПО (ГрафикЗаГод.Календарь = &Календарь)
	|				И (ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода = ГрафикЗаГод.КоличествоДнейВГоду - ГрафикЗаГодДатаОт.КоличествоДнейДляДатыПо)
	|				И ГрафикЗаГодДатаОт.ГодДатыОкончания = ГрафикЗаГод.Год
	|				И (ГрафикЗаГод.ДатаГрафика <= &ДатаОт)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикЗаГодДатаОт.ИндексСтроки,
	|		ГрафикЗаГодДатаОт.КоличествоДней) КАК КалендарныйГрафик
	|
	|УПОРЯДОЧИТЬ ПО
	|	КалендарныйГрафик.ИндексСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДатаПоКалендарю = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Необходимо заполнить календарь ""%1"" за указанный год (в разделе Общие настройки)!'");
			
			Если ВызыватьИсключение Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СообщениеОбОшибке,
					Календарь, Формат(ДатаОт, "ДЛФ=D"));
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МассивДат.Добавить(Выборка.ДатаПоКалендарю);
	КонецЦикла;
	
	Возврат МассивДат;
	
КонецФункции

// Функция определяет для каждой даты дату ближайшего к ней рабочего дня.
//
//	Параметры:
//	ДатаИлиМассивДат			- Дата, Массив	- Дата или массив дат для которых требуется получить описания.
//	График 						- СправочникСсылка.Календари	- Используемый календарь.
//	ПолучатьПредшествующие		- Булево - способ получения ближайшей даты, 
//								если Истина - определяются рабочие даты, предшествующие переданным в параметре НачальныеДаты, 
//								если Ложь - получаются даты не ранее начальной даты.
//	Возвращаемое значение:
//	РабочиеДаты					- соответствие, где ключ - дата из переданного массива, 
//								значение - ближайшая к ней рабочая дата (если передана рабочая дата, то она же и возвращается).
//	Если выбранный график не заполнен, то в соответствие начальная дата не попадает.
//
Функция ПолучитьСоответствиеДатРабочихДней(ДатаИлиМассивДат, График = Неопределено, ПолучатьПредшествующие = Ложь) Экспорт
	
	ДатыРабочихДней = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(График) Тогда
		
		График = CRM_ОбщегоНазначенияСервер.ПолучитьОсновнойПроизводственныйКалендарь();
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(График) Тогда
		
		Если ТипЗнч(ДатаИлиМассивДат) = Тип("Массив") Тогда
			МассивДат = ДатаИлиМассивДат;
		Иначе
			МассивДат = Новый Массив();
			МассивДат.Добавить(ДатаИлиМассивДат);
		КонецЕсли;
		
		ТекстЗапросаВТ = "";
		ПерваяЧасть = Истина;
		Для Каждого НачальнаяДата Из МассивДат Цикл
			Если Не ЗначениеЗаполнено(НачальнаяДата) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ПерваяЧасть Тогда
				ТекстЗапросаВТ = ТекстЗапросаВТ + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			ТекстЗапросаВТ = ТекстЗапросаВТ + "
			|ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(НачальнаяДата, "ДФ=гггг,ММ,дд") + ")";
			Если ПерваяЧасть Тогда
				ТекстЗапросаВТ = ТекстЗапросаВТ + " КАК Дата 
				|ПОМЕСТИТЬ НачальныеДаты
				|";
			КонецЕсли;
			ПерваяЧасть = Ложь;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстЗапросаВТ) Тогда
			
			Запрос = Новый Запрос(ТекстЗапросаВТ);
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Выполнить();
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	НачальныеДаты.Дата,
			|	%Функция%(ДатыКалендаря.ДатаГрафика) КАК БлижайшаяДата
			|ИЗ
			|	НачальныеДаты КАК НачальныеДаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатыКалендаря
			|		ПО (ДатыКалендаря.ДатаГрафика %ЗнакУсловия% НачальныеДаты.Дата)
			|			И (ДатыКалендаря.Календарь = &График)
			|			И (ДатыКалендаря.ДеньВключенВГрафик)
			|
			|СГРУППИРОВАТЬ ПО
			|	НачальныеДаты.Дата";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Функция%", 				?(ПолучатьПредшествующие, "МАКСИМУМ", "МИНИМУМ"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЗнакУсловия%", 			?(ПолучатьПредшествующие, "<=", ">="));
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("График", График);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.БлижайшаяДата) Тогда
					ДатыРабочихДней.Вставить(Выборка.Дата, Выборка.БлижайшаяДата);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;			
		
	КонецЕсли;	
	
	Возврат ДатыРабочихДней;
	
КонецФункции

// Функция возвращает список значений с перечнем рабочих дней в указанном периоде.
//
// Параметры:
//  ДатаНачала  - Дата начала периода.
//  ДатаОкончания  - Дата окончания периода.
//
// Возвращаемое значение:
//   Список значений  - список дат - рабочих дней по основному календарю из выбранного периода.
//
Функция ПолучитьРабочиеДниПериода(ДатаНачала, ДатаОкончания) Экспорт
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	тДата = КонецДня(ДатаНачала);
	МассивДат = Новый Массив;
	Пока тДата <= КонецДня(ДатаОкончания) Цикл
		МассивДат.Добавить(тДата);
		тДата = КонецДня(тДата + 1);
	КонецЦикла;
	
	РабочиеДниСоответствие = ПолучитьСоответствиеДатРабочихДней(МассивДат, ,Ложь); 
	СписокДат = Новый СписокЗначений;
	
	Для каждого СтруктураДаты Из РабочиеДниСоответствие Цикл
		Если СтруктураДаты.Ключ = СтруктураДаты.Значение Тогда
			СписокДат.Добавить(СтруктураДаты.Ключ);
		КонецЕсли;
	КонецЦикла;
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат СписокДат;
	
КонецФункции

// Функция возвращает дату, которая отличается указанной даты на количество дней,
// входящих в указанный график.
//
// Параметры:
//	ГрафикРаботы	- график (или производственный календарь), который необходимо использовать, 
//		тип СправочникСсылка.Календари или СправочникСсылка.ПроизводственныеКалендари.
//	ДатаОт			- дата, от которой нужно рассчитать количество дней, тип Дата.
//	КоличествоДней	- количество дней, на которые нужно увеличить дату начала, тип Число.
//	ВызыватьИсключение - булево, если Истина вызывается исключение в случае незаполненного графика.
//
// Возвращаемое значение
//	Дата			- дата, увеличенная на количество дней, входящих в график.
//	Если выбранный график не заполнен, и ВызыватьИсключение = Ложь, возвращается Неопределено.
//
Функция ПолучитьДатуПоКалендарю(Знач Календарь, Знач ДатаОт, Знач КоличествоДней, ВызыватьИсключение = Истина, Знач ВпередПоКалендарю = Истина) Экспорт
	ДатаОт = НачалоДня(ДатаОт);
	
	Если КоличествоДней = 0 Тогда
		Возврат ДатаОт;
	КонецЕсли;
	
	МассивДней = Новый Массив;
	МассивДней.Добавить(КоличествоДней);
	
	Если ВпередПоКалендарю Тогда
		МассивДат = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаОт, МассивДней, ВызыватьИсключение);
	Иначе
		МассивДат = ПолучитьМассивДатПоКалендарю(Календарь, ДатаОт, МассивДней, ВызыватьИсключение);
	КонецЕсли;

	Возврат ?(МассивДат <> Неопределено, МассивДат[0], Неопределено);
	
КонецФункции