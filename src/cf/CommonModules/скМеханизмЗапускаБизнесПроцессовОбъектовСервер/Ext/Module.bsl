
#Область ПрограммныйИнтерфейс

Процедура ФормаОбъектаПриЧтенииНаСервере(Форма, Объект, Знач ОбластьДобавления = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Если ОбластьДобавления = Неопределено Тогда
		ОбластьДобавления = Форма.КоманднаяПанель;		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗапускаБизнесПроцессов.Настройка,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.Представление,
		|	НастройкиЗапускаБизнесПроцессов.КартаМаршрута,
		|	НастройкиЗапускаБизнесПроцессов.КартаМаршрута.Наименование КАК Наименование,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.РежимЗапуска КАК РежимЗапуска,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.АлгоритмЗапуска КАК АлгоритмЗапуска,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
		|	НастройкиЗапускаБизнесПроцессов.КартаМаршрута.вогЯвляетсяСогласованием КАК ЯвляетсяСогласованием
		|ИЗ
		|	РегистрСведений.скНастройкиЗапускаБизнесПроцессов КАК НастройкиЗапускаБизнесПроцессов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";	
					
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	ПовторнаяИнициализация = Форма.Элементы.Найти("скПодменюПроцессы") <> Неопределено;
	
	//Формирование команд
	ГруппаПодменю = СоздатьНайтиГруппуПодменю(
		Форма, 
		"скПодменюПроцессы",
		НСтр("ru = 'Запуск бизнес-процесса'"),
		ОбластьДобавления
	);
	
	//Повторно
	Если ПовторнаяИнициализация Тогда
		//Очиститм по вспомагательным данным
		Для каждого СтрокаДанныхЗапуска Из Форма.скДанныеЗапуска Цикл
			Команда = Форма.Команды.Найти(СтрокаДанныхЗапуска.ИмяКоманды);
			Если Команда <> Неопределено Тогда
				Форма.Команды.Удалить(Команда);
			КонецЕсли;
			
			Кнопка = Форма.Элементы.Найти(СтрокаДанныхЗапуска.ИмяКоманды);
			Если Кнопка <> Неопределено Тогда
				Форма.Элементы.Удалить(Кнопка);
			КонецЕсли;
			
		КонецЦикла;	
	   	Форма.скДанныеЗапуска.Очистить();
		
	Иначе
		//Подготовка вспомагательных данных
		СформироватьВспомогательныеДанныеЗапуска(Форма);
		
	КонецЕсли;	
	
	//Контроль заполнености 
	СтруктураКонтроля = Новый Структура;
	СтруктураКонтроля.Вставить("ВсегоРеквизитов"		  , 0);	
	СтруктураКонтроля.Вставить("ЗаполненоРеквизитов"	  , 0);	
	СтруктураКонтроля.Вставить("ПроцентЗаполненностиОбщий", 100.00);	
		
	ПараметрыКонтроля = вогКонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПараметрыКонтроляЗаполненностиРеквизитов();
	Если ПараметрыКонтроля <> Неопределено Тогда
		ПараметрыКонтроляПроцессов = ПараметрыКонтроля.ПараметрыКонтроляПроцесса.Получить(Объект.Метаданные().ПолноеИмя());
		Если ПараметрыКонтроляПроцессов <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаполненностьРеквизитовПроцессовОбъектов.ВсегоРеквизитов,
				|	ЗаполненностьРеквизитовПроцессовОбъектов.ЗаполненоРеквизитов,
				|	ЗаполненностьРеквизитовПроцессовОбъектов.ПроцентЗаполненностиОбщий
				|ИЗ
				|	РегистрСведений.вогЗаполненностьРеквизитовПроцессовОбъектов КАК ЗаполненностьРеквизитовПроцессовОбъектов
				|ГДЕ
				|	ЗаполненностьРеквизитовПроцессовОбъектов.Объект = &Объект";
			
			ВыборкаКонтроль = Запрос.Выполнить().Выбрать();
			Если ВыборкаКонтроль.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураКонтроля, ВыборкаКонтроль); 	
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл	
		//Формирование таблицы объекта
		СхемаИНастройки = Справочники.скНастройкиЗапускаБизнесПроцессовОбъектов.ОписаниеИСхемаКомпоновкиДанныхНастройки(
			Выборка.ХранилищеСхемыКомпоновкиДанных, Выборка.ХранилищеНастроекКомпоновкиДанных, Выборка.СхемаКомпоновкиДанных);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор, "Ссылка.Ссылка", Объект);
		
		ТаблицаОбъекта = ТаблицаСКД(СхемаИНастройки.СхемаКомпоновкиДанных, СхемаИНастройки.НастройкиКомпоновкиДанных);
		Если ТаблицаОбъекта.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Формирование элементов управления
		ИдентификаторЭлемента = "_" + ИдентификаторЭлемента(Выборка.Настройка) + "__" + ИдентификаторЭлемента(Выборка.КартаМаршрута); 
		
		Команда = СоздатьНайтиКоманду(
			Форма,
			ИдентификаторЭлемента,
			"Подключаемый_ЗапускБизнесПроцесса",
			Выборка.НастройкаПредставление
		);
		
		Кнопка = СоздатьНайтиКнопку(
			Форма,
			Команда.Имя,
			Команда.Имя,
			ГруппаПодменю,
			0, 0
		);
				
		НоваяСтрока = Форма.скДанныеЗапуска.Добавить();
		НоваяСтрока.ИмяКоманды				  = ИдентификаторЭлемента;
		НоваяСтрока.КартаМаршрута		      = Выборка.КартаМаршрута;
		НоваяСтрока.Настройка				  = Выборка.Настройка;
		НоваяСтрока.РежимЗапуска			  = Выборка.РежимЗапуска;
		
		НоваяСтрока.ВсегоРеквизитов 		  = СтруктураКонтроля.ВсегоРеквизитов;
		НоваяСтрока.ЗаполненоРеквизитов 	  = СтруктураКонтроля.ЗаполненоРеквизитов;
		НоваяСтрока.ПроцентЗаполненностиОбщий = СтруктураКонтроля.ПроцентЗаполненностиОбщий;
		
		НоваяСтрока.ЯвляетсяСогласованием	  = Выборка.ЯвляетсяСогласованием;
		НоваяСтрока.АлгоритмЗапуска			  = Выборка.АлгоритмЗапуска;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ФормаОбъектаПриЧтенииНаСервереПоНастройкеБизнесПроцесса(Форма, Объект,НастройкаБизнесПроцесса, Знач ОбластьДобавления = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если ОбластьДобавления = Неопределено Тогда
		ОбластьДобавления = Форма.КоманднаяПанель;		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка",НастройкаБизнесПроцесса);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗапускаБизнесПроцессов.Настройка КАК Настройка,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.Представление КАК НастройкаПредставление,
		|	НастройкиЗапускаБизнесПроцессов.КартаМаршрута КАК КартаМаршрута,
		|	НастройкиЗапускаБизнесПроцессов.КартаМаршрута.Наименование КАК Наименование,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.РежимЗапуска КАК РежимЗапуска,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.АлгоритмЗапуска КАК АлгоритмЗапуска,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
		|	НастройкиЗапускаБизнесПроцессов.Настройка.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
		|	НастройкиЗапускаБизнесПроцессов.КартаМаршрута.вогЯвляетсяСогласованием КАК ЯвляетсяСогласованием
		|ИЗ
		|	РегистрСведений.скНастройкиЗапускаБизнесПроцессов КАК НастройкиЗапускаБизнесПроцессов
		|ГДЕ
		|	НастройкиЗапускаБизнесПроцессов.Настройка = &Настройка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";	
					
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	ПовторнаяИнициализация = Форма.Элементы.Найти("скПодменюПроцессы") <> Неопределено;
	
	//Формирование команд
	ГруппаПодменю = СоздатьНайтиГруппуПодменю(
		Форма, 
		"скПодменюПроцессы",
		НСтр("ru = 'Запуск бизнес-процесса'"),
		ОбластьДобавления
	);
	
	//Повторно
	Если ПовторнаяИнициализация Тогда
		//Очиститм по вспомагательным данным
		Для каждого СтрокаДанныхЗапуска Из Форма.скДанныеЗапуска Цикл
			Команда = Форма.Команды.Найти(СтрокаДанныхЗапуска.ИмяКоманды);
			Если Команда <> Неопределено Тогда
				Форма.Команды.Удалить(Команда);
			КонецЕсли;
			
			Кнопка = Форма.Элементы.Найти(СтрокаДанныхЗапуска.ИмяКоманды);
			Если Кнопка <> Неопределено Тогда
				Форма.Элементы.Удалить(Кнопка);
			КонецЕсли;
			
		КонецЦикла;	
	   	Форма.скДанныеЗапуска.Очистить();
		
	Иначе
		//Подготовка вспомагательных данных
		СформироватьВспомогательныеДанныеЗапуска(Форма);
		
	КонецЕсли;	
	
	//Контроль заполнености 
	СтруктураКонтроля = Новый Структура;
	СтруктураКонтроля.Вставить("ВсегоРеквизитов"		  , 0);	
	СтруктураКонтроля.Вставить("ЗаполненоРеквизитов"	  , 0);	
	СтруктураКонтроля.Вставить("ПроцентЗаполненностиОбщий", 100.00);	
		
	ПараметрыКонтроля = вогКонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПараметрыКонтроляЗаполненностиРеквизитов();
	Если ПараметрыКонтроля <> Неопределено Тогда
		ПараметрыКонтроляПроцессов = ПараметрыКонтроля.ПараметрыКонтроляПроцесса.Получить(Объект.Метаданные().ПолноеИмя());
		Если ПараметрыКонтроляПроцессов <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаполненностьРеквизитовПроцессовОбъектов.ВсегоРеквизитов,
				|	ЗаполненностьРеквизитовПроцессовОбъектов.ЗаполненоРеквизитов,
				|	ЗаполненностьРеквизитовПроцессовОбъектов.ПроцентЗаполненностиОбщий
				|ИЗ
				|	РегистрСведений.вогЗаполненностьРеквизитовПроцессовОбъектов КАК ЗаполненностьРеквизитовПроцессовОбъектов
				|ГДЕ
				|	ЗаполненностьРеквизитовПроцессовОбъектов.Объект = &Объект";
			
			ВыборкаКонтроль = Запрос.Выполнить().Выбрать();
			Если ВыборкаКонтроль.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураКонтроля, ВыборкаКонтроль); 	
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл	
		//Формирование таблицы объекта
		СхемаИНастройки = Справочники.скНастройкиЗапускаБизнесПроцессовОбъектов.ОписаниеИСхемаКомпоновкиДанныхНастройки(
			Выборка.ХранилищеСхемыКомпоновкиДанных, Выборка.ХранилищеНастроекКомпоновкиДанных, Выборка.СхемаКомпоновкиДанных);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор, "Ссылка.Ссылка", Объект);
		
		ТаблицаОбъекта = ТаблицаСКД(СхемаИНастройки.СхемаКомпоновкиДанных, СхемаИНастройки.НастройкиКомпоновкиДанных);
		Если ТаблицаОбъекта.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Формирование элементов управления
		ИдентификаторЭлемента = "_" + ИдентификаторЭлемента(Выборка.Настройка) + "__" + ИдентификаторЭлемента(Выборка.КартаМаршрута); 
		
		Команда = СоздатьНайтиКоманду(
			Форма,
			ИдентификаторЭлемента,
			"Подключаемый_ЗапускБизнесПроцесса",
			Выборка.НастройкаПредставление
		);
		
		Кнопка = СоздатьНайтиКнопку(
			Форма,
			Команда.Имя,
			Команда.Имя,
			ГруппаПодменю,
			0, 0
		);
				
		НоваяСтрока = Форма.скДанныеЗапуска.Добавить();
		НоваяСтрока.ИмяКоманды				  = ИдентификаторЭлемента;
		НоваяСтрока.КартаМаршрута		      = Выборка.КартаМаршрута;
		НоваяСтрока.Настройка				  = Выборка.Настройка;
		НоваяСтрока.РежимЗапуска			  = Выборка.РежимЗапуска;
		
		НоваяСтрока.ВсегоРеквизитов 		  = СтруктураКонтроля.ВсегоРеквизитов;
		НоваяСтрока.ЗаполненоРеквизитов 	  = СтруктураКонтроля.ЗаполненоРеквизитов;
		НоваяСтрока.ПроцентЗаполненностиОбщий = СтруктураКонтроля.ПроцентЗаполненностиОбщий;
		
		НоваяСтрока.ЯвляетсяСогласованием	  = Выборка.ЯвляетсяСогласованием;
		НоваяСтрока.АлгоритмЗапуска			  = Выборка.АлгоритмЗапуска;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура СформироватьВспомогательныеДанныеЗапуска(Форма)

	ИмяТаблицы = "скДанныеЗапуска";
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяКоманды"     			, ОбщегоНазначения.ОписаниеТипаСтрока(150)										   , ИмяТаблицы));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КартаМаршрута"  			, Новый ОписаниеТипов("СправочникСсылка.CRM_КартыМаршрутов")					   , ИмяТаблицы));	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Настройка"      		    , Новый ОписаниеТипов("СправочникСсылка.скНастройкиЗапускаБизнесПроцессовОбъектов"), ИмяТаблицы));	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РежимЗапуска"   			, Новый ОписаниеТипов("ПеречислениеСсылка.скРежимыЗапускаБизнесПроцесса")		   , ИмяТаблицы));	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВсегоРеквизитов"			, ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)			 							   , ИмяТаблицы));	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗаполненоРеквизитов"		, ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)			 							   , ИмяТаблицы));	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроцентЗаполненностиОбщий", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)			 							   , ИмяТаблицы));	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЯвляетсяСогласованием"	, Новый ОписаниеТипов("Булево")												       , ИмяТаблицы));	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("АлгоритмЗапуска"			, Новый ОписаниеТипов("Строка")												       , ИмяТаблицы));	
		
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

Функция ТаблицаСКД(СКД, Настройки)

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СКД,Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаЗначений.Свернуть("Ссылка");

	Возврат ТаблицаЗначений;

КонецФункции

// ++ VOG Солодов В.В. 04.04.2019
Функция ЕстьНезавершенныеПроцессыПоОбъекту(СтрокаЗапуска) Экспорт
	
	ЕстьПроцессы = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_БизнесПроцесс.Предмет КАК Предмет
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.Предмет = &Ссылка
		|	И CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута
		|	И CRM_БизнесПроцесс.Завершен = ЛОЖЬ
		|	И CRM_БизнесПроцесс.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("КартаМаршрута", 	СтрокаЗапуска.КартаМаршрута);
	Запрос.УстановитьПараметр("Ссылка", 		СтрокаЗапуска.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ШаблонСообщения = НСтр("ru = 'По объекту %1 уже запущен процесс ""%2"".'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаЗапуска.Ссылка, СтрокаЗапуска.Настройка.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, ЕстьПроцессы);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЕстьПроцессы;
	
КонецФункции // -- VOG Солодов В.В. 04.04.2019

#КонецОбласти

#Область РаботаСЭлементамиФормы

Функция ИдентификаторЭлемента(Ссылка) Экспорт

	Возврат СтрЗаменить(XMLСтрока(Ссылка), "-", "_");	

КонецФункции // ИдентификаторЭлемента()

Функция СоздатьНайтиГруппуПодменю(Форма,
						   ИмяГруппы,
						   ЗаголовокГруппы, 
						   Родитель = Неопределено)
						   
	Элементы = Форма.Элементы;	
	
	Группа = Элементы.Найти(ИмяГруппы);
	Если Группа = Неопределено Тогда
		Группа   		 = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Форма, Родитель));	
		Группа.Вид		 = ВидГруппыФормы.Подменю;	
		Группа.Заголовок = ЗаголовокГруппы;
		
	КонецЕсли;
	
	Возврат Группа;	
	
КонецФункции // СоздатьНайтиГруппуПодменю()

Функция СоздатьНайтиКоманду(Форма,
							ИмяКоманды, 
							Действие,
							Заголовок = "",
							ОтображениеКнопки = Неопределено,
							Картинка = Неопределено)
							
	Команда = Форма.Команды.Найти(ИмяКоманды);						
	Если Команда = Неопределено Тогда
		Команда 			= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Действие	= Действие;
		Команда.Заголовок	= Заголовок;
		
		Если ОтображениеКнопки <> Неопределено Тогда
			Команда.Отображение	= ОтображениеКнопки;
		КонецЕсли;
		
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
		КонецЕсли;
		
	КонецЕсли;			
	
	Возврат Команда;
	
КонецФункции // СоздатьНайтиКоманду()

Функция СоздатьНайтиКнопку(Форма,
						   ИмяКнопки, 
						   ИмяКоманды,
						   Родитель = Неопределено,
						   Ширина, 
						   Высота);  
						   
	Элементы = Форма.Элементы;	
						   
	Кнопка = Элементы.Найти(ИмяКнопки);
	Если Кнопка = Неопределено Тогда
		Кнопка 			  = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ?(Родитель = Неопределено, Форма, Родитель));
		Кнопка.ИмяКоманды = ИмяКоманды;
		Кнопка.Ширина 	  = Ширина;
		Кнопка.Высота 	  = Высота;
		
		Кнопка.АвтоМаксимальнаяШирина = Ложь;
		Кнопка.АвтоМаксимальнаяВысота = Ложь;
		
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции // СоздатьНайтиКнопку()

#КонецОбласти

#Область Алгоритмы

Функция ОбработкаКомандыПроизвольногоЗапускаБизнесПроцесса(АлгоритмЗапуска, СтруктураЗапуска, Предмет, Результат) Экспорт
	
	Попытка
		Выполнить(АлгоритмЗапуска);		
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика произвольного запуска на сервере""" + СтруктураЗапуска.КартаМаршрута + """по настройке'") + " " + СтруктураЗапуска.Настройка + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Механизм запуска бизнес процессов объектов'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
		
	КонецПопытки;	

	Возврат Результат;	
	
КонецФункции

#КонецОбласти
