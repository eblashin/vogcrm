
///////////////////////////////////////////////////////////////////////////
//  ПЕРИОДИЧЕСКИЕ МЕРОПРИЯТИЯ

// Функция возвращает результат запроса по событиям ряда.
//
// Параметры:
//	Ссылка						- СправочникСсылка	- Ряд событий.
//	СсылкаНаТекущееСобытие		- СправочникСсылка	- Ссылка на текущее событие.
//	ДатаНачала					- Дата				- Дата начала.
//	ДатаОкончания				- Дата				- Дата окончания.
//	ПолучатьИзмененныеВРяде		- Булево			- Флаг получения измененных в ряде.
//	ПолучатьНеПериодические		- Булево			- Флаг получения непериодических.
//	ПолучатьСПометкойНаУдаление	- Булево			- Флаг получения помеченных на удаление.
//
// Возвращаемое значение:
//	РезультатЗапроса	- Результат запроса по событиям ряда.
//
Функция ПолучитьРезультатЗапросаПоМероприятиямРяда(Ссылка, СсылкаНаТекущееМероприятие = Неопределено, ДатаНачала = Неопределено,
		ДатаОкончания = Неопределено, ПолучатьИзмененныеВРяде = Ложь, ПолучатьНеПериодические = Ложь, ПолучатьСПометкойНаУдаление = Истина) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда Возврат Неопределено; КонецЕсли;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Мероприятие.Ссылка					КАК Мероприятие,
	|	Мероприятие.Дата					КАК ДатаНачала,
	|	Мероприятие.ОкончаниеМероприятия	КАК ДатаОкончания,
	|	Мероприятие.ИзмененоВРяде			КАК ИзмененоВРяде,
	|	Мероприятие.ПометкаУдаления			КАК ПометкаУдаления
	|ИЗ
	|	Документ.CRM_Мероприятие КАК Мероприятие
	|ГДЕ
	|	Мероприятие.РядСобытий = &РядСобытий
	|	" + ?(ПолучатьНеПериодические, "", "И Мероприятие.Периодическое") + "
	|	" + ?(ПолучатьИзмененныеВРяде, "", "И НЕ Мероприятие.ИзмененоВРяде") + "
	|	" + ?(ПолучатьСПометкойНаУдаление, "", "И НЕ Мероприятие.ПометкаУдаления") + "
	|	" + ?(СсылкаНаТекущееМероприятие = Неопределено, "", "И Мероприятие.Ссылка <> &СсылкаНаТекущееМероприятие") + "
	|	" + ?(ДатаНачала = Неопределено, "", "И Мероприятие.Дата >= &ДатаНачала") + "
	|	" + ?(ДатаОкончания = Неопределено, "", "И Мероприятие.ОкончаниеМероприятия <= &ДатаОкончания") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Мероприятие.Дата ВОЗР
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("РядСобытий", Ссылка);
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	Если ПараметрыЗапроса.Найти("СсылкаНаТекущееМероприятие") <> Неопределено Тогда
		Запрос.УстановитьПараметр("СсылкаНаТекущееМероприятие", СсылкаНаТекущееМероприятие);
	КонецЕсли;
	Если ПараметрыЗапроса.Найти("ДатаНачала") <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	КонецЕсли;
	Если ПараметрыЗапроса.Найти("ДатаОкончания") <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	КонецЕсли;
	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоМероприятиямРяда()

// Процедура создает копию документа по ссылке на документ - шаблон.
//
// Параметры:
//	СобытиеОбъект		- ДокументОбъект	- Событие	
//	СобытиеШаблон		- Документссылка	- Шаблон события.
//	ДатаПоРасписанию	- Дата				- Дата по расписанию.
//	ЭтоНовыйОбъект		- Булево			- Флаг нового объекта.
//
Процедура ЗаполнитьОбъектМероприятияПоМероприятию(МероприятиеОбъект, МероприятиеШаблон, ДатаПоРасписанию, ЭтоНовыйОбъект)
	ЗаполнитьЗначенияСвойств(МероприятиеОбъект, МероприятиеШаблон,, "Номер");
	СобытиеМД = МероприятиеОбъект.Метаданные();
	Для Каждого ТабличнаяЧасть Из СобытиеМД.ТабличныеЧасти Цикл
		ИмяТЧ = ТабличнаяЧасть.Имя;
		МероприятиеОбъект[ИмяТЧ].Очистить();
		Для Каждого СтрокаТЧ Из МероприятиеШаблон[ИмяТЧ] Цикл
			НоваяСтрока = МероприятиеОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
	КонецЦикла;
	МероприятиеОбъект.Дата				= НачалоДня(ДатаПоРасписанию) + (МероприятиеШаблон.Дата - НачалоДня(МероприятиеШаблон.Дата));
	МероприятиеОбъект.ОкончаниеМероприятия	= НачалоДня(ДатаПоРасписанию) + (МероприятиеШаблон.ОкончаниеМероприятия - НачалоДня(МероприятиеШаблон.ОкончаниеМероприятия));
	МероприятиеОбъект.ПометкаУдаления = Ложь;
	МероприятиеОбъект.Периодическое = Истина;
	Если ЭтоНовыйОбъект Тогда
		МероприятиеОбъект.УстановитьНовыйНомер();
	КонецЕсли;
КонецПроцедуры // ЗаполнитьОбъектСобытияПоСобытию()

// Процедура производит групповое изменения событий ряда.
//
// Параметры:
//	СобытиеИнициатор	- ДокументСсылка	- Событие, которое инициировало изменение ряда.
//	СпособИзмененияРяда	- Строка			- Вид действия над рядом событий.
//	ДатаНачала			- Дата				- Дата начала.
//	ДатаОкончания		- Дата				- Дата окончания.
//
Процедура ИзменитьМероприятияРяда(МероприятиеИнициатор, Знач СпособИзмененияРяда, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено, АдресНастроек) Экспорт
	Если СпособИзмененияРяда <> "ТолькоТекущее"
		И СпособИзмененияРяда <> "ДоКонцаРяда"
		И СпособИзмененияРяда <> "ВесьРяд"
		И СпособИзмененияРяда <> "УдалитьВсеСобытияРяда" Тогда
		ВызватьИсключение НСтр("ru = 'ИзменитьСобытияРяда() - недопустимое значение параметра <СпособИзмененияРяда>'");
		Возврат;
	КонецЕсли;
	Если СпособИзмененияРяда = "ТолькоТекущее" Тогда
		// Сразу возврат, т.к. событие само себя исключило от ряда установив флаг ИзмененоВРяде.
		Возврат;
	КонецЕсли;
	РядСобытий = МероприятиеИнициатор.РядСобытий;
	Если НЕ ЗначениеЗаполнено(РядСобытий) Тогда Возврат; КонецЕсли;
	Если СпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
		РядСобытий = МероприятиеИнициатор.РядСобытий;
		РезультатЗапросаПоСобытиямРяда = ПолучитьРезультатЗапросаПоМероприятиямРяда(РядСобытий,,,, Ложь, Истина, Ложь);
		ВыборкаСобытийРяда = РезультатЗапросаПоСобытиямРяда.Выбрать();
		Пока ВыборкаСобытийРяда.Следующий() Цикл
			СобытиеОбъект = ВыборкаСобытийРяда.Мероприятие.ПолучитьОбъект();
			СобытиеОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	Если СпособИзмененияРяда = "ВесьРяд" Тогда
		ДатаНачала = РядСобытий.ДатаНачала;
	Иначе
		Если ДатаНачала = Неопределено Тогда
			ДатаНачала = РядСобытий.ДатаНачала;
		КонецЕсли;
	КонецЕсли;
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = РядСобытий.ДатаОкончания;
	КонецЕсли;
	ДатаНачала		= НачалоДня(ДатаНачала);
	ДатаОкончания	= НачалоДня(ДатаОкончания);
	Если ДатаОкончания <= ДатаНачала Или СпособИзмененияРяда = "ВесьРяд" Тогда
		РезультатЗапросаПоСобытиямРяда = ПолучитьРезультатЗапросаПоМероприятиямРяда(РядСобытий,, Мин(ДатаНачала, ДатаОкончания),, Истина, Истина);
	Иначе
		РезультатЗапросаПоСобытиямРяда = ПолучитьРезультатЗапросаПоМероприятиямРяда(РядСобытий,, ДатаНачала, ДатаОкончания, Истина, Истина);
	КонецЕсли;
	Расписание = Справочники.CRM_РядыСобытий.ПолучитьРасписание(РядСобытий);
	Если СпособИзмененияРяда = "ДоКонцаРяда" Тогда
		МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(Мин(ДатаНачала, ДатаОкончания),
			Макс(ДатаНачала, ДатаОкончания), РядСобытий, Расписание);
	Иначе
		МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ДатаНачала, ДатаОкончания, РядСобытий, Расписание);
	КонецЕсли;
	ТаблицаСобытийРяда = РезультатЗапросаПоСобытиямРяда.Выгрузить();
	ТаблицаСобытийРяда.Колонки.Добавить("ДатаНачалаНачалоДня", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаСобытийРяда.Колонки.Добавить("ПометкаСобытиеИспользовано", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицы Из ТаблицаСобытийРяда Цикл
		СтрокаТаблицы.ДатаНачалаНачалоДня = НачалоДня(СтрокаТаблицы.ДатаНачала);
	КонецЦикла;
	Для Каждого ДатаВремяРасписания Из МассивДатРасписания Цикл
		ДатаПоРасписанию = НачалоДня(ДатаВремяРасписания);
		СобытиеОбъект = Неопределено;
		ЭтоНовыйОбъект = Ложь;
		НайденныеСтроки = ТаблицаСобытийРяда.НайтиСтроки(Новый Структура("ДатаНачалаНачалоДня,ПометкаСобытиеИспользовано", ДатаПоРасписанию, Ложь));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаСобытия = НайденныеСтроки[0];
			СтрокаСобытия.ПометкаСобытиеИспользовано = Истина;
			Если (СтрокаСобытия.Мероприятие = МероприятиеИнициатор Или СтрокаСобытия.ИзмененоВРяде) 
				И НЕ СтрокаСобытия.ПометкаУдаления Тогда Продолжить; КонецЕсли;
			СобытиеОбъект = СтрокаСобытия.Мероприятие.ПолучитьОбъект();
		КонецЕсли;
		Если СобытиеОбъект = Неопределено Тогда
			СобытиеОбъект = Документы.CRM_Мероприятие.СоздатьДокумент();
			ЭтоНовыйОбъект = Истина;
		КонецЕсли;
		ЗаполнитьОбъектМероприятияПоМероприятию(СобытиеОбъект, МероприятиеИнициатор, ДатаПоРасписанию, ЭтоНовыйОбъект);
		СобытиеОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
		СобытиеОбъект.Записать();
		
	КонецЦикла;
	НайденныеСтроки = ТаблицаСобытийРяда.НайтиСтроки(Новый Структура("ПометкаСобытиеИспользовано,ИзмененоВРяде,ПометкаУдаления", Ложь, Ложь, Ложь));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СобытиеОбъект =  НайденнаяСтрока.Мероприятие.ПолучитьОбъект();
		СобытиеОбъект.мНеУстанавливатьПризнакИзмененоВРяде = Истина;
		
		СобытиеОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры // ИзменитьСобытияРяда()

// Возвращает структуру с RGB составляющими цветовой категории события.
//
Функция ПолучитьRGBКатегорииПоИндексу(ИндексКатегории) Экспорт
	Попытка		ИндексКатегорииЧисло = Число(ИндексКатегории);
	Исключение	Возврат Неопределено;
	КонецПопытки;
	Если ИндексКатегорииЧисло > 24 Или ИндексКатегорииЧисло < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	Категории.ЦветКрасный КАК ЦветКрасный,
	|	Категории.ЦветЗеленый КАК ЦветЗеленый,
	|	Категории.ЦветСиний КАК ЦветСиний
	|ИЗ
	|	Справочник.CRM_Категории КАК Категории
	|ГДЕ
	|	НЕ Категории.ПометкаУдаления
	|	И Категории.ЦветИндекс = &ЦветИндекс
	|");
	Запрос.УстановитьПараметр("ЦветИндекс", ИндексКатегорииЧисло);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Красный,Зеленый,Синий", Выборка.ЦветКрасный, Выборка.ЦветЗеленый, Выборка.ЦветСиний);
	Иначе
		МассивКатегорий = Новый Массив();
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  255,136,124)); // 0
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  255,184,120)); // 1
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  251,215,91)); // 2
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  255,250,130)); // 3
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  122,231,191)); // 4
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  70,214,219)); // 5
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  197,210,169)); // 6
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  164,189,252)); // 7
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  219,173,255)); // 8
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  212,164,186)); // 9
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  216,218,229)); // 10
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  97,111,140)); // 11
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  225,225,225)); // 12
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  104,104,104)); // 13
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  46,46,46)); // 14
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  220,33,39)); // 15
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  206,93,17)); // 16
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  192,145,32)); // 17
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  175,170,0)); // 18
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  81,183,73)); // 19
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  53,149,119)); // 20
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  114,130,71)); // 21
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  84,132,237)); // 22
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  91,61,160)); // 23
		МассивКатегорий.Добавить(Новый Структура("Красный,Зеленый,Синий",  147,67,108)); // 24
		
		Возврат МассивКатегорий[ИндексКатегорииЧисло];
		
	КонецЕсли;
КонецФункции

///////////////////////////////////////////////////////////////////////////
//  ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ СОБЫТИЙ (УСТАРЕЛИ)

// Функция возвращает результат запроса по событиям ряда
//
// Параметры
//	Ссылка						- СправочникСсылка	- Ряд событий
//	СсылкаНаТекущееСобытие		- СправочникСсылка	- Ссылка на текущее событие
//	ДатаНачала					- Дата				- Дата начала
//	ДатаОкончания				- Дата				- Дата окончания
//	ПолучатьИзмененныеВРяде		- Булево			- Флаг получения измененных в ряде 
//	ПолучатьНеПериодические		- Булево			- Флаг получения непериодических
//	ПолучатьСПометкойНаУдаление	- Булево			- Флаг получения помеченных на удаление
//
// Возвращаемое значение:
//	РезультатЗапроса	- Результат запроса по событиям ряда
//
//+Google
Функция ПолучитьРезультатЗапросаПоСобытиямРяда(Ссылка, СсылкаНаТекущееСобытие = Неопределено, ДатаНачала = Неопределено,
		ДатаОкончания = Неопределено, ПолучатьИзмененныеВРяде = Ложь, ПолучатьНеПериодические = Ложь, ПолучатьСПометкойНаУдаление = Истина) Экспорт
//-Google
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда Возврат Неопределено; КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	События.Ссылка				КАК Событие,
	|	События.Дата				КАК ДатаНачала,
	|	События.ОкончаниеСобытия	КАК ДатаОкончания,
	|	События.ИзмененоВРяде		КАК ИзмененоВРяде,
	|	События.ПометкаУдаления		КАК ПометкаУдаления
	|ИЗ
	|	Документ.CRM_Событие КАК События
	|ГДЕ
	|	События.РядСобытий = &РядСобытий
	|	" + ?(ПолучатьНеПериодические, "", "И События.Периодическое") + "
	|	" + ?(ПолучатьИзмененныеВРяде, "", "И НЕ События.ИзмененоВРяде") + "
	|	" + ?(ПолучатьСПометкойНаУдаление, "", "И НЕ События.ПометкаУдаления") + "
	|	" + ?(СсылкаНаТекущееСобытие = Неопределено, "", "И События.Ссылка <> &СсылкаНаТекущееСобытие") + "
	|	" + ?(ДатаНачала = Неопределено, "", "И События.Дата >= &ДатаНачала") + "
	|	" + ?(ДатаОкончания = Неопределено, "", "И События.ОкончаниеСобытия <= &ДатаОкончания") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	События.Дата ВОЗР
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("РядСобытий", Ссылка);
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	Если ПараметрыЗапроса.Найти("СсылкаНаТекущееСобытие") <> Неопределено Тогда
		Запрос.УстановитьПараметр("СсылкаНаТекущееСобытие", СсылкаНаТекущееСобытие);
	КонецЕсли;
	Если ПараметрыЗапроса.Найти("ДатаНачала") <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	КонецЕсли;
	Если ПараметрыЗапроса.Найти("ДатаОкончания") <> Неопределено Тогда
		
		КонецДняДатаОкончания = КонецДня(ДатаОкончания);
		
		// Если ряд событий учитывает рабочие графики, то последнее событие может быть перенесено
		// с выходного дня на ближайший рабочий день
		Если Ссылка.УчитыватьГрафикРаботы Тогда
			
			СоответствиеДат = CRM_КалендарныеГрафики.ПолучитьСоответствиеДатРабочихДней(КонецДняДатаОкончания);
			
			ДатаОкончанияИзСоответствия = СоответствиеДат.Получить(КонецДняДатаОкончания);
			
			Запрос.УстановитьПараметр("ДатаОкончания", ?(ДатаОкончанияИзСоответствия = Неопределено, КонецДняДатаОкончания, КонецДня(ДатаОкончанияИзСоответствия)));
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДняДатаОкончания);
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоСобытиямРяда()

// Процедура создает копию документа CRM_Событие по ссылке на документ - шаблон
//
// Параметры:
//	СобытиеОбъект		- ДокументОбъект	- Событие	
//	СобытиеШаблон		- Документссылка	- Шаблон события
//	ДатаПоРасписанию	- Дата				- Дата по расписанию
//	ЭтоНовыйОбъект		- Булево			- Флаг нового объекта
//
Процедура ЗаполнитьОбъектСобытияПоСобытию(СобытиеОбъект, СобытиеШаблон, ДатаПоРасписанию, ЭтоНовыйОбъект)
	ЗаполнитьЗначенияСвойств(СобытиеОбъект, СобытиеШаблон,, "Номер");
	СобытиеМД = СобытиеОбъект.Метаданные();
	Для Каждого ТабличнаяЧасть Из СобытиеМД.ТабличныеЧасти Цикл
		ИмяТЧ = ТабличнаяЧасть.Имя;
		СобытиеОбъект[ИмяТЧ].Очистить();
		Для Каждого СтрокаТЧ Из СобытиеШаблон[ИмяТЧ] Цикл
			НоваяСтрока = СобытиеОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
	КонецЦикла;
	СобытиеОбъект.Дата				= НачалоДня(ДатаПоРасписанию) + (СобытиеШаблон.Дата - НачалоДня(СобытиеШаблон.Дата));
	СобытиеОбъект.ОкончаниеСобытия	= НачалоДня(ДатаПоРасписанию) + (СобытиеШаблон.ОкончаниеСобытия - НачалоДня(СобытиеШаблон.ОкончаниеСобытия));
	СобытиеОбъект.ПометкаУдаления = Ложь;
	СобытиеОбъект.Периодическое = Истина;
	Если ЭтоНовыйОбъект Тогда
		СобытиеОбъект.УстановитьНовыйНомер();
	КонецЕсли;
КонецПроцедуры // ЗаполнитьОбъектСобытияПоСобытию()

// Процедура производит групповое изменения событий ряда
//
// Параметры:
//	СобытиеИнициатор	- ДокументСсылка	- Событие, которое инициировало изменение ряда
//	СпособИзмененияРяда	- Строка			- Вид действия над рядом событий
//	ДатаНачала			- Дата				- Дата начала
//	ДатаОкончания		- Дата				- Дата окончания
//
Процедура ИзменитьСобытияРяда(СобытиеИнициатор, Знач СпособИзмененияРяда, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено, АдресНастроек) Экспорт
	Если СпособИзмененияРяда <> "ТолькоТекущее"
		И СпособИзмененияРяда <> "ДоКонцаРяда"
		И СпособИзмененияРяда <> "ВесьРяд"
		И СпособИзмененияРяда <> "УдалитьВсеСобытияРяда" Тогда
		ВызватьИсключение НСтр("ru = 'ИзменитьСобытияРяда() - недопустимое значение параметра <СпособИзмененияРяда>'");
		Возврат;
	КонецЕсли;
	Если СпособИзмененияРяда = "ТолькоТекущее" Тогда
		// Сразу возврат, т.к. событие само себя исключило от ряда установив флаг ИзмененоВРяде
		Возврат;
	КонецЕсли;
	РядСобытий = СобытиеИнициатор.РядСобытий;
	Если НЕ ЗначениеЗаполнено(РядСобытий) Тогда Возврат; КонецЕсли;
	Если СпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
		РядСобытий = СобытиеИнициатор.РядСобытий;
		РезультатЗапросаПоСобытиямРяда = ПолучитьРезультатЗапросаПоСобытиямРяда(РядСобытий,,,, Ложь, Истина, Ложь);
		ВыборкаСобытийРяда = РезультатЗапросаПоСобытиямРяда.Выбрать();
		Пока ВыборкаСобытийРяда.Следующий() Цикл
			СобытиеОбъект = ВыборкаСобытийРяда.Событие.ПолучитьОбъект();
			СобытиеОбъект.мНеПроверятьНаКорректностьПриЗаписи = Истина;
			СобытиеОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	Если СпособИзмененияРяда = "ВесьРяд" Тогда
		ДатаНачала = РядСобытий.ДатаНачала;
	Иначе
		Если ДатаНачала = Неопределено Тогда
			ДатаНачала = РядСобытий.ДатаНачала;
		КонецЕсли;
	КонецЕсли;
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = РядСобытий.ДатаОкончания;
	КонецЕсли;
	ДатаНачала		= НачалоДня(ДатаНачала);
	ДатаОкончания	= НачалоДня(ДатаОкончания);
	Если ДатаОкончания <= ДатаНачала Или СпособИзмененияРяда = "ВесьРяд" Тогда
		РезультатЗапросаПоСобытиямРяда = ПолучитьРезультатЗапросаПоСобытиямРяда(РядСобытий,, Мин(ДатаНачала, ДатаОкончания),, Истина, Истина);
	Иначе
		РезультатЗапросаПоСобытиямРяда = ПолучитьРезультатЗапросаПоСобытиямРяда(РядСобытий,, ДатаНачала, ДатаОкончания, Истина, Истина);
	КонецЕсли;
	Расписание = Справочники.CRM_РядыСобытий.ПолучитьРасписание(РядСобытий);
	Если СпособИзмененияРяда = "ДоКонцаРяда" Тогда
		МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(Мин(ДатаНачала, ДатаОкончания),
			Макс(ДатаНачала, ДатаОкончания), РядСобытий, Расписание);
	Иначе
		МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ДатаНачала, ДатаОкончания, РядСобытий, Расписание);
	КонецЕсли;
	ТаблицаСобытийРяда = РезультатЗапросаПоСобытиямРяда.Выгрузить();
	ТаблицаСобытийРяда.Колонки.Добавить("ДатаНачалаНачалоДня", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаСобытийРяда.Колонки.Добавить("ПометкаСобытиеИспользовано", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицы Из ТаблицаСобытийРяда Цикл
		СтрокаТаблицы.ДатаНачалаНачалоДня = НачалоДня(СтрокаТаблицы.ДатаНачала);
	КонецЦикла;
	Для Каждого ДатаВремяРасписания Из МассивДатРасписания Цикл
		ДатаПоРасписанию = НачалоДня(ДатаВремяРасписания);
		СобытиеОбъект = Неопределено;
		ЭтоНовыйОбъект = Ложь;
		НайденныеСтроки = ТаблицаСобытийРяда.НайтиСтроки(Новый Структура("ДатаНачалаНачалоДня,ПометкаСобытиеИспользовано", ДатаПоРасписанию, Ложь));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаСобытия = НайденныеСтроки[0];
			СтрокаСобытия.ПометкаСобытиеИспользовано = Истина;
			Если (СтрокаСобытия.Событие = СобытиеИнициатор Или СтрокаСобытия.ИзмененоВРяде) 
				И НЕ СтрокаСобытия.ПометкаУдаления Тогда Продолжить; КонецЕсли;
			СобытиеОбъект = СтрокаСобытия.Событие.ПолучитьОбъект();
		КонецЕсли;
		Если СобытиеОбъект = Неопределено Тогда
			СобытиеОбъект = Документы.УдалитьCRM_Событие.СоздатьДокумент();
			ЭтоНовыйОбъект = Истина;
		КонецЕсли;
		ЗаполнитьОбъектСобытияПоСобытию(СобытиеОбъект, СобытиеИнициатор, ДатаПоРасписанию, ЭтоНовыйОбъект);
		СобытиеОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
		СобытиеОбъект.мНеПроверятьНаКорректностьПриЗаписи		= Истина;
		СобытиеОбъект.Записать();
		
		//т.к. событие было создано/изменено, то оповещения  надо заново транслировать на ряд
		CRM_ОповещенияСервер.СформироватьОповещенияПоСобытию(СобытиеОбъект.Ссылка,АдресНастроек);
		
	КонецЦикла;
	НайденныеСтроки = ТаблицаСобытийРяда.НайтиСтроки(Новый Структура("ПометкаСобытиеИспользовано,ИзмененоВРяде,ПометкаУдаления", Ложь, Ложь, Ложь));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СобытиеОбъект =  НайденнаяСтрока.Событие.ПолучитьОбъект();
		СобытиеОбъект.мНеУстанавливатьПризнакИзмененоВРяде = Истина;
		СобытиеОбъект.мНеПроверятьНаКорректностьПриЗаписи = Истина;
		СобытиеОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры // ИзменитьСобытияРяда()

// Процедура создает на командной панели формы подменю выбора вида события.
//
// Параметры:
//	Форма			- УправляемаяФорма		- Управляемая форма.
//	ГруппаФормы		- ГруппаФормы			- Группа формы.
//	ПервыйЭлемент	- ПеречислениеСсылка	- Вид события по умолчанию.
//
Процедура СоздатьГруппуСозданияСобытия(Форма, ГруппаФормы, ПервыйЭлемент = Неопределено, НеСоздаватьГруппу = Ложь, ИмяКоманды = "") Экспорт
	Если НеСоздаватьГруппу Тогда
		ГруппаСоздатьСобытие = ГруппаФормы;
	Иначе	
		Для Каждого ЭлементГруппы Из ГруппаФормы.ПодчиненныеЭлементы Цикл
			Если Найти(ЭлементГруппы.Имя, "СоздатьСобытие") = 1 Тогда Возврат; КонецЕсли;
		КонецЦикла;	
		ГруппаСоздатьСобытие = Форма.Элементы.Добавить(ГруппаФормы.Имя + "_СоздатьСобытие", Тип("ГруппаФормы"), ГруппаФормы);
		ГруппаСоздатьСобытие.Вид = ВидГруппыФормы.Подменю;
		ГруппаСоздатьСобытие.Заголовок = "Событие";
		ГруппаСоздатьСобытие.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ПервыйЭлемент) Тогда
		ГруппаПервогоСобытия = Форма.Элементы.Добавить(ГруппаСоздатьСобытие.Имя + "_ГруппаПервогоСобытия", Тип("ГруппаФормы"), ГруппаСоздатьСобытие);
		ГруппаПервогоСобытия.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;	
	Для Каждого ЭлементПеречисления Из Перечисления.CRM_ВидыСобытий Цикл
		ИндексЗначения = Перечисления.CRM_ВидыСобытий.Индекс(ЭлементПеречисления);
		ИмяПеречисления = Метаданные.Перечисления.CRM_ВидыСобытий.ЗначенияПеречисления[ИндексЗначения].Имя;		
		Если ЭлементПеречисления = ПервыйЭлемент Тогда
			НоваяКнопка = Форма.Элементы.Добавить(ГруппаСоздатьСобытие.Имя + "_" + ИмяПеречисления, Тип("КнопкаФормы"), ГруппаПервогоСобытия);
			НоваяКнопка.КнопкаПоУмолчанию = Истина;
		Иначе
			НоваяКнопка = Форма.Элементы.Добавить(ГруппаСоздатьСобытие.Имя + "_" + ИмяПеречисления, Тип("КнопкаФормы"), ГруппаСоздатьСобытие);
		КонецЕсли;	
		НоваяКнопка.Заголовок = ЭлементПеречисления;
		НоваяКнопка.Картинка = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуВидаСобытия(ЭлементПеречисления);
		НоваяКоманда = Форма.Команды.Добавить(ГруппаСоздатьСобытие.Имя + "_" + ИмяПеречисления);
		Если ПустаяСтрока(ИмяКоманды) Тогда
			НоваяКоманда.Действие = "СоздатьСобытиеОбщее";
		Иначе
			НоваяКоманда.Действие = ИмяКоманды;
		КонецЕсли;	
		НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя; 
	КонецЦикла;
КонецПроцедуры // СоздатьГруппуСозданияСобытия()

// Возвращает Истина если запрещены изменения события.
//
Функция ИзмененияСобытияЗапрещены(Событие) Экспорт
	Если ТипЗнч(Событие) = Тип("ДокументСсылка.УдалитьCRM_Событие") И ЗначениеЗаполнено(Событие) Тогда
		Если	Не Пользователи.РолиДоступны("ПолныеПрава")
			И	Событие.СостояниеСобытия.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено Тогда
			//
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
