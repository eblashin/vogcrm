
#Область РаботаСИнтервалами

Функция ПолучитьСтруктуруДанныхИнервала(Форма, ДанныеСтрокиДерева, ДатаНачалаПоУмолчанию) Экспорт

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Начало"   , ДатаНачалаПоУмолчанию + (ДанныеСтрокиДерева.ОтсрочкаСтартаДней * 86400));
	СтруктураДанных.Вставить("Окончание", СтруктураДанных.Начало + (ДанныеСтрокиДерева.ПродолжительностьДней * 86400));
	
	Если ДанныеСтрокиДерева.Зависимости.Количество() > 0 Тогда
		
		СтрокаБуфера = Форма.БуферРасчетаИнтервала.Добавить();
		СтрокаБуфера.ИдентификаторСтроки = ДанныеСтрокиДерева.ИдентификаторСтроки;
		
		ЗначениеСтрокиБуфера = СтрокаБуфера.Значение;
		ЗначениеСтрокиБуфера.Очистить();
		
		Для каждого СтрокаЗависимости Из ДанныеСтрокиДерева.Зависимости Цикл
			Для каждого СтрокаДерева Из Форма.ДеревоМодели.ПолучитьЭлементы() Цикл
				СтрокаПоиска = НайтиСтрокуДереваРекурсивно(СтрокаДерева.ПолучитьЭлементы(), "ИдентификаторСтроки", СтрокаЗависимости.ИдентификаторСтроки);	
				
			КонецЦикла;
					
			Если СтрокаПоиска <> Неопределено Тогда
				НоваяСтрока = ЗначениеСтрокиБуфера.Добавить();	
				НоваяСтрока.ИдентификаторСтрокиДерева = СтрокаПоиска.ПолучитьИдентификатор();
				НоваяСтрока.ТипСвязи    			  = СтрокаЗависимости.ТипСвязи;
				НоваяСтрока.ОтсрочкаДней 			  = СтрокаЗависимости.ОтсрочкаДней;
				
				Если СтрокаПоиска.Зависимости.Количество() > 0 Тогда
					СтруктураИнтервала = ПолучитьСтруктуруДанныхИнервала(Форма, СтрокаПоиска, ДатаНачалаПоУмолчанию);
					НоваяСтрока.ДатаНачала    = СтруктураИнтервала.Начало;
					НоваяСтрока.ДатаОкончания = СтруктураИнтервала.Окончание;
					
				Иначе	
					НоваяСтрока.ДатаНачала    = ДатаНачалаПоУмолчанию + (СтрокаПоиска.ОтсрочкаСтартаДней * 86400);
					НоваяСтрока.ДатаОкончания = НоваяСтрока.ДатаНачала + (СтрокаПоиска.ПродолжительностьДней * 86400);
					
				КонецЕсли;
				
				Если СтрокаЗависимости.ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.НачалоНачало") 
				  ИЛИ СтрокаЗависимости.ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.НачалоОкончание") Тогда
					НоваяСтрока.ДатаСортировки = НоваяСтрока.ДатаНачала;
					
				Иначе	
					НоваяСтрока.ДатаСортировки = НоваяСтрока.ДатаОкончания;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;		
		
		Если ЗначениеСтрокиБуфера.Количество() = 0 Тогда
			Возврат СтруктураДанных;
		КонецЕсли;	
		
		ЗначениеСтрокиБуфера.Сортировать("ДатаСортировки Убыв");
		СтрокаБуфера = ЗначениеСтрокиБуфера[0];
		
		ДанныеСтрокиЗависимости = Форма.ДеревоМодели.НайтиПоИдентификатору(СтрокаБуфера.ИдентификаторСтрокиДерева);
		Если ДанныеСтрокиЗависимости = Неопределено Тогда
			Возврат СтруктураДанных;
			
		Иначе	
			Если СтрокаБуфера.ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.НачалоНачало") Тогда
				СтруктураДанных.Начало    = СтрокаБуфера.ДатаНачала + (СтрокаБуфера.ОтсрочкаДней * 86400);		
				СтруктураДанных.Окончание = СтруктураДанных.Начало + (ДанныеСтрокиДерева.ПродолжительностьДней * 86400);
				
			ИначеЕсли СтрокаБуфера.ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.НачалоОкончание") Тогда	
				СтруктураДанных.Окончание = СтрокаБуфера.ДатаНачала;		
				СтруктураДанных.Начало    = (СтруктураДанных.Окончание + (СтрокаБуфера.ОтсрочкаДней * 86400)) - (ДанныеСтрокиДерева.ПродолжительностьДней * 86400);
				
			ИначеЕсли СтрокаБуфера.ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.ОкончаниеНачало")
			  ИЛИ Не ЗначениеЗаполнено(СтрокаБуфера.ТипСвязи) Тогда
				СтруктураДанных.Начало    = СтрокаБуфера.ДатаОкончания + (СтрокаБуфера.ОтсрочкаДней * 86400);		
				СтруктураДанных.Окончание = СтруктураДанных.Начало + (ДанныеСтрокиДерева.ПродолжительностьДней * 86400);
				
			ИначеЕсли СтрокаБуфера.ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.ОкончаниеОкончание") Тогда
				СтруктураДанных.Окончание = СтрокаБуфера.ДатаОкончания;		
				СтруктураДанных.Начало    = СтруктураДанных.Окончание - (ДанныеСтрокиДерева.ПродолжительностьДней * 86400) + (СтрокаБуфера.ОтсрочкаДней * 86400);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруДанныхИнервала()

Функция НайтиСтрокуДереваРекурсивно(ЭлементыДерева, ПолеПоиска, ЗначениеПоиска)
	
	Перем Результат;
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева[ПолеПоиска] = ЗначениеПоиска Тогда
			Результат = СтрокаДерева;
			Прервать;
			
		Иначе
			Результат = НайтиСтрокуДереваРекурсивно(СтрокаДерева.ПолучитьЭлементы(), ПолеПоиска, ЗначениеПоиска);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // НайтиСтрокуДереваРекурсивно()

#КонецОбласти