//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Функция возвращает список значений, содержащий имена и представления вариантов стандартного периода.
//
// Параметры:
//	Нет.
// 
// Возвращаемое значение:
//	СписокЗначений	- Список, который содержит имена и представления вариантов стандартного периода.
// 
Функция ПериодПолучитьСписокВыбора() Экспорт
	ТипыПериодов = Новый СписокЗначений;
	ТипыПериодов.Добавить("НеВыбран", НСтр("ru = 'Без ограничения'"));
	ТипыПериодов.Добавить("ПроизвольныйПериод", НСтр("ru = 'Произвольный период'"));
	ТипыПериодов.Добавить("Сегодня", НСтр("ru = 'Сегодня'"));
	ТипыПериодов.Добавить("Вчера", НСтр("ru = 'Вчера'"));
	ТипыПериодов.Добавить("ПрошлаяНеделя", НСтр("ru = 'Прошлая неделя'"));
	ТипыПериодов.Добавить("ЭтаНеделя", НСтр("ru = 'Эта неделя'"));
	ТипыПериодов.Добавить("ПрошлыйМесяц", НСтр("ru = 'Прошлый месяц'"));
	ТипыПериодов.Добавить("ЭтотМесяц", 	НСтр("ru = 'Этот месяц'"));
	ТипыПериодов.Добавить("ПрошлыйКвартал", НСтр("ru = 'Прошлый квартал'"));
	ТипыПериодов.Добавить("ЭтотКвартал", НСтр("ru = 'Этот квартал'"));
	ТипыПериодов.Добавить("ПрошлыйГод", НСтр("ru = 'Прошлый год'"));
	ТипыПериодов.Добавить("ЭтотГод", НСтр("ru = 'Этот год'"));
	Возврат ТипыПериодов;
КонецФункции // ПериодПолучитьСписокВыбора()

// Функция получает значение ставки НДС.
//
// Параметры:
//	СтавкаНДС	- Число	- Ставка НДС.
//
// Возвращаемое значение:
//	Число	- СтавкаНДС
//
Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС) Экспорт
	Возврат ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС.Ставка, 0);
КонецФункции // ПолучитьЗначениеСтавкиНДС()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//	Пользователь - СправочникСсылка - Текущий пользователь программы.
//	Настройка	 - Строка - имя настройки, для которой возвращается значение по умолчанию.
//
// Возвращаемое значение:
//	Произвольный	- Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.CRM_НастройкиПользователей[Настройка]);
	Запрос.Текст = "
//START Кайдашов 12/07/19 436 добавил РАЗРЕШЕННЫЕ	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Значение
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";
	Выборка = Запрос.Выполнить().Выбрать();
	ПустоеЗначение = ПланыВидовХарактеристик.CRM_НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();
	Если Выборка.Количество() = 0 Тогда
		Возврат ПустоеЗначение;
	ИначеЕсли Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;
КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Функция возвращает значение настройки для текущего пользователя сеанса.
//
// Параметры:
//	Настройка	 - Строка - имя настройки, для которой возвращается значение по умолчанию.
//
// Возвращаемое значение:
//	Произвольный	- Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеНастройки(Настройка) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), Настройка)
КонецФункции // ПолучитьЗначениеНастройки()

// Функция возвращает ставку НДС - Без НДС.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Неопределено или ПеречислениеСсылка	- Ставка НДС без НДС.
//
Функция ПолучитьСтавкуНДСБезНДС() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.НеОблагается
	|	И СтавкиНДС.Ставка = 0";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // ПолучитьСтавкуНДСБезНДС()

// Функция возвращает ставку НДС - Ноль.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Неопределено или ПеречислениеСсылка	- Ставка НДС 0.
//
Функция ПолучитьСтавкуНДСНоль() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	(НЕ СтавкиНДС.НеОблагается)
	|	И СтавкиНДС.Ставка = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // ПолучитьСтавкуНДСНоль()

// Функция возвращает массив дат по календарю на год; используется как вспомогательная для ускорения вычислений даты по
// календарю.
//
Функция ПолучитьСоответствиеДатПоКалендарюНаГод(Календарь, Год) Экспорт
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СоответствиеРезультат = Новый Соответствие();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДеньВключенВГрафик
	|");
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.УстановитьПараметр("Год", Год);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеРезультат.Вставить(НачалоДня(Выборка.ДатаГрафика), Выборка.ДеньВключенВГрафик);
	КонецЦикла;
	
	Возврат СоответствиеРезультат;
	
КонецФункции

// Функция возвращает признак использования режима закладок или панели открытых окон.
//
// Возвращаемое значение:
//	Булево	- признак использования режима закладок.
//
Функция ИспользуетсяРежимЗакладок() Экспорт
	Настройки = CRM_ОбщегоНазначенияСервер.ПолучитьНастройкиКлиентскогоПриложения();
	
	Если Настройки.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		
		Возврат CRM_ОбщегоНазначенияСервер.ЕстьпанельИнтерфейса("ПанельОткрытых");
		
	Иначе
		
		Если Настройки = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат (Настройки.РежимОткрытияФормВЗакладках = Истина);
		КонецЕсли;
		
	КонецЕсли;
КонецФункции

// Проверяет, есть ли у справочника или плана видов характеристик предопределенный элемент с заданным именем
//
// Параметры:
//   ПолноеИмяПредопределенного - Строка - имя предопределенного элемента, как к нему обращаются в коде.
//
// Возвращаемое значение:
//   Ссылка - предопределенный элемент, если он присутствует в конфигурации, иначе Неопределено
//
Функция НайтиПредопределенныйЭлементПоИмени(ПолноеИмяПредопределенного) Экспорт
	
	ПредопределенныйЭлементСсылка = Неопределено;
	
	ИмяПредопределенного = ПолноеИмяПредопределенного;
	
	Точка = СтрНайти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = СтрНайти(ИмяПредопределенного, ".");
	ИмяОбъекта = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	КоллекцияОбъектовМетаданных = Неопределено;
	
	Если ИмяКоллекции = "Справочник" Тогда
	
		КоллекцияОбъектовМетаданных = Метаданные.Справочники;
		
	ИначеЕсли ИмяКоллекции = "ПланВидовХарактеристик" Тогда
	
		КоллекцияОбъектовМетаданных = Метаданные.ПланыВидовХарактеристик;
		
	КонецЕсли;
	
	Если Не КоллекцияОбъектовМетаданных = Неопределено Тогда
	
		МетаданныеОбъект = КоллекцияОбъектовМетаданных.Найти(ИмяОбъекта);
		
		Если Не МетаданныеОбъект = Неопределено Тогда			
			
			МассивИменПредопределенных = МетаданныеОбъект.ПолучитьИменаПредопределенных();
			
			ЕстьПредопределенныйЭлемент = ?(МассивИменПредопределенных.Найти(ИмяПредопределенного) = Неопределено, Ложь, Истина);
			
			Если ЕстьПредопределенныйЭлемент Тогда
							
				Если ИмяКоллекции = "Справочник" Тогда
				
					ПредопределенныйЭлементСсылка = Справочники[ИмяОбъекта][ИмяПредопределенного];
					
				ИначеЕсли ИмяКоллекции = "ПланВидовХарактеристик" Тогда
				
					ПредопределенныйЭлементСсылка = ПланыВидовХарактеристик[ИмяОбъекта][ИмяПредопределенного];
					
				КонецЕсли;
				
			КонецЕсли;		
			
		КонецЕсли;
	
	КонецЕсли;	
	
	Возврат ПредопределенныйЭлементСсылка;
	
КонецФункции

// Возвращает имя конфигурации, как оно задано в конфигураторе
//
// Параметры:
//   Нет
//
// Возвращаемое значение:
//   Строка - имя конфигурации
//
Функция ПолучитьИмяКонфигурации() Экспорт
	Возврат Метаданные.Имя;
КонецФункции

// Возвращает признак:текущая конфигурация является CRM или нет
//
// Параметры:
//   Нет
//
// Возвращаемое значение:
//   Булево - признак что тек. конфигурация - CRM
//
Функция ЭтоCRM() Экспорт
	Возврат  ВРег(ПолучитьИмяКонфигурации()) = "CRM";
КонецФункции

// ++ Харченко Д.И. № 000002778 - 19.09.2018 / 

Функция ПолучитьСоответствиеКалендарныхГрафиков(ДатаИлиМассивДат, ПроизводственныйКалендарь=Неопределено) Экспорт	
	
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(ДатаИлиМассивДат, ПроизводственныйКалендарь);

КонецФункции

// -- Харченко Д.И. № 000002778 - 19.09.2018
