////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-процессы и задачи" (CRM).
//  
////////////////////////////////////////////////////////////////////////////////

Функция ЗаблокироватьДанныеДляРедактированияВедущейЗадачи(БизнесПроцесс, ПродолжитьВыполнение = Истина) Экспорт
	
	Результат = Новый Структура;
	
	Если БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(БизнесПроцесс.ВедущаяЗадача);
			РазблокироватьДанныеДляРедактирования(БизнесПроцесс.ВедущаяЗадача);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстОшибки = Прав(ТекстОшибки, СтрДлина(ТекстОшибки)-(?(СтрНайти(ТекстОшибки,"по причине:")>0,СтрНайти(ТекстОшибки,"по причине:")-1,0)));
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"по причине:"+Символы.ПС,Символы.ПС+"(");
			ТекстОшибки = ТекстОшибки +")";
			ПродолжитьВыполнение = Ложь;
			
			Результат.Вставить("ПредставлениеЗадачи", Строка(БизнесПроцесс.ВедущаяЗадача));
			Результат.Вставить("ТекстОшибки", ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполнить задачу ЗадачаСсылка, при необходимости выполнив обработчик.
// ОбработкаВыполненияПоУмолчанию модуля менеджера бизнес-процесса, 
// к которому относится задача ЗадачаСсылка.
//
// Параметры:
//  ЗадачаСсылка							- ЗадачаСсылка	- Задача.
//  ДействиеПоУмолчанию						- Булево		- Действие по умолчанию.
//  РазрешитьВыполнитьСПодчиненнымиЗадачами	- Булево		- Разрешить выполнить с подчиненными задачами.
//
Процедура Выполнить_Задачу(ЗадачаСсылка, ДействиеПоУмолчанию = Ложь, РазрешитьВыполнитьСПодчиненнымиЗадачами = Ложь) Экспорт
	
	Если Не РазрешитьВыполнитьСПодчиненнымиЗадачами И CRM_БизнесПроцессыИЗадачиВызовСервера.ЕстьПодчиненныеЗадачи(ЗадачаСсылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У задачи'") + " """ + Строка(ЗадачаСсылка) + """ "
			+ НСтр("ru = 'есть подчиненные задачи, задача не будет выполнена!'"));
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаСсылка, ДействиеПоУмолчанию);
	
КонецПроцедуры

// Выполнить задачу ЗадачаСсылка, при необходимости выполнив обработчик
// ОбработкаВыполненияПоУмолчанию модуля менеджера бизнес-процесса, 
// к которому относится задача ЗадачаСсылка.
//
Процедура ВыполнитьЗадачу(ЗадачаСсылка, ВариантВыполнения = Неопределено, ОтложитьНаДату = Неопределено, РезультатВыполнения = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗадачаОбъект.Прочитать();
		
		Если НЕ ОтложитьНаДату = Неопределено Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("ОтложитьСледующийЭтап",ОтложитьНаДату);
		КонецЕсли;
		
		Если (НЕ ВариантВыполнения = Неопределено) И (НЕ ЗадачаОбъект.CRM_ВариантВыполнения = ВариантВыполнения) Тогда
			ЗадачаОбъект.CRM_ВариантВыполнения = ВариантВыполнения;
			ЗадачаОбъект.Записать();
		КонецЕсли;
		
		Если НЕ РезультатВыполнения = "" Тогда
			ЗадачаОбъект.РезультатВыполнения = ЗадачаОбъект.РезультатВыполнения + РезультатВыполнения;
			Если Не ЗначениеЗаполнено(ЗадачаОбъект.ДатаИсполнения) Тогда
				ЗадачаОбъект.ДатаИсполнения			= ТекущаяДатаСеанса();
			КонецЕсли;
			ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
			ЗадачаОбъект.Записать();
		ИначеЕсли Не ЗначениеЗаполнено(ЗадачаОбъект.ДатаИсполнения) Тогда
			ЗадачаОбъект.ДатаИсполнения			= ТекущаяДатаСеанса();
			ЗадачаОбъект.ОбменДанными.Загрузка	= Истина;
			ЗадачаОбъект.Записать();
		КонецЕсли;
		
		Если ЗадачаОбъект.БизнесПроцесс.ЗавершенДосрочно Тогда
			ЗадачаОбъект.РезультатВыполнения = ЗадачаОбъект.РезультатВыполнения + "
			|
			|Завершена автоматически, по причине досрочного завершения бизнес-процесса";
			ЗадачаОбъект.CRM_ЗавершенДосрочно	= Истина;
			ЗадачаОбъект.CRM_Неудача			= Истина;
			ЗадачаОбъект.ДатаИсполнения			= ТекущаяДатаСеанса();
			ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
			ЗадачаОбъект.Записать();
		КонецЕсли;
		
		Если НЕ ДополнительныеПараметры = Неопределено Тогда
			Если ДополнительныеПараметры.Свойство("Взаимодействие") Тогда
				ЗадачаОбъект.ДополнительныеСвойства.Вставить("Взаимодействие",ДополнительныеПараметры.Взаимодействие);
			КонецЕсли;
		КонецЕсли;
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
		//+вог
		//Запись выполнения 
		вогСобытия.ЗаписатьПроцентВыполненияЗадачи(ЗадачаОбъект.Ссылка);
		//-вог
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Перенаправить задачи МассивЗадач новому исполнителю, указанному в структуре
// ИнфоОПеренаправлении. 
//
// Параметры:
//  МассивЗадач          – Массив    – массив задач для перенаправления.
//  ИнфоОПеренаправлении - Структура - содержит новые значения реквизитов адресации задачи.
//  ТолькоПроверка       - Булево    - если Истина, то функция не будет выполнять
//                                     физического перенаправления задач, а только 
//                                     проверит возможность перенаправления.
//  МассивПеренаправленныхЗадач - Массив – массив перенаправленных задач.
//                                         Может отличаться по составу элементов от 
//                                         массива МассивЗадач, если какие-то задачи
//                                         не удалось перенаправить.
//
// Возвращаемое значение:
//   Булево   – Истина, если перенаправление выполнено успешно.
//
Функция ПеренаправитьЗадачи(Знач МассивЗадач, Знач ИнфоОПеренаправлении, Знач ТолькоПроверка = Ложь,
	МассивПеренаправленныхЗадач = Неопределено, ПричинаОтказа = "") Экспорт
	
	Результат = Истина;
	Для Каждого Задача Из МассивЗадач Цикл
		
		ЗадачаВыполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.Ссылка, "Выполнена");
		Если ЗадачаВыполнена Тогда
			Результат = Ложь;
			Если ТолькоПроверка Тогда
				ПричинаОтказа = НСтр("ru = 'Невозможно перенаправить уже выполненную задачу.'");
				Прервать;
			КонецЕсли;
		КонецЕсли;	
		Если НЕ CRM_БизнесПроцессыСервер.ЗадачаДоступнаДляПринятияКИсполнению(Задача.Ссылка) Тогда
			Результат = Ложь;
			Если ТолькоПроверка Тогда
				ПричинаОтказа = НСтр("ru = 'Невозможно перенаправить чужую задачу.'");
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ТолькоПроверка Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(МассивПеренаправленныхЗадач) Тогда
			МассивПеренаправленныхЗадач = Новый Массив();
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
			Блокировка.Заблокировать();
							
			// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
			// позволить выполнять перенаправление по команде из формы этой задачи.
			ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Задача.CRM_Личная Тогда
				Если ТипЗнч(ИнфоОПеренаправлении) = Тип("СправочникСсылка.Пользователи") Тогда
					ЗадачаОбъект.Исполнитель = ИнфоОПеренаправлении;
				ИначеЕсли ТипЗнч(ИнфоОПеренаправлении) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					ЗадачаОбъект.Исполнитель		= Справочники.Пользователи.ПустаяСсылка();
					ЗадачаОбъект.РольИсполнителя	= ИнфоОПеренаправлении;
				КонецЕсли;
				ЗадачаОбъект.Записать();
				МассивПеренаправленныхЗадач.Добавить(ЗадачаОбъект.Ссылка);
				CRM_БизнесПроцессыИЗадачиСервер.ПринятьЗапланированныеВзаимодействияПоЗадаче(Задача, ЗадачаОбъект.Исполнитель);
			Иначе
				НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				НоваяЗадача.Заполнить(ЗадачаОбъект);
				Если ТипЗнч(ИнфоОПеренаправлении) = Тип("СправочникСсылка.Пользователи") Тогда
					НоваяЗадача.Исполнитель = ИнфоОПеренаправлении;
				ИначеЕсли ТипЗнч(ИнфоОПеренаправлении) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					НоваяЗадача.Исполнитель		= Справочники.Пользователи.ПустаяСсылка();
					НоваяЗадача.РольИсполнителя	= ИнфоОПеренаправлении;
				КонецЕсли;
				
				// +++ VOG Кулаков П.Л. 28.02.2020 CRM-385
				Если ТипЗнч(ЗадачаОбъект.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
					НоваяЗадача.ОсновнойОбъектАдресации = ЗадачаОбъект.Исполнитель.Подразделение;
				КонецЕсли;
				// --- VOG Кулаков П.Л.
				
				Если ЗначениеЗаполнено(ЗадачаОбъект.CRM_НачалоПереадресации) Тогда
					НоваяЗадача.CRM_НачалоПереадресации = ЗадачаОбъект.CRM_НачалоПереадресации;
				Иначе
					НоваяЗадача.CRM_НачалоПереадресации = ЗадачаОбъект.Ссылка;
				КонецЕсли;
				НоваяЗадача.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
				МассивПеренаправленныхЗадач.Добавить(НоваяЗадача.Ссылка);
				
				ЗадачаОбъект.CRM_Переадресована = Истина;
				ЗадачаОбъект.CRM_ВариантВыполненияСтрокой = "Переадресована";
				ЗадачаОбъект.Записать();
				ЗадачаОбъект.ВыполнитьЗадачу();
				
				CRM_БизнесПроцессыИЗадачиСервер.ПереадресоватьЗапланированныеВзаимодействияПоЗадаче(Задача, НоваяЗадача.Ссылка);
				
				// { VOG RMV 2019-03-13 bugs 213
				CRM_БизнесПроцессыСервер.ЗафиксироватьИсполнителяЭтапаПоручения(НоваяЗадача.Ссылка, ИнфоОПеренаправлении);
				// } VOG RMV 2019-03-13 bugs 213
				
			КонецЕсли;
			// +CRM не переносить в объединенные решения
			// Если у нового исполнителя не полные права и указан определнный уровень доступа,
			// то надо соответствующий уровень доступа прописать у Партнера
			Если ЗначениеЗаполнено(ЗадачаОбъект.CRM_Партнер) Тогда 
				Если ТипЗнч(ИнфоОПеренаправлении) = Тип("СправочникСсылка.Пользователи") Тогда
					Если ЗначениеЗаполнено(ИнфоОПеренаправлении.CRM_УровеньДоступа)
					И ЗадачаОбъект.CRM_Партнер.CRM_УровниДоступа.Найти(ИнфоОПеренаправлении.CRM_УровеньДоступа,"УровеньДоступа") = Неопределено И ЗадачаОбъект.CRM_Партнер.CRM_УровниДоступа.Количество() > 0 Тогда
						ПартнерОбъект = ЗадачаОбъект.CRM_Партнер.ПолучитьОбъект();
						НоваяСтрокаУровня = ПартнерОбъект.CRM_УровниДоступа.Добавить();
						НоваяСтрокаУровня.УровеньДоступа = ИнфоОПеренаправлении.CRM_УровеньДоступа;
						ПартнерОбъект.Записать();
					КонецЕсли;
				ИначеЕсли ТипЗнч(ИнфоОПеренаправлении) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("РольИсполнителя",ИнфоОПеренаправлении);
					Запрос.Текст = "ВЫБРАТЬ
					|	ИсполнителиЗадач.Исполнитель
					|ИЗ
					|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
					|ГДЕ
					|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
					|	И НЕ ИсполнителиЗадач.Исполнитель.CRM_УровеньДоступа = ЗНАЧЕНИЕ(Справочник.CRM_УровниДоступа.ПустаяСсылка)";
					
					Выборка = Запрос.Выполнить().Выбрать();
					ПартнерОбъект = ЗадачаОбъект.CRM_Партнер.ПолучитьОбъект();
					ЕстьИзменения = Ложь;
					Пока Выборка.Следующий() Цикл
						Если ПартнерОбъект.CRM_УровниДоступа.Найти(Выборка.Исполнитель.CRM_УровеньДоступа,"УровеньДоступа") = Неопределено И ПартнерОбъект.CRM_УровниДоступа.Количество() > 0 Тогда
							ЕстьИзменения = Истина;
							НоваяСтрокаУровня = ПартнерОбъект.CRM_УровниДоступа.Добавить();
							НоваяСтрокаУровня.УровеньДоступа = Выборка.Исполнитель.CRM_УровеньДоступа;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьИзменения Тогда
						ПартнерОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// -CRM не переносить в объединенные решения
			//ПриПеренаправленииЗадачи(ЗадачаОбъект, НоваяЗадача);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

//
//
Процедура ПолучитьТекущиеЗадачиПеренаправитьНаОтветственного(МассивСделок) Экспорт
	
	Исполнитель		= МассивСделок[0].Сделка.Ответственный;
	Ответственный	= МассивСделок[0].Сделка.Ответственный;
	
	Запрос			= Новый Запрос;
	ТекстЗапроса	= "";
	
	Ном = 0;
	Для Каждого СтруктураСделки Из МассивСделок Цикл
		
		Если НЕ СтруктураСделки.Сделка.БизнесПроцесс.Ответственный = Ответственный Тогда
			БизнесПроцесОбъект = СтруктураСделки.Сделка.БизнесПроцесс.ПолучитьОбъект();
			БизнесПроцесОбъект.Ответственный = Ответственный;
			БизнесПроцесОбъект.Подразделение = Ответственный.Подразделение;
			Попытка
				БизнесПроцесОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ТекстЗапроса = "" Тогда
			Запрос.УстановитьПараметр("БизнесПроцесс"	,СтруктураСделки.Сделка.БизнесПроцесс);
			Запрос.УстановитьПараметр("Исполнитель"		,СтруктураСделки.Исполнитель);
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И НЕ ЗадачаИсполнителя.Выполнена
			|	И НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс)
			|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
			|";
		Иначе
			Запрос.УстановитьПараметр("БизнесПроцесс"+Строка(Ном) ,СтруктураСделки.Сделка.БизнесПроцесс);
			Запрос.УстановитьПараметр("Исполнитель"+Строка(Ном)   ,СтруктураСделки.Исполнитель);
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс"+Строка(Ном) +"
			|	И НЕ ЗадачаИсполнителя.Выполнена
			|	И НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс)
			|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель"+Строка(Ном);
		КонецЕсли;
		Ном = Ном + 1;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	МассивЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	МассивПеренаправленныхЗадач = Неопределено;
	ЗадачиПеренаправлены = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(МассивЗадач, Исполнитель, Ложь, МассивПеренаправленныхЗадач);
	
КонецПроцедуры

// Отмечает указанные задачи как принятые к исполнению.
//
Процедура ПринятьЗадачиКИсполнению(Задачи) Экспорт
	
	НовыйМассивЗадач = Новый Массив();
	
	НачатьТранзакцию();
	Попытка
		БизнесПроцессыИЗадачиСервер.ЗаблокироватьЗадачи(Задачи);
		
		Для каждого Задача Из Задачи Цикл
			
			Если ТипЗнч(Задача) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			Если ЗадачаОбъект.Выполнена Тогда
				Продолжить;
			КонецЕсли;
			
			ЗадачаОбъект.Заблокировать();
			ЗадачаОбъект.ПринятаКИсполнению = Истина;
			ЗадачаОбъект.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
			Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.Исполнитель) ИЛИ НЕ (ЗадачаОбъект.Исполнитель = Пользователи.ТекущийПользователь()) Тогда
				ЗадачаОбъект.Исполнитель = ПользователиКлиентСервер.АвторизованныйПользователь();
			КонецЕсли;
			ЗадачаОбъект.Записать();
			
			НовыйМассивЗадач.Добавить(Задача);
			
		КонецЦикла;
	ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Задачи = НовыйМассивЗадач;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Обработчики модуля менеджера задачи

Функция ПолучитьСобытияЗадачи(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	События.Ссылка КАК Ссылка
	|ИЗ                  
	|	Документ.УдалитьCRM_Событие КАК События
	|ГДЕ
	|	События.ДокументОснование = &ДокументОснование
	|	И НЕ События.СостояниеСобытия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
	|");
	Запрос.УстановитьПараметр("ДокументОснование", Задача);
	МассивСобытий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСобытий;
КонецФункции

Функция ПеренестиСобытияЗадачи(СобытияЗадачи, ДатаЗадачи, Знач ВариантЗавершенияСобытий = Неопределено, Знач ДатаПереноса = Неопределено,
	ПроверятьНаРабочийДень = Истина, ПереноситьТолькоЕслиДатаСобытияМеньшеДатыЗадачи = Ложь, БылиПеренесеныСобытия = Ложь) Экспорт
	
	Попытка
		НачатьТранзакцию();
		
		ТекДата = НачалоДня(ТекущаяДатаСеанса());
		СекундВДне		= 24 * 60 * 60;
		
		Для Каждого СобытиеСсылка Из СобытияЗадачи Цикл
			СобытиеОбъект = СобытиеСсылка.ПолучитьОбъект();
			СобытиеОбъект.Заблокировать();
			
			Если ВариантЗавершенияСобытий = "ЗавершатьСобытия" Тогда
				СобытиеОбъект.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Завершено;
				
			Иначе
				ДатаНачала		= СобытиеОбъект.Дата;
				
				Если ПереноситьТолькоЕслиДатаСобытияМеньшеДатыЗадачи И ДатаНачала >= ДатаЗадачи Тогда
					Продолжить;
				КонецЕсли;
				
				ДатаОкончания	= СобытиеОбъект.ОкончаниеСобытия;
				РазностьДат		= ДатаОкончания - ДатаНачала;
				
				Если ВариантЗавершенияСобытий = "ПеренестиНаСегодня" Тогда
					ДатаПереноса = НачалоДня(ТекДата);
				ИначеЕсли ВариантЗавершенияСобытий = "ПеренестиНаЗавтра" Тогда
					ДатаПереноса = НачалоДня(ТекДата) + СекундВДне;
				ИначеЕсли ВариантЗавершенияСобытий = "ПеренестиНа3Дня" Тогда
					ДатаПереноса = НачалоДня(ДатаНачала) + СекундВДне * 3;
				ИначеЕсли ВариантЗавершенияСобытий = "ПеренестиНаНеделю" Тогда
					ДатаПереноса = НачалоДня(ДатаНачала) + СекундВДне * 7;
				ИначеЕсли ВариантЗавершенияСобытий = "ПеренестиНаДату" Тогда
					ДатаПереноса = НачалоДня(ДатаПереноса);
				КонецЕсли;
				
				Если НачалоДня(ДатаНачала) = НачалоДня(ДатаПереноса) Тогда
					ДатаНачалаНовая		= ДатаНачала;
					ДатаОкончанияНовая	= ДатаОкончания;
				Иначе
					Если ПроверятьНаРабочийДень Тогда
						// Проверка что перенесли на рабочий день
						Для н = 1 По 15 Цикл // Ограничение по счетчику на всякий случай
							КалендарныйГрафик = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(ДатаПереноса);
							Если КалендарныйГрафик[ДатаПереноса].ДеньРабочийПоПроизводственномуКалендарю = Истина Тогда
								Прервать
							Иначе
								ДатаПереноса = ДатаПереноса + СекундВДне;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					ДатаНачалаНовая		= ДатаПереноса + (ДатаНачала - НачалоДня(ДатаНачала));
					ДатаОкончанияНовая	= ДатаНачалаНовая + РазностьДат;
					
					СобытиеОбъект.Дата				= ДатаНачалаНовая;
					СобытиеОбъект.ОкончаниеСобытия	= ДатаОкончанияНовая;
				КонецЕсли;
			КонецЕсли;
			
			СобытиеОбъект.Записать();
			
			БылиПеренесеныСобытия = Истина;
		КонецЦикла;
		
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось '")
			+ ?(ВариантЗавершенияСобытий = "ЗавершатьСобытия", НСтр("ru = 'завершить '"), НСтр("ru = 'перенести '"))
			+ НСтр("ru = 'события: '")
			+ """" + Строка(СобытиеОбъект) + """"": "
			+ КраткоеПредставлениеОшибки(ИнфОбОшибке));
		//
		
		БылиПеренесеныСобытия = Ложь;
		
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
КонецФункции

Функция ВыполнитьПереносЗадачи(ЭтаФормаИлиЗадача, ВариантПереноса, Знач ДатаПереноса = Неопределено, ПроверятьНаРабочийДень = Истина,
	ПереноситьСобытияЗадачи = Ложь, БылиПеренесеныСобытия = Ложь, ЗаписыватьВФорме = Истина) Экспорт
	//
	РезультатВыполнения = Истина;
	
	Если ТипЗнч(ЭтаФормаИлиЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Объект = ЭтаФормаИлиЗадача.ПолучитьОбъект();
	Иначе
		Объект = ЭтаФормаИлиЗадача.Объект;
	КонецЕсли;
	
	Если Объект.Выполнена Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаЗадачи			= Объект.ДатаНачала;
	СрокЗадачи			= Объект.СрокИсполнения;
	ВремяЗадачи			= Дата("00010101") + (ДатаЗадачи - НачалоДня(ДатаЗадачи));
	
	ТекДата = ТекущаяДатаСеанса();
	СекундВДне = 24 * 60 * 60;
	
	Если ЗначениеЗаполнено(СрокЗадачи) Тогда
		РазностьДат = СрокЗадачи - ДатаЗадачи;
	Иначе
		РазностьДат = Неопределено;
	КонецЕсли;
	
	Если ВариантПереноса = "ПеренестиНаСегодня" Тогда
		ДатаПереноса = ТекДата;
	ИначеЕсли ВариантПереноса = "ПеренестиНаЗавтра" Тогда
		ДатаПереноса = ТекДата + СекундВДне;
	ИначеЕсли ВариантПереноса = "ПеренестиНа3Дня" Тогда
		ДатаПереноса = ТекДата + СекундВДне * 3;
	ИначеЕсли ВариантПереноса = "ПеренестиНаНеделю" Тогда
		ДатаПереноса = ТекДата + СекундВДне * 7;
	КонецЕсли;
	ДатаПереноса = НачалоДня(ДатаПереноса);
	
	Если ПроверятьНаРабочийДень Тогда
		// Проверка что перенесли на рабочий день
		Для н = 1 По 15 Цикл // Ограничение по счетчику на всякий случай
			КалендарныйГрафик = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(ДатаПереноса);
			Если КалендарныйГрафик[ДатаПереноса].ДеньРабочийПоПроизводственномуКалендарю = Истина Тогда
				Прервать
			Иначе
				ДатаПереноса = ДатаПереноса + СекундВДне;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НоваяДатаЗадачи = ДатаПереноса + (ВремяЗадачи - Дата("00010101"));
	Если РазностьДат = Неопределено Тогда
		НовыйСрокЗадачи = СрокЗадачи;
	Иначе
		НовыйСрокЗадачи = НоваяДатаЗадачи + РазностьДат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НовыйСрокЗадачи) Тогда
		НовыйСрокЗадачи = НоваяДатаЗадачи;
	КонецЕсли;
	
	Объект.ДатаНачала		= НоваяДатаЗадачи;
	Объект.СрокИсполнения	= НовыйСрокЗадачи;
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И Объект.СрокИсполнения <= Объект.ДатаНачала Тогда
		Объект.СрокИсполнения = Объект.ДатаНачала + 1
	КонецЕсли;
	
	Попытка
		Если ТипЗнч(ЭтаФормаИлиЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или ЗаписыватьВФорме Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		Если ТипЗнч(ЭтаФормаИлиЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
			Блокировка.Заблокировать();
			
			Объект.Записать();
			РезультатВыполнения = Истина;
		
		Иначе
			Если ЗаписыватьВФорме Тогда
				РезультатВыполнения = ЭтаФормаИлиЗадача.Записать();
			КонецЕсли;
			
			Если Не РезультатВыполнения Тогда
				ВызватьИсключение "";
			КонецЕсли;
		КонецЕсли;
		
		Если ПереноситьСобытияЗадачи И РезультатВыполнения Тогда
			СобытияЗадачи = ПолучитьСобытияЗадачи(Объект.Ссылка);
			Если СобытияЗадачи.Количество() > 0 Тогда
				РезультатВыполнения = ПеренестиСобытияЗадачи(СобытияЗадачи, Объект.ДатаНачала, "ПеренестиНаДату", Объект.ДатаНачала, Истина, Истина, БылиПеренесеныСобытия);
				Если Не РезультатВыполнения Тогда
					ВызватьИсключение "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ЭтаФормаИлиЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или ЗаписыватьВФорме Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		
		Если ТипЗнч(ЭтаФормаИлиЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или ЗаписыватьВФорме Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		СтрОшибка = КраткоеПредставлениеОшибки(ИнфОбОшибке);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось перенести задачу: '")
			+ """" + Строка(ЭтаФормаИлиЗадача) + """"
			+ ?(ЗначениеЗаполнено(СтрОшибка), ": " + СтрОшибка, "."));
		//
		
		РезультатВыполнения = Ложь;
		БылиПеренесеныСобытия = Ложь;
	КонецПопытки;
	
	Возврат РезультатВыполнения;
КонецФункции

Функция ПеренестиЗадачу(ЭтаФормаИлиЗадача, ВариантПереноса, Знач ДатаПереноса = Неопределено, ПроверятьНаРабочийДень = Истина,
	ПереноситьСобытияЗадачи = Ложь, БылиПеренесеныСобытия = Ложь, ЗаписыватьВФорме = Истина) Экспорт
	
	РезультатВыполнения = Истина;
	
	Если ТипЗнч(ЭтаФормаИлиЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Объект = ЭтаФормаИлиЗадача.ПолучитьОбъект();
	Иначе
		Объект = ЭтаФормаИлиЗадача.Объект;
	КонецЕсли;
	ОбъектСсылка = Объект.Ссылка;
	
	Если Объект.Выполнена Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		Рез = ВыполнитьПереносЗадачи(ЭтаФормаИлиЗадача, ВариантПереноса, ДатаПереноса, ПроверятьНаРабочийДень,
			ПереноситьСобытияЗадачи, БылиПеренесеныСобытия, ЗаписыватьВФорме);
		//
		Если Не Рез Тогда
			ВызватьИсключение "";
		КонецЕсли;
		
		ПодчиненныеЗадачи = ПолучитьПодчиненныеЗадачиРекурсивно(ОбъектСсылка);
		Если ПодчиненныеЗадачи.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из ПодчиненныеЗадачи Цикл
				Рез = ВыполнитьПереносЗадачи(СтрокаТаблицы.Ссылка, ВариантПереноса, ДатаПереноса, ПроверятьНаРабочийДень,
					ПереноситьСобытияЗадачи, БылиПеренесеныСобытия, ЗаписыватьВФорме);
				//
				Если Не Рез Тогда
					ВызватьИсключение "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		РезультатВыполнения = Ложь;
	КонецПопытки;
	
	Возврат РезультатВыполнения;
КонецФункции

Процедура НазначитьРеквизитыЗадачам(Задача, Партнер = Неопределено, КонтактноеЛицо = Неопределено, Проект = Неопределено, ДополнительныеРеквизиты = Неопределено, НазначитьВсемВИерархии = Истина) Экспорт
	Если Не ЗначениеЗаполнено(Партнер) И Не ЗначениеЗаполнено(КонтактноеЛицо) И Не ЗначениеЗаполнено(Проект)
		И (ТипЗнч(ДополнительныеРеквизиты) <> Тип("Структура") Или ДополнительныеРеквизиты.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Задача.CRM_Личная И Не Задача.ПринятаКИсполнению Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Задача.CRM_Личная И (ТипЗнч(ДополнительныеРеквизиты) <> Тип("Структура") Или ДополнительныеРеквизиты.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	
	БылиИзменения = Ложь;
	
	Если ЗадачаОбъект.CRM_Личная Тогда
		// Партнера, КЛ и проекта можно менять только для личной задачи
		Если	(ЗначениеЗаполнено(Партнер) И Задача.CRM_Партнер <> Партнер)
			Или	(ЗначениеЗаполнено(КонтактноеЛицо) И Задача.CRM_КонтактноеЛицо <> КонтактноеЛицо)
			Или	(ЗначениеЗаполнено(Проект) И Задача.CRM_Проект <> Проект) Тогда
			//
			ЗадачаОбъект.CRM_Партнер		= Партнер;
			ЗадачаОбъект.CRM_КонтактноеЛицо = КонтактноеЛицо;			
			ЗадачаОбъект.CRM_Проект			= Проект;
			БылиИзменения = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") И ДополнительныеРеквизиты.Количество() > 0 Тогда
		Для Каждого КлючЗначение Из ДополнительныеРеквизиты Цикл
			Если Не ЗадачаОбъект.CRM_Личная Тогда
				Если	КлючЗначение.Ключ <> "CRM_ОсновнаяКатегория"
					И	КлючЗначение.Ключ <> "Важность" Тогда
					//
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если	КлючЗначение.Ключ = "CRM_ОсновнаяКатегория"
				И	ЗначениеЗаполнено(КлючЗначение.Значение)
				И	ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.CRM_КатегорииПользователей") Тогда
				//
				Если	(ЗадачаОбъект.CRM_Личная И КлючЗначение.Значение.Владелец <> ЗадачаОбъект.Автор)
					Или	(Не ЗадачаОбъект.CRM_Личная И КлючЗначение.Значение.Владелец <> ЗадачаОбъект.Исполнитель) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ЗадачаОбъект[КлючЗначение.Ключ] = КлючЗначение.Значение;
				БылиИзменения = Истина;
			Исключение КонецПопытки;
			Если КлючЗначение.Ключ = "CRM_ОсновнаяКатегория" И ЗначениеЗаполнено(КлючЗначение.Значение) И ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.CRM_КатегорииПользователей") Тогда
				Если ЗадачаОбъект.CRM_Категории.Найти(КлючЗначение.Значение, "Категория") = Неопределено Тогда
					НоваяСтрока = ЗадачаОбъект.CRM_Категории.Добавить();
					НоваяСтрока.Категория = КлючЗначение.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если БылиИзменения Тогда
		ЗадачаОбъект.Записать();
	КонецЕсли;
	ЗадачаОбъект = Неопределено;
	
	Если НазначитьВсемВИерархии И Задача.CRM_Личная Тогда
		ТаблицаПодчиненныеЗадачи = ПолучитьПодчиненныеЗадачи(Задача);
		Если ТаблицаПодчиненныеЗадачи.Количество() > 0 Тогда
			Для Каждого СтрокаПодчиненнаяЗадача Из ТаблицаПодчиненныеЗадачи Цикл
				НазначитьРеквизитыЗадачам(СтрокаПодчиненнаяЗадача.Ссылка, Партнер, КонтактноеЛицо, Проект, ДополнительныеРеквизиты, НазначитьВсемВИерархии);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НазначитьРодителя(Задача, Родитель, Партнер = Неопределено, КонтактноеЛицо = Неопределено, Проект = Неопределено, ДополнительныеРеквизиты = Неопределено, НазначитьВсемВИерархии = Истина) Экспорт
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Задача.CRM_Личная Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйРодитель = Задача.CRM_Родитель;
	
	Если Родитель = Неопределено Или СтарыйРодитель = Родитель Тогда
		Если	(ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") И ДополнительныеРеквизиты.Количество() > 0)
			Или	ЗначениеЗаполнено(Партнер) И ТипЗнч(Партнер) = Тип("СправочникСсылка.Партнеры")
			Или	ЗначениеЗаполнено(КонтактноеЛицо) И ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			Или ЗначениеЗаполнено(Проект) И ТипЗнч(Проект) = Тип("СправочникСсылка.Проекты") Тогда
			//
			НазначитьРеквизитыЗадачам(Задача, Партнер, КонтактноеЛицо, Проект, ДополнительныеРеквизиты, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	бОшибочныйРодитель = Ложь;
	ТекРодитель = Родитель;
	Пока ТекРодитель <> ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка") И ТекРодитель <> NULL Цикл
		Если Задача = ТекРодитель Тогда
			бОшибочныйРодитель = Истина;
			Прервать;
		КонецЕсли;
		ТекРодитель = ТекРодитель.CRM_Родитель;
	КонецЦикла;
	Если бОшибочныйРодитель Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя переносить задачу внутрь собственной иерархии'")
			+ ": """ + Строка(Задача) + """!");
		//
		Возврат;
	КонецЕсли;
	
	Попытка
	    НачатьТранзакцию();
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		Если Задача = Родитель Тогда
			ЗадачаОбъект.CRM_Родитель = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
		Иначе
			ЗадачаОбъект.CRM_Родитель = Родитель;
		КонецЕсли;
		
		ЗадачаОбъект.Записать();
		
		Если (ЗначениеЗаполнено(Партнер) Или ЗначениеЗаполнено(КонтактноеЛицо) Или ЗначениеЗаполнено(Проект) Или (ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") И ДополнительныеРеквизиты.Количество() > 0)) Тогда
			НазначитьРеквизитыЗадачам(ЗадачаОбъект.Ссылка, Партнер, КонтактноеЛицо, Проект, ДополнительныеРеквизиты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтарыйРодитель) Тогда
			ПересчитатьПоказателиЗадачиПоПодчиненнымЗадачам(СтарыйРодитель);
			ОбновитьПоказателиЗадачВИерархии(СтарыйРодитель);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		
		ОтменитьТранзакцию();
		
		СтрОшибка = КраткоеПредставлениеОшибки(ИнфОбОшибке);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось назначить нового родителя задаче: '")
			+ """" + Строка(Задача) + """"
			+ ?(ЗначениеЗаполнено(СтрОшибка), ": " + СтрОшибка, "."));
		//
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьПодчиненныеЗадачи(Задача, ПолучитьПомеченныеНаУдаление = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка						КАК		Ссылка,
	|	CRM_ПроцентВыполненияЗадачи КАК		ПроцентВыполненияЗадачи,
	|	ПометкаУдаления				КАК		ПометкаУдаления
	|ИЗ
	|	Задача.ЗадачаИсполнителя
	|ГДЕ
	|	CRM_Родитель = &Задача
	|	" + ?(ПолучитьПомеченныеНаУдаление, "", "И НЕ ПометкаУдаления") + "
	|");
	Запрос.УстановитьПараметр("Задача", Задача);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьПодчиненныеЗадачиРекурсивно(Задача, ПолучитьПомеченныеНаУдаление = Ложь, ТаблицаЗадач = Неопределено) Экспорт
	Если ТаблицаЗадач = Неопределено Тогда
		ТаблицаЗадач = Новый ТаблицаЗначений();
		ТаблицаЗадач.Колонки.Добавить("Ссылка");
		ТаблицаЗадач.Колонки.Добавить("ПроцентВыполненияЗадачи");
		ТаблицаЗадач.Колонки.Добавить("ПометкаУдаления");
	КонецЕсли;
	
	ПодчиненныеЗадачи = ПолучитьПодчиненныеЗадачи(Задача, ПолучитьПомеченныеНаУдаление = Ложь);
	Если ПодчиненныеЗадачи.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ПодчиненныеЗадачи Цикл
			Если ТаблицаЗадач.Найти(СтрокаТаблицы.Ссылка, "Ссылка") = Неопределено Тогда
				НоваяСтрока = ТаблицаЗадач.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ПодчиненныеЗадачи Цикл
			ПолучитьПодчиненныеЗадачиРекурсивно(СтрокаТаблицы.Ссылка, ПолучитьПомеченныеНаУдаление, ТаблицаЗадач);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗадач;
КонецФункции

Функция ЕстьПодчиненныеЗадачи(Задача) Экспорт
	Если ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Ложь;
	КонецЕсли;
	МассивПодчиненныеЗадачи = ПолучитьПодчиненныеЗадачи(Задача);
	Возврат (МассивПодчиненныеЗадачи.Количество() > 0);
КонецФункции

Процедура ПересчитатьПоказателиЗадачиПоПодчиненнымЗадачам(Задача) Экспорт
	Если ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или Не ЗначениеЗаполнено(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеЗадачи = ПолучитьПодчиненныеЗадачи(Задача, Истина);
	бЕстьПодчиненныеЗадачи = (ПодчиненныеЗадачи.Количество() > 0);
	Если Не бЕстьПодчиненныеЗадачи Тогда Возврат; КонецЕсли;
	
	нИндекс = 0;
	Пока нИндекс < ПодчиненныеЗадачи.Количество() Цикл
		СтрокаТаблицы = ПодчиненныеЗадачи[нИндекс];
		Если СтрокаТаблицы.ПометкаУдаления Тогда
			ПодчиненныеЗадачи.Удалить(нИндекс);
		Иначе
			нИндекс = нИндекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	СуммаПроцентов = 0;
	Для Каждого ПодчиненнаяЗадача Из ПодчиненныеЗадачи Цикл
		Если Не ПодчиненнаяЗадача.ПометкаУдаления Тогда
			СуммаПроцентов = СуммаПроцентов + ПодчиненнаяЗадача.ПроцентВыполненияЗадачи;
		КонецЕсли;
	КонецЦикла;
	
	Если ПодчиненныеЗадачи.Количество() = 0 Тогда
		ПроцентВыполненияЗадачи = 0;
	Иначе
		ПроцентВыполненияЗадачи = Окр(СуммаПроцентов / ПодчиненныеЗадачи.Количество(), 0, РежимОкругления.Окр15как20);
	КонецЕсли;
	Если ПроцентВыполненияЗадачи <> Задача.CRM_ПроцентВыполненияЗадачи Тогда
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.CRM_ПроцентВыполненияЗадачи = ПроцентВыполненияЗадачи;
		Если ЗадачаОбъект.CRM_ПроцентВыполненияЗадачи > 100 Тогда
			ЗадачаОбъект.CRM_ПроцентВыполненияЗадачи = 100;
		ИначеЕсли ЗадачаОбъект.CRM_ПроцентВыполненияЗадачи < 0 Тогда
			ЗадачаОбъект.CRM_ПроцентВыполненияЗадачи = 0;
		КонецЕсли;
		Если ЗадачаОбъект.CRM_ПроцентВыполненияЗадачи < 100 И ЗадачаОбъект.Выполнена Тогда
			ЗадачаОбъект.Выполнена = Ложь;
		КонецЕсли;
		ЗадачаОбъект.Записать();
		
		Если Не ЗадачаОбъект.Выполнена И ЗадачаОбъект.CRM_ПроцентВыполненияЗадачи >= 100 Тогда
			БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьПоказателиЗадачВИерархии(Задача) Экспорт
	Если ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или Не ЗначениеЗаполнено(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	ТекРодитель = Задача.CRM_Родитель;
	Пока Истина Цикл
		Если ЗначениеЗаполнено(ТекРодитель) Тогда
			ПересчитатьПоказателиЗадачиПоПодчиненнымЗадачам(ТекРодитель);
		Иначе
			Прервать;
		КонецЕсли;
		ТекРодитель = ТекРодитель.CRM_Родитель;
	КонецЦикла;
КонецПроцедуры

Функция ПометитьНаУдаление(Задача, ПометкаУдаления) Экспорт
	Если Задача.ПометкаУдаления = ПометкаУдаления Тогда Возврат Истина; КонецЕсли;
	
	бОшибкиВПодчиненныхЗадачах = Ложь;
	ТаблицаПодчиненныеЗадачи = ПолучитьПодчиненныеЗадачи(Задача);
	Если ТаблицаПодчиненныеЗадачи.Количество() > 0 Тогда
		Для Каждого СтрокаПодчиненнаяЗадача Из ТаблицаПодчиненныеЗадачи Цикл
			бОшибкиВПодчиненныхЗадачах = Не ПометитьНаУдаление(СтрокаПодчиненнаяЗадача.Ссылка, ПометкаУдаления);
		КонецЦикла;
	КонецЕсли;
	Если бОшибкиВПодчиненныхЗадачах Тогда
		// Если не удалось завершить хоть одну подчиненную задачу - останавливаемся
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		Возврат Истина;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		СтрОшибка = КраткоеПредставлениеОшибки(ИнфОбОшибке);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось удалить задачу: '")
			+ """" + Строка(Задача) + """"
			+ ?(ЗначениеЗаполнено(СтрОшибка), ": " + СтрОшибка, "."));
		//
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ВыполнитьЛичнуюЗадачуСПодчиненными(Задача) Экспорт
	Если ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Или Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Истина;
	КонецЕсли;
	Если Задача.Выполнена Тогда Возврат Истина; КонецЕсли;
	Если Не Задача.CRM_Личная Тогда Возврат Истина; КонецЕсли;
	
	бОшибкиВПодчиненныхЗадачах = Ложь;
	ТаблицаПодчиненныеЗадачи = ПолучитьПодчиненныеЗадачи(Задача);
	Если ТаблицаПодчиненныеЗадачи.Количество() > 0 Тогда
		Для Каждого СтрокаПодчиненнаяЗадача Из ТаблицаПодчиненныеЗадачи Цикл
			бОшибкиВПодчиненныхЗадачах = Не ВыполнитьЛичнуюЗадачуСПодчиненными(СтрокаПодчиненнаяЗадача.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если бОшибкиВПодчиненныхЗадачах Тогда
		// Если не удалось выполнить хоть одну подчиненную задачу - останавливаемся
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача, Истина, Истина);
		Если ЗначениеЗаполнено(Задача.Предмет) И ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
			Попытка
				СобытиеОбъект = Задача.Предмет.ПолучитьОбъект();
				СобытиеОбъект.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Завершено;	
				СобытиеОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить состояние, вероятно событие заблокировано:'")
					+ " """ + Строка(Задача.Предмет) + """.");	
				//
			КонецПопытки;
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		СтрОшибка = КраткоеПредставлениеОшибки(ИнфОбОшибке);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить задачу: '")
			+ """" + Строка(Задача) + """"
			+ ?(ЗначениеЗаполнено(СтрОшибка), ": " + СтрОшибка, "."));
		//
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ОпределитьПринадлежностьЗадачи(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс) И ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		СтруктураВозврата.Вставить("Тип", 1);
		СтруктураВозврата.Вставить("Выполнена", Задача.Выполнена);
		СтруктураВозврата.Вставить("ВариантВыполнения", Задача.CRM_ВариантВыполнения);
		СтруктураВозврата.Вставить("БизнесПроцесс", Задача.БизнесПроцесс);
		СтруктураВозврата.Вставить("ТочкаМаршрута", Задача.CRM_ТочкаМаршрута);
	Иначе
		СтруктураВозврата.Вставить("Тип", 0);
		СтруктураВозврата.Вставить("Выполнена", Задача.Выполнена);
		СтруктураВозврата.Вставить("ВариантВыполнения", Задача.CRM_ВариантВыполнения);
		СтруктураВозврата.Вставить("БизнесПроцесс", Задача.БизнесПроцесс);
		СтруктураВозврата.Вставить("Предмет", Задача.Предмет);
	КонецЕсли;
	
	Если Задача.CRM_Личная И ЕстьПодчиненныеЗадачи(Задача) Тогда
		СтруктураВозврата.Вставить("ЕстьПодчиненныеЗадачи");
	КонецЕсли;
	
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ИзменитьСобытие(СобытиеСсылка)  Экспорт
	
	СобытиеОбъект = СобытиеСсылка.ПолучитьОбъект();
	СобытиеОбъект.СостояниеСобытия = Справочники.CRM_СостоянияСобытий.Завершено;	
	
	Попытка
		СобытиеОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить состояние, вероятно событие заблокировано'"));	
	КонецПопытки;
	
КонецПроцедуры

Процедура ИзменитьМаркетинговоеМероприятие(СправСсылка) Экспорт
	
	СправОбъект = СправСсылка.ПолучитьОбъект();
	СправОбъект.Завершено = Истина;
	
	Попытка
		СправОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить состояние, вероятно элемент справочника заблокирован'"));	
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаИсполнителяМодульОбъектаОбработкаЗаполнения(Объект, ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения, 
			"БизнесПроцесс,ТочкаМаршрута,Наименование,Исполнитель,РольИсполнителя,ОсновнойОбъектАдресации," 
			+ "ДополнительныйОбъектАдресации,Важность,ДатаИсполнения,Автор,Описание,СрокИсполнения," 
			+ "ДатаНачала,Предмет,CRM_ТочкаМаршрута,CRM_Итерация,CRM_ВариантВыполнения,CRM_Личная,CRM_ОсновнаяКатегория,CRM_Партнер, CRM_СостояниеИнтереса");
		Объект.Дата = ТекущаяДатаСеанса();
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
	ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта")
	// +CRM не переносить в объединенные решения
	ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю")
	// -CRM не переносить в объединенные решения
	ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
	ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") 
	ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.МаркетинговыеМероприятия")
	ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")
	ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		Объект.Предмет				= ДанныеЗаполнения;
		Объект.ПредметСтрокой		= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(Объект.Предмет);
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если ДанныеЗаполнения.CRM_Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
				Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
			ИначеЕсли ДанныеЗаполнения.CRM_Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
				Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
			ИначеЕсли ДанныеЗаполнения.CRM_Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
				Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
			КонецЕсли;
		ИначеЕсли НЕ (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")) Тогда
			Если ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
				Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
			ИначеЕсли ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
				Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
			ИначеЕсли ДанныеЗаполнения.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
				Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.CRM_Партнер) Тогда
			Попытка
				Если ЗначениеЗаполнено(ДанныеЗаполнения.Партнер) Тогда
					Объект.CRM_Партнер = ДанныеЗаполнения.Партнер;
				КонецЕсли;
			Исключение
				Попытка
					Если ЗначениеЗаполнено(ДанныеЗаполнения.CRM_Партнер) Тогда
						Объект.CRM_Партнер = ДанныеЗаполнения.CRM_Партнер;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо) Тогда
			Попытка
				Если ЗначениеЗаполнено(ДанныеЗаполнения.КонтактноеЛицо) Тогда
					Объект.CRM_КонтактноеЛицо = ДанныеЗаполнения.КонтактноеЛицо;
				КонецЕсли;
			Исключение
				Попытка
					Если ЗначениеЗаполнено(ДанныеЗаполнения.CRM_КонтактноеЛицо) Тогда
						Объект.CRM_КонтактноеЛицо = ДанныеЗаполнения.CRM_КонтактноеЛицо;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;		
		Если НЕ ЗначениеЗаполнено(Объект.CRM_Проект) Тогда
			Попытка
				Если ЗначениеЗаполнено(ДанныеЗаполнения.Проект) Тогда
					Объект.CRM_Проект = ДанныеЗаполнения.Проект;
				КонецЕсли;
			Исключение
				Попытка
					Если ЗначениеЗаполнено(ДанныеЗаполнения.CRM_Проект) Тогда
						Объект.CRM_Проект = ДанныеЗаполнения.CRM_Проект;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		Объект.Автор				= Пользователи.ТекущийПользователь();
		Объект.Исполнитель			= Пользователи.ТекущийПользователь();
		Объект.ПринятаКИсполнению	= Истина;
		Объект.CRM_Личная			= Истина;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			Объект.Наименование = ДанныеЗаполнения.Тема;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Объект.Наименование = ДанныеЗаполнения.Наименование;
			Объект.Описание = ДанныеЗаполнения.Комментарий;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			Объект.Описание = ДанныеЗаполнения.Комментарий;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			Объект.Наименование = ДанныеЗаполнения.Тема;
			
			// В случае писем в описание не переносим текст писем, только тему и инфомрацию, что
			// задача введена на основании такого-то письма.
			Объект.Описание = "Тема: " + ДанныеЗаполнения.Тема + "
			|Введено на основании: " + ДанныеЗаполнения.Ссылка
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Объект.Описание = "Сообщение: " + ДанныеЗаполнения.ТекстСообщения;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
			Объект.Описание = ДанныеЗаполнения.Описание;
		КонецЕсли;
		
		Объект.Дата = ТекущаяДатаСеанса();
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ОтправительКонтакт)	Тогда
				Если ТипЗнч(ДанныеЗаполнения.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Объект.CRM_КонтактноеЛицо	= ДанныеЗаполнения.ОтправительКонтакт;
					Объект.CRM_Партнер			= Объект.CRM_КонтактноеЛицо.Владелец;
				ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Объект.CRM_Партнер			= ДанныеЗаполнения.ОтправительКонтакт;
					Объект.CRM_КонтактноеЛицо	= Объект.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;					
			КонецЕсли;				
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Контакт)	Тогда
				Если ТипЗнч(ДанныеЗаполнения.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Объект.CRM_КонтактноеЛицо	= ДанныеЗаполнения.Контакт;
					Объект.CRM_Партнер			= Объект.CRM_КонтактноеЛицо.Владелец;
				ИначеЕсли ТипЗнч(ДанныеЗаполнения.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Объект.CRM_Партнер			= ДанныеЗаполнения.Контакт;
					Объект.CRM_КонтактноеЛицо	= Объект.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;					
			КонецЕсли;				
		КонецЕсли;			
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Дата") Тогда
			Объект.Дата = ДанныеЗаполнения.Дата;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаНачала") Тогда
			Объект.ДатаНачала = ДанныеЗаполнения.ДатаНачала;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокИсполнения") Тогда
			Объект.СрокИсполнения = ДанныеЗаполнения.СрокИсполнения;
		КонецЕсли;
		Объект.Автор = Пользователи.ТекущийПользователь();
		Если ДанныеЗаполнения.Свойство("Исполнитель")
			И ТипЗнч(ДанныеЗаполнения.Исполнитель) = Тип("СправочникСсылка.Пользователи")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Исполнитель) Тогда
			Объект.Исполнитель		= ДанныеЗаполнения.Исполнитель;
		Иначе
			Объект.Исполнитель		= Пользователи.ТекущийПользователь();
		КонецЕсли;
		Объект.ПринятаКИсполнению	= Истина;
		Объект.CRM_Личная			= Истина;
		Если ДанныеЗаполнения.Свойство("CRM_Родитель") И ЗначениеЗаполнено(ДанныеЗаполнения.CRM_Родитель) 
			И ТипЗнч(ДанныеЗаполнения.CRM_Родитель) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.CRM_Партнер) И ЗначениеЗаполнено(ДанныеЗаполнения.CRM_Родитель.CRM_Партнер) Тогда
				Объект.CRM_Партнер = ДанныеЗаполнения.CRM_Родитель.CRM_Партнер;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.CRM_Проект) И ЗначениеЗаполнено(ДанныеЗаполнения.CRM_Родитель.CRM_Проект) Тогда
				Объект.CRM_Проект = ДанныеЗаполнения.CRM_Родитель.CRM_Проект;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.CRM_ОсновнаяКатегория)
		И ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("CRM_ОсновнаяКатегория")
		И ЗначениеЗаполнено(ДанныеЗаполнения.CRM_ОсновнаяКатегория)
		И ТипЗнч(ДанныеЗаполнения.CRM_ОсновнаяКатегория) = Тип("СправочникСсылка.CRM_КатегорииПользователей")
		И ДанныеЗаполнения.CRM_ОсновнаяКатегория.Владелец = Объект.Исполнитель Тогда
		Объект.CRM_ОсновнаяКатегория = ДанныеЗаполнения.CRM_ОсновнаяКатегория;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.CRM_ОсновнаяКатегория) И Объект.CRM_Категории.Найти(Объект.CRM_ОсновнаяКатегория, "Категория") = Неопределено Тогда
		НоваяСтрока = Объект.CRM_Категории.Добавить();
		НоваяСтрока.Категория = Объект.CRM_ОсновнаяКатегория;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Важность)
		И ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Важность")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Важность)
		И ТипЗнч(ДанныеЗаполнения.Важность) = Тип("ПеречислениеСсылка.ВариантыВажностиЗадачи") Тогда
		Объект.Важность = ДанныеЗаполнения.Важность;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Важность) Тогда
		Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеБизнесПроцесса) Тогда
		Объект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Объект.Автор				= Пользователи.ТекущийПользователь();
		Объект.Исполнитель			= Пользователи.ТекущийПользователь();
		Объект.ПринятаКИсполнению	= Истина;
		Объект.CRM_Личная			= Истина;
		Объект.Дата 				= ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадачаИсполнителяМодульОбъектаПередЗаписью(Объект, Отказ) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("мСоздатьОповещениеОНовойЗадаче") Тогда
		Объект.ДополнительныеСвойства["мСоздатьОповещениеОНовойЗадаче"]	= Ложь;
	Иначе	
		Объект.ДополнительныеСвойства.Вставить("мСоздатьОповещениеОНовойЗадаче", Ложь);
	КонецЕсли;	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ИсходныеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, 
			"Выполнена, ПометкаУдаления, СостояниеБизнесПроцесса");
	Иначе 
		ИсходныеРеквизиты = Новый Структура(
			"Выполнена, ПометкаУдаления, СостояниеБизнесПроцесса",
			Ложь, Ложь, Перечисления.СостоянияБизнесПроцессов.ПустаяСсылка());
	КонецЕсли;
	
	Если НЕ ИсходныеРеквизиты.Выполнена И Объект.Выполнена Тогда
		
		Если Объект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			ВызватьИсключение НСтр("ru = 'Нельзя выполнять задачи остановленных бизнес-процессов.'");
		КонецЕсли;	
		
		// Если задача выполнена, то запишем в реквизит Исполнитель того
		// пользователя, который фактически выполнил задачу. Это нам потом
		// потребуется для отчетов. Такую запись делаем только в том
		// случае, если в базе было не выполнено, а в объекте стало выполнено.
		Если НЕ ЗначениеЗаполнено(Объект.Исполнитель) Тогда
			Объект.Исполнитель = ПользователиКлиентСервер.АвторизованныйПользователь();
		КонецЕсли;
		Если Объект.ДатаИсполнения = Дата(1, 1, 1) Тогда
			Объект.ДатаИсполнения = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Важность.Пустая() Тогда
		Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеБизнесПроцесса) Тогда
		Объект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
	Объект.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Объект.Предмет);
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		Если ИсходныеРеквизиты.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
			БизнесПроцессыИЗадачиСервер.ПриПометкеУдаленияЗадачи(Объект.Ссылка, Объект.ПометкаУдаления);
		КонецЕсли;
		
		Если НЕ Объект.Ссылка.Пустая() И ИсходныеРеквизиты.СостояниеБизнесПроцесса <> Объект.СостояниеБизнесПроцесса Тогда
			УстановитьСостояниеПодчиненныхБизнесПроцессов(Объект, Объект.СостояниеБизнесПроцесса);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Выполнена И Не Объект.ПринятаКИсполнению Тогда
		Объект.ПринятаКИсполнению = Истина;
		Объект.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
	КонецЕсли;	
		
	// СтандартныеПодсистемы.УправлениеДоступом
	УстановитьПривилегированныйРежим(Истина);
	ГруппаИсполнителейЗадач = БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(Объект.РольИсполнителя, 
		Объект.ОсновнойОбъектАдресации, Объект.ДополнительныйОбъектАдресации);
	УстановитьПривилегированныйРежим(Ложь);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Заполнение реквизита ДатаПринятияКИсполнению.
	Если Объект.ПринятаКИсполнению И Объект.ДатаПринятияКИсполнению = Дата('00010101') Тогда
		Объект.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// +CRM
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) И ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Если Объект.ДополнительныеСвойства.Свойство("мСостояниеСтрокой") Тогда
			Объект.CRM_СостояниеСтрокой = Объект.ДополнительныеСвойства["мСостояниеСтрокой"];
		Иначе
			ОбновитьСостояниеСтрокой(Объект);
		КонецЕсли;
		Если Объект.Ссылка.Пустая() И (ЗначениеЗаполнено(Объект.РольИсполнителя)
			ИЛИ (НЕ ЗначениеЗаполнено(Объект.РольИсполнителя) И НЕ Объект.Исполнитель = Пользователи.ТекущийПользователь())) Тогда
			Объект.ДополнительныеСвойства["мСоздатьОповещениеОНовойЗадаче"]	= Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Объект.Выполнена Тогда
		Объект.CRM_ПроцентВыполненияЗадачи = 100;
	ИначеЕсли Объект.Ссылка.Выполнена И НЕ Объект.Выполнена Тогда
		Объект.CRM_ПроцентВыполненияЗадачи = 0;
	КонецЕсли;
	Если Объект.CRM_Личная И ЗначениеЗаполнено(Объект.CRM_Родитель) И НЕ ИсходныеРеквизиты.Выполнена И НЕ Объект.Выполнена И (Объект.CRM_ПроцентВыполненияЗадачи >= 100) Тогда
		Объект.Выполнена = Истина;
	КонецЕсли;
	Объект.ДополнительныеСвойства.Вставить("ПредыдущееЗначениеВыполнена", Объект.Ссылка.Выполнена);
	Если НЕ Объект.CRM_Личная И ЗначениеЗаполнено(Объект.CRM_Родитель) Тогда
		Объект.CRM_Родитель = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	// Эмуляция подписки на событие "УстановитьПометкуУдаленияПрисоединенныхФайловДокументы".
	РаботаСФайлами.УстановитьПометкуУдаленияФайловПередЗаписью(Объект, Отказ);
	// -CRM
	
КонецПроцедуры

Процедура ЗадачаИсполнителяМодульОбъектаПриВыполнении(Объект, Отказ) Экспорт
	
	CRM_ОповещенияСервер.УдалитьОповещения(Объект.Ссылка);
	
КонецПроцедуры

// Процедура формирует строковое представление состояния задачи.
//
Процедура ОбновитьСостояниеСтрокой(Объект)
	СтрокаСостояния = "";
	СписокВариантов = Новый СписокЗначений;
	СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Объект.CRM_ТочкаМаршрута, Объект.БизнесПроцесс.НомерВерсииКартыМаршрута, 0);
	Если НЕ СтруктураТочки = Неопределено
		И (СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
		ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта) Тогда
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка, Объект.БизнесПроцесс.НомерВерсииКартыМаршрута);
		Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
			СписокВариантов.Добавить(ЗначениеМассива.Индекс, ЗначениеМассива.ВариантСиноним);
		КонецЦикла;
	КонецЕсли;
	Если Объект.Выполнена Тогда
		СтрокаСостояния = "Выполнена";
		Если Объект.CRM_Переадресована Тогда
			СтрокаСостояния = СтрокаСостояния + "/Переадресована";
		ИначеЕсли СписокВариантов.Количество() > 0 Тогда
			ЭлементСписка = СписокВариантов.НайтиПоЗначению(Объект.CRM_ВариантВыполнения);
			СтрокаСостояния = СтрокаСостояния + "/" + СтруктураТочки.ИсходящаяТочка + "/" + ЭлементСписка.Представление;
		КонецЕсли;
	Иначе
		Если Объект.ПринятаКИсполнению Тогда
			СтрокаСостояния = "Принята к исполнению";
		Иначе
			СтрокаСостояния = "Не принята к исполнению";
		КонецЕсли;
	КонецЕсли;
	Объект.CRM_СостояниеСтрокой = СтрокаСостояния;
	
КонецПроцедуры

Процедура УстановитьСостояниеПодчиненныхБизнесПроцессов(Объект, НовоеСостояние)
	
	НачатьТранзакцию();
	Попытка
		ПодчиненныеБизнесПроцессы = БизнесПроцессыИЗадачиСервер.БизнесПроцессыГлавнойЗадачи(Объект.Ссылка);
		Если ПодчиненныеБизнесПроцессы <> Неопределено Тогда
			Для Каждого ПодчиненныйБизнесПроцесс Из ПодчиненныеБизнесПроцессы Цикл
				БизнесПроцессОбъект = ПодчиненныйБизнесПроцесс.ПолучитьОбъект();
				БизнесПроцессОбъект.Заблокировать();
				БизнесПроцессОбъект.Состояние = НовоеСостояние;
				БизнесПроцессОбъект.Записать();
			КонецЦикла;	
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаИсполнителяМодульОбъектаПриЗаписи(Объект, Отказ) Экспорт
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("мСоздатьОповещениеОНовойЗадаче") Тогда
		Объект.ДополнительныеСвойства.Вставить("мСоздатьОповещениеОНовойЗадаче", Ложь);
	КонецЕсли;	
	
	Если НЕ Отказ И Объект.ДополнительныеСвойства["мСоздатьОповещениеОНовойЗадаче"] Тогда
		ВидОповещения = ?(ЗначениеЗаполнено(Объект.CRM_НачалоПереадресации),Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах,Справочники.CRM_ВидыОповещений.ОповещатьОНовыхЗадачах);
		Если ЗначениеЗаполнено(Объект.РольИсполнителя) И НЕ ЗначениеЗаполнено(Объект.Исполнитель) Тогда
			ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Объект.РольИсполнителя,ВидОповещения, Объект.Ссылка);
		ИначеЕсли ЗначениеЗаполнено(Объект.Исполнитель) Тогда
			ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Объект.Исполнитель,ВидОповещения, Объект.Ссылка);
		КонецЕсли;
		Если НЕ (ПараметрыОповещения = Неопределено) Тогда
			CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	Если (НЕ Отказ И ЗначениеЗаполнено(Объект.CRM_Родитель))
		ИЛИ (Объект.ДополнительныеСвойства.Свойство("ПредыдущееЗначениеВыполнена") 
		И (Объект.ДополнительныеСвойства.ПредыдущееЗначениеВыполнена = Истина) И НЕ Объект.Выполнена) Тогда
		Если НЕ Объект.ДополнительныеСвойства.Свойство("НеОбновлятьПоказателиЗадачВИерархии") Тогда
			Если Объект.ДополнительныеСвойства.ПредыдущееЗначениеВыполнена И Не Объект.Выполнена Тогда
				ПодчиненныеЗадачи = CRM_БизнесПроцессыИЗадачиВызовСервера.ПолучитьПодчиненныеЗадачи(Объект.Ссылка);
				Если ПодчиненныеЗадачи.Количество() > 0 Тогда
					CRM_БизнесПроцессыИЗадачиВызовСервера.ОбновитьПоказателиЗадачВИерархии(ПодчиненныеЗадачи[0].Ссылка);
				Иначе
					Если ЗначениеЗаполнено(Объект.CRM_Родитель) Тогда
						CRM_БизнесПроцессыИЗадачиВызовСервера.ОбновитьПоказателиЗадачВИерархии(Объект.Ссылка);
					КонецЕсли;
				КонецЕсли;
			Иначе
				CRM_БизнесПроцессыИЗадачиВызовСервера.ОбновитьПоказателиЗадачВИерархии(Объект.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если Объект.CRM_Личная
			И Не Объект.Выполнена
			И ЗначениеЗаполнено(Объект.Предмет)
			И (ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Или ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
			//
			Если ЗначениеЗаполнено(Объект.Исполнитель) И ПравоДоступа("Изменение", Объект.Предмет.Метаданные()) Тогда
				Если Объект.Предмет.Ответственный <> Объект.Исполнитель Тогда
					ПредыдущийОтветственный = Объект.Предмет.Ответственный;
					
					бУстанавливатьПривилигированныйРежим = Не ПривилегированныйРежим();
					
					Если бУстанавливатьПривилигированныйРежим Тогда
						УстановитьПривилегированныйРежим(Истина);
					КонецЕсли;
					
					бОтветственныйИзменен = Ложь;
					Попытка
						Если ПравоДоступа("Изменение", Объект.Предмет.Метаданные()) Тогда
							ПредметОбъект = Объект.Предмет.ПолучитьОбъект();
							ПредметОбъект.Ответственный = Объект.Исполнитель;
							ПредметОбъект.Записать();
							бОтветственныйИзменен = Истина;
						КонецЕсли;
					Исключение
						СтрОписаниеОшибки = ОписаниеОшибки();
						Отказ = Истина;
						ВызватьИсключение СтрОписаниеОшибки; // Всеравно будет ошибка что в данной транзакции уже были ошибки.
						
						бОтветственныйИзменен = Ложь;
					КонецПопытки;
					Если бУстанавливатьПривилигированныйРежим Тогда
						УстановитьПривилегированныйРежим(Ложь);
					КонецЕсли;
					
					Если бОтветственныйИзменен Тогда
						бОтправитьУведомлениеПредыдущемуОтветственному = ЗавершитьЛичныеЗадачиПоПредметуВПривилигированномРежмиме(Объект.Ссылка, ПредыдущийОтветственный, Объект.Предмет);
						Если бОтправитьУведомлениеПредыдущемуОтветственному Тогда
							ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ПредыдущийОтветственный, Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах, Объект.Предмет);
							Если НЕ (ПараметрыОповещения = Неопределено) Тогда
								CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗавершитьЛичныеЗадачиПоПредметуВПривилигированномРежмиме(Ссылка, ИсполнительЗадачи, ПредметЗадачи)
	бОтправитьУведомлениеПредыдущемуОтветственному = Ложь;
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Задача
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И ЗадачаИсполнителя.Предмет = &Предмет
	|	И ЗадачаИсполнителя.Исполнитель = &ПредыдущийОтветственный
	|	И ЗадачаИсполнителя.Ссылка <> &Ссылка
	|");
	Запрос.УстановитьПараметр("Предмет", ПредметЗадачи);
	Запрос.УстановитьПараметр("ПредыдущийОтветственный", ИсполнительЗадачи);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		бОтправитьУведомлениеПредыдущемуОтветственному = Истина;
		
		Если Не CRM_БизнесПроцессыИЗадачиВызовСервера.ЕстьПодчиненныеЗадачи(Выборка.Задача) Тогда
			// Если у личной задачи предыдущего ответственного нет подчиненных личных задач - завершаем ее.
			Попытка
				ЗадачаОбект = Выборка.Задача.ПолучитьОбъект();
				ЗадачаОбект.Заблокировать();
				Если ЗадачаОбект.Заблокирован() Тогда
					ЗадачаОбект.ВыполнитьЗадачу();
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат бОтправитьУведомлениеПредыдущемуОтветственному;
	
КонецФункции

// см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта()
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

#Область ПрограммныйИнтерфейс

// Получить структуру с описанием формы выполнения задачи.
//
// Параметры:
//  ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//
Функция ФормаВыполненияЗадачи(Знач ЗадачаСсылка, Знач ИзКалендаря = 0) Экспорт
	
	Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный тип параметра ЗадачаСсылка (передан: %1; ожидается: %2)'"),
			ТипЗнч(ЗадачаСсылка), "ЗадачаСсылка.ЗадачаИсполнителя");
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "БизнесПроцесс,ТочкаМаршрута");
	Если Реквизиты.БизнесПроцесс = Неопределено ИЛИ Реквизиты.БизнесПроцесс.Пустая() Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	ТипБизнесПроцесса = Реквизиты.БизнесПроцесс.Метаданные();
	// +CRM
	Если ТипБизнесПроцесса.Имя = "CRM_БизнесПроцесс" Тогда
		Если НЕ ЗадачаСсылка.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПараметрыФормы", Новый Структура("Ключ, ОбновлятьКалендарь", ЗадачаСсылка, ИзКалендаря));
			Если ЗадачаСсылка.БизнесПроцесс.КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				ПараметрыФормы.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиНезависимыйПроцесс");
			ИначеЕсли ЗадачаСсылка.БизнесПроцесс.КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта
			И ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.Интерес)
			И (ТипЗнч(ЗадачаСсылка.БизнесПроцесс.Интерес) = Тип("ДокументСсылка.CRM_Интерес"))
			И ЗначениеЗаполнено(ЗадачаСсылка.CRM_СостояниеИнтереса)
			И (ЗадачаСсылка.БизнесПроцесс.Интерес.Ответственный = ЗадачаСсылка.Исполнитель) Тогда
				ПараметрыФормы.ПараметрыФормы.Ключ = ЗадачаСсылка.БизнесПроцесс.Интерес;
				ПараметрыФормы.Вставить("ИмяФормы", "Документ.CRM_Интерес.ФормаОбъекта");
			ИначеЕсли ЗадачаСсылка.БизнесПроцесс.КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта
			И ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.Интерес)
			И ЗначениеЗаполнено(ЗадачаСсылка.CRM_СостояниеИнтереса) Тогда
				ПараметрыФормы.ПараметрыФормы.Ключ = ЗадачаСсылка.БизнесПроцесс.Интерес;
				ПараметрыФормы.Вставить("ИмяФормы", "Документ."+ЗадачаСсылка.БизнесПроцесс.Интерес.Метаданные().Имя+".ФормаОбъекта");
			Иначе
				ПараметрыФормы.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачи");
			КонецЕсли;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_БизнесПроцесс.Ссылка
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача";
			
			Запрос.УстановитьПараметр("ВедущаяЗадача" ,ЗадачаСсылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ПараметрыФормы", Новый Структура("Ключ, ОбновлятьКалендарь", Выборка.Ссылка, ИзКалендаря));
				ПараметрыФормы.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаБизнесПроцесса");
			Иначе
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ПараметрыФормы", Новый Структура("Ключ, ОбновлятьКалендарь", ЗадачаСсылка, ИзКалендаря));
				ПараметрыФормы.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачи");
			КонецЕсли;
		КонецЕсли;
		//+вог
		//Всегда одна форма задачи
		//ПараметрыФормы.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачи")
		//-вог
	Иначе
	// -CRM
		ПараметрыФормы = БизнесПроцессы[ТипБизнесПроцесса.Имя].ФормаВыполненияЗадачи(ЗадачаСсылка,
			Реквизиты.ТочкаМаршрута);
		БизнесПроцессыИЗадачиПереопределяемый.ПриПолученииФормыВыполненияЗадачи(
			ТипБизнесПроцесса.Имя, ЗадачаСсылка, Реквизиты.ТочкаМаршрута, ПараметрыФормы);
	// +CRM
	КонецЕсли;
	// -CRM
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

Функция ЗадачаДоступнаДляПринятияКИсполнению(Задача) Экспорт
	CRM_БизнесПроцессыСервер.ЗадачаДоступнаДляПринятияКИсполнению(Задача);
КонецФункции
