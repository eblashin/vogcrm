
Функция ВыполнитьЗапрос(СтрокаЗапроса,Ресурс)  
	Сервер = "api.unisender.com/ru/api";
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗаголовокHTTP = Новый Соответствие();
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗаголовокHTTP.Вставить("Accept-Language", "ru");
    ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
    ЗаголовокHTTP.Вставить("Content-Language", "ru");
    ЗаголовокHTTP.Вставить("Content-Charset", "utf-8");
	HTTPЗапрос		= Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса,"UTF-8",ИспользованиеByteOrderMark.НеИспользовать);
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	HTTP.ОтправитьДляОбработки(HTTPЗапрос, ФайлРезультата);
	
	Возврат ФайлРезультата;
КонецФункции

Функция ПолучитьЗначениеИзОтветаJSON(ФайлРезультата, ПрочитатьВСоответствие=Ложь)Экспорт 
	ЧтениеJSON=Новый ЧтениеJSON;
	//ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	ЧтениеJSON.ОткрытьФайл(ФайлРезультата);
	Значение=ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	ЧтениеJSON.Закрыть();
    УдалитьФайлы(ФайлРезультата);
	Возврат Значение
КонецФункции


Функция РегистрацияНовогоПользователяUniSender(login, email, password = "") Экспорт
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/register?format=json";
		СтрокаЗапроса="&email="+email
		                +"&login="+login
						+?(ЗначениеЗаполнено(password), "&password="+password, "&notify=1")
		                +"&platform=1c_crm_rarus"
		                +"&need_confirm=1";
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	Если СтруктураОтвета.Свойство("error",Значение) Тогда
		Возврат "";
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Возврат Значение.api_key;
	КонецЕсли;
КонецФункции

Функция ОтправитьПисьмо(ПараметрыПисьма, api_key, СписокРассылки, Отправитель, EmailОтправителя, ИдРассылки="", ТекстОтвета) Экспорт
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/sendEmail?format=json";
		ТелоПисьма=ПараметрыПисьма.Тело;
		
		attachments="";
		
		НомерВложения = 0;
		Для Каждого СтрокаТаблицы Из ПараметрыПисьма.Вложения Цикл 
			НомерВложения = НомерВложения + 1;
			ИмяВложения = СтрЗаменить(СтрокаТаблицы.Ключ, "_", "");
			ИмяВременногоФайла = КаталогВременныхФайлов()+ИмяВложения;
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("ДвоичныеДанные") Тогда
				СтрокаТаблицы.Значение.Записать(ИмяВременногоФайла);
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Значение) = Тип("Структура") Тогда
				СтрокаТаблицы.Значение.ДвоичныеДанные.Записать(ИмяВременногоФайла);
			КонецЕсли;
			Текст = Новый ТекстовыйДокумент();
			Текст.Прочитать(ИмяВременногоФайла, "ISO-8859-1", Символы.ПС);
			Стр = Текст.ПолучитьТекст();
			attachments=attachments+"&attachments["+ИмяВложения+"]="+КодироватьСтроку(Стр, СпособКодированияСтроки.КодировкаURL, "ISO-8859-1");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Структура") И СтрНайти(ТелоПисьма, "src=""cid:"+СтрокаТаблицы.Значение.Идентификатор) > 0 Тогда
				ТелоПисьма = СтрЗаменить(ТелоПисьма, "src=""cid:"+СтрокаТаблицы.Значение.Идентификатор, "src="""+Строка(НомерВложения)+"_"+ИмяВложения);
			КонецЕсли;
		КонецЦикла;
		
		ТелоПисьма=КодироватьСтроку(ТелоПисьма, СпособКодированияСтроки.КодировкаURL);

		АдресЭлектроннойПочты = "";
		Для Каждого СтрокаТаблицы Из ПараметрыПисьма.Кому Цикл 
			АдресЭлектроннойПочты=АдресЭлектроннойПочты+"&email[]="+КодироватьСтроку(СтрокаТаблицы.Представление + " ", СпособКодированияСтроки.КодировкаURL) + СтрокаТаблицы.Адрес;
			//АдресЭлектроннойПочты="&email=" + СтрокаТаблицы.Адрес;
		КонецЦикла;
		
		СтрокаЗапроса="&api_key="+api_key
		                +"&platform=1c_crm_rarus"
		                +"&track_read=1"
		                +"&ref_key[]="+ПараметрыПисьма.GUID
						+"&track_links=1"
						+"&attach_multi=0"
						+АдресЭлектроннойПочты
						+"&sender_name="+?(ЗначениеЗаполнено(Отправитель), Отправитель, EmailОтправителя)
						+"&sender_email="+EmailОтправителя
						+"&list_id="+СписокРассылки
						+?(ПустаяСтрока(ИдРассылки),"","&user_campaign_id="+ИдРассылки)
						+"&subject="+КодироватьСтроку(ПараметрыПисьма.Тема, СпособКодированияСтроки.КодировкаURL)
						+"&body="+ТелоПисьма
						+attachments
						;
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	Если СтруктураОтвета.Свойство("error") Тогда
		ТекстОтвета = СтруктураОтвета.error;
		Возврат Неопределено;
	ИначеЕсли СтруктураОтвета.Свойство("warnings",Значение) Тогда
		Для каждого Предупреждение из Значение Цикл
			ТекстОтвета = ТекстОтвета+?(ЗначениеЗаполнено(ТекстОтвета), Символы.ПС, "") + Предупреждение.warning;
		КонецЦикла;
		Если СтрНайти(ТекстОтвета, "SZ150219-06")>0 Тогда
			МассивАдресов = Новый Массив;
			Для Каждого СтрокаТаблицы Из ПараметрыПисьма.Кому Цикл 
				МассивАдресов.Добавить(СтрокаТаблицы.Адрес);
			КонецЦикла;
			СоответствиеАдресов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов);
			Для каждого ОбъектКИ из СоответствиеАдресов Цикл
				Если ЗначениеЗаполнено(ОбъектКИ.Значение) Тогда
					Объект = ОбъектКИ.Значение.ПолучитьОбъект();
					Объект.CRM_ОтписалсяОтEmailРассылок = Истина;
					Объект.Записать();
				КонецЕсли;
			КонецЦикла;
			Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.ПолучательОтписалсяОтРассылки;
		КонецЕсли;
		Возврат Неопределено;
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Если Значение.Количество()>0 Тогда
			Возврат Значение[0].id;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СпискиКонтактовUniSender(api_key) Экспорт
	
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	Если ПустаяСтрока(api_key) Тогда
		Если Не ПустаяСтрока(Ошибка) Тогда Ошибка=Ошибка+Символы.ПС; КонецЕсли;
		Ошибка=Ошибка+"Не заполнен api_key";
	КонецЕсли;
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/getLists?format=json";
		СтрокаЗапроса="&platform=1c_crm_rarus&api_key="+api_key;
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	СпискиКонтактов = Новый СписокЗначений;
	Если СтруктураОтвета.Свойство("error",Значение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка получения данных с UniSender'")+": "+Значение);
		Возврат СпискиКонтактов;
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Для Каждого Список из СтруктураОтвета.result Цикл
			СпискиКонтактов.Добавить(СтрЗаменить(Строка(Список.id), Символы.НПП, ""), Список.title);
		КонецЦикла;
		Возврат СпискиКонтактов;
	КонецЕсли;

КонецФункции

Функция СоздатьСписокКонтактовUniSender(api_key, Наименование) Экспорт
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/createList?format=json";
		
		СтрокаЗапроса="&api_key="+api_key
		                +"&platform=1c_crm_rarus"
						+"&title="+Наименование;
						
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	Если СтруктураОтвета.Свойство("error",Значение) Тогда
		Возврат Неопределено;
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Возврат СтрЗаменить(Строка(Значение.id), Символы.НПП, "");
	КонецЕсли;
КонецФункции

Функция СтатусыВДоставке() Экспорт
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется);
	СписокСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.Отправлено);
	СписокСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.Доставлено);
	Возврат СписокСтатусов;
	
КонецФункции

Процедура ОбновитьСтатусыEmailРассылок(ТаблицаПисем) Экспорт
	
	Количество = ТаблицаПисем.Количество();
	Если Количество = 0 Тогда Возврат; КонецЕсли;
	
	СписокПисемСтрокой = ТаблицаПисем[0].ИдентификаторСообщения;

	Для Ном = 1 по Количество-1 Цикл
		СписокПисемСтрокой = СписокПисемСтрокой + "," + ТаблицаПисем[Ном].ИдентификаторСообщения;
	КонецЦикла;
	
	СтруктураОтвета=Новый Структура;
	
	api_key = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender().КлючДоступа;
	
	Ресурс = "/checkEmail?format=json";
	СтрокаЗапроса="&api_key="+api_key
		            +"&platform=1c_crm_rarus"
					+"&email_id="+СписокПисемСтрокой
					;
	СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс), Истина);
	
	Статусы=Неопределено;
	Результат = СтруктураОтвета.Получить("result");
	Если Результат<>Неопределено Тогда
		Статусы = Результат.Получить("statuses");
		Если Статусы<>Неопределено Тогда
			Для Каждого Статус из Статусы Цикл
				СтатусID = Статус.Получить("id");
				СтатусStatus = Статус.Получить("status");
				НайденаяСтрока=ТаблицаПисем.Найти(СтатусID, "ИдентификаторСообщения");
				Если НайденаяСтрока<>Неопределено Тогда 
					ЗаписьРегистра = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
					ЗаписьРегистра.Письмо = НайденаяСтрока.Письмо;
					ЗаписьРегистра.Статус = СоответствиеСтатусаUniSender(СтатусStatus);
					ЗаписьРегистра.СтатусСтрокой = СтатусStatus;
					ЗаписьРегистра.Записать();
					Если ЗаписьРегистра.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.ПолучательОтписалсяОтРассылки Тогда
						МассивАдресов = Новый Массив;
						Для каждого Получатель из НайденаяСтрока.Письмо.ПолучателиПисьма Цикл
							МассивАдресов.Добавить(Получатель.Адрес);
						КонецЦикла;
						СоответствиеАдресов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов);
						Для каждого ОбъектКИ из СоответствиеАдресов Цикл
							Если ЗначениеЗаполнено(ОбъектКИ.Значение) Тогда
								Объект = ОбъектКИ.Значение.ПолучитьОбъект();
								Объект.CRM_ОтписалсяОтEmailРассылок = Истина;
								Объект.Записать();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеСтатусаUniSender(СтатусСтрокой)
	Если СтатусСтрокой = "not_sent" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется;
	ИначеЕсли СтатусСтрокой = "ok_read" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.Прочитано;
	ИначеЕсли СтатусСтрокой = "ok_delivered" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.Доставлено;
	ИначеЕсли СтатусСтрокой = "ok_sent" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.Отправлено;
	ИначеЕсли СтатусСтрокой = "ok_link_visited" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.ПереходПоСсылке;
	ИначеЕсли СтатусСтрокой = "err_unsubscribed" или СтатусСтрокой = "ok_unsubscribed" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.ПолучательОтписалсяОтРассылки;
	Иначе
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.НеДоставлено;
	КонецЕсли;
КонецФункции

Функция МассивШаблоновUniSender() Экспорт
	
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	api_key = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender().КлючДоступа;
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/listTemplates?format=json";

		attachments="";
		
		СтрокаЗапроса="&platform=1c_crm_rarus&api_key="+api_key;
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	Если СтруктураОтвета.Свойство("error",Значение) Тогда
		Возврат Новый Массив;
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Возврат СтруктураОтвета.result;
	КонецЕсли;
	
КонецФункции

Функция ШаблонUniSender(Шаблон) Экспорт
	
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	api_key = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender().КлючДоступа;
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/getTemplate?format=json";
		
		СтрокаЗапроса="&api_key="+api_key
		            	+"&platform=1c_crm_rarus"
						+"&template_id="+Шаблон
						+"&format=html";
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	Если СтруктураОтвета.Свойство("error",Значение) Тогда
		ТекстПисьма = "";
		Тема = "";
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Текст = СтрЗаменить(СтруктураОтвета.result.body, "src=""/ru/user_file", "src=""https://cp.unisender.com/ru/user_file");
		ТекстПисьма = СтрЗаменить(Текст, "img src=""/v5/img", "img src=""https://cp.unisender.com/v5/img");
		Тема = СтруктураОтвета.result.subject;
	КонецЕсли;
	Возврат Новый Структура("ТекстПисьма, Тема", ТекстПисьма, Тема);
	
КонецФункции

Функция UniSenderПроверитьАдресУчетнойЗаписи(email) Экспорт
	
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	api_key = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender().КлючДоступа;
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/validateSender?format=json";
		
		СтрокаЗапроса="&api_key="+api_key
		            	+"&platform=1c_crm_rarus"
						+"&email="+email;
						
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	Если СтруктураОтвета.Свойство("error",Значение) Тогда
		Если СтрНайти(Значение, "SZ151110-01")>0 Тогда
			Возврат Истина;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Значение);
		Возврат Ложь;
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Если Значение.Message = "Confirmation letter was sent" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранная учетная запись не была подтверждена в UniSender. Вам отправлено письмо для подтверждения.'"));
		ИначеЕсли Значение.Message = "Confirmation letter was sent again" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранная учетная запись не была подтверждена в UniSender. Вам ранее было отправлено письмо для подтверждения.'"));
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПодписатьАдресНаРассылки(email) Экспорт
	
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	ДанныеДоступаКUniSender = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender();
	api_key = ДанныеДоступаКUniSender.КлючДоступа;
	СписокРассылки = ДанныеДоступаКUniSender.СписокДляРассылок;
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/subscribe?format=json";
		
		СтрокаЗапроса="&api_key="+api_key
		            	+"&platform=1c_crm_rarus"
						+"&list_ids="+СписокРассылки
						//+"&double_optin=1"
		                +"&fields[email]="+email;
						
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	Если СтруктураОтвета.Свойство("error",Значение) Тогда
		Если СтрНайти(Значение, "SZ141008-01") > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не настроено письмо подтверждения подписки для указанного списка контактов. Настройте в личном кабинете UniSender.'"));
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ОтписатьАдресОтРассылки(email) Экспорт
	
	СтруктураОтвета=Новый Структура;
	
	Ошибка="";
	
	ДанныеДоступаКUniSender = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender();
	api_key = ДанныеДоступаКUniSender.КлючДоступа;
	СписокРассылки = ДанныеДоступаКUniSender.СписокДляРассылок;
	
	Если ПустаяСтрока(Ошибка) Тогда 
		Ресурс = "/unsubscribe?format=json";
		
		СтрокаЗапроса="&api_key="+api_key
		            	+"&platform=1c_crm_rarus"
						+"&list_ids="+СписокРассылки
						+"&contact_type=email"
		                +"&contact="+email;
						
		СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	Иначе 
		СтруктураОтвета.Вставить("error",Ошибка);
	КонецЕсли;
	
	Значение="";
	Если СтруктураОтвета.Свойство("error",Значение) Тогда
		Если СтрНайти(Значение, "YE131008-13") > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = ''")+ Значение);
		Возврат Ложь;
	ИначеЕсли СтруктураОтвета.Свойство("result",Значение) Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПодписатьПолучателяНаРассылки(Объект, Подписать = Истина, Отказ) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица));
		Если Строки.Количество() = 0 Тогда
			Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица));
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица));
		Если Строки.Количество() = 0 Тогда
			Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailПартнера));
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя));
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица));
	КонецЕсли;
	Если Строки.Количество() > 0 Тогда
		Для каждого Строка из Строки Цикл
			Если Подписать Тогда
				Если НЕ ПодписатьАдресНаРассылки(Строка.АдресЭП) Тогда
					Отказ = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ОтписатьАдресОтРассылки(Строка.АдресЭП) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов)

	СоответствиеКонтактов = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка,
	|	Контакты.АдресЭП КАК АдресЭП
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.МассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";
		
	КонецЦикла;	
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты
	|ИТОГИ ПО
	|	АдресЭП";

	Запрос.УстановитьПараметр("МассивАдресов", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если (ВыборкаПоСсылкам.Следующий()) Тогда
			СоответствиеКонтактов.Вставить(ВРег(Выборка.АдресЭП), ВыборкаПоСсылкам.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;

КонецФункции

Функция ВыгрузитьАвтотекстВUniSender(Ссылка = Неопределено) Экспорт
	
	api_key = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender().КлючДоступа;
	
	Ресурс = "/getFields?format=json";
	СтрокаЗапроса="&api_key="+api_key
		            +"&platform=1c_crm_rarus"
					;
	СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
	СписокПолей = Новый СписокЗначений;
	Если СтруктураОтвета.Свойство("result") Тогда
		Для каждого Поле из СтруктураОтвета.result Цикл
			СписокПолей.Добавить(Поле.name, Поле.id);
		КонецЦикла;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ШаблоныАвтотекста.Представление,
	                      |	CRM_ШаблоныАвтотекста.ПредставлениеLAT,
	                      |	CRM_ШаблоныАвтотекста.Наименование,
	                      |	CRM_ШаблоныАвтотекста.Ссылка,
	                      |	CRM_ШаблоныАвтотекста.ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.CRM_ШаблоныАвтотекста КАК CRM_ШаблоныАвтотекста
	                      |ГДЕ
	                      |	CRM_ШаблоныАвтотекста.Родитель = &Родитель
	                      |	И CRM_ШаблоныАвтотекста.Ссылка = &Ссылка
	                      |	И НЕ CRM_ШаблоныАвтотекста.ЭтоГруппа
	                      |	И НЕ CRM_ШаблоныАвтотекста.ПометкаУдаления
	                      |	И CRM_ШаблоныАвтотекста.Представление <> """"
	                      |	И CRM_ШаблоныАвтотекста.ПредставлениеLAT <> """"");
						  
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_ШаблоныАвтотекста.Ссылка = &Ссылка", "");
	КонецЕсли;
						  
	Запрос.УстановитьПараметр("Родитель", Справочники.CRM_ШаблоныАвтотекста.АвтотекстЭлектронногоПисьма);
	Выборка = Запрос.Выполнить().Выбрать();
	Ресурс = "/createField?format=json";
	РесурсУдаление = "/deleteField?format=json";
	Пока Выборка.Следующий() Цикл
		ЭлементСписка = СписокПолей.НайтиПоЗначению(Выборка.ПредставлениеLAT);
		Если ЭлементСписка=Неопределено Тогда
			СтрокаЗапроса="&api_key="+api_key
				            +"&platform=1c_crm_rarus"
				            +"&name="+Выборка.ПредставлениеLAT
				            +"&public_name="+Выборка.Наименование+" (CRM)"
				            +"&type=string"
							;
			СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,Ресурс));
			Если СтруктураОтвета.Свойство("result") Тогда
				
			Иначе
				
			КонецЕсли;
		ИначеЕсли Выборка.ПометкаУдаления Тогда	
			СтрокаЗапроса="&api_key="+api_key
				            +"&platform=1c_crm_rarus"
				            +"&id ="+ЭлементСписка.Представление;
			СтруктураОтвета=ПолучитьЗначениеИзОтветаJSON(ВыполнитьЗапрос(СтрокаЗапроса,РесурсУдаление));
			Если СтруктураОтвета.Свойство("result") Тогда
				
			Иначе
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецФункции
