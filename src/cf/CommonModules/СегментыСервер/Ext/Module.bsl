
#Область СлужебныеПроцедурыИФункции

// Возвращает результат запроса, определяющего набор элементов сегмента,
// из регистров сведений (применяется для не динамических сегментов).
//
Функция ВыборкаИзРегистра(СегментСсылка)

	Если ТипЗнч(СегментСсылка) = Тип("СправочникСсылка.СегментыНоменклатуры") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НоменклатураСегмента.Номенклатура,
			|	НоменклатураСегмента.Характеристика
			|ИЗ
			|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
			|ГДЕ
			|	НоменклатураСегмента.Сегмент = &Сегмент"
		);
		Запрос.УстановитьПараметр("Сегмент", СегментСсылка);
	Иначе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартнерыСегмента.Партнер
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|ГДЕ
			|	ПартнерыСегмента.Сегмент = &Сегмент"
		);
		Запрос.УстановитьПараметр("Сегмент", СегментСсылка);
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции

// Возвращает таблицу значений, содержащую ссылки на элементы,
// входящие в сегмент, по настройкам СКД.
//
Функция СписокЭлементовСКД(СегментСсылка)

	Настройки = ПолучитьНастройкиСписка(СегментСсылка);
	Возврат ТаблицаСКД(Настройки.СКД, Настройки.Настройки);

КонецФункции

// Возвращает структуру, содержащую СКД сегмента и настройки варианта,
// содержащего список элементов. При этом подключаются поля запроса списка.
//
Функция ПолучитьНастройкиСписка(СегментСсылка)
	
	РеквизитыСКДСегмента = CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(
		СегментСсылка,
		"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
		
	НастройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		
	Если ПустаяСтрока(РеквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
		
		СКД = РеквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		
	Иначе
		
		СКД_Макета = ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(СегментСсылка, РеквизитыСКДСегмента.ИмяШаблонаСКД);
		СКД = СКД_Макета.СхемаКомпоновкиДанных;
		
	КонецЕсли;
	
	// Подключить поля запроса списка.
	
	Если СКД.НаборыДанных.Найти("СписокСегмента") <> Неопределено Тогда
		
		Поля = СКД.НаборыДанных.СписокСегмента.Поля;
		Для Каждого Поле Из Поля Цикл
			Поле.ОграничениеИспользования.Поле = Ложь;
		КонецЦикла;// Подключить поля запроса списка.
		
		НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
		Настройки = СКД.НастройкиПоУмолчанию;
		// +CRM
		CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
		CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);
		// -CRM
	ИначеЕсли  СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
		
		Если НастройкиСегмента <> Неопределено Тогда
			
			НастройкиСписка = НастройкиСегмента;
			
		Иначе
			
			НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСегмента.Настройки;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Новый Структура("СКД, Настройки", СКД, НастройкиСписка);
	
КонецФункции

// Формирует и возвращает таблицу значений по СКД и настройкам.
// Параметры:
// СКД - схема компоновки данных,
// Настройки - вариант настроек схемы, по которым необходимо сформировать таблицу.
//
Функция ТаблицаСКД(СКД, Настройки)

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СКД,Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Колонка = ТаблицаЗначений.Колонки.Найти("Партнер");
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = "ЭлементСписка";
	КонецЕсли;
	Колонка = ТаблицаЗначений.Колонки.Найти("Номенклатура");
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = "ЭлементСписка";
	КонецЕсли;
	Колонка = ТаблицаЗначений.Колонки.Найти("Характеристика");
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = "ХарактеристикаЭлемента";
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Количество() = 1 Тогда
		ТаблицаЗначений.Свернуть("ЭлементСписка");
	Иначе
		ТаблицаЗначений.Свернуть("ЭлементСписка,ХарактеристикаЭлемента");
	КонецЕсли;

	Возврат ТаблицаЗначений;

КонецФункции

Процедура ДобавитьПартнераВСегмент(Сегмент,Партнер) Экспорт
	
	Запись = РегистрыСведений.ПартнерыСегмента.СоздатьМенеджерЗаписи();
	Запись.Сегмент = Сегмент;
	Запись.Партнер = Партнер;
	Запись.Записать();
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 21.06.2021 DEV-671
Процедура ДобавитьНоменклатурнуюГруппуВСегмент(Сегмент, НоменклатурнаяГруппа) Экспорт
	
	Запись = РегистрыСведений.НоменклатурныеГруппыСегмента.СоздатьМенеджерЗаписи();
	Запись.Сегмент = Сегмент;
	Запись.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	Запись.Записать();
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 21.06.2021 DEV-688
Процедура ДобавитьКоллекциюПлиткиВСегмент(Сегмент, КоллекцияПлитки) Экспорт
	
	Запись = РегистрыСведений.КоллекцииПлиткиСегмента.СоздатьМенеджерЗаписи();
	Запись.Сегмент = Сегмент;
	Запись.КоллекцияПлитки = КоллекцияПлитки;
	Запись.Записать();
	
КонецПроцедуры // --- VOG Кулаков П.Л.


Процедура ДобавитьНоменклатуруВСегмент(Сегмент, Номенклатура, Характеристика = Неопределено) Экспорт

	Запись = РегистрыСведений.НоменклатураСегмента.СоздатьМенеджерЗаписи();
	Запись.Сегмент = Сегмент;
	Запись.Номенклатура = Номенклатура;
	Если Характеристика = Неопределено Тогда
		Запись.Характеристика = Характеристика;
	КонецЕсли;
	
	Запись.Записать();

КонецПроцедуры // ДобавитьНоменклатуруВСегмент()

Процедура УдалитьНоменклатуруИзСегмента(Сегмент, Номенклатура, Характеристика = Неопределено) Экспорт

	НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	Если Характеристика <> Неопределено Тогда
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	КонецЕсли;
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура УдалитьПартнераИзСегмента(Сегмент, Партнер) Экспорт

	НаборЗаписей = РегистрыСведений.ПартнерыСегмента.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
	НаборЗаписей.Отбор.Партнер.Установить(Партнер);
	НаборЗаписей.Записать();

КонецПроцедуры

// +++ VOG Кулаков П.Л. 21.06.2021 DEV-671
Процедура УдалитьНоменклатурнуюГруппуИзСегмента(Сегмент, НоменклатурнаяГруппа) Экспорт

	НаборЗаписей = РегистрыСведений.НоменклатурныеГруппыСегмента.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
	НаборЗаписей.Отбор.НоменклатурнаяГруппа.Установить(НоменклатурнаяГруппа);
	НаборЗаписей.Записать();

КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 21.06.2021 DEV-688
Процедура УдалитьКоллекциюПлиткиИзСегмента(Сегмент, КоллекцияПлитки) Экспорт

	НаборЗаписей = РегистрыСведений.КоллекцииПлиткиСегмента.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
	НаборЗаписей.Отбор.КоллекцияПлитки.Установить(КоллекцияПлитки);
	НаборЗаписей.Записать();

КонецПроцедуры // --- VOG Кулаков П.Л.


// Создает запись в журнале регистрации и сообщениях пользователю, 
//  Поддерживает до 4х параметров в комментарии при помощи функции 
//    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку.
//  Поддерживает передачу информации об обшибке, подробное представление 
//    ошибки добавляется в комментарий записи в журнал регистрации.
// 
// Параметры:
//   ПараметрыЖурнала (Структура) - Параметры записи в журнал регистрации.
//       |- Префикс (Строка) - Префикс для имени события журнала регистрации
//       |- Метаданные (ОбъектМетаданных) - Метаданные для записи в журнал регистрации
//       |- Данные (*)       - Данные для записи в журнал регистрации
//   Уровень (Число(0..4))  - Соответствует уровням журнала регистрации.
//   Подкласс (Число(0..4)) - Суффикс для имени события журнала регистрации.
//   КомментарийСПараметрами (Строка) - Комментарий, возможно с параметрами %1 .. %4.
//   ИнформацияОбОшибке (ИнформацияОбОшибке, Строка) - Информация об ошибке, которую так же необходимо
//                                                     задокументировать в комментарии журнала регистрации.
//   Параметр1 .. Параметр4 (*) - Параметры для подстановки в комментарий.
//
Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала = Неопределено, ИмяСобытия = "", 
		Знач КомментарийСПараметрами = "", ИнформацияОбОшибке = Неопределено, 
		Параметр1 = Неопределено, 
		Параметр2 = Неопределено, 
		Параметр3 = Неопределено, 
		Параметр4 = Неопределено
	) Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	// Комментарий для журнала регистрации и пользователя.
	Если Параметр1 <> Неопределено Тогда
		КомментарийСПараметрами = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийСПараметрами, Параметр1, Параметр2, Параметр3, Параметр4
		);
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТестСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТестСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТестСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(
		ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", ". "+ ИмяСобытия), 
		УровеньЖурнала, 
		ПараметрыЖурнала.Метаданные, 
		ПараметрыЖурнала.Данные, 
		КомментарийСПараметрами
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТестСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'")
		Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет очистку не динамических сегментов по запланированным датам.
//
Процедура ВыполнитьПлановуюОчистку() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// Выбрать сегменты, формируемые вручную с подходящей датой очистки.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СегментыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
		|ГДЕ
		|	СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьВручную)
		|	И СегментыНоменклатуры.ДатаОчистки <> ДАТАВРЕМЯ(1, 1, 1)
		|	И СегментыНоменклатуры.ДатаОчистки <= &ДатаОчистки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СегментыПартнеров.Ссылка
		|ИЗ
		|	Справочник.СегментыПартнеров КАК СегментыПартнеров
		|ГДЕ
		|	СегментыПартнеров.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьВручную)
		|	И СегментыПартнеров.ДатаОчистки <> ДАТАВРЕМЯ(1, 1, 1)
		|	И СегментыПартнеров.ДатаОчистки <= &ДатаОчистки"
	);
	
	Запрос.УстановитьПараметр("ДатаОчистки",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();

	// Очистить выбранные сегменты.
	Пока Выборка.Следующий() Цикл
		СегментыСервер.Очистить(Выборка.Ссылка);
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Запускает формирование сегмента и контролирует результат.
// 
// Параметры:
//   Сегменты (СправочникСсылка.СегментыПартнеров, СправочникСсылка.СегментыНоменклатуры) - Сегмент, который должен
//   быть сформирован.
//
Процедура ВыполнитьПериодическоеФормирование(Сегмент) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сегмент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Формирование сегмента. Запуск по расписанию'");
	ПараметрыЖурнала.Метаданные    = Сегмент.Метаданные();
	ПараметрыЖурнала.Данные        = Сегмент;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, , НСтр("ru = 'Запуск'"));
	
	РеквизитыСегмента = CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(
		Сегмент,
		"ПометкаУдаления, СпособФормирования, Наименование ");
	
	// Проверки
	Если РеквизитыСегмента.ПометкаУдаления Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, , ,
			НСтр("ru = 'Завершение'"), НСтр("ru = 'Сегмент помечен на удаление'")
		);
		Возврат;
	ИначеЕсли РеквизитыСегмента.СпособФормирования <> Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, , ,
			НСтр("ru = 'Завершение'"), НСтр("ru = 'Сегмент не периодически обновляемый'")
		);
		Возврат;
	КонецЕсли;
	
	Попытка
		Сформировать(Сегмент);
	Исключение
		ЗаписьЖурнала(ПараметрыЖурнала, , ,
			НСтр("ru = 'Ошибка формирования сегмента %1'"), ИнформацияОбОшибке(), 
			"'"+ РеквизитыСегмента.Наименование +"'"
		);
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, ,НСтр("ru = 'Завершение'"));
	
КонецПроцедуры

Процедура ПолучитьРасписаниеРегламентногоЗадания(Форма)
	
	Форма.Расписание = Новый РасписаниеРегламентногоЗадания;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		
		Форма.Расписание.ВремяНачала = '00010101220000'; // в 10:00 вечера
		Форма.Расписание.ПериодПовтораДней = 1; // каждый день
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ИдентификаторЗадания = Форма.Объект.РегламентноеЗадание;
		Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
			Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			Если Задание <> Неопределено Тогда
				Форма.Расписание = Задание.Расписание;
				Форма.РегламентноеЗаданиеИспользуется = Задание.Использование;
				Форма.РасписаниеСтрокой = Строка(Форма.Расписание);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Ссылка, ИмяШаблона) Экспорт

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СегментыНоменклатуры") Тогда
		
		ИмяСправочника = "СегментыНоменклатуры";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
		
		ИмяСправочника = "СегментыПартнеров";
		
	Иначе
		
		Возврат ВозвращаемоеЗначение;
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Сегменты.СхемаКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	Сегменты.ХранилищеНастроекКомпоновкиДанных
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Сегменты
	|ГДЕ
	|	Сегменты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяШаблона) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяШаблона;
		Если Выборка.Следующий() Тогда
			
			СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники[ИмяСправочника].ПолучитьМакет("ОсновнаяСхема");
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = ВозвращаемоеЗначение.СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
			Иначе
				ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СхемаКомпоновкиДанных;
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.Описание = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Макеты.Найти(ИмяШаблона).Синоним;
		ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники[ИмяСправочника].ПолучитьМакет(ИмяШаблона);
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(СегментСсылка, ИмяШаблонаСКД, АдресСКД, АдресНастроекСКД, УникальныйИдентификатор) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ИмяШаблонаСКД", ИмяШаблонаСКД);
	ВозвращаемоеЗначение.Вставить("ПредставлениеШаблонаСКД",НСтр("ru = 'Произвольный'"));
	ВозвращаемоеЗначение.Вставить("АдресСКД", "");
	ВозвращаемоеЗначение.Вставить("АдресНастроекСКД","");
	
	Если ЗначениеЗаполнено(ИмяШаблонаСКД) Тогда
		
		СхемаИНастройки = ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(СегментСсылка, ИмяШаблонаСКД);
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных.
		Если ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСКД)) Тогда
			
			ВозвращаемоеЗначение.ИмяШаблонаСКД  = "";
			ВозвращаемоеЗначение.АдресСКД = АдресСКД;
			
		Иначе
			
			ВозвращаемоеЗначение.ПредставлениеШаблонаСКД = СхемаИНастройки.Описание;
			
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекСКД)) Тогда
			ВозвращаемоеЗначение.АдресНастроекСКД = АдресНастроекСКД;
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.АдресСКД = АдресСКД;
		
		Схема = ПолучитьИзВременногоХранилища(АдресСКД);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекСКД)) Тогда
			ВозвращаемоеЗначение.АдресНастроекСКД = АдресНастроекСКД;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(
	СегментСсылка,
	ИмяШаблонаСКД,
	АдресСКД,
	АдресНастроекСКД,
	УникальныйИдентификатор) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ЗначениеЗаполнено(ИмяШаблонаСКД) И ПустаяСтрока(АдресСКД) Тогда
		СхемаИНастройки = ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(СегментСсылка, ИмяШаблонаСКД);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,УникальныйИдентификатор)
	Иначе
		Адреса.СхемаКомпоновкиДанных = АдресСКД;
	КонецЕсли;

	// Настройки
	Если НЕ ПустаяСтрока(АдресНастроекСКД) Тогда
		Адреса.НастройкиКомпоновкиДанных = АдресНастроекСКД;
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции 

#Область ПроцедурыОбработчикиСобытийФормИМодулейОбъектовСправочниковСегментов

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	ОбъектСсылка = Объект.Ссылка;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
		
		ПоПартнерам = Истина;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.СегментыНоменклатуры") Тогда
		
		ПоПартнерам = Ложь;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если ПоПартнерам Тогда
		Форма.ЕстьПравоИзменения = ПравоДоступа("Изменение",Метаданные.Справочники.СегментыПартнеров);
	Иначе
		Форма.ЕстьПравоИзменения = ПравоДоступа("Изменение",Метаданные.Справочники.СегментыНоменклатуры);
	КонецЕсли;
	
	Форма.Элементы.ДатаОчистки.ТолькоПросмотр =
		Объект.СпособФормирования <> Перечисления.СпособыФормированияСегментов.ФормироватьВручную;
		
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		
		СКД = Объект.Ссылка.СхемаКомпоновкиДанных.Получить();
		Настройки = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных.Получить();
		
		Если СКД <> Неопределено Тогда
			Форма.АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
		КонецЕсли;
		Если Настройки <> Неопределено Тогда
			Форма.АдресНастроекСКД = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		
		Объект.ИмяШаблонаСКД = "ОсновнаяСхема";
		
	КонецЕсли;
	
	ПолучитьРасписаниеРегламентногоЗадания(Форма);
	
	Если НЕ ПустаяСтрока(Объект.ИмяШаблонаСКД) Тогда
		
		МетаданныеШаблона = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектСсылка)).Макеты.Найти(Объект.ИмяШаблонаСКД);
		Если МетаданныеШаблона = Неопределено Тогда
			
			Форма.ПредставлениеШаблонаСКД = НСтр("ru = 'Произвольная'");
			
		Иначе
			
			Форма.ПредставлениеШаблонаСКД = МетаданныеШаблона.Синоним;
			
		КонецЕсли;
		
	Иначе
		
		Форма.ПредставлениеШаблонаСКД = НСтр("ru = 'Произвольная'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма,ТекущийОбъект) Экспорт
	
	Если НЕ ПустаяСтрока(Форма.АдресСКД) Тогда 
		ТекущийОбъект.СхемаКомпоновкиДанных =
			Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресСКД));
	Иначе
		
	ТекущийОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);

	КонецЕсли;
		
	Если НЕ ПустаяСтрока(Форма.АдресНастроекСКД) Тогда 
		
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных =
			Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресНастроекСКД));
			
	Иначе
			
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
			
	КонецЕсли;
	
	Если Форма.Объект.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Расписание", Форма.Расписание);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Использование", Форма.РегламентноеЗаданиеИспользуется);
	КонецЕсли;

КонецПроцедуры

Процедура СегментОбъектПередЗаписью(Объект, Отказ) Экспорт
	
	Если Отказ ИЛИ Объект.ОбменДанными.Загрузка ИЛИ Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Создание регламентное задание (получение уникального идентификатора).
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Объект.РегламентноеЗадание);
	Если Задание = Неопределено И Объект.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
		
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ФормированиеСегментов);
		Задание.Использование = Ложь;
		Задание.Наименование = НСтр("ru = 'Формирование сегмента партнеров: '") + СокрЛП(Объект.Наименование);
		Задание.Записать();
		
		Объект.РегламентноеЗадание = Задание.УникальныйИдентификатор;
		
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("Задание",Задание);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СегментПередУдалением(Объект, Отказ) Экспорт

	Если Отказ ИЛИ Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СпособФормирования <>
		Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		СегментыСервер.Очистить(Объект.Ссылка);
	КонецЕсли;
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Объект.РегламентноеЗадание);
	Если Задание <> Неопределено Тогда
		Задание.Удалить();
	КонецЕсли;

КонецПроцедуры

Процедура СегментОбработкаЗаполнения(Объект) Экспорт
	
	Если НЕ Объект.ЭтоГруппа Тогда
		
		// Установить ответственного по умолчанию.
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		// установить дату создания
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда
			Объект.ДатаСоздания = ТекущаяДата();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура СегментПриКопировании(Объект) Экспорт
	
	Если Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаСоздания = ТекущаяДата();
	Объект.РегламентноеЗадание = Неопределено;
	
КонецПроцедуры

Процедура СегментПриЗаписи(Объект, Отказ) Экспорт
	
	Если Отказ ИЛИ Объект.ОбменДанными.Загрузка ИЛИ Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СпособФормирования =
		Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		Очистить(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("Задание") Тогда
		Задание = Объект.ДополнительныеСвойства.Задание;
		Если Задание = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаданиеИзменено = Ложь;
	
	Если Объект.СпособФормирования <> Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
		
		Задание.Использование = Ложь;
		ЗаданиеИзменено = Истина;
		
	КонецЕсли;
	
	// Расписание устанавливается в форме элемента.
	Если Объект.ДополнительныеСвойства.Свойство("Расписание") 
			И ТипЗнч(Объект.ДополнительныеСвойства.Расписание) = Тип("РасписаниеРегламентногоЗадания")
			И Строка(Объект.ДополнительныеСвойства.Расписание) <> Строка(Задание.Расписание)
		Тогда
		Задание.Расписание = Объект.ДополнительныеСвойства.Расписание;
		ЗаданиеИзменено = Истина;
	КонецЕсли;
	
	// Использование устанавливается в форме элемента.
	Если Объект.ПометкаУдаления И Задание.Использование Тогда
		
		Задание.Использование = Ложь;
		ЗаданиеИзменено = Истина;
		
	ИначеЕсли Объект.ДополнительныеСвойства.Свойство("Использование") 
			И Объект.ДополнительныеСвойства.Использование <> Задание.Использование Тогда
			
		Задание.Использование = Объект.ДополнительныеСвойства.Использование;
		ЗаданиеИзменено = Истина;
		
	КонецЕсли;

	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
		
		НаименованиеЗадания = НСтр("ru = 'Формирование сегмента партнеров: '");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.СегментыНоменклатуры") Тогда
		
		НаименованиеЗадания = НСтр("ru = 'Формирование сегмента номенклатуры: '");
		
	КонецЕсли;
	
	НаименованиеЗадания = НаименованиеЗадания + СокрЛП(Объект.Наименование);
	Если Задание.Наименование <> НаименованиеЗадания Тогда
		Задание.Наименование = НаименованиеЗадания;
		ЗаданиеИзменено = Истина;
	КонецЕсли;
	
	Если Задание.Параметры.Количество() <> 1 ИЛИ Задание.Параметры[0] <> Объект.Ссылка Тогда
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Объект.Ссылка);
		Задание.Параметры = ПараметрыЗадания;
		ЗаданиеИзменено = Истина;
	КонецЕсли;
		
	Если ЗаданиеИзменено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияИОчистки

// Заполняет регистр сведений объектами, вошедшими в сегмент.
Процедура Сформировать(СегментСсылка) Экспорт

	ПР = ПривилегированныйРежим();
	Если НЕ ПР Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	СписокЭлементов = СписокЭлементовСКД(СегментСсылка);
	ВключатьХарактеристики =
		СписокЭлементов.Колонки.Найти("ХарактеристикаЭлемента") <> Неопределено;

	Если ТипЗнч(СегментСсылка) = Тип("СправочникСсылка.СегментыНоменклатуры") Тогда
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(СегментСсылка);
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если НЕ ЗначениеЗаполнено(Элемент.ЭлементСписка) Тогда
				Продолжить;
			КонецЕсли;
			Запись = НаборЗаписей.Добавить();
			Запись.Сегмент = СегментСсылка;
			Запись.Номенклатура = Элемент.ЭлементСписка;
			Если ВключатьХарактеристики Тогда
				Запись.Характеристика = Элемент.ХарактеристикаЭлемента;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НаборЗаписей = РегистрыСведений.ПартнерыСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(СегментСсылка);
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если НЕ ЗначениеЗаполнено(Элемент.ЭлементСписка) Тогда
				Продолжить;
			КонецЕсли;
			Запись = НаборЗаписей.Добавить();
			Запись.Сегмент = СегментСсылка;
			Запись.Партнер = Элемент.ЭлементСписка;
		КонецЦикла;
	КонецЕсли;

	НаборЗаписей.Записать();

	Если НЕ ПР Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры

// Удаляет из регистра сведений записи, относящиеся к сегменту.
Процедура Очистить(СегментСсылка) Экспорт

	НаборСегмента = ?(
		ТипЗнч(СегментСсылка) = Тип("СправочникСсылка.СегментыНоменклатуры"),
		РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей(),
		РегистрыСведений.ПартнерыСегмента.СоздатьНаборЗаписей()
	);
	НаборСегмента.Отбор.Сегмент.Установить(СегментСсылка);
	НаборСегмента.Записать();

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиСхемыКомпоновки

// Сохраняет схему компоновки данных сегмента в новое хранилище значения.
//
Функция СохранитьСКД(ДанныеФормыОбъект, СхемаКомпоновки) Экспорт

	ДанныеФормыОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновки);
	ДанныеФормыОбъект.Записать();
	Возврат ДанныеФормыОбъект;

КонецФункции

#КонецОбласти

#Область ФункцииОбработкиНабораЭлементов

// Возвращает список значений, содержащий элементы, входящие в сегмент,
// с учетом способа формирования сегмента.
//
Функция СписокЗначений(СегментСсылка) Экспорт

	Список = Новый СписокЗначений();
	Список.ЗагрузитьЗначения(ТаблицаЗначений(СегментСсылка).ВыгрузитьКолонку(0));
	Возврат Список;

КонецФункции

// Возвращает таблицу значений, содержащую элементы, входящие в сегмент,
// с учетом способа формирования сегмента.
//
Функция ТаблицаЗначений(СегментСсылка) Экспорт

	Если СегментСсылка.СпособФормирования =
		Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		Возврат СписокЭлементовСКД(СегментСсылка);
	Иначе
		Возврат ВыборкаИзРегистра(СегментСсылка).Выгрузить();
	КонецЕсли;

КонецФункции

// Возвращает массив элементов, входящих в сегмент,
// с учетом способа формирования сегмента.
//
Функция МассивЭлементов(СегментСсылка) Экспорт

	Возврат ТаблицаЗначений(СегментСсылка).ВыгрузитьКолонку(0);

КонецФункции

#КонецОбласти

#Область ПраваДоступа

Функция ЕстьПравоИзмененияСоставаСегментов(ТипСегмента) Экспорт
	
	Если ТипСегмента = "Номенклатура" Тогда
		ПроверяемыеМетаданные = Метаданные.РегистрыСведений.НоменклатураСегмента;
	ИначеЕсли ТипСегмента = "Партнеры" Тогда
		ПроверяемыеМетаданные = Метаданные.РегистрыСведений.ПартнерыСегмента;
	// +++ VOG Кулаков П.Л. 21.06.2021 DEV-671
	ИначеЕсли ТипСегмента = "НоменклатурныеГруппы" Тогда
		ПроверяемыеМетаданные = Метаданные.РегистрыСведений.НоменклатурныеГруппыСегмента;
	// --- VOG Кулаков П.Л.
	// +++ VOG Кулаков П.Л. 21.06.2021 DEV-688
	ИначеЕсли ТипСегмента = "КоллекцияПлитки" Тогда
		ПроверяемыеМетаданные = Метаданные.РегистрыСведений.КоллекцииПлиткиСегмента;
	// --- VOG Кулаков П.Л.
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПравоДоступа("Изменение",ПроверяемыеМетаданные);
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ПолучитьХарактеристикиНоменклатурыВходящиеВСегмент(Номенклатура, Сегмент) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Настройки = ПолучитьНастройкиСписка(Сегмент);
	
	Если Настройки.СКД.НаборыДанных.Найти("ФормированиеСегмента") = Неопределено Тогда
		// +CRM
		CRM_СегментыСервер.ДобавитьОтбор(
		// -CRM
		Настройки.Настройки, 
		Новый ПолеКомпоновкиДанных("ЭлементСписка"),
		Номенклатура
		);
		
	Иначе
		// +CRM
		CRM_СегментыСервер.ДобавитьОтбор(
		// -CRM
		Настройки.Настройки, 
		Новый ПолеКомпоновкиДанных("Номенклатура"),
		Номенклатура
		);
		
	КонецЕсли;
	
	Возврат ТаблицаСКД(Настройки.СКД, Настройки.Настройки);
	
КонецФункции

// Возвращает флаг вхождения объекта в сегмент.
// Параметры:
// ОбъектСсылка - ссылка на анализируемый объект - партнера или номенклатуру,
// СегментСсылка - ссылка на сегмент партнеров или номенклатуры,
// ХарактеристикаОбъекта - характеристика номенклатуры,
// Динамический - способ формирования сегмента - ФормироватьДинамически.
Функция ВходитВСегмент(ОбъектСсылка, СегментСсылка, Характеристика = Неопределено, Динамический = Истина) Экспорт
	
	Если Динамический Тогда
		
		Если НЕ ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Настройки = ПолучитьНастройкиСписка(СегментСсылка);
		
		Если Настройки.СКД.НаборыДанных.Найти("ФормированиеСегмента") = Неопределено Тогда
			
			// установить отбор списка
			ЭлементОтбора = Настройки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЭлементСписка");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ОбъектСсылка;
			ЭлементОтбора.Использование  = Истина;
			
			Если Характеристика <> Неопределено Тогда
				ЭлементОтбора = Настройки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХарактеристикаЭлемента");
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Характеристика;
				ЭлементОтбора.Использование  = Истина;
			КонецЕсли;
			
		Иначе
			
			ПоПартнеру = ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Партнеры");
			// +CRM
			CRM_СегментыСервер.ДобавитьОтбор(
			// -CRM
				Настройки.Настройки, 
				Новый ПолеКомпоновкиДанных(?(ПоПартнеру,"Партнер","Номенклатура")),
				ОбъектСсылка
			);
			
			Если НЕ ПоПартнеру И Характеристика <> Неопределено Тогда
				// +CRM
				CRM_СегментыСервер.ДобавитьОтбор(
				// -CRM
					Настройки.Настройки, 
					Новый ПолеКомпоновкиДанных("Характеристика"),
					Характеристика
				);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ТаблицаСКД(Настройки.СКД, Настройки.Настройки).Количество() > 0;
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	НоменклатураСегмента.Номенклатура
			               |ИЗ
			               |	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
			               |ГДЕ
			               |	НоменклатураСегмента.Сегмент = &СегментСсылка
			               |	И НоменклатураСегмента.Номенклатура = &ОбъектСсылка
			               |	И НоменклатураСегмента.Характеристика = &Характеристика";
			
		ИначеЕсли	ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	ПартнерыСегмента.Партнер
			               |ИЗ
			               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			               |ГДЕ
			               |	ПартнерыСегмента.Сегмент = &СегментСсылка
			               |	И ПартнерыСегмента.Партнер = &ОбъектСсылка"; 
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОбъектСсылка",ОбъектСсылка);
		Запрос.УстановитьПараметр("СегментСсылка",СегментСсылка);
		Запрос.УстановитьПараметр("Характеристика",Характеристика);
		
		Возврат НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу значений, содержащую ссылки на сегменты, в которые входит объект.
// Параметры:
// ОбъектСсылка - ссылка на номенклатуру или партнера,
// ВключатьДинамические - если истина, то с учетом динамических сегментов.
//
Функция СписокСегментов(ОбъектСсылка, ВключатьДинамические = Ложь) Экспорт

	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Партнеры") Тогда

		// Выбрать не динамические сегменты, в которые входит партнер.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПартнерыСегмента.Сегмент
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|ГДЕ
			|	ПартнерыСегмента.Партнер = &Партнер"
		);
		Запрос.УстановитьПараметр("Партнер", ОбъектСсылка);
		Результат = Запрос.Выполнить().Выгрузить();

		// Добавить в результат динамические сегменты, в которые входит партнер.
		Если ВключатьДинамические Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	СегментыПартнеров.Ссылка
				|ИЗ
				|	Справочник.СегментыПартнеров КАК СегментыПартнеров
				|ГДЕ
				|	СегментыПартнеров.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)"
			);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ВходитВСегмент(ОбъектСсылка, Выборка.Ссылка) Тогда
					Запись = Результат.Добавить();
					Запись.Сегмент = Выборка.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; // Добавить в результат динамические сегменты, в которые входит партнер.
	Иначе

		// Выбрать не динамические сегменты, в которые входит номенклатура.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НоменклатураСегмента.Сегмент
			|ИЗ
			|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
			|ГДЕ
			|	НоменклатураСегмента.Номенклатура = &Номенклатура"
		);
		Запрос.УстановитьПараметр("Номенклатура", ОбъектСсылка);
		Результат = Запрос.Выполнить().Выгрузить();

		// Добавить в результат динамические сегменты, в которые входит номенклатура.
		Если ВключатьДинамические Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	СегментыНоменклатуры.Ссылка
				|ИЗ
				|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
				|ГДЕ
				|	СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)"
			);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ВходитВСегмент(ОбъектСсылка, Выборка.Ссылка) Тогда
					Запись = Результат.Добавить();
					Запись.Сегмент = Выборка.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; // Добавить в результат динамические сегменты, в которые входит номенклатура.
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Устанавливает значение и использование параметра, определяющего отбор по партнерам
// по значению и использованию параметра - сегмента.
//
Процедура УстановитьОтборПоСегменту(ПараметрСегмент, ПараметрПартнеры) Экспорт

	ПараметрПартнеры.Использование = Ложь;

	Если ПараметрСегмент.Использование Тогда
		СписокПартнеров = СегментыСервер.СписокЗначений(ПараметрСегмент.Значение);
		Если СписокПартнеров.Количество() > 0 Тогда
			ПараметрПартнеры.Значение = СписокПартнеров;
			ПараметрПартнеры.Использование = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// +CRM

//Возвращает количество объектов, отнесенных к сегменту,
//с учетом способа формирования сегмента
//
Функция CRM_КоличествоЭлементов(СегментСсылка) Экспорт

	Если СегментСсылка.СпособФормирования =
		Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		Возврат СписокЭлементовСКД(СегментСсылка).Количество();
	Иначе
		Выборка = ВыборкаИзРегистра(СегментСсылка);
		Если Выборка.Пустой() Тогда
			Возврат 0;
		Иначе
			Возврат Выборка.Выбрать().Количество();
		КонецЕсли;
	КонецЕсли;

КонецФункции

// -CRM
