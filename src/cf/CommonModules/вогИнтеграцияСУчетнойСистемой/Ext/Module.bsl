
#Область ПрограммныйИнтерфейс

// Регистрирует объекты в очереди обмена с учетной системой
//
// Параметры:
//	ДанныеВыгрузки 					- Объект или массив объектов, которые требуется зарегистрировать;
//	ОтключитьПроверкуЗаполненности 	- Булево 	- Если Истина, то не выполняется контроль заполненности реквизитов;
//	ОтключитьПроверкуСогласования 	- Булево 	- Если Истина, то не выполняется проверка согласования объекта и его связей;
//	ВыводСообщений 					- Булево 	- определяет, выводить ли сообщения пользователю;
//	ПравилоВыгрузкиДанных 			- Строка 	- переопределяет правило выгрузки объекта
//
Функция ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(ДанныеВыгрузки, 
	ОтключитьПроверкуЗаполненности = Ложь, 
	ОтключитьПроверкуСогласования = Ложь, 
	ВыводСообщений = Истина,
	ПравилоВыгрузкиДанных = Неопределено) Экспорт
	
	//ОшибкаПроверки = Ложь;
	
	СтруктураРегистрации = Новый Структура;
	СтруктураРегистрации.Вставить("ТекстПояснения", 	"");
	СтруктураРегистрации.Вставить("Успешно", 			Ложь);
	СтруктураРегистрации.Вставить("ВыводСообщений", 	ВыводСообщений);
	СтруктураРегистрации.Вставить("Состояние");
	
	ИспользуетсяУчетнаяСистема = ПолучитьФункциональнуюОпцию("вогИспользуетсяУчетнаяСистема"); 
	
	Если Не ИспользуетсяУчетнаяСистема Тогда
		СтруктураРегистрации.ТекстПояснения = НСтр("ru = 'Обмен с учетной системой отключен.'");
		Возврат СтруктураРегистрации;	
	КонецЕсли;
	
	Если ТипЗнч(ДанныеВыгрузки) = Тип("Массив") Тогда
		МассивОбъектов = ДанныеВыгрузки;
	Иначе 
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ДанныеВыгрузки);
	КонецЕсли;
	
	Для Каждого СтрОбъект Из МассивОбъектов Цикл // VOG Солодов В.В. 19.06.2019 // Добавил цикл
		
		ОшибкаПроверки 					= Ложь;
		СтруктураРегистрации.Состояние 	= Неопределено;
		
		ПараметрыОтбора = ПараметрыОтбораПВД(СтрОбъект);
		
		Если ПараметрыОтбора = Неопределено Тогда
			
			Если ВыводСообщений Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определены параметры выгрузки объекта.'"));
			КонецЕсли;
			
			СтруктураРегистрации.ТекстПояснения = НСтр("ru = 'Не удалось выполнить выгрузку объектов'");
			
			//Возврат СтруктураРегистрации;
			Продолжить;
			
		КонецЕсли;
		
		// ++ Проверка условий накладываемых на возможность синхронизации объекта
		// Проверка заполненности реквизитов	
		вогКонтрольЗаполненностиРеквизитовОбъектов.ПроверкаЗаполненностиРеквизитовОбъектаПриНачалеОбмена(
			СтрОбъект,
			СтруктураРегистрации,
			ОтключитьПроверкуЗаполненности,
			ОшибкаПроверки);
		
		// Проверка согласования связанных объектов
		Если Не ОшибкаПроверки Тогда
			
			РегистрыСведений.вогСтатусыСогласованияОбъектов.ПроверитьСогласованиеОбъектов(
				СтрОбъект, 
				СтруктураРегистрации,
				ОтключитьПроверкуСогласования,
				ОшибкаПроверки);
			
		КонецЕсли;
		
		// Проверка условий по контактным лицам
		Если Не ОшибкаПроверки И Не ПроверитьОбъектПередСинхронизацией(ПараметрыОтбора, СтрОбъект) Тогда
			
			Если ВыводСообщений Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПараметрыОтбора.СообщениеПользователю);
			КонецЕсли;
			
			СтруктураРегистрации.ТекстПояснения = ПараметрыОтбора.ТекстПояснения;
			СтруктураРегистрации.Состояние 		= Перечисления.вогСостоянияОбмена.ОшибкаПроверки;
			
		КонецЕсли;
		// -- Проверка условий накладываемых на возможность синхронизации объекта
		
		// Запись в очередь обмена
		// ++ VOG Солодов В.В. 19.06.2019 task 389
		СтруктураПараметровВыгрузки = Неопределено;
		
		Если ЗначениеЗаполнено(ПравилоВыгрузкиДанных) Тогда
			СтруктураПараметровВыгрузки = Новый Структура;
			СтруктураПараметровВыгрузки.Вставить("ПВД", ПравилоВыгрузкиДанных);
		КонецЕсли;
		// -- VOG Солодов В.В. 19.06.2019
		
		ЗаписатьДанныеВОчередьОбмена(СтрОбъект, СтруктураРегистрации, Неопределено, ОшибкаПроверки, СтруктураПараметровВыгрузки);
		
		Если ОшибкаПроверки Тогда
			//Возврат СтруктураРегистрации;
			Продолжить;
		КонецЕсли; 
		
		СтруктураРегистрации.Успешно 			= Истина;
		СтруктураРегистрации.ТекстПояснения 	= НСтр("ru = 'Объекты добавлены в очередь отправки.'");
		
	КонецЦикла;
	
	Возврат СтруктураРегистрации;
	
КонецФункции

// Процедура регламентного задания вогОтправкаОбъектовВУчетнуюСистему
//
Процедура ВыполнитьОтправкуВУчетнуюСистему() Экспорт
	
	ИспользуетсяУчетнаяСистема = ПолучитьФункциональнуюОпцию("вогИспользуетсяУчетнаяСистема"); 
	
	Если ИспользуетсяУчетнаяСистема Тогда
		
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
		
		МассивСостояний = Новый Массив;
		МассивСостояний.Добавить(Перечисления.вогСостоянияОбмена.Зарегистрирован);
		МассивСостояний.Добавить(Перечисления.вогСостоянияОбмена.Ошибка);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогОбъектыДляОбмена.Объект КАК Объект,
		|	вогОбъектыДляОбмена.ПВД КАК ПВД
		|ИЗ
		|	РегистрСведений.вогОбъектыДляОбмена КАК вогОбъектыДляОбмена
		|ГДЕ
		|	вогОбъектыДляОбмена.Состояние В(&МассивСостояний)";
		
		Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДанных = РезультатЗапроса.Выбрать();
		
		// ++ VOG Солодов В.В. 09.08.2019 task 526
		МассивОбъектовДополнительнойВыгрузки = Новый Массив;
		// -- VOG Солодов В.В. 09.08.2019
		
		Пока ВыборкаДанных.Следующий() Цикл
			
			// ++ VOG Солодов В.В. 19.06.2019 task 389
			СтруктураПараметровВыгрузки = Неопределено;
			ПараметрыОтбора 			= Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаДанных.ПВД) Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Имя", ВыборкаДанных.ПВД);
				
				СтруктураПараметровВыгрузки = Новый Структура;
				СтруктураПараметровВыгрузки.Вставить("ПВД", ВыборкаДанных.ПВД);
			
				ПараметрыОтбора.Вставить("ПараметрыВыгрузки", СтруктураПараметровВыгрузки);
				
			КонецЕсли;
			
			РезультатОбмена = ПолучитьРезультатОтправкиВУчетнуюСистему(ВыборкаДанных.Объект, Ложь,,, ПараметрыОтбора);
			
			ЗаписатьДанныеВОчередьОбмена(ВыборкаДанных.Объект, Неопределено, РезультатОбмена,, СтруктураПараметровВыгрузки);
			// До изменения
			//РезультатОбмена = ПолучитьРезультатОтправкиВУчетнуюСистему(ВыборкаДанных.Объект, Ложь);
			
			//МассивОбъектов = Новый Массив;
			//МассивОбъектов.Добавить(ВыборкаДанных.Объект);
			
			//ЗаписатьДанныеВОчередьОбмена(МассивОбъектов, Неопределено, РезультатОбмена,, СтруктураПараметровВыгрузки);
			// -- VOG Солодов В.В. 19.06.2019
			
			// ++ VOG Солодов В.В. 09.08.2019 task 526
			МассивОбъектовДополнительнойВыгрузки.Добавить(ВыборкаДанных.Объект);
			// -- VOG Солодов В.В. 09.08.2019
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРезультатОтправкиВУчетнуюСистему(ДанныеВыгрузки, 
												ЗапускатьВФоне = Истина,
												ПроверкаЗаполненности = Ложь,
												ПроверкаСогласования = Ложь,
												ПараметрыОтбора = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("ТекстПояснения, Успешно", "", Ложь);
	
	Если ТипЗнч(ДанныеВыгрузки) = Тип("Массив") Тогда
		МассивОбъектов = ДанныеВыгрузки;
	Иначе 
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ДанныеВыгрузки);
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 19.06.2019 task 389
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = вогИнтеграцияСУчетнойСистемой.ПараметрыОтбораПВД(МассивОбъектов.Получить(0));
	КонецЕсли;
	// До изменения
	//ПараметрыОтбора = вогИнтеграцияСУчетнойСистемой.ПараметрыОтбораПВД(МассивОбъектов.Получить(0));
	// -- VOG Солодов В.В. 19.06.2019
	
	Если ПараметрыОтбора = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определены параметры выгрузки объекта. '"));
		
		СтруктураВозврата.ТекстПояснения = НСтр("ru = 'Не удалось выполнить выгрузку объектов'");
		
		Возврат СтруктураВозврата;
		
	Иначе
		
		// ++ Солодов В.В. Закомментировал 07.03.2019
		////+ Проверка заполненности реквизитов
		//Отказ = Ложь;
		//
		//вогКонтрольЗаполненностиРеквизитовОбъектов.ПроверкаЗаполненностиРеквизитовОбъектаПриНачалеОбмена(
		//МассивОбъектов.Получить(0),
		//СтруктураВозврата,
		//ПроверкаЗаполненности,
		//Отказ);
		////- Проверка заполненности реквизитов
		//
		//Если Не Отказ Тогда
		//	//+ Проверка согласования объектов
		//	РегистрыСведений.вогСтатусыСогласованияОбъектов.ПроверитьСогласованиеОбъектов(
		//	МассивОбъектов.Получить(0), 
		//	СтруктураВозврата,
		//	ПроверкаСогласования,
		//	Отказ);
		//	//- Проверка согласования объектов
		//КонецЕсли;
		//
		//Если Отказ Тогда
		//	
		//	Возврат СтруктураВозврата;
		//	
		//КонецЕсли;
		//
		////+ Проверка условий накладываемых на возможность синхронизации объекта
		//Если НЕ ПроверитьОбъектПередСинхронизацией(ПараметрыОтбора, МассивОбъектов) Тогда
		//	
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПараметрыОтбора.СообщениеПользователю);
		//	
		//	СтруктураВозврата.ТекстПояснения = ПараметрыОтбора.ТекстПояснения;
		//	
		//	Возврат СтруктураВозврата;
		//	
		//КонецЕсли;
		////-Проверка условий перед синхронизацией
		// -- Солодов В.В. Закомментировал 07.03.2019
		
		ТекстОшибки = "";
		
		Успешно  = вогИнтеграцияСУчетнойСистемой.ОбработкаВыгрузкиВУС(ПараметрыОтбора, МассивОбъектов, ЗапускатьВФоне, ТекстОшибки);	
		
		Если ЗапускатьВФоне Тогда
			СтруктураВозврата.ТекстПояснения = НСтр("ru = 'Отправка объектов запущена в фоновом режиме. '");
		Иначе 
			СтруктураВозврата.ТекстПояснения = ТекстОшибки;
		КонецЕсли;
		
		СтруктураВозврата.Успешно = Успешно;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьПодключение() Экспорт
	
	ТекстОшибки = "";
	
	Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с учетной системой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
			
		КонецЕсли;	
		
		Возврат Ложь;		
		
	КонецЕсли;
	
	Возврат Прокси.ТестПодключения();
	
КонецФункции

Функция ПолучитьНомерДоговора(ДоговорСсылка) Экспорт
	
	ТекстОшибки = "";
	
	Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с учетной системой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
			
		КонецЕсли;	
		
		Возврат Неопределено;		
		
	КонецЕсли;
	
	Возврат Прокси.ПолучитьНомерДоговора(XMLСтрока(ДоговорСсылка));
	
КонецФункции

Функция ОбработкаВыгрузкиВУС(ПараметрыОтбора, ПараметрКоманды, ВыполнятьВФоне=Истина, ТекстОшибки = "") Экспорт
	
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.ЗагрузитьЗначения(ПараметрКоманды);
	
	ОписанияОбъектовВыгрузки = Новый Массив;
	ОписанияОбъектовВыгрузки.Добавить(
	Новый Структура("ПараметрыОтбора, СписокОбъектов", ПараметрыОтбора, СписокОбъектов));
	
	ПараметрыФормированияПакета = Новый Структура;
	ПараметрыФормированияПакета.Вставить("ИмяМакета"			   , "вогПравилаОбменаСУчетнойСистемой");
	ПараметрыФормированияПакета.Вставить("ОписанияОбъектовВыгрузки", ОписанияОбъектовВыгрузки);
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыФормированияПакета);
	
	Если ВыполнятьВФоне Тогда
		
		НаименованиеЗадания = НСтр("ru = 'Интеграция с учетной системой. Выгрузка объектов.'");
		ФоновыеЗадания.Выполнить("вогИнтеграцияСУчетнойСистемой.СформироватьОтправитьПакетОбмена", ПараметрыВыполнения,, НаименованиеЗадания);
		
		Возврат Истина;
		
	Иначе 
		
		Возврат вогИнтеграцияСУчетнойСистемой.СформироватьОтправитьПакетОбмена(ПараметрыФормированияПакета, ТекстОшибки);
		
	КонецЕсли;
	
КонецФункции // ОбработкаПараметраКомандыСервер()

Функция СформироватьОтправитьПакетОбмена(ПараметрыФормированияПакета, ТекстОшибки = "") Экспорт
	
	Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
	
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с учетной системой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
			
		КонецЕсли;	
		
		Возврат Ложь;		
		
	КонецЕсли;
	
	ДанныеПакетаОбмена = СформироватьПакетОбмена(ПараметрыФормированияПакета);
	
	Если ДанныеПакетаОбмена = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать пакет обмена'");
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с учетной системой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
		Возврат Ложь;		
		
	КонецЕсли;
	
	Результат = Прокси.ПринятьПакетОбмена(ДанныеПакетаОбмена);
	
	СтруктураРезультата = Результат.Получить();
	// ++ Солодов В.В.
	ОбъектОбмена = ПараметрыФормированияПакета.ОписанияОбъектовВыгрузки[0].СписокОбъектов[0].Значение;
	// -- Солодов В.В.
	ВыполнитьОбработкуРезультатаОбмена(СтруктураРезультата, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, ОбъектОбмена);
	
	//Классификаторы
	Если СтруктураРезультата <> Неопределено
		И СтруктураРезультата.ВыполненоУспешно 
		И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы") Тогда
		
		МассивОбъектовКлассификаторов = Новый Массив;
		Для каждого ОписаниеОбъекта Из ПараметрыФормированияПакета.ОписанияОбъектовВыгрузки Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектовКлассификаторов, ОписаниеОбъекта.СписокОбъектов.ВыгрузитьЗначения(), Истина);  
			
		КонецЦикла;
		
		CRM_КлассификаторыВызовСервера.ВыгрузитьМассивОбъектовКлассификаторов(МассивОбъектовКлассификаторов);
		
		Возврат Истина;
		
	Иначе 
		
		ТекстОшибки = "Ошибка получения результата обмена";
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // СформироватьОтправитьПакетОбмена()

Функция СформироватьПакетОбмена(ПараметрыФормированияПакета)
	
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	УникальныйИдентификатор_  = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПротоколаОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор_ + ".txt";
	
	// ++ VOG Солодов В.В. 10.08.2019 task 526
	НастройкаОбмена 				= Справочники.вогНастройкиОбменаУС.ОбменДанными;
	ТекстовыйДокументПравилОбмена 	= НастройкаОбмена.ХранилищеСхемыКомпоновкиДанных.Получить();
	ИмяФайла 						= Неопределено;
	
	Если ТипЗнч(ТекстовыйДокументПравилОбмена) = Тип("ТекстовыйДокумент") Тогда
		
		Если ТекстовыйДокументПравилОбмена.КоличествоСтрок() > 0 Тогда
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ТекстовыйДокументПравилОбмена.Записать(ИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = ПараметрыФормированияПакета.ИмяМакета;
	КонецЕсли;
	// -- VOG Солодов В.В. 10.08.2019
	
	Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Обработка.ИмяФайлаОбмена	  			   		= ИмяВременногоФайла;
	Обработка.РежимОбмена          			  	 	= "Выгрузка";
	// ++ VOG Солодов В.В. 10.08.2019 task 526
	Обработка.ИмяФайлаПравилОбмена 			   		= ИмяФайла;
	// До изменения
	//Обработка.ИмяФайлаПравилОбмена 			   		= ПараметрыФормированияПакета.ИмяМакета;
	// -- VOG Солодов В.В. 10.08.2019
	Обработка.ВыводВПротоколСообщенийОбОшибках 		= Истина;
	Обработка.ВыводВПротоколИнформационныхСообщений = Ложь;
	Обработка.ИмяФайлаПротоколаОбмена               = ИмяВременногоФайлаПротоколаОбмена;
	
	Обработка.НеВыводитьНикакихИнформационныхСообщенийПользователю	= Истина;
	Обработка.ВыводВОкноСообщенийИнформационныхСообщений 			= Ложь;
	
	Обработка.ЗагрузитьПравилаОбмена();	
	
	//Обработка параметров пакета
	Для каждого ОписаниеОбъекта Из ПараметрыФормированияПакета.ОписанияОбъектовВыгрузки Цикл
		// ++ VOG Солодов В.В. 19.06.2019 task 389
		ПараметрВыгрузки = "";
		
		Если ОписаниеОбъекта.ПараметрыОтбора.Свойство("ПараметрыВыгрузки")
			И ОписаниеОбъекта.ПараметрыОтбора.ПараметрыВыгрузки.Свойство("ПВД") Тогда
			
			Если Обработка.Параметры.Свойство("АлгоритмыВыгрузки") Тогда
				
				ТаблицаАлгоритмовВыгрузки = ЗначениеИзСтрокиВнутр(Обработка.Параметры.АлгоритмыВыгрузки);
				
				СтруктураПоиска = Новый Структура("ПВД", ОписаниеОбъекта.ПараметрыОтбора.Имя);
				СтрокиАлгоритмов = ТаблицаАлгоритмовВыгрузки.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого СтрокаАлгоритм Из СтрокиАлгоритмов Цикл
					
					ПараметрВыгрузки = СтрокаАлгоритм.ПараметрВыгрузки;
					
					Попытка
						Выполнить(СтрокаАлгоритм.Обработчик);
					Исключение
						
					КонецПопытки;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Имя", ОписаниеОбъекта.ПараметрыОтбора.Имя);
		СтрокиПВД 		= Обработка.ТаблицаПравилВыгрузки.Строки.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаПВД Из СтрокиПВД Цикл
			СтрокаПВД.Включить			= Истина;	
			СтрокаПВД.ИспользоватьОтбор = ОписаниеОбъекта.СписокОбъектов.Количество() > 0 И ПараметрВыгрузки = "";
			Если СтрокаПВД.ИспользоватьОтбор Тогда
				СтрокаПВД.НастройкиПостроителя = СформировтьНастрокиПостроителя(СтрокаПВД, ОписаниеОбъекта.СписокОбъектов);
				
			КонецЕсли;
			
		КонецЦикла;
		// До изменения
		//СтрокиПВД = Обработка.ТаблицаПравилВыгрузки.Строки.НайтиСтроки(ОписаниеОбъекта.ПараметрыОтбора);
		//Для каждого СтрокаПВД Из СтрокиПВД Цикл
		//	СтрокаПВД.Включить			= Истина;	
		//	СтрокаПВД.ИспользоватьОтбор = ОписаниеОбъекта.СписокОбъектов.Количество() > 0;
		//	Если СтрокаПВД.ИспользоватьОтбор Тогда
		//		СтрокаПВД.НастройкиПостроителя = СформировтьНастрокиПостроителя(СтрокаПВД, ОписаниеОбъекта.СписокОбъектов);
		//		
		//	КонецЕсли;
		//	
		//КонецЦикла;
		// -- VOG Солодов В.В. 19.06.2019
		
		// Солодов В.В.
		ОбъектОбмена = ОписаниеОбъекта.СписокОбъектов[0].Значение;
		
	КонецЦикла;
	
	ДатаНачалаВыгрузки = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	Обработка.ВыполнитьВыгрузку();
	ВыгрузкаВыполнена = НЕ Обработка.ФлагОшибки;
	УстановитьПривилегированныйРежим(Ложь);
	
	ДатаОкончанияВыгрузки = ТекущаяДатаСеанса();
	
	ПротоколОбмена = Новый ТекстовыйДокумент;
	ПротоколОбмена.Прочитать(ИмяВременногоФайлаПротоколаОбмена);
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполненоУспешно", ВыгрузкаВыполнена);
	
	ОписаниеПротоколаЗагрузки = Новый Структура;
	ОписаниеПротоколаЗагрузки.Вставить("ДатаНачала"    , ДатаНачалаВыгрузки);
	ОписаниеПротоколаЗагрузки.Вставить("ДатаОкончания" , ДатаОкончанияВыгрузки);
	ОписаниеПротоколаЗагрузки.Вставить("ПротоколОбмена", ПротоколОбмена);
	
	Результат.Вставить("ОписаниеПротокола", ОписаниеПротоколаЗагрузки);
	
	ВыполнитьОбработкуРезультатаОбмена(Результат, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, ОбъектОбмена);
	
	Если Не ВыгрузкаВыполнена Тогда
		// Удаляем временный файл
		УдалитьФайлы(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайлаПротоколаОбмена);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	// Удаляем временный файл
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайлаПротоколаОбмена);
	
	Возврат Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
КонецФункции // СформироватьПакетОбмена()

Функция СформировтьНастрокиПостроителя(СтрокаПВД, СписокОбъектов)
	
	Псевдоним = СтрЗаменить(СтрокаПВД.ИмяОбъектаДляЗапроса, ".", "_");
	
	Построитель = Новый ПостроительОтчета;	
	Построитель.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка КАК Ссылка ИЗ
	|	" + СтрокаПВД.ИмяОбъектаДляЗапроса + "
	|{ГДЕ Ссылка.* КАК " + Псевдоним + "}";
	
	ЭлементОтбора = Построитель.Отбор.Добавить(Псевдоним);
	
	ЭлементОтбора.ВидСравнения  = ВидСравнения.ВСписке;
	ЭлементОтбора.Значение      = СписокОбъектов;
	ЭлементОтбора.Использование = Истина;
	
	Возврат Построитель.ПолучитьНастройки();
	
КонецФункции // СформировтьНастрокиПостроителя()

Процедура ВыполнитьОбработкуРезультатаОбмена(Результат, ДействиеПриОбмене, ОбъектОбмена = Неопределено) Экспорт
	
	ОписаниеПротокола = Результат.ОписаниеПротокола; 
	Если Результат.ВыполненоУспешно Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с учетной системой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Обмен с учетной системой успешно выполнен.'"));
		
	Иначе	
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с учетной системой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		НСтр("ru = 'Обмен с учетной системой выполнен с ошибками. См. подробнсти в журнале обмена. '"));
		
	КонецЕсли;
	
	ЗаписатьДанныеПротоколаВИБ(
	ДействиеПриОбмене,
	ОписаниеПротокола.ПротоколОбмена,
	ОписаниеПротокола.ДатаНачала, 
	ОписаниеПротокола.ДатаОкончания,
	ОбъектОбмена);
	
КонецПроцедуры

Процедура ЗаписатьДанныеПротоколаВИБ(ДействиеПриОбмене, ПротоколОбмена, ДатаНачала, ДатаОкончания, ОбъектОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурнала = РегистрыСведений.вогЖурналОбменаСУчетнойСистемой.СоздатьМенеджерЗаписи();
	
	ЗаписьЖурнала.Период			= ТекущаяДатаСеанса();
	ЗаписьЖурнала.Объект 			= ОбъектОбмена;
	ЗаписьЖурнала.ДействиеПриОбмене = ДействиеПриОбмене;
	ЗаписьЖурнала.ДатаНачала        = ДатаНачала;
	ЗаписьЖурнала.ДатаОкончания     = ДатаОкончания;
	
	ЗаписьЖурнала.ХранилищеПротоколаОбмена = Новый ХранилищеЗначения(ПротоколОбмена, Новый СжатиеДанных(9));	
	ЗаписьЖурнала.Инициатор = Пользователи.АвторизованныйПользователь();
	
	ЗаписьЖурнала.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПараметрыОтбораПВД(Ссылка) Экспорт
	
	МетаданныеЗначения = Ссылка.Метаданные();
	Если МетаданныеЗначения = Неопределено Тогда
		Возврат Неопределено;	
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", МетаданныеЗначения.Имя);
	
	Возврат Отбор;
	
КонецФункции // ПараметрыОтбораПВД()

Процедура СформироватьВнешнийОтчет(ОтчетОбъект, ПараметрыОтчета, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	ТекстОшибки = "";
	
	Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с учетной системой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
			
		КонецЕсли;	
		
		Возврат;		
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МетаданныеОтчета = ОтчетОбъект.Метаданные();
	Для каждого Реквизит Из МетаданныеОтчета.Реквизиты Цикл
		Если ПараметрыОтчета.Свойство(Реквизит.Имя) Тогда
			Продолжить;
			
		КонецЕсли;
		
		ОписаниеПараметра = Новый Структура("Значение, ИмяПараметра, НеобходимаДесериализация");	
		
		НеобходимаДесериализация = ЗначениеЗаполнено(Реквизит.Комментарий);
		Если НеобходимаДесериализация Тогда
			Значение = XMLСтрока(ОтчетОбъект[Реквизит.Имя]);
			
		Иначе	
			Значение = ОтчетОбъект[Реквизит.Имя];
			
		КонецЕсли;
		
		ОписаниеПараметра.Вставить("Значение"				 , Значение);
		ОписаниеПараметра.Вставить("ИмяПараметра"			 , Реквизит.Имя);
		ОписаниеПараметра.Вставить("НеобходимаДесериализация", НеобходимаДесериализация);
		ОписаниеПараметра.Вставить("Менеджер"				 , Реквизит.Комментарий);
		
		МассивПараметров.Добавить(ОписаниеПараметра);			
		
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("МассивПараметров", МассивПараметров);
	ПараметрыОтчета.Вставить("ВариантОтчета","CRM");
	
	Результат = Прокси.ПолучитьРезультатОтчета(МетаданныеОтчета.Комментарий, вогОбщегоНазначения.СериализоватьОбъект(ПараметрыОтчета));
	Если Результат <> Неопределено Тогда
		ДокументРезультат.Вывести(вогОбщегоНазначения.ДесериализоватьОбъект(Результат));
		
	КонецЕсли;
	
КонецПроцедуры

//отчет не строит, получает данные по отчету в виде табличного документа
Функция СформироватьОтчетКредитныйКонтроль(ПараметрыОтчета) Экспорт
	Результат = Неопределено;
	ТекстОшибки = "";
	
	Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с учетной системой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
			
		КонецЕсли;	
		
		Возврат Результат;		
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Для каждого Реквизит Из ПараметрыОтчета.массивПараметров Цикл
				
		ОписаниеПараметра = Новый Структура("Значение, ИмяПараметра, НеобходимаДесериализация");	
		
		НеобходимаДесериализация = ЗначениеЗаполнено(Реквизит.Комментарий);
		Если НеобходимаДесериализация Тогда
			Значение = XMLСтрока(Реквизит.Значение);
			
		Иначе	
			Значение = Реквизит.Значение;
			
		КонецЕсли;
		
		ОписаниеПараметра.Вставить("Значение"				 , Значение);
		ОписаниеПараметра.Вставить("ИмяПараметра"			 , Реквизит.Имя);
		ОписаниеПараметра.Вставить("НеобходимаДесериализация", НеобходимаДесериализация);
		ОписаниеПараметра.Вставить("Менеджер"				 , Реквизит.Комментарий);
		
		МассивПараметров.Добавить(ОписаниеПараметра);			
		
	КонецЦикла;
	ПараметрыОтчета.Вставить("МассивПараметров", МассивПараметров);
	ПараметрыОтчета.Вставить("ВариантОтчета","CRM");
	
	Результат = Прокси.ПолучитьРезультатОтчета("КредитныйКонтроль", вогОбщегоНазначения.СериализоватьОбъект(ПараметрыОтчета));
	Если Результат <> Неопределено Тогда
		Результат = вогОбщегоНазначения.ДесериализоватьОбъект(Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции 

// ++ VOG Солодов В.В. 09.06.2021 DEV-621
Процедура ВыполнитьНастройкуОбменаПоРегламентномуЗаданию(НастройкаОбмена) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗапускЗаданияОбменаПоНастройке);
	
	Отказ 					= Ложь;
	СтруктураДанных 		= Новый Структура;
	ПараметрыФормирования 	= Новый Структура;
	
	Справочники.вогНастройкиОбменаУС.СформироватьИсходящиеДанные(НастройкаОбмена, СтруктураДанных, ПараметрыФормирования, Отказ);
	
	Если Не Отказ Тогда
		УниверсальныйОбменДаннымиСУчетнойСистемой(НастройкаОбмена, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 09.06.2021 DEV-621

// Процедура обмена данными с учетной системой.
//
// Параметры:
//	НастройкаОбмена 	- СправочникСсылка.вогНастройкиОбменаУС;
//	ПараметрыЗагрузки 	- Структура;
//	Адрес хранилища 	- Адрес временного хранилища;
//
Процедура УниверсальныйОбменДаннымиСУчетнойСистемой(НастройкаОбмена, ПараметрыЗагрузки, АдресХранилища = Неопределено) Экспорт
	
	ФлагОшибки 			= Ложь;
	ТекстОшибки 		= "";
	ИмяСобытия 			= "";
	КодОсновногоЯзыка 	= ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ИмяНастройки 		= НастройкаОбмена.Наименование;
	ШаблонСобытия 		= НСтр("ru = 'Интеграция с учетной системой. %1.%2'", КодОсновногоЯзыка);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ТекстПояснения", 	ТекстОшибки);
	РезультатВыполнения.Вставить("Успешно", 		Ложь);
	
	// Проверка функциональной опции
	ИспользуетсяУчетнаяСистема = ПолучитьФункциональнуюОпцию("вогИспользуетсяУчетнаяСистема"); 
	
	Если Не ИспользуетсяУчетнаяСистема Тогда
		
		ФлагОшибки = Истина;
		
		ТекстОшибки 	= НСтр("ru = 'Обмен с учетной системой отключен.'");
		ИмяСобытия 		= СтрШаблон(ШаблонСобытия, ИмяНастройки, "");
		
	КонецЕсли;
	
	Если Не ФлагОшибки Тогда
		
		// Попытка подключения к веб-сервису
		Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
		
		Если Прокси = Неопределено Тогда
			
			ФлагОшибки = Истина;
			ИмяСобытия = СтрШаблон(ШаблонСобытия, ИмяНастройки, "");
			
		КонецЕсли;
		
		Если Не ФлагОшибки Тогда
			
			// Получение данных из учетной системы
			ИсходящиеДанные = СериализаторXDTO.ЗаписатьXDTO(ПараметрыЗагрузки);
			Результат 		= Прокси.GetUniversalData(ИсходящиеДанные);
			
			Если Результат = Неопределено Тогда
				
				ФлагОшибки 	= Истина;
				ТекстОшибки = НСтр("ru = 'Не удалось получить пакет обмена.'", КодОсновногоЯзыка);
				ИмяСобытия 	= СтрШаблон(ШаблонСобытия, ИмяНастройки);
				
			КонецЕсли;
			
			Если Не ФлагОшибки Тогда
				
				// Обработка входящих данных
				ВходящиеДанные = Результат.Получить();
				
				Если ТипЗнч(ВходящиеДанные) = Тип("Соответствие") Тогда
					
					РезультатЗагрузки = ВходящиеДанные.Получить("РезультатЗагрузки");
					
					Если Не РезультатЗагрузки = Неопределено Тогда
						
						Если РезультатЗагрузки.Свойство("ВыполненоУспешно")
							И РезультатЗагрузки.ВыполненоУспешно Тогда
							
							// Выполнение обработчика входящих данных
							Если НастройкаОбмена <> Неопределено 
								И ЗначениеЗаполнено(НастройкаОбмена.ОбработчикВходящихДанных) Тогда
								
								Попытка
									
									// В обработчике необходимо заполнить структуру РезультатВыполнения
									Выполнить(НастройкаОбмена.ОбработчикВходящихДанных);
									
								Исключение
									
									ФлагОшибки 		= Истина;
									ТекстОшибки 	= ОписаниеОшибки();
									ТекстСобытия 	= " Обработка входящих данных.";
									ИмяСобытия 		= СтрШаблон(ШаблонСобытия, ИмяНастройки, ТекстСобытия);
									
								КонецПопытки;
								
							КонецЕсли;
							
						Иначе
							
							ФлагОшибки = Истина;
							
							Если РезультатЗагрузки.Свойство("ОписаниеПротокола") Тогда
								ТекстОшибки = РезультатЗагрузки.ОписаниеПротокола.ПротоколОбмена.ПолучитьТекст();
							Иначе
								ТекстОшибки = РезультатЗагрузки.ОписаниеОшибки;
							КонецЕсли;
							ИмяСобытия 		= СтрШаблон(ШаблонСобытия, ИмяНастройки, "");
							
						КонецЕсли;
						
					Иначе
						
						ФлагОшибки 	= Истина;
						ТекстОшибки = НСтр("ru = 'Неверный формат входящих данных.'", КодОсновногоЯзыка);
						ИмяСобытия 	= СтрШаблон(ШаблонСобытия, ИмяНастройки, "");
						
					КонецЕсли;
					
				Иначе
					
					ФлагОшибки 	= Истина;
					ТекстОшибки = НСтр("ru = 'Неверный формат входящих данных.'", КодОсновногоЯзыка);
					ИмяСобытия 	= СтрШаблон(ШаблонСобытия, ИмяНастройки, "");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФлагОшибки Тогда
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		РезультатВыполнения.ТекстПояснения = ТекстОшибки;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#Область Показатели  

Процедура ПолучитьДанныеПоказателейИзУС(ОбъектСсылка, ТаблицаПоказателей, МассивДанных) Экспорт
	
	ТекстОшибки = "";
	
	Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
	Если Прокси = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение данных показателей из УС'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
			
		КонецЕсли;	
		
		Возврат;		
		
	КонецЕсли;
	
	ПараметрыПоказателей = Новый Структура;
	ПараметрыПоказателей.Вставить("ИдентификаторОбъекта", XMLСтрока(ОбъектСсылка));
	ПараметрыПоказателей.Вставить("Менеджер"			 , "Справочник.Контрагенты");
	ПараметрыПоказателей.Вставить("ТаблицаПоказателей"  , ТаблицаПоказателей);
	
	Результат = Прокси.ПолучитьМассивПоказателей(вогОбщегоНазначения.СериализоватьОбъект(ПараметрыПоказателей));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДанных, вогОбщегоНазначения.ДесериализоватьОбъект(Результат));
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезWebServiceКлассификаторы

// + Тищенко В.В.

Процедура вогЗагрузкаКлассификаторовЧерезWebServices(ОбъектСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вогНастройкиОбменаWebServices.Ссылка КАК Ссылка,
	|	вогНастройкиОбменаWebServices.Принадлежность КАК ИмяТаблицы
	|ИЗ
	|	Справочник.вогНастройкиОбменаWebServices КАК вогНастройкиОбменаWebServices
	|ГДЕ
	|	вогНастройкиОбменаWebServices.Использовать
	|	И НЕ вогНастройкиОбменаWebServices.ПометкаУдаления");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			НастройкаКлассификатора 	= ВыборкаИзРезультатаЗапроса.Ссылка.НастройкиКлассификаторов;
			ЭтоДополнительныеРеквизиты	= ВыборкаИзРезультатаЗапроса.Ссылка.РежимСписка;
			ПолучитьДанныеИзWebService(НастройкаКлассификатора,ВыборкаИзРезультатаЗапроса.ИмяТаблицы,ЭтоДополнительныеРеквизиты, ОбъектСсылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеИзWebService(СписокКлассификаторов,ИмяТаблицы,ЭтоДополнительныеРеквизиты, ОбъектСсылка)
	
	МассивСсылок = СериализаторXDTO.ЗаписатьXDTO(ПолучитьСсылкиДляОбменаWebService(ИмяТаблицы, ОбъектСсылка));
	
	Если ЭтоДополнительныеРеквизиты Тогда
		Для каждого ТекущийКлассификатор Из СписокКлассификаторов Цикл
			Если ОбъектСсылка = Неопределено
				Или (ОбъектСсылка <> Неопределено И ТекущийКлассификатор.ОбновлятьВРеальномВремени) Тогда
				
				ОбработатьРезультатWebService(ТекущийКлассификатор,МассивСсылок,ИмяТаблицы,Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработатьРезультатWebService(СписокКлассификаторов[0],МассивСсылок,ИмяТаблицы ,Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПроксиWebService(НастройкиПодключенияПрокси)
	
	Попытка
		Определения = Новый WSОпределения(НастройкиПодключенияПрокси.Адрес, НастройкиПодключенияПрокси.Пользователь, НастройкиПодключенияПрокси.Пароль);
		Прокси = Новый WSПрокси(Определения, НастройкиПодключенияПрокси.ИмяПространствоИмен,НастройкиПодключенияПрокси.ИмяСервиса ,НастройкиПодключенияПрокси.ИмяТочкиПодключения);
		Прокси.Пользователь = НастройкиПодключенияПрокси.Пользователь;
		Прокси.Пароль = НастройкиПодключенияПрокси.Пароль;
		Возврат Прокси;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Описание = Инфо.Причина.Описание;
		Если Найти(Описание, "При создании описания сервиса произошла ошибка")
			ИЛИ Найти(Описание, "Ошибка HTTP") Тогда
			СообщениеОбОшибке = НСтр("ru='По указанному адресу сервис недоступен.';en='The service is not available.'");
		Иначе
			СообщениеОбОшибке = Инфо.Причина.Описание;
		КонецЕсли;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

Функция ПолучитьСсылкиДляОбменаWebService(ИмяТаблицы, ОбъектСсылка = Неопределено)
	
	МассивСсылок = Новый Массив;
	
	Если ОбъектСсылка = Неопределено Тогда
		
		Запрос = Новый запрос("ВЫБРАТЬ
		|	ТаблицаБД.Ссылка КАК Ссылка
		|ИЗ
		|	"+ИмяТаблицы+" КАК ТаблицаБД
		|ГДЕ
		|	НЕ ТаблицаБД.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для каждого Стр Из РезультатЗапроса Цикл
			МассивСсылок.Добавить(XMLСтрока(Стр.Ссылка));
		КонецЦикла;
		
	Иначе
		МассивСсылок.Добавить(XMLСтрока(ОбъектСсылка));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

Процедура ОбработатьРезультатWebService(ТекущийКлассификатор,МассивСсылок,ИмяТаблицы,ЭтоРеквизиты)
	
	Попытка
		Прокси 			= ПолучитьПроксиWebService(ТекущийКлассификатор.WebService.НастройкиWebService);
		ИмяОперации 	= СокрЛП(ТекущийКлассификатор.WebService.Наименование);
		WSОперация		= Неопределено;
		
		Для каждого ТекОперация Из Прокси.ТочкаПодключения.Интерфейс.Операции Цикл
			Если ТекОперация.Имя = ИмяОперации Тогда
				WSОперация = ТекОперация;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если WSОперация <> Неопределено Тогда
			Результат = Неопределено;
			ИмяМетода = "Результат = Прокси."+WSОперация.Имя+"("+"МассивСсылок"+")";
			Выполнить(ИмяМетода);
			Если Результат <> Неопределено Тогда
				ТаблицаРезультат 	= вогОбщегоНазначения.ДесериализоватьОбъект(Результат);
				ТаблицаЗаписи 		= ДесериализоватьОбъектWebService(ТаблицаРезультат,ИмяТаблицы,ЭтоРеквизиты
				,ТекущийКлассификатор.ЗначениеКлассификатора.ДополнительныйРеквизит,ТекущийКлассификатор.ЗначениеКлассификатора);
				ЗаписатьДанныеWebServices(ТаблицаЗаписи);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными Web-sevice'"),УровеньЖурналаРегистрации.Ошибка
		,Метаданные.РегламентныеЗадания.ЗагрузкаКлассификатораБанков,,ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ДесериализоватьОбъектWebService(ТаблицаРезультат,ИмяТаблицы,ЭтоРеквизиты,ДополнительныйРеквизит = Неопределено,ЗначениеКлассификатораВНастройке = Неопределено)
	
	МенджерОбъекта 	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
	ПустаяСсылка 	= МенджерОбъекта.ПустаяСсылка();
	ВидОбъекта		= ОбщегоНазначения.ВидОбъектаПоСсылке(ПустаяСсылка);
	Если ВидОбъекта = "Справочник" Тогда
		ТипОбъекта	= ВидОбъекта + "Ссылка" +"."+ СтрЗаменить(ИмяТаблицы,"Справочник.","");
	Иначе
		ТипОбъекта	= ВидОбъекта + "Ссылка" +"."+ СтрЗаменить(ИмяТаблицы,"Документ.","");
	КонецЕсли;
	
	МассивТипов 			= Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Число"));
	
	МассивТиповАналитика 	= Новый Массив;
	МассивТиповАналитика.Добавить(Тип("СправочникСсылка.Организации"));
	МассивТиповАналитика.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	МассивТиповАналитика.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
	
	ТаблицаЗаписи 	= Новый ТаблицаЗначений;
	ТаблицаЗаписи.Колонки.Добавить("Объект"					,Новый ОписаниеТипов(ТипОбъекта));
	ТаблицаЗаписи.Колонки.Добавить("Аналитика"				,Новый ОписаниеТипов(МассивТиповАналитика));
	ТаблицаЗаписи.Колонки.Добавить("ЗначениеКлассификатора"	,Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"));
	ТаблицаЗаписи.Колонки.Добавить("ЗначениеРеквизита"		,Новый ОписаниеТипов(МассивТипов));
	ТаблицаЗаписи.Колонки.Добавить("ДатаВключения"			,Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписи.Колонки.Добавить("Значение"				,Новый ОписаниеТипов(МассивТипов));
	
	Для каждого Стр Из ТаблицаРезультат Цикл
		ТекущийОбъект 				= вогОбщегоНазначения.ПолучитьСсылкуОбъекта(Стр.Объект,МенджерОбъекта);
		ТекущаяАналитика			= ?(ЗначениеЗаполнено(Стр.Аналитика),ОпределитьАналитику(Стр.Аналитика,МассивТиповАналитика),"");
		Если НЕ ЭтоРеквизиты Тогда
			Если ТипЗнч(Стр.Значение) 	= Тип("Строка") Тогда
				ЗначениеКлассификатора	= Справочники.CRM_ЗначенияКлассификаторов.НайтиПоНаименованию(Стр.Значение);
			Иначе
				ЗначениеКлассификатора 	= Стр.Значение;
			КонецЕсли;
			Если ТекущийОбъект.НайденОбъект И ЗначениеКлассификатора <> Неопределено  И ТекущаяАналитика <> Неопределено Тогда
				СтрокаДобавления 						= ТаблицаЗаписи.Добавить();
				СтрокаДобавления.Объект 				= ТекущийОбъект.СсылкаПоУИД;
				СтрокаДобавления.Значение 				= Стр.Значение;
				СтрокаДобавления.ЗначениеКлассификатора = ЗначениеКлассификатора;
				СтрокаДобавления.ДатаВключения			= ТекущаяДата();
				СтрокаДобавления.Аналитика				= ТекущаяАналитика;
			КонецЕсли;
		Иначе
			Если ТекущийОбъект.НайденОбъект И ЗначениеЗаполнено(ДополнительныйРеквизит) Тогда
				СтрокаДобавления 						= ТаблицаЗаписи.Добавить();
				СтрокаДобавления.Объект 				= ТекущийОбъект.СсылкаПоУИД;
				СтрокаДобавления.Значение 				= Стр.Значение;
				СтрокаДобавления.ЗначениеКлассификатора	= ЗначениеКлассификатораВНастройке;
				СтрокаДобавления.ЗначениеРеквизита 		= Стр.Значение;
				СтрокаДобавления.ДатаВключения			= ТекущаяДата();
				Если ТекущаяАналитика <> Неопределено Тогда
					СтрокаДобавления.Аналитика				= ТекущаяАналитика;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗаписи;
	
КонецФункции

Функция ОпределитьАналитику(Аналитика,МассивТиповАналитика)
	
	НайденнаяАналитика = Неопределено;
	УИД = Аналитика;
	
	Для каждого ТекущийТип Из МассивТиповАналитика Цикл
		ИмяМенеджераОбъекта = "СправочникМенеджер." + Метаданные.НайтиПоТипу(ТекущийТип).Имя;
		МенеджерСправочника = Новый (ИмяМенеджераОбъекта);
		ТекущаяАналитика 	= МенеджерСправочника.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
		Если ОбщегоНазначения.СсылкаСуществует(ТекущаяАналитика) Тогда
			// Изменение Если аналалитика организация заменить на подразделение
			Если ТипЗнч(ТекущаяАналитика) = Тип("СправочникСсылка.Организации") Тогда
				НайденнаяАналитика = ПолучитьПодразделениеПоОрганизации(ТекущаяАналитика);
				Прервать;
			Иначе
				НайденнаяАналитика = ТекущаяАналитика;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденнаяАналитика;
	
КонецФункции

Процедура ЗаписатьДанныеWebServices(ТаблицаЗаписи)
	
	Если ТаблицаЗаписи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Для каждого СтрокаКлассификатора Из ТаблицаЗаписи Цикл
		
		НачатьТранзакцию();
		
		// Сначала очистка. Из особенности структуры регистра сначала надо получить предыдущие данные и удалить
		
		ТаблицаУдаления =  ПолучениеДанныхДляУдаленияОбъектыЗначенияКлассификатора(СтрокаКлассификатора.Объект,СтрокаКлассификатора.ЗначениеКлассификатора.Владелец);
		
		Для каждого Стр Из ТаблицаУдаления Цикл
			
			НаборЗаписей 			= РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Объект.Установить(Стр.Объект);
			НаборЗаписей.Отбор.Аналитика.Установить(Стр.Аналитика);
			НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(Стр.ЗначениеКлассификатора);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
		НаборЗаписей 			= РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Объект.Установить(СтрокаКлассификатора.Объект);
		НаборЗаписей.Отбор.Аналитика.Установить(СтрокаКлассификатора.Аналитика);
		НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(СтрокаКлассификатора.ЗначениеКлассификатора);
		
		Запись 					= НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,СтрокаКлассификатора);
		
		Попытка
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными Web-sevice'"),УровеньЖурналаРегистрации.Ошибка
			,Метаданные.РегламентныеЗадания.ЗагрузкаКлассификатораБанков,,ОписаниеОшибки);
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ПолучитьПодразделениеПоОрганизации(Организация) Экспорт
	
	НайденноПодразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Запрос = Новый Запрос("Выбрать РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка Из Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|Где Организация = &Организация И ОбособленноеПодразделение");
	Запрос.УстановитьПараметр("Организация",Организация);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезульльтатаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаИзРезульльтатаЗапроса.Следующий() Тогда
			НайденноПодразделение = ВыборкаИзРезульльтатаЗапроса.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденноПодразделение;
	
КонецФункции

Функция ПолучениеДанныхДляУдаленияОбъектыЗначенияКлассификатора(Объект,Владелец)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект
	|	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Объект"	, Объект);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

// - Тищенко В.В.

// ++ VOG Солодов В.В. 21.05.2019 task 246

// Процедура создает регламентное задание для получения данных кредитных условий из учетной системы.
//
// Параметры - нет.
//
Процедура ПолучитьДанныеКредитныхУсловий() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Отказ 					= Ложь;
	НастройкаОбмена 		= Справочники.вогНастройкиОбменаУС.КредитныеУсловия;
	СтруктураДанных 		= Новый Структура;
	ПараметрыФормирования 	= Новый Структура;
	
	Справочники.вогНастройкиОбменаУС.СформироватьИсходящиеДанные(НастройкаОбмена, СтруктураДанных, ПараметрыФормирования, Отказ);
	
	Если Не Отказ Тогда
		УниверсальныйОбменДаннымиСУчетнойСистемой(НастройкаОбмена, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 06.07.2020 CRM-759
// Процедура создает регламентное задание для загрузки номенклатуры из учетной системы.
//
// Параметры - нет.
//
Процедура ВыполнитьЗагрузкуНоменклатурыИзУчетнойСистемы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Отказ 					= Ложь;
	НастройкаОбмена 		= Справочники.вогНастройкиОбменаУС.Номенклатура;
	СтруктураДанных 		= Новый Структура;
	
	Справочники.вогНастройкиОбменаУС.СформироватьИсходящиеДанные(НастройкаОбмена, СтруктураДанных, Неопределено, Отказ);
	
	Если Не Отказ Тогда
		УниверсальныйОбменДаннымиСУчетнойСистемой(НастройкаОбмена, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 06.07.2020 CRM-759

// ++ VOG Солодов В.В. 08.07.2020 CRM-764
Процедура ВыполнитьЗагрузкуКоллекцийДляСайтаИзУчетнойСистемы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Отказ 					= Ложь;
	НастройкаОбмена 		= Справочники.вогНастройкиОбменаУС.КоллекцииДляСайта;
	СтруктураДанных 		= Новый Структура;
	
	Справочники.вогНастройкиОбменаУС.СформироватьИсходящиеДанные(НастройкаОбмена, СтруктураДанных, Неопределено, Отказ);
	
	Если Не Отказ Тогда
		УниверсальныйОбменДаннымиСУчетнойСистемой(НастройкаОбмена, СтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 08.07.2020 CRM-764

// Устарело
// Параметры:
//	ПараметрыОбмена - Структура - Параметры обмена, обязательно должна содержать свойство Сервис для определения
//		параметров выгрузки.
//
Процедура Удалить_ПолучитьДанныеКредитныхУсловий() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ИспользуетсяУчетнаяСистема = ПолучитьФункциональнуюОпцию("вогИспользуетсяУчетнаяСистема"); 
	
	Если Не ИспользуетсяУчетнаяСистема Тогда
		Возврат;
	КонецЕсли;
	
	ВходящиеДанные 	= Неопределено;
	ТекстОшибки 	= "";
	ФлагОшибки 		= Ложь;
	
	Попытка
		
		Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
		
		Если Прокси = Неопределено Тогда
			ФлагОшибки = Истина;
		Иначе
			
			Результат = Прокси.GetCreditConditions(СформироватьИсходящиеДанные());
			
			Если Результат <> Неопределено Тогда
				ВходящиеДанные = вогОбщегоНазначения.ДесериализоватьОбъект(Результат);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ФлагОшибки 	= Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ФлагОшибки Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение данных кредитных условий из УС. Получение данных'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.вогПолучениеКредитныхУсловийИзУС,
			,
			ТекстОшибки);
	КонецЕсли;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Соответствие") Тогда
		
		Для Каждого ЭлементВходящихДанных Из ВходящиеДанные Цикл
			
			Если ЭлементВходящихДанных.Ключ = "ОграниченияПоСегменту" Тогда
				ВыполнитьОбработкуТаблицыОграничений(ЭлементВходящихДанных.Значение);
			Иначе
				ВыполнитьОбработкуТаблицыКлассификаторов(ЭлементВходящихДанных.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьИсходящиеДанные()
	
	ИсходящиеДанные = Новый Структура;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ИсходящиеДанные);
	
КонецФункции

Процедура ВыполнитьОбработкуТаблицыОграничений(ТаблицаДанные)
	
	Для Каждого СтрокаТЧ Из ТаблицаДанные Цикл
		
		ЗначениеКлассификатора = Справочники.CRM_ЗначенияКлассификаторов.НайтиПоНаименованию(
		СтрокаТЧ.СегментКлиента, 
		Истина);
		РеквизитКлассификатора = ПланыВидовХарактеристик.CRM_ДополнительныеРеквизитыКлассификаторов.НайтиПоНаименованию(
		СтрокаТЧ.Ограничение, 
		Истина);
		
		Если ЗначениеЗаполнено(ЗначениеКлассификатора) И ЗначениеЗаполнено(РеквизитКлассификатора) Тогда
			
			НаборЗаписей = РегистрыСведений.вогОграниченияПоСегменту.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СегментКлиента.Установить(ЗначениеКлассификатора);
			НаборЗаписей.Отбор.Ограничение.Установить(РеквизитКлассификатора);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.СегментКлиента 		= ЗначениеКлассификатора;
			НоваяЗапись.Ограничение 		= РеквизитКлассификатора;
			НоваяЗапись.ЗначениеОграничения = СтрокаТЧ.ЗначениеОграничения;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Получение данных кредитных условий из УС. Запись ограничений по сегменту'"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегламентныеЗадания.вогПолучениеКредитныхУсловийИзУС,
					,
					ОписаниеОшибки);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбработкуТаблицыКлассификаторов(ТаблицаДанные)
	
	МенеджерОбъекта 	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Партнеры");
	МенеджерАналитики 	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
	
	Для Каждого СтрокаДанные Из ТаблицаДанные Цикл
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект");
		СтруктураЗаписи.Вставить("Аналитика");
		СтруктураЗаписи.Вставить("Классификатор");
		СтруктураЗаписи.Вставить("ЗначениеКлассификатора");
		СтруктураЗаписи.Вставить("ЗначениеРеквизита");
		СтруктураЗаписи.Вставить("ДатаВключения", ТекущаяДата());
		СтруктураЗаписи.Вставить("ХранитьИсториюИзменения");
		СтруктураЗаписи.Вставить("ВыполнятьОчистку");
		
		Если ЗначениеЗаполнено(СтрокаДанные.ИмяКлассификатора) Тогда
			Классификатор = ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию(СтрокаДанные.ИмяКлассификатора, Истина);
		Иначе
			Классификатор = ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Показатели", Истина);
		КонецЕсли;
		
		ХранитьИсториюИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Классификатор, "ХранитьИсториюИзменения");
		ВидОтображения 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Классификатор, "ВидОтображения");
		ВыполнятьОчистку 		= ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение;
		
		ОбъектСсылка 			= МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДанные.Объект));
		
		// ++ VOG Солодов В.В. 17.07.2019 
		Если Не ОбщегоНазначения.СсылкаСуществует(ОбъектСсылка) Тогда
			Продолжить;
		КонецЕсли;
		// -- VOG Солодов В.В. 17.07.2019
		
		ЗначениеКлассификатора 	= Справочники.CRM_ЗначенияКлассификаторов.НайтиПоНаименованию(
			СтрокаДанные.ИмяЗначенияКлассификатора, 
			Истина,
			, 
			Классификатор);
			
		Если ЗначениеЗаполнено(СтрокаДанные.Аналитика) Тогда
			Аналитика 				= МенеджерАналитики.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДанные.Аналитика));
			// ++ VOG Солодов В.В. 17.07.2019 
			Если ОбщегоНазначения.СсылкаСуществует(Аналитика) Тогда
				Подразделение 		= ПолучитьПодразделениеПоОрганизации(Аналитика);
			КонецЕсли;
			// До изменения
			//Подразделение 			= ПолучитьПодразделениеПоОрганизации(Аналитика);
			// -- VOG Солодов В.В. 17.07.2019
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Классификатор.ИспользуемаяАналитика)
			И Не ЗначениеЗаполнено(Подразделение) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектСсылка)
			И ЗначениеЗаполнено(ЗначениеКлассификатора) Тогда
			
			СтруктураЗаписи.Объект 					= ОбъектСсылка;
			СтруктураЗаписи.Классификатор 			= Классификатор;
			Если ЗначениеЗаполнено(СтрокаДанные.Аналитика) Тогда
				СтруктураЗаписи.Аналитика 			= Подразделение;
			КонецЕсли;
			СтруктураЗаписи.ЗначениеКлассификатора 	= ЗначениеКлассификатора;
			Если ЗначениеЗаполнено(СтрокаДанные.Значение) Тогда
				СтруктураЗаписи.ЗначениеРеквизита 	= СтрокаДанные.Значение;
			КонецЕсли;
			СтруктураЗаписи.ХранитьИсториюИзменения = ХранитьИсториюИзменения;
			СтруктураЗаписи.ВыполнятьОчистку 		= ВыполнятьОчистку;
			
			ВыполнитьЗаписьЗначенийКлассификатора(СтруктураЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗначенийКлассификатора(СтруктураЗаписи)
	
	НачатьТранзакцию();
	
	// Сначала очистка. Из особенности структуры регистра сначала надо получить предыдущие данные и удалить	
	Если СтруктураЗаписи.ВыполнятьОчистку Тогда
		
		ТаблицаУдаления = ПолучениеДанныхДляУдаленияОбъектыЗначенияКлассификатора(
			СтруктураЗаписи.Объект, 
			СтруктураЗаписи.Классификатор);
		
		Для Каждого СтрУдаления Из ТаблицаУдаления Цикл
			
			НаборЗаписей = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Объект.Установить(СтрУдаления.Объект);
			НаборЗаписей.Отбор.Аналитика.Установить(СтрУдаления.Аналитика);
			НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(СтрУдаления.ЗначениеКлассификатора);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Запись новых данных	
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СтруктураЗаписи.Объект);
	НаборЗаписей.Отбор.ЗначениеКлассификатора.Установить(СтруктураЗаписи.ЗначениеКлассификатора);
	
	Если ЗначениеЗаполнено(СтруктураЗаписи.Аналитика) Тогда
		НаборЗаписей.Отбор.Аналитика.Установить(СтруктураЗаписи.Аналитика);
	КонецЕсли;
		
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	Попытка
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение данных кредитных условий из УС. Запись классификаторов'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.вогПолучениеКредитныхУсловийИзУС,
			,
			ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры
// -- VOG Солодов В.В. 21.05.2019 task 246

// ++ VOG Солодов В.В. 10.07.2019 task 447
Процедура ПроверитьДублиКонтрагентовПоРеквизитам(Объект, СоответствиеРеквизитов, Отказ) Экспорт
	
	ИспользуетсяУчетнаяСистема = ПолучитьФункциональнуюОпцию("вогИспользуетсяУчетнаяСистема"); 
	
	Если Не ИспользуетсяУчетнаяСистема Тогда
		Возврат;
	КонецЕсли;
	
	ВходящиеДанные 		= Неопределено;
	ТекстОшибки 		= "";
	ФлагОшибки 			= Ложь;
	МассивРеквизитов 	= Новый Массив;
	
	Попытка
		
		Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
		
		Если Прокси = Неопределено Тогда
			ФлагОшибки = Истина;
		Иначе
			
			ИсходящаяСтруктура = Новый Структура;
			
			Для Каждого ЭлементРеквизит Из СоответствиеРеквизитов Цикл
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ЭлементРеквизит.Ключ)
					И ЗначениеЗаполнено(Объект[ЭлементРеквизит.Ключ]) Тогда
					
					ИсходящаяСтруктура.Вставить(ЭлементРеквизит.Значение, Объект[ЭлементРеквизит.Ключ]);
					МассивРеквизитов.Добавить(ЭлементРеквизит.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИсходящаяСтруктура.Количество() > 0 Тогда 
				
				ИсходящиеДанные = СериализаторXDTO.ЗаписатьXDTO(ИсходящаяСтруктура);
				Результат 		= Прокси.GetDoubleProps(ИсходящиеДанные);
				
				Если Результат <> Неопределено Тогда
					ВходящиеДанные = вогОбщегоНазначения.ДесериализоватьОбъект(Результат);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ФлагОшибки 	= Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ФлагОшибки Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение дублей контрагентов из УС.'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
	КонецЕсли;
		
	Если ТипЗнч(ВходящиеДанные) = Тип("Структура")
		И ВходящиеДанные.Свойство("Контрагент") Тогда
		
		СтрокаРеквизитов = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивРеквизитов, ",");
		
		ШаблонСообщения = НСтр("ru = 'В учетной системе найден контрагент %1 с ролью %2 с совпадающим %3.
		|Запись невозможна.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, 
			ВходящиеДанные.Контрагент, 
			ВходящиеДанные.Роли,
			СтрокаРеквизитов);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 10.07.2019

//++ VOG Иванов С.А. 27.11.2019 ID заявки: 000000804 
Функция ПолучитьПоследнийПодтвержденныйОстаток(массивОбъектов, Отказ) Экспорт
	ТаблицаРезультат = Неопределено;
	ИспользуетсяУчетнаяСистема = ПолучитьФункциональнуюОпцию("вогИспользуетсяУчетнаяСистема"); 
	
	Если Не ИспользуетсяУчетнаяСистема Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВходящиеДанные 		= Неопределено;
	ТекстОшибки 		= "";
	ФлагОшибки 			= Ложь;
	
	Попытка
		
		Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
		
		Если Прокси = Неопределено Тогда
			ФлагОшибки = Истина;
		Иначе
			Для каждого стр Из массивОбъектов Цикл
				ИсходящаяСтруктура = Новый Массив;
				ИсходящаяСтруктура.Добавить(стр.УникальныйИдентификатор());
			КонецЦикла; 
			
			
			Если ИсходящаяСтруктура.Количество() > 0 Тогда 
				
				ИсходящиеДанные = СериализаторXDTO.ЗаписатьXDTO(ИсходящаяСтруктура);
				Результат 		= Прокси.GetLastConfirmedBalance(ИсходящиеДанные);
				
				Если Результат <> Неопределено Тогда
					ВходящиеДанные = вогОбщегоНазначения.ДесериализоватьОбъект(Результат);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ФлагОшибки 	= Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ФлагОшибки Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение Последнего подтвержденного остатка.'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
	КонецЕсли;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультат = Новый ТаблицаЗначений;
		МассивТипов 			= Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		МассивТипов.Добавить(Тип("Число"));
		
		МассивТиповАналитика 	= Новый Массив;
		МассивТиповАналитика.Добавить(Тип("СправочникСсылка.Организации"));
		МассивТиповАналитика.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		МассивТиповАналитика.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
		
		ТаблицаРезультат 	= Новый ТаблицаЗначений;
		ТаблицаРезультат.Колонки.Добавить("Объект"					,Новый ОписаниеТипов("СправочникСсылка.вогЮридическиеЛица"));
		ТаблицаРезультат.Колонки.Добавить("Аналитика"				,Новый ОписаниеТипов(МассивТиповАналитика));
		ТаблицаРезультат.Колонки.Добавить("Значение"				,Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ДатаОстатка"			    ,Новый ОписаниеТипов("Дата"));
		Для каждого строкаОтвет Из ВходящиеДанные Цикл           
			НоваяСтрока = ТаблицаРезультат.Добавить();
			НоваяСтрока.ДатаОстатка = строкаОтвет.Период;
			НоваяСтрока.Аналитика = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(строкаОтвет.Аналитика));
			НоваяСтрока.Объект = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(строкаОтвет.Объект));
			НоваяСтрока.Значение = строкаОтвет.Значение;
		КонецЦикла; 
	КонецЕсли;
	Возврат ТаблицаРезультат;
	
КонецФункции 

Функция ПолучитьТекущуюДебиторскуюЗадолженность(массивОбъектов, Отказ) Экспорт
	ТаблицаРезультат = Неопределено;
	ИспользуетсяУчетнаяСистема = ПолучитьФункциональнуюОпцию("вогИспользуетсяУчетнаяСистема"); 
	
	Если Не ИспользуетсяУчетнаяСистема Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВходящиеДанные 		= Неопределено;
	ТекстОшибки 		= "";
	ФлагОшибки 			= Ложь;
	
	Попытка
		
		Прокси = вогИнтеграцияСУчетнойСистемойПовтИсп.ПолучитьПрокси(ТекстОшибки);
		
		Если Прокси = Неопределено Тогда
			ФлагОшибки = Истина;
		Иначе
			Для каждого стр Из массивОбъектов Цикл
				ИсходящаяСтруктура = Новый Массив;
				ИсходящаяСтруктура.Добавить(стр.УникальныйИдентификатор());
			КонецЦикла; 
			
			
			Если ИсходящаяСтруктура.Количество() > 0 Тогда 
				
				ИсходящиеДанные = СериализаторXDTO.ЗаписатьXDTO(ИсходящаяСтруктура);
				Результат 		= Прокси.GetDebt(ИсходящиеДанные);
				
				Если Результат <> Неопределено Тогда
					ВходящиеДанные = вогОбщегоНазначения.ДесериализоватьОбъект(Результат);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ФлагОшибки 	= Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ФлагОшибки Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение Текущей дебиторской задолженности.'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
	КонецЕсли;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультат = Новый ТаблицаЗначений;
		МассивТипов 			= Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		МассивТипов.Добавить(Тип("Число"));
		
		МассивТиповАналитика 	= Новый Массив;
		МассивТиповАналитика.Добавить(Тип("СправочникСсылка.Организации"));
		МассивТиповАналитика.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		МассивТиповАналитика.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
		
		ТаблицаРезультат 	= Новый ТаблицаЗначений;
		ТаблицаРезультат.Колонки.Добавить("Объект"					,Новый ОписаниеТипов("СправочникСсылка.вогЮридическиеЛица"));
		ТаблицаРезультат.Колонки.Добавить("Аналитика"				,Новый ОписаниеТипов(МассивТиповАналитика));
		ТаблицаРезультат.Колонки.Добавить("Значение"				,Новый ОписаниеТипов("Число"));
		Для каждого строкаОтвет Из ВходящиеДанные Цикл           
			НоваяСтрока = ТаблицаРезультат.Добавить();
			НоваяСтрока.Аналитика = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(строкаОтвет.Аналитика));
			НоваяСтрока.Объект = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(строкаОтвет.Объект));
			НоваяСтрока.Значение = строкаОтвет.Значение;
		КонецЦикла; 
	КонецЕсли;
	Возврат ТаблицаРезультат;
	
КонецФункции 


//-- VOG Иванов С.А. 27.11.2019 ID заявки: 000000804 
#КонецОбласти 

#Область ФормированиеОтчетовЧерезWebService

// + Тищенко В.В.

Функция СформироватьОтчетЧерезWebService(Объект,WebService) Экспорт
	
	Отчет 			= Неопределено;
	ПараметрОтчета 	= СериализаторXDTO.ЗаписатьXDTO(Объект.УникальныйИдентификатор());
	
	Попытка
		Прокси 			= ПолучитьПроксиWebService(WebService.НастройкиWebService);
		ИмяОперации 	= СокрЛП(WebService.Наименование);
		WSОперация		= Неопределено;
		
		Для каждого ТекОперация Из Прокси.ТочкаПодключения.Интерфейс.Операции Цикл
			Если ТекОперация.Имя = ИмяОперации Тогда
				WSОперация = ТекОперация;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если WSОперация <> Неопределено Тогда
			Результат = Неопределено;
			ИмяМетода = "Результат = Прокси."+WSОперация.Имя+"("+"ПараметрОтчета"+")";
			Выполнить(ИмяМетода);
			Если Результат <> Неопределено Тогда
				Отчет 		= вогОбщегоНазначения.ДесериализоватьОбъект(Результат);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными Web-sevice'"),УровеньЖурналаРегистрации.Ошибка
		,Метаданные.РегламентныеЗадания.ЗагрузкаКлассификатораБанков,,ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Отчет;
	
КонецФункции

// - Тищенко В.В.

#КонецОбласти

#Область Продажи

// + Тищенко В.В.
// ++ VOG Солодов В.В. 08.08.2019 task 515

// Процедура регламентного задания вогЗагрузкаПродажиУПП
//
Процедура ВыполнитьЗагрузкуПродажИзУчетнойСистемы() Экспорт
	
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	Отказ 					= Ложь;
	НастройкаОбмена 		= Справочники.вогНастройкиОбменаУС.Продажи;
	
	ПараметрыФормирования = Новый Структура;
	Период = Новый СтандартныйПериод;
	Если День(ТекущаяДата())<=10 тогда
		Период.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),-1));
	Иначе
		Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Период.ДатаОкончания = КонецДня(ТекущаяДата());
	
	ПериодЗагрузкиДанных = Новый СтандартныйПериод;
	ПериодЗагрузкиДанных.ДатаНачала = период.ДатаНачала;
	ПериодЗагрузкиДанных.ДатаОкончания = КонецДня(Период.ДатаНачала);
	
	Пока ПериодЗагрузкиДанных.ДатаНачала<=ТекущаяДата() цикл
		
		
		НачатьТранзакцию();
		
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("Период", 					ПериодЗагрузкиДанных);
		ПараметрыФормирования.Вставить("СхемаКомпоновкиДанных", 	Справочники.вогНастройкиОбменаУС.ПолучитьМакет("ЗагрузкаПродажПредопределенный"));
		ПараметрыФормирования.Вставить("НастройкиКомпоновкиДанных", НастройкаОбмена.ХранилищеНастроекКомпоновкиДанных.Получить());
		
		СтруктураДанных 		= Новый Структура;
		Справочники.вогНастройкиОбменаУС.СформироватьИсходящиеДанные(НастройкаОбмена, СтруктураДанных, ПараметрыФормирования, Отказ);
		// ++ VOG Солодов В.В. 15.06.2021 DEV-641
		// До изменения
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	вогПродажи.Регистратор КАК Регистратор
		//|ИЗ
		//|	РегистрНакопления.вогПродажи КАК вогПродажи
		//|ГДЕ
		//|	вогПродажи.Период между &ДатаНач и &ДатаКон";
		//Запрос.УстановитьПараметр("ДатаНач",ПериодЗагрузкиДанных.ДатаНачала);
		//Запрос.УстановитьПараметр("ДатаКон",ПериодЗагрузкиДанных.ДатаОкончания);
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() цикл
		//	НаборЗ = РегистрыНакопления.вогПродажи.СоздатьНаборЗаписей();
		//	НаборЗ.Отбор.Регистратор.Установить(Выборка.Регистратор);
		//	НаборЗ.Прочитать();
		//	НаборЗ.Очистить();
		//	НаборЗ.Записать();
		//КонецЦикла;
		// -- VOG Солодов В.В. 15.06.2021 DEV-641
		
		Если Не Отказ Тогда
			УниверсальныйОбменДаннымиСУчетнойСистемой(НастройкаОбмена, СтруктураДанных);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ПериодЗагрузкиДанных.ДатаНачала = ПериодЗагрузкиДанных.ДатаНачала+24*60*60;	
		ПериодЗагрузкиДанных.ДатаОкончания = ПериодЗагрузкиДанных.ДатаОкончания+24*60*60;
		
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 08.08.2019
// - Тищенко В.В.

#КонецОбласти

#Область СлужебныеДляВыгрузки

Функция ПроверитьОбъектПередСинхронизацией(ПараметрыОтбора, МассивОбъектов)
	
	Результат = Неопределено;
	
	Если ПараметрыОтбора.Имя = "КонтактныеЛицаПартнеров" Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПараметрКоманды", МассивОбъектов);
		Запрос.Текст =
		// Устанавливаем флаг ошибки, если хотябы кто-то один не прошел проверку
		"ВЫБРАТЬ ПЕРВЫЕ 1 		
		|	1 КАК ФлагОшибки 
		|ИЗ
		// Выбираем всех контактных лиц, переданных в параметре, а их роль берем из р\с
		// Нас интересуют только роли ГенеральныйДиректор и ПодписантДоговора
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних(, КонтактноеЛицо В (&ПараметрКоманды)) КАК вогСвязиКонтактныхЛиц
		|		ПО (вогСвязиКонтактныхЛиц.КонтактноеЛицо = КонтактныеЛицаПартнеров.Ссылка)
		|			И (вогСвязиКонтактныхЛиц.CRM_РольКонтактногоЛица В 
		|				(ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛицПартнеров.ГенеральныйДиректор)
		|				, ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛицПартнеров.ПодписантДоговора)))
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка В(&ПараметрКоманды)
		|
		// Проверку, что есть роль ГенеральныйДиректор или ПодписантДоговора
		// делаем отдельно для каждого контактного лица
		|СГРУППИРОВАТЬ ПО
		|	КонтактныеЛицаПартнеров.Ссылка
		|
		// У одного контактного лица может быть несколько ролей (несколько записей в регистре сведений)
		// поэтому, проверим получили ли мы хотябы одну роль с отбором ГенеральныйДиректор или ПодписантДоговора
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА вогСвязиКонтактныхЛиц.CRM_РольКонтактногоЛица ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Результат = РезультатЗапроса.Пустой();
		
		Если НЕ Результат Тогда
			ПараметрыОтбора.Вставить("СообщениеПользователю", 
			НСтр("ru = 'Синхронизировать можно только контактные лица с ролью ""Генеральный директор"" или ""Подписант договора"".'"));	
			ПараметрыОтбора.Вставить("ТекстПояснения", 
			НСтр("ru = 'Ошибка проверки условий начала синхронизации.'"));	
		КонецЕсли; 
		
	Иначе
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат = Истина;
	
КонецФункции

Процедура ЗаписатьДанныеВОчередьОбмена(ДанныеОбмена, СтруктураВозврата, РезультатОбмена, Ошибка = Неопределено, СтруктураПараметровВыгрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтруктураВозврата <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтруктураВозврата.Состояние) Тогда
			Состояние = СтруктураВозврата.Состояние;
		Иначе
			Состояние = Перечисления.вогСостоянияОбмена.Зарегистрирован;
		КонецЕсли;
		
	ИначеЕсли РезультатОбмена.Успешно Тогда
		Состояние = Перечисления.вогСостоянияОбмена.Успешно;
	Иначе
		Состояние = Перечисления.вогСостоянияОбмена.Ошибка;
	КонецЕсли;
	
	//Для Индекс = 0 По ДанныеОбмена.Количество() - 1 Цикл
		
		МенеджерЗаписи = РегистрыСведений.вогОбъектыДляОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект 		= ДанныеОбмена; // ДанныеОбмена[Индекс];
		МенеджерЗаписи.Состояние 	= Состояние;
		
		// ++ VOG Солодов В.В. 19.06.2019 task 389
		ПВД = "";
		
		Если СтруктураПараметровВыгрузки <> Неопределено Тогда
			Если СтруктураПараметровВыгрузки.Свойство("ПВД") Тогда
				ПВД = СтруктураПараметровВыгрузки.ПВД;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи.ПВД 	= ПВД;
		// -- VOG Солодов В.В. 19.06.2019
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			
			Если СтруктураВозврата <> Неопределено Тогда
				
				Если СтруктураВозврата.ВыводСообщений Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось выполнить запись объектов в очередь.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Ошибка);
					
				Иначе
					
					Ошибка 			= Истина;
					
					ШаблонОшибки 	= НСтр("ru='Не удалось выполнить запись. Объект: %1. Состояние: %2.'");
					ТекстОшибки 	= СтрШаблон(ШаблонОшибки, ДанныеОбмена, Состояние);
					//ТекстОшибки 	= СтрШаблон(ШаблонОшибки, ДанныеОбмена[Индекс], Состояние);
					ИмяСобытия 		= НСтр("ru = 'Интеграция с учетной системой'");
					
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
					
				КонецЕсли;
				
				СтруктураВозврата.ТекстПояснения = НСтр("ru = 'Не удалось выполнить запись объектов в очередь'");
				
			Иначе
				
				ШаблонОшибки 	= НСтр("ru='Не удалось выполнить запись. Объект: %1. Состояние: %2.'");
				ТекстОшибки 	= СтрШаблон(ШаблонОшибки, ДанныеОбмена, Состояние);
				//ТекстОшибки 	= СтрШаблон(ШаблонОшибки, ДанныеОбмена[Индекс], Состояние);
				ИмяСобытия 		= НСтр("ru = 'Интеграция с учетной системой'");
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
				
			КонецЕсли;
			
		КонецПопытки;
		
	//КонецЦикла;
	
	// ++ VOG Солодов В.В. 05.08.2019 task 488
	Если Состояние = Перечисления.вогСостоянияОбмена.Успешно
		И ПВД = "МенеджерыКонтрагентов" Тогда
		
		НаборЗаписей = РегистрыСведений.вогМенеджерыДляОбмена.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Владелец.Установить(ДанныеОбмена);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Выбран() Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 05.08.2019
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура вогЗагрузкаПродажДень() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	Отказ 					= Ложь;
	НастройкаОбмена 		= Справочники.вогНастройкиОбменаУС.Продажи;
	
	ПараметрыФормирования = Новый Структура;
	Период = Новый СтандартныйПериод;
	
	Период.ДатаНачала = НачалоДня(ТекущаяДата() - 24*60*60);
	Период.ДатаОкончания = КонецДня(ТекущаяДата());
	
	ПериодЗагрузкиДанных = Новый СтандартныйПериод;
	ПериодЗагрузкиДанных.ДатаНачала = период.ДатаНачала;
	ПериодЗагрузкиДанных.ДатаОкончания = КонецДня(Период.ДатаНачала);
	
	Пока ПериодЗагрузкиДанных.ДатаНачала<=ТекущаяДата() цикл
		
		
		НачатьТранзакцию();
		
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("Период", 					ПериодЗагрузкиДанных);
		ПараметрыФормирования.Вставить("СхемаКомпоновкиДанных", 	Справочники.вогНастройкиОбменаУС.ПолучитьМакет("ЗагрузкаПродажПредопределенный"));
		ПараметрыФормирования.Вставить("НастройкиКомпоновкиДанных", НастройкаОбмена.ХранилищеНастроекКомпоновкиДанных.Получить());
		
		СтруктураДанных 		= Новый Структура;
		Справочники.вогНастройкиОбменаУС.СформироватьИсходящиеДанные(НастройкаОбмена, СтруктураДанных, ПараметрыФормирования, Отказ);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вогПродажи.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.вогПродажи КАК вогПродажи
		|ГДЕ
		|	вогПродажи.Период между &ДатаНач и &ДатаКон";
		Запрос.УстановитьПараметр("ДатаНач",ПериодЗагрузкиДанных.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКон",ПериодЗагрузкиДанных.ДатаОкончания);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			НаборЗ = РегистрыНакопления.вогПродажи.СоздатьНаборЗаписей();
			НаборЗ.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗ.Прочитать();
			НаборЗ.Очистить();
			НаборЗ.Записать();
		КонецЦикла;
		
		Если Не Отказ Тогда
			УниверсальныйОбменДаннымиСУчетнойСистемой(НастройкаОбмена, СтруктураДанных);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ПериодЗагрузкиДанных.ДатаНачала = ПериодЗагрузкиДанных.ДатаНачала+24*60*60;	
		ПериодЗагрузкиДанных.ДатаОкончания = ПериодЗагрузкиДанных.ДатаОкончания+24*60*60;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

