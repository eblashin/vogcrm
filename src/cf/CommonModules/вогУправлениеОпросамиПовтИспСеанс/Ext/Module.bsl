// Формирует имя раздела на основании уникального идентификатора строки дерева анкеты.
//
// Параметры:
//  Ключ  - УникальныйИдентификатор - ключ, на основе которого будет формироваться имя вопроса.
//
// Возвращаемое значение:
//  Строка - получившаяся в результате обработки строка.
//
Функция ПолучитьИмяРеквизитаПоСсылке(Ссылка, Префикс) Экспорт
	
	УИД = Ссылка.УникальныйИдентификатор();
	
	Возврат Префикс + СтрЗаменить(УИД,"-","_");

КонецФункции

// Возвращает код картинки в зависимости от типа вопроса и принадлежности к разделу.
//
// Параметры:
//  ЭтоРаздел  - Булево - признак раздела.
//  ТипВопроса - Перечисление.ТипыВопросовШаблонаАнкеты.
//
// Возвращаемое значение:
//   Число   - код картинки для отображения в дереве.
//
Функция ПолучитьКодКартинкиШаблонаАнкеты(ТипВопроса) Экспорт
	
	Если ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Вопрос") Тогда
		Возврат 2;
	ИначеЕсли ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.ЭлементарныйВопрос") Тогда
		Возврат 3;
	ИначеЕсли ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Классификатор") Тогда
		Возврат 4;
	ИначеЕсли ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПользовательИмеетПравоСохранятьЗначенияКлассификаторов() Экспорт
	
	//Формирование вспомагательных данных
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов);
			
КонецФункции

Функция ПользовательИмеетПраваЧитатьКлассификатор() Экспорт
	
	// + Тищенко В.В.
	//Формирование вспомагательных данных
	// Оригинал до измененеия 
	// Возврат Пользователи.РолиДоступны("CRM_ЧтениеКлассификаторов, CRM_УправлениеКлассификаторами");
	   Возврат Пользователи.РолиДоступны("ЧтениеКлассификаторов, CRM_УправлениеКлассификаторами");
	// - Тищенко В.В.
			
КонецФункции

#Область РаботаСУсловиямиВопросов

Функция ПолучитьКомпоновщикПоЭлементуАнкеты(ЭлементАнкеты) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("вогСхемаАнализаЗависимостиВопросов");
	
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Источник);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
	Если ЭлементАнкеты.УстановленаЗависимость Тогда
		
		НастройкиСправочника = ЭлементАнкеты.НастройкиОтбораЗависимости.Получить();
		
		Если НЕ НастройкиСправочника = Неопределено Тогда
			
			CRM_ОбщегоНазначенияКлиентСервер.СкопироватьОтборКомпоновкиДанных(КомпоновщикНастроек.Настройки.Отбор.Элементы, НастройкиСправочника.Отбор.Элементы);
			CRM_ОбщегоНазначенияКлиентСервер.СкопироватьПараметрыКомпоновки(КомпоновщикНастроек.Настройки.ПараметрыДанных, НастройкиСправочника.ПараметрыДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	СтруктураИтог = Новый Структура("МакетКомпоновки, ЗначенияПараметров",МакетКомпоновки ,Новый Структура);
	
	Для Каждого стр из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл 
		СтруктураИтог.ЗначенияПараметров.Вставить(СокрЛП(стр.Параметр), стр.Значение);
	КонецЦикла;
	
	Возврат СтруктураИтог;
	
КонецФункции

#КонецОбласти
