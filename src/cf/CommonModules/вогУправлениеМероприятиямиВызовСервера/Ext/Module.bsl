// Заполняет протокол мероприятия на основании программы.
// Если протокол уже заполнен, то он будет очищен.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ЗаполнитьПротокол(Мероприятие) Экспорт
	
	вогУправлениеМероприятиями.ЗаполнитьПротокол(Мероприятие);
	
КонецПроцедуры



//Выполняет поиск бизнес-процессов Поручение, по связанным объектам пункты протокола
//
//Параметры: ПунктыПротокола - массив значений СправочникСсылка.вогПротоколыМероприятий
//
//Возвращаемое значение:Массив значений  БизнесПроцессСсылка.CRM_БизнесПроцесс
//если не найдено то массив будет пустой
//
&НаСервере
Функция НайтиПорученияПоПротоколам(ПунктыПротокола) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПунктыПротокола.Количество() = 0 тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	CRM_БизнесПроцесс.Ссылка КАК Процесс
	               |ИЗ
	               |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	               |ГДЕ
	               |	Выразить(CRM_БизнесПроцесс.Предмет как Справочник.вогПротоколыМероприятий) В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("Поручение",Справочники.CRM_КартыМаршрутов.Поручение);
	Запрос.УстановитьПараметр("МассивОбъектов",ПунктыПротокола);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Процесс");
	
КонецФункции

//Создает бизнес - процесс поручение по пункту протокола
//
//Параметры: 
//ПунктПротокола - СправочникСсылка.вогПунктыПротокола
//ПараметрыНастройкиБизнесПроцессов - структура:
// Настройка - СправочникСсылка.вогНастройкиБизнесПроцессов
// ДатаИсполнения - Дата (дата и время)
// ДатаКонтроля - Дата (дата и время)
// Контролер - СправочникСсылка.Пользователи
// КонтролироватьВыполнение - Булево
// Наименование - Строка
// Исполнитель - СправочникСсылка.Пользователи
//
//Возвращает структуру
// ТекстОшибки - Строка, если заполнен была ошибка при создании
// Поручение - БизнесПроцессСсылка.CRM_БизнесПроцесс
//
&НаСервере
Функция СоздатьПоручениеПоПунктуПротокола(ПунктПротокола,ПараметрыНастройкиБизнесПроцессов) экспорт
	
	Результат = Новый Структура("ТекстОшибки, Поручение", "", БизнесПроцессы.CRM_БизнесПроцесс.ПустаяСсылка());	
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Дата", ТекущаяДата());
	ПараметрыФормирования.Вставить("ДатаИсполнения", ПараметрыНастройкиБизнесПроцессов.ДатаИсполнения);
	ПараметрыФормирования.Вставить("ДатаКонтроля", ПараметрыНастройкиБизнесПроцессов.ДатаКонтроля);
	ПараметрыФормирования.Вставить("Контролер", ПараметрыНастройкиБизнесПроцессов.Контролер);
	ПараметрыФормирования.Вставить("КонтролироватьВыполнение", ПараметрыНастройкиБизнесПроцессов.КонтролироватьВыполнение);
	
	ПараметрыФормирования.Вставить("Настройка", ПараметрыНастройкиБизнесПроцессов.Настройка);
	//#TODO организацию возможно можно заполнить по пользователю
	ПараметрыФормирования.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыФормирования.Вставить("Тема", ПараметрыНастройкиБизнесПроцессов.Наименование);
	ПараметрыФормирования.Вставить("Предмет", ПунктПротокола);
	ПараметрыФормирования.Вставить("Описание", ПараметрыНастройкиБизнесПроцессов.Описание);
	ПараметрыФормирования.Вставить("Исполнитель", ПараметрыНастройкиБизнесПроцессов.Исполнитель);
	
	НачатьТранзакцию();
	
	Попытка
		
		ПоручениеСсылка = СформироватьПоручение(ПараметрыФормирования);	
		Результат.Поручение = ПоручениеСсылка;
		
	Исключение
		
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли; 			
		
	КонецПопытки;
	МенеджерКлиентовПроцесса = РегистрыСведений.вогОбъектыДляПроцесса.СоздатьМенеджерЗаписи();
	МенеджерКлиентовПроцесса.Процесс = ПоручениеСсылка;
	МенеджерКлиентовПроцесса.Объект = ПунктПротокола;
	МенеджерКлиентовПроцесса.Записать();
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	Возврат Результат;
	
	
	
КонецФункции

//Служебная функция для создания бизнес-процесса поручение
&НаСервере
Функция СформироватьПоручение(Параметры)

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	//ТекСекунды = Параметры.Дата - НачалоДня(Параметры.Дата);
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Заполнить(Справочники.CRM_КартыМаршрутов.Поручение);
	
	НовыйБизнесПроцесс.Дата						= Параметры.Дата;
	НовыйБизнесПроцесс.ДатаСтарта				= Параметры.Дата;
	НовыйБизнесПроцесс.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовыйБизнесПроцесс.Автор					= ТекущийПользователь;
	НовыйБизнесПроцесс.Ответственный			= ТекущийПользователь;
	НовыйБизнесПроцесс.Организация				= Параметры.Организация;
	НовыйБизнесПроцесс.вогНастройка				= Параметры.Настройка;
	НовыйБизнесПроцесс.Предмет					= Параметры.Предмет;
	
	Если Параметры.Свойство("ТорговаяТочка") Тогда
		НовыйБизнесПроцесс.Партнер = Параметры.ТорговаяТочка.Партнер;
		НовыйБизнесПроцесс.вогТорговаяТочка = Параметры.ТорговаяТочка;
	КонецЕсли;
	
	НовыйБизнесПроцесс.Наименование = Параметры.Тема;
	НовыйБизнесПроцесс.Описание     = Параметры.Описание;
	
	НовыйБизнесПроцесс.Записать();
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(НовыйБизнесПроцесс.Ссылка);
	НаборЭтапов.Прочитать();
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(НовыйБизнесПроцесс.Ссылка);
	НаборИсполнителей.Прочитать();
	
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
			СтрокаНабора.Исполнитель = Параметры.Исполнитель;
			НаборЭтапов[0].ДатаВыполнения = Параметры.ДатаИсполнения ;
			НаборЭтапов[0].ВариантВыполнения = 1;
			НаборЭтапов[0].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(НаборЭтапов[0].ТочкаМаршрута, НаборЭтапов[0].ВариантВыполнения, НовыйБизнесПроцесс.НомерВерсииКартыМаршрута);
		ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
			НаборЭтапов[1].ДатаВыполнения = Параметры.ДатаКонтроля ;
			НаборЭтапов[1].Используется	= Параметры.КонтролироватьВыполнение;
			СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Параметры.Контролер), Параметры.Контролер, ТекущийПользователь);
		КонецЕсли;
	КонецЦикла;
	
	НаборЭтапов.Записать();
	НаборИсполнителей.Записать();
	НовыйБизнесПроцесс.Старт();
	
	Возврат НовыйБизнесПроцесс.Ссылка; 

КонецФункции // СформироватьПоручение()

