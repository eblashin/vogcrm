////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛНОТЕКСТОВОГО ПОИСКА

// Процедура проверяет и добавляет обязательные элементы списка выбора поля поиска.
//
// Параметры:
//	СписокВыбора	- СписокЗначений	- Список выбора поля поиска.
//
Процедура СкорректироватьСоставСпискаВыбораПоляПоиска(СписокВыбора) Экспорт
	МассивУдалить = Новый Массив();
	МассивУдалить.Добавить("[Поиск по полному названию]");
	МассивУдалить.Добавить("[ПоискПоПолномуНазванию]");
	МассивУдалить.Добавить("[Поиск]");
	МассивУдалить.Добавить("[Поиск по подстроке]");
	МассивУдалить.Добавить("[ПоискПоПодстроке]");
	
	Для Каждого ЗначениеУдалить Из МассивУдалить Цикл
		Пока СписокВыбора.НайтиПоЗначению(ЗначениеУдалить) <> Неопределено Цикл
			СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению(ЗначениеУдалить));
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Функция находит номенкдлатуру по заданным условиям.
//
// Параметры:
//	Форма	- УправляемаяФорма	- Форма, на которой выполняется поиск.
//
// Возвращаемое значение:
//	Строка	- Текст ошибки
//
Функция НайтиНоменклатуруПолнотекстовыйПоиск(Форма) Экспорт
	ТаблицаОснований = Форма.РеквизитФормыВЗначение("CRM_Основания");
	// Получим результаты поиска
	Попытка
		СтрокаДляПоиска = ?(Форма.CRM_ПоискПоПодстроке, "" + Форма.CRM_СтрокаПоиска + "*", Форма.CRM_СтрокаПоиска);
	Исключение
		СтрокаДляПоиска = Форма.CRM_СтрокаПоиска;
	КонецПопытки;
	ТекстОшибки = Справочники.Номенклатура.НайтиНоменклатуру(СтрокаДляПоиска, ТаблицаОснований);
	Если ТекстОшибки = Неопределено Тогда
		// Удалим элемент из истории поиска если он там был.
		НомерНайденногоЭлементаСписка = Форма.CRM_СтрокаПоискаСписокВыбора.НайтиПоЗначению(Форма.CRM_СтрокаПоиска);
		Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
			Форма.CRM_СтрокаПоискаСписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
			НомерНайденногоЭлементаСписка = Форма.CRM_СтрокаПоискаСписокВыбора.НайтиПоЗначению(Форма.CRM_СтрокаПоиска);
		КонецЦикла;	
		// Поставим элемент на первое место.
		Форма.CRM_СтрокаПоискаСписокВыбора.Вставить(0, Форма.CRM_СтрокаПоиска);
		Пока Форма.CRM_СтрокаПоискаСписокВыбора.Количество() > 100 Цикл
			Форма.CRM_СтрокаПоискаСписокВыбора.Удалить(Форма.CRM_СтрокаПоискаСписокВыбора.Количество() - 1);
		КонецЦикла;	
		//ХранилищеОбщихНастроек.Сохранить("ИсторияПоискаНоменклатуры", , Форма.СтрокаПоискаСписокВыбора.ВыгрузитьЗначения());
		// Возвращаем таблицу оснований.
		Форма.ЗначениеВРеквизитФормы(ТаблицаОснований, "CRM_Основания");
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		// Устанавливаем отбор по списку найденных партнеров.
		#Если НЕ ВнешнееСоединение Тогда
			CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Форма.Список, "Ссылка",
			ТаблицаОснований.ВыгрузитьКолонку("Номенклатура"), Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		#КонецЕсли
		Форма.Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		
		СкорректироватьСоставСпискаВыбораПоляПоиска(Форма.CRM_СтрокаПоискаСписокВыбора);
		
		Возврат Неопределено;
	КонецЕсли;
	Форма.Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	
	СкорректироватьСоставСпискаВыбораПоляПоиска(Форма.CRM_СтрокаПоискаСписокВыбора);
	
	Возврат ТекстОшибки;
КонецФункции // НайтиПартнеровПолнотекстовыйПоиск()

