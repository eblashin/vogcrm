
#Область ПрограммныйИнтерфейс

Процедура ПриСозданииНаСервере(Форма, Отказ) Экспорт
	
	//Заполнение исходных данных
	ПараметрыФормы = Форма.Параметры;
	Если ПараметрыФормы.Свойство("скНастройкиРабочегоСтола") Тогда
		Если ТипЗнч(ПараметрыФормы.скНастройкиРабочегоСтола) = Тип("Массив") Тогда
			НастройкиРабочегоСтола = МассивСтруктурВТаблицуЗначений(ПараметрыФормы.скНастройкиРабочегоСтола);
		Иначе	
			НастройкиРабочегоСтола = ПараметрыФормы.скНастройкиРабочегоСтола.Выгрузить(); 	
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	НастройкиРабочегоСтола.Сортировать("ПорядокНастроек Возр, Порядок Возр");
	
	Форма.АвтоЗаголовок			   = Ложь;
	Форма.ОтображатьЗаголовок      = Ложь;
	Форма.ОтображатьКнопкуЗакрытия = Ложь;
	
	СтруктураИнтерфейсаРабочегоСтола  = скРабочийСтолПовтИсп.СтруктураИнтерфейсаРабочегоСтола();
	
	ИмяОписания = "скНастройкиРабочегоСтола";
	СформироватьНастройкиРабочегоСтолаФормы(Форма, ИмяОписания, НастройкиРабочегоСтола);
	
	//Создание реквизитов
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы("скТумблерРабочегоСтола", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36))));	
		
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы("скЛоготипРабочегоСтола", Новый ОписаниеТипов("Строка")));	
		
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы("скПолеHTMLНапоминаний", Новый ОписаниеТипов("Строка")));	
		
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы("скПолеHTMLЗаметок", Новый ОписаниеТипов("Строка")));	
		
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы("скПолеHTMLИсторииРаботы", Новый ОписаниеТипов("Строка")));	
		
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	//Создание групп и элементов
	СформироватьГруппыФормы(Форма);
	СформироватьЭлементыФормы(Форма, СтруктураИнтерфейсаРабочегоСтола);
				
КонецПроцедуры

Процедура СформироватьГруппыФормы(Форма)
	
	//Вспомогательные группы
	ОбщаяОбласть = СоздатьНайтиОбычнуюГруппу(Форма, "скОбщаяОбласть", 
		Форма);
		
	ОбластьДействий = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьДействий", 
		ОбщаяОбласть, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная,, Истина, Ложь);
		
	ОбластьКомандДействий = СоздатьНайтиОбычнуюГруппу(Форма, "ОбластьКомандДействий", 
		ОбластьДействий, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная,, Истина, Ложь);
	ОбластьКомандДействий.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента .Право;
	
	РабочаяОбласть = СоздатьНайтиОбычнуюГруппу(Форма, "скРабочаяОбласть", 
		ОбщаяОбласть, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);	
		
	ОбластьФормы = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьФормы", 
		РабочаяОбласть, Форма.Группировка);
		
	ОбластьПанель = СоздатьНайтиОбычнуюГруппу(Форма, "скПанель", 
		РабочаяОбласть);
		
	//Напоминания
	ОбластьНапоминания = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьНапоминания", 
		ОбластьПанель,
		ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная
	);
	ОбластьНапоминания.Ширина 	 = 35;
	ОбластьНапоминания.Видимость = Ложь;	
	
	ОбластьНапоминанияУправление = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьНапоминанияУправление", 
		ОбластьНапоминания);
		
	ОбластьНапоминанияТело = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьНапоминанияТело", 
		ОбластьНапоминания);
		
	ОбластьПанельНапоминания = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьПанельНапоминания", 
		ОбластьНапоминанияТело, 
		ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	
	//Заметки
	ОбластьЗаметки = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьЗаметки", 
		ОбластьПанель,
		ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная
	);
	
	ОбластьЗаметки.Ширина 	 = 35;
	ОбластьЗаметки.Видимость = Ложь;	
	
	ОбластьЗаметкиУправление = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьЗаметкиУправление", 
		ОбластьЗаметки);
		
	ОбластьЗаметкиТело = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьЗаметкиТело", 
		ОбластьЗаметки);
		
	ОбластьПанельЗаметки = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьПанельЗаметки", 
		ОбластьЗаметкиТело, 
		ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
		
	//История работы
	ОбластьИсторияРаботы = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьИсторияРаботы", 
		ОбластьПанель,
		ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная
	);
	
	ОбластьИсторияРаботы.Ширина 	 = 35;
	ОбластьИсторияРаботы.Видимость = Ложь;	
	
	ОбластьИсторияРаботыУправление = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьИсторияРаботыУправление", 
		ОбластьИсторияРаботы);
		
	ОбластьИсторияРаботыТело = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьИсторияРаботыТело", 
		ОбластьИсторияРаботы);
		
	ОбластьПанельИсторияРаботы = СоздатьНайтиОбычнуюГруппу(Форма, "скОбластьПанельИсторияРаботы", 
		ОбластьИсторияРаботыТело, 
		ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
		
	ПереместитьЭлементыВГруппу(Форма.Элементы, ОбластьФормы);	
		
КонецПроцедуры

Процедура СформироватьЭлементыФормы(Форма, СтруктураИнтерфейсаРабочегоСтола)
	
	//Логотип рабочего стола
	ИмяОписания = "скЛоготипРабочегоСтола";
	
	Элемент 						 = Форма.Элементы.Вставить(ИмяОписания, Тип("ПолеФормы"), Форма.Элементы.скОбластьДействий, Форма.Элементы.ОбластьКомандДействий);
	Элемент.Вид				 		 = ВидПоляФормы.ПолеКартинки;
	Элемент.ПутьКДанным 	 		 = ИмяОписания;
	Элемент.ПоложениеЗаголовка 		 = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.РастягиватьПоВертикали   = Ложь;   
	Элемент.Рамка 					 = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	Элемент.РазмерКартинки	         = РазмерКартинки.Пропорционально;
	Элемент.Ширина	  			     = 6;
	Элемент.Высота					 = 1;
	
	Элемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
	Если СтруктураИнтерфейсаРабочегоСтола.ДанныеЛоготипа <> Неопределено Тогда
		АдресХранилищаИзображения = ПоместитьВоВременноеХранилище(СтруктураИнтерфейсаРабочегоСтола.ДанныеЛоготипа.ДвоичныеДанные, Форма.УникальныйИдентификатор);
	Иначе
		АдресХранилищаИзображения = ПоместитьВоВременноеХранилище(СтруктураИнтерфейсаРабочегоСтола.ДвоичныеДанныеЛоготипаПоУмолчанию, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	Форма[ИмяОписания] = АдресХранилищаИзображения;
	
	//Тумблер рабочего стола
	ИмяОписания = "скТумблерРабочегоСтола";
	
	Элемент			    	 	    = Форма.Элементы.Вставить(ИмяОписания, Тип("ПолеФормы"), Форма.Элементы.скОбластьДействий, Форма.Элементы.ОбластьКомандДействий);
	Элемент.Вид             	    = ВидПоляФормы.ПолеПереключателя;
	Элемент.ВидПереключателя 		= ВидПереключателя.Тумблер;
	Элемент.ПутьКДанным 	  		= ИмяОписания;
	Элемент.ПоложениеЗаголовка      = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.Шрифт  		      	    = Новый Шрифт( , 10, Истина);
	Элемент.ЦветФона          		= СтруктураИнтерфейсаРабочегоСтола.ФонТумблеров;
	Элемент.ЦветТекста         		= СтруктураИнтерфейсаРабочегоСтола.ЦветШрифтаТумблеров;
	Элемент.ОдинаковаяШиринаКолонок = Истина;
	Элемент.КоличествоКолонок 		= Форма.скНастройкиРабочегоСтола.Количество();
	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_скТумблерРабочегоСтолаПриИзменении");
	
	Для каждого ЭлементРабочегоСтола Из Форма.скНастройкиРабочегоСтола Цикл
		Элемент.СписокВыбора.Добавить(ЭлементРабочегоСтола.Идентификатор, ЭлементРабочегоСтола.Наименование);
		
	КонецЦикла;	
		
	//Индикатор напоминаний	
//START Кайдашов 09/09/19 596
	//ИмяОписания = "скИндикаторНапоминаний";
	//
	//Элемент          	   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.ОбластьКомандДействий);
	//Элемент.Вид      	   = ВидДекорацииФормы.Картинка;
	//Элемент.Картинка	   = БиблиотекаКартинок.скИндикаторНапоминания;
	//Элемент.РазмерКартинки = РазмерКартинки.Пропорционально;	
	//Элемент.Ширина		   = 3;
	//Элемент.Высота		   = 1;	
	//Элемент.Подсказка	   = НСтр("ru = 'Получены новые напоминания...'");
	//Элемент.Гиперссылка    = Истина;
	//
	//Элемент.ВертикальноеПоложениеВГруппе   = ВертикальноеПоложениеЭлемента.Центр;
	//Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаГипперссылкиДействийНажатие");
//END Кайдашов
	// { VOG RMV 2019-01-25 изменение №
	////Панель управления кейсами
	//ИмяОписания = "скОткрытьПанельУправленияКейсами";
	//
	//Элемент          	   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.ОбластьКомандДействий);
	//Элемент.Вид      	   = ВидДекорацииФормы.Картинка;
	//Элемент.Картинка	   = БиблиотекаКартинок.CRM_КейсМоиДела;
	//Элемент.РазмерКартинки = РазмерКартинки.Пропорционально;	
	//Элемент.Ширина		   = 3;
	//Элемент.Высота		   = 1;	
	//Элемент.Подсказка	   = НСтр("ru = 'Открыть панель бизнес-задач...'");
	//Элемент.Гиперссылка    = Истина;
	//
	//Элемент.ВертикальноеПоложениеВГруппе   = ВертикальноеПоложениеЭлемента.Центр;
	//Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаГипперссылкиДействийНажатие");
	// } VOG RMV 2019-01-25 изменение №
	
	//Заметки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаметки") Тогда
		ИмяОписания = "скОткрытьЗаметки";
		
		Элемент          	   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.ОбластьКомандДействий);
		Элемент.Вид      	   = ВидДекорацииФормы.Картинка;
		Элемент.Картинка	   = БиблиотекаКартинок.скОткрытьЗаметки;
		Элемент.РазмерКартинки = РазмерКартинки.Пропорционально;	
		Элемент.Ширина		   = 2;
		Элемент.Высота		   = 1;	
		Элемент.Подсказка	   = НСтр("ru = 'Открыть заметки...'");
		Элемент.Гиперссылка    = Истина;
		
		Элемент.ВертикальноеПоложениеВГруппе   = ВертикальноеПоложениеЭлемента.Центр;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаГипперссылкиДействийНажатие");
	
	КонецЕсли;	
	
	//Поручения
	ИмяОписания = "скСоздатьПоручение";
	
	Элемент          	   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.ОбластьКомандДействий);
	Элемент.Вид      	   = ВидДекорацииФормы.Картинка;
	Элемент.Картинка	   = БиблиотекаКартинок.CRM_НазначитьЗадание;
	Элемент.РазмерКартинки = РазмерКартинки.Пропорционально;	
	Элемент.Ширина		   = 2;
	Элемент.Высота		   = 1;	
	Элемент.Подсказка	   = НСтр("ru = 'Выдать поручение...'");
	Элемент.Гиперссылка    = Истина;
	
	Элемент.ВертикальноеПоложениеВГруппе   = ВертикальноеПоложениеЭлемента.Центр;
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаГипперссылкиДействийНажатие");
	
	//Павелко, Таск 000000793, 31.10.2019+++
	//Поручения по шаблону
	ИмяОписания = "скСоздатьПоручениеПоШаблону";
	
	Элемент          	   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.ОбластьКомандДействий);
	Элемент.Вид      	   = ВидДекорацииФормы.Картинка;
	Элемент.Картинка	   = БиблиотекаКартинок.вогСоздатьПоручениеПоШаблону32;
	Элемент.РазмерКартинки = РазмерКартинки.Пропорционально;	
	Элемент.Ширина		   = 2;
	Элемент.Высота		   = 1;	
	Элемент.Подсказка	   = НСтр("ru = 'Выдать поручение по шаблону...'");
	Элемент.Гиперссылка    = Истина;
	
	Элемент.ВертикальноеПоложениеВГруппе   = ВертикальноеПоложениеЭлемента.Центр;
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаГипперссылкиДействийНажатие");
	//Павелко, Таск 000000793, 31.10.2019---
	
	// { VOG RMV 2019-01-18 изменение №2552	
	// Убрать с рабочего стола кнопку История
	////История работы
	//Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
	//	ИмяОписания = "скОткрытьИсторияРаботы";
	//	
	//	Элемент          	   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.ОбластьКомандДействий);
	//	Элемент.Вид      	   = ВидДекорацииФормы.Картинка;
	//	Элемент.Картинка	   = БиблиотекаКартинок.скИсторияРаботы;
	//	Элемент.РазмерКартинки = РазмерКартинки.Пропорционально;	
	//	Элемент.Ширина		   = 2;
	//	Элемент.Высота		   = 1;	
	//	Элемент.Подсказка	   = НСтр("ru = 'История работы...'");
	//	Элемент.Гиперссылка    = Истина;
	//	
	//	Элемент.ВертикальноеПоложениеВГруппе   = ВертикальноеПоложениеЭлемента.Центр;
	//	Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаГипперссылкиДействийНажатие");
	//
	//КонецЕсли;
	// } VOG RMV 2019-01-18 изменение №2552
	
	//Поле управление напоминаний
	ИмяОписания = "скНапоминанияСкрыть";
	
	Элемент          	   		   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.скОбластьНапоминанияУправление);
	Элемент.Вид      	   		   = ВидДекорацииФормы.Картинка;
	Элемент.Картинка	  		   = БиблиотекаКартинок.скСвернутьПанель;
	Элемент.РазмерКартинки 		   = РазмерКартинки.Пропорционально;	
	Элемент.Ширина		   		   = 1;
	Элемент.Высота		   		   = 2;	
	Элемент.Гиперссылка    		   = Истина;
	Элемент.РастягиватьПоВертикали = Истина;	
	
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_НапоминанияСкрытьНажатие");
	
//START Кайдашов 09/09/19 596
	//Поле напоминианий HTML
	//ИмяОписания = "скПолеHTMLНапоминаний";
	//
	//Элемент 				  		 = Форма.Элементы.Добавить(ИмяОписания, Тип("ПолеФормы"), Форма.Элементы.скОбластьНапоминанияТело);
	//Элемент.Вид 			  		 = ВидПоляФормы.ПолеHTMLДокумента;
	//Элемент.ПутьКДанным 	   		 = ИмяОписания;
	//Элемент.ПоложениеЗаголовка 		 = ПоложениеЗаголовкаЭлементаФормы.Нет;	
	//Элемент.РастягиватьПоГоризонтали = Ложь;
	//Элемент.Ширина					 = 35;
	//Элемент.Высота					 = 7;
	//
	//Элемент.УстановитьДействие("ПриНажатии", "Подключаемый_ПолеHTMLНапоминанийПриНажатии");
	//
	////Команды напоминаний
	//ИмяОписания = "скНапоминанияПрекратитьВсе";
	//Команда = СоздатьНайтиКоманду(Форма, 
	//	ИмяОписания, 
	//	"Подключаемый_КомандаНапоминанийПрекратитьВсе", 
	//	НСтр("ru = 'Завершить все'")
	//);
	//
	//Элемент = СоздатьНайтиКнопку(Форма, 
	//	ИмяОписания, 
	//	ИмяОписания, 
	//	Форма.Элементы.скОбластьПанельНапоминания
	//); 
	//
	//ИмяОписания = "скНапоминанияПеренестиВсе";
	//Команда = СоздатьНайтиКоманду(Форма, 
	//	ИмяОписания, 
	//	"Подключаемый_КомандаНапоминанийПеренестиВсе", 
	//	НСтр("ru = 'Отложить все'")
	//);
	//
	//Элемент = СоздатьНайтиКнопку(Форма, 
	//	ИмяОписания, 
	//	ИмяОписания, 
	//	Форма.Элементы.скОбластьПанельНапоминания
	//); 
//END Кайдашов 596
	//Поле управление заметками
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаметки") Тогда
		ИмяОписания = "скЗаметкиСкрыть";
		
		Элемент          	   		   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.скОбластьЗаметкиУправление);
		Элемент.Вид      	   		   = ВидДекорацииФормы.Картинка;
		Элемент.Картинка	  		   = БиблиотекаКартинок.скСвернутьПанель;
		Элемент.РазмерКартинки 		   = РазмерКартинки.Пропорционально;	
		Элемент.Ширина		   		   = 1;
		Элемент.Высота		   		   = 2;	
		Элемент.Гиперссылка    		   = Истина;
		Элемент.РастягиватьПоВертикали = Истина;	
		
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_ЗаметкиСкрытьНажатие");
		
	КонецЕсли;
	
	//Поле заметок HTML
	ИмяОписания = "скПолеHTMLЗаметок";
	
	Элемент 				  		 = Форма.Элементы.Добавить(ИмяОписания, Тип("ПолеФормы"), Форма.Элементы.скОбластьЗаметкиТело);
	Элемент.Вид 			  		 = ВидПоляФормы.ПолеHTMLДокумента;
	Элемент.ПутьКДанным 	   		 = ИмяОписания;
	Элемент.ПоложениеЗаголовка 		 = ПоложениеЗаголовкаЭлементаФормы.Нет;	
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.Ширина					 = 35;
	Элемент.Высота					 = 7;
	
	Элемент.УстановитьДействие("ПриНажатии", "Подключаемый_ПолеHTMLЗаметокПриНажатии");
	
	//Команды заметок	
	ИмяОписания = "скЗаметкиДобавить";
	Команда = СоздатьНайтиКоманду(Форма, 
		ИмяОписания, 
		"Подключаемый_КомандаЗаметкиДобавить", 
		НСтр("ru = 'Добавить'"),
		ОтображениеКнопки.Картинка,
		БиблиотекаКартинок.СоздатьЭлементСписка
	);
	
	Элемент = СоздатьНайтиКнопку(Форма, 
		ИмяОписания, 
		ИмяОписания, 
		Форма.Элементы.скОбластьПанельЗаметки
	); 
	Элемент.Ширина = 5;
	
	ИмяОписания = "скЗаметкиОткрытьВсе";
	Команда = СоздатьНайтиКоманду(Форма, 
		ИмяОписания, 
		"Подключаемый_КомандаЗаметкиВсе", 
		НСтр("ru = 'Все заметки'")
	);
	
	Элемент = СоздатьНайтиКнопку(Форма, 
		ИмяОписания, 
		ИмяОписания, 
		Форма.Элементы.скОбластьПанельЗаметки
	); 
	
	//Поле управление историей работы
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ИмяОписания = "скИсторияРаботыСкрыть";
		
		Элемент          	   		   = Форма.Элементы.Добавить(ИмяОписания, Тип("ДекорацияФормы"), Форма.Элементы.скОбластьИсторияРаботыУправление);
		Элемент.Вид      	   		   = ВидДекорацииФормы.Картинка;
		Элемент.Картинка	  		   = БиблиотекаКартинок.скСвернутьПанель;
		Элемент.РазмерКартинки 		   = РазмерКартинки.Пропорционально;	
		Элемент.Ширина		   		   = 1;
		Элемент.Высота		   		   = 2;	
		Элемент.Гиперссылка    		   = Истина;
		Элемент.РастягиватьПоВертикали = Истина;	
		
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_ИсторияРаботыСкрытьНажатие");
		
	КонецЕсли;
	
	//Поле истории работы HTML
	ИмяОписания = "скПолеHTMLИсторииРаботы";
	
	Элемент 				  		 = Форма.Элементы.Добавить(ИмяОписания, Тип("ПолеФормы"), Форма.Элементы.скОбластьИсторияРаботыТело);
	Элемент.Вид 			  		 = ВидПоляФормы.ПолеHTMLДокумента;
	Элемент.ПутьКДанным 	   		 = ИмяОписания;
	Элемент.ПоложениеЗаголовка 		 = ПоложениеЗаголовкаЭлементаФормы.Нет;	
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.Ширина					 = 35;
	Элемент.Высота					 = 7;
	
	Элемент.УстановитьДействие("ПриНажатии", "Подключаемый_ПолеHTMLИсторииРаботыПриНажатии");
	
КонецПроцедуры

Процедура ПереместитьЭлементыВГруппу(Элементы, Родитель)

	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент.Родитель) = Тип("УправляемаяФорма")Тогда
			Элементы.Переместить(Элемент, Родитель);	
			
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

Функция СоздатьНайтиОбычнуюГруппу(Форма,
								  ИмяГруппы,
						   		  Родитель = Неопределено,
						   		  Группировка = Неопределено,
						   		  Отображение = Неопределено, 
						   		  РастягиватьПоГоризонтали = Неопределено,
						   		  РастягиватьПоВертикали = Неопределено,
						   		  ЗаголовокГруппы = "")
						   	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	Если Группа = Неопределено Тогда
		Группа   		   		  		= Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Форма, Родитель));	
		Группа.Вид		   		  		= ВидГруппыФормы.ОбычнаяГруппа;	
		Группа.Группировка 		  		= ?(Группировка = Неопределено, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, Группировка);
		Группа.Отображение 		   		= ?(Отображение = Неопределено, ОтображениеОбычнойГруппы.Нет, Отображение);
		Группа.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
		Группа.РастягиватьПоВертикали   = РастягиватьПоВертикали;   
		Группа.ОтображатьЗаголовок 		= ЗначениеЗаполнено(ЗаголовокГруппы);	
		Группа.Заголовок 				= ЗаголовокГруппы;
					
	КонецЕсли;
	
	Возврат Группа;	
	
КонецФункции // СоздатьНайтиГруппу()

Функция СоздатьНайтиКоманду(Форма,
							ИмяКоманды, 
							Действие,
							Заголовок = "",
							ОтображениеКнопки = Неопределено,
							Картинка = Неопределено)
							
	Команда = Форма.Команды.Найти(ИмяКоманды);						
	Если Команда = Неопределено Тогда
		Команда 			= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Действие	= Действие;
		Команда.Заголовок	= Заголовок;
		
		Если ОтображениеКнопки <> Неопределено Тогда
			Команда.Отображение	= ОтображениеКнопки;
		КонецЕсли;
		
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
		КонецЕсли;
		
	КонецЕсли;			
	
	Возврат Команда;
	
КонецФункции // СоздатьНайтиКоманду()

Функция СоздатьНайтиКнопку(Форма,
						   ИмяКнопки, 
						   ИмяКоманды,
						   Родитель = Неопределено);  
						   
	Кнопка = Форма.Элементы.Найти(ИмяКнопки);
	Если Кнопка = Неопределено Тогда
		Кнопка 			  = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ?(Родитель = Неопределено, Форма, Родитель));
		Кнопка.ИмяКоманды = ИмяКоманды;
		
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции // СоздатьНайтиКнопку()

Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	Разделы.Добавить(Метаданные.Подсистемы["скОтчетыРабочегоСтола"]);
КонецПроцедуры

#Область ИнициализацияПараметров

Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ЗапускатьРабочийСтолМенеджера", CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("скЗапускатьРабочийСтолМенеджераПриСтарте"));			
КонецПроцедуры

Процедура УстановитьНачальнуюСтраницу() Экспорт
	
	НастройкаНачальнойСтраницы = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиНачальнойСтраницы");	
	Если НастройкаНачальнойСтраницы = Неопределено Тогда
		НастройкаНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
		
	КонецЕсли;
	
	НовыйСоставФорм = Новый СоставФормНачальнойСтраницы;
	//{[-](фрагмент удален)Администратор 17.05.2018 16:33:18 ID 000001857
	//НовыйСоставФорм.ЛеваяКолонка.Добавить("Обработка.скРабочийСтол.Форма.Форма");
	//}Администратор 17.05.2018 16:33:18
	
	НастройкаНачальнойСтраницы.УстановитьСоставФорм(НовыйСоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкаНачальнойСтраницы);	
	
КонецПроцедуры // УстановитьНачальнуюСтраницу

#КонецОбласти

#КонецОбласти

#Область Инициализация

Функция ТаблицаВМассивСтруктур(Знач ТаблицаЗначений) Экспорт
	Результат = Новый Массив;
	
	ИменаКолонок = "";
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонок = Сред(ИменаКолонок, 2);
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		Результат.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(мСтруктур)Экспорт 
	Если НЕ (ТипЗнч(мСтруктур) = Тип("Массив")) ИЛИ (мСтруктур.Количество() = 0) ИЛИ (мСтруктур[0].Количество() = 0) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;		
	ТЗ = Новый ТаблицаЗначений;
	СтруктураПолей = "";
	СтруктураКолонок = мСтруктур[0];
	Для Каждого Поле Из СтруктураКолонок Цикл
		СтруктураПолей = СтруктураПолей + "," + Поле.Ключ;
	КонецЦикла;
	СтруктураКолонок = Новый Структура(СтруктураПолей);
	Для Каждого Поле Из СтруктураКолонок Цикл
		ТЗ.Колонки.Добавить(Поле.Ключ);
	КонецЦикла;
	Для Каждого Строка Из мСтруктур Цикл
		СтрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Строка);
	КонецЦикла;
	Возврат ТЗ;
КонецФункции

Процедура ИнициализироватьРабочийСтолСервер(Форма, Отказ) Экспорт
	
	ЭлементыРабочегоСтола = МассивСтруктурВТаблицуЗначений(ПолучитьТаблицуНастроекРабочегоСтола(Форма.СписокОбъектов));
	Если ЭлементыРабочегоСтола.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Состав рабочего стола не определен. '"));
	    Возврат;
		
	КонецЕсли;
	ЭлементыРабочегоСтола.Сортировать("ПорядокНастроек Убыв, Порядок Убыв");
	
	ИмяОписания = "скНастройкиРабочегоСтола";
	
	СформироватьНастройкиРабочегоСтолаФормы(Форма, ИмяОписания, ЭлементыРабочегоСтола);
	Форма.ИмяОписания = ИмяОписания;
	
КонецПроцедуры

Функция ПолучитьТаблицуНастроекРабочегоСтола(СписокОбъектов, СтрокаСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиРабочегоСтола.ИмяФормы,
		|	НастройкиРабочегоСтола.Синоним,
		|	НастройкиРабочегоСтола.Наименование,
		|	НастройкиРабочегоСтола.Параметры,
		|	НастройкиРабочегоСтола.Объект,
		|	НастройкиРабочегоСтола.Идентификатор,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.Пользователи)
		|			ТОГДА 0
		|		КОГДА ТИПЗНАЧЕНИЯ(НастройкиРабочегоСтола.Объект) = ТИП(Справочник.СтруктураПредприятия)
		|			ТОГДА 1
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ПорядокНастроек,
		|	НастройкиРабочегоСтола.Порядок КАК Порядок
		|ИЗ
		|	РегистрСведений.скНастройкиРабочегоСтола КАК НастройкиРабочегоСтола
		|ГДЕ
		|	НастройкиРабочегоСтола.Объект В(&СписокОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокНастроек,
		|	Порядок";
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(СтрокаСортировки) Тогда
		ТаблицаНастроек.Сортировать(СтрокаСортировки);
	КонецЕсли;
	
	Возврат ТаблицаВМассивСтруктур(ТаблицаНастроек);

КонецФункции

Процедура СформироватьНастройкиРабочегоСтолаФормы(Форма, ИмяОписания, ЭлементыРабочегоСтола) Экспорт

	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяКоманды"     , Новый ОписаниеТипов("Строка") , ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Порядок"        , Новый ОписаниеТипов("Число" ,,, Новый КвалификаторыЧисла(10))  , ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПорядокНастроек", Новый ОписаниеТипов("Число" ,,, Новый КвалификаторыЧисла(10))  , ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяФормы"       , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Наименование"	  , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор"  , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)) , ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Синоним"        , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Параметры"      , Новый ОписаниеТипов("Строка") , ИмяОписания));
	
	//Напоминания
	ИмяОписания_Напоминания = ИмяОписания + "ТаблицаНапоминаний";
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания_Напоминания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Важность"      	   , Новый ОписаниеТипов("Число") 									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СрокИсполнения"	   , Новый ОписаниеТипов("Строка")									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Счетчик"		 	   , Новый ОписаниеТипов("Строка")									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Содержание"	 	   , Новый ОписаниеТипов("Строка")									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДатаНачала"	 	   , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)			, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Пользователь"	       , Новый ОписаниеТипов("СправочникСсылка.Пользователи")			, ИмяОписания_Напоминания));
//START Кайдашов 30/07/19 483	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Предмет"	 	 	   , Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаВсеСсылки(),"Строка",,,Новый КвалификаторыСтроки(255)) , ИмяОписания_Напоминания));
//END Кайдашов
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДатаОповещения"	   , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)			, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Картинка"      	   , Новый ОписаниеТипов("Число") 									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПредметПредставление", Новый ОписаниеТипов("Строка")									, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Партнер"      	   , Новый ОписаниеТипов("СправочникСсылка.Партнеры") 				, ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактноеЛицо"      , Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров"), ИмяОписания_Напоминания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидОповещения"       , Новый ОписаниеТипов("Число") 									, ИмяОписания_Напоминания));	
	
	//Создадим реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	Форма[ИмяОписания].Загрузить(ЭлементыРабочегоСтола);
		
КонецПроцедуры
	
#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

#Область Напоминания

Функция ПолучитьИмяОбъектаМетаданныхДляОткрытияФормы(СсылкаНаОбъект) Экспорт
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ПолноеИмя();
КонецФункции

Функция ПолучитьИмяОсновнойФормыОбъектаМетаданных(СсылкаНаОбъект) Экспорт
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ОсновнаяФормаОбъекта.Имя;
КонецФункции	

Функция ЭтоЛичнаяЗадача(ЗадачаСсылка) Экспорт
	Возврат ЗадачаСсылка.CRM_Личная;	
КонецФункции

Функция ЭтоНезависимыйПроцесс(ЗадачаСсылка) Экспорт
	
	Возврат (ЗадачаСсылка.БизнесПроцесс.КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс);
	
КонецФункции

Функция ПрекратитьНапоминание(ВыделеннаяСтрока) Экспорт 
	РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, ВыделеннаяСтрока);
	РегистрСведенийМенеджерЗаписи.Прочитать();
	СтруктураНапоминания = Новый Структура();
	СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
	Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
		
		Если	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам 
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности = (ТекущаяДата()-1);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		ИначеЕсли РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
			
			СтруктураДлительности = Новый Структура();
			СтруктураДлительности.Вставить("Дней"	,0);
			СтруктураДлительности.Вставить("Часов"	,0);
			СтруктураДлительности.Вставить("Минут"	,0);
			СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
			СтруктураДлительности.Вставить("ВидОповещения"		,РегистрСведенийМенеджерЗаписи.ВидОповещения);
			
			Если РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
				
				СтруктураДлительности.Минут = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
				
				СтруктураДлительности.Часов = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
				
				СтруктураДлительности.Дней = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
				
				СтруктураДлительности.Дней = РегистрСведенийМенеджерЗаписи.СрокОповещения*7;
				
			КонецЕсли;
			
			ДатаНачала = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(РегистрСведенийМенеджерЗаписи.ДатаНачала,12)),СтруктураДлительности,,Неопределено);
			
			РегистрСведенийМенеджерЗаписи.ДатаНачала		= ДатаНачала;
			РегистрСведенийМенеджерЗаписи.ДатаОповещения	= ДатаНачала;
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности	= ДатаНачала + (60*60*24*7);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		ИначеЕсли ТипЗнч(РегистрСведенийМенеджерЗаписи.Предмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности = (ТекущаяДата()-60*60*24);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		Иначе
			РегистрСведенийМенеджерЗаписи.Удалить();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
		МассивКлючейНапоминаний = CRM_НапоминанияСервер.ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя(ВыделеннаяСтрока.Предмет, ВыделеннаяСтрока.Пользователь);
		
		Для каждого КлючНапоминанияУчетнойЗаписи Из МассивКлючейНапоминаний Цикл
			
			РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, КлючНапоминанияУчетнойЗаписи);
			РегистрСведенийМенеджерЗаписи.Прочитать();
			СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
			Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
			
				Если РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
				
					РегистрСведенийМенеджерЗаписи.Удалить();
				
				КонецЕсли; 
			
			КонецЕсли;	
			
		КонецЦикла; 
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", Истина);
		
	КонецЕсли;
	Возврат СтруктураНапоминания;
КонецФункции

Функция ПеренестиНапоминание(ВыделеннаяСтрока, ЗначениеОтложенногоВремени, а) Экспорт

	НоваяДатаНапоминания = ТекущаяДата();
	РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, ВыделеннаяСтрока);
	РегистрСведенийМенеджерЗаписи.Прочитать();
	СтруктураНапоминания = Новый Структура();
	СтруктураНапоминания.Вставить("Выбран",			РегистрСведенийМенеджерЗаписи.Выбран());
	Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
		
		РегистрСведенийМенеджерЗаписи.ДатаОповещения = НоваяДатаНапоминания + ЗначениеОтложенногоВремени + а;
		РегистрСведенийМенеджерЗаписи.Счетчик = РегистрСведенийМенеджерЗаписи.Счетчик + 1;
		РегистрСведенийМенеджерЗаписи.Записать(Истина);
		
	ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
		МассивКлючейНапоминаний = CRM_НапоминанияСервер.ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя(ВыделеннаяСтрока.Предмет, ВыделеннаяСтрока.Пользователь);
		
		Для каждого КлючНапоминанияУчетнойЗаписи Из МассивКлючейНапоминаний Цикл
			
			РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, КлючНапоминанияУчетнойЗаписи);
			РегистрСведенийМенеджерЗаписи.Прочитать();
			СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
			Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
			
				Если РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
							
					РегистрСведенийМенеджерЗаписи.ДатаОповещения = НоваяДатаНапоминания + ЗначениеОтложенногоВремени + а;
					РегистрСведенийМенеджерЗаписи.Счетчик = РегистрСведенийМенеджерЗаписи.Счетчик + 1;
					РегистрСведенийМенеджерЗаписи.Записать(Истина);
							
				КонецЕсли; 
			
			КонецЕсли;	
			
		КонецЦикла; 
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", Истина);
		
	КонецЕсли;
	Возврат СтруктураНапоминания;

КонецФункции // ПеренестиНапоминание()

#КонецОбласти

#Область Заметки

Функция ЗаметкиПользователя(Знач ТекущийПользователь = Неопределено) Экспорт

	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	КонецЕсли;	
	
	МассивЗаметок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникЗаметки.Ссылка,
		|	СправочникЗаметки.ПометкаУдаления,
		|	СправочникЗаметки.Предопределенный,
		|	СправочникЗаметки.Наименование,
		|	СправочникЗаметки.Автор,
		|	СправочникЗаметки.Содержание,
		|	СправочникЗаметки.ТекстСодержания,
		|	СправочникЗаметки.ДляРабочегоСтола,
		|	СправочникЗаметки.Пометка,
		|	СправочникЗаметки.ПредставлениеПредмета,
		|	СправочникЗаметки.ДатаИзменения
		|ИЗ
		|	Справочник.Заметки КАК СправочникЗаметки
		|ГДЕ
		|	НЕ СправочникЗаметки.ПометкаУдаления
		|	И СправочникЗаметки.Автор = &Пользователь
		|	И СправочникЗаметки.ДляРабочегоСтола = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		СтруктураЭлемента = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			СтруктураЭлемента.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
		СтруктураЭлемента.Вставить("ИдентификаторСсылки", XMLСтрока(Выборка.Ссылка));
		
		ЦветСтиля = вогОбщегоНазначения.КомментарийЗначенияПеречисления(Выборка.Пометка);
		СтруктураЭлемента.Вставить("ЦветСтиля", ?(ЗначениеЗаполнено(ЦветСтиля), ЦветСтиля, "yellow"));
		
		МассивЗаметок.Добавить(СтруктураЭлемента);
		
	КонецЦикла;
	
	Возврат МассивЗаметок;
	
КонецФункции // ЗаметкиПользователя()

Функция СкрытьЭлементЗаметки(Идентификатор) Экспорт
		
	Объект = СсылкаЭлемента(Идентификатор, "Справочник.Заметки").ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Объект.Заблокировать();
	Объект.ДляРабочегоСтола = Ложь;
	
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // СкрытьЭлементЗаметки()

#КонецОбласти

#Область ИсторияРаботы

Функция ИсторияРаботы() Экспорт
	
	ТаблицаИстории = Новый ТаблицаЗначений;
	ТаблицаИстории.Колонки.Добавить("Дата"				 , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаИстории.Колонки.Добавить("НавигационнаяСсылка", Новый ОписаниеТипов("Строка"));
	ТаблицаИстории.Колонки.Добавить("Представление"		 , Новый ОписаниеТипов("Строка"));
	
	МассивИстории = ИсторияРаботыПользователя.Получить();
	Для Сч = 0 По МассивИстории.Количество() - 1 Цикл
		ЭлементИстории = МассивИстории[Сч];
		
		СтрокаТаблицы = ТаблицаИстории.Добавить();
		СтрокаТаблицы.Дата				  = ЭлементИстории.Дата;
		СтрокаТаблицы.НавигационнаяСсылка = ЭлементИстории.НавигационнаяСсылка;
		СтрокаТаблицы.Представление		  = ПредставлениеНавигационойСсылки(ЭлементИстории.НавигационнаяСсылка);
		
	КонецЦикла;
	
	МассивИсторииРаботы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИстории", ТаблицаИстории);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИстории.Дата КАК Дата,
		|	ТаблицаИстории.НавигационнаяСсылка КАК НавигационнаяСсылка,
		|	ТаблицаИстории.Представление КАК Представление
		|ПОМЕСТИТЬ ВТ_ТаблицаИстории
		|ИЗ
		|	&ТаблицаИстории КАК ТаблицаИстории
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаИстории.Дата, ДЕНЬ) КАК ПериодДень,
		|	ВТ_ТаблицаИстории.Дата КАК Дата,
		|	ВТ_ТаблицаИстории.НавигационнаяСсылка КАК НавигационнаяСсылка,
		|	ВТ_ТаблицаИстории.Представление КАК Представление
		|ИЗ
		|	ВТ_ТаблицаИстории КАК ВТ_ТаблицаИстории
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|ИТОГИ ПО
		|	ПериодДень";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Ключи = "";
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если ЗначениеЗаполнено(Ключи) Тогда
			Ключи = Ключи + ",";
			
		КонецЕсли;	
		
		Ключи = Ключи + Колонка.Имя;
		
	КонецЦикла;
	
	ВыборкаДата = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДата.Следующий() Цикл
		ОписаниеПериода = Новый Структура;
		ОписаниеПериода.Вставить("Период"  , ВыборкаДата.ПериодДень);
		ОписаниеПериода.Вставить("Элементы", Новый Массив);
		
		ВыборкаЗаписи = ВыборкаДата.Выбрать();
		Пока ВыборкаЗаписи.Следующий() Цикл
			ОписаниеЭлемента = Новый Структура(Ключи);
			ЗаполнитьЗначенияСвойств(ОписаниеЭлемента, ВыборкаЗаписи);
			
			ОписаниеПериода.Элементы.Добавить(ОписаниеЭлемента);
			
		КонецЦикла;
		
		МассивИсторииРаботы.Добавить(ОписаниеПериода);
		
	КонецЦикла;
	
	Возврат МассивИсторииРаботы;
	
КонецФункции // ИсторияРаботы()
	
#КонецОбласти

Функция ПредставлениеНавигационойСсылки(НавигационнаяСсылка)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(НавигационнаяСсылка);
	
	Возврат ПолучитьПредставленияНавигационныхСсылок(МассивСсылок)[0].Текст;

КонецФункции // ПредставлениеНавигационойСсылки()

Функция СсылкаЭлемента(ИдентификаторЭлемента, ИмяМенеджераОбъекта) Экспорт

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераОбъекта);	
	Возврат МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторЭлемента, "_", "-")));
	
КонецФункции // СсылкаЭлемента()

#КонецОбласти
