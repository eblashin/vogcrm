////////////////////////////////////////////////////////////////////////////////
// РАБОТА С GOOGLE CALENDAR API v3

////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ СИНХРОНИЗАЦИИ С GOOGLE CALENDAR API v3

// Процедура - обработчик регламентного задания "CRM_СинхронизацияGoogleCalendar"
// Выполняет двусторонний обмен изменениями CRM  и Google 
Процедура СинхронизироватьСобытияКалендаря(Параметры = Неопределено) Экспорт
	
	
	Если ПолучитьФункциональнуюОпцию("CRM_СинхронизироватьКалендарьСКалендаремGoogle") Тогда

		Автор = Неопределено;
		Если ТипЗнч(Параметры) = Тип("Структура") Тогда
			Если Параметры.Свойство("Автор") Тогда
				Автор = Параметры.Автор;
			КонецЕсли;
		КонецЕсли;
		
		СоответствиеУведомленийGoogle = ПолучитьУведомленияОтGoogle(Автор);
		ТаблицаУведомленийCRM = ПолучитьУведомленияОтCRM();

		//События ЦРМ
		Для Каждого СтрокаИзмененийCRM Из ТаблицаУведомленийCRM Цикл
			ОбъектСобытия = СтрокаИзмененийCRM.Объект.ПолучитьОбъект();
			ПериодическоеСобытиеСпособИзмененияРяда = СтрокаИзмененийCRM.ПериодическоеСобытиеСпособИзмененияРядаGApi;
			ОбъектСобытия.ДополнительныеСвойства.Вставить("ПериодическоеСобытиеСпособИзмененияРяда",ПериодическоеСобытиеСпособИзмененияРяда);
			Если ЗначениеЗаполнено(СтрокаИзмененийCRM.ИдСобытияGApi) Тогда // было когда-то синхронизированно
				ТаблицаУведомленийGoogle = СоответствиеУведомленийGoogle.Получить(СтрокаИзмененийCRM.Пользователь);
				Если ТаблицаУведомленийGoogle<>Неопределено Тогда 
					Если ТаблицаУведомленийGoogle.Колонки.Найти("ИдСобытияGApi") <> Неопределено Тогда
						Отбор = Новый Структура();
						Отбор.Вставить("ИдСобытияGApi",СтрокаИзмененийCRM.ИдСобытияGApi);
						СтрокиИзмененийGoogle = ТаблицаУведомленийGoogle.НайтиСтроки(Отбор); 
						Если СтрокиИзмененийGoogle.Количество() = 0 Тогда // обновляем событие
							Если СтрокаИзмененийCRM.Объект.ПометкаУдаления Тогда
								CRM_GoogleИнтеграция.УдалитьСобытиеИзКалендаря(ОбъектСобытия,СтрокаИзмененийCRM.Пользователь);
							Иначе
								CRM_GoogleИнтеграция.ОбновитьСобытиеВКалендаре(ОбъектСобытия,СтрокаИзмененийCRM.Пользователь);
							КонецЕсли;
						Иначе // одновременное изменение
							//найдем самое последнее изменение
							// описание осбытия будет содержаться в 1 строке
							Если СтрокаИзмененийCRM.ТаймСтампGApi>СтрокиИзмененийGoogle[0].ТаймСтампGApi Тогда
								 ТаблицаУведомленийGoogle.Удалить(СтрокиИзмененийGoogle[0]);
								 СоответствиеУведомленийGoogle.Вставить(СтрокаИзмененийCRM.Пользователь,ТаблицаУведомленийGoogle); 
								Если СтрокаИзмененийCRM.Объект.ПометкаУдаления Тогда
									CRM_GoogleИнтеграция.УдалитьСобытиеИзКалендаря(ОбъектСобытия,СтрокаИзмененийCRM.Пользователь);
								Иначе
									CRM_GoogleИнтеграция.ОбновитьСобытиеВКалендаре(ОбъектСобытия,СтрокаИзмененийCRM.Пользователь);
								КонецЕсли;
							Иначе
								 Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если СтрокаИзмененийCRM.Объект.ПометкаУдаления Тогда
						CRM_GoogleИнтеграция.УдалитьСобытиеИзКалендаря(ОбъектСобытия,СтрокаИзмененийCRM.Пользователь);
					Иначе
						CRM_GoogleИнтеграция.ОбновитьСобытиеВКалендаре(ОбъектСобытия,СтрокаИзмененийCRM.Пользователь);
					КонецЕсли;
				КонецЕсли;
			Иначе // создание события
				Если СтрокаИзмененийCRM.Объект.ПометкаУдаления Тогда
					CRM_GoogleИнтеграция.УдалитьСобытиеИзКалендаря(ОбъектСобытия,СтрокаИзмененийCRM.Пользователь);
				Иначе
					CRM_GoogleИнтеграция.ОбновитьСобытиеВКалендаре(ОбъектСобытия,СтрокаИзмененийCRM.Пользователь);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;      	
		Для Каждого ЭлементСоответствия ИЗ СоответствиеУведомленийGoogle Цикл
			// получим события для обновления Google
			Пользователь = ЭлементСоответствия.Ключ;
			ТаблицаУведомленийGoogle = ЭлементСоответствия.Значение;
			Если ТаблицаУведомленийGoogle.Колонки.Найти("ИдСобытияGApi") <> Неопределено Тогда
				ТаблицаСобытийДляОбновления = ПолучитьТаблицуОбновляемыхСобытий(ТаблицаУведомленийGoogle.ВыгрузитьКолонку("ИдСобытияGApi"),Пользователь);
				Для Каждого СобытиеГугл Из ТаблицаУведомленийGoogle Цикл
					ОбъектСсылка = ТаблицаСобытийДляОбновления.Найти(СобытиеГугл.ИдСобытияGApi,"ИдСобытияGApi");     
					Если ОбъектСсылка <> Неопределено Тогда
						//TODO:
						//Если СобытиеГугл.Sync >= ОбъектСсылка.Sync Тогда 
							ОбъектСобытия = ОбъектСсылка.Объект.ПолучитьОбъект();
						//Иначе //событие было создано в ЦРМ
						//	Продолжить;
						//КонецЕсли;
					Иначе
						ОбъектСобытия = Документы.CRM_Мероприятие.СоздатьДокумент();
					КонецЕсли;
					СинхронизироватьСобытие(СобытиеГугл,ОбъектСобытия,Пользователь);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура СинхронизироватьСобытие(СобытиеГугл,ОбъектСобытия,Пользователь)
	
	ЭтоНовоеСобытие = Не ЗначениеЗаполнено(ОбъектСобытия.Ссылка);
	
	Если СобытиеГугл.Описание.Получить("status") = "cancelled" Тогда
		Если ЭтоНовоеСобытие Тогда
			// удаленное событие Google, которого и так нет в CRM; (в идеале такой ситуации быть не должно)
			Возврат;
		КонецЕсли;
		ОбъектСобытия.ПометкаУдаления = Истина;
	КонецЕсли;
	
	Если ЭтоНовоеСобытие Тогда
		// заполнение нового события
		ОбъектСобытия.Состояние				= Справочники.CRM_СостоянияСобытий.Запланировано;
		//ОбъектСобытия.Важность				= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		//ОбъектСобытия.ВходящееИсходящее		= Перечисления.CRM_ВходящееИсходящееСобытие.Входящее;
	КонецЕсли;
	
	// Ряд событий
	// проверим, является ли событие периодическим
	// мы выгружали события с установленным параметром SingleEvent
	// соответственно, повторяющиеся события выгружаются отдельно
	// с установленным признаком recurringEventId - идентификатор цепочки событий
	
	
	ИдПовтСобытия = СобытиеГугл.Описание.Получить("recurringEventId");
	
	Если ЗначениеЗаполнено(ИдПовтСобытия) Тогда
		ОбъектСобытия.РядСобытий = ПолучитьРядСобытий(ИдПовтСобытия,Пользователь);
		ОбъектСобытия.Периодическое = Истина;
		ОбъектСобытия.мНеУстанавливатьПризнакИзмененоВРяде = Истина;
	КонецЕсли;
	
	// получим организатора
	
	Организатор = СобытиеГугл.Описание.Получить("organizer");
	ИдКалендаря = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "КалендарьGoogle");
	
	Если ЗначениеЗаполнено(Организатор) Тогда
		ОрганизаторИмя     = Организатор.Получить("displayName");
		ОрганизаторАдресЭп = Организатор.Получить("email");
		// сначала ищем по ид календаря, который совпадает с почтовым адресом календаря
		Если ИдКалендаря = ОрганизаторАдресЭп Тогда
			ОбъектСобытия.ОрганизаторGApi = Пользователь;	
		Иначе
			ТаблицаОрганизатор  = CRM_GoogleИнтеграция.НайтиКонтакт(ОрганизаторАдресЭп);
			Если ТаблицаОрганизатор.Количество()<>0 Тогда
				ОбъектСобытия.ОрганизаторGApi = ТаблицаОрганизатор[0].Контакт;
			Иначе 
				ОбъектСобытия.ОрганизаторGApi = ОрганизаторИмя+" <"+ОрганизаторАдресЭп+">"; 
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбъектСобытия.ОрганизаторGApi = Пользователь; 
	КонецЕсли;
				
	ОбъектСобытия.Автор = Пользователь;
	ОбъектСобытия.Ответственный = ОбъектСобытия.Автор;
	ОбъектСобытия.Подразделение = ОбъектСобытия.Ответственный.Подразделение;
	ОбъектСобытия.Тема = СобытиеГугл.Описание.Получить("summary");
	ОбъектСобытия.Описание	= НСтр("ru='Загружено из Google календаря'") + Символы.ПС + СобытиеГугл.Описание.Получить("description");
	// времена события
	ДатаСобытия = СобытиеГугл.Описание.Получить("start").Получить("date");
	Если ЗначениеЗаполнено(ДатаСобытия) Тогда
		ОбъектСобытия.Дата = НачалоДня(CRM_GoogleИнтеграция.ФорматВДату(ДатаСобытия,Пользователь)); 
		ОбъектСобытия.ОкончаниеМероприятия  = КонецДня(CRM_GoogleИнтеграция.ФорматВДату(ДатаСобытия,Пользователь));
		ОбъектСобытия.НаВесьДень = Истина;
	Иначе
		ОбъектСобытия.Дата             = CRM_GoogleИнтеграция.ФорматВДату(СобытиеГугл.Описание.Получить("start").Получить("dateTime"),Пользователь); 
		ОбъектСобытия.ОкончаниеМероприятия = CRM_GoogleИнтеграция.ФорматВДату(СобытиеГугл.Описание.Получить("end").Получить("dateTime"), Пользователь); 
	КонецЕсли;
	// ставим по-умолчанию
	
	// права гостей
	ГостиМогутИзменятьСобытие = СобытиеГугл.Описание.Получить("guestsCanModify"); 
	Если ЗначениеЗаполнено(ГостиМогутИзменятьСобытие) Тогда
		ОбъектСобытия.ГостиМогутИзменятьМероприятиеGApi    = ГостиМогутИзменятьСобытие;
	Иначе
		ОбъектСобытия.ГостиМогутИзменятьМероприятиеGApi    = Ложь;
	КонецЕсли;
	ГостиМогутВидетьСписокГостейGApi = СобытиеГугл.Описание.Получить("guestsCanSeeOtherGuests"); 
	Если ЗначениеЗаполнено(ГостиМогутВидетьСписокГостейGApi) Тогда
		ОбъектСобытия.ГостиМогутВидетьСписокГостейGApi     = ГостиМогутВидетьСписокГостейGApi;
	Иначе
		ОбъектСобытия.ГостиМогутВидетьСписокГостейGApi     = Истина;
	КонецЕсли;
	ГостиМогутПриглашатьДругихГостейGApi = СобытиеГугл.Описание.Получить("guestsCanInviteOthers"); 
	Если ЗначениеЗаполнено(ГостиМогутПриглашатьДругихГостейGApi)Тогда
		ОбъектСобытия.ГостиМогутПриглашатьДругихГостейGApi = ГостиМогутПриглашатьДругихГостейGApi;
	Иначе
		ОбъектСобытия.ГостиМогутПриглашатьДругихГостейGApi = Истина;
	КонецЕсли;
	// напоминания
	НапоминанияПоУмолчанию = СобытиеГугл.Описание.Получить("reminders").Получить("useDefault");
	Если НапоминанияПоУмолчанию Тогда
		ОбъектСобытия.РассылкаПоУмолчаниюGApi = Истина;
        ОбъектСобытия.РассылатьУведомленияПоНастройкеGApi = Ложь;
	Иначе
		ОбъектСобытия.РассылкаПоУмолчаниюGApi = Ложь;
        ОбъектСобытия.РассылатьУведомленияПоНастройкеGApi = Истина;
		ОбъектСобытия.МинутыGApi = СобытиеГугл.Описание.Получить("reminders").Получить("overrides")[0].Получить("minutes");
	КонецЕсли;
	
	// место события
	// не вынесено пока в отдельную функцию, так как меняется описание события
	МестоСобытия = СобытиеГугл.Описание.Получить("location");
	Если ЗначениеЗаполнено(МестоСобытия) Тогда
		МестоСправочник = Справочники.CRM_Помещения.НайтиПоНаименованию(МестоСобытия);
		Если МестоСправочник.Пустая() Тогда
			ОбъектСобытия.Место = Справочники.CRM_Помещения.Другое;
			ОбъектСобытия.Описание = ОбъектСобытия.Описание  + Символы.ПС + "Место проведения: " + МестоСобытия;
		Иначе
			ОбъектСобытия.Место = МестоСправочник;
		КонецЕсли;
	КонецЕсли;
	
	// категория события по цвету
	ИдЦвета = СобытиеГугл.Описание.Получить("colorId");
	ИдЦветаПоУмолчанию = СобытиеГугл.КатегорияПоУмолчанию;
	Если ИдЦвета<>ИдЦветаПоУмолчанию Тогда
		Если ЗначениеЗаполнено(ИдЦвета) Тогда
			Категория =  CRM_GoogleИнтеграция.ПолучитьКатегориюПоЦветуСобытия(ИдЦвета);
			Если ЗначениеЗаполнено(Категория) Тогда
				//НайденнаяСтрока = ОбъектСобытия.Категории.Найти(Категория, "Категория");
				//Если НайденнаяСтрока = Неопределено Тогда
				//	СтрокаКатегорий = ОбъектСобытия.Категории.Добавить();
				//	СтрокаКатегорий.Категория = Категория;
				//КонецЕсли;
				
				КатегорияДляУдаления = ОбъектСобытия.ОсновнаяКатегория; 
				Если ЗначениеЗаполнено(КатегорияДляУдаления) Тогда
					ОбъектСобытия.ОсновнаяКатегория = Категория;
					НайденнаяСтрока = ОбъектСобытия.Категории.Найти(КатегорияДляУдаления, "Категория");
					Если НайденнаяСтрока <> Неопределено Тогда
						ОбъектСобытия.Категории.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Гости события
	ГостиМероприятия = СобытиеГугл.Описание.Получить("attendees");
	Если ГостиМероприятия = Неопределено Тогда
		Если НЕ ЭтоНовоеСобытие Тогда
			ОбъектСобытия.СвоиЛица.Очистить();
			ОбъектСобытия.СторонниеЛица.Очистить();
		КонецЕсли;	
	Иначе	
		МассивСвоихЛиц		= Новый Массив;
		МассивСтороннихЛиц	= Новый Массив;
		Для  Сч = 0 По ГостиМероприятия.Количество() - 1  Цикл
			АдресЭп				= ГостиМероприятия[Сч].Получить("email");
			ИмяГостя			= ГостиМероприятия[Сч].Получить("displayName");
			ВладелецКалендаря	= ГостиМероприятия[Сч].Получить("self"); 
			
			ПосетитМероприятие	= ГостиМероприятия[Сч].Получить("responseStatus"); 
			
			Если ЗначениеЗаполнено(ВладелецКалендаря) Тогда
				Если ПосетитМероприятие = "declined" Тогда
					ОбъектСобытия.ОтветственныйПосетитМероприятие = 0;
				ИначеЕсли ПосетитМероприятие = "accepted" Тогда
					ОбъектСобытия.ОтветственныйПосетитМероприятие = 1;
				Иначе
					ОбъектСобытия.ОтветственныйПосетитМероприятие = 2;
				КонецЕсли;	
				Продолжить;	
			КонецЕсли;
			ТаблицаГостей  = CRM_GoogleИнтеграция.НайтиКонтакт(АдресЭп);
			Если ТаблицаГостей.Количество() = 0 Тогда
				НовоеФизЛицо				= Справочники.ФизическиеЛица.СоздатьЭлемент();
				НовоеФизЛицо.Наименование	= ИмяГостя;
				СтрокаАдреса				= НовоеФизЛицо.КонтактнаяИнформация.Добавить();
				СтрокаАдреса.Тип			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаАдреса.Вид			= Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
				СтрокаАдреса.Представление	= АдресЭп;
				СтрокаАдреса.АдресЭП		= АдресЭп;
				НовоеФизЛицо.Записать();				
				
				СтрокаСвоихЛиц			= ОбъектСобытия.СвоиЛица.Добавить();
				СтрокаСвоихЛиц.Лицо		= НовоеФизЛицо.Ссылка;
				СтрокаСвоихЛиц.Адрес	= АдресЭп;
				Если ПосетитМероприятие = "declined" Тогда
					СтрокаСвоихЛиц.ПосетитМероприятие = 0;
				ИначеЕсли ПосетитМероприятие = "accepted" Тогда
					СтрокаСвоихЛиц.ПосетитМероприятие = 1;
				Иначе
					СтрокаСвоихЛиц.ПосетитМероприятие = 2;
				КонецЕсли;
				
				МассивСвоихЛиц.Добавить(НовоеФизЛицо.Ссылка);
				
			Иначе
				Гость = ТаблицаГостей[0].Контакт; 
				Если ТипЗнч(Гость) = Тип("СправочникСсылка.Партнеры") Тогда
					СтрокаСтороннихЛиц = ОбъектСобытия.СторонниеЛица.Найти(Гость, "Партнер");
					Если СтрокаСтороннихЛиц = Неопределено Тогда
						СтрокаСтороннихЛиц			= ОбъектСобытия.СторонниеЛица.Добавить();
						СтрокаСтороннихЛиц.Партнер	= Гость;
						СтрокаСтороннихЛиц.Адрес	= ТаблицаГостей[0].Представление;
					КонецЕсли;
					МассивСтороннихЛиц.Добавить(Гость);
				ИначеЕсли ТипЗнч(Гость) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					СтрокаСтороннихЛиц = ОбъектСобытия.СторонниеЛица.Найти(Гость, "КонтактноеЛицо");
					Если СтрокаСтороннихЛиц = Неопределено Тогда
						СтрокаСтороннихЛиц					= ОбъектСобытия.СторонниеЛица.Добавить();
						СтрокаСтороннихЛиц.Партнер			= Гость.Владелец;
						СтрокаСтороннихЛиц.КонтактноеЛицо	= Гость;
						СтрокаСтороннихЛиц.Адрес			= ТаблицаГостей[0].Представление;
					КонецЕсли;
					МассивСтороннихЛиц.Добавить(Гость);
				ИначеЕсли (ТипЗнч(Гость) = Тип("СправочникСсылка.Пользователи")) ИЛИ (ТипЗнч(Гость) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					СтрокаСвоихЛиц = ОбъектСобытия.СвоиЛица.Найти(Гость, "Лицо");
					Если СтрокаСвоихЛиц = Неопределено Тогда
						СтрокаСвоихЛиц = ОбъектСобытия.СвоиЛица.Добавить();
						СтрокаСвоихЛиц.Лицо = Гость;
						СтрокаСвоихЛиц.Адрес = ТаблицаГостей[0].Представление;
					КонецЕсли;	
					Если ПосетитМероприятие = "declined" Тогда
						СтрокаСвоихЛиц.ПосетитМероприятие = 0;
					ИначеЕсли ПосетитМероприятие = "accepted" Тогда
						СтрокаСвоихЛиц.ПосетитМероприятие = 1;
					Иначе
						СтрокаСвоихЛиц.ПосетитМероприятие = 2;
					КонецЕсли;	
					МассивСвоихЛиц.Добавить(Гость);
				ИначеЕсли ТипЗнч(Гость) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					СтрокаСвоихЛиц = ОбъектСобытия.СвоиЛица.Найти(Гость, "Лицо");
					Если СтрокаСвоихЛиц = Неопределено Тогда
						СтрокаСвоихЛиц = ОбъектСобытия.СвоиЛица.Добавить();
						СтрокаСвоихЛиц.Лицо = Гость;
						СтрокаСвоихЛиц.Адрес = ТаблицаГостей[0].Представление;
					КонецЕсли;	
					МассивСвоихЛиц.Добавить(Гость);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Удаляем из своих и сторонних лиц отсутствующие контакты
		КоличествоСтороннихЛиц = ОбъектСобытия.СторонниеЛица.Количество();
		Для НомерСтроки = 1 По КоличествоСтороннихЛиц Цикл
			СтрокаТЧ = ОбъектСобытия.СторонниеЛица[КоличествоСтороннихЛиц - НомерСтроки];	
			Если ЗначениеЗаполнено(СтрокаТЧ.КонтактноеЛицо) Тогда
				ЭлементМассива = МассивСтороннихЛиц.Найти(СтрокаТЧ.КонтактноеЛицо);
			Иначе
				ЭлементМассива = МассивСтороннихЛиц.Найти(СтрокаТЧ.Партнер);
			КонецЕсли;	
			Если ЭлементМассива = Неопределено Тогда
				ОбъектСобытия.СторонниеЛица.Удалить(СтрокаТЧ);	
			КонецЕсли;	
		КонецЦикла;
		КоличествоСвоихЛиц = ОбъектСобытия.СвоиЛица.Количество();
		Для НомерСтроки = 1 По КоличествоСвоихЛиц Цикл
			СтрокаТЧ = ОбъектСобытия.СвоиЛица[КоличествоСвоихЛиц - НомерСтроки];	
			ЭлементМассива = МассивСвоихЛиц.Найти(СтрокаТЧ.Лицо);
			Если ЭлементМассива = Неопределено Тогда
				ОбъектСобытия.СвоиЛица.Удалить(СтрокаТЧ);	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	ОбъектСобытия.ДополнительныеСвойства.Вставить("ИдСобытияGApi",СобытиеГугл.ИдСобытияGApi);
	НомерПоследовательности = СобытиеГугл.Описание.Получить("sequence"); 
	ОбъектСобытия.ДополнительныеСвойства.Вставить("НомерПоследовательностиGApi",НомерПоследовательности);
	ОбъектСобытия.ДополнительныеСвойства.Вставить("ТаймСтампGApi",Дата(1,1,1));
	ОбъектСобытия.ДополнительныеСвойства.Вставить("ЗагруженоИзGoogle",Истина);
	ОбъектСобытия.Записать();

КонецПроцедуры 

Функция НайтиКонтакт(АдресЭп, Наименование = Неопределено)
	ТаблицаКонтакты = ПолучитьВсеКонтактыПоEmail(АдресЭп);
	ТаблицаКонтакты.Колонки.Добавить("_ПолеСортировки", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаКонтакты Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаТаблицы._ПолеСортировки = 1;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				СтрокаТаблицы._ПолеСортировки = 2;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				СтрокаТаблицы._ПолеСортировки = 3;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				СтрокаТаблицы._ПолеСортировки = 4;
			Иначе
				СтрокаТаблицы._ПолеСортировки = 10;
			КонецЕсли;
		Иначе
			СтрокаТаблицы._ПолеСортировки = 999;
		КонецЕсли;
	КонецЦикла;
	ТаблицаКонтакты.Сортировать("_ПолеСортировки ВОЗР");
	ТаблицаКонтакты.Колонки.Удалить(ТаблицаКонтакты.Колонки._ПолеСортировки);
	Возврат ТаблицаКонтакты;
КонецФункции

// Функция  осуществляет анализ PUSH-уведомлений от Google
// и формирует таблицу событий, измененных в Google
// События созданы со стороны CRM
//
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит таблицу синхронизируемых событий
//
Функция ПолучитьУведомленияОтGoogle(Автор = Неопределено)
	
	СоответствиеПолученныхУведомлений = Новый Соответствие; 
	Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle(Автор) Тогда
		УчетнаяЗаписьPushNotifications = Константы.CRM_УчетнаяЗаписьПолученияОповещенийGAPI.Получить();
		Если ЗначениеЗаполнено(УчетнаяЗаписьPushNotifications) Тогда
			ТаблицаПользователейGoogleКалендарей = ПолучитьСписокПользователейGoogleКалендарей();
			ПараметрыЗагрузки = Новый Структура("УведомленияОтGoogle", Истина);
			ТаблицаПисемНаСервере = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьPushNotifications, ПараметрыЗагрузки);
			Если ТаблицаПисемНаСервере.Количество() > 0 Тогда
				ТаблицаИзмененийВКалендарях = Новый ТаблицаЗначений;
				ТаблицаИзмененийВКалендарях.Колонки.Добавить("Пользователь");
				ТаблицаИзмененийВКалендарях.Колонки.Добавить("Дата");
				Для Сч = 0 По ТаблицаПисемНаСервере.Количество() - 1 Цикл 
					Если ТаблицаПисемНаСервере[Сч].ОбратныйАдрес <> "noreply@pushservice.rarus.ru" Тогда
						Продолжить;
					КонецЕсли;
					СоответствиеИдентификаторов = ПолучитьИдентификаторыИзПисьма(ТаблицаПисемНаСервере[Сч]);
					ИдКаналаИзПисьма = СоответствиеИдентификаторов.Получить("ИдКаналаИзПисьма");
					ИдКалендаряИзПисьма = СоответствиеИдентификаторов.Получить("ИдКалендаряИзПисьма");
					СтрокаТаблицыПользователейGoogleКалендарей = ТаблицаПользователейGoogleКалендарей.Найти(ИдКаналаИзПисьма,"Значение");
					Если СтрокаТаблицыПользователейGoogleКалендарей = Неопределено
						ИЛИ ТаблицаПользователейGoogleКалендарей.Найти(ИдКалендаряИзПисьма,"Значение")= Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаТаблицыИзмнений = ТаблицаИзмененийВКалендарях.Добавить();
					СтрокаТаблицыИзмнений.Пользователь = СтрокаТаблицыПользователейGoogleКалендарей.Пользователь;
					СтрокаТаблицыИзмнений.Дата = ТаблицаПисемНаСервере[Сч].ДатаОтправления; 
				КонецЦикла;	
			КонецЕсли;
			ПроверитьВремяЖизниКаналов(ТаблицаПользователейGoogleКалендарей);
			Если ТаблицаИзмененийВКалендарях <> Неопределено Тогда
				СоответствиеПолученныхУведомлений = CRM_GoogleИнтеграция.ПолучитьОписаниеИзменений(ТаблицаИзмененийВКалендарях);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоответствиеПолученныхУведомлений;
	
КонецФункции // ПолучитьУведомленияОтGoogle()

Функция ПолучитьСписокПользователейGoogleКалендарей(Автор = Неопределено) 
	Запрос = Новый Запрос;
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить(ПланыВидовХарактеристик.CRM_НастройкиПользователей.IDКаналаGApi);
	МассивНастроек.Добавить(ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИдКалендаряКанала);
	МассивНастроек.Добавить(ПланыВидовХарактеристик.CRM_НастройкиПользователей.ВремяЖизниКаналаGApi);
	Запрос.УстановитьПараметр("СписокНастроек",МассивНастроек);
	Запрос.УстановитьПараметр("Автор",Автор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрЗначениеПрав.Значение КАК Значение,
	               |	РегистрЗначениеПрав.Пользователь КАК Пользователь,
	               |	РегистрЗначениеПрав.Настройка
	               |ИЗ
	               |	РегистрСведений.CRM_НастройкиПользователей КАК РегистрЗначениеПрав
	               |ГДЕ
	               |	РегистрЗначениеПрав.Настройка В(&СписокНастроек)"
	               +?(ЗначениеЗаполнено(Автор),"И РегистрЗначениеПрав.Пользователь = &Автор","");
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьИдентификаторыИзПисьма(Сообщение)
	
	ХТМЛ_Текст = "";
	ИдКаналаИзПисьма    = "";
	ИдКалендаряИзПисьма = "";
	СоответствиеИдентификаторов = Новый Соответствие;
	Для каждого ТекстПочтовогоСообщения Из Сообщение.Тексты Цикл
		Если ТекстПочтовогоСообщения.Получить("ТипТекста") = "HTML" Тогда
			ХТМЛ_Текст = ТекстПочтовогоСообщения.Получить("Текст");
			Если Найти(ХТМЛ_Текст,"resourse_id")= 0 Тогда
				Продолжить;
			КонецЕсли;
			Для СчСт = 0 По  СтрЧислоСтрок(ХТМЛ_Текст) Цикл
				Если Найти(СтрПолучитьСтроку(ХТМЛ_Текст,СчСт),"resourse_id")>0 Тогда  // ид календаря
					ИдКалендаряИзПисьма = СтрЗаменить(СтрПолучитьСтроку(ХТМЛ_Текст,СчСт),"<input resourse_id type=""hidden"" value=""",""); 
					ИдКалендаряИзПисьма = СтрЗаменить(ИдКалендаряИзПисьма,""">","");
					ИдКалендаряИзПисьма = СокрЛП(ИдКалендаряИзПисьма);
				ИначеЕсли Найти(СтрПолучитьСтроку(ХТМЛ_Текст,СчСт),"channel_id type")>0 Тогда // ид канала
					ИдКаналаИзПисьма = СтрЗаменить(СтрПолучитьСтроку(ХТМЛ_Текст,СчСт),"<input channel_id type=""hidden"" value=""",""); 
					ИдКаналаИзПисьма = СтрЗаменить(ИдКаналаИзПисьма,""">","");
					ИдКаналаИзПисьма = СокрЛП(ИдКаналаИзПисьма);
				Иначе
					Продолжить;
				КонецЕсли;										
			КонецЦикла;
			Прервать;
		Иначе
			Продолжить;
		КонецЕсли; 
	КонецЦикла;
	СоответствиеИдентификаторов.Вставить("ИдКаналаИзПисьма",ИдКаналаИзПисьма);
	СоответствиеИдентификаторов.Вставить("ИдКалендаряИзПисьма",ИдКалендаряИзПисьма);
	Возврат СоответствиеИдентификаторов;

КонецФункции

Процедура ПроверитьВремяЖизниКаналов(ТаблицаПользователейКалендаряГугл)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Настройка",ПланыВидовХарактеристик.CRM_НастройкиПользователей.ВремяЖизниКаналаGApi);
	МассивСтрокЖизниКаналов = ТаблицаПользователейКалендаряГугл.НайтиСтроки(Отбор);
	Для Каждого ЭлементМассива Из МассивСтрокЖизниКаналов Цикл
		Если ЭлементМассива.Значение = Неопределено ИЛИ ЭлементМассива.Значение = Дата(1,1,1) ИЛИ
			ЭлементМассива.Значение<ТекущаяДатаСеанса() Тогда
			CRM_GoogleИнтеграция.ОбновитьКаналСинхронизации(ЭлементМассива.Пользователь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция  формирует таблицу событий, синхронизируемых с Google.
// События созданы со стороны CRM
//
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит таблицу синхронизируемых событий
//
Функция ПолучитьУведомленияОтCRM(Автор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СобытияКалендаря.Объект,
	               |	CRM_СобытияКалендаря.ТаймСтампGApi,
	               |	CRM_СобытияКалендаря.ИдСобытияGApi,
	               |	CRM_СобытияКалендаря.ОрганизаторGApi КАК Пользователь,
	               |	CRM_СобытияКалендаря.ПериодическоеСобытиеСпособИзмененияРядаGApi
	               |ИЗ
	               |	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
	               |ГДЕ
	               |	CRM_СобытияКалендаря.ТаймСтампGApi <> &ПустаяДата
	                |	И ТИПЗНАЧЕНИЯ(CRM_СобытияКалендаря.Объект) = ТИП(Документ.CRM_Мероприятие)" + ?(ЗначениеЗаполнено(Автор),"И CRM_СобытияКалендаря.Пользователь = &Автор","")+"
	               |	И ВЫБОР
	               |			КОГДА НЕ ВЫРАЗИТЬ(CRM_СобытияКалендаря.Объект КАК Документ.CRM_Мероприятие).Периодическое
	               |					ИЛИ ВЫРАЗИТЬ(CRM_СобытияКалендаря.Объект КАК Документ.CRM_Мероприятие).Периодическое
	               |						И CRM_СобытияКалендаря.ПериодическоеСобытиеСпособИзмененияРядаGApi <> &ПустаяСтрока
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ";
	Запрос.УстановитьПараметр("ПустаяДата",Дата(1,1,1,0,0,0));
	Запрос.УстановитьПараметр("Автор",Автор);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьУведомленияОтCRM()

// Функция  формирует таблицу событий, которые пришли как измененные из Google
//
// Параметры:
//  МассивИД  - Массив - массив уникальных идентификтаоров событий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит таблицу обновляемых событий
// 
Функция ПолучитьТаблицуОбновляемыхСобытий(МассивИД,Пользователь)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СобытияКалендаря.Объект,
	               |	CRM_СобытияКалендаря.ИдСобытияGApi,
	               |	CRM_СобытияКалендаря.НомерПоследовательностиGApi КАК Sync
	               |ИЗ
	               |	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(CRM_СобытияКалендаря.Объект) = ТИП(Документ.CRM_Мероприятие)
	               |	И CRM_СобытияКалендаря.ИдСобытияGApi В(&МассивИД)
	               |	И CRM_СобытияКалендаря.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Запрос.УстановитьПараметр("МассивИД",МассивИД);
    Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуОбновляемыхСобытий()

Функция ПолучитьРядСобытий(ИдПовтСобытия, Пользователь = Неопределено) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_РядыСобытий.Ссылка
	               |ИЗ
	               |	Справочник.CRM_РядыСобытий КАК CRM_РядыСобытий
	               |ГДЕ
	               |	CRM_РядыСобытий.ИдПовтСобытия = &ИдПовтСобытия";
				   
	Запрос.УстановитьПараметр("ИдПовтСобытия",ИдПовтСобытия);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		РядСобытийСсылка = СоздатьНовыйРяд(ИдПовтСобытия,Пользователь);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РядСобытийСсылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат РядСобытийСсылка;
	
КонецФункции

Функция СоздатьНовыйРяд(ИдПовтСобытия, Пользователь = Неопределено, НеСоздавать = Ложь) 
	
	РядСобытийСсылка = Справочники.CRM_РядыСобытий.ПустаяСсылка();
	
	ОписаниеПовтСобытия = CRM_GoogleИнтеграция.ПолучитьСобытиеПоИД(ИдПовтСобытия, Пользователь);
	Если ЗначениеЗаполнено(ОписаниеПовтСобытия) Тогда   
		// времена события
		ДатаСобытия = ОписаниеПовтСобытия.Получить("start").Получить("date");
		Если ЗначениеЗаполнено(ДатаСобытия) Тогда
			ДатаНачала = НачалоДня(CRM_GoogleИнтеграция.ФорматВДату(ДатаСобытия,Пользователь)); 
		Иначе
			ДатаНачала = CRM_GoogleИнтеграция.ФорматВДату(ОписаниеПовтСобытия.Получить("start").Получить("dateTime"),Пользователь); 
		КонецЕсли;
        Правило = РазобратьПравило(ОписаниеПовтСобытия.Получить("recurrence")[0]);
		РядСобытийСсылка = Справочники.CRM_РядыСобытий.СоздатьЭлемент();
		РядСобытийСсылка.ДатаНачала = ДатаНачала;
		РядСобытийСсылка.ИдПовтСобытия = ИдПовтСобытия;
		Расписание = СформироватьРасписаниеПоПравилу(ДатаНачала, Правило);
		РядСобытийСсылка.ДатаОкончания = Расписание.ДатаКонца; 
		РядСобытийСсылка.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных() );
		РядСобытийСсылка.Наименование  = Строка(Расписание);
		РядСобытийСсылка.Записать();
	КонецЕсли;

	Возврат РядСобытийСсылка;
	
КонецФункции

Функция СформироватьРасписаниеПоПравилу(ДатаНачала, Правило)
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	
	Расписание.ДатаНачала	= ДатаНачала;
	ДоДаты = Правило.Получить("UNTIL=");
	Если ЗначениеЗаполнено(ДоДаты) Тогда
		ДоДаты = СтрЗаменить(ДоДаты,"Z","");
		ДоДаты = СтрЗаменить(ДоДаты,"T","");
		Расписание.ДатаКонца = Дата(ДоДаты);
	Иначе
		// count  пока не рассматриваем
		Расписание.ДатаКонца = ДатаНачала + 31536000;//+ год
	КонецЕсли;
	
	// Дни недели
	Расписание.ДниНедели.Очистить();
	
	МассивДниНедели = Новый Массив();
	ПоДням = Правило.Получить("BYDAY=");
	
	Если ЗначениеЗаполнено(ПоДням) Тогда
		Если Найти(ПоДням, "MO")<> 0 Тогда
			МассивДниНедели.Добавить(1);
		КонецЕсли;
		Если Найти(ПоДням, "TU")<> 0 Тогда
			МассивДниНедели.Добавить(2);
		КонецЕсли;
		Если Найти(ПоДням, "WE")<> 0 Тогда
			МассивДниНедели.Добавить(3);
		КонецЕсли;
		Если Найти(ПоДням, "TH")<> 0 Тогда
			МассивДниНедели.Добавить(4);
		КонецЕсли;
		Если Найти(ПоДням, "FR")<> 0 Тогда
			МассивДниНедели.Добавить(5);
		КонецЕсли;
		Если Найти(ПоДням, "SA")<> 0 Тогда
			МассивДниНедели.Добавить(6);
		КонецЕсли;
		Если Найти(ПоДням, "SU")<> 0 Тогда
			МассивДниНедели.Добавить(7);
		КонецЕсли;
	КонецЕсли;
	
	Расписание.ДниНедели = МассивДниНедели;
	
	// Месяцы
	ПоМесяцам = Правило.Получить("BYMONTH=");
	Расписание.Месяцы.Очистить();
	МассивМесяцы = Новый Массив();
	Если СтрЧислоВхождений(ПоМесяцам, "11") = 0 Тогда
		Если СтрЧислоВхождений(ПоМесяцам, "12") = 0 Тогда
			Если Найти(ПоМесяцам, "1")<> 0 Тогда
				МассивМесяцы.Добавить(1);
			КонецЕсли;
		Иначе
			МассивМесяцы.Добавить(12);	
		КонецЕсли;
	Иначе
		МассивМесяцы.Добавить(11);
	КонецЕсли;
	
	Если Найти(ПоМесяцам, "2")<> 0 Тогда
		МассивМесяцы.Добавить(2);
	КонецЕсли;
	Если Найти(ПоМесяцам, "3")<> 0 Тогда
		МассивМесяцы.Добавить(3);
	КонецЕсли;
	Если Найти(ПоМесяцам, "4")<> 0 Тогда
		МассивМесяцы.Добавить(4);
	КонецЕсли;
	Если Найти(ПоМесяцам, "5")<> 0 Тогда
		МассивМесяцы.Добавить(5);
	КонецЕсли;
	Если Найти(ПоМесяцам, "6")<> 0 Тогда
		МассивМесяцы.Добавить(6);
	КонецЕсли;
	Если Найти(ПоМесяцам, "7")<> 0 Тогда
		МассивМесяцы.Добавить(7);
	КонецЕсли;
	Если Найти(ПоМесяцам, "8") Тогда
		МассивМесяцы.Добавить(8);
	КонецЕсли;
	Если Найти(ПоМесяцам, "9")<> 0 Тогда
		МассивМесяцы.Добавить(9);
	КонецЕсли;
	Если Найти(ПоМесяцам, "10")<> 0 Тогда
		МассивМесяцы.Добавить(10);
	КонецЕсли;
	Расписание.Месяцы = МассивМесяцы;
	
	//Расписание.ДеньВМесяце = Форма.ДеньВМесяце * Форма.ДеньВМесяцеСНачалаСКонца;
	//Расписание.ДеньНеделиВМесяце = Форма.ДеньНеделиВМесяце * Форма.ДеньНеделиВМесяцеСНачалаСКонца;
	
	Возврат Расписание;
	
КонецФункции
	
Функция РазобратьПравило(СтрокаПравила)
	ПравилоСоответствие  =  Новый Соответствие;
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СтрокаПравила,"RRULE:",""),";",Истина);
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		Поз = Найти(ЭлементМассива, "=");
		Если Поз = 0 Тогда
			ПравилоСоответствие.Вставить(ЭлементМассива);
		Иначе
			Ключ = Лев(ЭлементМассива,Поз);
			Значение = Прав(ЭлементМассива,СтрДлина(ЭлементМассива)-Поз); 
			ПравилоСоответствие.Вставить(Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат ПравилоСоответствие;
КонецФункции

// Возвращает таблицу всех контактов, связанных с EMail.
//
// Параметры:
//  Адрес - Строка - адрес электронной почты для поиска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, которая содержит информацию о контактах.
//
Функция ПолучитьВсеКонтактыПоEmail(Адрес)
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаДляПоискаПоEmail(Ложь);
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует текст запроса для поиска контактов по Email.
//
// Параметры:
//  ПоискПоСписку  - Булево - признак того, что в качестве параметра передается массив значений.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция СформироватьТекстЗапросаДляПоискаПоEmail(ПоискПоСписку,ИтогиПоEmail = Ложь)
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.МассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ТаблицаКонтактнойИнформации.Представление,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
	|	И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ТаблицаКонтактнойИнформации.Представление,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнойИнформации.Ссылка." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
			|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Если ИтогиПоEmail Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИТОГИ ПО
		|	Представление";
	КонецЕсли;
	
	Если ПоискПоСписку Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Адрес", "В (&Адрес)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции
