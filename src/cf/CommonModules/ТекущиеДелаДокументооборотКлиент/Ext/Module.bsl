
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции для обработки ТекущиеДела
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик оповещений формы Текущие дела.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//
Процедура ОбработкаОповещенияФормыТекущиеДела(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ОбновитьВиджет" Тогда
		ВиджетыКОбновлению = Новый Массив;
		ВиджетыКОбновлению.Добавить(Параметр);
		ПрочитатьНастройкиВиджетов = Истина;
		Форма.ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов, ВиджетыКОбновлению);
	ИначеЕсли ИмяСобытия = "ИзмененЕжедневныйОтчет" Тогда
		ВиджетыКОбновлению = Новый Массив;
		ВиджетыКОбновлению.Добавить(ПредопределенноеЗначение("Справочник.Виджеты.ЕжедневныеОтчеты"));
		Форма.ЗаполнитьВиджеты(, ВиджетыКОбновлению);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриНажатии полей html в форме текущие дела.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//
Процедура HTMLПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка, АдресХранилищаТаблицаПросмотра = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма.ТекущийЭлемент = Элемент;
	
	ИндексВиджета = Форма.ИндексТекущегоВиджета();
	
	Если ИндексВиджета = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВиджет = Форма["Виджет" + ИндексВиджета];
	
	СсылкиОбластей = Форма["СсылкиОбластей" + ИндексВиджета];
	ПозицияX = ДанныеСобытия.Event.clientX;
	ПозицияY = ДанныеСобытия.Event.clientY;
	
	// клик по ссылке
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) И Не СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "МенюВиджета") Тогда
		ОбработатьНажатиеНаСсылку(ДанныеСобытия.Href, Форма, ИндексВиджета, АдресХранилищаТаблицаПросмотра,ДанныеСобытия);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийВиджет) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкиОбластей) Тогда
		Возврат;
	КонецЕсли;
	
	// клик по области меню
	ОбластьМеню = ОбластьМеню();
	Если ПозицияX <= ОбластьМеню.Right И ПозицияY <= ОбластьМеню.Bottom Тогда
		ОбработатьНажатиеНаОбластьМеню(ТекущийВиджет, Форма, Элемент, ИндексВиджета);
		Возврат;
	КонецЕсли;
	
	// клик по области показателя
	Если ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя3) Тогда
		ЧислоПоказателей = 3;
	ИначеЕсли ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя2) Тогда
		ЧислоПоказателей = 2;
	Иначе
		ЧислоПоказателей = 0;
	КонецЕсли;
	
	Если ЧислоПоказателей > 0 Тогда
		ОбластьПоказателя3 = ОбластьПоказателя3(ЧислоПоказателей);
		ОбластьПоказателя2 = ОбластьПоказателя2(ЧислоПоказателей);
		ОбластьПоказателя1 = ОбластьПоказателя1(ЧислоПоказателей);
		
		Если ПозицияX >= ОбластьПоказателя3.Left
			И ПозицияX <= ОбластьПоказателя3.Right
			И ПозицияY >= ОбластьПоказателя3.Top
			И ПозицияY <= ОбластьПоказателя3.Bottom
			И ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя3) Тогда
			
			ОбработатьНажатиеНаСсылку(СсылкиОбластей.СсылкаОбластиПоказателя3, Форма, ИндексВиджета, АдресХранилищаТаблицаПросмотра);
			Возврат;
			
		ИначеЕсли ПозицияX >= ОбластьПоказателя2.Left
			И ПозицияX <= ОбластьПоказателя2.Right
			И ПозицияY >= ОбластьПоказателя2.Top
			И ПозицияY <= ОбластьПоказателя2.Bottom
			И ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя2) Тогда
			
			ОбработатьНажатиеНаСсылку(СсылкиОбластей.СсылкаОбластиПоказателя2, Форма, ИндексВиджета);
			Возврат;
			
		ИначеЕсли ПозицияX >= ОбластьПоказателя1.Left
			И ПозицияX <= ОбластьПоказателя1.Right
			И ПозицияY >= ОбластьПоказателя1.Top
			И ПозицияY <= ОбластьПоказателя1.Bottom
			И ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиПоказателя1) Тогда
			
			ОбработатьНажатиеНаСсылку(СсылкиОбластей.СсылкаОбластиПоказателя1, Форма, ИндексВиджета);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// клик по области виджета
	Если ЗначениеЗаполнено(СсылкиОбластей.СсылкаОбластиВиджета) Тогда
		ОбработатьНажатиеНаСсылку(СсылкиОбластей.СсылкаОбластиВиджета, Форма, ИндексВиджета, АдресХранилищаТаблицаПросмотра);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ОбработкаРасшифровки диаграмм в форме текущие дела.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//
Процедура ДиаграммаОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Расшифровка) Тогда
		
		ИндексВиджета = Прав(Элемент.Имя, 3);
		ТекущийВиджет = Форма["Виджет" + ИндексВиджета];
		
		Если ТекущийВиджет = ПредопределенноеЗначение("Справочник.Виджеты.ЕжедневныеОтчеты") Тогда
			
			Если ТипЗнч(Расшифровка) = Тип("Дата") Тогда
				ЕжедневныйОтчет = ТекущиеДелаДокументооборотСервер.ПолучитьЕжедневныйОтчетНаДату(Расшифровка);
				Если ЗначениеЗаполнено(ЕжедневныйОтчет) Тогда
					ПоказатьЗначение(, ЕжедневныйОтчет);
				Иначе
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Дата", Расшифровка);
					ОткрытьФорму("Документ.ЕжедневныйОтчет.ФормаОбъекта", ПараметрыФормы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму настройки виджета формы.
//
// Параметры:
//   Форма - УправляемаяФорма - форма Текущие дела.
//   ИндексВиджета - Строка - индекс настраиваемого виджета в форме.
//
Процедура НастроитьВиджетФормы(Форма, ИндексВиджета) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеНастройкиВиджетаФормы", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИндексВиджета", ИндексВиджета);
	
	ОткрытьФорму("Обработка.ТекущиеДелаДокументооборот.Форма.ФормаНастройки",
		ПараметрыФормы, Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершение процедуры НастроитьВиджетФормы.
//
Процедура ЗавершениеНастройкиВиджетаФормы(Виджет, ДопПараметры) Экспорт
	
	Если Виджет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ОбновитьВиджет", Виджет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает значения координат крайних точек области меню.
//
Функция ОбластьМеню()
	
	ОбластьВызоваМеню = Новый Структура;
	ОбластьВызоваМеню.Вставить("Top", 0);
	ОбластьВызоваМеню.Вставить("Bottom", 20);
	ОбластьВызоваМеню.Вставить("Left", 0);
	ОбластьВызоваМеню.Вставить("Right", 20);
	
	Возврат ОбластьВызоваМеню;
	
КонецФункции

// Возвращает значения координат крайних точек области показателя 3.
//
// Параметры:
//   ЧислоПоказателей - Число - может принимать значения 2 или 3.
//
Функция ОбластьПоказателя3(ЧислоПоказателей)
	
	ОбластьПоказателя1 = Новый Структура;
	
	Если ЧислоПоказателей = 2 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 0);
		ОбластьПоказателя1.Вставить("Right", 20);
	ИначеЕсли ЧислоПоказателей = 3 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 156);
		ОбластьПоказателя1.Вставить("Right", 219);
	КонецЕсли;
	
	Возврат ОбластьПоказателя1;
	
КонецФункции

// Возвращает значения координат крайних точек области показателя 2.
//
// Параметры:
//   ЧислоПоказателей - Число - может принимать значения 2 или 3.
//
Функция ОбластьПоказателя2(ЧислоПоказателей)
	
	ОбластьПоказателя1 = Новый Структура;
	
	Если ЧислоПоказателей = 2 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 122);
		ОбластьПоказателя1.Вставить("Right", 216);
	ИначеЕсли ЧислоПоказателей = 3 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 83);
		ОбластьПоказателя1.Вставить("Right", 146);
	КонецЕсли;
	
	Возврат ОбластьПоказателя1;
	
КонецФункции

// Возвращает значения координат крайних точек области показателя 1.
//
// Параметры:
//   ЧислоПоказателей - Число - может принимать значения 2 или 3.
//
Функция ОбластьПоказателя1(ЧислоПоказателей)
	
	ОбластьПоказателя1 = Новый Структура;
	
	Если ЧислоПоказателей = 2 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 12);
		ОбластьПоказателя1.Вставить("Right", 106);
	ИначеЕсли ЧислоПоказателей = 3 Тогда
		ОбластьПоказателя1.Вставить("Top", 41);
		ОбластьПоказателя1.Вставить("Bottom", 97);
		ОбластьПоказателя1.Вставить("Left", 9);
		ОбластьПоказателя1.Вставить("Right", 71);
	КонецЕсли;
	
	Возврат ОбластьПоказателя1;
	
КонецФункции

// Обработчик перехода по ссылке
//
// Параметры:
//   Ссылка - Строка - ссылка в поле html
//   Форма - УправляемаяФорма - форма Текущие дела.
//   ИндексВиджета - Строка - индекс виджета на форме Текущие дела.
//
Процедура ОбработатьНажатиеНаСсылку(Ссылка, Форма, ИндексВиджета, АдресХранилищаТаблицаПросмотра = Неопределено,ДанныеСобытия = Неопределено)
	
	// переделано VOG Ульянов И.В. 12.02.2020 CRM-311
	ПараметрыОтбора = Неопределено;		
	
	Если СтрНачинаетсяС(Ссылка, "v8doc:e1cib/data/Документ.CRM_Мероприятие") тогда
		ПараметрыОтбора = Новый Структура;
		ДокументОтбора = ТекущиеДелаДокументооборотСервер.ПолучитьМероприятиеОтбора(?(ДанныеСобытия = Неопределено, "",ДанныеСобытия.Anchor.rel));
		ПараметрыОтбора.Вставить("ОтбиратьВсе", ?(ДокументОтбора = Неопределено, Истина, Ложь));
		ПараметрыОтбора.Вставить("ДокументОтбора", ДокументОтбора);
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДМероприятия", ПараметрыОтбора);		
		//АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","ТаблицаЗначений", ТекущиеДелаДокументооборотСервер.ЗаполнитьТаблицуМероприятия(Форма.ОбъектСвязи, ДанныеСобытия.Anchor.rel),ПараметрыОтбора);
	ИначеЕсли СтрНачинаетсяС(Ссылка, "v8doc:")  Тогда
		НавигационнаяСсылкаПоля = Сред(Ссылка, 7);
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "НастройкаВиджета") Тогда
		НастроитьВиджетФормы(Форма, ИндексВиджета);
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиЗадачи") Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТекущаяДата", ТекущаяДата());
		ПараметрыОтбора.Вставить("ТолькоПросроченные", Ложь);
		ПараметрыОтбора.Вставить("ТолькоНеПринятые", Ложь);
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДМоиЗадачи", ПараметрыОтбора);
		//АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","ТаблицаЗначений", ТекущиеДелаДокументооборотСервер.ЗаполнитьТаблицуЗадачи(Форма.ОбъектСвязи),ПараметрыОтбора);		
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиЗадачи_НеПринятые") Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТекущаяДата", ТекущаяДата());
		ПараметрыОтбора.Вставить("ТолькоПросроченные", Ложь);
		ПараметрыОтбора.Вставить("ТолькоНеПринятые", Истина);
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДМоиЗадачи", ПараметрыОтбора);
		//АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","ТаблицаЗначений", ТекущиеДелаДокументооборотСервер.ЗаполнитьТаблицуЗадачи(Форма.ОбъектСвязи, Ложь, Истина),ПараметрыОтбора);		
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "МоиЗадачи_Просроченные") Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТекущаяДата", ТекущаяДата());
		ПараметрыОтбора.Вставить("ТолькоПросроченные", Истина);
		ПараметрыОтбора.Вставить("ТолькоНеПринятые", Ложь);
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДМоиЗадачи", ПараметрыОтбора);
		//АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","ТаблицаЗначений", ТекущиеДелаДокументооборотСервер.ЗаполнитьТаблицуЗадачи(Форма.ОбъектСвязи, Истина, Ложь),ПараметрыОтбора);
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Мероприятия") Тогда
		ПараметрыОтбора = Новый Структура;
		ДокументОтбора = ТекущиеДелаДокументооборотСервер.ПолучитьМероприятиеОтбора(?(ДанныеСобытия = Неопределено, "",ДанныеСобытия.Anchor.rel));
		ПараметрыОтбора.Вставить("ОтбиратьВсе", ?(ДокументОтбора = Неопределено, Истина, Ложь));
		ПараметрыОтбора.Вставить("ДокументОтбора", ДокументОтбора);
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДМероприятия", ПараметрыОтбора);		
		//АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","ТаблицаЗначений", ТекущиеДелаДокументооборотСервер.ЗаполнитьТаблицуМероприятия(Форма.ОбъектСвязи, ?(ДанныеСобытия = Неопределено, "",ДанныеСобытия.Anchor.rel)),ПараметрыОтбора);
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Почта") Тогда
		ПараметрыОтбора = Новый Структура;
		СправочникОтбора = ТекущиеДелаДокументооборотСервер.ПолучитьПочтуОтбора(?(ДанныеСобытия = Неопределено, "",ДанныеСобытия.Anchor.rel));
		ПараметрыОтбора.Вставить("ОтбиратьВсе", ?(СправочникОтбора = Неопределено, Истина, Ложь));
		ПараметрыОтбора.Вставить("СправочникОтбора", СправочникОтбора);
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДПочта", ПараметрыОтбора);		
		//АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","ТаблицаЗначений", ТекущиеДелаДокументооборотСервер.ЗаполнитьТаблицуПочта(Форма.ОбъектСвязи, ?(ДанныеСобытия = Неопределено, "",ДанныеСобытия.Anchor.rel)),ПараметрыОтбора);
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Звонки") Тогда
		ПараметрыОтбора = Новый Структура;		
		ИДОтбора = ?(ДанныеСобытия = Неопределено, "",ДанныеСобытия.Anchor.rel);
		ПараметрыОтбора.Вставить("ОтбиратьВсе", ?(ИДОтбора = "", Истина,Ложь));
		ПараметрыОтбора.Вставить("АбонентКакСвязаться", ИДОтбора);
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДЗвонки", ПараметрыОтбора);		
		//АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","ТаблицаЗначений", ТекущиеДелаДокументооборотСервер.ЗаполнитьТаблицуЗвонки(Форма.ОбъектСвязи, ?(ДанныеСобытия = Неопределено, "",ДанныеСобытия.Anchor.rel)),ПараметрыОтбора);		
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Командировки") Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ОтбиратьПоСтатусу",Ложь);
		ПараметрыОтбора.Вставить("СтатусДляОтбора",Неопределено);
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДКомандировка", ПараметрыОтбора);
	ИначеЕсли СтрЗаканчиваетсяНа(Ссылка, "Командировки_ВРаботе") Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ОтбиратьПоСтатусу",Истина);
		ПараметрыОтбора.Вставить("СтатусДляОтбора",ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.ВРаботе"));
		АдресХранилищаТаблицаПросмотра = Новый Структура("ТипРезультата, СтрокаРезультата, ПараметрыОтбора","Макет", "СКДКомандировка", ПараметрыОтбора);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на область меню в виджете
//
// Параметры:
//   Виджет - СправочникСсылка.Виджеты - ссылка на виджет.
//   Форма - УправляемаяФорма - форма Текущие дела.
//   Элемент - ЭлементФормы - html поле на форме Текущие дела.
//   ИндексВиджета - Строка - индекс виджета на форме Текущие дела.
//
Процедура ОбработатьНажатиеНаОбластьМеню(Виджет, Форма, Элемент, ИндексВиджета) Экспорт
	
	КомандыВМенюВиджета = Новый СписокЗначений;
	
	Если Виджет = ПредопределенноеЗначение("Справочник.Виджеты.Мероприятия") Тогда
		КомандыВМенюВиджета.Добавить(
			"СоздатьМероприятие", НСтр("ru = 'Создать мероприятие'"));
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.МоиЗадачи") Тогда
		
		КомандыВМенюВиджета.Добавить(
			"СоздатьПроцесс", НСтр("ru = 'Создать процесс'"), , Форма.КэшКартинок.БизнесПроцесс);
		КомандыВМенюВиджета.Добавить(
			"ОткрытьМоиПроцессы", НСтр("ru = 'Мои процессы'"));
			
	ИначеЕсли Виджет = ПредопределенноеЗначение("Справочник.Виджеты.Почта") Тогда
		//КомандыВМенюВиджета.Добавить(
		//	"СоздатьПисьмо", НСтр("ru = 'Написать письмо'"), , Форма.КэшКартинок.НаписатьПисьмо);
	КонецЕсли;
	
	КомандыВМенюВиджета.Добавить(
		"НастройкаВиджета", НСтр("ru = 'Настроить виджет...'"), , Форма.КэшКартинок.ШестерёнкаПлоская);
	
	ПараметрыОП = Новый Структура;
	ПараметрыОП.Вставить("Форма", Форма);
	ПараметрыОП.Вставить("ИндексВиджета", ИндексВиджета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьНажатиеНаОбластьМеню_Завершение", ЭтотОбъект, ПараметрыОП);
	
	Форма.ПоказатьВыборИзМеню(ОписаниеОповещения, КомандыВМенюВиджета, Элемент);
	
КонецПроцедуры

// Завершение процедуры ОбработатьНажатиеНаОбластьМеню
//
Процедура ОбработатьНажатиеНаОбластьМеню_Завершение(ВыбраннаяКоманда, Параметры) Экспорт
	
	Если ВыбраннаяКоманда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ВыбраннаяКоманда.Значение;
	
	Если Команда = "НастройкаВиджета" Тогда
		НастроитьВиджетФормы(Параметры.Форма, Параметры.ИндексВиджета);
	ИначеЕсли Команда = "СоздатьПроцесс" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/ОбщаяКоманда.CRM_СоздатьПоручение");
	ИначеЕсли Команда = "ОткрытьМоиПроцессы" Тогда
		ПерейтиПоНавигационнойСсылке(
			"e1cib/command/ОбщаяКоманда.CRM_МоиЗадачи");
	ИначеЕсли Команда = "СоздатьПисьмо" Тогда
//utodo		ПерейтиПоНавигационнойСсылке(
//			"e1cib/command/ОбщаяКоманда.СоздатьПисьмо");
	ИначеЕсли Команда = "СоздатьМероприятие" Тогда
		ОткрытьФорму("Документ.CRM_Мероприятие.ФормаОбъекта");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
