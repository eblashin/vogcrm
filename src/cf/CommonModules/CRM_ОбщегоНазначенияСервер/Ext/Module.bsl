
#Область ОбщиеПроцедурыИФункции

// Функция возвращает структуру с настройками клиентского приложения.
//
// Возвращаемое значение:
//	Структура - структура с настройками клиентского приложения.
//
Функция ПолучитьНастройкиКлиентскогоПриложения() Экспорт
	Попытка		Настройки = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	Исключение	Настройки = Неопределено;
	КонецПопытки;
	
	СтруктураНастроек = Новый Структура(
	"ВариантИнтерфейсаКлиентскогоПриложения,
	|РежимОткрытияФормВЗакладках,
	|ОтображатьПанелиНавигацииИДействий,
	|ОтображатьПанельРазделов,
	|СкоростьКлиентскогоСоединенияНизкая", Неопределено, Ложь, Истина, Истина, Ложь);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКлиентскогоПриложения") Тогда
		
		Попытка		СтруктураНастроек.ВариантИнтерфейсаКлиентскогоПриложения = Настройки.ВариантИнтерфейсаКлиентскогоПриложения;
		Исключение	СтруктураНастроек.ВариантИнтерфейсаКлиентскогоПриложения = Неопределено;
		КонецПопытки;
		Попытка		СтруктураНастроек.РежимОткрытияФормВЗакладках = (Настройки.РежимОткрытияФормПриложения = Вычислить("РежимОткрытияФормПриложения.Закладки"));
		Исключение	СтруктураНастроек.РежимОткрытияФормВЗакладках = Ложь;
		КонецПопытки;
		Попытка		СтруктураНастроек.ОтображатьПанелиНавигацииИДействий = Настройки.ОтображатьПанелиНавигацииИДействий;
		Исключение	СтруктураНастроек.ОтображатьПанелиНавигацииИДействий = Истина;
		КонецПопытки;
		Попытка		СтруктураНастроек.ОтображатьПанельРазделов = Настройки.ОтображатьПанельРазделов;
		Исключение	СтруктураНастроек.ОтображатьПанельРазделов = Истина;
		КонецПопытки;
		Попытка		СтруктураНастроек.СкоростьКлиентскогоСоединенияНизкая = (Настройки.СкоростьКлиентскогоСоединения = СкоростьКлиентскогоСоединения.Низкая);
		Исключение	СтруктураНастроек.СкоростьКлиентскогоСоединенияНизкая = Ложь;
		КонецПопытки;
		
		Возврат СтруктураНастроек;
	Иначе
		Возврат СтруктураНастроек;
	КонецЕсли;
КонецФункции

// Функция проверяет - есть ли панель с переданным именем в данной группе настроек	 
// интерфейса Такси текущего сеанса.
// Параметры:
//	ГруппаНастройкиИнтерфейса - ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения - 
//								группа настроек состава, в которой ищем.
// 	ИмяПанели	- Строка - имя панели, которую ищем.
//
// Возвращаемое значение:
//	Булево - признак наличия панели в  группе настроек.
//
Функция ЕстьпанельИнтерфейсаВГруппе(ГруппаНастройкиИнтерфейса, ИмяПанели) Экспорт

	ЕстьПанель = Ложь;
	
	Если ТипЗнч(ГруппаНастройкиИнтерфейса) = Тип("ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения") Тогда
		
		Для Каждого ЭлементГруппыНастройкиИнтерфейса Из ГруппаНастройкиИнтерфейса Цикл
			ЕстьПанель = ЕстьпанельИнтерфейсаВГруппе(ЭлементГруппыНастройкиИнтерфейса, ИмяПанели);
			
			Если ЕстьПанель Тогда
				Возврат ЕстьПанель;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Попытка
			ЕстьПанель = (ГруппаНастройкиИнтерфейса.Имя = ИмяПанели);
		Исключение
			ЕстьПанель = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЕстьПанель;
	
КонецФункции

// Функция проверяет - есть ли панель с переданным именем в интерфейсе текущего сеанса.
// Параметры:
// 	ИмяПанели	- Строка - имя панели, которую ищем.
//
// Возвращаемое значение:
//	Булево - признак наличия панели в интерфейсе.
//
Функция ЕстьпанельИнтерфейса(ИмяПанели) Экспорт
	
	СписокНазванийНастроек = Новый Структура("Верх, Лево, Низ, Право");
	
	ЕстьПанель = Ложь;
	НастройкиИнтерфейсаКлиентскогоПриложения = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения");
	
	Если НастройкиИнтерфейсаКлиентскогоПриложения = Неопределено Тогда
		НастройкиИнтерфейсаКлиентскогоПриложения = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	КонецЕсли;
	
	Если НастройкиИнтерфейсаКлиентскогоПриложения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиСоставаИнтерфейса = НастройкиИнтерфейсаКлиентскогоПриложения.ПолучитьСостав();	
	
	Для Каждого ЭлементСпискаНазваний Из СписокНазванийНастроек Цикл
		
		Для Каждого ГруппаИнтерфейса Из НастройкиСоставаИнтерфейса[ЭлементСпискаНазваний.Ключ] Цикл
			
			Если ГруппаИнтерфейса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПанель = ЕстьпанельИнтерфейсаВГруппе(ГруппаИнтерфейса, ИмяПанели);
			
			Если ЕстьПанель Тогда
				Возврат ЕстьПанель;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьПанель;

КонецФункции

// Процедура устанавливает для CRM уникальные первоначальные настройки интерфейса "Такси"
// Не используется в объединенных решениях!
//
Процедура ПервоначальнаяНастройкаИнтерфейсаТакси(НачальныеНастройки) Экспорт
	
	НачальныеНастройки.НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.КартинкаСверхуИТекст;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	
	ГруппаСлева = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;

	ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	
	ГруппаСверху = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСверху.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	ГруппаСверху.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельФункцийТекущегоРаздела"));
	
	ГруппаСнизу = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСнизу.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
	
	НастройкиСостава.Лево.Добавить(ГруппаСлева);
	НастройкиСостава.Верх.Добавить(ГруппаСверху);
	НастройкиСостава.Низ.Добавить(ГруппаСнизу);
	
	НачальныеНастройки.НастройкиТакси = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НачальныеНастройки.НастройкиТакси.УстановитьСостав(НастройкиСостава);
	
КонецПроцедуры

// Функция возвращает массив пользователей, входящих в указанную группу.
//
// Параметры:
//	ГруппаПользователей			- СправочникСсылка.ГруппыПользователей	- Группа пользователей.
// 	ПризнакВыбиратьИерархически	- Булево								- Выбирать пользователей подчиненных групп.
//
// Возвращаемое значение:
//	Массив - массив пользователей.
//
Функция ПолучитьПользователейГруппы(Знач ГруппаПользователей, Знач ПризнакВыбиратьИерархически = Ложь) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И (&ВыбиратьИерархически
	|				И ИСТИНА В
	|					(ВЫБРАТЬ
	|						ИСТИНА
	|					ИЗ
	|						РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|					ГДЕ
	|						СоставыГруппПользователей.Пользователь = Пользователи.Ссылка
	|						И СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
	|			ИЛИ (НЕ &ВыбиратьИерархически)
	|				И ИСТИНА В
	|					(ВЫБРАТЬ
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|					ГДЕ
	|						ГруппыПользователейСостав.Пользователь = Пользователи.Ссылка
	|						И ГруппыПользователейСостав.Ссылка = &ГруппаПользователей))
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование
	|");
	
	Запрос.УстановитьПараметр("ВыбиратьИерархически",	ПризнакВыбиратьИерархически);
	Запрос.УстановитьПараметр("ГруппаПользователей",	ГруппаПользователей);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Функция возвращает ссылочный тип по метаданным объекта.
//
// Параметры:
//	МетаданныеОбъекта	- МетаданныеОбъекта	- Метаданные объекта.
//
// Возвращаемое значение:
//	Неопределено или Тип - Ссылочный тип.
//
Функция ПолучитьСсылочныйТипПоМетаданнымОбъекта(МетаданныеОбъекта) Экспорт
	ИмяБазовогоСсылочногоТипа = Неопределено;
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ДокументСсылка";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "СправочникСсылка";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПланОбменаСсылка";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПланВидовХарактеристикСсылка";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "БизнесПроцессСсылка";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ЗадачаСсылка";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПланСчетовСсылка";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПланВидовРасчетаСсылка";
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
		ИмяБазовогоСсылочногоТипа = "ПеречислениеСсылка";
	КонецЕсли;
	Если ИмяБазовогоСсылочногоТипа = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Тип(ИмяБазовогоСсылочногоТипа + "." + МетаданныеОбъекта.Имя);
	КонецЕсли;
КонецФункции // ПолучитьСсылочныйТипПоМетаданнымОбъекта()

// Функция, используемая в процедуре ОтчетПриКомпоновкеРезультата.
//
// Параметры:
//	ЭлементыОтбора							- КоллекцияЭлементовОтбораКомпоновкиДанных	- Элементы отбора.
//	Идентификатор							- Строка									- Идентификатор пользовательской настройки.
//	ФиксированныеНастройкиЭлементыОтбора	- КоллекцияЭлементовОтбораКомпоновкиДанных	- Фиксированные элементы отбора.
//	СтруктураРезультат						- Структура									- Структура результата.
//
// Возвращаемое значение:
//	Неопределено или Структура	- Структура результата.
//
Функция НайтиВЭлементахОтбораПоИдентификатору(ЭлементыОтбора, Идентификатор, ФиксированныеНастройкиЭлементыОтбора, СтруктураРезультат = Неопределено)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
				Если СтруктураРезультат = Неопределено Тогда
					СтруктураРезультат = Новый Структура();
				КонецЕсли;
				СтруктураРезультат.Вставить("ЭлементОтбора", ЭлементОтбора);
				СтруктураРезультат.Вставить("ВидСравнения", ЭлементОтбора.ВидСравнения);
				Для Каждого ЭлементФиксированногоОтбора Из ФиксированныеНастройкиЭлементыОтбора Цикл
					Если ЭлементФиксированногоОтбора.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение Тогда
						СтруктураРезультат.Вставить("ЭлементФиксированногоОтбора", ЭлементФиксированногоОтбора);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайтиВЭлементахОтбораПоИдентификатору(ЭлементОтбора.Элементы, Идентификатор, ФиксированныеНастройкиЭлементыОтбора, СтруктураРезультат);
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураРезультат;
КонецФункции // НайтиВЭлементахОтбораПоИдентификатору()

// Процедура, используемая в процедуре ОтчетПриКомпоновкеРезультата.
//
// Параметры:
//	ЭлементыОтбора							- КоллекцияЭлементовОтбораКомпоновкиДанных	- Элементы отбора.
//
Процедура СброситьОтбор(ЭлементыОтбора)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора.Использование = Ложь;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СброситьОтбор(ЭлементОтбора.Элементы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СброситьОтбор()

// Процедура вызывается при компоновке результата отчета.
//
// Параметры:
//	ЭтотОбъект				- ОтчетОбъект						- Отчет
//	ДокументРезультат		- ТабличныйДокумент					- Табличный документ отчета.
//	ДанныеРасшифровки		- ДанныеРасшифровкиКомпоновкиДанных	- Данные расшифровки.
//	СтандартнаяОбработка	- Булево							- Флаг стандартной обработки.
//
Процедура ОтчетПриКомпоновкеРезультата(ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	Попытка
		ЭлементыПользовательскихНастроек = ЭтотОбъект.ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы
	Исключение
		ЭлементыПользовательскихНастроек = Неопределено;
	КонецПопытки;
	
	бПользовательскиеНастройкиИзменены = Ложь;
	Если ЭлементыПользовательскихНастроек <> Неопределено Тогда
		ФиксированныеНастройкиЭлементыОтбора = ЭтотОбъект.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
		Если ФиксированныеНастройкиЭлементыОтбора.Количество() > 0 Тогда
			// По умолчанию считаем, что создавать элементы отбора нужно в отборе в настройках компоновщика,
			// но если отбор вынесен в пользовательские настройки, то ниже переопределим эту переменную.
			ЭлементыОтбораДляДобавления = ЭтотОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы;
			Для Каждого ЭлементНастройки Из ЭлементыПользовательскихНастроек Цикл
				Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					// Элемент отбора вынесен в пользовательскую настройку в быстрый доступ.
					ЭлементНастройки.Использование = Ложь;
					ОписаниеЭлементаОтбора = НайтиВЭлементахОтбораПоИдентификатору(
						ЭтотОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы,
						ЭлементНастройки.ИдентификаторПользовательскойНастройки,
						ФиксированныеНастройкиЭлементыОтбора);
					Если ТипЗнч(ОписаниеЭлементаОтбора) = Тип("Структура") И ОписаниеЭлементаОтбора.Свойство("ЭлементФиксированногоОтбора") И ОписаниеЭлементаОтбора.ВидСравнения = ЭлементНастройки.ВидСравнения Тогда
						Если ОписаниеЭлементаОтбора.ЭлементФиксированногоОтбора.Использование Тогда
							ЭлементНастройки.ПравоеЗначение = ОписаниеЭлементаОтбора.ЭлементФиксированногоОтбора.ПравоеЗначение;
							ЭлементНастройки.Использование = Истина;
							ФиксированныеНастройкиЭлементыОтбора.Удалить(ОписаниеЭлементаОтбора.ЭлементФиксированногоОтбора);
						КонецЕсли;
					КонецЕсли;
					бПользовательскиеНастройкиИзменены = Истина;
				ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
					// Отбор вынесен в пользовательские настройки.
					СброситьОтбор(ЭлементНастройки.Элементы); // Проставляем всем элементам отбора Использование = Ложь.
					// Если отбор вынесен в пользовательские настройки, создавать элементы отбора нужно в нем.
					ЭлементыОтбораДляДобавления = ЭлементНастройки.Элементы;
					бПользовательскиеНастройкиИзменены = Истина;
				КонецЕсли;
			КонецЦикла;
			Если бПользовательскиеНастройкиИзменены Тогда
				Если ФиксированныеНастройкиЭлементыОтбора.Количество() > 0 Тогда
					CRM_ОбщегоНазначенияКлиентСервер.СкопироватьОтборКомпоновкиДанных(ЭлементыОтбораДляДобавления, ФиксированныеНастройкиЭлементыОтбора);
				КонецЕсли;
				// Очистим отбор, который автоматически сгенерировался платформой по параметру формы "Отбор".
				ФиксированныеНастройкиЭлементыОтбора.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОтчетПриКомпоновкеРезультата()

// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь() Экспорт
	Возврат Пользователи.АвторизованныйПользователь();
КонецФункции // сфпТекущийПользователь()

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки.
//
// Параметры:
//  ЛюбаяСсылка - значение любой ссылки информационной базы данных.
// 
// Возвращаемое значение:
//  Булево.
//
Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	Возврат ОбщегоНазначения.СсылкаСуществует(ЛюбаяСсылка);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции // СсылкаСуществует()

Функция НайтиВМетаданныхПоИмени(ПутьКОбъектуКоллекции = "", Имя = "") Экспорт
	
	Результат		= Ложь;
	ВыполняемыйКод	= "Результат = НЕ Метаданные";
	Массив			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКОбъектуКоллекции, ".", Ложь);
	
	Для Каждого ЭлементМассива ИЗ Массив Цикл
		ВыполняемыйКод = ВыполняемыйКод + "["""+ЭлементМассива+"""]";
	КонецЦикла;
	ВыполняемыйКод = ВыполняемыйКод + ".Найти("""+Имя+""") = Неопределено";
	
	Попытка
		Выполнить(ВыполняемыйКод);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого записывается значение по умолчанию
//  Значение     - значение
//
Процедура УстановитьЗначениеНастройки(Пользователь, Настройка, Значение) Экспорт

	СсылкаНастройки = ПланыВидовХарактеристик.CRM_НастройкиПользователей[Настройка];
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Настройка = СсылкаНастройки;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать();

КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

#КонецОбласти //ОбщиеПроцедурыИФункции


#Область РаботаСПользовательскимиНастройкамиДинамическихСписков

// Вспомогательная процедура, элементы отбора настроек, вызывается из
// ПользовательскиеНастройкиСпискаСкорректироватьЗагруженнуюНастройку.
//
// Параметры:
//  ЭлементыОтбора				- Элементы отбора компоновки данных	- Элементы отбора.
//  ЭтоОтборУсловногоОформления	- Булево							- Признак что это отбор условного оформления.
//
Процедура ПользовательскиеНастройкиСпискаСкорректироватьОтбор(ЭлементыОтбора, ЭтоОтборУсловногоОформления, ИдентификаторСписка, НаименованиеНастройки, Пользователь)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Поле = ЭлементОтбора.ЛевоеЗначение;
			Значение = ЭлементОтбора.ПравоеЗначение;
			ЭтоСписок = (ТипЗнч(Значение) = Тип("СписокЗначений"));
			
			Если ЭтоОтборУсловногоОформления Тогда
				// Пока в условном оформлении ничего корректировать не нужно.
			Иначе
				Если ИдентификаторСписка = "БизнесПроцесс.CRM_БизнесПроцесс" Тогда
					Если НаименованиеНастройки = "Претензии - Неразобранные" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("6.1 Разбор претензии"));
						// 6.1 Разбор претензии
						
					ИначеЕсли НаименованиеНастройки = "Претензии - Просроченные" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("6.1 Разбор претензии"));
						// 6.1 Разбор претензии
						
					ИначеЕсли НаименованиеНастройки = "Поручения - Невыполненные" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("2.1 Поручение"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("2.2 Поручение  (с доработкой)"));
						// 2.1 Поручение
						// 2.2 Поручение  (с доработкой).
						
					ИначеЕсли НаименованиеНастройки = "Поручения - Просроченные" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("2.1 Поручение"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("2.2 Поручение  (с доработкой)"));
						// 2.1 Поручение
						// 2.2 Поручение  (с доработкой).
						
					ИначеЕсли НаименованиеНастройки = "Согласования - Невыполненные" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("4.1 Согласование"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("5.1 Проведение рекламной кампании"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("3.1 Заключение договора"));
						// 4.1 Согласование
						// 5.1 Проведение рекламной кампании.
						// 3.1 Заключение договора
						
					ИначеЕсли НаименованиеНастройки = "Согласования - Просроченные" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("4.1 Согласование"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("5.1 Проведение рекламной кампании"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("3.1 Заключение договора"));
						// 4.1 Согласование
						// 5.1 Проведение рекламной кампании.
						// 3.1 Заключение договора
						
					ИначеЕсли НаименованиеНастройки = "Продажи - Текущие" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.1 Продажа"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.2 Продажа (быстрая)"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.3 Продажа (несколько направлений деятельности)"));
						// 1.1 Продажа
						// 1.2 Продажа (быстрая)
						// 1.3 Продажа (несколько направлений деятельности).
						
					ИначеЕсли НаименованиеНастройки = "Продажи - Просроченные" И Поле = Новый ПолеКомпоновкиДанных("КартаМаршрута") Тогда
						ЭлементОтбора.ПравоеЗначение.Очистить();
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.1 Продажа"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.2 Продажа (быстрая)"));
						ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.CRM_КартыМаршрутов.НайтиПоНаименованию("1.3 Продажа (несколько направлений деятельности)"));
						// 1.1 Продажа
						// 1.2 Продажа (быстрая)
						// 1.3 Продажа (несколько направлений деятельности).
						
					КонецЕсли;
				ИначеЕсли ИдентификаторСписка = "Документ.CRM_СчетНаОплатуПокупателю" Тогда
					Если НаименованиеНастройки = "Мои продажи за текущий месяц" И Поле = Новый ПолеКомпоновкиДанных("Ответственный") Тогда
						ЭлементОтбора.ПравоеЗначение = Пользователь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ПользовательскиеНастройкиСпискаСкорректироватьОтбор(ЭлементОтбора.Элементы, ЭтоОтборУсловногоОформления, ИдентификаторСписка, НаименованиеНастройки, Пользователь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Вспомогательная процедура, корректирует загруженные настройки, вызывается из
// ПользовательскиеНастройкиСпискаЗаполнитьПоУмолчанию.
//
// Параметры:
//  ИдентификаторСписка		- Строка	- Идентификатор списка.
//  НаименованиеНастройки	- Строка	- Наименование настройки.
//  СтруктураНастройки		- Структура	- Структура настройки.
//
Процедура ПользовательскиеНастройкиСпискаСкорректироватьЗагруженнуюНастройку(ИдентификаторСписка, НаименованиеНастройки, СтруктураНастройки, Знач ИмяПользователя = Неопределено)
	Отбор = СтруктураНастройки.Отбор;
	УсловноеОформление = СтруктураНастройки.УсловноеОформление;
	
	Пользователь = Неопределено;
	ИдентификаторПользователяИБ = Неопределено;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Если ПользовательИБ <> Неопределено Тогда
		ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи
		|ГДЕ
		|	ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ
		|");
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Пользователь = Выборка.Пользователь;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Отбор
	Если ТипЗнч(Отбор) = Тип("ОтборКомпоновкиДанных") Тогда
		ПользовательскиеНастройкиСпискаСкорректироватьОтбор(Отбор.Элементы, Ложь, ИдентификаторСписка, НаименованиеНастройки, Пользователь);
	КонецЕсли;
	
	// Отбор условного оформления
	Если ТипЗнч(УсловноеОформление) = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Для Каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
			ПользовательскиеНастройкиСпискаСкорректироватьОтбор(ЭлементУО.Отбор.Элементы, Истина, ИдентификаторСписка, НаименованиеНастройки, );
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура загружает все пользовательские настройки динамических списков из файла.
//
// Параметры:
//  ИмяФайла	- Строка	- Имя файла настроек.
//  ИмяМакета	- Строка	- Имя общего макета.
//
Функция ПользовательскиеНастройкиСпискаЗаполнитьПоУмолчанию(Знач ИмяМакета = Неопределено, Знач ИмяПользователя = Неопределено) Экспорт
	Если ИмяМакета = Неопределено Тогда
		ИмяМакета = "CRM_НастройкиВидаДинамическихСписков"
	КонецЕсли;
	
	ТекстXML = ПолучитьОбщийМакет(ИмяМакета).ПолучитьТекст();
	Если Не ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		СтрокаОшибкаФормата = СтрЗаменить(НСтр("ru = 'Ошибка формата данных макета: %ИмяМакета%!'"), "%ИмяМакета%", ИмяМакета);
	
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		Попытка
			ХранилищеСтруктуры = ПрочитатьXML(ЧтениеXML);
		Исключение
			ВызватьИсключение СтрокаОшибкаФормата;
		КонецПопытки;
		
		Попытка ЧтениеXML.Закрыть();
		Исключение КонецПопытки;
	
		Если ТипЗнч(ХранилищеСтруктуры) <> Тип("ХранилищеЗначения") Тогда
			ВызватьИсключение СтрокаОшибкаФормата;
		КонецЕсли;
		СтруктураЗаписи = ХранилищеСтруктуры.Получить();
		Если ТипЗнч(СтруктураЗаписи) <> Тип("Структура") Тогда
			ВызватьИсключение СтрокаОшибкаФормата;
		КонецЕсли;
		
		// Проверка обязательных полей структуры.
		Если	НЕ		СтруктураЗаписи.Свойство("МассивДеревьев")
				ИЛИ НЕ	СтруктураЗаписи.Свойство("МассивНастроек") Тогда
			ВызватьИсключение СтрокаОшибкаФормата;
		КонецЕсли;
		
		// Ручная корректировка настроек.
		Для Каждого СтруктураДерево Из СтруктураЗаписи.МассивДеревьев Цикл
			ИдентификаторСписка = СтруктураДерево.ИдентификаторСписка;
			Дерево = СтруктураДерево.Дерево;
			
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоКорневойЭлемент", Ложь), Истина);
			Если НайденныеСтроки.Количество() = 0 Тогда Продолжить; КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Для Каждого СтруктураНастройка Из СтруктураЗаписи.МассивНастроек Цикл
					ТекИдентификаторСписка = СтруктураНастройка.ИдентификаторСписка;
					ТекИдентификаторНастройки = СтруктураНастройка.ИдентификаторНастройки;
					
					Если ТекИдентификаторСписка = ИдентификаторСписка И ТекИдентификаторНастройки = НайденнаяСтрока.Идентификатор Тогда
						ПользовательскиеНастройкиСпискаСкорректироватьЗагруженнуюНастройку(ИдентификаторСписка, НайденнаяСтрока.Наименование, СтруктураНастройка.СтруктураНастройки, ИмяПользователя);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Сохранение
		Для Каждого СтруктураДерево Из СтруктураЗаписи.МассивДеревьев Цикл
			ИдентификаторСписка = СтруктураДерево.ИдентификаторСписка;
			Дерево = СтруктураДерево.Дерево;
			
			СохранитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, Дерево, ИмяПользователя);
		КонецЦикла;
		
		Для Каждого СтруктураНастройка Из СтруктураЗаписи.МассивНастроек Цикл
			ИдентификаторСписка = СтруктураНастройка.ИдентификаторСписка;
			ИдентификаторНастройки = СтруктураНастройка.ИдентификаторНастройки;
			СтруктураНастройки = СтруктураНастройка.СтруктураНастройки;
			
			СохранитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка, ИдентификаторНастройки, СтруктураНастройки, ИмяПользователя);
		КонецЦикла;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Попытка ЧтениеXML.Закрыть();
		Исключение КонецПопытки;
		ПредставлениеИнформацииОбОшибке = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПредставленияИнформацииОбОшибке(ИнформацияОбОшибке);
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), ПредставлениеИнформацииОбОшибке);
	КонецПопытки;
	
КонецФункции

// Функция возвращает структуру со свойствами динамического списка.
//
// Параметры:
//	ЭтаФорма												- УправляемаяФорма	- Форма
//	ИмяСписка												- Строка			- Имя списка.
//	ИдентификаторСписка										- Строка			- Идентификатор списка.
//	ИмяДереваНастроек										- Строка			- Имя дерева настроек.
//	ИмяКнопкиПользовательскиеНастройкиСписка				- Строка			- Имя кнопки пользовательских настроек.
//	ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная	- Строка			- Имя кнопки дерева пользовательских настроек.
//	ИмяЭлементаПодменю										- Строка			- Имя элемента подменю.
//	ИмяПеременнойТекущейНастройки							- Строка			- Имя переменной текущей настройки.
//	ИмяПроцедурыКоманды										- Строка			- Имя процедуры команды.
//
// Возвращаемое значение:
//	Структура	- Структура со свойствами динамического списка.
//
Функция ПолучитьСвойстваДинамическогоСписка(ЭтаФорма, ИмяСписка, ИдентификаторСписка, ИмяДереваНастроек = Неопределено,
												ИмяКнопкиПользовательскиеНастройкиСписка = Неопределено,
												ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная = Неопределено,
												ИмяЭлементаПодменю = Неопределено,
												ИмяПеременнойТекущейНастройки = Неопределено,
												ИмяПроцедурыКоманды = Неопределено) Экспорт
	СтруктураРезультат = Новый Структура(
	"ИмяСписка,
	|ДинамическоеСчитываниеДанных,
	|ОсновнаяТаблица,
	|ПроизвольныйЗапрос,
	|ТекстЗапроса,
	|ИдентификаторСписка,
	|ИмяДереваНастроек,
	|ИмяКнопкиПользовательскиеНастройкиСписка,
	|ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная,
	|ИмяЭлементаПодменю,
	|ИмяПеременнойТекущейНастройки,
	|ИмяПроцедурыКоманды");
	СтруктураРезультат.ИмяСписка = ИмяСписка;
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЭтаФорма[ИмяСписка]);
	СтруктураРезультат.ИдентификаторСписка										= ИдентификаторСписка;
	СтруктураРезультат.ИмяДереваНастроек										= ИмяДереваНастроек;
	СтруктураРезультат.ИмяКнопкиПользовательскиеНастройкиСписка					= ИмяКнопкиПользовательскиеНастройкиСписка;
	СтруктураРезультат.ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная	= ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная;
	СтруктураРезультат.ИмяЭлементаПодменю										= ИмяЭлементаПодменю;
	СтруктураРезультат.ИмяПеременнойТекущейНастройки							= ИмяПеременнойТекущейНастройки;
	СтруктураРезультат.ИмяПроцедурыКоманды										= ИмяПроцедурыКоманды;
	Возврат СтруктураРезультат;
КонецФункции // ПолучитьСвойстваДинамическогоСписка()

// Процедура обновляет список существующих идентификаторов пользовательских настроек динамических списков.
//
// Параметры:
//	ИдентификаторСписка		- Строка	- Идентификатор списка.
//
Процедура ОбновитьСписокСуществующихИдентификаторовПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, ИмяПользователя = Неопределено)
	КлючОбъекта = "Пользовательские_Настройки_Динамических_Списков";
	КлючНастроек = "МассивСуществующихИдентификаторов";
	
	МассивИдентификаторов = CRM_ХранилищеНастроек.Загрузить(КлючОбъекта, КлючНастроек,, ИмяПользователя);
	Если ТипЗнч(МассивИдентификаторов) <> Тип("Массив") Тогда
		МассивИдентификаторов = Новый Массив();
	КонецЕсли;
	
	Если МассивИдентификаторов.Найти(ИдентификаторСписка) = Неопределено Тогда
		МассивИдентификаторов.Добавить(ИдентификаторСписка);
		
		CRM_ХранилищеНастроек.Сохранить(КлючОбъекта, КлючНастроек, МассивИдентификаторов,, ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

// Процедура сохраняет пользовательские настройки динамического списка в хранилище настроек данных форм.
//
// Параметры:
//	ИдентификаторСписка		- Строка	- Идентификатор списка.
//	ИдентификаторНастройки	- Строка	- Идентификатор настройки.
//	СтруктураНастройки		- Строка	- Структура настройки.
//
Процедура СохранитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка, ИдентификаторНастройки, СтруктураНастройки, ИмяПользователя = Неопределено) Экспорт
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда Возврат; КонецЕсли;
	СтруктураДляСохранения = Новый Структура("Отбор,Группировка,УсловноеОформление");
	Если СтруктураНастройки.Свойство("Отбор") Тогда
		СтруктураДляСохранения.Отбор = Новый ХранилищеЗначения(СтруктураНастройки.Отбор, Новый СжатиеДанных(9));
	КонецЕсли;
	Если СтруктураНастройки.Свойство("Группировка") Тогда
		СтруктураДляСохранения.Группировка = Новый ХранилищеЗначения(СтруктураНастройки.Группировка, Новый СжатиеДанных(9));
	КонецЕсли;
	Если СтруктураНастройки.Свойство("УсловноеОформление") Тогда
		СтруктураДляСохранения.УсловноеОформление = Новый ХранилищеЗначения(СтруктураНастройки.УсловноеОформление, Новый СжатиеДанных(9));
	КонецЕсли;
	CRM_ХранилищеНастроек.Сохранить(ИдентификаторСписка, ИдентификаторНастройки, СтруктураДляСохранения,, ИмяПользователя);
	
	ОбновитьСписокСуществующихИдентификаторовПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, ИмяПользователя);
КонецПроцедуры // СохранитьПользовательскиеНастройкиДинамическогоСписка()

// Процедура удаляет пользовательские настройки динамического списка в хранилище настроек данных форм.
//
// Параметры:
//	ИдентификаторСписка		- Строка	- Идентификатор списка.
//	ИдентификаторНастройки	- Строка	- Идентификатор настройки.
//
Процедура УдалитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка, ИдентификаторНастройки, ИмяПользователя = Неопределено) Экспорт
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ТекущийПользователь <> Неопределено Тогда
		Если ТипЗнч(ИдентификаторНастройки) = Тип("Массив") Тогда
			Для Каждого Идентификатор Из ИдентификаторНастройки Цикл
				Попытка CRM_ХранилищеНастроек.Удалить(ИдентификаторСписка, Идентификатор, ?(ИмяПользователя = Неопределено, ТекущийПользователь.Имя, ИмяПользователя));
				Исключение КонецПопытки;
			КонецЦикла;
		Иначе
			Попытка CRM_ХранилищеНастроек.Удалить(ИдентификаторСписка, ИдентификаторНастройки, ?(ИмяПользователя = Неопределено, ТекущийПользователь.Имя, ИмяПользователя));
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьПользовательскиеНастройкиДинамическогоСписка()

// Функция восстанавливает пользовательские настройки динамического списка из хранилища настроек данных форм.
//
// Параметры:
//	ИдентификаторСписка		- Строка	- Идентификатор списка.
//	ИдентификаторНастройки	- Строка	- Идентификатор настройки.
//
// Возвращаемое значение:
//	Структура	- Структура со свойствами динамического списка.
//
Функция ВосстановитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка, ИдентификаторНастройки, ИмяПользователя = Неопределено) Экспорт
	СтруктураРезультат = Новый Структура("Отбор,Группировка,УсловноеОформление");
	СохраненныеДанные = CRM_ХранилищеНастроек.Загрузить(ИдентификаторСписка, ИдентификаторНастройки,, ИмяПользователя);
	Если ТипЗнч(СохраненныеДанные) <> Тип("Структура") Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	Если СохраненныеДанные.Свойство("Отбор") И ТипЗнч(СохраненныеДанные.Отбор) = Тип("ХранилищеЗначения") Тогда
		СохраненныйОтбор = СохраненныеДанные.Отбор.Получить();
		Если ТипЗнч(СохраненныйОтбор) = Тип("ОтборКомпоновкиДанных") Тогда
			СтруктураРезультат.Отбор = СохраненныйОтбор;
		КонецЕсли;
	КонецЕсли;
	Если СохраненныеДанные.Свойство("Группировка") И ТипЗнч(СохраненныеДанные.Группировка) = Тип("ХранилищеЗначения") Тогда
		СохраненнаяГруппировка = СохраненныеДанные.Группировка.Получить();
		Если ТипЗнч(СохраненнаяГруппировка) = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
			СтруктураРезультат.Группировка = СохраненнаяГруппировка;
		КонецЕсли;
	КонецЕсли;
	Если СохраненныеДанные.Свойство("УсловноеОформление") И ТипЗнч(СохраненныеДанные.УсловноеОформление) = Тип("ХранилищеЗначения") Тогда
		СохраненноеУсловноеОформление = СохраненныеДанные.УсловноеОформление.Получить();
		Если ТипЗнч(СохраненноеУсловноеОформление) = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
			СтруктураРезультат.УсловноеОформление = СохраненноеУсловноеОформление;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураРезультат;
КонецФункции // ВосстановитьПользовательскиеНастройкиДинамическогоСписка()

// Процедура сохраняет дерево пользовательских настроек динамического списка в хранилище настроек данных форм.
//
// Параметры:
//	ИдентификаторСписка		- Строка			- Идентификатор списка.
//	ДеревоНастроек			- ДеревоЗначений	- Дерево настроек.
//
Процедура СохранитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, Знач ДеревоНастроек, ИмяПользователя = Неопределено) Экспорт
	СохраняемыеКолонки = Новый Массив();
	СохраняемыеКолонки.Добавить("Идентификатор");
	СохраняемыеКолонки.Добавить("Наименование");
	СохраняемыеКолонки.Добавить("ЭтоКорневойЭлемент");
	СохраняемыеКолонки.Добавить("ЭтоОсновнаяНастройка");
	
	КолонкиДляУдаления = Новый Массив();
	Для Каждого Колонка Из ДеревоНастроек.Колонки Цикл
		Если СохраняемыеКолонки.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиДляУдаления.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяКолонка Из КолонкиДляУдаления Цикл
		ДеревоНастроек.Колонки.Удалить(ДеревоНастроек.Колонки[УдаляемаяКолонка]);
	КонецЦикла;
	
	CRM_ХранилищеНастроек.Сохранить(ИдентификаторСписка, "ДеревоНастроек", ДеревоНастроек,, ИмяПользователя);
	
	ОбновитьСписокСуществующихИдентификаторовПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, ИмяПользователя);
	
	// Синхронизация дерева и сохраненных настроек - что-бы не оставалось "мусорных" настроек, не связанных с деревом.
	НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоКорневойЭлемент", Ложь), Истина);
	СуществующиеИдентификаторы = Новый Массив();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СуществующиеИдентификаторы.Добавить(НайденнаяСтрока.Идентификатор);
	КонецЦикла;
	
	ИдентификаторыДляУдаления = Новый Массив();
	
	СписокСохраненныхНастроек = CRM_ХранилищеНастроек.ПолучитьСписок(ИдентификаторСписка, ИмяПользователя);
	
	Для Каждого СохраненнаяНастройка Из СписокСохраненныхНастроек Цикл
		бЭтоУникальныйИдентификатор = Ложь;
		Попытка
			ТестовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(СохраненнаяНастройка.Значение);
			бЭтоУникальныйИдентификатор = Истина;
		Исключение КонецПопытки;
		Если Не бЭтоУникальныйИдентификатор Тогда Продолжить; КонецЕсли;
		
		Если СуществующиеИдентификаторы.Найти(СохраненнаяНастройка.Значение) = Неопределено Тогда
			ИдентификаторыДляУдаления.Добавить(СохраненнаяНастройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыДляУдаления.Количество() > 0 Тогда
		УдалитьПользовательскиеНастройкиДинамическогоСписка(ИдентификаторСписка, ИдентификаторыДляУдаления);
	КонецЕсли;
КонецПроцедуры // СохранитьДеревоПользовательскихНастроекДинамическогоСписка()

// Функция восстанавливает дерево пользовательских настроек динамического списка из хранилища настроек данных форм.
//
// Параметры:
//	ИдентификаторСписка	- Строка	- Идентификатор списка.
//
// Возвращаемое значение:
//	ДеревоЗначение	- Дерево настроек динамического списка.
//
Функция ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, ИмяПользователя = Неопределено) Экспорт
	Дерево = CRM_ХранилищеНастроек.Загрузить(ИдентификаторСписка, "ДеревоНастроек",, ИмяПользователя);
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Если ТипЗнч(Дерево) <> Тип("ДеревоЗначений") Или Дерево.Строки.Количество() = 0 Или Дерево.Строки[0].ЭтоКорневойЭлемент <> Истина Тогда
		Дерево = Новый ДеревоЗначений();
		
		Дерево.Колонки.Добавить("Идентификатор",			ОписаниеТиповСтрока);
		Дерево.Колонки.Добавить("Наименование",				ОписаниеТиповСтрока);
		Дерево.Колонки.Добавить("ЭтоКорневойЭлемент",		ОписаниеТиповБулево);
		
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Идентификатор		= "";
		НоваяСтрока.ЭтоКорневойЭлемент	= Истина;
	КонецЕсли;
	
	Если Дерево.Колонки.Найти("ЭтоОсновнаяНастройка") = Неопределено Тогда
		Дерево.Колонки.Добавить("ЭтоОсновнаяНастройка",	ОписаниеТиповБулево);
	КонецЕсли;
	
	Дерево.Строки[0].Наименование = НСтр("ru = 'Все'");
	
	Возврат Дерево;
КонецФункции // ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка()

// Процедура восстанавливает из сохраненных настроек и обновляет на форме дерево настроек списка.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Свойства динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаОбновитьДеревоНастроек(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	Если СвойстваДинамическогоСписка.ИмяДереваНастроек <> Неопределено Тогда
		Дерево = ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(СвойстваДинамическогоСписка.ИдентификаторСписка);
		Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
			ЭлементыДерева = ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы();
			ЭлементыДерева.Очистить();
			CRM_ОбщегоНазначенияКлиентСервер.СкопироватьДеревоВРеквизитФормы(Дерево.Строки, ЭлементыДерева);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаОбновитьДеревоНастроек()
	
// Процедура вызывается из обработчика формы ПриСозданииНаСервере для инициализации дерева пользовательских настроек
// списка.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Свойства динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	Если СвойстваДинамическогоСписка.ИмяДереваНастроек <> Неопределено Тогда
		ПользовательскиеНастройкиСпискаОбновитьДеревоНастроек(ЭтаФорма, СвойстваДинамическогоСписка);
		Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка <> Неопределено Тогда
			КнопкаНастройкиСпискаПометка = CRM_ХранилищеНастроек.Загрузить(СвойстваДинамическогоСписка.ИдентификаторСписка, "ВидимостьНастроек");
			Если КнопкаНастройкиСпискаПометка = Неопределено Тогда
				КнопкаНастройкиСпискаПометка = Истина;
			КонецЕсли;
			ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка = КнопкаНастройкиСпискаПометка;
		КонецЕсли;
	ИначеЕсли СвойстваДинамическогоСписка.ИмяЭлементаПодменю <> Неопределено Тогда
		НастройкаПоУмолчанию = ПользовательскиеНастройкиСпискаПолучитьНастройкуПоУмолчанию(СвойстваДинамическогоСписка.ИдентификаторСписка);
		Если НастройкаПоУмолчанию <> Неопределено Тогда
			ЭтаФорма[СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки] = НастройкаПоУмолчанию.Идентификатор;
			CRM_ОбщегоНазначенияКлиентСервер.ПрименитьПользовательскиеНастройкиКДинамическомуСписку(
				ЭтаФорма[СвойстваДинамическогоСписка.ИмяСписка], ЭтаФорма[СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки],
				СвойстваДинамическогоСписка.ИдентификаторСписка);
		КонецЕсли;
		ПользовательскиеНастройкиСпискаЗаполнитьПодменюНастроек(ЭтаФорма, СвойстваДинамическогоСписка);
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаПриСозданииНаСервере()

// Процедура сохраняет настройки формы, связанные с пользовательскими настройками списка.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Свойства динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаСохранитьНастройкиФормы(ЭтаФорма, СвойстваДинамическогоСписка, ИмяПользователя = Неопределено) Экспорт
	Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка <> Неопределено Тогда
		КнопкаНастройкиСпискаПометка = ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка;
		CRM_ХранилищеНастроек.Сохранить(СвойстваДинамическогоСписка.ИдентификаторСписка, "ВидимостьНастроек", КнопкаНастройкиСпискаПометка,, ИмяПользователя);
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаСохранитьНастройкиФормы()

// Функция возвращает список существующих пользовательских настроек для динамического списка.
//
// Параметры:
//	ИдентификаторСписка	- Строка	- Идентификатор списка.
//
// Возвращаемое значение:
//	СписокЗначений	- Список существующих пользовательских настроек для динамического списка.
//
Функция ПользовательскиеНастройкиСпискаПолучитьСписокНастроек(ИдентификаторСписка, ИмяПользователя = Неопределено) Экспорт
	Список = Новый СписокЗначений();
	
	Дерево = ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка);
	
	Список.Добавить(Дерево.Строки[0].Идентификатор, Дерево.Строки[0].Наименование, Дерево.Строки[0].ЭтоОсновнаяНастройка);
	
	СписокСохраненныхНастроек = CRM_ХранилищеНастроек.ПолучитьСписок(ИдентификаторСписка, ИмяПользователя);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоКорневойЭлемент", Ложь), Истина);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Идентификатор) Тогда Продолжить; КонецЕсли;
		
		Попытка		ТестоваяПеременная = Новый УникальныйИдентификатор(НайденнаяСтрока.Идентификатор);
		Исключение	Продолжить;
		КонецПопытки;
		
		НайденноеЗначение = СписокСохраненныхНастроек.НайтиПоЗначению(НайденнаяСтрока.Идентификатор);
		Если НайденноеЗначение = Неопределено Тогда Продолжить; КонецЕсли;
		
		Наименование = НайденнаяСтрока.Наименование;
		
		Список.Добавить(НайденнаяСтрока.Идентификатор, Наименование, НайденнаяСтрока.ЭтоОсновнаяНастройка);
	КонецЦикла;
	
	Возврат Список;
КонецФункции // ПользовательскиеНастройкиСпискаПолучитьСписокНастроек()

// Функция возвращает идентификатор пользовательской настройки по умолчанию.
//
// Параметры:
//	ИдентификаторСписка	- Строка	- Идентификатор списка.
//
// Возвращаемое значение:
//	Неопределено или Структура	- Структура пользовательской настройки.
//
Функция ПользовательскиеНастройкиСпискаПолучитьНастройкуПоУмолчанию(ИдентификаторСписка) Экспорт
	ДеревоНастроек = ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка);
	НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоОсновнаяНастройка", Истина), Истина);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Идентификатор,Наименование", НайденныеСтроки[0].Идентификатор, НайденныеСтроки[0].Наименование);
	КонецЕсли;
КонецФункции // ПользовательскиеНастройкиСпискаПолучитьНастройкуПоУмолчанию()

// Функция устанавливает пользовательскую настройку списка по умолчанию по идентификатору.
//
// Параметры:
//	ИдентификаторСписка		- Строка	- Идентификатор списка.
//	ИдентификаторНастройки	- Строка	- Идентификатор настройки.
//
// Возвращаемое значение:
//	Булево	- Признак установки настройки.
//
Функция ПользовательскиеНастройкиСпискаУстановитьНастройкуПоУмолчанию(ИдентификаторСписка, ИдентификаторНастройки) Экспорт
	ДеревоНастроек = ВосстановитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка);
	НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоОсновнаяНастройка", Истина), Истина);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЭтоОсновнаяНастройка = Ложь;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторНастройки), Истина);
	Иначе
		НайденныеСтроки = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоКорневойЭлемент", Истина), Истина);
	КонецЕсли;
	бНастройкаНайдена = Ложь;
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].ЭтоОсновнаяНастройка = Истина;
		бНастройкаНайдена = Истина;
	КонецЕсли;
	
	СохранитьДеревоПользовательскихНастроекДинамическогоСписка(ИдентификаторСписка, ДеревоНастроек);
	
	Возврат бНастройкаНайдена;
КонецФункции // ПользовательскиеНастройкиСпискаУстановитьНастройкуПоУмолчанию()

// Процедура заполняет подменю пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Свойства динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаЗаполнитьПодменюНастроек(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	ИмяЭлементаПодменю				= СвойстваДинамическогоСписка.ИмяЭлементаПодменю;
	ИмяПеременнойТекущейНастройки	= СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки;
	ИмяПроцедурыКоманды				= СвойстваДинамическогоСписка.ИмяПроцедурыКоманды;
	
	ПодменюНастроек = ЭтаФорма.Элементы[ИмяЭлементаПодменю];
	
	ПодменюНастроек.Подсказка = НСтр("ru = 'Список настроенных пользователем отборов и группировок'");
	
	Пока ПодменюНастроек.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элемент = ПодменюНастроек.ПодчиненныеЭлементы.Получить(ПодменюНастроек.ПодчиненныеЭлементы.Количество() - 1);
		ЭтаФорма.Элементы.Удалить(Элемент);
	КонецЦикла;
	
	СписокНастроек = ПользовательскиеНастройкиСпискаПолучитьСписокНастроек(СвойстваДинамическогоСписка.ИдентификаторСписка);
	
	ЗаголовокПодменю = "";
	
	ИдентификаторТекущейНастройки = ЭтаФорма[ИмяПеременнойТекущейНастройки];
	
	ИмяКомандыБезНастроек = "КомандаПользовательскиеНастройкиСписка_БезНастроек_" + СвойстваДинамическогоСписка.ИмяСписка;
	КомандаБезНастроек = ЭтаФорма.Команды.Найти(ИмяКомандыБезНастроек);
	Если КомандаБезНастроек = Неопределено Тогда
		КомандаБезНастроек = ЭтаФорма.Команды.Добавить(ИмяКомандыБезНастроек);
		КомандаБезНастроек.Действие = ИмяПроцедурыКоманды;
		КомандаБезНастроек.Заголовок = НСтр("ru = 'Все'");
	КонецЕсли;
	
	ГруппаБезНастроек = ЭтаФорма.Элементы.Добавить(
		"ГруппаПользовательскиеНастройкиСписка_БезНастроек_" + СвойстваДинамическогоСписка.ИмяСписка, Тип("ГруппаФормы"), ПодменюНастроек);
	//
	ГруппаБезНастроек.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	КнопкаБезНастроек = ЭтаФорма.Элементы.Добавить(
		"КнопкаПользовательскиеНастройкиСписка_БезНастроек_" + СвойстваДинамическогоСписка.ИмяСписка, Тип("КнопкаФормы"), ГруппаБезНастроек);
	//
	КнопкаБезНастроек.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаБезНастроек.Заголовок = НСтр("ru = 'Все'");
	КнопкаБезНастроек.Пометка = Не ЗначениеЗаполнено(ИдентификаторТекущейНастройки);
	КнопкаБезНастроек.ИмяКоманды = ИмяКомандыБезНастроек;
	
	бТекущаяНастройкаУстановлена = КнопкаБезНастроек.Пометка;
	
	Для Каждого ЗначениеСписка Из СписокНастроек Цикл
		Попытка
			ТестУникальныйИдентификатор = Новый УникальныйИдентификатор(ЗначениеСписка.Значение);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ИдентификаторБезЗапрещенныхСимволов = СтрЗаменить(ЗначениеСписка.Значение, "-", "_");
		ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_" + ИдентификаторБезЗапрещенныхСимволов + "_" + СвойстваДинамическогоСписка.ИмяСписка;
		ИмяКоманды = "КомандаПользовательскиеНастройкиСписка_" + ИдентификаторБезЗапрещенныхСимволов + "_" + СвойстваДинамическогоСписка.ИмяСписка;
		
		Заголовок = ?(ЗначениеЗаполнено(ЗначениеСписка.Представление), ЗначениеСписка.Представление, НСтр("ru = '[]'"));
		
		Команда = ЭтаФорма.Команды.Найти(ИмяКоманды);
		Если Команда = Неопределено Тогда
			Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
			Команда.Действие = ИмяПроцедурыКоманды;
			Команда.Заголовок = Заголовок;
		КонецЕсли;
		
		Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ПодменюНастроек);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.Заголовок = Заголовок;
		Кнопка.Пометка = (ЗначениеСписка.Значение = ИдентификаторТекущейНастройки);
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		Если Не бТекущаяНастройкаУстановлена Тогда
			бТекущаяНастройкаУстановлена = Кнопка.Пометка;
		КонецЕсли;
		
		Если Кнопка.Пометка Тогда
			ЗаголовокПодменю = Кнопка.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаголовокПодменю) Тогда
		Если СтрДлина(ЗаголовокПодменю) > 40 Тогда
			ЗаголовокПодменю = Лев(ЗаголовокПодменю, 40-3) + "...";
		КонецЕсли;
		ПодменюНастроек.Заголовок = ЗаголовокПодменю;
	Иначе
		ПодменюНастроек.Заголовок = НСтр("ru = 'Все'");
	КонецЕсли;
	
	Если Не бТекущаяНастройкаУстановлена Тогда
		КнопкаБезНастроек.Пометка = Истина;
	КонецЕсли;
	
	ГруппаНастройки = ЭтаФорма.Элементы.Добавить(
		"ГруппаПользовательскиеНастройкиСписка_Настройки_" + СвойстваДинамическогоСписка.ИмяСписка, Тип("ГруппаФормы"), ПодменюНастроек);
	//
	ГруппаНастройки.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ИмяКоманды = "КомандаПользовательскиеНастройкиСписка_Настройки_" + СвойстваДинамическогоСписка.ИмяСписка;
	Команда = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		Команда.Действие = ИмяПроцедурыКоманды;
		Команда.Заголовок = НСтр("ru = 'Настройки...'");;
	КонецЕсли;
	ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_Настройки_" + СвойстваДинамическогоСписка.ИмяСписка;
	Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаНастройки);
	Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Кнопка.Заголовок = НСтр("ru = 'Настройки...'");
	Кнопка.ИмяКоманды = ИмяКоманды;
	Кнопка.Картинка = БиблиотекаКартинок.CRM_Настройки;
	Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
КонецПроцедуры // ПользовательскиеНастройкиСпискаЗаполнитьПодменюНастроек()

#КонецОбласти //РаботаСПользовательскимиНастройкамиДинамическихСписков


#Область РаботаСНастройкамиПолейОтображенияСодержания

// Процедура заполняет настройки по умолчанию из макета для указанного типа объекта.
//
// Параметры:
//	Объект			- Тип, ОписаниеТипов или Строка, вида "ДокументСсылка.CRM_Взаимодействие".
//	ИмяПользователя - Строка
//
Процедура НастройкиПолейОтображенияСодержанияЗаполнитьНастройкиОбъектаПоУмолчанию(Объект, ИмяПользователя) Экспорт
	
	ТаблицаБланк = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
	
	НастройкаОбъектаПоУмолчанию = НастройкиПолейОтображенияСодержанияПолучитьНастройки(Объект, Истина);
	Если НастройкаОбъектаПоУмолчанию.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Колонка Из ТаблицаБланк.Колонки Цикл
		Если НастройкаОбъектаПоУмолчанию.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			НастройкаОбъектаПоУмолчанию.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиТекущие = НастройкиПолейОтображенияСодержанияПолучитьНастройки();
	Для Каждого Колонка Из ТаблицаБланк.Колонки Цикл
		Если НастройкиТекущие.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			НастройкиТекущие.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	НайденнаяСтрока = НастройкиТекущие.Найти(Объект, "Объект");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = НастройкиТекущие.Добавить();
		НайденнаяСтрока.Объект = Объект;
		НайденнаяСтрока.ДеревоНастроек = НастройкаОбъектаПоУмолчанию[0].ДеревоНастроек.Скопировать();
	Иначе
		НайденнаяСтрока.ДеревоНастроек = НастройкаОбъектаПоУмолчанию[0].ДеревоНастроек.Скопировать();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, НастройкаОбъектаПоУмолчанию[0],, "ДеревоНастроек");
	
	НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(НастройкиТекущие, ИмяПользователя);
	
КонецПроцедуры

// Функция возвращает Истина, если тип реквизита считается ссылочным.
//
// Параметры:
//	РеквизитИлиТип	- Произвольный	- Реквизит или тип реквизита.
//
// Возвращаемое значение:
//	Булево	- Признак ссылочного типа реквизита.
//
Функция НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(РеквизитИлиТип) Экспорт
	Если ТипЗнч(РеквизитИлиТип) = Тип("Тип") Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(РеквизитИлиТип);
		ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ТипЗнч(РеквизитИлиТип) = Тип("ОписаниеТипов") Тогда
		ТипЗначения = РеквизитИлиТип;
	Иначе
		ТипЗначения = РеквизитИлиТип.Тип;
	КонецЕсли;
	Типы = ТипЗначения.Типы();
	Для Каждого Тип Из Типы Цикл
		Если	Не Справочники.ТипВсеСсылки().СодержитТип(Тип)
			И	Не Документы.ТипВсеСсылки().СодержитТип(Тип)
			И	Не ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
			И	Не ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
			И	Не ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
			И	Не БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
			И	Не Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции // НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка()

// Функция возвращает строковое представление ссылочного типа.
//
// Параметры:
//	Тип	- Тип	- Тип реквизита
//
// Возвращаемое значение:
//	Строка	- Строковое представление ссылочного типа.
//
Функция НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип) Экспорт
	Попытка
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Исключение
		ОбъектМетаданных = Неопределено;
	КонецПопытки;
	Если ОбъектМетаданных = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "СправочникСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "ДокументСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланВидовХарактеристикСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланСчетовСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланВидовРасчетаСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат "БизнесПроцессСсылка." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат "ЗадачаСсылка." + ОбъектМетаданных.Имя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой()

// Функция возвращает пустую таблицу-бланк для сохранения / восстановления настроек полей отображения содержания.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Пустая таблица значений.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк()
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ШиринаЛевойКолонкиАбсолютная", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ШиринаПравойКолонкиАбсолютная", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ШиринаЛевойКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ШиринаПравойКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ДеревоНастроек");
	Возврат Таблица;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк()

// Функция преобразует дерево с настройками полей отображения содержания в таблицу значений, используемую для
// сохранения настроек.
//
// Параметры:
//	Дерево	- ДеревоЗначений	- Дерево с настройками полей отображения содержания.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица значений для сохранения настроек.
//
Функция НастройкиПолейОтображенияСодержанияПреобразоватьДеревоВТаблицу(Дерево)
	Таблица = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
	Для Каждого СтрокаВерхнегоУровня Из Дерево.Строки Цикл
		Для Каждого СтрокаОбъект Из СтрокаВерхнегоУровня.Строки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаОбъект.Объект) Тогда Продолжить; КонецЕсли;
			НайденнаяСтрока = Таблица.Найти(СтрокаОбъект.Объект, "Объект");
			Если НайденнаяСтрока <> Неопределено Тогда Продолжить; КонецЕсли;
			Если СтрокаОбъект.ДеревоНастроек.Строки.Количество() = 0 Тогда Продолжить; КонецЕсли;
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Объект = СтрокаОбъект.Объект;
			НоваяСтрока.ДеревоНастроек = СтрокаОбъект.ДеревоНастроек;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъект,, "ДеревоНастроек");
		КонецЦикла;
	КонецЦикла;
	Возврат Таблица;
КонецФункции // НастройкиПолейОтображенияСодержанияПреобразоватьДеревоВТаблицу()

// Функция возвращает ключ для сохранения и восстановления настроек.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Ключ для сохранения и восстановления настроек.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления()
	Возврат "_НастройкиПолейОтображенияСодержания_";
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления()

// Процедура сохраняет таблицу настроек полей отображения содержания.
//
// Параметры:
//	ТаблицаНастройки	- ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//
Процедура НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаНастройки, ИмяПользователя = Неопределено) Экспорт
	КлючОбъекта = НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления();
	Если ИмяПользователя = Неопределено Тогда
		CRM_ХранилищеНастроек.Сохранить(КлючОбъекта, "ТаблицаНастройки", ТаблицаНастройки);
	Иначе
		CRM_ХранилищеНастроек.Сохранить(КлючОбъекта, "ТаблицаНастройки", ТаблицаНастройки,, ИмяПользователя);
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек()

// Процедура сохраняет настройки полей отображения содержания.
//
// Параметры:
//	Дерево					- ДеревоЗначений	- Дерево с настройками полей отображения содержания.
//	ЗаместитьВсеНастройки	- Булево			- Флаг замены настроек.
//
Процедура НастройкиПолейОтображенияСодержанияСохранитьНастройки(Дерево, ЗаместитьВсеНастройки = Ложь,НастройкиПоУмолчаниюДляВсех = Ложь) Экспорт
	ТаблицаНастройки = НастройкиПолейОтображенияСодержанияПреобразоватьДеревоВТаблицу(Дерево);
	Если ЗаместитьВсеНастройки Тогда
		НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаНастройки);
	Иначе
		ТаблицаБланк = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
		ТаблицаСохраненная = НастройкиПолейОтображенияСодержанияПолучитьНастройки();
		Для Каждого Колонка Из ТаблицаБланк.Колонки Цикл
			Если ТаблицаСохраненная.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				ТаблицаСохраненная.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
			НайденнаяСтрока = ТаблицаСохраненная.Найти(СтрокаТаблицы.Объект, "Объект");
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = ТаблицаСохраненная.Добавить();
				НайденнаяСтрока.Объект = СтрокаТаблицы.Объект;
				НайденнаяСтрока.ДеревоНастроек = СтрокаТаблицы.ДеревоНастроек.Скопировать();
			Иначе
				НайденнаяСтрока.ДеревоНастроек = СтрокаТаблицы.ДеревоНастроек.Скопировать();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТаблицы,, "ДеревоНастроек");
		КонецЦикла;
		НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаСохраненная);
	КонецЕсли;
	
	// Начало Настройка отображения полей редактирование. запись в регистр сведений  вогНастройкиПолейОтображенияСодержания

	РСвогНастройкиПолейОтображенияСодержания 						= РегистрыСведений.вогНастройкиПолейОтображенияСодержания.СоздатьМенеджерЗаписи();
	РСвогНастройкиПолейОтображенияСодержания.ИспользоватьДляВсех 	= НастройкиПоУмолчаниюДляВсех;
	РСвогНастройкиПолейОтображенияСодержания.Пользователь 			= ?(НастройкиПоУмолчаниюДляВсех,Справочники.Пользователи.ПустаяСсылка()
																	,Пользователи.ТекущийПользователь());
	РСвогНастройкиПолейОтображенияСодержания.Макет 					= Новый ХранилищеЗначения(?(ЗаместитьВсеНастройки,ТаблицаНастройки,ТаблицаСохраненная),Новый СжатиеДанных(9));
	РСвогНастройкиПолейОтображенияСодержания.Записать();
	
	// Конец Настройка отображения полей редактирование. запись в регистр сведений  вогНастройкиПолейОтображенияСодержания

	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры // НастройкиПолейОтображенияСодержанияСохранитьНастройки()

// Функция восстанавливает настройки полей отображения содержания.
//
// Параметры:
//	ПолучитьДляОбъектаИлиТипа		- Произвольный		- Объект или тип.
//	ПолучитьНастройкиПоУмолчанию	- Булево			- Получить настройки по умолчанию.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьНастройки(ПолучитьДляОбъектаИлиТипа = Неопределено, ПолучитьНастройкиПоУмолчанию = Ложь) Экспорт
	Если ПолучитьДляОбъектаИлиТипа = Неопределено Тогда
		МассивФильтрПоОбъектам = Неопределено;
	Иначе
		МассивФильтрПоОбъектам = Новый Массив();
		Если ТипЗнч(ПолучитьДляОбъектаИлиТипа) = Тип("Строка") Тогда
			МассивФильтрПоОбъектам.Добавить(ПолучитьДляОбъектаИлиТипа);
		ИначеЕсли ТипЗнч(ПолучитьДляОбъектаИлиТипа) = Тип("ОписаниеТипов") Тогда
			Для Каждого Тип Из ПолучитьДляОбъектаИлиТипа.Типы() Цикл
				Если НЕ НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(Тип) Тогда Продолжить; КонецЕсли;
				ТипСтрокой = НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип);
				Если ТипСтрокой <> Неопределено Тогда
					МассивФильтрПоОбъектам.Добавить(ТипСтрокой);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПолучитьДляОбъектаИлиТипа) = Тип("Тип") Тогда
			Если НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(ПолучитьДляОбъектаИлиТипа) Тогда
				ТипСтрокой = НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(ПолучитьДляОбъектаИлиТипа);
				Если ТипСтрокой <> Неопределено Тогда
					МассивФильтрПоОбъектам.Добавить(ТипСтрокой);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КлючОбъекта = НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления();
	
	Если ПолучитьНастройкиПоУмолчанию Тогда
		ТаблицаНастройки = НастройкиПолейОтображенияСодержанияПолучитьНастройкиПоУмолчанию();
	Иначе
		ТаблицаНастройки = CRM_ХранилищеНастроекПовтИсп.Загрузить(КлючОбъекта, "ТаблицаНастройки");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаНастройки) = Тип("ТаблицаЗначений") Тогда
		ТаблицаНастройки = НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаНастройки);
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультат = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
	ИначеЕсли МассивФильтрПоОбъектам <> Неопределено Тогда
		ТаблицаПоФильтру = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
		Для Каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
			Если МассивФильтрПоОбъектам.Найти(СтрокаТаблицы.Объект) = Неопределено Тогда Продолжить; КонецЕсли;
			НоваяСтрока = ТаблицаПоФильтру.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		ТаблицаРезультат = ТаблицаПоФильтру;
	Иначе
		ТаблицаРезультат = ТаблицаНастройки;
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьНастройки()

// Процедура вызывается из обработчика <ПриСозданииНаСервере> формы, в которой есть поле отображения содержания.
//
// Параметры:
//	ЭтаФорма											- УправляемаяФорма	- Форма
//	ИдентификаторСписка									- Строка			- Идентификатор списка.
//	ИмяГруппыПоляОтображенияСодержания 					- Строка			- Имя группы поля отображения содержания.
//	ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания	- Строка			- Имя кнопки отображения содержания.
//
Процедура НастройкиПолейОтображенияСодержанияПриСозданииФормыСпискаНаСервере(ЭтаФорма,
																			ИдентификаторСписка = Неопределено,
																			ИмяГруппыПоляОтображенияСодержания = "ГруппаПолеОтображенияСодержания",
																			ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания = "КнопкаПоказатьСкрытьПолеОтображенияСодержания") Экспорт
	КлючОбъекта = НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления();
	Если ИдентификаторСписка = Неопределено Тогда
		Попытка		ИдентификаторСписка = ЭтаФорма.ИмяФормы;
		Исключение	ИдентификаторСписка = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если ИдентификаторСписка = Неопределено Тогда Возврат; КонецЕсли;
	Попытка
		Кнопка = ЭтаФорма.Элементы[ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания];
	Исключение
		Кнопка = Неопределено;
	КонецПопытки;
	Если Кнопка = Неопределено Тогда
		бВидимость = Истина;
	Иначе
		Кнопка.Пометка = (CRM_ХранилищеНастроек.Загрузить(КлючОбъекта, ИдентификаторСписка 
			+ "_КнопкаПоказатьСкрытьПолеОтображенияСодержанияПометка") <> Ложь);
		бВидимость = Кнопка.Пометка;
	КонецЕсли;
	Если ЭтаФорма.Элементы[ИмяГруппыПоляОтображенияСодержания].Видимость <> бВидимость Тогда
		ЭтаФорма.Элементы[ИмяГруппыПоляОтображенияСодержания].Видимость = бВидимость;
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПриСозданииФормыСпискаНаСервере()

// Процедура вызывается из обработчика <ПриЗакрытии> форма,  в которой есть поле отображения содержания.
//
// Параметры:
//	ЭтаФорма											- УправляемаяФорма	- Форма
//	ИдентификаторСписка									- Строка			- Идентификатор списка.
//	ИмяГруппыПоляОтображенияСодержания 					- Строка			- Имя группы поля отображения содержания.
//	ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания	- Строка			- Имя кнопки отображения содержания.
//
Процедура НастройкиПолейОтображенияСодержанияПриЗакрытииФормыСписка(ЭтаФорма,
																	ИдентификаторСписка = Неопределено,
																	ИмяГруппыПоляОтображенияСодержания = "ГруппаПолеОтображенияСодержания",
																	ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания = "КнопкаПоказатьСкрытьПолеОтображенияСодержания") Экспорт
	КлючОбъекта = НастройкиПолейОтображенияСодержанияПолучитьКлючОбъектаДляСохраненияВосстановления();
	Если ИдентификаторСписка = Неопределено Тогда
		Попытка
			ИдентификаторСписка = ЭтаФорма.ИмяФормы;
		Исключение
			ИдентификаторСписка = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если ИдентификаторСписка = Неопределено Тогда Возврат; КонецЕсли;
	Попытка
		Кнопка = ЭтаФорма.Элементы[ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания];
	Исключение
		Кнопка = Неопределено;
	КонецПопытки;
	Если Кнопка <> Неопределено Тогда
		CRM_ХранилищеНастроек.Сохранить(КлючОбъекта, ИдентификаторСписка 
			+ "_КнопкаПоказатьСкрытьПолеОтображенияСодержанияПометка", Кнопка.Пометка);
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПриЗакрытииФормыСписка()

// Функция возвращает описание типов для списка которое можно использовать для фильтрации состава объектов в форме
// настроек.
//
// Параметры:
//	ОсновнаяТаблица	- ТаблицаЗначений	- Таблица данных для запроса.
//
// Возвращаемое значение:
//	Неопределено или ОписаниеТипов	- Описание типов для списка.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьОписаниеТиповДляСписка(ОсновнаяТаблица) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 0 Таблица.Ссылка КАК Ссылка ИЗ " + ОсновнаяТаблица + " КАК Таблица");
	Попытка
		РезультатТаблица = Запрос.Выполнить().Выгрузить();
		ТипЗначения = РезультатТаблица.Колонки.Ссылка.ТипЗначения;
		Попытка
			ТипЗначенияРезультат = Новый ОписаниеТипов(ТипЗначения,, "NULL");
		Исключение
			ТипЗначенияРезультат = ТипЗначения;
		КонецПопытки;
		Возврат ТипЗначенияРезультат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьОписаниеТиповДляСписка()

// Функция сохраняет настройки полей отображения содержания в файл.
//
// Параметры:
//	ИмяФайла	- Строка	- Имя файла.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция НастройкиПолейОтображенияСодержанияСохранитьВФайл(ИмяФайла) Экспорт
	Попытка
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ТаблицаНастроек = НастройкиПолейОтображенияСодержанияПолучитьНастройки();
		ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(ТаблицаНастроек, Новый СжатиеДанных(9)));
		ЗаписьXML.Закрыть();
		Возврат "";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Попытка ЗаписьXML.Закрыть();
		Исключение КонецПопытки;
		Возврат CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПредставленияИнформацииОбОшибке(ИнформацияОбОшибке);
	КонецПопытки;
КонецФункции // НастройкиПолейОтображенияСодержанияСохранитьВФайл()

// Функция корректирует внешнюю таблицу настроек полей отображения содержания по текущим метаданным,
// (проверяет наличие реквизитов объектов метаданных, структуру колонок, и т.д.).
//
// Параметры:
//	ТаблицаИсточник	- ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//
Функция НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаИсточник)
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		Возврат ТаблицаИсточник;
	КонецЕсли;
	ТаблицаНастройки = НастройкиПолейОтображенияСодержанияПолучитьТаблицуНастроекБланк();
	ТипСтрока = Тип("Строка");
	ТипБулево = Тип("Булево");
	ОбязательныеКолонки = Новый Массив();
	ОбязательныеКолонки.Добавить("Реквизит");
	ОбязательныеКолонки.Добавить("ТипЗначенияРеквизита");
	ОбязательныеКолонки.Добавить("Положение");
	ОбязательныеКолонки.Добавить("Объект");
	ОбязательныеКолонки.Добавить("ЭтоТабличнаяЧасть");
	ОбязательныеКолонки.Добавить("ЭтоРеквизитТабличнойЧасти");
	ОбязательныеКолонки.Добавить("ЭтоРазделитель");
	// + Тищенко В.В.
	// Добавление функционала классификаторы
	ОбязательныеКолонки.Добавить("ЭтоКлассификатор");
	ОбязательныеКолонки.Добавить("Классификатор");
	// - Тищенко В.В. 
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаИсточник.Объект) Или ТипЗнч(СтрокаИсточник.ДеревоНастроек) <> Тип("ДеревоЗначений") Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Тип = Тип(СтрокаИсточник.Объект);
		Исключение
			Продолжить;
		КонецПопытки;
		Попытка
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Исключение
			ОбъектМетаданных = Неопределено;
		КонецПопытки;
		Если ОбъектМетаданных = Неопределено Тогда Продолжить; КонецЕсли;
		Дерево = СтрокаИсточник.ДеревоНастроек;
		бСтруктураДереваКорректна = Истина;
		Для Каждого КолонкаИмя Из ОбязательныеКолонки Цикл
			Если Дерево.Колонки.Найти(КолонкаИмя) = Неопределено Тогда
				бСтруктураДереваКорректна = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ бСтруктураДереваКорректна Тогда Продолжить; КонецЕсли;
		НоваяСтрока = ТаблицаНастройки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник,, "ДеревоНастроек");
		НоваяСтрока.ДеревоНастроек = Дерево.Скопировать();
		НоваяСтрока.ДеревоНастроек.Строки.Очистить();
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если СтрокаДерева.ЭтоТабличнаяЧасть = Истина Тогда
				Если ОбъектМетаданных.ТабличныеЧасти.Найти(СтрокаДерева.Реквизит) = Неопределено Тогда Продолжить; КонецЕсли;
				МассивСтандартныеРеквизиты = Новый Массив();
				Попытка
					СтандартныеРеквизиты = ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит].СтандартныеРеквизиты;
				Исключение
					СтандартныеРеквизиты = Неопределено;
				КонецПопытки;
				Если СтандартныеРеквизиты <> Неопределено Тогда
					Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
						МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
					КонецЦикла;
				КонецЕсли;
				Реквизиты = ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит].Реквизиты;
				СтрокаТЧ = НоваяСтрока.ДеревоНастроек.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДерева);
				СтрокаТЧ.Объект = СтрокаИсточник.Объект;
				
				Попытка
					СтрокаТЧ.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит].Представление();
					Если Не ЗначениеЗаполнено(СтрокаТЧ.ОригинальноеПредставлениеРеквизита) Тогда
						СтрокаТЧ.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.ТабличныеЧасти[СтрокаДерева.Реквизит].Имя;
					КонецЕсли;
				Исключение КонецПопытки;
				
				Для Каждого СтрокаТЧИсточник Из СтрокаДерева.Строки Цикл
					Если	МассивСтандартныеРеквизиты.Найти(СтрокаТЧИсточник.Реквизит) = Неопределено
						И	Реквизиты.Найти(СтрокаТЧИсточник.Реквизит) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаРеквизит = СтрокаТЧ.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаТЧИсточник);
					СтрокаРеквизит.Объект = СтрокаИсточник.Объект;
					
					Попытка
						СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = Реквизиты[СтрокаТЧИсточник.Реквизит].Представление();
						Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = Реквизиты[СтрокаТЧИсточник.Реквизит].Имя;
						КонецЕсли;
					Исключение
						СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = СтандартныеРеквизиты[СтрокаТЧИсточник.Реквизит].Представление();
						Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = СтандартныеРеквизиты[СтрокаТЧИсточник.Реквизит].Имя;
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
				Если СтрокаТЧ.Строки.Количество() = 0 Тогда
					НоваяСтрока.ДеревоНастроек.Строки.Удалить(СтрокаТЧ);
				КонецЕсли;
				// + Тищенко В.В.
			ИначеЕсли СтрокаДерева.ЭтоКлассификатор Тогда
				СтрокаРеквизит = НоваяСтрока.ДеревоНастроек.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаДерева);
				СтрокаРеквизит.Объект = СтрокаИсточник.Объект;
				// - Тищенко В.В.
			Иначе
				Если НЕ СтрокаДерева.ЭтоРазделитель Тогда
					МассивСтандартныеРеквизиты = Новый Массив();
					Попытка		СтандартныеРеквизиты = ОбъектМетаданных.СтандартныеРеквизиты;
					Исключение	СтандартныеРеквизиты = Неопределено;
					КонецПопытки;
					Если СтандартныеРеквизиты <> Неопределено Тогда
						Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
							МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
						КонецЦикла;
					КонецЕсли;
					Попытка
						СтандартныеРеквизиты = ОбъектМетаданных.РеквизитыАдресации;
					Исключение
						СтандартныеРеквизиты = Неопределено;
					КонецПопытки;
					Если СтандартныеРеквизиты <> Неопределено Тогда
						Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
							МассивСтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
						КонецЦикла;
					КонецЕсли;
					МассивСтандартныеРеквизиты.Добавить("Партнеры_СегментКлиентов");
					МассивСтандартныеРеквизиты.Добавить("Партнеры_ABCКласс");
					МассивСтандартныеРеквизиты.Добавить("Партнеры_XYZКласс");
					Реквизиты = ОбъектМетаданных.Реквизиты;
					Если МассивСтандартныеРеквизиты.Найти(СтрокаДерева.Реквизит) = Неопределено
						И Реквизиты.Найти(СтрокаДерева.Реквизит) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрокаРеквизит = НоваяСтрока.ДеревоНастроек.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаДерева);
				СтрокаРеквизит.Объект = СтрокаИсточник.Объект;
				
				Попытка
					СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.Реквизиты[СтрокаДерева.Реквизит].Представление();
					Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
						СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.Реквизиты[СтрокаДерева.Реквизит].Имя;
					КонецЕсли;
				Исключение
					Попытка
						СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.СтандартныеРеквизиты[СтрокаДерева.Реквизит].Представление();
						Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.СтандартныеРеквизиты[СтрокаДерева.Реквизит].Имя;
						КонецЕсли;
					Исключение
						Попытка
							СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.РеквизитыАдресации[СтрокаДерева.Реквизит].Представление();
							Если Не ЗначениеЗаполнено(СтрокаРеквизит.ОригинальноеПредставлениеРеквизита) Тогда
								СтрокаРеквизит.ОригинальноеПредставлениеРеквизита = ОбъектМетаданных.РеквизитыАдресации[СтрокаДерева.Реквизит].Имя;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецПопытки;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ТаблицаНастройки;
КонецФункции // НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу()

// Функция загружает настройки полей отображения содержания из внешней таблицы значений.
//
// Параметры:
//	ТаблицаИсточник		- ТаблицаЗначений	- Таблица настроек полей отображения содержания.
//	СтрокаОшибкаФормата	- Строка			- Строка для вывода сообщения об ошибке формата.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке формата.
//
Функция НастройкиПолейОтображенияСодержанияЗагрузитьИзВнешнейТаблицы(ТаблицаИсточник, СтрокаОшибкаФормата = Неопределено) Экспорт
	Если СтрокаОшибкаФормата = Неопределено Тогда
		СтрокаОшибкаФормата = НСтр("ru = 'Ошибка формата данных!'");
	КонецЕсли;
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		Возврат СтрокаОшибкаФормата;
	КонецЕсли;
	Если	ТаблицаИсточник.Колонки.Найти("Объект") = Неопределено
		Или	ТаблицаИсточник.Колонки.Найти("ДеревоНастроек") = Неопределено Тогда
		Возврат СтрокаОшибкаФормата;
	КонецЕсли;
	ТаблицаНастройки = НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаИсточник);
	НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаНастройки);
	Возврат "";
КонецФункции // НастройкиПолейОтображенияСодержанияЗагрузитьИзВнешнейТаблицы()

// Функция возвращает таблицу настроек по умолчанию.
//
// Параметры:
//	ИмяМакета	- Строка	- Имя макета.
//
// Возвращаемое значение:
//	Неопределено или ТаблицаЗначений	- Таблица настроек по умолчанию.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьНастройкиПоУмолчанию(ИмяМакета = Неопределено)
	
	// Начало Изменение функционала. Храненение в регистре сведений. Для редактирования в пользовательском режиме
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вогНастройкиПолейОтображенияСодержания.Макет КАК Хранилище
	|ИЗ
	|	РегистрСведений.вогНастройкиПолейОтображенияСодержания КАК вогНастройкиПолейОтображенияСодержания
	|ГДЕ
	|	вогНастройкиПолейОтображенияСодержания.ИспользоватьДляВсех");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
			ТаблицаНастройки 	= ВыборкаИзРезультатаЗапроса.Хранилище.Получить();
			Результат 			= НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаНастройки);
		КонецЕсли;;
	КонецЕсли;
	
	Возврат Результат;
	
	// Конец Изменение функционала. Храненение в регистре сведений. Для редактирования в пользовательском режиме

	#Область ЗакоментированныйСтандартныйКод
	
	// Начало Стандарнтый код
	
	//Если ИмяМакета = Неопределено Тогда
	//	ИмяМакета = "CRM_НастройкиПолейОтображенияСодержания";
	//КонецЕсли;
	//Попытка
	//	ЧтениеXML = Новый ЧтениеXML();
	//	Макет = ПолучитьОбщийМакет("CRM_НастройкиПолейОтображенияСодержания");
	//	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	//	Хранилище = ПрочитатьXML(ЧтениеXML);
	//	ЧтениеXML.Закрыть();
	//	Если ТипЗнч(Хранилище) <> Тип("ХранилищеЗначения") Тогда
	//		ВызватьИсключение "";
	//	КонецЕсли;
	//	ТаблицаНастройки = Хранилище.Получить();
	//	Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
	//		ВызватьИсключение "";
	//	КонецЕсли;
	//	Возврат НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаНастройки);
	//Исключение
	//	Попытка ЧтениеXML.Закрыть();
	//	Исключение КонецПопытки;
	//	Возврат Неопределено;
	//КонецПопытки;
	
	// Конец Стандартный код
	
	#КонецОбласти 
	
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьНастройкиПоУмолчанию()

// Процедура загружает настройки полей отображения содержания из макета.
//
// Параметры:
//	ИмяМакета	- Строка	- Имя макета.
//
Процедура НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета(ИмяМакета = Неопределено, ИмяПользователя = Неопределено) Экспорт
	Если ИмяМакета = Неопределено Тогда
		ИмяМакета = "CRM_НастройкиПолейОтображенияСодержания";
	КонецЕсли;
	ТаблицаНастройки = НастройкиПолейОтображенияСодержанияПолучитьНастройкиПоУмолчанию(ИмяМакета);
	Если ТаблицаНастройки <> Неопределено Тогда
		НастройкиПолейОтображенияСодержанияСохранитьТаблицуНастроек(ТаблицаНастройки, ИмяПользователя);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета()

// Процедура загружает всем пользователям базы настройки полей отображения содержания из макета.
//
// Параметры:
//	ИмяМакета - Строка - Имя макета.
//
Процедура УстановитьВсемПользователямНастройкиОтображенияСодержанияИзМакета(ИмяМакета = Неопределено) Экспорт
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для каждого ПользовательИБ Из ПользователиИБ Цикл
		CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета(ИмяМакета, ПользовательИБ.Имя);
	КонецЦикла;

КонецПроцедуры // УстановитьВсемПользователямНастройкиОтображенияСодержанияИзМакета()

// Функция загружает настройки полей отображения содержания из файла.
//
// Параметры:
//	ИмяФайла										- Строка	- Имя файла.
//	ПоместитьТаблицуВоВременноеХранилищеПоАдресу	- Строка	- Адрес во временном хранилище.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла(ИмяФайла, ПоместитьТаблицуВоВременноеХранилищеПоАдресу = Неопределено) Экспорт
	Попытка
		СтрокаОшибкаФорматаФайла = НСтр("ru = 'Файл не является файлом сохраненных полей отображения содержания!'");
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		Попытка
			Хранилище = ПрочитатьXML(ЧтениеXML);
		Исключение
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецПопытки;
		ЧтениеXML.Закрыть();
		Если ТипЗнч(Хранилище) <> Тип("ХранилищеЗначения") Тогда
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецЕсли;
		ТаблицаНастройки = Хранилище.Получить();
		Если ТипЗнч(ТаблицаНастройки) <> Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение СтрокаОшибкаФорматаФайла;
		КонецЕсли;
		Если ПоместитьТаблицуВоВременноеХранилищеПоАдресу = Неопределено Тогда
			РезультатЗагрузки = НастройкиПолейОтображенияСодержанияЗагрузитьИзВнешнейТаблицы(ТаблицаНастройки, СтрокаОшибкаФорматаФайла);
			Если НЕ ПустаяСтрока(РезультатЗагрузки) Тогда
				ВызватьИсключение РезультатЗагрузки;
			КонецЕсли;
		Иначе
			ТаблицаРезультат = НастройкиПолейОтображенияСодержанияСкорректироватьВнешнююТаблицу(ТаблицаНастройки);
			Если ТаблицаРезультат = Неопределено Тогда
				ВызватьИсключение СтрокаОшибкаФорматаФайла;
			Иначе
				Если ЭтоАдресВременногоХранилища(ПоместитьТаблицуВоВременноеХранилищеПоАдресу) Тогда
					ПоместитьВоВременноеХранилище(ТаблицаРезультат, ПоместитьТаблицуВоВременноеХранилищеПоАдресу);
				Иначе
					ВызватьИсключение НСтр("ru = 'Ошибка при работе с временным хранилищем значений'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат "";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Попытка ЧтениеXML.Закрыть();
		Исключение КонецПопытки;
		Возврат CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПредставленияИнформацииОбОшибке(ИнформацияОбОшибке);
	КонецПопытки;
КонецФункции // НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла()

// Вспомогательная функция преобразует цвет из формата 1С в формат, пригодный для использования в HTML.
//
// Параметры:
//	ОбъектЦвет	- Цвет - Цвет в формате 1С.
//
// Возвращаемое значение:
//	Строка	- цвет в формате html.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьЦветДляHTMLКода(ОбъектЦвет)
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	Если ОбъектЦвет = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ОбъектЦвет) = Тип("Строка") Тогда
		Возврат ОбъектЦвет;
	ИначеЕсли ОбъектЦвет.Красный < 0 Или ОбъектЦвет.Зеленый < 0 Или ОбъектЦвет.Синий < 0 Тогда
		Возврат "#000000";
	КонецЕсли;
	
	СтрокаШестнадцатиричныеСимволы = "0123456789abcdef";
	
	Возврат	"#"
			+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Красный / 16) + 1, 1) + Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Красный % 16) + 1, 1)
			+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Зеленый / 16) + 1, 1) + Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Зеленый % 16) + 1, 1)
			+	Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Синий / 16) + 1, 1) + Сред(СтрокаШестнадцатиричныеСимволы, Цел(ОбъектЦвет.Синий % 16) + 1, 1);
	//
КонецФункции

// Вспомогательная функция, формирует теги для отрисовки текста определенным цветом и шрифтом.
//
// Параметры:
//	ЦветТекста	- Цвет	- Цвет текста в формате 1С.
//	ЦветФона	- Цвет	- Цвет фона в формате 1С.
//	Шрифт		- Шрифт	- Шрифт текста в формате 1С.
//
// Возвращаемое значение:
//	Структура	- структура с открывающимся и закрывающимся тегами.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьТегиШрифтаТекстаHTML(ЦветТекста, ЦветФона, Шрифт)
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	СтруктураРезультат = Новый Структура("ОткрывающийТег,ЗакрывающийТег", "", "");
	
	Если ЦветТекста = Неопределено Тогда
		ЦветТекстаHTML = Неопределено;
	Иначе
		ЦветТекстаHTML = НастройкиПолейОтображенияСодержанияПолучитьЦветДляHTMLКода(ЦветТекста);
	КонецЕсли;
	
	Если ЦветФона = Неопределено Тогда
		ЦветФонаHTML = Неопределено;
	Иначе
		ЦветФонаHTML = НастройкиПолейОтображенияСодержанияПолучитьЦветДляHTMLКода(ЦветФона);
	КонецЕсли;
	
	Если Шрифт = Неопределено Тогда
		ШрифтЭлемента = Неопределено;
	Иначе
		Если Шрифт.Размер < 0 Тогда
			ШрифтЭлемента = Неопределено;
		Иначе
			ШрифтЭлемента = Шрифт;
		КонецЕсли;
	КонецЕсли;
	
	Если ЦветТекстаHTML <> Неопределено Или ЦветФонаHTML <> Неопределено Или ШрифтЭлемента <> Неопределено Тогда
		СтруктураРезультат.ОткрывающийТег = "<FONT style=""";
		
		Если ЦветТекстаHTML <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "color:" + ЦветТекстаHTML + "; ";
		КонецЕсли;
		Если ЦветФонаHTML <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "background-color:" + ЦветФонаHTML + "; ";
		КонецЕсли;
		
		Если ШрифтЭлемента <> Неопределено Тогда
			СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "font-size:" + Формат(ШрифтЭлемента.Размер, "ЧН=0; ЧГ=") + "px; ";
		КонецЕсли;
		
		СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + """";
		
		Если ШрифтЭлемента <> Неопределено Тогда
			Если ЗначениеЗаполнено(ШрифтЭлемента.Имя) Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + " face=""" + ШрифтЭлемента.Имя + """";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + ">";
		
		Если ШрифтЭлемента <> Неопределено Тогда
			Если ШрифтЭлемента.Жирный = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<B>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</B>";
			КонецЕсли;
			Если ШрифтЭлемента.Наклонный = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<I>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</I>";
			КонецЕсли;
			Если ШрифтЭлемента.Подчеркивание = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<U>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</U>";
			КонецЕсли;
			Если ШрифтЭлемента.Зачеркивание = Истина Тогда
				СтруктураРезультат.ОткрывающийТег = СтруктураРезультат.ОткрывающийТег + "<DEL>";
				СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</DEL>";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультат.ЗакрывающийТег = СтруктураРезультат.ЗакрывающийТег + "</FONT>";
	КонецЕсли;
		
	Возврат СтруктураРезультат;
КонецФункции

// Функция возвращает HTML текст содержания по переданным параметрам.
//
// Параметры:
//	СсылкаИлиДеревоНастроекИлиОбъект	- Произвольный		- Ссылка или дерево настроек или объект.
//	ЭтаФорма							- УправляемаяФорма	- Форма
//	ИспользоватьКэшНастроек				- Булево			- Использовать кэш настроек.
//	КлючУникальностиКэша				- Строка			- Ключ уникальности кэша.
//	ИмяРеквизитаАдресаКэша				- Строка			- Имя реквизита адреса кэша.
//	ОграниченияТипов					- ОписаниеТипов		- Ограничения типов для кэша.
//	ДополнительныеПараметры				- Структура			- Дополнительные параметры.
//
// Возвращаемое значение:
//	Строка	- HTML текст содержания.
//
Функция НастройкиПолейОтображенияСодержанияПолучитьСодержание(СсылкаИлиДеревоНастроекИлиОбъект,
															ОграниченияТипов = Неопределено,
															ДополнительныеПараметры = Неопределено) Экспорт
	Если СсылкаИлиДеревоНастроекИлиОбъект = Неопределено Тогда
		Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	Иначе
		Тип = ТипЗнч(СсылкаИлиДеревоНастроекИлиОбъект);
		
		СсылкаНаОбъект = Неопределено;
		
		ШиринаЛевойКолонки				= Неопределено;
		ШиринаЛевойКолонкиАбсолютная	= Неопределено;
		ШиринаПравойКолонки				= Неопределено;
		ШиринаПравойКолонкиАбсолютная	= Неопределено;
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ДополнительныеПараметры.Свойство("ШиринаЛевойКолонки",				ШиринаЛевойКолонки);
			ДополнительныеПараметры.Свойство("ШиринаЛевойКолонкиАбсолютная",	ШиринаЛевойКолонкиАбсолютная);
			ДополнительныеПараметры.Свойство("ШиринаПравойКолонки",				ШиринаПравойКолонки);
			ДополнительныеПараметры.Свойство("ШиринаПравойКолонкиАбсолютная",	ШиринаПравойКолонкиАбсолютная);
		КонецЕсли;
		
		Если Тип = Тип("ДеревоЗначений") Тогда
			ДеревоНастроек = СсылкаИлиДеревоНастроекИлиОбъект;
		Иначе
			Если Тип = Тип("Строка") Или Тип = Тип("Тип") Тогда
				Если ТипЗнч(Тип) = Тип("Тип") Тогда
					ТипСтрокой = НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип);
					Если ТипСтрокой = Неопределено Тогда
						Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
					КонецЕсли;
				Иначе
					ТипСтрокой = СсылкаИлиДеревоНастроекИлиОбъект;
				КонецЕсли;
			Иначе
				// передана ссылка
				СсылкаНаОбъект = СсылкаИлиДеревоНастроекИлиОбъект;
				
				ТипСтрокой = НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип);
				Если ТипСтрокой = Неопределено Тогда
					Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
				КонецЕсли;
				
				// Проверим что есть доступ к тексту письма.
				Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ
					 ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
					Если НЕ НайтиПользователяВУчетнойЗаписи(СсылкаНаОбъект.УчетнаяЗапись, Пользователи.ТекущийПользователь()) И
						 НЕ СсылкаНаОбъект.УчетнаяЗапись.CRM_РазрешитьПросмотрПисемВсемПользователям И 
						 НЕ СсылкаНаОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь() Тогда
						 
						Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание(, 
							        НСтр("ru = '<P align=center> <FONT color=#ff0000> Недостаточно прав для просмотра писем учетной записи &laquo;" + СсылкаНаОбъект.УчетнаяЗапись + "&raquo;!</FONT>
										|<br>Текущий пользователь должен быть добавлен в список пользователей учетной записи либо
										|<br>являться Ответственным данного письма либо
										|<br>в учетной записи должен стоять флаг ""Разрешить просмотр писем всем пользователям системы""
										|'"));
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаНастроек = НастройкиПолейОтображенияСодержанияПолучитьНастройки(?(ОграниченияТипов = Неопределено, ТипСтрокой, ОграниченияТипов));
			//
			Если ТаблицаНастроек.Количество() = 0 Тогда
				Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
			Иначе
				НайденнаяСтрока = ТаблицаНастроек.Найти(ТипСтрокой, "Объект");
				Если НайденнаяСтрока = Неопределено Тогда
					Возврат CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
				Иначе
					ДеревоНастроек = НайденнаяСтрока.ДеревоНастроек;
					
					Если ШиринаЛевойКолонки = Неопределено Тогда
						Попытка		ШиринаЛевойКолонки = НайденнаяСтрока.ШиринаЛевойКолонки;
						Исключение	ШиринаЛевойКолонки = Неопределено;
						КонецПопытки;
					КонецЕсли;
					Если ШиринаЛевойКолонкиАбсолютная = Неопределено Тогда
						Попытка		ШиринаЛевойКолонкиАбсолютная = НайденнаяСтрока.ШиринаЛевойКолонкиАбсолютная;
						Исключение	ШиринаЛевойКолонкиАбсолютная = Неопределено;
						КонецПопытки;
					КонецЕсли;
					Если ШиринаПравойКолонки = Неопределено Тогда
						Попытка		ШиринаПравойКолонки = НайденнаяСтрока.ШиринаПравойКолонки;
						Исключение	ШиринаПравойКолонки = Неопределено;
						КонецПопытки;
					КонецЕсли;
					Если ШиринаПравойКолонкиАбсолютная = Неопределено Тогда
						Попытка		ШиринаПравойКолонкиАбсолютная = НайденнаяСтрока.ШиринаПравойКолонкиАбсолютная;
						Исключение	ШиринаПравойКолонкиАбсолютная = Неопределено;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ШиринаЛевойКолонки = Неопределено Или ШиринаЛевойКолонки <= 0 Тогда
			ШиринаЛевойКолонки = 75;
			ШиринаЛевойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаЛевойКолонкиАбсолютная = Неопределено Тогда
			ШиринаЛевойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаПравойКолонки = Неопределено Или ШиринаПравойКолонки <= 0 Тогда
			ШиринаПравойКолонки = 25;
			ШиринаПравойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		Если ШиринаПравойКолонкиАбсолютная = Неопределено Тогда
			ШиринаПравойКолонкиАбсолютная = Ложь;
		КонецЕсли;
		
		Описание =
		"<table width=""100%"" border=""0"" cellspacing=""2"">
		|";
		НачальнаяДлинаОписания = СтрДлина(Описание);
		
		ВывестиПримерЗаполнения = (СсылкаНаОбъект = Неопределено);
		
		стрЛеваяКолонка = "";
		стрПраваяКолонка = "";
		Для Каждого СтрокаНастройки Из ДеревоНастроек.Строки Цикл
			ШрифтЭлемента		= Неопределено;
			ЦветТекстаЭлемента	= Неопределено;
			ЦветФонаЭлемента	= Неопределено;
			ТегиЭлемента		= Неопределено;
			Если Не СтрокаНастройки.ЭтоТабличнаяЧасть Тогда
				Попытка		ШрифтЭлемента = СтрокаНастройки.Шрифт;
				Исключение	ШрифтЭлемента = Неопределено;
				КонецПопытки;
				Попытка		ЦветТекстаЭлемента = СтрокаНастройки.ЦветТекста;
				Исключение	ЦветТекстаЭлемента = Неопределено;
				КонецПопытки;
				Попытка		ЦветФонаЭлемента = ?(СтрокаНастройки.ЭтоРеквизитТабличнойЧасти И СтрокаНастройки.ЦветФона = Новый Цвет(255,255,255), Новый Цвет(251,249,236), СтрокаНастройки.ЦветФона) ;
				Исключение	ЦветФонаЭлемента = Неопределено;
				КонецПопытки;
				
				ТегиЭлемента = НастройкиПолейОтображенияСодержанияПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
			КонецЕсли;
			
			мОписание = "";
			
			Если СтрокаНастройки.ЭтоРазделитель Тогда
				ПредставлениеРеквизита = СтрокаНастройки.ПредставлениеРеквизита;
				
				Если ТегиЭлемента <> Неопределено Тогда
					ПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
				КонецЕсли;
				
				мОписание = мОписание + ПредставлениеРеквизита + " "
				
			ИначеЕсли СтрокаНастройки.ЭтоТабличнаяЧасть Тогда
				Если ВывестиПримерЗаполнения Тогда	
					мОписание = мОписание + НастройкиПолейОтображенияСодержанияСформироватьHTMLОписаниеТабличнойЧасти(Неопределено, СтрокаНастройки.Строки, СтрокаНастройки);
				Иначе
					мОписание = мОписание + НастройкиПолейОтображенияСодержанияСформироватьHTMLОписаниеТабличнойЧасти(СсылкаНаОбъект, СтрокаНастройки.Строки, СтрокаНастройки);
				КонецЕсли;
				
			Иначе
				Если ВывестиПримерЗаполнения Тогда
					ПримерПредставлениеРеквизита = ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита), СтрокаНастройки.ПредставлениеРеквизита, ?(ЗначениеЗаполнено(СтрокаНастройки.ОригинальноеПредставлениеРеквизита), СтрокаНастройки.ОригинальноеПредставлениеРеквизита, НСтр("ru = 'Реквизит'")));
					
					Если ТегиЭлемента <> Неопределено Тогда
						ПримерПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПримерПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
					КонецЕсли;
					
					мОписание = мОписание + ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита), "<%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ?(СтрокаНастройки.ТипЗначенияРеквизита = "Строка", "  {" + ПримерПредставлениеРеквизита + "}", "</B>" + "<a href="""">" + "  {" + ПримерПредставлениеРеквизита + "}</a>");
				Иначе
					Если Найти(СтрокаНастройки.Реквизит, "Партнеры_") > 0 Тогда
						Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Партнеры") Тогда
							ПартнерСсылка = СсылкаНаОбъект;
						Иначе
							ПартнерСсылка = Неопределено;
							Попытка
								ПартнерСсылка = СсылкаНаОбъект.Партнер;
							Исключение
								Попытка
									ПартнерСсылка = СсылкаНаОбъект.CRM_Партнер;
								Исключение
									ПартнерСсылка = Неопределено;
								КонецПопытки;
							КонецПопытки;
							Если ТипЗнч(ПартнерСсылка) <> Тип("СправочникСсылка.Партнеры") Тогда
								ПартнерСсылка = Неопределено;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ПартнерСсылка) Тогда
							Если СтрокаНастройки.Реквизит = "Партнеры_СегментКлиентов" Тогда
								ТаблицаСегментов = CRM_СегментыСервер.СписокСегментов(ПартнерСсылка, Ложь);
								Если ТаблицаСегментов.Количество() > 0 Тогда
									ЗначениеРеквизита = ТаблицаСегментов[0].Сегмент;
								Иначе
									ЗначениеРеквизита = "";
								КонецЕсли;
								
							ИначеЕсли СтрокаНастройки.Реквизит = "Партнеры_ABCКласс" Тогда
								ЗначениеРеквизита = CRM_КлиентыСервер.ПолучитьABCXYZКлассПартнера(ПартнерСсылка, Перечисления.ТипыКлассификации.ABC);
							ИначеЕсли СтрокаНастройки.Реквизит = "Партнеры_XYZКласс" Тогда
								ЗначениеРеквизита = CRM_КлиентыСервер.ПолучитьABCXYZКлассПартнера(ПартнерСсылка, Перечисления.ТипыКлассификации.ABC);
							Иначе
								ЗначениеРеквизита = "";
							КонецЕсли;
						Иначе
							ЗначениеРеквизита = "";
						КонецЕсли;
					Иначе
						Попытка
							ЗначениеРеквизита = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
						Исключение
							ЗначениеРеквизита = "";
						КонецПопытки;
					КонецЕсли;
					
					Если СтрокаНастройки.ТипЗначенияРеквизита = "Строка" Тогда
						
						Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
							ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "</BR>");
							ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
							ЗначениеРеквизита = Строка(ЗначениеРеквизита);
						ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
							Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
								ЗначениеРеквизита = "<%ПредставлениеПустойДаты%>";
							Иначе
								Если ЗначениеРеквизита = НачалоДня(ЗначениеРеквизита) Тогда
									ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
								Иначе
									ЗначениеРеквизита = Строка(ЗначениеРеквизита);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если ТегиЭлемента <> Неопределено Тогда
							ЗначениеРеквизита = ТегиЭлемента.ОткрывающийТег + ЗначениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
						КонецЕсли;
						
						мОписание = мОписание + ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита), "<%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ЗначениеРеквизита;
						// + Тищенко В.В.
					ИначеЕсли СтрокаНастройки.ТипЗначенияРеквизита = "Классификатор" Тогда
						
						СписокДоступныхКлассификаторов = Новый ТаблицаЗначений;
						СписокДоступныхКлассификаторов.Колонки.Добавить("Имя",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_Классификаторы"));
						СписокДоступныхКлассификаторов.Колонки.Добавить("Значение",Новый ОписаниеТипов("Строка"));
						
						ЗначениеКлассификатор = РегистрыСведений.вогНастройкиОтображенияКлассификаторов.ПолучитьЗначениеКлассификатора(СсылкаИлиДеревоНастроекИлиОбъект,СтрокаНастройки.Классификатор
																																		,СтрокаНастройки.Классификатор.ВидОтображения,СписокДоступныхКлассификаторов);
						
						Если СтрокаНастройки.Классификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
							ЗначениеРеквизита = ЗначениеКлассификатор;
							Если ТегиЭлемента <> Неопределено Тогда
								ЗначениеРеквизита = ТегиЭлемента.ОткрывающийТег + ЗначениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
							КонецЕсли;
							мОписание = мОписание + ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита), "<%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ЗначениеРеквизита;	
						ИначеЕсли СтрокаНастройки.Классификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
							Для каждого ТекЗначение Из ЗначениеКлассификатор Цикл
								ЗначениеРеквизита = ТекЗначение.Результат;
								Если ТегиЭлемента <> Неопределено Тогда
									ЗначениеРеквизита = ТегиЭлемента.ОткрывающийТег + ЗначениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
								КонецЕсли;
								мОписание = мОписание + ?(ЗначениеЗаполнено(ТекЗначение.Классификатор), "<%ЗаголовокОткрывающийТег%>" + ТекЗначение.Классификатор + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ЗначениеРеквизита + "</BR>";
							КонецЦикла;
						Иначе
							ЗначениеРеквизита = "";
							мОписание = мОписание + ?(ЗначениеЗаполнено(СтрокаНастройки.ПредставлениеРеквизита), "<%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ЗначениеРеквизита;
						КонецЕсли;
						
						// - Тищенко В.В.
					Иначе
						СтрокаРеквизита = НастройкиПолейОтображенияСодержанияПолучитьОписаниеОбъектаHTML(ЗначениеРеквизита, СтрокаНастройки.ПредставлениеРеквизита, Истина,, ТегиЭлемента);
						мОписание = мОписание + СтрокаРеквизита;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(мОписание) Тогда
				Попытка		Размещение = СтрокаНастройки.Размещение;
				Исключение	Размещение = Неопределено;
				КонецПопытки;
				Если Размещение = "ЛеваяКолонка" Тогда
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						стрЛеваяКолонка = стрЛеваяКолонка + ?(стрЛеваяКолонка = "", "", " </BR>") + мОписание;
					Иначе
						стрЛеваяКолонка = стрЛеваяКолонка + ?(стрЛеваяКолонка = "", "", "  ") + мОписание;
					КонецЕсли;
					
				ИначеЕсли Размещение = "ПраваяКолонка" Тогда	
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						стрПраваяКолонка = стрПраваяКолонка + ?(стрПраваяКолонка = "", "", " </BR>") + мОписание;
					Иначе
						стрПраваяКолонка = стрПраваяКолонка + ?(стрПраваяКолонка = "", "", "  ") + мОписание;
					КонецЕсли;
					
				Иначе
					Если ЗначениеЗаполнено(стрЛеваяКолонка) Или ЗначениеЗаполнено(стрПраваяКолонка) Тогда
						Если ШиринаЛевойКолонкиАбсолютная Тогда
							Описание = Описание + "
							|<tr>
							|
							|<table width=""100%"">
							|
							|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|
							|</table>
							|
							|</tr>
							|";
						ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
							Описание = Описание + "
							|<tr>
							|
							|<table width=""100%"">
							|
							|<td valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|
							|</table>
							|
							|</tr>
							|";
						Иначе
							Описание = Описание + "
							|<tr>
							|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
							|" + стрЛеваяКолонка + "
							|</td>
							|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
							|" + стрПраваяКолонка + "
							|</td>
							|</tr>
							|";
						КонецЕсли;
					КонецЕсли;
					стрЛеваяКолонка = "";
					стрПраваяКолонка = "";
					
					Если СтрокаНастройки.Положение = "НоваяСтрока" Тогда
						Описание = Описание + "
						|<tr>
						|<td colspan=2>
						|	" + ?(СтрДлина(Описание) = НачальнаяДлинаОписания, "", " </BR>") + мОписание + "
						|</td>
						|<tr>
						|";
					Иначе
						Описание = Описание + ?(Описание = "", "", "  ") + мОписание;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(стрЛеваяКолонка) Или ЗначениеЗаполнено(стрПраваяКолонка) Тогда
			Если ШиринаЛевойКолонкиАбсолютная Тогда
				Описание = Описание + "
				|<tr>
				|
				|<table width=""100%"">
				|
				|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|
				|</table>
				|
				|</tr>
				|";
			ИначеЕсли ШиринаПравойКолонкиАбсолютная Тогда
				Описание = Описание + "
				|<tr>
				|
				|<table width=""100%"">
				|
				|<td valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + """ valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|
				|</table>
				|
				|</tr>
				|";
			Иначе
				Описание = Описание + "
				|<tr>
				|<td width=""" + Формат(ШиринаЛевойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
				|" + стрЛеваяКолонка + "
				|</td>
				|<td width=""" + Формат(ШиринаПравойКолонки, "ЧН=0; ЧГ=") + "%"" valign=""top"">
				|" + стрПраваяКолонка + "
				|</td>
				|</tr>
				|";
			КонецЕсли;
		КонецЕсли;
		
		Описание = Описание +
		"</table>
		|";
		
		Если ВывестиПримерЗаполнения Тогда
			ГиперссылкаНастройки = "";
		Иначе
			ГиперссылкаНастройки = "<FONT size=""1""><br><hr noshade size=""1""></FONT><DIV align=""right""><FONT size=""1""><A style=""COLOR: #594304"" href=""НастройкаПолейОтображения"">" + НСтр("ru = 'Настройка'") + "</A></FONT></DIV>";
		КонецЕсли;
		
		Описание = Описание + ГиперссылкаНастройки;
		
		Описание = СтрЗаменить(Описание, "<%ЗаголовокОткрывающийТег%>", "<font style=""font-size:12px;"" face=""MS Sans Serif"">");
		Описание = СтрЗаменить(Описание, "<%ЗаголовокЗакрывающийТег%>", "</font>");
		
		Описание = СтрЗаменить(Описание, "<%ЗаголовокТаблицыОткрывающийТег%>", "<font style=""font-size:12px;"" face=""MS Sans Serif""><B>");
		Описание = СтрЗаменить(Описание, "<%ЗаголовокТаблицыЗакрывающийТег%>", "</B></font>");
		
		Описание = СтрЗаменить(Описание, "<%ПредставлениеПустойДаты%>", "дата не указана");
		
		Описание =
		"<html>
		|<head>
		|
		|<style type=""text/css"">
		|	a {text-decoration:none;}
		|</style>
		|
		|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
		|<title></title>
		|</head>
		|<body>
		|" + Описание + "
		|</body>
		|</html>";
		
		Возврат Описание;
	КонецЕсли;
КонецФункции // НастройкиПолейОтображенияСодержанияПолучитьСодержание()

// Вспомогательная функция, возвращает описание объекта в HTML формате.
//
// Параметры:
//	СсылкаНаОбъект	- ЛюбаяСсылка		- Ссылка на объект.
//	Представление	- Строка			- Представление объекта.
//	БезПереноса		- Булево			- Признак переноса строк.
//	ГиперСсылка		- Булево			- Признак отображать объект гиперссылкой.
//	ТегиЭлемента	- Структура			- Структура с описанием тегов элемента.
//	
// Возвращаемое значение:
//	Строка	- HTML текст описания объекта.
//	
Функция НастройкиПолейОтображенияСодержанияПолучитьОписаниеОбъектаHTML(СсылкаНаОбъект, Представление, БезПереноса = Ложь, ГиперСсылка = Истина, ТегиЭлемента = Неопределено)
	// Защиту не проверяем, т.к. функция используется только локально как вспомогательная.
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("Строка")  Тогда
			ПредставлениеОбъекта = Строка(СсылкаНаОбъект);
			
			Если ТегиЭлемента <> Неопределено Тогда
				ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
			КонецЕсли;
			
			стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ПредставлениеОбъекта + ?(БезПереноса,"","</BR>");
			
			Возврат стрОписание;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(СсылкаНаОбъект);
		
		Если ТегиЭлемента <> Неопределено Тогда
			ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
		КонецЕсли;
		
		Если НЕ (ТипЗнч(СсылкаНаОбъект) = Тип("Неопределено")) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СсылкаНаОбъект)) И ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
			Если ГиперСсылка Тогда
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
				стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>" + ?(БезПереноса,"","</BR>");
			Иначе
				стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + ПредставлениеОбъекта+"</a>" + ?(БезПереноса, "", "</BR>");
			КонецЕсли;
		Иначе
			стрОписание = ?(ЗначениеЗаполнено(Представление), "<%ЗаголовокОткрывающийТег%>" + Представление + ": " + "<%ЗаголовокЗакрывающийТег%>", "") + НСтр("ru = '[Объект недоступен]'") + ?(БезПереноса, "" , "</BR>");
		КонецЕсли;
	Иначе
		стрОписание = "";
	КонецЕсли;	
	
	Возврат стрОписание;
КонецФункции

// Вспомогательная функция, вызывается из функции НастройкиПолейОтображенияСодержанияПолучитьСодержание,
// формирует строку в формате HTML для Отображения табличной части объекта.
//
// Параметры:
//	СсылкаНаОбъект	- ЛюбаяСсылка				- Ссылка на объект.
//	Реквизиты		- Строки дерева значений	- Строки с описанием реквизитов, которые нужно отобразить.
//	СтрокаНастройки	- Строка дерева значений	- Строка с описанием табличной части.
//	
// Возвращаемое значение:
//	Строка	- HTML текст описания табличной части.
//	
Функция НастройкиПолейОтображенияСодержанияСформироватьHTMLОписаниеТабличнойЧасти(СсылкаНаОбъект, Реквизиты, СтрокаНастройки)
	Описание = "";
	
	Если СтрокаНастройки.Реквизит = "КонтактнаяИнформация" Тогда
		ОбрабатываемКИ = Истина;
	Иначе
		ОбрабатываемКИ = Ложь;
	КонецЕсли;			
	
	Если СсылкаНаОбъект <> Неопределено Тогда
		Попытка
			ТабличнаяЧасть = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
			Если ТабличнаяЧасть.Количество() = 0 Тогда
				Возврат Описание;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ЦветРамки			= "#f2e0c4";
	ЦветФонаЗаголовков	= "#f5f2dd";
	ЦветФонаСтрок		= "#fcfaeb";
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Если Реквизиты.Количество() > 0 Тогда
		ТаблицаРеквизитов.Колонки.Добавить();
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока[0] = Реквизиты[0];
	КонецЕсли;
	
	ТекущаяКолонка = 0;
	ТекущаяСтрока  = 0;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит = Реквизиты[0] Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Положение = "НоваяСтрока" Тогда
			ТекущаяСтрока = ТекущаяСтрока + 1;
			Если ТаблицаРеквизитов.Количество() < ТекущаяСтрока + 1 Тогда
				НоваяСтрока = ТаблицаРеквизитов.Добавить();
			КонецЕсли;
		Иначе
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТаблицаРеквизитов.Колонки.Добавить();
			ТекущаяСтрока  = 0;
		КонецЕсли;
		
		ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка] = Реквизит;
	КонецЦикла;
	
	МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество() - 1;
	Для Каждого Строка Из ТаблицаРеквизитов Цикл
		ТекущаяСтрока =  ТаблицаРеквизитов.Индекс(Строка);
		ТекущаяКолонка = 0;
		ОписаниеСтроки = "";
		Для Каждого Колонка Из  ТаблицаРеквизитов.Колонки Цикл
			КолОбъединяемыхЯчеек = 1;
			Для Сч = ТекущаяСтрока+1 По  МаксимальныйИндексСтроки Цикл
				Если ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
					КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
				 Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
			Если Реквизит <> Неопределено Тогда
				ОписаниеСтроки = ОписаниеСтроки + "<TD align=""center"" rowspan = " + Строка(КолОбъединяемыхЯчеек) + "><%ЗаголовокТаблицыОткрывающийТег%>" + Реквизит.ПредставлениеРеквизита + "<%ЗаголовокТаблицыЗакрывающийТег%></TD>";
			КонецЕсли;
			ТекущаяКолонка = ТекущаяКолонка + 1;
		КонецЦикла;
		Описание = Описание + "<TR bgcolor=" + ЦветФонаЗаголовков + ">" + ОписаниеСтроки + "  </TR>";
	КонецЦикла;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество()-1;
		Для Каждого Строка Из ТаблицаРеквизитов Цикл
			ТекущаяСтрока = ТаблицаРеквизитов.Индекс(Строка);
			ТекущаяКолонка = 0;
			ОписаниеСтроки = "";
			Для Каждого колонка Из  ТаблицаРеквизитов.Колонки Цикл
				КолОбъединяемыхЯчеек = 1;
				Для Сч = ТекущаяСтрока+1 По  МаксимальныйИндексСтроки Цикл
					Если  ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
						КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
					Иначе 
						Прервать
					КонецЕсли;
				КонецЦикла;
				
				Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
				
				ШрифтЭлемента		= Неопределено;
				ЦветТекстаЭлемента	= Неопределено;
				ЦветФонаЭлемента	= Неопределено;
				Попытка		ШрифтЭлемента = Реквизит.Шрифт;
				Исключение	ШрифтЭлемента = Неопределено;
				КонецПопытки;
				Попытка		ЦветТекстаЭлемента = Реквизит.ЦветТекста;
				Исключение	ЦветТекстаЭлемента = Неопределено;
				КонецПопытки;
				Попытка		ЦветФонаЭлемента = ?(Реквизит.ЭтоРеквизитТабличнойЧасти И Реквизит.ЦветФона = Новый Цвет(255,255,255), Новый Цвет(251,249,236), Реквизит.ЦветФона) ;
				Исключение	ЦветФонаЭлемента = Неопределено;
				КонецПопытки;
				
				Если Реквизит <> Неопределено Тогда
					ТегиЭлемента = НастройкиПолейОтображенияСодержанияПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
					
					ПримерПредставлениеРеквизита = ?(ЗначениеЗаполнено(Реквизит.ПредставлениеРеквизита), Реквизит.ПредставлениеРеквизита, ?(ЗначениеЗаполнено(Реквизит.ОригинальноеПредставлениеРеквизита), Реквизит.ОригинальноеПредставлениеРеквизита, НСтр("ru = 'Реквизит'")));
					
					ПримерПредставлениеРеквизита = ТегиЭлемента.ОткрывающийТег + ПримерПредставлениеРеквизита + ТегиЭлемента.ЗакрывающийТег;
					
					ОписаниеРеквизита = ?(Реквизит.ТипЗначенияРеквизита = "Строка", "  {" + ПримерПредставлениеРеквизита + "}", "</B>" + "<a href="""">" + "  {" + ПримерПредставлениеРеквизита + "}</a>");
					
					ОписаниеСтроки = ОписаниеСтроки +"<TD rowspan = "+ Строка(КолОбъединяемыхЯчеек) + ">" + ОписаниеРеквизита + "</TD>";
				КонецЕсли;
				ТекущаяКолонка = ТекущаяКолонка + 1;
			КонецЦикла;
			Описание = Описание + "<TR bgcolor=" + ЦветФонаСтрок + "> " + ОписаниеСтроки + "  </TR>";
		КонецЦикла;
		
	Иначе
		Попытка
			ТабличнаяЧасть = СсылкаНаОбъект[СтрокаНастройки.Реквизит];
		Исключение
			Возврат "";
		КонецПопытки;
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если ОбрабатываемКИ Тогда
				ОсновнойВидСвязи = СтрокаТабличнойЧасти.CRM_ОсновнойДляСвязи;
			Иначе
				ОсновнойВидСвязи = Ложь;
			КонецЕсли;
			МаксимальныйИндексСтроки = ТаблицаРеквизитов.Количество()-1;
			Для каждого Строка Из ТаблицаРеквизитов Цикл
				ТекущаяСтрока = ТаблицаРеквизитов.Индекс(Строка);
				ТекущаяКолонка = 0;
				ОписаниеСтроки = "";
				Для Каждого колонка Из  ТаблицаРеквизитов.Колонки Цикл
					КолОбъединяемыхЯчеек = 1;
					Для Сч = ТекущаяСтрока + 1 По  МаксимальныйИндексСтроки Цикл
						Если  ТаблицаРеквизитов.Получить(Сч)[ТекущаяКолонка] = Неопределено Тогда
							КолОбъединяемыхЯчеек = КолОбъединяемыхЯчеек + 1;
						Иначе 
							Прервать
						КонецЕсли;
					КонецЦикла;
					
					Реквизит = ТаблицаРеквизитов.Получить(ТекущаяСтрока)[ТекущаяКолонка]; 
					
					Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
						ИдКонфы = "v8config://v8cfgHelp";
						ИдКартинки = "id2af07561-6367-4f1a-a268-28a694789a41";      
						ДопНули = "/00000000-0000-0000-0000-000000000000";
						ИдПолныйПутьКартинки = ИдКонфы + "/mdpicture/" + ИдКартинки + ДопНули;
						Если ОбрабатываемКИ И ТекущаяКолонка = 0 И ОсновнойВидСвязи Тогда
							ТекстHTMLДляДобавления = "<IMG src=" + ИдПолныйПутьКартинки + ">" + "&nbsp&nbsp&nbsp";
						Иначе
							ТекстHTMLДляДобавления = "";
						КонецЕсли;
					Иначе
						ТекстHTMLДляДобавления = "";
					КонецЕсли;
					
					Если Реквизит <> Неопределено Тогда
						ШрифтЭлемента		= Неопределено;
						ЦветТекстаЭлемента	= Неопределено;
						ЦветФонаЭлемента	= Неопределено;
						Попытка		ШрифтЭлемента = Реквизит.Шрифт;
						Исключение	ШрифтЭлемента = Неопределено;
						КонецПопытки;
						Попытка		ЦветТекстаЭлемента = Реквизит.ЦветТекста;
						Исключение	ЦветТекстаЭлемента = Неопределено;
						КонецПопытки;
						Попытка		ЦветФонаЭлемента = ?(Реквизит.ЭтоРеквизитТабличнойЧасти И Реквизит.ЦветФона = Новый Цвет(255,255,255), Новый Цвет(251,249,236), Реквизит.ЦветФона) ;
						Исключение	ЦветФонаЭлемента = Неопределено;
						КонецПопытки;
						
						ТегиЭлемента = НастройкиПолейОтображенияСодержанияПолучитьТегиШрифтаТекстаHTML(ЦветТекстаЭлемента, ЦветФонаЭлемента, ШрифтЭлемента);
						
						Попытка
							ЗначениеРеквизита =  СтрокаТабличнойЧасти[Реквизит.Реквизит];
						Исключение
							ЗначениеРеквизита = "";
						КонецПопытки;
						
						Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							ОписаниеРеквизита = "&nbsp";
							
							ОписаниеРеквизита = ТегиЭлемента.ОткрывающийТег + ТекстHTMLДляДобавления 
								+ ОписаниеРеквизита + ТегиЭлемента.ЗакрывающийТег;
							
						ИначеЕсли Реквизит.ТипЗначенияРеквизита = "Строка" Тогда
							Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
								ОписаниеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.ПС, "</BR>");
								ОписаниеРеквизита = СтрЗаменить(ЗначениеРеквизита, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
								ОписаниеРеквизита = Строка(ЗначениеРеквизита);
							ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
								Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
									ОписаниеРеквизита = "<%ПредставлениеПустойДаты%>"
								Иначе
									Если ЗначениеРеквизита = НачалоДня(ЗначениеРеквизита) Тогда
										ОписаниеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
									Иначе
										ОписаниеРеквизита = Строка(ЗначениеРеквизита);
									КонецЕсли;
								КонецЕсли;
							Иначе
								ОписаниеРеквизита = ЗначениеРеквизита;
							КонецЕсли;
							
							ОписаниеРеквизита = ТегиЭлемента.ОткрывающийТег + ТекстHTMLДляДобавления 
								+ ОписаниеРеквизита + ТегиЭлемента.ЗакрывающийТег;
								
							ИначеЕсли Реквизит.ТипЗначенияРеквизита = "КонтактнаяИнформация" Тогда
								
							ПредставлениеОбъекта = Строка(ЗначениеРеквизита);
							ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;
							
							Если НЕ (ТипЗнч(ЗначениеРеквизита) = Тип("Неопределено")) Тогда
								НавигационнаяСсылка = Реквизит.ТипЗначенияРеквизита;
								ОписаниеРеквизита = ТекстHTMLДляДобавления + "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта + "</a>&nbsp;";
							Иначе
								ОписаниеРеквизита = НСтр("ru = '[Объект недоступен]'");
							КонецЕсли;
	
						Иначе
							ПредставлениеОбъекта = Строка(ЗначениеРеквизита);
							ПредставлениеОбъекта = ТегиЭлемента.ОткрывающийТег + ПредставлениеОбъекта + ТегиЭлемента.ЗакрывающийТег;							
							
							Если НЕ (ТипЗнч(ЗначениеРеквизита) = Тип("Неопределено")) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеРеквизита)) И ОбщегоНазначения.СсылкаСуществует(ЗначениеРеквизита) Тогда
								НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗначениеРеквизита);
								ОписаниеРеквизита = ТекстHTMLДляДобавления + "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта + "</a>&nbsp;";
							Иначе
								ОписаниеРеквизита = НСтр("ru = '[Объект недоступен]'");
							КонецЕсли;
							
						КонецЕсли;
						
						ОписаниеСтроки = ОписаниеСтроки + "<TD rowspan = " + Строка(КолОбъединяемыхЯчеек) + ">" + ОписаниеРеквизита + "</TD>";
						
					КонецЕсли;
					ТекущаяКолонка = ТекущаяКолонка + 1;
				КонецЦикла;
				Описание = Описание + "<TR bgcolor=" + ЦветФонаСтрок + "> " + ОписаниеСтроки + "  </TR>";
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат "<TABLE width=""100%"" border=1 cellspacing=0 cellpadding=5 bordercolor=" + ЦветРамки + "> <CAPTION align = LEFT><%ЗаголовокОткрывающийТег%>" + СтрокаНастройки.ПредставлениеРеквизита + "<%ЗаголовокЗакрывающийТег%></CAPTION>" +  Описание + "</TABLE>";
КонецФункции

// Функция сохраняет настройки полей отображения содержания в файл.
//
// Параметры:
//	ИмяФайла	- Строка	- Имя файла.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция вогНастройкиПолейОтображенияСодержанияСохранитьВФайл() Экспорт
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ТаблицаНастроек = НастройкиПолейОтображенияСодержанияПолучитьНастройки();
		ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(ТаблицаНастроек, Новый СжатиеДанных(9)));
		ЗаписьXML.Закрыть();
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Попытка ЗаписьXML.Закрыть();
		Исключение КонецПопытки;
		Возврат CRM_ОбщегоНазначенияКлиентСервер.ПолучитьПредставленияИнформацииОбОшибке(ИнформацияОбОшибке);
	КонецПопытки;
КонецФункции 

#КонецОбласти //РаботаСНастройкамиПолейОтображенияСодержания


#Область РаботаССохранениемИЗагрузкойРезультатовОтчетов
	
// Функция проверяет сохраненную структуру с результатами отчета на корректность.
//
// Параметры:
//	ПроверяемаяСтруктура	- Структура	- Проверяемая структура.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция СохраненнаяСтруктураРезультатаОтчетаКорректна(ПроверяемаяСтруктура) Экспорт
	Если ТипЗнч(ПроверяемаяСтруктура) <> Тип("Структура")
		ИЛИ	НЕ ПроверяемаяСтруктура.Свойство("СписокНаименований")
		ИЛИ	НЕ ПроверяемаяСтруктура.Свойство("СоответствиеНаименованийСпискам")
		ИЛИ	ТипЗнч(ПроверяемаяСтруктура.СписокНаименований) <> Тип("СписокЗначений")
		ИЛИ ТипЗнч(ПроверяемаяСтруктура.СоответствиеНаименованийСпискам) <> Тип("Соответствие") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // СохраненнаяСтруктураРезультатаОтчетаКорректна()

// Функция возвращает сохраненный список с результатами отчета по имени.
//
// Параметры:
//	Наименование	- Строка	- Наименование отчета.
//
// Возвращаемое значение:
//	Неопределено или СписокЗначений	- Список с результатами отчета.
//
Функция ПолучитьСохраненныйРезультатОтчетаПоНаименованию(Наименование) Экспорт
	Возврат CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПолучитьСохраненныйРезультатОтчетаПоНаименованию(Наименование);
КонецФункции // ПолучитьСохраненныйРезультатОтчетаПоНаименованию()

// Процедура сохраняет список с результатами отчета под указанным именем.
//
// Параметры:
//	Наименование	- Строка			- Наименование отчета.
//	Список			- СписокЗначений	- Список с результатами отчета.
//
Процедура СохранитьРезультатОтчетаВПараметрахСеанса(Наименование, Список) Экспорт
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().СохранитьРезультатОтчетаВПараметрахСеанса(Наименование, Список);
КонецПроцедуры // СохранитьРезультатОтчетаВПараметрахСеанса()

// Функция возвращает список выбора наименования сохраненного результата отчета.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список выбора наименования.
//
Функция ПолучитьСписокВыбораНаименованийСохраненныхРезультатовОтчетов() Экспорт
	Список = Новый СписокЗначений();
	Попытка
		СохраненнаяСтруктура = ПараметрыСеанса.CRM_СохраненныеРезультатыОтчетов.Получить();
	Исключение
		СохраненнаяСтруктура = Неопределено;
	КонецПопытки;
	Если СохраненнаяСтруктураРезультатаОтчетаКорректна(СохраненнаяСтруктура) Тогда
		Список.ЗагрузитьЗначения(СохраненнаяСтруктура.СписокНаименований.ВыгрузитьЗначения());
	КонецЕсли;
	Возврат Список;
КонецФункции // ПолучитьСписокВыбораНаименованийСохраненныхРезультатовОтчетов()

#КонецОбласти //РаботаССохранениемИЗагрузкойРезультатовОтчетов


#Область ЗаполненияШапкиДокумента
	
// Процедура предназначена для заполнения реквизитов состояния документов
// вызывается в обработчиках событий "ПриСозданииНаСервере" в модулях форм всех документов.
//
// Параметры:
//  Объект						- ДокументОбъект	- Объект редактируемого документа.
//	СостояниеДокумента			- Строка			- Состояние документа.
//	КартинкаСостоянияДокумента	- Число				- Картинка состояния документа.
//	РазрешеноПроведение			- Булево			- Флаг проведения документа.
//
Процедура ЗаполнитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение) Экспорт
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	РазрешеноПроведение = (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СостояниеДокумента = "Новый";
		КартинкаСостоянияДокумента = 0;
	Иначе
		Если Объект.Проведен Тогда
			СостояниеДокумента = "Проведен";
			КартинкаСостоянияДокумента = 1;
		ИначеЕсли РазрешеноПроведение Тогда
			СостояниеДокумента = "Не проведен";
			КартинкаСостоянияДокумента = 0;
		Иначе
			СостояниеДокумента = "Записан";
			КартинкаСостоянияДокумента = 3;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСостояниеДокумента()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "обработка заполнения" в модулях объектов документов.
//
// Параметры:
//  Объект				- ДокументОбъект	- Объект редактируемого документа.
//	ДанныеЗаполнения	- Структура			- Данные заполнения.
//
Процедура ЗаполнитьШапкуДокумента(Объект, ДанныеЗаполнения) Экспорт
	ПараметрОснование = Неопределено;
	ЗначенияЗаполнения = Неопределено;
	Если НЕ (ДанныеЗаполнения = Неопределено ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("Структура")) Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И ЗначениеЗаполнено(ДанныеЗаполнения.БизнесПроцесс) Тогда
			ПараметрОснование = ДанныеЗаполнения.БизнесПроцесс;
		Иначе
			ПараметрОснование = ДанныеЗаполнения;
		КонецЕсли;
	Иначе
		ЗначенияЗаполнения = ДанныеЗаполнения;
	КонецЕсли;
	Пользователь = Пользователи.ТекущийПользователь();
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	РазрешеноПроведение = (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	Если ЕстьРеквизитДокумента("Автор", МетаданныеДокумента) Тогда
		Объект.Автор = Пользователь;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("CRM_Автор", МетаданныеДокумента) Тогда
		Объект.CRM_Автор = Пользователь;
	КонецЕсли;	
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
		И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Ответственный") И ЗначениеЗаполнено(ЗначенияЗаполнения.Ответственный))
		И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Ответственный)) Тогда
			Ответственный = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
			Если Не ЗначениеЗаполнено(Ответственный) Тогда
				Ответственный = Пользователь;
			КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
		И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияЗаполнения.Организация))
		И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Организация)) Тогда
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.Организация <> ЗначениеНастройки Тогда
				Объект.Организация = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.Организация = ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) 
		И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Подразделение") И ЗначениеЗаполнено(ЗначенияЗаполнения.Подразделение))
		И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Подразделение)) Тогда
		ЗначениеНастройки = Пользователи.ТекущийПользователь().Подразделение;
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.Подразделение <> ЗначениеНастройки Тогда
				Объект.Подразделение = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Объект.Подразделение = ПолучитьПредопределенноеПодразделение();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
		И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Ответственный") И ЗначениеЗаполнено(ЗначенияЗаполнения.Ответственный))
		И НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		ОтветственныйПоУмолчанию = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
		Если ЗначениеЗаполнено(ОтветственныйПоУмолчанию) Тогда
			Объект.Ответственный = ОтветственныйПоУмолчанию;
		Иначе
			Объект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ВидЦен", МетаданныеДокумента)
	   И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.ВидЦен)) Тогда
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидЦенПродажи");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Объект.ВидЦен <> ЗначениеНастройки Тогда
				Объект.ВидЦен = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Объект.ВидЦен = Справочники.ВидыЦен["Оптовая"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("ВидЦен", МетаданныеДокумента)
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		//
		Если ЕстьРеквизитДокумента("ЦенаВключаетНДС", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ПараметрОснование) Тогда
				Попытка
					Объект.ЦенаВключаетНДС = ПараметрОснование.ЦенаВключаетНДС;
				Исключение
					Объект.ЦенаВключаетНДС = Объект.ВидЦен.ЦенаВключаетНДС;
				КонецПопытки;
			Иначе
				Объект.ЦенаВключаетНДС = Объект.ВидЦен.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Важность", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(Объект.Важность) Тогда
		Объект.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Статус", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Валюта", МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), Новый Структура("Валюта", Объект.Валюта));
		Если ЕстьРеквизитДокумента("Кратность", МетаданныеДокумента) Тогда
			Объект.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		Если ЕстьРеквизитДокумента("Курс", МетаданныеДокумента) Тогда
			Объект.Курс = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Проект", МетаданныеДокумента) Тогда
		ПроектИзПараметраОснования = Неопределено;
		Попытка ПроектИзПараметраОснования = ПараметрОснование.Проект;
		Исключение КонецПопытки;
		Если ЗначениеЗаполнено(ПроектИзПараметраОснования) Тогда
			Объект.Проект = ПроектИзПараметраОснования;
		ИначеЕсли НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Проект") И ЗначениеЗаполнено(ЗначенияЗаполнения.Проект))
				И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Проект)) Тогда
			//
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Если Объект.Проект <> ЗначениеНастройки Тогда
					Объект.Проект = ЗначениеНастройки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("CRM_Проект", МетаданныеДокумента) Тогда
		ПроектИзПараметраОснования = Неопределено;
		Попытка ПроектИзПараметраОснования = ПараметрОснование.Проект;
		Исключение КонецПопытки;
		Если ЗначениеЗаполнено(ПроектИзПараметраОснования) Тогда
			Объект.CRM_Проект = ПроектИзПараметраОснования;
		ИначеЕсли НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Проект") И ЗначениеЗаполнено(ЗначенияЗаполнения.Проект))
				И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.CRM_Проект)) Тогда
			//
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Если Объект.CRM_Проект <> ЗначениеНастройки Тогда
					Объект.CRM_Проект = ЗначениеНастройки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента) Тогда
		Если ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Партнер") И ЗначениеЗаполнено(ЗначенияЗаполнения.Партнер) Тогда
			Объект.Партнер = ЗначенияЗаполнения.Партнер;
		ИначеЕсли ПараметрОснование <> Неопределено Тогда
			Попытка
				Объект.Партнер = ПараметрОснование.Партнер;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("Договор", МетаданныеДокумента) Тогда
		Если ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Договор") И ЗначениеЗаполнено(ЗначенияЗаполнения.Договор) Тогда
			Объект.Договор = ЗначенияЗаполнения.Договор;
		ИначеЕсли ПараметрОснование <> Неопределено Тогда
			Попытка
				Объект.Договор = ПараметрОснование.Договор;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) Тогда
		Если ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("КонтактноеЛицо") И ЗначениеЗаполнено(ЗначенияЗаполнения.КонтактноеЛицо) Тогда
			Объект.КонтактноеЛицо = ЗначенияЗаполнения.КонтактноеЛицо;
		ИначеЕсли ПараметрОснование <> Неопределено Тогда
			Попытка
				Объект.КонтактноеЛицо = ПараметрОснование.КонтактноеЛицо;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Процедура предназначена для заполнения автора и ответственного документов,
//
// Параметры:
//  Объект				- ДокументОбъект	- Объект редактируемого документа.
//
Процедура ЗаполнитьАвтораИОтветственного(Объект) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		Объект.Менеджер = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки( "ОсновнойОтветственный");
		Если Не ЗначениеЗаполнено(Объект.Менеджер) Тогда
			Объект.Менеджер = Пользователь;
		КонецЕсли;
	Иначе
		Объект.Ответственный = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки( "ОсновнойОтветственный");
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Автор", МетаданныеДокумента) Тогда
		Объект.Автор = Пользователь;
	ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("CRM_Автор", МетаданныеДокумента) Тогда
		Объект.CRM_Автор = Пользователь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвтораИОтветственного()

// Функция возвращает предопределенную организацию.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Предопределенная организация.
//
Функция ПолучитьПредопределеннуюОрганизацию() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе	
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;	
КонецФункции // ПолучитьПредопределеннуюОрганизацию()

// Функция возвращает предопределенное подразделение.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Предопределенное подразделение.
//
Функция ПолучитьПредопределенноеПодразделение() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Подразделения.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|ГДЕ
	|	Подразделения.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Подразделение;
	Иначе	
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
КонецФункции // ПолучитьПредопределенноеПодразделение()

// Функция определяет договор партнера для указанной организации.
// 
// Параметры:
//	Партнер		- СправочникСсылка	- Партнер
//	Организация	- СправочникСсылка	- Организация
//
// Возвращаемое значение:
//	СправочникСсылка	- Договор партнера.
//
Функция ПолучитьДоговорПартнера(Партнер, Организация) Экспорт
	Если ЗначениеЗаполнено(Партнер.ДоговорПоУмолчанию) 
		И (Партнер.ДоговорПоУмолчанию.Организация = Организация) Тогда
		Возврат Партнер.ДоговорПоУмолчанию;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", 		Партнер);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.Организация = &Организация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДоговорыКонтрагентов.ДатаДоговора УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
КонецФункции // ПолучитьДоговорПартнера()	

// Процедура заполняет объект бизнес-процесса.
//
Процедура ЗаполнитьОбъектБизнесПроцесса(Объект, БизнесПроцесс, Задача = Неопределено) Экспорт
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	МетаданныеБизнесПроцесса = БизнесПроцесс.Ссылка.Метаданные();
	Пользователь = Пользователи.ТекущийПользователь();
	
	Если ЕстьРеквизитДокумента("Автор", МетаданныеДокумента) Тогда
		Если НЕ Задача = Неопределено Тогда
			Объект.Автор = Задача.Исполнитель;
		ИначеЕсли ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда
			Объект.Автор = БизнесПроцесс.Автор;
		Иначе
			Объект.Автор = Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Важность", МетаданныеДокумента) 
	   И ЕстьРеквизитДокумента("Важность", МетаданныеБизнесПроцесса) Тогда
		Объект.Важность = БизнесПроцесс.Важность;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		Объект.Организация = БизнесПроцесс.Организация;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента) Тогда
		Объект.Партнер = БизнесПроцесс.Партнер;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) Тогда
		Объект.КонтактноеЛицо = БизнесПроцесс.КонтактноеЛицо;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) Тогда
		Объект.Подразделение = БизнесПроцесс.Подразделение;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Проект", МетаданныеДокумента) Тогда
		Объект.Проект = БизнесПроцесс.Проект;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) 
	   И ЕстьРеквизитДокумента("Ответственный", МетаданныеБизнесПроцесса) Тогда
		Если ЗначениеЗаполнено(БизнесПроцесс.Ответственный) Тогда
			Объект.Ответственный = БизнесПроцесс.Ответственный;
		Иначе
			Объект.Ответственный = Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	// 2. Счет на оплату (CRM)
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю") Тогда
		Если ТипЗнч(Объект) = Тип("ДокументОбъект." + "CRM_СчетНаОплатуПокупателю") Тогда
			Если Задача = Неопределено Тогда
				Объект.ДокументОснование = БизнесПроцесс;
			Иначе
				Объект.ДокументОснование = Задача;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 3. Телемаркетинг
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.CRM_Телемаркетинг") Тогда
		Если Задача = Неопределено Тогда
			Объект.Основание	= БизнесПроцесс;
			Объект.Тема			= НСтр("ru = 'Бизнес-процесс от'") + " " + Формат(БизнесПроцесс.Дата,"ДЛФ=D")+ "/ " + БизнесПроцесс.Наименование;
		Иначе
			Объект.Основание	= Задача;
			Объект.Тема			= НСтр("ru = 'Задача от'") + " " + Формат(Задача.Дата,"ДЛФ=D")+ "/ " + Задача.Наименование;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Партнер", МетаданныеБизнесПроцесса) И ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер	= БизнесПроцесс.Партнер;
			Если ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= БизнесПроцесс.КонтактноеЛицо;
			Иначе
				НоваяСтрока.КонтактноеЛицо	= БизнесПроцесс.Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
			
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(НоваяСтрока.Партнер,
				?(ЗначениеЗаполнено(НоваяСтрока.КонтактноеЛицо),НоваяСтрока.КонтактноеЛицо,Неопределено),
				Перечисления.ТипыКонтактнойИнформации.Телефон, Неопределено);
				
			Если Таб.Количество() > 0  Тогда
				НоваяСтрока.Телефон = Таб[0].Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 4. Рассылка писем
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.CRM_РассылкаЭлектронныхПисем") Тогда
		Если Задача = Неопределено Тогда
			Объект.Основание = БизнесПроцесс;
		Иначе
			Объект.Основание = Задача;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Партнер", МетаданныеБизнесПроцесса) И ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер	= БизнесПроцесс.Партнер;
			Если ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= БизнесПроцесс.КонтактноеЛицо;
			Иначе
				НоваяСтрока.КонтактноеЛицо	= БизнесПроцесс.Партнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
			
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(НоваяСтрока.Партнер,
				?(ЗначениеЗаполнено(НоваяСтрока.КонтактноеЛицо),НоваяСтрока.КонтактноеЛицо,Неопределено),
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Неопределено);
				
			Если Таб.Количество() > 0  Тогда
				НоваяСтрока.Адрес				= Таб[0].АдресЭП;
				НоваяСтрока.ПредставлениеАдреса	= Таб[0].Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// 5. Коммерческое предложение.
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		Если Задача = Неопределено Тогда
			Объект.ДокументОснование	= БизнесПроцесс;
			Объект.CRM_Примечание		= НСтр("ru = 'Бизнес-процесс от'") + " " + Формат(БизнесПроцесс.Дата,"ДЛФ=D")+ "/ " + БизнесПроцесс.Наименование;
		Иначе
			Объект.ДокументОснование	= Задача;
			Объект.CRM_Примечание		= НСтр("ru = 'Задача от'") + " " + Формат(Задача.Дата,"ДЛФ=D")+ "/ " + Задача.Наименование;
		КонецЕсли;
	КонецЕсли;
	// 6. Исходящее письмо
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		Если Задача = Неопределено Тогда
			//Объект.УдалитьПредмет	= БизнесПроцесс;
			Объект.Тема			= НСтр("ru = 'Бизнес-процесс от'") + " " + Формат(БизнесПроцесс.Дата,"ДЛФ=D")+ "/ " + БизнесПроцесс.Наименование;
			Объект.Текст	= БизнесПроцесс.Описание;
		Иначе
			//Объект.УдалитьПредмет	= Задача;
			Объект.Тема			= НСтр("ru = 'Задача от'") + " " + Формат(Задача.Дата,"ДЛФ=D")+ "/ " + Задача.Наименование;
			Объект.Текст	= Задача.Описание;
		КонецЕсли;
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(Объект.Текст);
		ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		Объект.ТекстHTML = СтрЗаменить(ТекстHTML, "size=""2""","");
		Если ЕстьРеквизитДокумента("Партнер", МетаданныеБизнесПроцесса) И ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
			
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(БизнесПроцесс.Партнер,
				?(ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо),БизнесПроцесс.КонтактноеЛицо,Неопределено),
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Неопределено);
				
			Если Таб.Количество() > 0  Тогда
				Если Объект.ПолучателиПисьма.Найти(Таб[0].АдресЭП, "Адрес") = Неопределено Тогда
					НоваяСтрока						= Объект.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес				= Таб[0].АдресЭП;
					НоваяСтрока.Контакт				= Таб[0].Ссылка;
					НоваяСтрока.Представление		= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Таб[0].Ссылка.Наименование, Таб[0].АдресЭП, "");
					Объект.СписокПолучателейПисьма	= НоваяСтрока.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 7. СМС
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		Если Задача = Неопределено Тогда
			Объект.ВзаимодействиеОснование	= БизнесПроцесс;
		Иначе
			Объект.ВзаимодействиеОснование	= Задача;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Партнер", МетаданныеБизнесПроцесса) И ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
			
			Таб = ПолучитьКонтактнуюИнформациюОбъекта(БизнесПроцесс.Партнер,
				?(ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо),БизнесПроцесс.КонтактноеЛицо,Неопределено),
				Перечисления.ТипыКонтактнойИнформации.Телефон, Неопределено);
				
			Если Таб.Количество() > 0  Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Контакт					= Таб[0].Ссылка;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				НоваяСтрока.КакСвязаться			= Таб[0].Представление;
				НоваяСтрока.НомерДляОтправки		= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //ЗаполненияШапкиДокумента


#Область ЗкспортныеПроцедурыИФункции 
	
// Процедура выводит сообщение об ошибке заполнения поля.
//
// Параметры:
//	ЭтотОбъект			-
//	ТекстСообщения		- Строка	- Текст сообщения.
//	ИмяТабличнойЧасти	- Строка	- Имя табличной части.
//	НомерСтроки			- Число		- Номер строки табличной части.
//	Поле				- Строка	- Поле
//	Отказ				- Булево	- Флаг отмены.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено,
	Поле = Неопределено, Отказ = Ложь) Экспорт
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();
	Отказ = Истина;
КонецПроцедуры // СообщитьОбОшибке()

// Функция позволяет определить, есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//	ИмяРеквизита		- Строка		- Строковое имя искомого реквизита, 
//	МетаданныеДокумента	- Метаданные	- Объект описания метаданных документа, среди реквизитов которого производится
//	                                   поиск.
//
// Возвращаемое значение:
//	Истина - Результат поиска
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
КонецФункции // ЕстьРеквизитДокумента()

// Функция позволяет определить, есть ли среди реквизитов ТЧ объекта
// реквизит с переданным именем.
//
// Параметры: 
//	ИмяРеквизита		- Строка		- Строковое имя искомого реквизита, 
//	МетаданныеДокумента	- Метаданные	- Объект описания метаданных документа, среди реквизитов которого производится поиск.
//	ИмяТабличнойЧасти	- Строка	- Имя табличной части объекта, в которой проверяем наличие реквизита.
//
// Возвращаемое значение:
//	Истина - Результат поиска
//
Функция ЕстьРеквизитТабличнойЧастиОбъекта(ИмяРеквизита, МетаданныеДокумента, ИмяТабличнойЧасти) Экспорт
	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат НЕ (МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	КонецЕсли;
КонецФункции // ЕстьРеквизитТабличнойЧастиОбъекта()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Процедура записывает новую настройку пользователя.
Процедура УстановитьНастройкуПользователя(ЗначениеНастройки, ИмяНастройки, Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.CRM_НастройкиПользователей.СоздатьНаборЗаписей() ;
	
	НаборЗаписей.Отбор.Пользователь.Использование 	= Истина;
	НаборЗаписей.Отбор.Пользователь.Значение      	= Пользователь;
	НаборЗаписей.Отбор.Настройка.Использование 		= Истина;
	НаборЗаписей.Отбор.Настройка.Значение      		= ПланыВидовХарактеристик.CRM_НастройкиПользователей[ИмяНастройки];
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Пользователь = Пользователь;
	Запись.Настройка    = ПланыВидовХарактеристик.CRM_НастройкиПользователей[ИмяНастройки];
	Запись.Значение     = ПланыВидовХарактеристик.CRM_НастройкиПользователей[ИмяНастройки].ТипЗначения.ПривестиЗначение(ЗначениеНастройки);
	
	НаборЗаписей.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры // УстановитьНастройкуПользователя()

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура.
//  НоваяДатаДокумента - новая дата документа.
//  НачальнаяДатаДокумента - начальная дата документа.
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера.
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Функция определяет. облагается организация ДНС или нет.
//
// Параметры:
//  Организация - СправочникСсылка.Организации, проверяемая организация.
//
Функция ОрганизацияОблагаетсяНДС(Организация) Экспорт
	Если Организация.СтавкаНДСПоУмолчанию.НеОблагается ИЛИ 
		 (НЕ Организация.СтавкаНДСПоУмолчанию.НеОблагается И Организация.СтавкаНДСПоУмолчанию.Ставка = 0) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // ОрганизацияОблагаетсяНДС()

// Функция возвращает информацию об ответственных лицах организации и их
// должностях.
//
// Параметры:
//  Организация - Составной тип: СправочникСсылка.Организации,
//                 СправочникСсылка.Кассы, СправочникСсылка.МестаХранения,
//                 организационная единица, для которой необходимо получить
//                 информацию об ответственных лицах.
//  ДатаСреза    - Дата - дата, на которую считываются данные.
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физических лицах
//                 структурной единицы.
//
Функция ОтветственныеЛицаОрганизационнойЕдиницы(ОрганизационнаяЕдиница, ДатаСреза) Экспорт
	
	Результат = Новый Структура("ФИОРуководителя, РуководительДолжность, ФИОГлавногоБухгалтера, ФИОКассира, ФИОКладовщика, КладовщикДолжность");

	Если ОрганизационнаяЕдиница <> Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизационнаяЕдиница);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица КАК ТипОтветственногоЛица,
		|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК НазваниеДолжности,
		|	ОтветственныеЛицаСрезПоследних.Сотрудник.Наименование КАК ФИО
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, Организация = &ОрганизационнаяЕдиница) КАК ОтветственныеЛицаСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипОтветственногоЛица 	= Перечисления.ТипыОтветственныхЛиц.Руководитель Тогда
				Результат.ФИОРуководителя       = Выборка.ФИО;
				Результат.РуководительДолжность = Выборка.НазваниеДолжности;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер Тогда
				Результат.ФИОГлавногоБухгалтера = Выборка.ФИО;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.Кассир Тогда
				Результат.ФИОКассира            = Выборка.ФИО;
			ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ТипыОтветственныхЛиц.Кладовщик Тогда
				Результат.ФИОКладовщика			= Выборка.ФИО;
				Результат.КладовщикДолжность    = Выборка.НазваниеДолжности;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	Возврат Результат

КонецФункции // ОтветственныеЛицаОрганизационнойЕдиницы()

// Функция определяет, сколько файлов прикреплено к объекту.
Функция ПолучитьКоличествоПрикрепленныхФайлов(Знач ВладелецФайла, Знач ФайлИсключение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСправочника = ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрисоединенныеФайлы.Ссылка) КАК Количество
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Если ФайлИсключение <> Неопределено Тогда
		ТекстЗапроса =  ТекстЗапроса +
		"
		|	И ПрисоединенныеФайлы.Ссылка <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	
	Если ФайлИсключение <> Неопределено Тогда
		Запрос.Параметры.Вставить("Ссылка", ФайлИсключение);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Количество, 0);
	
КонецФункции

// Функция возвращает текущую дату сеанса для использования на клиенте
//
Функция ПолучитьТекущуюДатуСеанса() Экспорт
	Возврат ТекущаяДатаСеанса();
КонецФункции	
#КонецОбласти //ЗкспортныеПроцедурыИФункции

// +CRM не переносить в объединенные решения
#Область Ценообразование
	
// Функция округляет число по заданному порядку.
//
// Параметры:
//  Число						- Число								- Число, которое необходимо округлить.
//  ПорядокОкругления			- Перечисления.ПорядкиОкругления	- Порядок округления.
//  ОкруглятьВБольшуюСторону	- Булево 							- Округление в большую сторону.
//
// Возвращаемое значение:
//  Число	- Результат округления.
//
Функция ОкруглитьЦену(Число, ПравилоОкругления, ОкруглятьВБольшуюСторону) Экспорт
	Перем Результат; // Возвращаемый результат.
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если ЗначениеЗаполнено(ПравилоОкругления) Тогда
		ПорядокОкругления = ПравилоОкругления;
	Иначе
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	КонецЕсли;
	Порядок = Число(Строка(ПорядокОкругления));
	// Вычислим количество интервалов, входящих в число.
	КоличествоИнтервал	= Число / Порядок;
	// Вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4.
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	Возврат Результат;
КонецФункции // ОкруглитьЦену()

// Функция рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма				- Число							- Сумма НДС
//  ЦенаВключаетНДС	- Булево						- Признак включения НДС в сумму.
//  СтавкаНДС			- СправочникСсылка.СтавкиНДС	- Ссылка на ставку НДС.
//
// Возвращаемое значение:
//  Число	- Пересчитанная сумма НДС.
//
Функция ПересчитатьСуммуПриИзмененииФлаговНДС(Сумма, ЦенаВключаетНДС, СтавкаНДС) Экспорт
	Ставка = СтавкаНДС.Ставка;
	Если ЦенаВключаетНДС Тогда
		Сумма = (Сумма * (100 + Ставка)) / 100;
	Иначе
		Сумма = (Сумма * 100) / (100 + Ставка);
	КонецЕсли;
	Возврат Сумма;
КонецФункции // ПересчитатьСуммуПриИзмененииФлаговНДС()

// Процедура выполняет пересчет цены табличной части документа после изменений в форме "Цены и валюта".
//
// Параметры:
//	СтруктураРеквизитов		- Структура			- Структура реквизитов, необходимых при пересчете.
//	ТабличнаяЧастьДокумента	- ТаблицаЗначений	- Табличная часть документа.
//
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента) Экспорт
	// Скидки.
	Если СтруктураДанных.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанных.ВидСкидкиНаценки) Тогда
		СтруктураДанных.ПроцентРучнойСкидки = СтруктураДанных.ВидСкидкиНаценки.Процент;
	КонецЕсли;	
	// 1. Сформируем таблицу документа.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	// Номенклатура.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	// Характеристика.
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
	// СтавкиНДС.
	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);	
	// ЕдиницаИзмерения.
	Массив.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	Массив.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТипов);	
	// Коэффициент.
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	ТаблицаНоменклатуры.Колонки.Добавить("Коэффициент", ОписаниеТипов);
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
		   И СтрокаТЧ.Свойство("СтавкаНДС") Тогда
			НоваяСтрока.СтавкаНДС		 = СтрокаТЧ.СтавкаНДС;
		КонецЕсли;
		Если ТипЗнч(СтрокаТЧ.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Или Не ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
			НоваяСтрока.Коэффициент = 1;
		Иначе
			НоваяСтрока.Коэффициент = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС,
	|	ТаблицаНоменклатуры.Коэффициент
	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	Запрос.Выполнить();
	// 2. Заполним цены.
	Если СтруктураДанных.ВидЦен.РассчитываетсяДинамически Тогда
		ДинамическийВидЦен = Истина;
		ВидЦенПараметр = СтруктураДанных.ВидЦен.БазовыйВидЦен;
		Наценка = СтруктураДанных.ВидЦен.Процент;
		ПорядокОкругления = СтруктураДанных.ВидЦен.ПорядокОкругления;
		ОкруглятьВБольшуюСторону = СтруктураДанных.ВидЦен.ОкруглятьВБольшуюСторону;
	Иначе
		ДинамическийВидЦен = Ложь;
		ВидЦенПараметр = СтруктураДанных.ВидЦен;	
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанных.ВалютаДокумента);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(ТаблицаНоменклатуры.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОбработки, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО (ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Актуальность";
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",	 СтрокаТабЧасти.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",	 СтрокаТабЧасти.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаТабЧасти.ЕдиницаИзмерения);
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
		   И СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
			СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабЧасти.СтавкаНДС);
		КонецЕсли;
		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Цена = РезультатПоиска[0].Цена;
			Если Цена = 0 Тогда
				СтрокаТабЧасти.Цена = Цена;
			Иначе
				// Динамически рассчитываем цену.
				Если ДинамическийВидЦен Тогда
					Цена = Цена * (1 + Наценка / 100);
				Иначе	
					ПорядокОкругления = РезультатПоиска[0].ПорядокОкругления;
					ОкруглятьВБольшуюСторону = РезультатПоиска[0].ОкруглятьВБольшуюСторону;
				КонецЕсли; 
				Если СтруктураДанных.Свойство("ЦенаВключаетНДС") 
				   И ((СтруктураДанных.ЦенаВключаетНДС И НЕ РезультатПоиска[0].ЦенаВключаетНДС) 
				   ИЛИ (НЕ СтруктураДанных.ЦенаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС)) Тогда
					Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.ЦенаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
				КонецЕсли;
				СтрокаТабЧасти.Цена = ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦен()

// Функция выполняет пересчет документа после изменений в форме "Цены и валюта".
//
// Параметры:
//	СтруктураДанных	- Структура	- Структура данных.
//
// Возвращаемое значение:
//  Число	- Полученная цена номенклатуры по прайсу.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных) Экспорт
	Если СтруктураДанных.ВидЦен.РассчитываетсяДинамически Тогда
		ДинамическийВидЦен = Истина;
		ВидЦенПараметр = СтруктураДанных.ВидЦен.БазовыйВидЦен;
		Наценка = СтруктураДанных.ВидЦен.Процент;
		ПорядокОкругления = СтруктураДанных.ВидЦен.ПорядокОкругления;
		ОкруглятьВБольшуюСторону = СтруктураДанных.ВидЦен.ОкруглятьВБольшуюСторону;
	Иначе
		ДинамическийВидЦен = Ложь;
		ВидЦенПараметр = СтруктураДанных.ВидЦен;	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.ДатаОбработки);
	Запрос.УстановитьПараметр("Номенклатура",	 СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  СтруктураДанных.Характеристика);
	Запрос.УстановитьПараметр("Коэффициент",	 СтруктураДанных.Коэффициент);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанных.Валюта);
	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(&Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОбработки,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Актуальность";
	Выборка = Запрос.Выполнить().Выбрать();
	Цена = 0;
	Пока Выборка.Следующий() Цикл
		Цена = Выборка.Цена;
		// Динамически рассчитываем цену.
		Если ДинамическийВидЦен Тогда
			Цена = Цена * (1 + Наценка / 100);
		Иначе	
			ПорядокОкругления = Выборка.ПорядокОкругления;
			ОкруглятьВБольшуюСторону = Выборка.ОкруглятьВБольшуюСторону;
		КонецЕсли;
		Если (СтруктураДанных.ЦенаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
			ИЛИ (НЕ СтруктураДанных.ЦенаВключаетНДС И Выборка.ЦенаВключаетНДС) Тогда
			Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.ЦенаВключаетНДС, СтруктураДанных.СтавкаНДС);
		КонецЕсли;
		Цена = ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
	КонецЦикла;
	Возврат Цена;
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

// Функция формирует строку представления номенклатуры с учетом характеристики и серий.
//
// Параметры:
//  НоменклатураПредставление		- Строка	- Представление номенклатуры.
//  ХарактеристикаПредставление		- Строка	- Представление характеристики.
//  ПартияПредставление				- Строка	- Представление партии.
//	ЗаказПокупателяПредставление	- Строка	- Представление заказа покупателя.
//
// Возвращаемое значение:
//  Строка	- Строка с представлением номенклатуры.
//
Функция ПредставлениеНоменклатуры(НоменклатураПредставление, ХарактеристикаПредставление = "",
									ПартияПредставление = "", ЗаказПокупателяПредставление = "") Экспорт
	СтрПредставление = """" + СокрЛП(НоменклатураПредставление) + """";
	Если ЗначениеЗаполнено(ХарактеристикаПредставление)Тогда
		СтрПредставление = СтрПредставление + " | """ + СокрЛП(ХарактеристикаПредставление) + """";
	КонецЕсли;
	Если  ЗначениеЗаполнено(ПартияПредставление) Тогда
		СтрПредставление = СтрПредставление + " | """ + СокрЛП(ПартияПредставление) + """";
	КонецЕсли;
	Если  ЗначениеЗаполнено(ЗаказПокупателяПредставление) Тогда
		СтрПредставление = СтрПредставление + " | """ + СокрЛП(ЗаказПокупателяПредставление) + """";
	КонецЕсли;
	Возврат СтрПредставление;
КонецФункции // ПредставлениеНоменклатуры()

// Функция формирует строку представления контрагента.
//
// Параметры:
//  КонтрагентПредставление		- Строка	- Представление контрагента.
//  ДоговорПредставление		- Строка	- Представление договора.
//  ДокументПредставление		- Строка	- Представление документа.
//  ЗаказПредставление			- Строка	- Представление заказа.
//  ВидРасчетовПредставление	- Строка	- Представление вида расчета.
//
// Возвращаемое значение:
//	Строка	- Строка с представлением контрагента.
//
Функция ПредставлениеКонтрагента(КонтрагентПредставление, ДоговорПредставление = "", ДокументПредставление = "",
									ЗаказПредставление = "", ВидРасчетовПредставление = "") Экспорт
	СтрПредставление = """" + СокрЛП(КонтрагентПредставление) + """";
	Если ЗначениеЗаполнено(ДоговорПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ДоговорПредставление);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ДокументПредставление);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ЗаказПредставление);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидРасчетовПредставление)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(ВидРасчетовПредставление);
	КонецЕсли;
	Возврат СтрПредставление;
КонецФункции // ПредставлениеКонтрагента()

// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
//
// Параметры:
//	ФормаДокумента	- УправляемаяФорма		- Форма документа.
//	СтрокаТабЧасти	- СтрокаТабличнойЧасти	- Строка табличной части.
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти)
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	КонецЕсли;
	Если СтрокаТабЧасти.Свойство("ПроцентРучнойСкидки") Тогда
		Если СтрокаТабЧасти.ПроцентРучнойСкидки = 100 Тогда
			СтрокаТабЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабЧасти.ПроцентРучнойСкидки <> 0 И СтрокаТабЧасти.Количество <> 0 Тогда
			СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма * (1 - СтрокаТабЧасти.ПроцентРучнойСкидки / 100);
		КонецЕсли;
	КонецЕсли;	
	СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
	Если ФормаДокумента.Объект.Свойство("ЦенаВключаетНДС") Тогда
		СтрокаТабЧасти.СуммаНДС = ?(
			ФормаДокумента.Объект.ЦенаВключаетНДС, 
			СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабЧасти.Сумма * СтавкаНДС / 100);
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(ФормаДокумента.Объект.ЦенаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
	Иначе
		СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
		СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + СтрокаТабЧасти.СуммаНДС;
	КонецЕсли;	
КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()	

// Процедура выполняет пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме
// "Цены и валюта".
//
// Параметры:
//	ФормаДокумента		- УправляемаяФорма	- Форма документа.
//	ИмяТабличнойЧасти	- Строка			- Имя табличной части.
//
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	Для Каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			Если ФормаДокумента.Объект.ЦенаВключаетНДС Тогда
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * (100 + СтавкаНДС)) / 100;
			Иначе
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * 100) / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Процедура выполняет пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//	ФормаДокумента		- УправляемаяФорма	- Форма документа.
//	ИмяТабличнойЧасти	- Строка			- Имя табличной части.
//	ПересчитатьСкидки	- Булево			- Флаг пересчета скидок.
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ФормаДокумента, ИмяТабличнойЧасти, ПересчитатьСкидки = Ложь) Экспорт
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	СтруктураДанных.Вставить("Дата",				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация",			ФормаДокумента.Объект.Организация);
	СтруктураДанных.Вставить("ВидЦен",				ФормаДокумента.Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		ФормаДокумента.Объект.Валюта);
	СтруктураДанных.Вставить("ЦенаВключаетНДС",		ФормаДокумента.Объект.ЦенаВключаетНДС);
	Если ПересчитатьСкидки Тогда
		СтруктураДанных.Вставить("ВидСкидкиНаценки", ФормаДокумента.Объект.ВидСкидкиНаценки);
		СтруктураДанных.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	Для Каждого СтрокаТЧ Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		СтрокаТЧ.Цена = 0;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда Продолжить; КонецЕсли; 
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
	КонецЦикла;
	ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		РезультатПоиска = ФормаДокумента.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаРезультат Из РезультатПоиска Цикл
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаРезультат);
		КонецЦикла;
	КонецЦикла;
	Если ПересчитатьСкидки Тогда
		Для Каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
			СтрокаТабличнойЧасти.ПроцентРучнойСкидки = СтруктураДанных.ПроцентРучнойСкидки;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Процедура выполняет пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//	ФормаДокумента		- УправляемаяФорма	- Форма документа.
//	ПредыдущаяВалюта	- СправочникСсылка	- Предыдущая валюта.
//	ИмяТабличнойЧасти	- Строка			- Имя табличной части.
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти) Экспорт
	
	ВалютаДокумента = "Валюта";
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПредыдущаяВалюта, ФормаДокумента.Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ФормаДокумента.Объект[ВалютаДокумента], ФормаДокумента.Объект.Дата);
	Для Каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			СтрокаТабличнойЧасти.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ПредыдущаяВалюта, ФормаДокумента.Объект[ВалютаДокумента], СтруктураКурсовСтаройВалюты.Курс,
				СтруктураКурсовНовойВалюты.Курс, СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		// Сумма.	
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			СтрокаТабличнойЧасти.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ПредыдущаяВалюта, ФормаДокумента.Объект[ВалютаДокумента], СтруктураКурсовСтаройВалюты.Курс,
				СтруктураКурсовНовойВалюты.Курс, СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
			Если СтрокаТабличнойЧасти.Свойство("ПроцентРучнойСкидки") Тогда
				// Скидки.
				Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентРучнойСкидки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентРучнойСкидки / 100);
				КонецЕсли;
			КонецЕсли;														
			СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	        СтрокаТабличнойЧасти.СуммаНДС = ?(ФормаДокумента.Объект.ЦенаВключаетНДС, СтрокаТабличнойЧасти.Сумма 
				- (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100), СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.ЦенаВключаетНДС, 0,
				СтрокаТабличнойЧасти.СуммаНДС);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

#КонецОбласти //Ценообразование
// -CRM не переносить в объединенные решения


#Область ФормированияПечатныхФорм
	
// Функция возвращает представление номенклатуры для печати.
//
// Параметры:
//	Номенклатура	- СправочникСсылка	- Номенклатура
//	Характеристика	- СправочникСсылка	- Характеристика
//	Артикул			- Строка			- Артикул
//
// Возвращаемое значение:
//	Строка	- Представление номенклатуры.
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(Номенклатура, Характеристика = Неопределено, Артикул = "")  Экспорт
	ДопХарактеристики = "";
	Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() И ЗначениеЗаполнено(Характеристика) Тогда
		ДопХарактеристики = ДопХарактеристики + " (" + СокрЛП(Характеристика) + ")";
	КонецЕсли; 
	СтрокаАртикул = СокрЛП(Артикул);
	Если ЗначениеЗаполнено(СтрокаАртикул) Тогда
		СтрокаАртикул = ", " + СтрокаАртикул;
	КонецЕсли;
 	Если ДопХарактеристики <> "" ИЛИ ЗначениеЗаполнено(СтрокаАртикул) Тогда
		Возврат СокрЛП(Номенклатура) + ДопХарактеристики + СтрокаАртикул;
	Иначе
    	Возврат СокрЛП(Номенклатура);
	КонецЕсли;	 
КонецФункции // ПолучитьПредставлениеНоменклатурыДляПечати()

// Функция возвращает структуру данных со сводным описанием контрагента.
//
// Параметры: 
//	СписокСведений	- СписокЗначений	- Список со значениями параметров организации.
//	Список			- СписокЗначений	- Список запрашиваемых параметров организации.
//	СПрефиксом		- Булево			- Признак выводить или нет префикс параметра организации.
//
// Возвращаемое значение:
//	Строка	- Описание организации.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,ФактическийАдрес,Телефоны,email,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 
	Результат = "";
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		" ");
	СоответствиеПараметров.Вставить("ИНН",						" ИНН ");
	СоответствиеПараметров.Вставить("КПП",						" КПП ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			" ");
	СоответствиеПараметров.Вставить("Телефоны",					" тел.: ");
	СоответствиеПараметров.Вставить("email",					" e-mail: ");
	СоответствиеПараметров.Вставить("НомерСчета",				" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 По ЧислоПараметров Цикл
		ПозЗапятой = Найти(Список, ",");
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				Если ПустаяСтрока(СтрокаДополнения) Тогда Продолжить; КонецЕсли;
				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если НЕ ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщение = Новый СообщениеПользователю();
		        Сообщение.Текст = СтрЗаменить(НСтр("ru = 'Не удалось определить значение параметра организации: %Параметр%'"), "%Параметр%", ИмяПараметра);
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
КонецФункции // ОписаниеОрганизации()

// Функция форматирования прописи количества.
//
// Параметры:
//	Количество	- Число	- Число, которое мы хотим форматировать.
//
// Возвращаемое значение:
//	Строка	- Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт
	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);
	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
   	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
   	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
    КонецЕсли;
	Возврат ЧислоПрописью(Количество, , ПараметрыПрописи);
КонецФункции // КоличествоПрописью()

// Функция формирует сведения об указанном ЮрФизЛице.
// К сведениям относятся - наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо					- СправочникСсылка	- Организация или физическое лицо, о котором собираются сведения.
//	ДатаПериода					- Дата				- Дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы	- Булево			- Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//	Структура	- Собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт
	
	Если Метаданные.Имя <> "CRM" Тогда
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Партнеры") Тогда
			Возврат Вычислить("ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ЮрФизЛицо), ДатаПериода)");
		Иначе
			Возврат Вычислить("ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода)");
		КонецЕсли;
	КонецЕсли;

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, ФактическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда Возврат Сведения; КонецЕсли;
	
	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		Попытка
			Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") тогда
				ТекБанковскийСчет = ЮрФизЛицо.БанковскийСчетПоУмолчанию;
			ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.вогЮридическиеЛица") тогда
				ТекБанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет; 	
			КонецЕсли;
		Исключение
			ТекБанковскийСчет = Справочники["БанковскиеСчета"].ПустаяСсылка();
		КонецПопытки;	
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкРасчетов.Пустая.
	Если ТекБанковскийСчет.БанкРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкРасчетов";
	КонецЕсли;
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
		ИмяРеквизитаИНН		  = "ИНН";
		ИмяРеквизитаКПП		  = "КПП";
		ИмяРеквизитаКодПоОКПО = "КодПоОКПО";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Партнеры") Тогда
		ИмяСправочника = "Партнеры";
		ИмяРеквизитаИНН		  = "CRM_ИНН";
		ИмяРеквизитаКПП		  = "CRM_КПП";
		ИмяРеквизитаКодПоОКПО = "CRM_КодПоОКПО";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ИмяСправочника = "вогЮридическиеЛица";
		ИмяРеквизитаИНН		  = "CRM_ИНН";
		ИмяРеквизитаКПП		  = "CRM_КПП";
		ИмяРеквизитаКодПоОКПО = "КодПоОКПО";
	Иначе
		Возврат Сведения;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПарЮрФизЛицо",      ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОрганизации.Представление КАК Наименование,
	|	ТаблицаОрганизации.НаименованиеПолное КАК ПолноеНаименование,
	|	ТаблицаОрганизации." + ИмяРеквизитаИНН + " КАК ИНН,
	|	ТаблицаОрганизации." + ИмяРеквизитаКПП + " КАК КПП,
	|	ТаблицаОрганизации." + ИмяРеквизитаКодПоОКПО + " КАК КодПоОКПО,";
	Если ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + "          КАК Банк,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".Код      КАК БИК,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета." + ИмяРеквизитаБанка + ".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ТаблицаОрганизации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	ТаблицаОрганизации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	""""                          КАК НомерСчета,
		|	""""                          КАК Банк,
		|	""""                          КАК БИК,
		|	""""                          КАК КоррСчет,
		|	""""                          КАК АдресБанка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ТаблицаОрганизации
		|
		|ГДЕ
		|	ТаблицаОрганизации.Ссылка = &ПарЮрФизЛицо";
	КонецЕсли;
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();
	Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
	Сведения.Вставить("КПП",       Данные.КПП);
	Сведения.Вставить("Свидетельство",	"");
	Сведения.Вставить("ПолноеНаименование", СокрЛП(Данные.ПолноеНаименование));
	Если Данные <> Неопределено Тогда
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			Email = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Партнеры") Тогда
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
				ЮрАдрес = Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес;
			Иначе
				ЮрАдрес = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			КонецЕсли;	
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Email = Справочники.ВидыКонтактнойИнформации.EmailЮридическогоЛица;
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
			Телефон = Справочники.ВидыКонтактнойИнформации.ТелефонЮридическогоЛица;
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресЮридическогоЛица;
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.АдресЮридическогоЛица;
			Email = Справочники.ВидыКонтактнойИнформации.EmailЮридическогоЛица;
		Иначе
			Телефон = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ФактАдрес = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();		
			Email = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();		
		КонецЕсли; 
		Сведения.Вставить("Представление",    СокрЛП(Данные.Наименование));
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("Телефоны",         ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Телефон));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("БИК",              Данные.БИК);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ЮрАдрес));
		Сведения.Вставить("ФактическийАдрес", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, ФактАдрес));
		Сведения.Вставить("EMAIL", ПолучитьКонтактнуюИнформацию(ЮрФизЛицо, Email));
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;
	Возврат Сведения;
КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//	ОбъектКонтактнойИнформации	- СправочникСсылка	- Объект контактной информации.
//	ВидИнформации				- СправочникСсылка	- Вид контактной информации.
//
// Возвращаемое значение:
//	Строка	- Представление найденного адреса.
//                                          
Функция ПолучитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации, ВидИнформации) Экспорт
	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда 		
		ТаблицаИсточник = "Организации";		
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда		
		ТаблицаИсточник = "ФизическиеЛица";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Партнеры") Тогда		
		ТаблицаИсточник = "Партнеры";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда		
		ТаблицаИсточник = "вогЮридическиеЛица";
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Пользователи") Тогда		
		ТаблицаИсточник = "Пользователи";
	Иначе 
		Возврат "";	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ОбъектКонтактнойИнформации);
	Запрос.УстановитьПараметр("Вид"   , ВидИнформации);
	Запрос.Текст = "ВЫБРАТЬ 
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник." + ТаблицаИсточник + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Вид = &Вид
	|	И КонтактнаяИнформация.Ссылка = &Объект";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;
КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Процедура устанавливает условное оформление.
//
// Параметры:
//	ВыбранныйЭлемент	- ЭлементУправления	- Элемент формы.
//	Список				- СписокЗначений	- Список
//	ИмяНастройки		- Строка			- Имя настройки.
//
Процедура ВыделитьЖирнымОсновнойЭлемент(ВыбранныйЭлемент, Список, ИмяНастройки = "ОсновнойЭлемент") Экспорт
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для Каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда Возврат; КонецЕсли;
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВыбранныйЭлемент;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = "Выделение основного элемента";
КонецПроцедуры // ВыделитьЖирнымОсновнойЭлемент()

#КонецОбласти //ФормированияПечатныхФорм


#Область РаботаСКонтактнойИнформацией
	
// Функция получает контактную информацию объекта.
//
// Параметры:
//	Партнер					- СправочникСсылка		- Объект, для которого получается контактная информация.
//	КонтактноеЛицо			- СправочникСсылка		- Контактное лицо объекта.
//	ТипКонтактнойИнформации	- ПеречислениеСсылка	- Тип контактной информации.
//	ВидКонтактнойИнформации	- СправочникСсылка		- Вид контактной информации.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактной информации.
//
//START Кайдашов #406 Добавил параметр ТорговаяТочка
Функция ПолучитьКонтактнуюИнформациюОбъекта(Партнер = Неопределено, КонтактноеЛицо = Неопределено,
											ТипКонтактнойИнформации = Неопределено, ВидКонтактнойИнформации = Неопределено,ТорговаяТочка = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Партнер) И Не ЗначениеЗаполнено(КонтактноеЛицо) И Не ЗначениеЗаполнено(ТорговаяТочка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Массив = Новый Массив;
	Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
	Если НЕ Партнер = Неопределено Тогда	
		Если Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		Иначе
			Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ТорговаяТочка = Неопределено Тогда	
			Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочниквогТорговыеТочки);
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстВремТаблиц	= "";
	ТекстЗапроса	= "";
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Предопределенный,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Страна,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Регион,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Город,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.ДоменноеИмяСервера,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов,
        |	КонтактныеЛицаПартнеровКонтактнаяИнформация.CRM_ОсновнойДляСвязи,
		|	ВЫБОР
		|		КОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица)
		|			ТОГДА -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	0 КАК ПорядокВремТаб
		|ПОМЕСТИТЬ КонтактныеЛицаПартнеровКИ
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ";
		Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &КонтактноеЛицо";
		Иначе	 
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка В (&КонтактноеЛицо)";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = (&ВидКИ)";
		КонецЕсли;
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	Если ЗначениеЗаполнено(Партнер) Тогда
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|ВЫБРАТЬ
		|	ПартнерыКонтактнаяИнформация.Ссылка,
		|	ПартнерыКонтактнаяИнформация.Вид,
		|	ПартнерыКонтактнаяИнформация.Тип,
		|	ПартнерыКонтактнаяИнформация.Вид.Предопределенный,
		|	ПартнерыКонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
		|	ПартнерыКонтактнаяИнформация.Представление,
		|	ПартнерыКонтактнаяИнформация.ЗначенияПолей,
		|	ПартнерыКонтактнаяИнформация.Страна,
		|	ПартнерыКонтактнаяИнформация.Регион,
		|	ПартнерыКонтактнаяИнформация.Город,
		|	ПартнерыКонтактнаяИнформация.АдресЭП,
		|	ПартнерыКонтактнаяИнформация.ДоменноеИмяСервера,
		|	ПартнерыКонтактнаяИнформация.НомерТелефона,
		|	ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов,
        |	ПартнерыКонтактнаяИнформация.CRM_ОсновнойДляСвязи,
		|	ВЫБОР
		|		КОГДА ПартнерыКонтактнаяИнформация.Вид.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
		|			ТОГДА 0
		|		КОГДА ПартнерыКонтактнаяИнформация.Вид.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо)
		|			ТОГДА 1
		|		КОГДА ПартнерыКонтактнаяИнформация.Вид.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания)
		|			ТОГДА 1
		|		КОГДА ПартнерыКонтактнаяИнформация.Вид 			= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица)
		|			ТОГДА -1		
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	1 КАК ПорядокВремТаб
		|ПОМЕСТИТЬ ПартнерыКИ
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
		|	И ПартнерыКонтактнаяИнформация.Вид.Родитель В(&Массив)";
		Если ЗначениеЗаполнено(ТипКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И ПартнерыКонтактнаяИнформация.Тип = &Тип";
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И ПартнерыКонтактнаяИнформация.Вид = (&ВидКИ)";
		КонецЕсли;
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|ВЫБРАТЬ
		|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка,
		|	вогТорговыеТочкиКонтактнаяИнформация.Вид,
		|	вогТорговыеТочкиКонтактнаяИнформация.Тип,
		|	вогТорговыеТочкиКонтактнаяИнформация.Вид.Предопределенный,
		|	вогТорговыеТочкиКонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
		|	вогТорговыеТочкиКонтактнаяИнформация.Представление,
		|	вогТорговыеТочкиКонтактнаяИнформация.ЗначенияПолей,
		|	вогТорговыеТочкиКонтактнаяИнформация.Страна,
		|	вогТорговыеТочкиКонтактнаяИнформация.Регион,
		|	вогТорговыеТочкиКонтактнаяИнформация.Город,
		|	вогТорговыеТочкиКонтактнаяИнформация.АдресЭП,
		|	вогТорговыеТочкиКонтактнаяИнформация.ДоменноеИмяСервера,
		|	вогТорговыеТочкиКонтактнаяИнформация.НомерТелефона,
		|	вогТорговыеТочкиКонтактнаяИнформация.НомерТелефонаБезКодов,
        |	вогТорговыеТочкиКонтактнаяИнформация.CRM_ОсновнойДляСвязи,
		|	ВЫБОР
		|		КОГДА вогТорговыеТочкиКонтактнаяИнформация.Вид.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонТорговойТочки)
		|			ТОГДА 0
		|		КОГДА вогТорговыеТочкиКонтактнаяИнформация.Вид.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailТорговойТочки)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	1 КАК ПорядокВремТаб
		|ПОМЕСТИТЬ вогТорговыеТочкиКИ
		|ИЗ
		|	Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
		|ГДЕ
		|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка = &ТорговаяТочка
		|	И вогТорговыеТочкиКонтактнаяИнформация.Вид.Родитель В(&Массив)";
		Если ЗначениеЗаполнено(ТипКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И вогТорговыеТочкиКонтактнаяИнформация.Тип = &Тип";
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			ТекстВремТаблиц = ТекстВремТаблиц + "
			|	И вогТорговыеТочкиКонтактнаяИнформация.Вид = (&ВидКИ)";
		КонецЕсли;
		ТекстВремТаблиц = ТекстВремТаблиц + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКИ.Ссылка,
		|	КонтактныеЛицаПартнеровКИ.Вид,
		|	КонтактныеЛицаПартнеровКИ.Тип,
		|	КонтактныеЛицаПартнеровКИ.ВидПредопределенный,
		|	КонтактныеЛицаПартнеровКИ.ИспользоватьДляОповещений,
		|	КонтактныеЛицаПартнеровКИ.Представление,
		|	КонтактныеЛицаПартнеровКИ.ЗначенияПолей,
		|	КонтактныеЛицаПартнеровКИ.Страна,
		|	КонтактныеЛицаПартнеровКИ.Регион,
		|	КонтактныеЛицаПартнеровКИ.Город,
		|	КонтактныеЛицаПартнеровКИ.АдресЭП,
		|	КонтактныеЛицаПартнеровКИ.ДоменноеИмяСервера,
		|	КонтактныеЛицаПартнеровКИ.НомерТелефона,
		|	КонтактныеЛицаПартнеровКИ.НомерТелефонаБезКодов,
        |	КонтактныеЛицаПартнеровКИ.CRM_ОсновнойДляСвязи,
		|	КонтактныеЛицаПартнеровКИ.Порядок,
		|	КонтактныеЛицаПартнеровКИ.ПорядокВремТаб
		|ИЗ
		|	КонтактныеЛицаПартнеровКИ КАК КонтактныеЛицаПартнеровКИ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Партнер) Тогда
		Если НЕ ТекстЗапроса = "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ПартнерыКИ.Ссылка,
		|	ПартнерыКИ.Вид,
		|	ПартнерыКИ.Тип,
		|	ПартнерыКИ.ВидПредопределенный,
		|	ПартнерыКИ.ИспользоватьДляОповещений,
		|	ПартнерыКИ.Представление,
		|	ПартнерыКИ.ЗначенияПолей,
		|	ПартнерыКИ.Страна,
		|	ПартнерыКИ.Регион,
		|	ПартнерыКИ.Город,
		|	ПартнерыКИ.АдресЭП,
		|	ПартнерыКИ.ДоменноеИмяСервера,
		|	ПартнерыКИ.НомерТелефона,
		|	ПартнерыКИ.НомерТелефонаБезКодов,
        |	ПартнерыКИ.CRM_ОсновнойДляСвязи,
		|	ПартнерыКИ.Порядок,
		|	ПартнерыКИ.ПорядокВремТаб
		|ИЗ
		|	ПартнерыКИ КАК ПартнерыКИ";
	КонецЕсли;
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		Если НЕ ТекстЗапроса = "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	вогТорговыеТочкиКИ.Ссылка,
		|	вогТорговыеТочкиКИ.Вид,
		|	вогТорговыеТочкиКИ.Тип,
		|	вогТорговыеТочкиКИ.ВидПредопределенный,
		|	вогТорговыеТочкиКИ.ИспользоватьДляОповещений,
		|	вогТорговыеТочкиКИ.Представление,
		|	вогТорговыеТочкиКИ.ЗначенияПолей,
		|	вогТорговыеТочкиКИ.Страна,
		|	вогТорговыеТочкиКИ.Регион,
		|	вогТорговыеТочкиКИ.Город,
		|	вогТорговыеТочкиКИ.АдресЭП,
		|	вогТорговыеТочкиКИ.ДоменноеИмяСервера,
		|	вогТорговыеТочкиКИ.НомерТелефона,
		|	вогТорговыеТочкиКИ.НомерТелефонаБезКодов,
        |	вогТорговыеТочкиКИ.CRM_ОсновнойДляСвязи,
		|	вогТорговыеТочкиКИ.Порядок,
		|	вогТорговыеТочкиКИ.ПорядокВремТаб
		|ИЗ
		|	вогТорговыеТочкиКИ КАК вогТорговыеТочкиКИ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ОсновнойДляСвязи УБЫВ,
	|	ПорядокВремТаб,
	|	Порядок,
	|	ИспользоватьДляОповещений УБЫВ";
	
	Запрос.Текст = ТекстВремТаблиц + ТекстЗапроса;
	Запрос.УстановитьПараметр("Партнер"			,Партнер);
	Запрос.УстановитьПараметр("КонтактноеЛицо"	,КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТорговаяТочка"	,ТорговаяТочка);
	Запрос.УстановитьПараметр("Массив"			,Массив);
	Запрос.УстановитьПараметр("Тип"				,ТипКонтактнойИнформации);
	Запрос.УстановитьПараметр("ВидКИ"			,ВидКонтактнойИнформации);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьКонтактнуюИнформациюОбъекта()

// Функция преобразовывает строку в структуру полей.
//
Функция ПреобразоватьСтрокуВСтруктуруПолей(Данные) Экспорт
	
	// ++ VOG Солодов В.В. 28.02.2020 CRM-196
	Возврат РаботаСАдресами.СведенияОбАдресе(Данные);
	// До изменения
	//Если ЭтоСтрокаXML(Данные) Тогда
	//	СтарыйФормат	= CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(Данные);
	//	СтрокаПолей		= РаботаСАдресамиКлиентСервер.ПреобразоватьСписокПолейВСтроку(
	//					  СтарыйФормат.ЗначенияПолей, Ложь);
	//Иначе
	//	СтрокаПолей		= Данные;
	//КонецЕсли;
	//
	//Результат = Новый СписокЗначений;
	//ПоследнийЭлемент = Неопределено;
	//
	//Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
	//	Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
	//	Если Лев(Стр, 1) = Символы.Таб Тогда
	//		Если ПоследнийЭлемент <> Неопределено Тогда
	//			ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
	//		КонецЕсли;
	//	Иначе
	//		Поз = Найти(Стр, "=");
	//		Если Поз <> 0 Тогда
	//			ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//СтруктураВозврата = Новый Структура;
	//
	//Для Каждого ЭлементСписка Из Результат Цикл
	//	СтруктураВозврата.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	//КонецЦикла;
	//
	//Возврат СтруктураВозврата;
	// -- VOG Солодов В.В. 28.02.2020
	
КонецФункции

// Функция формирует список контактной информации по переданным параметрам.
//
Функция СформироватьСписокКонтактнойИнформации(СтруктураДанных, ТипКИ, ВидКИ = Неопределено) Экспорт
	
	СписокКИ = Новый СписокЗначений;
	
	Если СтруктураДанных.Свойство("Партнер") Тогда
		//START Кайдашов #406 Добавил Торговую точку
		//Если НЕ ЗначениеЗаполнено(СтруктураДанных.Партнер) Тогда
		//	Возврат СписокКИ;
		//Иначе
			Если СтруктураДанных.Свойство("ТорговаяТочка") тогда
				Таб = ПолучитьКонтактнуюИнформациюОбъекта(СтруктураДанных.Партнер,
				?(ЗначениеЗаполнено(СтруктураДанных.КонтактноеЛицо),СтруктураДанных.КонтактноеЛицо,Неопределено),ТипКИ, ВидКИ,СтруктураДанных.ТорговаяТочка);
			Иначе
				Таб = ПолучитьКонтактнуюИнформациюОбъекта(СтруктураДанных.Партнер,
				?(ЗначениеЗаполнено(СтруктураДанных.КонтактноеЛицо),СтруктураДанных.КонтактноеЛицо,Неопределено),ТипКИ, ВидКИ);
			КонецЕсли;
		//КонецЕсли;
		//END Кайдашов #406
	ИначеЕсли СтруктураДанных.Свойство("ОбъектКонтактнойИнформации") Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.ОбъектКонтактнойИнформации) Тогда
			Возврат СписокКИ;
		Иначе
			Таб = ПолучитьКонтактнуюИнформациюПоТипуКИ(СтруктураДанных.ОбъектКонтактнойИнформации, ТипКИ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Таб = Неопределено Тогда
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из Таб Цикл
			
			СтруктураКИ = Новый Структура;
			Если НЕ ТекСсылка = СтрокаТаб.Ссылка Тогда
				
				Если (ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон) ИЛИ (ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес) Тогда
					СтруктураКИ = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
				КонецЕсли;
				
				Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					СтруктураКИ.Вставить("Адрес" ,СокрЛП(СтрокаТаб.АдресЭП));
				КонецЕсли;
				
				СтруктураКИ.Вставить("Представление"	, СтрокаТаб.Представление);
				СтруктураКИ.Вставить("Объект"			, СтрокаТаб.Ссылка);
				СписокКИ.Добавить(СтруктураКИ, Строка(СтрокаТаб.Ссылка),СтрокаТаб.ИспользоватьДляОповещений);
				ТекСсылка = СтрокаТаб.Ссылка;
			КонецЕсли;
			
			Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				СтруктураКИ = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
			КонецЕсли;
			Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				СтруктураКИ.Вставить("Адрес" ,СокрЛП(СтрокаТаб.АдресЭП));
			КонецЕсли;
			СтруктураКИ.Вставить("Представление"	, СтрокаТаб.Представление);
			СтруктураКИ.Вставить("Объект"			, СтрокаТаб.Ссылка);
			СписокКИ.Добавить(СтруктураКИ, "   "+СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление,СтрокаТаб.ИспользоватьДляОповещений);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокКИ;
	
КонецФункции

// Функция получает контактную информацию объекта по типу контактной информации.
//
// Параметры:
//	ОбъектКонтактнойИнформации	- СправочникСсылка		- Объект, для которого получается контактная информация.
//	ТипИнформации				- ПеречислениеСсылка	- Тип контактной информации.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактной информации.
//
Функция ПолучитьКонтактнуюИнформациюПоТипуКИ(ОбъектКонтактнойИнформации, ТипИнформации) Экспорт
	Если ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(ОбъектКонтактнойИнформации) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ВидРодитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;		
	КонецЕсли;
	МетаданныеОбъекта = ОбъектКонтактнойИнформации.Метаданные();
	ИмяСпр = МетаданныеОбъекта.Имя;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель",	ВидРодитель);
	Запрос.УстановитьПараметр("Тип",		ТипИнформации);
	Запрос.УстановитьПараметр("Ссылка",		ОбъектКонтактнойИнформации);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка,
	               |	КонтактнаяИнформация.НомерСтроки,
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.ЗначенияПолей,
	               |	КонтактнаяИнформация.Страна,
	               |	КонтактнаяИнформация.Регион,
	               |	КонтактнаяИнформация.Город,
	               |	КонтактнаяИнформация.АдресЭП,
	               |	КонтактнаяИнформация.ДоменноеИмяСервера,
	               |	КонтактнаяИнформация.НомерТелефона,
	               |	КонтактнаяИнформация.НомерТелефонаБезКодов,
	               |	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
	               |	КонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания
	               |ИЗ
	               |	Справочник." + ИмяСпр + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Вид.Родитель = &Родитель
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,
	               |	ВидРеквизитДопУпорядочивания,
	               |	ИспользоватьДляОповещений УБЫВ";
				   
	Запрос.Текст = ТекстЗапроса;
	Если НЕ CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи", МетаданныеОбъекта, "КонтактнаяИнформация") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьКонтактнуюИнформациюПоТипуКИ()

// Функция формирует список контактной информации заданного типа для переданных пользователей.
// При передаче параметра ПолучатьПустые = Истина в список будут добавлены незаполненные виды контактной информации.
//
// Параметры:
//	Пользователи			- СправочникСсылка или Массив	- Объекты или объект, для которых получается контактная информация.
//	ТипКонтактнойИнформации	- ПеречислениеСсылка			- Тип контактной информации.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактной информации.
//
Функция ПолучитьКонтактнуюИнформациюПользователей(Пользователи = Неопределено, ТипКонтактнойИнформации,
												ПолучатьПустые = Ложь) Экспорт
	флПризнакСсылки = Истина;
	Если ТипЗнч(Пользователи) = Тип("Массив") Тогда
		флПризнакСсылки = Ложь;
	КонецЕсли;
	ТекстЗапроса = "";
	ТекстВременныхТаблиц = "";
	Если ПолучатьПустые Тогда 
		ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление
		|ПОМЕСТИТЬ КИ_Пользователи
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка" + ?(флПризнакСсылки, " = &Пользователи"," В(&Пользователи)") + "
		|	И КонтактнаяИнформация.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка,
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
		|	ВидыКонтактнойИнформации.Тип,
		|	ВидыКонтактнойИнформации.Предопределенный,
		|	ВидыКонтактнойИнформации.Родитель.Наименование
		|ПОМЕСТИТЬ ВидыКИ_По_Пользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ПО (Пользователи.Ссылка" +?(флПризнакСсылки," = &Пользователи"," В(&Пользователи)")+")
		|ГДЕ
		|	(Не ВидыКонтактнойИнформации.ЭтоГруппа)
		|	И (Не ВидыКонтактнойИнформации.ПометкаУдаления)
		|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПользователи)
		|	И ВидыКонтактнойИнформации.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыКИ.Ссылка,
		|	ВидыКИ.Вид,
		|	ВидыКИ.Тип,
		|	ВидыКИ.Предопределенный,
		|	ВидыКИ.РодительНаименование,
		|	КИ_Пользователи.Представление
		|ПОМЕСТИТЬ КИ_Пользователи_Итоговая
		|ИЗ
		|	ВидыКИ_По_Пользователи КАК ВидыКИ
		|		ЛЕВОЕ СОЕДИНЕНИЕ КИ_Пользователи КАК КИ_Пользователи
		|		ПО ВидыКИ.Ссылка = КИ_Пользователи.Ссылка
		|			И ВидыКИ.Вид = КИ_Пользователи.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид.Предопределенный КАК Предопределенный,
		|	КонтактнаяИнформация.Представление
		|ПОМЕСТИТЬ КИ_Пользователи_Итоговая
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка" +?(флПризнакСсылки," = &Пользователи"," В(&Пользователи)")+"
		|	И КонтактнаяИнформация.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Предопределенный КАК Предопределенный,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 0
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 1
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
	|			ТОГДА 2
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 3
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)
	|			ТОГДА 4
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
	|			ТОГДА 5
	|	КОНЕЦ КАК ПолеСортировки
	|ИЗ
	|	КИ_Пользователи_Итоговая КАК КонтактнаяИнформация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПолеСортировки,
	|	Предопределенный УБЫВ";
	ТекстЗапроса = ТекстВременныхТаблиц + ТекстЗапроса;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователи",	Пользователи);
	Запрос.УстановитьПараметр("Тип",			ТипКонтактнойИнформации);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьКонтактнуюИнформациюПользователей()

// Функция формирует список контактной информации заданного типа для переданных физ.лиц.
// При передаче параметра ПолучатьПустые = Истина в список будут добавлены незаполненные виды контактной информации.
//
// Параметры:
//	ФизЛица					- СправочникСсылка или Массив	- Объекты или объект, для которых получается контактная информация.
//	ТипКонтактнойИнформации	- ПеречислениеСсылка			- Тип контактной информации.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактной информации.
//
Функция ПолучитьКонтактнуюИнформациюФизЛиц(ФизЛица = Неопределено, ТипКонтактнойИнформации,
												ПолучатьПустые = Ложь) Экспорт
	флПризнакСсылки = Истина;
	Если ТипЗнч(ФизЛица) = Тип("Массив") Тогда
		флПризнакСсылки = Ложь;
	КонецЕсли;
	ТекстЗапроса = "";
	ТекстВременныхТаблиц = "";
	Если ПолучатьПустые Тогда 
		ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление
		|ПОМЕСТИТЬ КИ_ФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка" + ?(флПризнакСсылки, " = &ФизЛица"," В(&ФизЛица)") + "
		|	И КонтактнаяИнформация.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка,
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
		|	ВидыКонтактнойИнформации.Тип,
		|	ВидыКонтактнойИнформации.Предопределенный,
		|	ВидыКонтактнойИнформации.Родитель.Наименование
		|ПОМЕСТИТЬ ВидыКИ_По_ФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ПО (ФизическиеЛица.Ссылка" +?(флПризнакСсылки," = &ФизЛица"," В(&ФизЛица)")+")
		|ГДЕ
		|	(Не ВидыКонтактнойИнформации.ЭтоГруппа)
		|	И (Не ВидыКонтактнойИнформации.ПометкаУдаления)
		|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникФизическиеЛица)
		|	И ВидыКонтактнойИнформации.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыКИ.Ссылка,
		|	ВидыКИ.Вид,
		|	ВидыКИ.Тип,
		|	ВидыКИ.Предопределенный,
		|	ВидыКИ.РодительНаименование,
		|	КИ_ФизическиеЛица.Представление
		|ПОМЕСТИТЬ КИ_ФизическиеЛица_Итоговая
		|ИЗ
		|	ВидыКИ_По_ФизическиеЛица КАК ВидыКИ
		|		ЛЕВОЕ СОЕДИНЕНИЕ КИ_ФизическиеЛица КАК КИ_ФизическиеЛица
		|		ПО ВидыКИ.Ссылка = КИ_ФизическиеЛица.Ссылка
		|			И ВидыКИ.Вид = КИ_ФизическиеЛица.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид.Предопределенный КАК Предопределенный,
		|	КонтактнаяИнформация.Представление
		|ПОМЕСТИТЬ КИ_ФизическиеЛица_Итоговая
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка" +?(флПризнакСсылки," = &ФизЛица"," В(&ФизЛица)")+"
		|	И КонтактнаяИнформация.Тип В(&Тип)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Предопределенный КАК Предопределенный,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 0
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 1
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
	|			ТОГДА 2
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 3
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)
	|			ТОГДА 4
	|		КОГДА КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
	|			ТОГДА 5
	|	КОНЕЦ КАК ПолеСортировки
	|ИЗ
	|	КИ_ФизическиеЛица_Итоговая КАК КонтактнаяИнформация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПолеСортировки,
	|	Предопределенный УБЫВ";
	ТекстЗапроса = ТекстВременныхТаблиц + ТекстЗапроса;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ФизЛица",		ФизЛица);
	Запрос.УстановитьПараметр("Тип",			ТипКонтактнойИнформации);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьКонтактнуюИнформациюФизЛиц()

// Функция возвращает контактных лиц контрагента по выбранному контрагенту.
//
// Параметры:
//	Партнер	- СправочникСсылка	- Контрагент, для которого выбираются контактные лица.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица контактных лиц.
//
Функция ПолучитьКонтактныхЛицКонтрагента(Партнер) Экспорт
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	               |ГДЕ
	               |	(Не КонтактныеЛица.ПометкаУдаления)
	               |	И КонтактныеЛица.Владелец = &Партнер";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьКонтактныхЛицКонтрагента()

// Функция получить контактную информацию объекта для оповещений.
//
Функция ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ОбъектКонтактнойИнформации, ВидКИ) Экспорт
	
	МетаданныеОбъекта = ОбъектКонтактнойИнформации.Метаданные();
	ИмяСпр = МетаданныеОбъекта.Имя;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",		ОбъектКонтактнойИнформации);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка,
	               |	КонтактнаяИнформация.НомерСтроки,
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.ЗначенияПолей,
	               |	КонтактнаяИнформация.Страна,
	               |	КонтактнаяИнформация.Регион,
	               |	КонтактнаяИнформация.Город,
	               |	КонтактнаяИнформация.АдресЭП,
	               |	КонтактнаяИнформация.ДоменноеИмяСервера,
	               |	КонтактнаяИнформация.НомерТелефона,
	               |	КонтактнаяИнформация.НомерТелефонаБезКодов,
	               |	КонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания
	               |ИЗ
	               |	Справочник." + ИмяСпр + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,
	               |	ВидРеквизитДопУпорядочивания,
	               |	ИспользоватьДляОповещений УБЫВ";
	Запрос.Текст = ТекстЗапроса;
	Если НЕ CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи", МетаданныеОбъекта, "КонтактнаяИнформация") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,", "");
	КонецЕсли;
	ТаблицаКИ = Запрос.Выполнить().Выгрузить();
	
	СтруктураВозврата = Новый Структура;
	
	Для Каждого КлючИЗначение Из ВидКИ Цикл
		СтруктураВозврата.Вставить(КлючИЗначение.Ключ,"");
		
		СтрокаКИ = ТаблицаКИ.Найти(КлючИЗначение.Значение,"Вид");
		Если НЕ СтрокаКИ = Неопределено Тогда
			СтруктураВозврата[КлючИЗначение.Ключ] = СтрокаКИ.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти //РаботаСКонтактнойИнформацией


#Область ФормированиеПредставленийИОписаний
	
// Функция возвращает представление реквизита Предмет документа.
//
// Параметры:
//  ПредметДокумента	- Ссылка	- Ссылка на предмет документа.
//
// Возвращаемое значение:
//	Строка	- Представление предмета документа.
//
Функция ПолучитьПредставлениеПредметаДокумента(ПредметДокумента) Экспорт
	
	Если (НЕ ПредметДокумента = Неопределено) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПредметДокумента)) Тогда
		бПредметДоступен = ОбщегоНазначения.СсылкаСуществует(ПредметДокумента);
	Иначе
		бПредметДоступен = Ложь;
	КонецЕсли;
	
	Если бПредметДоступен Тогда
		ПредставлениеПредмета = "";
		Если ЗначениеЗаполнено(ПредметДокумента) Тогда
			МетаданныеПредмета = ПредметДокумента.Метаданные();
			ПолноеИмя = МетаданныеПредмета.ПолноеИмя();
			Если Найти(ПолноеИмя, "Документ.") Или Найти(ПолноеИмя, "Задача.") Тогда
				Если ПустаяСтрока(МетаданныеПредмета.РасширенноеПредставлениеОбъекта) Тогда
					Если ПустаяСтрока(МетаданныеПредмета.ПредставлениеОбъекта) Тогда
						ПредставлениеПредмета = МетаданныеПредмета.Синоним;
					Иначе
						ПредставлениеПредмета = МетаданныеПредмета.ПредставлениеОбъекта;
					КонецЕсли;
				Иначе
					ПредставлениеПредмета = МетаданныеПредмета.РасширенноеПредставлениеОбъекта;
				КонецЕсли;
				ПредставлениеПредмета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"), ПредставлениеПредмета, 
																								Формат(ПредметДокумента.Дата, "ДФ ='дд.ММ.гггг ЧЧ:мм'"));
				Если ЕстьРеквизитДокумента("Партнер",МетаданныеПредмета) И ЗначениеЗаполнено(ПредметДокумента.Партнер) Тогда
					ПредставлениеПредмета = ПредставлениеПредмета + " / " + СокрЛП(ПредметДокумента.Партнер);		
				КонецЕсли;
				Если ЕстьРеквизитДокумента("КонтактноеЛицо",МетаданныеПредмета) И ЗначениеЗаполнено(ПредметДокумента.КонтактноеЛицо) Тогда
					ПредставлениеПредмета = ПредставлениеПредмета + " (" + СокрЛП(ПредметДокумента.КонтактноеЛицо)+")";		
				КонецЕсли;
			Иначе
				ПредставлениеПредмета = Строка(ПредметДокумента);
			КонецЕсли;
		КонецЕсли;
	Иначе	
		ПредставлениеПредмета = НСтр("ru = '[Предмет недоступен]'");
	КонецЕсли;
	
//START Кайдашов 30/07/19 483
	Если ТипЗнч(ПредметДокумента) = Тип("Строка") тогда
		Возврат "Сообщение в обсуждении";	
	КонецЕсли;
//END Кайдашов
	
	Возврат ПредставлениеПредмета;
КонецФункции // ПолучитьПредставлениеПредметаДокумента()


// Функция возвращает представление реквизита Предмет документа.
//
// Параметры:
//  ПредметДокумента	- Ссылка	- Ссылка на предмет документа.
//
// Возвращаемое значение:
//	Строка	- Представление предмета документа.
//
Функция ПолучитьПредставлениеПредметаДокументаИсходящееПисьмо(ПредметДокумента) Экспорт
	
	ПредставлениеПредмета = "";
	Если ЗначениеЗаполнено(ПредметДокумента) Тогда
		МетаданныеПредмета = ПредметДокумента.Метаданные();
		ПолноеИмя = МетаданныеПредмета.ПолноеИмя();
		Если Найти(ПолноеИмя, "Документ.") Или Найти(ПолноеИмя, "Задача.") Тогда
			Если ПустаяСтрока(МетаданныеПредмета.РасширенноеПредставлениеОбъекта) Тогда
				Если ПустаяСтрока(МетаданныеПредмета.ПредставлениеОбъекта) Тогда
					ПредставлениеПредмета = МетаданныеПредмета.Синоним;
				Иначе
					ПредставлениеПредмета = МетаданныеПредмета.ПредставлениеОбъекта;
				КонецЕсли;
			Иначе
				ПредставлениеПредмета = МетаданныеПредмета.РасширенноеПредставлениеОбъекта;
			КонецЕсли;
			ПредставлениеПредмета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"), ПредставлениеПредмета, 
			Формат(ПредметДокумента.Дата, "ДФ ='дд.ММ.гггг ЧЧ:мм'"));
			Если ЕстьРеквизитДокумента("Партнер",МетаданныеПредмета) И ЗначениеЗаполнено(ПредметДокумента.Партнер) Тогда
				ПредставлениеПредмета = ПредставлениеПредмета + " / " + СокрЛП(ПредметДокумента.Партнер);		
			КонецЕсли;
			Если ЕстьРеквизитДокумента("КонтактноеЛицо",МетаданныеПредмета) И ЗначениеЗаполнено(ПредметДокумента.КонтактноеЛицо) Тогда
				ПредставлениеПредмета = ПредставлениеПредмета + " (" + СокрЛП(ПредметДокумента.КонтактноеЛицо)+")";		
			КонецЕсли;
		Иначе
			ПредставлениеПредмета = Строка(ПредметДокумента);
		КонецЕсли;
	КонецЕсли;
	Возврат ПредставлениеПредмета;
	
КонецФункции // ПолучитьПредставлениеПредметаДокумента()


// Функция возвращает заголовок формы документа.
//
// Параметры:
//	Документ 		- ДокументСсылка	- Ссылка на документ.
//	Представление 	- Строка			- Строка представления.
//
// Возвращаемое значение:
//	Строка	- Заголовок формы документа.
//
Функция ПолучитьЗаголовокФормыДокумента(Документ, Представление = "") Экспорт
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Если Документ.Ссылка.Пустая() Тогда
			Если ЗначениеЗаполнено(Представление) Тогда
				ЗаголовокФормы =  НСтр("ru = '    Новое письмо'") + Нстр("ru = ' от '") + Строка(Представление)
			Иначе				
				ЗаголовокФормы =  НСтр("ru = '    Новое письмо'");
			КонецЕсли;				
		Иначе
			ДатаСегодня = (Документ.Дата >= НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) И Документ.Дата <= КонецДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()));
			ДатаЗаголовок = ?(ДатаСегодня, НСтр("ru = 'сегодня в '") + Строка(Формат(Документ.Дата, "ДФ=HH:mm")), Строка(Формат(Документ.Дата, "ДФ=dd.MM.yyyy")));
			ЗаголовокФормы = Строка(Представление) + "    " + ДатаЗаголовок;
		КонецЕсли;
	Иначе
		МетаданныеДокумента = Документ.Метаданные();
		Если ПустаяСтрока(МетаданныеДокумента.РасширенноеПредставлениеОбъекта) Тогда
			Если ПустаяСтрока(МетаданныеДокумента.ПредставлениеОбъекта) Тогда
				ЗаголовокФормы = МетаданныеДокумента.Синоним;
			Иначе
				ЗаголовокФормы = МетаданныеДокумента.ПредставлениеОбъекта;
			КонецЕсли;
		Иначе
			ЗаголовокФормы = МетаданныеДокумента.РасширенноеПредставлениеОбъекта;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ) Тогда
			ЗаголовокФормы = ЗаголовокФормы + " от " + Формат(Документ.Дата, "ДФ ='дд.ММ.гггг ЧЧ:мм'");
		Иначе
			ЗаголовокФормы = ЗаголовокФормы + " (создание)";
		КонецЕсли;
	КонецЕсли;
	Возврат ЗаголовокФормы;
КонецФункции // ПолучитьЗаголовокФормыДокумента()

// Функция возвращает строку ФИО после склонения в выбранном падеже.
//
// Параметры:
//	ФИО		- Строка			- Фамилия, имя, отчество.
//	Падеж	- Строка			- Падеж склонения.
//	Пол		- ПеречислениеСсылка	- Пол (мужской / женский).
//
// Возвращаемое значение:
//	Строка	- Строка после склонения.
//
Функция Склонение(Знач ФИО, Знач Падеж, Знач Пол = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФИО) Тогда Возврат ""; КонецЕсли;
	
	Попытка
		// Загружаем внешнюю компоненту.
		ПодключитьВнешнююКомпоненту("ОбщийМакет.CRM_NameDecl", "Decl", ТипВнешнейКомпоненты.Native);
		Компонента = Новый("AddIn.Decl.CNameDecl");
	Исключение
		// Не удалось выполнить операции с внешней компонентой.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка загрузки компоненты для склонения ФИО! Функции склонения недоступны!'"));
		Возврат Неопределено;
	КонецПопытки;
	
	// Преобразуем падеж для передачи в метод внешней компоненты.
	Падеж = ВРег(Лев(СокрЛП(Падеж), 1));
	Если Падеж = "Р" Тогда
		Падеж = 2;
	ИначеЕсли Падеж = "Д" Тогда
		Падеж = 3;
	ИначеЕсли Падеж = "В" Тогда
		Падеж = 4;
	ИначеЕсли Падеж = "Т" Тогда
		Падеж = 5;
	ИначеЕсли Падеж = "П" Тогда
		Падеж = 6;
	Иначе
		Падеж = 1;
	КонецЕсли;
	// Преобразуем пол для передачи в метод внешней компоненты.
	Если Пол = Неопределено Тогда
		Пол = 0;
	Иначе
		Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			Пол = 1;
		ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			Пол = 2;
		Иначе
			Пол = 0;
		КонецЕсли;
	КонецЕсли;
	// Вызываем метод внешней компоненты.
	Попытка
		ФИОПослеСклонения = Компонента.Просклонять(ФИО, Падеж, Пол);
	Исключение
		ФИОПослеСклонения = ФИО;
	КонецПопытки;	
	Возврат ФИОПослеСклонения;
КонецФункции // Склонение()

#КонецОбласти //ФормированиеПредставленийИОписаний


#Область УправлениеПроведением
	
// Процедура выполняет инициализацию дополнительных свойств для проведения документа.
//
// Параметры:
//	ДокументСсылка					- ДокументСсылка	- Документ
//	СтруктураДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения",
	// "УчетнаяПолитика".
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении 
	// которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение 
	// (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы",
		Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики 
	// на момент времени документа
	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).	
	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", Новый Структура);
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено, "_Документ_.Организация" , "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + " КАК Организация,
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	// Формирование ключей, содержащих данные документа.
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
	КонецЦикла;
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));	
	// Установка организации в случае ведения учета по компании.
	// Запрос, получающий данные учетной политики.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Константы.ИспользоватьХарактеристикиНоменклатуры КАК ИспользоватьХарактеристики
	|ИЗ
	|	Константы КАК Константы");
	РезультатЗапроса = Запрос.Выполнить();
	// Формирование ключей, содержащих данные учетной политики.
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДополнительныеСвойства.УчетнаяПолитика.Вставить(Колонка.Имя);
	КонецЦикла;
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	// Заполнение значений для ключей, содержащих данные учетной политики.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.УчетнаяПолитика, ВыборкаИзРезультатаЗапроса);
КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Функция формирует массив имен регистров, по которым есть движения документа.
//
// Параметры:
//	Регистратор			- ДокументСсылка	- Документ-регистратор
//	МетаданныеДокумента	- ОбъектМетаданных	- Метаданные документа.
//
// Возвращаемое значение:
//	Массив	- Массив имен регистров.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса = "";
	СчетчикТаблиц = 0;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	
	Для каждого Движение из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

// Процедура выполняет подготовку наборов записей документа.
//
//	Параметры:
//	СтруктураОбъект	- Структура	- Структура документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого ИмяРегистра из МассивИменРегистров Цикл
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьНаборыЗаписейКРегистрацииДвижений()

// Процедура записывает наборы записей документа.
//
//	Параметры:
//	СтруктураОбъект	- Структура	- Структура документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
	Для Каждого НаборЗаписей Из СтруктураОбъект.Движения Цикл
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			НаборЗаписей = НаборЗаписей.Значение;
		КонецЕсли;
		Если НаборЗаписей.Записывать Тогда
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
			КонецЕсли;
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы",
					СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
			КонецЕсли;
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		Иначе
			Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
				Попытка
					РегистрыНакопления[НаборЗаписей.Метаданные().Имя].СоздатьПустуюВременнуюТаблицуИзменение(СтруктураОбъект.ДополнительныеСвойства);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаписатьНаборыЗаписей()

#КонецОбласти //УправлениеПроведением


// +CRM не переносить в объединенные решения
#Область ОтображениеДокументовРасчетаВСчете

Процедура ПолучитьСчетНаОплатуПерепровести(Документ, ОтменаПроведения = Ложь) Экспорт
	
	СписокСчетовДляПроведения = Новый СписокЗначений;
	
	Если Документ.ВидДокумента = Перечисления.CRM_ВидДокументаРасчетов.РеализацияТоваровИУслуг Тогда
		
		Если ЗначениеЗаполнено(Документ.Заказ) Тогда
			Если СписокСчетовДляПроведения.НайтиПоЗначению(Документ.Заказ) = Неопределено Тогда
				СписокСчетовДляПроведения.Добавить(Документ.Заказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Документ.ВидДокумента = Перечисления.CRM_ВидДокументаРасчетов.КорректировкаРеализацииТоваров
	ИЛИ Документ.ВидДокумента = Перечисления.CRM_ВидДокументаРасчетов.ВозвратТоваровОтПокупателя Тогда
		
		Если ЗначениеЗаполнено(Документ.ДокументРеализации) И ЗначениеЗаполнено(Документ.ДокументРеализации.Заказ) Тогда
			Если СписокСчетовДляПроведения.НайтиПоЗначению(Документ.ДокументРеализации.Заказ) = Неопределено Тогда
				СписокСчетовДляПроведения.Добавить(Документ.ДокументРеализации.Заказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Документ.ВидДокумента = Перечисления.CRM_ВидДокументаРасчетов.ПБДСРасчетыСКонтрагентами 
	ИЛИ Документ.ВидДокумента = Перечисления.CRM_ВидДокументаРасчетов.ПКОРасчетыСКонтрагентами Тогда
		
		Для Каждого СтрокаРасшифровки ИЗ Документ.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СчетНаОплату) Тогда
				
				Если СписокСчетовДляПроведения.НайтиПоЗначению(СтрокаРасшифровки.СчетНаОплату) = Неопределено Тогда
					СписокСчетовДляПроведения.Добавить(СтрокаРасшифровки.СчетНаОплату);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Документ.ВидДокумента = Перечисления.CRM_ВидДокументаРасчетов.КорректировкаДолга Тогда
		
		Для Каждого СтрокаРасшифровки ИЗ Документ.Дебитор Цикл
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СчетНаОплату) Тогда
				Если СписокСчетовДляПроведения.НайтиПоЗначению(СтрокаРасшифровки.СчетНаОплату) = Неопределено Тогда
					СписокСчетовДляПроведения.Добавить(СтрокаРасшифровки.СчетНаОплату);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаРасшифровки.Документ) И ЗначениеЗаполнено(СтрокаРасшифровки.Документ.Заказ) Тогда
				Если СписокСчетовДляПроведения.НайтиПоЗначению(СтрокаРасшифровки.Документ.Заказ) = Неопределено Тогда
					СписокСчетовДляПроведения.Добавить(СтрокаРасшифровки.Документ.Заказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка ИЗ СписокСчетовДляПроведения Цикл
		
		СчетОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
		СчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонеЦЦикла;
	
КонецПроцедуры

Процедура ДокументаРасчетаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	ПолучитьСчетНаОплатуПерепровести(Источник);
	
КонецПроцедуры

Процедура ДокументаРасчетаОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	//ПеренестиДанныеДокументаРасчетаВСчетНаОплату(Источник, Истина);
	
КонецПроцедуры

#КонецОбласти //ОтображениеДокументтовРасчетаВСчете
// -CRM не переносить в объединенные решения


#Область ДвиженияРегистров

// Процедура выполняет движения регистра накопления РасчетыСКонтрагентами.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Признак отмены.
//
Процедура ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчетыСПокупателями = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями;
	
	Если Отказ ИЛИ ТаблицаРасчетыСПокупателями.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ДвиженияРасчетыСПокупателями = Движения.РасчетыСПокупателями;
	ДвиженияРасчетыСПокупателями.Записывать = Истина;
	ДвиженияРасчетыСПокупателями.Загрузить(ТаблицаРасчетыСПокупателями);
	
КонецПроцедуры // ОтразитьРасчетыСПокупателями()

// Процедура выполняет движения по регистру Продажи.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Признак отмены.
//
Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаПродажи = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
	
	Если Отказ ИЛИ ТаблицаПродажи.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ДвиженияПродажи = Движения.CRM_Продажи;
	ДвиженияПродажи.Записывать = Истина;
	ДвиженияПродажи.Загрузить(ТаблицаПродажи);
	
КонецПроцедуры // ОтразитьПродажи()

// Процедура выполняет движения по регистру Предложения.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Флаг отмены.
//
Процедура ОтразитьПредложения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаПредложения = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПредложения;
	Если Отказ ИЛИ ТаблицаПредложения.Количество() = 0 Тогда Возврат; КонецЕсли;
	ДвиженияПредложения = Движения.CRM_Предложения;
	ДвиженияПредложения.Записывать = Истина;
	ДвиженияПредложения.Загрузить(ТаблицаПредложения);
КонецПроцедуры // ОтразитьПродажи()

// Процедура выполняет движения по регистру CRM_РабочееВремя.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Флаг отмены.
//
Процедура ОтразитьРабочееВремя(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаРабочееВремя = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРабочееВремя;
	Если Отказ ИЛИ ТаблицаРабочееВремя.Количество() = 0 Тогда Возврат; КонецЕсли;
	ДвиженияПредложения = Движения.CRM_РабочееВремя;
	ДвиженияПредложения.Записывать = Истина;
	ДвиженияПредложения.Загрузить(ТаблицаРабочееВремя);
КонецПроцедуры // ОтразитьРабочееВремя()

// Процедура выполняет движения по регистру CRM_Планирование.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Флаг отмены.
//
Процедура ОтразитьПланирование(ДополнительныеСвойства, Движения, Отказ) Экспорт
	//ТаблицаПланирование = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланирование;
	//Если Отказ ИЛИ ТаблицаПланирование.Количество() = 0 Тогда Возврат; КонецЕсли;
	//ДвиженияПредложения = Движения.CRM_Планирование;
	//ДвиженияПредложения.Записывать = Истина;
	//ДвиженияПредложения.Загрузить(ТаблицаПланирование);
КонецПроцедуры // ОтразитьРабочееВремя()

// Процедура выполняет движения по регистру CRM_ПланыПоВоронкамПродаж.
//
// Параметры:
//	ДополнительныеСвойства	- Структура			- Структура дополнительных свойств.
//	Движения				- КоллекцияДвижений - Движения регистра.
//	Отказ					- Булево			- Флаг отмены.
//
Процедура ОтразитьПланированиеВоронкиПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт
	ТаблицаПланирование = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланирование;
	Если Отказ ИЛИ ТаблицаПланирование.Количество() = 0 Тогда Возврат; КонецЕсли;
	ДвиженияПредложения = Движения.CRM_ПланыПоВоронкамПродаж;
	ДвиженияПредложения.Записывать = Истина;
	ДвиженияПредложения.Загрузить(ТаблицаПланирование);
КонецПроцедуры // ОтразитьРабочееВремя()

#КонецОбласти //ДвиженияРегистров


#Область КалендариИКалендарныерафиками
	
// Функция возвращает заданный в настройках системы производственный календарь.
//
Функция ПолучитьОсновнойПроизводственныйКалендарь() Экспорт
	Возврат Константы.ОсновнойКалендарьПредприятия.Получить();
КонецФункции

// Функция возвращает соответствие дат структурам с данными, описывающими календарную дату.
//
// Параметры:
//	ДатаИлиМассивДат			- Дата, Массив					- Дата или массив дат для которых требуется получить описания.
//	ПроизводственныйКалендарь	- СправочникСсылка.Календари	- Используемый календарь.
//	ПользовательИлиОрганизация	- СправочникСсылка				- Пользователи или Организации.
//
// Возвращаемое значение:
//	Соответствие	- Соответствие с ключем Дата и значением Структура.
//
Функция ПолучитьСоответствиеКалендарныхГрафиков(ДатаИлиМассивДат, ПроизводственныйКалендарь = Неопределено, ПользовательИлиОрганизация = Неопределено) Экспорт
	КоличествоСекундВДне = 24 * 60 * 60;
	
	Если ТипЗнч(ДатаИлиМассивДат) = Тип("Массив") Тогда
		МассивДат = ДатаИлиМассивДат;
	Иначе
		МассивДат = Новый Массив();
		МассивДат.Добавить(ДатаИлиМассивДат);
	КонецЕсли;
	
	Если МассивДат.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
	
	Если ПроизводственныйКалендарь = Неопределено Тогда
		ПроизводственныйКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МинимальнаяДата = Неопределено;
	МаксимальнаяДата = Неопределено;
	Для Каждого ЗначениеДата Из МассивДат Цикл
		Если МинимальнаяДата = Неопределено Тогда МинимальнаяДата = ЗначениеДата; КонецЕсли;
		Если МаксимальнаяДата = Неопределено Тогда МаксимальнаяДата = ЗначениеДата; КонецЕсли;
		
		МинимальнаяДата = Мин(МинимальнаяДата, ЗначениеДата);
		МаксимальнаяДата = Макс(МаксимальнаяДата, ЗначениеДата);
	КонецЦикла;
	
	МинимальнаяДата = НачалоДня(МинимальнаяДата);
	МаксимальнаяДата = НачалоДня(МаксимальнаяДата);
	
	КоличествоДней = (МаксимальнаяДата - МинимальнаяДата) / КоличествоСекундВДне;
	
	СоответствиеРезультат = Новый Соответствие();
	
	МассивДней = Новый Массив();
	ТекДата = НачалоДня(МинимальнаяДата);
	нСчетчикДней = 1;
	Пока ТекДата <= МаксимальнаяДата Цикл
		МассивДней.Добавить(нСчетчикДней);
		нСчетчикДней = нСчетчикДней + 1;
		
		СтруктураОписаниеГрафикаДня = Новый Структура(
		"ДатаДень,
		|ДеньРабочийПоПроизводственномуКалендарю,
		|ДеньРабочийДляРесурса,
		|МассивПериодов");
		
		СтруктураОписаниеГрафикаДня.ДатаДень = ТекДата;
		СтруктураОписаниеГрафикаДня.ДеньРабочийПоПроизводственномуКалендарю = Истина;
		СтруктураОписаниеГрафикаДня.ДеньРабочийДляРесурса = Истина;
		СтруктураОписаниеГрафикаДня.МассивПериодов = Неопределено;
		
		СоответствиеРезультат.Вставить(ТекДата, СтруктураОписаниеГрафикаДня);
		
		ТекДата = ТекДата + КоличествоСекундВДне;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ДатаГрафика МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата
	|	И КалендарныеГрафики.Календарь = &ПроизводственныйКалендарь
	|");
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",	ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("МинимальнаяДата",			МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата",			МаксимальнаяДата);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивРабочихДнейПоПроизводственномуГрафику = Новый Массив();
	МассивНеРабочихДнейПоПроизводственномуГрафику = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДеньВключенВГрафик Тогда
			МассивРабочихДнейПоПроизводственномуГрафику.Добавить(НачалоДня(Выборка.ДатаГрафика));
		Иначе
			МассивНеРабочихДнейПоПроизводственномуГрафику.Добавить(НачалоДня(Выборка.ДатаГрафика));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СоответствиеРезультат Цикл
		ДатаДень = КлючЗначение.Ключ;
		
		Если МассивРабочихДнейПоПроизводственномуГрафику.Найти(ДатаДень) <> Неопределено Тогда
			СоответствиеРезультат[ДатаДень].ДеньРабочийПоПроизводственномуКалендарю = Истина;
		ИначеЕсли МассивНеРабочихДнейПоПроизводственномуГрафику.Найти(ДатаДень) <> Неопределено Тогда
			СоответствиеРезультат[ДатаДень].ДеньРабочийПоПроизводственномуКалендарю = Ложь;
		Иначе
			// Если график не заполнен - дни считаются рабочими.
			СоответствиеРезультат[ДатаДень].ДеньРабочийПоПроизводственномуКалендарю = Истина;
		КонецЕсли;
		
		СоответствиеРезультат[ДатаДень].ДеньРабочийДляРесурса = СоответствиеРезультат[ДатаДень].ДеньРабочийПоПроизводственномуКалендарю;
	КонецЦикла;
	
	Возврат СоответствиеРезультат;
КонецФункции

// Функция возвращает структуру с рабочим временем пользователя.
//
// Параметры:
//	Пользователь				- СправочникСсылка	- Пользователь
//	ПолучитьЗначенияПоУмолчанию	- Булево			- Признак получения значения по умолчанию.
//
// Возвращаемое значение:
//	Структура		- Структура с рабочими временами пользователя.
//
Функция ПолучитьСтруктуруРабочихВременПользователя(Пользователь = Неопределено, ПолучитьЗначенияПоУмолчанию = Ложь, НеУчитыватьОбеденныйПерерыв = Ложь) Экспорт
	Если Пользователь = Неопределено И НЕ ПолучитьЗначенияПоУмолчанию Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Результат = Новый Структура("ВремяНачалаРабочегоДня,ВремяОкончанияРабочегоДня,ВремяНачалаОбеденногоПерерыва,ВремяОкончанияОбеденногоПерерыва");
	
	бПолучитьЗначенияПоУмолчанию = (ПолучитьЗначенияПоУмолчанию Или Пользователь = Неопределено);
	
	Если Не бПолучитьЗначенияПоУмолчанию Тогда
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Результат.ВремяНачалаРабочегоДня			= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяНачалаРабочегоДня");
			Результат.ВремяОкончанияРабочегоДня			= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяОкончанияРабочегоДня");
			Результат.ВремяНачалаОбеденногоПерерыва		= ?(НеУчитыватьОбеденныйПерерыв,Дата("00010101"),CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяНачалаОбеденногоПерерыва"));
			Результат.ВремяОкончанияОбеденногоПерерыва	= ?(НеУчитыватьОбеденныйПерерыв,Дата("00010101"),CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяОкончанияОбеденногоПерерыва"));
			
			Если	Не ЗначениеЗаполнено(Результат.ВремяНачалаРабочегоДня)
				И	Не ЗначениеЗаполнено(Результат.ВремяОкончанияРабочегоДня)
				И	Не ЗначениеЗаполнено(Результат.ВремяНачалаОбеденногоПерерыва)
				И	Не ЗначениеЗаполнено(Результат.ВремяОкончанияОбеденногоПерерыва) Тогда
				//
				бПолучитьЗначенияПоУмолчанию = Истина;
			КонецЕсли;
		Иначе
			бПолучитьЗначенияПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если бПолучитьЗначенияПоУмолчанию Тогда
		Результат.ВремяНачалаРабочегоДня			= Константы.CRM_НачалоРабочегоДня.Получить();
		Результат.ВремяОкончанияРабочегоДня			= Константы.CRM_КонецРабочегоДня.Получить();
		Результат.ВремяНачалаОбеденногоПерерыва		= ?(НеУчитыватьОбеденныйПерерыв,Дата("00010101"),Константы.CRM_НачалоОбеда.Получить());
		Результат.ВремяОкончанияОбеденногоПерерыва	= ?(НеУчитыватьОбеденныйПерерыв,Дата("00010101"),Константы.CRM_КонецОбеда.Получить());
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокРабочегоВремениПользователя(Пользователь) Экспорт
	
	ВремяНачалаРабочегоДня 		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяНачалаРабочегоДня");
	ВремяОкончанияРабочегоДня	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяОкончанияРабочегоДня");
	Если НЕ ЗначениеЗаполнено(ВремяНачалаРабочегоДня) Тогда
		ВремяНачалаРабочегоДня = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Дата(1, 1, 1, 23, 59, 59);;
	КонецЕсли;
	
	СписокЧасов = Новый СписокЗначений();
	ТекВремя = ВремяНачалаРабочегоДня;
	
	Пока ТекВремя <= ВремяОкончанияРабочегоДня Цикл
	
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		СписокЧасов.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 30 * 60;
	
	КонецЦикла;
	Возврат СписокЧасов;
	
КонецФункции

// Функция возвращает продолжительность рабочего периода по календарю.
//
// Параметры:
//	НачПериода					- Дата							- Дата начала.
//	КонПериода					- Дата							- Дата окончания.
//	Пользователь				- СправочникСсылка.Пользователи	- Пользователь, для которого определяется продолжительность рабочего
//	                                                  периода.
//	Календарь					- СправочникСсылка.Календари	- Календарь
//	РабочееВремяПользователя	- Структура						- Структура, полученная функцией
//	                                            ПолучитьСтруктуруРабочихВременПользователя.
//
// Возвращаемое значение:
//	Структура	- Структура со значением продолжительности периода в часах и в днях.
//
Функция ПолучитьПродолжительностьПериода(Знач НачПериода, Знач КонПериода, ПользовательИлиОрганизация = Неопределено,
		Календарь = Неопределено, РабочееВремяПользователя = Неопределено) Экспорт
	//
	Если ПользовательИлиОрганизация = Неопределено Тогда
		ПользовательИлиОрганизация = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если Календарь = Неопределено Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	
	Если РабочееВремяПользователя = Неопределено Тогда
		РабочееВремяПользователя = ПолучитьСтруктуруРабочихВременПользователя(ПользовательИлиОрганизация);
	КонецЕсли;
	Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		ВСекундах = РабочееВремяПользователя.ВремяОкончанияРабочегоДня - РабочееВремяПользователя.ВремяНачалаРабочегоДня;
		Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
			ВСекундах = ВСекундах - (РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва - РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
		КонецЕсли;
		Если ВСекундах < 0 Тогда
			ПродолжительностьРабочегоДняВЧасах = 8;
		Иначе
			ПродолжительностьРабочегоДняВЧасах = Цел(ВСекундах / 60 / 60);
		КонецЕсли;
	Иначе
		ПродолжительностьРабочегоДняВЧасах = 8;
	КонецЕсли;
	
	бВычислитьПродолжительностьВРучную = Ложь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		Попытка
			Если НачалоДня(НачПериода) = НачалоДня(КонПериода) Тогда
				РазностьДатПоКалендарю = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(Календарь, НачалоДня(НачПериода), НачалоДня(НачПериода));
				Если РазностьДатПоКалендарю > 0 Тогда
					РазностьДатПоКалендарю = 1;
				КонецЕсли;
			Иначе
				РазностьДатПоКалендарю = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(Календарь, НачалоДня(НачПериода), КонПериода);
			КонецЕсли;
			Возврат Новый Структура("ВДнях,ВЧасах,РассчитаноСУчетомГрафика", РазностьДатПоКалендарю, РазностьДатПоКалендарю * ПродолжительностьРабочегоДняВЧасах, Истина);
		Исключение
			бВычислитьПродолжительностьВРучную = Истина;
		КонецПопытки;
	Иначе
		бВычислитьПродолжительностьВРучную = Истина;
	КонецЕсли;
	
	Если бВычислитьПродолжительностьВРучную Тогда
		ТекДатаПериода = НачПериода;
		Рез = 0;
		
		Пока НачалоДня(ТекДатаПериода) <= НачалоДня(КонПериода) Цикл
			ДеньНеделиЧисло = ДеньНедели(ТекДатаПериода);
			ТекДатаПериода = ТекДатаПериода + 3600*24;
			Если ДеньНеделиЧисло = 6 ИЛИ ДеньНеделиЧисло = 7 Тогда
				Продолжить;
			КонецЕсли;
			Рез = Рез + 1;
		КонецЦикла;
		
		Возврат Новый Структура("ВДнях,ВЧасах,РассчитаноСУчетомГрафика", Рез, Рез * ПродолжительностьРабочегоДняВЧасах, Ложь);
	КонецЕсли;
КонецФункции

#КонецОбласти //КалендариИКалендарныерафиками


#Область Трудозатраты
	
// Функция возвращает трудозатраты полного дня в минутах.
//
// Параметры:
//	НачПериода					- Дата		- Дата начала.
//	КонПериода					- Дата		- Дата окончания.
//	МассивРабочихПериодовДня	- Массив	- Массив с описанием рабочих часов в течении дня.
//
// Возвращаемое значение:
//	Число	- Трудозатраты полного дня в минутах.
//
Функция ТрудозатратыПродолжительностьВДнеВМинутах(Знач НачПериода, Знач КонПериода, МассивРабочихПериодовДня)
	ПродолжительностьВМинутах = 0;
	ВремяНачалаСобытия = Дата("00010101") + (НачПериода - НачалоДня(НачПериода));
	ВремяОкончанияСобытия = Дата("00010101") + (КонПериода - НачалоДня(КонПериода));
	Для Каждого РабочийПериод Из МассивРабочихПериодовДня Цикл
		Если РабочийПериод.Окончание < ВремяНачалаСобытия Тогда Продолжить; КонецЕсли;
		Если РабочийПериод.Начало > ВремяОкончанияСобытия Тогда Прервать; КонецЕсли;
		ВремяНачалоДляВычисления = Макс(ВремяНачалаСобытия, РабочийПериод.Начало);
		ВремяОкончаниеДляВычисления = Мин(ВремяОкончанияСобытия, РабочийПериод.Окончание);
		Если ВремяНачалоДляВычисления > ВремяОкончаниеДляВычисления Тогда Продолжить; КонецЕсли;
		ПродолжительностьВМинутах = ПродолжительностьВМинутах + Цел((ВремяОкончаниеДляВычисления - ВремяНачалоДляВычисления) / 60);
	КонецЦикла;
	Возврат ПродолжительностьВМинутах;
КонецФункции // ТрудозатратыПродолжительностьВДнеВМинутах()

// Функция рассчитывает трудозатраты за период.
//
// Параметры:
//	НачПериода					- Дата							- Дата начала.
//	КонПериода					- Дата							- Дата окончания.
//	Пользователь				- СправочникСсылка.Пользователи	- Пользователь, для которого определяется продолжительность рабочего
//	                                                  периода.
//	Организация					- СправочникСсылка.Организации	- Организация, для которой определяется продолжительность рабочего
//	                                                 периода.
//	Календарь					- СправочникСсылка.Календари	- Календарь
//	ВЧасах						- Булево						- Флаг определяет в чем возвращать трудозатраты - Истина - в часах, Ложь - в минутах.
//
// Возвращаемое значение:
//	Структура	- Структура с полями "ВМинутах", "ВЧасах", "ПродолжительностьРабочегоДняВМинутах",
//	            "ПродолжительностьРабочегоДняВЧасах".
//
Функция ПолучитьТрудозатратыЗаПериод(Знач НачПериода, Знач КонПериода, Пользователь = Неопределено, Организация = Неопределено, Календарь = Неопределено, НеУчитыватьОбеденныйПерерыв = Ложь) Экспорт
	Если Пользователь = Неопределено Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	Если Календарь = Неопределено Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		РабочееВремяПользователя = ПолучитьСтруктуруРабочихВременПользователя(Пользователь,,НеУчитыватьОбеденныйПерерыв);
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		РабочееВремяПользователя = ПолучитьСтруктуруРабочихВременПользователя(Организация,,НеУчитыватьОбеденныйПерерыв);
	Иначе
		РабочееВремяПользователя =  ПолучитьСтруктуруРабочихВременПользователя(, Истина,НеУчитыватьОбеденныйПерерыв);
	КонецЕсли;
	
	Если КонПериода < НачПериода Тогда
		ВремНачПериода = НачПериода;
		НачПериода = КонПериода;
		КонПериода = ВремНачПериода;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура("ВМинутах,ВЧасах,ПродолжительностьРабочегоДняВМинутах,ПродолжительностьРабочегоДняВЧасах", 0, 0, 0, 0);
	
	// Округление до минут
	НачПериода		= НачалоДня(НачПериода) + Цел((НачПериода - НачалоДня(НачПериода)) / 60) * 60;
	КонПериода		= НачалоДня(КонПериода) + Цел((КонПериода - НачалоДня(КонПериода)) / 60) * 60;
	Если НЕ ЗначениеЗаполнено (НачПериода) 
		ИЛИ НЕ ЗначениеЗаполнено (КонПериода) 
		ИЛИ НачалоДня(НачПериода) = '00010101' 
		ИЛИ НачалоДня(КонПериода) = '00010101' Тогда
		 Возврат СтруктураРезультат;
	КонецЕсли;
	МассивРабочихПериодовДня = Новый Массив();
	Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", РабочееВремяПользователя.ВремяНачалаРабочегоДня,
				РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва));
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва,
				РабочееВремяПользователя.ВремяОкончанияРабочегоДня));
		Иначе
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", РабочееВремяПользователя.ВремяНачалаРабочегоДня,
				РабочееВремяПользователя.ВремяОкончанияРабочегоДня));
		КонецЕсли;
	Иначе
		МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", Дата("00010101000000"), Дата("00010101235959")));
	КонецЕсли;
	РасчетныеТрудозатраты = 0;
	бВычислитьДляОдногоДня = Ложь;
	ПродолжительностьПериодаВДнях = 0;
	
	ПродолжительностьПолногоРабочегоДняВМинутах = 0;
	Для Каждого РабочийПериод Из МассивРабочихПериодовДня Цикл
		ПродолжительностьПолногоРабочегоДняВМинутах = ПродолжительностьПолногоРабочегоДняВМинутах 
			+ Цел((РабочийПериод.Окончание - РабочийПериод.Начало) / 60);
	КонецЦикла;
	СтруктураРезультат.ПродолжительностьРабочегоДняВМинутах = ПродолжительностьПолногоРабочегоДняВМинутах;
	СтруктураРезультат.ПродолжительностьРабочегоДняВЧасах = Окр(СтруктураРезультат.ПродолжительностьРабочегоДняВМинутах / 60, 1);
	
	ПродолжительностьПериодаВДнях = ПолучитьПродолжительностьПериода(НачПериода, КонПериода, Пользователь, Календарь, РабочееВремяПользователя).ВДнях;
	Если ПродолжительностьПериодаВДнях <= 0 Тогда
		Возврат СтруктураРезультат;
	ИначеЕсли НачалоДня(НачПериода) = НачалоДня(КонПериода) Или ПродолжительностьПериодаВДнях = 1 Тогда
		бВычислитьДляОдногоДня = Истина;
	КонецЕсли;
	
	Если бВычислитьДляОдногоДня Тогда
		Если НачалоДня(НачПериода) = НачалоДня(КонПериода) Тогда
			ТрудозатратыВМинутах = ТрудозатратыПродолжительностьВДнеВМинутах(НачПериода, КонПериода, МассивРабочихПериодовДня);
		Иначе
			ТрудозатратыВМинутах = ТрудозатратыПродолжительностьВДнеВМинутах(НачПериода, КонецДня(НачПериода), МассивРабочихПериодовДня);
		КонецЕсли;
	Иначе
		ОбщаяПродолжительностьВМинутахКромеПервогоИПоследнегоДня = (ПродолжительностьПериодаВДнях - 2) * ПродолжительностьПолногоРабочегоДняВМинутах;
		ПродолжительностьПервогоДняВМинутах = ТрудозатратыПродолжительностьВДнеВМинутах(НачПериода, КонецДня(НачПериода), МассивРабочихПериодовДня);
		ПродолжительностьПоследнегоДняВМинутах = ТрудозатратыПродолжительностьВДнеВМинутах(НачалоДня(НачПериода), КонПериода, МассивРабочихПериодовДня);
		
		ТрудозатратыВМинутах = ПродолжительностьПервогоДняВМинутах + ОбщаяПродолжительностьВМинутахКромеПервогоИПоследнегоДня + ПродолжительностьПоследнегоДняВМинутах;
	КонецЕсли;
	
	СтруктураРезультат.ВМинутах = ТрудозатратыВМинутах;
	СтруктураРезультат.ВЧасах = Окр(СтруктураРезультат.ВМинутах / 60, 1);
	
	Возврат СтруктураРезультат;
КонецФункции // ПолучитьТрудозатратыЗаПериод()

// Функция рассчитывает конечную дату от начальной даты с учетом календаря по переданной длительности.
//
Функция ПолучитьДатуПоКалендарю(Знач НачПериода, СтруктураДлительности = Неопределено, Пользователь = Неопределено,
								Организация = Неопределено, Календарь = Неопределено, КалендарьЗаполнен = Истина) Экспорт
	
	ИспользоватьКалендарь = Истина;
	Если НЕ СтруктураДлительности = Неопределено Тогда
		Если СтруктураДлительности.Свойство("ИспользоватьКалендарьВОповещениях") Тогда
			ИспользоватьКалендарь = СтруктураДлительности.ИспользоватьКалендарьВОповещениях;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИспользоватьКалендарь Тогда
		Календарь			= Неопределено;
		КалендарьЗаполнен	= Ложь;
	Иначе
		Если Календарь = Неопределено Тогда
			Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДлительности.Свойство("ВпередПоКалендарю") = Ложь Тогда
		ВпередПоКалендарю = Истина;
	Иначе
		ВпередПоКалендарю = СтруктураДлительности.ВпередПоКалендарю;
	КонецЕсли;
	
	Если НЕ ИспользоватьКалендарь Тогда
		РабочееВремяПользователя = Новый Структура("ВремяНачалаРабочегоДня,ВремяОкончанияРабочегоДня,ВремяНачалаОбеденногоПерерыва,ВремяОкончанияОбеденногоПерерыва");
	Иначе
		РабочееВремяПользователя = ПолучитьСтруктуруРабочихВременПользователя(Организация);
	КонецЕсли;
	
	Если ВпередПоКалендарю = Истина И КалендарьЗаполнен = Истина И ИспользоватьКалендарь = Истина И ЗначениеЗаполнено(Календарь) Тогда
		// Попытка вычислить дату более "экономным" способом.
		бВычислитьУпрощенно = Ложь;
		Попытка
			Если	ТипЗнч(СтруктураДлительности.Дней) = Тип("Число") И СтруктураДлительности.Дней > 0
				И	ТипЗнч(СтруктураДлительности.Часов) = Тип("Число") И СтруктураДлительности.Часов >= 0
				И	ТипЗнч(СтруктураДлительности.Минут) = Тип("Число") И СтруктураДлительности.Минут >= 0 Тогда
				//
				бВычислитьУпрощенно = Истина;
			КонецЕсли;
		Исключение
			бВычислитьУпрощенно = Ложь;
		КонецПопытки;
		
		Если бВычислитьУпрощенно Тогда
			СоответствиеДатПоКалендарюНаГод = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСоответствиеДатПоКалендарюНаГод(Календарь, Год(НачПериода));
			Если СоответствиеДатПоКалендарюНаГод.Количество() > 0 Тогда
				СекундВДне = 24 * 60 * 60;
				ПустаяДата = Дата("00010101");
				
				Попытка
					Если СтруктураДлительности.Часов <> 0 Или СтруктураДлительности.Минут <> 0 Тогда
						НачПериодаСУчетомВремени = НачПериода + (СтруктураДлительности.Часов * 60 * 60) + (СтруктураДлительности.Минут * 60);
						Если НачПериодаСУчетомВремени - НачалоДня(НачПериодаСУчетомВремени) > РабочееВремяПользователя.ВремяОкончанияРабочегоДня - ПустаяДата Тогда
							НачПериодаСУчетомВремени = НачалоДня(НачПериодаСУчетомВремени) + СекундВДне + (РабочееВремяПользователя.ВремяНачалаРабочегоДня - ПустаяДата);
						ИначеЕсли НачПериодаСУчетомВремени - НачалоДня(НачПериодаСУчетомВремени) < РабочееВремяПользователя.ВремяНачалаРабочегоДня - ПустаяДата Тогда
							НачПериодаСУчетомВремени = НачалоДня(НачПериодаСУчетомВремени) + (РабочееВремяПользователя.ВремяНачалаРабочегоДня - ПустаяДата);
						КонецЕсли;
					Иначе
						НачПериодаСУчетомВремени = НачПериода;
					КонецЕсли;
					
					CRM_НачДата = НачалоДня(НачПериодаСУчетомВремени);
					CRM_ТекДата = CRM_НачДата;
					нСчетчикДней = СтруктураДлительности.Дней;
					
					Пока нСчетчикДней > 0 Цикл
						CRM_ТекДата = CRM_ТекДата + СекундВДне;
						Если Год(CRM_ТекДата) <> Год(НачПериода) Тогда
							ВызватьИсключение "";
						КонецЕсли;
						Если СоответствиеДатПоКалендарюНаГод[CRM_ТекДата] = Истина Тогда
							нСчетчикДней = нСчетчикДней - 1;
						КонецЕсли;
					КонецЦикла;
					
					Возврат CRM_ТекДата + (НачПериодаСУчетомВремени - НачалоДня(НачПериодаСУчетомВремени));
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивРабочихПериодовДня = Новый Массив();
	Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", РабочееВремяПользователя.ВремяНачалаРабочегоДня,
				РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва));
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва,
				РабочееВремяПользователя.ВремяОкончанияРабочегоДня));
		Иначе
			МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", РабочееВремяПользователя.ВремяНачалаРабочегоДня,
				РабочееВремяПользователя.ВремяОкончанияРабочегоДня));
		КонецЕсли;
	Иначе
		МассивРабочихПериодовДня.Добавить(Новый Структура("Начало,Окончание", Дата("00010101000000"), Дата("00010101235959")));
	КонецЕсли;
	
	Если СтруктураДлительности.Свойство("ВидОповещения") Тогда
		Если СтруктураДлительности.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
			НачПериода = НачПериода + (МассивРабочихПериодовДня[0].Начало - Дата("00010101000000"));
		КонецЕсли;
	КонецЕсли;
	
	ПродолжительностьПолногоРабочегоДняВМинутах = 0;
	Для Каждого РабочийПериод Из МассивРабочихПериодовДня Цикл
		ПродолжительностьПолногоРабочегоДняВМинутах = ПродолжительностьПолногоРабочегоДняВМинутах 
			+ Цел((РабочийПериод.Окончание - РабочийПериод.Начало) / 60);
	КонецЦикла;
	
	ДнейВЧасахИМинутах	= ЦЕЛ(((СтруктураДлительности.Часов*60)+СтруктураДлительности.Минут)/ПродолжительностьПолногоРабочегоДняВМинутах);
	ОстатокМинут		= ((СтруктураДлительности.Часов*60)+СтруктураДлительности.Минут) - (ДнейВЧасахИМинутах*ПродолжительностьПолногоРабочегоДняВМинутах);
	
	ВсегоДней = СтруктураДлительности.Дней + ДнейВЧасахИМинутах;
	
	Если КалендарьЗаполнен Тогда
		Попытка
			КонПериода = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь,НачПериода,ВсегоДней,,?(ВпередПоКалендарю,Истина,Ложь));
		Исключение
			ТекстСообщения = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения.Описание);
			
			КалендарьЗаполнен = Ложь;
			
			КонПериода = НачалоДня(НачПериода)+(ВсегоДней*24*60*60*?(ВпередПоКалендарю,1,-1));
		КонецПопытки;
	Иначе
		КонПериода = НачалоДня(НачПериода)+(ВсегоДней*24*60*60*?(ВпередПоКалендарю,1,-1));
	КонецЕсли;
	
	ВремяНачПериодаВСекундах		= НачПериода - НачалоДня(НачПериода);
	
	Если ЗначениеЗаполнено(РабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		ОкончанияРабочегоДняВСекундах	= РабочееВремяПользователя.ВремяОкончанияРабочегоДня - НачалоДня(РабочееВремяПользователя.ВремяОкончанияРабочегоДня);
		НачалаРабочегоДняВСекундах		= РабочееВремяПользователя.ВремяНачалаРабочегоДня - НачалоДня(РабочееВремяПользователя.ВремяНачалаРабочегоДня);
		НачалоОбедаВСекундах			= РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва - НачалоДня(РабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
		КонецОбедаВСекундах				= РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва - НачалоДня(РабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва);
	Иначе
		ОкончанияРабочегоДняВСекундах	= (ПродолжительностьПолногоРабочегоДняВМинутах*60)+59;
		НачалаРабочегоДняВСекундах		= 0;
		НачалоОбедаВСекундах			= 0;
		КонецОбедаВСекундах				= 0;
	КонецЕсли;
	
	Если ВремяНачПериодаВСекундах > ОкончанияРабочегоДняВСекундах Тогда
		ВремяНачПериодаВСекундах = ОкончанияРабочегоДняВСекундах;
	КонецЕсли;
	
	ВремяКонПериодаВСекундах = ВремяНачПериодаВСекундах + (ОстатокМинут*60*?(ВпередПоКалендарю,1,-1));
	
	Если ВпередПоКалендарю И ВремяКонПериодаВСекундах > ОкончанияРабочегоДняВСекундах Тогда
		
		Если КалендарьЗаполнен Тогда
			Попытка
				КонПериода = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь,КонПериода,1);
			Исключение
				ТекстСообщения = ИнформацияОбОшибке();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения.Описание);
				
				КалендарьЗаполнен = Ложь;
				КонПериода = НачалоДня(НачПериода)+(24*60*60);
			КонецПопытки;
		Иначе
			КонПериода = НачалоДня(НачПериода)+(24*60*60);
		КонецЕсли;
		
		ВремяКонПериодаВСекундах = НачалаРабочегоДняВСекундах + (ВремяКонПериодаВСекундах - ОкончанияРабочегоДняВСекундах);
		
		Если ((ВремяКонПериодаВСекундах > НачалоОбедаВСекундах) И (ВремяКонПериодаВСекундах < КонецОбедаВСекундах))
		ИЛИ (ВремяКонПериодаВСекундах = НачалоОбедаВСекундах) ИЛИ (ВремяКонПериодаВСекундах = КонецОбедаВСекундах) Тогда
			ВремяКонПериодаВСекундах = ВремяКонПериодаВСекундах + (60*60);
		КонецЕсли;
		
	ИначеЕсли НЕ ВпередПоКалендарю И ВремяКонПериодаВСекундах < НачалаРабочегоДняВСекундах Тогда
		
		Если КалендарьЗаполнен Тогда
			Попытка
				КонПериода = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь,КонПериода,1,,ВпередПоКалендарю);
			Исключение
				ТекстСообщения = ИнформацияОбОшибке();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения.Описание);
				
				КалендарьЗаполнен = Ложь;
				КонПериода = НачалоДня(НачПериода)-(24*60*60);
			КонецПопытки;
		Иначе
			КонПериода = НачалоДня(НачПериода)-(24*60*60);
		КонецЕсли;
		
		ВремяКонПериодаВСекундах = ОкончанияРабочегоДняВСекундах - (НачалаРабочегоДняВСекундах - ВремяКонПериодаВСекундах);
		
		Если ((ВремяКонПериодаВСекундах > НачалоОбедаВСекундах) И (ВремяКонПериодаВСекундах < КонецОбедаВСекундах))
		ИЛИ (ВремяКонПериодаВСекундах = НачалоОбедаВСекундах) ИЛИ (ВремяКонПериодаВСекундах = КонецОбедаВСекундах) Тогда
			ВремяКонПериодаВСекундах = ВремяКонПериодаВСекундах - (60*60);
		КонецЕсли;
		
	КонецЕсли;
	
	
	КонПериода = КонПериода + ВремяКонПериодаВСекундах;
	
	Возврат КонПериода;
	
КонецФункции

// Функция формирует текст описания для объекта.
//
// Параметры:
//	Объект	- ЛюбаяСсылка	- Ссылка на объект.
//
// Возвращаемое значение:
//	Строка	- Строка с текстовым описанием объекта.
//
Функция ПолучитьТекстовоеОписанияОбъекта(Объект) Экспорт
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	Если ТипОбъекта = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			Текст = Строка(Объект.КонтактноеЛицо);
		ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
			Текст = Строка(Объект.Партнер);
		КонецЕсли;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Комментарий), ". ", "") + Объект.Комментарий;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.CRM_Примечание), ". ", "") + Объект.CRM_Примечание;
		Возврат Текст;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		Текст = Объект.Тема;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Комментарий), ". ", "") + Объект.Комментарий;
		Возврат Текст;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Возврат Объект.Тема;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Возврат Объект.Тема;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS") Тогда
		Возврат Объект.ТекстСообщения;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Возврат Объект.ТекстСообщения;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		Текст = Объект.Тема;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Комментарий), ". ", "") + Объект.Комментарий;
		Возврат Текст;
		
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю")
		  И ТипОбъекта = Тип("ДокументСсылка." + "CRM_СчетНаОплатуПокупателю") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			Текст = Строка(Объект.КонтактноеЛицо);
		ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
			Текст = Строка(Объект.Партнер);
		КонецЕсли;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Комментарий), ". ", "") + Объект.Комментарий;
		Возврат Текст;
		
	ИначеЕсли ТипОбъекта = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Текст = Объект.Наименование;
		Текст = Текст + ?(ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Объект.Описание), ". ", "") + Объект.Описание;
		Возврат Текст;
		
	ИначеЕсли  ТипОбъекта = Тип("ДокументСсылка.Анкета") Тогда
		
		Если ЗначениеЗаполнено(Объект.CRM_ШаблонАнкеты) Тогда
			
			ШаблонАнкеты = Объект.CRM_ШаблонАнкеты;
			
		Иначе	
			
			ШаблонАнкеты = Объект.Опрос.ШаблонАнкеты;
			
		КонецЕсли;
		
		Текст = ШаблонАнкеты.Наименование;
		
		Возврат Текст;
	// +СофтФон		
	ИначеЕсли  ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат Объект.Описание;
	// -СофтФон		
	Иначе
		Возврат Строка(Объект);
		
	КонецЕсли;
КонецФункции

// Функция выполняет запрос как набор данных компоновки данных.
//
// Параметры:
//	ТекстЗапроса	- Строка				- Текст запроса.
//	Отбор			- ОтборКомпоновкиДанных	- Отбор компоновки данных.
//	Параметры		- Соответствие			- Соответствие с параметрами запроса.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица с результатом выполнения запроса.
//
Функция ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор, Параметры = Неопределено) Экспорт
	// Создание и настройка схемы компоновки данных.
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;
	
	Настройки = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанные));
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// Пропускаем системные поля
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
	КонецЦикла;
	
	Настройки.ПараметрыДанных.Элементы.Очистить();
	
	Если ТипЗнч(Параметры) = Тип("Соответствие") Тогда
		Для Каждого ПараметрКлючЗначение Из Параметры Цикл
			Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
			Если ТипЗнч(ПараметрКлючЗначение.Ключ) = Тип("ПараметрКомпоновкиДанных") Тогда
				Параметр.Параметр = ПараметрКлючЗначение.Ключ;
			Иначе
				Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ПараметрКлючЗначение.Ключ);
			КонецЕсли;
			Параметр.Значение = ПараметрКлючЗначение.Значение;
			Параметр.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Настройки.Отбор.Элементы.Очистить();
	
	Если Отбор <> Неопределено Тогда
		CRM_ОбщегоНазначенияКлиентСервер.СкопироватьОтборКомпоновкиДанных(Настройки.Отбор.Элементы, Отбор.Элементы, КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанные, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Возврат РезультатТаблица;
КонецФункции

#КонецОбласти //Трудозатраты


#Область СохранениеВсстановлениеСртировкиДиническихСисков
	
// Процедура сохраняет сортировку динамического списка.
//
// Параметры:
//	Список								- Динамический список	- Список.
//	ИдентификаторСписка					- Строка				- Строковый ключ сохранения.
Процедура СохранитьСортировкуСписка(Список, ИдентификаторСписка) Экспорт
	МассивПолейСортировки = Новый Массив();
	Для Каждого ПолеСортировки Из Список.Порядок.Элементы Цикл
		Если ТипЗнч(ПолеСортировки) = Тип("ЭлементПорядкаКомпоновкиДанных") И ПолеСортировки.Использование Тогда
			МассивПолейСортировки.Добавить(Новый Структура("Поле,ТипУпорядочивания,РежимОтображения",
				Строка(ПолеСортировки.Поле), ПолеСортировки.ТипУпорядочивания, ПолеСортировки.РежимОтображения));
			//
		КонецЕсли;
	КонецЦикла;
	CRM_ХранилищеНастроек.Сохранить(ИдентификаторСписка, "", МассивПолейСортировки);
КонецПроцедуры

// Процедура восстанавливает сортировку динамического списка.
//
// Параметры:
//	Список								- Динамический список	- Список.
//	ИдентификаторСписка					- Строка				- Строковый ключ сохранения.
Процедура ВосстановитьСортировкуСписка(Список, ИдентификаторСписка) Экспорт
	МассивПолейСортировки = CRM_ХранилищеНастроек.Загрузить(ИдентификаторСписка);
	Если ТипЗнч(МассивПолейСортировки) = Тип("Массив") Тогда
		Список.Порядок.Элементы.Очистить();
		Для Каждого ПолеСортировки Из МассивПолейСортировки Цикл
			Если ТипЗнч(ПолеСортировки) = Тип("Структура") Тогда
				Попытка
					Если Список.Порядок.ДоступныеПоляПорядка.НайтиПоле(Новый ПолеКомпоновкиДанных(ПолеСортировки.Поле)) <> Неопределено Тогда
						НовоеПоле = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						Если ПолеСортировки.Свойство("Поле") Тогда
							НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеСортировки.Поле);
						КонецЕсли;
						Если ПолеСортировки.Свойство("ТипУпорядочивания") Тогда
							НовоеПоле.ТипУпорядочивания = ПолеСортировки.ТипУпорядочивания;
						Иначе
							НовоеПоле.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
						КонецЕсли;
						Если ПолеСортировки.Свойство("Использование") Тогда
							НовоеПоле.Использование = ПолеСортировки.Использование;
						Иначе
							НовоеПоле.Использование = Истина;
						КонецЕсли;
						Если ПолеСортировки.Свойство("РежимОтображения") Тогда
							НовоеПоле.РежимОтображения = ПолеСортировки.РежимОтображения;
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //СохранениеВсстановлениеСртировкиДиническихСисков


#Область ОбработчикиПодписокНаСобытия 
	
// ВРЕМЕННЫЙ БЛОК, НУЖНО ДЕЛАТЬ ОТДЕЛЬНЫЙ МОДУЛЬ

// Процедура - обработчик подписки на событие "ПриЗаписи" для справочника Календари.
// TODO: пересмотреть этот код, его размещение именно здесь и вообще все.
//
// Параметры:
//	Источник	- СправочникСсылка	- Источник события.
//	Отказ		- Булево			- Флаг отмены.
//
Процедура Справочник_Календари_ПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Календари") Тогда
		НаименованиеПроизводственногоКалендаряПоУмолчанию = "Производственный календарь";
		Если НЕ Источник.Ссылка.Пустая()
			И Источник.Ссылка.Наименование = НаименованиеПроизводственногоКалендаряПоУмолчанию
			И Источник.Наименование <> НаименованиеПроизводственногоКалендаряПоУмолчанию Тогда
			// Не даем изменять наименования производственного календаря по умолчанию, т.к. в БСП оно определяется по имени.
			Источник.Наименование = НаименованиеПроизводственногоКалендаряПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // Справочник_Календари_ПередЗаписью()

// Функция проверяет заполнение реквизита клиентской базы.
//
// Параметры:
//	Объект		- Ссылка	- Ссылка на объект клиентской базы.
//	Реквизит	- Ссылка	- Ссылка на дополнительный реквизит или видконтактной информации.
//
// Возвращаемое значение:
//	Булево		- Истина если реквизит заполнен.
//
Функция ПроверитьЗаполнениеРеквизитаОбъектаКлиентскойБазы(Объект, Реквизит) Экспорт
	Если ТипЗнч(Реквизит) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		НайденнаяСтрока = Объект.КонтактнаяИнформация.Найти(Реквизит, "Вид");
		Если НайденнаяСтрока = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат ЗначениеЗаполнено(НайденнаяСтрока.Представление);
		КонецЕсли;
	ИначеЕсли	ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
			Или	ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.CRM_ДополнительнаяИнформация")
			Или	ТипЗнч(Реквизит) = Тип("Строка") Тогда
		//
		Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
			Попытка		Возврат ЗначениеЗаполнено(Объект[Реквизит]);
			Исключение	Возврат Истина;
			КонецПопытки;
		ИначеЕсли ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			НайденнаяСтрока = Объект.ДополнительныеРеквизиты.Найти(Реквизит, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Возврат ЗначениеЗаполнено(НайденнаяСтрока.Значение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.CRM_ДополнительнаяИнформация") Тогда
			НайденнаяСтрока = Объект.CRM_ДополнительнаяИнформация.Найти(Реквизит, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Возврат ЗначениеЗаполнено(НайденнаяСтрока.Значение);
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Процедура - обработчик подписки на событие "ПриЗаписи" для объектов клиентской базы.
//
// Параметры:
//	Источник	- Ссылка	- Источник события.
//	Отказ		- Булево	- Флаг отмены.
//
Процедура ПриЗаписиОбъектаКлиентскойБазы(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.БизнесПроцесс КАК БизнесПроцесс,
	|	Таблица.Исполнитель КАК Исполнитель,
	|	Таблица.Контролер КАК Контролер,
	|	Таблица.Партнер КАК Партнер,
	|	Таблица.Завершено КАК Завершено,
	|	Таблица.ВидКонтроля КАК ВидКонтроля,
	|	Таблица.Проект КАК Проект,
	|	
	|	ТаблицаРеквизиты.Реквизит КАК Реквизит
	|ИЗ
	|	РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы КАК Таблица
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазыРеквизиты КАК ТаблицаРеквизиты
	|ПО
	|	Таблица.БизнесПроцесс = ТаблицаРеквизиты.БизнесПроцесс
	|	И Таблица.Партнер = ТаблицаРеквизиты.Партнер
	|ГДЕ
	|	Таблица.Партнер = &ИсточникСсылка
	|	И (Таблица.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыМастераПроверкиКлиентскойБазы.ЗаполнениеКонтактнойИнформации)
	|		ИЛИ Таблица.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыМастераПроверкиКлиентскойБазы.ЗаполнениеДополнительныхРеквизитов)
	|		ИЛИ Таблица.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольПотенциалаКлиентов)
	|		ИЛИ Таблица.ВидКонтроля = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов))
	|ИТОГИ ПО
	|	Таблица.БизнесПроцесс
	|");
	Запрос.УстановитьПараметр("ИсточникСсылка", Источник.Ссылка);
	ВыборкаБизнесПроцесс = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаБизнесПроцесс.Количество() > 0 Тогда
		Пока ВыборкаБизнесПроцесс.Следующий() Цикл
			БизнесПроцесс = Неопределено;
			Исполнитель = Неопределено;
			Контролер = Неопределено;
			Партнер = Неопределено;
			Проект = Неопределено;
			ВидКонтроля = Неопределено;
			ВсеРеквизитыЗаполнены = Истина;
			
			Выборка = ВыборкаБизнесПроцесс.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если БизнесПроцесс = Неопределено Тогда БизнесПроцесс = Выборка.БизнесПроцесс; КонецЕсли;
				Если Исполнитель = Неопределено Тогда Исполнитель = Выборка.Исполнитель; КонецЕсли;
				Если Контролер = Неопределено Тогда Контролер = Выборка.Контролер; КонецЕсли;
				Если Партнер = Неопределено Тогда Партнер = Выборка.Партнер; КонецЕсли;
				Если Проект = Неопределено Тогда Проект = Выборка.Проект; КонецЕсли;
				Если ВидКонтроля = Неопределено Тогда ВидКонтроля = Выборка.ВидКонтроля; КонецЕсли;
				
				Если ВидКонтроля = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольПотенциалаКлиентов Тогда
					ВсеРеквизитыЗаполнены =  ЗначениеЗаполнено(Партнер.CRM_Потенциал);
					Прервать;
				ИначеЕсли ВидКонтроля = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов Тогда
					Если ТипЗнч(Партнер) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
						ВсеРеквизитыЗаполнены = ЗначениеЗаполнено(Партнер.ОтправительКонтакт) И ТипЗнч(Партнер.ОтправительКонтакт) <> Тип("Строка");
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Выборка.Реквизит) Тогда
					Продолжить;
				КонецЕсли;
				
				РеквизитЗаполнен = ПроверитьЗаполнениеРеквизитаОбъектаКлиентскойБазы(Источник, Выборка.Реквизит);
				Если ВсеРеквизитыЗаполнены И Не РеквизитЗаполнен Тогда ВсеРеквизитыЗаполнены = Ложь; КонецЕсли;
				
				Менеджер = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазыРеквизиты.СоздатьМенеджерЗаписи();
				Менеджер.БизнесПроцесс = Выборка.БизнесПроцесс;
				Менеджер.Партнер = Выборка.Партнер;
				Менеджер.Реквизит = Выборка.Реквизит;
				Менеджер.Завершено = РеквизитЗаполнен;
				Менеджер.Записать();
			КонецЦикла;
			
			Менеджер = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.СоздатьМенеджерЗаписи();
			Менеджер.БизнесПроцесс = БизнесПроцесс;
			Менеджер.Исполнитель = Исполнитель;
			Менеджер.Партнер = Партнер;
			Менеджер.Проект = Проект;
			Менеджер.ВидКонтроля = ВидКонтроля;
			Менеджер.Контролер = Контролер;
			Менеджер.Завершено = ВсеРеквизитыЗаполнены;
			Менеджер.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик подписки на событие "ПриЗаписи" для объектов, синхронизируемых с MS Outlook.
//
// Параметры:
//	Источник	- Ссылка	- Источник события.
//	Отказ		- Булево	- Флаг отмены.
//
Процедура ПриЗаписиОбъектаОбменаСMSOutlook(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СоответствиеОбъектовOutlook.ПрограммаOutlook КАК ПрограммаOutlook,
	|	СоответствиеОбъектовOutlook.СобственнаяСсылка КАК СобственнаяСсылка,
	|	СоответствиеОбъектовOutlook.СсылкаВOutlook КАК СсылкаВOutlook,
	|	СоответствиеОбъектовOutlook.ДатаПоследнейМодификации КАК ДатаПоследнейМодификации
	|ИЗ
	|	РегистрСведений.CRM_СоответствиеОбъектовOutlook КАК СоответствиеОбъектовOutlook
	|ГДЕ
	|	СоответствиеОбъектовOutlook.СобственнаяСсылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_СоответствиеОбъектовOutlook.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрограммаOutlook = Выборка.ПрограммаOutlook;
		МенеджерЗаписи.СобственнаяСсылка = Выборка.СобственнаяСсылка;
		МенеджерЗаписи.СсылкаВOutlook = Выборка.СсылкаВOutlook;
		МенеджерЗаписи.ДатаПоследнейМодификации = ТекДата;
		МенеджерЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик подписки на событие "ПередЗаписью" для документа CRM_РассылкаЭлектронныхПисем.
//
// Параметры:
//	Источник			- Ссылка					- Источник события.
//	Отказ				- Булево					- Флаг отмены.
//	РежимЗаписи			- РежимЗаписиДокумента 		- Режим записи документа.
//	РежимПроведения		- РежимПроведенияДокумента	- Режим проведения документа.
//
Процедура ПередЗаписьюРассылкиЭлектронныхПисем(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометкаУдаленияИзменена = (ЗначениеЗаполнено(Источник.Ссылка) И Источник.Ссылка.ПометкаУдаления <> Источник.ПометкаУдаления);
	
	Если ПометкаУдаленияИзменена И Не Отказ Тогда
		НоваяПометкаУдаления = Источник.ПометкаУдаления;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		                      |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
		                      |ГДЕ
		                      |	ПредметыПапкиВзаимодействий.Предмет = &Предмет
		                      |	И ЭлектронноеПисьмоИсходящее.ПометкаУдаления <> &НоваяПометкаУдаления");
		Запрос.УстановитьПараметр("Предмет", Источник.Ссылка);
		Запрос.УстановитьПараметр("НоваяПометкаУдаления", НоваяПометкаУдаления);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				Продолжить;
			КонецПопытки;
			
			ДокументОбъект.УстановитьПометкуУдаления(НоваяПометкаУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //ОбработчикиПодписокНаСобытия


#Область Печать
	
// Функция получает пользовательские макеты.
//
Функция ПолучитьПользовательскиеМакеты(ПолноеИмяОбъектаМетаданных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",ПолноеИмяОбъектаМетаданных);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект,
	|	ПользовательскиеМакетыПечати.CRM_Представление
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.CRM_ВнешнийМакет
	|	И ПользовательскиеМакетыПечати.Объект = &Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивСтруктур = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СтруктураМакета = Новый Структура("ИмяМакета,Объект,CRM_Представление", Выборка.ИмяМакета,Выборка.Объект,Выборка.CRM_Представление);
		МассивСтруктур.Добавить(СтруктураМакета);
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

// Процедура получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы.
//  ФормаДиалога        - форма редактируемого объекта,
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа.
//
Процедура УстановитьКнопкиПечати(ПолноеИмяОбъектаМетаданных, Форма) Экспорт
	
	ЭлементПодменюПечати = Форма.Элементы.Найти("ПодменюПечать");
	Если ЭлементПодменюПечати = Неопределено Тогда
		ЭлементПодменюПечати = Форма.Элементы.ФормаАвтоКнопки.Родитель;
	КонецЕсли;
	Форма.Элементы.Переместить(Форма.Элементы.ФормаАвтоКнопки, ЭлементПодменюПечати);
	
	МассивМакетов = ПолучитьПользовательскиеМакеты(ПолноеИмяОбъектаМетаданных);
	
	Для Каждого СтруктураМакета Из МассивМакетов Цикл
		НоваяКомандаФормы = Форма.Команды.Добавить("Печать_"+СокрЛП(СтруктураМакета.ИмяМакета));
		НоваяКомандаФормы.Заголовок                 = СокрЛП(СтруктураМакета.CRM_Представление);
		НоваяКомандаФормы.Действие                  = "Подключаемый_ПечатьВнешнегоМакета";
		
		НовыйПунктМеню =  Форма.Элементы.Вставить("Кнопка_"+СокрЛП(СтруктураМакета.ИмяМакета), Тип("КнопкаФормы"), Форма.Элементы.ФормаАвтоКнопки);
		НовыйПунктМеню.ИмяКоманды			= "Печать_"+СокрЛП(СтруктураМакета.ИмяМакета);
		НовыйПунктМеню.Заголовок			= СокрЛП(СтруктураМакета.CRM_Представление);
	КонецЦикла;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Функция возвращает описание областей макета офисного документа.
//
// Параметры:
//	МассивИменТабличныхЧастей	- Массив	- Массив имен табличных частей.
//
// Возвращаемое значение:
//	Структура	- Структура с описаниями областей макета офисного документа.
//
Функция CRM_ПолучитьОписаниеОбластейМакетаОфисногоДокумента(МассивИменТабличныхЧастей) Экспорт
	ОписаниеОбластей = Новый Структура;
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",					"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул",						"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижняяЧасть",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары",					"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицаТовары",					"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаРазделительТаблицаТовары",		"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаИтогиПоРазделуТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ИтогиТаблицаТовары",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТоварыТекст",				"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыНоменклатура",				"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыНоменклатура",					"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыВсего",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыВсего",							"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОписаниеВарианта",						"Общая");
	Если НЕ (МассивИменТабличныхЧастей = Неопределено) Тогда
		Для Каждого ИмяТабЧасти Из МассивИменТабличныхЧастей Цикл
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицы" + ИмяТабЧасти + "Текст",	"Общая");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицы" + ИмяТабЧасти,			"СтрокаТаблицы");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблица" + ИмяТабЧасти,			"СтрокаТаблицы");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ИтогиТаблица" + ИмяТабЧасти,			"Общая");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Шапка" + ИмяТабЧасти + "Номенклатура",	"Общая");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ИмяТабЧасти + "Номенклатура",			"Список");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Шапка" + ИмяТабЧасти + "Всего",		"Общая");
			УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ИмяТабЧасти + "Всего",					"Список");
		КонецЦикла;
	КонецЕсли;
	Возврат ОписаниеОбластей;
КонецФункции // CRM_ПолучитьОписаниеОбластейМакетаОфисногоДокумента()

// Функция возвращает данные объекта.
//
// Параметры:
//	СсылкаНаОбъект	- ДокументСсылка	- Ссылка на оъект.
//	НомерВарианта	- Число				- Номер варианта.
//
// Возвращаемое значение:
//	Структура	- Структура с данными объекта.
//
Функция CRM_ПолучитьДанныеОбъекта(СсылкаНаОбъект, знач НомерВарианта = Неопределено) Экспорт
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		ДанныеОбъекта = Новый Структура;
		Объект = СсылкаНаОбъект.ПолучитьОбъект();
		Если НомерВарианта = Неопределено Тогда
			// Печатаем утвержденный вариант.
			СтрокаУтвержденного = Объект.Товары.Найти(Истина, "CRM_Утвержден");
			Если СтрокаУтвержденного = Неопределено Тогда
				НомерВарианта = 0;
			Иначе
				НомерВарианта = СтрокаУтвержденного.CRM_ИДВарианта;
			КонецЕсли;
		КонецЕсли;
		
	// **************** Получим из Автотекста.
		СтруктураТеговШаблона = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект);
		Для Каждого КлючЗначение Из СтруктураТеговШаблона Цикл
			ДанныеОбъекта.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
		КонецЦикла;
		СтруктураДанных = Новый Структура("Телефон, EmailПользователя", "", "");
		Если ЗначениеЗаполнено(Объект.Менеджер) Тогда
			CRM_МетодыМодулейМенеджеровДокументов.КППолучитьКонтактныеДанные(Объект.Менеджер, СтруктураДанных);
		КонецЕсли;
		ДанныеОбъекта.Вставить("Варианты", Новый Массив);
		СписокВариантов = CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(СсылкаНаОбъект);
		Для Каждого ЭлементСписка Из СписокВариантов Цикл
			Если НЕ(НомерВарианта = 0) И НЕ (ЭлементСписка.Значение = НомерВарианта) Тогда
				Продолжить;
			КонецЕсли;
			ИтогоБезСкидки = 0;
			ИтоговаяСумма	 = 0;
			ИтоговаяСуммаНДС = 0;
			НомерСтрокиПоПорядку = 0;
			ЕстьРазделители = Ложь;
			ТекущийРазделитель = Неопределено;
			ИтогПоРазделу = 0;	
			
			СтруктураВарианта = Новый Структура;
			СтруктураВарианта.Вставить("идВарианта",ЭлементСписка.Значение);
			СтруктураВарианта.Вставить("Утвержден",ЭлементСписка.Пометка);
			СтруктураВарианта.Вставить("СтрокаВарианта", ЭлементСписка.Представление);
			СтруктураВарианта.Вставить("Товары", Новый Массив);
			
			Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
				Если СтрокаТабличнойЧасти.CRM_ИДВарианта = ЭлементСписка.Значение Тогда
					СтрокаТаблицыТовары = Новый Структура;
					Если СтрокаТабличнойЧасти.CRM_ЭтоРазделитель Тогда
						Если НЕ (ТекущийРазделитель = Неопределено) И ТекущийРазделитель.Итог Тогда
							ДополнительныеПараметры = Новый Структура;
							ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
							ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, ИтогПоРазделу);
							ДополнительныеПараметры.Вставить("НомерСтроки"			, "");
							ДополнительныеПараметры.Вставить("ТипСтроки"			, "ИтогПоРазделу");
							ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
							СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти, "Товары", ДополнительныеПараметры);
							Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
								СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
							КонецЦикла;
							// Если предусмотрен вывод итогов, добавим строку с итогами в массив.
							СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
							СтрокаТаблицыТовары = Новый Структура;
						КонецЕсли;	
						ДополнительныеПараметры = Новый Структура;
						ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
						ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, "");
						ДополнительныеПараметры.Вставить("НомерСтроки"			, "");
						ДополнительныеПараметры.Вставить("ТипСтроки"			, "Разделитель");
						ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
						СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти, "Товары", ДополнительныеПараметры);
						Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
							СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
						КонецЦикла;
						ЕстьРазделители = Истина;
						ТекущийРазделитель = СтрокаТабличнойЧасти.Номенклатура;
						ИтогПоРазделу = 0;
					Иначе
						НомерСтрокиПоПорядку = НомерСтрокиПоПорядку + 1;
						ДополнительныеПараметры = Новый Структура;
						ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
						ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, ИтогПоРазделу);
						ДополнительныеПараметры.Вставить("НомерСтроки"			, НомерСтрокиПоПорядку);
						ДополнительныеПараметры.Вставить("ТипСтроки"			, "Номенклатура");
						ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
						СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти, "Товары", ДополнительныеПараметры);
						Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
							СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
						КонецЦикла;
						СуммаБезСкидки	= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
						СкидкаНаценка	= ?(СуммаБезСкидки >= СтрокаТабличнойЧасти.Сумма, СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма,СтрокаТабличнойЧасти.Сумма - СуммаБезСкидки);
						ИтогоБезСкидки = ИтогоБезСкидки + СуммаБезСкидки;
						ИтоговаяСумма    = ИтоговаяСумма    + СтрокаТабличнойЧасти.Сумма;
						ИтоговаяСуммаНДС = ИтоговаяСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
						ИтогПоРазделу = ИтогПоРазделу + СтрокаТабличнойЧасти.Сумма;
					КонецЕсли;
					СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
				КонецЕсли;
			КонецЦикла;
			// Итоги по последнему разделителю не выведены в цикле.
			// Если предусмотрен вывод итогов, добавим строку с итогами в массив.
			Если НЕ (ТекущийРазделитель = Неопределено) И ТекущийРазделитель.Итог Тогда
				СтрокаТаблицыТовары = Новый Структура;		
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
				ДополнительныеПараметры.Вставить("ИтогПоРазделу"		, ИтогПоРазделу);
				ДополнительныеПараметры.Вставить("НомерСтроки"			, "");
				ДополнительныеПараметры.Вставить("ТипСтроки"			, "ИтогПоРазделу");
				ДополнительныеПараметры.Вставить("ТекущийРазделитель"	, ТекущийРазделитель);
				СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти, "Товары", ДополнительныеПараметры);
				Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
					СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
				КонецЦикла;
				СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
			КонецЕсли;
			СтруктураВарианта.Вставить("ЕстьРазделители", ЕстьРазделители);
			// Выводим итоги
			СтруктураВарианта.Вставить("Всего",	Формат(ИтоговаяСумма,"ЧЦ=15; ЧДЦ=2"));
			Если ИтоговаяСуммаНДС = 0 Тогда
				СтруктураВарианта.Вставить("СтрокаНДС", НСтр("ru = 'без налога (НДС)'"));
				СтруктураВарианта.Вставить("ВсегоНДС", "");
			Иначе
				СтруктураВарианта.Вставить("СтрокаНДС", ?(Объект.ЦенаВключаетНДС, НСтр("ru = 'в том числе НДС:'"), НСтр("ru = 'Сумма НДС:'")));
				СтруктураВарианта.Вставить("ВсегоНДС",  Формат(ИтоговаяСуммаНДС, "ЧЦ=15; ЧДЦ=2"));
			КонецЕсли; 
			СтруктураВарианта.Вставить("ВсегоКОплате",	Формат(ИтоговаяСумма + ?(Объект.ЦенаВключаетНДС, 0, ИтоговаяСуммаНДС),"ЧЦ=15; ЧДЦ=2"));
			СтруктураВарианта.Вставить("ТелефонОтветственного",	СтруктураДанных.Телефон);
			СтруктураВарианта.Вставить("EmailОтветственного",	СтруктураДанных.EmailПользователя);
			СтруктураВарианта.Вставить("СтоимостьПропись",	НРег(РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговаяСумма + ?(Объект.ЦенаВключаетНДС, 0, ИтоговаяСуммаНДС), Объект.Валюта)));
			ДанныеОбъекта.Варианты.Добавить(СтруктураВарианта);
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("Валюта",		Объект.Валюта);
		ДанныеОбъекта.Вставить("Валюта_1",		Объект.Валюта);
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ДанныеОбъекта.Вставить("Курс",			Формат(Объект.Курс,"ЧЦ=10; ЧДЦ=4"));
			ДанныеОбъекта.Вставить("Кратность",		Формат(Объект.Кратность,"ЧЦ=10"));
		Иначе
			СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата);
			ДанныеОбъекта.Вставить("Курс",			Формат(СтруктураВалюты.Курс,"ЧЦ=10; ЧДЦ=4"));
			ДанныеОбъекта.Вставить("Кратность",		Формат(СтруктураВалюты.Кратность,"ЧЦ=10"));
		КонецЕсли;
		ДанныеОбъекта.Вставить("Комментарий",	Объект.Комментарий);
		Возврат ДанныеОбъекта;
		
	Иначе
		МетаОбъект = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
		ДанныеОбъекта = Новый Структура;
	// **************** Получим из Автотекста.
		СтруктураТеговШаблона = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект);
		Для Каждого КлючЗначение Из СтруктураТеговШаблона Цикл
			ДанныеОбъекта.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
		КонецЦикла;
		// Данные табличных частей объекта.
		ДанныеОбъекта.Вставить("ТабличныеЧасти", Новый Массив);
		Для Каждого ТабличнаяЧасть Из МетаОбъект.ТабличныеЧасти Цикл
			ДанныеОбъекта.ТабличныеЧасти.Добавить(ТабличнаяЧасть.Имя);
			ДанныеОбъекта.Вставить(ТабличнаяЧасть.Имя, Новый Массив);
			Ном = 0;
			Для Каждого СтрокаТабличнойЧасти Из СсылкаНаОбъект[ТабличнаяЧасть.Имя] Цикл
				Ном = Ном + 1;
				СтрокаТаблицыТовары = Новый Структура;		
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Ссылка"				, СсылкаНаОбъект);
				ДополнительныеПараметры.Вставить("НомерСтроки"			, Ном);
				СтруктураТеговШаблонаЗначениеКолонок = CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СтрокаТабличнойЧасти, ТабличнаяЧасть.Имя, ДополнительныеПараметры);
				Для Каждого КлючЗначение Из СтруктураТеговШаблонаЗначениеКолонок Цикл
					СтрокаТаблицыТовары.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
				КонецЦикла;
				ДанныеОбъекта[ТабличнаяЧасть.Имя].Добавить(СтрокаТаблицыТовары);
			КонецЦикла;
		КонецЦикла;
		Возврат ДанныеОбъекта;
	КонецЕсли;
	
КонецФункции // CRM_ПолучитьДанныеОбъекта()

// Фукнция возвращает макеты и данные объектов.
//
// Параметры:
//	ИмяМакета			- Строка			- Имя макета.
//	ОбъектыНазначения	- СписокЗначений	- Список объектов.
//	НомерВарианта		- Число				- Номер варианта.
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая макеты и данные.
//
Функция CRM_ПолучитьВнешниеМакетыИДанныеОбъектов(ИмяМакета, ОбъектыНазначения, НомерВарианта = Неопределено) Экспорт
	
	Перем ПутьКФайлуМакета, ДвоичныеДанныеМакета;
	
	Если Найти(ИмяМакета, "ПФ_DOC") > 0 Тогда
		ТипМакета = "DOC";
	ИначеЕсли Найти(ИмяМакета, "ПФ_ODT") > 0 Тогда
		ТипМакета = "ODT";
	КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектыНазначения[0].Значение));
	
	ЗаписьРегистра = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ИмяМакета	= ИмяМакета;
	ЗаписьРегистра.Объект		= МетаОбъект.ПолноеИмя();
	
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		ДвоичныеДанныеМакета = ЗаписьРегистра.Макет.Получить();
	КонецЕсли;
	
	МассивДокументов = ОбъектыНазначения.ВыгрузитьЗначения();
	ДанныеПоВсемОбъектам = Новый Соответствие;
	МассивИменТабличныхЧастей = Неопределено;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		ПолученныеДанные = CRM_ПолучитьДанныеОбъекта(ОбъектСсылка, НомерВарианта);
		ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолученныеДанные);
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
		Если МассивИменТабличныхЧастей = Неопределено Тогда
			Если ПолученныеДанные.Свойство("ТабличныеЧасти") Тогда
				МассивИменТабличныхЧастей = ПолученныеДанные.ТабличныеЧасти;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	ДвоичныеДанныеМакетов.Вставить(ИмяМакета, ДвоичныеДанныеМакета);
	ТипыМакетов.Вставить(ИмяМакета, ТипМакета);
	ОписаниеОбластей.Вставить(ИмяМакета, CRM_ПолучитьОписаниеОбластейМакетаОфисногоДокумента(МассивИменТабличныхЧастей));
	МакетыИДанные = Новый Структура("Данные, Макеты", ДанныеПоВсемОбъектам, 
		Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов", ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов));
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", УправлениеПечатью.ПолучитьЛокальныйКаталогФайловПечати());
	Возврат МакетыИДанные;
	
КонецФункции // CRM_ПолучитьВнешниеМакетыИДанныеОбъектов()

// Фукнция возвращает макеты и данные объектов.
//
// Параметры:
//	ИмяМакета			- Строка			- Имя макета.
//	ОбъектыНазначения	- СписокЗначений	- Список объектов.
//	НомерВарианта		- Число				- Номер варианта.
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая макеты и данные.
//
Функция CRM_ПолучитьМакетыИДанныеОбъектов(ИмяМакета, ОбъектыНазначения, НомерВарианта = Неопределено) Экспорт
	
	Перем ПутьКФайлуМакета, ДвоичныеДанныеМакета;
	
	Если Найти(ИмяМакета, "ПФ_DOC") > 0 Тогда
		ТипМакета = "DOC";
	ИначеЕсли Найти(ИмяМакета, "ПФ_ODT") > 0 Тогда
		ТипМакета = "ODT";
	КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектыНазначения[0].Значение));
	
	ПолноеИмя = МетаОбъект.ПолноеИмя();
	
	ДвоичныеДанныеМакета = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмя + "." + ИмяМакета);
	
	МассивДокументов = ОбъектыНазначения.ВыгрузитьЗначения();
	ДанныеПоВсемОбъектам = Новый Соответствие;
	МассивИменТабличныхЧастей = Неопределено;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		ПолученныеДанные = CRM_ПолучитьДанныеОбъекта(ОбъектСсылка, НомерВарианта);
		ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолученныеДанные);
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
		Если МассивИменТабличныхЧастей = Неопределено Тогда
			Если ПолученныеДанные.Свойство("ТабличныеЧасти") Тогда
				МассивИменТабличныхЧастей = ПолученныеДанные.ТабличныеЧасти;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	ДвоичныеДанныеМакетов.Вставить(ИмяМакета, ДвоичныеДанныеМакета);
	ТипыМакетов.Вставить(ИмяМакета, ТипМакета);
	ОписаниеОбластей.Вставить(ИмяМакета, CRM_ПолучитьОписаниеОбластейМакетаОфисногоДокумента(МассивИменТабличныхЧастей));
	МакетыИДанные = Новый Структура("Данные, Макеты", ДанныеПоВсемОбъектам, 
		Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов", ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов));
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", УправлениеПечатью.ПолучитьЛокальныйКаталогФайловПечати());
	Возврат МакетыИДанные;
	
КонецФункции // CRM_ПолучитьВнешниеМакетыИДанныеОбъектов()

// Фукнция возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект	- элемент справочника, документ, ...
//
//  ИменаРеквизитов	- Строка			- имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//
Функция ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, ИменаРеквизитов) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ИменаРеквизитов);
КонецФункции // ПолучитьЗначенияРеквизитов()

// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

#КонецОбласти //Печать


#Область Взаимодействия
	
// Функция заполняет поиск пользователя в учетной записи электронной почты.
//
// Параметры:
//	УчетнаяЗапись	- СправочникСсылка	- Учетная запись электронной почты.
//	Пользователь	- СправочникСсылка	- Текущий пользователь.
//
// Возвращаемое значение:
//	Булево	- Присутствие пользователя в учетной записи электронной почты.
//
Функция НайтиПользователяВУчетнойЗаписи(УчетнаяЗапись, Пользователь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись",	УчетнаяЗапись);
	Запрос.УстановитьПараметр("Пользователь",	Пользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь
	               |ИЗ
	               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	               |ГДЕ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
	               |	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь";
	ВыборкаРезультатовЗапроса = Запрос.Выполнить();
	Возврат НЕ ВыборкаРезультатовЗапроса.Пустой();
КонецФункции // НайтиПользователяВУчетнойЗаписи()

&НаСервере
// Процедура устанавливает нового ответственного в подчиненных взаимодействиях.
//
// Параметры:
//	МассивДокументов	- Массив			- Массив документов.
//	Ответственный		- СправочникСсылка	- Новый ответственный.
//
Процедура УстановитьНовогоОтветственногоВПодчиненныхВзаимодействиях(Знач МассивДокументов, Ответственный) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Взаимодействие.Ссылка
	               |ИЗ
	               |	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	               |ГДЕ
	               |	CRM_Взаимодействие.ДокументОснование = &Основание
	               |	И CRM_Взаимодействие.ПометкаУдаления = ЛОЖЬ
	               |	И CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Запланировано)";
	Для Каждого ТекущийДокумент Из МассивДокументов Цикл
		Запрос.УстановитьПараметр("Основание", ТекущийДокумент); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект					= Выборка.Ссылка.ПолучитьОбъект();
			ПредыдущийОтветственный = ДокументОбъект.Ответственный;
			ДокументОбъект.Ответственный	= Ответственный;
			ДокументОбъект.Подразделение	= Ответственный.Подразделение;
			
			// Именно здесь и надо чистить задачи предыдущего пользователя.
			НаборЗаписей = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ПредыдущийОтветственный);
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			//Для нового АРМа
			////НаборЗаписей = РегистрыСведений.CRM_Тест_АРМ.СоздатьНаборЗаписей();
			////НаборЗаписей.Отбор.Пользователь.Установить(ПредыдущийОтветственный);
			////НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			////НаборЗаписей.Прочитать();
			////НаборЗаписей.Очистить();
			////НаборЗаписей.Записать();
			
			
			Попытка
				CRM_ВзаимодействияСервер.УдалитьСобытиеИзКалендаря(Выборка.Ссылка,ПредыдущийОтветственный);
				
				ДокументОбъект.Записать();
			Исключение
			КонецПопытки;	
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры // УстановитьНовогоОтветственногоВПодчиненныхВзаимодействиях()

#КонецОбласти //Взаимодействия


#Область ПрисоединенныеФайлы
	
// Функция возвращает ТипНомер по типу контактной информации.
//
// Параметры:
//	Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации	- Тип контактной информации.
//
//	Возвращаемое значение
//	Число	- ТипНомер (1 - Адрес, 2 - Телефон или факс, 0 - Все остальные типы).
//
Функция ПоТипуКонтактнойИнформацииПолучитьТипНомер(Тип) Экспорт
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат 1;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПоТипуКонтактнойИнформацииПолучитьТипНомер()

// Функция возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//	Тип	- ПеречислениеСсылка.ТипыКонтактнойИнформации	- Тип контактной информации.
//
// Возвращаемое значение:
//	Булево	- Доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип) Экспорт
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге()

#КонецОбласти //ПрисоединенныеФайлы


#Область КонтактнаяИнформация
	
// Функция возвращает номер по типу контактной информации.
//
// Параметры:
//	Тип	- ПеречислениеСсылка.ТипыКонтактнойИнформации	- Тип контактной информации.
//
// Возвращаемое значение:
//	Число	- 1 - Адрес, 2 - Телефон или факс, 0 - Все остальные типы.
//
Функция ПоТипуКонтактнойИнформацииПолучитьНомер(Тип) Экспорт 
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат 1;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПоТипуКонтактнойИнформацииПолучитьНомер()

//  Функция возвращает признак того, хранит ли строка данные XML.
//
// Параметры:
//	Данные	- Строка	- Проверяемая строка.
//
// Возвращаемое значение:
//	Булево	- Признак строки XML.
//
Функция ЭтоСтрокаXML(Текст) Экспорт
	
	Возврат ТипЗнч(Текст) = Тип("Строка") И Лев(СокрЛ(Текст),1) = "<";
	
КонецФункции

// Функция возвращает структуру ("Представление", "ЗначенияПолей"), заполненную строкой и списком.
//
//  Параметры:
//      XDTOКонтактнаяИнформация - XDTO контактной информации или строка XML.
//      СтарыйСоставПолей        - булево - необязательный флаг того, что из состава полей будут исключены
//                                 поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая контактную информацию.
//
Функция КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СтарыйСоставПолей = Ложь) Экспорт
	// ++ VOG Солодов В.В. 27.02.2020 CRM-196
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СтарыйСоставПолей);
	// До изменения
	//Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(Данные);
	// -- VOG Солодов В.В. 27.02.2020
КонецФункции // КонтактнаяИнформацияВСтаруюСтруктуру()

// Функция преобразует значения полей в XML.
//
// Параметры:
//	КонтактнаяИнформацияСписком	- СписокЗначений	- Список, содержащий контактную информацию.
//	ВидКонтактнойИнформации		- СправочникСсылка	- Вид контактной информации.
//
// Возвращаемое значение:
//	Строка	- Контактная информация в виде XML.
//
Функция ЗначениеПолейВXML(КонтактнаяИнформацияСписком, ВидКонтактнойИнформации) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(КонтактнаяИнформацияСписком, ВидКонтактнойИнформации));
КонецФункции // ЗначениеПолейВXML()

// Функция преобразует строку в XDTO контактную информацию телефона.
//
//  Параметры:
//      ЗначенияПолей - строка с сериализованной информацией, значения полей.
//      Представление - представление старший-младший, используется для попытки разбора, 
//                      если ЗначенияПолей пусто.
//      ОжидаемыйТип  - необязательный тип для контроля.
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая контактную информацию.
//
Функция КонтактнаяИнформацияСлужебный_ДесериализацияТелефона(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.ДесериализацияТелефона(ЗначенияПолей, Представление, ОжидаемыйТип);
	Телефон = XDTOКонтактная.Состав;
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Представление",	XDTOКонтактная.Представление);
	СтруктураВозврата.Вставить("Комментарий",	XDTOКонтактная.Комментарий);
	СтруктураВозврата.Вставить("КодСтраны",		Телефон.КодСтраны);
	СтруктураВозврата.Вставить("КодГорода",		Телефон.КодГорода);
	СтруктураВозврата.Вставить("НомерТелефона",	Телефон.Номер);
	СтруктураВозврата.Вставить("Добавочный",	Телефон.Добавочный);
	Возврат СтруктураВозврата;
КонецФункции // КонтактнаяИнформацияСлужебный_ДесериализацияТелефона()

// Функция возвращает структуру контактной информации.
//
// Параметры:
//	Реквизиты				- Структура				- Структура реквизитов.
//	ТипКонтактнойИнформации	- ПеречислениеСсылка	- Тип контактной информации.
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая контактную информацию.
//
Функция КонтактнаяИнформацияПоЗначениюРеквизитов(Реквизиты, ТипКонтактнойИнформации) Экспорт
	// ++ VOG Солодов В.В. 27.02.2020 CRM-196
	ПространствоИмен = УправлениеКонтактнойИнформациейСлужебный.ПространствоИмен();
	// До изменения
	//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	// -- VOG Солодов В.В. 27.02.2020
	Результат = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") );
	
	Если ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") );
		Данные.КодСтраны  = Реквизиты.КодСтраны;
		Данные.КодГорода  = Реквизиты.КодГорода;
		Данные.Номер      = Реквизиты.НомерТелефона;
		Данные.Добавочный = Реквизиты.Добавочный;
		// ++ VOG Солодов В.В. 28.02.2020 CRM-196
		// До изменения
		//Результат.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеТелефона(Данные);
		// -- VOG Солодов В.В. 28.02.2020
	Иначе        
		Данные = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") );
		Данные.КодСтраны  = Реквизиты.КодСтраны;
		Данные.КодГорода  = Реквизиты.КодГорода;
		Данные.Номер      = Реквизиты.НомерТелефона;
		Данные.Добавочный = Реквизиты.Добавочный;
		// ++ VOG Солодов В.В. 28.02.2020 CRM-196
		// До изменения
		//Результат.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеФакса(Данные);
		// -- VOG Солодов В.В. 28.02.2020
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 28.02.2020 CRM-196
	Результат.Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		Данные.КодСтраны,
		Данные.КодГорода,
		Данные.Номер,
		Данные.Добавочный,
		"");
	// -- VOG Солодов В.В. 28.02.2020
	
	Результат.Состав      = Данные;
	Результат.Комментарий = Реквизиты.Комментарий;
	Возврат Новый Структура("КонтактнаяИнформация, Представление, Комментарий",
		УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Результат),
		Результат.Представление, Результат.Комментарий);
	КонецФункции // КонтактнаяИнформацияПоЗначениюРеквизитов()

// Функция возвращает контактной информации (адрес) в виде списка.
//
// Параметры:
//	СтрокаАдреса			- Строка - строка адреса в формате XML или в формате "9 запятых".
//
// Возвращаемое значение - Список значений - список значений полей , содержащих контактную информацию.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаАдреса) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаАдреса) Тогда
		СписокПолей = КонтактнаяИнформацияВСтаруюСтруктуру(СтрокаАдреса).ЗначенияПолей;
	Иначе
		// ++ VOG Солодов В.В. 27.02.2020 CRM-196
		СписокПолей = УправлениеКонтактнойИнформациейСлужебный.ПреобразоватьСтрокуВСписокПолей(СтрокаАдреса);
		// До изменения
		//СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаАдреса);
		// -- VOG Солодов В.В. 27.02.2020
	КонецЕсли;
	
	Возврат СписокПолей;
	
КонецФункции // ПреобразоватьСтрокуВСписокПолей()

Функция ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект, ИмяТабличнойЧасти = "", ДополнительныеПараметры = Неопределено) Экспорт
	Возврат CRM_АвтотекстПереопределяемый.ПолучитьСтруктуруТеговШаблона(СсылкаНаОбъект, ИмяТабличнойЧасти, ДополнительныеПараметры);
КонецФункции

#КонецОбласти //КонтактнаяИнформация


#Область РаботаСИнтересом

// Функция возвращает массив завершенных состояний интереса.
//
// Параметры:
//	Нет.
//
// Возвращаеоме значение:
//	Массив	- Массив завершенных состояний интереса.
//
Функция ПолучитьМассивЗавершенныхСостоянийИнтереса() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СостоянияИнтересов.Ссылка
	               |ИЗ
	               |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	               |ГДЕ
	               |	CRM_СостоянияИнтересов.Завершено
	               |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления";
	МассивСостояний = Новый Массив;				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСостояний.Добавить(Выборка.Ссылка);
	КонецЦикла;	
	Возврат МассивСостояний;
КонецФункции // ПолучитьМассивЗавершенныхСостоянийИнтереса()

// Функция возвращает массив интересов клиента по определенному типу услуги.
//
// Параметры:
//	Интерес		- ДокументСсылка	- Текущий интерес.
//	Клиент		- СправочникСсылка	- Клиент
//	ТипУслуги		- СправочникСсылка	- ТипУслуги
//
// Возвращаемое значение:
//	Массив	- массив интересов клиента по определенному типу услуги.
//
Функция ПолучитьМассивИнтересовКлиента(Интерес, Клиент, ТипУслуги) Экспорт
	Запрос = Новый Запрос;
	МассивСостояний	= ПолучитьМассивЗавершенныхСостоянийИнтереса();
	СписокСостояний	= Новый СписокЗначений;
	СписокСостояний.ЗагрузитьЗначения(МассивСостояний);
	Запрос.УстановитьПараметр("Интерес",			Интерес);
	Запрос.УстановитьПараметр("Клиент",				Клиент);
	Запрос.УстановитьПараметр("ТипУслуги",			ТипУслуги);
	Запрос.УстановитьПараметр("СписокСостояний",	СписокСостояний);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Интерес.Ссылка
	               |ИЗ
	               |	Документ.CRM_Интерес КАК Интерес
	               |ГДЕ
	               |	НЕ Интерес.Ссылка = &Интерес
	               |	И НЕ Интерес.ПометкаУдаления
	               |	И Интерес.Партнер = &Клиент
	               |	И Интерес.ТипУслуги = &ТипУслуги
	               |	И НЕ Интерес.СостояниеИнтереса В (&СписокСостояний)
	               |	И НЕ Интерес.Завершен";
	МассивИнтересовКлиента = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		МассивИнтересовКлиента.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивИнтересовКлиента;
КонецФункции // ПолучитьМассивИнтересовКлиента(()	

// Функция возвращает массив интересов потенциального клиента.
//
// Параметры:
//	Интерес		- ДокументСсылка	- Текущий интерес.
//	Клиент		- СправочникСсылка	- Клиент
//
// Возвращаемое значение:
//	Массив	- массив интересов потенциального клиента.
//
Функция ПолучитьМассивИнтересовПотенциальногоКлиента(Интерес, Клиент) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",	Интерес);
	Запрос.УстановитьПараметр("Клиент",		Клиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	CRM_Интерес.Ссылка
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	НЕ CRM_Интерес.Ссылка = &Интерес
	               |	И НЕ CRM_Интерес.ПометкаУдаления
	               |	И CRM_Интерес.ПотенциальныйКлиент = &Клиент
	               |	И CRM_Интерес.Завершен = ЛОЖЬ";
	МассивИнтересовКлиента = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		МассивИнтересовКлиента.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивИнтересовКлиента;
КонецФункции // ПолучитьМассивИнтересовПотенциальногоКлиента()

// Процедура вызывается из подписки CRM_ЗадачаПередЗаписью. Предназначена для заполнения
// общих реквизитов CRM_Интерес и CRM_СостояниеИнтереса в документах, а также для некоторых
// документов, заполнение на основании документа CRM_Интерес.
//
// Параметры:
//	Источник				- ДокументОбъект	
//	ДанныеЗаполнения		- ДокументСсылка - Основание заполнения.
//	СтандартнаяОбработка	- Булево	
//
// Возвращаемое значение:
//	Нет
Процедура ЗаполнитьИнтересСостояниеЗадачи(Источник, Отказ) Экспорт
	
	Если Источник.ЭтоНовый() И ЗначениеЗаполнено(Источник.БизнесПроцесс) Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из подписки CRM_ОбработкаЗаполнения. Предназначена для заполнения
// общих реквизитов CRM_Интерес и CRM_СостояниеИнтереса в документах, а также для некоторых
// документов, заполнение на основании документа CRM_Интерес.
//
// Параметры:
//	Источник				- ДокументОбъект	
//	ДанныеЗаполнения		- ДокументСсылка - Основание заполнения.
//	СтандартнаяОбработка	- Булево	
//
// Возвращаемое значение:
//	Нет
Процедура ЗаполнитьИнтересСостояние(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		CRM_Взаимодействия.CRM_ЗаполнитьРеквизитыПоУмолчанию(Источник, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		CRM_Взаимодействия.CRM_ЗаполнитьРеквизитыПоУмолчанию(Источник, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		CRM_Взаимодействия.CRM_ЗаполнитьРеквизитыПоУмолчанию(Источник, ДанныеЗаполнения);
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДанныеЗаполнения") Тогда 
		ДанныеЗаполнения = Источник.ДополнительныеСвойства.ДанныеЗаполнения;
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	
	//Заполнение Партнера
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Попытка
			Если НЕ ЗначениеЗаполнено(Источник.Партнер) Тогда
				Источник.Партнер = ДанныеЗаполнения.Партнер;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
				
				Если Не (ЗначениеЗаполнено(Источник["Соглашение"]) 
				   И Источник["Соглашение"] = ДанныеЗаполнения["Соглашение"]) Тогда
					
					Источник["Соглашение"] = ДанныеЗаполнения["Соглашение"];
					
					Источник.ЗаполнитьУсловияПродажПоСоглашению();				
				
				КонецЕсли;			
		
			КонецЕсли;
		
		КонецЕсли;		
		
	КонецЕсли;		
	
	ИмяРеквизитаОснования = ВернутьИмяРеквизитаОснования(ТипЗнч(Источник.Ссылка));
	
	Если НЕ ИмяРеквизитаОснования = Неопределено Тогда
		
		МетаданныеДокумента = Источник.Метаданные();
		Если НЕ МетаданныеДокумента.Реквизиты[ИмяРеквизитаОснования].Тип.Типы().Найти(ТипЗнч(ДанныеЗаполнения)) = Неопределено Тогда
			Источник[ИмяРеквизитаОснования] = ДанныеЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает таблицу баллов по подразделению
//
// Параметры:
//	Подразделение - СправочникСсылка	
//
// Возвращаемое значение:
//	ТаблицаЗначений - Результат выгрузки запроса
//
Функция ПолучитьТаблицуБаллов(Подразделение = Неопределено) Экспорт

	Запрос		 = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Тбл.ВидВзаимодействия КАК ВидВзаимодействия,
		|	Тбл.Балл
		|ИЗ
		|	РегистрСведений.CRM_НастройкиАвтомотиватора КАК Тбл";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Тбл.Подразделение = &Подразделение";
	КонецЕсли;			
			
	Запрос.Текст = Запрос.Текст + "	
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидВзаимодействия
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	Запрос.УстановитьПараметр("Подразделение", Подразделение);	
		
	ТзБаллы		= Новый ТаблицаЗначений;
	ТзБаллы		= Запрос.Выполнить().Выгрузить();

	Возврат ТзБаллы;
	
КонецФункции // ПолучитьТаблицуБаллов()

// Функция возвращает массив интересов клиента по определенному контактному лицу.
//
// Параметры:	
//	Клиент		- СправочникСсылка	- Клиент
//	Контакт		- СправочникСсылка	- КонтактныеЛицаПартнеров
//
// Возвращаемое значение:
//  КоличествоИнтересов	- Число - Количество найденных интересов.
//
Функция ПолучитьКоличествоИнтересовПоКлиентуКонтакту(Клиент)
	
	// в случае нового объекта или незаполненности реквизита сразу возвращаем нулевое значение
	Если Клиент = Справочники.Партнеры.ПустаяСсылка() Тогда
		Возврат 0;
	КонецЕсли;		
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_Интерес.Ссылка) КАК КоличествоИнтересов
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	CRM_Интерес.Партнер = &Партнер
	               |	И CRM_Интерес.Завершен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Партнер", Клиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоИнтересов = 0;
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КоличествоИнтересов) Тогда
		КоличествоИнтересов = Выборка.КоличествоИнтересов;	
	КонецЕсли; 
	
	Возврат КоличествоИнтересов;
	
КонецФункции 

// Функция возвращает массив интересов клиента по спсику клиентов.
//
// Параметры:	
//	СписокКлиентов	- СписокЗначений - Список клиентов мероприятия.
//
// Возвращаемое значение:
//	КоличествоИнтересов	- Число - Количество найденных интересов по списку клиентов.
//
Функция ПолучитьКоличествоИнтересовПоСпискуКлиентов(СписокКлиентов)
	
	Если СписокКлиентов.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;		
	
	МассивКлиентов = Новый Массив;
	Для Каждого ЭлементСписка Из СписокКлиентов Цикл
		МассивКлиентов.Добавить(ЭлементСписка.Значение.Ссылка);
	КонецЦикла;		
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_Интерес.Ссылка) КАК КоличествоИнтересов
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Партнер В(&СписокКлиентов)
	|	И CRM_Интерес.Завершен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокКлиентов", МассивКлиентов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоИнтересов = 0;
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КоличествоИнтересов) Тогда
		КоличествоИнтересов = Выборка.КоличествоИнтересов;	
	КонецЕсли; 
	
	Возврат КоличествоИнтересов;
	
КонецФункции 

// Процедуры и функции для работы с группой интереса в форме документа.

// Процедура создает реквизиты группы интерес
// предназначена для создания таблицы с документыми интерес, относящихся к документу Объект
// и размещении ее на форме документа.
//
// Параметры:
//	Форма						- упр форма, на которой размещается группа создаваемых реквизитов.
//	Объект						- ДокументСсылка
//	ИмяЭлементаДляРазмещения 	- имя элемента формы, по умолчанию не задано.
//	ТипОбъекта 					- тип документа, из формы которого был вызван, необазятельный параметр.
// 
// Возвращаемое значение
// 	нет
Процедура СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(Форма, Объект, ИмяЭлементаДляРазмещения = "", ТипОбъекта = Неопределено) Экспорт
	
	Строка250 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250));
	Строка200 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
	Строка11 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	ОписаниеДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_ИнтересСтрокой"			, Строка250															, , "Интерес"		, Истина));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьИнтересыДляВыбора"		, ОписаниеТипаБулево												, , "Есть интересы"	, Ложь));
	Если ТипОбъекта = Тип("ДокументСсылка.CRM_Мероприятие")
	ИЛИ ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS") Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КлиентСписок"				, Новый ОписаниеТипов("СписокЗначений")								, , "Список клиентов", Ложь));
	ИначеЕсли ТипОбъекта = Тип("БизнесПроцессСсылка.Задание") ИЛИ ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
	Иначе
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Клиент"					, Новый ОписаниеТипов("СправочникСсылка.Партнеры")					, , "Клиент"		, Ложь));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Контакт"					, Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров")	, , "Контакт"		, Ложь));
	КонецЕсли;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СкрытьПоказатьИнтересы"		, ОписаниеТипаБулево												, , "Скрыть/показать интересы", Ложь));
	
	// Создадим таблицу значений которая будет заполняться
	// связанными с документом интересами.
	ИмяОписания = "CRM_ТаблицаИнтересов";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания		, Новый ОписаниеТипов("ТаблицаЗначений"), , ,Истина));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Дата"				, ОписаниеДата													, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Номер"			, Строка11														, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тема"				, Строка200														, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Партнер"			, Новый ОписаниеТипов("СправочникСсылка.Партнеры")				, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Ответственный"	, Новый ОписаниеТипов("СправочникСсылка.Пользователи")			, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Подразделение"	, Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")	, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Организация"		, Новый ОписаниеТипов("СправочникСсылка.Организации")			, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Ссылка"			, Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес")				, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СостояниеИнтереса", Новый ОписаниеТипов("СправочникСсылка.CRM_СостоянияИнтересов"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВведенНаОсновании", ОписаниеТипаБулево											, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ОсновнойИнтерес"	, ОписаниеТипаБулево											, ИмяОписания));
	
	// Добавим новые реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаСтрокаИнтереса	= Форма.Элементы.Добавить("ГруппаСтрокаИнтереса", Тип("ГруппаФормы"), Форма.Элементы[ИмяЭлементаДляРазмещения]);
	ГруппаСтрокаИнтереса.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаИнтереса.ОтображатьЗаголовок	= Ложь;
	ГруппаСтрокаИнтереса.Отображение			= ОтображениеОбычнойГруппы.Нет;
	ГруппаСтрокаИнтереса.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	//Элемент							= Форма.Элементы.Добавить("CRM_ИнтересСтрокой", Тип("ПолеФормы"), Форма.Элементы[ИмяЭлементаДляРазмещения]);
	Элемент							= Форма.Элементы.Добавить("CRM_ИнтересСтрокой", Тип("ПолеФормы"), ГруппаСтрокаИнтереса);
	Элемент.Вид						= ВидПоляФормы.ПолеВвода;
	// Элемент.Подсказка				= "По клиенту есть несколько актуальных интересов. Выберите один из них.";
	
	Элемент.Подсказка	   = НСтр("ru = 'По клиенту есть несколько актуальных интересов. Выберите один из них.'");
	Элемент.ПодсказкаВвода = НСтр("ru = 'По клиенту есть несколько актуальных интересов. Выберите один из них...'");
	
	Элемент.ПутьКДанным				= "CRM_ИнтересСтрокой";
	Элемент.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элемент.КнопкаВыбора			= Истина;
	Элемент.КнопкаОткрытия			= Истина;
	Элемент.КнопкаОчистки			= Истина;
	Элемент.РедактированиеТекста	= Ложь;
	Элемент.ПропускатьПриВводе		= Истина;
	Элемент.АвтоМаксимальнаяШирина	= Ложь;
	
	Элемент.УстановитьДействие("НачалоВыбора"		, "Подключаемый_ИнтересНачалоВыбора");
	Элемент.УстановитьДействие("ОбработкаВыбора"	, "Подключаемый_ИнтересОбработкаВыбора");
	Элемент.УстановитьДействие("Открытие"			, "Подключаемый_ИнтересОткрытие");
	Элемент.УстановитьДействие("Очистка"			, "Подключаемый_ИнтересОчистка");
	
	// Команда и кнопка скрыть показать таблицу интересов.
	НоваяКомандаФормы = Форма.Команды.Добавить("СкрытьПоказатьИнтересы");
	НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Скрыть\показать интересы'");
	НоваяКомандаФормы.Подсказка                 = НСтр("ru = 'Скрыть\показать интересы'");
	НоваяКомандаФормы.Действие                  = "Подключаемый_СкрытьПоказатьИнтересы";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	НоваяКнопкаФормы = Форма.Элементы.Добавить("СкрытьПоказатьИнтересы", Тип("КнопкаФормы"), ГруппаСтрокаИнтереса);
	НоваяКнопкаФормы.Вид				= ВидКнопкиФормы.ОбычнаяКнопка;
	НоваяКнопкаФормы.ИмяКоманды			= "СкрытьПоказатьИнтересы";
	НоваяКнопкаФормы.Заголовок			= НСтр("ru = 'Скрыть\показать интересы'");
	НоваяКнопкаФормы.Картинка			= БиблиотекаКартинок.Информация;
	НоваяКнопкаФормы.Отображение		= ОтображениеКнопки.Картинка;
	НоваяКнопкаФормы.ОтображениеФигуры  = ОтображениеФигурыКнопки.ПриАктивности;
	
	// Добавим таблицу интересов
	ГруппаТаблицыИнтересов	= Форма.Элементы.Добавить("ГруппаCRM_ТаблицаИнтересов", Тип("ГруппаФормы"), Форма.Элементы[ИмяЭлементаДляРазмещения]);
	ГруппаТаблицыИнтересов.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТаблицыИнтересов.ОтображатьЗаголовок	= Ложь;
	ГруппаТаблицыИнтересов.Отображение			= ОтображениеОбычнойГруппы.Нет;
	ГруппаТаблицыИнтересов.Видимость			= Ложь;
	
	//ЭлементТаблица = Форма.Элементы.Добавить("CRM_ТаблицаИнтересов", Тип("ТаблицаФормы"), Форма.Элементы[ИмяЭлементаДляРазмещения]);
	ЭлементТаблица = Форма.Элементы.Добавить("CRM_ТаблицаИнтересов", Тип("ТаблицаФормы"), ГруппаТаблицыИнтересов);
	ЭлементТаблица.ПутьКДанным			= "CRM_ТаблицаИнтересов";
	ЭлементТаблица.РежимВыделения		= РежимВыделенияТаблицы.Одиночный;
	ЭлементТаблица.РежимВыделенияСтроки	= РежимВыделенияСтрокиТаблицы.Строка;
	ЭлементТаблица.Шапка				= Ложь;
	ЭлементТаблица.Высота				= 4;
	ЭлементТаблица.РастягиватьПоВертикали = Ложь;
	ЭлементТаблица.КоманднаяПанель.Видимость = Ложь;
	ЭлементТаблица.КоманднаяПанель.Доступность = Ложь;
	
	ЭлементТаблица.УстановитьДействие("Выбор"					, "Подключаемый_CRM_ТаблицаИнтересовВыбор");
	ЭлементТаблица.УстановитьДействие("ПередНачаломДобавления"	, "Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления");
	ЭлементТаблица.УстановитьДействие("ОбработкаВыбора"			, "Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора");
	ЭлементТаблица.УстановитьДействие("ПередУдалением"			, "Подключаемый_CRM_ТаблицаИнтересовПередУдалением");
	ЭлементТаблица.УстановитьДействие("ПослеУдаления"			, "Подключаемый_CRM_ТаблицаИнтересовПослеУдаления");
	
	// команда основной
	НоваяКомандаФормы = Форма.Команды.Добавить("Основной");
	НоваяКомандаФормы.Заголовок 	= "Основной";
	НоваяКомандаФормы.Подсказка 	= "Установить интерес основным";
	НоваяКомандаФормы.Действие 		= "Подключаемый_Основной";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	НоваяКнопка = Форма.Элементы.Добавить("Основной", Тип("КнопкаФормы"), ЭлементТаблица.КонтекстноеМеню);
	НоваяКнопка.ИмяКоманды = "Основной";
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовДата", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Дата";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовНомер", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Номер";
	Элемент.ТолькоПросмотр = Истина;
	Элемент.Видимость 	= Ложь;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовТема", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Тема";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовКлиент", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Партнер";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовОтветственный", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Ответственный";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовОргЕдиница", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Подразделение";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовЮрЛицо", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Организация";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовСсылка", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Ссылка";
	Элемент.Видимость 	= Ложь;
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовВведенНаОсновании", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.ВведенНаОсновании";
	Элемент.Видимость 	= Ложь;
	Элемент.ТолькоПросмотр = Истина;
	
	// Добавим условное оформление таблицы интересов.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.CRM_ТаблицаИнтересов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("CRM_ТаблицаИнтересов.ВведенНаОсновании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.CRM_НедоступныеДанныеЦвет);
	
	
	// Входящее письмо
	Если ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
			Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Форма.Клиент	= Объект.ОтправительКонтакт;
			КонецЕсли;
			
			Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Форма.Клиент	= Объект.ОтправительКонтакт.Владелец;
				Форма.Контакт	= Объект.ОтправительКонтакт;
			КонецЕсли;
		КонецЕсли;
	// Исходящее письмо
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		Если ЗначениеЗаполнено(Форма._Партнер) Тогда
			Если ТипЗнч(Форма._Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
				Форма.Клиент	= Форма._Партнер;
			КонецЕсли;
			
			Если ТипЗнч(Форма._Партнер) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Форма.Клиент	= Форма._Партнер.Владелец;
				Форма.Контакт	= Форма._Партнер;
			КонецЕсли;
		КонецЕсли;
	//Иначе
	//	
	//	Форма.Клиент	= Объект.Партнер;
	//	Форма.Контакт	= Объект.КонтактноеЛицо;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет надпись в строке интереса.
//
// Параметры:
//	Форма						- упр форма, на которой размещается группа создаваемых реквизитов.
//	Объект						- ДокументСсылка
// 
// Возвращаемое значение
// 	нет
Процедура ЗаполнитьНадписьВСтрокеИнтереса(Форма, Объект) Экспорт
		
	Элемент	= Форма.Элементы.Найти("CRM_ИнтересСтрокой");
	
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Задание") ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЭтоЗадача = Истина;
	Иначе
		ЭтоЗадача = Ложь;		
	КонецЕсли;		
	
	Если ЭтоЗадача Тогда
		Элемент.Подсказка	   = НСтр("ru = 'Доступны несколько актуальных интересов. Выберите один из них.'");
		Элемент.ПодсказкаВвода = НСтр("ru = 'Доступны несколько актуальных интересов. Выберите один из них...'");
	Иначе
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.CRM_Мероприятие")
			ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СообщениеSMS") Тогда
			КоличествоИнтересов = ПолучитьКоличествоИнтересовПоСпискуКлиентов(Форма.КлиентСписок);
		Иначе
		//START Кайдашов 09/07/19 433	
			Если Форма.Элементы.Найти("Клиент") = Неопределено тогда
			//Если НЕ ЗначениеЗаполнено(Форма.Клиент) Тогда
				МетаданныеДокумента = Объект.Ссылка.Метаданные();
				Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента) Тогда 
					КоличествоИнтересов = ПолучитьКоличествоИнтересовПоКлиентуКонтакту(Объект.Партнер);
				КонецЕсли;							
			Иначе				
				КоличествоИнтересов = ПолучитьКоличествоИнтересовПоКлиентуКонтакту(Форма.Клиент);
			КонецЕсли;
		//END Кайдашов
		КонецЕсли;			
		Если КоличествоИнтересов = 0 ИЛИ КоличествоИнтересов = Неопределено Тогда
			Элемент.Подсказка	   = НСтр("ru = 'По клиенту нет активных интересов. Создайте новый интерес...'");
			Элемент.ПодсказкаВвода = НСтр("ru = 'По клиенту нет активных интересов. Создайте новый интерес...'");
		ИначеЕсли КоличествоИнтересов = 1 Тогда
			Элемент.Подсказка	   = НСтр("ru = 'По клиенту есть активный интерес. Выберите его из списка или создайте новый интерес...'");
			Элемент.ПодсказкаВвода = НСтр("ru = 'По клиенту есть активный интерес. Выберите его из списка или создайте новый интерес...'");
		Иначе
			Элемент.Подсказка	   = НСтр("ru = 'По клиенту есть несколько активных интересов. Выберите один из них.'");
			Элемент.ПодсказкаВвода = НСтр("ru = 'По клиенту есть несколько активных интересов. Выберите один из них...'");		
		КонецЕсли; 

	КонецЕсли;
		
КонецПроцедуры

//
//
Процедура ЗаполнитьГруппуИнтересаВФормеБизнесПроцессаЗадачи(Объект, Форма, ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено, ЭтоНовый = Ложь)
	
	ИмяРеквизитаОснования	= ВернутьИмяРеквизитаОснования(ТипОбъекта);
	СсылкаНаОснование		= Неопределено;
	
	Если НЕ ИмяРеквизитаОснования = Неопределено И ЗначениеЗаполнено(Объект[ИмяРеквизитаОснования]) Тогда
		СсылкаНаОснование	= Объект[ИмяРеквизитаОснования];
	КонецЕсли;
	
	
	Если ПриСозданииФормыНаСервере И ЭтоНовый Тогда
		ЕстьИнтересы = Ложь;
		
		Если НЕ СсылкаНаОснование = Неопределено Тогда
			Если ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				Форма.ЕстьИнтересыДляВыбора	= Истина;
				Форма.CRM_ИнтересСтрокой		= СформироватьПредставлениеИнтересаСтрокой(СсылкаНаОснование);
				
				Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Истина;
				
				НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СсылкаНаОснование);
				НоваяСтрока.ВведенНаОсновании = Истина;
				
				//Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Ложь;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Истина;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	= Ложь;
				
				ЕстьИнтересы = Истина;
			ИначеЕсли ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Взаимодействие")
			И ЗначениеЗаполнено(СсылкаНаОснование.ДокументОснование) Тогда
				
				Форма.ЕстьИнтересыДляВыбора	= Истина;
				Форма.CRM_ИнтересСтрокой		= СформироватьПредставлениеИнтересаСтрокой(СсылкаНаОснование.ДокументОснование);
				
				Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Истина;
				
				НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СсылкаНаОснование.ДокументОснование);
				НоваяСтрока.ВведенНаОсновании = Истина;
				
				//Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Ложь;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Истина;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	= Ложь;
				
				ЕстьИнтересы = Истина;
			Иначе
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Объект",СсылкаНаОснование);
				Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗЛИЧНЫЕ
				|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
				|	CRM_ЖурналДокументов.СостояниеИнтереса,
				|	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
				|	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании
				|ИЗ
				|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
				|ГДЕ
				|	CRM_ЖурналДокументов.Объект = &Объект
				|	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ОсновнойИнтерес УБЫВ";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
					НоваяСтрока.ВведенНаОсновании	= Выборка.ВведенНаОсновании;
					НоваяСтрока.ОсновнойИнтерес		= Выборка.ОсновнойИнтерес;
					ЕстьИнтересы = Истина;
				КонецЦикла;
				
				Если (Форма.CRM_ТаблицаИнтересов.Количество() > 0) Тогда
					Форма.ЕстьИнтересыДляВыбора	= Истина;
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
					
					Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ ЕстьИнтересы Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("СостояниеИнтереса"	,Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	НЕ CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса
			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Запрос.Текст = ТекстЗапроса;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ЕстьИнтересы = Истина;
				Форма.ЕстьИнтересыДляВыбора = Истина;
			КонецЕсли;
		КонецЕсли;
		// Если интересов никаких не нашли, то поле с основным интересом оставляем пустым, 
		// при этом таблица интересов тоже будет пустой.
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	// Работа с таблицей интересов.
	Если ПриСозданииФормыНаСервере И НЕ ЭтоНовый Тогда
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из регистра "CRM_ЖурналДокументов" и рекизита "CRM_Интерес".
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект"		, Объект.Ссылка);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
		|	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
		|	CRM_ЖурналДокументов.ОсновнойИнтерес
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|ГДЕ
		|	CRM_ЖурналДокументов.Объект = &Объект
		|	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОсновнойИнтерес УБЫВ";
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьИнтересы = Ложь;

		Пока Выборка.Следующий() Цикл

			НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
			НоваяСтрока.ВведенНаОсновании	= Выборка.ВведенНаОсновании;
			НоваяСтрока.ОсновнойИнтерес		= Выборка.ОсновнойИнтерес;
			ЕстьИнтересы = Истина;
		КонецЦикла;
		
		Если (Форма.CRM_ТаблицаИнтересов.Количество() > 0) Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
			
			Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
		КонецЕсли;
		
		// Если документ никак не связан с интересами, то подставим
		// доступный интерес, также как и в случае с новым документом.
		Если НЕ ЕстьИнтересы Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("СостояниеИнтереса"	,Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	НЕ CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса
			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Запрос.Текст = ТекстЗапроса;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда

				Форма.ЕстьИнтересыДляВыбора = Истина;
				ЕстьИнтересы				= Истина;
				
				Если Выборка.количество() = 1 Тогда
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		// Если интересов никаких не нашли, то поле с основным интересом оставляем пустым, 
		// при этом таблица интересов тоже будет пустой.
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаМероприятиеИлиСМССообщение(Объект, Форма, ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено, ЭтоНовый = Ложь)
	
	Если ИзмененКлиентКонтакт Тогда
		
		// Мероприятие
		Если ТипОбъекта = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			Форма.КлиентСписок.Очистить();
			
			Для Каждого СтрокаТЧ Из Объект.СторонниеЛица Цикл
				Форма.КлиентСписок.Добавить(СтрокаТЧ.Партнер);
			КонецЦикла;
		КонецЕсли;
		
		// Документ СМС
		Если ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS") Тогда
			Форма.КлиентСписок.Очистить();
			
			Для Каждого СтрокаТЧ Из Объект.Адресаты Цикл
				Если ТипЗнч(СтрокаТЧ.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.КлиентСписок.Добавить(СтрокаТЧ.Контакт);
				ИначеЕсли ТипЗнч(СтрокаТЧ.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.КлиентСписок.Добавить(СтрокаТЧ.Контакт.Владелец);
				КонецЕсли;					
			КонецЦикла;
		КонецЕсли;		
		
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере Тогда
		
		// Мероприятие
		Если ТипОбъекта = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			Форма.КлиентСписок.Очистить();
			
			Для Каждого СтрокаТЧ Из Объект.СторонниеЛица Цикл
				Форма.КлиентСписок.Добавить(СтрокаТЧ.Партнер);
			КонецЦикла;
		КонецЕсли;
		
		// Документ СМС
		Если ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS") Тогда
			Форма.КлиентСписок.Очистить();
			
			Для Каждого СтрокаТЧ Из Объект.Адресаты Цикл
				Если ТипЗнч(СтрокаТЧ.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.КлиентСписок.Добавить(СтрокаТЧ.Контакт);
				ИначеЕсли ТипЗнч(СтрокаТЧ.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.КлиентСписок.Добавить(СтрокаТЧ.Контакт.Владелец);
				КонецЕсли;					
			КонецЦикла;
		КонецЕсли;				
		
	КонецЕсли;
	
	ИмяРеквизитаОснования	= ВернутьИмяРеквизитаОснования(ТипОбъекта);
	СсылкаНаОснование		= Неопределено;
	
	Если НЕ ИмяРеквизитаОснования = Неопределено И ЗначениеЗаполнено(Объект[ИмяРеквизитаОснования]) Тогда
		СсылкаНаОснование	= Объект[ИмяРеквизитаОснования];
	КонецЕсли;
	
	
	Если ПриСозданииФормыНаСервере И ЭтоНовый Тогда

		ЕстьИнтересы = Ложь;
		
		Если НЕ СсылкаНаОснование = Неопределено Тогда
			Если ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				Форма.ЕстьИнтересыДляВыбора	= Истина;
				Форма.CRM_ИнтересСтрокой		= СформироватьПредставлениеИнтересаСтрокой(СсылкаНаОснование);
				
				Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Истина;
				
				НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СсылкаНаОснование);
				НоваяСтрока.ВведенНаОсновании = Истина;
				
				//Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Ложь;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Истина;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	= Ложь;
				
				ЕстьИнтересы = Истина;
			ИначеЕсли ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Взаимодействие")
			И ЗначениеЗаполнено(СсылкаНаОснование.ДокументОснование) Тогда
				
				Форма.ЕстьИнтересыДляВыбора	= Истина;
				Форма.CRM_ИнтересСтрокой		= СформироватьПредставлениеИнтересаСтрокой(СсылкаНаОснование.ДокументОснование);
				
				Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Истина;
				
				НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СсылкаНаОснование.ДокументОснование);
				НоваяСтрока.ВведенНаОсновании = Истина;
				
				//Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Ложь;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Истина;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	= Ложь;
				
				ЕстьИнтересы = Истина;
			Иначе
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Объект",СсылкаНаОснование);
				Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗЛИЧНЫЕ
				|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
				|	CRM_ЖурналДокументов.СостояниеИнтереса,
				|	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
				|	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании
				|ИЗ
				|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
				|ГДЕ
				|	CRM_ЖурналДокументов.Объект = &Объект
				|	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ОсновнойИнтерес УБЫВ";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					МассивСтрок = Форма.CRM_ТаблицаИнтересов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
					Если МассивСтрок.Количество() = 0 Тогда
						НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
						НоваяСтрока.ВведенНаОсновании	= Выборка.ВведенНаОсновании;
						НоваяСтрока.ОсновнойИнтерес		= Выборка.ОсновнойИнтерес;
						ЕстьИнтересы = Истина;
					КонецЕсли;						
				КонецЦикла;
				
				Если (Форма.CRM_ТаблицаИнтересов.Количество() > 0) Тогда
					Форма.ЕстьИнтересыДляВыбора	= Истина;
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
					
					Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ ЕстьИнтересы И Форма.КлиентСписок.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				,Форма.КлиентСписок);
			Запрос.УстановитьПараметр("СостояниеИнтереса"	,Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер В (&Партнер)
			|	И НЕ CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса

			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Запрос.Текст = ТекстЗапроса;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда

				Форма.ЕстьИнтересыДляВыбора = Истина;
				
				Если Выборка.Количество() = 1 Тогда
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если интересов никаких не нашли, то поле с основным интересом оставляем пустым, 
		// при этом таблица интересов тоже будет пустой.
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	// Работа с таблицей интересов.
	Если ПриСозданииФормыНаСервере И НЕ ЭтоНовый Тогда
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из регистра "CRM_ЖурналДокументов" и рекизита "CRM_Интерес".
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект"		, Объект.Ссылка);

		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
		|	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
		|	CRM_ЖурналДокументов.ОсновнойИнтерес
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|ГДЕ
		|	CRM_ЖурналДокументов.Объект = &Объект
		|	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОсновнойИнтерес УБЫВ";

		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьИнтересы = Ложь;

		Пока Выборка.Следующий() Цикл

			НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
			НоваяСтрока.ВведенНаОсновании	= Выборка.ВведенНаОсновании;
			НоваяСтрока.ОсновнойИнтерес		= Выборка.ОсновнойИнтерес;
			ЕстьИнтересы = Истина;
		КонецЦикла;
		
		Если (Форма.CRM_ТаблицаИнтересов.Количество() > 0) Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
			
			Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
		КонецЕсли;
		
		// Если документ никак не связан с интересами, то подставим
		// доступный интерес, также как и в случае с новым документом.
		Если НЕ ЕстьИнтересы Тогда
			Если Форма.КлиентСписок.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер"				,Форма.КлиентСписок);
				Запрос.УстановитьПараметр("СостояниеИнтереса"	,Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
				
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	CRM_Интерес.Ссылка
				|ИЗ
				|	Документ.CRM_Интерес КАК CRM_Интерес
				|ГДЕ
				|	CRM_Интерес.Партнер В (&Партнер)
				|	И НЕ CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса

				|	И НЕ CRM_Интерес.ПометкаУдаления";
				
				Запрос.Текст = ТекстЗапроса;
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					Форма.ЕстьИнтересыДляВыбора = Истина;
					
					Если Выборка.Количество() = 1 Тогда
						Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
						НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если интересов никаких не нашли, то поле с основным интересом оставляем пустым, 
		// при этом таблица интересов тоже будет пустой.
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;			
	КонецЕсли;
	
	Если ИзмененКлиентКонтакт Тогда
		ЕстьИнтересы = Ложь;
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из таблицы значений CRM_ТаблицаИнтересов, т.к. документ может быть еще не записан
		// если связан, то не важно уже есть ли вообще клиенты.
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			ЕстьИнтересы				= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы И Форма.КлиентСписок.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				,Форма.КлиентСписок);
			Запрос.УстановитьПараметр("СостояниеИнтереса"	,Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер В (&Партнер)
			|	И НЕ CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса
			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Запрос.Текст = ТекстЗапроса;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Форма.ЕстьИнтересыДляВыбора = Истина;
				ЕстьИнтересы				= Истина;
				
				Если Выборка.количество() = 1 Тогда
					Если Форма.CRM_ТаблицаИнтересов.Количество() = 0 Тогда
						Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
						НоваяСтрока					= Форма.CRM_ТаблицаИнтересов.Вставить(0);
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
					Иначе
						МассивСтрок = Форма.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
						Если МассивСтрок.Количество() = 0 Тогда
							НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
							ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
						Иначе
							Форма.CRM_ТаблицаИнтересов.Сдвинуть(Форма.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-Форма.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
						КонецЕсли;
						
						Форма.CRM_ИнтересСтрокой = СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если интересов никаких не нашли, то поле с основным интересом оставляем пустым, 
		// при этом таблица интересов тоже будет пустой.
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;				
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаТелефонныйЗвонок(Объект, Форма, ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено, ЭтоНовый = Ложь)
	
	Если ИзмененКлиентКонтакт Тогда
		
		// Телефонный звонок
		Если ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			Форма.Клиент	= Справочники.Партнеры.ПустаяСсылка();
			Форма.Контакт	= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
				Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.Клиент	= Объект.АбонентКонтакт;
				ИначеЕсли ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.Клиент	= Объект.АбонентКонтакт.Владелец;
					Форма.Контакт	= Объект.АбонентКонтакт;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере Тогда
		
		// Телефонный звонок
		Если ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			Форма.Клиент	= Справочники.Партнеры.ПустаяСсылка();
			Форма.Контакт	= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
				Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.Клиент	= Объект.АбонентКонтакт;
				ИначеЕсли ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.Клиент	= Объект.АбонентКонтакт.Владелец;
					Форма.Контакт	= Объект.АбонентКонтакт;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	

	Если ПриСозданииФормыНаСервере И (ЭтоНовый ИЛИ ИзмененКлиентКонтакт) Тогда

		
		// Если документ введен на основании Интереса или другого документа, у которого
		// заполнен реквизит CRM_Интерес, то и у текущего документа CRM_Интерес тоже заполнен.
		// Выводим информацмю об этом интересе в поле ввода CRM_ИнтересСтрокой, но запрещаем
		// очистку и выбор в данном поле, так как этот интерес "сквозной", им прошита цепочка документов
		// и не надо терять эту связь. Дополнительные интересы будем добавлять в таблицу интересов.
		
		ЕстьИнтересы = Ложь;
		
		Если ИзмененКлиентКонтакт Тогда
			// В начале проверим, не связан ли документ с интересами
			// данные берем из таблицы значений CRM_ТаблицаИнтересов, т.к. документ может быть еще не записан
			// если связан, то не важно уже есть ли вообще клиенты.
			Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
				Форма.ЕстьИнтересыДляВыбора	= Истина;
				ЕстьИнтересы				= Истина;
				Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы И ЗначениеЗаполнено(Форма.Клиент) Тогда
			
			ПарамПартнер = Форма.Клиент;
			ПарамКонтакт = Форма.Контакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер",		ПарамПартнер);
			Запрос.УстановитьПараметр("КонтактноеЛицо",	ПарамКонтакт);
		
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер = &Партнер
			|	И НЕ CRM_Интерес.Завершен";
			Если ЗначениеЗаполнено(Форма.Контакт) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				Форма.ЕстьИнтересыДляВыбора = Истина;
				
				Если Выборка.Количество() = 1 Тогда
					Если Форма.CRM_ТаблицаИнтересов.Количество() = 0 Тогда
						Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
						НоваяСтрока					= Форма.CRM_ТаблицаИнтересов.Вставить(0);
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
					Иначе
						МассивСтрок = Форма.CRM_ТаблицаИнтересов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
						Если МассивСтрок.Количество() = 0 Тогда
							НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Ссылка);
						Иначе
							Форма.CRM_ТаблицаИнтересов.Сдвинуть(Форма.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]), - Форма.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
						КонецЕсли;
						Форма.CRM_ИнтересСтрокой = СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли  ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") И НЕ ЕстьИнтересы Тогда
        	// Подставим значение интереса из основания.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект",			Объект.ВзаимодействиеОснование);
			
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка
			|ИЗ
			|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
			|ГДЕ
			|	CRM_ЖурналДокументов.Объект = &Объект
			|	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)";

			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЕстьИнтересы = Ложь;
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Ссылка);
				ЕстьИнтересы = Истина;
			КонецЦикла;
			Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
				Форма.ЕстьИнтересыДляВыбора	= Истина;
				Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	// Работа с таблицей интересов.
	Если ПриСозданииФормыНаСервере И НЕ ЭтоНовый Тогда
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из регистра "CRM_ЖурналДокументов" и рекизита "CRM_Интерес".
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",			Объект.Ссылка);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|ГДЕ
		|	CRM_ЖурналДокументов.Объект = &Объект
		|	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)";
		
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьИнтересы = Ложь;

		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Ссылка);
			
			ЕстьИнтересы = Истина;
		КонецЦикла;
		
		
		Если (Форма.CRM_ТаблицаИнтересов.Количество() > 0) Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
		КонецЕсли;
		
		// Если документ никак не связан с интересами, то подставим
		// доступный интерес, также как и в случае с новым документом.
		Если НЕ ЕстьИнтересы Тогда
			Если ЗначениеЗаполнено(Форма.Клиент) Тогда
				ПарамПартнер = Форма.Клиент;
				ПарамКонтакт = Форма.Контакт;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер",		ПарамПартнер);
				Запрос.УстановитьПараметр("КонтактноеЛицо",	ПарамКонтакт);
			
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	CRM_Интерес.Ссылка
				|ИЗ
				|	Документ.CRM_Интерес КАК CRM_Интерес
				|ГДЕ
				|	CRM_Интерес.Партнер = &Партнер
				|	И НЕ CRM_Интерес.Завершен";
				Если ЗначениеЗаполнено(Форма.Контакт) Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо";
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + "
				|	И НЕ CRM_Интерес.ПометкаУдаления";
				
				Запрос.Текст = ТекстЗапроса;
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					Форма.ЕстьИнтересыДляВыбора = Истина;
					
					Если Выборка.Количество() = 1 Тогда
						Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
						НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура ЗаполнитьГруппуИнтересаВФормеПрочихДокументов(Объект, Форма, ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено, ЭтоНовый = Ложь, СсылкаНаОснование=Неопределено)
	
	Если ИзмененКлиентКонтакт Тогда
		
		// Входящее письмо
		Если ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Форма.Клиент  = Справочники.Партнеры.ПустаяСсылка();
			Форма.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
				Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.Клиент = Объект.ОтправительКонтакт;
				КонецЕсли;
				
				Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.Клиент  = Объект.ОтправительКонтакт.Владелец;
					Форма.Контакт = Объект.ОтправительКонтакт;
				КонецЕсли;
				
			КонецЕсли;
			Форма.CRM_ТаблицаИнтересов.Очистить();
			Форма.CRM_ИнтересСтрокой	= "";
		КонецЕсли;
		
		// Исходящее письмо
		Если ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			Форма.Клиент  = Справочники.Партнеры.ПустаяСсылка();
			Форма.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(Форма._Партнер) Тогда
				Если ТипЗнч(Форма._Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.Клиент = Форма._Партнер;
				КонецЕсли;
				
				Если ТипЗнч(Форма._Партнер) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.Клиент  = Форма._Партнер.Владелец;
					Форма.Контакт = Форма._Партнер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Телефонный звонок
		Если ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			Форма.Клиент  = Справочники.Партнеры.ПустаяСсылка();
			Форма.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(Форма.CRM_Партнер) Тогда
				Если ТипЗнч(Форма.CRM_Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.Клиент = Форма.CRM_Партнер;
				КонецЕсли;
				
				Если ТипЗнч(Форма.CRM_Партнер) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.Клиент  = Форма.CRM_Партнер.Владелец;
					Форма.Контакт = Форма.CRM_Партнер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Коммерческое предложение
		Если ТипОбъекта = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") или (CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ТипОбъекта = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю")) Тогда
			Если Форма.Клиент  <> Объект.Партнер Тогда
				Форма.Клиент  = Объект.Партнер;
				Форма.CRM_ТаблицаИнтересов.Очистить();
				Форма.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
				Форма.CRM_ИнтересСтрокой	= "";
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере Тогда
		
		// Входящее письмо
		Если ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Форма.Клиент  = Справочники.Партнеры.ПустаяСсылка();
			Форма.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
				Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.Клиент = Объект.ОтправительКонтакт;
				КонецЕсли;
				
				Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.Клиент  = Объект.ОтправительКонтакт.Владелец;
					Форма.Контакт = Объект.ОтправительКонтакт;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		// Исходящее письмо
		Если ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			Форма.Клиент  = Справочники.Партнеры.ПустаяСсылка();
			Форма.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(Форма._Партнер) Тогда
				Если ТипЗнч(Форма._Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.Клиент = Форма._Партнер;
				КонецЕсли;
				
				Если ТипЗнч(Форма._Партнер) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.Клиент  = Форма._Партнер.Владелец;
					Форма.Контакт = Форма._Партнер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Телефонный звонок
		Если ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			Форма.Клиент  = Справочники.Партнеры.ПустаяСсылка();
			Форма.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(Форма.CRM_Партнер) Тогда
				Если ТипЗнч(Форма.CRM_Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма.Клиент = Форма.CRM_Партнер;
				КонецЕсли;
				
				Если ТипЗнч(Форма.CRM_Партнер) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма.Клиент  = Форма.CRM_Партнер.Владелец;
					Форма.Контакт = Форма.CRM_Партнер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Счет на оплату
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю")
			 И ТипОбъекта = Тип("ДокументСсылка." + "CRM_СчетНаОплатуПокупателю") Тогда
			Форма.Клиент  = Объект.Партнер;
			Форма.Контакт = Объект.КонтактноеЛицо;
		КонецЕсли;
		
		// Коммерческое предложение
		Если ТипОбъекта = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			Форма.Клиент  = Объект.Партнер;
			Форма.Контакт = Объект.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если  НЕ ЗначениеЗаполнено(СсылкаНаОснование) Тогда
		ИмяРеквизитаОснования	= ВернутьИмяРеквизитаОснования(ТипОбъекта);
		Если НЕ ИмяРеквизитаОснования = Неопределено И ЗначениеЗаполнено(Объект[ИмяРеквизитаОснования]) Тогда
			СсылкаНаОснование	= Объект[ИмяРеквизитаОснования];
		КонецЕсли;
	КонецЕсли;
		
	Если ПриСозданииФормыНаСервере И ЭтоНовый Тогда
		ЕстьИнтересы = Ложь;
		
		Если НЕ СсылкаНаОснование = Неопределено Тогда
			Если ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				Форма.ЕстьИнтересыДляВыбора	= Истина;
				Форма.CRM_ИнтересСтрокой		= СформироватьПредставлениеИнтересаСтрокой(СсылкаНаОснование);
				
				Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Истина;
				
				НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СсылкаНаОснование);
				НоваяСтрока.ВведенНаОсновании = Истина;
				
				//Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Ложь;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Истина;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	= Ложь;
				
				ЕстьИнтересы = Истина;
			ИначеЕсли ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Взаимодействие")
			И ЗначениеЗаполнено(СсылкаНаОснование.ДокументОснование) Тогда
				
				Форма.ЕстьИнтересыДляВыбора	= Истина;
				Форма.CRM_ИнтересСтрокой		= СформироватьПредставлениеИнтересаСтрокой(СсылкаНаОснование.ДокументОснование);
				
				Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Истина;
				
				НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СсылкаНаОснование.ДокументОснование);
				НоваяСтрока.ВведенНаОсновании = Истина;
				
				//Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Ложь;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Истина;
				Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	= Ложь;
				
				ЕстьИнтересы = Истина;
			Иначе
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Объект",СсылкаНаОснование);
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
					|	CRM_ЖурналДокументов.СостояниеИнтереса,
					|	CRM_ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
					|	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании
					|ИЗ
					|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
					|ГДЕ
					|	CRM_ЖурналДокументов.Объект = &Объект
					|	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
					|	И CRM_ЖурналДокументов.ГлавнаяЗапись
					|
					|УПОРЯДОЧИТЬ ПО
					|	ОсновнойИнтерес УБЫВ";
					
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
					НоваяСтрока.ВведенНаОсновании	= Выборка.ВведенНаОсновании;
					НоваяСтрока.ОсновнойИнтерес		= Выборка.ОсновнойИнтерес;
					ЕстьИнтересы = Истина;
				КонецЦикла;
				
				Если (Форма.CRM_ТаблицаИнтересов.Количество() > 0) Тогда
					Форма.ЕстьИнтересыДляВыбора	= Истина;
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
					
					Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
					Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	 = Не Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ ЕстьИнтересы Тогда
			
			Если ЗначениеЗаполнено(Форма.Клиент) Тогда
				ПарамПартнер = Форма.Клиент;
				ПарамКонтакт = Форма.Контакт;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер"				,ПарамПартнер);
				Запрос.УстановитьПараметр("КонтактноеЛицо"		,ПарамКонтакт);
				Запрос.УстановитьПараметр("СостояниеИнтереса"	,Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
				
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	CRM_Интерес.Ссылка
				|ИЗ
				|	Документ.CRM_Интерес КАК CRM_Интерес
				|ГДЕ
				|	CRM_Интерес.Партнер = &Партнер
				|	И НЕ CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса";
				Если ЗначениеЗаполнено(Форма.Контакт) Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо";
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + "
				|	И НЕ CRM_Интерес.ПометкаУдаления";
				
				Запрос.Текст = ТекстЗапроса;
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					Форма.ЕстьИнтересыДляВыбора = Истина;
					
					Если Выборка.Количество() = 1 Тогда
						Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
						НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если интересов никаких не нашли, то поле с основным интересом оставляем пустым, 
		// при этом таблица интересов тоже будет пустой.
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;				
	КонецЕсли;
	
	// Работа с таблицей интересов.
	Если ПриСозданииФормыНаСервере И НЕ ЭтоНовый Тогда
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из регистра "CRM_ЖурналДокументов" и рекизита "CRM_Интерес".
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект"		, Объект.Ссылка);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
		|	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
		|	CRM_ЖурналДокументов.ОсновнойИнтерес
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|ГДЕ
		|	CRM_ЖурналДокументов.Объект = &Объект
		|	И НЕ CRM_ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
		|	И CRM_ЖурналДокументов.ГлавнаяЗапись";
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОсновнойИнтерес УБЫВ";
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьИнтересы = Ложь;
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
				НоваяСтрока.ВведенНаОсновании	= Выборка.ВведенНаОсновании;
				НоваяСтрока.ОсновнойИнтерес		= Выборка.ОсновнойИнтерес;
				ЕстьИнтересы = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если (Форма.CRM_ТаблицаИнтересов.Количество() > 0) Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			ТекСтрокаИнтерес = Форма.CRM_ТаблицаИнтересов[0];
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(ТекСтрокаИнтерес.Ссылка);
			Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	= Ложь;
			Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
		КонецЕсли;
		
		// Если документ никак не связан с интересами, то подставим
		// доступный интерес, также как и в случае с новым документом.
		Если НЕ ЕстьИнтересы Тогда
			Если ЗначениеЗаполнено(Форма.Клиент) Тогда
				ПарамПартнер = Форма.Клиент;
				ПарамКонтакт = Форма.Контакт;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Партнер"				,ПарамПартнер);
				Запрос.УстановитьПараметр("КонтактноеЛицо"		,ПарамКонтакт);
				Запрос.УстановитьПараметр("СостояниеИнтереса"	,Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
				
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	CRM_Интерес.Ссылка
				|ИЗ
				|	Документ.CRM_Интерес КАК CRM_Интерес
				|ГДЕ
				|	CRM_Интерес.Партнер = &Партнер
				|	И НЕ CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса";
				Если ЗначениеЗаполнено(Форма.Контакт) Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо";
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + "
				|	И НЕ CRM_Интерес.ПометкаУдаления";
				
				Запрос.Текст = ТекстЗапроса;
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					Форма.ЕстьИнтересыДляВыбора = Истина;
					
					Если Выборка.Количество() = 1 Тогда
						Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
						НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если интересов никаких не нашли, то поле с основным интересом оставляем пустым, 
		// при этом таблица интересов тоже будет пустой.
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;				
	КонецЕсли;
	
	Если ИзмененКлиентКонтакт Тогда
		ЕстьИнтересы = Ложь;
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из таблицы значений CRM_ТаблицаИнтересов, т.к. документ может быть еще не записан
		// если связан, то не важно уже есть ли вообще клиенты.
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			ЕстьИнтересы				= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы И ЗначениеЗаполнено(Форма.Клиент) Тогда
			
			ПарамПартнер = Форма.Клиент;
			ПарамКонтакт = Форма.Контакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				,ПарамПартнер);
			Запрос.УстановитьПараметр("КонтактноеЛицо"		,ПарамКонтакт);
			Запрос.УстановитьПараметр("СостояниеИнтереса"	,Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер = &Партнер
			|	И НЕ CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса";
			Если ЗначениеЗаполнено(Форма.Контакт) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Запрос.Текст = ТекстЗапроса;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Форма.ЕстьИнтересыДляВыбора = Истина;
				ЕстьИнтересы				= Истина;
				
				Если Выборка.количество() = 1 Тогда
					Если Форма.CRM_ТаблицаИнтересов.Количество() = 0 Тогда
						Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
						НоваяСтрока					= Форма.CRM_ТаблицаИнтересов.Вставить(0);
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
					Иначе
						МассивСтрок = Форма.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",Выборка.Ссылка));
						Если МассивСтрок.Количество() = 0 Тогда
							НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
							ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка.Ссылка);
						Иначе
							Форма.CRM_ТаблицаИнтересов.Сдвинуть(Форма.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-Форма.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
						КонецЕсли;
						
						Форма.CRM_ИнтересСтрокой = СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если интересов никаких не нашли, то поле с основным интересом оставляем пустым, 
		// при этом таблица интересов тоже будет пустой.
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура заполняет интерес в документе в зависимоети от выбранного клиента
// и контакта.
//
Процедура ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, Форма, ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено, ЭтоНовый = Ложь, СсылкаНаОснование = Неопределено) Экспорт
	
	Если ТипОбъекта = Тип("ДокументСсылка.CRM_Мероприятие") ИЛИ ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS") Тогда
		
		ЗаполнитьГруппуИнтересаВФормеДокументаМероприятиеИлиСМССообщение(Объект, Форма, ПриСозданииФормыНаСервере, ИзмененКлиентКонтакт, ТипОбъекта, ЭтоНовый);
		
	ИначеЕсли ТипОбъекта = Тип("БизнесПроцессСсылка.Задание") ИЛИ ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ЗаполнитьГруппуИнтересаВФормеБизнесПроцессаЗадачи(Объект, Форма, ПриСозданииФормыНаСервере, ИзмененКлиентКонтакт, ТипОбъекта, ЭтоНовый);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		ЗаполнитьГруппуИнтересаВФормеДокументаТелефонныйЗвонок(Объект, Форма, ПриСозданииФормыНаСервере, ИзмененКлиентКонтакт, ТипОбъекта, ЭтоНовый);
		
	Иначе
		
		ЗаполнитьГруппуИнтересаВФормеПрочихДокументов(Объект, Форма, ПриСозданииФормыНаСервере, ИзмененКлиентКонтакт, ТипОбъекта, ЭтоНовый, СсылкаНаОснование);
		
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура СвязатьВходящееПисьмоСИнтересом(Источник) Экспорт
	
	Если ЗначениеЗаполнено(Источник.ВзаимодействиеОснование) Тогда
		
		// Если он заполнен, то должны скопировать все интересы из него, как в случае с другими документами.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект"		, Источник.ВзаимодействиеОснование);
		Запрос.УстановитьПараметр("Интерес"		, Документы.CRM_Интерес.ПустаяСсылка());
		
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
		|	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись,
		|	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,";
		
		ТекстЗапроса = ТекстЗапроса + "
			|	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
			|	CRM_ЖурналДокументов.ОсновнойИнтерес Как ОсновнойИнтерес";
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|ГДЕ
		|	CRM_ЖурналДокументов.Объект = &Объект
		|	И CRM_ЖурналДокументов.CRM_Интерес <> &Интерес
		|	И НЕ CRM_ЖурналДокументов.CRM_Интерес.Завершен";
		
		Запрос.Текст	= ТекстЗапроса;
		ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
		
		Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
		
	ИначеЕсли (ЗначениеЗаполнено(Источник.ОтправительКонтакт) 
	И ТипЗнч(Источник.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"))
	И ЗначениеЗаполнено(Источник.Ответственный) Тогда
		
		ЕстьАктивныеИнтересы = Ложь;
		
		ПарамПартнер = Источник.ОтправительКонтакт.Владелец;
		ПарамКонтакт = Источник.ОтправительКонтакт;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер"				,ПарамПартнер);
		Запрос.УстановитьПараметр("КонтактноеЛицо"		,ПарамКонтакт);
		Запрос.УстановитьПараметр("Подразделение"		,Источник.Ответственный.Подразделение);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	CRM_Интерес.Ссылка,
		               |	CRM_Интерес.СостояниеИнтереса,
		               |	ЛОЖЬ КАК ВведенНаОсновании,
		               |	ЛОЖЬ КАК ОсновнойИнтерес
		               |ИЗ
		               |	Документ.CRM_Интерес КАК CRM_Интерес
		               |ГДЕ
		               |	CRM_Интерес.Партнер = &Партнер
		               |	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо
		               |	И НЕ CRM_Интерес.ПометкаУдаления
		               |	И НЕ CRM_Интерес.Завершен
		               |	И CRM_Интерес.Подразделение = &Подразделение";
		
		Запрос.Текст = ТекстЗапроса;
		ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСвязей.Количество() > 0 Тогда
			ЕстьАктивныеИнтересы = Истина;
			Если ТаблицаСвязей.Количество() = 1 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьАктивныеИнтересы Тогда
			ПарамПартнер = Источник.ОтправительКонтакт.Владелец;
			ПарамКонтакт = Источник.ОтправительКонтакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				,ПарамПартнер);
			Запрос.УстановитьПараметр("КонтактноеЛицо"		,ПарамКонтакт);
			Запрос.УстановитьПараметр("Подразделение"		,Источник.Ответственный.Подразделение);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	CRM_Интерес.Ссылка,
			|	CRM_Интерес.СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер = &Партнер
			|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо
			|	И НЕ CRM_Интерес.ПометкаУдаления
			|	И НЕ CRM_Интерес.Завершен
			|	И CRM_Интерес.Подразделение = &Подразделение
			|
			|УПОРЯДОЧИТЬ ПО
			|	CRM_Интерес.Дата УБЫВ";
			
			Запрос.Текст = ТекстЗапроса;
			
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
			КонецЕсли;
			
		КонецЕсли;
		
	// Если у нас не контакт, то надо проверить на потенциального клиента.
	ИначеЕсли (ЗначениеЗаполнено(Источник.ОтправительКонтакт) 
		И ТипЗнч(Источник.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"))
		И ЗначениеЗаполнено(Источник.Ответственный) Тогда
		
		ЕстьАктивныеИнтересы = Ложь;
		
		ПарамПотенциальныйКлиент = Источник.ОтправительКонтакт;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПотенциальныйКлиент" ,ПарамПотенциальныйКлиент);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка,
			|	CRM_Интерес.СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	НЕ CRM_Интерес.ПометкаУдаления
			|	И НЕ CRM_Интерес.Завершен
			|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент";
		
		Запрос.Текст = ТекстЗапроса;
		ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСвязей.Количество() > 0 Тогда
			ЕстьАктивныеИнтересы = Истина;
			Если ТаблицаСвязей.Количество() = 1 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьАктивныеИнтересы Тогда
			ПарамПотенциальныйКлиент = Источник.ОтправительКонтакт;

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПотенциальныйКлиент" ,ПарамПотенциальныйКлиент);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	CRM_Интерес.Ссылка,
				|	CRM_Интерес.СостояниеИнтереса,
				|	ЛОЖЬ КАК ВведенНаОсновании,
				|	ЛОЖЬ КАК ОсновнойИнтерес
				|ИЗ
				|	Документ.CRM_Интерес КАК CRM_Интерес
				|ГДЕ
				|	НЕ CRM_Интерес.ПометкаУдаления
				|	И НЕ CRM_Интерес.Завершен
				|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент
				|
				|УПОРЯДОЧИТЬ ПО
				|	CRM_Интерес.Дата УБЫВ";
			
			Запрос.Текст = ТекстЗапроса;
			
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("CRM_ТаблицаИнтересов") Тогда
		// Сделаем напоминалку менеджеру из интереса.
		Сч = 0;
		СсылкаНового = Неопределено;
		ТекОтветственный = Справочники.Пользователи.ПустаяСсылка();
		Для каждого ТекИнтерес Из  Источник.ДополнительныеСвойства.CRM_ТаблицаИнтересов Цикл
			
			ПараметрыНапоминания = Новый Структура;
			ПараметрыНапоминания.Вставить("Описание", "Получено новое письмо от клиента" + ?(ЗначениеЗаполнено(ТекИнтерес.Ссылка.Партнер), " " + ТекИнтерес.Ссылка.Партнер, "")+ "." );
			// Добавляем минуту плюс счетчик, чтобы время не совпадало
			ПараметрыНапоминания.Вставить("ВремяСобытия", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() + 60 + Сч);
			// источник напоминания письмо, а не интерес
			// нет у нас ссылки на письмо, будем утанавливать.
			Если СсылкаНового = Неопределено Тогда
				СсылкаНового = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку(Новый УникальныйИдентификатор);			
			КонецЕсли; 

			Источник.УстановитьСсылкуНового(СсылкаНового);
			ПараметрыНапоминания.Вставить("Источник", СсылкаНового);
			//ПараметрыНапоминания.Вставить("Источник", ТекИнтерес.Ссылка);
			
			Напоминание = НапоминанияПользователяКлиентСервер.ОписаниеНапоминания(ПараметрыНапоминания, Истина);
			
			Напоминание.Пользователь = ТекИнтерес.Ссылка.Ответственный;
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
			Напоминание.СрокНапоминания = Напоминание.ВремяСобытия;
			
			Если ТекОтветственный <> Напоминание.Пользователь Тогда
				НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Пользователь.Установить(Напоминание.Пользователь);
				НаборЗаписей.Отбор.Источник.Установить(Напоминание.Источник);
				НаборЗаписей.Отбор.ВремяСобытия.Установить(Напоминание.ВремяСобытия);
				
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 0 Тогда
					НоваяЗапись = НаборЗаписей.Добавить();
				Иначе
					НоваяЗапись = НаборЗаписей[0];
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Напоминание);
				
				НаборЗаписей.Записать();
			КонецЕсли;
			
			ТекОтветственный = Напоминание.Пользователь;
			Сч = Сч + 1;
			
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

//
//
Процедура СвязатьТелефонныйЗвонокСИнтересом(Источник) Экспорт
	
	Если ЗначениеЗаполнено(Источник.ВзаимодействиеОснование) Тогда
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект",		Источник.ВзаимодействиеОснование);
		Запрос.УстановитьПараметр("Интерес",	Документы.CRM_Интерес.ПустаяСсылка());
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_ЖурналДокументов.CRM_Интерес КАК Ссылка,
		|	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,";

		ТекстЗапроса = ТекстЗапроса + "
			|	CRM_ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании,
			|	CRM_ЖурналДокументов.ОсновнойИнтерес Как ОсновнойИнтерес";

		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|ГДЕ
		|	CRM_ЖурналДокументов.Объект = &Объект
		|	И CRM_ЖурналДокументов.CRM_Интерес <> &Интерес";
		
		Запрос.Текст	= ТекстЗапроса;
		ТаблицаСвязей	= Запрос.Выполнить().Выгрузить();
		
		Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
		
	ИначеЕсли (ЗначениеЗаполнено(Источник.АбонентКонтакт) 
		И ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"))
		И ЗначениеЗаполнено(Источник.Ответственный) Тогда
		
		ЕстьАктивныеИнтересы = Ложь;
		
		ПарамПартнер = Источник.АбонентКонтакт.Владелец;
		ПарамКонтакт = Источник.АбонентКонтакт;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер",		ПарамПартнер);
		Запрос.УстановитьПараметр("КонтактноеЛицо",	ПарамКонтакт);
		Запрос.УстановитьПараметр("Подразделение",	Источник.Ответственный.Подразделение);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	CRM_Интерес.Ссылка,
					   |	CRM_Интерес.СостояниеИнтереса,
		               |	ЛОЖЬ КАК ВведенНаОсновании,
					   |	ЛОЖЬ КАК ОсновнойИнтерес
		               |ИЗ
		               |	Документ.CRM_Интерес КАК CRM_Интерес
		               |ГДЕ
		               |	CRM_Интерес.Партнер = &Партнер
		               |	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо
		               |	И НЕ CRM_Интерес.ПометкаУдаления
					   |	И НЕ CRM_Интерес.Завершен
		               |	И CRM_Интерес.Подразделение = &Подразделение";
		
		Запрос.Текст = ТекстЗапроса;
		ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСвязей.Количество() > 0 Тогда
			ЕстьАктивныеИнтересы = Истина;
			Если ТаблицаСвязей.Количество() = 1 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьАктивныеИнтересы Тогда
			ПарамПартнер = Источник.АбонентКонтакт.Владелец;
			ПарамКонтакт = Источник.АбонентКонтакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер",		ПарамПартнер);
			Запрос.УстановитьПараметр("КонтактноеЛицо",	ПарамКонтакт);
			Запрос.УстановитьПараметр("Подразделение",	Источник.Ответственный.Подразделение);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	CRM_Интерес.Ссылка,
			|	CRM_Интерес.СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер = &Партнер
			|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо
			|	И НЕ CRM_Интерес.ПометкаУдаления
			|	И НЕ CRM_Интерес.Завершен
			|	И CRM_Интерес.Подразделение = &Подразделение
			|
			|УПОРЯДОЧИТЬ ПО
			|	CRM_Интерес.Дата УБЫВ";
			
			Запрос.Текст = ТекстЗапроса;
			
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
			КонецЕсли;
			
		КонецЕсли;
		
	// Если у нас не контакт, то надо проверить на потенциального клиента.
	ИначеЕсли (ЗначениеЗаполнено(Источник.АбонентКонтакт) 
		И ТипЗнч(Источник.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"))
		И ЗначениеЗаполнено(Источник.Ответственный) Тогда
		
		ЕстьАктивныеИнтересы = Ложь;
		ПарамПотенциальныйКлиент = Источник.АбонентКонтакт;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПотенциальныйКлиент",	ПарамПотенциальныйКлиент);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка,
			|	CRM_Интерес.СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	НЕ CRM_Интерес.ПометкаУдаления
			|	И НЕ CRM_Интерес.Завершен
			|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент";
		
		Запрос.Текст = ТекстЗапроса;
		ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСвязей.Количество() > 0 Тогда
			ЕстьАктивныеИнтересы = Истина;
			Если ТаблицаСвязей.Количество() = 1 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьАктивныеИнтересы Тогда
			ПарамПотенциальныйКлиент = Источник.АбонентКонтакт;

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПотенциальныйКлиент",	ПарамПотенциальныйКлиент);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	CRM_Интерес.Ссылка,
				|	CRM_Интерес.СостояниеИнтереса,
				|	ЛОЖЬ КАК ВведенНаОсновании,
				|	ЛОЖЬ КАК ОсновнойИнтерес
				|ИЗ
				|	Документ.CRM_Интерес КАК CRM_Интерес
				|ГДЕ
				|	НЕ CRM_Интерес.ПометкаУдаления
				|	И НЕ CRM_Интерес.Завершен
				|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент
				|
				|УПОРЯДОЧИТЬ ПО
				|	CRM_Интерес.Дата УБЫВ";
			
			Запрос.Текст = ТекстЗапроса;
			
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура СвязатьСообщениеМессенджераСИнтересом(Источник, ВсеИнтересы = Ложь) Экспорт
	
	Если (ЗначениеЗаполнено(Источник.Контакт) 
		И ТипЗнч(Источник.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"))
		И ЗначениеЗаполнено(Источник.Ответственный) Тогда
		
		ЕстьАктивныеИнтересы = Ложь;
		
		ПарамПартнер = Источник.Контакт.Владелец;
		ПарамКонтакт = Источник.Контакт;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер"				,ПарамПартнер);
		Запрос.УстановитьПараметр("КонтактноеЛицо"		,ПарамКонтакт);
		Запрос.УстановитьПараметр("Подразделение"		,Источник.Ответственный.Подразделение);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	CRM_Интерес.Ссылка,
		               |	CRM_Интерес.СостояниеИнтереса,
		               |	ЛОЖЬ КАК ВведенНаОсновании,
		               |	ЛОЖЬ КАК ОсновнойИнтерес
		               |ИЗ
		               |	Документ.CRM_Интерес КАК CRM_Интерес
		               |ГДЕ
		               |	CRM_Интерес.Партнер = &Партнер
		               |	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо
		               |	И НЕ CRM_Интерес.ПометкаУдаления
		               |	И НЕ CRM_Интерес.Завершен
		               |	И CRM_Интерес.Подразделение = &Подразделение";
		
		Запрос.Текст = ТекстЗапроса;
		ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСвязей.Количество() > 0 Тогда
			ЕстьАктивныеИнтересы = Истина;
			Если ВсеИнтересы ИЛИ ТаблицаСвязей.Количество() = 1 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьАктивныеИнтересы Тогда
			ПарамПартнер = Источник.Контакт.Владелец;
			ПарамКонтакт = Источник.Контакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				,ПарамПартнер);
			Запрос.УстановитьПараметр("КонтактноеЛицо"		,ПарамКонтакт);
			Запрос.УстановитьПараметр("Подразделение"		,Источник.Ответственный.Подразделение);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	CRM_Интерес.Ссылка,
			|	CRM_Интерес.СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер = &Партнер
			|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо
			|	И НЕ CRM_Интерес.ПометкаУдаления
			|	И НЕ CRM_Интерес.Завершен
			|	И CRM_Интерес.Подразделение = &Подразделение
			|
			|УПОРЯДОЧИТЬ ПО
			|	CRM_Интерес.Дата УБЫВ";
			
			Запрос.Текст = ТекстЗапроса;
			
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
			КонецЕсли;
			
		КонецЕсли;
		
	// Если у нас не контакт, то надо проверить на потенциального клиента.
	ИначеЕсли (ЗначениеЗаполнено(Источник.Контакт) 
		И ТипЗнч(Источник.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"))
		И ЗначениеЗаполнено(Источник.Ответственный) Тогда
		
		ЕстьАктивныеИнтересы = Ложь;
		
		ПарамПотенциальныйКлиент = Источник.Контакт;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПотенциальныйКлиент" ,ПарамПотенциальныйКлиент);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка,
			|	CRM_Интерес.СостояниеИнтереса,
			|	ЛОЖЬ КАК ВведенНаОсновании,
			|	ЛОЖЬ КАК ОсновнойИнтерес
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	НЕ CRM_Интерес.ПометкаУдаления
			|	И НЕ CRM_Интерес.Завершен
			|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент";
		
		Запрос.Текст = ТекстЗапроса;
		ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаСвязей.Количество() > 0 Тогда
			ЕстьАктивныеИнтересы = Истина;
			Если ВсеИнтересы ИЛИ ТаблицаСвязей.Количество() = 1 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьАктивныеИнтересы Тогда
			ПарамПотенциальныйКлиент = Источник.Контакт;

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПотенциальныйКлиент" ,ПарамПотенциальныйКлиент);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	CRM_Интерес.Ссылка,
				|	CRM_Интерес.СостояниеИнтереса,
				|	ЛОЖЬ КАК ВведенНаОсновании,
				|	ЛОЖЬ КАК ОсновнойИнтерес
				|ИЗ
				|	Документ.CRM_Интерес КАК CRM_Интерес
				|ГДЕ
				|	НЕ CRM_Интерес.ПометкаУдаления
				|	И НЕ CRM_Интерес.Завершен
				|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент
				|
				|УПОРЯДОЧИТЬ ПО
				|	CRM_Интерес.Дата УБЫВ";
			
			Запрос.Текст = ТекстЗапроса;
			
			ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
			Если ТаблицаСвязей.Количество() > 0 Тогда
				Источник.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

//
//
Функция ВернутьСостояниеИнтереса(Интерес) Экспорт
	
	Возврат Интерес.СостояниеИнтереса;
	
КонецФункции

//
//
Функция СформироватьПредставлениеИнтересаСтрокой(Интерес) Экспорт
	
	Возврат "["+Формат(Интерес.Дата,"ДФ=dd.MM.yyyy") + "]: " + Интерес.Тема;
	
КонецФункции

//
//
Процедура ДозаписатьСвязьСИнтересами(Источник, ТаблицаЗаписей, CRM_ТаблицаИнтересов) Экспорт
	
	Если CRM_ТаблицаИнтересов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ТаблицаИнтересов.ЗаполнитьЗначения(Ложь, "ОсновнойИнтерес");
	CRM_ТаблицаИнтересов[0].ОсновнойИнтерес = Истина;
	
	ИсходныйНабор = ТаблицаЗаписей.Скопировать();
	ТаблицаЗаписей.Очистить();	
		
	Для Каждого СтрокаИнтереса Из CRM_ТаблицаИнтересов Цикл
		
		Для Каждого ТекЗапись Из ИсходныйНабор Цикл		
			
			Если (ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя"))
				И НЕ Источник.ПометкаУдаления
				И НЕ Источник.Выполнена Тогда
				ТекЗапись.CRM_Интерес		= СтрокаИнтереса.Ссылка;
				ТекЗапись.СостояниеИнтереса	= СтрокаИнтереса.Ссылка.СостояниеИнтереса;
			Иначе
				ТекЗапись.CRM_Интерес		= СтрокаИнтереса.Ссылка;
				ТекЗапись.СостояниеИнтереса			= СтрокаИнтереса.Ссылка.СостояниеИнтереса;				
				Попытка
					ТекЗапись.ГлавнаяЗапись		= СтрокаИнтереса.ГлавнаяЗапись;
				Исключение
				КонецПопытки;
			КонецЕсли;
			ТекЗапись.ОсновнойИнтерес			= СтрокаИнтереса.ОсновнойИнтерес;
			ТекЗапись.ИнтересЯвляетсяОснованием	= СтрокаИнтереса.ВведенНаОсновании;	
			
			НоваяЗапись = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,ТекЗапись);
			
			// Проверим, не было ли ранее записи текущего объекта с этим интересом,
			// если была, то состояние интереса берем из этой записи
			// !!! за исключением не выполненных и не помеченных задач. Для задачи берем текущее состояние интереса;
			Если ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя")
				И НЕ Источник.ПометкаУдаления
				И НЕ Источник.Выполнена Тогда
				НоваяЗапись.CRM_Интерес			= СтрокаИнтереса.Ссылка;
				НоваяЗапись.СостояниеИнтереса	= СтрокаИнтереса.Ссылка.СостояниеИнтереса;
				
				НоваяЗапись.ОсновнойИнтерес				= СтрокаИнтереса.ОсновнойИнтерес;
				НоваяЗапись.ИнтересЯвляетсяОснованием	= СтрокаИнтереса.ВведенНаОсновании;
				
			Иначе
				НоваяЗапись.CRM_Интерес					= СтрокаИнтереса.Ссылка;
				НоваяЗапись.ОсновнойИнтерес 			= СтрокаИнтереса.ОсновнойИнтерес;
				НоваяЗапись.ИнтересЯвляетсяОснованием	= СтрокаИнтереса.ВведенНаОсновании;
				НоваяЗапись.СостояниеИнтереса			= СтрокаИнтереса.Ссылка.СостояниеИнтереса
			КонецЕсли;
			
			Если ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") 			
				И ЗначениеЗаполнено(НоваяЗапись.Объект.БизнесПроцесс) Тогда
				// Добавлена проверка, чтобы не падала запись задач, у которых нет БП.
				// Проверим, есть ли такая связь с интересом у бизнес-процесса задачи
				// если нет, то добавим запись.
				
				ЗаписьРегистраБП = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
				ЗаписьРегистраБП.ГлавнаяЗапись	= Истина;
				ЗаписьРегистраБП.Клиент			= НоваяЗапись.Клиент;
				ЗаписьРегистраБП.Объект			= НоваяЗапись.Объект.БизнесПроцесс;
				ЗаписьРегистраБП.CRM_Интерес	= НоваяЗапись.CRM_Интерес;
				ЗаписьРегистраБП.Прочитать();
				Если НЕ ЗаписьРегистраБП.Выбран() Тогда
					
					НоваяЗаписьБизнесПроцесса = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Объект"		, НоваяЗапись.Объект.БизнесПроцесс);
					Запрос.УстановитьПараметр("Клиент"		, НоваяЗапись.Клиент);
					Запрос.УстановитьПараметр("CRM_Интерес"	, НоваяЗапись.CRM_Интерес);
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	CRM_ЖурналДокументов.ГлавнаяЗапись,
					|	CRM_ЖурналДокументов.Клиент,
					|	CRM_ЖурналДокументов.Объект,
					|	CRM_ЖурналДокументов.CRM_Интерес,
					|	CRM_ЖурналДокументов.ТипОбъекта,
					|	CRM_ЖурналДокументов.Номер,
					|	CRM_ЖурналДокументов.Дата,
					|	CRM_ЖурналДокументов.Организация,
					|	CRM_ЖурналДокументов.Сумма,
					|	CRM_ЖурналДокументов.Валюта,
					|	CRM_ЖурналДокументов.Ответственный,
					|	CRM_ЖурналДокументов.Автор,
					|	CRM_ЖурналДокументов.Описание,
					|	CRM_ЖурналДокументов.Важность,
					|	CRM_ЖурналДокументов.ВходящееИсходящее,
					|	CRM_ЖурналДокументов.ВидСобытия,
					|	CRM_ЖурналДокументов.ПометкаУдаления,
					|	CRM_ЖурналДокументов.Проведен,
					|	CRM_ЖурналДокументов.КонтактноеЛицо,
					|	CRM_ЖурналДокументов.СостояниеСобытия,
					|	CRM_ЖурналДокументов.СостояниеИнтереса,
					|	CRM_ЖурналДокументов.ЕстьПрисоединенныеФайлы
					|ИЗ
					|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
					|ГДЕ
					|	CRM_ЖурналДокументов.Объект = &Объект
					|	И CRM_ЖурналДокументов.Клиент = &Клиент
					|	И CRM_ЖурналДокументов.ГлавнаяЗапись";
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЗаполнитьЗначенияСвойств(НоваяЗаписьБизнесПроцесса,Выборка);
						НоваяЗаписьБизнесПроцесса.CRM_Интерес		= НоваяЗапись.CRM_Интерес;
						НоваяЗаписьБизнесПроцесса.СостояниеИнтереса	= НоваяЗапись.СостояниеИнтереса;
					Иначе
						ТипИсточника	= ТипЗнч(НоваяЗапись.Объект.БизнесПроцесс);
						ТипОбъекта		= CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(ТипИсточника);
						
						НоваяЗаписьБизнесПроцесса.ГлавнаяЗапись		= Истина;
						НоваяЗаписьБизнесПроцесса.Клиент			= НоваяЗапись.Клиент;
						НоваяЗаписьБизнесПроцесса.Объект			= НоваяЗапись.Объект.БизнесПроцесс;
						НоваяЗаписьБизнесПроцесса.CRM_Интерес		= НоваяЗапись.CRM_Интерес;
						НоваяЗаписьБизнесПроцесса.ТипОбъекта		= ТипОбъекта;
						НоваяЗаписьБизнесПроцесса.Номер				= НоваяЗапись.Объект.БизнесПроцесс.Номер;
						НоваяЗаписьБизнесПроцесса.Дата				= НоваяЗапись.Объект.БизнесПроцесс.Дата;
						НоваяЗаписьБизнесПроцесса.Автор				= НоваяЗапись.Объект.БизнесПроцесс.Автор;
						НоваяЗаписьБизнесПроцесса.Описание			= ПолучитьТекстовоеОписанияОбъекта(НоваяЗапись.Объект.БизнесПроцесс);
						НоваяЗаписьБизнесПроцесса.Важность			= НоваяЗапись.Объект.БизнесПроцесс.Важность;
						НоваяЗаписьБизнесПроцесса.ПометкаУдаления	= НоваяЗапись.Объект.БизнесПроцесс.ПометкаУдаления;
						НоваяЗаписьБизнесПроцесса.СостояниеИнтереса	= НоваяЗапись.СостояниеИнтереса;
					КонецЕсли;
					
					НоваяЗаписьБизнесПроцесса.ОсновнойИнтерес			= НоваяЗапись.ОсновнойИнтерес;
					НоваяЗаписьБизнесПроцесса.ИнтересЯвляетсяОснованием = НоваяЗапись.ИнтересЯвляетсяОснованием;
					
					НоваяЗаписьБизнесПроцесса.Записать();
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.Задание") Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("БизнесПроцесс", Источник.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И НЕ ЗадачаИсполнителя.Выполнена";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					// Проверим, есть ли такая связь с интересом у задачи
					// если нет, то добавим запись.
					
					ЗаписьРегистраЗадача = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
					ЗаписьРегистраЗадача.ГлавнаяЗапись	= Истина;
					ЗаписьРегистраЗадача.Клиент			= НоваяЗапись.Клиент;
					ЗаписьРегистраЗадача.Объект			= Выборка.Ссылка;
					ЗаписьРегистраЗадача.CRM_Интерес	= НоваяЗапись.CRM_Интерес;
					ЗаписьРегистраЗадача.Прочитать();
					
					Если НЕ ЗаписьРегистраЗадача.Выбран() Тогда
						
						НоваяЗаписьЗадача = РегистрыСведений.CRM_ЖурналДокументов.СоздатьМенеджерЗаписи();
						
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Объект"		, Выборка.Ссылка);
						Запрос.УстановитьПараметр("Клиент"		, НоваяЗапись.Клиент);
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						|	CRM_ЖурналДокументов.ГлавнаяЗапись,
						|	CRM_ЖурналДокументов.Клиент,
						|	CRM_ЖурналДокументов.Объект,
						|	CRM_ЖурналДокументов.CRM_Интерес,
						|	CRM_ЖурналДокументов.ТипОбъекта,
						|	CRM_ЖурналДокументов.Номер,
						|	CRM_ЖурналДокументов.Дата,
						|	CRM_ЖурналДокументов.Организация,
						|	CRM_ЖурналДокументов.Сумма,
						|	CRM_ЖурналДокументов.Валюта,
						|	CRM_ЖурналДокументов.Ответственный,
						|	CRM_ЖурналДокументов.Автор,
						|	CRM_ЖурналДокументов.Описание,
						|	CRM_ЖурналДокументов.Важность,
						|	CRM_ЖурналДокументов.ВходящееИсходящее,
						|	CRM_ЖурналДокументов.ВидСобытия,
						|	CRM_ЖурналДокументов.ПометкаУдаления,
						|	CRM_ЖурналДокументов.Проведен,
						|	CRM_ЖурналДокументов.КонтактноеЛицо,
						|	CRM_ЖурналДокументов.СостояниеСобытия,
						|	CRM_ЖурналДокументов.СостояниеИнтереса,
						|	CRM_ЖурналДокументов.ЕстьПрисоединенныеФайлы
						|ИЗ
						|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
						|ГДЕ
						|	CRM_ЖурналДокументов.Объект = &Объект
						|	И CRM_ЖурналДокументов.Клиент = &Клиент
						|	И CRM_ЖурналДокументов.ГлавнаяЗапись";
						
						Выборка_1 = Запрос.Выполнить().Выбрать();
						Если Выборка_1.Следующий() Тогда
							ЗаполнитьЗначенияСвойств(НоваяЗаписьЗадача,Выборка_1);
							НоваяЗаписьЗадача.CRM_Интерес		= НоваяЗапись.CRM_Интерес;
							НоваяЗаписьЗадача.СостояниеИнтереса	= НоваяЗапись.СостояниеИнтереса;
						Иначе
							ТипИсточника	= ТипЗнч(Выборка.Ссылка);
							ТипОбъекта		= CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(ТипИсточника);
							
							НоваяЗаписьЗадача.ГлавнаяЗапись		= Истина;
							НоваяЗаписьЗадача.Клиент			= НоваяЗапись.Клиент;
							НоваяЗаписьЗадача.Объект			= НоваяЗапись.Объект.БизнесПроцесс;
							НоваяЗаписьЗадача.CRM_Интерес		= НоваяЗапись.CRM_Интерес;
							НоваяЗаписьЗадача.ТипОбъекта		= ТипОбъекта;
							НоваяЗаписьЗадача.Номер				= Выборка.Ссылка.Номер;
							НоваяЗаписьЗадача.Дата				= Выборка.Ссылка.Дата;
							НоваяЗаписьЗадача.Автор				= Выборка.Ссылка.Автор;
							НоваяЗаписьЗадача.Описание			= Выборка.Ссылка.Описание;
							НоваяЗаписьЗадача.Важность			= Выборка.Ссылка.Важность;
							НоваяЗаписьЗадача.ПометкаУдаления	= Выборка.Ссылка.ПометкаУдаления;
							НоваяЗаписьЗадача.СостояниеИнтереса	= НоваяЗапись.СостояниеИнтереса;
							
							НоваяЗаписьЗадача.ИнтересЯвляетсяОснованием = НоваяЗапись.ИнтересЯвляетсяОснованием;
							
						КонецЕсли;
						
						НоваяЗаписьЗадача.ОсновнойИнтерес		= НоваяЗапись.ОсновнойИнтерес;
						
						НоваяЗаписьЗадача.Записать();
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьАктивныйИнтересПоКлиенту(Клиент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Интерес.Ссылка
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	НЕ CRM_Интерес.Завершен
	|	И (CRM_Интерес.Партнер = &Клиент
	|		ИЛИ CRM_Интерес.ПотенциальныйКлиент = &Клиент)";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Процедура перезаписывает ссылки в документах ЭлектронноеПисьмоВходящее и ЭлектронноеПисьмоИсходящее
// с потенциального клиента на партнера.
//
// Параметры:
//	ПотенциальныйКлиент - СправочникСсылка.CRM_ПотенциальныеКлиенты
//	Партнер				- СправочникСсылка.Партнеры
Процедура ПереопределитьПисьмаСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЭлектронноеПисьмоВходящее.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|ГДЕ
		|	ЭлектронноеПисьмоВходящее.ПометкаУдаления = ЛОЖЬ
		|	И ЭлектронноеПисьмоВходящее.ОтправительКонтакт = &ОтправительКонтакт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
		|ГДЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт = &ОтправительКонтакт";
	Запрос.УстановитьПараметр("ОтправительКонтакт", ПотенциальныйКлиент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ДокументОбъект.ОтправительКонтакт = Партнер;
		Иначе
			НужнаяСтрока = ДокументОбъект.ПолучателиПисьма.Найти(ПотенциальныйКлиент, "Контакт");
			Если НужнаяСтрока <> Неопределено Тогда
				НужнаяСтрока.Контакт = Партнер;
			КонецЕсли;
		КонецЕсли;
		ДокументОбъект.Записать();
	КонецЦикла

	
КонецПроцедуры

Процедура ПереписатьАктивныеИнтересыСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_Интерес.Ссылка
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	НЕ CRM_Интерес.ПометкаУдаления
		|	И НЕ CRM_Интерес.Завершен
		|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент";
	Запрос.УстановитьПараметр("ПотенциальныйКлиент", ПотенциальныйКлиент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ДокументИнтерес = Выборка.Ссылка.ПолучитьОбъект();
		ДокументИнтерес.Партнер = Партнер;

		ДокументИнтерес.Записать();

	КонецЦикла;
	
КонецПроцедуры

// Процедура создаёт новую запись для пользователя по переданному интересу.
//
//  Параметры:
//   Интерес		- ДокументСсылка		- Интерес
//   Пользователь	- СправочникСсылка		- Пользователь
//   Статус			- ПеречислениеСсылка	- Новый статус интереса.
//   Комментарий	- Строка				- Комментарий
//
Процедура CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Интерес, Пользователь, Статус, Комментарий = "") Экспорт
	
	НоваяЗапись	= РегистрыСведений.CRM_ИнтересыНаКонтроле.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период			= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НоваяЗапись.Объект			= Интерес;
	НоваяЗапись.Пользователь	= Пользователь;
	НоваяЗапись.СтатусКонтроля	= Статус;
	НоваяЗапись.Комментарий		= Комментарий;	
	Если ЗначениеЗаполнено(Пользователь.Подразделение) Тогда
		НоваяЗапись.Подразделение = Пользователь.Подразделение;
	КонецЕсли;		
	НоваяЗапись.Записать();
	
КонецПроцедуры	


#КонецОбласти //РаботаСИнтересом


#Область РаботаCКартами
////////////////////////////////////////////////////////////////////////////////
// Блок процедур и функций для работы с картами.

Функция ПолучитьАдрес(СтруктураАдреса, СайтИнтернетКарты) Экспорт
	
	Возврат CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().СформироватьСтрокуПоискаДляИнтернетКарты(СтруктураАдреса, СайтИнтернетКарты);
	
КонецФункции

#КонецОбласти //РаботаCКартами


#Область ЗаполнениеКоманднойПанелиАтрибутовСобытия

Процедура ОтрисоватьПодменюПроектов(Форма, СтрокаДерева, Родитель, нИндекс)
	
	Если СтрокаДерева.ЭтоГруппа Тогда
		
		ИмяЭлемента = "ПодменюПроектСобытия" + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ТекущееПодменю				= Форма.Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель);
		ТекущееПодменю.Вид			= ВидГруппыФормы.Подменю;
		ТекущееПодменю.Заголовок	= СтрокаДерева.Наименование;
		
		нИндекс = нИндекс + 1;
		
		Для Каждого СтрокаСтроки Из СтрокаДерева.Строки Цикл
			ОтрисоватьПодменюПроектов(Форма, СтрокаСтроки, ТекущееПодменю, нИндекс);
			
			нИндекс = нИндекс + 1;
		КонецЦикла;
	Иначе
		ИмяЭлемента			= "КнопкаПодменюПроектСобытия" + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Команда				= Форма.Команды.Добавить(ИмяЭлемента);
		Команда.Действие	= "Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая";
		Команда.Заголовок	= СтрокаДерева.Наименование;
		Команда.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		Кнопка				= Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Родитель);
		Кнопка.Заголовок	= СтрокаДерева.Наименование;
		Кнопка.ИмяКоманды	= Команда.Имя;
		НоваяСтрока			= Форма.ТаблицаСоответствияЭлементовУправленияСсылкам.Добавить();
		НоваяСтрока.Имя		= Кнопка.Имя;
		НоваяСтрока.Ссылка	= СтрокаДерева.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельАтрибутыСобытияЗаполнитьПодменюПроект(Форма, Подразделение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Проекты.Ссылка,
		|	Проекты.Наименование КАК Наименование,
		|	Проекты.CRM_Подразделение,
		|	Проекты.ЭтоГруппа
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	НЕ Проекты.ПометкаУдаления
		|	И НЕ Проекты.Завершен";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Текст = Запрос.Текст + "
		|	 И (НЕ Проекты.ЭтоГруппа И (Проекты.CRM_Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	ИЛИ Проекты.CRM_Подразделение В ИЕРАРХИИ (&Подразделение))) ИЛИ Проекты.ЭтоГруппа";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	И Проекты.CRM_Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ИЛИ Проекты.ЭтоГруппа";
	КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ";
		
	нИндекс = 2;
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Дерево.Строки.Сортировать("Наименование Возр",Истина);
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		ОтрисоватьПодменюПроектов(Форма, СтрокаДерева, Форма.Элементы.ПодменюПроектСобытия, нИндекс);
		
		нИндекс = нИндекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСФоновымиЗаданиями

// Запускает выполнение процедуры в фоновом задании.
// По аналогии с ДлительныеОперации.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "ОжидатьЗавершения".
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//  ОжидатьЗавершения       - Булево - признак ожидания завершения задания за время вызова 
//                           (2 сек. для обычной скорости клиентского соединения, 4 сек. для низкой).
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, ОжидатьЗавершения = Истина) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		Задание = ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
			ПараметрыЭкспортнойПроцедуры,, НаименованиеЗадания);
		
		Если ОжидатьЗавершения Тогда
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
		КонецЕсли;
		
		Результат.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запуск фонового задания с контекстом клиента. Например, передаются ПараметрыКлиентаНаСервере.
// Запуск выполняется с помощью процедуры ВыполнитьМетодКонфигурации общего модуля РаботаВБезопасномРежиме.
//
// Параметры:
//  ИмяМетода    - Строка - как в функции Выполнить менеджера фоновых заданий.
//  Параметры    - Массив - как в функции Выполнить менеджера фоновых заданий.
//  Ключ         - Строка - как в функции Выполнить менеджера фоновых заданий.
//  Наименование - Строка - как в функции Выполнить менеджера фоновых заданий.
//
// Возвращаемое значение:
//  ФоновоеЗадание.
//
Функция ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяМетода, Параметры = Неопределено, Ключ = "", Наименование = "") Экспорт
	
	Если ТекущийРежимЗапуска() = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Запуск фонового задания с контекстом клиента возможен только при наличии клиента.'");
	КонецЕсли;
	
	ВсеПараметры = Новый Структура;
	ВсеПараметры.Вставить("ИмяМетода",    ИмяМетода);
	ВсеПараметры.Вставить("Параметры",    Параметры);
	ВсеПараметры.Вставить("ПараметрыКлиентаНаСервере", СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере());
	
	ПараметрыПроцедурыФоновогоЗадания = Новый Массив;
	ПараметрыПроцедурыФоновогоЗадания.Добавить(ВсеПараметры);
	
	Возврат ФоновыеЗадания.Выполнить("CRM_ОбщегоНазначенияСервер.ПередЗапускомФоновогоЗаданияСКонтекстомКлиента",
		ПараметрыПроцедурыФоновогоЗадания, Ключ, Наименование);
	
КонецФункции

// Продолжение процедуры ЗапуститьФоновоеЗаданиеСКонтекстомКлиента.
Процедура ПередЗапускомФоновогоЗаданияСКонтекстомКлиента(ВсеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПравоДоступа("Установка", Метаданные.ПараметрыСеанса.ПараметрыКлиентаНаСервере) Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = ВсеПараметры.ПараметрыКлиентаНаСервере;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(ВсеПараметры.ИмяМетода, ВсеПараметры.Параметры);
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСJSON

// Функция получает описание объекта из модели json. 
//
// Параметры:
//  СтрJSON - Строка - описание объекта в виде модели json.
//
// Возвращаемое значение:
//  Значение    - Соответствие - соответствие свойств и значений объекта.
//
Функция UnJSON(СтрJSON) Экспорт 
	
	Перем Значение;
	Если ПолучитьЗначениеJSON(СтрJSON,Значение)=0 Тогда
		Возврат Значение;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции // UnJSON()

// Функция осуществляет непосредственный разбор json. 
//
//
Функция ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция=1,Ключ="") Экспорт
	Перем Кавычка;

	ЗначениеВСтроке="";
	Кавычек=0;
	Комментарий=Ложь;
	Строка=Ложь;

	Пока Позиция<=СтрДлина(СтрJSON) Цикл
		ХХ=Сред(СтрJSON,Позиция,2);
		Хзнач=Лев(ХХ,1);
		Позиция=Позиция+1;

		Если Хзнач>" " ИЛИ Строка Тогда // Отсекаем всякий хлам

			Если Комментарий Тогда
				// Это комментарий. Крутимся в цикле пока не встретится конец комментария.
				Если ХХ="*/" Тогда
					// Комментарий закончился
					Комментарий=Ложь;
					Позиция=Позиция+1;
				КонецЕсли;

			ИначеЕсли Хзнач="\" Тогда
				Позиция=Позиция+1;
				ХХ=ВРег(ХХ);
				Если ХХ="\""" Тогда ЗначениеВСтроке=ЗначениеВСтроке+""""
				ИначеЕсли ХХ="\\" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"\"
				ИначеЕсли ХХ="\/" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"/"
				ИначеЕсли ХХ="\B" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символ(8)
				ИначеЕсли ХХ="\F" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПФ // перевод формы (страницы)
				ИначеЕсли ХХ="\N" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПС // перевод строки
				ИначеЕсли ХХ="\R" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВК // возврат каретки
				ИначеЕсли ХХ="\T" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВТаб // символ вертикальной табуляции
				ИначеЕсли ХХ="\U" Тогда
					ЗначениеВСтроке=ЗначениеВСтроке+Символ(Hex2Число(Сред(СтрJSON,Позиция,4))); // шестнадцатиричное число
					Позиция=Позиция+4
				КонецЕсли;

			ИначеЕсли Строка Тогда
				// Если строка не закончилась - то пропускаем управляющие символы.
				Если Хзнач=Кавычка Тогда
					// Закончилась строка
					Строка=Ложь;
					Кавычек=Кавычек+1;
				Иначе
					ЗначениеВСтроке=ЗначениеВСтроке+Хзнач;
				КонецЕсли;

			ИначеЕсли ХХ="/*" Тогда
				// Начался комментарий
				Комментарий=Истина;
				Позиция=Позиция+1;

			ИначеЕсли Найти("""'{}[]:,",Хзнач)>0 Тогда
				Если Хзнач="""" ИЛИ Хзнач="'" Тогда
					// Началась строка
					// Строка - коллекция нуля или больше символов Unicode, заключенная в
					// двойные кавычки, используя "\" в качестве символа экранирования.
					// Символ представляется как односимвольная строка.
					// Похожий синтаксис используется в C и Java.
					Строка=Истина;
					Кавычка=Хзнач;
					Кавычек=Кавычек+1;

				ИначеЕсли Хзнач="{" Тогда
					// Начался объект
					// Объект - неупорядоченный набор пар ключ/значение.
					// Объект начинается с "{" и заканчивается "}".
					// Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					Объект=Новый Соответствие;
					//Объект=Новый Структура;
					Пока Истина Цикл
						// Получим ключ и значение
						Ключ="";
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция,Ключ);
						// 0 - Есть значение и не конец объекта (запятая)
						// 1 - есть значение и конец объекта
						// 2 - нет значения и не конец объекта (запятая)
						// 3 - нет значения и конец объекта.
						Если Режим=0 Тогда
							Объект.Вставить(Ключ,Значение);
						ИначеЕсли Режим=1 Тогда
							Объект.Вставить(Ключ,Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение=Объект;
					Возврат 0

				ИначеЕсли Хзнач="[" Тогда
					// Начался массив
					// Массив - упорядоченная коллекция значений.
					// Массив начинается с "[" и заканчивается "]".
					// Значения разделены ",".
					Массив=Новый Массив;
					Пока Истина Цикл
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);
						// 0 - Есть значение и не конец массива (запятая)
						// 1 - есть значение и конец массива
						// 2 - нет значения и не конец массива (запятая)
						// 3 - нет значения и конец массива.
						Если Режим=0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим = 1 Тогда
							Массив.Добавить(Значение);
							Прервать
						ИначеЕсли Режим = 3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение = Массив;
					Возврат 0

				ИначеЕсли Хзнач="]" ИЛИ Хзнач="}" Тогда
					// Закончился массив/объект
					Если ЗначениеВСтроке = "" И Кавычек = 0 Тогда
						Возврат 3 // Нет значения и конец массива/объекта.
					Иначе
						Значение = ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек);
						Возврат 1 // Есть значение и конец массива/объекта.
					КонецЕсли;

				ИначеЕсли Хзнач=":" Тогда
					Ключ = ЗначениеВСтроке;
					Возврат ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);

				Иначе
					// запятая
					Прервать
				КонецЕсли;

			Иначе
				ЗначениеВСтроке = ЗначениеВСтроке+Хзнач;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Кавычек > 0 Тогда
		Значение = ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке="" Тогда
			Возврат 2;
		Иначе
			Значение = ЗначениеБезКавычек(ЗначениеВСтроке)
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции // ПолучитьЗначениеJSON()

// Вспомогательная функция 
//
//
Функция Hex2Число(Hex) 
	Стр=ВРег(СокрЛП(Hex));
	Dec=0;
	Для Хзнач=1 По СтрДлина(Стр) Цикл
		Dec=Dec+Найти("123456789ABCDEF",Сред(Стр,Хзнач,1))*Pow(16,СтрДлина(Стр)-Хзнач)
	КонецЦикла;
	Возврат Dec
КонецФункции

// Вспомогательная функция 
//
//
Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек)
	Если Кавычек>0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке)
	ИначеЕсли ЗначениеВСтроке="" Тогда
		Возврат Неопределено
	КонецЕсли;
	Возврат ЗначениеБезКавычек(ЗначениеВСтроке)
КонецФункции

// Вспомогательная функция 
//
//
Функция ЗначениеВКавычках(ЗначениеВСтроке)
	Возврат ЗначениеВСтроке;
КонецФункции

// Вспомогательная функция 
//
//
Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	// Это число, булево или null.
	// Хотя здесь могут быть и строки. Например: {Code:123}.
	Стр = ВРег(ЗначениеВСтроке);
	Если Стр = "TRUE" Тогда
		Возврат Истина;
	ИначеЕсли Стр = "FALSE" Тогда
		Возврат Ложь;
	ИначеЕсли Стр = "NULL" Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Пробежимся по предполагаемому "числу".
	Экспонента	= Ложь;
	ХХ			= " ";
	Для Индекс = 1 По СтрДлина(Стр) Цикл
		Хзнач = Сред(Стр, Индекс, 1);
		Если Найти("0123456789.+-", Хзнач) Тогда
			ХХ = ХХ + Хзнач;
		ИначеЕсли Хзнач = "E" Тогда
			#Если ВебКлиент Тогда
				Возврат ЗначениеВСтроке;
			#Иначе
				Экспонента = Истина;
				УУ = XMLЗначение(Тип("Число"),ХХ);
				ХХ = " ";
			#КонецЕсли
		Иначе
			// То точно не число, а строка.
			Возврат ЗначениеВСтроке;
		КонецЕсли;
	КонецЦикла;
	#Если ВебКлиент Тогда
		Попытка
			ХХ = Число(ХХ);
		Исключение
		КонецПопытки;	
	#Иначе
		ХХ = XMLЗначение(Тип("Число"), ХХ);
		Если Экспонента Тогда
			ХХ = УУ * Pow(10, ХХ);
		КонецЕсли;
	#КонецЕсли
	Возврат ХХ;
КонецФункции

#КонецОбласти // РаботаСJSON


#Область РаботаСДополнительнымиРеквизитами

Функция ПолучитьЭтапыКарты(КартаМаршрута)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",КартаМаршрута);
	Запрос.УстановитьПараметр("НомерВерсии",КартаМаршрута.НомерВерсии);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута
	|ПОМЕСТИТЬ Этапы
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Этапы.ТочкаМаршрута КАК Этап
	|ИЗ
	|	Этапы КАК Этапы
	|ГДЕ
	|	Этапы.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Действие)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Этапы.ТочкаМаршрута.РеквизитДопУпорядочивания";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Этап");
	
КонецФункции

Процедура ДобавитьНастройкуРеквизита(Свойство)
	
	Если Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_КартыМаршрутов_Общие Тогда
	// Тогда добавляем настройку для всех карт маршрута
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_КартыМаршрутов.Ссылка
		|ИЗ
		|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.НомерВерсии = 0 Тогда Продолжить; КонецЕсли;
			
			МассивЭтапов = ПолучитьЭтапыКарты(Выборка.Ссылка);
			
			ЗаписьРегистра				= РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Карта		= Выборка.Ссылка;
			ЗаписьРегистра.НомерВерсии	= Выборка.Ссылка.НомерВерсии;
			ЗаписьРегистра.Свойство		= Свойство.Ссылка;
			
			МассивНастроек = Новый Массив;
			
			СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
			СтруктураНастройки.Этап			= Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка();
			СтруктураНастройки.Видимость	= Истина;
			СтруктураНастройки.Доступность	= Истина;
			СтруктураНастройки.Обязательный	= Свойство.ЗаполнятьОбязательно;
			
			МассивНастроек.Добавить(СтруктураНастройки);
			
			Для Каждого Этап ИЗ МассивЭтапов Цикл
				СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
				СтруктураНастройки.Этап			= Этап;
				СтруктураНастройки.Видимость	= Истина;
				СтруктураНастройки.Доступность	= Истина;
				СтруктураНастройки.Обязательный	= Свойство.ЗаполнятьОбязательно;
				
				МассивНастроек.Добавить(СтруктураНастройки);
			КонецЦикла;
			
			ЗаписьРегистра.Настройки = Новый ХранилищеЗначения(МассивНастроек);
			ЗаписьРегистра.Записать();
		КонецЦикла;
	Иначе
	// Найдем карту и для нее добавим настройку
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НаборСвойств",Свойство.НаборСвойств);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_КартыМаршрутов.Ссылка
		|ИЗ
		|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
		|ГДЕ
		|	CRM_КартыМаршрутов.НаборСвойств = &НаборСвойств";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МассивЭтапов = ПолучитьЭтапыКарты(Выборка.Ссылка);
			
			ЗаписьРегистра				= РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Карта		= Выборка.Ссылка;
			ЗаписьРегистра.НомерВерсии	= Выборка.Ссылка.НомерВерсии;
			ЗаписьРегистра.Свойство		= Свойство.Ссылка;
			
			МассивНастроек = Новый Массив;
			
			СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
			СтруктураНастройки.Этап			= Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка();
			СтруктураНастройки.Видимость	= Истина;
			СтруктураНастройки.Доступность	= Истина;
			СтруктураНастройки.Обязательный	= Свойство.ЗаполнятьОбязательно;
			
			МассивНастроек.Добавить(СтруктураНастройки);
			
			Для Каждого Этап ИЗ МассивЭтапов Цикл
				СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
				СтруктураНастройки.Этап			= Этап;
				СтруктураНастройки.Видимость	= Истина;
				СтруктураНастройки.Доступность	= Истина;
				СтруктураНастройки.Обязательный	= Свойство.ЗаполнятьОбязательно;
				
				МассивНастроек.Добавить(СтруктураНастройки);
			КонецЦикла;
			
			ЗаписьРегистра.Настройки = Новый ХранилищеЗначения(МассивНастроек);
			ЗаписьРегистра.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНастройкуРеквизита(Свойство)
	
	Если Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_КартыМаршрутов_Общие Тогда
	// Тогда добавляем настройку для всех карт маршрута
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_КартыМаршрутов.Ссылка
		|ИЗ
		|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.НомерВерсии = 0 Тогда Продолжить; КонецЕсли;
			
			НаборНастроек = РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьНаборЗаписей();
			НаборНастроек.Отбор.Карта.Установить(Выборка.Ссылка);
			НаборНастроек.Отбор.Свойство.Установить(Свойство.Ссылка);
			
			НаборНастроек.Прочитать();
			
			Для Каждого СтрокаНабора ИЗ НаборНастроек Цикл
				МассивНастроек = СтрокаНабора.Настройки.Получить();
				Для Каждого Настройка ИЗ МассивНастроек Цикл
					Настройка.Обязательный = Свойство.ЗаполнятьОбязательно;
				КонецЦикла;
				
				СтрокаНабора.Настройки = Новый ХранилищеЗначения(МассивНастроек);
			КонецЦикла;
			
			НаборНастроек.Записать();
		КонецЦикла;
	Иначе
	// Найдем карту и для нее добавим настройку
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НаборСвойств",Свойство.НаборСвойств);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_КартыМаршрутов.Ссылка
		|ИЗ
		|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
		|ГДЕ
		|	CRM_КартыМаршрутов.НаборСвойств = &НаборСвойств";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаборНастроек = РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьНаборЗаписей();
			НаборНастроек.Отбор.Карта.Установить(Выборка.Ссылка);
			НаборНастроек.Отбор.Свойство.Установить(Свойство.Ссылка);
			
			НаборНастроек.Прочитать();
			
			Для Каждого СтрокаНабора ИЗ НаборНастроек Цикл
				МассивНастроек = СтрокаНабора.Настройки.Получить();
				Для Каждого Настройка ИЗ МассивНастроек Цикл
					Настройка.Обязательный = Свойство.ЗаполнятьОбязательно;
				КонецЦикла;
				
				СтрокаНабора.Настройки = Новый ХранилищеЗначения(МассивНастроек);
			КонецЦикла;
			
			НаборНастроек.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиДопРеквизита(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		
		ДобавитьНастройкуРеквизита(Источник);
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаполнятьОбязательно") Тогда
		
		ОбновитьНастройкуРеквизита(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюДопРеквизита(Источник, Отказ) Экспорт
	
	Если Источник.НаборСвойств.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_КартыМаршрутов Тогда
		
		Если Источник.ЭтоНовый() Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
			
		ИначеЕсли НЕ Источник.ЗаполнятьОбязательно = Источник.Ссылка.ЗаполнятьОбязательно Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗаполнятьОбязательно", Источник.ЗаполнятьОбязательно);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти //РаботаСДополнительнымиРеквизитами


#Область РаботаСОбщимЖурналом

// Процедура предназначене для заполнения Интереса и состояния интереса в записях
// регистра сведений CRM_ЖурналДокументов. Вызывается из CRM_КлиентыСервер.ЗарегистрироватьОбъектВОбщемЖурнале.
//
Процедура ЗаполнитьНаличиеПрисоединенногоФайлаВЗаписиОбщегоЖурнала(ВладелецФайла) Экспорт
	
	//ТипИсточника = ТипЗнч(ВладелецФайла);
	//// Получение элемента ПВХ, соответствующего источнику.
	//ТипОбъекта = CRM_КлиентыСервер.ПолучитьСсылкуПВХОбъектыЖурналаПоТипу(ТипИсточника);
	//// Если не найдено элемента ПВХ, соответствующего записываемому объекту - ничего больше не делаем.
	//Если ТипОбъекта = Неопределено Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СправочникПрисоединенныеФайлы.Ссылка,
	|	СправочникПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	СправочникПрисоединенныеФайлы.Размер КАК Размер
	|ИЗ
	|	Справочник."+ВладелецФайла.Метаданные().Имя+"ПрисоединенныеФайлы КАК СправочникПрисоединенныеФайлы
	|ГДЕ
	|	СправочникПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ СправочникПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", ВладелецФайла);
	Попытка
		ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	Исключение
		Возврат;	
	КонецПопытки;
	
	// Набор записей с отбором по источнику.
	НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ВладелецФайла);
	НаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.ЕстьПрисоединенныеФайлы = ТаблицаФайлов.Количество() > 0;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

//
//
Процедура ОбновитьЗаписиЖурналаДокументов(Объект, Форма) Экспорт
	
	НаборРегистра = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	
КонецПроцедуры

#КонецОбласти //РаботаСОбщимЖурналом


#Область ОбработкаРазличныхДанных

// Процедура обработки заполнения.
//
// Параметры:
//	Источник
//	ДанныеЗаполнения
//	СтандартнаяОбработка	- Булево	
//
// Возвращаемое значение:
//	Нет
Процедура ОбработкаЗаполнения(Источник, ДанныеЗаполнения) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
			// Пока ничего не надо, все что надо заполняется в модуле документа.
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_РассылкаЭлектронныхПисем") Тогда
			
			Источник.Тема = ДанныеЗаполнения.Тема;
			
			// Поменяем данные заполнения на структуру с партнером для того чтобы обработка заполнения документа
			// заполнила рассылку на основании структуры.
			// Входящие данные заполнения предварительно сохраним в доп. свойствах объекта
			// и в подписке их вернем назад.
			
			Источник.ДополнительныеСвойства.Вставить("ДанныеЗаполнения",ДанныеЗаполнения);
			
			СписокПартнеров = Новый СписокЗначений;
			СписокПартнеров.Добавить(Новый Структура("Партнер,КонтактноеЛицо", ДанныеЗаполнения.Партнер, ДанныеЗаполнения.КонтактноеЛицо));
			
			СтруктрураЗаполнения = Новый Структура("СписокПартнеров",СписокПартнеров);
			ДанныеЗаполнения = СтруктрураЗаполнения;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Мероприятие") Тогда
			
			// В модуле объекта есть обработка заполнения на основании интереса.
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
			
			// В модуле объекта есть обработка заполнения на основании интереса.
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
			
			Источник.Тема = ДанныеЗаполнения.Тема;
			
			// Поменяем данные заполнения на структуру с партнером для того чтобы обработка заполнения документа
			// заполнила рассылку на основании структуры.
			// Входящие данные заполнения предварительно сохраним в доп. свойствах объекта
			// и в подписке их вернем назад.
			
			Источник.ДополнительныеСвойства.Вставить("ДанныеЗаполнения",ДанныеЗаполнения);
			
			СтруктураПартнера = Новый Структура("Партнер,КонтактноеЛицо", ДанныеЗаполнения.Партнер, ДанныеЗаполнения.КонтактноеЛицо);
			ДанныеЗаполнения = СтруктураПартнера;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив клиентов, входящих в один холдинг с переданным клиентом.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//
// Возвращаемое значение:
//	Массив	- Массив клиентов, входящих в один холдинг с переданным клиентом.
//
Функция ПолучитьМассивСвоихКлиентов(Клиент) Экспорт 
	МассивКлиентов	= Новый Массив;
	МассивХолдингов	= Новый Массив;
	Если ЗначениеЗаполнено(Клиент) Тогда
		МассивКлиентов.Добавить(Клиент);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Клиент", Клиент);
		// Получаем подчиненные клиенты, в случае если клиент является холдингом.
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвязиМеждуПартнерами.ВторойПартнер КАК Клиент
		|ИЗ
		|	РегистрСведений.СвязиМеждуПартнерами КАК СвязиМеждуПартнерами
		|ГДЕ
		|	СвязиМеждуПартнерами.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейМеждуПартнерами.CRM_Холдинг)
		|	И СвязиМеждуПартнерами.ПервыйПартнер = &Клиент";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если МассивКлиентов.Найти(Выборка.Клиент) = Неопределено Тогда
				МассивКлиентов.Добавить(Выборка.Клиент);
			КонецЕсли;	
		КонецЦикла;	
		// Получаем все холдинги, в которые входит клиент.
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвязиМеждуПартнерами.ПервыйПартнер КАК Клиент
		|ИЗ
		|	РегистрСведений.СвязиМеждуПартнерами КАК СвязиМеждуПартнерами
		|ГДЕ
		|	СвязиМеждуПартнерами.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейМеждуПартнерами.CRM_Холдинг)
		|	И СвязиМеждуПартнерами.ВторойПартнер = &Клиент";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивХолдингов.Добавить(Выборка.Клиент);
		КонецЦикла;	
		// Получаем всех партнеров, полученных холдингов.
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
        |	СвязиМеждуПартнерами.ВторойПартнер КАК Клиент
		|ИЗ
		|	РегистрСведений.СвязиМеждуПартнерами КАК СвязиМеждуПартнерами
		|ГДЕ
		|	СвязиМеждуПартнерами.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейМеждуПартнерами.CRM_Холдинг)
		|	И СвязиМеждуПартнерами.ПервыйПартнер = &Клиент";
		Для Каждого ЭлементМассива Из МассивХолдингов Цикл
			Запрос.УстановитьПараметр("Клиент", ЭлементМассива);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если МассивКлиентов.Найти(Выборка.Клиент) = Неопределено Тогда
					МассивКлиентов.Добавить(Выборка.Клиент);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	
	Возврат МассивКлиентов;
КонецФункции // ПолучитьМассивСвоихКлиентов()	

// Функция возвращает массив контактов клиентов, входящих в один холдинг с владельцем переданного контакта.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Массив	- Массив контактов, всех клиентов, входящих в один холдинг с владельцем переданного контакта.
//
Функция ПолучитьМассивСвоихКонтактов(Контакт) Экспорт
	МассивКонтактов	= Новый Массив;
	МассивПартнеров	= ПолучитьМассивСвоихКлиентов(Контакт.Владелец);
	// Получаем всех контактов партнеров.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеров.Ссылка КАК Контакт
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	|	И КонтактныеЛицаПартнеров.Владелец = &Клиент";
	Для Каждого ЭлементМассива Из МассивПартнеров Цикл
		Запрос.УстановитьПараметр("Клиент", ЭлементМассива);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если МассивКонтактов.Найти(Выборка.Контакт) = Неопределено Тогда
				МассивКонтактов.Добавить(Выборка.Контакт);
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	// Удаляем из массива контактов свой контакт.
	СвойКонтакт = МассивКонтактов.Найти(Контакт);
	Если НЕ (СвойКонтакт = Неопределено) Тогда
		МассивКонтактов.Удалить(СвойКонтакт);
	КонецЕсли;	
	Возврат МассивКонтактов;
КонецФункции // ПолучитьМассивСвоихКонтактов()	

// Функция возвращает массив типов услуг для данного подразделения.
//
// Параметры:
//	Подразделение	- СправочникСсылка	- Подразделение
//
// Возвращаемое значение:
//	Массив	- Массив типов услуг для данного подразделения.
//
Функция ПолучитьМассивДоступныхТиповУслугПодразделения(Подразделение) Экспорт
	МассивСвоихТиповУслуг = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СтруктураПредприятияCRM_ТипУслуги.ТипУслуги КАК ТипУслуги
	               |ИЗ
	               |	Справочник.СтруктураПредприятия.CRM_ТипУслуги КАК СтруктураПредприятияCRM_ТипУслуги
	               |ГДЕ
	               |	СтруктураПредприятияCRM_ТипУслуги.Ссылка = &Подразделение";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивСвоихТиповУслуг.Добавить(Выборка.ТипУслуги);
		КонецЦикла;	
	Возврат МассивСвоихТиповУслуг;
КонецФункции // ПолучитьМассивДоступныхТиповУслугПодразделения()	

// Процедура выполняется при записи объекта задач пользователя.
//
Процедура ПриЗаписиОбъектаЗадачПользователя(ЭтотОбъект, Отказ) Экспорт
	
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// очищаем все записи по данному объекту и заполняем заново
	НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборРегистра.Очистить();
	НаборРегистра.Записать();
	
	Если ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		
		Если ЭтотОбъект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено Или ЭтотОбъект.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
			
		Контакт = "";
		Если ЗначениеЗаполнено(ЭтотОбъект.Партнер) Тогда
			Контакт = ЭтотОбъект.Партнер.Наименование;
		ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.КонтактноеЛицо) Тогда
			Контакт = ЭтотОбъект.КонтактноеЛицо.Наименование;
		ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.ПотенциальныйКлиент) Тогда
			Контакт = ЭтотОбъект.ПотенциальныйКлиент.Наименование;
		КонецЕсли;
		
		// Проверяющие по интересу
		ПроверяющийАвтор 			= Ложь;
		ПроверяющийОтветственный 	= Ложь;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			// Очищаем список контролирующих, чтобы его перезаполнить,
			// иначе не удалятся записи для отказавшихся от контроля.
			
			НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
			НаборРегистра.Прочитать();
			Для каждого ЗаписьНабора Из НаборРегистра Цикл
				Если ЗаписьНабора.Проверяющий = Истина Тогда
					НаборРегистра.Удалить(ЗаписьНабора);				
				КонецЕсли; 				
			КонецЦикла; 
			НаборРегистра.Записать();			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект КАК Ссылка,
			|	CRM_ИнтересыНаКонтролеСрезПоследних.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.CRM_ИнтересыНаКонтроле.СрезПоследних(&Период, ) КАК CRM_ИнтересыНаКонтролеСрезПоследних
			|ГДЕ
			|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект = &Интерес
			|	И CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля = &Статус
			|
			|";
			
			Запрос.УстановитьПараметр("Интерес", ЭтотОбъект.ДокументОснование);
			Запрос.УстановитьПараметр("Период", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
			Запрос.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.Пользователь = ЭтотОбъект.Автор Тогда
					ПроверяющийАвтор = Истина;
					Продолжить;
				ИначеЕсли ВыборкаДетальныеЗаписи.Пользователь = ЭтотОбъект.Ответственный Тогда
					ПроверяющийОтветственный = Истина;
					Продолжить;
				КонецЕсли;
				
				НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
				НаборРегистра.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
				НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
				НаборРегистра.Прочитать();
				
				Если НаборРегистра.Количество() = 1 Тогда
					Если НЕ НаборРегистра[0].Проверяющий Тогда
						НаборРегистра[0].Проверяющий = Истина;
						НаборРегистра.Записать();
					КонецЕсли;
				ИначеЕсли НаборРегистра.Количество() = 0 Тогда
					ЗаписьНабора = НаборРегистра.Добавить();
					ЗаписьНабора.Пользователь		= ВыборкаДетальныеЗаписи.Пользователь;
					ЗаписьНабора.Объект				= ЭтотОбъект.Ссылка;
					ЗаписьНабора.Клиент				= ЭтотОбъект.Партнер;
					ЗаписьНабора.Поставлено			= ЭтотОбъект.Дата;
					ЗаписьНабора.Номер				= ЭтотОбъект.Номер;
					ЗаписьНабора.Автор				= (ВыборкаДетальныеЗаписи.Пользователь = ЭтотОбъект.Автор);
					ЗаписьНабора.Проверяющий		= Истина;
					ЗаписьНабора.Ответственный		= (ВыборкаДетальныеЗаписи.Пользователь = ЭтотОбъект.Ответственный);
					ЗаписьНабора.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
					ЗаписьНабора.Закрыта			= ЭтотОбъект.ДатаЗавершенияВзаимодействия;
					ЗаписьНабора.ВключатьВремя		= ?(Формат(ЭтотОбъект.ПлановаяДата, "ДФ=HH:mm:ss") = "00:00:00", Ложь, Истина);
					ЗаписьНабора.КрайнийСрок		= ЭтотОбъект.ПлановаяДата;
					ЗаписьНабора.Наименование		= Контакт + " | " + ЭтотОбъект.Содержание;
					ЗаписьНабора.Статус				= ЭтотОбъект.СтатусВзаимодействия;
					ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок), Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ", "") 
					+ ?(ЗначениеЗаполнено(Контакт), Контакт + " | ", "")
					+ ЭтотОбъект.Содержание;
					//
					НаборРегистра.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Автор
		НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Пользователь.Установить(ЭтотОбъект.Автор);
		НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборРегистра.Очистить();
		
		ЗаписьНабора = НаборРегистра.Добавить();
		ЗаписьНабора.Пользователь		= ЭтотОбъект.Автор;
		ЗаписьНабора.Объект				= ЭтотОбъект.Ссылка;
		ЗаписьНабора.Клиент				= ЭтотОбъект.Партнер;
		ЗаписьНабора.Поставлено			= ЭтотОбъект.Дата;
		ЗаписьНабора.Номер				= ЭтотОбъект.Номер;
		ЗаписьНабора.Автор				= Истина;
		ЗаписьНабора.Проверяющий		= ПроверяющийАвтор;
		ЗаписьНабора.Ответственный		= (ЭтотОбъект.Ответственный = ЭтотОбъект.Автор);
		ЗаписьНабора.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		ЗаписьНабора.Закрыта			= ЭтотОбъект.ДатаЗавершенияВзаимодействия;
		ЗаписьНабора.ВключатьВремя		= ?(Формат(ЭтотОбъект.ПлановаяДата, "ДФ=HH:mm:ss") = "00:00:00", Ложь, Истина);
		ЗаписьНабора.КрайнийСрок		= ЭтотОбъект.ПлановаяДата;
		ЗаписьНабора.Наименование		= Контакт + " | " + ЭтотОбъект.Содержание;
		ЗаписьНабора.Статус				= ЭтотОбъект.СтатусВзаимодействия;
		ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок), Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ", "") 
										+ ?(ЗначениеЗаполнено(Контакт), Контакт + " | ", "")
										+ ЭтотОбъект.Содержание;
		//
		НаборРегистра.Записать();
		
		// Ответственный
		Если НЕ ЗаписьНабора.Ответственный Тогда
			
			НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Пользователь.Установить(ЭтотОбъект.Ответственный);
			НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
			НаборРегистра.Очистить();
			
			ЗаписьНабора = НаборРегистра.Добавить();
			ЗаписьНабора.Пользователь		= ЭтотОбъект.Ответственный;
			ЗаписьНабора.Объект				= ЭтотОбъект.Ссылка;
			ЗаписьНабора.Клиент				= ЭтотОбъект.Партнер;
			ЗаписьНабора.Поставлено			= ЭтотОбъект.Дата;
			ЗаписьНабора.Номер				= ЭтотОбъект.Номер;
			ЗаписьНабора.Автор				= Ложь;
			ЗаписьНабора.Проверяющий		= ПроверяющийОтветственный;
			ЗаписьНабора.Ответственный		= Истина;
			ЗаписьНабора.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			ЗаписьНабора.Закрыта			= ЭтотОбъект.ДатаЗавершенияВзаимодействия;
			ЗаписьНабора.ВключатьВремя		= ?(Формат(ЭтотОбъект.ПлановаяДата, "ДФ=HH:mm:ss") = "00:00:00", Ложь, Истина);
			ЗаписьНабора.КрайнийСрок		= ЭтотОбъект.ПлановаяДата;
			ЗаписьНабора.Наименование		= Контакт + " | " + ЭтотОбъект.Содержание;
			ЗаписьНабора.Статус				= ЭтотОбъект.СтатусВзаимодействия;
			ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок), Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ", "") 
											+ ?(ЗначениеЗаполнено(Контакт), Контакт + " | ", "")
											+ ЭтотОбъект.Содержание;
			//
			НаборРегистра.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭтотОбъект) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		
		// Для задач, которые связаны с интересом записи делать не надо.
		Если ТипЗнч(ЭтотОбъект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект.БизнесПроцесс.Интерес) И (ТипЗнч(ЭтотОбъект.БизнесПроцесс.Интерес) = Тип("ДокументСсылка.CRM_Интерес"))
			И ЗначениеЗаполнено(ЭтотОбъект.CRM_СостояниеИнтереса) И ЭтотОбъект.Исполнитель = ЭтотОбъект.БизнесПроцесс.Интерес.Ответственный Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ЭтотОбъект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Задание") Тогда
			Проверящющий = ЭтотОбъект.БизнесПроцесс.Проверяющий;
		Иначе
			Проверящющий = Неопределено;
		КонецЕсли;
		
		БизнесПроцесс = ЭтотОбъект.БизнесПроцесс;
		Если ЭтотОбъект.Выполнена Тогда
			СтатусЗадачи = Справочники.CRM_СостоянияСобытий.Завершено;
		ИначеЕсли ЗначениеЗаполнено(БизнесПроцесс) И БизнесПроцесс.Завершен И НЕ ЭтотОбъект.Выполнена Тогда
			СтатусЗадачи = Справочники.CRM_СостоянияСобытий.Отменено;
		ИначеЕсли ЗначениеЗаполнено(БизнесПроцесс) И БизнесПроцесс.Стартован И НЕ БизнесПроцесс.Завершен И НЕ ЭтотОбъект.ПринятаКИсполнению Тогда
			СтатусЗадачи = Справочники.CRM_СостоянияСобытий.Запланировано;
		ИначеЕсли ЗначениеЗаполнено(БизнесПроцесс) И БизнесПроцесс.Стартован И НЕ БизнесПроцесс.Завершен И ЭтотОбъект.ПринятаКИсполнению Тогда
			СтатусЗадачи = Справочники.CRM_СостоянияСобытий.ВРаботе;
		КонецЕсли;
		
		Если СтатусЗадачи = Справочники.CRM_СостоянияСобытий.Отменено Тогда
			Возврат;
		КонецЕсли;
		
		НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Пользователь.Установить(ЭтотОбъект.Автор);
 		НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборРегистра.Очистить();
		
		ЗаписьНабора = НаборРегистра.Добавить();
		ЗаписьНабора.Пользователь		= ЭтотОбъект.Автор;
		ЗаписьНабора.Объект				= ЭтотОбъект.Ссылка;
		ЗаписьНабора.Клиент				= ЭтотОбъект.CRM_Партнер;
		ЗаписьНабора.Поставлено			= ЭтотОбъект.ДатаНачала;
		ЗаписьНабора.Номер				= ЭтотОбъект.Номер;
		ЗаписьНабора.Автор				= Истина;
		ЗаписьНабора.Проверяющий		= (Проверящющий = ЭтотОбъект.Автор);
		ЗаписьНабора.Ответственный		= (ЭтотОбъект.Исполнитель = ЭтотОбъект.Автор);
		ЗаписьНабора.Важность			= ЭтотОбъект.Важность;
		ЗаписьНабора.Закрыта			= ЭтотОбъект.ДатаИсполнения;
		ЗаписьНабора.ВключатьВремя		= ?(Формат(ЭтотОбъект.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
		ЗаписьНабора.КрайнийСрок		= ЭтотОбъект.СрокИсполнения;
		ЗаписьНабора.Наименование		= ЭтотОбъект.Наименование;
		ЗаписьНабора.Статус				= СтатусЗадачи;
		ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок), Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ", "")
										+ ЗаписьНабора.Наименование;
		//
		ПроверяющийЗаписан		= ЗаписьНабора.Проверяющий;
		ОтветственныйЗаписан	= ЗаписьНабора.Ответственный;
		НаборРегистра.Записать();
		
		ЭтоНовоеПоручение = вогБизнесПроцессыИЗадачиСервер.ЭтоНовоеПоручение(ЭтотОбъект); // VOG Солодов В.В. 16.11.2020 CRM-992
		
		Если НЕ ЗаписьНабора.Ответственный
			Или ЭтоНовоеПоручение Тогда // VOG Солодов В.В. 16.11.2020 CRM-992 // Добавлено условие
			
			// Возможны 2 варианта: либо задача на конкретном пользователе, либо на определённой роле исполнителя.
			Если ЗначениеЗаполнено(ЭтотОбъект.РольИсполнителя) Тогда
				
				// + Тищенко В.В.
				// Оригинал
				//СписокПользователей = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(ЭтотОбъект.РольИсполнителя);
				ДополнительныеПараметрыАдресации = Неопределено;
				Если ЭтотОбъект.РольИсполнителя.ИспользуетсяСОбъектамиАдресации Тогда
					ДополнительныеПараметрыАдресации = Новый Структура;
					// { VOG RMV 2019-02-07 изменение №2591
					Если ЗначениеЗаполнено(ЭтотОбъект.БизнесПроцесс) Тогда
					// } VOG RMV 2019-02-07 изменение №2591
					ДополнительныеПараметрыАдресации.Вставить("Автор"			,ЭтотОбъект.БизнесПроцесс.Автор);
					ДополнительныеПараметрыАдресации.Вставить("Подразделение"	,ЭтотОбъект.БизнесПроцесс.Автор.Подразделение);
					// { VOG RMV 2019-02-07 изменение №2591
					Иначе 
						ДополнительныеПараметрыАдресации.Вставить("Автор"			,ЭтотОбъект.Автор);
						ДополнительныеПараметрыАдресации.Вставить("Подразделение"	,ЭтотОбъект.Автор.Подразделение);
					КонецЕсли;					
					// } VOG RMV 2019-02-07 изменение №2591
				КонецЕсли;
				  СписокПользователей = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиСАдресацией(ЭтотОбъект.РольИсполнителя,ДополнительныеПараметрыАдресации);
				// - Тищенко В.В.
				
				Для Каждого Исполнитель Из СписокПользователей Цикл
					
					НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
					НаборРегистра.Отбор.Пользователь.Установить(Исполнитель.Значение);
					НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
					НаборРегистра.Очистить();
					
					ЗаписьНабора = НаборРегистра.Добавить();
					ЗаписьНабора.Пользователь		= Исполнитель.Значение;
					ЗаписьНабора.Объект				= ЭтотОбъект.Ссылка;
					ЗаписьНабора.Клиент				= ЭтотОбъект.CRM_Партнер;
					ЗаписьНабора.Поставлено			= ЭтотОбъект.Дата;
					ЗаписьНабора.Номер				= ЭтотОбъект.Номер;
					ЗаписьНабора.Автор				= Ложь;
					ЗаписьНабора.Проверяющий		= ?(ПроверяющийЗаписан, Ложь, Проверящющий = Исполнитель.Значение);
					ЗаписьНабора.Ответственный		= Истина;
					ЗаписьНабора.Важность			= ЭтотОбъект.Важность;
					ЗаписьНабора.Закрыта			= ЭтотОбъект.ДатаИсполнения;
					ЗаписьНабора.ВключатьВремя		= ?(Формат(ЭтотОбъект.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
					ЗаписьНабора.КрайнийСрок		= ЭтотОбъект.СрокИсполнения;
					ЗаписьНабора.Наименование		= ЭтотОбъект.Наименование;
					ЗаписьНабора.Статус				= СтатусЗадачи;
					ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок), Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ", "")
					+ ЗаписьНабора.Наименование;
					//
					ПроверяющийЗаписан = (ЗаписьНабора.Проверяющий ИЛИ ПроверяющийЗаписан);
					НаборРегистра.Записать();
					
				КонецЦикла;
				
			// ++ VOG Солодов В.В. 23.10.2020 CRM-992
			ИначеЕсли ЭтоНовоеПоручение Тогда
				
				СписокИсполнителей = вогБизнесПроцессыИЗадачиСервер.ПолучитьСписокИсполнителейЗадачиПоручения(ЭтотОбъект.Ссылка);
				
				Для Каждого Исполнитель Из СписокИсполнителей Цикл
					
					НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
					НаборРегистра.Отбор.Пользователь.Установить(Исполнитель.Значение);
					НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
					НаборРегистра.Очистить();
					
					ЗаписьНабора = НаборРегистра.Добавить();
					ЗаписьНабора.Пользователь		= Исполнитель.Значение;
					ЗаписьНабора.Объект				= ЭтотОбъект.Ссылка;
					ЗаписьНабора.Клиент				= ЭтотОбъект.CRM_Партнер;
					ЗаписьНабора.Поставлено			= ЭтотОбъект.Дата;
					ЗаписьНабора.Номер				= ЭтотОбъект.Номер;
					ЗаписьНабора.Автор				= Ложь;
					ЗаписьНабора.Проверяющий		= ?(ПроверяющийЗаписан, Ложь, Проверящющий = Исполнитель.Значение);
					ЗаписьНабора.Ответственный		= Истина;
					ЗаписьНабора.Важность			= ЭтотОбъект.Важность;
					ЗаписьНабора.Закрыта			= ЭтотОбъект.ДатаИсполнения;
					ЗаписьНабора.ВключатьВремя		= ?(Формат(ЭтотОбъект.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
					ЗаписьНабора.КрайнийСрок		= ЭтотОбъект.СрокИсполнения;
					ЗаписьНабора.Наименование		= ЭтотОбъект.Наименование;
					ЗаписьНабора.Статус				= СтатусЗадачи;
					ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок), Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ", "")
					+ ЗаписьНабора.Наименование;
					
					ПроверяющийЗаписан = (ЗаписьНабора.Проверяющий Или ПроверяющийЗаписан);
					НаборРегистра.Записать();
					
				КонецЦикла;
			// -- VOG Солодов В.В. 23.10.2020 CRM-992
			Иначе
				НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
				НаборРегистра.Отбор.Пользователь.Установить(ЭтотОбъект.Исполнитель);
				НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
				НаборРегистра.Очистить();
				
				ЗаписьНабора = НаборРегистра.Добавить();
				ЗаписьНабора.Пользователь		= ЭтотОбъект.Исполнитель;
				ЗаписьНабора.Объект				= ЭтотОбъект.Ссылка;
				ЗаписьНабора.Клиент				= ЭтотОбъект.CRM_Партнер;
				ЗаписьНабора.Поставлено			= ЭтотОбъект.Дата;
				ЗаписьНабора.Номер				= ЭтотОбъект.Номер;
				ЗаписьНабора.Автор				= Ложь;
				ЗаписьНабора.Проверяющий		= ?(ПроверяющийЗаписан, Ложь, Проверящющий = ЭтотОбъект.Исполнитель);
				ЗаписьНабора.Ответственный		= Истина;
				ЗаписьНабора.Важность			= ЭтотОбъект.Важность;
				ЗаписьНабора.Закрыта			= ЭтотОбъект.ДатаИсполнения;
				ЗаписьНабора.ВключатьВремя		= ?(Формат(ЭтотОбъект.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
				ЗаписьНабора.КрайнийСрок		= ЭтотОбъект.СрокИсполнения;
				ЗаписьНабора.Наименование		= ЭтотОбъект.Наименование;
				ЗаписьНабора.Статус				= СтатусЗадачи;
				ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок), Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ", "")
				+ ЗаписьНабора.Наименование;
				//
				ПроверяющийЗаписан = (ЗаписьНабора.Проверяющий ИЛИ ПроверяющийЗаписан);
				НаборРегистра.Записать();
			КонецЕсли;
			
 			Если НЕ ПроверяющийЗаписан И ЗначениеЗаполнено(Проверящющий) Тогда
				
				НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
				НаборРегистра.Отбор.Пользователь.Установить(Проверящющий);
				НаборРегистра.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
				НаборРегистра.Очистить();
				
				ЗаписьНабора = НаборРегистра.Добавить();
				ЗаписьНабора.Пользователь		= Проверящющий;
				ЗаписьНабора.Объект				= ЭтотОбъект.Ссылка;
				ЗаписьНабора.Клиент				= ЭтотОбъект.CRM_Партнер;
				ЗаписьНабора.Поставлено			= ЭтотОбъект.Дата;
				ЗаписьНабора.Номер				= ЭтотОбъект.Номер;
				ЗаписьНабора.Автор				= Ложь;
				ЗаписьНабора.Проверяющий		= Истина;
				ЗаписьНабора.Ответственный		= Ложь;
				ЗаписьНабора.Важность			= ЭтотОбъект.Важность;
				ЗаписьНабора.Закрыта			= ЭтотОбъект.ДатаИсполнения;
				ЗаписьНабора.ВключатьВремя		= ?(Формат(ЭтотОбъект.СрокИсполнения, "ДФ=HH:mm:ss") = "23:59:59", Ложь, Истина);
				ЗаписьНабора.КрайнийСрок		= ЭтотОбъект.СрокИсполнения;
				ЗаписьНабора.Наименование		= ЭтотОбъект.Наименование;
				ЗаписьНабора.Статус				= СтатусЗадачи;
				ЗаписьНабора.ЧтоСделать			= ?(ЗначениеЗаполнено(ЗаписьНабора.КрайнийСрок), Строка(Формат(ЗаписьНабора.КрайнийСрок, "ДФ=dd.MM.yyyy")) + " | ", "")
												+ ЗаписьНабора.Наименование;
				//
				ПроверяющийЗаписан = (ЗаписьНабора.Проверяющий ИЛИ ПроверяющийЗаписан);
				НаборРегистра.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура ДобавитьЗаписьИнформацииОПисьме(Письмо) Экспорт
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Письмо);
	Если ЗначениеЗаполнено(Предмет)
	И (ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
	ИЛИ ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		
		ЗаписьРегистра = РегистрыСведений.CRM_ИнформацияОПисьмах.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Объект = Предмет;
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			Если Письмо.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ОтветНаПисьмо Тогда
				ЗаписьРегистра.ОтправленОтвет = Истина;
			ИначеЕсли Письмо.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ПересылкаПисьма Тогда
				ЗаписьРегистра.Переслан = Истина;
			КонецЕсли;
			ЗаписьРегистра.Записать();
		Иначе
			НоваяЗапись = РегистрыСведений.CRM_ИнформацияОПисьмах.СоздатьМенеджерЗаписи();
			НоваяЗапись.Объект = Предмет;
			Если Письмо.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ОтветНаПисьмо Тогда
				НоваяЗапись.ОтправленОтвет = Истина;
			ИначеЕсли Письмо.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ПересылкаПисьма Тогда
				НоваяЗапись.Переслан = Истина;
			КонецЕсли;
			НоваяЗапись.Записать();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
	И ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		ЗаписьРегистра = РегистрыСведений.CRM_ИнформацияОПисьмах.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Объект = Предмет;
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			ЗаписьРегистра.ПолученОтвет = Истина;
			ЗаписьРегистра.Записать();
		Иначе
			НоваяЗапись	= РегистрыСведений.CRM_ИнформацияОПисьмах.СоздатьМенеджерЗаписи();
			НоваяЗапись.Объект = Предмет;
			НоваяЗапись.ПолученОтвет = Истина;
			НоваяЗапись.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписью шаблона объекта.
//
Процедура ПередЗаписьюПартнераКонтактногоЛицаКонтагента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КорректироватьНапоминание = Ложь;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Партнеры") Тогда
		Если Источник.Ссылка.Пустая() Тогда
			КорректироватьНапоминание = Истина;
		Иначе
			Если НЕ Источник.ЮрФизЛицо = Источник.Ссылка.ЮрФизЛицо Тогда
				
				КорректироватьНапоминание = Истина;
				
			ИначеЕсли Источник.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
				Если НЕ Источник.Ссылка.ОсновнойМенеджер = Источник.ОсновнойМенеджер Тогда
					КорректироватьНапоминание = Истина;
				КонецЕсли;
			Иначе
				Если НЕ Источник.Ссылка.CRM_НапоминатьОДнеРождения = Источник.CRM_НапоминатьОДнеРождения
				ИЛИ НЕ Источник.Ссылка.ОсновнойМенеджер = Источник.ОсновнойМенеджер
				ИЛИ НЕ Источник.Ссылка.ДатаРождения	 = Источник.ДатаРождения Тогда
					КорректироватьНапоминание = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		Если Источник.Ссылка.Пустая() Тогда
			КорректироватьНапоминание = Истина;
		Иначе
			Если НЕ (Источник.Ссылка.CRM_НапоминатьОДнеРождения = Источник.CRM_НапоминатьОДнеРождения)
				ИЛИ НЕ (Источник.Ссылка.ДатаРождения = Источник.ДатаРождения) Тогда
				КорректироватьНапоминание = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("КорректироватьНапоминание", КорректироватьНапоминание);
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписью шаблона объекта.
//
Процедура ПриЗаписиПартнераКонтактногоЛицаКонтагента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.КорректироватьНапоминание Тогда
		CRM_ОповещенияСервер.СформироватьУдалитьНапоминанияОДняхРождения(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

//
//
Функция ВернутьИмяРеквизитаОснования(Тип) Экспорт
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(Тип) Тогда
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(Тип);
		
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				Возврат Реквизит.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет элемент отбора динамического списка.
//
// Параметры:
// Список  - обрабатываемый динамический список,
// ИмяПоля - имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыОтбора = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ИндексЭлементаОтбора = 0;
	
	Пока ИндексЭлементаОтбора < ЭлементыОтбора.Количество() Цикл
		
		ЭлементОтбора = ЭлементыОтбора[ИндексЭлементаОтбора];
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
		   И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			
			ЭлементыОтбора.Удалить(ЭлементОтбора);
			
		Иначе
			
			ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

//
//
Функция ПроверитьПринадлежностьОснованияЖурналуДокументов(Источник) Экспорт
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Источник));
		
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				
				Если ЗначениеЗаполнено(Источник[Реквизит.Имя])
				И МетаданныеДокумента.ВводитсяНаОсновании.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(Источник[Реквизит.Имя])))
				И НЕ Метаданные.ПланыВидовХарактеристик.CRM_ОбъектыЖурналаДокументов.Тип.Типы().Найти(ТипЗнч(Источник[Реквизит.Имя])) = Неопределено Тогда
					Возврат Источник[Реквизит.Имя];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти //ОбработкаРазличныхДанных


#Область ОбновлениеИБ

// Возвращает структуру параметров, необходимых при запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы программы при запуске.
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// Для запрета обновления с неподдерживаемых версий
	Параметры.Вставить("ВерсияДанных", ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя, Истина));
	Параметры.Вставить("ВерсияМетаданных", СокрЛП(Метаданные.Версия));
	
КонецПроцедуры

Процедура CRM_ПрисоединенныеФайлыОбработчик(Источник) Экспорт
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных") ИЛИ Источник.ВладелецФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьНаличиеПрисоединенногоФайлаВЗаписиОбщегоЖурнала(Источник.ВладелецФайла);
КонецПроцедуры

#КонецОбласти
