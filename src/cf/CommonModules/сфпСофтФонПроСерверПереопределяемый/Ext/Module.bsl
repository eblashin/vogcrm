/////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает массив идентификаторов записей телефонного разговора, доступных для прослушивания текущим пользователем
//
// Параметры:
//	ИдентификаторЗвонка	- Число	- Идентификатор звонка
//	ДатаНачало			- Дата	- Дата начала записи
//
// Возвращаемое значение:
//	Массив	- Массив идентификаторов записей телефонного разговора
//
Функция сфпПолучитьСписокЗаписейТелефонногоРазговора(ИдентификаторЗвонка, ДатаНачало) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗвонка",	ИдентификаторЗвонка);
	Запрос.УстановитьПараметр("НачалоЗаписи",			НачалоДня(ДатаНачало));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	сфпЗаписиТелефонныхПереговоров.ИдентификаторЗвонка,
	|	сфпЗаписиТелефонныхПереговоров.ИдентификаторЗаписи,
	|	сфпЗаписиТелефонныхПереговоров.НачалоЗаписи,
	|	сфпЗаписиТелефонныхПереговоров.Пользователь,
	|	сфпЗаписиТелефонныхПереговоров.НомерВнТелефона,
	|	сфпЗаписиТелефонныхПереговоров.Контакт,
	|	сфпЗаписиТелефонныхПереговоров.НомерТелефона,
	|	сфпЗаписиТелефонныхПереговоров.ПродолжительностьЗаписи,
	|	сфпЗаписиТелефонныхПереговоров.ИмяЛинии
	|ИЗ
	|	РегистрСведений.сфпЗаписиТелефонныхПереговоров КАК сфпЗаписиТелефонныхПереговоров
	|ГДЕ
	|	сфпЗаписиТелефонныхПереговоров.ИдентификаторЗвонка = &ИдентификаторЗвонка
	|	И сфпЗаписиТелефонныхПереговоров.НачалоЗаписи >= &НачалоЗаписи";
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗаписей);
КонецФункции // сфпСофтФонПроСервер.ПолучитьСписокЗаписейТелефонногоРазговора()

// Функция создает документ "Телефонный звонок"
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Функция сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, ДанныеЗаполнения) Экспорт
	НовыйЗвонок	= Документы["ТелефонныйЗвонок"].СоздатьДокумент();
	НовыйЗвонок["Дата"]						= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовыйЗвонок["Входящий"]					= СтруктураЗвонка.ВходящийЗвонок;
	НовыйЗвонок["АбонентКакСвязаться"]		= СтруктураЗвонка.НомерТелефона; 
	НовыйЗвонок["Автор"]					= сфпСофтФонПроСервер.сфпТекущийПользователь();
	НовыйЗвонок["Важность"]					= Перечисления["ВариантыВажностиВзаимодействия"].Обычная;
	НовыйЗвонок["Ответственный"]			= НовыйЗвонок["Автор"];
	НовыйЗвонок["сфпИдентификаторЗвонка"]	= СтруктураЗвонка.hCall;
	НовыйЗвонок["сфпИдентификаторЗаписи"]	= СтруктураЗвонка.ИдентификаторЗаписи;
	НовыйЗвонок["сфпДлительностьЗвонка"]	= 0;
	НовыйЗвонок["Тема"]						= сфпСофтФонПроСервер.сфпЗаполнитьТемуТелефонногоЗвонка(НовыйЗвонок["Входящий"], НовыйЗвонок["Дата"]);
	НовыйЗвонок["Описание"]					= сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(НовыйЗвонок["сфпДлительностьЗвонка"]);
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;
	НастройкаПриВходящемЗвонке = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриВходящемЗвонке");
	НастройкаПриИсходящемЗвонке = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпДействиеПриИсходящемЗвонке");
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если НЕ (СтруктураЗвонка.МассивЗвонящих = Неопределено) Тогда
			// по новому алгоритму мы всегда в телефонный звонок подставляем первый элемент из массива звонящих
			// если только не стоит настройка "Открывать телефонный звонок"
			Если (СтруктураЗвонка.ВходящийЗвонок И НастройкаПриВходящемЗвонке = Нстр("ru='Открыть телефонный звонок'")) 
				ИЛИ (НЕ СтруктураЗвонка.ВходящийЗвонок И НастройкаПриИсходящемЗвонке = Нстр("ru='Открыть телефонный звонок'")) Тогда
				Если СтруктураЗвонка.МассивЗвонящих.Количество() = 1 Тогда
					Если Найти(СтруктураЗвонка.МассивЗвонящих[0], "Объект не найден")> 0 Тогда
						СтруктураЗвонка.Контакт = Неопределено;
						НовыйЗвонок["АбонентПредставление"] = НСтр("ru='!!!Не определен!!!'");
					Иначе
						СтруктураЗвонка.Контакт	= СтруктураЗвонка.МассивЗвонящих[0];
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтруктураЗвонка.МассивЗвонящих.Количество() > 0 Тогда
					Если Найти(СтруктураЗвонка.МассивЗвонящих[0], "Объект не найден")> 0 Тогда
						СтруктураЗвонка.Контакт = Неопределено;
						НовыйЗвонок["АбонентПредставление"] = НСтр("ru='!!!Не определен!!!'");
					Иначе
						СтруктураЗвонка.Контакт	= СтруктураЗвонка.МассивЗвонящих[0];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		НовыйЗвонок["АбонентКонтакт"]	= СтруктураЗвонка.Контакт;
		НовыйЗвонок["АбонентПредставление"]	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт);
		Если Найти(Строка(СтруктураЗвонка.Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
			НовыйЗвонок["Комментарий"]	= Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
					+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru = ', номер: '") 
					+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт, СтруктураЗвонка.НомерТелефона)
					+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.'")
					+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.'");
		КонецЕсли;	
	ИначеЕсли СтруктураЗвонка.ВнешнийЗвонок Тогда
		Если СтруктураЗвонка.МассивЗвонящих = Неопределено Тогда
			Если ПустаяСтрока(СтруктураЗвонка.CallerInfoName) Тогда
				НовыйЗвонок["АбонентПредставление"]	= НСтр("ru='!!!Не определен!!!'");
			ИначеЕсли Найти(СтруктураЗвонка.CallerInfoName, СтруктураЗвонка.НомерТелефона) = 0 Тогда
				НовыйЗвонок["АбонентПредставление"]	= СтруктураЗвонка.CallerInfoName;
			Иначе	
				НовыйЗвонок["АбонентПредставление"]	= НСтр("ru='!!!Не определен!!!'");
			КонецЕсли;	
		ИначеЕсли СтруктураЗвонка.МассивЗвонящих.Количество() = 0 Тогда
			Если ПустаяСтрока(СтруктураЗвонка.CallerInfoName) Тогда
				НовыйЗвонок["АбонентПредставление"]	= НСтр("ru='!!!Не определен!!!'");
			ИначеЕсли Найти(СтруктураЗвонка.CallerInfoName, СтруктураЗвонка.НомерТелефона) = 0 Тогда
				НовыйЗвонок["АбонентПредставление"]	= СтруктураЗвонка.CallerInfoName;
			Иначе	
				НовыйЗвонок["АбонентПредставление"]	= НСтр("ru='!!!Не определен!!!'");
			КонецЕсли;	
		КонецЕсли;	
	Иначе	
		Если ПустаяСтрока(СтруктураЗвонка.CalledInfoName) Тогда
			НовыйЗвонок["АбонентПредставление"]	= НСтр("ru='!!!Не определен!!!'");
		Иначе
			НовыйЗвонок["АбонентПредставление"]	= СтруктураЗвонка.CalledInfoName;
		КонецЕсли;	
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если ДанныеЗаполнения.Свойство("Основание") Тогда
			НовыйЗвонок["ВзаимодействиеОснование"] = ДанныеЗаполнения.Основание;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("сфпСтруктураCoMagic") Тогда
			сфпСтруктураВнешнихДанных	= ДанныеЗаполнения.сфпСтруктураCoMagic;
			НовыйЗвонок["сфпCoMagicID"]	= сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
			НовыйЗвонок["Описание"]		= НовыйЗвонок["Описание"] + ?(НовыйЗвонок["Описание"], "", Символы.ПС) 
				+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
				+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
				+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
		КонецЕсли;	
	КонецЕсли;	
	// отдельная врезка на заполнение представление абонента, если звонок совершается из телемаркетинга
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Основание") И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			Если ДанныеЗаполнения.Свойство("Описание") И ЗначениеЗаполнено(ДанныеЗаполнения.Описание) Тогда
				// звоним потенциальному клиенту
				НовыйЗвонок["АбонентПредставление"] = ДанныеЗаполнения.Описание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		НовыйЗвонок.Записать();
		ЗвонокЗаписан	= Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗвонокЗаписан	= Ложь;
	КонецПопытки;
	
	ИмяМероприятия = СтруктураЗвонка.Caller_Destination_Number;
	Если ЗначениеЗаполнено(ИмяМероприятия) И ЗвонокЗаписан Тогда
		ПартнерИнтереса = "";
		
		Если ЗначениеЗаполнено(НовыйЗвонок.АбонентКонтакт) Тогда
			Если ТипЗнч(НовыйЗвонок.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ПартнерИнтереса = НовыйЗвонок.АбонентКонтакт;
				
			ИначеЕсли ТипЗнч(НовыйЗвонок.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				//ПартнерИнтереса = НовыйЗвонок.АбонентКонтакт.Владелец;
			КонецЕсли;
			 
		Иначе
			ПотенциальныйКлиентОбъект = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
			ПотенциальныйКлиентОбъект.Наименование = НовыйЗвонок.АбонентКакСвязаться;
			ПотенциальныйКлиентОбъект.ОбменДанными.Загрузка = Истина;
			ПотенциальныйКлиентОбъект.Записать();
			
			ПартнерИнтереса = ПотенциальныйКлиентОбъект.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПартнерИнтереса) Тогда
			Мероприятие = Справочники.МаркетинговыеМероприятия.НайтиПоНаименованию(ИмяМероприятия, Истина);
			Если Мероприятие.Пустая() Тогда
				МероприятиеОбъект = Справочники.МаркетинговыеМероприятия.СоздатьЭлемент();
				МероприятиеОбъект.Наименование = ИмяМероприятия;
				МероприятиеОбъект.ОбменДанными.Загрузка = Истина;
				МероприятиеОбъект.Записать();
				
				Мероприятие = МероприятиеОбъект.Ссылка;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = НовыйЗвонок.Дата;
			МенеджерЗаписи.Партнер = ПартнерИнтереса;
			МенеджерЗаписи.Сделка = НовыйЗвонок.Ссылка;
			МенеджерЗаписи.ИсточникПервичногоИнтереса = Мероприятие;
			МенеджерЗаписи.КаналПервичногоИнтереса = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_БезУказанияИсточника;
			МенеджерЗаписи.Записать();
		КонецЕсли;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ЗвонокЗаписан И ДанныеЗаполнения.Свойство("Взаимодействие") Тогда
			CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(ДанныеЗаполнения.Взаимодействие, НовыйЗвонок.Ссылка);
		КонецЕсли;	
	КонецЕсли;	
	Возврат НовыйЗвонок.Ссылка;
КонецФункции // сфпСоздатьТелефонныйЗвонок()

// Функция создает документ "CRM_Интерес"
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура данных звонка
//
Функция сфпСоздатьИнтерес(СтруктураЗвонка) Экспорт
	НовыйИнтерес = Документы["CRM_Интерес"].СоздатьДокумент();
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт	= сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		КонецЕсли;
	КонецЕсли;	
	
	НовыйИнтерес["Автор"] 				= сфпСофтФонПроСервер.сфпТекущийПользователь();
	НовыйИнтерес["Дата"] 				= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовыйИнтерес["ДокументОснование"] 	= СтруктураЗвонка.НовыйЗвонок;
	НовыйИнтерес["Ответственный"] 		= НовыйИнтерес["Автор"];
		
	ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		НовыйИнтерес["Организация"] = ЗначениеНастройки;
	Иначе
		НовыйИнтерес["Организация"] = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
	КонецЕсли;
	
	НовыйИнтерес["Подразделение"]       = НовыйИнтерес["Автор"].Подразделение;
	НовыйИнтерес["Офис"]       			= НовыйИнтерес["Подразделение"].CRM_Офис;	
	НовыйИнтерес["СостояниеИнтереса"]   = Справочники.CRM_СостоянияИнтересов.ВыявлениеПотребностей;	
	НовыйИнтерес["Тема"]				= НСтр("ru='#Создан автоматически средствами СофтФон'");
	НовыйИнтерес["ТипУслуги"]			= Справочники.CRM_ТипУслуги.ПоставкаТоварыУслуги;	
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если Найти(Строка(СтруктураЗвонка.Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
			НовыйИнтерес["Описание"]	= НовыйИнтерес["Описание"] + Символы.ПС  + Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
					+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru = ', номер: '") 
					+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт, СтруктураЗвонка.НомерТелефона)
					+ Символы.ПС + НСтр("ru='К данному абоненту в доступе отказано.'")
					+ НСтр("ru=' Для разрешения работы с абонентом обратитесь к руководителю или администратору.'");
		ИначеЕсли ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			НовыйИнтерес["Партнер"]			= СтруктураЗвонка.Контакт;
			НовыйИнтерес["КонтактноеЛицо"]  = НовыйИнтерес["Партнер"].CRM_ОсновноеКонтактноеЛицо;
		ИначеЕсли ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			НовыйИнтерес["КонтактноеЛицо"]	= СтруктураЗвонка.Контакт;
			НовыйИнтерес["Партнер"]			= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
		ИначеЕсли ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		    Клиент = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
			Если ЗначениеЗаполнено(Клиент) Тогда
				НовыйИнтерес["Партнер"]	= Клиент;			
			Иначе				
				НовыйИнтерес["ПотенциальныйКлиент"]	= СтруктураЗвонка.Контакт;			
			КонецЕсли;
		Иначе
			НовыйИнтерес["Описание"]	= НовыйИнтерес["Описание"] + Символы.ПС  + Строка(ТипЗнч(СтруктураЗвонка.Контакт)) + ": "
					+ сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(СтруктураЗвонка.Контакт) + НСтр("ru = ', номер: '") 
					+ сфпСофтФонПроСервер.сфпПолучитьПредставлениеНомераТелефона(СтруктураЗвонка.Контакт, СтруктураЗвонка.НомерТелефона);
		КонецЕсли;
	КонецЕсли;	
	Попытка
		НовыйИнтерес.Записать();
	Исключение
		Возврат Документы.CRM_Интерес.ПустаяСсылка();
	КонецПопытки;
	
	НовоеВзаимодействие						   	= Документы["CRM_Взаимодействие"].СоздатьДокумент();
	НовоеВзаимодействие["Автор"] 			   	= сфпСофтФонПроСервер.сфпТекущийПользователь();
	НовоеВзаимодействие["ВидВзаимодействия"]   	= Справочники.CRM_ВидыВзаимодействий.ОбзвонКлиентов;
	НовоеВзаимодействие["Баллы"]               	= НовоеВзаимодействие["ВидВзаимодействия"].Баллы;
	НовоеВзаимодействие["Дата"]                	= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовоеВзаимодействие["ДокументОснование"]   	= НовыйИнтерес.Ссылка;
	НовоеВзаимодействие["КонтактноеЛицо"]      	= НовыйИнтерес.КонтактноеЛицо;
	НовоеВзаимодействие["ОжидаемаяВыручка"]    	= НовыйИнтерес.ОжидаемаяВыручка;
	НовоеВзаимодействие["Организация"]         	= НовыйИнтерес.Организация;
	НовоеВзаимодействие["Ответственный"]       	= НовоеВзаимодействие["Автор"];
	НовоеВзаимодействие["ПлановаяДата"]        	= НовоеВзаимодействие["Дата"];
	НовоеВзаимодействие["Партнер"]             	= НовыйИнтерес.Партнер;
	НовоеВзаимодействие["Подразделение"]       	= НовыйИнтерес.Подразделение;
	НовоеВзаимодействие["ПотенциальныйКлиент"] 	= НовыйИнтерес.ПотенциальныйКлиент;
	НовоеВзаимодействие["СостояниеИнтереса"]   	= НовыйИнтерес.СостояниеИнтереса;
	НовоеВзаимодействие["Содержание"]          	= НСтр("ru='#Создан автоматически средствами СофтФон'"); 
	НовоеВзаимодействие["СтатусВзаимодействия"] = Справочники.CRM_СостоянияСобытий.Запланировано;
	
	Попытка
		НовоеВзаимодействие.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		НовыйИнтерес.Записать();
	Исключение
	КонецПопытки;
	Возврат НовыйИнтерес.Ссылка;
КонецФункции

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЕЙСТВИЙ

// Процедура добавляет в массив структуру действий
//
// Параметры:
//	МассивДействий	- Массив	- Массив доступных действий
//	Наименование	- Строка	- Наименование действия
//	Действие		- Строка	- Имя процедуры-обработчика действия, процедура должна располагаться в этом модуле
//
Процедура сфпДобавитьДействие(МассивДействий, Наименование, Действие)
	СтруктураДействия = Новый Структура;
	СтруктураДействия.Вставить("Наименование",	Наименование);
	СтруктураДействия.Вставить("Действие",		Действие);
	МассивДействий.Добавить(СтруктураДействия);
КонецПроцедуры // сфпДобавитьДействие()

// Функция возвращает массив структур доступных действий при звонке
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив структур доступных действий
//
Функция сфпПолучитьМассивДоступныхДействий() Экспорт
	
	ИмяКонфигурации = Метаданные.Имя;
	
	МассивДействий = Новый Массив;
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Нет действий'"),						"");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть телефонный звонок'"),			"сфпОткрытьТелефонныйЗвонок");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть мероприятие'"),			    "сфпОткрытьМероприятие");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть карточку контакта'"),			"сфпОткрытьКарточкуКонтакта");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Регистрация обращения'"),				"сфпРегистрацияОбращения");
	//сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть интерес'"),					"сфпОткрытьИнтерес");
	//+вог
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть мероприятие'"),				"сфпОткрытьМероприятие");
	//-вог
	Если ИмяКонфигурации = "CRM" Тогда
		сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть счет на оплату'"),		"сфпОткрытьСчетНаОплату");
	Иначе
		сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть счет на оплату'"),		"сфпОткрытьЗаказКлиента");
	КонецЕсли;
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть список анкет'"),				"сфпОткрытьСписокАнкет");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть досье клиента'"),				"сфпОткрытьДосьеКлиента");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть дебиторскую задолженность'"),	"сфпОткрытьДебиторскуюЗадолженность");
	сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть ведомость взаиморасчетов'"),	"сфпОткрытьВедомостьВзаиморасчетов");
	Если ИмяКонфигурации = "CRM" Тогда
		сфпДобавитьДействие(МассивДействий,	Нстр("ru='Открыть продажи'"),				"сфпОткрытьПродажи");
	КонецЕсли;
		
	Возврат МассивДействий;
	
КонецФункции // сфпПолучитьМассивДоступныхДействий()

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ COMAGIC

// Функция возвращает идентификатор CoMagic
//
// Парамеры:
//	Ссылка	- ДокументСсылка	- Документ
//
// Возвращаемое значение:
//	Строка	- Идентификатор CoMagic
//
Функция сфпПолучитьCoMagicID(Ссылка) Экспорт
	CoMagicID = "";
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Если ТипЗнч(Ссылка.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			Если ПустаяСтрока(Ссылка.АбонентКонтакт.сфпCoMagicID) Тогда
				CoMagicID	= Ссылка.сфпCoMagicID;
		    Иначе
				CoMagicID	= Ссылка.АбонентКонтакт.сфпCoMagicID;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Ссылка.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Если ПустаяСтрока(Ссылка.АбонентКонтакт.сфпCoMagicID) Тогда
				Если ПустаяСтрока(Ссылка.АбонентКонтакт.Владелец.сфпCoMagicID) Тогда
					CoMagicID	= Ссылка.сфпCoMagicID;
				Иначе	
					CoMagicID	= Ссылка.АбонентКонтакт.Владелец.сфпCoMagicID;
				КонецЕсли;
		    Иначе
				CoMagicID	= Ссылка.АбонентКонтакт.сфпCoMagicID;
			КонецЕсли;
		Иначе
			CoMagicID	= Ссылка.сфпCoMagicID;
		КонецЕсли;
	Иначе
		CoMagicID	= Ссылка.сфпCoMagicID;
	КонецЕсли;	
	Возврат CoMagicID;
КонецФункции // сфпПолучитьCoMagicID(()	
