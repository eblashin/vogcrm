// Функция возвращает массив, содержащий подразделение пользователя и все подразделения,
// вышестоящие по иерархии от подразделения пользователя.
//
// Параметры:
//	Пользователь				- СправочникСсылка	- Пользователь
//	ВключатьСвоеПодразделение	- Булево			- Признак добавления в массив подразделения пользователя.
//
// Возвращаемое значение:
//	Массив	- Массив подразделений.
//
Функция ПолучитьВышестоящиеПодразделения(Пользователь, ВключатьСвоеПодразделение = Ложь, ВключатьРабочиеГруппы = Ложь) Экспорт
	МассивПодразделений = Новый Массив;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ПодразделениеПользователя = Пользователь.Подразделение;
		РодительПодразделенияПользователя = ПодразделениеПользователя.Родитель;
		ТекПодразделение = ПодразделениеПользователя;
		Если ЗначениеЗаполнено(ТекПодразделение) Тогда
			Если ВключатьСвоеПодразделение Тогда
				// Добавляем подразделение пользователя.
				МассивПодразделений.Добавить(ТекПодразделение);
			КонецЕсли;	
			// Добавляем все вышестоящие подразделения.
			Пока ЗначениеЗаполнено(ТекПодразделение.Родитель) Цикл
				ТекПодразделение = ТекПодразделение.Родитель;
				МассивПодразделений.Добавить(ТекПодразделение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ВключатьРабочиеГруппы Тогда
		МассивПодразделений.Добавить(РодительПодразделенияПользователя); // дубль, но он полезен
		КоличествоПодразделений = МассивПодразделений.Количество();
		ИндексСледующего = КоличествоПодразделений - 1;
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтруктураПредприятия.Ссылка
		               |ИЗ
		               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		               |ГДЕ
		               |	СтруктураПредприятия.Родитель = &Родитель";
		Пока ИндексСледующего < КоличествоПодразделений Цикл
			Запрос.Параметры.Вставить("Родитель", МассивПодразделений[ИндексСледующего]);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивПодразделений.Добавить(Выборка.Ссылка);
				КоличествоПодразделений = КоличествоПодразделений + 1;
			КонецЦикла;
			
			ИндексСледующего = ИндексСледующего + 1;
		КонецЦикла;
	КонецЕсли;
	Возврат МассивПодразделений;
КонецФункции // ПолучитьВышестоящиеПодразделения()

// Функция возвращает массив, содержащий все подразделение, входящие в переданный офис.
//
// Параметры:
//	Офис	- СправочникСсылка	- Офис
//
// Возвращаемое значение:
//	Массив	- Массив подразделений.
//
Функция ПолучитьВсеПодразделенияОфиса(Офис) Экспорт
	МассивПодразделений = Новый Массив;
	Если ЗначениеЗаполнено(Офис) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Офис", Офис);
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтруктураПредприятия.Ссылка КАК Подразделение
		               |ИЗ
		               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		               |ГДЕ
		               |	СтруктураПредприятия.CRM_Офис = &Офис";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если МассивПодразделений.Найти(Выборка.Подразделение) = Неопределено Тогда
				МассивПодразделений.Добавить(Выборка.Подразделение);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Возврат МассивПодразделений;
КонецФункции // ПолучитьВсеПодразделенияОфиса()

// Функция возращает массив, содержащий руководителя подразделения пользователя и руководителей всех подразделений,
// вышестоящих по иерарахии от подразделения пользовавтеля.
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//
// Возвращаемое значение:
//	Массив	- Массив руководителей.
//
Функция ПолучитьРуководителейПользователя(Пользователь) Экспорт
	МассивРуководителей = Новый Массив;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		МассивПодразделений = ПолучитьВышестоящиеПодразделения(Пользователь, Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Пользователи.Ссылка КАК Пользователь
		               |ИЗ
		               |	Справочник.Пользователи КАК Пользователи
		               |ГДЕ
		               |	Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
		Для Каждого ЭлементМассива Из МассивПодразделений Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементМассива.ТекущийРуководитель) Тогда
				Продолжить;
			КонецЕсли;
			Запрос.УстановитьПараметр("ФизическоеЛицо",	ЭлементМассива.ТекущийРуководитель);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если МассивРуководителей.Найти(Выборка.Пользователь) = Неопределено Тогда
					МассивРуководителей.Добавить(Выборка.Пользователь);
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат МассивРуководителей;
КонецФункции // ПолучитьРуководителейПользователя()

// Функция возвращаем массив всех пользователей подразделений, вышестоящих по иерархии
// от подразделения пользователя.
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//
// Возвращаемое значение:
//	Массив	- Массив пользователей.
//
Функция ПолучитьПользователейВышестоящихПодразделений(Пользователь) Экспорт
	МассивПользователей = Новый Массив;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		МассивПодразделений = ПолучитьВышестоящиеПодразделения(Пользователь, Ложь);
		СписокПодразделений = Новый СписокЗначений;
		СписокПодразделений.ЗагрузитьЗначения(МассивПодразделений);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Пользователи.Ссылка КАК Пользователь
		               |ИЗ
		               |	Справочник.Пользователи КАК Пользователи
		               |ГДЕ
		               |	НЕ Пользователи.ПометкаУдаления
		               |	И Пользователи.Подразделение В(&СписокПодразделений)";
		МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");	
	КонецЕсли;
	Возврат МассивПользователей;
КонецФункции // ПолучитьПользователейВышестоящихПодразделений()

// функция возвращает массив подразделений, в которых пользователь - руководитель.
// 
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь
//  ПодчиненныеПодразделения  - Булево - включаем подчиненные  по иерархии подразделения или нет.
//
// Возвращаемое значение:
//	МассивПодразделений	- Массив подразделений.
//
Функция ПолучитьПодразделенияВКоторыхРуководитель(Пользователь, ПодчиненныеПодразделения = Ложь) Экспорт
	
	МассивПодразделений = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.ТекущийРуководитель = &ТекущийРуководитель";
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.УстановитьПараметр("ТекущийРуководитель", Пользователь);
	Иначе
		Запрос.УстановитьПараметр("ТекущийРуководитель", Пользователь.ФизическоеЛицо);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивПодразделений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		Если ПодчиненныеПодразделения Тогда
			CRM_МетодыМодулейМенеджеровСправочников.ПолучитьПодчиненныеПодразделенияПользователя(ВыборкаДетальныеЗаписи.Ссылка, МассивПодразделений);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПодразделений;
		
КонецФункции // ПолучитьПодразделенияВКоторыхРуководитель()

Функция ПолучитьПользователейПодразделения(Знач ТекПодразделение, ВсеПодразделения = Ложь) Экспорт
	Запрос = Новый Запрос;
	ТекстЗапроса = ("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И Пользователи.Подразделение В ИЕРАРХИИ(&ТекПодразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование
	|");
	
	Если ВсеПодразделения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Пользователи.Подразделение В ИЕРАРХИИ(&ТекПодразделение)","");
	Иначе
		Запрос.УстановитьПараметр("ТекПодразделение", ТекПодразделение);		
	КонецЕсли;		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции	
