////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-процессы и задачи".
//  
////////////////////////////////////////////////////////////////////////////////

// Помечает на удаление задачи бизнес-процесса БизнесПроцессСсылка.
//
// Параметры:
//  БизнесПроцессСсылка  - бизнес-процесс.
//  ПометкаУдаления  - Булево - значение свойства ПометкаУдаления.
//
Процедура УдалитьОповещенияПриУстановкеПометкиУдаления(БизнесПроцессСсылка, ПометкаУдаления) Экспорт
	
	Если ПометкаУдаления Тогда
		Попытка
			Запрос = Новый Запрос("ВЫБРАТЬ
				|	Задачи.Ссылка КАК Ссылка 
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК Задачи
				|ГДЕ
				|	Задачи.БизнесПроцесс = &БизнесПроцесс");
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				CRM_ОповещенияСервер.УдалитьОповещения(Выборка.Ссылка);
			КонецЦикла;
		Исключение
			ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, 
				БизнесПроцессСсылка.Метаданные(), БизнесПроцессСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Процедура устанавливает оформление задач.
//
Процедура УстановитьОформлениеЗадач(Знач УсловноеОформление) Экспорт
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для важных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Важность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВариантыВажностиЗадачи.Высокая;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для принятых задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(255,252,218);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(105,72,47);
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для выполненных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(245,251,247);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(104,144,87);
	ЭлементЦветаОформления.Использование = Истина;

КонецПроцедуры

// Функция возвращает описание предмета задача в виде текстовой строки.
// 
// Параметры:
//  ПредметСсылка  – ЛюбаяСсылка – объект ссылочного типа, который
//                                 выступает в качестве предмета задачи.
//
// Возвращаемое значение:
//   Строка 
// 
Функция ПредметСтрокой(ПредметСсылка) Экспорт
	
	ПредметЗаполнен = ПредметСсылка <> Неопределено И НЕ ПредметСсылка.Пустая();
	Если НЕ ПредметЗаполнен Тогда
		Возврат НСтр("ru = 'не задан'");
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(ПредметСсылка))) Тогда
		Возврат Строка(ПредметСсылка);
	Иначе
		ПредставлениеОбъекта = ПредметСсылка.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			 ПредставлениеОбъекта = ПредметСсылка.Метаданные().Представление();
		КонецЕсли;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)", Строка(ПредметСсылка), ПредставлениеОбъекта);
	КонецЕсли;
		
КонецФункции


// Процедура устанавливает нового ответственного в выбранных документах.
//
// Параметры:
//  МассивДокументов 	- массив выбранных документов;
//  НовыйОтветственный  - новый ответственный.
//
Функция УстановитьНовогоОтветственного(Знач МассивДокументов, НовыйОтветственный) Экспорт
	
	НовоеПодразделение = НовыйОтветственный.Подразделение;
	
	// ++ Харченко Д.И. № 000002778 - 19.09.2018 / 
	ТекстОшибок = "";
	// Харченко Д.И. № 000002778 - 19.09.2018 / 
	Для Каждого ТекущийДокумент Из МассивДокументов Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			Если ТекущийДокумент.Менеджер = НовыйОтветственный Тогда Продолжить; КонецЕсли;
		Иначе
			Если ТекущийДокумент.Ответственный = НовыйОтветственный Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		МетаданныеОбъекта = ТекущийДокумент.Ссылка.Метаданные();
		
		Попытка
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				СтарыйОтветственный = ТекущийДокумент.Менеджер;
			Иначе
				СтарыйОтветственный = ТекущийДокумент.Ответственный;
			КонецЕсли;
			Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Подразделение", МетаданныеОбъекта) Тогда
				ИмяРеквизита = Нстр("ru = 'Подразделение'");
			ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("CRM_Подразделение", МетаданныеОбъекта) Тогда
				ИмяРеквизита = Нстр("ru = 'CRM_Подразделение'");
			ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПодразделениеПолучатель", МетаданныеОбъекта) Тогда
				ИмяРеквизита = Нстр("ru = 'ПодразделениеПолучатель'");
			Иначе
				ИмяРеквизита = "";
			КонецЕсли;
			
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				CRM_ОповещенияСервер.УдалитьОповещения(ТекущийДокумент, ТекущийДокумент.Менеджер, Истина);
			Иначе
				CRM_ОповещенияСервер.УдалитьОповещения(ТекущийДокумент, ТекущийДокумент.Ответственный, Истина);
			КонецЕсли;
			
			ТекущийДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				ТекущийДокументОбъект.Менеджер = НовыйОтветственный;
			Иначе
				ТекущийДокументОбъект.Ответственный = НовыйОтветственный;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяРеквизита) И ТекущийДокументОбъект[ИмяРеквизита] <> НовоеПодразделение Тогда
				Если ЗначениеЗаполнено(НовоеПодразделение) Тогда
					ТекущийДокументОбъект[ИмяРеквизита] = НовоеПодразделение;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				Если НЕ ЗначениеЗаполнено(НовыйОтветственный.Подразделение) Тогда
					Возврат НСтр("ru = 'У выбранного пользователя не заполнено подразделение. Перенаправление невозможно!'");
				КонецЕсли;
				ТекущийДокументОбъект.Подразделение = ТекущийДокументОбъект.Ответственный.Подразделение;
				ТекущийДокументОбъект.Офис = ТекущийДокументОбъект.Ответственный.Подразделение.CRM_Офис;
				Если ЗначениеЗаполнено(ТекущийДокументОбъект.ТипУслуги) Тогда
					// Если типа услуги нет в массиве своих услуг, то его очищаем.
					МассивСвоихТиповУслуг = CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(ТекущийДокументОбъект.Подразделение);
					Если (МассивСвоихТиповУслуг.Количество() > 0) И (МассивСвоихТиповУслуг.Найти(ТекущийДокументОбъект.ТипУслуги) = Неопределено) Тогда
						ТекущийДокументОбъект.ТипУслуги = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
					КонецЕсли;	
				КонецЕсли;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	CRM_Взаимодействие.Ссылка
				|ИЗ
				|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
				|ГДЕ
				|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
				|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
				|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)";
				
				Запрос.УстановитьПараметр("ДокументОснование", ТекущийДокумент);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					вОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					вОбъект.Ответственный = НовыйОтветственный;
					вОбъект.Подразделение = НовыйОтветственный.Подразделение;
					Попытка
						вОбъект.Записать();
					Исключение
						Возврат НСтр("ru = 'Не удалось обновить данные взаимодействия!'");
					КонецПопытки;
				КонецЦикла;
				
			КонецЕсли;
			
			// ++ Харченко Д.И. № 000002778 - 19.09.2018 / 
			ТекущийДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзБП", Истина);	
			// -- Харченко Д.И. № 000002778 - 19.09.2018
			
			Если ТипЗнч(ТекущийДокументОбъект) = Тип("ДокументОбъект.CRM_Мероприятие") Тогда //Павелко, CRM-324, 13.02.2020
				ТекущийДокументОбъект.ДополнительныеСвойства.Вставить("ТребуетсяОбновитьКомандировку");				
			КонецЕсли;	
			
			ТекущийДокументОбъект.Записать();
			
			// Если объект перенаправил на себя текущий пользователь, то оповещать его об этом не надо.
			Если НЕ НовыйОтветственный = Пользователи.ТекущийПользователь() Тогда
				ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(НовыйОтветственный,Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах, ТекущийДокументОбъект.Ссылка);
				Если НЕ (ПараметрыОповещения = Неопределено) Тогда
					CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
				КонецЕсли;
			КонецЕсли;
			
			Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(ТекущийДокументОбъект.Ссылка) Тогда
				БизнесПроцесс = CRM_БизнесПроцессыСервер.ПолучитьБизнесПроцессПоОбъекту(ТекущийДокументОбъект.Ссылка);
				
				ПараметрКоманды = Новый Массив;
				ПараметрКоманды.Добавить(БизнесПроцесс);
				
				CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(ПараметрКоманды, НовыйОтветственный);
			КонецЕсли;
			// +CRM не переносить в объединенные решения
			// Если у нового ответственного указан определенный уровень доступа,
			// то надо соответствующий уровень доступа добавить Партнеру
			
			Если (ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.CRM_Интерес")
			ИЛИ ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю")
			ИЛИ ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
			ИЛИ ТипЗнч(ТекущийДокумент) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"))
			И ЗначениеЗаполнено(ТекущийДокумент.Партнер) Тогда
				Если ЗначениеЗаполнено(НовыйОтветственный.CRM_УровеньДоступа)
				И ТекущийДокумент.Партнер.CRM_УровниДоступа.Найти(НовыйОтветственный.CRM_УровеньДоступа,"УровеньДоступа") = Неопределено И ТекущийДокумент.Партнер.CRM_УровниДоступа.Количество() > 0 Тогда
					ПартнерОбъект = ТекущийДокумент.Партнер.ПолучитьОбъект();
					НоваяСтрокаУровня = ПартнерОбъект.CRM_УровниДоступа.Добавить();
					НоваяСтрокаУровня.УровеньДоступа = НовыйОтветственный.CRM_УровеньДоступа;
					ПартнерОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
				
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.CRM_Телемаркетинг")
			И ЗначениеЗаполнено(НовыйОтветственный.CRM_УровеньДоступа) Тогда
				Для Каждого СтрокаУчастника ИЗ ТекущийДокумент.Участники Цикл
					Если СтрокаУчастника.Партнер.CRM_УровниДоступа.Найти(НовыйОтветственный.CRM_УровеньДоступа,"УровеньДоступа") = Неопределено И СтрокаУчастника.Партнер.CRM_УровниДоступа.Количество() > 0 Тогда
						ПартнерОбъект = СтрокаУчастника.Партнер.ПолучитьОбъект();
						НоваяСтрокаУровня = ПартнерОбъект.CRM_УровниДоступа.Добавить();
						НоваяСтрокаУровня.УровеньДоступа = НовыйОтветственный.CRM_УровеньДоступа;
						ПартнерОбъект.Записать();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// -CRM не переносить в объединенные решения
		Исключение
			
			Если ТекущийДокументОбъект.ДополнительныеСвойства.Свойство("ТекстОшибкиЗаписи") Тогда
				ТекстОшибок = ТекстОшибок + ТекущийДокументОбъект.ДополнительныеСвойства.ТекстОшибкиЗаписи + Символы.ПС;
			КонецЕсли;
				
		КонецПопытки;
	КонецЦикла;
	
	Возврат СокрЛП(ТекстОшибок);
КонецФункции

Функция ПолучитьИзбранныхПолучателей(ПараметрКоманды) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ИзбранныеПолучатели.Получатель
	               |ИЗ
	               |	РегистрСведений.CRM_ИзбранныеПолучатели КАК CRM_ИзбранныеПолучатели
	               |ГДЕ
	               |	CRM_ИзбранныеПолучатели.Пользователь = &Пользователь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_ИзбранныеПолучатели.Получатель.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
КонецФункции // ПолучитьИзбранныхПолучателей()

Процедура ЗавершитьВзавимодействияПоЗадаче(МассивВзаимодействий) Экспорт
	
	Для Каждого Взаимодействие ИЗ МассивВзаимодействий Цикл
		ИзмененноеВзаимодействие = Взаимодействие.ПолучитьОбъект();
		ИзмененноеВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
		ИзмененноеВзаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		ИзмененноеВзаимодействие.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(ИзмененноеВзаимодействие.Результат) Тогда
			ИзмененноеВзаимодействие.Результат = "Задача выполнена";
		КонецЕсли;
		ИзмененноеВзаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереадресоватьЗапланированныеВзаимодействияПоЗадаче(ЗадачаСтарая, ЗадачаНовая) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Взаимодействие.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |ГДЕ
	                      |	CRM_Взаимодействие.ДокументОснование = &ЗадачаСтарая
	                      |	И CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Запланировано)");
	Запрос.УстановитьПараметр("ЗадачаСтарая", ЗадачаСтарая);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Ссылка.ПолучитьОбъект();
		Взаимодействие.ДокументОснование = ЗадачаНовая;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПринятьЗапланированныеВзаимодействияПоЗадаче(Задача, Пользователь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Взаимодействие.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |ГДЕ
	                      |	CRM_Взаимодействие.ДокументОснование = &ЗадачаСтарая
	                      |	И CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Запланировано)");
	Запрос.УстановитьПараметр("ЗадачаСтарая", Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Ссылка.ПолучитьОбъект();
		Взаимодействие.Ответственный = Пользователь;
		Взаимодействие.Подразделение = Пользователь.Подразделение;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьАктивныеВзаимодействияПеренаправить(Задача, НоваяЗадача, Ответственный) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.ВРаботе);
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.Запланировано);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Задача);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЕСТЬNULL(CRM_Взаимодействие.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)) КАК Взаимодействие
	|ПОМЕСТИТЬ ЗадачаИВзавимодействия
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|		ПО ЗадачаИсполнителя.Ссылка = CRM_Взаимодействие.ДокументОснование
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА ЗадачаИсполнителя.CRM_Личная
	|				ТОГДА ЗадачаИсполнителя.CRM_Личная
	|			ИНАЧЕ ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.НезависимыйПроцесс)
	|		КОНЕЦ
	|	И CRM_Взаимодействие.СтатусВзаимодействия В(&МассивСтатусов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИВзавимодействия.Взаимодействие
	|ИЗ
	|	ЗадачаИВзавимодействия КАК ЗадачаИВзавимодействия
	|ГДЕ
	|	НЕ ЗадачаИВзавимодействия.Взаимодействие = ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Взаимодействие.ПолучитьОбъект();
		Взаимодействие.ДокументОснование = НоваяЗадача;
		Взаимодействие.Ответственный = Ответственный;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьАктивныеВзаимодействияЗавершить(Задача) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.ВРаботе);
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.Запланировано);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Задача);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЕСТЬNULL(CRM_Взаимодействие.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)) КАК Взаимодействие
	|ПОМЕСТИТЬ ЗадачаИВзавимодействия
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|		ПО ЗадачаИсполнителя.Ссылка = CRM_Взаимодействие.ДокументОснование
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА ЗадачаИсполнителя.CRM_Личная
	|				ТОГДА ЗадачаИсполнителя.CRM_Личная
	|			ИНАЧЕ ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.НезависимыйПроцесс)
	|		КОНЕЦ
	|	И CRM_Взаимодействие.СтатусВзаимодействия В(&МассивСтатусов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИВзавимодействия.Взаимодействие
	|ИЗ
	|	ЗадачаИВзавимодействия КАК ЗадачаИВзавимодействия
	|ГДЕ
	|	НЕ ЗадачаИВзавимодействия.Взаимодействие = ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Взаимодействие.ПолучитьОбъект();
		Взаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
		Взаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		Взаимодействие.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(Взаимодействие.Результат) Тогда
			Взаимодействие.Результат = НСтр("ru = 'Задача перенаправлена'");
		КонецЕсли;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСрокИсполненияПоВариантуУстановкиДаты(ВариантУстановкиДаты, Знач СрокИсполнения = Неопределено) Экспорт //Павелко, Таск 000000793, 18.11.2019
	
	Если СрокИсполнения = Неопределено Или СрокИсполнения = '00010101' Тогда
		СрокИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Если ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.Сейчас Тогда
		
		СрокИсполнения	= СрокИсполнения;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.Через15Минут Тогда	
		
		СрокИсполнения	= СрокИсполнения + 900;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезЧас Тогда	
		
		СрокИсполнения	= СрокИсполнения + 3600;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.Через4Часа Тогда	
		
		СрокИсполнения	= СрокИсполнения + 14400;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.Через8Часов Тогда	
		
		СрокИсполнения	= СрокИсполнения + 28800;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень Тогда	
		
		СрокИсполнения	= СрокИсполнения + 86400;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриДня Тогда	
		
		СрокИсполнения	= СрокИсполнения + 259200;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезНеделю Тогда	
		
		СрокИсполнения	= СрокИсполнения + 604800;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели Тогда	
		
		СрокИсполнения	= СрокИсполнения + 1209600;
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезМесяц Тогда	
		
		СрокИсполнения	= ДобавитьМесяц(СрокИсполнения, 1);
		
	ИначеЕсли ВариантУстановкиДаты = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца Тогда	
		
		СрокИсполнения	= ДобавитьМесяц(СрокИсполнения, 3); 
		
	КонецЕсли;
	
	Возврат СрокИсполнения;
	
КонецФункции	

Функция ЭтоПоручение(КартаПроцесс) Экспорт
	Если ТипЗнч(КартаПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Возврат КартаПроцесс = Справочники.CRM_КартыМаршрутов.Поручение;
	Иначе
		Возврат КартаПроцесс.CRM_КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение;
	КонецЕсли;
КонецФункции

Функция ЭтоНезависимыйПроцесс(КартаПроцесс) Экспорт
	
	Если ТипЗнч(КартаПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		Возврат КартаПроцесс.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	Иначе
		Возврат КартаПроцесс.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	КонецЕсли;
	
КонецФункции
