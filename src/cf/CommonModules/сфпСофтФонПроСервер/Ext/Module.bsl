
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает Истина, если вход в сеанс выполнил внешний пользователь
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Истина, если вход в сеанс выполнил внешний пользователь, иначе Ложь
//
Функция сфпЭтоСеансВнешнегоПользователя() Экспорт
	Возврат ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
 КонецФункции // сфпЭтоСеансВнешнегоПользователя()
 
 // Функция проверяет использование СофтФона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СофтФона
//
Функция сфпИспользоватьСофтФон() Экспорт
	Возврат Константы.сфпИспользоватьСофтФон.Получить();
КонецФункции // сфпИспользоватьСофтФон()

// Функция проверяет использование автоматического определения Бизнес-региона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования автоматического определения Бизнес-региона
//
Функция сфпИспользоватьАвтоопределениеБизнесРегиона() Экспорт
	Возврат Константы.сфпПланНумерацииАвтоопределениеБизнесРегиона.Получить();
КонецФункции // сфпИспользоватьАвтоопределениеБизнесРегиона()

// Функция возвращает значение настройки для переданного пользователя
//
// Параметры:
//	ИмяНастройки	- Строка			- Имя настройки в ПВХ НастройкиПользователей
//	Пользователь	- СправочникСсылка	- Пользователь, для которого получается настройка
//
// Возвращаемое значение:
//	Произвольный	- Значение настройки.
//
Функция сфпПолучитьЗначениеНастройкиПользователя(ИмяНастройки, Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь	= сфпТекущийПользователь();
	КонецЕсли;	
	НастройкаПВХ = ПланыВидовХарактеристик.CRM_НастройкиПользователей[ИмяНастройки];
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",	Пользователь);
	Запрос.УстановитьПараметр("Настройка",		НастройкаПВХ);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НастройкиПользователей.Значение
	               |ИЗ
	               |	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	               |ГДЕ
	               |	НастройкиПользователей.Пользователь = &Пользователь
	               |	И НастройкиПользователей.Настройка = &Настройка";
	Выборка = Запрос.Выполнить().Выбрать();
	ПустоеЗначение = НастройкаПВХ.ТипЗначения.ПривестиЗначение();
	Если Выборка.Количество() = 0 Тогда
		Возврат ПустоеЗначение;
	ИначеЕсли Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат Выборка.Значение;
		Иначе
			Возврат ПустоеЗначение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;
КонецФункции // сфпПолучитьЗначениеНастройкиПользователя() 

// Функция возвращает структуру параметров сервера
//
// Параметры:
//	Нет.
//
Функция сфпПараметрыСервера() Экспорт 
	Структура = Новый Структура;
	Структура.Вставить("ПрефиксВыходаВМежгород",				Константы.сфпПрефиксВыходаВМежгород.Получить());
	Структура.Вставить("ПрефиксВыходаНаМеждународную",			Константы.сфпПрефиксВыходаНаМеждународную.Получить());
	Структура.Вставить("МаксимальнаяДлинаВнутреннихНомеров",	Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить());
	Структура.Вставить("ПоследниеЦифрыТелефонногоНомера",		Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить());
	Структура.Вставить("КодСтраны",								Константы.сфпКодСтраны.Получить());
	Структура.Вставить("КодГорода",								Константы.сфпКодГорода.Получить());
	Структура.Вставить("ПрефиксВыходаВГород",					Константы.сфпПрефиксВыходаВГород.Получить());
	Структура.Вставить("ИспользоватьИсториюЗвонков",			Константы.сфпИспользоватьИсториюЗвонков.Получить());
	Структура.Вставить("СтрокаПодключенияИстории",				Константы.сфпСтрокаПодключенияИстории.Получить());
	Структура.Вставить("ИспользоватьМаршрутизацию",				Константы.сфпИспользоватьМаршрутизацию.Получить());
	Возврат Структура;
КонецФункции // сфпПараметрыСервера()

// Процедура сохраняет в константах префиксы и настройки, полученные от сервера СофтФона
//
// Параметры:
//	СтруктураНастроек	- Соответствие	- Префиксы и настройки, полученные от сервера СофтФона
//
Процедура сфпЗаписатьПараметрыСервераНативнаяКомпонента(СтруктураНастроек) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если СтруктураНастроек.Свойство("PrefCity") И НЕ (СтруктураНастроек["PrefCity"]  = Неопределено) Тогда
		Константы.сфпПрефиксВыходаВГород.Установить(СтруктураНастроек["PrefCity"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("PrefContry") И НЕ (СтруктураНастроек["PrefContry"] = Неопределено) Тогда
		Константы.сфпПрефиксВыходаВМежгород.Установить(СтруктураНастроек["PrefContry"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("PrefWorld") И НЕ (СтруктураНастроек["PrefWorld"] = Неопределено) Тогда
		Константы.сфпПрефиксВыходаНаМеждународную.Установить(СтруктураНастроек["PrefWorld"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("InternalNumMaxLen") И НЕ (СтруктураНастроек["InternalNumMaxLen"] = Неопределено) Тогда
		Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Установить(СтруктураНастроек["InternalNumMaxLen"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("InternalNumMinLen") И НЕ (СтруктураНастроек["InternalNumMinLen"] = Неопределено) Тогда
		Константы.сфпМинимальнаяДлинаВнутреннихНомеров.Установить(СтруктураНастроек["InternalNumMinLen"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("LastNumberCount") И НЕ (СтруктураНастроек["LastNumberCount"] = Неопределено) Тогда
		Константы.сфпПоследниеЦифрыТелефонногоНомера.Установить(СтруктураНастроек["LastNumberCount"]);
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("SQLConnectionString") И НЕ (СтруктураНастроек["SQLConnectionString"] = Неопределено) Тогда
		Константы.сфпСтрокаПодключенияИстории.Установить(СтруктураНастроек["SQLConnectionString"]);	
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("UseRouter") И НЕ (СтруктураНастроек["UseRouter"] = Неопределено) Тогда
		Константы.сфпИспользоватьМаршрутизацию.Установить(СтруктураНастроек["UseRouter"]);	
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("HistoryOn") И НЕ (СтруктураНастроек["HistoryOn"] = Неопределено) Тогда
		Константы.сфпИспользоватьИсториюЗвонков.Установить(СтруктураНастроек["HistoryOn"]);	
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("UseHistory") И НЕ (СтруктураНастроек["UseHistory"] = Неопределено) Тогда
		Константы.сфпИспользоватьИсториюЗвонков.Установить(СтруктураНастроек["UseHistory"]);	
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("UseSMS") И НЕ (СтруктураНастроек.Свойство("UseSMS") = Неопределено) Тогда
		Константы.сфпИспользоватьSMS.Установить(СтруктураНастроек["UseSMS"]);	
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("ContryCode") И НЕ (СтруктураНастроек["ContryCode"] = Неопределено) Тогда
		Константы.сфпКодСтраны.Установить(СтруктураНастроек["ContryCode"]);	
	КонецЕсли;	
	Если СтруктураНастроек.Свойство("CityCode") И НЕ (СтруктураНастроек["CityCode"] = Неопределено) Тогда
		Константы.сфпКодГорода.Установить(СтруктураНастроек["CityCode"]);	
	КонецЕсли;		
	Если СтруктураНастроек.Свойство("WSDL") И НЕ (СтруктураНастроек["WSDL"] = Неопределено) Тогда
		СтрокаWSDL			= СтруктураНастроек["WSDL"];
		ПозицияРазделителя	= Найти(СтрокаWSDL, "/wsdl/");
		СтрокаПути			= Лев(СтрокаWSDL, ПозицияРазделителя - 1);
		СтрокаПути			= СтрЗаменить(СтрокаПути, "http://", "");
		ПозицияРазделителя	= Найти(СтрокаПути, ":");
		сфпИмяСервера		= Лев(СтрокаПути, ПозицияРазделителя - 1);
		сфпПорт				= Сред(СтрокаПути, ПозицияРазделителя + 1);
		Константы.сфпИмяСервера.Установить(сфпИмяСервера);	
		Константы.сфпПорт.Установить(сфпПорт);	
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // сфпЗаписатьПараметрыСервераНативнаяКомпонента()

// Процедура сохраняет в константах префиксы и настройки, полученные от сервера СофтФона
//
// Параметры:
//	СтруктураНастроек	- Соответствие	- Префиксы и настройки, полученные от сервера СофтФона
//
Процедура сфпЗаписатьПараметрыСервераComОбъект(СтруктураНастроек) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ (СтруктураНастроек.Получить("PrefCity") = Неопределено) Тогда
		Константы.сфпПрефиксВыходаВГород.Установить(СтруктураНастроек["PrefCity"]);
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("PrefContry") = Неопределено) Тогда
		Константы.сфпПрефиксВыходаВМежгород.Установить(СтруктураНастроек["PrefContry"]);
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("PrefWorld") = Неопределено) Тогда
		Константы.сфпПрефиксВыходаНаМеждународную.Установить(СтруктураНастроек["PrefWorld"]);
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("InternalNumMaxLen") = Неопределено) Тогда
		Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Установить(СтруктураНастроек["InternalNumMaxLen"]);
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("InternalNumMinLen") = Неопределено) Тогда
		Константы.сфпМинимальнаяДлинаВнутреннихНомеров.Установить(СтруктураНастроек["InternalNumMinLen"]);
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("LastNumberCount") = Неопределено) Тогда
		Константы.сфпПоследниеЦифрыТелефонногоНомера.Установить(СтруктураНастроек["LastNumberCount"]);
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("SQLConnectionString") = Неопределено) Тогда
		Константы.сфпСтрокаПодключенияИстории.Установить(СтруктураНастроек["SQLConnectionString"]);	
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("UseRouter") = Неопределено) Тогда
		Константы.сфпИспользоватьМаршрутизацию.Установить(СтруктураНастроек["UseRouter"]);	
	КонецЕсли;	
	Если НЕ (СтруктураНастроек.Получить("HistoryOn") = Неопределено) Тогда
		Константы.сфпИспользоватьИсториюЗвонков.Установить(СтруктураНастроек["HistoryOn"]);	
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("UseHistory") = Неопределено) Тогда
		Константы.сфпИспользоватьИсториюЗвонков.Установить(СтруктураНастроек["UseHistory"]);	
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("UseSMS") = Неопределено) Тогда
		Константы.сфпИспользоватьSMS.Установить(СтруктураНастроек["UseSMS"]);	
	КонецЕсли;	
	Если НЕ (СтруктураНастроек.Получить("ContryCode") = Неопределено) Тогда
		Константы.сфпКодСтраны.Установить(СтруктураНастроек["ContryCode"]);	
	КонецЕсли;	
	Если НЕ (СтруктураНастроек.Получить("CityCode") = Неопределено) Тогда
		Константы.сфпКодГорода.Установить(СтруктураНастроек["CityCode"]);	
	КонецЕсли;		
	Если НЕ (СтруктураНастроек.Получить("WSDL") = Неопределено) Тогда
		СтрокаWSDL			= СтруктураНастроек["WSDL"];
		ПозицияРазделителя	= Найти(СтрокаWSDL, "/wsdl/");
		СтрокаПути			= Лев(СтрокаWSDL, ПозицияРазделителя - 1);
		СтрокаПути			= СтрЗаменить(СтрокаПути, "http://", "");
		ПозицияРазделителя	= Найти(СтрокаПути, ":");
		сфпИмяСервера		= Лев(СтрокаПути, ПозицияРазделителя - 1);
		сфпПорт				= Сред(СтрокаПути, ПозицияРазделителя + 1);
		Константы.сфпИмяСервера.Установить(сфпИмяСервера);	
		Константы.сфпПорт.Установить(сфпПорт);	
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // сфпЗаписатьПараметрыСервераComОбъект()

// Функция возвращает текущего пользователя
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь
//
Функция сфпТекущийПользователь() Экспорт
	Возврат Пользователи.АвторизованныйПользователь();
КонецФункции // сфпТекущийПользователь()

// Функция возвращает текущее время на сервере
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Дата	- Текущая дата и время
//
Функция сфпТекущаяДата() Экспорт
	Возврат ТекущаяДата();	
КонецФункции // сфпТекущаяДата()

// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  Ссылка       - Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция сфпПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции // сфпПолучитьЗначениеРеквизита()

// Функция получает картинку контакта
//
// Параметры:
//	Контакт		- СправочникСсылка	- Контакт
//	ПоУмолчанию	- Булево			- Признак возвращения аватара по умолчанию, в случае его отсутствия
//
// Возвращаемое значение:
//	Строка	- Двоичное представление картинки
//
Функция сфпПолучитьАватарКонтакта(Контакт, ПоУмолчанию = Истина) Экспорт
	АватарНайден	= Ложь;
	Строка64		= "";
	Попытка
		Если НЕ (Контакт.Метаданные().Реквизиты.Найти("CRM_Фотография") = Неопределено) И ЗначениеЗаполнено(Контакт.CRM_Фотография) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(РаботаСФайлами.ДанныеФайла(Контакт.CRM_Фотография).СсылкаНаДвоичныеДанныеФайла);
			Если (ДвоичныеДанные.Размер() > 0) И (ДвоичныеДанные.Размер() < 2000000) Тогда
				Строка64		= Base64Строка(ДвоичныеДанные);
				АватарНайден	= Истина;
			КонецЕсли;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если НЕ АватарНайден И ПоУмолчанию Тогда
		Строка64 = Base64Строка(БиблиотекаКартинок.сфпАватарПоУмолчанию.ПолучитьДвоичныеДанные());
	КонецЕсли;
	Возврат Строка64;	
КонецФункции // сфпПолучитьАватарКонтакта()

// Функция возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного).
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция сфпРолиДоступны(ИменаРолей, Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь	= сфпТекущийПользователь();
	КонецЕсли;	
	Возврат Пользователи.РолиДоступны(ИменаРолей, Пользователь);
КонецФункции // сфпРолиДоступны()

// Функция проверяет использование регламентного задания обновления телефонных книг
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования регламентного задания обновления телефонных книг
//
Функция сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг()
	Возврат Константы.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг.Получить();
КонецФункции // сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг()

// Функция возвращает признак использования подразделений пользователей
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование подразделений пользователей
//
Функция сфпИспользоватьПодразделенияПользователей() Экспорт
	Если Метаданные.Справочники.Найти("СтруктураПредприятия") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции // сфпИспользоватьПодразделенияПользователей()	

// Функция возвращает признак использования групп пользователей
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование групп пользователей
//
Функция сфпИспользоватьГруппыПользователей() Экспорт
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей") = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции // сфпИспользоватьГруппыПользователей()	

// Процедура записывает окончание разговора в документ "Телефонный звонок"
//
// Параметры:
//	НовыйЗвонок	- ДокументСсылка	- Ссылка на документ
//  НовыйОтветственный 	- СправочникСсылка 	- Новый ответственный звонка
//
Процедура сфпЗаписатьОкончаниеЗвонка(НовыйЗвонок, НовыйОтветственный = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);	
	ДатаОкончания							= сфпТекущаяДата();
	ДокументОбъект							= НовыйЗвонок.ПолучитьОбъект();
	ДокументОбъект.сфпДлительностьЗвонка	= (ДатаОкончания - НовыйЗвонок.Дата);
	ДокументОбъект.Описание					= сфпЗаполнитьОписаниеТелефонногоЗвонка(ДокументОбъект.сфпДлительностьЗвонка);
	Если НЕ (НовыйОтветственный = Неопределено) Тогда
		ДокументОбъект.Ответственный = НовыйОтветственный;
	КонецЕсли;
	Попытка
		ДокументОбъект.Записать();
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // сфпЗаписатьОкончаниеЗвонка()

// Функция проверяет существует ли данный справочник в конфигурации
//
// Параметры:
//	ИмяСправочника	- Строка	- Имя справочника в конфигурации
//
// Возвращаемое значение:
//	Булево	- Признак наличия справочника
//
Функция сфпСправочникСуществует(ИмяСправочника) Экспорт
	ОбъектМетаданных = Метаданные.Справочники.Найти(ИмяСправочника);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции	

// Функция формирует список объектов для выбора пользователем среди найденного массива номеров
//
// Параметры:
//	МассивЗвонящих	- Массив - Массив найденных объектов по номеру телефона
//  ТолькоПартнеры  - Булево - В список добавлять только партнёров и КЛ
//
// Возвращаемое значение:
//	СписокКонтактов - СписокЗначений - Список значений для выбора
//
Функция сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(МассивЗвонящих, ТолькоПартнеры = Ложь) Экспорт
	СписокКонтактов = Новый СписокЗначений;	
	Для Каждого Контакт Из МассивЗвонящих Цикл
		Если Найти(Строка(Контакт), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
			// работаем под неполными правами, контакт нам не доступен, в список выбора не подставляем
			Продолжить;
		КонецЕсли;					
		Если Тип("СправочникСсылка.КонтактныеЛицаПартнеров") = ТипЗнч(Контакт) Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + " <" + Строка(сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт)) + ">" + Нстр("ru = ' (контактное лицо партнера)'"));
		ИначеЕсли Тип("СправочникСсылка.ФизическиеЛица") = ТипЗнч(Контакт) И НЕ ТолькоПартнеры Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (физическое лицо)'"));
		ИначеЕсли Тип("СправочникСсылка.Пользователи") = ТипЗнч(Контакт) И НЕ ТолькоПартнеры Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (пользователь)'"));
		ИначеЕсли Тип("СправочникСсылка.Партнеры") = ТипЗнч(Контакт) Тогда
			Если Контакт.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (партнер, физ. лицо)'"));
			Иначе
				СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (партнер, юр. лицо)'"));
			КонецЕсли;
		// +CRM3		
		ИначеЕсли Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") = ТипЗнч(Контакт) Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (потенциальный клиент)'"));
		// -CRM3
		ИначеЕсли Тип("СправочникСсылка.Организации") = ТипЗнч(Контакт) И НЕ ТолькоПартнеры Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (организация)'"));
		//+вог
		ИначеЕсли Тип("СправочникСсылка.вогТорговыеТочки") = ТипЗнч(Контакт) Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (торговая точка)'"));
		ИначеЕсли Тип("СправочникСсылка.вогЮридическиеЛица") = ТипЗнч(Контакт) Тогда
			СписокКонтактов.Добавить(Контакт, Строка(Контакт) + Нстр("ru = ' (юр. лицо)'"));
		//-вог
		Иначе
			// в список найденных не добавляем
		КонецЕсли;	
	КонецЦикла;	
	Возврат СписокКонтактов;
КонецФункции	

// Функция преобразовывает входящий массив в список значений
//
// Параметры:
//	МассивЗвонящих	- Массив - Массив звонящих
//
// Возвращаемое значение:
//	СписокЗвонящих - Список значений - Преобразованынй список значений
//
Функция сфпПреобразоватьМассивЗвонящихВСписокЗначений(МассивЗвонящих) Экспорт
	СписокЗвонящих = Новый СписокЗначений;
	Для Каждого ЭлементМассива Из МассивЗвонящих Цикл
		СписокЗвонящих.Добавить(ЭлементМассива);
	КонецЦикла;		
	Возврат СписокЗвонящих;
КонецФункции	

// Процедура корректирует в случае необходимости значение абонента в документе "Телефонный звонок"
//
// Параметры:
//	КонтактноеЛицо		- СправочникСсылка	- Ссылка на Контактное Лицо
//	Абонент				- СправочникСсылка	- Ссылка на Партнера
//	ТелефонныйЗвонок	- ДокументСсылка	- Ссылка на документ
//
Процедура сфпСкорректироватьАбонентаУТелефонногоЗвонка(КонтактноеЛицо = Неопределено, Абонент, ТелефонныйЗвонок) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ТелефонныйЗвонок = Неопределено Тогда Возврат КонецЕсли;
	Если НЕ (ТипЗнч(ТелефонныйЗвонок) = Тип("ДокументСсылка.ТелефонныйЗвонок")) Тогда
		Возврат;
	КонецЕсли;
	Если КонтактноеЛицо = ТелефонныйЗвонок.АбонентКонтакт Тогда Возврат; КонецЕсли;
	Если КонтактноеЛицо <> Неопределено Тогда
		АбонентНовый = КонтактноеЛицо;
	Иначе
		АбонентНовый = Абонент;
	КонецЕсли;		
	Если АбонентНовый <> ТелефонныйЗвонок.АбонентКонтакт Тогда
		ДокументОбъект = ТелефонныйЗвонок.ПолучитьОбъект();
		ДокументОбъект.АбонентКонтакт = АбонентНовый;
		ДокументОбъект.АбонентПредставление = Строка(ДокументОбъект.АбонентКонтакт);
		Попытка  
			ДокументОбъект.Записать();
			Записали = Истина;
		Исключение
			Записали = Ложь;
		КонецПопытки;
		Если Записали Тогда
			сфпЗаписатьАбонентаЗвонкаВРегистрИсторииЗвонков(ТелефонныйЗвонок, ТелефонныйЗвонок.сфпИдентификаторЗвонка);
		КонецЕсли;			
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры	

// Функция возвращает ссылку на документ-основание переданного документа
//
// Параметры:
//	ДокументСсылка	- ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//	ДокументОснование - ДокументСсылка - Ссылка на документ-основание
//
Функция сфпВернутьОснованиеДокумента(ДокументСсылка) Экспорт
	МетаданныеДокумента = ДокументСсылка.Метаданные(); 
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ДокументОснование",МетаданныеДокумента) Тогда
		Возврат ДокументСсылка.ДокументОснование;
	ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Основание",МетаданныеДокумента) Тогда
		Возврат ДокументСсылка.Основание;
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
КонецФункции	

// Функция возвращает тему для заполнения переданного звонка
//
// Параметры:
//	НаправлениеЗвонка	- Булево 			 - Истина - входящий, Ложь - исходящий звонок
//	ДатаЗвонка			- Дата				 - Дата звонка
//
// Возвращаемое значение:
//	ТемаЗвонка - Строка - Тема звонка
//
Функция сфпЗаполнитьТемуТелефонногоЗвонка(НаправлениеЗвонка, ДатаЗвонка) Экспорт
	// тема звонка = Направление звонка (Входящий/Исходящий) + Время звонка с секундами
	ТемаЗвонка = "";
	Если НаправлениеЗвонка Тогда
		ТемаЗвонка = ТемаЗвонка + Нстр("ru = 'Входящий: '") + Формат(ДатаЗвонка, "ДЛФ=В");
	Иначе
		ТемаЗвонка = ТемаЗвонка + Нстр("ru = 'Исходящий: '") + Формат(ДатаЗвонка, "ДЛФ=В");		
	КонецЕсли;
	Возврат ТемаЗвонка;
КонецФункции

// Функция возвращает описание для заполнения переданного звонка
//
// Параметры:
//	ДлительностьЗвонка	- Дата - Продолжительность звонка
//
// Возвращаемое значение:
//	ОписаниеЗвонка - Строка - Описание звонка
//
Функция сфпЗаполнитьОписаниеТелефонногоЗвонка(ДлительностьЗвонка) Экспорт
	// Описание: Длительность - [длительность звонка]
	ОписаниеЗвонка = Нстр("ru = 'Длительность - '") + Формат(Дата('00010101') + ДлительностьЗвонка, "ДЛФ=T; ДП=0:00:00");
	Возврат ОписаниеЗвонка;
КонецФункции

// Функция возвращает значение ФО "Фиксировать первичный интерес"
//
// Возвращаемое значение:
//	Булево - Значение опции
//
Функция сфпПолучитьЗначениеКонстантыФиксироватьПервичныйИнтерес() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес");
КонецФункции	

// Функция вычисляет необходимость появления кнопки "Добавить телефон"
//
//	 Параметры:
//	  Абонент		 		- СправочникСсылка - Проверяяемый абонент на наличие номера телефона
//    АбонентКакСвязаться	 - Строка - Номер телефона
//
//   Возвращаемое значение:
//    Булево - Необходимость показа кнопки "Добавить телефон"
//
Функция сфпПроверитьНаличиеНомераТелефонаУАбонента(Абонент, АбонентКакСвязаться) Экспорт

	Если НЕ ЗначениеЗаполнено(Абонент) Тогда 
		Возврат Ложь;
	КонецЕсли;
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда Возврат Ложь; КонецЕсли;		
	СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(АбонентКакСвязаться);
	ПредставлениеКакСвязаться = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
	Если ТипЗнч(Абонент) = Тип("СправочникСсылка.Партнеры") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Абонент, Неопределено, Перечисления.ТипыКонтактнойИнформации.Телефон);
		Для Каждого СтрокаКИ ИЗ ТаблицаКИ Цикл
			СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);	
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НомерТелефона = ПредставлениеКакСвязаться Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Абонент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Неопределено, Абонент, Перечисления.ТипыКонтактнойИнформации.Телефон);
		Для Каждого СтрокаКИ ИЗ ТаблицаКИ Цикл
			СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);	
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НомерТелефона = ПредставлениеКакСвязаться Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Абонент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюФизЛиц(Абонент, Перечисления.ТипыКонтактнойИнформации.Телефон);
		Для Каждого СтрокаКИ ИЗ ТаблицаКИ Цикл
			СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);	
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НомерТелефона = ПредставлениеКакСвязаться Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Абонент) = Тип("СправочникСсылка.Пользователи") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Абонент, Перечисления.ТипыКонтактнойИнформации.Телефон);
		Для Каждого СтрокаКИ ИЗ ТаблицаКИ Цикл
			СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);	
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НомерТелефона = ПредставлениеКакСвязаться Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Абонент) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Абонент, Перечисления.ТипыКонтактнойИнформации.Телефон);
		Для Каждого СтрокаКИ ИЗ ТаблицаКИ Цикл
			СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);	
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НомерТелефона = ПредставлениеКакСвязаться Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции // сфпПроверитьНаличиеНомераТелефонаУАбонента()

// Функция возвращает значения реквизитов "Офис" и "Подразделение" переданного пользователя
//
// Параметры:
//	Пользователь - СправочникСсылка - Ссылка на пользователя
//
// Возвращаемое значение:
//	Структура - Структура из значений офиса и подразделения пользователя
//
Функция сфпПолучитьЗначенияРеквизитовПользователя(Пользователь) Экспорт
	Возврат Новый Структура("Подразделение, Офис", Пользователь.Подразделение, Пользователь.Подразделение.CRM_Офис)
КонецФункции // сфпПолучитьЗначенияРеквизитовПользователя()

// Функция возвращает всех контактых лиц переданного партнера
//
// Параметры:
//	Партнер - СправочникСсылка - Ссылка на партнера
//
// Возвращаемое значение:
//	МассивКЛ - - Массив - Массив полученных контактных лиц
//
Функция сфпПолучитьВсехКонтактныхЛицПартнера(Партнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =   "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеров.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // сфпПолучитьВсехКонтактныхЛицПартнера()

// Процедура установки параметра сеанса Софтфона
//
// Параметры:
//	ЗначениеПеречисления - Значение перечисления - Значение устанавливаемого перечисления в параметрах сеанса
//
Процедура сфпУстановитьПараметрыСеанса(ЗначениеПеречисления) Экспорт
	ПараметрыСеанса.сфпВариантИспользованияСофтфона = ЗначениеПеречисления;
КонецПроцедуры // сфпУстановитьПараметрыСеанса()

// Функция возвращает текущее значение параметра сеанса "Вариант использования Софтфона"
//
// Возвращаемое значение:
//	Значение параметра сеанса или неопределено
//
Функция сфпПрочитатьПараметрыСеанса() Экспорт
	//{[+](фрагмент добавлен), Виноградов Дмитрий 21.05.2018 9:09:55 ID 000001869
	Попытка
	//}Администратор 21.05.2018 9:09:55
		Если ЗначениеЗаполнено(ПараметрыСеанса.сфпВариантИспользованияСофтфона) Тогда
			Возврат ПараметрыСеанса.сфпВариантИспользованияСофтфона;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	//{[+](фрагмент добавлен), Виноградов Дмитрий 21.05.2018 9:10:23 ID
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	//}Администратор 21.05.2018 9:10:23
КонецФункции  // сфпПрочитатьПараметрыСеанса()

// Функция формирует дату из даты и времени.
//
// Параметры:
//	ПараметрДата	- Дата	- Дата
//	ПараметрВремя	- Дата	- Время
//
// Возвращаемое значение:
//	Дата	- Дата
//
Функция сфпСформироватьДатуИзДатыИВремени(ПараметрДата, ПараметрВремя) Экспорт
	Возврат НачалоДня(ПараметрДата) + (ПараметрВремя - Дата("00010101"));
КонецФункции // сфпСформироватьДатуИзДатыИВремени()

// Функция разделяет дату на дату и время, возвращает структуру с полями "Дата", "Время".
//
// Параметры:
//	ПараметрДата	- Дата	- Дата
//
// Возвращаемое значение:
//	Структура	- Структура с датой м временем.
//
Функция сфпРазделитьДатаНаДатуИВремя(ПараметрДата) Экспорт
	Возврат Новый Структура("Дата,Время", НачалоДня(ПараметрДата), Дата("00010101") + (ПараметрДата - НачалоДня(ПараметрДата)));
КонецФункции // сфпРазделитьДатаНаДатуИВремя()

// Функция определяет входящий или исходящий звонок
//
// Параметры:
//	НомерСобытия	- Число	- Состояние звонка
//
// Возвращаемое значение:
//	Булево	- Признак входящего звонка
//
Функция сфпОпределитьВходящийЗвонокПриЗагрузкеИстории(НаправлениеЗвонка) 
	Если НаправлениеЗвонка = 1 Тогда
		Возврат Ложь;
	ИначеЕсли НаправлениеЗвонка = 2 
		ИЛИ НаправлениеЗвонка = 3
		ИЛИ НаправлениеЗвонка = 4 
		ИЛИ НаправлениеЗвонка = 6  Тогда
		Возврат Истина;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // сфпОпределитьВходящийЗвонок()

// Функция возвращает ссылку на первого найденного контрагента
// Используется только в тех объединенных решениях, где есть справочник "Контрагенты", связанный с "Партнерами"
//
// Параметры:
//	Партнер	- СправочникСсылка - Ссылка на партнера
//
// Возвращаемое значение:
//	Контрагент - СправочникСсылка - Ссылка контрагента
//
Функция сфпПолучитьКонтрагентаПартнера(Партнер) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники["Контрагенты"].ПустаяСсылка();
	КонецЕсли
КонецФункции	

// Функция проверяет используется ли в конфигурации ограничение по телефонным звонкам
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования ограничения
//
Функция сфпИспользоватьОграничениеПоказаТелефонныхЗвонков() Экспорт
	Возврат Константы.сфпОграничениеНаПросмотрТелефонныхЗвонков.Получить();
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция сфпРазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С НОМЕРОМ ТЕЛЕФОНА

// Функция возвращает номер телефона в котором убраны все символы, кроме цифр
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Очищенный номер телефона
//
Функция сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона) Экспорт
	ПозицияРазделителя = Найти(НомерТелефона, "@");
	Если ПозицияРазделителя > 0 Тогда
		НомерТелефона	= Лев(НомерТелефона, ПозицияРазделителя - 1); 	
	КонецЕсли;	
	СтрокаЦифр = "0123456789";
	ОчищенныйНомер = "";
	ДлинаНомера = СтрДлина(НомерТелефона);
	Для НомерСимвола = 1 По ДлинаНомера Цикл
		ТекущийСимвол = Сред(НомерТелефона, НомерСимвола, 1);
		Если Найти(СтрокаЦифр, ТекущийСимвол) > 0 Тогда
			ОчищенныйНомер = ОчищенныйНомер + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	// убираем из начала полученного внутреннего номера лидирующие нули, если такие есть
	сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
	МаксимальнаяДлинаВнутреннихНомеров  = сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров; 
	Если Лев(ОчищенныйНомер, 3) = "000" И СтрДлина(ОчищенныйНомер) <= МаксимальнаяДлинаВнутреннихНомеров Тогда
		ОчищенныйНомер = Сред(ОчищенныйНомер, 4); 
	ИначеЕсли Лев(ОчищенныйНомер, 2) = "00" И СтрДлина(ОчищенныйНомер) <= МаксимальнаяДлинаВнутреннихНомеров Тогда
		ОчищенныйНомер = Сред(ОчищенныйНомер, 3); 
	ИначеЕсли Лев(ОчищенныйНомер, 1) = "0" И СтрДлина(ОчищенныйНомер) <= МаксимальнаяДлинаВнутреннихНомеров Тогда
		ОчищенныйНомер = Сред(ОчищенныйНомер, 2); 
	КонецЕсли; 
	Возврат ОчищенныйНомер;
КонецФункции // сфпУбратьИзНомераТелефонаВсеПрефиксы()

// Функция убирает из номера все префиксы выхода на линию
//
// Параметры:
//	НомерТелефона - Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Номер телефона без префиксов
//
Функция сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(НомерТелефона) Экспорт
	НомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	Если СтрДлина(НомерТелефона) > 10 Тогда
		ПрефиксВыхода = Константы.сфпПрефиксВыходаВГород.Получить();
		Если Найти(НомерТелефона, ПрефиксВыхода) = 1 Тогда
			НомерТелефона = Сред(НомерТелефона, СтрДлина(ПрефиксВыхода) + 1);
		КонецЕсли;	
		Если СтрДлина(НомерТелефона) > 10 Тогда
			ПрефиксВыхода = Константы.сфпПрефиксВыходаВМежгород.Получить();
			Если Найти(НомерТелефона, ПрефиксВыхода) = 1 Тогда
				НомерТелефона = Сред(НомерТелефона, СтрДлина(ПрефиксВыхода) + 1);
			КонецЕсли;	
		КонецЕсли;	
		Если СтрДлина(НомерТелефона) > 10 Тогда
			ПрефиксВыхода = Константы.сфпПрефиксВыходаНаМеждународную.Получить();
			Если Найти(НомерТелефона, ПрефиксВыхода) = 1 Тогда
				НомерТелефона = Сред(НомерТелефона, СтрДлина(ПрефиксВыхода) + 1);
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли СтрДлина(НомерТелефона) < 10 Тогда
		сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
		КодГорода 	= сфпПараметрыСервера.КодГорода;
		Если НЕ ПустаяСтрока(КодГорода) Тогда
			Если СтрДлина(НомерТелефона) > (10 - СтрДлина(КодГорода)) Тогда
				ПрефиксВыхода = Константы.сфпПрефиксВыходаВГород.Получить();
				Если Найти(НомерТелефона, ПрефиксВыхода) = 1 Тогда
					НомерТелефона = Сред(НомерТелефона, СтрДлина(ПрефиксВыхода) + 1);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	Возврат НомерТелефона;
КонецФункции // сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию()

// Функция по полю "Представление" заполняет структуры полей для номера телефона
//
// Параметры:
//	Представление	- Строка	- Представление номера телефона
//
// Возвращаемое значение:
//	Структура	- Структура телефонного номера
//
Функция сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Представление) Экспорт
	КодСтраны		= "";
	КодГорода		= "";
	НомерТелефона	= "";
	Добавочный		= "";
	Комментарий		= "";
	ТекСтр = СокрЛП(Представление);
	// Вырежем добавочный номер с комментарием
	ПозДоб = Найти(ВРЕГ(ТекСтр), "ДОБ.");
	Если ПозДоб > 0 Тогда
		ДобавочныйСКомментарием = СокрЛП(Сред(ТекСтр, ПозДоб + 4));
		ТекСтр = СокрЛП(Лев(ТекСтр, ПозДоб - 1));
		Если Прав(ТекСтр, 1) = "," Тогда
			ТекСтр = Лев(ТекСтр, СтрДлина(ТекСтр) - 1);
		КонецЕсли;
		ПозДоб = Найти(ВРЕГ(ДобавочныйСКомментарием), ", ");
		Если ПозДоб > 0 Тогда
			Добавочный	= СокрЛП(Лев(ДобавочныйСКомментарием, ПозДоб - 1));
			Комментарий	= СокрЛП(Сред(ДобавочныйСКомментарием, ПозДоб + 2));
		Иначе
			Добавочный = ДобавочныйСКомментарием;
		КонецЕсли;
	КонецЕсли;
	// Вырежем код города
	Поз = Найти(ТекСтр, "(");
	Если Поз > 0 Тогда
		КодСтраны = СокрЛП(Лев(ТекСтр, Поз - 1));
		ТекСтр = СокрЛП(Сред(ТекСтр, Поз + 1));
		Поз = Найти(ТекСтр, ")");
		Если Поз > 0 Тогда
			КодГорода = СокрЛП(Лев(ТекСтр, Поз - 1));
			ТекСтр = СокрЛП(Сред(ТекСтр, Поз + 1));
		КонецЕсли;
	КонецЕсли;
	Поз = Найти(текСтр, ", ");
	// Если Добавочного номера нет - ориентируемся по номеру телефона и комментарию
	Если ПозДоб = 0 И Поз > 0 Тогда
		// Вырежем комментарий
		НомерТелефона = СокрЛП(Лев(ТекСтр, Поз - 1));
		Комментарий = СокрЛП(Сред(ТекСтр, Поз + 2));
	Иначе
		// Все оставшееся это номер
		НомерТелефона = ТекСтр;
	КонецЕсли;
	// Удаляем лишние символы из номера телефона
	НомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	// Если номер телефона не разобран, то заново разбираем его
	ДлинаНомера = СтрДлина(НомерТелефона);
	сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
	
	Если СтрДлина(КодГорода) + ДлинаНомера > сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров Тогда
		СофтФонКодСтраны = сфпПараметрыСервера.КодСтраны;
		Если СофтФонКодСтраны = "+7" И (СтрНайти(сфпПараметрыСервера.КодГорода, "499") > 0 ИЛИ СтрНайти(сфпПараметрыСервера.КодГорода, "495") > 0) Тогда		
			СофтФонКодГорода = "";
		Иначе			
			СофтФонКодГорода = сфпПараметрыСервера.КодГорода;
		КонецЕсли;			
		// Выделяем код страны
		Если ДлинаНомера > 10 Тогда
			КодСтраны = Лев(НомерТелефона, ДлинаНомера - 10);
			НомерТелефона = Сред(НомерТелефона, ДлинаНомера - 9);
			Если КодСтраны = "8" Тогда
				КодСтраны = "+7";
			ИначеЕсли КодСтраны = "7" Тогда
				КодСтраны = "+7";
			ИначеЕсли КодСтраны = "+8" Тогда
				КодСтраны = "+7";
			ИначеЕсли НЕ Найти(КодСтраны, "+") = 1 Тогда
				КодСтраны = "+" + КодСтраны;
			КонецЕсли;	
		КонецЕсли;	
		// Выделяем код города
		ДлинаНомера = СтрДлина(НомерТелефона);
		Если НЕ ПустаяСтрока(СофтФонКодГорода) И (ПустаяСтрока(КодСтраны) ИЛИ (КодСтраны = СофтФонКодСтраны)) Тогда
			Если ДлинаНомера = 10 Тогда
				Если Найти(НомерТелефона, СофтФонКодГорода) = 1 Тогда
					КодСтраны = СофтФонКодСтраны;
					КодГорода = СофтФонКодГорода;
					НомерТелефона = Сред(НомерТелефона, СтрДлина(СофтФонКодГорода) + 1);
				Иначе
					КодГорода		= Лев(НомерТелефона, 3);
					НомерТелефона	= Сред(НомерТелефона, 4);
				КонецЕсли;	
			ИначеЕсли (ДлинаНомера + СтрДлина(СофтФонКодГорода)) = 10 Тогда
				Если НЕ ЗначениеЗаполнено(КодСтраны) Тогда
					КодСтраны = СофтФонКодСтраны;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(КодГорода) Тогда
					КодГорода = СофтФонКодГорода;
				КонецЕсли;					
			КонецЕсли;	
		ИначеЕсли ДлинаНомера = 10 Тогда
			КодГорода		= Лев(НомерТелефона, 3);
			НомерТелефона	= Сред(НомерТелефона, 4);
		КонецЕсли;	
	КонецЕсли;	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КодСтраны",		КодСтраны);
	СтруктураПолей.Вставить("КодГорода",		КодГорода);
	СтруктураПолей.Вставить("НомерТелефона",	НомерТелефона);
	СтруктураПолей.Вставить("Добавочный",		Добавочный);
	СтруктураПолей.Вставить("Комментарий",		Комментарий);
	Возврат СтруктураПолей;
КонецФункции // сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон()


/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Процедура-обработчик события "ПриЗаписи" объекта контактной информации
//
// Параметры:
//	Источник 	- СправочникОбъект	- Контакт, у которого записывается контактная информация
//	Отказ		- Булево			- Признак отмены
//
Процедура сфпПриЗаписиОбъектаКонтактнойИнформации(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	сфпЗаполнитьРегистрПоискаПоНомерам(Источник, Истина, Истина);
КонецПроцедуры // сфпПриЗаписиОбъектаКонтактнойИнформации()

// Функция разбивает номер телефона на части для полнотекстового поиска
//
// Параметры:
//  СтрокаТелефона 	- Строка - Разбиваемая строка номера телефона
//
// Возвращаемое значение:
//	СтрокаРазбивки	- Строка, состоящая из строк номера телефона различной длины, взятых справа
//
Функция сфпРазбитьНомерТелефонаДляПолнотекстовогоПоиска(СтрокаТелефона) Экспорт
	ДлинаНомера = СтрДлина(СтрокаТелефона);
	РезСтрока	= "";
	Для КоличествоСимволов = 4 По ДлинаНомера Цикл
		РезСтрока = РезСтрока + " " + Прав(СтрокаТелефона, КоличествоСимволов);
	КонецЦикла;	
	Возврат СокрЛП(РезСтрока);
КонецФункции // сфпРазбитьНомерТелефонаДляПолнотекстовогоПоиска()	

// Процедура добавляет записи в регистр поиска по номерам
//
// Параметры:
//	Объект			- СправочникСсылка	- Владелец телефона
//	ПроверкаНаКИ	- Булево			- Признак проверки наличия ТЧ "Контактная информация"
//
Процедура сфпЗаполнитьРегистрПоискаПоНомерам(Объект, ПроверкаНаКИ = Истина, ЗаписьМаршрутизации = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ПроверкаНаКИ Тогда
		Если Объект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Очистим все записи по объекту
	НаборЗаписей = РегистрыСведений.сфпНомераТелефоновДляПоиска.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	СтарыйНабор = НаборЗаписей.Выгрузить(, "НомерТелефона,Представление,ВнутреннийНомер");
	// Сохраняем пользователя для переключения звонков
	Если НаборЗаписей.Количество() = 0 Тогда
		сфпПользователь		= Справочники.Пользователи.ПустаяСсылка();
		сфпВнутреннийНомер	= "";
	Иначе	
		сфпПользователь		= НаборЗаписей[0].Пользователь;
		сфпВнутреннийНомер	= сфпТекущийВнутреннийНомер(НаборЗаписей[0].Пользователь);
		Если ТипЗнч(Объект) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров")
			ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.Партнеры") Тогда
			Если сфпПользователь <> Объект.сфпПользовательДляПереключенияЗвонков 
				И ЗначениеЗаполнено(сфпТекущийВнутреннийНомер(Объект.сфпПользовательДляПереключенияЗвонков, Истина)) Тогда
				сфпПользователь = Объект.сфпПользовательДляПереключенияЗвонков;
				сфпВнутреннийНомер	= сфпТекущийВнутреннийНомер(сфпПользователь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Очищаем набор записей
	НаборЗаписей.Очистить();
	// Заполняем набор записей заново
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда Возврат; КонецЕсли;
	Для Каждого Контакт Из Объект.КонтактнаяИнформация Цикл
		Если (Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) 
			ИЛИ (Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
			СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт.Представление);
			НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
			Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда Продолжить; КонецЕсли;
			НоваяЗапись							= НаборЗаписей.Добавить();
			НоваяЗапись.Объект					= Объект.Ссылка;
			НоваяЗапись.Вид						= Контакт.Вид;
			НоваяЗапись.ПорядковыйНомер			= Контакт.НомерСтроки;
			НоваяЗапись.НомерТелефона 			= НомерТелефона;
			НоваяЗапись.Представление			= Контакт.Представление;
			НоваяЗапись.Пользователь			= сфпПользователь;
			НоваяЗапись.ВнутреннийНомер			= сфпВнутреннийНомер;
			НоваяЗапись.НомерТелефонаДляПоиска	= сфпРазбитьНомерТелефонаДляПолнотекстовогоПоиска(НомерТелефона);
		КонецЕсли;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
		НаборЗаписан = Истина;
	Исключение;
		НаборЗаписан = Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь); 
	Если НЕ НаборЗаписан Тогда Возврат; КонецЕсли;
	Если ЗаписьМаршрутизации И сфпИспользоватьМаршрутизацию() Тогда
		Если НЕ сфпЗаполненыНастройкиСервера() Тогда Возврат; КонецЕсли;
		НовыйНабор			= НаборЗаписей.Выгрузить(, "НомерТелефона,Представление,ВнутреннийНомер");
		СписокМаршрутизации	= сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
		сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
	КонецЕсли;
КонецПроцедуры // сфпЗаполнитьРегистрПоискаПоНомерам()

// Процедура заново заполняет регистр поиска по номерам
//
// Параметры:
//	Нет.
//
Процедура сфпПерезаполнитьРегистрПоискаПоНомерам() Экспорт
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда Возврат; КонецЕсли;
	УстановитьПривилегированныйРежим(Истина); 
	Для Каждого ТипСправочника Из Метаданные.РегистрыСведений.сфпНомераТелефоновДляПоиска.Измерения.Объект.Тип.Типы() Цикл
		СправочникСсылка = Новый(ТипСправочника);
		Если СправочникСсылка.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда Продолжить; КонецЕсли;
		Выборка = Справочники[СправочникСсылка.Метаданные().Имя].Выбрать();
		Пока Выборка.Следующий() Цикл
			сфпЗаполнитьРегистрПоискаПоНомерам(Выборка.Ссылка, Ложь);
		КонецЦикла;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 
	Если сфпИспользоватьМаршрутизацию() Тогда
		// Если включена маршрутизация, то заменяем таблицу маршрутизации
		СтарыйНабор = Новый Массив;
		НовыйНабор	= сфпПолучитьТаблицуМаршрутизации();
		СписокМаршрутизации = сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
		сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации);
	КонецЕсли;
КонецПроцедуры // сфпПерезаполнитьРегистрПоискаПоНомерам()

// Функция вычисляет общее количество объектов для перезаполнения по номерам  
//
// Параметры:
//	Нет.
//
Функция сфпВычислитьОбщееКоличествоОбъектовДляПерезаполненияПоНомерам() Экспорт
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда Возврат 0; КонецЕсли;	
	ОбщееКоличество = 0;
	УстановитьПривилегированныйРежим(Истина); 
	Для Каждого ТипСправочника Из Метаданные.РегистрыСведений.сфпНомераТелефоновДляПоиска.Измерения.Объект.Тип.Типы() Цикл
		СправочникСсылка = Новый(ТипСправочника);
		Если СправочникСсылка.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда Продолжить; КонецЕсли;
		СправочникСтрока = Нстр("ru = 'Справочник.'") + СправочникСсылка.Метаданные().Имя;
		ТекстЗапроса = Нстр("ru = 'Выбрать * Из '") + СправочникСтрока;
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		ОбщееКоличество = ОбщееКоличество + Выборка.Количество();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ОбщееКоличество;
КонецФункции // сфпВычислитьОбщееКоличествоОбъектовДляПерезаполненияПоНомерам()

// Функция формирует список объектов для перезаполнения по номерам
//
// Параметры:
//	Нет.
//
Функция сфпПолучитьСписокОбъектовДляПерезаполнения() Экспорт
	СписокОбъектов = Новый СписокЗначений;
	УстановитьПривилегированныйРежим(Истина); 
	Для Каждого ТипСправочника Из Метаданные.РегистрыСведений.сфпНомераТелефоновДляПоиска.Измерения.Объект.Тип.Типы() Цикл
		СправочникСсылка = Новый(ТипСправочника);
		Если СправочникСсылка.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда Продолжить; КонецЕсли;
		Выборка = Справочники[СправочникСсылка.Метаданные().Имя].Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОбъектов.Добавить(Выборка.Ссылка);;
		КонецЦикла;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат СписокОбъектов;
КонецФункции // сфпПолучитьСписокОбъектовДляПерезаполнения()

// Функция возвращает массив телефонов и факсов
//
// Параметры:
//	Ссылка	- СправочникСсылка	- Ссылка на владельца контактной информации
//
// Возвращаемое значение:
//	Массив	- Массив структур телефонов и факсов
//
Функция сфпПолучитьМассивТелефоновИФаксов(Ссылка) Экспорт
	Запрос = Новый Запрос;
	УстановитьПривилегированныйРежим(Истина); 
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	сфпНомераТелефоновДляПоиска.Вид,
	               |	сфпНомераТелефоновДляПоиска.Представление
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	сфпНомераТелефоновДляПоиска.Вид.РеквизитДопУпорядочивания";
	МассивТелефоновИФаксов = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураТелефона = Новый Структура;
		СтруктураТелефона.Вставить("Вид",			Выборка.Вид);
		СтруктураТелефона.Вставить("Представление",	Выборка.Представление);
		//+вог
		СтруктураТелефона.Вставить("ПредставлениеОбъекта", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1: %2",
				вогОбщегоНазначенияКлиентСерверПовтИсп.ПредставлениеОбъектаКонтаткнойИнформации(Ссылка), СокрЛП(Ссылка))
		);
		//-вог
		МассивТелефоновИФаксов.Добавить(СтруктураТелефона);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат МассивТелефоновИФаксов;
КонецФункции // сфпПолучитьМассивТелефоновИФаксов()

// Функция ищет объект в регистре по телефону
//
// Параметры:
//	НомерТелефона - Строка	- Номер телефона
//
// Возвращаемое значение:
//	Массив	- Массив найденных владельцев телефонного номера
//
Функция сфпНайтиОбъектВРегистреПоТелефону(НомерТелефона) Экспорт
	МассивОбъектов = Новый Массив;
	ОчищенныйНомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	Если СтрДлина(ОчищенныйНомерТелефона) > 0 Тогда
		Запрос = Новый Запрос;
		УстановитьПривилегированныйРежим(Истина); 
		ДлинаВнутреннихНомеров	= Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
		КоличествоЦифрВНомере	= Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
		Если СтрДлина(ОчищенныйНомерТелефона) > ДлинаВнутреннихНомеров Тогда
			// Если внешний номер, то ищем в регистре номеров для поиска
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	НомераТелефоновДляПоиска.Объект КАК Объект,
						   |    ВЫБОР  
						   |    	КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.Партнеры) 
						   |			ТОГДА 
						   |				ВЫБОР 
						   |					КОГДА НомераТелефоновДляПоиска.Объект.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
						   |						ТОГДА 1
						   |					ИНАЧЕ 3
						   |        		КОНЕЦ
						   |        КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.КонтактныеЛицаПартнеров)  
						   |        	ТОГДА 2
						   |        КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.ФизическиеЛица)  
						   |        	ТОГДА 4
						   |        КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.Пользователи)  
						   |        	ТОГДА 5
						   |        КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.CRM_ПотенциальныеКлиенты)  
						   |        	ТОГДА 6						   						   
						   |        КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.Организации)  
						   |        	ТОГДА 7						   
						   | КОНЕЦ КАК Порядок
			               |ИЗ
			               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК НомераТелефоновДляПоиска
			               |ГДЕ
			               |	НомераТелефоновДляПоиска.НомерТелефона = &НомерТелефона";
			Запрос.УстановитьПараметр("НомерТелефона", Прав(ОчищенныйНомерТелефона, КоличествоЦифрВНомере));
		Иначе
			// Если внутренний номер, то ищем в настройках пользователей
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	НастройкиПользователей.Пользователь КАК Объект,
						   |	5 КАК Порядок
			               |ИЗ
			               |	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
			               |ГДЕ
			               |	НастройкиПользователей.Настройка = &Настройка
			               |	И НастройкиПользователей.Значение = &НомерТелефона";
			Запрос.УстановитьПараметр("Настройка",		ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер);
			Запрос.УстановитьПараметр("НомерТелефона",	ОчищенныйНомерТелефона);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				// Если внутренний номер не нашли, то ищем в регистре номеров для поиска
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	НомераТелефоновДляПоиска.Объект КАК Объект,
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.Партнеры)
				|			ТОГДА ВЫБОР
				|					КОГДА НомераТелефоновДляПоиска.Объект.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
				|						ТОГДА 1
				|					ИНАЧЕ 3
				|				КОНЕЦ
				|		КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.КонтактныеЛицаПартнеров)
				|			ТОГДА 2
				|		КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.ФизическиеЛица)
				|			ТОГДА 4
				|		КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.Пользователи)
				|			ТОГДА 5
				|		КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.CRM_ПотенциальныеКлиенты)
				|			ТОГДА 6
				|		КОГДА ТИПЗНАЧЕНИЯ(НомераТелефоновДляПоиска.Объект) = ТИП(Справочник.Организации)
				|			ТОГДА 7
				|	КОНЕЦ КАК Порядок
				|ИЗ
				|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК НомераТелефоновДляПоиска
				|ГДЕ
				|	НомераТелефоновДляПоиска.НомерТелефона = &НомерТелефона";
				
				Запрос.УстановитьПараметр("НомерТелефона",	ОчищенныйНомерТелефона);
			КонецЕсли;	
		КонецЕсли;
				
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		Если ТаблицаРезультата.Количество() > 0 Тогда
			ТаблицаРезультата.Сортировать("Порядок Возр");
			МассивДобавленных = Новый Массив;
			Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
				// владельца КЛ добавляем в массив добавленных объектов (повторно в список поиска партнёра-владельца не берём)
				Если ТипЗнч(СтрокаРезультата.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ВладелецОбъекта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтрокаРезультата.Объект);
					Если МассивДобавленных.Найти(ВладелецОбъекта) = Неопределено Тогда	
						МассивДобавленных.Добавить(ВладелецОбъекта);
					КонецЕсли;					
					МассивОбъектов.Добавить(СтрокаРезультата.Объект);					
				ИначеЕсли ТипЗнч(СтрокаРезультата.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
					Если СтрокаРезультата.Порядок = 1 Тогда
						// для случая когда партнёр является физическием лицом возможен вариант, что у него есть связанные клиенты/контакты
						МассивСвязанныхОбъектов = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(СтрокаРезультата.Объект);
						Если МассивСвязанныхОбъектов.Количество() > 0 Тогда
							Для Каждого ЭлементМассива Из МассивСвязанныхОбъектов Цикл
								ВладелецОбъекта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(ЭлементМассива);
								Если МассивДобавленных.Найти(ВладелецОбъекта) = Неопределено Тогда	
									МассивДобавленных.Добавить(ВладелецОбъекта);
								КонецЕсли;							
							КонецЦикла;
							Если МассивДобавленных.Найти(СтрокаРезультата.Объект) = Неопределено Тогда	
								МассивДобавленных.Добавить(СтрокаРезультата.Объект);
								МассивОбъектов.Добавить(СтрокаРезультата.Объект);					
							КонецЕсли;
						Иначе
							Если МассивДобавленных.Найти(СтрокаРезультата.Объект) = Неопределено Тогда	
								МассивДобавленных.Добавить(СтрокаРезультата.Объект);
								МассивОбъектов.Добавить(СтрокаРезультата.Объект);					
							КонецЕсли;
						КонецЕсли;							
					Иначе						
						Если МассивДобавленных.Найти(СтрокаРезультата.Объект) = Неопределено Тогда	
							МассивДобавленных.Добавить(СтрокаРезультата.Объект);
							МассивОбъектов.Добавить(СтрокаРезультата.Объект);					
						КонецЕсли;
					КонецЕсли;
				// +CRM3					
				ИначеЕсли ТипЗнч(СтрокаРезультата.Объект) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
					ВладелецОбъекта = СтрокаРезультата.Объект.Партнер;
					Если ЗначениеЗаполнено(ВладелецОбъекта) Тогда
						Продолжить;
					КонецЕсли;						
					Если МассивДобавленных.Найти(СтрокаРезультата.Объект) = Неопределено Тогда	
						МассивДобавленных.Добавить(СтрокаРезультата.Объект);
					КонецЕсли;							
					МассивОбъектов.Добавить(СтрокаРезультата.Объект);										
				// -CRM3										
				Иначе					
					МассивОбъектов.Добавить(СтрокаРезультата.Объект);					
				КонецЕсли;					
			КонецЦикла;			
		КонецЕсли;			
		УстановитьПривилегированныйРежим(Ложь); 
	КонецЕсли;
	Возврат МассивОбъектов;
КонецФункции // сфпНайтиОбъектВРегистреПоТелефону()

// Функция выполняет поиск объекта в базе данных по значению переданного GUID
//
// Параметры:
//	GUID	- Строка	- Уникальный идентификатор
//
// Возвращаемое значение:
//	СправочникСсылка	- Владелец GUID
//	
Функция сфпНайтиКонтактПоGUID(GUIDСоединенС) Экспорт
	Результат = Ложь;
	Попытка
		УникальныйИдентификаторДляПоиска = Новый УникальныйИдентификатор(GUIDСоединенС);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Истина); 
	МассивТиповСправочников = Метаданные.РегистрыСведений.сфпНомераТелефоновДляПоиска.Измерения.Объект.Тип.Типы();
	Для Каждого ТипСправочника Из МассивТиповСправочников Цикл
		СправочникСсылка = Новый(ТипСправочника);
		ИмяСправочника = СправочникСсылка.Метаданные().Имя; 
		НайденныйОбъект = Справочники[ИмяСправочника].ПолучитьСсылку(УникальныйИдентификаторДляПоиска);
		// Ссылка создается в любом случае...Даже если объект не был найден
		//  но если объект найден не был, то в ссылке есть строка <Объект не найден>
		Если ОбщегоНазначения.СсылкаСуществует(НайденныйОбъект) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат ?(Результат, НайденныйОбъект, Неопределено);
КонецФункции // сфпНайтиКонтактПоGUID()

// Функция возвращает владельца контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	СправочникСсылка	- Владелец контакта
//
Функция сфпПолучитьВладельцаКонтакта(Контакт) Экспорт
	Владелец = Неопределено;
	УстановитьПривилегированныйРежим(Истина); 
	//+вог
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
	  ИЛИ ТипЗнч(Контакт) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
	//-вог
		Попытка
			Владелец = Контакт.Партнер;
		Исключение
		КонецПопытки;	
	Иначе		
		Попытка
			Владелец = Контакт.Владелец;
		Исключение
		КонецПопытки;	
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат Владелец;
КонецФункции // сфпПолучитьВладельцаКонтакта()

// Функция получает наименование контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Наименование контакта
//
Функция сфпПолучитьНаименованиеКонтакта(Контакт) Экспорт
	УстановитьПривилегированныйРежим(Истина); 
	НаименованиеКонтакта = Контакт.Наименование;
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат НаименованиеКонтакта;
КонецФункции // сфпПолучитьНаименованиеКонтакта()

// Функция получает уникальный идентификатор контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Уникальный идентификатор контакта
//
Функция сфпПолучитьИдентификаторКонтакта(Контакт) Экспорт
	УстановитьПривилегированныйРежим(Истина); 
	ИдентификаторКонтакта = Строка(Контакт.УникальныйИдентификатор());
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат ИдентификаторКонтакта;
КонецФункции // сфпПолучитьИдентификаторКонтакта()

// Функция формирует строковое представление телефона
//
// Параметры:
//	КодСтраны		- Строка	- Код страны
//	КодГорода		- Строка	- Код города
//	НомерТелефона	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Представление телефона
//
Функция сфпСформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона) Экспорт
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, "", "");
КонецФункции // сфпСформироватьПредставлениеТелефона()	

// Функция ищет в регистре представление номера телефона по контакту и его номеру телефона
//
// Параметры:
//	Контакт			- СправочникСсылка	- Контакт
//	НомерТелефона	- Строка			- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Представление номера телефона
//
Функция сфпПолучитьПредставлениеНомераТелефона(Контакт, НомерТелефона) Экспорт
	ПредставлениеНомераТелефона = НомерТелефона;
	ОчищенныйНомерТелефона = сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Если СтрДлина(ОчищенныйНомерТелефона) > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект", Контакт);
			ДлинаВнутреннихНомеров	= Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
			КоличествоЦифрВНомере	= Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
			Если СтрДлина(ОчищенныйНомерТелефона) > КоличествоЦифрВНомере Тогда
				Запрос.УстановитьПараметр("НомерТелефона", Прав(ОчищенныйНомерТелефона, КоличествоЦифрВНомере));
			Иначе
				сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
				КодГорода 	= сфпПараметрыСервера.КодГорода;
				Если СтрДлина(КодГорода + ОчищенныйНомерТелефона) = 10 Тогда
					Запрос.УстановитьПараметр("НомерТелефона", Прав(КодГорода + ОчищенныйНомерТелефона, КоличествоЦифрВНомере));
				Иначе
					Запрос.УстановитьПараметр("НомерТелефона", ОчищенныйНомерТелефона);
				КонецЕсли;
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	сфпНомераТелефоновДляПоиска.Представление
			               |ИЗ
			               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
			               |ГДЕ
			               |	сфпНомераТелефоновДляПоиска.НомерТелефона = &НомерТелефона
			               |	И сфпНомераТелефоновДляПоиска.Объект = &Объект";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПредставлениеНомераТелефона = Выборка.Представление;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыСервера = сфпПараметрыСервера();
		// Получаем структуру полей по представлению
		СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		// Если не заполнены код страны или код города, то заполняем их по умолчанию
		Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодСтраны) Тогда
			СтруктураНомера.КодСтраны = ПараметрыСервера.КодСтраны;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			СтруктураНомера.КодГорода = ПараметрыСервера.КодГорода;
		КонецЕсли;	
		ПредставлениеНомераТелефона = сфпСформироватьПредставлениеТелефона(СтруктураНомера.КодСтраны,
			СтруктураНомера.КодГорода, СтруктураНомера.НомерТелефона);
	КонецЕсли;
	Возврат ПредставлениеНомераТелефона;
КонецФункции // сфпПолучитьПредставлениеНомераТелефона()


/////////////////////////////////////////////////
// МАРШРУТИЗАЦИЯ

 // Функция проверяет использование маршрутизации средствами сервера СофтФона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования маршрутизации
//
Функция сфпИспользоватьМаршрутизацию() Экспорт
	Возврат Константы.сфпИспользоватьМаршрутизацию.Получить();
КонецФункции // сфпИспользоватьМаршрутизацию()

// Функция возвращает идентификатор таблицы маршрутизации
//
// Параметры:
//	Нет.
//
Функция сфпПолучитьИдентификаторМаршрутизации(СоздаватьНовый = Ложь) Экспорт
	ИдентификаторМаршрутизации = Константы.сфпИдентификаторМаршрутизации.Получить();
	Если ПустаяСтрока(ИдентификаторМаршрутизации) Тогда
		Если СоздаватьНовый Тогда
			ИдентификаторМаршрутизации = Строка(Новый УникальныйИдентификатор);
			Константы.сфпИдентификаторМаршрутизации.Установить(ИдентификаторМаршрутизации);
		КонецЕсли;	
	КонецЕсли;	
	Возврат ИдентификаторМаршрутизации;
КонецФункции // сфпПолучитьИдентификаторМаршрутизации()

// Функция возвращает внутренний номер текущего пользователя
//
// Параметры:
//	Пользователь			- СправочникСсылка	- Пользователь, для которого получается внутренний номер
//  НомерДляМаршрутизации   - Булево - Признак получения номера для нужд маршрутизации
//
// Возвращаемое значение:
//	Строка	- Внутренний номер пользователя
//
Функция сфпТекущийВнутреннийНомер(Пользователь = Неопределено, НомерДляМаршрутизации = Ложь) Экспорт
	Если НЕ НомерДляМаршрутизации Тогда
		Возврат сфпПолучитьЗначениеНастройкиПользователя("сфпТекущийВнутреннийНомер", Пользователь);
	Иначе
		сфпВнутреннийНомер = сфпПолучитьЗначениеНастройкиПользователя("сфпТекущийВнутреннийНомер", Пользователь);
		Если НЕ ЗначениеЗаполнено(сфпВнутреннийНомер) Тогда
			сфпВнутреннийНомер = сфпПолучитьВнутреннийНомерПользователяИзКИ(Пользователь);
		КонецЕсли;			
		Возврат сфпВнутреннийНомер; 
	КонецЕсли;		
КонецФункции // сфпТекущийВнутреннийНомер()

// Функция возращает внутренний номер телефона из контактной информации пользователя
//
// Параметры:
//	Пользователь			- СправочникСсылка	- Пользователь, для которого получается внутренний номер
//
// Возвращаемое значение:
//	Строка	- Внутренний номер пользователя из КИ
//
Функция сфпПолучитьВнутреннийНомерПользователяИзКИ(Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Представление КАК НомерТелефона
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Ссылка = &Пользователь
	|	И ПользователиКонтактнаяИнформация.Вид = &ВидКИ
	|";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерТелефона;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция изменяет внутренний номер пользователя и возвращает массив пользователей, у которых был очищен внутрений номер
//
// Параметры:
//	НомерЛинии		- Строка			- Номер линии
//	Пользователь	- СправочникСсылка	- Пользователь
//
// Возвращаемое значение:
//	Массив	- Массив пользователей, внутренние номера которых были очищены
//
Функция сфпЗаписатьНомерПользователю(НомерЛинии, Пользователь) Экспорт
	МассивПользователей = Новый Массив;
	// Записываем новый номер только, если он не пустой
	Если НЕ ПустаяСтрока(НомерЛинии) Тогда
		УстановитьПривилегированныйРежим(Истина);
		НомерЗаписан = Ложь;
		НаборЗаписей = РегистрыСведений.CRM_НастройкиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.Пользователь = Пользователь Тогда
				ЗаписьНабора.Значение = НомерЛинии;
				НомерЗаписан = Истина;
			ИначеЕсли ЗаписьНабора.Значение = НомерЛинии Тогда
				ЗаписьНабора.Значение = "";
				МассивПользователей.Добавить(ЗаписьНабора.Пользователь);	
			КонецЕсли;	
		КонецЦикла;
		Если НЕ НомерЗаписан Тогда
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Пользователь	= Пользователь;
			ЗаписьНабора.Настройка		= ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер;
			ЗаписьНабора.Значение		= НомерЛинии;
		КонецЕсли;	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			МассивПользователей = Новый Массив;
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	Возврат МассивПользователей;
КонецФункции // сфпЗаписатьНомерПользователю()

// Функция возвращает список маршрутизации
//
// Параметры:
//	Объект			- СправочникСсылка	- Владелец контактной информации
//	Пользователь	- СправочникСсылка	- Пользователь для переключения звонков
//
// Возвращаемое значение:
//	Строка	- Строка маршрутизации
//
Функция сфпПолучитьСписокМаршрутизации(Объект = Неопределено, Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь	= сфпТекущийПользователь();
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НомераТелефоновДляПоиска.Объект КАК Контакт,
	               |	НомераТелефоновДляПоиска.Представление,
	               |	ЕСТЬNULL(НастройкиПользователей.Значение, """") КАК НомерВнТелефона
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК НомераТелефоновДляПоиска
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НастройкиПользователей.Пользователь КАК Пользователь,
	               |			НастройкиПользователей.Значение КАК Значение
	               |		ИЗ
	               |			РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	               |		ГДЕ
	               |			НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер)) КАК НастройкиПользователей
	               |		ПО НомераТелефоновДляПоиска.Пользователь = НастройкиПользователей.Пользователь";
	Если ЗначениеЗаполнено(Объект) Тогда				   
		Запрос.Текст = Запрос.Текст + "
	               |ГДЕ
	               |	НЕ НомераТелефоновДляПоиска.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |	И НомераТелефоновДляПоиска.Объект = &Объект";
	ИначеЕсли ЗначениеЗаполнено(Пользователь) Тогда				   
		Запрос.Текст = Запрос.Текст + "
	               |ГДЕ
	               |	НомераТелефоновДляПоиска.Пользователь = &Пользователь";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	СписокСтрока = "";
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.НомерВнТелефона) Тогда Продолжить; КонецЕсли;
		СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Выборка.Представление);
		НомерТелефона = СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
		Если ПустаяСтрока(НомерТелефона) Тогда Продолжить; КонецЕсли;
		СписокСтрока = СписокСтрока + Прав(НомерТелефона, 10) + "=" + СокрЛП(Выборка.НомерВнТелефона) + ";";
	КонецЦикла;
	Возврат СписокСтрока;
КонецФункции // сфпПолучитьСписокМаршрутизации()

// Процедура меняет пользователя для переключения у выбранного контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт, для которого ищется пользователь для переключения звонков
//
// Возвращаемое значение:
//	СправочникСсылка	- Пользователь для переключения звонков 
//
Функция сфпПолучитьПользователяДляПереключенияЗвонков(Контакт) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.Текст = "ВЫБРАТЬ
	               |	сфпНомераТелефоновДляПоиска.Пользователь
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Объект = &Контакт";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	
КонецФункции // сфпПолучитьПользователяДляПереключенияЗвонков()

// Функция возвращает признак наличия взаимодействий по пользователю
//
// Параметры:
//	Ссылка	- ДокументСсылка	- Телефонный звонок
//
// Возвращаемое значение:
//	Булево	- Признак наличия определенного количества взаимодействий
//
Функция сфпЕстьВзаимодействияПоКонтакту(Ссылка) Экспорт
	КоличествоВзаимодействий = Константы.сфпКоличествоВзаимодействийДляМаршрутизации.Получить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контакт", Ссылка.АбонентКонтакт);	   
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоВзаимодействий) + "
	               |	ТелефонныйЗвонок.Ответственный,
	               |	ТелефонныйЗвонок.Ссылка
	               |ИЗ
	               |	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	               |ГДЕ
	               |	ТелефонныйЗвонок.АбонентКонтакт = &Контакт
	               |	И НЕ ТелефонныйЗвонок.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТелефонныйЗвонок.Дата УБЫВ";
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	Если ТЗ.Количество() < КоличествоВзаимодействий Тогда
		Возврат Ложь;
	КонецЕсли;
	ТЗ.Свернуть("Ответственный");
	Если (ТЗ.Количество() = 1) И (ТЗ[0].Ответственный = Ссылка.Ответственный) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // сфпЕстьВзаимодействияПоКонтакту() 

// Функция записывает нового пользователя для переключения в регистр номеров телефонов
//
// Параметры:
//	Контакт						- СправочникСсылка	- Контакт
//	НовыйПользователь			- СправочникСсылка	- Новый пользователь для переключения
//  ИскатьНомерВКИПользователя 	- Булево - Признак поиска номера телефона в КИ пользователя
//
// Возвращаемое значение:
//	Булево	- Признак обновления регистра
//
Функция сфпЗаписатьНовогоПользователя(Контакт, НовыйПользователь, ИскатьНомерВКИПользователя = Ложь) Экспорт
	НаборЗаписей = РегистрыСведений.сфпНомераТелефоновДляПоиска.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Контакт);
	НаборЗаписей.Прочитать();
	Если НЕ ИскатьНомерВКИПользователя Тогда
		ВнутреннийНомер	= сфпТекущийВнутреннийНомер(НовыйПользователь);
	Иначе
		ВнутреннийНомер	= сфпТекущийВнутреннийНомер(НовыйПользователь, Истина);
	КонецЕсли;		
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.Пользователь 		= НовыйПользователь;
		ЗаписьНабора.ВнутреннийНомер	= ВнутреннийНомер;
	КонецЦикла;	
	Попытка
		НаборЗаписей.Записать(Истина);
		НабораЗписан	= Истина;
	Исключение	
		НабораЗписан	= Ложь;
	КонецПопытки;
	Возврат НабораЗписан;
КонецФункции // сфпЗаписатьНовогоПользователя()	

// Процедура перезаписывает внутренний номер, на который осуществляется маршрутизация пользователя
//
// Параметры:
//	НовыйПользователь			- СправочникСсылка	- Новый пользователь для переключения
//  НомерЛинии 					- Строка - Новый внутренний нмоер пользователя
//
Процедура сфпПерезаписатьНомерЛинииТекущегоПользователяВРегистреПоиска(НовыйПользователь, НомерЛинии) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст =   "ВЫБРАТЬ
	|	сфпНомераТелефоновДляПоиска.Объект,
	|	сфпНомераТелефоновДляПоиска.Вид,
	|	сфпНомераТелефоновДляПоиска.ПорядковыйНомер,
	|	сфпНомераТелефоновДляПоиска.НомерТелефона,
	|	сфпНомераТелефоновДляПоиска.Представление,
	|	сфпНомераТелефоновДляПоиска.Пользователь,
	|	сфпНомераТелефоновДляПоиска.ВнутреннийНомер,
	|	сфпНомераТелефоновДляПоиска.НомерТелефонаДляПоиска
	|ИЗ
	|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
	|ГДЕ
	|	сфпНомераТелефоновДляПоиска.Пользователь = &НовыйПользователь";
	Запрос.УстановитьПараметр("НовыйПользователь", НовыйПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивКонтактов = Новый Массив();
	Пока Выборка.Следующий() Цикл
		// для каждой записи регистра изменяем номер линии на новый
		НайденныйКонтакт = Выборка.Объект;
		Если МассивКонтактов.Найти(НайденныйКонтакт) = Неопределено Тогда		 
			НаборЗаписей = РегистрыСведений.сфпНомераТелефоновДляПоиска.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(НайденныйКонтакт);
			НаборЗаписей.Прочитать();
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если НЕ (ЗаписьНабора.ВнутреннийНомер = НомерЛинии) Тогда
					ЗаписьНабора.ВнутреннийНомер = НомерЛинии;
				КонецЕсли;			
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение
			КонецПопытки;
			МассивКонтактов.Добавить(НайденныйКонтакт);
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

// Функция возвращает признак использования маршрутизации по номеру из КИ пользователя
//
// Возвращаемое значение:
//	Булево	- Используем маршрутизацию по номеру СФ (Значение - Ложь) или по номеру из КИ (Истина)
//
Функция сфпИспользоватьМаршрутизациюПоНомеруИзКИПользователя() Экспорт
	Возврат Константы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Получить();
КонецФункции

// Функция возвращает таблицу маршрутизации
//
// Параметры:
//	Контакт			- СправочникСсылка	- Контакт
//	Пользователь	- СправочникСсылка	- Пользователь
//
// Возвращаемое значение:
//	Массив	- Таблица маршрутизации
//
Функция сфпПолучитьТаблицуМаршрутизации(Контакт = Неопределено, Пользователь = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сфпНомераТелефоновДляПоиска.НомерТелефона,
	               |	сфпНомераТелефоновДляПоиска.Представление,
	               |	сфпНомераТелефоновДляПоиска.ВнутреннийНомер
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска";
	Если НЕ (Контакт = Неопределено) И ЗначениеЗаполнено(Контакт) Тогда
		Запрос.УстановитьПараметр("Объект", Контакт);
		Запрос.Текст = Запрос.Текст + "				   
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Объект = &Объект";
		Если НЕ (Пользователь = Неопределено) И ЗначениеЗаполнено(Пользователь) Тогда
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			Запрос.Текст = Запрос.Текст + "				   
	               |	И сфпНомераТелефоновДляПоиска.Пользователь = &Пользователь";
		КонецЕсли;		   
	ИначеЕсли НЕ (Пользователь = Неопределено) И ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.Текст = Запрос.Текст + "				   
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаМаршрутизации = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураТаблицы = Новый Структура();
		СтруктураТаблицы.Вставить("НомерТелефона",		Выборка.НомерТелефона);
		СтруктураТаблицы.Вставить("Представление",		Выборка.Представление);
		СтруктураТаблицы.Вставить("ВнутреннийНомер",	Выборка.ВнутреннийНомер);
		ТаблицаМаршрутизации.Добавить(СтруктураТаблицы);
	КонецЦикла;	
	Возврат ТаблицаМаршрутизации;
КонецФункции // сфпПолучитьТаблицуМаршрутизации()	

// Функция возвращает список маршрутизации
//
// Параметры:
//	Объект			- СправочникСсылка	- Владелец контактной информации
//	Пользователь	- СправочникСсылка	- Пользователь для переключения звонков
//
// Возвращаемое значение:
//	Строка	- Строка маршрутизации
//
Функция сфпСформироватьСписокМаршрутизации(СтараяТаблица, НоваяТаблица) Экспорт
	СписокСтрока = "";
	Для Каждого СтрокаТаблицы Из СтараяТаблица Цикл
		Если ПустаяСтрока(СтрокаТаблицы.ВнутреннийНомер) Тогда Продолжить; КонецЕсли;
		НайденнаяСтрока = Неопределено;
		Для Каждого СтрокаМассива Из НоваяТаблица Цикл
			Если СтрокаМассива.НомерТелефона = СтрокаТаблицы.НомерТелефона Тогда
				НайденнаяСтрока = СтрокаМассива;
				Прервать;	
			КонецЕсли;	
		КонецЦикла;	
		Если НайденнаяСтрока = Неопределено Тогда
			СтруктураНомера	= сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТаблицы.Представление);
			НомерТелефона	= СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
			СписокСтрока	= СписокСтрока + СокрЛП(НомерТелефона) + "=" + ";";
		ИначеЕсли НЕ (СтрокаТаблицы.ВнутреннийНомер = НайденнаяСтрока.ВнутреннийНомер) Тогда
			СтруктураНомера	= сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТаблицы.Представление);
			НомерТелефона	= СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
			СписокСтрока	= СписокСтрока + СокрЛП(НомерТелефона) + "=" + СокрЛП(НайденнаяСтрока.ВнутреннийНомер) + ";";
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из НоваяТаблица Цикл
		Если ПустаяСтрока(СтрокаТаблицы.ВнутреннийНомер) Тогда Продолжить; КонецЕсли;
		НайденнаяСтрока = Неопределено;
		Для Каждого СтрокаМассива Из СтараяТаблица Цикл
			Если СтрокаМассива.НомерТелефона = СтрокаТаблицы.НомерТелефона Тогда
				НайденнаяСтрока = СтрокаМассива;
				Прервать;	
			КонецЕсли;	
		КонецЦикла;	
		Если НайденнаяСтрока = Неопределено Тогда
			СтруктураНомера	= сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТаблицы.Представление);
			НомерТелефона	= СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
			СписокСтрока = СписокСтрока + СокрЛП(НомерТелефона) + "=" + СокрЛП(СтрокаТаблицы.ВнутреннийНомер) + ";";
		ИначеЕсли НЕ (СтрокаТаблицы.ВнутреннийНомер = НайденнаяСтрока.ВнутреннийНомер) Тогда
			СтруктураНомера	= сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТаблицы.Представление);
			НомерТелефона	= СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона;
			СписокСтрока = СписокСтрока + СокрЛП(НомерТелефона) + "=" + СокрЛП(СтрокаТаблицы.ВнутреннийНомер) + ";";
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокСтрока;
КонецФункции // сфпПолучитьСписокМаршрутизации()

// Процедура изменяет таблицу маршрутизации в АТС
//
// Параметры:
//	Объект	- СправочникСсылка	- Объект, информацию о маршрутизации которого следует изменить
//
Процедура сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации) Экспорт
	Если ПустаяСтрока(СписокМаршрутизации) Тогда Возврат; КонецЕсли;
	#Если Вебклиент Тогда
		Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		ВебСервис 		= Неопределено;
		АдресСервера	= Константы.сфпИмяСервера.Получить();
		ПортСервера		= Константы.сфпПорт.Получить();
		Попытка
			Определения	= Новый WSОпределения("http://" + АдресСервера + ":" + Формат(Число(ПортСервера), "ЧГ=0") + "/wsdl/ISOAPSoftPhoneSrv");
			ВебСервис	= Новый WSПрокси(Определения, "http://tempuri.org/", "ISOAPSoftPhoneSrvservice", "ISOAPSoftPhoneSrvPort");
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Подключение к серверу СофтФон'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось подключиться к серверу СофтФон'"));
		КонецПопытки;	
		Если ВебСервис = Неопределено Тогда Возврат; КонецЕсли;
		ИдентификаторМаршрутизации = сфпПолучитьИдентификаторМаршрутизации(Истина);
		Попытка
			ВебСервис.SendStrData("", 1, "", ИдентификаторМаршрутизации);
			ВебСервис.SendStrData("", 0, СписокМаршрутизации, ИдентификаторМаршрутизации);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Запись таблицы маршрутизации'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось записать таблицу маршрутизации'"));
		КонецПопытки;	
	#КонецЕсли
КонецПроцедуры // сфпЗаменитьМаршрутизациюВАТС()

// Процедура изменяет таблицу маршрутизации в АТС
//
// Параметры:
//	Объект	- СправочникСсылка	- Объект, информацию о маршрутизации которого следует изменить
//
Процедура сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации) Экспорт
	Если ПустаяСтрока(СписокМаршрутизации) Тогда Возврат; КонецЕсли;
	#Если Вебклиент Тогда
		Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		ВебСервис 		= Неопределено;
		АдресСервера	= Константы.сфпИмяСервера.Получить();
		ПортСервера		= Константы.сфпПорт.Получить();
		Попытка
			Определения	= Новый WSОпределения("http://" + АдресСервера + ":" + Формат(Число(ПортСервера), "ЧГ=0") + "/wsdl/ISOAPSoftPhoneSrv");
			ВебСервис	= Новый WSПрокси(Определения, "http://tempuri.org/", "ISOAPSoftPhoneSrvservice", "ISOAPSoftPhoneSrvPort");
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru='Подключение к серверу СофтФон'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось подключиться к серверу СофтФон'"));
		КонецПопытки;	
		Если ВебСервис = Неопределено Тогда Возврат; КонецЕсли;
		ИдентификаторМаршрутизации	= сфпПолучитьИдентификаторМаршрутизации(Ложь);
		Если ПустаяСтрока(ИдентификаторМаршрутизации) Тогда
			// Если таблица маршрутизации еще ни разу не передавалась на сервер СофтФон
			СтарыйНабор = Новый Массив;
			НовыйНабор	= сфпПолучитьТаблицуМаршрутизации();
			СписокМаршрутизации = сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации);
		Иначе	
			Попытка
				ВебСервис.SendStrData("", 2, СписокМаршрутизации, ИдентификаторМаршрутизации);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='Запись таблицы маршрутизации'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось записать таблицу маршрутизации'"));
			КонецПопытки;	
		КонецЕсли;	
	#КонецЕсли
КонецПроцедуры // сфпИзменитьМаршрутизациюВАТС()

// Функция определяет требуется ли обновитьтаблицу маршрутизации после записи телефонного звонка
//
// Параметры:
//	НовыйЗвонок	- ДокументСсылка	- Новый телефонный звонок
//
// Возвращаемое значение:
//	Булево	- Необходимость обновления таблицы маршрутизации
//
Процедура сфпОбновитьТаблицуМаршрутизации(НовыйЗвонок) Экспорт
	ТребуетсяОбновление = Ложь;
	Если сфпЕстьВзаимодействияПоКонтакту(НовыйЗвонок) Тогда
		ПользовательДляПереключения	= сфпПолучитьПользователяДляПереключенияЗвонков(НовыйЗвонок.АбонентКонтакт);
		ТребуетсяОбновление			= НЕ (ПользовательДляПереключения = НовыйЗвонок.Ответственный);
	КонецЕсли;
	Если ТребуетсяОбновление Тогда
		СтарыйНабор	= сфпПолучитьТаблицуМаршрутизации(НовыйЗвонок.АбонентКонтакт, ПользовательДляПереключения);
		ПользовательОбновлен	= сфпЗаписатьНовогоПользователя(НовыйЗвонок.АбонентКонтакт, НовыйЗвонок.Ответственный);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпПолучитьТаблицуМаршрутизации(НовыйЗвонок.АбонентКонтакт, НовыйЗвонок.Ответственный);
			СписокМаршрутизации = сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // сфпОбновитьТаблицуМаршрутизации()	


/////////////////////////////////////////////////
// ЗАПИСЬ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ

// Функция проверяет использование записи переговоров
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СофтФона
//
Функция сфпИспользоватьЗаписьПереговоров() Экспорт
	Возврат Константы.сфпИспользоватьЗаписьПереговоров.Получить();
КонецФункции // ИспользоватьЗаписьПереговоров(

// Функция проверяет использование Спрут7
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СофтФона
//
Функция сфпИспользоватьСпрут7() Экспорт
	Возврат Константы.сфпИспользоватьСпрут7.Получить();
КонецФункции // ИспользоватьСпрут7()

// Функция проверяет использование CLON
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования СофтФона
//
Функция сфпИспользоватьCLON() Экспорт
	Возврат Константы.сфпИспользоватьCLON.Получить();
КонецФункции // ИспользоватьCLON()

// Функция возвращает массив пользователей, телефонные переговоры которых могут прослушиваться переданным пользователем
//
// Параметры:
//	Пользователь	- СправочникСсылка	- Пользователь, который контролирует телефонные переговоры
//
// Возвращаемое значение:
//	Массив	- Массив прослушиваемых пользователей
//
Функция сфпПолучитьМассивПрослушиваемыхПользователей(Пользователь) Экспорт
	МассивПользователей = Новый Массив;
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат МассивПользователей;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	СписокПользователейГрупп = Новый СписокЗначений;
	ИспользоватьГруппыПользователей	= сфпИспользоватьГруппыПользователей();	
	Если ИспользоватьГруппыПользователей Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	сфпДоступныеДляПрослушиванияПользователи.КонтролируемыйПользователь КАК Группа
		               |ИЗ
		               |	РегистрСведений.сфпДоступныеДляПрослушиванияПользователи КАК сфпДоступныеДляПрослушиванияПользователи
		               |ГДЕ
		               |	сфпДоступныеДляПрослушиванияПользователи.Пользователь = &Пользователь
		               |	И сфпДоступныеДляПрослушиванияПользователи.ЭтоГруппа";
		СписокГрупп = Новый СписокЗначений;
		СписокГрупп.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Группа"));
		Если СписокГрупп.НайтиПоЗначению(Справочники.ГруппыПользователей.ВсеПользователи) = Неопределено Тогда
			Запрос.УстановитьПараметр("СписокГрупп", СписокГрупп);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ГруппыПользователейСостав.Пользователь КАК Пользователь
			               |ИЗ
			               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&СписокГрупп)";
			СписокПользователейГрупп.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь"));
		Иначе	
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	Пользователи.Ссылка КАК Пользователь
			               |ИЗ
			               |	Справочник.Пользователи КАК Пользователи";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
			   МассивПользователей.Добавить(Выборка.Пользователь);
		   	КонецЦикла;
			Если МассивПользователей.Найти(Пользователь) = Неопределено Тогда
				МассивПользователей.Добавить(Пользователь);
			КонецЕсли;				
			Возврат МассивПользователей;	
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	сфпДоступныеДляПрослушиванияПользователи.КонтролируемыйПользователь КАК Пользователь
	               |ИЗ
	               |	РегистрСведений.сфпДоступныеДляПрослушиванияПользователи КАК сфпДоступныеДляПрослушиванияПользователи
	               |ГДЕ
	               |	сфпДоступныеДляПрослушиванияПользователи.Пользователь = &Пользователь
	               |	И НЕ сфпДоступныеДляПрослушиванияПользователи.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	   МассивПользователей.Добавить(Выборка.Пользователь);
	КонецЦикла;
	Если ИспользоватьГруппыПользователей Тогда
		Для Каждого ПользовательГруппы Из СписокПользователейГрупп Цикл
			Если МассивПользователей.Найти(ПользовательГруппы.Значение) = Неопределено Тогда
				МассивПользователей.Добавить(ПользовательГруппы.Значение);
			КонецЕсли;	
		КонецЦикла;	                
	КонецЕсли;	
	Если МассивПользователей.Найти(Пользователь) = Неопределено Тогда
		МассивПользователей.Добавить(Пользователь);
	КонецЕсли;
	Возврат МассивПользователей;	
КонецФункции // сфпПолучитьМассивПрослушиваемыхПользователей()	


/////////////////////////////////////////////////
// МАСТЕР НАСТРОЙКИ IP-АТС AGAT UX

// Функция возвращает массив пользователей, для использования в мастере настроек
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив пользователей
//
Функция сфпПолучитьМассивПользователей() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Пользователи.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");			   
КонецФункции // сфпПолучитьМассивПользователей()

// Функция возвращает адрес хранилища файла настроек мастера настройки
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Адрес хранилища мастера настроек
//
Функция сфпВернутьХранилищеФайлаНастройкиМастера() Экспорт
	Макет = ПолучитьОбщийМакет("сфпФайлНастроекМастераAgatUX");
	Адрес = ПоместитьВоВременноеХранилище(Макет);
	Возврат Адрес;
КонецФункции // сфпВернутьХранилищеФайлаНастройкиМастера()

// Функция возвращает адрес хранилища мастера настроек
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Адрес хранилища мастера настроек
//
Функция сфпВернутьХранилищеМастераНастройки() Экспорт
	Макет = ПолучитьОбщийМакет("сфпУстановщикМастераНастройкиAgatUX");
	Адрес = ПоместитьВоВременноеХранилище(Макет);
	Возврат Адрес;
КонецФункции // сфпВернутьХранилищеМастераНастройки()


/////////////////////////////////////////////////
// СИСТЕМА ЗАПИСИ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ CLON

// Функция убирает из IP-адреса пробелы и незначащие нули
//
// Параметры:
//	IPАдрес	- Строка IP-адреса
//
// Возвращаемое значение:
//	Строка	- Строка IP-адреса после очистки
//
Функция ОчиститьIPАдрес(IPАдрес)
	Попытка
		СтрокаIP		= IPАдрес;
		ПозицияТочки	= Найти(СтрокаIP, ".");
		Строка1IP		= Лев(СтрокаIP, ПозицияТочки - 1);
		СтрокаIP		= Сред(СтрокаIP, ПозицияТочки + 1);
		ПозицияТочки	= Найти(СтрокаIP, ".");
		Строка2IP		= Лев(СтрокаIP, ПозицияТочки - 1);
		СтрокаIP		= Сред(СтрокаIP, ПозицияТочки + 1);
		ПозицияТочки	= Найти(СтрокаIP, ".");
		Строка3IP		= Лев(СтрокаIP, ПозицияТочки - 1);
		Строка4IP		= Сред(СтрокаIP, ПозицияТочки + 1);
		CLONServerIP 	= Строка(Число(СокрЛП(Строка1IP))) + "." + Строка(Число(СокрЛП(Строка2IP))) + "."
			+ Строка(Число(СокрЛП(Строка3IP))) + "." + Строка(Число(СокрЛП(Строка4IP)));
	Исключение
		CLONServerIP	= IPАдрес;
	КонецПопытки;
	Возврат CLONServerIP;
КонецФункции // ОчиститьIPАдрес()

// Функция возвращает структуру настроек для подключения к серверу CLON
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура настроек
//
Функция сфпПолучитьНастройкиCLON() Экспорт
	НастройкиCLON = Новый Структура;
	CLONServerIP = ОчиститьIPАдрес(Константы.сфпCLONServerIP.Получить());
	НастройкиCLON.Вставить("CLONServerIP",			CLONServerIP);
	НастройкиCLON.Вставить("CLONServerPort",		Константы.сфпCLONServerPort.Получить());
	CLONType = Константы.сфпCLONType.Получить();
	Если CLONType = Перечисления.сфпCLONType.E1 Тогда
		НастройкиCLON.Вставить("CLONType",	0);
	ИначеЕсли CLONType = Перечисления.сфпCLONType.BRI Тогда
		НастройкиCLON.Вставить("CLONType",	2);
	ИначеЕсли CLONType = Перечисления.сфпCLONType.IP Тогда
		НастройкиCLON.Вставить("CLONType",	3);
	Иначе	
		НастройкиCLON.Вставить("CLONType",	1);
	КонецЕсли;	
	НастройкиCLON.Вставить("CLONServerLogin",		СокрЛП(Константы.сфпCLONServerLogin.Получить()));
	НастройкиCLON.Вставить("CLONServerPassword",	СокрЛП(Константы.сфпCLONServerPassword.Получить()));
	Возврат НастройкиCLON;
КонецФункции // сфпПолучитьНастройкиCLON()


/////////////////////////////////////////////////
// ОБЩИЕ ТЕЛЕФОННЫЕ КНИГИ СЕРВЕРА СОФТФОН

// Функция проверяет заполнение констант настроек сервера СофтФон
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Заполнение настроек
//
Функция сфпЗаполненыНастройкиСервера()
	ЕстьОшибки = Ложь;	
	Если ПустаяСтрока(Константы.сфпИмяСервера.Получить()) Тогда
		ЕстьОшибки = Истина;	
	КонецЕсли;	
	Если ПустаяСтрока(Константы.сфпПорт.Получить()) Тогда
		ЕстьОшибки = Истина;	
	КонецЕсли;
	Возврат НЕ ЕстьОшибки;
КонецФункции // сфпЗаполненыНастройкиСервера()	

// Функция возвращает расписание регламентного задания
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	РасписаниеРегламентногоЗадания	- Расписание регламентного задания
//
Функция сфпПолучитьРасписаниеРегламентноеЗадание() Экспорт
	РегламентноеЗадание = сфпПолучитьРегламентноеЗаданиеОбновленияТелефонныхКниг();
	Возврат РегламентноеЗадание.Расписание;
КонецФункции // сфпПолучитьРасписаниеРегламентноеЗадание();

// Функция возвращает регламентное задание ПроверкаСМС
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	РегламентноеЗадание	- Регламентное задание обновления телефонных книг
//
Функция сфпПолучитьРегламентноеЗаданиеОбновленияТелефонныхКниг() Экспорт
    Возврат РегламентныеЗадания.НайтиПредопределенное("сфпОбновлениеТелефонныхКниг");
КонецФункции // сфпПолучитьРегламентноеЗаданиеОбновленияТелефонныхКниг()

// Функция возвращает строку с описанием номера для дерева телефонной книги
//
// Параметры:
//	Контакт			- СправочникСсылка	- Контакт
//	ВидТелефона		- СправочникСсылка	- Вид телефонного номера
//	ПорядковыйНомер	- Число				- Порядковый номер телефона
//
Функция сфпПолучитьПредставлениеНомера(Контакт, ВидТелефона, ПорядковыйНомер) Экспорт
	ПредставлениеНомера = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",				Контакт);
	Запрос.УстановитьПараметр("Вид",				ВидТелефона);
	Запрос.УстановитьПараметр("ПорядковыйНомер",	ПорядковыйНомер);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	сфпНомераТелефоновДляПоиска.Представление
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
	               |ГДЕ
	               |	сфпНомераТелефоновДляПоиска.Объект = &Объект
	               |	И сфпНомераТелефоновДляПоиска.Вид = &Вид
	               |	И сфпНомераТелефоновДляПоиска.ПорядковыйНомер = &ПорядковыйНомер";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредставлениеНомера = Выборка.Представление;
	КонецЕсли;	
	Возврат ПредставлениеНомера;
КонецФункции // сфпПолучитьПредставлениеНомера()	

// Функция возвращает массив всех пользователей
//
// Параметры:
//	МассивВидов	- Массив	- Массив используемых  видов телефонов
//
// Возвращаемое значение:
//	Массив	- Массив всех пользователей
//
Функция сфпПолучитьМассивВсехПользователей(МассивВидов) Экспорт
	МассивВсехПользователей = Новый Массив;
	СписокВидов = Новый СписокЗначений;
	СписокВидов.ЗагрузитьЗначения(МассивВидов);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокВидов",	СписокВидов);
	Запрос.УстановитьПараметр("Настройка",		ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Пользователи.Объект КАК Объект,
	               |	Пользователи.Наименование КАК Наименование,
	               |	Пользователи.Подразделение КАК Подразделение,
	               |	ЕСТЬNULL(Телефоны.Вид, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)) КАК Вид,
	               |	ЕСТЬNULL(Телефоны.НаименованиеВида, """") КАК НаименованиеВида,
	               |	ЕСТЬNULL(Телефоны.ПорядковыйНомер, 0) КАК ПорядковыйНомер,
	               |	ЕСТЬNULL(Телефоны.Представление, """") КАК Представление,
	               |	ЕСТЬNULL(Настройки.Значение, """") КАК ВнутреннийНомер
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Пользователи.Ссылка КАК Объект,
	               |		Пользователи.Наименование КАК Наименование";
	Если Метаданные.Справочники.Пользователи.Реквизиты.Найти("ТекущееПодразделение") = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ",
	               |		"""" КАК Подразделение";
	Иначе				   
		Запрос.Текст = Запрос.Текст + ",
	               |		Пользователи.ТекущееПодразделение КАК Подразделение";
	КонецЕсли;				   
	Запрос.Текст = Запрос.Текст + "
	               |	ИЗ
	               |		Справочник.Пользователи КАК Пользователи
	               |	ГДЕ
	               |		НЕ Пользователи.ПометкаУдаления) КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НомераТелефоновДляПоиска.Объект КАК Объект,
	               |			НомераТелефоновДляПоиска.Вид КАК Вид,
	               |			НомераТелефоновДляПоиска.ПорядковыйНомер КАК ПорядковыйНомер,
	               |			НомераТелефоновДляПоиска.Представление КАК Представление,
	               |			НомераТелефоновДляПоиска.Вид.Наименование КАК НаименованиеВида
	               |		ИЗ
	               |			РегистрСведений.сфпНомераТелефоновДляПоиска КАК НомераТелефоновДляПоиска
	               |		ГДЕ
	               |			НомераТелефоновДляПоиска.Вид В(&СписокВидов)) КАК Телефоны
	               |		ПО Пользователи.Объект = Телефоны.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НастройкиПользователей.Пользователь КАК Пользователь,
	               |			НастройкиПользователей.Значение КАК Значение
	               |		ИЗ
	               |			РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	               |		ГДЕ
	               |			НастройкиПользователей.Настройка = &Настройка) КАК Настройки
	               |		ПО Пользователи.Объект = Настройки.Пользователь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Пользователи.Наименование,
	               |	ЕСТЬNULL(Телефоны.Вид, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)),
	               |	ЕСТЬNULL(Телефоны.ПорядковыйНомер, 0)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Объект) Тогда
			СтруктураПользователя = Новый Структура;
			СтруктураПользователя.Вставить("Объект",			Выборка.Объект);
			СтруктураПользователя.Вставить("Наименование",		Выборка.Наименование);
			СтруктураПользователя.Вставить("ВнутреннийНомер",	Выборка.ВнутреннийНомер);
			СтруктураПользователя.Вставить("Подразделение",		Выборка.Подразделение);
			СтруктураПользователя.Вставить("Вид",				Выборка.Вид);
			СтруктураПользователя.Вставить("НаименованиеВида",	Выборка.НаименованиеВида);
			СтруктураПользователя.Вставить("ПорядковыйНомер",	Выборка.ПорядковыйНомер);
			СтруктураПользователя.Вставить("Представление",		Выборка.Представление);
			МассивВсехПользователей.Добавить(СтруктураПользователя);
		КонецЕсли;	
	КонецЦикла;	
	Возврат МассивВсехПользователей;
КонецФункции // ПолучитьМассивВсехПользователей()	

// Процедура проверяет заполнение структуры строки телефонной книги и добавляет ее в массив строк
//
// Параметры:
//	ЭлементМассива			- Структура	- Структура строки телефонной книги
//	МассивТелефоннойКниги	- Массив	- Массив строк телефонной книги
//	Родитель				- Структура	- Строка-родитель текущей строки телефонной книги
//
Процедура сфпДобавитьВМассивТелефоннойКниги(ЭлементМассива, МассивТелефоннойКниги, Родитель)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлементМассива.Объект)) И НЕ ОбщегоНазначения.СсылкаСуществует(ЭлементМассива.Объект) Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(ЭлементМассива.Объект) Тогда
		Если ЭлементМассива.Картинка = 2 Тогда
			Если ТипЗнч(ЭлементМассива.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
				ВнутреннийНомер = сфпТекущийВнутреннийНомер(ЭлементМассива.Объект);
				Если ПустаяСтрока(ВнутреннийНомер) Тогда Возврат; КонецЕсли;
				ЭлементМассива.Наименование = НСтр("ru='Внутренний номер: '") + ВнутреннийНомер;
			Иначе
				ПредставлениеНомера = сфпПолучитьПредставлениеНомера(Родитель.Объект, ЭлементМассива.Объект, ЭлементМассива.ПорядковыйНомер);
				Если ПустаяСтрока(ПредставлениеНомера) Тогда Возврат; КонецЕсли;
				ЭлементМассива.Наименование = ЭлементМассива.Объект.Наименование + ": " + ПредставлениеНомера;
			КонецЕсли;	
			МассивТелефоннойКниги.Добавить(ЭлементМассива);
		Иначе
			Если ЭлементМассива.Объект.ПометкаУдаления Тогда Возврат; КонецЕсли; 
			ЭлементМассива.Наименование = ЭлементМассива.Объект.Наименование;
			ПодчиненныеСтроки 			= ЭлементМассива.Строки;
			ЭлементМассива.Строки		= Новый Массив;
			Для Каждого ПодчиненныйЭлемент Из  ПодчиненныеСтроки Цикл
				сфпДобавитьВМассивТелефоннойКниги(ПодчиненныйЭлемент, ЭлементМассива.Строки, ЭлементМассива);
			КонецЦикла;	
			Если ЭлементМассива.Строки.Количество() > 0 Тогда
				МассивТелефоннойКниги.Добавить(ЭлементМассива);
			КонецЕсли;	
		КонецЕсли;
	Иначе
		ПодчиненныеСтроки 		= ЭлементМассива.Строки;
		ЭлементМассива.Строки	= Новый Массив;
		Для Каждого ПодчиненныйЭлемент Из  ПодчиненныеСтроки Цикл
			сфпДобавитьВМассивТелефоннойКниги(ПодчиненныйЭлемент, ЭлементМассива.Строки, ЭлементМассива);
		КонецЦикла;	
		Если ЭлементМассива.Строки.Количество() > 0 Тогда
			МассивТелефоннойКниги.Добавить(ЭлементМассива);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // сфпДобавитьВМассивТелефоннойКниги()	

// Функция обновляет данные телефонной книги и возвращает ее структуру
//
// Параметры:
//	ТелефоннаяКнига	- СправочникСсылка	- Телефонная книга
//
Функция сфпОбновитьТелефоннуюКнигу(ТелефоннаяКнига)
	СтруктураКниги	= Новый Структура;
	СтруктураКниги.Вставить("Идентификатор",	ТелефоннаяКнига.Идентификатор);
	СтруктураКниги.Вставить("ИмяКниги",			ТелефоннаяКнига.Наименование);
	Если ТелефоннаяКнига.ПометкаУдаления Тогда
		СтруктураКниги.Вставить("ВидыТелефонов",	Новый Массив);
		СтруктураКниги.Вставить("МассивКниги",		Новый Массив);
		Возврат СтруктураКниги;
	КонецЕсли;	
	ТелефоннаяКнигаОбъект	= ТелефоннаяКнига.ПолучитьОбъект();
	МассивВидовТелефонов	= Новый Массив;
	МассивВидов				= Новый Массив;
	Для Каждого СтрокаВида Из ТелефоннаяКнигаОбъект.ВидыТелефонов Цикл
		Если НЕ СтрокаВида.Пометка Тогда
			Продолжить;
		ИначеЕсли СтрокаВида.Вид = НСтр("ru='Внутренний номер'") Тогда 	
			СтруктураВида = Новый Структура;
			СтруктураВида.Вставить("Идентификатор",	СтрокаВида.Идентификатор);
			СтруктураВида.Вставить("Наименование",	СтрокаВида.Наименование);
			СтруктураВида.Вставить("Псевдоним",		СтрокаВида.Псевдоним);
			МассивВидовТелефонов.Добавить(СтруктураВида);
			МассивВидов.Добавить(СтрокаВида.Вид);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаВида.Вид) Тогда
			СтрокаВида.Пометка	= Ложь;
		ИначеЕсли НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаВида.Вид) Тогда
			СтрокаВида.Вид		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			СтрокаВида.Пометка	= Ложь;
		ИначеЕсли СтрокаВида.Вид.ПометкаУдаления Тогда
			СтрокаВида.Вид		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			СтрокаВида.Пометка	= Ложь;
		Иначе
			СтруктураВида = Новый Структура;
			СтруктураВида.Вставить("Идентификатор",	СтрокаВида.Идентификатор);
			СтруктураВида.Вставить("Наименование",	СтрокаВида.Наименование);
			СтруктураВида.Вставить("Псевдоним",		СтрокаВида.Псевдоним);
			МассивВидовТелефонов.Добавить(СтруктураВида);
			МассивВидов.Добавить(СтрокаВида.Вид);
		КонецЕсли;	
	КонецЦикла;
	МассивВсехПользователей	= сфпПолучитьМассивВсехПользователей(МассивВидов);
	МассивКниги				= ТелефоннаяКнигаОбъект.МассивКниги.Получить();
	Если МассивКниги = Неопределено Тогда
		МассивКниги	= Новый Массив;
	КонецЕсли;	
	// Обновляем телефонную книгу
	МассивТелефоннойКниги	= Новый Массив;
	Для Каждого ЭлементМассива Из МассивКниги Цикл
		сфпДобавитьВМассивТелефоннойКниги(ЭлементМассива, МассивТелефоннойКниги, Неопределено);
	КонецЦикла;	
	ТелефоннаяКнигаОбъект.МассивКниги = Новый ХранилищеЗначения(МассивТелефоннойКниги, Новый СжатиеДанных(9));
	Попытка	
		ТелефоннаяКнигаОбъект.Записать();
	Исключение
	КонецПопытки;	
	СтруктураКниги.Вставить("ВидыТелефонов",	МассивВидовТелефонов);
	СтруктураКниги.Вставить("МассивКниги",		МассивТелефоннойКниги);
	Возврат СтруктураКниги;
КонецФункции // сфпОбновитьТелефоннуюКнигу()	
	
// Процедура записывает описание группы телефонной книги
//
// Параметры:
//	XMLОписание		- ЗаписьXML	- Описание телефонной книги
//	СтруктураГруппы	- Структура	- Структура группы
//
Процедура сфпЗаписатьОписаниеГруппы(XMLОписание, СтруктураГруппы)
	XMLОписание.ЗаписатьНачалоЭлемента("group");
	XMLОписание.ЗаписатьАтрибут("id",		XMLСтрока(СтруктураГруппы.Идентификатор));
	XMLОписание.ЗаписатьАтрибут("name",		XMLСтрока(СтруктураГруппы.Наименование));
	XMLОписание.ЗаписатьАтрибут("deleted",	XMLСтрока(0));
	Для Каждого СтрокаСтруктурыГруппы Из СтруктураГруппы.Строки Цикл
		Если СтрокаСтруктурыГруппы.ЭтоГруппа Тогда
			сфпЗаписатьОписаниеГруппы(XMLОписание, СтрокаСтруктурыГруппы);
		Иначе
			сфпЗаписатьОписаниеКонтакта(XMLОписание, СтрокаСтруктурыГруппы);
		КонецЕсли;	
	КонецЦикла;
	XMLОписание.ЗаписатьКонецЭлемента();
КонецПроцедуры	// сфпЗаписатьОписаниеГруппы()

// Процедура записывает описание контакта телефонной книги
//
// Параметры:
//	XMLОписание			- ЗаписьXML	- Описание телефонной книги
//	СтруктураКонтакта	- Структура	- Структура контакта
//
Процедура сфпЗаписатьОписаниеКонтакта(XMLОписание, СтруктураКонтакта)
	XMLОписание.ЗаписатьНачалоЭлемента("contact");
	XMLОписание.ЗаписатьАтрибут("id",			XMLСтрока(СтруктураКонтакта.Идентификатор));
	XMLОписание.ЗаписатьАтрибут("name",			XMLСтрока(СтруктураКонтакта.Наименование));
	XMLОписание.ЗаписатьАтрибут("extcode",		XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("timestamp",	XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("deleted",		XMLСтрока(0));
	СписокНомеров = Новый СписокЗначений;	
	Для Каждого СтрокаСтруктурыКонтакта Из СтруктураКонтакта.Строки Цикл
		ПозицияРазделителя = Найти(СтрокаСтруктурыКонтакта.Наименование, ": ");
		Если ПозицияРазделителя > 0 Тогда
			НайденныйЭлемент = СписокНомеров.НайтиПоЗначению(СтрокаСтруктурыКонтакта.Идентификатор);
			Если НайденныйЭлемент = Неопределено Тогда 		
				СписокНомеров.Добавить(СтрокаСтруктурыКонтакта.Идентификатор, Сред(СтрокаСтруктурыКонтакта.Наименование, ПозицияРазделителя + 2));
			Иначе
				НайденныйЭлемент.Представление = НайденныйЭлемент.Представление + ";" + Сред(СтрокаСтруктурыКонтакта.Наименование, ПозицияРазделителя + 2);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Для Каждого ЭлементСписка Из СписокНомеров Цикл
		XMLОписание.ЗаписатьНачалоЭлемента("item");
		XMLОписание.ЗаписатьАтрибут("infoid",	XMLСтрока(ЭлементСписка.Значение));
		XMLОписание.ЗаписатьАтрибут("value",	XMLСтрока(ЭлементСписка.Представление));
		XMLОписание.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	АватарКонтакта = сфпПолучитьАватарКонтакта(СтруктураКонтакта.Объект, Ложь);
	Если НЕ ПустаяСтрока(АватарКонтакта) Тогда
		XMLОписание.ЗаписатьНачалоЭлемента("image");
		XMLОписание.ЗаписатьТекст(XMLСтрока(СтрЗаменить(АватарКонтакта, Символы.ПС, "")));
		XMLОписание.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	XMLОписание.ЗаписатьКонецЭлемента();
КонецПроцедуры // сфпЗаписатьОписаниеКонтакта()

// Функция формирует XML-строку описания телефонной книги
//
// Параметры:
//	СтруктураКниги	- Структура	- Структура телефонной книги
//	УдалениеКниги	- Булево	- Признак формирования сокращенной структуры книги для ее удаления
//		
// Возвращаемое значение:
//	Строка	- XML-строка описания телефонной книги
//
Функция сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, УдалениеКниги = Ложь) Экспорт
	XMLОписание = Новый ЗаписьXML();
	XMLОписание.УстановитьСтроку();
	XMLОписание.ЗаписатьОбъявлениеXML();
	XMLОписание.ЗаписатьНачалоЭлемента("addressbook");
	XMLОписание.ЗаписатьАтрибут("id",			XMLСтрока(СтруктураКниги.Идентификатор));
	XMLОписание.ЗаписатьАтрибут("name",			XMLСтрока(СтруктураКниги.ИмяКниги));
	XMLОписание.ЗаписатьАтрибут("type",			XMLСтрока(0));
	XMLОписание.ЗаписатьАтрибут("login",		XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("pass",			XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("timestamp",	XMLСтрока(""));
	XMLОписание.ЗаписатьАтрибут("fullreload",	XMLСтрока(1));
	Если УдалениеКниги Тогда
		XMLОписание.ЗаписатьАтрибут("deleted",	XMLСтрока(1));
	Иначе	
		XMLОписание.ЗаписатьАтрибут("deleted",	XMLСтрока(0));
		XMLОписание.ЗаписатьНачалоЭлемента("infotype");
		Для Каждого СтрокаВида Из СтруктураКниги.ВидыТелефонов Цикл
			XMLОписание.ЗаписатьНачалоЭлемента("info");
			XMLОписание.ЗаписатьАтрибут("infoid",		XMLСтрока(СтрокаВида.Идентификатор));
			XMLОписание.ЗаписатьАтрибут("name",			XMLСтрока(СтрокаВида.Наименование));
			XMLОписание.ЗаписатьАтрибут("shortname",	XMLСтрока(СтрокаВида.Псевдоним));
			XMLОписание.ЗаписатьАтрибут("type",			XMLСтрока(0));
			XMLОписание.ЗаписатьКонецЭлемента();
		КонецЦикла;
		XMLОписание.ЗаписатьКонецЭлемента();
		XMLОписание.ЗаписатьНачалоЭлемента("group");
		XMLОписание.ЗаписатьАтрибут("id",		XMLСтрока(СтруктураКниги.Идентификатор));
		XMLОписание.ЗаписатьАтрибут("name",		XMLСтрока(СтруктураКниги.ИмяКниги));
		XMLОписание.ЗаписатьАтрибут("deleted",	XMLСтрока(0));
		// Контакты
		Для Каждого ЭлементМассива Из СтруктураКниги.МассивКниги Цикл
			Если ЭлементМассива.ЭтоГруппа Тогда
				сфпЗаписатьОписаниеГруппы(XMLОписание, ЭлементМассива);
			Иначе
				сфпЗаписатьОписаниеКонтакта(XMLОписание, ЭлементМассива);
			КонецЕсли;	
		КонецЦикла;
		XMLОписание.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	XMLОписание.ЗаписатьКонецЭлемента();
	Возврат XMLОписание.Закрыть();
КонецФункции // сфпСформироватьОписаниеТелефоннойКниги()

// Процедура - обработчик регламентного задания по обновлению общих телефонных книг
//
// Параметры:
//	Нет.
//
Процедура сфпОбновлениеТелефонныхКниг() Экспорт
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат;
	ИначеЕсли НЕ сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ сфпЗаполненыНастройкиСервера() Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Подключение к серверу СофтФон'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не заполнены настройки подключения к веб-сервису сервера СофтФон'"));
		Возврат;
	КонецЕсли;
	ВебСервис 		= Неопределено;
	АдресСервера	= Константы.сфпИмяСервера.Получить();
	ПортСервера		= Константы.сфпПорт.Получить();
	Попытка
		Определения	= Новый WSОпределения("http://" + АдресСервера + ":" + Формат(Число(ПортСервера), "ЧГ=0") + "/wsdl/ISOAPSoftPhoneSrv");
		ВебСервис	= Новый WSПрокси(Определения, "http://tempuri.org/", "ISOAPSoftPhoneSrvservice", "ISOAPSoftPhoneSrvPort");
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Подключение к серверу СофтФон'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось подключиться к веб-сервису серверу СофтФон'"));
	КонецПопытки;	
	Если ВебСервис = Неопределено Тогда Возврат; КонецЕсли;
	Выборка	= Справочники.сфпТелефонныеКниги.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.УчаствуетВРегламентномЗадании Тогда
			СтруктураКниги = сфпОбновитьТелефоннуюКнигу(Выборка.Ссылка);
			ОписаниеТелефоннойКниги = сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, Выборка.ПометкаУдаления);
			Попытка
				ВебСервис.PutAddressBookXML("", ОписаниеТелефоннойКниги); 
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='Запись телефонной книги'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Не удалось записать телефонную книгу: '" + Выборка.Наименование));
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры // сфпОбновлениеТелефонныхКниг()	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С JSON

// Функция получает описание объекта из модели json. 
//
// Параметры:
//  СтрJSON - Строка - описание объекта в виде модели json
//
// Возвращаемое значение:
//  Значение    - Соответствие - соответствие свойств и значений объекта 
//
Функция UnJSON(СтрJSON) Экспорт 
	
	Перем Значение;
	Если ПолучитьЗначениеJSON(СтрJSON,Значение)=0 Тогда
		Возврат Значение;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции // UnJSON()

// Функция осуществляет непосредственный разбор json. 
//
//
Функция ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция=1,Ключ="") Экспорт
	Перем Кавычка;

	ЗначениеВСтроке="";
	Кавычек=0;
	Комментарий=Ложь;
	Строка=Ложь;

	Пока Позиция<=СтрДлина(СтрJSON) Цикл
		ХХ=Сред(СтрJSON,Позиция,2);
		Х=Лев(ХХ,1);
		Позиция=Позиция+1;

		Если Х>" " ИЛИ Строка Тогда //Отсекаем всякий хлам

			Если Комментарий Тогда
				//Это комментарий. Крутимся в цикле пока не встретится конец комментария
				Если ХХ="*/" Тогда
					//Комментарий закончился
					Комментарий=Ложь;
					Позиция=Позиция+1;
				КонецЕсли;

			ИначеЕсли Х="\" Тогда
				Позиция=Позиция+1;
				ХХ=ВРег(ХХ);
				Если ХХ="\""" Тогда ЗначениеВСтроке=ЗначениеВСтроке+""""
				ИначеЕсли ХХ="\\" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"\"
				ИначеЕсли ХХ="\/" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"/"
				ИначеЕсли ХХ="\B" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символ(8)
				ИначеЕсли ХХ="\F" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПФ //перевод формы (страницы)
				ИначеЕсли ХХ="\N" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПС //перевод строки
				ИначеЕсли ХХ="\R" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВК //возврат каретки
				ИначеЕсли ХХ="\T" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВТаб //символ вертикальной табуляции
				ИначеЕсли ХХ="\U" Тогда
					ЗначениеВСтроке=ЗначениеВСтроке+Символ(Hex2Число(Сред(СтрJSON,Позиция,4))); //шестнадцатиричное число
					Позиция=Позиция+4
				КонецЕсли;

			ИначеЕсли Строка Тогда
				//Если строка не закончилась - то пропускаем управляющие символы
				Если Х=Кавычка Тогда
					//Закончилась строка
					Строка=Ложь;
					Кавычек=Кавычек+1;
				Иначе
					ЗначениеВСтроке=ЗначениеВСтроке+Х;
				КонецЕсли;

			ИначеЕсли ХХ="/*" Тогда
				//Начался комментарий
				Комментарий=Истина;
				Позиция=Позиция+1;

			ИначеЕсли Найти("""'{}[]:,",Х)>0 Тогда
				Если Х="""" ИЛИ Х="'" Тогда
					//Началась строка
					//Строка - коллекция нуля или больше символов Unicode, заключенная в
					//двойные кавычки, используя "\" в качестве символа экранирования.
					//Символ представляется как односимвольная строка.
					//Похожий синтаксис используется в C и Java.
					Строка=Истина;
					Кавычка=Х;
					Кавычек=Кавычек+1;

				ИначеЕсли Х="{" Тогда
					//Начался объект
					//Объект - неупорядоченный набор пар ключ/значение.
					//Объект начинается с "{" и заканчивается "}".
					//Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					Объект=Новый Соответствие;
					//Объект=Новый Структура;
					Пока Истина Цикл
						//Получим ключ и значение
						Ключ="";
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция,Ключ);
						//0 - есть значение и не конец объекта (запятая)
						//1 - есть значение и конец объекта
						//2 - нет значения и не конец объекта (запятая)
						//3 - нет значения и конец объекта
						Если Режим=0 Тогда
							Объект.Вставить(Ключ,Значение);
						ИначеЕсли Режим=1 Тогда
							Объект.Вставить(Ключ,Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение=Объект;
					Возврат 0

				ИначеЕсли Х="[" Тогда
					//Начался массив
					//Массив - упорядоченная коллекция значений.
					//Массив начинается с "[" и заканчивается "]".
					//Значения разделены ",".
					Массив=Новый Массив;
					Пока Истина Цикл
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);
						//0 - есть значение и не конец массива (запятая)
						//1 - есть значение и конец массива
						//2 - нет значения и не конец массива (запятая)
						//3 - нет значения и конец массива
						Если Режим=0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим = 1 Тогда
							Массив.Добавить(Значение);
							Прервать
						ИначеЕсли Режим = 3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение = Массив;
					Возврат 0

				ИначеЕсли Х="]" ИЛИ Х="}" Тогда
					//Закончился массив/объект
					Если ЗначениеВСтроке = "" И Кавычек = 0 Тогда
						Возврат 3 //нет значения и конец массива/объекта
					Иначе
						Значение = ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек);
						Возврат 1 //есть значение и конец массива/объекта
					КонецЕсли;

				ИначеЕсли Х=":" Тогда
					Ключ = ЗначениеВСтроке;
					Возврат ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);

				Иначе
					// запятая
					Прервать
				КонецЕсли;

			Иначе
				ЗначениеВСтроке = ЗначениеВСтроке+Х;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Кавычек > 0 Тогда
		Значение = ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке="" Тогда
			Возврат 2;
		Иначе
			Значение = ЗначениеБезКавычек(ЗначениеВСтроке)
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции // ПолучитьЗначениеJSON()

// Вспомогательная функция 
//
//
Функция Hex2Число(Hex) 
	Стр=ВРег(СокрЛП(Hex));
	Dec=0;
	Для Х=1 По СтрДлина(Стр) Цикл
		Dec=Dec+Найти("123456789ABCDEF",Сред(Стр,Х,1))*Pow(16,СтрДлина(Стр)-Х)
	КонецЦикла;
	Возврат Dec
КонецФункции

// Вспомогательная функция 
//
//
Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек)
	Если Кавычек>0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке)
	ИначеЕсли ЗначениеВСтроке="" Тогда
		Возврат Неопределено
	КонецЕсли;
	Возврат ЗначениеБезКавычек(ЗначениеВСтроке)
КонецФункции

// Вспомогательная функция 
//
//
Функция ЗначениеВКавычках(ЗначениеВСтроке)
	Возврат ЗначениеВСтроке;
КонецФункции

// Вспомогательная функция 
//
//
Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	// Это число, булево или null.
	// Хотя здесь могут быть и строки. Например: {Code:123}
	Стр = ВРег(ЗначениеВСтроке);
	Если Стр = "TRUE" Тогда
		Возврат Истина;
	ИначеЕсли Стр = "FALSE" Тогда
		Возврат Ложь;
	ИначеЕсли Стр = "NULL" Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Пробежимся по предполагаемому "числу"
	Экспонента	= Ложь;
	ХХ			= " ";
	Для Индекс = 1 По СтрДлина(Стр) Цикл
		Х = Сред(Стр, Индекс, 1);
		Если Найти("0123456789.+-", Х) Тогда
			ХХ = ХХ + Х;
		ИначеЕсли Х = "E" Тогда
			#Если ВебКлиент Тогда
				Возврат ЗначениеВСтроке;
			#Иначе
				Экспонента = Истина;
				УУ = XMLЗначение(Тип("Число"),ХХ);
				ХХ = " ";
			#КонецЕсли
		Иначе
			// то точно не число, а строка
			Возврат ЗначениеВСтроке;
		КонецЕсли;
	КонецЦикла;
	#Если ВебКлиент Тогда
		Попытка
			ХХ = Число(ХХ);
		Исключение
		КонецПопытки;	
	#Иначе
		ХХ = XMLЗначение(Тип("Число"), ХХ);
		Если Экспонента Тогда
			ХХ = УУ * Pow(10, ХХ);
		КонецЕсли;
	#КонецЕсли
	Возврат ХХ;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОЗДАНИЯ ДОКУМЕНТОВ

// Функция создает документ "Телефонный звонок"
//
// Параметры:
//	СтруктураЗвонка		- Структура	- Структура данных звонка
//	ДанныеЗаполнения	- Структура	- Структура данных для заполнения документа
//
// Возвращаемое значение:
//	ДокументСсылка	- Телефонный звонок
//
Функция сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, ДанныеЗаполнения) Экспорт
	НовыйЗвонок	= Неопределено;
	ДатаНачала	= сфпТекущаяДата();
	// Проверяем наличие уже созданного ранее документа телефонный звонок по данному звонку
	НовыйЗвонок = сфпНайтиПоследнийЗвонокПоНомеру(СтруктураЗвонка.НомерТелефона, ДатаНачала);
	Если НЕ ЗначениеЗаполнено(НовыйЗвонок) Тогда
		НовыйЗвонок	= сфпСофтФонПроСерверПереопределяемый.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, ДанныеЗаполнения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(НовыйЗвонок) Тогда
		// Добавляем запись в регистр истории звонков
		НоваяЗапись = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
		НоваяЗапись.ДатаНачала			= НовыйЗвонок.Дата;
	 	НоваяЗапись.Звонок				= НовыйЗвонок.Ссылка;
		НоваяЗапись.НомерТелефона		= НовыйЗвонок.АбонентКакСвязаться;
		НоваяЗапись.ДатаОтвета			= НовыйЗвонок.Дата;
		НоваяЗапись.ДатаОкончания		= НовыйЗвонок.Дата;	
		НоваяЗапись.Входящий			= НовыйЗвонок.Входящий;
		НоваяЗапись.ВнутреннийНомер		= сфпТекущийВнутреннийНомер();
		НоваяЗапись.ИдентификаторЗаписи	= НовыйЗвонок.сфпИдентификаторЗаписи;
		НоваяЗапись.ИдентификаторЗвонка	= НовыйЗвонок.сфпИдентификаторЗвонка;
		НоваяЗапись.Ответственный		= НовыйЗвонок.Ответственный;
		НоваяЗапись.АбонентКонтакт		= НовыйЗвонок.АбонентКонтакт;
		Попытка
			НоваяЗапись.Записать();
		Исключение
		КонецПопытки;	
	КонецЕсли;	
	Возврат НовыйЗвонок.Ссылка;
КонецФункции // сфпСоздатьТелефонныйЗвонок()

// Функция проверяет использование оповещений о пропущенных звонках
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования оповещений о пропущенных звонках
//
Функция сфпОповещатьОПропущенныхЗвонках()
	Возврат Константы.сфпОповещатьОПропущенныхЗвонках.Получить();
КонецФункции // сфпОповещатьОПропущенныхЗвонках()

// Процедура устанавливает значение реквизита с проверкой изменения
//
// Параметры:
//	ОбъектУстановки 	- Произвольный	- Объект, для которого производится установка реквизита
//	ИмяРеквизита		- Строка		- Имя реквизита
//	ЗначениеРеквизита	- Произвольный	- Значение реквизита
//	ТребуетсяЗапись		- Булево		- Признак изменения объекта записи
//
Процедура УстановитьЗначениеРеквизита(ОбъектУстановки, ИмяРеквизита, ЗначениеРеквизита, ТребуетсяЗапись)
	
	Если ОбъектУстановки[ИмяРеквизита] <> ЗначениеРеквизита Тогда
		ОбъектУстановки[ИмяРеквизита] = ЗначениеРеквизита;
		
		ТребуетсяЗапись = Истина;
	КонецЕсли;
	
КонецПроцедуры
			
// Процедура загружает историю звонков из SQL-базы сервера СофтФон
//
// Параметры:
//	Нет.
//
Процедура сфпПолучитьИсториюЗвонков() Экспорт
	
	Если НЕ сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ сфпИсточникИсторииЗвонковПодключен() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	НачалоЗагрузкиИстории = сфпТекущаяДата();
	
	ДатаНачалаВыборки = Константы.сфпДатаИсторииЗвонков.Получить();
	Если ДатаНачалаВыборки = Дата('00010101') Тогда
		ДатаНачалаВыборки = НачалоМесяца(НачалоЗагрузкиИстории);
	КонецЕсли;
	
	ЗапросВерсииТаблицы = Новый Запрос;
	ЗапросВерсииТаблицы.Текст = "ВЫБРАТЬ
	|	dbo_c_Sys.ParamName КАК ИмяПараметра,
	|	dbo_c_Sys.ParamValue КАК ЗначениеПараметра
	|ИЗ
	|	ВнешнийИсточникДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.Таблица.dbo_c_Sys КАК dbo_c_Sys";
	ТаблицаЗапроса = ЗапросВерсииТаблицы.Выполнить().Выгрузить();
	СвежаяВерсияТаблицы = Ложь;
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		ИскомаяСтрока = ТаблицаЗапроса[0];
		Если ИскомаяСтрока.ИмяПараметра = "VerDB" Тогда
			СвежаяВерсияТаблицы = (Число(ИскомаяСтрока.ЗначениеПараметра) >= 24);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	dbo_Calls.hCall КАК hCall,
	|	dbo_Calls.StartTime,
	|	ЕСТЬNULL(dbo_Calls.AnswerTime, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК AnswerTime,
	|	ЕСТЬNULL(dbo_Calls.DropTime, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК DropTime,
	|	dbo_Calls.CallerId,
	|	dbo_Calls.CalledId,
	|	dbo_Calls.Origin,
	|	dbo_Calls.RecordID,
	|	// Имя_Параметра КАК NumberOnLine
	|ИЗ
	|	ВнешнийИсточникДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.Таблица.dbo_Calls КАК dbo_Calls
	|ГДЕ
	|	dbo_Calls.StartTime > &ДатаНачалаВыборки
	|	И dbo_Calls.Deleted = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	dbo_Calls.StartTime");
	Запрос.УстановитьПараметр("ДатаНачалаВыборки", ДатаНачалаВыборки);
	
	Если СвежаяВерсияТаблицы Тогда
		  Запрос.Текст = СтрЗаменить(Запрос.Текст, "// Имя_Параметра", "ЕСТЬNULL(dbo_Calls.NumberOnLine, """")");
	Иначе Запрос.Текст = СтрЗаменить(Запрос.Текст, "// Имя_Параметра", """""");
	КонецЕсли;
	
	ДлинаНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	ДлинаВнешнегоНомера	= Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить() + 1;
	ДействиеПриОшибке = Константы.сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков.Получить();
	ПрерватьВыполнениеПриОшибке = (ДействиеПриОшибке = Перечисления.сфпДействияПриОшибкеЗагрузкиИсторииЗвонков.ПрерватьВыполнение);
	ПовторитьВыполнениеПриОшибке = (ДействиеПриОшибке = Перечисления.сфпДействияПриОшибкеЗагрузкиИсторииЗвонков.ПовторитьВыполнение);
	
	ДатаНезавершенногоЗвонка = Дата('00010101');
	ДатаПоследнегоЗвонка = ДатаНачалаВыборки;
	
	ТекущийАвторизованныйПользователь = сфпТекущийПользователь();
	ПользовательДляОповещений = Константы.сфпПользовательДляОповещений.Получить();
	Если НЕ ЗначениеЗаполнено(ПользовательДляОповещений) Тогда
		ПользовательДляОповещений = ТекущийАвторизованныйПользователь;
	КонецЕсли;
	
	ЗапросРегистра = Новый Запрос("
	|ВЫБРАТЬ ДатаНачала, НомерТелефона, Звонок
	|ИЗ РегистрСведений.сфпИсторияЗвонков
	|ГДЕ ИдентификаторЗвонка = &ИдентификаторЗвонка И ДатаНачала = &ДатаНачала");
	
	СчетчикЗаписей = 0;
	КоличествоЗаписейВПакете = 1000;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СчетчикЗаписей = СчетчикЗаписей + 1;
		
		Если СчетчикЗаписей = КоличествоЗаписейВПакете Тогда
			СчетчикЗаписей = 1;
			
			// Проверяем на незавершенные звонки
			Если ДатаНезавершенногоЗвонка = Дата('00010101') Тогда
				// Устанавливаем дату начала последнего звонка
				Константы.сфпДатаИсторииЗвонков.Установить(ДатаПоследнегоЗвонка);

			Иначе
				// Устанавливаем дату начала первого незавершенного звонка
				Константы.сфпДатаИсторииЗвонков.Установить(ДатаНезавершенногоЗвонка);
			КонецЕсли;
		КонецЕсли;
		
		сфпCallerId	= сфпУбратьИзНомераТелефонаВсеПрефиксы(Выборка.CallerId);
		сфпCalledId	= сфпУбратьИзНомераТелефонаВсеПрефиксы(Выборка.CalledId);
		
		Если ПустаяСтрока(сфпCallerId) ИЛИ ПустаяСтрока(сфпCalledId) Тогда
			// Нет номера звонящего или вызываемого абонента
			Продолжить;

		ИначеЕсли (СтрДлина(сфпCalledId) < ДлинаВнешнегоНомера) И (СтрДлина(сфпCallerId) < ДлинаВнешнегоНомера) Тогда
			// Внутренний звонок
			Продолжить;

		ИначеЕсли Выборка.StartTime >= (Выборка.DropTime - 3) Тогда
			// Звонок сразу переключен на другой внутренний номер
			Продолжить;

		ИначеЕсли Выборка.DropTime = Дата('00010101') Тогда
			// Если разговор не завершен
			Если НачалоДня(НачалоЗагрузкиИстории) = НачалоДня(Выборка.StartTime) Тогда
				Если ДатаНезавершенногоЗвонка = Дата('00010101') Тогда
					// Запоминаем дату первого незавершенного звонка
					ДатаНезавершенногоЗвонка = Выборка.StartTime - 1;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;

		ИначеЕсли СвежаяВерсияТаблицы И Выборка.NumberOnLine = "" Тогда
			// Попали на дозвон от шлюза, игнорируем
			Продолжить;	

		Иначе	
			// Добавляем запись в регистр
			ЭтоВходящийЗвонок = сфпОпределитьВходящийЗвонокПриЗагрузкеИстории(Выборка.Origin); 
			
			// Возможен случай, когда невозможно точно определить вид звонка по origin,
			// тогда используем "старый" алгоритм определения входящий/исходящий
			Если ЭтоВходящийЗвонок = Неопределено Тогда
				Если СтрДлина(сфпCallerId) < ДлинаВнешнегоНомера И СтрДлина(сфпCalledId) >= ДлинаВнешнегоНомера Тогда
					ЭтоВходящийЗвонок = Ложь;

				ИначеЕсли СтрДлина(сфпCalledId) < ДлинаВнешнегоНомера И СтрДлина(сфпCallerId) >= ДлинаВнешнегоНомера Тогда
					ЭтоВходящийЗвонок = Истина;

				Иначе
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru='Не удалось определить тип звонка'") + ": hCall = " + Выборка.hCall);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СвежаяВерсияТаблицы Тогда
				  НомерТелефонаВнутренний = Выборка.NumberOnLine;
			Иначе НомерТелефонаВнутренний = ?(ЭтоВходящийЗвонок, сфпCalledId, сфпCallerId);
			КонецЕсли;
			НомерТелефона = ?(ЭтоВходящийЗвонок, Выборка.CallerId, Выборка.CalledId);
			
			ЗапросРегистра.УстановитьПараметр("ИдентификаторЗвонка", Выборка.hCall);
			ЗапросРегистра.УстановитьПараметр("ДатаНачала", Выборка.StartTime);
			
			ВыборкаРегистра = ЗапросРегистра.Выполнить().Выбрать();
			Если ВыборкаРегистра.Следующий() Тогда
				ЗаписьРегистра = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.ДатаНачала = ВыборкаРегистра.ДатаНачала;
				ЗаписьРегистра.НомерТелефона = ВыборкаРегистра.НомерТелефона;
				ЗаписьРегистра.Звонок = ВыборкаРегистра.Звонок;
				ЗаписьРегистра.Прочитать();

				ТребуетсяЗаписьРегистра = Ложь;

			Иначе
				Если сфпНайтиЗвонокВРегистреПоНомеруПриЗагрузкеИстории(Выборка.StartTime, сфпCallerId) Тогда
					// Звонок уже есть в регистре
					ДатаПоследнегоЗвонка = Выборка.StartTime;
					Продолжить;
					
				ИначеЕсли сфпНайтиЗвонокВРегистреПоНомеруПриЗагрузкеИстории(Выборка.StartTime, сфпCalledId) Тогда
					// Звонок уже есть в регистре
					ДатаПоследнегоЗвонка = Выборка.StartTime;
					Продолжить;
				КонецЕсли;
				
				ЗаписьРегистра = РегистрыСведений.сфпИсторияЗвонков.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.ДатаНачала = Выборка.StartTime;
				ЗаписьРегистра.НомерТелефона = Прав(НомерТелефона, ДлинаНомера);
				ЗаписьРегистра.Звонок = Документы.ТелефонныйЗвонок.ПустаяСсылка();
				
				ТребуетсяЗаписьРегистра = Истина;
			КонецЕсли;
			
			ДатаОкончанияЗвонка = ?(Выборка.DropTime = Дата('00010101'), МАКС(Выборка.StartTime, Выборка.AnswerTime), Выборка.DropTime);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ДатаОкончания", ДатаОкончанияЗвонка, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ДатаОтвета", Выборка.AnswerTime, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "Входящий", ЭтоВходящийЗвонок, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ИдентификаторЗаписи", Выборка.RecordID, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ИдентификаторЗвонка", Выборка.hCall, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "ВнутреннийНомер", НомерТелефонаВнутренний, ТребуетсяЗаписьРегистра);
			
			// Проверяем наличие уже созданного ранее документа телефонный звонок по данному звонку
			Если ЗначениеЗаполнено(ЗаписьРегистра.Звонок) Тогда
				НайденныйЗвонок = ЗаписьРегистра.Звонок;
			
			Иначе	
				НайденныйЗвонок = сфпНайтиПоследнийЗвонокПоНомеру(ЗаписьРегистра.НомерТелефона, ЗаписьРегистра.ДатаНачала);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйЗвонок) Тогда
				// Обновляем существующий звонок
				ЗвонокОбъект = НайденныйЗвонок.ПолучитьОбъект();
				ТребуетсяЗаписьЗвонка = Ложь;
				
			Иначе	
				// Создаем новый телефонный звонок
				ЗвонокОбъект = Документы.ТелефонныйЗвонок.СоздатьДокумент();
				ЗвонокОбъект.Дата = ЗаписьРегистра.ДатаНачала;
				ТребуетсяЗаписьЗвонка = Истина;
			КонецЕсли;
			
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "Входящий", ЗаписьРегистра.Входящий, ТребуетсяЗаписьЗвонка);
						
			Если НЕ ЗначениеЗаполнено(ЗвонокОбъект.Важность) Тогда
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "Важность", Перечисления.ВариантыВажностиВзаимодействия.Обычная, ТребуетсяЗаписьЗвонка);
			КонецЕсли;
			
			ТемаЗвонка = сфпЗаполнитьТемуТелефонногоЗвонка(ЗвонокОбъект.Входящий, ЗвонокОбъект.Дата);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "Тема", ТемаЗвонка, ТребуетсяЗаписьЗвонка);
						
			Если ЗначениеЗаполнено(ЗаписьРегистра.НомерТелефона) Тогда
				АбонентКакСвязаться = ЗаписьРегистра.НомерТелефона;
					
			ИначеЕсли СтрДлина(сфпCallerId) < ДлинаВнешнегоНомера Тогда
				АбонентКакСвязаться	= Выборка.CalledId; 
					
			Иначе
				АбонентКакСвязаться	= Выборка.CallerId; 
			КонецЕсли;
			
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "АбонентКакСвязаться", АбонентКакСвязаться, ТребуетсяЗаписьЗвонка);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпИдентификаторЗвонка", ЗаписьРегистра.ИдентификаторЗвонка, ТребуетсяЗаписьЗвонка);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпИдентификаторЗаписи", ЗаписьРегистра.ИдентификаторЗаписи, ТребуетсяЗаписьЗвонка);
			
			ДлительностьЗвонка = ЗаписьРегистра.ДатаОкончания - ЗаписьРегистра.ДатаНачала;
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпДлительностьЗвонка", ДлительностьЗвонка, ТребуетсяЗаписьЗвонка);
			
			СостояниеЗвонка = ?(ЗаписьРегистра.ДатаОтвета = Дата('00010101'), Перечисления.сфпСостоянияЗвонков.Пропущенный, Перечисления.сфпСостоянияЗвонков.Отвеченный);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "сфпСостояниеЗвонка", СостояниеЗвонка, ТребуетсяЗаписьЗвонка);
						
			НайденныйОтветственный = сфпНайтиОтветственного(ЗаписьРегистра.ВнутреннийНомер);
			Если ЗначениеЗаполнено(НайденныйОтветственный) Тогда
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "Ответственный", НайденныйОтветственный, ТребуетсяЗаписьЗвонка);
			КонецЕсли;
						
			ОписаниеЗвонка = сфпЗаполнитьОписаниеТелефонногоЗвонка(ЗвонокОбъект.сфпДлительностьЗвонка);
			УстановитьЗначениеРеквизита(ЗвонокОбъект, "Описание", ОписаниеЗвонка, ТребуетсяЗаписьЗвонка);
						
			ОписаниеЗвонка = "";
				
			МассивЗвонящих = сфпНайтиОбъектВРегистреПоТелефону(ЗаписьРегистра.НомерТелефона);
			Если МассивЗвонящих.Количество() = 0 Тогда
				АбонентПредставление = НСтр("ru='!!!Не определен!!!'");

			ИначеЕсли МассивЗвонящих.Количество() = 1 Тогда
				АбонентКонтакт = МассивЗвонящих[0];
				АбонентПредставление = сфпПолучитьНаименованиеКонтакта(АбонентКонтакт);
				
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "АбонентКонтакт", АбонентКонтакт, ТребуетсяЗаписьЗвонка);
				
				Если ЗаписьРегистра.Входящий Тогда
					Если НЕ ЗначениеЗаполнено(ЗвонокОбъект.Ответственный) Тогда
						Если ТипЗнч(АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
							УстановитьЗначениеРеквизита(ЗвонокОбъект, "Ответственный", АбонентКонтакт.ОсновнойМенеджер, ТребуетсяЗаписьЗвонка);
							Если ЗначениеЗаполнено(ЗвонокОбъект.Ответственный) Тогда
								ТекстОписания = Нстр("ru = 'Ответственный определен по закреплению менеджера за клиентом'");
								ОписаниеЗвонка = ОписаниеЗвонка + Символы.ПС + Символы.ПС + ТекстОписания;
							КонецЕсли;

						ИначеЕсли ТипЗнч(АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
							ВладелецКонтакта = сфпПолучитьВладельцаКонтакта(АбонентКонтакт);
							УстановитьЗначениеРеквизита(ЗвонокОбъект, "Ответственный", ВладелецКонтакта.ОсновнойМенеджер, ТребуетсяЗаписьЗвонка);
							Если ЗначениеЗаполнено(ЗвонокОбъект.Ответственный) Тогда
								ТекстОписания = Нстр("ru = 'Ответственный определен по закреплению менеджера за клиентом'");
								ОписаниеЗвонка = ОписаниеЗвонка + Символы.ПС + Символы.ПС + ТекстОписания;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			
			Иначе
				АбонентПредставление = НСтр("ru='Несколько совпадений номера: '") + ЗаписьРегистра.НомерТелефона;

				СписокЗвонящих = сфпСформироватьСписокОбъектовДляВыбораПоМассивуЗвонящих(МассивЗвонящих);
				Если СписокЗвонящих.Количество() > 0 Тогда
					СтрокаДобавки = Нстр("ru = 'Совпадения по номеру '") + ЗаписьРегистра.НомерТелефона + Нстр("ru =':'");
					ОписаниеЗвонка = ?(ЗначениеЗаполнено(ОписаниеЗвонка), ОписаниеЗвонка + Символы.ПС + Символы.ПС + СтрокаДобавки, СтрокаДобавки);
				КонецЕсли;
				Для Каждого ЭлементСписка Из СписокЗвонящих Цикл
					СтрокаПредставления = ЭлементСписка.Представление;
					ОписаниеЗвонка = ОписаниеЗвонка + Символы.ПС + СтрокаПредставления;
				КонецЦикла;
			КонецЕсли;	
			
			Если НЕ ПустаяСтрока(ОписаниеЗвонка) Тогда
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "Описание", ОписаниеЗвонка, ТребуетсяЗаписьЗвонка);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЗвонокОбъект.Ответственный) Тогда
				УстановитьЗначениеРеквизита(ЗвонокОбъект, "Ответственный", ПользовательДляОповещений, ТребуетсяЗаписьЗвонка);
			КонецЕсли;
			
			АвторЗвонка = ?(ЗначениеЗаполнено(ЗвонокОбъект.Ответственный), ЗвонокОбъект.Ответственный, ТекущийАвторизованныйПользователь);
            УстановитьЗначениеРеквизита(ЗвонокОбъект, "Автор", АвторЗвонка, ТребуетсяЗаписьЗвонка);
														
			Попытка
				Если ТребуетсяЗаписьЗвонка Тогда
					ЗвонокОбъект.Записать();
				КонецЕсли;
			Исключение
				СтрОшибки = ОписаниеОшибки();
				СтрОшибки = НСтр("ru='Не удалось записать Телефонный звонок'") + ": " + СтрОшибки;
								
				Если ПрерватьВыполнениеПриОшибке Тогда
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
					ВызватьИсключение СтрОшибки;
					
				ИначеЕсли ПовторитьВыполнениеПриОшибке Тогда
					УспешнаяЗапись = Ложь;
					
					Для к = 1 По 3 Цикл
						Попытка
							ЗвонокОбъект.Записать();
							УспешнаяЗапись = Истина;
							Прервать;
						Исключение
							СтрОшибки = ОписаниеОшибки();
							СтрОшибки = НСтр("ru='Не удалось записать Телефонный звонок'") + ": " + СтрОшибки;
						КонецПопытки;	
					КонецЦикла;
					
					Если НЕ УспешнаяЗапись Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
						ВызватьИсключение СтрОшибки;
					КонецЕсли;
					
				Иначе
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
				КонецЕсли;	
			КонецПопытки;
			
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "Звонок", ЗвонокОбъект.Ссылка, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "Ответственный", ЗвонокОбъект.Ответственный, ТребуетсяЗаписьРегистра);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, "АбонентКонтакт", ЗвонокОбъект.АбонентКонтакт, ТребуетсяЗаписьРегистра);

			// Записываем новую запись регистра
			Попытка
				Если ТребуетсяЗаписьРегистра Тогда
					ЗаписьРегистра.Записать();
				КонецЕсли;
			Исключение
				СтрОшибки = ОписаниеОшибки();
				СтрОшибки = НСтр("ru='Не удалось сформировать запись регистра Истории звонков'") + ": " + СтрОшибки;
								
				Если ПрерватьВыполнениеПриОшибке Тогда
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
					ВызватьИсключение СтрОшибки;
					
				ИначеЕсли ПовторитьВыполнениеПриОшибке Тогда
					УспешнаяЗапись = Ложь;
					
					Для к = 1 По 3 Цикл
						Попытка
							ЗвонокОбъект.Записать();
							УспешнаяЗапись = Истина;
							Прервать;
						Исключение
							СтрОшибки = ОписаниеОшибки();
							СтрОшибки = НСтр("ru='Не удалось записать Телефонный звонок'") + ": " + СтрОшибки;
						КонецПопытки;	
					КонецЦикла;
					
					Если НЕ УспешнаяЗапись Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
						ВызватьИсключение СтрОшибки;
					КонецЕсли;
					
				Иначе
					ЗаписьЖурналаРегистрации(НСтр("ru='Получение истории звонков'"), УровеньЖурналаРегистрации.Ошибка,,, СтрОшибки);
				КонецЕсли;
			КонецПопытки;
			
			Если ЗвонокОбъект.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный Тогда
				// Отмечаем все неотвеченные звонки по данному номеру, как отвеченные
				сфпЗавершитьПропущенныеЗвонки(ЗаписьРегистра.НомерТелефона);
			КонецЕсли;
			
			// Сдвигаем границу начала выборки записей
			ДатаПоследнегоЗвонка = Выборка.StartTime;
		КонецЕсли;	
	КонецЦикла;
	
	// Проверяем на незавершенные звонки
	Если ДатаНезавершенногоЗвонка = Дата('00010101') Тогда
		// Устанавливаем дату начала последнего звонка
		Константы.сфпДатаИсторииЗвонков.Установить(ДатаПоследнегоЗвонка);

	Иначе
		// Устанавливаем дату начала первого незавершенного звонка
		Константы.сфпДатаИсторииЗвонков.Установить(ДатаНезавершенногоЗвонка);
	КонецЕсли;
	
	// Создаем напоминания о пропущенных звонках
	сфпНапомнитьОПропущенныхЗвонках();

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // сфпПолучитьИсториюЗвонков()

// Процедура записывает окончание звонка в регистр истории звонков
//
// Параметры:
//	Звонок				- ДокументСсылка	- Телефонный звонок
//	ИдентификаторЗвонка	- Число				- Идентификатор звонка
//
Процедура сфпЗаписатьОкончаниеЗвонкаВРегистр(Звонок, ИдентификаторЗвонка) Экспорт
	ДатаОкончания	= сфпТекущаяДата();
	НаборЗаписей	= РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(Звонок);
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ЗаписьНабора.ИдентификаторЗвонка = ИдентификаторЗвонка Тогда
			ЗаписьНабора.ДатаОкончания	= ДатаОкончания;
			Если НЕ ЗначениеЗаполнено(ЗаписьНабора.АбонентКонтакт) Тогда
				ЗаписьНабора.АбонентКонтакт = Звонок.АбонентКонтакт;		
			КонецЕсли;	
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;	
			// Отмечаем все неотвеченные звонки по данному номеру, как отвеченные
			сфпЗавершитьПропущенныеЗвонки(ЗаписьНабора.НомерТелефона);	
			Прервать;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // сфпЗаписатьОкончаниеЗвонкаВРегистр()	

// Процедура записывает/изменяет абонента в регистре из документа "Телефонынй звонок"
//
// Параметры:
//	Звонок				- ДокументСсылка	- Телефонный звонок
//	ИдентификаторЗвонка	- Число				- Идентификатор звонка
//
Процедура сфпЗаписатьАбонентаЗвонкаВРегистрИсторииЗвонков(Звонок, ИдентификаторЗвонка)
	НаборЗаписей	= РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(Звонок);
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ЗаписьНабора.ИдентификаторЗвонка = ИдентификаторЗвонка Тогда
			ЗаписьНабора.АбонентКонтакт = Звонок.АбонентКонтакт;		
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;	
			Прервать;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // сфпЗаписатьИдентификаторЗаписиВРегистр()

// Процедура записывает идентификатор записи в регистр истории звонков
//
// Параметры:
//	Звонок				- ДокументСсылка	- Телефонный звонок
//	ИдентификаторЗвонка	- Число				- Идентификатор звонка
//	ИдентификаторЗаписи	- Строка			- Идентификатор записи
//
Процедура сфпЗаписатьИдентификаторЗаписиВРегистр(Звонок, ИдентификаторЗвонка, ИдентификаторЗаписи) Экспорт
	НаборЗаписей	= РегистрыСведений.сфпИсторияЗвонков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Звонок.Установить(Звонок);
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ЗаписьНабора.ИдентификаторЗвонка = ИдентификаторЗвонка Тогда
			ЗаписьНабора.ИдентификаторЗаписи	= ИдентификаторЗаписи;
			Если НЕ ЗначениеЗаполнено(ЗаписьНабора.АбонентКонтакт) Тогда
				ЗаписьНабора.АбонентКонтакт = Звонок.АбонентКонтакт;		
			КонецЕсли;	
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;	
			Прервать;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // сфпЗаписатьИдентификаторЗаписиВРегистр()

// Функция выполняет поиск звонка в регистре истории звонков
//
// Параметры:
//	ИдентификаторЗвонка	- Строка	- Идентификатор звонка
//	ДатаНачала			- Дата		- Дата начала звонка
//
// Возвращаемое значение:
//	Булево	- Наличие записи в регистре
//
Функция сфпНайтиЗвонокВРегистре(ИдентификаторЗвонка, ДатаНачала)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала - 60);
	Запрос.УстановитьПараметр("ДатаОкончания",			ДатаНачала + 60);
	Запрос.УстановитьПараметр("ИдентификаторЗвонка",	ИдентификаторЗвонка);
	// Получаем таблицу истории звонков
	Запрос.Текст = "ВЫБРАТЬ
	|	сфпИсторияЗвонков.Звонок
	|ИЗ
	|	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	|ГДЕ
	|	сфпИсторияЗвонков.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И сфпИсторияЗвонков.ИдентификаторЗвонка = &ИдентификаторЗвонка";
	Выборка = Запрос.Выполнить();
	Возврат НЕ Выборка.Пустой(); 
КонецФункции // сфпНайтиЗвонокВРегистре()	

// Функция выполняет поиск звонка в регистре истории звонков по номеру телефона 
// в диапазоне +- 10 секунд от переданной даты звонка
//
// Параметры:
//	ДатаНачала			- Дата		- Дата начала звонка
//	НомерТелефона		- Строка	- очищенный номер телефона
//
// Возвращаемое значение:
//	Булево	- Наличие записи в регистре
//
Функция сфпНайтиЗвонокВРегистреПоНомеруПриЗагрузкеИстории(ДатаЗвонка, НомерТелефона)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",			ДатаЗвонка - 10);
	Запрос.УстановитьПараметр("КонецПериода",			ДатаЗвонка + 10);
	Запрос.УстановитьПараметр("НомерТелефона",			"%" + НомерТелефона + "%");
	// Получаем таблицу истории звонков
	Запрос.Текст = "ВЫБРАТЬ
	               |	сфпИсторияЗвонков.Звонок
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	               |ГДЕ
	               |	сфпИсторияЗвонков.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И сфпИсторияЗвонков.НомерТелефона ПОДОБНО &НомерТелефона";
	Выборка = Запрос.Выполнить();
	Возврат НЕ Выборка.Пустой(); 
КонецФункции //сфпНайтиЗвонокВРегистреПоНомеруПриЗагрузкеИстории()

// Функция находит звонок по номеру телефона и дате звонка в регистре истории звонков.
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//	ДатаЗвонка		- Дата		- Дата и время звонка
//
// Возвращаемое значение:
//	ДокументСсылка	- Найденный звонок
//
Функция сфпНайтиПоследнийЗвонокПоНомеру(НомерТелефона, ДатаЗвонка)
	Звонок	= Документы.ТелефонныйЗвонок.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерТелефона",	НомерТелефона);
	Запрос.УстановитьПараметр("НачалоПериода",	ДатаЗвонка - 3600);
	Запрос.УстановитьПараметр("КонецПериода",	ДатаЗвонка + 1);
	Запрос.Текст = "ВЫБРАТЬ
	               |	сфпИсторияЗвонков.Звонок,
	               |	МИНИМУМ(сфпИсторияЗвонков.ДатаНачала) КАК ДатаНачала,
	               |	МАКСИМУМ(сфпИсторияЗвонков.ДатаОкончания) КАК ДатаОкончания
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	               |ГДЕ
	               |	сфпИсторияЗвонков.НомерТелефона = &НомерТелефона
	               |	И сфпИсторияЗвонков.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	сфпИсторияЗвонков.Звонок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	сфпИсторияЗвонков.Звонок.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДатаЗвонка >= Выборка.ДатаНачала Тогда
			Если ДатаЗвонка < Выборка.ДатаОкончания Тогда
				// Новый звонок входит в текущий.
				Звонок	= Выборка.Звонок;
				Прервать;
			ИначеЕсли (ДатаЗвонка - Выборка.ДатаОкончания) < 3 Тогда
				// Новый звонок является продолжением текущего.
				Звонок	= Выборка.Звонок;
				Прервать;
			КонецЕсли;	
		ИначеЕсли (Выборка.ДатаНачала - ДатаЗвонка) < 60 Тогда
			// Новый звонок является началом текущего.
			Звонок	= Выборка.Звонок;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Звонок;
КонецФункции // сфпНайтиПоследнийЗвонокПоНомеру()	

// Функция находит ответственного по его внутреннему номеру
//
// Параметры:
//	ВнутреннийНомер	- Строка	- Внутренний номер
//
// Возвращаемое значение:
//	СправочникСсылка	- Ответственный
//
Функция сфпНайтиОтветственного(ВнутреннийНомер) Экспорт
	Ответственный = Справочники.Пользователи.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнутреннийНомер",	ВнутреннийНомер);
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер)
	|	И НастройкиПользователей.Значение = &ВнутреннийНомер";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответственный = Выборка.Пользователь;
		Возврат Ответственный;	
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнутреннийНомер",	ВнутреннийНомер);
	Запрос.УстановитьПараметр("ТипКИ",				Перечисления.ТипыКонтактнойИнформации.Телефон);	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПользователиКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = &ТипКИ
	|	И ПользователиКонтактнаяИнформация.Представление = &ВнутреннийНомер";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ответственный = Выборка.Ссылка;
		Возврат Ответственный;	
	КонецЕсли;			
	УстановитьПривилегированныйРежим(Ложь);	
	Возврат Ответственный;		
КонецФункции // сфпНайтиОтветственного()	

// Функция формирует из строки подключения структуру параметров подключения
//
// Параметры:
//	СтрокаПодключения	- Строка	- Строка подключения
//
// Возвращаемое значение:
//	Структура	- Структура  параметров подключения
//
Функция сфпПолучитьСтруктуруПодключения(СтрокаПодключения) Экспорт
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("Пользователь",	"");
	СтруктураПодключения.Вставить("Пароль",			"");
	СтруктураПодключения.Вставить("Сервер",			"");
	СтруктураПодключения.Вставить("БазаДанных",		"");
	Пока Истина Цикл
		ПозицияКонца	= Найти(СтрокаПодключения, ";");
		ПозицияСередины	= Найти(СтрокаПодключения, "=");
		Если ПозицияСередины = 0 Тогда Прервать; КонецЕсли;
		Ключ = Лев(СтрокаПодключения, ПозицияСередины - 1);
		Если ПозицияКонца = 0 Тогда
			Значение = Сред(СтрокаПодключения, ПозицияСередины + 1);
			СтрокаПодключения = "";
		Иначе	
			Значение = Сред(СтрокаПодключения, ПозицияСередины + 1, ПозицияКонца - ПозицияСередины - 1);	 
			СтрокаПодключения = Сред(СтрокаПодключения, ПозицияКонца + 1); 
		КонецЕсли;	
		Если Ключ = "Data Source" Тогда
			СтруктураПодключения.Сервер = Значение;
		ИначеЕсли Ключ = "Initial Catalog" Тогда
			СтруктураПодключения.БазаДанных = Значение;
		ИначеЕсли Ключ = "User ID" Тогда
			СтруктураПодключения.Пользователь = Значение;
		ИначеЕсли Ключ = "Password" Тогда
			СтруктураПодключения.Пароль = Значение;
		КонецЕсли;	
	КонецЦикла;
	Возврат СтруктураПодключения;
КонецФункции // сфпПолучитьСтруктуруПодключения()	

// Функция возвращает массив пропущенных звонков
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Массив	- Массив телефонных звонков
//
Функция сфпПолучитьПропущенныеЗвонки(НомерТелефона)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерТелефона",	НомерТелефона);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	сфпИсторияЗвонков.Звонок
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	               |ГДЕ
	               |	сфпИсторияЗвонков.Звонок.сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный)
	               |	И сфпИсторияЗвонков.НомерТелефона = &НомерТелефона";
	МассивЗвонков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Звонок");
	Возврат МассивЗвонков;
КонецФункции // сфпПолучитьПропущенныеЗвонки()	

// Процедура меняет статус у пропущенных звонков по номеру телефона на отвеченные
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//
Процедура сфпЗавершитьПропущенныеЗвонки(НомерТелефона)
	МассивЗвонков	= сфпПолучитьПропущенныеЗвонки(НомерТелефона); 
	Для Каждого ЗвонокМассива Из МассивЗвонков Цикл
		ЗвонокОбъект = ЗвонокМассива.ПолучитьОбъект();
		Если НЕ ЗвонокОбъект.Входящий Тогда Продолжить; КонецЕсли;
		ЗвонокОбъект.сфпСостояниеЗвонка	= Перечисления.сфпСостоянияЗвонков.Отвеченный;
		Попытка
			ЗвонокОбъект.Записать();
		Исключение
		КонецПопытки;
		// Удаляем напоминание о пропущенном звонке
		CRM_НапоминанияСервер.УдалитьНапоминание(ЗвонокМассива.Ссылка);
	КонецЦикла;	
КонецПроцедуры // сфпЗавершитьПропущенныеЗвонки()	

// Процедура создает напоминания о пропущенных звонках
//
// Параметры:
//	Нет.
//
Процедура сфпНапомнитьОПропущенныхЗвонках()
	Если НЕ сфпОповещатьОПропущенныхЗвонках() Тогда Возврат; КонецЕсли;
	ДатаНапоминания			= сфпТекущаяДата();
	сфпОтветственный		= Константы.сфпПользовательДляОповещений.Получить();
	ПараметрыНапоминания	= Новый Структура;
	Если ЗначениеЗаполнено(сфпОтветственный) Тогда
		ПараметрыНапоминания.Вставить("Пользователь",	сфпОтветственный);
	Иначе
		ПараметрыНапоминания.Вставить("Пользователь",	сфпТекущийПользователь());
	КонецЕсли;
	ПараметрыНапоминания.Вставить("ДатаОповещения",		ДатаНапоминания);
	ПараметрыНапоминания.Вставить("СрокОповещения",		Неопределено);
	ПараметрыНапоминания.Вставить("Периодичность",		Неопределено);
	ПараметрыНапоминания.Вставить("ВидОповещения",		Неопределено);
	ПараметрыНапоминания.Вставить("ДатаАктуальности",	КонецДня(ДатаНапоминания));
	МассивЗвонков	= сфпПолучитьПропущенныеЗвонкиДляНапоминаний();
	Для Каждого ЭлементМассива Из МассивЗвонков Цикл
		Если ЗначениеЗаполнено(ЭлементМассива.Звонок.Ответственный) Тогда
			ПараметрыНапоминания.Пользователь	= ЭлементМассива.Звонок.Ответственный;
		КонецЕсли;	
		Если НЕ CRM_НапоминанияСервер.ЕстьНапоминаниеПоОбъекту(ЭлементМассива.Звонок, ПараметрыНапоминания) Тогда
			ТекстНапоминания	= НСтр("ru='Пропущенный звонок по номеру: '") + ЭлементМассива.Звонок.АбонентКакСвязаться
				+ " от абонента: " + ЭлементМассива.Звонок.АбонентПредставление;
			CRM_НапоминанияСервер.ДобавитьНапоминание(ЭлементМассива.Звонок, ТекстНапоминания, ПараметрыНапоминания, ДатаНапоминания);	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // сфпНапомнитьОПропущенныхЗвонках()

// Функция возвращает массив пропущенных звонков для создания напоминаний
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив телефонных звонков
//
Функция сфпПолучитьПропущенныеЗвонкиДляНапоминаний()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МИНИМУМ(сфпИсторияЗвонков.Звонок) КАК Звонок,
	               |	сфпИсторияЗвонков.НомерТелефона,
	               |	СУММА(1) КАК Количество
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК сфпИсторияЗвонков
	               |ГДЕ
	               |	сфпИсторияЗвонков.Входящий
	               |	И сфпИсторияЗвонков.Звонок.сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	сфпИсторияЗвонков.НомерТелефона";
	МассивЗвонков = Новый Массив;
	Выборка	= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураЗвонка = Новый Структура;
		СтруктураЗвонка.Вставить("Звонок",			Выборка.Звонок);
		СтруктураЗвонка.Вставить("НомерТелефона",	Выборка.НомерТелефона);
		СтруктураЗвонка.Вставить("Количество",		Выборка.Количество);
		МассивЗвонков.Добавить(СтруктураЗвонка);
	КонецЦикла;	
	Возврат МассивЗвонков;
КонецФункции // сфпПолучитьПропущенныеЗвонкиДляНапоминаний()

// Процедура-обработчик события "ПриЗаписи" объекта-документа СофтФона
//
// Параметры:
//	Источник 	- ДокументОбъект	- Документ СофтФона, который записывается
//	Отказ		- Булево			- Признак отмены
//
Процедура сфпПриЗаписиОбъектаСофтфона(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
	Если Отказ Тогда Возврат; КонецЕсли;
	Если сфпИспользоватьСофтФон() Тогда
		МетаданныеДокумента = Источник.Ссылка.Метаданные();
		Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Партнер",МетаданныеДокумента) Тогда
			ТелефонныйЗвонок = сфпВернутьОснованиеДокумента(Источник.Ссылка);
			Если (ТелефонныйЗвонок = Неопределено) И ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				// возможен вариант, когда интерес связан с телефонным звонком через поле "Предмет" в телефонном звонке
				МассивЗвонков = сфпНайтиТелефонныйЗвонокПоРеквизитуПредмет(Источник.Ссылка);
				Если МассивЗвонков.КолИчество() = 0 Тогда Возврат; КонецЕсли;
				Для Каждого ЭлементМассива	Из МассивЗвонков Цикл
					сфпСкорректироватьАбонентаУТелефонногоЗвонка(Источник.КонтактноеЛицо, Источник.Партнер, ЭлементМассива);					
				КонецЦикла;						
			Иначе
				сфпСкорректироватьАбонентаУТелефонногоЗвонка(Источник.КонтактноеЛицо, Источник.Партнер, ТелефонныйЗвонок);
			КонецЕсли;				
		ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Клиент",МетаданныеДокумента) Тогда
			ТелефонныйЗвонок = сфпВернутьОснованиеДокумента(Источник.Ссылка);		
			сфпСкорректироватьАбонентаУТелефонногоЗвонка(Источник.КонтактноеЛицо, Источник.Клиент, ТелефонныйЗвонок)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

// Функция ищет среди документов "Телефонный звонок" те, в которых реквизит "Предмет" равее переданной ссылке
//
// Параметры:
//	ДокументСсылка	- ДокументСсылка - Предмет, по которому ищутся телефонные звонки
//
// Возвращаемое значение:
//	Массив	- Массив, состоящий из набора документов "Телефонный звонок"
//
Функция сфпНайтиТелефонныйЗвонокПоРеквизитуПредмет(ДокументСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.УдалитьПредмет = &Предмет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И ТИПЗНАЧЕНИЯ(ПредметыПапкиВзаимодействий.Взаимодействие) = ТИП(Документ.ТелефонныйЗвонок)";
	
	Запрос.УстановитьПараметр("Предмет" ,ДокументСсылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// КОНТЕКСТНАЯ РЕКЛАМА COMAGIC

// Функция проверяет использование CoMagic
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак использования Comagic
//
Функция сфпИспользоватьCoMagic() Экспорт
	Возврат Константы.сфпИспользоватьCoMagic.Получить();
КонецФункции // сфпИспользоватьCoMagic()

// Функция проверяет наличие маркетингового мероприятия, и если его нет, то его создает
//
// Параметры:
//	Сontext	- Строка - Название маркетинговой компании
//
// Возвращаемое значение:
//	СправочникСсылка	- Маркетинговое мероприятие
//
Функция сфпНайтиМаркетинговоеМероприятие(Сontext) Экспорт
	МаркетинговоеМероприятие = Справочники.МаркетинговыеМероприятия.НайтиПоНаименованию(Сontext, Истина);
	Если НЕ ЗначениеЗаполнено(МаркетинговоеМероприятие) Тогда
		// Создаем новое мероприятие
		МаркетинговоеМероприятие = Справочники.МаркетинговыеМероприятия.СоздатьЭлемент();
		МаркетинговоеМероприятие.Наименование			= Сontext;
		МаркетинговоеМероприятие.CRM_Автор				= сфпТекущийПользователь();
		МаркетинговоеМероприятие.Ответственный			= МаркетинговоеМероприятие.CRM_Автор;
		МаркетинговоеМероприятие.ДатаНачала				= сфпТекущаяДата();
		МаркетинговоеМероприятие.ДатаОкончания			= КонецГода(МаркетинговоеМероприятие.ДатаНачала);
		МаркетинговоеМероприятие.CRM_ДатаАктуальности   = МаркетинговоеМероприятие.ДатаОкончания;
		МаркетинговоеМероприятие.CRM_ПериодАктуальности	= (МаркетинговоеМероприятие.ДатаОкончания - МаркетинговоеМероприятие.ДатаНачала) / 86400; 
		Попытка
			МаркетинговоеМероприятие.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;	
	Возврат МаркетинговоеМероприятие.Ссылка;
КонецФункции // сфпНайтиМаркетинговоеМероприятие()	

// Процедура записывает ключевые слова контекстной рекламы в регистр
//
// Параметры:
//	Событие			- ДокументСсылка	- Событие
//	СтруктураДанных	- Структура			- Структура с данными для записи в регистр
//
Процедура сфпЗаписатьКлючевыеСловаСобытия(Событие, СтруктураДанных) Экспорт
	НаборЗаписей = РегистрыСведений.сфпКлючевыеСловаКонтекстнойРекламы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Установить(Событие);
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НоваяЗапись								= НаборЗаписей.Добавить();
	НоваяЗапись.Событие						= Событие;
	НоваяЗапись.КаналПервичногоИнтереса		= СтруктураДанных.Канал;
	НоваяЗапись.ИсточникПервичногоИнтереса	= СтруктураДанных.Источник;
	НоваяЗапись.Контакт						= СтруктураДанных.Контакт;
	НоваяЗапись.ID							= СтруктураДанных.ИД;
	НоваяЗапись.КлючевыеСлова				= НРег(СокрЛП(СтруктураДанных.КлючевыеСлова));
	Попытка
		НаборЗаписей.Записать();
	Исключение;
	КонецПопытки;	
КонецПроцедуры // сфпЗаписатьКлючевыеСловаСобытия()	

// Функция ищет в справочниках "Партнёры" и "Контактные лица партнёров" элемент по переданному ID
//
// Параметры: 
//  ID	- Строка	- Идентификатор контакта в системе CoMagic
//
// Возвращаемое значение: 
//  СправочникСсылка	- Найденный контакт
//
Функция сфпНайтиКонтактПоIDИзCoMagic(ID) Экспорт
	Если ПустаяСтрока(ID) Тогда
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.сфпCoMagicID = &ID";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Партнеры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.сфпCoMagicID = &ID";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Справочники.Партнеры.ПустаяСсылка();
КонецФункции // сфпНайтиКонтактПоIDИзCoMagic()

// Процедура записывает ID клиента системы Comagic
//
// Параметры: 
//	Контакт	- СправочникСсылка	- Контакт	
//  ID		- Строка 			- Идентификатор контакта
//
Процедура сфпЗаписатьIDCoMagic(Контакт, ID) Экспорт 
	КонтактОбъект = Контакт.ПолучитьОбъект();
	КонтактОбъект.сфпCoMagicID = ID;
	Попытка
		КонтактОбъект.Записать();	
	Исключение
	КонецПопытки;			
КонецПроцедуры // ЗаписатьIDCoMagic()	

// Функция возвращает ключ сесси CoMagic
//
// Параметры:
//   Нет.
//
// Возвращаемое значение:
//  Строка - Ключ сессии получен
//
Функция сфпПолучитьКлючСессииCoMagic() Экспорт
	Соединение 			= Новый HTTPСоединение("api.comagic.ru", , , , , ,
		Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
	Запрос 				= Новый HTTPЗапрос;
	Запрос.АдресРесурса = "/api/login/?login=" + СокрЛП(Константы.сфпЛогинCoMagic.Получить())
		+ "&password=" + СокрЛП(Константы.сфпПарольCoMagic.Получить()); 
	ФайлРезультата		= ПолучитьИмяВременногоФайла("txt");
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос, ФайлРезультата);
		Если Ответ.КодСостояния = 200 Тогда
			ТекстовыйФайл = Новый ТекстовыйДокумент;
			ТекстовыйФайл.Прочитать(ФайлРезультата,"UTF-8");
			РезультатСоответствие = UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
			КлючСессии = РезультатСоответствие.Получить("data").Получить("session_key");
		Иначе
			КлючСессии	= "";
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось получить ключ сессии: '") + Символы.ПС + ОписаниеОшибки());
		КлючСессии	= "";
	КонецПопытки;
	Соединение = Неопределено;
	Возврат КлючСессии;
КонецФункции // сфпПолучитьКлючСессииCoMagic()

// Процедура записывает в документ структуру CoMagic
//
// Параметры:
//	НовыйЗвонок			- ДокументСсылка	- Ссылка на документ
//	СтруктураCoMagic	- Структура			- Структура CoMagic
//
Процедура сфпЗаписатьСтруктуруCoMagic(НовыйЗвонок, СтруктураCoMagic) Экспорт
	ДокументОбъект				= НовыйЗвонок.ПолучитьОбъект();
	ДокументОбъект.сфпCoMagicID	= СтруктураCoMagic.comagic_context.visitor_id;
	ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + ?(ПустаяСтрока(ДокументОбъект.Комментарий), "", Символы.ПС) 
		+ НСтр("ru='Кампания: '") + СтруктураCoMagic.comagic_context.campaign + Символы.ПС 
		+ НСтр("ru='Сайт: '") + СтруктураCoMagic.comagic_context.site + Символы.ПС
		+ НСтр("ru='Ключевые слова: '") + СтруктураCoMagic.comagic_context.search_query; 
	Попытка
		ДокументОбъект.Записать();
	Исключение
	КонецПопытки;	
КонецПроцедуры // сфпЗаписатьСтруктуруCoMagic()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ЗВОНКОВ

// Функция проверяет подключение внешнего источника данных звонков.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак подключения источника.
//
Функция сфпИсточникИсторииЗвонковПодключен() Экспорт
	СтрокаПодключения	= Константы.сфпСтрокаПодключенияИстории.Получить();
	Если ПустаяСтрока(СтрокаПодключения) Тогда Возврат Ложь; КонецЕсли;	
	СтруктураПодключения	= сфпПолучитьСтруктуруПодключения(СтрокаПодключения);
	СостояниеПодключения	= ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.ПолучитьСостояние();
	Если СостояниеПодключения = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
		ПараметрыСоединения = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
		ПараметрыСоединения.АутентификацияСтандартная	= Истина;
		ПараметрыСоединения.ИмяПользователя				= СтруктураПодключения.Пользователь;
		ПараметрыСоединения.Пароль						= СтруктураПодключения.Пароль;
		ПараметрыСоединения.СтрокаСоединения			= "DRIVER={SQL Server};SERVER=" + СтруктураПодключения.Сервер + ";UID=" 
			+ СтруктураПодключения.Пользователь + ";PWD=" + СтруктураПодключения.Пароль + ";DATABASE="
			+ СтруктураПодключения.БазаДанных;
		ПараметрыСоединения.СУБД						= "MSSQLServer";
		ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.УстановитьОбщиеПараметрыСоединения(ПараметрыСоединения);
		ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.УстановитьПараметрыСоединенияСеанса(ПараметрыСоединения);
		ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.УстановитьСоединение();
		СостояниеПодключения = ВнешниеИсточникиДанных.сфпВнешнийИсточникДанныхИсторииЗвонков.ПолучитьСостояние();
		Если СостояниеПодключения = СостояниеВнешнегоИсточникаДанных.Отключен Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции // сфпИсточникИсторииЗвонковПодключен()	


////////////////////////////////////////////////////////////////////////////////
// ПЛАН НУМЕРАЦИИ ФАС (РОССВЯЗЬ)

// Функция возвращает состав файлов реестра плана нумерации
//
// Параметры:
//  Разделитель	- Строка	- Разделитель файлов. Значение по умолчанию: ";"
//
// Возвращаемое значение:
//  Массив - Состав файлов реестра
//
Функция сфпПолучитьФайлыРеестра(Разделитель = ",")
	
	ИнтернетАдресРеестра = Константы.сфпПланНумерацииАдресРеестра.Получить();
	Если ПустаяСтрока(ИнтернетАдресРеестра) Тогда
		ИнтернетАдресРеестра = "https://rossvyaz.gov.ru/docs/articles/";
	КонецЕсли;
	
	ФайлыРеестраНумерации = Константы.сфпПланНумерацииФайлыРеестра.Получить();
	Если ПустаяСтрока(ФайлыРеестраНумерации) Тогда
		ФайлыРеестраНумерации = "Kody_ABC-3kh.csv,Kody_ABC-4kh.csv,Kody_ABC-8kh.csv,Kody_DEF-9kh.csv";
	КонецЕсли;
	ФайлыРеестра = сфпРазложитьСтрокуВМассивПодстрок(ФайлыРеестраНумерации, Разделитель);
	
	ПолныеИменаФайловРеестра = Новый Массив();
	
	Для Каждого ФайлРеестра Из ФайлыРеестра Цикл
		ПолныеИменаФайловРеестра.Добавить(ИнтернетАдресРеестра + ФайлРеестра);
	КонецЦикла;

	Возврат ПолныеИменаФайловРеестра;

КонецФункции // сфпПолучитьФайлыРеестра()

// Функция создает Бизнес-регион по полному имени региона
//
// Параметры:
//  ПолноеИмяРегиона	- Строка	- Полное имя Бизнес-региона 
//
// Возвращаемое значение:
//  СправочникСсылка - Бизнес-регион
//
Функция сфпСоздатьБизнесРегион(ПолноеИмяРегиона)
	
	МассивРегионов = Новый Массив();
	
	ОстатокИмени = ПолноеИмяРегиона;
	Позиция = Найти(ПолноеИмяРегиона, "|");
	Пока Позиция > 0 Цикл
		ТекРегион = Лев(ОстатокИмени, Позиция - 1);
		МассивРегионов.Добавить(ТекРегион);
	
		ОстатокИмени = Сред(ОстатокИмени, Позиция + 1);
		Позиция = Найти(ОстатокИмени, "|");
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ОстатокИмени) Тогда
		МассивРегионов.Добавить(ОстатокИмени);
	КонецЕсли;

	ТекРодитель = Справочники.БизнесРегионы.ПустаяСсылка();
	
	НайденныйРегион = "";
	
	к = МассивРегионов.Количество() - 1;
	Пока к >= 0 Цикл
		ТекИмяРегиона = МассивРегионов[к];
		
		НайденныйРегион = Справочники.БизнесРегионы.НайтиПоНаименованию(ТекИмяРегиона, Истина, ТекРодитель);
		Если НайденныйРегион.Пустая() Тогда
			НайденныйРегион = Справочники.БизнесРегионы.СоздатьЭлемент();
			НайденныйРегион.Родитель = ТекРодитель;
			НайденныйРегион.Наименование = ТекИмяРегиона;
			НайденныйРегион.Записать();
			
			НайденныйРегион = НайденныйРегион.Ссылка;
		КонецЕсли;
		
		ТекРодитель = НайденныйРегион;
		
		к = к - 1;
	КонецЦикла;	
	
	Возврат НайденныйРегион;

КонецФункции // сфпСоздатьБизнесРегион()

// Процедура создает запись регистра Плана нумерации
//
// Параметры:
//	Код				- Строка			- Код оператора
//	НачалоДиапазона	- Строка			- Начало диапазона нумерации
//	КонецДиапазона	- Строка			- Конец диапазона нумерации
//	Емкость			- Число				- Количество номеров в диапазоне
//	Оператор		- Строка			- Наименование оператора
//	Регион			- СправочникСсылка	- Ссылка на Бизнес-регион
//	КэшРегионов		- ТаблицаЗначений	- Кэш регионов в разрезе полных наименований регионов
//
Процедура сфпОбновитьРегистрНумерации(Код, НачалоДиапазона, КонецДиапазона, Емкость, Оператор, Регион, КэшРегионов = Неопределено)
	
	Если КэшРегионов <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Наименование", Регион);
		НайденныеСтроки = КэшРегионов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			БизнесРегион = сфпСоздатьБизнесРегион(Регион);
			
			НоваяСтрока = КэшРегионов.Добавить();
			НоваяСтрока.Наименование = Регион;
			НоваяСтрока.БизнесРегион = БизнесРегион;
			
		Иначе
			БизнесРегион = НайденныеСтроки[0].БизнесРегион;
		КонецЕсли;
	КонецЕсли;
		
	МенеджерЗаписи = РегистрыСведений.сфпПланНумерации.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Код = Код;
	МенеджерЗаписи.НачалоДиапазона = НачалоДиапазона;
	МенеджерЗаписи.КонецДиапазона = КонецДиапазона;
	МенеджерЗаписи.Емкость = Емкость;
	МенеджерЗаписи.Оператор = Оператор;
	МенеджерЗаписи.БизнесРегион = БизнесРегион;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры // сфпОбновитьРегистрНумерации()

// Процедура - обработчик регламентного задания загрузки плана нумерации
//
// Параметры:
//	Нет.
//
Процедура сфпЗагрузитьПланНумерацииИзСети() Экспорт
	
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат;
	
	ИначеЕсли НЕ сфпИспользоватьАвтоопределениеБизнесРегиона() Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыРеестра = сфпПолучитьФайлыРеестра();
	Если ФайлыРеестра.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка Плана нумерации'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Файлы не найдены!'"));
		Возврат;
	КонецЕсли;	
	
	КэшРегионов = Новый ТаблицаЗначений();
	КэшРегионов.Колонки.Добавить("Наименование");
	КэшРегионов.Колонки.Добавить("БизнесРегион");
	КэшРегионов.Индексы.Добавить("Наименование");
	
	НаборЗаписей = РегистрыСведений.сфпПланНумерации.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	Для Каждого АдресФайла Из ФайлыРеестра Цикл
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("csv");
		КопироватьФайл(АдресФайла, ИмяВременногоФайла);
		
		ФайлРеестра = Новый Файл(ИмяВременногоФайла);
		Если ФайлРеестра.Существует() Тогда
			ТекстФайла = Новый ЧтениеТекста(ИмяВременногоФайла);
			ТекСтрока = ТекстФайла.ПрочитатьСтроку();
			Пока ТекСтрока <> Неопределено Цикл
				ЗначенияСтроки = сфпРазложитьСтрокуВМассивПодстрок(ТекСтрока, ";");
				
				Код = СокрЛП(ЗначенияСтроки[0]);
							
				Попытка
					КодЧислом = Число(Код);
				Исключение
					ТекСтрока = ТекстФайла.ПрочитатьСтроку();
					Продолжить;
				КонецПопытки;

				НачалоДиапазона = СокрЛП(ЗначенияСтроки[1]);
				КонецДиапазона = СокрЛП(ЗначенияСтроки[2]);
				Емкость = СокрЛП(ЗначенияСтроки[3]);
				Оператор = СокрЛП(ЗначенияСтроки[4]);
				Регион = СокрЛП(ЗначенияСтроки[5]);
				
				сфпОбновитьРегистрНумерации(Код, НачалоДиапазона, КонецДиапазона, Емкость, Оператор, Регион, КэшРегионов);
				
				ТекСтрока = ТекстФайла.ПрочитатьСтроку();
			КонецЦикла;
			
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка Плана нумерации'"), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru = 'Файл не найден: '" + АдресФайла));
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ссылка КАК Партнер
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация
	|ГДЕ
	|	НЕ Ссылка.ПометкаУдаления
	|	И НЕ Ссылка.ЭтоГруппа
	|	И Ссылка.БизнесРегион = ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПартнерОбъект = Выборка.Партнер.ПолучитьОбъект();
		сфпЗаполнитьБизнесРегионПоНомеру(ПартнерОбъект);
	КонецЦикла;	
	
КонецПроцедуры // сфпЗагрузитьПланНумерацииИзСети()

// Функция возвращает Бизнес-регион, определенный по номеру телефона (из регистра Плана нумерации)
//
// Параметры:
//  НомерТелефона	- Строка	- Номер телефона, по которому необходимо определить Бизнес-регион
//
// Возвращаемое значение:
//  СправочникСсылка - Бизнес-регион
//
Функция сфпНайтиБизнесРегионВРегистре(НомерТелефона)
	
	КодОператораПоиска = Лев(НомерТелефона, 3);
	НомерТелефонаПоиска = Сред(НомерТелефона, 4);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ БизнесРегион
	|ИЗ РегистрСведений.сфпПланНумерации
	|ГДЕ Код = &Код И &Номер МЕЖДУ НачалоДиапазона И КонецДиапазона");
	Запрос.УстановитьПараметр("Код", КодОператораПоиска);
	Запрос.УстановитьПараметр("Номер", НомерТелефонаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.БизнесРегион;
	КонецЕсли;
	
	Возврат Справочники.БизнесРегионы.ПустаяСсылка();

КонецФункции // сфпНайтиБизнесРегионВРегистре()

// Функция возвращает Бизнес-регион, определенный по номеру телефона (через Интернет)
//
// Параметры:
//  НомерТелефона	- Строка	- Номер телефона, по которому необходимо определить Бизнес-регион
//
// Возвращаемое значение:
//  СправочникСсылка - Бизнес-регион
//
Функция сфпНайтиБизнесРегионЧерезИнтернет(НомерТелефона)
	
	ИнтернетАдресСервиса = Константы.сфпПланНумерацииАдресДетализацииНомера.Получить();
	Если ПустаяСтрока(ИнтернетАдресСервиса) Тогда
		ИнтернетАдресСервиса = "http://rossvyaz.ru/activity/num_resurs/registerNum/";
	КонецЕсли;
	
	ИнтернетАдресСервиса = СтрЗаменить(ИнтернетАдресСервиса, "http://", "");
	
	КодОператораПоиска = Лев(НомерТелефона, 3);
	НомерТелефонаПоиска = Сред(НомерТелефона, 4);
	
	Соединение = Новый HTTPСоединение(ИнтернетАдресСервиса);
 
    Заголовки = Новый Соответствие();    
    Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded;");    
	
	ТелоЗапроса = "&act=search &abcdef=" + КодОператораПоиска + " &number=" + НомерТелефонаПоиска + " &operator=";
	
    Запрос = Новый HTTPЗапрос("/", Заголовки);
    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
 
    Результат = Соединение.ОтправитьДляОбработки(Запрос);
	//Результат.КодСостояния
    // Что примерно означают коды результата запроса:
    // [100, 299] - хороший код возврата
    // [300, 399] - нас перенаправляют на другую страницу,
    //              причём 302 - код постоянного перенаправления
    // [400, 499] - ошибка запроса
    // [500, 599] - ошибка сервера
 
    РезультатЗапроса = Результат.ПолучитьТелоКакСтроку();
	//Сообщить("Тело результата: " + РезультатЗапроса);
	
	БизнесРегион = Неопределено;
	
	Позиция = Найти(РезультатЗапроса, "Емкость");
	Если Позиция > 0 Тогда
		РезультатЗапроса = Сред(РезультатЗапроса, Позиция);
		Позиция = Найти(РезультатЗапроса, "</table>");
		РезультатЗапроса = Лев(РезультатЗапроса, Позиция);
		
		ЗначенияРезультата = Новый Массив();
		
		Для к = 1 По 5 Цикл
			Позиция = Найти(РезультатЗапроса, "<td");
			РезультатЗапроса = Сред(РезультатЗапроса, Позиция + 3);
			Позиция = Найти(РезультатЗапроса, ">");
			РезультатЗапроса = Сред(РезультатЗапроса, Позиция + 1);
			Позиция = Найти(РезультатЗапроса, "</td>");
			ЗначенияРезультата.Добавить(Сред(РезультатЗапроса, 1, Позиция - 1));
		КонецЦикла;
		
		Код = ЗначенияРезультата[0];
		Диапазон = ЗначенияРезультата[1];
		Емкость = ЗначенияРезультата[2];
		Оператор = ЗначенияРезультата[3];
		Регион = ЗначенияРезультата[4];
		
		НачалоДиапазона = СокрЛП(Лев(Диапазон, Найти(Диапазон, "-") - 1));
		КонецДиапазона = СокрЛП(Сред(Диапазон, Найти(Диапазон, "-") + 1));
		
		БизнесРегион = сфпСоздатьБизнесРегион(Регион);
		
		сфпОбновитьРегистрНумерации(Код, НачалоДиапазона, КонецДиапазона, Емкость, Оператор, БизнесРегион);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БизнесРегион) Тогда
		БизнесРегион = Справочники.БизнесРегионы.ПустаяСсылка();
	КонецЕсли;
	
	Возврат БизнесРегион;

КонецФункции // сфпНайтиБизнесРегионЧерезИнтернет()

// Функция возвращает Бизнес-регион, определенный по номеру телефона
//
// Параметры:
//  НомерТелефона	- Строка	- Номер телефона, по которому необходимо определить Бизнес-регион
//
// Возвращаемое значение:
//  СправочникСсылка - Бизнес-регион
//
Функция сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона) Экспорт
	
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат Неопределено;
	
	ИначеЕсли НЕ сфпИспользоватьАвтоопределениеБизнесРегиона() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БизнесРегион = сфпНайтиБизнесРегионВРегистре(НомерТелефона);
	Если НЕ ЗначениеЗаполнено(БизнесРегион) Тогда
		//БизнесРегион = сфпНайтиБизнесРегионЧерезИнтернет(НомерТелефона);
	КонецЕсли;
	
	Возврат БизнесРегион;

КонецФункции // сфпПолучитьБизнесРегионПоНомеруТелефона()

// Процедура-обработчик события "ПриЗаписи" объекта определения Бизнес-региона
//
// Параметры:
//	Источник 	- СправочникОбъект, ДокументОбъекти	- Объект, проверяемый на заполнение Бизнес-региона по номеру
//	Отказ		- Булево							- Признак отмены
//
Процедура сфпПриЗаписиОбъектаОпределенияБизнесРегиона(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ сфпИспользоватьСофтФон() Тогда
		Возврат;
	
	ИначеЕсли НЕ сфпИспользоватьАвтоопределениеБизнесРегиона() Тогда
		Возврат;
	КонецЕсли;

	сфпЗаполнитьБизнесРегионПоНомеру(Источник);

КонецПроцедуры // сфпПриЗаписиОбъектаОпределенияБизнесРегиона()

Процедура сфпЗаполнитьБизнесРегионПоНомеру(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если ПоследниеЦифрыТелефонногоНомера = 0 Тогда Возврат; КонецЕсли;
	
	Если Объект.Метаданные().Имя = "CRM_Телемаркетинг" Тогда
		Для Каждого СтрокаУчастника Из Объект.Участники Цикл
			Если ЗначениеЗаполнено(СтрокаУчастника.Партнер) И ТипЗнч(СтрокаУчастника.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
				ПартнерОбъект = СтрокаУчастника.Партнер.ПолучитьОбъект();
				
				Если НЕ ЗначениеЗаполнено(ПартнерОбъект.БизнесРегион) Тогда
					Если ЗначениеЗаполнено(СтрокаУчастника.Телефон) Тогда
						СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаУчастника.Телефон);
						НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
					
						БизнесРегион = сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона);
						Если ЗначениеЗаполнено(БизнесРегион) Тогда
							ПартнерОбъект.БизнесРегион = БизнесРегион;
						КонецЕсли;
					КонецЕсли;
					
					ПартнерОбъект.Записать();
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	

	ИначеЕсли Объект.Метаданные().Имя = "ТелефонныйЗвонок" Тогда
		Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда 
			Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				ПартнерОбъект = Объект.АбонентКонтакт.ПолучитьОбъект();
				
			ИначеЕсли ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ПартнерОбъект = Объект.АбонентКонтакт.Владелец.ПолучитьОбъект();
				
			Иначе
				УстановитьПривилегированныйРежим(Ложь);
				Возврат;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ПартнерОбъект.БизнесРегион) Тогда
				Если ЗначениеЗаполнено(Объект.АбонентКакСвязаться) Тогда
					СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Объект.АбонентКакСвязаться);
					НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
										
					БизнесРегион = сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона);
					Если ЗначениеЗаполнено(БизнесРегион) Тогда
						ПартнерОбъект.БизнесРегион = БизнесРегион;
					КонецЕсли;
				КонецЕсли;
								
				ПартнерОбъект.Записать();
			КонецЕсли;	
		КонецЕсли;

	ИначеЕсли Объект.Метаданные().Имя = "Партнеры" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.БизнесРегион) Тогда
			Для Каждого Контакт Из Объект.КонтактнаяИнформация Цикл
				Если (Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) ИЛИ (Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					СтруктураНомера = сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт.Представление);
					НомерТелефона = Прав(СтрЗаменить(СтруктураНомера.КодСтраны, "+", "") + СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона, ПоследниеЦифрыТелефонногоНомера);
					Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда Продолжить; КонецЕсли;
					
					БизнесРегион = сфпПолучитьБизнесРегионПоНомеруТелефона(НомерТелефона);
					Если ЗначениеЗаполнено(БизнесРегион) Тогда
						Объект.БизнесРегион = БизнесРегион;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // сфпЗаполнитьБизнесРегионПоНомеру()

Функция сфпБизнесРегионКонтакта(Контакт) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ БизнесРегион.Ссылка КАК БизнесРегион, БизнесРегион.CRM_ВремяПоГринвичу_GMT КАК ВремяПоГринвичу
	|ИЗ Справочник.Партнеры
	|ГДЕ Ссылка = &Ссылка И БизнесРегион <> ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ Владелец.БизнесРегион.Ссылка КАК БизнесРегион, Владелец.БизнесРегион.CRM_ВремяПоГринвичу_GMT КАК ВремяПоГринвичу
	|ИЗ Справочник.КонтактныеЛицаПартнеров
	|ГДЕ Ссылка = &Ссылка И Владелец.БизнесРегион <> ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Ссылка", Контакт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("БизнесРегион,ВремяПоГринвичу", Выборка.БизнесРегион, Выборка.ВремяПоГринвичу);
	КонецЕсли;	

	Возврат Новый Структура("БизнесРегион,ВремяПоГринвичу", Справочники.БизнесРегионы.ПустаяСсылка(), 0);
	
КонецФункции
