
#Область РаботаСПользовательскимиНастройкамиДинамическихСписков
	
// Функция переопределяет обработчик события "ПередНачаломДобавления" для дерева пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма		- Форма
//	СвойстваДинамическогоСписка	- Структура				- Структура свойств динамического списка.
//	Элемент						- ЭлементУправления		- Элемент управляемой формы.
//	Отказ						- Булево				- Флаг отмены.
//	Копирование					- Булево				- Флаг копирования.
//	Родитель					- СтрокаДереваЗначений	- Родитель
//	Группа						- СтрокаДереваЗначений	- Группа
//
// Возвращаемое значение:
//	Булево	- Результат выполнения.
//
Функция ДеревоПользовательскиеНастройкиСпискаПередНачаломДобавления(ЭтаФорма, СвойстваДинамическогоСписка, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	Отказ = Истина;
	Если СвойстваДинамическогоСписка.ИмяДереваНастроек = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийРодитель = Неопределено;
	Иначе
		ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	Если Копирование Тогда
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоКорневойЭлемент Тогда
			Возврат Ложь;
		КонецЕсли;
		ИдентификаторНастройки	= ТекущиеДанные.Идентификатор;
		НаименованиеНастройки	= ТекущиеДанные.Наименование;
	Иначе
		ИдентификаторНастройки	= Строка(Новый УникальныйИдентификатор());
		НаименованиеНастройки	= "";
	КонецЕсли;
	ПараметрыФормы = Новый Структура("СвойстваДинамическогоСписка,ИдентификаторНастройки,НаименованиеНастройки,Копирование",
		СвойстваДинамическогоСписка, ИдентификаторНастройки, НаименованиеНастройки, Копирование);
	Если ТекущиеДанные <> Неопределено И НЕ Копирование Тогда
		ПараметрыФормы.Вставить("ИдентификаторНастройкиШаблон", ТекущиеДанные.Идентификатор);
	КонецЕсли;
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ПользовательскиеНастройкиСписка", ПараметрыФормы, ЭтаФорма);
	Форма.ОткрытьМодально();
	Если Форма.ДанныеБылиИзменены Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ЭлементыДляДобавления = ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы();
		Иначе
			Если Копирование Тогда
				Если ТекущийРодитель = Неопределено Тогда
					ЭлементыДляДобавления = ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы();
				Иначе
					ЭлементыДляДобавления = ТекущийРодитель.ПолучитьЭлементы();
				КонецЕсли;
			Иначе
				ЭлементыДляДобавления = ТекущиеДанные.ПолучитьЭлементы();
			КонецЕсли;
		КонецЕсли;
		НовыйЭлемент = ЭлементыДляДобавления.Добавить();
		НовыйЭлемент.Наименование	= Форма.НаименованиеНастройки;
		НовыйЭлемент.Идентификатор	= Форма.ИдентификаторНастройки;
		Если ТекущиеДанные <> Неопределено Тогда
			Попытка
				Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 
					И НЕ ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].Развернут(ТекущиеДанные.ПолучитьИдентификатор()) Тогда
					ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
				КонецЕсли;
			Исключение КонецПопытки;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ДеревоПользовательскиеНастройкиСпискаПередНачаломДобавления()

// Функция переопределяет обработчик события "ПередНачаломИзменения" для дерева пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма		- Форма
//	СвойстваДинамическогоСписка	- Структура				- Структура свойств динамического списка.
//	Элемент						- ЭлементУправления		- Элемент управляемой формы.
//	Отказ						- Булево				- Флаг отмены.
//
// Возвращаемое значение:
//	Булево	- Результат выполнения.
//
Функция ДеревоПользовательскиеНастройкиСпискаПередНачаломИзменения(ЭтаФорма, СвойстваДинамическогоСписка, Элемент, Отказ) Экспорт
	Отказ = Истина;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоКорневойЭлемент Тогда
		Возврат Ложь;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("СвойстваДинамическогоСписка,ИдентификаторНастройки,НаименованиеНастройки",
		СвойстваДинамическогоСписка, ТекущиеДанные.Идентификатор, ТекущиеДанные.Наименование);
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ПользовательскиеНастройкиСписка", ПараметрыФормы, ЭтаФорма);
	Форма.ОткрытьМодально();
	Если Форма.ДанныеБылиИзменены Тогда
		ТекущиеДанные.Наименование = Форма.НаименованиеНастройки;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ДеревоПользовательскиеНастройкиСпискаПередНачаломИзменения()

// Функция возвращает массив идентификаторов текущего и подчиненных элементов ветки дерева пользовательских настроек
// списка.
//
// Параметры:
//	ТекущиеДанные			- СтрокаДереваЗначений	- Текущие данные.
//	ИдентификаторСписка		- Строка				- Идентификатор списка.
//	МассивИдентификаторов	- Массив				- Массив идентификаторов.
//
// Возвращаемое значение:
//	Массив	- Массив идентификаторов.
//
Функция ПолучитьРекурсивноМассивИдентификаторовИзДереваПользовательскихНастроекСписка(ТекущиеДанные, ИдентификаторСписка, МассивИдентификаторов = Неопределено)
	Если МассивИдентификаторов = Неопределено Тогда
		МассивИдентификаторов = Новый Массив();
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат МассивИдентификаторов;
	КонецЕсли;
	Если МассивИдентификаторов.Найти(ТекущиеДанные.Идентификатор) = Неопределено Тогда
		МассивИдентификаторов.Добавить(ТекущиеДанные.Идентификатор);
	КонецЕсли;
	ПодчиненныеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
		Если МассивИдентификаторов.Найти(ПодчиненныйЭлемент.Идентификатор) = Неопределено Тогда
			МассивИдентификаторов.Добавить(ПодчиненныйЭлемент.Идентификатор);
		КонецЕсли;
		ПолучитьРекурсивноМассивИдентификаторовИзДереваПользовательскихНастроекСписка(ПодчиненныйЭлемент, ИдентификаторСписка, МассивИдентификаторов);
	КонецЦикла;
	Возврат МассивИдентификаторов;
КонецФункции // ПолучитьРекурсивноМассивИдентификаторовИзДереваПользовательскихНастроекСписка()

// Процедура переопределяет обработчик события ПередУдалением для дерева пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма			- УправляемаяФорма	- Форма
//	ИдентификаторСписка	- Строка			- Идентификатор списка.
//	Элемент				- ЭлементУправления	- Элемент управляемой формы.
//	Отказ				- Булево			- Флаг отмены.
//
Процедура ДеревоПользовательскиеНастройкиСпискаПередУдалением(ЭтаФорма, ИдентификаторСписка, Элемент, Отказ) Экспорт
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоКорневойЭлемент Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоПользовательскиеНастройкиСпискаПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные, ИдентификаторСписка", ТекущиеДанные, ИдентификаторСписка));
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить настройку?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
КонецПроцедуры // ДеревоПользовательскиеНастройкиСпискаПередУдалением()

Процедура ДеревоПользовательскиеНастройкиСпискаПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МассивИдентификаторовДляУдаления = ПолучитьРекурсивноМассивИдентификаторовИзДереваПользовательскихНастроекСписка(ДополнительныеПараметры.ТекущиеДанные, ДополнительныеПараметры.ИдентификаторСписка);
		CRM_ОбщегоНазначенияСервер.УдалитьПользовательскиеНастройкиДинамическогоСписка(ДополнительныеПараметры.ИдентификаторСписка, МассивИдентификаторовДляУдаления);
	КонецЕсли;
КонецПроцедуры // ДеревоПользовательскиеНастройкиСпискаПередУдалением()

// Процедура настройки отображения элементов управления пользовательских настроек списка.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
Процедура НастроитьВидимостьДоступностьЭлементовПользовательскихНастроекСписка(ЭтаФорма, СвойстваДинамическогоСписка)
	Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка <> Неопределено Тогда
		Если СвойстваДинамическогоСписка.ИмяДереваНастроек <> Неопределено Тогда
			ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].Видимость 
				= ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка;
		КонецЕсли;
	КонецЕсли;
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры // НастроитьВидимостьДоступностьЭлементовПользовательскихНастроекСписка()

// Процедура - обработчик команды "КомандаПользовательскиеНастройкиСписка".
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
Процедура КомандаПользовательскиеНастройкиСписка(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка <> Неопределено 
		И СвойстваДинамическогоСписка.ИмяДереваНастроек <> Неопределено Тогда
		ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка 
			= НЕ ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка;
		НастроитьВидимостьДоступностьЭлементовПользовательскихНастроекСписка(ЭтаФорма, СвойстваДинамическогоСписка);
		Если ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка Тогда
			ИдентификаторСтрокиОсновнойНастройки = ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки(ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы());
			Если ИдентификаторСтрокиОсновнойНастройки <> Неопределено Тогда
				ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].ТекущаяСтрока = ИдентификаторСтрокиОсновнойНастройки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // КомандаПользовательскиеНастройкиСписка()

// Функция открывает форму пользовательских настроек списка для редактирования всех настроек.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
// Возвращаемое значение:
//	Булево	- Флаг изменения данных на форме.
//
Процедура ПользовательскиеНастройкиСпискаОткрытьФормуНастроекВсеНастройки(ЭтаФорма, СвойстваДинамическогоСписка, ОписаниеОповещенияОЗавершении) Экспорт
	ПараметрыФормы = Новый Структура("СвойстваДинамическогоСписка", СвойстваДинамическогоСписка);
	Если СвойстваДинамическогоСписка.Свойство("СкрытьУсловноеОформлениеВНастройках") Тогда
		ПараметрыФормы.Вставить("СкрытьУсловноеОформление");
	КонецЕсли;
	ОткрытьФорму("ОбщаяФорма.CRM_ПользовательскиеНастройкиСпискаОбщая", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещенияОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ПользовательскиеНастройкиСпискаОткрытьФормуНастроекВсеНастройки()

// Функция возвращает идентификатор строки основной настройки или Неопределено если основная настройка не определена.
//
// Параметры:
//	ЭлементыДерева	- КоллекцияСтрокДереваЗначений	- Элементы дерева.
//
// Возвращаемое значение:
//	Неопределено или Число	- Идентификатор строки основной настройки.
//
Функция ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки(ЭлементыДерева)
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ЭтоОсновнаяНастройка Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		ПодчиненныеЭлементы = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеЭлементы.Количество() > 0 Тогда
			Идентификатор = ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки(ПодчиненныеЭлементы);
			Если Идентификатор <> Неопределено Тогда
				Возврат Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки()

// Процедура позиционирует курсор в дереве настроек на основной настройке.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//	РазвернутьДерево			- Булево			- Признак раскрытия дерева.
//
Процедура ПользовательскиеНастройкиСпискаСпозиционироватьсяНаОсновнойНастройке(ЭтаФорма, СвойстваДинамическогоСписка, РазвернутьДерево = Ложь) Экспорт
	ИдентификаторСтрокиОсновнойНастройки = ПользовательскиеНастройкиСпискаПолучитьИдентификаторСтрокиОсновнойНастройки(ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы());
	Если ИдентификаторСтрокиОсновнойНастройки <> Неопределено Тогда
		ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].ТекущаяСтрока = ИдентификаторСтрокиОсновнойНастройки;
	КонецЕсли;
	Если РазвернутьДерево Тогда
		Попытка ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].Развернуть(ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек].ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
		Исключение КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаСпозиционироватьсяНаОсновнойНастройке()

// Процедура вызывается из обработчика события формы "ПриОткрытии".
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
Процедура ПользовательскиеНастройкиСпискаПриОткрытии(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	НастроитьВидимостьДоступностьЭлементовПользовательскихНастроекСписка(ЭтаФорма, СвойстваДинамическогоСписка);
	Если СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка = Неопределено
		ИЛИ	ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиПользовательскиеНастройкиСписка].Пометка Тогда
		ПользовательскиеНастройкиСпискаСпозиционироватьсяНаОсновнойНастройке(ЭтаФорма, СвойстваДинамическогоСписка);
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаПриОткрытии()

// Процедура устанавливает / сбрасывает признак "ЭтоОсновнаяНастройка" в дереве пользовательских настроек.
//
// Параметры:
//	ЭлементыДерева				- КоллекцияСтрокДереваЗначений	- Элементы дерева.
//	ИдентификаторТекущихДанных	- Число							- Идентификатор текущих данных.
//	Установить					- Булево						- Признак установки основной настройки.
//
Процедура ПользовательскиеНастройкиСпискаУстановитьПризнакОсновнаяВДереве(ЭлементыДерева, ИдентификаторТекущихДанных, Установить)
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		Если Идентификатор = ИдентификаторТекущихДанных Тогда
			Элемент.ЭтоОсновнаяНастройка = Установить;
		Иначе
			Элемент.ЭтоОсновнаяНастройка = Ложь;
		КонецЕсли;
		ПодчиненныеЭлементы = Элемент.ПолучитьЭлементы();
		ПользовательскиеНастройкиСпискаУстановитьПризнакОсновнаяВДереве(ПодчиненныеЭлементы, ИдентификаторТекущихДанных, Установить);
	КонецЦикла;
КонецПроцедуры // ПользовательскиеНастройкиСпискаУстановитьПризнакОсновнаяВДереве() 

// Процедура-обработчик команды "КомандаДеревоПользовательскиеНастройкиСпискаОсновная"
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//
Процедура КомандаДеревоПользовательскиеНастройкиСпискаОсновная(ЭтаФорма, СвойстваДинамическогоСписка) Экспорт
	Дерево = ЭтаФорма[СвойстваДинамическогоСписка.ИмяДереваНастроек];
	ЭлементДерево = ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек];
	ТекущиеДанные = ЭлементДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	ИдентификаторТекущихДанных = ТекущиеДанные.ПолучитьИдентификатор();
	Установить = (НЕ ТекущиеДанные.ЭтоОсновнаяНастройка);
	ПользовательскиеНастройкиСпискаУстановитьПризнакОсновнаяВДереве(Дерево.ПолучитьЭлементы(), ИдентификаторТекущихДанных, Установить);
	Если СвойстваДинамическогоСписка.ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная <> Неопределено Тогда
		ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяКнопкиДеревоПользовательскиеНастройкиСпискаОсновная].Пометка = ТекущиеДанные.ЭтоОсновнаяНастройка;
	КонецЕсли;
	Попытка ЭтаФорма.Элементы[СвойстваДинамическогоСписка.ИмяДереваНастроек].Обновить();
	Исключение КонецПопытки;
КонецПроцедуры // КомандаДеревоПользовательскиеНастройкиСпискаОсновная()

// Процедура устанавливает пометки кнопкам в подменю, вызывается из процедуры
// "ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки".
//
// Параметры:
//	Элементы					- ЭлементыФормы	- Элементы формы.
//	ИмяКнопкиТекущейНастройки	- Строка		- Имя кнопки текущей настройки.
//
Процедура ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек(Элементы, ИмяКнопкиТекущейНастройки)
	Для Каждого Кнопка Из Элементы Цикл
		Если ТипЗнч(Кнопка) = Тип("ГруппаФормы") Тогда
			ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек(Кнопка.ПодчиненныеЭлементы, ИмяКнопкиТекущейНастройки);
		ИначеЕсли ТипЗнч(Кнопка) = Тип("КнопкаФормы") Тогда
			Кнопка.Пометка = (Кнопка.Имя = ИмяКнопкиТекущейНастройки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек()

// Процедура-обработчик выбора пользовательской настройки списка из подменю.
//
// Параметры:
//	ЭтаФорма					- УправляемаяФорма	- Форма
//	СвойстваДинамическогоСписка	- Структура			- Структура свойств динамического списка.
//	Команда						- Строка			- Команда
//	ПризнакИзмененыНастройки	- Булево			- Признак изменения настроек.
//
Процедура ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтаФорма, СвойстваДинамическогоСписка, Команда, ОписаниеОповещенияОЗавершении) Экспорт
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "КомандаПользовательскиеНастройкиСписка_", "");
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "_" + СвойстваДинамическогоСписка.ИмяСписка, "");
	Список = ЭтаФорма[СвойстваДинамическогоСписка.ИмяСписка];
	Если ИмяКоманды = "Настройки" Тогда
		CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОткрытьФормуНастроекВсеНастройки(ЭтаФорма, СвойстваДинамическогоСписка, ОписаниеОповещенияОЗавершении);
		Возврат;
	Иначе
		ПризнакИзмененыНастройки = Неопределено;
	КонецЕсли;
	Если ИмяКоманды = "БезНастроек" Тогда
		ИдентификаторНастройки = "";
	Иначе
		ИдентификаторНастройки = СтрЗаменить(ИмяКоманды, "_", "-");
		Попытка
			ТестУникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторНастройки);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ЭтаФорма[СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки] = ИдентификаторНастройки;
	ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_" + ИмяКоманды + "_" + СвойстваДинамическогоСписка.ИмяСписка;
	ИмяЭлементаПодменю = СвойстваДинамическогоСписка.ИмяЭлементаПодменю;
	ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек(ЭтаФорма.Элементы[ИмяЭлементаПодменю].ПодчиненныеЭлементы, ИмяКнопки);
	Если ИмяКоманды = "БезНастроек" Тогда
		ЭтаФорма.Элементы[ИмяЭлементаПодменю].Заголовок = НСтр("ru = 'Все'");
	Иначе
		ЗаголовокПодменю = ЭтаФорма.Элементы[ИмяКнопки].Заголовок;
		Если СтрДлина(ЗаголовокПодменю) > 40 Тогда
			ЗаголовокПодменю = Лев(ЗаголовокПодменю, 40-3) + "...";
		КонецЕсли;
		ЭтаФорма.Элементы[ИмяЭлементаПодменю].Заголовок = ЗаголовокПодменю;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, ПризнакИзмененыНастройки);
КонецПроцедуры // ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки()

Процедура ПользовательскиеНастройкиСпискаОбработкаВыбораНастройкиЗавершение(ЭтаФорма, СвойстваДинамическогоСписка, Команда, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "КомандаПользовательскиеНастройкиСписка_", "");
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "_" + СвойстваДинамическогоСписка.ИмяСписка, "");
	Список = ЭтаФорма[СвойстваДинамическогоСписка.ИмяСписка];
	Если ИмяКоманды = "Настройки" Тогда
		CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОткрытьФормуНастроекВсеНастройки(ЭтаФорма, СвойстваДинамическогоСписка, ОписаниеОповещенияОЗавершении);
		Возврат;
	Иначе
		ПризнакИзмененыНастройки = Неопределено;
	КонецЕсли;
	Если ИмяКоманды = "БезНастроек" Тогда
		ИдентификаторНастройки = "";
	Иначе
		ИдентификаторНастройки = СтрЗаменить(ИмяКоманды, "_", "-");
		Попытка
			ТестУникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторНастройки);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ЭтаФорма[СвойстваДинамическогоСписка.ИмяПеременнойТекущейНастройки] = ИдентификаторНастройки;
	ИмяКнопки = "КнопкаПользовательскиеНастройкиСписка_" + ИмяКоманды + "_" + СвойстваДинамическогоСписка.ИмяСписка;
	ИмяЭлементаПодменю = СвойстваДинамическогоСписка.ИмяЭлементаПодменю;
	ПользовательскиеНастройкиСпискаУстановитьПометкиКнопкамНастроек(ЭтаФорма.Элементы[ИмяЭлементаПодменю].ПодчиненныеЭлементы, ИмяКнопки);
	Если ИмяКоманды = "БезНастроек" Тогда
		ЭтаФорма.Элементы[ИмяЭлементаПодменю].Заголовок = НСтр("ru = 'Все'");
	Иначе
		ЗаголовокПодменю = ЭтаФорма.Элементы[ИмяКнопки].Заголовок;
		Если СтрДлина(ЗаголовокПодменю) > 40 Тогда
			ЗаголовокПодменю = Лев(ЗаголовокПодменю, 40-3) + "...";
		КонецЕсли;
		ЭтаФорма.Элементы[ИмяЭлементаПодменю].Заголовок = ЗаголовокПодменю;
	КонецЕсли;
КонецПроцедуры // ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки()

#КонецОбласти 

#Область РаботаСНастройкамиПолейОтображенияСодержания
	
// Процедура вызывается при активизации строки списка для обновления поля отображения содержания.
//
Процедура НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(ЭтаФорма,
																СсылкаНаОбъект,
																ОграниченияТипов,
																ИмяГруппыПоляОтображенияСодержания = "ГруппаПолеОтображенияСодержания",
																ИмяРеквизитаПоляОтображенияСодержания = "ПолеОтображениеСодержания") Экспорт
	Попытка
		Если НЕ ЭтаФорма.Элементы[ИмяГруппыПоляОтображенияСодержания].Видимость Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	Попытка
		ПеременнаяТест = ЭтаФорма[ИмяРеквизитаПоляОтображенияСодержания];
	Исключение
		Возврат;
	КонецПопытки;
	
	Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(СсылкаНаОбъект, ОграниченияТипов);
	Если ЭтаФорма[ИмяРеквизитаПоляОтображенияСодержания] <> Содержание Тогда
		ЭтаФорма[ИмяРеквизитаПоляОтображенияСодержания] = Содержание;
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки()

// Функция открывает форму настройки полей отображения содержания.
//
// Параметры:
//	ЭтаФорма				- УправляемаяФорма	- Форма
//	ОграничениеТипов		- ОписаниеТипов		- Ограничение типов.
//
// Возвращаемое значение:
//	Булево	- Результат открытия.
//
Процедура НастройкиПолейОтображенияСодержанияОткрытьФормуНастройки(ОграничениеТипов, Объект = Неопределено, ЗаполнитьПоУмолчанию = Ложь, ОписаниеОповещения = Неопределено) Экспорт
	СтруктураПараметры = Новый Структура("ЗаполнитьПоУмолчанию, Объект", ЗаполнитьПоУмолчанию, Объект);
	Если ТипЗнч(ОграничениеТипов) = Тип("ОписаниеТипов") И ОграничениеТипов.Типы().Количество() > 0 Тогда
		СтруктураПараметры.Вставить("ОграничениеТипов", ОграничениеТипов);
	КонецЕсли;
	ОткрытьФорму("ОбщаяФорма.CRM_НастройкаПоляОтображенияСодержания", СтруктураПараметры,,,,, ОписаниеОповещения);
КонецПроцедуры // НастройкиПолейОтображенияСодержанияОткрытьФормуНастройки()

// Процедура вызывается по нажатию кнопки показать / скрыть поле отображения содержания.
//
// Параметры:
//	ЭтаФорма											- УправляемаяФорма	- Форма
//	ИмяГруппыПоляОтображенияСодержания					- Строка			- Имя группы поля отображения содержания.
//	ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания	- Строка			- Имя кнопки отображения содержания.
//
Процедура НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания(ЭтаФорма,
		ИмяГруппыПоляОтображенияСодержания = "ГруппаПолеОтображенияСодержания",
		ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания = "КнопкаПоказатьСкрытьПолеОтображенияСодержания") Экспорт
	Попытка
		Кнопка = ЭтаФорма.Элементы[ИмяКнопкиПоказатьСкрытьПолеОтображенияСодержания];
	Исключение
		Кнопка = Неопределено;
	КонецПопытки;
	Если Кнопка <> Неопределено Тогда
		Кнопка.Пометка = НЕ Кнопка.Пометка;
		ЭтаФорма.Элементы[ИмяГруппыПоляОтображенияСодержания].Видимость = Кнопка.Пометка;
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания()

// Процедура вызывается из обработчика "ПриНажатии" поля отображения содержания.
//
// Параметры:
//	ДанныеСобытия			- Структура			- Данные события.
//	СтандартнаяОбработка	- Булево			- Флаг стандартной обработки.
//	ОграничениеТипов		- ОписаниеТипов		- Ограничение типов.
//
Процедура НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, ОграничениеТипов = Неопределено, Объект = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	СтандартнаяОбработка = Ложь;
	БылиИзмененыНастройки = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Если Найти(ДанныеСобытия.href, "НастройкаПолейОтображения") > 0 Тогда
			НастройкиПолейОтображенияСодержанияОткрытьФормуНастройки(ОграничениеТипов, Объект, Ложь, ОписаниеОповещения);
		ИначеЕсли Найти(ДанныеСобытия.href, "ЗаполнитьПоУмолчанию") > 0 И Объект <> Неопределено Тогда
			НастройкиПолейОтображенияСодержанияОткрытьФормуНастройки(ОграничениеТипов, Объект, Истина, ОписаниеОповещения);
		Иначе
			Попытка
				ПерейтиПоНавигационнойСсылке(ДанныеСобытия.href);
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии()

// Процедура сохраняет настройки полей отображения содержания в файл.
//
// Параметры:
//	Нет.
//
Процедура НастройкиПолейОтображенияСодержанияСохранитьВФайл() Экспорт
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.Заголовок = НСтр("ru = 'Сохранение файла настроек полей отображения содержания'");
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.ПолноеИмяФайла = НСтр("ru = 'Настройки отображения содержания'") + ".xml";
	ВыборФайла.Фильтр = НСтр("ru = 'Файлы настроек отображения содержания (*.xml)|*.xml'");
	ВыборФайла.ПроверятьСуществованиеФайла = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиПолейОтображенияСодержанияСохранитьВФайлЗавершение", ЭтотОбъект);
	ВыборФайла.Показать(ОписаниеОповещения);
КонецПроцедуры // НастройкиПолейОтображенияСодержанияСохранитьВФайл()

Процедура НастройкиПолейОтображенияСодержанияСохранитьВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Результат = CRM_ОбщегоНазначенияСервер.вогНастройкиПолейОтображенияСодержанияСохранитьВФайл();
		Если ЭтоАдресВременногоХранилища(Результат) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Результат);
			ДвоичныеДанные.Записать(ВыбранныеФайлы[0]);
		КонецЕсли;
	КонецЕсли;
		
	#Область СтандартныйКод
	
	//Если ВыбранныеФайлы <> Неопределено Тогда
	//	Результат = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияСохранитьВФайл(ВыбранныеФайлы[0]);
	//	Если НЕ ПустаяСтрока(Результат) Тогда
	//		ПоказатьПредупреждение(,Результат);
	//	КонецЕсли;
	//КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры // НастройкиПолейОтображенияСодержанияСохранитьВФайл()

// Функция загружает настройки полей отображения содержания из файла.
//
// Параметры:
//	ПоместитьТаблицуВоВременноеХранилищеПоАдресу	- Строка	- Адрес во временном хранилище.
//
// Возвращаемое значение:
//	Булево	- Результат загрузки.
//
Процедура НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла(ПоместитьТаблицуВоВременноеХранилищеПоАдресу = Неопределено, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Заголовок = НСтр("ru = 'Открытие файла настроек полей отображения содержания'");
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Фильтр = НСтр("ru = 'Файлы настроек отображения содержания (*.xml)|*.xml'");
	ВыборФайла.ПроверятьСуществованиеФайла = Истина;
	ДополнительныеПараметры = Новый Структура("ПоместитьТаблицуВоВременноеХранилищеПоАдресу, ОписаниеОповещенияЗавершение", ПоместитьТаблицуВоВременноеХранилищеПоАдресу, ОписаниеОповещенияЗавершение);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиПолейОтображенияСодержанияЗагрузитьИзФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВыборФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры // НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла()

Процедура НастройкиПолейОтображенияСодержанияЗагрузитьИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ВыбранныеФайлы[0]);
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиПолейОтображенияСодержанияЗагрузитьИзФайлаОтветНаВопрос", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Все текущие настройки будут перезаписаны, продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Ложь);
	КонецЕсли;
	
КонецПроцедуры 

Процедура НастройкиПолейОтображенияСодержанияЗагрузитьИзФайлаОтветНаВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Результат = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла(ДополнительныеПараметры.ПолноеИмяФайла,
		ДополнительныеПараметры.ПоместитьТаблицуВоВременноеХранилищеПоАдресу);
		// + Тищенко В.В.
		ОписаниеОповещения 			= Новый ОписаниеОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение.ИмяПроцедуры
									, ДополнительныеПараметры.ОписаниеОповещенияЗавершение.Модуль, ДополнительныеПараметры.ПоместитьТаблицуВоВременноеХранилищеПоАдресу);
		// - Тищенко В.В.
		Если ПустаяСтрока(Результат) Тогда
			//ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Истина);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Иначе
			ПоказатьПредупреждение(,Результат);
			//ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Ложь);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССохранениемЗагрузкойРезультатовОтчетов
	
// Функция открывает форму заполнения по результатам отчета, возвращает имя сохраненного списка
// или "Неопределено" в случае нажатия кнопки "Отмена".
//
// Параметры:
//	ЭтаФорма	- УправляемаяФорма	- Форма
//
// Возвращаемое значение:
//	Булево	- Результат открытия формы.
//
Процедура ОткрытьФормуЗаполненияПоРезультатамОтчета(ЭтаФорма, ОписаниеОповещения) Экспорт
	ПараметрыФормы = Новый Структура("Режим", "Загрузка");
	ОткрытьФорму("ОбщаяФорма.CRM_СохранениеЗагрузкаРезультатовОтчетов", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ОткрытьФормуЗаполненияПоРезультатамОтчета()

// Процедура устанавливает отбор по результатам отчета.
//
// Параметры:
//	НаименованиеСохраненногоРезультата	- Строка	- Наименование сохраненного результата.
//	ИмяПоля								- Строка	- Имя поля.
//	Настройки							- Структура	- Настройки
//	ПользовательскиеНастройки			- Структура	- Пользовательские настройки.
//
Процедура УстановитьОтборПоСпискуРезультатаОтчета(НаименованиеСохраненногоРезультата, ИмяПоля, Настройки, ПользовательскиеНастройки) Экспорт
	Список = CRM_ОбщегоНазначенияСервер.ПолучитьСохраненныйРезультатОтчетаПоНаименованию(НаименованиеСохраненногоРезультата);
	Если Список = Неопределено Тогда Возврат; КонецЕсли;
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = Настройки.Отбор;
	Иначе
		Отбор = Настройки;
	КонецЕсли;
	ОтборПользовательский = Неопределено;
	ЭлементОтбора = Неопределено;
	Если ЗначениеЗаполнено(Отбор.ИдентификаторПользовательскойНастройки) Тогда
		ОтборПользовательский = ПользовательскиеНастройки.Элементы.Найти(Отбор.ИдентификаторПользовательскойНастройки);
		Если ОтборПользовательский <> Неопределено Тогда
			НайденныеЭлементы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборПользовательский, ИмяПоля);
			Для Каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
				НайденныйЭлемент.Использование = Ложь;
				Если ЭлементОтбора = Неопределено И НайденныйЭлемент.Родитель = Неопределено Тогда
					ЭлементОтбора = НайденныйЭлемент;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	бИспользуетсяПользовательскоеПолеОтбора = Ложь;
	НайденныеЭлементы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор, ИмяПоля);
	Для Каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
		Если ЗначениеЗаполнено(НайденныйЭлемент.ИдентификаторПользовательскойНастройки) Тогда
			ЭлементОтбораПользовательский = ПользовательскиеНастройки.Элементы.Найти(НайденныйЭлемент.ИдентификаторПользовательскойНастройки);
			Если ЭлементОтбораПользовательский = Неопределено Тогда
				НайденныйЭлемент.Использование = Ложь;
			Иначе
				ЭлементОтбораПользовательский.Использование = Ложь;
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ЭлементОтбораПользовательский;
					бИспользуетсяПользовательскоеПолеОтбора = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденныйЭлемент.Использование = Ложь;
		КонецЕсли;
		Если ОтборПользовательский = Неопределено И ЭлементОтбора = Неопределено И НайденныйЭлемент.Родитель = Неопределено Тогда
			ЭлементОтбора = НайденныйЭлемент;
		КонецЕсли;
	КонецЦикла;
	Если ЭлементОтбора = Неопределено Тогда
		Если ОтборПользовательский = Неопределено Тогда
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Иначе
			ЭлементОтбора = ОтборПользовательский.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Попытка
		ДоступноеПолеОтбора = Отбор.ДоступныеПоляОтбора.Элементы.Найти(Новый ПолеКомпоновкиДанных(ИмяПоля));
		ТипЗначения = ДоступноеПолеОтбора.ТипЗначения;
		Если ТипЗначения.Типы().Количество() = 0 Тогда
			ТипЗначения = Неопределено;
		КонецЕсли;
	Исключение
		ТипЗначения = Неопределено;
	КонецПопытки;
	Если ТипЗначения = Неопределено Тогда
		ЭлементОтбора.ПравоеЗначение = Список;
	Иначе
		СписокСкорректированный = Новый СписокЗначений();
		Для Каждого СтрокаСписка Из Список Цикл
			Если ТипЗначения.СодержитТип(ТипЗнч(СтрокаСписка.Значение)) Тогда
				СписокСкорректированный.Добавить(СтрокаСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		ЭлементОтбора.ПравоеЗначение = СписокСкорректированный;
	КонецЕсли;
	ЭлементОтбора.Использование = Истина;
	Если НЕ бИспользуетсяПользовательскоеПолеОтбора Тогда
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	КонецЕсли;
КонецПроцедуры // УстановитьОтборПоСпискуРезультатаОтчета()

#КонецОбласти 

#Область ПодсистемаЦенообразование
	
// Функция возвращает представление дня недели.
//
// Параметры:      
//	ДеньНеделиКалендаря	- Дата - День недели календаря.
//
// Возвращаемое значение: 
//	Строка	- День недели
//
Функция ПолучитьПредставлениеДняНедели(ДеньНеделиКалендаря) Экспорт
	НомерДняНедели = ДеньНедели(ДеньНеделиКалендаря);
	Если НомерДняНедели = 1 Тогда
		Возврат НСтр("ru = 'Пн'");
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат НСтр("ru = 'Вт'");
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат НСтр("ru = 'Ср'");
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат НСтр("ru = 'Чт'");
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат НСтр("ru = 'Пт'");
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат НСтр("ru = 'Сб'");
	Иначе
		Возврат НСтр("ru = 'Вс'");
	КонецЕсли;
КонецФункции // ПолучитьПредставлениеДняНедели()

#КонецОбласти 

#Область РаботаСДополнительнымиРеквизитами
	
// Процедура разворачивает дерево значений на форме.
//
// Параметры:
//	ЭлементФормы	- ЭлементУправления	- ЭлементФормы
//	Дерево			- ДеревоЗначений	- Дерево
//
Процедура РазвернутьДеревоЗначенийСвойств(ЭлементФормы, Дерево) Экспорт
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор, Истина);
	КонецЦикла;
КонецПроцедуры // РазвернутьДеревоЗначенийСвойств()

// Процедура обработчик события "ПередУдалением".
//
// Параметры:
//	Элемент				- ЭлементУправления	- ЭлементФормы
//	Отказ				- Булево			- Флаг отмены.
//	Модифицированность	- Булево			- Флаг изменений.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность) Экспорт
	Отказ = Истина;
	Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначенияСвойства.ПривестиЗначение(Неопределено);
	Модифицированность = Истина;
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

// Процедура-обработчик события "ПриНачалеРедактирования"
//
// Параметры:
//	Элемент				- ЭлементУправления	- ЭлементФормы
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент) Экспорт
	Элемент.ПодчиненныеЭлементы.Значение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначенияСвойства;
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

#КонецОбласти

#Область РаботаСДинамическимиСписками
	
// Процедура удаляет элемент отбора динамического списка.
//
// Параметры:
//	Список	- СписокЗначений	- Обрабатываемый динамический список,
//	ИмяПоля	- Строка			- Имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Счетчик = 1;
	Пока Счетчик <= Список.Отбор.Элементы.Количество() Цикл
		ЭлементОтбора = Список.Отбор.Элементы[Счетчик - 1];
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла; 
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Процедура устанавливает элемент отбора динамического списка.
//
// Параметры:
//	Список			- СписокЗначений				- Обрабатываемый динамический список,
//	ИмяПоля			- Строка						- Имя поля компоновки, отбор по которому нужно установить.
//	ПравоеЗначение  - Произвольный					- Значение отбора.
//	ВидСравнения	- ВидСравненияКомпоновкиДанных	- Вид сравнения.
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Процедура изменяет элемент отбора динамического списка.
//
// Параметры:
//	Список			- СписокЗначений				- Обрабатываемый динамический список,
//	ИмяПоля			- Строка						- Имя поля компоновки, отбор по которому нужно установить.
//	ПравоеЗначение  - Произвольный					- Значение отбора.
//	Установить		- Булево						- Флаг установки.
//	ВидСравнения	- ВидСравненияКомпоновкиДанных	- Вид сравнения.
//	ОтборПоПериоду	- Булево						- Флаг отбора по периоду.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь) Экспорт
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	Если Установить Тогда
		Если ОтборПоПериоду Тогда
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);		
		Иначе
		    УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);	
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

#КонецОбласти

#Область РаботаСКонтактнойИнформацией
	
// Процедура открывает форму ошибки подключения.
//
// Параметры:
//	ВидФормы	- Строка	- Вид формы ошибки подключения.
//
Процедура ОткрытьФормуОшибкиПодключения(ВидФормы) Экспорт
	ПараметрыФормы = Новый Структура("ВидФормы", ВидФормы);	
	
	ФормаОшибкиПодключения = ПолучитьФорму("ОбщаяФорма.CRM_СообщенияПодключения", ПараметрыФормы,,ВидФормы, ВариантОткрытияОкна.ОтдельноеОкно);
	
	Если ФормаОшибкиПодключения = Неопределено Тогда
		Возврат;
	ИначеЕсли ФормаОшибкиПодключения.Открыта() Тогда
		ФормаОшибкиПодключения.Активизировать();
	Иначе
		ФормаОшибкиПодключения.Открыть();
	КонецЕсли;
КонецПроцедуры // ОткрытьФормуОшибкиПодключения()		

#КонецОбласти 

#Область ПроверкаПравописания
	
// Процедура открывает форму проверки правописания.
//
// Параметры:
//	ПроверяемыйТекст	- Строка			- Проверяемый текст.
//	Вложения			- Структура			- Структура вложений.
//	ИмяРеквизита		- Строка			- Имя реквизита формы, в котором содержится проверяемый текст.
//	Форма				- УправляемаяФорма	- Управляемая форма.
//
Процедура ПроверитьПравописаниеТекста(ПроверяемыйТекст, Вложения,  ИмяРеквизита, Форма) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроверяемыйТекст",	ПроверяемыйТекст);
	ПараметрыФормы.Вставить("Вложения",			Вложения);
	ПараметрыФормы.Вставить("ИмяРеквизита",		ИмяРеквизита);
	ОткрытьФорму("ОбщаяФорма.CRM_ПроверкаПравописания", ПараметрыФормы, Форма, ,);
КонецПроцедуры // ПроверитьПравописаниеТекста()	

Функция ПолучитьПредставлениеВремени(Время) Экспорт
	СписокВремен = Новый СписокЗначений;
	СписокВремен.Добавить(86400,	"ru='дня(ей)'");
	СписокВремен.Добавить(3600,		"ru='часа(ов)'");
	СписокВремен.Добавить(60,		"ru='минут(ы)'");
	СписокВремен.Добавить(1,		"ru='секунд(ы)'");
	Текст = "";
	Для Каждого Элемент Из СписокВремен Цикл
		Если Время >= Элемент.Значение Тогда
			Текст = Формат(Время / Элемент.Значение, "ЧДЦ=1; ЧРД=.; ЧГ=0") + " " + НСтр(Элемент.Представление);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Текст;
КонецФункции

Функция ИсключениеВременногоПериода(Знач Н, Знач К, Знач Т1 = 0, Знач Т2 = 0) Экспорт
	
	Если ТипЗнч(Н) = Тип("Дата") Тогда
		Если ТипЗнч(Т1)=Тип("Дата") Тогда
			Т1 = Т1 - НачалоДня(Т1);
		КонецЕсли;
		Если ТипЗнч(Т2)=Тип("Дата") Тогда
			Т2 = Т2 - НачалоДня(Т2);
			Если Т2 = 0 Тогда
				Т2 = 86400;
			КонецЕсли;
		КонецЕсли;
		Дат = Мин(К, КонецДня(Н)+1);
		Всего = ИсключениеВременногоПериода(Н - НачалоДня(Н), Дат - НачалоДня(Н), Т1, Т2);
		Если Дат < К Тогда
			Всего = Всего + ИсключениеВременногоПериода(0, К - НачалоДня(К), Т1, Т2);
			ПолныхДней = (НачалоДня(К)-Дат)/86400;
			ЧастьДня = ?(Т1>Т2, Т1-Т2, 86400-Т2+Т1);
			Всего = Всего + ПолныхДней*ЧастьДня;
		КонецЕсли;
	Иначе
		Всего = К - Н;
		Если Т1 <= Т2 Тогда
			Если (Т1 < К) И (Т2 > Н) Тогда
				Всего = Всего - (Т2-Т1) + ?(Т1<Н, Н-Т1, 0) + ?(Т2>К, Т2-К, 0);
			КонецЕсли;
		Иначе
			Всего = Всего - ?(Н<Т2, Т2-Н, 0) - ?(К>Т1, К-Т1, 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Всего;
	
КонецФункции

#КонецОбласти

#Область РаботаСоСсылкамиФорматированногоДокумента

// Открывает ссылку в теле письма.
//
Процедура ОткрытьСсылку(Href, Element, ТекущееПисьмо = Неопределено, HTMLДокумент = Неопределено) Экспорт
	
	ВыбраннаяСсылка = Неопределено;
	
	Если Href <> Неопределено Тогда
		// Если у данных события заполнено свойство Href - будем считать что переход будет по этой ссылке.
		ВыбраннаяСсылка = Href;
	Иначе
		Попытка
			// Если у элемента события заполнено свойство Href и элемент AREA - будем считать что переход будет по этой ссылке.
			Если ВРег(Element.tagName) = "AREA" Тогда
				ВыбраннаяСсылка = Element.Href;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ПустаяСтрока(ВыбраннаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	Если Найти(ВыбраннаяСсылка, "javascript:_1c") = 1 Тогда
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецЕсли;
	
	ПозицияРазделителя = Найти(ВыбраннаяСсылка, "#");
	ПозицияВнутреннейНавигационнойСсылки = Найти(ВыбраннаяСсылка, "#e1cib/");
	
	Если ПозицияРазделителя = 1  Тогда
		
		// Safari - передается просто относительная ссылка.
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Найти(ВыбраннаяСсылка, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) = 1 Тогда
		
		// Chrome, IE - передается полная ссылка.
		Если ПозицияРазделителя <> 0 И ПозицияВнутреннейНавигационнойСсылки = 0 Тогда
			
			СтандартнаяОбработка = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#Иначе
	Если Найти(ВыбраннаяСсылка, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) = 1 Тогда
		
		ElementID = Сред(ВыбраннаяСсылка, Найти(ВыбраннаяСсылка, "#") + 1);
		ElementByID = HTMLДокумент.getElementById(ElementID);
		
		Если ElementByID <> Неопределено Тогда
			ElementByID.scrollIntoView(true);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	#КонецЕсли
	
	СхемаСсылки = ОпределитьСхемуСсылки(ВыбраннаяСсылка);
			
	Если     СхемаСсылки = "e1c://" 
		ИЛИ (СхемаСсылки = "http://" И Найти(ВыбраннаяСсылка, "e1cib") > 0)
		ИЛИ (СхемаСсылки = "https://" И Найти(ВыбраннаяСсылка, "e1cib") > 0) Тогда
		
		Попытка
			ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		Исключение
		КонецПопытки;
	ИначеЕсли СхемаСсылки = "http://"
		Или СхемаСсылки = "https://"
		Или СхемаСсылки = "ftp://"
		Или СхемаСсылки = "mailto:"
		Или СхемаСсылки = "file://" Тогда
		
		#Если ВебКлиент Тогда
		Если СхемаСсылки = "mailto:" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В веб-клиенте нельзя открыть ссылку вида mailto:'"));
		Иначе
			ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		КонецЕсли;	
		#Иначе
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), ВыбраннаяСсылка);
		#КонецЕсли
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет схему ссылки
Функция ОпределитьСхемуСсылки(Href)
	
	Если СтрокаНачинаетсяСПодстроки(Href, "http://") Тогда
		
		Возврат "http://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "https://") Тогда
		
		Возврат "https://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "ftp://") Тогда
		
		Возврат "ftp://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "e1c://") Тогда
		
		Возврат "e1c://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "file://") Тогда
		
		Возврат "file://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "mailto:") Тогда
		
		Возврат "mailto:";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Проверяет, содержит ли ссылка схему.
Функция СтрокаНачинаетсяСПодстроки(Строка, Подстрока)
	
	Если Найти(НРег(СокрЛ(Строка)), НРег(Подстрока)) = 1 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти // РаботаСоСсылкамиФорматированногоДокумента

#Область ИнициализацииПодсистем

// Процедура инициализации подсистем CRM.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	CRM_НапоминанияКлиент.ПриНачалеРаботыСистемы();
	#КонецЕсли
	
	// +СофтФон
	Если ПараметрыПриложения["сфпЗакрыватьПанельПриЗавершенииРаботы"] = Неопределено Тогда
		ПараметрыПриложения.Вставить("сфпЗакрыватьПанельПриЗавершенииРаботы",
			сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпЗакрыватьПанельПриЗавершенииРаботы"));
	КонецЕсли;
	// -СофтФон
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	ИмяПараметра = "CRM_ПараметрыЗапуска";
	CRM_Параметры = ПараметрыПриложения[ИмяПараметра];
	Если CRM_Параметры <> Неопределено Тогда
		CRM_ЗакладкиНеОткрываем = (CRM_Параметры["ЗакладкиНеОткрываем"] = Истина);
	Иначе
		CRM_ЗакладкиНеОткрываем = Ложь;
	КонецЕсли;
		
	Если Не CRM_ЗакладкиНеОткрываем Тогда
		Если CRM_РежимФормЗакладкиКлиентПовтИсп.ИспользуетсяРежимЗакладок()Тогда
			CRM_РежимФормЗакладкиКлиент.ПриНачалеРаботыСистемы();
		КонецЕсли;
	Иначе
		CRM_РежимФормЗакладкиСервер.СохранитьТекущийСоставОткрытыхФорм(Новый Массив());
		ТекПользователь = ИмяПользователя();
		ТекНастройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ВывестиОписаниеИзмененийДляАдминистратора",,,ТекПользователь); 
		Если ТекНастройки <> Неопределено Тогда
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекУдалить("ОбновлениеИБ", "ВывестиОписаниеИзмененийДляАдминистратора", ТекПользователь);
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	// проверка и обновление демонстрационных данных в демо-режиме
	Если CRM_ДемонстрационныйРежим.ЭтоДемоРежим() Тогда
		ПоказатьОповещениеПользователя("Демонстрационные данные",, "Начат перенос");
		CRM_ДемонстрационныйРежим.ПроверкаОбновлениеДемоДанные();
		ПоказатьОповещениеПользователя("Демонстрационные данные",, "Завершен перенос");
		Оповестить("ОбновитьАРМ");
	КонецЕсли;
	
КонецПроцедуры // CRM_ПриНачалеРаботыСистемы()

#КонецОбласти

#Область РаботаСКартами

Процедура ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты) Экспорт
	
	Если Не СтруктураАдреса.Свойство("Индекс") Тогда
		СтруктураАдреса.Вставить("Индекс", "");
	КонецЕсли;
	
	Адрес = CRM_ОбщегоНазначенияСервер.ПолучитьАдрес(СтруктураАдреса, СайтИнтернетКарты);
	
	Если СайтИнтернетКарты = "GIS" Тогда
		// Для 2GIS в веб-клиенте не можем использовать API, поэтому пробуем хоть как то...
		// Пытаемся подставить город из "миллионников".
		Город = "";
		Попытка
			Если Найти(Врег(СтруктураАдреса.Регион),"МОСКВА") Тогда
				Город = "moskow";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Регион),"ПЕТЕРБУРГ") Тогда 	
				Город = "spb";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"НОВОСИБИРСК") Тогда 	
				Город = "novosibirsk";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"ЕКАТЕРИНБУРГ") Тогда 	
				Город = "ekaterinburg";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"НИЖНИЙ НОВГОРОД") Тогда 	
				Город = "n_novgorod";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"КАЗАНЬ") Тогда 	
				Город = "kazan";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"САМАРА") Тогда 	
				Город = "";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"ОМСК") Тогда 	
				Город = "omsk";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"ЧЕЛЯБИНСК") Тогда 	
				Город = "chelyabinsk";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"РОСТОВ") Тогда 	
				Город = "rostov";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"УФА") Тогда 	
				Город = "ufa";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"ВОЛГОГРАД") Тогда 	
				Город = "volgograd";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"КРАСНОЯРСК") Тогда 	
				Город = "krasnoyarsk";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"ВОРОНЕЖ") Тогда 	
				Город = "voronezh";
			ИначеЕсли Найти(Врег(СтруктураАдреса.Город),"ПЕРМЬ") Тогда 	
				Город = "perm";
			КонецЕсли; 
		Исключение
		КонецПопытки;
		Представление = СтрЗаменить(СтруктураАдреса.Представление, СтруктураАдреса.Индекс + ",", "");
		
		Если Не ПустаяСтрока(Город) Тогда
			СтрокаПоиска = "http://2gis.ru/"+ Город + "/search/" + Представление;
		Иначе	
			СтрокаПоиска = "http://2gis.ru/search/" + Представление;
		КонецЕсли; 
		ПерейтиПоНавигационнойСсылке(СтрокаПоиска);
		
		// ++ Харченко Д.И. №  - 26.09.2018 / 
	ИначеЕсли СайтИнтернетКарты = "вогГеокодирование" Тогда
		
		Если ЗначениеЗаполнено(СтруктураАдреса.Представление) Тогда
			
			ПараметрыГеокода = Новый Структура;
			ПараметрыГеокода.Вставить("СкрытьПанельАдресов", Истина);
			//*** Описание
			//*** 12 апреля 2019 г.
			//*** Блашин Евгений Игоревич VOG Начало
			ПредставлениеАдреса = "";
			Если СтруктураАдреса.Свойство("Долгота") ИЛИ СтруктураАдреса.Свойство("Широта") Тогда
				//Проверим что обе не равны 0, надеемся что адреса с координатами 0,0 не будет)))
				Если СтруктураАдреса.Долгота <> 0  ИЛИ СтруктураАдреса.Широта <> 0 Тогда
					ПредставлениеАдреса = Формат(СтруктураАдреса.Широта, "ЧРД=.") + ", " + Формат(СтруктураАдреса.Долгота, "ЧРД=.");
				КонецЕсли;
			КонецЕсли; 
			
			ПараметрыГеокода.Вставить("Адрес", ?(ПустаяСтрока(ПредставлениеАдреса),СтруктураАдреса.Представление,ПредставлениеАдреса));
			
			//*** Блашин Евгений Игоревич VOG Окончание 
			
			
			Если СтруктураАдреса.Свойство("КоличествоОтветов") Тогда
				ПараметрыГеокода.Вставить("КоличествоОтветов",СтруктураАдреса.КоличествоОтветов);
			КонецЕсли; 
			
			ОткрытьФорму("Обработка.вогГеокодирование.Форма.Форма", ПараметрыГеокода);
			
		КонецЕсли;

	// -- Харченко Д.И. №  - 26.09.2018
	Иначе
		ПерейтиПоНавигационнойСсылке(Адрес);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПривязкаДокументовКИнтересамКлиентов

// Процедура открывает интерес/консультацию из формы документы.
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ТаблицаИнтересов) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТаблицаИнтересов.Количество() > 0 Тогда
		ТекИнтерес = ТаблицаИнтересов[0];
		ПоказатьЗначение(,ТекИнтерес.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры выбора документов "Интерес" и "Консультация" при привязке документа.
Процедура Подключаемый_ИнтересНачалоВыбора(ПараметрыОтбора, Элемент, ДанныеВыбора, СтандартнаяОбработка, ОписаниеОповещения) Экспорт
	
	СтандартнаяОбработка 	= Ложь;
	
	ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, ПараметрыОтбора);
	ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);
	
	ОткрытьФорму("Обработка.CRM_ВыборИнтереса.Форма", ПараметрыФормыВыбора, Элемент,, ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТаблицаИнтересов = ЭтаФорма.CRM_ТаблицаИнтересов;
	
	Если ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаИнтересов.Количество() > 0 Тогда
		ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтаФорма.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтаФорма.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

//
//
Процедура УстановитьСвойстваГруппыИнтересВФормеДокумента(Форма) Экспорт
	
	//Форма.Элементы.ГруппаИнтерес.Видимость = Форма.ЕстьИнтересыДляВыбора;
	
КонецПроцедуры

//
//
Процедура УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(Форма) Экспорт
	
	//Для Каждого ПодЭлемент Из Форма.Элементы.CRM_ТаблицаИнтересовКоманднаяПанель.ПодчиненныеЭлементы Цикл
	//	ПодЭлемент.Видимость = Ложь;
	//КонецЦикла;
	//
	//Форма.Элементы.CRM_ТаблицаИнтересовКонтекстноеМенюПереместить.Видимость = Ложь;
	//Форма.Элементы.CRM_ТаблицаИнтересовКонтекстноеМенюСкопировать.Видимость = Ложь;
	//Форма.Элементы.CRM_ТаблицаИнтересовКонтекстноеМенюИзменить.Видимость = Ложь;
	
КонецПроцедуры

// Процедура обрабатывает результат выбора значения (интереса, консультации).
Процедура ИнтересОбработкаВыбора(ВыбранноеЗначение, ЭтотОбъект, ТекущийЭлемент) Экспорт
	
	//Если ВыбранноеЗначение <> Неопределено Тогда
	//	
	//	ЗаменитьОсновное = ((ТекущийЭлемент.Имя = "CRM_ИнтересСтрокой") ИЛИ (ТекущийЭлемент.Имя = "Тег"));
	//	ТаблицаИнтересов = ЭтотОбъект.CRM_ТаблицаИнтересов;
	//	Если ВыбранноеЗначение <> Неопределено Тогда		
	//		Если ЗаменитьОсновное И ТаблицаИнтересов.Количество() > 0 Тогда
	//			СтрокаДляУдаления = ТаблицаИнтересов[0];
	//			ТаблицаИнтересов.Удалить(СтрокаДляУдаления);
	//			НоваяСтрока = ТаблицаИнтересов.Вставить(0);
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	//			НоваяСтрока.Ссылка = ВыбранноеЗначение;
	//		Иначе
	//			МассивСтрок = ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	//			ВНачало = Ложь;
	//			Если МассивСтрок.Количество() = 0 Тогда
	//				Если ВНачало Тогда
	//					НоваяСтрока = ТаблицаИнтересов.Вставить(0);
	//				Иначе
	//					НоваяСтрока = ТаблицаИнтересов.Добавить();
	//				КонецЕсли;
	//				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	//				НоваяСтрока.Ссылка = ВыбранноеЗначение;
	//			ИначеЕсли ВНачало Тогда
	//				ТаблицаИнтересов.Сдвинуть(ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСSMS4B

// Процедура - обработчик открытия формы настроек СМС.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура смсОткрытьФормуНастроекСМС(Ответ, ДополнительныеПараметры) Экспорт
	Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда Возврат; КонецЕсли;
	ФормаНастроек = ПолучитьФорму("ОбщаяФорма.sms4bФормаНастроек");
	Если ФормаНастроек.Открыта() Тогда
		ФормаНастроек.Активизировать();
	Иначе
		ФормаНастроек.Открыть();
	КонецЕсли;	
КонецПроцедуры // СмсОткрытьФормуНастроекСМС().

// Функция проверяет доступность использования сервиса SMS4B.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Доступность сервиса SMS4B.
//
Функция смсПроверитьДоступностьSMS4B() Экспорт
	Если НЕ ОтправкаSMSЧерезSMS4B.НастройкаОтправкиSMSВыполнена() Тогда
		ТекстВопроса = НСтр("ru='Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?'");
		ДополнительныеПараметры = Новый Структура;
		ОповещениеОтвета = Новый ОписаниеОповещения("смсОткрытьФормуНастроекСМС", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
		Возврат Ложь;		
	КонецЕсли;
	Возврат Истина;		
КонецФункции // СмсПроверитьДоступностьSMS4B().

// Процедура - обработчик открытия формы документа СМС.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОткрытьФормуДокументаСМС(СписокТелефонов, ДополнительныеПараметры) Экспорт
	Если СписокТелефонов = Неопределено Тогда
		Возврат;
	ИначеЕсли СписокТелефонов.Количество() = 0 Тогда	
		Возврат;
	Иначе	
		СтруктураСписка = Новый Структура("СписокТелефонов", СписокТелефонов);
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Основание", СтруктураСписка);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ДанныеЗаполнения);
	КонецЕсли;
КонецПроцедуры // ОткрытьФормуДокументаСМС()

#КонецОбласти

#Область РедакторированиеЗаблокированныхРеквизитов

// Вызывается в формах объектов для разблокировки заблокированных реквизитов.
// 
// Параметры:
//     ЭтаФорма              - Форма объекта.
//     ИмяФормыРазблокировки - Имя формы разблокировки.
//
Процедура РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма, Знач ИмяФормыРазблокировки = "") Экспорт
	
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Ссылка) Тогда
		
		Если Не ЗначениеЗаполнено(ИмяФормыРазблокировки) Тогда
			МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ЭтаФорма.ИмяФормы, ".");
			МассивИмениФормы[3] = "РазблокированиеРеквизитов";
			ИмяФормыРазблокировки = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивИмениФормы, ".");
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", CRM_ОбщегоНазначенияКлиент, ЭтаФорма);
		ОткрытьФорму(ИмяФормыРазблокировки, Новый Структура("Объект", ЭтаФорма.Объект.Ссылка),,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(РедактированиеРазрешено, ЭтаФорма) Экспорт
	
		Если РедактированиеРазрешено = Истина Тогда
			
			ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтаФорма);
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьРазрешенностьРедактированияРеквизитов(ЭтаФорма, ЗаблокированныеРеквизиты);
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма);
			
		КонецЕсли;
		
КонецПроцедуры


#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает фильтр, используемый для выбора файлов-изображений.
// Возвращаемое значение:
// Строка - строка, содержащая фильтр для файлов-изображений.
//
Функция ФильтрФайловИзображений() Экспорт
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
КонецФункции

#КонецОбласти

#Область ОбработкаМногострочногоТекста

////////////////////////////////////////////////////////////////////////////////
// Функции для обработки действий пользователя в процессе редактирования
// многострочного текста, например комментария в документах.

// Открывает форму редактирования произвольного многострочного текста модально.
//
// Параметры:
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать;
//  РезультатРедактирования - Строка - в этот параметр будет помещен результат редактирования;
//  Модифицированность      - Строка - флаг модифицированности формы;
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//
//Процедура ОткрытьФормуРедактированияМногострочногоТекста(Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, 
//		Знач Заголовок = Неопределено) Экспорт
//	
//	Если Заголовок = Неопределено Тогда
//		ТекстВведен = ВвестиСтроку(МногострочныйТекст,,, Истина);
//	Иначе
//		ТекстВведен = ВвестиСтроку(МногострочныйТекст, Заголовок,, Истина);
//	КонецЕсли;
//	
//	Если Не ТекстВведен Тогда
//		Возврат;
//	КонецЕсли;
//		
//	РезультатРедактирования = МногострочныйТекст;
//	Если Не Модифицированность Тогда
//		Модифицированность = Истина;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Открывает форму редактирования многострочного комментария модально.
////
//// Параметры:
////  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
////  РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования.
////  Модифицированность       - Строка - флаг модифицированности формы.
////
//// Пример использования:
////  ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
////
//Процедура ОткрытьФормуРедактированияКомментария(Знач МногострочныйТекст, РезультатРедактирования,
//	Модифицированность = Ложь) Экспорт
//	
//	ОткрытьФормуРедактированияМногострочногоТекста(МногострочныйТекст, РезультатРедактирования, Модифицированность, 
//		НСтр("ru='Комментарий'"));
//	
//КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Выбор общего модуля исходя из текущей конфигурации
//
Процедура ПередОпределениемВозможностиОбновления() Экспорт
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_Модуль_ОбщегоНазначенияКлиент") Тогда
		МодульОбщегоНазначенияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_Модуль_ОбщегоНазначенияКлиент");
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("ОбщиеМодули", "CRM_УТ_ОбщегоНазначенияКлиент") Тогда
		МодульОбщегоНазначенияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УТ_ОбщегоНазначенияКлиент");
	Иначе
		МодульОбщегоНазначенияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_ОбщегоНазначенияКлиент");
	КонецЕсли;
	
	МодульОбщегоНазначенияКлиент.ПриОпределенииВозможностиОбновления();
	
КонецПроцедуры

// Вызывается в обработчике ПередНачаломРаботыСистемы, проверяет возможность
// обновления на текущую версию программы.
//
Процедура ПриОпределенииВозможностиОбновления() Экспорт
	
	МинимальноДопустимаяВерсия = "3.0.1";
	
	ПараметрыКлиента = Новый Структура;
	CRM_ОбщегоНазначенияСервер.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыКлиента);
	
	Если ПараметрыКлиента.ВерсияДанных = "0.0.0.0" Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим допустимость обновления
	ТекущаяВерсияКонфигурации  = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ПараметрыКлиента.ВерсияДанных);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ТекущаяВерсияКонфигурации, МинимальноДопустимаяВерсия) < 0 Тогда
		Сообщение =
			НСтр("ru = 'Обновление на текущую версию допустимо только с версии %1 и выше.
			|(Недопустимая попытка обновления с версии %2)
			|Необходимо восстановить информационную базу из резервной копии
			|и повторить обновление согласно файлу 1cv8upd.htm'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			МинимальноДопустимаяВерсия,
			ПараметрыКлиента.ВерсияДанных);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти // ОбновлениеИБ

#Область Прочие

// Задает вопрос о продолжении действия, ведущего к закрытию формы.
// Для использования в обработчиках события ПередЗакрытием модулей форм.
//
// Параметры:
//  Форма                        - УправляемаяФорма - форма, которая вызывает диалог предупреждения.
//  Отказ                        - Булево - возвращаемый параметр, признак отказа от выполняемого действия.
//  ТекстПредупреждения          - Строка - текст предупреждения, выводимый пользователю.
//  ИмяРеквизитаЗакрытьФормуБезПодтверждения - Строка - имя реквизита, содержащего в себе признак того, нужно
//                                 выводить предупреждение или нет.
//  ОписаниеОповещенияЗакрыть    - ОписаниеОповещения - содержит имя процедуры, вызываемой при нажатии на кнопку да.
//
// Пример: 
//  ТекстПредупреждения = НСтр("ru = 'Закрыть помощник?'");
//  ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
//      ЭтотОбъект, Отказ, ТекстПредупреждения, "ЗакрытьФормуБезПодтверждения");
//
Процедура CRM_ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(Форма, Отказ, ТекстПредупреждения,
	ИмяРеквизитаЗакрытьФормуБезПодтверждения, ОписаниеОповещенияЗакрыть = Неопределено) Экспорт
	
	Если Форма[ИмяРеквизитаЗакрытьФормуБезПодтверждения] Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	Параметры.Вставить("ИмяРеквизитаЗакрытьФормуБезПодтверждения", ИмяРеквизитаЗакрытьФормуБезПодтверждения);
	Параметры.Вставить("ОписаниеОповещенияЗакрыть", ОписаниеОповещенияЗакрыть);
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Параметры;
	
	ПодключитьОбработчикОжидания("ПодтвердитьЗакрытиеПроизвольнойФормыСейчас", 0.1, Истина);
	
КонецПроцедуры

Процедура CRM_ПоказатьПодтверждениеЗакрытияФормы(ОповещениеСохранитьИЗакрыть, Отказ, ТекстПредупреждения = "") Экспорт
	
	Форма = ОповещениеСохранитьИЗакрыть.Модуль;
	Если Не Форма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Параметры = Новый Структура();
	Параметры.Вставить("ОповещениеСохранитьИЗакрыть", ОповещениеСохранитьИЗакрыть);
	Параметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Параметры;
	
	ПодключитьОбработчикОжидания("ПодтвердитьЗакрытиеФормыСейчас", 0.1, Истина);
	
КонецПроцедуры

// Процедура - обработчик открытия контакта.
//
// Параметры:
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров.
//
Процедура ОткрытьНайденныйКонтакт(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура("Ключ", ДополнительныеПараметры.Ключ);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОткрытьНайденныйКонтакт()	

// Функция проверяет возможность записи интереса клиента.
//
// Параметры:
//	Интерес	- ДокументСсылка	- Текущий интерес.
//
// Возвращаемое значение:
//	Булево	- Возможность записи интереса.
//
Функция ПроверитьВозможностьЗаписиИнтереса(Интерес) Экспорт
	//МожноЗаписатьИнтерес = Истина;
	//// Получаем все прочие незавершенные интересы клиента по данному типу услуги.
	//Если ЗначениеЗаполнено(Интерес.Партнер) И ЗначениеЗаполнено(Интерес.ТипУслуги) Тогда
	//	
	//	// Проверяем аккаунт-менеджера.
	//	ТекПользователь		= ПользователиКлиентСервер.АвторизованныйПользователь();
	//	ОсновнойМенеджер	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес.Партнер, "ОсновнойМенеджер");
	//	ЭтоАккаунтМенеджер = (ТекПользователь = ОсновнойМенеджер);
	//	// Сразу определяем, руководитель ли аккаунт-менеджера.
	//	МассивРуководителей = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(ОсновнойМенеджер);
	//	ЭтоРукводительАккаунтМенеджера = Не (МассивРуководителей.Найти(ТекПользователь) = Неопределено);
	//	
	//	// Если это аккаунт-менеджер или его руководитель разрешаем записать интерес, не смотря на наличие / отсутсвие
	//	// активных.
	//	Если ЭтоАккаунтМенеджер ИЛИ ЭтоРукводительАккаунтМенеджера ИЛИ Интерес.Ответственный = ОсновнойМенеджер Тогда
	//		Возврат МожноЗаписатьИнтерес;
	//	Иначе
	//		// Если нет, то проверяем активные по данному клиенту / типу услуги.
	//		МассивИнтересовКлиента = CRM_ОбщегоНазначенияСервер.ПолучитьМассивИнтересовКлиента(Интерес.Ссылка, Интерес.Партнер, Интерес.ТипУслуги);
	//		Для Каждого ЭлементМассива Из МассивИнтересовКлиента Цикл
	//			ОтветственныйМенеджер = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЭлементМассива, "Ответственный");
	//			Если ОтветственныйМенеджер = Интерес.Ответственный Тогда
	//				// Если уже есть интерес с данным ответственным.
	//				МожноЗаписатьИнтерес = Ложь;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;	
	//Возврат МожноЗаписатьИнтерес;
КонецФункции // ПроверитьВозможностьЗаписиИнтереса()

// Функция проверяет возможность записи интереса потенциального клиента.
//
// Параметры:
//	Интерес	- ДокументСсылка	- Текущий интерес.
//
// Возвращаемое значение:
//	Булево	- Возможность записи интереса.
//
Функция ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Интерес) Экспорт
	//МожноЗаписатьИнтерес = Истина;
	//// Получаем все прочие интересы потенциального клиента.
	//Если ЗначениеЗаполнено(Интерес.ПотенциальныйКлиент) Тогда
	//	МассивИнтересовКлиента = CRM_ОбщегоНазначенияСервер.ПолучитьМассивИнтересовПотенциальногоКлиента(Интерес.Ссылка, Интерес.ПотенциальныйКлиент);
	//	Если МассивИнтересовКлиента.Количество() > 0 Тогда
	//		МожноЗаписатьИнтерес = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	//Возврат МожноЗаписатьИнтерес;
КонецФункции // ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента()	

#КонецОбласти // Прочие
