
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьРассчет() Экспорт
	
	//>>Бей(22.05.2019 16:53:32):#335
	
	УстановитьПривилегированныйРежим(Истина);
	//
	//ПараметрыКонтроля = вогКонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПараметрыКонтроляЗаполненностиРеквизитов();
	//Если ПараметрыКонтроля = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	////Контроль реквизитов
	//Для каждого КлючЗначение Из ПараметрыКонтроля.ПараметрыКонтроляРеквизитов Цикл
	//	ВыполнитьРассчетЗаполненостиРеквизитовОбъекта(КлючЗначение);           
	//	
	//КонецЦикла;
	//
	////Контроль реквизитов процессов
	//Для каждого КлючЗначение Из ПараметрыКонтроля.ПараметрыКонтроляПроцесса Цикл
	//	ВыполнитьРассчетЗаполненостиРеквизитовПроцессаОбъекта(КлючЗначение);           
	//	
	//КонецЦикла;
	//
	
//START Кайдашов 16/07/19
	Набор = РегистрыСведений.вогЗначенияРасчетаПоказателейЗаполненности.СоздатьНаборЗаписей();
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
//END Кайдашов	
	ВыполнитьРасчетЗначенийПоказателей();
	
	ВыполнитьРасчетЗаполненностиОбъектов();
	
	УстановитьПривилегированныйРежим(Ложь);
		
	//<<Бей(22.05.2019 16:53:42):#335
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетЗначенийПоказателей(СсылкаНаОбъект = Неопределено) //>>Бей(22.05.2019 17:11:21):#335
	
	РасчетПоОдномуОбъекту = СсылкаНаОбъект <> Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогПоказателиЗаполнености.Ссылка КАК Показатель,
		|	вогПоказателиЗаполнености.ЦелевоеЗначение КАК ЦелевоеЗначение
		|ИЗ
		|	Справочник.вогПоказателиЗаполнености КАК вогПоказателиЗаполнености
		|ГДЕ
		|	НЕ вогПоказателиЗаполнености.ПометкаУдаления
		|	%1";
	
	Если РасчетПоОдномуОбъекту Тогда
		ИмяОбъектаМетаданных = СсылкаНаОбъект.Метаданные().Имя;
		Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
		УсловиеПоТипуМетаданных = "И вогПоказателиЗаполнености.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных";	
	Иначе
		УсловиеПоТипуМетаданных = "";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,УсловиеПоТипуМетаданных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Показатель = ВыборкаДетальныеЗаписи.Показатель;
		
		СКД = Показатель.ХранилищеСхемыКомпоновкиДанных.Получить();
		
		СКД.Параметры.Показатель.Значение = Показатель;
		
		Настройки = Показатель.ХранилищеНастроекКомпоновкиДанных.Получить();
				
		НаборЗаписей = РегистрыСведений.вогЗначенияРасчетаПоказателейЗаполненности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Показатель.Установить(Показатель);

		Если РасчетПоОдномуОбъекту Тогда
			НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки,"Объект",СсылкаНаОбъект);
		КонецЕсли;
		
		РезультатРасчета = КомпоновкаДанныхСервер.ВыполнитьКомпоновкуДанныхВТаблицуЗначений(СКД, Настройки);	
		
		РезультатРасчета.Колонки.ПользовательскиеПоляПоле1.Имя = "Значение";
		
		НаборЗаписей.Загрузить(РезультатРасчета);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Расчет заполненности объектов",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());	
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьРасчетЗаполненностиОбъектов(СсылкаНаОбъект = Неопределено) //>>Бей(22.05.2019 17:11:21):#335
	
	РасчетПоОдномуОбъекту = СсылкаНаОбъект <> Неопределено;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогЗначенияРасчетаПоказателейЗаполненности.Объект КАК Объект,
		|	СУММА(вогЗначенияРасчетаПоказателейЗаполненности.Значение) / СУММА(вогЗначенияРасчетаПоказателейЗаполненности.Показатель.ЦелевоеЗначение) * 100 КАК ПроцентЗаполненностиОбщий
		|ИЗ
		|	РегистрСведений.вогЗначенияРасчетаПоказателейЗаполненности КАК вогЗначенияРасчетаПоказателейЗаполненности
		|%1
		|СГРУППИРОВАТЬ ПО
		|	вогЗначенияРасчетаПоказателейЗаполненности.Объект";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Если РасчетПоОдномуОбъекту Тогда
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект",СсылкаНаОбъект);
		
		УсловиеПоОбъекту = "ГДЕ
						|	вогЗначенияРасчетаПоказателейЗаполненности.Объект = &СсылкаНаОбъект";

		
					
	Иначе
		УсловиеПоОбъекту="";
	КонецЕсли;

	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,УсловиеПоОбъекту);
	
	РезультатРасчета = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.вогЗаполненностьРеквизитовОбъектов.СоздатьНаборЗаписей();	
	
	Если РасчетПоОдномуОбъекту Тогда

		НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
		
	КонецЕсли;
	
	НаборЗаписей.Загрузить(РезультатРасчета);
	
	НаборЗаписей.Записать();
 
КонецПроцедуры

Процедура ВыполнитьРассчетЗаполненостиРеквизитовОбъекта(КлючЗначение, ОбъектСсылка = Неопределено) Экспорт
	
	//>>Бей(22.05.2019 16:53:32):#335
	
	//	ДанныеРасчета = ПолучитьДанныеРассчетаЗаполнености(КлючЗначение, ОбъектСсылка);	
	//	Для каждого ОписаниеОбъектаРассчета Из ДанныеРасчета Цикл
	//		//Запись в регистр
	//		МенеджерЗаполненности = РегистрыСведений.вогЗаполненностьРеквизитовОбъектов.СоздатьМенеджерЗаписи();
	//		
	//		ЗаполнитьЗначенияСвойств(МенеджерЗаполненности, ОписаниеОбъектаРассчета.Значение);
	//		МенеджерЗаполненности.Объект = ОписаниеОбъектаРассчета.Ключ;
	//		
	//		МенеджерЗаполненности.Записать();
	//		
	//	КонецЦикла;
	
	//<<Бей(22.05.2019 16:53:42):#335
КонецПроцедуры // ВыполнитьРассчетЗаполнености()

Процедура ВыполнитьРассчетЗаполненостиРеквизитовПроцессаОбъекта(КлючЗначение, ОбъектСсылка = Неопределено) Экспорт
	
	//>>Бей(22.05.2019 16:53:32):#335
	
	//ДанныеРасчета = ПолучитьДанныеРассчетаЗаполнености(КлючЗначение, ОбъектСсылка);	
	//Для каждого ОписаниеОбъектаРассчета Из ДанныеРасчета Цикл
	//	//Запись в регистр
	//	МенеджерЗаполненности = РегистрыСведений.вогЗаполненностьРеквизитовПроцессовОбъектов.СоздатьМенеджерЗаписи();
	//	
	//	ЗаполнитьЗначенияСвойств(МенеджерЗаполненности, ОписаниеОбъектаРассчета.Значение);
	//	МенеджерЗаполненности.Объект = ОписаниеОбъектаРассчета.Ключ;
	//	
	//	МенеджерЗаполненности.Записать();
	//	
	//КонецЦикла;
	//<<Бей(22.05.2019 16:53:42):#335
	
КонецПроцедуры // ВыполнитьРассчетЗаполнености()

Функция ПолучитьДанныеРассчетаЗаполнености(КлючЗначение, ОбъектСсылка = Неопределено) Экспорт

	СоответствиеОбъектов = Новый Соответствие;
	
	//>>Бей(22.05.2019 16:51:40):#335		
	//МетаданныеОбъекта    = Метаданные.НайтиПоПолномуИмени(КлючЗначение.Ключ);
	//
	//ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	//ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Рассчет заполненности реквизитов объектов.'");
	//ПараметрыЖурнала.Метаданные    = МетаданныеОбъекта;
	//Если МетаданныеОбъекта = Неопределено Тогда
	//	ЗаписьЖурнала(ПараметрыЖурнала, , ,
	//		НСтр("ru = 'Ошибка рассчета заполненности объекта метаданных %1'"), , 
	//		"'"+ КлючЗначение.Ключ +"'"
	//	);
	//	
	//	Возврат СоответствиеОбъектов;
	//	
	//КонецЕсли;
	//
	////Общие параметры
	//ПараметрыКонтроляОбъекта = КлючЗначение.Значение;
	//
	//ВсегоРеквизитов = 0;
	//
	//ЗначенияОбщие		   = Новый Структура;
	//ЗначенияСвойств		   = Новый Структура;
	//ЗначенияКИ      	   = Новый Структура;
	//ЗначенияКлассификаторы = Новый Структура;
	//ЗначенияВидыФайлов     = Новый Структура;	
	//
	//СхемаЗапроса = Новый СхемаЗапроса;		
	//
	//#Область ФормированиеВременныхТаблиц
	//	
	////Дополнительные реквизиты
	//Если ПараметрыКонтроляОбъекта.Свойство("ДополнительныйРеквизитОбъекта") Тогда
	//	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
	//	ЗапросСхемы.ТаблицаДляПомещения = "ДополнительныйРеквизитОбъекта";
	//	
	//	ЗапросСхемы.ВыбиратьРазрешенные = Истина;
	//	
	//	ОператорыЗапроса = ЗапросСхемы.Операторы[0];
	//	
	//	Источник = ОператорыЗапроса.Источники.Добавить(КлючЗначение.Ключ + ".ДополнительныеРеквизиты", "ДополнительныеРеквизитыОбъекта");
	//	
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("ДополнительныеРеквизитыОбъекта.Ссылка");
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("ДополнительныеРеквизитыОбъекта.Свойство");
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("ДополнительныеРеквизитыОбъекта.Значение");
	//	
	//	ЗапросСхемы.Колонки[0].Псевдоним = "Объект";
	//			
	//	ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[0]);
	//	ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[1]);		
	//	
	//	ОператорыЗапроса.Отбор.Добавить("ДополнительныеРеквизитыОбъекта.Свойство В (&ДополнительныйРеквизитОбъекта)");
	//	ЗначенияОбщие.Вставить("ДополнительныйРеквизитОбъекта", ПараметрыКонтроляОбъекта.ДополнительныйРеквизитОбъекта);
	//	
	//КонецЕсли;
	//
	////Виды контактной информации
	//Сч = 1;
	//Если ПараметрыКонтроляОбъекта.Свойство("ВидКонтактнойИнформацииОбъекта") Тогда
	//	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
	//	
	//	ЗапросСхемы.ВыбиратьРазрешенные = Истина;
	//	
	//	ЗапросСхемы.ТаблицаДляПомещения = "ВидКонтактнойИнформацииОбъекта";
	//	
	//	ОператорыЗапроса = ЗапросСхемы.Операторы[0];
	//	
	//	Источник = ОператорыЗапроса.Источники.Добавить(КлючЗначение.Ключ + ".КонтактнаяИнформация", "КонтактнаяИнформацияОбъекта");
	//	
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("КонтактнаяИнформацияОбъекта.Ссылка");
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("КонтактнаяИнформацияОбъекта.Вид");
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("КонтактнаяИнформацияОбъекта.Представление");
	//	
	//	ЗапросСхемы.Колонки[0].Псевдоним = "Объект";
	//			
	//	ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[0]);
	//	ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[1]);		
	//	
	//	ОператорыЗапроса.Отбор.Добавить("КонтактнаяИнформацияОбъекта.Вид В (&ВидКонтактнойИнформацииОбъекта)");
	//	ЗначенияОбщие.Вставить("ВидКонтактнойИнформацииОбъекта", ПараметрыКонтроляОбъекта.ВидКонтактнойИнформацииОбъекта);
	//	
	//КонецЕсли;
	//
	////Классификаторы
	//Если ПараметрыКонтроляОбъекта.Свойство("КлассификаторОбъекта") Тогда
	//	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
	//	
	//	ЗапросСхемы.ВыбиратьРазрешенные = Истина;
	//	
	//	ЗапросСхемы.ТаблицаДляПомещения = "КлассификаторОбъекта";
	//	
	//	ОператорыЗапроса = ЗапросСхемы.Операторы[0];
	//	
	//	Источник = ОператорыЗапроса.Источники.Добавить("РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов", "ОбъектыЗначенийКлассификаторов");
	//	
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("ОбъектыЗначенийКлассификаторов.Объект");
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец");
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора)");
	//	
	//	ЗапросСхемы.Колонки[0].Псевдоним = "Объект";
	//	ЗапросСхемы.Колонки[1].Псевдоним = "Классификатор";
	//	ЗапросСхемы.Колонки[2].Псевдоним = "ЗначенийКлассификатора";
	//	
	//	ОператорыЗапроса.Группировка.Добавить("ОбъектыЗначенийКлассификаторов.Объект");
	//	ОператорыЗапроса.Группировка.Добавить("ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец");
	//	
	//	ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[0]);
	//	ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[1]);		
	//	
	//КонецЕсли;
	//
	////Виды присоединенных файлов
	//Если ПараметрыКонтроляОбъекта.Свойство("ВидыПрисоединенныхФайловОбъекта") Тогда
	//	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить();
	//	
	//	ЗапросСхемы.ВыбиратьРазрешенные = Истина;
	//	
	//	ЗапросСхемы.ТаблицаДляПомещения = "ВидыПрисоединенныхФайловОбъекта";
	//	
	//	ОператорыЗапроса = ЗапросСхемы.Операторы[0];
	//	
	//	Источник = ОператорыЗапроса.Источники.Добавить("РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам", "ПрисоедниненныеФайлыОбъектовПоВидам");
	//	
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл.ВладелецФайла");
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла");
	//	ОператорыЗапроса.ВыбираемыеПоля.Добавить("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл)");
	//	
	//	ЗапросСхемы.Колонки[0].Псевдоним = "Объект";
	//	ЗапросСхемы.Колонки[1].Псевдоним = "ВидФайла";
	//	ЗапросСхемы.Колонки[2].Псевдоним = "ПрисоединенныхФайлов";
	//	
	//	ОператорыЗапроса.Группировка.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл.ВладелецФайла");
	//	ОператорыЗапроса.Группировка.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла");
	//	
	//	ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[0]);
	//	ЗапросСхемы.Индекс.Добавить(ЗапросСхемы.Колонки[1]);		
	//	
	//	ОператорыЗапроса.Отбор.Добавить("ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла В (&ВидыПрисоединенныхФайловОбъекта)");
	//	ЗначенияОбщие.Вставить("ВидыПрисоединенныхФайловОбъекта", ПараметрыКонтроляОбъекта.ВидыПрисоединенныхФайловОбъекта);
	//	
	//КонецЕсли;		
	//
	//#КонецОбласти
	//
	//#Область ФормированиеДанныхВыборки
	//
	//ЗапросСхемы 	 = СхемаЗапроса.ПакетЗапросов.Добавить();
	//
	//ЗапросСхемы.ВыбиратьРазрешенные = Истина;
	//
	//ОператорыЗапроса = ЗапросСхемы.Операторы[0];
	//
	//Источник = ОператорыЗапроса.Источники.Добавить(КлючЗначение.Ключ, "ТаблицаОбъектаКонтроля");
	//
	////Поле ссылки
	//ОператорыЗапроса.ВыбираемыеПоля.Добавить("ТаблицаОбъектаКонтроля.Ссылка");
	//Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
	//	ОператорыЗапроса.Отбор.Добавить("ТаблицаОбъектаКонтроля.Ссылка = &Ссылка");
	//	ЗначенияОбщие.Вставить("Ссылка", ОбъектСсылка);
	//      
	//КонецЕсли;
	//
	////Проверка иерархиии
	//Если МетаданныеОбъекта.Иерархический
	//  И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
	//	ОператорыЗапроса.Отбор.Добавить("НЕ ТаблицаОбъектаКонтроля.ЭтоГруппа");		
	//	
	//КонецЕсли;
	//
	////Реквизиты
	//Если ПараметрыКонтроляОбъекта.Свойство("РеквизитОбъекта") Тогда
	//	ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.РеквизитОбъекта.Количество();
	//	Для каждого РеквизитОбъекта Из ПараметрыКонтроляОбъекта.РеквизитОбъекта Цикл
	//		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ТаблицаОбъектаКонтроля." + РеквизитОбъекта);
	//		
	//	КонецЦикла;
	//				
	//КонецЕсли;
	//
	////Табличные части
	//Если ПараметрыКонтроляОбъекта.Свойство("ТабличнаяЧастьОбъекта") Тогда
	//	ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.ТабличнаяЧастьОбъекта.Количество();
	//	Для каждого ТабличнаяЧастьОбъекта Из ПараметрыКонтроляОбъекта.ТабличнаяЧастьОбъекта Цикл
	//		ОператорыЗапроса.ВыбираемыеПоля.Добавить("ТаблицаОбъектаКонтроля." + ТабличнаяЧастьОбъекта);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	////Дополнительные реквизиты
	//Сч = 1;
	//Если ПараметрыКонтроляОбъекта.Свойство("ДополнительныйРеквизитОбъекта") Тогда
	//	ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.ДополнительныйРеквизитОбъекта.Количество();
	//	Для каждого ДополнительныйРеквизитОбъекта Из ПараметрыКонтроляОбъекта.ДополнительныйРеквизитОбъекта Цикл
	//		ПсевдонимТаблицы = "ДополнительныйРеквизитОбъекта" + Формат(Сч, "ЧГ=");
	//		ИсточникДополнительныеРеквизиты = ОператорыЗапроса.Источники.Добавить("ДополнительныйРеквизитОбъекта", ПсевдонимТаблицы);
	//		
	//		ИмяПараметра = "Свойство" + Формат(Сч, "ЧГ=");
	//		ЗначенияСвойств.Вставить(ИмяПараметра, ДополнительныйРеквизитОбъекта);
	//		
	//		ИсточникДополнительныеРеквизиты.Соединения.Очистить();
	//		ИсточникДополнительныеРеквизиты.Соединения.Добавить(Источник, "ТаблицаОбъектаКонтроля.Ссылка = " + ПсевдонимТаблицы + ".Объект");
	//		ИсточникДополнительныеРеквизиты.Соединения.Добавить(Источник, "&" + ИмяПараметра + " = " + ПсевдонимТаблицы + ".Свойство");
	//		
	//		Для каждого Соединение Из ИсточникДополнительныеРеквизиты.Соединения Цикл
	//			Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
	//		
	//		КонецЦикла;
	//		
	//		ПолеВыражение = ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".Значение");
	//		ПолеВыражениеИндекс = ОператорыЗапроса.ВыбираемыеПоля.Индекс(ПолеВыражение);
	//		
	//		ЗапросСхемы.Колонки[ПолеВыражениеИндекс].Псевдоним = ИмяПараметра;
	//		
	//		Сч = Сч + 1;
	//		
	//	КонецЦикла;			
	//	
	//КонецЕсли;
	//
	////Виды контактной информации
	//Сч = 1;
	//Если ПараметрыКонтроляОбъекта.Свойство("ВидКонтактнойИнформацииОбъекта") Тогда
	//	ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.ВидКонтактнойИнформацииОбъекта.Количество();
	//	Для каждого ВидКонтактнойИнформацииОбъекта Из ПараметрыКонтроляОбъекта.ВидКонтактнойИнформацииОбъекта Цикл
	//		ПсевдонимТаблицы = "ВидКонтактнойИнформацииОбъекта" + Формат(Сч, "ЧГ=");
	//		ИсточникВидыКонтактнойИнформации = ОператорыЗапроса.Источники.Добавить("ВидКонтактнойИнформацииОбъекта", ПсевдонимТаблицы);
	//		
	//		ИмяПараметра = "Вид" + Формат(Сч, "ЧГ=");
	//		ЗначенияКИ.Вставить(ИмяПараметра, ВидКонтактнойИнформацииОбъекта);
	//		
	//		ИсточникВидыКонтактнойИнформации.Соединения.Очистить();
	//		ИсточникВидыКонтактнойИнформации.Соединения.Добавить(Источник, "ТаблицаОбъектаКонтроля.Ссылка = " + ПсевдонимТаблицы + ".Объект");
	//		ИсточникВидыКонтактнойИнформации.Соединения.Добавить(Источник, "&" + ИмяПараметра + " = " + ПсевдонимТаблицы + ".Вид");
	//		
	//		Для каждого Соединение Из ИсточникВидыКонтактнойИнформации.Соединения Цикл
	//			Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
	//		
	//		КонецЦикла;
	//		
	//		ПолеВыражение = ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".Представление");
	//		ПолеВыражениеИндекс = ОператорыЗапроса.ВыбираемыеПоля.Индекс(ПолеВыражение);
	//		
	//		ЗапросСхемы.Колонки[ПолеВыражениеИндекс].Псевдоним = ИмяПараметра;
	//		
	//		Сч = Сч + 1;
	//		
	//	КонецЦикла;			
	//	
	//КонецЕсли;
	//	
	////Классификаторы
	//Сч = 1;
	//Если ПараметрыКонтроляОбъекта.Свойство("КлассификаторОбъекта") Тогда
	//	ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.КлассификаторОбъекта.Количество();  
	//	Для каждого КлассификаторОбъекта Из ПараметрыКонтроляОбъекта.КлассификаторОбъекта Цикл
	//		ПсевдонимТаблицы = "КлассификаторОбъекта" + Формат(Сч, "ЧГ=");
	//		ИсточникКлассификаторы = ОператорыЗапроса.Источники.Добавить("КлассификаторОбъекта", ПсевдонимТаблицы);
	//		
	//		ИмяПараметра = "Классификатор" + Формат(Сч, "ЧГ=");
	//		ЗначенияКлассификаторы.Вставить(ИмяПараметра, КлассификаторОбъекта);
	//		
	//		ИсточникКлассификаторы.Соединения.Очистить();
	//		ИсточникКлассификаторы.Соединения.Добавить(Источник, "ТаблицаОбъектаКонтроля.Ссылка = " + ПсевдонимТаблицы + ".Объект");
	//		ИсточникКлассификаторы.Соединения.Добавить(Источник, "&" + ИмяПараметра + " = " + ПсевдонимТаблицы + ".Классификатор");
	//		
	//		Для каждого Соединение Из ИсточникКлассификаторы.Соединения Цикл
	//			Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
	//		
	//		КонецЦикла;
	//		
	//		ПолеВыражение = ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".ЗначенийКлассификатора");
	//		ПолеВыражениеИндекс = ОператорыЗапроса.ВыбираемыеПоля.Индекс(ПолеВыражение);
	//		
	//		ЗапросСхемы.Колонки[ПолеВыражениеИндекс].Псевдоним = ИмяПараметра;
	//		
	//		Сч = Сч + 1;
	//		
	//	КонецЦикла;			
	//	
	//КонецЕсли;
	//
	////Виды присоединенных файлов
	//Сч = 1;
	//Если ПараметрыКонтроляОбъекта.Свойство("ВидыПрисоединенныхФайловОбъекта") Тогда
	//	ВсегоРеквизитов = ВсегоРеквизитов + ПараметрыКонтроляОбъекта.ВидыПрисоединенныхФайловОбъекта.Количество();
	//	Для каждого ВидыПрисоединенныхФайловОбъекта Из ПараметрыКонтроляОбъекта.ВидыПрисоединенныхФайловОбъекта Цикл
	//		ПсевдонимТаблицы = "ВидыПрисоединенныхФайловОбъекта" + Формат(Сч, "ЧГ=");
	//		ИсточникВидыПрисоединенныхФайлов = ОператорыЗапроса.Источники.Добавить("ВидыПрисоединенныхФайловОбъекта", ПсевдонимТаблицы);
	//		
	//		ИмяПараметра = "ВидПрисоединенныхФайлов" + Формат(Сч, "ЧГ=");
	//		ЗначенияВидыФайлов.Вставить(ИмяПараметра, ВидыПрисоединенныхФайловОбъекта);
	//		
	//		ИсточникВидыПрисоединенныхФайлов.Соединения.Очистить();
	//		ИсточникВидыПрисоединенныхФайлов.Соединения.Добавить(Источник, "ТаблицаОбъектаКонтроля.Ссылка = " + ПсевдонимТаблицы + ".Объект");
	//		ИсточникВидыПрисоединенныхФайлов.Соединения.Добавить(Источник, "&" + ИмяПараметра + " = " + ПсевдонимТаблицы + ".ВидФайла");
	//		
	//		Для каждого Соединение Из ИсточникВидыПрисоединенныхФайлов.Соединения Цикл
	//			Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
	//		
	//		КонецЦикла;
	//		
	//		ПолеВыражение = ОператорыЗапроса.ВыбираемыеПоля.Добавить(ПсевдонимТаблицы + ".ПрисоединенныхФайлов");
	//		ПолеВыражениеИндекс = ОператорыЗапроса.ВыбираемыеПоля.Индекс(ПолеВыражение);
	//		
	//		ЗапросСхемы.Колонки[ПолеВыражениеИндекс].Псевдоним = ИмяПараметра;
	//		
	//		Сч = Сч + 1;
	//		
	//	КонецЦикла;	
	//	
	//КонецЕсли;		
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	//
	//Для каждого КлючЗначениеПараметра Из ЗначенияОбщие Цикл
	//	Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	//КонецЦикла;
	//
	//Для каждого КлючЗначениеПараметра Из ЗначенияСвойств Цикл
	//	Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	//КонецЦикла;
	//
	//Для каждого КлючЗначениеПараметра Из ЗначенияКИ Цикл
	//	Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	//КонецЦикла;
	//
	//Для каждого КлючЗначениеПараметра Из ЗначенияКлассификаторы Цикл
	//	Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	//КонецЦикла;
	//
	//Для каждого КлючЗначениеПараметра Из ЗначенияВидыФайлов Цикл
	//	Запрос.УстановитьПараметр(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);	
	//КонецЦикла;
	//
	//#КонецОбласти
	//
	//#Область ОбработкаДанныхВыборки
	//	
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	
	//	//Параметры
	//	ЗаполненоРеквизитов = 0;
	//	
	//	//Реквизиты
	//	Если ПараметрыКонтроляОбъекта.Свойство("РеквизитОбъекта") Тогда
	//		Для каждого РеквизитОбъекта Из ПараметрыКонтроляОбъекта.РеквизитОбъекта Цикл
	//			Если ЗначениеЗаполнено(Выборка[РеквизитОбъекта]) Тогда
	//				ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
	//			
	//			КонецЕсли;
	//			
	//		КонецЦикла;	
	//		
	//	КонецЕсли;		

	//	//Табличные части
	//	Если ПараметрыКонтроляОбъекта.Свойство("ТабличнаяЧастьОбъекта") Тогда
	//		Для каждого ТабличнаяЧастьОбъекта Из ПараметрыКонтроляОбъекта.ТабличнаяЧастьОбъекта Цикл
	//			Если Не Выборка[ТабличнаяЧастьОбъекта].Пустой() Тогда
	//				ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
	//			
	//			КонецЕсли;
	//			
	//		КонецЦикла;	
	//		
	//		
	//	КонецЕсли;		

	//	//Дополнительные реквизиты
	//	Если ПараметрыКонтроляОбъекта.Свойство("ДополнительныйРеквизитОбъекта") Тогда
	//		Для каждого КлючЗначение Из ЗначенияСвойств Цикл
	//			Если ЗначениеЗаполнено(Выборка[КлючЗначение.Ключ]) Тогда
	//				ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
	//			
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//	КонецЕсли;	
	//	
	//	//Виды контактной информации
	//	Если ПараметрыКонтроляОбъекта.Свойство("ВидКонтактнойИнформацииОбъекта") Тогда
	//		Для каждого КлючЗначение Из ЗначенияКИ Цикл
	//			Если ЗначениеЗаполнено(Выборка[КлючЗначение.Ключ]) Тогда
	//				ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
	//			
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//	КонецЕсли;	
	//	
	//	//Классификаторы
	//	Если ПараметрыКонтроляОбъекта.Свойство("КлассификаторОбъекта") Тогда
	//		Для каждого КлючЗначение Из ЗначенияКлассификаторы Цикл
	//			Если ЗначениеЗаполнено(Выборка[КлючЗначение.Ключ]) Тогда
	//				ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
	//			
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//	//Виды присоединенных файлов
	//	Если ПараметрыКонтроляОбъекта.Свойство("ВидыПрисоединенныхФайловОбъекта") Тогда
	//		Для каждого КлючЗначение Из ЗначенияВидыФайлов Цикл
	//			Если ЗначениеЗаполнено(Выборка[КлючЗначение.Ключ]) Тогда
	//				ЗаполненоРеквизитов = ЗаполненоРеквизитов + 1;	
	//			
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//	КонецЕсли;		
	//	
	//	ПроцентЗаполненностиОбщий = 100 * ЗаполненоРеквизитов / ВсегоРеквизитов;
	//	СоответствиеОбъектов.Вставить(Выборка.Ссылка,
	//		Новый Структура("ВсегоРеквизитов, ЗаполненоРеквизитов, ПроцентЗаполненностиОбщий", ВсегоРеквизитов, ЗаполненоРеквизитов, ПроцентЗаполненностиОбщий)
	//	);
	//	
	//КонецЦикла;
	//
	//#КонецОбласти
	//<<Бей(22.05.2019 16:51:46):#335
	
	Возврат СоответствиеОбъектов;
	
КонецФункции // ВыполнитьРассчетЗаполнености()

Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала = Неопределено, ИмяСобытия = "", 
		Знач КомментарийСПараметрами = "", ИнформацияОбОшибке = Неопределено, 
		Параметр1 = Неопределено, 
		Параметр2 = Неопределено, 
		Параметр3 = Неопределено, 
		Параметр4 = Неопределено
	) Экспорт
	
	//>>Бей(22.05.2019 16:54:32):#335
	
	
	//// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	//Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
	//	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
	//		УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
	//	ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
	//		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	//	Иначе
	//		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Комментарий для журнала регистрации и пользователя.
	//Если Параметр1 <> Неопределено Тогда
	//	КомментарийСПараметрами = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		КомментарийСПараметрами, Параметр1, Параметр2, Параметр3, Параметр4
	//	);
	//КонецЕсли;
	//
	//Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
	//	Если КомментарийСПараметрами = "" Тогда
	//		ТестСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	//		КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	//	Иначе
	//		ТестСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	//		КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	//	КонецЕсли;
	//Иначе
	//	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
	//		КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
	//	КонецЕсли;
	//	ТестСообщенияПользователю = КомментарийСПараметрами;
	//КонецЕсли;
	//
	//// Журнал регистрации 
	//УстановитьПривилегированныйРежим(Истина);
	//ЗаписьЖурналаРегистрации(
	//	ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", ". "+ ИмяСобытия), 
	//	УровеньЖурнала, 
	//	ПараметрыЖурнала.Метаданные, 
	//	ПараметрыЖурнала.Данные, 
	//	КомментарийСПараметрами
	//);
	//УстановитьПривилегированныйРежим(Ложь);
	//
	//Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
	//	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
	//		ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
	//	Иначе
	//		ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
	//	КонецЕсли;
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = СокрЛП(ТестСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'")
	//	Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
	//	Сообщение.Сообщить();
	//КонецЕсли;
	//
	//<<Бей(22.05.2019 16:54:37):#335
	
КонецПроцедуры
Функция СтруктураЗаполненостиОбъекта(ОбъектСсылка,Аналитика = Неопределено) Экспорт
	
	Результат = Новый Структура("ПроцентЗаполненностиОбщий, Картинка", 0, БиблиотекаКартинок.Пустая);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	Запрос.УстановитьПараметр("Аналитика",Аналитика);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогЗаполненностьРеквизитовОбъектов.Объект КАК Объект,
		|	СУММА(вогЗаполненностьРеквизитовОбъектов.Значение) / СУММА(вогЗаполненностьРеквизитовОбъектов.Показатель.ЦелевоеЗначение) * 100 КАК ПроцентЗаполненностиОбщий
		|ПОМЕСТИТЬ ВремТаб
		|ИЗ
		|	РегистрСведений.вогЗначенияРасчетаПоказателейЗаполненности КАК вогЗаполненностьРеквизитовОбъектов
		|ГДЕ
		|	вогЗаполненностьРеквизитовОбъектов.Объект = &Объект
		| %1
		|СГРУППИРОВАТЬ ПО
		|	вогЗаполненностьРеквизитовОбъектов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремТаб.ПроцентЗаполненностиОбщий КАК ПроцентЗаполненностиОбщий,
		|	ВЫБОР
		|		КОГДА ВремТаб.ПроцентЗаполненностиОбщий<10
		|			ТОГДА ""вогПроцентВыполненияЗадачи_0""
		|		КОГДА ВремТаб.ПроцентЗаполненностиОбщий<20
		|			ТОГДА ""вогПроцентВыполненияЗадачи_10""
		|		КОГДА ВремТаб.ПроцентЗаполненностиОбщий<35
		|			ТОГДА ""вогПроцентВыполненияЗадачи_25""
		|		КОГДА ВремТаб.ПроцентЗаполненностиОбщий<50 
		|			ТОГДА ""вогПроцентВыполненияЗадачи_40""
		|		КОГДА ВремТаб.ПроцентЗаполненностиОбщий<60 
		|			ТОГДА ""вогПроцентВыполненияЗадачи_50""
		|		КОГДА ВремТаб.ПроцентЗаполненностиОбщий<75 
		|			ТОГДА ""вогПроцентВыполненияЗадачи_65""
		|		КОГДА ВремТаб.ПроцентЗаполненностиОбщий<85 
		|			ТОГДА ""вогПроцентВыполненияЗадачи_75""
		|		КОГДА ВремТаб.ПроцентЗаполненностиОбщий<98 
		|			ТОГДА ""вогПроцентВыполненияЗадачи_90""
		|		ИНАЧЕ ""вогПроцентВыполненияЗадачи_100""
		|	КОНЕЦ КАК ИмяКартинки
		|ИЗ
		|	ВремТаб КАК ВремТаб";
	Если ЗначениеЗаполнено(Аналитика) тогда
		Парам1 = " И вогЗаполненностьРеквизитовОбъектов.Аналитика = &Аналитика";
	Иначе
		Парам1 = "";
	КонецЕсли;
	Запрос.Текст = СтрШаблон(Запрос.Текст,Парам1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ПроцентЗаполненностиОбщий = Окр(Выборка.ПроцентЗаполненностиОбщий);		
		Результат.Картинка = БиблиотекаКартинок[Выборка.ИмяКартинки];
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции // СтруктураЗаполненостиОбъекта()

#КонецОбласти

#Область События

Процедура РассчетЗаполненностиРеквизитовОбъектаПриЗаписи(Источник, Отказ) Экспорт

	//>>Бей(22.05.2019 16:52:24):#335
	
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//ПараметрыКонтроля = вогКонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПараметрыКонтроляЗаполненностиРеквизитов();
	//Если ПараметрыКонтроля = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Ключ = Источник.Метаданные().ПолноеИмя();
	//
	////Контроль реквизитов
	//ПараметрыКонтроляОбъекта = ПараметрыКонтроля.ПараметрыКонтроляРеквизитов.Получить(Ключ);
	//Если ПараметрыКонтроляОбъекта <> Неопределено Тогда
	//	Если ПараметрыКонтроляОбъекта.РассчетПриЗаписи Тогда		
	//		ПараметрыВыполнения = Новый Массив;
	//		ПараметрыВыполнения.Добавить(Новый Структура("Ключ, Значение", Ключ, ПараметрыКонтроляОбъекта));
	//		ПараметрыВыполнения.Добавить(Источник.Ссылка);
	//		
	//		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Рассчет заполненности реквизитов объекта ""%1""'"), Источник);
	//		ФоновыеЗадания.Выполнить("вогКонтрольЗаполненностиРеквизитовОбъектов.ВыполнитьРассчетЗаполненостиРеквизитовОбъекта", 
	//			ПараметрыВыполнения,, НаименованиеЗадания);
	//					
	//	КонецЕсли;

	//КонецЕсли;     
	//
	////Контроль реквизитов процессов
	//ПараметрыКонтроляПроцессов = ПараметрыКонтроля.ПараметрыКонтроляПроцесса.Получить(Ключ);
	//Если ПараметрыКонтроляПроцессов <> Неопределено Тогда
	//	Если ПараметрыКонтроляПроцессов.РассчетПриЗаписи Тогда		
	//		ПараметрыВыполнения = Новый Массив;
	//		ПараметрыВыполнения.Добавить(Новый Структура("Ключ, Значение", Ключ, ПараметрыКонтроляПроцессов));
	//		ПараметрыВыполнения.Добавить(Источник.Ссылка);
	//		
	//		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Рассчет заполненности реквизитов процесса объекта ""%1""'"), Источник);
	//		ФоновыеЗадания.Выполнить("вогКонтрольЗаполненностиРеквизитовОбъектов.ВыполнитьРассчетЗаполненостиРеквизитовПроцессаОбъекта", 
	//			ПараметрыВыполнения,, НаименованиеЗадания);
	//					
	//	КонецЕсли;

	//КонецЕсли;  	
	//
	//УстановитьПривилегированныйРежим(Ложь);
	
	//<<Бей(22.05.2019 16:52:31):#335
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиРеквизитовОбъектаПриНачалеОбмена(Источник, 
															СтруктураВозврата, 
															СлужебнаяВыгрузка = Ложь, 
															Отказ) Экспорт

	//>>Бей(22.05.2019 16:52:24):#335

	//Если СлужебнаяВыгрузка Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ВыводСообщений 	= Истина;
	//МассивОшибок 	= Новый Массив;
	//
	//Если СтруктураВозврата.Свойство("ВыводСообщений")
	//	И СтруктураВозврата.ВыводСообщений Тогда
	//	ВыводСообщений = СтруктураВозврата.ВыводСообщений;
	//КонецЕсли;

	//УстановитьПривилегированныйРежим(Истина);
	//
	//ПараметрыКонтроля = Константы.вогПараметрыКонтроляЗаполненностиРеквизитовОбъектов.Получить().Получить();
	//
	//Если ПараметрыКонтроля = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Ключ = Источник.Метаданные().ПолноеИмя();
	//
	//Если ПараметрыКонтроля.Свойство("ПараметрыКонтроляОбмена") Тогда
	//	
	//	ПараметрыКонтроляОбъекта = ПараметрыКонтроля.ПараметрыКонтроляОбмена.Получить(Ключ);
	//	
	//	Если ПараметрыКонтроляОбъекта = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//// ПроверкаЗаполненностиКлассификаторов
	//Если ПараметрыКонтроляОбъекта.Свойство("КлассификаторОбъекта") Тогда
	//	
	//	МассивПроверяемых 					= Новый Массив;
	//	СоответствиеЗначенийКлассификаторов = Новый Соответствие;
	//	
	//	Если ПараметрыКонтроля.Свойство("ПараметрыКонтроляЗначенийКлассификаторов") Тогда
	//		
	//		ПараметрыКонтроляЗначенийКлассификаторов = ПараметрыКонтроля.ПараметрыКонтроляЗначенийКлассификаторов.Получить(Ключ);
	//		
	//		Если ПараметрыКонтроляЗначенийКлассификаторов <> Неопределено
	//			И ПараметрыКонтроляЗначенийКлассификаторов.Свойство("КлассификаторОбъекта") Тогда
	//			
	//			Для Каждого СоответствиеКлассификаторов Из ПараметрыКонтроляЗначенийКлассификаторов.КлассификаторОбъекта Цикл
	//				Для Каждого Элемент Из СоответствиеКлассификаторов Цикл
	//					СоответствиеЗначенийКлассификаторов.Вставить(Элемент.Ключ, ЗначениеИзСтрокиВнутр(Элемент.Значение).Получить());
	//				КонецЦикла;
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Для Каждого Классификатор Из ПараметрыКонтроляОбъекта.КлассификаторОбъекта Цикл
	//		
	//		ПроверяемыеЗначения = СоответствиеЗначенийКлассификаторов.Получить(Классификатор);
	//		
	//		Если ПроверяемыеЗначения <> Неопределено Тогда
	//			
	//			Для Каждого Элемент Из ПроверяемыеЗначения Цикл
	//				МассивПроверяемых.Добавить(Элемент.Ключ);
	//			КонецЦикла;
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//		МассивПроверяемых.Добавить(Классификатор);
	//		
	//	КонецЦикла;
	//	
	//	ПроверитьЗаполненностьКлассификатора(Источник, МассивПроверяемых, МассивОшибок);
	//	
	//КонецЕсли;
	//	
	//// ПроверкаЗаполненностиРеквизитовОбъекта
	//Если ПараметрыКонтроляОбъекта.Свойство("РеквизитОбъекта") Тогда
	//	Для Каждого РеквизитОбъекта Из ПараметрыКонтроляОбъекта.РеквизитОбъекта Цикл
	//		Если Не ЗначениеЗаполнено(Источник[РеквизитОбъекта]) Тогда
	//			МассивОшибок.Добавить(РеквизитОбъекта);	
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;

	//Для Каждого НезаполненныйРеквизит Из МассивОшибок Цикл
	//	
	//	СтруктураВозврата.ТекстПояснения 	= НСтр("ru = 'Заполнены не все реквизиты объекта!'");
	//	Если СтруктураВозврата.Свойство("Состояние") Тогда
	//		СтруктураВозврата.Состояние 	= Перечисления.вогСостоянияОбмена.ОшибкаПроверки;
	//	КонецЕсли;
	//	
	//	Если ВыводСообщений Тогда
	//		ШаблонСообщения = НСтр("ru = 'Не заполнено значение ""%1""!'");
	//		ТекстСообщения = СтрШаблон(ШаблонСообщения, НезаполненныйРеквизит);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	КонецЕсли;
	//	
	//	Отказ = Истина;
	//	
	//КонецЦикла;
	//
	//УстановитьПривилегированныйРежим(Ложь);
	
	//<<Бей(22.05.2019 16:52:31):#335
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьКлассификатора(Источник, МассивПроверяемых, МассивОшибок)
	
	//>>Бей(22.05.2019 16:52:24):#335

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
	//	|ПОМЕСТИТЬ ВТ_Проверяемые
	//	|ИЗ
	//	|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
	//	|ГДЕ
	//	|	CRM_ЗначенияКлассификаторов.Ссылка В(&МассивПроверяемых)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Проверяемые.Ссылка КАК Ссылка,
	//	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	//	|ПОМЕСТИТЬ ВТ_Заполненные
	//	|ИЗ
	//	|	ВТ_Проверяемые КАК ВТ_Проверяемые
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	//	|		ПО ВТ_Проверяемые.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	//	|			И (CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Заполненные.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	ВТ_Заполненные КАК ВТ_Заполненные
	//	|ГДЕ
	//	|	ВТ_Заполненные.ЗначениеКлассификатора ЕСТЬ NULL";
	//
	//Запрос.УстановитьПараметр("Объект", 			Источник);
	//Запрос.УстановитьПараметр("МассивПроверяемых", 	МассивПроверяемых);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	МассивОшибок.Добавить(Выборка.Ссылка);
	//КонецЦикла;
	
	//<<Бей(22.05.2019 16:52:31):#335
	
КонецПроцедуры

#КонецОбласти

