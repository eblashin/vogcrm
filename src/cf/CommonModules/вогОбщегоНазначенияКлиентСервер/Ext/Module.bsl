
#Область ПрограммныйИнтерфейс

#Область Документ_РаспределениеЗадач

Функция РаспределениеЗадач_РежимРаботыОднаЗадача(Представление = Неопределено) Экспорт
	
	Представление = НСтр("ru = 'Одна задача'"); 
	Возврат 1; 
	
КонецФункции

Функция РаспределениеЗадач_РежимРаботыРазныеЗадачи(Представление = Неопределено) Экспорт
	
	Представление = НСтр("ru = 'Разные задачи'"); 
	Возврат 0; 
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции 

Функция РассчитатьНачалоПериода(КонецПериода, Интервал, Периодичность) Экспорт

	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда		
		Возврат ДобавитьМесяц(КонецПериода, 12 * -Интервал);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда		
		Возврат  ДобавитьМесяц(КонецПериода, 6 * -Интервал);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда		
		Возврат ДобавитьМесяц(КонецПериода, 3 * -Интервал);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда		
		Возврат ДобавитьМесяц(КонецПериода, -Интервал);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда		
		 Возврат КонецПериода + 3600 * 24 * 10 * -Интервал;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда		
		Возврат КонецПериода + 3600 * 24 * 7 * -Интервал;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда		
		Возврат КонецПериода  + 3600 * 24 * -Интервал;
		
	Иначе
		Возврат КонецПериода;
		
	КонецЕсли;

КонецФункции // РассчитатьНачалоПериода()

Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
КонецФункции

Функция РазностьДат(ДатаНачала, ДатаОкончания, Периодичность) Экспорт
	
	СекундВМинуте = 60;
	МинутВЧасе = 60;
	ЧасовВДне = 24;
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Возврат Год(ДатаОкончания) - Год(ДатаНачала);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Возврат ?(Месяц(ДатаОкончания)>6, 2, 1) - ?(Месяц(ДатаНачала)>6, 2, 1) + 2*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Возврат Цел(Месяц(НачалоКвартала(ДатаОкончания))/3) - Цел(Месяц(НачалоКвартала(ДатаНачала))/3) + 4*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Возврат Месяц(ДатаОкончания) - Месяц(ДатаНачала) + 12*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		Возврат Цел((ДатаОкончания - ДатаНачала)/(10 * СекундВМинуте*МинутВЧасе*ЧасовВДне));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Возврат Цел((НачалоНедели(ДатаОкончания) - НачалоНедели(ДатаНачала))/(7 * СекундВМинуте*МинутВЧасе*ЧасовВДне));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Возврат (ДатаОкончания - ДатаНачала)/(СекундВМинуте*МинутВЧасе*ЧасовВДне);
		
	КонецЕсли;
	
КонецФункции

// ++ VOG Солодов В.В. 14.10.2021 CRM-1246

// Определяет год планирования продаж в зависимости от текущей даты.
//
Функция ПолучитьГодПланирования(ПолнаяДата = Ложь) Экспорт
	
	ТекущаяДата 	= ТекущаяДата();
	ГодПланирования = Год(ТекущаяДата);
	
	Если Месяц(ТекущаяДата) > 6 Тогда
		ГодПланирования = ГодПланирования + 1;
	КонецЕсли;
	
	Если ПолнаяДата Тогда
		Возврат Дата(ГодПланирования, 1, 1);
	Иначе
		Возврат ГодПланирования;
	КонецЕсли;
	
КонецФункции // -- VOG Солодов В.В. 14.10.2021 CRM-1246

#Область РаботаСПериодамиИДатами

Функция ДатаСоСмещением(Дата, Периодичность, ЧислоПериодов, НеделяДекадаСПервогоДня = Истина) Экспорт
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Возврат ДобавитьМесяц(Дата, 12 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Возврат ДобавитьМесяц(Дата, 6 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Возврат ДобавитьМесяц(Дата, 3 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Возврат ДобавитьМесяц(Дата, ЧислоПериодов);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		Если НеделяДекадаСПервогоДня Тогда
			Возврат ДатаСоСмещениемДляДекады(Дата, ЧислоПериодов);
		Иначе
			Возврат Дата + 3600 * 24 * 10 * ЧислоПериодов;
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Если НеделяДекадаСПервогоДня Тогда
 			Возврат НачалоНедели(Дата + 3600 * 24 * 7 * ЧислоПериодов);
		Иначе
			Возврат Дата + 3600 * 24 * 7 * ЧислоПериодов;
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Возврат Дата  + 3600 * 24 * ЧислоПериодов;
		
	Иначе 
		Возврат Дата;
		
	КонецЕсли;
	
КонецФункции

Функция ДатаСоСмещениемДляДекады(Знач РасчетнаяДата, Знач Смещение)
	
	// анализируем
	ГодДатыНачала						= Год(РасчетнаяДата);
	МесяцДатыНачала						= Месяц(РасчетнаяДата);
	ДеньДатыНачала						= День(РасчетнаяДата);
	ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
	ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
	НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
	
	// изменяем
	НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
	
	// синтезируем
	ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
	ДекадаВГоду							= НомерДекадыНЭ % 36;
	МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
	ДекадаВМесяце						= ДекадаВГоду % 3;
	ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
	
	Возврат Дата(ГодДатыНачалаОтнПериода, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПоискДублейОбъектов

Функция СоздатьСтруктуруПоиска(Объект) Экспорт
	
	СтруктураПоиска = Новый Структура;
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		Если ЗначениеЗаполнено(Объект.Рынок) Тогда
			МассивПолей = Новый Массив;
			МассивПолей.Добавить(Новый Структура("Рынок", "="));
			МассивПолей.Добавить(Новый Структура("МестоположениеНаРынке", "ПОДОБНО"));
			СтруктураПоиска.Вставить("СоставноеУсловие", МассивПолей);
		Иначе	
			СтруктураПоиска.Вставить("Контакт_Адрес", "ПОДОБНО");
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда	
		СтруктураПоиска.Вставить("CRM_ИНН", "=");
		СтруктураПоиска.Вставить("СвидетельствоНомер", "=");
		СтруктураПоиска.Вставить("СвидетельствоСерия", "=");
		СтруктураПоиска.Вставить("ПредставлениеСерияНомер","ПОДОБНО");
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.вогРынки") Тогда
		СтруктураПоиска.Вставить("Контакт_Адрес", "ПОДОБНО");
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда	
		СтруктураПоиска.Вставить("Наименование", "ПОДОБНО");
		СтруктураПоиска.Вставить("Контакт_Адрес", "ПОДОБНО");
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		МассивПолей = Новый Массив;
		МассивПолей.Добавить(Новый Структура("CRM_Фамилия", "ПОДОБНО"));
		МассивПолей.Добавить(Новый Структура("CRM_Имя", "ПОДОБНО"));
		МассивПолей.Добавить(Новый Структура("CRM_Отчество", "ПОДОБНО"));
		СтруктураПоиска.Вставить("СоставноеУсловие", МассивПолей);
	КонецЕсли;
	
	Возврат СтруктураПоиска;

КонецФункции // СоздатьСтруктуруПоиска()

Функция ЗаполнитьСтруктуруКонтактовОбъекта(Форма) Экспорт
	
	СтруктураКонтактов = Новый Структура;
	
	Объект = Форма.Объект;
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		СоответствиеКлючейПоиска = вогОбщегоНазначенияКлиентСерверПовтИсп.СоответствиеКлючейПоискаКонтактов();
		
		Для Каждого СтрокаОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Представление = Форма[СтрокаОписания.ИмяРеквизита];
			Если ПустаяСтрока(Представление) Тогда
				Продолжить;
			КонецЕсли;
			
			КлючПоиска = СоответствиеКлючейПоиска.Получить(СтрокаОписания.Тип);
			Если КлючПоиска = Неопределено Тогда
				Продолжить;			
			
			КонецЕсли;
			
			СтруктураКонтактов.Вставить(КлючПоиска, Представление);
					
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда	
		СтруктураКонтактов.Вставить("CRM_ИНН", Объект.CRM_ИНН);
		
	КонецЕсли;
	
	Возврат СтруктураКонтактов;
	
КонецФункции // ЗаполнитьТаблицуКонтактовОбъекта()

#КонецОбласти

#Область Прочее

Функция ПолучитьЗаголовокНоменклатурыКоллекций(Параметры) Экспорт
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
		?(Параметры.Номенклатура, НСтр("ru = 'номенклатура'"), ""),
		?(Параметры.Номенклатура И Параметры.Коллекции, НСтр("ru = ' / '"), ""),
		?(Параметры.Коллекции, НСтр("ru = 'коллекции'"), "")
	);
	
	Возврат ВРег(Лев(Результат, 1)) + Сред(Результат, 2);
	
КонецФункции // ПолучитьЗаголовокНоменклатурыКоллекций()

// Функция определяет пол человека по его имени.Скопировано CRM_КлиентыКлиент
//
// Параметры:
//  Имя	– Строка	– Имя, по последней букве которого пытаемся определить пол.
//
// Возвращаемое значение:
//  ПеречислениеСсылка	– Пол человека, определенный по его имени.
//
Функция ОпределитьПол(Имя) Экспорт // ++ Тищенко В.В.
	СписокМужскихИсключений = Новый СписокЗначений;
	СписокМужскихИсключений.Добавить("ИЛЬЯ");
	СписокМужскихИсключений.Добавить("НИКОЛА");
	СписокМужскихИсключений.Добавить("САВВА");
	СписокМужскихИсключений.Добавить("КУЗЬМА");
	СписокМужскихИсключений.Добавить("НИКИТА");
	СписокМужскихИсключений.Добавить("ДАНИЛА");
	СписокМужскихИсключений.Добавить("ЕМЕЛЯ");
	СписокЖенскихИсключений = Новый СписокЗначений;
	СписокЖенскихИсключений.Добавить("ЛЮБОВЬ");
	Окончание = ВРег(Прав(СокрП(Имя),1));
	Если (Найти("АЯ",Окончание) И СписокМужскихИсключений.НайтиПоЗначению(ВРег(Имя)) = Неопределено) Или
		СписокЖенскихИсключений.НайтиПоЗначению(ВРег(Имя)) <> Неопределено Тогда // Вероятно женщина
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	Иначе
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	КонецЕсли; 
	Возврат Пол;
КонецФункции // -- Тищенко В.В. 


//+++ Кайдашов
// Возвращает текстовое представление единицы измерения в правильном склонении и числе
//
// Параметры
//  Число - Число - любое целое число.
//	ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном
//										   падеже для одной, для двух и для пяти единиц, разделитель
//										   - запятая. Пример: "минуту,минуты,минут".
//
// Возвращаемое значение
//  Строка - текстовое представление единицы измерения.
//
Функция ПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = "";
	
	МассивПредставлений = Новый Массив;
	
	Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл
		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));
		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);
		МассивПредставлений.Добавить(Значение);
		Позиция = Найти(ПараметрыПредметаИсчисления, ",");
	КонецЦикла;
	
	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;	
	
	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;
	
	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;
	
	Если Число = 1 Тогда
		Результат = МассивПредставлений[0];
	ИначеЕсли Число > 1 И Число < 5 Тогда
		Результат = МассивПредставлений[1];
	Иначе
		Результат = МассивПредставлений[2];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//--- Кайдашов

//Кайдашов добавил из глобального модуля Документооборота


// Процедура ДобавитьЗначениеКСтрокеЧерезРазделитель добавляет
// к Строке Разделитель и ДобавляемоеЗначение в случае, если Строка и
// ДобавляемоеЗначение не пустые. Если Строка пустая или ДобавляемоеЗначение
// не заполено, то добавляет к Строке ДобавляемоеЗначение.
// 
// Параметры:
// Строка (Строка или любое значение, приводимое к строке). Модифицируется в процедуре.
// Разделитель (Строка или любое значение, приводимое к строке). 
// ДобавляемоеЗначение (Строка или любое значение, приводимое к строке).
//
Процедура ДобавитьЗначениеКСтрокеЧерезРазделитель(Строка, Разделитель, ДобавляемоеЗначение) Экспорт
	Если ПустаяСтрока(Строка) Тогда
		Строка = Строка(ДобавляемоеЗначение);
	ИначеЕсли Не ПустаяСтрока(ДобавляемоеЗначение) Тогда
		Строка = Строка(Строка) + Разделитель + ДобавляемоеЗначение;
	КонецЕсли;
КонецПроцедуры

// Заключает в кавычки строку
// Параметры:
// Строка (Строка или любое значение, приводимое к строке).
Функция ВКавычках(Знач Строка, Знач Кавычка = Неопределено, Знач ВтораяКавычка = Неопределено) Экспорт
	
	Если Кавычка = Неопределено Тогда
		Кавычка = """";
	КонецЕсли;
	Если ВтораяКавычка = Неопределено Тогда
		ВтораяКавычка = Кавычка;
	КонецЕсли;
	
	Возврат Кавычка + Строка + ВтораяКавычка;
	
КонецФункции

// Возвращает пустой уникальный идентификатор
Функция УникальныйИдентификаторПустой() Экспорт
	
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
КонецФункции

// Формирует представление исполнителя строкой.
//
// Параметры:
//  Исполнитель - СправочникСсылка.РолиИсполнителей, СправочникСсылка.Пользователи - Исполнитель.
//  ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - Основной объект адресации.
//  ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - Дополнительный объект адресации.
// 
// Возвращаемое значение:
//  Строка - Представление исполнителя.
//
Функция ПредставлениеИсполнителяСтрокой(Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации) Экспорт
	
	Представление = "";
	
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) И ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда 
		Представление = СтрШаблон(
			"%1 (%2, %3)",
			Исполнитель,
			ОсновнойОбъектАдресации,
			ДополнительныйОбъектАдресации);
	ИначеЕсли ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда 
		Представление = СтрШаблон(
			"%1 (%2)",
			Исполнитель,
			ОсновнойОбъектАдресации);
	Иначе
		Представление = Строка(Исполнитель);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции


#КонецОбласти

#КонецОбласти

//START Кайдашов 05/08/19 486
// Возвращает роль "Участник" участника мероприятия.
//
// Возвращаемое значение:
//  СправочникСсылка - ссылка на справочник вогРолиУчастникаМероприятий.
//
Функция ПолучитьРольУчастникМероприятия() Экспорт
	
	Возврат вогОбщегоНазначенияВызовСервера.ПолучитьРольУчастникМероприятияНаСервере();
	
КонецФункции

//END Кайдашов 486

// +++ VOG Кулаков П.Л. 16.07.2020 CRM-776
// Заменаяем в исходной строке строку поиска на выбранную строку
// Для Использования в отчете План по командировкам
//
// Параметры:
//  ИсходнаяСтрока	 - Строка - строка где будет производится замена
//  СтрокаПоиска	 - Строка - строка которую нужно заменить
//  СтрокЗамены		 - Строка - строка на которую нужно заменить
// 
// Возвращаемое значение:
// Строка - измененная строка
//
Функция ЗаменитьПодстрокуВСтроке(Знач ИсходнаяСтрока, Знач СтрокаПоиска, Знач СтрокаЗамены) Экспорт
	
	Результат = СтрЗаменить(ИсходнаяСтрока, СтрокаПоиска, СтрокаЗамены);
	Результат = СтрЗаменить(Результат, ";", Символы.ПС);
	Возврат СокрЛП(Результат);
	
КонецФункции
// --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
// Процедура устанавливает видимость кнопок согласования на основе существующей задачи по объекту.

// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
&НаСервере
Функция ПолучитьСписокЗадачПоДокументу(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогИсполнителиРолейИДелегаты.РольПользователь КАК РольПользователь
		|ПОМЕСТИТЬ вт_Делегирование
		|ИЗ
		|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|ГДЕ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &Исполнитель
		|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.)
		|				ИЛИ ЗадачаИсполнителя.Исполнитель ЕСТЬ NULL
		|			ТОГДА ЗадачаИсполнителя.РольИсполнителя
		|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.БизнесПроцесс.Предмет КАК Командировка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен
		|	И ЗадачаИсполнителя.БизнесПроцесс.Предмет = &Документ
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И (ЗадачаИсполнителя.Исполнитель = &Исполнитель
		|			ИЛИ ЗадачаИсполнителя.РольИсполнителя В (&РолиПользователя)
		|			ИЛИ ЗадачаИсполнителя.Исполнитель В
		|				(ВЫБРАТЬ
		|					вт_Делегирование.РольПользователь КАК РольПользователь
		|				ИЗ
		|					вт_Делегирование КАК вт_Делегирование))";
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("РолиПользователя", РолиПользователя);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаСервере
Процедура УстановитьПодсказкуКнопкиОткрытьЗадачу(Форма) Экспорт
	
	// ++ VOG Солодов В.В. 28.01.2021 DEV-116
 	Если Форма.Объект.Свойство("ВариантОпроса") Тогда
		
		ТекущееСостояниеПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Форма.Объект.ВариантОпроса,
			"СостояниеПроцессов",
			Истина);
			
		ПрямоеСогласование = Справочники.вогСостояниеПроцессов.НайтиПоКоду("00000000002", Истина);
		
		Если ТекущееСостояниеПроцесса = ПрямоеСогласование Тогда
			Форма.Элементы.ФормаОткрытьТекущуюЗадачу.Видимость = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 28.01.2021 DEV-116
	
	КомандаОткрытьЗадачу = Форма.Команды.Найти("ОткрытьТекущуюЗадачу");
	Если Форма.Параметры.Свойство("ВыполненнаяЗадача") И ЗначениеЗаполнено(Форма.Параметры.ВыполненнаяЗадача) Тогда
		КомандаОткрытьЗадачу.Подсказка = Форма.Параметры.ВыполненнаяЗадача.Наименование;
		Форма.ТекущаяЗадача = Форма.Параметры.ВыполненнаяЗадача;
		Форма.Элементы.ФормаОткрытьТекущуюЗадачу.Видимость = Истина;
	Иначе
		ДанныеЗаполнения = ПолучитьНаименованиеЗадачиПоПредемету(Форма.Объект.Ссылка);
		// +++ VOG Кулаков П.Л. 18.12.2020 DEV-8
		Если ДанныеЗаполнения = Неопределено Тогда
			Форма.Элементы.ФормаОткрытьТекущуюЗадачу.Видимость = Ложь;
		Иначе
			Форма.Элементы.ФормаОткрытьТекущуюЗадачу.Видимость = Истина;
			КомандаОткрытьЗадачу.Подсказка = ДанныеЗаполнения.Наименование;
			Форма.ТекущаяЗадача = ДанныеЗаполнения.Задача;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаСервере
Функция ПолучитьНаименованиеЗадачиПоПредемету(Предмет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// +++ VOG Кулаков П.Л. 13.01.2021 DEV-77
	
	//Начало БлашинЕ оптимизация производительности (29.03.2021)
	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогИсполнителиРолейИДелегаты.РольПользователь КАК РольПользователь
		|ПОМЕСТИТЬ вт_Делегирование
		|ИЗ
		|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|ГДЕ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &Исполнитель
		|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ вт_БизнесПроцессыПоПредмету
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.Предмет = &Предмет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Задание.Ссылка
		|ИЗ
		|	БизнесПроцесс.Задание КАК Задание
		|ГДЕ
		|	Задание.Предмет = &Предмет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Наименование КАК Наименование,
		|	ЗадачаИсполнителя.Выполнена КАК Выполнена
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_БизнесПроцессыПоПредмету КАК вт_БизнесПроцессыПоПредмету
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = вт_БизнесПроцессыПоПредмету.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Делегирование КАК вт_Делегирование
		|		ПО ЗадачаИсполнителя.Исполнитель = вт_Делегирование.РольПользователь
		|ГДЕ
		|	(ЗадачаИсполнителя.Исполнитель = &Исполнитель
		|			ИЛИ ЗадачаИсполнителя.РольИсполнителя В (&РолиПользователя)
		|			ИЛИ НЕ вт_Делегирование.РольПользователь ЕСТЬ NULL)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ
		|ИТОГИ ПО
		|	БизнесПроцесс";
	
	//Окончание БлашинЕ  оптимизация производительности (29.03.2021)

	// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("РолиПользователя", РолиПользователя);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Структура = Новый Структура("Наименование,Задача");
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 18.12.2020 DEV-8
	ВыборкаБизнесПроцесс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаБизнесПроцесс.Количество() > 1 Тогда
		Структура.Наименование = "Посмотреть задачи";
		Структура.Задача = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	Иначе
		Если ВыборкаБизнесПроцесс.Следующий() Тогда
			ВыборкаДетальныеЗаписи = ВыборкаБизнесПроцесс.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Выполнена Тогда
					Прервать;
				КонецЕсли;
				Структура.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Структура.Задача = ВыборкаДетальныеЗаписи.Задача;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Возврат Структура;
	
КонецФункции

// +++ VOG Кулаков П.Л. 28.10.2020 CRM-999
&НаКлиенте
Процедура УстановитьКнопкиСогласования(Форма) Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("Элемент_Статус5") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Форма.Элементы.Согласовать1.Видимость = Ложь;
	Форма.Элементы.Согласовать2.Видимость = Ложь;
	Форма.Элементы.Согласовать3.Видимость = Ложь;
	//Форма.Элементы.ФормаОткрытьТекущуюЗадачу.Видимость = Ложь;
	
	МассивВариантов = вогОбщегоНазначенияВызовСервера.ПолучитьМассивВариантовВыполненияЗадачиПоСсылке(Форма.Объект.Ссылка);
	
	Для Индекс = 1 По МассивВариантов.Количество() Цикл
		Форма.Элементы["Согласовать" + Индекс].Заголовок = МассивВариантов[Индекс-1];
		Форма.Элементы["Согласовать" + Индекс].Видимость = Истина;
	КонецЦикла;
	
	// +++ VOG Кулаков П.Л. 18.12.2020 DEV-8
	//Если ЗначениеЗаполнено(Форма.ТекущаяЗадача) Тогда 
	//	Форма.Элементы.ФормаОткрытьТекущуюЗадачу.Видимость = Истина;
	//КонецЕсли;
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 28.10.2020 CRM-999
&НаСервере
Процедура УстановитьКнопкиСогласованияНаСервере(Форма) Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("Элемент_Статус5") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Форма.Элементы.Согласовать1.Видимость = Ложь;
	Форма.Элементы.Согласовать2.Видимость = Ложь;
	Форма.Элементы.Согласовать3.Видимость = Ложь;
	//Форма.Элементы.ФормаОткрытьТекущуюЗадачу.Видимость = Ложь;
	
	МассивВариантов = вогОбщегоНазначенияВызовСервера.ПолучитьМассивВариантовВыполненияЗадачиПоСсылке(Форма.Объект.Ссылка);
	
	Для Индекс = 1 По МассивВариантов.Количество() Цикл
		Форма.Элементы["Согласовать" + Индекс].Заголовок = МассивВариантов[Индекс-1];
		Форма.Элементы["Согласовать" + Индекс].Видимость = Истина;
	КонецЦикла;
	
	//Если ЗначениеЗаполнено(Форма.ТекущаяЗадача) Тогда 
	//	Форма.Элементы.ФормаОткрытьТекущуюЗадачу.Видимость = Истина;
	//КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// ++ VOG Солодов В.В. 15.01.2021 DEV-67

// Устанавливает значение свойства элемента формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента.
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = НРег("ТолькоПросмотр")
	И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = НРег("РасширеннаяПодсказка") Тогда
		Элемент.РасширеннаяПодсказка.Заголовок = Значение;
	Иначе
		Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
			Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("УправляемаяФорма, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
 	КонецЕсли;
 	
КонецПроцедуры // УстановитьСвойствоЭлементаФорма()

// Устанавливает значение свойства элементов формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы  - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов - Массив, Строка, Структура - имена искомых элементов.
//  ИмяСвойства    - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение       - Произвольный - значение, которое будет установлено
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомых элементов.
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
		КонецЦикла
		
	Иначе
		
		Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
			СтруктураИменЭлементов = Новый Структура(ИменаЭлементов);
		Иначе
			СтруктураИменЭлементов = ИменаЭлементов;
		КонецЕсли;
		
		Для Каждого ИмяЭлемента Из СтруктураИменЭлементов Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента.Ключ, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойствоЭлементовФормы()

// -- VOG Солодов В.В. 15.01.2021 DEV-67

// +++ VOG Кулаков П.Л. 04.02.2021 DEV-79
// Показывает/скрывает кнопку очистки, если значение отбора заполнено/не заполнено.
//
// Параметры:
//   Поле     - ПолеФормы - элемент формы, в котором будет включена/выключена кнопка очистки.
//   Значение - ЛюбаяСсылка - значение отбора.
//   ЗначениеПоУмолчанию - ЛюбаяСсылка - значение по умолчанию, на которое не нужно накладывать оформление.
//
Процедура ПоказатьСкрытьКнопкуОчисткиОтбора(Поле, Значение, ЗначениеПоУмолчанию = "") Экспорт
	
	Если ТипЗнч(Поле) <> Тип("ПолеФормы") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		Если Не ЗначениеЗаполнено(ЗначениеПоУмолчанию)
			Или (ЗначениеЗаполнено(ЗначениеПоУмолчанию) И Значение <> ЗначениеПоУмолчанию) Тогда 
			Поле.КнопкаОчистки = Истина;
			#Если Клиент Тогда
				Поле.ЦветФона = ОбщегоНазначенияКлиент.ЦветСтиля("ФонУправляющегоПоля");
			#Иначе
				Поле.ЦветФона = ЦветаСтиля["ФонУправляющегоПоля"];
			#КонецЕсли
		Иначе 
			Поле.КнопкаОчистки = Ложь;
			Поле.ЦветФона = Новый Цвет();
		КонецЕсли;
	Иначе 
		Поле.КнопкаОчистки = Ложь;
		Поле.ЦветФона = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.