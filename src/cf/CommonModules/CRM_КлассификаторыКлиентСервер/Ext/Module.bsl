
#Область ПрограммныйИнтерфейс

Процедура НайтиИзменитьСтрокиКлассификаторов(Форма, КлючСтроки, Включен) Экспорт
	
	СтрокиКлассификатора = НайтиСтрокиКлассификаторов(Форма, Новый Структура("КлючСтроки", КлючСтроки));	
	Для каждого СтрокаКлассификатора Из СтрокиКлассификатора Цикл
		Если ЗначениеЗаполнено(СтрокаКлассификатора.ДополнительныйРеквизит) Тогда
			ЗначениеРеквизита = Форма[КлючСтроки];
			
			УстановитьЗначениеДополнительногоРеквизита(Форма, СтрокаКлассификатора.ДополнительныйРеквизит, ЗначениеРеквизита);
			
			СтрокаКлассификатора.Включен 		   = ЗначениеЗаполнено(ЗначениеРеквизита);	
			СтрокаКлассификатора.ЗначениеРеквизита = ЗначениеРеквизита;	
			
		Иначе
			СтрокаКлассификатора.Включен = Включен;	
			
		КонецЕсли;
		
		//*** Описание
		//*** 18 июня 2019 г.
		//*** Блашин Евгений Игоревич VOG Начало
		СтрокаКлассификатора.ОтветПолучен = Истина;
		//*** Блашин Евгений Игоревич VOG Окончание
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура НайтиИзменитьСтрокиКлассификаторовПоЗначению(Форма, Значение, Включен) Экспорт
	
	СтрокиКлассификатора = НайтиСтрокиКлассификаторов(Форма, Новый Структура("Значение", Значение));	
	Для каждого СтрокаКлассификатора Из СтрокиКлассификатора Цикл
		СтрокаКлассификатора.Включен = Включен;	
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура НайтиИзменитьСтрокиКлассификаторовПакетно(Форма, КлючКлассификатора) Экспорт
	
	СтрокиКлассификатора = НайтиСтрокиКлассификаторов(Форма, Новый Структура("КлючКлассификатора", КлючКлассификатора));	
	Для каждого СтрокаКлассификатора Из СтрокиКлассификатора Цикл
		Если СтрокаКлассификатора.Значение = Форма[КлючКлассификатора] Тогда
			СтрокаКлассификатора.Включен = Истина;	
		Иначе	
			СтрокаКлассификатора.Включен = Ложь;	
		КонецЕсли;
		
		//*** Описание
		//*** 18 июня 2019 г.
		//*** Блашин Евгений Игоревич VOG Начало
		СтрокаКлассификатора.ОтветПолучен = Истина;
		//*** Блашин Евгений Игоревич VOG Окончание 
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Функция НайтиСтрокиКлассификаторов(Форма, СтруктураПоиска)
	
	Возврат Форма.CRM_ТаблицаКлассификаторов.НайтиСтроки(СтруктураПоиска);	
	
КонецФункции

Процедура ОбработкаНавигационнойСсылкиТегаКлассификаторов(Форма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	НайтиИзменитьСтрокиКлассификаторов(Форма, Элемент.Имя, Ложь);	
	
	Форма.Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции 

Процедура УстановитьЗначениеДополнительногоРеквизита(Форма, Реквизит, Значение)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Свойство", Реквизит);
	
	ПоискСтрокРеквизита = Форма.Объект.ДополнительныеРеквизитыРеспондента.НайтиСтроки(СтруктураПоиска);
		
	Если ПоискСтрокРеквизита.Количество() Тогда
		
		ПоискСтрокРеквизита.Получить(0).Значение = Значение;
		
	Иначе 
		
		НоваяСтрока = Форма.Объект.ДополнительныеРеквизитыРеспондента.Добавить();
		НоваяСтрока.Свойство = Реквизит;
		НоваяСтрока.Значение = Значение;
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСПериодамиИДатами

Функция РассчитатьНачалоПериода(КонецПериода, Интервал, Периодичность) Экспорт
	Возврат вогОбщегоНазначенияКлиентСервер.РассчитатьНачалоПериода(КонецПериода, Интервал, Периодичность);
КонецФункции // РассчитатьНачалоПериода()

#КонецОбласти

#Область СКД

Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	Возврат вогОбщегоНазначенияКлиентСервер.ПолучитьПараметр(Настройки, Параметр);
КонецФункции

#КонецОбласти

#КонецОбласти