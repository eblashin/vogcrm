////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ СО СПРАВОЧНИКОМ ПАРТНЕРЫ

Функция ПолучитьНаборыСвойствДляПартнеров(ВидПартнера) Экспорт
	Наборы = Новый СписокЗначений;
	Наборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие, НСтр("ru = 'Общие для всех партнеров'"));
	Если ВидПартнера = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		Наборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Компании_CRM,    НСтр("ru = 'Для компаний'"));
	//+вог
	//ИначеЕсли ВидПартнера = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
	//	Наборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_ЧастныеЛица_CRM, НСтр("ru = 'Для частных лиц'"));
	//-вог
	КонецЕсли;
	Возврат Наборы;
КонецФункции // ПолучитьНаборыСвойствДляПартнеров()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ СО СПРАВОЧНИКОМ ПАРТНЕРЫ

Функция ПолучитьНаборыСвойствНоменклатуры(НоменклатурнаяГруппа = Неопределено) Экспорт
	Наборы = Новый СписокЗначений;
	Наборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура, НСтр("ru = 'Общие для номенклатуры'"));
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Наборы.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатурнаяГруппа, "НаборСвойствХарактеристики"), НСтр("ru = 'Для номенклатурной группы'"));
	КонецЕсли;
	Возврат Наборы;
КонецФункции // ПолучитьНаборыСвойствДляПартнеров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ CRM

// Скопировать нужные строки из сформированного дерева значений свойств в другое дерево.
//
Процедура СкопироватьДеревоЗначенийСтрок(СтрокиКуда, СтрокиОткуда, Родитель)

	Для Каждого Стр Из СтрокиОткуда Цикл
		Если Стр.Свойство = Родитель Тогда
			СкопироватьДеревоЗначенийСтрок(СтрокиКуда, Стр.Строки, Стр.Свойство);
		Иначе
			новСтр = СтрокиКуда.Добавить();
			ЗаполнитьЗначенияСвойств(новСтр, Стр);
			СкопироватьДеревоЗначенийСтрок(новСтр.Строки, Стр.Строки, Стр.Свойство);
		КонецЕсли;

		СтрокиКуда.Сортировать("ЭтоГруппа УБЫВ");
	КонецЦикла;

КонецПроцедуры // СкопироватьДеревоЗначенийСтрок()

// Сформировать дерево значений свойств для редактирования в форме объекта.
//
Функция ПолучитьДеревоДляРедактированияЗначенийСвойств(спсНаборов, табСвойств, ДляДопРеквизитов)
	спсВыбраны = Новый СписокЗначений;
	Для Каждого Стр Из табСвойств Цикл
		Если спсНаборов.НайтиПоЗначению(Стр.Свойство) = Неопределено Тогда
			спсВыбраны.Добавить(Стр.Свойство);
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначенияСвойства,
	|	Ложь КАК ЭтоГруппа,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства КАК ФорматСвойства,
	|	Свойства.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Свойства.Ошибка
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НаборыСвойствСостав.Свойство КАК Свойство,
	|			ЛОЖЬ КАК Ошибка,
	|			НаборыСвойствСостав.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствСостав
	|		ГДЕ
	|			НаборыСвойствСостав.Ссылка В(&спсНаборов)
	|			И НаборыСвойствСостав.Свойство.ЭтоДополнительноеСведение = &ЭтоДополнительноеСведение
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка,
	|			ИСТИНА,
	|			НаборыСвойствСостав.НомерСтроки
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствСостав
	|				ПО (НаборыСвойствСостав.Свойство = ДополнительныеРеквизитыИСведения.Ссылка)
	|					И (НаборыСвойствСостав.Ссылка В (&спсНаборов))
	|		ГДЕ
	|			ДополнительныеРеквизитыИСведения.Ссылка В(&спсВыбраны)
	|			И (НаборыСвойствСостав.Ссылка ЕСТЬ NULL 
	|					ИЛИ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение <> &ЭтоДополнительноеСведение)) КАК Свойства
	|		ПО ДополнительныеРеквизитыИСведения.Ссылка = Свойства.Свойство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойства.НомерСтроки";
	//|ИТОГИ ПО
	//|	Свойство ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("ЭтоДополнительноеСведение", НЕ ДляДопРеквизитов);
	Запрос.УстановитьПараметр("спсНаборов", спсНаборов);
	Запрос.УстановитьПараметр("спсВыбраны", спсВыбраны);
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Дерево.Колонки.Вставить(2, "Значение", Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип);
	новДерево = Новый ДеревоЗначений;
	Для Каждого Колонка Из Дерево.Колонки Цикл
		новДерево.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	СкопироватьДеревоЗначенийСтрок(новДерево.Строки, Дерево.Строки, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка());
	Для Каждого Стр Из табСвойств Цикл
		СтрД = новДерево.Строки.Найти(Стр.Свойство, "Свойство", Истина);
		Если НЕ (СтрД = Неопределено) Тогда
			СтрД.Значение = Стр.Значение;
		КонецЕсли;
	КонецЦикла;
	Возврат новДерево;
КонецФункции // ПолучитьДеревоДляРедактированияЗначенийСвойств()

// Заполнить дерево значений свойств на форме объекта.
//
Функция ЗаполнитьДеревоЗначенийСвойств(Ссылка, ДополнительныеРеквизиты, ДляДополнительныхРеквизитов, Наборы) Экспорт
	Если ТипЗнч(Наборы) = Тип("СписокЗначений") Тогда
		спсНаборов = Наборы;
	Иначе
		спсНаборов = Новый СписокЗначений;
		Если НЕ (Наборы = Неопределено) Тогда
			спсНаборов.Добавить(Наборы);
		КонецЕсли;
	КонецЕсли;
	Дерево = ПолучитьДеревоДляРедактированияЗначенийСвойств(спсНаборов, ДополнительныеРеквизиты, ДляДополнительныхРеквизитов);
	Возврат Дерево;
КонецФункции // ЗаполнитьДеревоЗначенийСвойств()

// По строкам дерева значений свойств заполнить соответствие не пустыми значениями.
//
Процедура ЗаполнитьЗначенияСвойствИзДерева(СтрокиДерева, Значения)
	Для Каждого Стр Из СтрокиДерева Цикл
		Если Стр.ЭтоГруппа Тогда
			ЗаполнитьЗначенияСвойствИзДерева(Стр.Строки, Значения);
		ИначеЕсли ЗначениеЗаполнено(Стр.Значение) Тогда
			Значения.Вставить(Стр.Свойство, Стр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьЗначенияСвойствИзДерева() 

// Из дерева значений свойств на форме заполнить табличную часть объекта значений свойств.
//
Процедура ПеренестиЗначенияСвойств(ДополнительныеРеквизиты, ДеревоСвойств) Экспорт
	Значения = Новый Соответствие;
	ЗаполнитьЗначенияСвойствИзДерева(ДеревоСвойств.Строки, Значения);
	ДополнительныеРеквизиты.Очистить();
	Для Каждого Стр Из Значения Цикл
		новСтр = ДополнительныеРеквизиты.Добавить();
		новСтр.Свойство = Стр.Ключ;
		новСтр.Значение = Стр.Значение;
	КонецЦикла;
КонецПроцедуры // ПеренестиЗначенияСвойств()

#Область ПрограммныйИнтерфейс

// Заполняет наборы свойств объекта. Обычно требуется, если наборов более одного.
//
// Параметры:
//  Объект       - Ссылка на владельца свойств.
//                 Объект владельца свойств.
//                 ДанныеФормыСтруктура (по типу объекта владельца свойств).
//
//  ТипСсылки    - Тип - тип ссылки владельца свойств.
//
//  НаборыСвойств - ТаблицаЗначений с колонками:
//                    Набор - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений.
//
//                    // Далее свойства элемента формы типа ГруппаФормы вида обычная группа
//                    // или страница, которая создается, если наборов больше одного без учета
//                    // пустого набора, который описывает свойства группы удаленных реквизитов.
//                    
//                    // Если значение Неопределено, значит использовать значение по умолчанию.
//                    
//                    // Для любой группы управляемой формы.
//                    Высота                   - Число.
//                    Заголовок                - Строка.
//                    Подсказка                - Строка.
//                    РастягиватьПоВертикали   - Булево.
//                    РастягиватьПоГоризонтали - Булево.
//                    ТолькоПросмотр           - Булево.
//                    ЦветТекстаЗаголовка      - Цвет.
//                    Ширина                   - Число.
//                    ШрифтЗаголовка           - Шрифт.
//                    
//                    // Для обычной группы и страницы.
//                    Группировка              - ГруппировкаПодчиненныхЭлементовФормы.
//                    
//                    // Для обычной группы.
//                    Отображение                - ОтображениеОбычнойГруппы.
//                    ШиринаПодчиненныхЭлементов - ШиринаПодчиненныхЭлементовФормы.
//                    
//                    // Для страницы.
//                    Картинка                 - Картинка.
//                    ОтображатьЗаголовок      - Булево.
//
//  СтандартнаяОбработка - Булево - начальное значение Истина. Указывает получать ли
//                         основной набор, когда НаборыСвойств.Количество() равно нулю.
//
//  КлючНазначения   - Неопределено - (начальное значение) - указывает вычислить
//                      ключ назначения автоматически и добавить к значениям свойств
//                      формы КлючНазначенияИспользования и КлючСохраненияПоложенияОкна,
//                      чтобы изменения формы (настройки, положение и размер) сохранялись
//                      отдельно для разного состава наборов.
//                      Например, для каждого вида номенклатуры - свой состав наборов.
//
//                    - Строка - (не более 32 символа) - использовать указанный ключ
//                      назначения для добавления к значениям свойств формы.
//                      Пустая строка - не изменять свойства ключей формы, т.к. они
//                      устанавливается в форме и уже учитывают различия состава наборов.
//
//                    Добавка имеет формат "КлючНаборовСвойств<КлючНазначения>",
//                    чтобы <КлючНазначения> можно было обновлять без повторной добавки.
//                    При автоматическом вычислении <КлючНазначения> содержит хэш
//                    идентификаторов ссылок упорядоченных наборов свойств.
//
Процедура ЗаполнитьНаборыСвойствОбъекта(Объект, ТипСсылки, НаборыСвойств, СтандартнаяОбработка, КлючНазначения) Экспорт
	
	ТипЗначения = ТипЗнч(Объект);
	Если (ТипЗначения = Тип("СправочникСсылка.Партнеры")
		ИЛИ ТипЗначения = Тип("СправочникОбъект.Партнеры")
		ИЛИ ТипСсылки = Тип("СправочникСсылка.Партнеры")) Тогда
		
		СписокСвойств = CRM_УправлениеСвойствамиПереопределяемый.ПолучитьНаборыСвойствДляПартнеров(Объект.ЮрФизЛицо);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляКартМаршрута(Объект);
		
	ИначеЕсли ТипСсылки = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
			
			СписокСвойств = ПолучитьНаборыСвойствДляКартМаршрута(Объект.КартаМаршрута);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
	ИначеЕсли ТипСсылки = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ЗначениеЗаполнено(Объект.БизнесПроцесс)
		И (ТипЗнч(Объект.БизнесПроцесс)=Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")) Тогда
			
			СписокСвойств = ПолучитьНаборыСвойствДляКартМаршрута(Объект.БизнесПроцесс.КартаМаршрута);
		Иначе
			
			Возврат;
			
		КонецЕсли;
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокСвойств Цикл
		
		СтрокаНабора = НаборыСвойств.Добавить();
		
		СтрокаНабора.Набор 	   = ЭлементСписка.Значение;
		СтрокаНабора.Заголовок = ЭлементСписка.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаборыСвойствДляКартМаршрута(Объект) Экспорт
	
	Наборы = Новый СписокЗначений;
	
	НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_КартыМаршрутов_Общие;
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства'"));
	
	НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "НаборСвойств");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Свойства карты маршрута'"));
	
	Возврат Наборы;
	
КонецФункции // ПолучитьНаборыСвойствДляКартМаршрута()

#КонецОбласти
