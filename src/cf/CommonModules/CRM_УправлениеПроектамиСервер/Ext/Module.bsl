
////////////////////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ "УПРАВЛЕНИЕ ПРОЕКТАМИ"

// Функция возвращает общую сумму плановых затрат по всем этапам проекта.
//
// Параметры:
//	Проект	- СправочникСсылка	- Проект, по которому считаем общие плановые затраты.
//
// Возвращаемое значение:
//	Число	- Сумма общих плановых затрат.
//
Функция ПолучитьПлановыеЗатратыПоПроекту(Проект) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(CRM_ЭтапыПроектовЗатраты.Сумма) КАК Сумма
	               |ИЗ
	               |	Справочник.CRM_ЭтапыПроектов.Затраты КАК CRM_ЭтапыПроектовЗатраты
	               |ГДЕ
	               |	CRM_ЭтапыПроектовЗатраты.Ссылка.Владелец = &Проект
	               |	И (НЕ CRM_ЭтапыПроектовЗатраты.Ссылка.ПометкаУдаления)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПолучитьПлановыеЗатратыПоПроекту()

// Функция возвращает заголовок для форм этапов проектов.
//
// Параметры:
//	НаименованиеЭтапа	- Строка			- Наименование этапа.
//	Владелец			- СправочникСсылка	- Владелец этапа.
//
// Возвращаемое значение:
//	Строка	- Новый заголовок
//
Функция ПолучитьЗаголовокЭтапа(НаименованиеЭтапа, Владелец) Экспорт
	ИмяЭтапа = "Этап" + ?(ПустаяСтрока(НаименованиеЭтапа), " проекта (Создание)", ": " + НаименованиеЭтапа 
		+ " (Проект: " + Владелец + ")");
	Возврат ИмяЭтапа;
КонецФункции // ПолучитьЗаголовокЭтапа()

Функция ТекущееПодразделение() Экспорт
	 Возврат Пользователи.ТекущийПользователь().Подразделение;
КонецФункции

#Область МоделиКейсов
	
// Функция возвращает структуру модели кейса.
//
// Параметры:
//	Источник - СправочникСсылка	- Модель кейса.
//
// Возвращаемое значение:
//	Структура - Структура реквизитов модели кейса
//
Функция СтруктураМоделиКейса(Источник) Экспорт

	МетаданныеРеквизитов = Метаданные.Справочники.CRM_МоделиКейсов.Реквизиты;
	
	Реквизиты = "Наименование";
	Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
		Реквизиты = Реквизиты + "," + МетаданныеРеквизита.Имя;
	КонецЦикла;
		
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);

КонецФункции // СтруктураМоделиКейса()

Процедура СформироватьПодменюМоделейКейса(Форма, ОбластьДобавления) Экспорт
	
	//Подготовка вспомагательных данных
	СформироватьВспомогательныеМоделейКейса(Форма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_МоделиКейсов.Ссылка КАК Ссылка,
		|	CRM_МоделиКейсов.Представление,
		|	CRM_МоделиКейсов.ИспользоватьКалендарныеГрафики
		|ИЗ
		|	Справочник.CRM_МоделиКейсов КАК CRM_МоделиКейсов
		|ГДЕ
		|	НЕ CRM_МоделиКейсов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл	
		//Формирование элементов управления
		ИдентификаторЭлемента = "МодельКейса" + ИдентификаторЭлемента(Выборка.Ссылка); 
		
		Команда = СоздатьНайтиКоманду(
			Форма,
			ИдентификаторЭлемента,
			"Подключаемый_СформироватьПроектЭтапПоМоделиКейса",
			Выборка.Представление
		);
		
		Кнопка = СоздатьНайтиКнопку(
			Форма,
			Команда.Имя,
			Команда.Имя,
			ОбластьДобавления
		);
		
		НоваяСтрока = Форма.скДанныеМоделейКейса.Добавить();
		НоваяСтрока.ИмяКоманды					   = ИдентификаторЭлемента;
		НоваяСтрока.МодельКейса	   				   = Выборка.Ссылка;
		НоваяСтрока.ИспользоватьКалендарныеГрафики = Выборка.ИспользоватьКалендарныеГрафики;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПодменюМоделейКейса()

Процедура СформироватьВспомогательныеМоделейКейса(Форма)

	ИмяТаблицы = "скДанныеМоделейКейса";
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяКоманды"     				 , ОбщегоНазначения.ОписаниеТипаСтрока(150)										 , ИмяТаблицы));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("МодельКейса"    				 , Новый ОписаниеТипов("СправочникСсылка.CRM_МоделиКейсов")					   	 , ИмяТаблицы));	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИспользоватьКалендарныеГрафики", Новый ОписаниеТипов("Булево")												     , ИмяТаблицы));	
		
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

Процедура ДобавитьЭтапКонтрольнуюТочкуВКейс(Кейс, ЭтапКонтролнаяТочка) Экспорт

	СтруктураМоделиКейса = СтруктураМоделиКейса(Кейс.CRM_МодельКейса);
	Если Не СтруктураМоделиКейса.ИспользоватьКалендарныеГрафики = Истина Тогда
		Возврат;
		
	КонецЕсли;
	
	КейсОбъект = Кейс.ПолучитьОбъект();	
	КейсОбъект.Заблокировать();
	
	ЭтапыРабот = КейсОбъект.ЭтапыРабот;
	Если ЭтапыРабот.Найти(ЭтапКонтролнаяТочка, "Этап") = Неопределено Тогда
		НовыйЭтап = ЭтапыРабот.Добавить();	
		ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапКонтролнаяТочка);
		
		НовыйЭтап.Этап = ЭтапКонтролнаяТочка;		
		НовыйЭтап.ИдентификаторСтроки = XMLСтрока(ЭтапКонтролнаяТочка);
		Если ЗначениеЗаполнено(НовыйЭтап.ЭтапПредок) Тогда
			НовыйЭтап.ИдентификаторСтрокиРодителя = XMLСтрока(НовыйЭтап.ЭтапПредок);
		
		КонецЕсли;
		
	КонецЕсли;	
	
	КейсОбъект.Записать();	
		
КонецПроцедуры

#Область РаботаСЭлементамиФормы

Функция ИдентификаторЭлемента(Ссылка) Экспорт

	Возврат СтрЗаменить(XMLСтрока(Ссылка), "-", "_");	

КонецФункции // ИдентификаторЭлемента()

Функция СоздатьНайтиКоманду(Форма,
							ИмяКоманды, 
							Действие,
							Заголовок = "",
							ОтображениеКнопки = Неопределено,
							Картинка = Неопределено)
							
	Команда = Форма.Команды.Найти(ИмяКоманды);						
	Если Команда = Неопределено Тогда
		Команда 			= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Действие	= Действие;
		Команда.Заголовок	= Заголовок;
		
		Если ОтображениеКнопки <> Неопределено Тогда
			Команда.Отображение	= ОтображениеКнопки;
		КонецЕсли;
		
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
		КонецЕсли;
		
	КонецЕсли;			
	
	Возврат Команда;
	
КонецФункции // СоздатьНайтиКоманду()

Функция СоздатьНайтиКнопку(Форма,
						   ИмяКнопки, 
						   ИмяКоманды,
						   Родитель = Неопределено,
						   Ширина = 0, 
						   Высота = 0);  
						   
	Элементы = Форма.Элементы;	
						   
	Кнопка = Элементы.Найти(ИмяКнопки);
	Если Кнопка = Неопределено Тогда
		Кнопка 			  = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ?(Родитель = Неопределено, Форма, Родитель));
		Кнопка.ИмяКоманды = ИмяКоманды;
		Кнопка.Ширина 	  = Ширина;
		Кнопка.Высота 	  = Высота;
		
		Кнопка.АвтоМаксимальнаяШирина = Ложь;
		Кнопка.АвтоМаксимальнаяВысота = Ложь;
		
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции // СоздатьНайтиКнопку()

#КонецОбласти

#КонецОбласти
