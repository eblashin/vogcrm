
// + Тищенко В.В.

Процедура вогОповещениеОПросроченныхЗадачах() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
	|	ДанныеБизнесПроцессов.Номер КАК Номер,
	|	ДанныеБизнесПроцессов.Дата КАК Дата,
	|	ДанныеБизнесПроцессов.Автор КАК Автор,
	|	ДанныеБизнесПроцессов.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).КартаМаршрута.вогКоличествоДнейПросрочки КАК МаксимальноеКоличествоДней,
	|	РАЗНОСТЬДАТ(ДанныеБизнесПроцессов.Дата, &ТекущаяДата, ДЕНЬ) КАК КоличествоДнейПросрочки,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).КартаМаршрута.вогРольИсполнителя КАК РольДляОповещения,
	|	ДанныеБизнесПроцессов.Автор.Подразделение КАК ПодразделениеПользователя
	|ПОМЕСТИТЬ ВТ_СписокБП
	|ИЗ
	|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).Завершен
	|	И ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).КартаМаршрута.вогОповещатьОПросроченнойЗадачиРуководителя
	|	И НЕ ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).ПометкаУдаления
	|	И ДанныеБизнесПроцессов.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|	И РАЗНОСТЬДАТ(ДанныеБизнесПроцессов.Дата, &ТекущаяДата, ДЕНЬ) >= ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).КартаМаршрута.вогКоличествоДнейПросрочки
	|	И ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).КартаМаршрута.вогРольИсполнителя <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).КартаМаршрута.вогКоличествоДнейПросрочки <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеБизнесПроцессов.Номер,
	|	ДанныеБизнесПроцессов.Дата,
	|	ДанныеБизнесПроцессов.БизнесПроцесс,
	|	ДанныеБизнесПроцессов.Автор,
	|	ДанныеБизнесПроцессов.Наименование,
	|	ВЫРАЗИТЬ(ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).КартаМаршрута.вогКоличествоДнейПросрочки,
	|	ДанныеБизнесПроцессов.Автор.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокБП.БизнесПроцесс КАК БизнесПроцесс,
	|	ВТ_СписокБП.Номер КАК Номер,
	|	ВТ_СписокБП.Дата КАК Дата,
	|	ВТ_СписокБП.Автор КАК Автор,
	|	ВТ_СписокБП.Наименование КАК Наименование,
	|	ВТ_СписокБП.КоличествоДнейПросрочки КАК КоличествоДнейПросрочки,
	|	ВТ_СписокБП.РольДляОповещения КАК РольДляОповещения,
	|	ВТ_СписокБП.ПодразделениеПользователя КАК ПодразделениеПользователя
	|ПОМЕСТИТЬ ВТ_БизнесПроцессы
	|ИЗ
	|	ВТ_СписокБП КАК ВТ_СписокБП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
	|	ВТ_БизнесПроцессы.Номер КАК Номер,
	|	ВТ_БизнесПроцессы.Дата КАК Дата,
	|	ВТ_БизнесПроцессы.БизнесПроцесс КАК БизнесПроцесс,
	|	ВТ_БизнесПроцессы.Наименование КАК Наименование,
	|	ВТ_БизнесПроцессы.РольДляОповещения КАК РольДляОповещения,
	|	ВТ_БизнесПроцессы.КоличествоДнейПросрочки КАК КоличествоДнейПросрочки,
	|	ВТ_БизнесПроцессы.Автор КАК Автор
	|ПОМЕСТИТЬ ВТ_ИсполнителиЗадач
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БизнесПроцессы КАК ВТ_БизнесПроцессы
	|		ПО ИсполнителиЗадач.РольИсполнителя = ВТ_БизнесПроцессы.РольДляОповещения
	|			И (ВЫБОР
	|				КОГДА ИсполнителиЗадач.РольИсполнителя.ИспользуетсяСОбъектамиАдресации
	|					ТОГДА ИсполнителиЗадач.ОсновнойОбъектАдресации = ВТ_БизнесПроцессы.ПодразделениеПользователя
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_ИсполнителиЗадач.Исполнитель) КАК Исполнитель,
	|	ВТ_ИсполнителиЗадач.БизнесПроцесс КАК БизнесПроцесс,
	|	ВТ_ИсполнителиЗадач.Номер КАК Номер,
	|	ВТ_ИсполнителиЗадач.Дата КАК Дата,
	|	ВТ_ИсполнителиЗадач.Наименование КАК Наименование,
	|	ВТ_ИсполнителиЗадач.РольДляОповещения КАК РольДляОповещения,
	|	ВТ_ИсполнителиЗадач.КоличествоДнейПросрочки КАК КоличествоДнейПросрочки,
	|	ВТ_ИсполнителиЗадач.Автор КАК Автор
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ИсполнителиЗадач КАК ВТ_ИсполнителиЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированиеРолиИсполнителя.СрезПоследних КАК вогДелегированиеРолиИсполнителяСрезПоследних
	|		ПО (вогДелегированиеРолиИсполнителяСрезПоследних.ВладелецРоли = ВТ_ИсполнителиЗадач.Исполнитель)
	|			И (вогДелегированиеРолиИсполнителяСрезПоследних.РольИсполнителя = ВТ_ИсполнителиЗадач.РольДляОповещения)
	|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаНачала <= &ТекущаяДата)
	|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаОкончания >= &ТекущаяДата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Исполнитель КАК Исполнитель,
	|	ВТ_Результат.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ВТ_Результат.Номер КАК Номер,
	|	ВТ_Результат.Дата КАК Дата,
	|	ВТ_Результат.Наименование КАК Наименование,
	|	ВТ_Результат.РольДляОповещения КАК РольДляОповещения,
	|	ВТ_Результат.КоличествоДнейПросрочки КАК КоличествоДнейПросрочки,
	|	ВТ_Результат.Автор КАК Автор
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ПО (ВТ_Результат.БизнесПроцесс = ЗадачаИсполнителя.БизнесПроцесс
	|				И НЕ ЗадачаИсполнителя.Выполнена)");
	Запрос.УстановитьПараметр("ТекущаяДата",КонецДня(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Выборка.Исполнитель,Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи, Выборка.Задача);
			Если НЕ ПараметрыОповещения = Неопределено Тогда
				CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// - Тищенко В.В.

Процедура вогФормированиеПоручений() Экспорт //Павелко, Таск 000000793, 06.11.2019
	
	ТекущийДень = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогШаблоныПорученийДатыРасписания.Ссылка.Тема КАК Тема,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.Тип КАК Тип,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.Сложность КАК Сложность,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.АвторПоручения КАК АвторПоручения,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.Кому КАК Кому,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.Групповая КАК Групповая,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.Важность КАК Важность,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.ДатаИсполнения КАК ДатаИсполнения,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.Описание КАК Описание,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.ВладелецШаблона КАК ВладелецШаблона,
		|	вогШаблоныПорученийДатыРасписания.Ссылка КАК Шаблон,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.ВладелецШаблона.Подразделение КАК Подразделение,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.ВладелецШаблона.CRM_ДолжностнаяПозиция КАК ДолжностнаяПозиция,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.ВладелецШаблона.вогРуководитель КАК Руководитель,
		|	вогШаблоныПорученийДатыРасписания.Ссылка.ДополнительноеВремя КАК ДополнительноеВремя
		|ИЗ
		|	Справочник.вогШаблоныПоручений.ДатыРасписания КАК вогШаблоныПорученийДатыРасписания
		|ГДЕ
		|	вогШаблоныПорученийДатыРасписания.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И вогШаблоныПорученийДатыРасписания.Ссылка.Периодическое = ИСТИНА
		|	И вогШаблоныПорученийДатыРасписания.День = &День";
	
	Запрос.УстановитьПараметр("День", ТекущийДень);
	
	ВыборкаШаблон = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаШаблон.Следующий() Цикл
		
		БизнесПроцессОбъект 			= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
		БизнесПроцессОбъект.Дата 		= ТекущийДень;
		БизнесПроцессОбъект.ДатаСтарта 	= ТекущаяДатаСеанса();
			
		ЗаполнитьБизнесПроцессПоШаблону(БизнесПроцессОбъект, ВыборкаШаблон);	
		
		НачатьТранзакцию();
		
		Попытка
			
			БизнесПроцессОбъект.Записать();
						
			ЗаписатьДанныеВРегистрыБизнесПроцессов(БизнесПроцессОбъект, ВыборкаШаблон, ТекущийДень);
			
			БизнесПроцессОбъект.Старт();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание формирования поручений'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
			
		КонецПопытки;	
		
	КонецЦикла;

	
КонецПроцедуры	

Процедура ЗаполнитьБизнесПроцессПоШаблону(БизнесПроцессОбъект, Шаблон) //Павелко, Таск 000000793, 06.11.2019
	
	Если Шаблон.Групповая Тогда
		БизнесПроцессОбъект.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеГрупповое;
	Иначе
		БизнесПроцессОбъект.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение;
	КонецЕсли;
	
	Если Шаблон.АвторПоручения = "ОтСебя" Тогда
		БизнесПроцессОбъект.Автор = Шаблон.ВладелецШаблона;
	ИначеЕсли Шаблон.АвторПоручения = "ОтРуководителя" Тогда
		БизнесПроцессОбъект.Автор = Шаблон.Руководитель;
	КонецЕсли;	
	
	БизнесПроцессОбъект.Важность 					= Шаблон.Важность;
	БизнесПроцессОбъект.Ответственный 				= Шаблон.ВладелецШаблона;
	БизнесПроцессОбъект.Подразделение 				= Шаблон.Подразделение;
	БизнесПроцессОбъект.вогНастройка				= Шаблон.Тип;
	БизнесПроцессОбъект.вогСложность				= Шаблон.Сложность;
	БизнесПроцессОбъект.Наименование 				= Шаблон.Тема;
	БизнесПроцессОбъект.вогДолжностнаяПозиция 		= Шаблон.ДолжностнаяПозиция;
	БизнесПроцессОбъект.НомерВерсииКартыМаршрута	= БизнесПроцессОбъект.КартаМаршрута.НомерВерсии;
	БизнесПроцессОбъект.Описание 					= Шаблон.Описание;
	
	СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(БизнесПроцессОбъект.КартаМаршрута);
	
	БизнесПроцессОбъект.ТочкаСтарта = СписокТочекСтарта[0].Значение;
	
КонецПроцедуры	

Процедура ЗаписатьДанныеВРегистрыБизнесПроцессов(БизнесПроцессОбъект, ВыборкаШаблон, ТекущийДень) //Павелко, Таск 000000793, 06.11.2019
	
	КонецРабочегоДня = Час(CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ВыборкаШаблон.ВладелецШаблона, "ВремяОкончанияРабочегоДня"));
	Если КонецРабочегоДня = 0 Тогда
		КонецРабочегоДня = 18;
	КонецЕсли;
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
	НаборЭтапов.Прочитать();
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
	НаборИсполнителей.Прочитать();
	
	Для Каждого СтрокаНабора ИЗ НаборИсполнителей Цикл
		
		Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
			
			СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(ВыборкаШаблон.Кому), ВыборкаШаблон.Кому, Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан);
			
			Если ВыборкаШаблон.ДополнительноеВремя.Пустая() Тогда
				НаборЭтапов[0].ДатаВыполнения = ТекущийДень + КонецРабочегоДня * 3600;
			Иначе
				НачалоРабочегоДня = Час(CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ВыборкаШаблон.ВладелецШаблона, "ВремяНачалаРабочегоДня"));
				Если НачалоРабочегоДня = 0 Тогда
					НачалоРабочегоДня = 9;
				КонецЕсли;
				НаборЭтапов[0].ДатаВыполнения = CRM_БизнесПроцессыИЗадачиСервер.ПолучитьСрокИсполненияПоВариантуУстановкиДаты(ВыборкаШаблон.ДополнительноеВремя, ТекущийДень) + НачалоРабочегоДня * 3600;
			КонецЕсли;	
			
			НаборЭтапов[0].ВариантВыполнения 		= 1;
			НаборЭтапов[0].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(
				НаборЭтапов[0].ТочкаМаршрута,
				НаборЭтапов[0].ВариантВыполнения,
				БизнесПроцессОбъект.НомерВерсииКартыМаршрута);
			
		ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
			
			НаборЭтапов[1].ДатаВыполнения 		= НачалоДня(НаборЭтапов[0].ДатаВыполнения) + 86400 + КонецРабочегоДня * 3600;
			НаборЭтапов[1].Используется 		= Истина;
			СтрокаНабора.Исполнитель 			= ВыборкаШаблон.ВладелецШаблона;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЭтапов.Записать();
	НаборИсполнителей.Записать();
	
	////////////////////////////////////////////
	Набор = РегистрыСведений.вогОбъектыДляПроцесса.СоздатьНаборЗаписей();
	Набор.Отбор.Процесс.Установить(БизнесПроцессОбъект.Ссылка);	
	Набор.Очистить();
	
	ТаблицаОбъектов = Набор.Выгрузить();
			
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыборкаШаблон.Шаблон.Клиенты, 		ТаблицаОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыборкаШаблон.Шаблон.ТорговыеТочки, 	ТаблицаОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыборкаШаблон.Шаблон.Товары, 		ТаблицаОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыборкаШаблон.Шаблон.Коллекции, 		ТаблицаОбъектов);
	
	ТаблицаОбъектов.ЗаполнитьЗначения(БизнесПроцессОбъект.Ссылка, "Процесс");

	Набор.Загрузить(ТаблицаОбъектов);
	
	Набор.Записать();
	
	////////////////////////////////////////////
	НаборЗаписейИсполнителиПоручения = РегистрыСведений.вогСписокИсполнителейПоручения.СоздатьНаборЗаписей();
	НаборЗаписейИсполнителиПоручения.Отбор.БизнесПроцесс.Установить(БизнесПроцессОбъект.Ссылка);
	
	Для Каждого Строка Из ВыборкаШаблон.Шаблон.Исполнители Цикл		
		СтрокаНабораИсполнительПоручения 					= НаборЗаписейИсполнителиПоручения.Добавить();
		СтрокаНабораИсполнительПоручения.БизнесПроцесс 		= БизнесПроцессОбъект.Ссылка;
		СтрокаНабораИсполнительПоручения.РольИсполнителя 	= ВыборкаШаблон.Кому;
		СтрокаНабораИсполнительПоручения.Исполнитель		= Строка.Исполнитель;					
	КонецЦикла;
	
	НаборЗаписейИсполнителиПоручения.Записать();

КонецПроцедуры		

Процедура вогФормированиеЗадачБизнесПроцессов() Экспорт //VOG Ульянов И.В. 13.11.2019 task ххх
	
	//Если Константы.вогФормироватьЗадачиРегламентнымЗаданием.Получить() = Ложь тогда
	//	Возврат;
	//КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогНеобработанныеЗадачиБизнесПроцессов.Задача КАК Задача,
		|	вогНеобработанныеЗадачиБизнесПроцессов.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.вогНеобработанныеЗадачиБизнесПроцессов КАК вогНеобработанныеЗадачиБизнесПроцессов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Отказ = Ложь;
		Попытка
			CRM_БизнесПроцессыСервер.ПолучитьСледующуюТочкуСформироватьЗадачи(Выборка.Задача,,Отказ);
			Если Отказ = Ложь тогда
				НаборЗаписей = РегистрыСведений.вогНеобработанныеЗадачиБизнесПроцессов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);			
				НаборЗаписей.Записать(Истина);
			Иначе
				НаборЗаписей = РегистрыСведений.вогНеобработанныеЗадачиБизнесПроцессов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);			
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Задача = Выборка.Задача;
				НоваяЗапись.Дата = Выборка.Дата;
				НоваяЗапись.ДатаОбработки = ТекущаяДата();
				НоваяЗапись.ИнформацияОбОшибке = "Не удалось создать задачи по бизнес-процессу";				
				НаборЗаписей.Записать(Истина);				
			КонецЕсли;	
		Исключение
			НаборЗаписей = РегистрыСведений.вогНеобработанныеЗадачиБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Задача = Выборка.Задача;
			НоваяЗапись.Дата = Выборка.Дата;
			НоваяЗапись.ДатаОбработки = ТекущаяДата();
			НоваяЗапись.ИнформацияОбОшибке = ОписаниеОшибки();				
			НаборЗаписей.Записать(Истина);				
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура вогЗакрытиеКС() Экспорт	//VOG Ульянов И.В. 20.01.2020 CRM-147
	
	// +++ VOG Кулаков П.Л. 20.03.2020 CRM-439
	МассивКСНеактивные = Новый Массив;
	МассивДоговоровНеактивные = Новый Массив;
	// --- VOG Кулаков П.Л.
	
	Запрос = Новый Запрос;
	//доработано VOG Ульянов И.В. 20.01.2020 CRM-392
	//Кайдашов bug 871
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогКоммерческиеСоглашения.Ссылка КАК КС,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО (ДоговорыКонтрагентов.Владелец = вогКоммерческиеСоглашения.ЮридическоеЛицо
		|				ИЛИ ДоговорыКонтрагентов.Владелец.Партнер = вогКоммерческиеСоглашения.Владелец)
		|			И вогКоммерческиеСоглашения.Организация = ДоговорыКонтрагентов.Организация
		|ГДЕ
		|	(КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ДатаОкончанияДействия,ДЕНЬ) < &ДатаОкончанияДействия
		|				И вогКоммерческиеСоглашения.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ДатаПроверкиСканов, ДЕНЬ) <= &ДатаПроверкиСканов
		|				И вогКоммерческиеСоглашения.Статус = &СтатусСогласован
		|				И вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо, ДЕНЬ) < &ДатаОкончанияДействия
		// +++ VOG Кулаков П.Л. 15.07.2021 DEV-335
		|				И вогКоммерческиеСоглашения.Статус <> &СтатусДействует
		|			ИЛИ вогКоммерческиеСоглашения.Статус В (&СтатусыИсключения))
		// --- VOG Кулаков П.Л.
		|	И вогКоммерческиеСоглашения.Активный = ИСТИНА";
		//|	((вогКоммерческиеСоглашения.ДатаОкончанияДействия < &ДатаОкончанияДействия
		//|				ИЛИ вогКоммерческиеСоглашения.ДатаОкончанияДействия < вогКоммерческиеСоглашения.ДатаНачалаДействия)
		//|				И вогКоммерческиеСоглашения.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		//|			ИЛИ вогКоммерческиеСоглашения.ДатаПроверкиСканов <= &ДатаПроверкиСканов
		//|				И вогКоммерческиеСоглашения.Статус = &СтатусСогласован
		//|			ИЛИ вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо <> ДАТАВРЕМЯ(1, 1, 1)
		//|				И вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо < &ДатаОкончанияДействия)
	
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаПроверкиСканов", НачалоДня(ТекущаяДата()) - 60 * 60 *24 * 28);
	Запрос.УстановитьПараметр("СтатусСогласован", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.СогласованКлиентом);
	// +++ VOG Кулаков П.Л. 15.07.2021 DEV-335
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Действует);
	СтатусыИсключения = Новый Массив;
	СтатусыИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт);
	СтатусыИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован);
	СтатусыИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом);
	Запрос.УстановитьПараметр("СтатусыИсключения",СтатусыИсключения);
	// --- VOG Кулаков П.Л.
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			КСОбъект = Выборка.КС.ПОлучитьОбъект();
			КСОбъект.Активный = Ложь;
			КСОбъект.Записать();
			
			// +++ VOG Кулаков П.Л. 20.03.2020 CRM-439
			МассивКСНеактивные.Добавить(КСОбъект.Ссылка);
			// --- VOG Кулаков П.Л.
			
			Если Выборка.Договор <> Неопределено тогда
				вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(Выборка.Договор, Истина, Истина, Ложь);
			КонецЕсли;	
			
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание закрытие КС'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
			
		КонецПопытки;	
			
		
	КонецЦикла;
	
	// +++ VOG Кулаков П.Л. 20.03.2020 CRM-439
	// Снимем признак активный у договоров
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.вогАктивный
		|	И (ДоговорыКонтрагентов.вогДатаПроверкиСканов <= &ДатаПроверкиСканов
		|				И ДоговорыКонтрагентов.вогСтатус = &СтатусСогласованКлиентом
		|				И ДоговорыКонтрагентов.вогОтгрузкаПоСкануДоговораДо = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДоговорыКонтрагентов.вогОтгрузкаПоСкануДоговораДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И КОНЕЦПЕРИОДА(ДоговорыКонтрагентов.вогОтгрузкаПоСкануДоговораДо, ДЕНЬ) < &ДатаОкончанияДействия
		// +++ VOG Кулаков П.Л. 19.07.2021 DEV-335
		|				И ДоговорыКонтрагентов.вогСтатус <> &СтатусДействует
		// --- VOG Кулаков П.Л.
		|			ИЛИ ДоговорыКонтрагентов.вогДатаОкончанияДоговора <> ДАТАВРЕМЯ(1, 1, 1)
		|				И КОНЕЦПЕРИОДА(ДоговорыКонтрагентов.вогДатаОкончанияДоговора, ДЕНЬ) < &ДатаОкончанияДействия
		// +++ VOG Кулаков П.Л. 15.07.2021 DEV-335
		|			ИЛИ ДоговорыКонтрагентов.вогСтатус В (&СтатусыИсключения))";
		// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаПроверкиСканов", НачалоДня(ТекущаяДата()) - 60 * 60 *24 * 28);
	Запрос.УстановитьПараметр("СтатусСогласованКлиентом", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.СогласованКлиентом);
	// +++ VOG Кулаков П.Л. 15.07.2021 DEV-335
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Действует);
	Запрос.УстановитьПараметр("СтатусыИсключения",СтатусыИсключения);
	// --- VOG Кулаков П.Л.
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ДоговорОбъект = Выборка.Договор.ПолучитьОбъект();
			ДоговорОбъект.вогАктивный = Ложь;
			ДоговорОбъект.Записать();
			МассивДоговоровНеактивные.Добавить(ДоговорОбъект.Ссылка);
			
			вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(ДоговорОбъект.Ссылка, Истина, Истина, Ложь);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание Актуализация активности КС и Договора поставки'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
			
		КонецПопытки;	
			
	КонецЦикла;
	
	// Установим признак активный у КС
	Запрос = Новый Запрос;
	// +++ VOG Кулаков П.Л. 11.01.2021 DEV-59
	// ++ VOG Солодов В.В. 20.04.2021 DEV-243
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вогКоммерческиеСоглашения.Ссылка КАК КС,
	|	ДоговорыКонтрагентовКоммерческиеСоглашения.Ссылка КАК Договор
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.КоммерческиеСоглашения КАК ДоговорыКонтрагентовКоммерческиеСоглашения
	|		ПО вогКоммерческиеСоглашения.Ссылка = ДоговорыКонтрагентовКоммерческиеСоглашения.КоммерческоеСоглашение
	|			И (НЕ ДоговорыКонтрагентовКоммерческиеСоглашения.Ссылка.ПометкаУдаления)
	|			И (ДоговорыКонтрагентовКоммерческиеСоглашения.Ссылка.вогАктивный)
	|ГДЕ
	|	(вогКоммерческиеСоглашения.Статус = &СтатусДействует
	|				И НАЧАЛОПЕРИОДА(вогКоммерческиеСоглашения.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|				И (КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	|					ИЛИ вогКоммерческиеСоглашения.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ вогКоммерческиеСоглашения.Статус = &СтатусСогласован
	|				И НАЧАЛОПЕРИОДА(вогКоммерческиеСоглашения.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|				И (КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	|					ИЛИ вогКоммерческиеСоглашения.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))
	|				И (ДОБАВИТЬКДАТЕ(вогКоммерческиеСоглашения.ДатаПроверкиСканов, ДЕНЬ, 28) >= &ТекущаяДата
	|						И вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо <> ДАТАВРЕМЯ(1, 1, 1)
	|						И КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо, ДЕНЬ) >= &ТекущаяДата))
	|	И НЕ вогКоммерческиеСоглашения.Ссылка В (&СписокКС)
	|	И НЕ вогКоммерческиеСоглашения.Активный
	|ИТОГИ ПО
	|	КС";
	// До изменения
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	вогКоммерческиеСоглашения.Ссылка КАК КС
	//	|ИЗ
	//	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	//	|ГДЕ
	//	|	(вогКоммерческиеСоглашения.Статус = &СтатусДействует
	//	|				И НАЧАЛОПЕРИОДА(вогКоммерческиеСоглашения.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	//	|				И (КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	//	|					ИЛИ вогКоммерческиеСоглашения.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))
	//	|			ИЛИ вогКоммерческиеСоглашения.Статус = &СтатусСогласован
	//	|				И НАЧАЛОПЕРИОДА(вогКоммерческиеСоглашения.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	//	|				И (КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	//	|					ИЛИ вогКоммерческиеСоглашения.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))
	//	|				И (ДОБАВИТЬКДАТЕ(вогКоммерческиеСоглашения.ДатаПроверкиСканов, ДЕНЬ, 28) >= &ТекущаяДата
	//	|						И вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо = ДАТАВРЕМЯ(1, 1, 1)
	//	|					ИЛИ вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо <> ДАТАВРЕМЯ(1, 1, 1)
	//	|						И КОНЕЦПЕРИОДА(вогКоммерческиеСоглашения.ОтгрузкаПоСкануДоговораДо, ДЕНЬ) >= &ТекущаяДата)
	//	|				И НЕ вогКоммерческиеСоглашения.Ссылка В (&СписокКС)
	//	|				И НЕ вогКоммерческиеСоглашения.Активный)";
	//// --- VOG Кулаков П.Л.
	// -- VOG Солодов В.В. 20.04.2021 DEV-243
	
	//Запрос.УстановитьПараметр("ДатаПроверкиСканов", НачалоДня(ТекущаяДата()) + 60 * 60 *24 * 28);
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Действует);
	Запрос.УстановитьПараметр("СтатусСогласован", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.СогласованКлиентом);
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СписокКС", МассивКСНеактивные);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// ++ VOG Солодов В.В. 20.04.2021 DEV-243
	ВыборкаКС = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКС.Следующий() Цикл
		
		ФлагОшибки = Ложь;
		
		Попытка
			КСОбъект = ВыборкаКС.КС.ПОлучитьОбъект();
			КСОбъект.Активный = Истина;
			КСОбъект.Записать();
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Регламентное задание закрытие КС'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ОписаниеОшибки());
			
			ФлагОшибки = Истина;
			
		КонецПопытки;
		
		Если Не ФлагОшибки Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаКС.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Договор) Тогда
					Продолжить;
				КонецЕсли;
				
				вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(
					ВыборкаДетальныеЗаписи.Договор,
					Истина,
					Истина,
					Ложь);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	// До изменения
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	Попытка
	//		КСОбъект = ВыборкаДетальныеЗаписи.КС.ПОлучитьОбъект();
	//		КСОбъект.Активный = Истина;
	//		КСОбъект.Записать();
	//	Исключение
	//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание закрытие КС'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	//	КонецПопытки;
	//	
	//КонецЦикла;
	// -- VOG Солодов В.В. 20.04.2021 DEV-243
	
	// Установим признак активный у договора
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.Ссылка В (&СписокДоговоров)
		|	И (ДоговорыКонтрагентов.вогСтатус = &СтатусДействует
		|				И (КОНЕЦПЕРИОДА(ДоговорыКонтрагентов.вогДатаОкончанияДоговора, ДЕНЬ) >= &ТекущаяДата
		|					ИЛИ ДоговорыКонтрагентов.вогДатаОкончанияДоговора = ДАТАВРЕМЯ(1, 1, 1))
		|				И НАЧАЛОПЕРИОДА(ДоговорыКонтрагентов.вогДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
		|			ИЛИ ДоговорыКонтрагентов.вогСтатус = &СтатусСогласован
		|				И НАЧАЛОПЕРИОДА(ДоговорыКонтрагентов.вогДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
		|				И (КОНЕЦПЕРИОДА(ДоговорыКонтрагентов.вогДатаОкончанияДоговора, ДЕНЬ) >= &ТекущаяДата или ДоговорыКонтрагентов.вогДатаОкончанияДоговора = ДАТАВРЕМЯ(1, 1, 1) )
		|				И (ДОБАВИТЬКДАТЕ(ДоговорыКонтрагентов.вогДатаПроверкиСканов, ДЕНЬ, 28) >= &ТекущаяДата
		|						И ДоговорыКонтрагентов.вогОтгрузкаПоСкануДоговораДо = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ДоговорыКонтрагентов.вогОтгрузкаПоСкануДоговораДо <> ДАТАВРЕМЯ(1, 1, 1)
		|						И КОНЕЦПЕРИОДА(ДоговорыКонтрагентов.вогОтгрузкаПоСкануДоговораДо, ДЕНЬ) >= &ТекущаяДата))
		|	И НЕ ДоговорыКонтрагентов.вогАктивный";
	
	//Запрос.УстановитьПараметр("вогДатаПроверкиСканов", НачалоДня(ТекущаяДата()) + 60 * 60 *24 * 28);
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Действует);
	Запрос.УстановитьПараметр("СтатусСогласован", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.СогласованКлиентом);
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СписокДоговоров", МассивДоговоровНеактивные);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			ДоговорОбъект = ВыборкаДетальныеЗаписи.Договор.ПОлучитьОбъект();
			ДоговорОбъект.вогАктивный = Истина;
			ДоговорОбъект.Записать();
			
			вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(ДоговорОбъект.Ссылка, Истина, Истина, Ложь);
			
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание закрытие КС'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	// --- VOG Кулаков П.Л.

КонецПроцедуры

Процедура вогЗакрытиеДоговора() Экспорт	//VOG Ульянов И.В. 20.01.2020 CRM-147
	
	// ++ VOG Солодов В.В. 28.02.2020 CRM-361
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить("94a67b9e-007c-11ea-8661-005056bcd3e3"); // Генеральный директор (Подписание КС)
	МассивИдентификаторов.Добавить("94a67bc1-007c-11ea-8661-005056bcd3e3"); // Генеральный директор (подписание договора с действ. КС)
	
	ТочкиМаршрута = Новый Массив;
	
	Для Каждого ИдентификаторТочки Из МассивИдентификаторов Цикл
		
		ТочкаМаршрута_УИН 	= Новый УникальныйИдентификатор(ИдентификаторТочки);
		ТочкаМаршрута 		= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ТочкаМаршрута_УИН);
		
		Если ОбщегоНазначения.СсылкаСуществует(ТочкаМаршрута) Тогда
			ТочкиМаршрута.Добавить(ТочкаМаршрута);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТочкиМаршрута.Количество() = 0 Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Регламентное задание закрытие договора.'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.вогЗакрытиеДоговора,
			,
			НСтр("ru = 'Не найдены соответствующие точки маршрута.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
	|			ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|			ПО вогОбъектыДляПроцесса.Процесс = ЗадачаИсполнителя.БизнесПроцесс
	|				И (ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкиМаршрута))
	|		ПО ДоговорыКонтрагентов.Ссылка = вогОбъектыДляПроцесса.Объект
	|ГДЕ
	|	ЕСТЬNULL(ЗадачаИсполнителя.ДатаИсполнения, ДоговорыКонтрагентов.ДатаДоговора) < &ДатаДоговора
	|	И ДоговорыКонтрагентов.вогСтатус = &СтатусСогласован
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Ссылка,
	|	вогОбъектыДляПроцесса.Процесс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ПО ДоговорыКонтрагентов.Организация = вогКоммерческиеСоглашения.Организация
	|			И (ДоговорыКонтрагентов.Владелец = вогКоммерческиеСоглашения.ЮридическоеЛицо
	|				ИЛИ ДоговорыКонтрагентов.Владелец.Партнер = вогКоммерческиеСоглашения.Владелец)
	|			И (вогКоммерческиеСоглашения.Активный = ИСТИНА)
	|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
	|			И (вогКоммерческиеСоглашения.Статус = &СтатусДействует)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
	|			ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|			ПО вогОбъектыДляПроцесса.Процесс = ЗадачаИсполнителя.БизнесПроцесс
	|				И (ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкиМаршрута))
	|		ПО ДоговорыКонтрагентов.Ссылка = вогОбъектыДляПроцесса.Объект
	|ГДЕ
	|	ЕСТЬNULL(ЗадачаИсполнителя.ДатаИсполнения, ДоговорыКонтрагентов.ДатаДоговора) < &ДатаРазовогоДоговора
	|	И ДоговорыКонтрагентов.вогСтатус = &СтатусДействует
	|	И ДоговорыКонтрагентов.вогТипДоговора = &ТипДоговораРазовый
	|	И ДоговорыКонтрагентов.вогАктивный = ИСТИНА";
	
	Запрос.УстановитьПараметр("СтатусДействует", 	Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Действует);
	Запрос.УстановитьПараметр("ТипДоговораРазовый", Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый);
	// -- VOG Солодов В.В. 16.04.2020
	
	Запрос.УстановитьПараметр("СтатусСогласован", 	Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Согласован);
	Запрос.УстановитьПараметр("ДатаДоговора", 		ДобавитьМесяц(НачалоДня(ТекущаяДата()), - 6));//Кайдашов BUG 871
	Запрос.УстановитьПараметр("ДатаРазовогоДоговора", 		НачалоДня(ТекущаяДата())-60*60*24*14); //VOG Ульянов И.В. 17.04.2020 CRM-568
	
	Запрос.УстановитьПараметр("ТочкиМаршрута", 		ТочкиМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		ДоговорОбъект = Выборка.Договор.ПолучитьОбъект();
		ДоговорОбъект.вогСтатус = Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт;
		ДоговорОбъект.вогАктивный = Ложь; // ++ VOG Солодов В.В. 16.04.2020 CRM-555
		
		Попытка
			
			ДоговорОбъект.Записать();
			вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(
				ДоговорОбъект.Ссылка,
				Истина,
				Истина,
				Ложь);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Регламентное задание закрытие договора.'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ДоговорОбъект.Ссылка,
				ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	// До изменения
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вогКоммерческиеСоглашения.Ссылка) КАК КС
	//	|ИЗ
	//	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	//	|		ПО ДоговорыКонтрагентов.Организация = вогКоммерческиеСоглашения.Организация
	//	|			И (ДоговорыКонтрагентов.Владелец = вогКоммерческиеСоглашения.ЮридическоеЛицо
	//	|				ИЛИ ДоговорыКонтрагентов.Владелец.Партнер = вогКоммерческиеСоглашения.Владелец)
	//	|			И (вогКоммерческиеСоглашения.Активный = ИСТИНА)
	//	|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
	//	|ГДЕ
	//	|	ДоговорыКонтрагентов.ДатаДоговора < &ДатаДоговора
	//	|	И ДоговорыКонтрагентов.вогСтатус = &СтатусСогласован
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ДоговорыКонтрагентов.Ссылка
	//	|
	//	|ИМЕЮЩИЕ
	//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вогКоммерческиеСоглашения.Ссылка) < 1";
	//
	//
	//Запрос.УстановитьПараметр("СтатусСогласован", Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Согласован);
	//Запрос.УстановитьПараметр("ДатаДоговора", НачалоДня(ТекущаяДата())-60*60*24*30);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	
	//	Попытка
	//		
	//		ДоговорОбъект = Выборка.Договор.ПолучитьОбъект();
	//		ДоговорОбъект.вогСтатус =  Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт;
	//		ДоговорОбъект.Записать();				
	//	
	//	Исключение
	//		
	//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регламентное задание закрытие договора'"), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	//		
	//	КонецПопытки;		
	//	
	//КонецЦикла;
	// -- VOG Солодов В.В. 28.02.2020

КонецПроцедуры 

Процедура вогЗаполнениеКлассификатораСредняяОтгрузка() Экспорт //VOG Ульянов И.В. 14.02.2020 CRM-278

	КонецПериода = НачалоМесяца(ТекущаяДата())-1;
	НачалоПериода = ДобавитьМесяц(КонецПериода,-6);
	// ++ VOG Солодов В.В. 11.12.2020 CRM-1124
	ЗначениеКлассификатора_СредняяОтгрузкаРул = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("a9184180-6a82-11ea-b3c7-005056bcd3e3"));
	ЗначениеКлассификатора_СредняяОтгрузкаМ2 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("d47423c5-6a82-11ea-b3c7-005056bcd3e3"));
	ЗначениеКлассификатора_СредниеПродажиЗаПолгода = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("e2b5519c-6a82-11ea-b3c7-005056bcd3e3"));
	// До изменения
	//ЗначениеКлассификатора_СредняяОтгрузкаРул = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("dd70894c-4f09-11ea-87ff-005056bc3fe8"));
	//ЗначениеКлассификатора_СредняяОтгрузкаМ2 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("dd70894e-4f09-11ea-87ff-005056bc3fe8"));
	//ЗначениеКлассификатора_СредниеПродажиЗаПолгода = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("e6b260fc-4f09-11ea-87ff-005056bc3fe8"));
	// -- VOG Солодов В.В. 11.12.2020 CRM-1124
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогПродажиОбороты.ТорговаяТочка КАК ТорговаяТочка,
		|	вогПродажиОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	СУММА(вогПродажиОбороты.КоличествоОборот) КАК КоличествоОборот,
		|	вогПродажиОбороты.Номенклатура.ЕдиницаДляОтчетов.Наименование КАК ЕдиницаДляОтчетов
		|ИЗ
		|	РегистрНакопления.вогПродажи.Обороты(&НачалоПериода, &КонецПериода, Период, ) КАК вогПродажиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	вогПродажиОбороты.ТорговаяТочка,
		|	вогПродажиОбороты.НаправлениеДеятельности,
		|	вогПродажиОбороты.Номенклатура.ЕдиницаДляОтчетов.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вогПродажиОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	вогПродажиОбороты.ТорговаяТочка КАК ТорговаяТочка,
		|	СУММА(вогПродажиОбороты.СтоимостьОборот) КАК СтоимостьОборот
		|ИЗ
		|	РегистрНакопления.вогПродажи.Обороты(&НачалоПериода, &КонецПериода, Период, ) КАК вогПродажиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	вогПродажиОбороты.НаправлениеДеятельности,
		|	вогПродажиОбороты.ТорговаяТочка";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕдиницаДляОтчетов = "рул." тогда
			вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Выборка.ТорговаяТочка,ЗначениеКлассификатора_СредняяОтгрузкаРул,Выборка.КоличествоОборот/6, Выборка.НаправлениеДеятельности);
		ИначеЕсли Выборка.ЕдиницаДляОтчетов = "м2" тогда
			вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Выборка.ТорговаяТочка,ЗначениеКлассификатора_СредняяОтгрузкаМ2,Выборка.КоличествоОборот/6, Выборка.НаправлениеДеятельности);	
		КонецЕсли;	
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Выборка.ТорговаяТочка,ЗначениеКлассификатора_СредниеПродажиЗаПолгода,Выборка.СтоимостьОборот/6, Выборка.НаправлениеДеятельности);
	КонецЦикла;
	
КонецПроцедуры

Процедура вогОтправкаКомандировокНаКонтроль() Экспорт //VOG Ульянов И.В. 21.02.2020 CRM-344
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вогЭтапыСогласованияКомандировок.Командировка КАК Ссылка,
		|	вогЭтапыСогласованияКомандировок.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	Документ.вогКомандировка.КомандированныеСотрудники КАК вогКомандировкаКомандированныеСотрудники,
		|	РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
		|ГДЕ
		|	вогЭтапыСогласованияКомандировок.Командировка.ВремяОкончания <= &ДатаОкончания
		|	И вогЭтапыСогласованияКомандировок.Этап = &СтатусУтверждено
		|	И вогЭтапыСогласованияКомандировок.Командировка.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_БизнесПроцесс.Ссылка КАК БизнесПроцесс,
		|	ВТ_Сотрудники.Ссылка КАК Командировка,
		|	ВТ_Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|		ПО ВТ_Сотрудники.Ссылка = CRM_БизнесПроцесс.Предмет
		|			И ВТ_Сотрудники.Сотрудник = CRM_БизнесПроцесс.Ответственный
		|			И (CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута)
		|ГДЕ
		|	CRM_БизнесПроцесс.Ссылка ЕСТЬ NULL
		|	И ВТ_Сотрудники.Сотрудник <> &Водитель";
	
	//++ VOG Ульянов И.В. 29.04.2020 CRM-621	
	КартаМаршрута	= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("bfe54371-5f9c-11ea-b3c7-005056bcd3e3"));
//	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("89132542-4d82-11ea-87ff-005056bc3fe8"));
	//-- VOG Ульянов И.В. 29.04.2020 CRM-621	
	
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата() - 60*60*24 );
	Запрос.УстановитьПараметр("СтатусУтверждено", Перечисления.вогЭтапыСогласованияКомандировок.Утверждено);
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	Запрос.УстановитьПараметр("Водитель", Справочники.Пользователи.Водитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗадачаНеФормируется = Ложь;
				
		Если Выборка.Сотрудник.CRM_ДолжностнаяПозиция.ЭталоннаяПозиция.Код = "000000109" тогда      //генеральный директор подразделения
	    	ЗадачаНеФормируется= Истина;
		ИначеЕсли Выборка.Сотрудник.CRM_ДолжностнаяПозиция.ЭталоннаяПозиция.Код = "000000100" тогда     //директор по развитию
			ЗадачаНеФормируется = Истина;
		КонецЕсли;		
		
		Если ЗадачаНеФормируется тогда
			
			КлючОбсуждения	= вогСистемаВзаимодействийСервер.СоздатьНовоеОбсуждениеПоОбъекту(Выборка.Командировка);	
			ИдентификаторАвтора	= СистемаВзаимодействия.ПолучитьИдентификаторПользователя(Выборка.Сотрудник.ИдентификаторПользователяИБ);	
			
			УстановитьПривилегированныйРежим(Истина);
			
			ОбъектСообщение = СистемаВзаимодействия.СоздатьСообщение(КлючОбсуждения);
			ОбъектСообщение.Автор = ИдентификаторАвтора;
			ОбъектСообщение.Текст = СокрЛП(Выборка.Сотрудник)+" требуется заполнить результат командировки.";			
			ОбъектСообщение.Получатели.Добавить(ИдентификаторАвтора);			
			ОбъектСообщение.Записать();
		
		Иначе
			БПОбъект 						= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			БПОбъект.Автор 					= Выборка.Сотрудник;
			БПОбъект.Дата 					= ТекущаяДата();
			БПОбъект.Предмет 				= Выборка.Командировка;
			
			//++ VOG Ульянов И.В. 29.04.2020 CRM-621	
			СтартпоСроку = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("bfe54372-5f9c-11ea-b3c7-005056bcd3e3"));
//			СтартпоСроку = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("89132543-4d82-11ea-87ff-005056bc3fe8"));		
			//-- VOG Ульянов И.В. 29.04.2020 CRM-621	

			БПОбъект.ТочкаСтарта = СтартпоСроку;
			
			БПОбъект.Ответственный 			= Выборка.Сотрудник;
			БПОбъект.КартаМаршрута 			= КартаМаршрута;	
			БПОбъект.ДатаСтарта 			= ТекущаяДата();
			БПОбъект.Наименование 			= СтрШаблон("%1 (%2)", БПОбъект.КартаМаршрута, БПОбъект.Предмет);
			БПОбъект.вогДолжностнаяПозиция 	= БПОбъект.Автор.CRM_ДолжностнаяПозиция;
			БПОбъект.НомерВерсииКартыМаршрута	= БПОбъект.КартаМаршрута.НомерВерсии;
			
			НачатьТранзакцию();
			
			Попытка
				БПОбъект.Записать();
				БПОбъект.Старт();
				ЗафиксироватьТранзакцию();	
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;	
		КонецЕсли;	
		
	КонецЦикла;

	
КонецПроцедуры

Процедура вогРасчетКатегорииКлиента() Экспорт // +++ Кулаков П.Л. CRM-660 05.06.2020
											  
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогПродажиОбороты.Партнер КАК Клиент,
		|	вогДиапазоныКатегорииКлиетовСрезПоследних.Категория КАК Категория,
		|	вогПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
		|ПОМЕСТИТЬ вт_КатегорииСОборотами
		|ИЗ
		|	РегистрНакопления.вогПродажи.Обороты(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, КВАРТАЛ), КВАРТАЛ, -1), ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ТекущаяДата, КВАРТАЛ), КВАРТАЛ, -1), Квартал, НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Плитка)) КАК вогПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДиапазоныКатегорииКлиетов.СрезПоследних(КОНЕЦПЕРИОДА(&ТекущаяДата, КВАРТАЛ), ) КАК вогДиапазоныКатегорииКлиетовСрезПоследних
		|		ПО (ВЫБОР
		|				КОГДА вогДиапазоныКатегорииКлиетовСрезПоследних.ВерхняяГраница = 0
		|					ТОГДА вогПродажиОбороты.СтоимостьОборот >= вогДиапазоныКатегорииКлиетовСрезПоследних.НижняяГраница
		|				ИНАЧЕ вогПродажиОбороты.СтоимостьОборот >= вогДиапазоныКатегорииКлиетовСрезПоследних.НижняяГраница
		|						И вогПродажиОбороты.СтоимостьОборот < вогДиапазоныКатегорииКлиетовСрезПоследних.ВерхняяГраница
		|			КОНЕЦ)
		|ГДЕ
		|	НЕ вогДиапазоныКатегорииКлиетовСрезПоследних.Категория ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(вогМенеджерыОбъектов.Владелец КАК Справочник.вогТорговыеТочки).Партнер КАК Клиент
		|ПОМЕСТИТЬ вт_Клиенты
		|ИЗ
		|	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		|ГДЕ
		|	вогМенеджерыОбъектов.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Плитка)
		|	И НЕ ВЫРАЗИТЬ(вогМенеджерыОбъектов.Владелец КАК Справочник.вогТорговыеТочки).Партнер ЕСТЬ NULL
		|	И ВЫРАЗИТЬ(вогМенеджерыОбъектов.Владелец КАК Справочник.вогТорговыеТочки).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.)
		|	И НЕ ВЫРАЗИТЬ(вогМенеджерыОбъектов.Владелец КАК Справочник.вогТорговыеТочки).ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(вогМенеджерыОбъектов.Владелец КАК Справочник.вогТорговыеТочки).Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Клиенты.Клиент КАК Клиент,
		|	ЕСТЬNULL(вт_КатегорииСОборотами.СтоимостьОборот, 0) КАК СтоимостьОборот,
		|	ЕСТЬNULL(вт_КатегорииСОборотами.Категория, вогДиапазоныКатегорииКлиетовСрезПоследних.Категория) КАК Категория
		|ИЗ
		|	вт_Клиенты КАК вт_Клиенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КатегорииСОборотами КАК вт_КатегорииСОборотами
		|		ПО вт_Клиенты.Клиент = вт_КатегорииСОборотами.Клиент,
		|	РегистрСведений.вогДиапазоныКатегорииКлиетов.СрезПоследних(КОНЕЦПЕРИОДА(&ТекущаяДата, КВАРТАЛ), НижняяГраница = 0) КАК вогДиапазоныКатегорииКлиетовСрезПоследних";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросКатегория = Новый Запрос;
	ЗапросКатегория.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Справочник.Партнеры) КАК Клиент,
		|	CRM_ОбъектыЗначенийКлассификаторов.ДатаВключения КАК ДатаВключения,
		|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК Категория
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &КлассификаторКатегория";
	
	КатегорияКлиентаКлассификатор = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("6dc27b50-aae3-11ea-8c71-005056bc3fe8"));
	ЗапросКатегория.УстановитьПараметр("КлассификаторКатегория", КатегорияКлиентаКлассификатор);
	
	КлиентыСКатегориями = ЗапросКатегория.Выполнить().Выгрузить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НаправлениеПлитка = Справочники.НаправленияДеятельности.Плитка;
	ТекущаяДата = ТекущаяДата();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаКлиента = КлиентыСКатегориями.Найти(ВыборкаДетальныеЗаписи.Клиент, "Клиент");
		Если СтрокаКлиента = Неопределено Тогда 
			ХранитьИсторию = Ложь;
		Иначе
			ХранитьИсторию = Истина;
		КонецЕсли;		
		
		МенеджерЗаписи = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ВыборкаДетальныеЗаписи.Клиент;
		МенеджерЗаписи.Аналитика = НаправлениеПлитка;
		// +++ VOG Кулаков П.Л. 05.10.2020
		// удалим предыдущую запись
		МенеджерЗаписи.ЗначениеКлассификатора = СтрокаКлиента.Категория;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
		МенеджерЗаписи.Объект = ВыборкаДетальныеЗаписи.Клиент;
		МенеджерЗаписи.Аналитика = НаправлениеПлитка;
		// --- VOG Кулаков П.Л.
		МенеджерЗаписи.ЗначениеКлассификатора = ВыборкаДетальныеЗаписи.Категория;
		МенеджерЗаписи.ХранитьИсториюИзменения = Ложь;
		МенеджерЗаписи.ДатаВключения = ТекущаяДата;
		МенеджерЗаписи.Записать();
		
		// +++ VOG Кулаков П.Л. 27.08.2020 CRM-670
		вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(ВыборкаДетальныеЗаписи.Клиент,Истина,Истина,Ложь);
		// --- VOG Кулаков П.Л.
		
		Если ХранитьИсторию Тогда
			
			ЗаписьИстории = РегистрыСведений.CRM_ИсторияЗначенийКлассификаторовОбъектов.СоздатьМенеджерЗаписи();
			ЗаписьИстории.Аналитика = НаправлениеПлитка;
			
			ЗаписьИстории.ЗначениеКлассификатора = СтрокаКлиента.Категория;
			ЗаписьИстории.Объект = СтрокаКлиента.Клиент;
			ЗаписьИстории.Период = СтрокаКлиента.ДатаВключения;
			ЗаписьИстории.Автор = ТекущийПользователь;
			
			ЗаписьИстории.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // --- Кулаков П.Л.

// +++ VOG Кулаков П.Л. 13.07.2020 CRM-543
// Регламентное задание вогРасчетСтатусовНоменклатуры
Процедура вогРасчетСтатусовНоменклатурныхПозиций() Экспорт
	
	ТаблицаСтатусовНоменклатруныхПозиций = Новый ТаблицаЗначений;
	ТаблицаСтатусовНоменклатруныхПозиций.Колонки.Добавить("НоменклатурнаяПозиция",Новый ОписаниеТипов("СправочникСсылка.вогНоменклатурныеПозиции"));
	ТаблицаСтатусовНоменклатруныхПозиций.Колонки.Добавить("ДатаЗапуска",Новый ОписаниеТипов("Дата"));
	ТаблицаСтатусовНоменклатруныхПозиций.Колонки.Добавить("СтатусПродажПоХолдингу", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыABC"));
	ТаблицаСтатусовНоменклатруныхПозиций.Колонки.Добавить("СтатусПродажПоБренду",Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыABC"));
	ТаблицаСтатусовНоменклатруныхПозиций.Колонки.Добавить("СтадияЖизненногоЦикла",Новый ОписаниеТипов("ПеречислениеСсылка.СтадииЖизненногоЦиклаОбои"));
	
	ТекущаяДата = ТекущаяДата();
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить(1,Перечисления.СтатусыABC.A);
	СоответствиеСтатусов.Вставить(2,Перечисления.СтатусыABC.B);
	СоответствиеСтатусов.Вставить(3,Перечисления.СтатусыABC.C);
	СоответствиеСтатусов.Вставить(4,Перечисления.СтатусыABC.D);
	СоответствиеСтатусов.Вставить(5,Перечисления.СтатусыABC.E);
	СоответствиеСтатусов.Вставить(6,Перечисления.СтатусыABC.F);
	
	// Статусы продаж по Холдингу	
	Тип0_53		= Новый Массив;
	ТипГТ1_06   = Новый Массив;
	ТипПена1_06 = Новый Массив;
	
	Тип0_53.Добавить(Справочники.вогТипыНоменклатуры.НайтиПоКоду("1"));  // 10 ВВ БО
	Тип0_53.Добавить(Справочники.вогТипыНоменклатуры.НайтиПоКоду("6"));  // 10 ВВ ГТ БО
	Тип0_53.Добавить(Справочники.вогТипыНоменклатуры.НайтиПоКоду("11")); // 10 ВВ ФО
	Тип0_53.Добавить(Справочники.вогТипыНоменклатуры.НайтиПоКоду("61")); // 10 ГТ ФО
	Тип0_53.Добавить(Справочники.вогТипыНоменклатуры.НайтиПоКоду("2"));  // 15 ВВ БО
	
	ТипГТ1_06.Добавить(Справочники.вогТипыНоменклатуры.НайтиПоКоду("7")); // 10 ВВ ГТ ФО
	
	ТипПена1_06.Добавить(Справочники.вогТипыНоменклатуры.НайтиПоКоду("3"));  // 10 ВВ ФО (1.06)
	ТипПена1_06.Добавить(Справочники.вогТипыНоменклатуры.НайтиПоКоду("4"));  // 25 ВВ ФО
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("вогСхемаКомпоновкиСтатусыПоХолдингу");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	
	СхемаКомпоновкиДанных.Параметры.НачалоПериода.Значение = НачалоМесяца(ДобавитьМесяц(ТекущаяДата,-3));
	СхемаКомпоновкиДанных.Параметры.КонецПериода.Значение = КонецМесяца(ДобавитьМесяц(ТекущаяДата,-1));
	СхемаКомпоновкиДанных.Параметры.Тип0_53.Значение = Тип0_53;
	СхемаКомпоновкиДанных.Параметры.ТипГТ1_06.Значение = ТипГТ1_06;
	СхемаКомпоновкиДанных.Параметры.ТипПена1_06.Значение = ТипПена1_06;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    // Инициализация процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,);
    
    ТаблицаСтатусовПродажПоХолдингу = Новый ТаблицаЗначений;
    
    // Получение результата
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(ТаблицаСтатусовПродажПоХолдингу);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	Для Каждого Строка Из ТаблицаСтатусовПродажПоХолдингу Цикл
		// +++ VOG Кулаков П.Л. 05.10.2020 CRM-930
		Если Не ЗначениеЗаполнено(Строка.НоменклатурнаяПозиция) Тогда 
			Продолжить;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		НоваяСтрока = ТаблицаСтатусовНоменклатруныхПозиций.Добавить();
		НоваяСтрока.НоменклатурнаяПозиция = Строка.НоменклатурнаяПозиция;
		НоваяСтрока.ДатаЗапуска = Строка.НоменклатурнаяПозиция.ДатаЗапуска;
		НоваяСтрока.СтатусПродажПоХолдингу = СоответствиеСтатусов.Получить(Строка.Классификация);
	КонецЦикла;
	
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("вогСхемаКомпоновкиСтатусыПоБренду");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	
	СхемаКомпоновкиДанных.Параметры.НачалоПериода.Значение = НачалоМесяца(ДобавитьМесяц(ТекущаяДата,-3));
	СхемаКомпоновкиДанных.Параметры.КонецПериода.Значение = КонецМесяца(ДобавитьМесяц(ТекущаяДата,-1));
	СхемаКомпоновкиДанных.Параметры.Тип0_53.Значение = Тип0_53;
	СхемаКомпоновкиДанных.Параметры.ТипГТ1_06.Значение = ТипГТ1_06;
	СхемаКомпоновкиДанных.Параметры.ТипПена1_06.Значение = ТипПена1_06;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    // Инициализация процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,);
    
    ТаблицаСтатусовПродажПоБренду = Новый ТаблицаЗначений;
    
    // Получение результата
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(ТаблицаСтатусовПродажПоБренду);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	Для Каждого Строка Из ТаблицаСтатусовПродажПоБренду Цикл
		Если Не ЗначениеЗаполнено(Строка.НоменклатурнаяПозиция) Тогда 
			Продолжить;
		КонецЕсли;
		НайденнаяНоменклатурнаяПозиция = ТаблицаСтатусовНоменклатруныхПозиций.Найти(Строка.НоменклатурнаяПозиция,"НоменклатурнаяПозиция");
		Если НайденнаяНоменклатурнаяПозиция = Неопределено Тогда
			НоваяСтрока = ТаблицаСтатусовНоменклатруныхПозиций.Добавить();
			НоваяСтрока.НоменклатурнаяПозиция = Строка.НоменклатурнаяПозиция;
			НоваяСтрока.ДатаЗапуска = Строка.НоменклатурнаяПозиция.ДатаЗапуска;
			НоваяСтрока.СтатусПродажПоБренду = СоответствиеСтатусов.Получить(Строка.Классификация);
		Иначе
			НайденнаяНоменклатурнаяПозиция.СтатусПродажПоБренду = СоответствиеСтатусов.Получить(Строка.Классификация);
		КонецЕсли;
	КонецЦикла;
	
	// Стадия жизненного цикла
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСтатусов.НоменклатурнаяПозиция КАК НоменклатурнаяПозиция,
		|	ТаблицаСтатусов.СтатусПродажПоХолдингу КАК СтатусПродажПоХолдингу,
		|	ТаблицаСтатусов.СтатусПродажПоБренду КАК СтатусПродажПоБренду,
		|	ТаблицаСтатусов.ДатаЗапуска КАК ДатаЗапуска
		|ПОМЕСТИТЬ ТаблицаСтатусов
		|ИЗ
		|	&ТаблицаСтатусов КАК ТаблицаСтатусов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСтатусов.НоменклатурнаяПозиция КАК НоменклатурнаяПозиция,
		|	ВЫБОР
		|		КОГДА СтатусыНоменклатурныхПозицийОбоевСрезПоследних.СтадияЖизненногоЦикла = ЗНАЧЕНИЕ(Перечисление.СтадииЖизненногоЦиклаОбои.Неликвид)
		|				ИЛИ СтатусыНоменклатурныхПозицийОбоевСрезПоследних.СтадияЖизненногоЦикла = ЗНАЧЕНИЕ(Перечисление.СтадииЖизненногоЦиклаОбои.Закрыт)
		|				ИЛИ СтатусыНоменклатурныхПозицийОбоевСрезПоследних.СтадияЖизненногоЦикла = ЗНАЧЕНИЕ(Перечисление.СтадииЖизненногоЦиклаОбои.Заказной)
		|			ТОГДА СтатусыНоменклатурныхПозицийОбоевСрезПоследних.СтадияЖизненногоЦикла
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаСтатусов.ДатаЗапуска >= &ДатаОграниченияНовинки
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииЖизненногоЦиклаОбои.Новинка)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтадииЖизненногоЦиклаОбои.ОсновнойАссортимент)
		|			КОНЕЦ
		|	КОНЕЦ КАК СтадияЖизненногоЦикла
		|ИЗ
		|	ТаблицаСтатусов КАК ТаблицаСтатусов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатурныхПозицийОбоев.СрезПоследних(&ТекущаяДата, ) КАК СтатусыНоменклатурныхПозицийОбоевСрезПоследних
		|		ПО ТаблицаСтатусов.НоменклатурнаяПозиция = СтатусыНоменклатурныхПозицийОбоевСрезПоследних.НоменклатурнаяПозиция";
	
	Запрос.УстановитьПараметр("ТаблицаСтатусов",ТаблицаСтатусовНоменклатруныхПозиций);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата);
	// ++ VOG Солодов В.В. 05.02.2021 DEV-146
	Запрос.УстановитьПараметр("ДатаОграниченияНовинки", ДобавитьМесяц(НачалоДня(ТекущаяДата), -6));
	// До изменения
	//Запрос.УстановитьПараметр("ДатаОграниченияНовинки",ДобавитьМесяц(НачалоДня(ТекущаяДата),-3));
	// -- VOG Солодов В.В. 05.02.2021 DEV-146
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НайденнаяНоменклатурнаяПозиция = ТаблицаСтатусовНоменклатруныхПозиций.Найти(ВыборкаДетальныеЗаписи.НоменклатурнаяПозиция,"НоменклатурнаяПозиция");
		Если НайденнаяНоменклатурнаяПозиция = Неопределено Тогда
			НоваяСтрока = ТаблицаСтатусовНоменклатруныхПозиций.Добавить();
			НоваяСтрока.НоменклатурнаяПозиция = ВыборкаДетальныеЗаписи.НоменклатурнаяПозиция;
			НоваяСтрока.СтадияЖизненногоЦикла = ВыборкаДетальныеЗаписи.СтадияЖизненногоЦикла;
		Иначе
			НайденнаяНоменклатурнаяПозиция.СтадияЖизненногоЦикла = ВыборкаДетальныеЗаписи.СтадияЖизненногоЦикла;
			// +++ VOG Кулаков П.Л. 07.07.2021 DEV-542
			Если НайденнаяНоменклатурнаяПозиция.СтадияЖизненногоЦикла <> Перечисления.СтадииЖизненногоЦиклаОбои.Новинка
						И НайденнаяНоменклатурнаяПозиция.СтадияЖизненногоЦикла <> Перечисления.СтадииЖизненногоЦиклаОбои.ОсновнойАссортимент
						И НайденнаяНоменклатурнаяПозиция.СтадияЖизненногоЦикла <> Перечисления.СтадииЖизненногоЦиклаОбои.ПустаяСсылка() Тогда
				НайденнаяНоменклатурнаяПозиция.СтатусПродажПоБренду   = Перечисления.СтатусыABC.ПустаяСсылка();
				НайденнаяНоменклатурнаяПозиция.СтатусПродажПоХолдингу = Перечисления.СтатусыABC.ПустаяСсылка();
			КонецЕсли;
			// --- VOG Кулаков П.Л.
		КонецЕсли;
		
	КонецЦикла;
	
	// +++ VOG Кулаков П.Л. 05.10.2020 CRM-930
	// Установим Статусы продаж "Е" у Новинок, если нет продаж
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// ++ VOG Солодов В.В. 11.12.2020 CRM-1129
	"ВЫБРАТЬ
	|	вогНоменклатурныеПозиции.Ссылка КАК НоменклатурнаяПозиция,
	|	ИСТИНА КАК Новинка
	|ИЗ
	|	Справочник.вогНоменклатурныеПозиции КАК вогНоменклатурныеПозиции
	|ГДЕ
	|	вогНоменклатурныеПозиции.ДатаЗапуска > &ДатаЗапуска
	|	И НЕ вогНоменклатурныеПозиции.ПометкаУдаления
	|	И вогНоменклатурныеПозиции.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогНоменклатурныеПозиции.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.вогНоменклатурныеПозиции КАК вогНоменклатурныеПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНоменклатурныхПозицийОбоев.СрезПоследних КАК СтатусыНоменклатурныхПозицийОбоевСрезПоследних
	|		ПО вогНоменклатурныеПозиции.Ссылка = СтатусыНоменклатурныхПозицийОбоевСрезПоследних.НоменклатурнаяПозиция
	|ГДЕ
	|	вогНоменклатурныеПозиции.ДатаЗапуска <= &ДатаЗапуска
	|	И НЕ вогНоменклатурныеПозиции.ПометкаУдаления
	|	И вогНоменклатурныеПозиции.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
	|	И СтатусыНоменклатурныхПозицийОбоевСрезПоследних.СтатусПродажПоХолдингу ЕСТЬ NULL";
	// До изменения
	//"ВЫБРАТЬ
	//|	вогНоменклатурныеПозиции.Ссылка КАК НоменклатурнаяПозиция
	//|ИЗ
	//|	Справочник.вогНоменклатурныеПозиции КАК вогНоменклатурныеПозиции
	//|ГДЕ
	//|	вогНоменклатурныеПозиции.ДатаЗапуска > &ДатаЗапуска
	//|	И НЕ вогНоменклатурныеПозиции.ПометкаУдаления
	//|	И вогНоменклатурныеПозиции.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)";
	// -- VOG Солодов В.В. 11.12.2020 CRM-1129
	
	Запрос.УстановитьПараметр("ДатаЗапуска", ДобавитьМесяц(НачалоДня(ТекущаяДата),-3));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденнаяНоменклатурнаяПозиция = ТаблицаСтатусовНоменклатруныхПозиций.Найти(ВыборкаДетальныеЗаписи.НоменклатурнаяПозиция,"НоменклатурнаяПозиция");
		Если НайденнаяНоменклатурнаяПозиция = Неопределено Тогда
			// ++ VOG Солодов В.В. 11.12.2020 CRM-1129
			Если ВыборкаДетальныеЗаписи.Новинка Тогда
				СтатусПродаж 			= Перечисления.СтатусыABC.E;
				СтадияЖизненногоЦикла 	= Перечисления.СтадииЖизненногоЦиклаОбои.Новинка;
			Иначе
				СтатусПродаж 			= Перечисления.СтатусыABC.N;
				СтадияЖизненногоЦикла 	= Перечисления.СтадииЖизненногоЦиклаОбои.ПустаяСсылка();
			КонецЕсли;
						
			НоваяСтрока = ТаблицаСтатусовНоменклатруныхПозиций.Добавить();
			НоваяСтрока.НоменклатурнаяПозиция 	= ВыборкаДетальныеЗаписи.НоменклатурнаяПозиция;
			НоваяСтрока.СтадияЖизненногоЦикла 	= СтадияЖизненногоЦикла;
			НоваяСтрока.СтатусПродажПоБренду 	= СтатусПродаж;
			НоваяСтрока.СтатусПродажПоХолдингу 	= СтатусПродаж;
			// До изменения
			//НоваяСтрока = ТаблицаСтатусовНоменклатруныхПозиций.Добавить();
			//НоваяСтрока.НоменклатурнаяПозиция = ВыборкаДетальныеЗаписи.НоменклатурнаяПозиция;
			//НоваяСтрока.СтадияЖизненногоЦикла = Перечисления.СтадииЖизненногоЦиклаОбои.Новинка;
			//НоваяСтрока.СтатусПродажПоБренду = Перечисления.СтатусыABC.E;
			//НоваяСтрока.СтатусПродажПоХолдингу = Перечисления.СтатусыABC.E;
			// -- VOG Солодов В.В. 11.12.2020 CRM-1129
		КонецЕсли;
	КонецЦикла;
	// --- VOG Кулаков П.Л.
	
	Для Каждого Строка Из ТаблицаСтатусовНоменклатруныхПозиций Цикл
		
		МенеджерЗаписи = РегистрыСведений.СтатусыНоменклатурныхПозицийОбоев.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НоменклатурнаяПозиция 	= Строка.НоменклатурнаяПозиция;
		МенеджерЗаписи.СтатусПродажПоХолдингу = Строка.СтатусПродажПоХолдингу;
		МенеджерЗаписи.СтатусПродажПоБренду 	= Строка.СтатусПродажПоБренду;
		// +++ VOG Кулаков П.Л. 27.08.2020 CRM-868
		ПоследнийСтатус = РегистрыСведений.СтатусыНоменклатурныхПозицийОбоев.ПолучитьПоследнее(ТекущаяДата,Новый Структура("НоменклатурнаяПозиция",Строка.НоменклатурнаяПозиция));
		СтатусПредставленности = ПоследнийСтатус.СтатусПредставленностиВСетях;
		МенеджерЗаписи.СтатусПредставленностиВСетях = СтатусПредставленности;
		// --- VOG Кулаков П.Л.
		МенеджерЗаписи.СтадияЖизненногоЦикла 	= Строка.СтадияЖизненногоЦикла;
		МенеджерЗаписи.Период 				= ТекущаяДата;
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

Процедура вогВыгрузкаНоменклатурыВb2b() Экспорт		//VOG Ульянов И.В. b2b-103
	
	Справочники.НастройкиОбменаСb2b.ВыполнитьОбмен(Справочники.НастройкиОбменаСb2b.ОбменНоменклатуры);
	
КонецПроцедуры

Процедура ПересчётКатегорииТТОбои() Экспорт
	КатегорияA = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("ca87c1d0-75a5-11ea-87ff-005056bc3fe8"));
	КатегорияB = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("d35602c3-75a5-11ea-87ff-005056bc3fe8"));
	КатегорияC = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("d35602c5-75a5-11ea-87ff-005056bc3fe8"));
	КатегорияN = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("808e6fcd-160f-11eb-bf03-005056bcd3e3"));
	КатегорияD = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("0929efff-490d-11eb-abef-005056bcd3e3")); //Кайдашов CRM - 1131
	
	КатегорияОборудованияA = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("682d1a8d-160f-11eb-bf03-005056bcd3e3"));
	КатегорияОборудованияB = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("682d1a8f-160f-11eb-bf03-005056bcd3e3"));
	КатегорияОборудованияC = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("712d4d8d-160f-11eb-bf03-005056bcd3e3"));
	                                                                                                        
	КатегорияSKUA = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("56d8178d-160f-11eb-bf03-005056bcd3e3"));
	КатегорияSKUB = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("56d8178f-160f-11eb-bf03-005056bcd3e3"));
	КатегорияSKUC = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("61a1528d-160f-11eb-bf03-005056bcd3e3"));
	
	КоличествоSKUВОГ05 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("bfec323c-d6c6-11e8-a684-005056bc3fe8"));
	КоличествоSKUВОГ106 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("768685fc-d6c6-11e8-a684-005056bc3fe8"));
	
	RDIY = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("6cac4f07-06d3-11eb-8f2a-005056bcd3e3"));
	FDIY = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("64a60c68-06d3-11eb-8f2a-005056bcd3e3"));
	DIY = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("4fc40649-ada2-11e7-80ce-08606e7382bc"));
	
	ВитринаГоризонтально = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("f98597dc-9aea-11e8-89fa-005056bc3fe8"));
	ВитринаВертикально = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("f98597db-9aea-11e8-89fa-005056bc3fe8"));
	
	ПлощадьОтдела = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("d9c680c9-9a82-11e8-89fa-005056bc3fe8"));
	ТВ = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("25467a47-b012-11e7-80ce-08606e7382bc"));
	Радио = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("25467a46-b012-11e7-80ce-08606e7382bc"));
	БилБорды = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("1a3de9f0-b012-11e7-80ce-08606e7382bc"));
	НаправленныйСвет = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("c344bf97-bc9e-11e8-a684-005056bc3fe8"));
	
	ТЗКатегории = Новый ТаблицаЗначений;
	ТЗКатегории.Колонки.Добавить("ТорговаяТочка");
	ТЗКатегории.Колонки.Добавить("Категория");
	ТЗКатегории.Колонки.Добавить("КатегорияСКУ");
	
	
	//Формат ТРТ
	Запрос = Новый Запрос;
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтендыВБрендЗонахСрезПоследних.Стенд КАК Стенд,
	|	СтендыВБрендЗонахСрезПоследних.АктивныйСтенд КАК АктивныйСтенд,
	|	СтендыВБрендЗонахСрезПоследних.БрендЗона.ТорговаяТочка КАК БрендЗонаТорговаяТочка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.СтендыВБрендЗонах.СрезПоследних(, ) КАК СтендыВБрендЗонахСрезПоследних
	|ГДЕ
	|	СтендыВБрендЗонахСрезПоследних.АктивныйСтенд
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт.Стенд) КАК Стенд,
	|	вт.БрендЗонаТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.БрендЗонаТорговаяТочка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт.Стенд) > 0";
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из ТЗ цикл
		СтрокаК = ТЗКатегории.Добавить();
		СтрокаК.ТорговаяТочка = Строка.ТорговаяТочка;
		СтрокаК.Категория = КатегорияОборудованияA;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	НЕ CRM_ОбъектыЗначенийКлассификаторов.Объект в (&СписокТТ)
	|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора или CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора2)";
	Запрос.УстановитьПараметр("СписокТТ",ТЗКатегории.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("ЗначениеКлассификатора",FDIY);
	Запрос.УстановитьПараметр("ЗначениеКлассификатора2",RDIY);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаК = ТЗКатегории.Добавить();
		СтрокаК.ТорговаяТочка = Выборка.Объект;
		СтрокаК.Категория = КатегорияОборудованияA;
	КонецЦикла;
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	НЕ CRM_ОбъектыЗначенийКлассификаторов.Объект в (&СписокТТ)
	|	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора";
	Запрос.УстановитьПараметр("СписокТТ",ТЗКатегории.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("ЗначениеКлассификатора",DIY);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаК = ТЗКатегории.Добавить();
		СтрокаК.ТорговаяТочка = Выборка.Объект;
		СтрокаК.Категория = КатегорияОборудованияB;
	КонецЦикла;
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	ВЫБОР
	|		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Горизонт,
	|	ВЫБОР
	|		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора2
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Вертикаль
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	НЕ CRM_ОбъектыЗначенийКлассификаторов.Объект В (&СписокТТ)
	|	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика
	|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора
	|			ИЛИ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора2)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Объект КАК Объект,
	|	Сумма(вт.Горизонт) КАК Горизонт,
	|	Сумма(вт.Вертикаль) КАК Вертикаль
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Объект";
	Запрос.УстановитьПараметр("СписокТТ",ТЗКатегории.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("Аналитика",Справочники.НаправленияДеятельности.Обои);
	Запрос.УстановитьПараметр("ЗначениеКлассификатора",ВитринаГоризонтально);
	Запрос.УстановитьПараметр("ЗначениеКлассификатора2",ВитринаВертикально);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокТТ = Новый Массив;
	Пока Выборка.Следующий() цикл
		Если Выборка.Горизонт=0 тогда
			СтрокаК = ТЗКатегории.Добавить();
			СтрокаК.ТорговаяТочка = Выборка.Объект;
			СтрокаК.Категория = КатегорияОборудованияC;
		ИначеЕсли Выборка.Горизонт>0  тогда
			СписокТТ.Добавить(Выборка.Объект);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	               |	ВЫБОР
	               |		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора
	               |			ТОГДА ВЫРАЗИТЬ(CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК ЧИСЛО(15, 2))
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Площадь,
	               |	ВЫБОР
	               |		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора2
	               |				ИЛИ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора3
	               |			ТОГДА ВЫРАЗИТЬ(CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК ЧИСЛО(15, 2))
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КолВоСКУ
	               |ПОМЕСТИТЬ вт
	               |ИЗ
	               |	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	               |ГДЕ
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект В(&СписокТТ)
	               |	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика
	               |	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора
	               |			ИЛИ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора2
	               |			ИЛИ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора3)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт.Объект КАК Объект,
	               |	СУММА(вт.Площадь) КАК Площадь,
	               |	СУММА(вт.КолВоСКУ) КАК КолвоСКУ
	               |ИЗ
	               |	вт КАК вт
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт.Объект";
	Запрос.УстановитьПараметр("СписокТТ",СписокТТ);
	Запрос.УстановитьПараметр("Аналитика",Справочники.НаправленияДеятельности.Обои);
	Запрос.УстановитьПараметр("ЗначениеКлассификатора",ПлощадьОтдела);
	Запрос.УстановитьПараметр("ЗначениеКлассификатора2",КоличествоSKUВОГ106);
	Запрос.УстановитьПараметр("ЗначениеКлассификатора3",КоличествоSKUВОГ05);
	СписокТТ2 = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Попытка
			Соотношение = ?(Выборка.Площадь<>0,Выборка.КолвоСКУ/Выборка.Площадь,0);
		Исключение
			Соотношение = 0;
		КонецПопытки;
		Если Соотношение<5.5 и Соотношение>0 тогда
			СтрокаК = ТЗКатегории.Добавить();
			СтрокаК.ТорговаяТочка = Выборка.Объект;
			СтрокаК.Категория = КатегорияОборудованияB;
		ИначеЕсли Соотношение>7 тогда
			СтрокаК = ТЗКатегории.Добавить();
			СтрокаК.ТорговаяТочка = Выборка.Объект;
			СтрокаК.Категория = КатегорияОборудованияC;
		ИначеЕсли Соотношение=0 тогда
			СтрокаК = ТЗКатегории.Добавить();
			СтрокаК.ТорговаяТочка = Выборка.Объект;
			СтрокаК.Категория = Неопределено;
		Иначе
			СписокТТ2.Добавить(Выборка.Объект);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект
	               |ИЗ
	               |	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	               |ГДЕ
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект В(&СписокТТ)
	               |	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика
	               |	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора";
	Запрос.УстановитьПараметр("СписокТТ",СписокТТ2);
	Запрос.УстановитьПараметр("Аналитика",Справочники.НаправленияДеятельности.Обои);
	Запрос.УстановитьПараметр("ЗначениеКлассификатора",НаправленныйСвет);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаК = ТЗКатегории.Добавить();
		СтрокаК.ТорговаяТочка = Выборка.Объект;
		СтрокаК.Категория = КатегорияОборудованияB;
		ИДКС=СписокТТ2.Найти(Выборка.Объект);
		СписокТТ2.Удалить(ИДКС);
	КонецЦикла;
	
	
	Запрос.Текст = "ВЫБРАТЬ Различные
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект в (&СписокТТ)
	|	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика
	|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &Значение1 или CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &Значение2 или CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &Значение3)";
	Запрос.УстановитьПараметр("СписокТТ",СписокТТ2);
	Запрос.УстановитьПараметр("Аналитика",Справочники.НаправленияДеятельности.Обои);
	Запрос.УстановитьПараметр("Значение1",БилБорды);
	Запрос.УстановитьПараметр("Значение2",Радио);
	Запрос.УстановитьПараметр("Значение3",ТВ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаК = ТЗКатегории.Добавить();
		СтрокаК.ТорговаяТочка = Выборка.Объект;
		СтрокаК.Категория = КатегорияОборудованияB;
		ИДКС=СписокТТ2.Найти(Выборка.Объект);
		СписокТТ2.Удалить(ИДКС);
	КонецЦикла;
	
	Для каждого ТТ из СписокТТ2 цикл
		СтрокаК = ТЗКатегории.Добавить();
		СтрокаК.ТорговаяТочка = ТТ;
		СтрокаК.Категория = КатегорияОборудованияC;
	КонецЦикла;
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	вогТорговыеТочки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	|ГДЕ
	|	вогТорговыеТочки.Направления.Направление = &Направление И НЕ вогТорговыеТочки.Ссылка в (&СписокТТ)";
	Запрос.УстановитьПараметр("СписокТТ",ТЗКатегории.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("Направление",Справочники.НаправленияДеятельности.Обои);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаК = ТЗКатегории.Добавить();
		СтрокаК.ТорговаяТочка = Выборка.Ссылка;
		СтрокаК.Категория = Неопределено;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫРАЗИТЬ(вогМенеджерыОбъектов.Владелец КАК Справочник.вогТорговыеТочки) КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
	               |ГДЕ
	               |	вогМенеджерыОбъектов.НаправлениеДеятельности = &Направление
	               |	И НЕ ВЫРАЗИТЬ(вогМенеджерыОбъектов.Владелец КАК Справочник.вогТорговыеТочки) В (&СписокТТ)";
	Запрос.УстановитьПараметр("СписокТТ",ТЗКатегории.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("Направление",Справочники.НаправленияДеятельности.Обои);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаК = ТЗКатегории.Добавить();
		СтрокаК.ТорговаяТочка = Выборка.Ссылка;
		СтрокаК.Категория = Неопределено;
	КонецЦикла;
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	               |	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	               |	СУММА(ВЫРАЗИТЬ(CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК ЧИСЛО(15, 0))) КАК Значение
	               |ИЗ
	               |	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	               |ГДЕ
	               |	CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика
	               |	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект,
	               |	CRM_ОбъектыЗначенийКлассификаторов.Аналитика";
	Запрос.УстановитьПараметр("Аналитика",Справочники.НаправленияДеятельности.Обои);
	Запрос.УстановитьПараметр("ЗначениеКлассификатора",КоличествоSKUВОГ106);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаК = ТЗКатегории.Найти(Выборка.Объект);
		Если СтрокаК=Неопределено тогда
			СтрокаК = ТЗКатегории.Добавить();
			СтрокаК.ТорговаяТочка = Выборка.Объект;
			СтрокаК.Категория = Неопределено;
		КонецЕсли;
		Если Выборка.Значение>600 тогда
			СтрокаК.КатегорияСКУ = КатегорияSKUA;
		ИначеЕсли Выборка.Значение<=600 И Выборка.Значение>=350 тогда
			СтрокаК.КатегорияСКУ = КатегорияSKUB;
		Иначе
			СтрокаК.КатегорияСКУ = КатегорияSKUC;
		КонецЕсли;
	КонецЦикла;
	//Поиск = Новый Структура("ТорговаяТочка",ТорговаяТочка);
	//строки = ТЗКатегории.НайтиСтроки(Поиск);
	//Для каждого с из строки цикл
	//	Сообщить(С.Категория);
	//	Сообщить(С.КатегорияСКУ);
	//КонецЦикла;
	//Возврат;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК Значение
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект в (&СписокТТ)
	|	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика
	|	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Классификатор";
	Запрос.УстановитьПараметр("СписокТТ",ТЗКатегории.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("Аналитика",Справочники.НаправленияДеятельности.Обои);
	Запрос.УстановитьПараметр("Классификатор",КатегорияОборудованияA.Владелец);
	ТЗКатОб = Запрос.Выполнить().Выгрузить();
	ТЗКатОб.Индексы.Добавить("Объект");
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК Значение
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект в (&СписокТТ)
	|	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика
	|	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Классификатор";
	Запрос.УстановитьПараметр("СписокТТ",ТЗКатегории.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("Аналитика",Справочники.НаправленияДеятельности.Обои);
	Запрос.УстановитьПараметр("Классификатор",КатегорияSKUA.Владелец);
	ТЗКатСКУ = Запрос.Выполнить().Выгрузить();
	ТЗКатСКУ.Индексы.Добавить("Объект");
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК Значение
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект в (&СписокТТ)
	|	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика
	|	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Классификатор";
	Запрос.УстановитьПараметр("СписокТТ",ТЗКатегории.ВыгрузитьКолонку("ТорговаяТочка"));
	Запрос.УстановитьПараметр("Аналитика",Справочники.НаправленияДеятельности.Обои);
	Запрос.УстановитьПараметр("Классификатор",КатегорияA.Владелец);
	ТЗКат = Запрос.Выполнить().Выгрузить();
	ТЗКат.Индексы.Добавить("Объект");
	
	
	
	для каждого Строка из ТЗКатегории цикл
		Если Не ЗначениеЗаполнено(Строка.ТорговаяТочка) тогда
			Продолжить;
		КонецЕсли;
		Если Строка.ТорговаяТочка.ПометкаУдаления тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Категория) тогда
			СтрокаТЗ = ТЗКатОб.Найти(Строка.ТорговаяТочка);
			Если СтрокаТЗ<>Неопределено тогда
				Если СтрокаТЗ.Значение <> Строка.Категория тогда
					вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,Строка.Категория,,Справочники.НаправленияДеятельности.Обои);
				КонецЕсли;
			Иначе	
				вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,Строка.Категория,,Справочники.НаправленияДеятельности.Обои);
			КонецЕсли;
		Иначе
			СтрокаТЗ = ТЗКатОб.Найти(Строка.ТорговаяТочка);
			Если СтрокаТЗ<>Неопределено тогда
				Если КатегорияОборудованияC <> Строка.Категория тогда
					вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,КатегорияОборудованияC,,Справочники.НаправленияДеятельности.Обои);
				КонецЕсли;
			Иначе	
				вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,КатегорияОборудованияC,,Справочники.НаправленияДеятельности.Обои);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.КатегорияСКУ) тогда
			СтрокаТЗ = ТЗКатСКУ.Найти(Строка.ТорговаяТочка);
			Если СтрокаТЗ<>Неопределено тогда
				Если СтрокаТЗ.Значение <> Строка.КатегорияСКУ тогда
					вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,Строка.КатегорияСКУ,,Справочники.НаправленияДеятельности.Обои);
				КонецЕсли;
			Иначе
				вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,Строка.КатегорияСКУ,,Справочники.НаправленияДеятельности.Обои);
			КонецЕсли;
		Иначе
			СтрокаТЗ = ТЗКатСКУ.Найти(Строка.ТорговаяТочка);
			Если СтрокаТЗ<>Неопределено тогда
				Если КатегорияSKUC <> Строка.КатегорияСКУ тогда
					вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,КатегорияSKUC,,Справочники.НаправленияДеятельности.Обои);
				КонецЕсли;
			Иначе
				вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,КатегорияSKUC,,Справочники.НаправленияДеятельности.Обои);
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Категория = КатегорияОборудованияA и Строка.КатегорияСКУ = КатегорияSKUA тогда
			КатегорияТТ = КатегорияA;
		ИначеЕсли  ЗначениеЗаполнено(Строка.ТорговаяТочка) И Строка.ТорговаяТочка.Вид = Справочники.вогВидыТорговыхТочек.Дистрибьютор тогда  //Кайдашов CRM-1131
			КатегорияТТ = КатегорияD;
		ИначеЕсли Строка.Категория = КатегорияОборудованияB и Строка.КатегорияСКУ = КатегорияSKUA тогда
			КатегорияТТ = КатегорияA;
		иначеЕсли Строка.Категория = КатегорияОборудованияC и Строка.КатегорияСКУ = КатегорияSKUA тогда
			КатегорияТТ = КатегорияB;
		ИначеЕсли Строка.Категория = КатегорияОборудованияA и Строка.КатегорияСКУ = КатегорияSKUB тогда
			КатегорияТТ = КатегорияA;
		ИначеЕсли Строка.Категория = КатегорияОборудованияB и Строка.КатегорияСКУ = КатегорияSKUB тогда
			КатегорияТТ = КатегорияB;
		ИначеЕсли Строка.Категория = КатегорияОборудованияC и Строка.КатегорияСКУ = КатегорияSKUB тогда
			КатегорияТТ = КатегорияC;
		ИначеЕсли Строка.Категория = КатегорияОборудованияA и Строка.КатегорияСКУ = КатегорияSKUC тогда
			КатегорияТТ = КатегорияB;
		ИначеЕсли Строка.Категория = КатегорияОборудованияB и Строка.КатегорияСКУ = КатегорияSKUC тогда
			КатегорияТТ = КатегорияC;
		ИначеЕсли Строка.Категория = КатегорияОборудованияC и Строка.КатегорияСКУ = КатегорияSKUC тогда
			КатегорияТТ = КатегорияC;
		Иначе
			КатегорияТТ = КатегорияN;
		КонецЕсли;
		СтрокаТЗ = ТЗКат.Найти(Строка.ТорговаяТочка);
		Если СтрокаТЗ<>Неопределено тогда
			Если СтрокаТЗ.Значение <> КатегорияТТ тогда
				вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,КатегорияТТ,,Справочники.НаправленияДеятельности.Обои);
			КонецЕсли;
		Иначе
			вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(Строка.ТорговаяТочка,КатегорияТТ,,Справочники.НаправленияДеятельности.Обои);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

//Кайдашов 1021 23/11/2020

Процедура ОбработкаИзмененныхМесторасположений() Экспорт
	
	СписокОбработанныхОбъектов = новый Массив;
	НаборЗаписей = РегистрыСведений.ОбъектыСИзмененнымМесторасположением.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для каждого Запись из НаборЗаписей цикл
		Если ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.вогТорговыеТочки") тогда
			ВИДКИ = Справочники.ВидыКонтактнойИнформации.Месторасположение;	
			ИмяРеквизита = "НаселенныйПункт";
		ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.Партнеры") тогда
			ВИДКИ = Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента;	
			ИмяРеквизита = "вогНаселенныйПункт";	
		ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.вогРаспределительныеЦентры") тогда
			ВИДКИ = Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("107a33e0-d82f-11e8-a684-005056bc3fe8")); 	
			ИмяРеквизита = "НаселенныйПункт";	
		КонецЕсли;
		Попытка
			Объект = Запись.Объект.ПолучитьОбъект();
			Справочники.вогНаселенныеПункты.ЗаполнитьНаселенныйПунктВОбъектеПоВидуКонтактнойИнформации(Объект,ВИДКИ,ИмяРеквизита);
			Объект.Записать();	
			СписокОбработанныхОбъектов.Добавить(Запись.Объект);	
		Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Заполнение населенного пункта в элементе справочника'"),
			УровеньЖурналаРегистрации.Ошибка,
			Объект.Метаданные(),
			Объект.Ссылка,
			ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ОбъектыСИзмененнымМесторасположением.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для каждого Строка из НаборЗаписей цикл
		Если СписокОбработанныхОбъектов.Найти(Строка.Объект)<>Неопределено тогда
			НаборЗаписей.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// ++ VOG Солодов В.В. 14.12.2020 CRM-1130
Процедура РасчетПопулярностиКоллекцийПроизводителей() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("вогСхемаКомпоновкиРасчетПопулярностиКоллекцийПроизводителей");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	УстанавливаемыеПараметры = Новый Соответствие;
	УстанавливаемыеПараметры.Вставить("НачалоПериода", 			НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -3)));
	УстанавливаемыеПараметры.Вставить("КонецПериода", 			КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
	УстанавливаемыеПараметры.Вставить("СтадияЖизненногоЦикла", 	Перечисления.СтадииЖизненногоЦиклаОбои.ОсновнойАссортимент);
	КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(НастройкиКомпоновки, УстанавливаемыеПараметры);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновки,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаКоллекций = Новый ТаблицаЗначений;
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(ТаблицаКоллекций);
	ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКоллекций Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоллекцияПроизводителя) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.СвойстваКоллекцийПроизводителей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 					= ТекущаяДата;
		МенеджерЗаписи.Бренд 					= СтрокаТабличнойЧасти.Бренд;
		МенеджерЗаписи.КоллекцияПроизводителя 	= СтрокаТабличнойЧасти.КоллекцияПроизводителя;
		МенеджерЗаписи.Хит 						= СтрокаТабличнойЧасти.Хит;
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 14.12.2020 CRM-1130

// ++ VOG Солодов В.В. 13.01.2021 DEV-72
Процедура ВыполнитьПроверкуЗаполненияРеквизитов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вогНастройкиПроверкиЗаполненияРеквизитов.Ссылка КАК НастройкаПроверки,
		|	вогНастройкиПроверкиЗаполненияРеквизитов.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
		|	вогНастройкиПроверкиЗаполненияРеквизитов.ИнформироватьПоЭлектроннойПочте КАК ИнформироватьПоЭлектроннойПочте,
		|	вогНастройкиПроверкиЗаполненияРеквизитов.ИнформироватьСПомощьюВзаимодействий КАК ИнформироватьСПомощьюВзаимодействий,
		|	вогНастройкиПроверкиЗаполненияРеквизитов.ИнформироватьСПомощьюПоручения КАК ИнформироватьСПомощьюПоручения,
		|	вогНастройкиПроверкиЗаполненияРеквизитовПолучатели.Получатель КАК Получатель,
		|	ЕСТЬNULL(ПользователиКонтактнаяИнформация.Представление, """") КАК АдресПолучателя
		|ИЗ
		|	Справочник.вогНастройкиПроверкиЗаполненияРеквизитов КАК вогНастройкиПроверкиЗаполненияРеквизитов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНастройкиПроверкиЗаполненияРеквизитов.Получатели КАК вогНастройкиПроверкиЗаполненияРеквизитовПолучатели
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|			ПО вогНастройкиПроверкиЗаполненияРеквизитовПолучатели.Получатель = ПользователиКонтактнаяИнформация.Ссылка
		|				И (ПользователиКонтактнаяИнформация.Вид = &ВидКИ)
		|		ПО (вогНастройкиПроверкиЗаполненияРеквизитовПолучатели.Ссылка = вогНастройкиПроверкиЗаполненияРеквизитов.Ссылка)
		|ГДЕ
		|	вогНастройкиПроверкиЗаполненияРеквизитов.Использование = ИСТИНА
		|	И вогНастройкиПроверкиЗаполненияРеквизитов.ПометкаУдаления = ЛОЖЬ
		|ИТОГИ
		|	МАКСИМУМ(СхемаКомпоновкиДанных),
		|	МАКСИМУМ(ИнформироватьПоЭлектроннойПочте),
		|	МАКСИМУМ(ИнформироватьСПомощьюВзаимодействий),
		|	МАКСИМУМ(ИнформироватьСПомощьюПоручения)
		|ПО
		|	НастройкаПроверки";
	
	Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНастройкиПроверки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНастройкиПроверки.Следующий() Цикл
		
		СхемаИНастройки 	= Справочники.вогНастройкиПроверкиЗаполненияРеквизитов.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
			ВыборкаНастройкиПроверки.НастройкаПроверки, ВыборкаНастройкиПроверки.СхемаКомпоновкиДанных);
		
		СхемаКомпоновкиДанных 		= СхемаИНастройки.СхемаКомпоновкиДанных;
		НастройкиКомпоновкиДанных 	= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
			СхемаКомпоновкиДанных,
			НастройкиКомпоновкиДанных,
			,
			,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);
		
		ВременнаяТаблица = Новый ТаблицаЗначений;
		
		ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений
			= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ВременнаяТаблица);
		ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
		
		Если ВременнаяТаблица.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Формирование текста уведомления
		ТекстыУведомлений = Новый Массив;
		
		ШаблонЗаголовка = НСтр("ru = 'Проверка заполнения %1. Обнаружены незаполненные реквизиты:'");
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, ВыборкаНастройкиПроверки.НастройкаПроверки);
		ТекстыУведомлений.Добавить(ТекстЗаголовка);
		
		МассивИменКолонок = Новый Массив;
		Для Каждого Колонка Из ВременнаяТаблица.Колонки Цикл
			Если Не Колонка.Имя = "ИмяРеквизита" Тогда
				МассивИменКолонок.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
			
			ШаблонУведомления = НСтр("ru = 'Не заполнено значение реквизита %1. %2:%3. %4:%5.'");
			ТекстУведомления = СтрШаблон(
				ШаблонУведомления,
				СтрокаТаблицы.ИмяРеквизита,
				МассивИменКолонок[0],
				СтрокаТаблицы[МассивИменКолонок[0]],
				МассивИменКолонок[1],
				СтрокаТаблицы[МассивИменКолонок[1]]);
			
			ТекстыУведомлений.Добавить(ТекстУведомления);
			
		КонецЦикла;
		
		ТекстПисьма = СтрСоединить(ТекстыУведомлений, Символы.ПС);
		
		Если ВыборкаНастройкиПроверки.ИнформироватьПоЭлектроннойПочте
			Или ВыборкаНастройкиПроверки.ИнформироватьСПомощьюВзаимодействий
			Или ВыборкаНастройкиПроверки.ИнформироватьСПомощьюПоручения Тогда
			
			ВыборкаПолучатели = ВыборкаНастройкиПроверки.Выбрать();
			
			Если ВыборкаПолучатели.Количество() > 0
				И ВыборкаНастройкиПроверки.ИнформироватьПоЭлектроннойПочте Тогда
				// Формирование сообщения эл. почты
				
				МассивПолучателей = Новый Массив;
				
				Пока ВыборкаПолучатели.Следующий() Цикл
					
					Если Не ПустаяСтрока(ВыборкаПолучатели.АдресПолучателя) Тогда
						
						СтруктураПолучателя = Новый Структура;
						СтруктураПолучателя.Вставить("Адрес", ВыборкаПолучатели.АдресПолучателя);
						СтруктураПолучателя.Вставить("Представление", ВыборкаПолучатели.Получатель);
						
						МассивПолучателей.Добавить(СтруктураПолучателя);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если МассивПолучателей.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
				
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("Кому", 			МассивПолучателей);
				ПараметрыПисьма.Вставить("УчетнаяЗапись", 	СистемнаяУчетнаяЗапись);
				ПараметрыПисьма.Вставить("АдресОтвета", 	МассивПолучателей);
				ПараметрыПисьма.Вставить("Тема", 			НСтр("ru = 'Заполнение реквизитов'"));
				ПараметрыПисьма.Вставить("Тело", 			ТекстПисьма);
				ПараметрыПисьма.Вставить("ТипТекста", 		"ПростойТекст");
				
				РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись, ПараметрыПисьма);
				
			КонецЕсли;
			
		Иначе
			// Запись ЖР
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 13.01.2021 DEV-72

Процедура АктуализацияПодразделенийТорговыхТочек() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогМенеджерыОбъектов.Владелец КАК Владелец,
	               |	вогМенеджерыОбъектов.Подразделение КАК Подразделение,
	               |	вогМенеджерыОбъектов.БрендМенеджер КАК БрендМенеджер,
	               |	вогМенеджерыОбъектов.ЕстьБрендМенеджерВТТ КАК ЕстьБрендМенеджерВТТ,
	               |	вогМенеджерыОбъектов.НаправлениеДеятельности КАК НаправлениеДеятельности
	               |ИЗ
	               |	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
	               |ГДЕ
	               |	вогМенеджерыОбъектов.Владелец ССЫЛКА Справочник.вогТорговыеТочки
	               |	И вогМенеджерыОбъектов.Роль = ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛицПартнеров.менеджер)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() цикл
		
		// +++ VOG Кулаков П.Л. 02.04.2021 DEV-343
		//Набор = РегистрыСведений.ПодразделенияТорговыхТочек.СоздатьНаборЗаписей();
		//Набор.Отбор.ТорговаяТочка.Установить(выборка.Владелец);
		//Набор.Отбор.Направление.Установить(Выборка.НаправлениеДеятельности);
		//Набор.Прочитать();
		//Набор.Очистить();
		//Набор.Записать();
		// --- VOG Кулаков П.Л.
		МЗ = РегистрыСведений.ПодразделенияТорговыхТочек.СоздатьМенеджерЗаписи();
		МЗ.ТорговаяТочка = выборка.Владелец;
		МЗ.Подразделение = Выборка.подразделение;
		МЗ.БрендМенеджер = Выборка.БрендМенеджер;
		МЗ.ЕстьБрендМенеджер = выборка.ЕстьБрендМенеджерВТТ;
		МЗ.Направление = Выборка.НаправлениеДеятельности;
		Попытка
			МЗ.Записать(Истина);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура АктуализацияДатыВыставленияКоллекцийВТорговыхТочках() Экспорт
	
	Запрос = Новый Запрос;
	// +++ VOG Кулаков П.Л. 22.03.2021 DEV-310
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогПродажиОбороты.ТорговаяТочка КАК ТорговаяТочка,
	               |	вогПродажиОбороты.Номенклатура КАК Номенклатура,
	               |	МИНИМУМ(вогПродажиОбороты.Период) КАК Период,
	               |	вогПродажиОбороты.Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ втТабл
	               |ИЗ
	               |	РегистрНакопления.вогПродажи.Обороты(&ДатаНачала, &ДатаКонец, День, НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)) КАК вогПродажиОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вогПродажиОбороты.ТорговаяТочка,
	               |	вогПродажиОбороты.Номенклатура,
	               |	вогПродажиОбороты.Подразделение
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТабл.ТорговаяТочка КАК ТорговаяТочка,
	               |	НоменклатураКоллекции.КоллекцияПроизводителя КАК Коллекция,
	               |	МИНИМУМ(втТабл.Период) КАК ДатаВыставления,
	               |	втТабл.Номенклатура КАК Номенклатура,
	               |	втТабл.Подразделение КАК Подразделение
	               |ИЗ
	               |	втТабл КАК втТабл
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Коллекции КАК НоменклатураКоллекции
	               |		ПО втТабл.Номенклатура = НоменклатураКоллекции.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втТабл.ТорговаяТочка,
	               |	НоменклатураКоллекции.КоллекцияПроизводителя,
	               |	втТабл.Номенклатура,
	               |	втТабл.Подразделение";
	Запрос.УстановитьПараметр("ДатаНачала",ДобавитьМесяц(ТекущаяДата(),-3));
	Запрос.УстановитьПараметр("ДатаКонец",ТекущаяДата());
	
	Выборка  = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Если ЗначениеЗаполнено(Выборка.ТорговаяТочка) 
				И ЗначениеЗаполнено(Выборка.Номенклатура) тогда
			МЗ = РегистрыСведений.ДатыПервогоВыставленияКоллекцииВТорговойТочке.СоздатьМенеджерЗаписи();
			МЗ.ТорговаяТочка = Выборка.ТорговаяТочка;
			МЗ.Коллекция = Выборка.Коллекция;
			МЗ.Номенклатура = Выборка.Номенклатура;
			// +++ VOG Кулаков П.Л. 11.06.2021 DEV-498
			МЗ.Подразделение = Выборка.Подразделение;
			// --- VOG Кулаков П.Л.
			МЗ.Прочитать();
			Если МЗ.Выбран() И МЗ.ДатаВыставления <= Выборка.ДатаВыставления Тогда
				Продолжить;
			КонецЕсли;
			
			МЗ = РегистрыСведений.ДатыПервогоВыставленияКоллекцииВТорговойТочке.СоздатьМенеджерЗаписи();
			МЗ.ТорговаяТочка = Выборка.ТорговаяТочка;
			МЗ.Коллекция = Выборка.Коллекция;
			МЗ.Номенклатура = Выборка.Номенклатура;
			МЗ.ДатаВыставления = Выборка.ДатаВыставления;
			// +++ VOG Кулаков П.Л. 11.06.2021 DEV-498
			МЗ.Подразделение = Выборка.Подразделение;
			// --- VOG Кулаков П.Л.
			МЗ.Записать();
		КонецЕсли;
	КонецЦикла;
	// --- VOG Кулаков П.Л.
	
	
КонецПроцедуры

// ++ VOG Солодов В.В. 21.07.2021 DEV-722
Процедура ОбновлениеНоменклатурыАспект() Экспорт
	
	ОбновлениеНоменклатурыПроизводителя("Аспект");
	
КонецПроцедуры

Процедура ОбновлениеНоменклатурыПроизводителя(СистемаДляЗагрузки)
	
	Если Не ЗначениеЗаполнено(СистемаДляЗагрузки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПодключения = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.НайтиПоНаименованию(
		СистемаДляЗагрузки, Истина);
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ОбработкаЗагрузки 	= Обработки.ОбновлениеНоменклатурыПалитра.Создать();
	ЧтениеXML 			= Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьФайлЗагрузки(НастройкаПодключения);
	
	СоответствиеСоздаваемыхЭлементов = Новый Соответствие;
	// ++ VOG Солодов В.В. 06.09.2021 CRM-1199
	Если СистемаДляЗагрузки = "Аспект" Тогда
		Обработки.ЗагрузкаНоменклатурыПалитра.ОбработатьФайлАспект(
			ЧтениеXML,
			ОбработкаЗагрузки.ТаблицаЗагрузки,
			"Только существующие",
			СоответствиеСоздаваемыхЭлементов);
	Иначе
		Обработки.ЗагрузкаНоменклатурыПалитра.ОбработатьФайл(
			ЧтениеXML,
			ОбработкаЗагрузки.ТаблицаЗагрузки,
			"Только существующие",
			,
			СоответствиеСоздаваемыхЭлементов);
	КонецЕсли;
	// -- VOG Солодов В.В. 06.09.2021 CRM-1199
	
	Для Каждого Стр Из ОбработкаЗагрузки.ТаблицаЗагрузки Цикл
		Стр.Загрузить = Истина;
	КонецЦикла;
	
	ОбработкаЗагрузки.ТаблицаРеквизитов.Загрузить(Обработки.ОбновлениеНоменклатурыПалитра.ПолучитьТЗРеквизитов());
	Для Каждого Стр Из ОбработкаЗагрузки.ТаблицаРеквизитов Цикл
		Стр.Загрузить = Истина;
	КонецЦикла;
	
	СтруктураОбновляемыхРеквизитов = Обработки.ОбновлениеНоменклатурыПалитра.ПолучитьСтруктуруОбновляемыхРеквизитов(
		ОбработкаЗагрузки.ТаблицаРеквизитов);
	
	СтруктураОбновляемыхРеквизитов.ТЗДизайны.Колонки.Добавить("РежимОбновления");
	Для Каждого Стр Из СтруктураОбновляемыхРеквизитов.ТЗДизайны Цикл
		Стр.РежимОбновления = "Перезапись значений";
	КонецЦикла;
	
	СтруктураОбновляемыхРеквизитов.ТЗНоменклатура.Колонки.Добавить("РежимОбновления");
	Для Каждого Стр Из СтруктураОбновляемыхРеквизитов.ТЗНоменклатура Цикл
		Стр.РежимОбновления = "Перезапись значений";
	КонецЦикла;
	
	МассивОшибок = Новый Массив;
	
	Если СтруктураОбновляемыхРеквизитов.ТЗДизайны.Количество() > 0 Тогда
		
		Обработки.ЗагрузкаНоменклатурыПалитра.ОбновитьДизайны(
			ОбработкаЗагрузки.ТаблицаЗагрузки,
			СтруктураОбновляемыхРеквизитов.ТЗДизайны,
			МассивОшибок);
		
	КонецЕсли;
	
	Если СтруктураОбновляемыхРеквизитов.ТЗНоменклатура.Количество() > 0 Тогда
		
		Обработки.ЗагрузкаНоменклатурыПалитра.ОбновитьНоменклатуру(
			ОбработкаЗагрузки.ТаблицаЗагрузки,
			СтруктураОбновляемыхРеквизитов.ТЗНоменклатура,
			СистемаДляЗагрузки,
			МассивОшибок);
		
	КонецЕсли;
	
	Если СистемаДляЗагрузки = "Палитра" Тогда
		Обработки.ЗагрузкаНоменклатурыПалитра.ПереместитьКаталогВАрхив(НастройкаПодключения);
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
		Обработки.ЗагрузкаНоменклатурыПалитра.ОтправитьОтчетОбОшибках(МассивОшибок);
	КонецЕсли;
	
	Если СоответствиеСоздаваемыхЭлементов.Количество() > 0 Тогда
		Обработки.ЗагрузкаНоменклатурыПалитра.ОтправитьОтчетОСозданныхЭлементах(СоответствиеСоздаваемыхЭлементов);
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 21.07.2021 DEV-722

Процедура ОбновлениеНоменклатурыПалитры() Экспорт //Ульянов И.В. DEV-267
	
	// ++ VOG Солодов В.В. 22.07.2021 DEV-722
	ОбновлениеНоменклатурыПроизводителя("Палитра");
	// До изменения
	//ОбработкаЗагрузки = Обработки.ОбновлениеНоменклатурыПалитра.Создать();
	//ЧтениеXML = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьФайлЗагрузки(Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.Палитра);
	//
	//// ++ VOG Солодов В.В. 10.06.2021 DEV-415
	//СоответствиеСоздаваемыхЭлементов = Новый Соответствие;
	//Обработки.ЗагрузкаНоменклатурыПалитра.ОбработатьФайл(ЧтениеXML,
	//													ОбработкаЗагрузки.ТаблицаЗагрузки,
	//													"Только существующие",
	//													,
	//													СоответствиеСоздаваемыхЭлементов);
	//// До изменения
	////Обработки.ЗагрузкаНоменклатурыПалитра.ОбработатьФайл(ЧтениеXML,ОбработкаЗагрузки.ТаблицаЗагрузки,"Только существующие");
	//// -- VOG Солодов В.В. 10.06.2021 DEV-415
	//
	//Для каждого Стр из ОбработкаЗагрузки.ТаблицаЗагрузки цикл
	//	Стр.Загрузить = Истина;		
	//КонецЦикла;	
	//
	//ОбработкаЗагрузки.ТаблицаРеквизитов.Загрузить(Обработки.ОбновлениеНоменклатурыПалитра.ПолучитьТЗРеквизитов());
	//Для каждого Стр из ОбработкаЗагрузки.ТаблицаРеквизитов цикл
	//	Стр.Загрузить = Истина;		
	//КонецЦикла;		
	//
	//СтруктураОбновляемыхРеквизитов = Обработки.ОбновлениеНоменклатурыПалитра.ПолучитьСтруктуруОбновляемыхРеквизитов(ОбработкаЗагрузки.ТаблицаРеквизитов);	
	//
	//СтруктураОбновляемыхРеквизитов.ТЗДизайны.Колонки.Добавить("РежимОбновления");
	//Для каждого Стр из СтруктураОбновляемыхРеквизитов.ТЗДизайны цикл
	//	Стр.РежимОбновления = "Перезапись значений";
	//КонецЦикла;		
	//
	//СтруктураОбновляемыхРеквизитов.ТЗНоменклатура.Колонки.Добавить("РежимОбновления");
	//Для каждого Стр из СтруктураОбновляемыхРеквизитов.ТЗНоменклатура цикл
	//	Стр.РежимОбновления = "Перезапись значений";
	//КонецЦикла;		
	//
	//// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
	//МассивОшибок = Новый Массив;
	//
	//Если СтруктураОбновляемыхРеквизитов.ТЗДизайны.Количество() > 0 Тогда
	//	Обработки.ЗагрузкаНоменклатурыПалитра.ОбновитьДизайны(ОбработкаЗагрузки.ТаблицаЗагрузки,СтруктураОбновляемыхРеквизитов.ТЗДизайны, МассивОшибок);
	//КонецЕсли;	
	//
	//Если СтруктураОбновляемыхРеквизитов.ТЗНоменклатура.Количество() > 0 Тогда
	//	Обработки.ЗагрузкаНоменклатурыПалитра.ОбновитьНоменклатуру(ОбработкаЗагрузки.ТаблицаЗагрузки,СтруктураОбновляемыхРеквизитов.ТЗНоменклатура, "Палитра", МассивОшибок);
	//КонецЕсли;
	//
	//Обработки.ЗагрузкаНоменклатурыПалитра.ПереместитьКаталогВАрхив(Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.Палитра);
	//
	//Если МассивОшибок.Количество() > 0 Тогда
	//	Обработки.ЗагрузкаНоменклатурыПалитра.ОтправитьОтчетОбОшибках(МассивОшибок);
	//КонецЕсли;
	//// --- VOG Кулаков П.Л.
	//
	//// ++ VOG Солодов В.В. 10.06.2021 DEV-415
	//Если СоответствиеСоздаваемыхЭлементов.Количество() > 0 Тогда
	//	Обработки.ЗагрузкаНоменклатурыПалитра.ОтправитьОтчетОСозданныхЭлементах(СоответствиеСоздаваемыхЭлементов);
	//КонецЕсли;
	//// -- VOG Солодов В.В. 10.06.2021 DEV-415
	// -- VOG Солодов В.В. 22.07.2021 DEV-722
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 27.05.2021 DEV-578
Процедура вогРасчетРейтингов() Экспорт
	
		ТекущаяДата = ТекущаяДата();
	
	ЗапросРейтингов = Новый Запрос;
	ЗапросРейтингов.Текст = 
		"ВЫБРАТЬ
		|	вогРейтинги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогРейтинги КАК вогРейтинги
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(вогРейтинги.ДатаНачала, ДЕНЬ) <= &ТекущаяДата
		|	И (КОНЕЦПЕРИОДА(вогРейтинги.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
		|			ИЛИ вогРейтинги.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|	И НЕ вогРейтинги.Закрыт
		|	И НЕ вогРейтинги.ПометкаУдаления";
	
	ЗапросРейтингов.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	РезультатЗапросаРейтингов = ЗапросРейтингов.Выполнить();
	
	ВыборкаДетальныеЗаписиРейтигов = РезультатЗапросаРейтингов.Выбрать();
	
	Пока ВыборкаДетальныеЗаписиРейтигов.Следующий() Цикл
		
		Рейтинг = ВыборкаДетальныеЗаписиРейтигов.Ссылка;
		АлгоритмВыполнения = Рейтинг.АлгоритмРасчета;
		Если ПустаяСтрока(АлгоритмВыполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаРейтингов = Новый ТаблицаЗначений;
		ТаблицаРейтингов.Колонки.Добавить("Рейтинг");
		ТаблицаРейтингов.Колонки.Добавить("Участник");
		ТаблицаРейтингов.Колонки.Добавить("МестоВРейтинге");
		ТаблицаРейтингов.Колонки.Добавить("Показатель");
				
		Попытка
			Выполнить(АлгоритмВыполнения);
		Исключение
			ЗаписьЖурналаРегистрации("Выполнения алгиритма пересчета рейтинга",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		КонецПопытки;
		
		Если ТаблицаРейтингов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// +++ VOG Кулаков П.Л. 22.06.2021
		// Удалим расчет рейтинга за день и заполним новыми данными
		НаборЗаписей = РегистрыСведений.вогИсторияРейтингов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Рейтинг.Установить(Рейтинг);
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		// --- VOG Кулаков П.Л.
		
		Для Каждого СтрокаРейтинга Из ТаблицаРейтингов Цикл
			МенеджерЗаписи = РегистрыСведений.вогИсторияРейтингов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ТекущаяДата;
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаРейтинга);
			МенеджерЗаписи.Подразделение = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(МенеджерЗаписи.Участник.Подразделение);
			МенеджерЗаписи.Рейтинг = Рейтинг;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
	КонецЦикла;

	
КонецПроцедуры // --- VOG Кулаков П.Л.

// ++ VOG Солодов В.В. 31.08.2021 DEV-911
Процедура ФоноваяЗагрузкаНоменклатурыПроизводителя(СистемаДляЗагрузки, ТаблицаЗагрузки, АдресХранилища) Экспорт
	
	Попытка
		Если СистемаДляЗагрузки = "Палитра" Тогда
			Обработки.ЗагрузкаНоменклатурыПалитра.ЗагрузитьССервераПалитра(ТаблицаЗагрузки, АдресХранилища);
		Иначе
			Обработки.ЗагрузкаНоменклатурыПалитра.ЗагрузитьССервераАспект(ТаблицаЗагрузки, АдресХранилища);
		КонецЕсли;
	Исключение
		ТаблицаЗагрузки = ОписаниеОшибки();
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(ТаблицаЗагрузки, АдресХранилища);
	
КонецПроцедуры
// -- VOG Солодов В.В. 31.08.2021 DEV-911