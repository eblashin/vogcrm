
////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для обработки ТекущиеДела
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет виджеты формы Текущие дела
//
// Параметры:
//   Форма - УправляемаяФорма с виджетами
//   Виджеты - Массив - массив ссылок на виджеты, которые следует заполнить.
Процедура ЗаполнитьВиджетыТекущихДел(Форма, Виджеты = Неопределено,ТекущееКоличествоСтрок = 3, ТекущееКоличествоСтолбцов = 4) Экспорт 
	
	Параметры = Новый Структура;
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ИндексВиджета", "");
	Параметры.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Параметры.Вставить("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	HTMLПредставлениеПустогоВиджета = HTMLПредставлениеПустогоВиджета();
	
	ДоступныеВиджеты = Справочники.Виджеты.ДоступныеВиджеты();
	
	КоличествоСтрок = ТекущееКоличествоСтрок;
	КоличествоСтолбцов = ТекущееКоличествоСтолбцов;
	
	Для ИндексСтроки = 1 По КоличествоСтрок Цикл
		
		Для ИндексСтолбца = 1 По КоличествоСтолбцов Цикл
			
			ИндексВиджета = "" + ИндексСтроки + "_" + ИндексСтолбца;
			
			ТекущийВиджет = Форма["Виджет" + ИндексВиджета];
			
			Если ЗначениеЗаполнено(Виджеты)
				И Виджеты.Найти(ТекущийВиджет) = Неопределено Тогда
				
				Продолжить;
			КонецЕсли;
			
			Форма["HTML" + ИндексВиджета] = "";
			Форма.Элементы["HTML" + ИндексВиджета].Видимость = Истина;
			//Форма.Элементы["ГруппаДиаграмма" + ИндексВиджета].Видимость = Ложь;
			
			Параметры.ИндексВиджета = ИндексВиджета;
			
			Если Не ЗначениеЗаполнено(ТекущийВиджет)
				Или ДоступныеВиджеты.Найти(ТекущийВиджет) = Неопределено Тогда
				
				Форма["HTML" + ИндексВиджета] = HTMLПредставлениеПустогоВиджета;
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.МоиЗадачи Тогда
				ЗаполнитьВиджетМоиЗадачи(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Почта Тогда
				ЗаполнитьВиджетПочта(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Мероприятия Тогда
				ЗаполнитьВиджетМероприятия(Параметры);
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Звонки Тогда
				ЗаполнитьВиджетЗвонки(Параметры);
			// ++ VOG Ульянов И.В. 06.02.2020 CRM-239
			ИначеЕсли ТекущийВиджет = Справочники.Виджеты.Командировка Тогда
				ЗаполнитьВиджетКомандировки(Параметры);
			// -- VOG Ульянов И.В. 06.02.2020 CRM-239	
			Иначе
				Форма["HTML" + ИндексВиджета] = HTMLПредставлениеПустогоВиджета;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает настройки виджета
//
// Параметры:
//   Виджет - СправочникСсылка.Виджеты
//
// Возвращаемое значение:
//   Структура - параметры виджета, содержимое структуры соответствует
//               возвращаемому значению функцией ТекущиеДелаКлиентСервер.СтруктураВиджетаФормы
//
Функция НастройкиВиджета(Виджет) Экспорт
	
	Результат = ТекущиеДелаДокументооборотКлиентСервер.СтруктураВиджетаФормы();
	
	Результат.Показатели = ПоказателиВиджета(Виджет);
	
	//Если Виджет = Справочники.Виджеты.Почта Тогда
	//	Результат.ПапкиПисем = РегистрыСведений.ПапкиПисемТекущихДел.ВыбранныеПапкиПользователя();
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает настройки виджета формы.
//
// Параметры:
//   ИмяВиджетаФормы - Строка - имя виджета в форме (соответствует имени реквизита форма, содержащего виджет).
//   Настройки - Структура - настройки виджета, состав структуры соответствует возвращаемому значению
//                           функции ТекущиеДелаКлиентСервер.СтруктураВиджетаФормы
//
Процедура ЗаписатьНастройкиВиджетаФормы(ИмяВиджетаФормы, Настройки) Экспорт
	
	НачатьТранзакцию();
	
	НастройкиТекущихДел = Новый Структура(ИмяВиджетаФормы, Настройки.Виджет);
	РегистрыСведений.НастройкиТекущихДел.ЗаписатьНастройки(НастройкиТекущихДел);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Для Каждого СтрПоказательВиджета Из Настройки.Показатели Цикл
		ЗаписьНастройки = РегистрыСведений.ПороговыеЗначенияПоказателейВиджетов.СоздатьМенеджерЗаписи();
		ЗаписьНастройки.Пользователь = ТекущийПользователь;
		ЗаписьНастройки.Показатель = СтрПоказательВиджета.Показатель;
		ЗаписьНастройки.Значение = СтрПоказательВиджета.ПороговоеЗначение;
		ЗаписьНастройки.Записать();
	КонецЦикла;
	
	//Если Настройки.Виджет = Справочники.Виджеты.Почта Тогда
	//	РегистрыСведений.ПапкиПисемТекущихДел.СохранитьВыбранныеПапкиПользователя(
	//		ТекущийПользователь, Настройки.ПапкиПисем);
	//КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает ссылку на ежедневный отчет по дате.
//
// Параметры:
//   ДатаОтчета - Дата
//
// Возвращаемое значение:
//   ДокументСсылка.ЕжедневныйОтчет
//
Функция ПолучитьЕжедневныйОтчетНаДату(ДатаОтчета) Экспорт
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжедневныйОтчет.Ссылка
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Пользователь = &ТекущийПользователь
		|	И НЕ ЕжедневныйОтчет.ПометкаУдаления
		|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = &Период";

	Запрос.УстановитьПараметр("Период", НачалоДня(ДатаОтчета));
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Результат =  Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик регламентного задания РасчетПоказателейРаботыПользователей.
// Предназначен для накопления истории значений показателей пользователя. 
// История значений показателей используется в качестве исходных данных 
// для графика загруженности пользователя на рабочем столе.
// 
Процедура РасчетПоказателейРаботыПользователей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользователиДляРасчета = 
		РегистрыСведений.НастройкиТекущихДел.ПользователиСПризнакомОтображенияГрафикаНагрузки();
		
	Если ПользователиДляРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РассчитатьПоказателиПочтыДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиЗадачДляПользователей(ПользователиДляРасчета);
//	РассчитатьПоказателиКалендаряДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиМероприятийДляПользователей(ПользователиДляРасчета);
//	РассчитатьПоказателиКонтроляДляПользователей(ПользователиДляРасчета);
	
КонецПроцедуры

// Заполняет кэш картинок формы Текущие дела.
//
Процедура ЗаполнитьКэшКартинокФормыТекущиеДела(Форма) Экспорт
	
	КэшКартинок = Новый Структура;
	КэшКартинок.Вставить("ШестерёнкаПлоская", БиблиотекаКартинок.ШестерёнкаПлоская);
	КэшКартинок.Вставить("БизнесПроцесс", БиблиотекаКартинок.БизнесПроцесс);
	КэшКартинок.Вставить("НаписатьПисьмо", БиблиотекаКартинок.НаписатьПисьмо);
	КэшКартинок.Вставить("КартинкаКонтроль16", БиблиотекаКартинок.КартинкаКонтроль16);
	
	Форма.КэшКартинок = КэшКартинок;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает показатели виджета
//
// Параметры:
//   Виджет - СправочникСсылка.Виджеты
//
// Возвращаемое значение:
//   - Массив
//      - СправочникСсылка.ПоказателиВиджетов
//
Функция ПоказателиВиджета(Виджет)
	
	ПоказателиВиджета = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Виджет) Тогда
		Возврат ПоказателиВиджета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиВиджетов.Ссылка КАК Показатель,
		|	ПоказателиВиджетов.ИмяПредопределенныхДанных КАК ИмяПоказателя,
		|	ЕСТЬNULL(ПороговыеЗначенияПоказателейВиджетов.Значение, ПоказателиВиджетов.ПороговоеЗначение) КАК ПороговоеЗначение
		|ИЗ
		|	Справочник.ПоказателиВиджетов КАК ПоказателиВиджетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПороговыеЗначенияПоказателейВиджетов КАК ПороговыеЗначенияПоказателейВиджетов
		|		ПО (ПороговыеЗначенияПоказателейВиджетов.Показатель = ПоказателиВиджетов.Ссылка)
		|			И (ПороговыеЗначенияПоказателейВиджетов.Пользователь = &Пользователь)
		|ГДЕ
		|	ПоказателиВиджетов.Виджет = &Виджет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоказателиВиджетов.Порядок";
	
	Запрос.УстановитьПараметр("Виджет", Виджет);
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрПоказательВиджета Из ТаблицаПоказателей Цикл
		Показатель = ТекущиеДелаДокументооборотКлиентСервер.СтруктураПоказателяВиджета();
		ЗаполнитьЗначенияСвойств(Показатель, СтрПоказательВиджета);
		ПоказателиВиджета.Добавить(Показатель);
	КонецЦикла;
	
	Возврат ПоказателиВиджета;
	
КонецФункции

// Возвращает картинку соответствующую значению перечисления ЦветаРабочегоКалендаря.
//
// Параметры:
//   Цвет - ПеречислениеСсылка.ЦветаРабочегоКалендаря
//
// Возвращаемое значение:
//   Картинка
//
Функция КартинкаЦветаСобытияКалендаря(Цвет)
	
	Картинка = Новый Картинка;
	
	Если Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый Тогда
		Картинка = БиблиотекаКартинок.ЦветЖелтый;
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый Тогда
		Картинка = БиблиотекаКартинок.ЦветЗеленый;
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный Тогда
		Картинка = БиблиотекаКартинок.ЦветКрасный;
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый Тогда
		Картинка = БиблиотекаКартинок.ЦветОранжевый;
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий Тогда
		Картинка = БиблиотекаКартинок.ЦветСиний;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФормированиеHTMLПредставленияВиджета

// Возвращает html - представление пустого виджета.
//
// Возвращаемое значение:
//   Строка - текст html
//
Функция HTMLПредставлениеПустогоВиджета()
	
	HTMLТекст = "<html><head>"
		+ СтильHTMLДляПустогоВиджета()
		+ "<body><table height=""100%"">"
		+ "<tr align=""center"" valign =""middle""><td>";
	HTMLТекст = HTMLТекст + "<div class=""visibility_img"">";
	ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, БиблиотекаКартинок.CRM_Плюс64, "НастройкаВиджета");
	HTMLТекст = HTMLТекст + "</div>";
	HTMLТекст = HTMLТекст
		+ "</td></tr>"
		+ "</table></body></html>";
		
	Возврат HTMLТекст;
	
КонецФункции

// Возвращает html представление виджета.
//
// Параметры:
//   Заголовок - Строка - html текст заголовка виджета.
//   Подвал - Строка - html текст подвала виджета.
//   ТелоВиджета - Строка - html текст тела виджета.
//   ФонаВиджета - Строка - цвет фона виджета в виде шестнадцатеричного значения.
//   ЦветРамкиТаблицы - Строка - цвет рамок таблиц в виджете, в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка - html представление виджета.
//
Функция HTMLПредставлениеВиджета(
		Заголовок = "", Подвал = "", ТелоВиджета, ФонаВиджета, ЦветРамкиТаблицы)
		
//	HTMLТекст = "<html><head><meta name=""viewport"" content=""viewport-fit=cover, width=device-width"" />"	
	HTMLТекст = "<html><head><meta name=""viewport"" content=""width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"" />"
		+ СтильHTML(ЦветРамкиТаблицы)
		+ "<body bgcolor=" + ФонаВиджета + ">";
		
	HTMLТекст = HTMLТекст + "<table class=""one"">";
	
	HTMLТекст = HTMLТекст + "<tr><td>";
	
	HTMLТекст = HTMLТекст + "<table class=""title"">";
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td class=""menu"">";
	ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
		HTMLТекст, БиблиотекаКартинок.ТекущиеДелаМеню, "МенюВиджета");
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "<td class=""title"">";
	HTMLТекст = HTMLТекст + "<p>";	
	HTMLТекст = HTMLТекст + Заголовок;
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</td></tr>";
	
	HTMLТекст = HTMLТекст + "<tr class=""height100""><td>";
	HTMLТекст = HTMLТекст + ТелоВиджета;
	HTMLТекст = HTMLТекст + "</td></tr>";
	
	HTMLТекст = HTMLТекст + "<tr><td>";
	
	HTMLТекст = HTMLТекст + "<table>";
	HTMLТекст = HTMLТекст + "<tr>";
	
	HTMLТекст = HTMLТекст + "<td width=""5"">";
	HTMLТекст = HTMLТекст + "</td>";
	
	HTMLТекст = HTMLТекст + "<td height=""18"">";
	HTMLТекст = HTMLТекст + Подвал;
	HTMLТекст = HTMLТекст + "</td>";
	
	HTMLТекст = HTMLТекст + "</tr>";
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</td></tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);	
	
	Возврат HTMLТекст;
	
КонецФункции

// Возвращает html представление заголовка виджета.
//
// Параметры:
//   Заголовок - Строка
//   Значение - Число - число отображаемое в заголовке виджета.
//   Ссылка - Строка - навигационная ссылка на объект или форму.
//   ЦветЗаголовка - Строка - цвет заголовка виджета в виде шестнадцатеричного значения.
//   ЦветЗначения - Строка - цвет значения заголовка виджета в виде шестнадцатеричного значения.
//
Функция ЗаголовокВиджета(Заголовок, Значение, Ссылка, ЦветЗаголовка, ЦветЗначения)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Разделитель = ":";
		ПредставлениеЗначенияВЗаголовке = Значение;
	Иначе
		Разделитель = "";
		ПредставлениеЗначенияВЗаголовке = "";
	КонецЕсли;
	
	Если Найти(Ссылка, "e1cib") Тогда
		v8doc = "v8doc:";
	Иначе
		v8doc = "";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=%1%2><FONT class=""PT12"" color=%3><B>%4%5&nbsp;<FONT color=%6>%7</B></FONT></FONT></A>",
		v8doc,
		Ссылка,
		ЦветЗаголовка,
		СтрЗаменить(Заголовок, " ", "&nbsp;"),
		Разделитель,
		ЦветЗначения,
		ПредставлениеЗначенияВЗаголовке);
		
КонецФункции

// Возвращает html представление тела виджета в виде 2х или 3х областей с показателями.
//
// Параметры:
//   Показатели - Массив
//     - Структура - содержимое соответствует возвращаемому значению функции СтруктураПоказателя.
//
// Возвращаемое значение:
//   Строка - html представление тела виджета
//
Функция ТелоВиджетаОбластями(Показатели)
	
	КоличествоПоказателей = Показатели.Количество();
	
	classCSS = """frame1""";
	Если КоличествоПоказателей = 3 Тогда
		classCSS = """frame2""";
	КонецЕсли;
	
	Если КоличествоПоказателей = 3 Тогда
		ТекстHTML = "<table>";
	Иначе
		ТекстHTML = "<table class=""frame"">";
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "<tr class=""middle"">";
	
	Для Каждого СтрПоказатель Из Показатели Цикл
		
		ТекстHTML = ТекстHTML + "<td class=""middle"">";
		ТекстHTML = ТекстHTML + "<table class=" + classCSS + ">";
		ТекстHTML = ТекстHTML + "<tr class=""middle""><td class=""frame"" bgcolor = ""white"">";
		
		Если Найти(СтрПоказатель.Ссылка, "e1cib") Тогда
			v8doc = "v8doc:";
		Иначе
			v8doc = "";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<A href=%1%2><FONT class=""PT20"" color=""%3""><B>%4</B></FONT></A>",
				v8doc,
				СтрПоказатель.Ссылка,
				СтрПоказатель.ЦветЗначения,
				СтрПоказатель.Значение);
		
		ТекстHTML = ТекстHTML + "</td></tr>";
		ТекстHTML = ТекстHTML + "<tr class=""middle""><td height = ""1"">";
		ТекстHTML = ТекстHTML + "<p>";
		
		ТекстHTML = ТекстHTML + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<A href=%1%2><FONT class=""PT8"" color=""%3"">%4</FONT></A>",
				v8doc,
				СтрПоказатель.Ссылка,
				СтрПоказатель.ЦветЗаголовка,
				СтрЗаменить(СтрПоказатель.Заголовок, " ", "&nbsp;"));
		ТекстHTML = ТекстHTML + "</td></tr>";
		ТекстHTML = ТекстHTML + "</table>";
		ТекстHTML = ТекстHTML + "</td>";
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "</tr>";
	ТекстHTML = ТекстHTML + "</table>";
	
	Возврат ТекстHTML;
	
КонецФункции

// Возвращает максимальное количество строк для виджета
// в виде списка с показателями.
//
Функция МаксимальноеКоличествоСтрокВВиджете()
	
	МаксимальноеКоличествоСтрок = 4;
	
	Возврат МаксимальноеКоличествоСтрок;
	
КонецФункции

// Возвращает html представление тела виджета в виде списка с показателями.
//
// Параметры:
//   Показатели - Массив
//     - Структура - содержимое соответствует возвращаемому значению функции СтруктураПоказателяДляСписка.
//   ПоказыватьКартинки - Булево - включает отображение колонки с картинкой для показателя
//   ПоказыватьКомментарий - Булево - включает отображение колонки с комментарием для показателя
//
// Возвращаемое значение:
//   Строка - html представление тела виджета
//
Функция ТелоВиджетаСписком(Показатели, ПоказыватьКартинки = Ложь, ПоказыватьКомментарий = Ложь)
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	ВыведеноСтрок = 0;
	
	ТекстHTML = "<table class=""list"">";
	
	Для Каждого СтрПоказатель Из Показатели Цикл
		
		Если ВыведеноСтрок = МаксимальноеКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + "<tr class=""list"">";
		
		Если ПоказыватьКартинки Тогда
			ТекстHTML = ТекстHTML + "<td class=""leftlist"">";
			ТекстHTML = ТекстHTML + СтрПоказатель.Картинка;
			ТекстHTML = ТекстHTML + "</td>";
		КонецЕсли;
		
		ТегКолонки = "<td>";
		Если ПоказыватьКартинки И Не ПоказыватьКомментарий Тогда
			ТегКолонки = "<td class=""rightlist"">";
		ИначеЕсли Не ПоказыватьКартинки И ПоказыватьКомментарий Тогда
			ТегКолонки = "<td class=""leftlist"">";
		КонецЕсли;
		ТекстHTML = ТекстHTML + ТегКолонки;
		
		Если Найти(СтрПоказатель.Ссылка, "e1cib") Тогда
			v8doc = "v8doc:";
		Иначе
			v8doc = "";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A title=""%6"" href=%1%2 rel=""%5""><FONT color=""%3"">%4</FONT></A>",		
//			"<A href=%1%2 rel=""%5""><FONT color=""%3"">%4</FONT></A>",
			v8doc,
			СтрПоказатель.Ссылка,
			ЦветТекста_Обычный,
			СтрПоказатель.Значение,
			СтрПоказатель.ИД,
			СтрПоказатель.Подсказка,
			);
		ТекстHTML = ТекстHTML + "</td>";
		
		ТекстHTML = ТекстHTML + "<!-- Комментарий -->";
		
		Если ПоказыватьКомментарий Тогда
			ТекстHTML = ТекстHTML + "<td class=""rightlist"">";
			ТекстHTML = ТекстHTML + СтрПоказатель.Комментарий;
			ТекстHTML = ТекстHTML + "</td>";
		КонецЕсли;
		
		ТекстHTML = ТекстHTML + "</tr>";
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
	КонецЦикла;
	
	Если ВыведеноСтрок < МаксимальноеКоличествоСтрок Тогда
		ТекстHTML = ТекстHTML + "<tr class=""height100""><td/></tr>";
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "</table>";
	
	Возврат ТекстHTML;
	
КонецФункции

// Возвращает подвал для виджета в виде списка с показателями.
// Если количество показателей больше максимального допустимого, то
// выводить картинка с 3-мя точками.
//
// Параметры:
//   КоличествоПоказателей - Число
//   Ссылка - Строка - ссылка под картинкой
//
Функция ПодвалВиджетаСписком(КоличествоПоказателей, Ссылка)
	
	ПодвалВиджета = "";
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	
	Если КоличествоПоказателей > МаксимальноеКоличествоСтрок Тогда
		ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
			ПодвалВиджета, БиблиотекаКартинок.ТриТочки, Ссылка);
	КонецЕсли;
	
	Возврат ПодвалВиджета;
	
КонецФункции

// Возвращает html представление тела виджета c текстом по центру.
//
// Параметры:
//   Текст - Строка
//
// Возвращаемое значение:
//   Строка - html представление тела виджета
//
Функция ТелоВиджетаТекстомПоЦентру(Текст)
	
	Возврат "<table><tr class=""middle""><td>"
		+ Текст
		+ "</td></tr></table>";
		
КонецФункции

// Возвращает представление значения строкой с учетом допустимой длины.
//
// Параметры:
//   Значение - Строка
//   ДопустимаяДлинаЗначения - Число
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеЗначения(Значение, ДопустимаяДлинаЗначения)
	
	ПредставлениеЗначения = Значение;
	
	Если СтрДлина(ПредставлениеЗначения) > ДопустимаяДлинаЗначения Тогда
		ПредставлениеЗначения = Лев(ПредставлениеЗначения, ДопустимаяДлинаЗначения - 3) + "...";
	КонецЕсли;
	
	Возврат СтрЗаменить(ПредставлениеЗначения, " ", "&nbsp;");
	
КонецФункции

// Возвращает структуру показателя.
//
// Возвращаемое значение:
//   Структура
//     Заголовок - Строка
//     ЦветЗаголовка - Строка
//     Значение - Число
//     ЦветЗначения - Строка
//     Ссылка - Неопределено
//
Функция СтруктураПоказателя()
	
	СтруктураПоказателя = Новый Структура;
	СтруктураПоказателя.Вставить("Заголовок", "");
	СтруктураПоказателя.Вставить("ИмяПоказателя", "");
	СтруктураПоказателя.Вставить("ЦветЗаголовка", "");
	СтруктураПоказателя.Вставить("Значение", 0);
	СтруктураПоказателя.Вставить("ЦветЗначения", "");
	СтруктураПоказателя.Вставить("Ссылка", Неопределено);
	
	Возврат СтруктураПоказателя;
	
КонецФункции

// Возвращает структуру показателя для списка показателей
//
// Возвращаемое значение:
//   Структура
//     Картинка - Строка
//     Значение - Строка
//     Ссылка - Число
//     Комментарий - Строка
//
Функция СтруктураПоказателяДляСписка()
	
	СтруктураПоказателя = Новый Структура;
	СтруктураПоказателя.Вставить("Картинка", "");
	СтруктураПоказателя.Вставить("Значение", "");
	СтруктураПоказателя.Вставить("Ссылка", "");
	СтруктураПоказателя.Вставить("Комментарий", "");
	СтруктураПоказателя.Вставить("ИД", "");
	СтруктураПоказателя.Вставить("Подсказка", "");
	
	Возврат СтруктураПоказателя;
	
КонецФункции

// Возвращает стиль CSS для формирования html представлений виджетов.
//
// Параметры:
//   ЦветРамкиТаблицы - Строка - цвет рамки класса "td.frame", в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка - стиль CSS
//
Функция СтильHTML(ЦветРамкиТаблицы)
	
	Возврат
		"<style type=""text/css"">
		|body {
		|		overflow:    hidden;
		|		margin-top:  0px;
		|		margin-bottom: 0px;
		|		margin-left: 0px;
		|		margin-right: 0px;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		}
		|	table {
		|		width: 100%;
		|		height: 100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;
		|		padding: 0%;
		|		}
		|	table.one {
		|		width: 230px;
		|		height: 100px;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;
		|		padding: 0%;
		|		}
		|	table.frame {
		|		width: 220px;
		|		height: 100px;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;
		|		padding-left: 5px;
		|		}
		|	table.frame1 {
		|		width: 97px;
		|		height: 85px;
		|		border-collapse: collapse;
		|		text-align: center;
		|		padding: 0%;
		|		}
		|	table.frame2 {
		|		width: 65px;
		|		height: 85px;
		|		border-collapse: collapse;
		|		text-align: center;
		|		padding: 0%;
		|		}
		|	table.list {
		|		width: 100%;
		|		height: 100%;
		|		font-family: Arial;
		|		font-size:   13px;
		|		border: 0px solid;
		|		}
		|	table.title {
		|		width: 100%;
		|		height: 1px;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;
		|		padding: 0%;
		|		}
		|	tr.middle {
		|		width: 100%;
		|		vertical-align: middle;
		|		text-align: center;
		|		}
		|	tr.height100 {
		|		height: 100%;
		|		}
		|	tr.list {		
		|		height: 20px;
		|		}
		//|	tr.padding5 {
		//|		vertical-align: middle;
		//|		text-align: center;
		//|		}
		|	td {vertical-align: top;}
		|	td. {vertical-align: top;}
		|	td.middle {
		|		vertical-align: middle;
		|		text-align: center;
		|		}
		|	td.frame {
		|		border: 1px solid " + ЦветРамкиТаблицы + ";
		|		border-bottom: double " + ЦветРамкиТаблицы + ";
		|		vertical-align: middle;
		|		text-align: center;
		|		}
		|	td.menu {
		|		width: 20px;
		|		vertical-align: top;
		|		}
		|	td.title {
		|		width: 100%;
		|		vertical-align: middle;
		|		text-align: center;
		|		padding-right: 20px;
		|		}
		|	td.leftlist {
// VOG Ульянов И.В. 12.02.2020 CRM-491		
		|		padding-left: 1px; 
		|		}
		|	td.rightlist {
// VOG Ульянов И.В. 12.02.2020 CRM-491		
		|		padding-right: 1px;
		|		}
		|	FONT.PT8 {font-size: 8pt;}
		|	FONT.PT12 {font-size: 12pt;}
		|	FONT.PT20 {font-size: 20pt;}
		|	a:link {color: #006699; text-decoration: none;}
		|	a:visited {color: #006699; text-decoration: none;}
		|	a:hover {color: #006699; text-decoration: underline;}
		|	p {margin-top: 7px;}
		|	img {border: 0px;}
		|</style>";
	
КонецФункции

// Возвращает стиль CSS для пустого html представлений виджетов.
//
// Возвращаемое значение:
//   Строка - стиль CSS
//
Функция СтильHTMLДляПустогоВиджета()
	
	Возврат
		"<style type=""text/css"">
		|	body {
		|		overflow:    hidden;
		|		margin-top:  0px;
		|		margin-bottom: 0px;
		|		margin-left: 0px;
		|		margin-right: 0px;
		|		font-family: Arial;
		|		}
		|	table {
		|		width:       100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;
		|		padding: 0%;
		|		}
		|	img {border: 0px;}
		|	p {margin-top: 7px;}
		|	.visibility_img{visibility:hidden;}
		|</style>";
	
КонецФункции

// Возвращает цвета для html представлений виджетов по индексу виджета.
//
// Параметры:
//   ИндексВиджета - Строка - индекс виджета в форме.
//
Функция ЦветаВиджета(ИндексВиджета)
	
	ЦветаВиджета = Новый Структура;
	ЦветаВиджета.Вставить("ЦветФона", "");
	ЦветаВиджета.Вставить("ЦветРамкиТаблицы", "");
	ЦветаВиджета.Вставить("ЦветПодписи", "");
	
	// ++ VOG Ульянов И.В. 06.02.2020 CRM-239
	//Если ИндексВиджета = "1_1" Или ИндексВиджета = "2_2" Или ИндексВиджета = "3_4" Тогда
	//	ЦветаВиджета.ЦветФона = "#E7EFFE";
	//	ЦветаВиджета.ЦветРамкиТаблицы = "#AEB4C0";
	//	ЦветаВиджета.ЦветПодписи = "868CA3";
	//ИначеЕсли ИндексВиджета = "1_2" Или ИндексВиджета = "2_4" Или ИндексВиджета = "3_1" Тогда
	//	ЦветаВиджета.ЦветФона = "#FEF5CB";
	//	ЦветаВиджета.ЦветРамкиТаблицы = "C0B99A";
	//	ЦветаВиджета.ЦветПодписи = "9D9882";
	//ИначеЕсли ИндексВиджета = "1_3" Или ИндексВиджета = "2_1" Или ИндексВиджета = "3_3" Тогда
	//	ЦветаВиджета.ЦветФона = "#F1FFC7";
	//	ЦветаВиджета.ЦветРамкиТаблицы = "B6C196";
	//	ЦветаВиджета.ЦветПодписи = "969E80";
	//ИначеЕсли ИндексВиджета = "1_4" Или ИндексВиджета = "2_3" Или ИндексВиджета = "3_2" Тогда
	//	ЦветаВиджета.ЦветФона = "#FCFFBB";
	//	ЦветаВиджета.ЦветРамкиТаблицы = "BFC18E";
	//	ЦветаВиджета.ЦветПодписи = "9C9E79";
	//КонецЕсли;
	Если ИндексВиджета = "1_1" Или ИндексВиджета = "1_5" Или ИндексВиджета = "2_3" Или  ИндексВиджета = "3_1" Или ИндексВиджета = "3_5" Тогда
		ЦветаВиджета.ЦветФона = "#E7EFFE";
		ЦветаВиджета.ЦветРамкиТаблицы = "#AEB4C0";
		ЦветаВиджета.ЦветПодписи = "868CA3";
	ИначеЕсли ИндексВиджета = "1_2" Или ИндексВиджета = "1_6" Или ИндексВиджета = "2_4" Или  ИндексВиджета = "3_2" Или ИндексВиджета = "3_6" Тогда
		ЦветаВиджета.ЦветФона = "#FEF5CB";
		ЦветаВиджета.ЦветРамкиТаблицы = "C0B99A";
		ЦветаВиджета.ЦветПодписи = "9D9882";
	ИначеЕсли ИндексВиджета = "1_3" Или ИндексВиджета = "2_1" Или ИндексВиджета = "2_5" Или  ИндексВиджета = "3_3" Тогда
		ЦветаВиджета.ЦветФона = "#F1FFC7";
		ЦветаВиджета.ЦветРамкиТаблицы = "B6C196";
		ЦветаВиджета.ЦветПодписи = "969E80";
	ИначеЕсли ИндексВиджета = "1_4" Или ИндексВиджета = "2_2" Или ИндексВиджета = "2_6" Или  ИндексВиджета = "3_4" Тогда
		ЦветаВиджета.ЦветФона = "#FCFFBB";
		ЦветаВиджета.ЦветРамкиТаблицы = "BFC18E";
		ЦветаВиджета.ЦветПодписи = "9C9E79";
	КонецЕсли;
	// -- VOG Ульянов И.В. 06.02.2020 CRM-239
	
	Возврат ЦветаВиджета;
	
КонецФункции

// Возвращает цвет обычного текста виджета, в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка
//
Функция ЦветТекста_Обычный()
	
	Возврат "#505050";
	
КонецФункции

// Возвращает цвет текста просроченных данных виджета, в виде шестнадцатеричного значения.
//
// Возвращаемое значение:
//   Строка
//
Функция ЦветТекста_ПросроченныеДанные()
	
	Возврат "#EB2903";
	
КонецФункции

// Возвращает структуру ссылок для областей виджета. Ссылки передаются параметрами.
//
// Параметры:
//   СсылкаОбластиВиджета - Строка - ссылка для всего виджета.
//   СсылкаОбластиПоказателя1 - Строка - ссылка для области показателя 1.
//   СсылкаОбластиПоказателя2 - Строка - ссылка для области показателя 2.
//   СсылкаОбластиПоказателя3 - Строка - ссылка для области показателя 3.
//
Функция СтруктураСсылокОбластейВиджета(
	СсылкаОбластиВиджета = "",
	СсылкаОбластиПоказателя1 = "",
	СсылкаОбластиПоказателя2 = "",
	СсылкаОбластиПоказателя3 = "") Экспорт
	
	СтруктураСсылокОбластейВиджета = Новый Структура;
	СтруктураСсылокОбластейВиджета.Вставить("СсылкаОбластиВиджета", СсылкаОбластиВиджета);
	СтруктураСсылокОбластейВиджета.Вставить("СсылкаОбластиПоказателя1", СсылкаОбластиПоказателя1);
	СтруктураСсылокОбластейВиджета.Вставить("СсылкаОбластиПоказателя2", СсылкаОбластиПоказателя2);
	СтруктураСсылокОбластейВиджета.Вставить("СсылкаОбластиПоказателя3", СсылкаОбластиПоказателя3);
	
	Возврат СтруктураСсылокОбластейВиджета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗаполнениеВиджетов

// Заполняет виджет Мои задачи в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//                  - Исполнители - Массив - массив исполнителей задач, от имени которых текущих пользователь может выполнять задачи.
//
Процедура ЗаполнитьВиджетМоиЗадачиСтарый(Параметры)
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогОбъектыДляПроцесса.Объект КАК ОбъектСвязи,
		|	вогОбъектыДляПроцесса.Процесс КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
		|ГДЕ
		|	вогОбъектыДляПроцесса.Процесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
		|	И вогОбъектыДляПроцесса.Процесс.Завершен = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогЮридическиеЛица
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_БизнесПроцессы
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Общая.ДокументВзаимодействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(1) КАК МоиЗадачи,
		|	СУММА(ВЫБОР
		|			КОГДА ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК МоиЗадачи_НеПринятые,
		|	СУММА(ВЫБОР
		|			КОГДА ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|					И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК МоиЗадачи_Просроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс В
		|			(ВЫБРАТЬ
		|				ВТ_БизнесПроцессы.ДокументВзаимодействия КАК ДокументВзаимодействия
		|			ИЗ
		|				ВТ_БизнесПроцессы КАК ВТ_БизнесПроцессы)
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";	
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);

	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ОбъектСвязи", Форма.ОбъектСвязи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗначенияПоказателей = Новый Массив;
	
	МоиЗадачи = СтруктураПоказателя();
	МоиЗадачи.Заголовок = НСтр("ru = 'Задачи'");
	МоиЗадачи.ЦветЗаголовка = ЦветТекста_Обычный;
	МоиЗадачи.Значение = Выборка.МоиЗадачи;
	МоиЗадачи.Ссылка = "МоиЗадачи";
	МоиЗадачи.ИмяПоказателя = "МоиЗадачи";
	ЗначенияПоказателей.Добавить(МоиЗадачи);
	
	МоиЗадачи_НеПринятые = СтруктураПоказателя();
	МоиЗадачи_НеПринятые.Заголовок = НСтр("ru = 'Не принято'");
	МоиЗадачи_НеПринятые.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	МоиЗадачи_НеПринятые.Значение = Выборка.МоиЗадачи_НеПринятые;
	МоиЗадачи_НеПринятые.Ссылка = "МоиЗадачи_НеПринятые";
	МоиЗадачи_НеПринятые.ИмяПоказателя = "МоиЗадачи_НеПринятые";
	ЗначенияПоказателей.Добавить(МоиЗадачи_НеПринятые);
	
	МоиЗадачи_Просроченные = СтруктураПоказателя();
	МоиЗадачи_Просроченные.Заголовок = НСтр("ru = 'Просрочено'");
	МоиЗадачи_Просроченные.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	МоиЗадачи_Просроченные.Значение = Выборка.МоиЗадачи_Просроченные;
	МоиЗадачи_Просроченные.Ссылка = "МоиЗадачи_Просроченные";
	МоиЗадачи_Просроченные.ИмяПоказателя = "МоиЗадачи_Просроченные";
	ЗначенияПоказателей.Добавить(МоиЗадачи_Просроченные);
	
	УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.МоиЗадачи, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		МоиЗадачи.Заголовок,
		МоиЗадачи.Значение,
		МоиЗадачи.Ссылка,
		МоиЗадачи.ЦветЗаголовка,
		МоиЗадачи.ЦветЗначения);
	
	Показатели = Новый Массив;
	Показатели.Добавить(МоиЗадачи_НеПринятые);
	Показатели.Добавить(МоиЗадачи_Просроченные);
	
	СтрокиHTMLТаблицыПоказателей = ТелоВиджетаОбластями(Показатели);
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,,
		СтрокиHTMLТаблицыПоказателей,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		МоиЗадачи.Ссылка,
		МоиЗадачи_НеПринятые.Ссылка,
		МоиЗадачи_Просроченные.Ссылка);
	
КонецПроцедуры
	
Процедура ЗаполнитьВиджетМоиЗадачи(Параметры)
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогОбъектыДляПроцесса.Объект КАК ОбъектСвязи,
		|	вогОбъектыДляПроцесса.Процесс КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
		|ГДЕ
		|	вогОбъектыДляПроцесса.Процесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
		|	И вогОбъектыДляПроцесса.Процесс.Завершен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_БизнесПроцесс.вогАнкета.Респондент,
		|	CRM_БизнесПроцесс.Ссылка
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.вогАнкета.Респондент ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогЮридическиеЛица
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_БизнесПроцессы
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Общая.ДокументВзаимодействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(1) КАК МоиЗадачи,
		|	СУММА(ВЫБОР
		|			КОГДА ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК МоиЗадачи_НеПринятые,
		|	СУММА(ВЫБОР
		|			КОГДА ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|					И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК МоиЗадачи_Просроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	(ЗадачаИсполнителя.вогТорговаяТочка В (&ОбъектСвязи)
		|			ИЛИ ЗадачаИсполнителя.CRM_Партнер В (&ОбъектСвязи)
		|			ИЛИ ЗадачаИсполнителя.БизнесПроцесс В
		|				(ВЫБРАТЬ
		|					ВТ_БизнесПроцессы.ДокументВзаимодействия КАК ДокументВзаимодействия
		|				ИЗ
		|					ВТ_БизнесПроцессы КАК ВТ_БизнесПроцессы))
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";	
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);

	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ОбъектСвязи", Форма.ОбъектСвязи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗначенияПоказателей = Новый Массив;
	
	МоиЗадачи = СтруктураПоказателя();
	МоиЗадачи.Заголовок = НСтр("ru = 'Задачи'");
	МоиЗадачи.ЦветЗаголовка = ЦветТекста_Обычный;
	МоиЗадачи.Значение = Выборка.МоиЗадачи;
	МоиЗадачи.Ссылка = "МоиЗадачи";
	МоиЗадачи.ИмяПоказателя = "МоиЗадачи";
	ЗначенияПоказателей.Добавить(МоиЗадачи);
	
	МоиЗадачи_НеПринятые = СтруктураПоказателя();
	МоиЗадачи_НеПринятые.Заголовок = НСтр("ru = 'Не принято'");
	МоиЗадачи_НеПринятые.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	МоиЗадачи_НеПринятые.Значение = Выборка.МоиЗадачи_НеПринятые;
	МоиЗадачи_НеПринятые.Ссылка = "МоиЗадачи_НеПринятые";
	МоиЗадачи_НеПринятые.ИмяПоказателя = "МоиЗадачи_НеПринятые";
	ЗначенияПоказателей.Добавить(МоиЗадачи_НеПринятые);
	
	МоиЗадачи_Просроченные = СтруктураПоказателя();
	МоиЗадачи_Просроченные.Заголовок = НСтр("ru = 'Просрочено'");
	МоиЗадачи_Просроченные.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	МоиЗадачи_Просроченные.Значение = Выборка.МоиЗадачи_Просроченные;
	МоиЗадачи_Просроченные.Ссылка = "МоиЗадачи_Просроченные";
	МоиЗадачи_Просроченные.ИмяПоказателя = "МоиЗадачи_Просроченные";
	ЗначенияПоказателей.Добавить(МоиЗадачи_Просроченные);
	
	УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.МоиЗадачи, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		МоиЗадачи.Заголовок,
		МоиЗадачи.Значение,
		МоиЗадачи.Ссылка,
		МоиЗадачи.ЦветЗаголовка,
		МоиЗадачи.ЦветЗначения);
	
	Показатели = Новый Массив;
	Показатели.Добавить(МоиЗадачи_НеПринятые);
	Показатели.Добавить(МоиЗадачи_Просроченные);
	
	СтрокиHTMLТаблицыПоказателей = ТелоВиджетаОбластями(Показатели);
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,,
		СтрокиHTMLТаблицыПоказателей,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		МоиЗадачи.Ссылка,
		МоиЗадачи_НеПринятые.Ссылка,
		МоиЗадачи_Просроченные.Ссылка);
	
КонецПроцедуры

// Заполняет виджет Почта в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетПочта(Параметры)
	УстановитьПривилегированныйРежим(Истина);
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	ПороговоеЗначениеДляЗаголовка = 0;
	ПороговоеЗначениеДляУчетнойЗаписи = 0;
	Показатели = ПоказателиВиджета(Справочники.Виджеты.Почта);
	Для Каждого СтрПоказатель Из Показатели Цикл
		Если Стрпоказатель.ИмяПоказателя = "Почта" Тогда
			ПороговоеЗначениеДляЗаголовка = СтрПоказатель.ПороговоеЗначение;
		ИначеЕсли Стрпоказатель.ИмяПоказателя = "Почта_УчетнаяЗапись" Тогда
			ПороговоеЗначениеДляУчетнойЗаписи = СтрПоказатель.ПороговоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК ОбъектСвязи,
		|	ЭлектронноеПисьмоВходящее.Ссылка КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоВходящееПолучателиПисьма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиКопий.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиКопий.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК ЭлектронноеПисьмоВходящееПолучателиКопий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоВходящееПолучателиОтвета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоИсходящееПолучателиОтвета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА вогСвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Письмо,
		|	ВТ_Общая.ДокументВзаимодействия.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|
		|УПОРЯДОЧИТЬ ПО
		|	Письмо УБЫВ
		|ИТОГИ
		|	КОЛИЧЕСТВО(Письмо)
		|ПО
		|	УчетнаяЗапись";

	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Запрос.УстановитьПараметр("ОбъектСвязи", Форма.ОбъектСвязи);	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбщееКоличествоНепрочитанныхПисем = 0;
	
	СтрокиСписка = Новый Массив;
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	КоличествоСтрок = 0;
	
	Если Выборка.Количество() > 1 Тогда
		
		//ДопустимаяДлинаЗначения = 22;
		ДопустимаяДлинаЗначения = ДопустимаяДлинаЗначения(); // VOG Ульянов И.В. 12.02.2020 CRM-491
		
		Пока Выборка.Следующий() Цикл
			
			Если КоличествоСтрок < МаксимальноеКоличествоСтрок Тогда
				ПредставлениеЗначения = ПредставлениеЗначения(
					Строка(Выборка.УчетнаяЗапись), ДопустимаяДлинаЗначения);
					
				ЦветЗначения = ЦветТекста_Обычный;
				//Если ПороговоеЗначениеДляУчетнойЗаписи < Выборка.Звонок Тогда
				//	ЦветЗначения = ЦветТекста_ПросроченныеДанные;
				//КонецЕсли;
				
				// VOG Ульянов И.В. 12.02.2020 CRM-491
				//ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				//	НСтр("ru = '%1: <B><FONT color=""%2"">%3</FONT></B>'"),
				//	ПредставлениеЗначения,
				//	ЦветЗначения,
				//	Выборка.Письмо);
				
				СтрСписка = СтруктураПоказателяДляСписка();
				
				СтрСписка.Значение = ПредставлениеЗначения;
				
				СтрСписка.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(             // VOG Ульянов И.В. 12.02.2020 CRM-491
					"<FONT color=""%1"">%2</FONT>",
					ЦветЗначения,
					Выборка.Письмо);
				
				СтрСписка.Ссылка = "Почта";
				
				СтрСписка.ИД = Выборка.УчетнаяЗапись.УникальныйИдентификатор();
				
				СтрСписка.Подсказка = СокрЛП(Выборка.УчетнаяЗапись);
				
				СтрокиСписка.Добавить(СтрСписка);
			КонецЕсли;
			
			ОбщееКоличествоНепрочитанныхПисем = ОбщееКоличествоНепрочитанныхПисем + Выборка.Письмо;
			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
	Иначе
		Выборка.Следующий();
		ВыборкаПисем = Выборка.Выбрать();
		ОбщееКоличествоНепрочитанныхПисем = ВыборкаПисем.Количество();
		
		ДопустимаяДлинаЗначения = 25;
		
		Пока ВыборкаПисем.Следующий() Цикл
			СтрСписка = СтруктураПоказателяДляСписка();
			СтрСписка.Картинка = "";
			ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
				СтрСписка.Картинка, БиблиотекаКартинок.НепрочтенноеПисьмо);
			СтрСписка.Значение = ПредставлениеЗначения(
				Строка(ВыборкаПисем.Письмо), ДопустимаяДлинаЗначения);
			СтрСписка.Ссылка = ПолучитьНавигационнуюСсылку(ВыборкаПисем.Письмо);			
			
			СтрокиСписка.Добавить(СтрСписка);
			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокиСписка.Количество() > 0 Тогда
		//ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка, Истина);
		ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка, Истина, Истина); // VOG Ульянов И.В. 12.02.2020 CRM-491
	Иначе
		ТекстНовыеОтветы = НСтр("ru = 'Нет новых писем'");
			
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, Символы.ПС, "<br>");
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, " ", "&nbsp;");
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНовыеОтветы);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	КонецЕсли;
	
	ЦветЗначения = ЦветТекста_Обычный;
	Если ПороговоеЗначениеДляЗаголовка < ОбщееКоличествоНепрочитанныхПисем Тогда
		ЦветЗначения = ЦветТекста_ПросроченныеДанные;
	КонецЕсли;
	
	СсылкаНаЗаголовок = "Почта";
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		НСтр("ru = 'Почта'"),
		ОбщееКоличествоНепрочитанныхПисем,
		СсылкаНаЗаголовок,
		ЦветТекста_Обычный,
		ЦветЗначения);
		
	ПодвалВиджета = ПодвалВиджетаСписком(КоличествоСтрок, "Почта");
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,
		ПодвалВиджета,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		СсылкаНаЗаголовок);
		
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры
	
Процедура ЗаполнитьВиджетЗвонки(Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	ПороговоеЗначениеДляЗаголовка = 0;
	ПороговоеЗначениеДляУчетнойЗаписи = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТелефонныйЗвонок.АбонентКонтакт КАК ОбъектСвязи,
		|	ТелефонныйЗвонок.Ссылка КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогЮридическиеЛица
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА вогСвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Звонок,
		|	(ВЫРАЗИТЬ(ВТ_Общая.ДокументВзаимодействия.АбонентКонтакт.Наименование КАК СТРОКА(150))) + "" ("" + (ВЫРАЗИТЬ(ВТ_Общая.ДокументВзаимодействия.АбонентКакСвязаться КАК СТРОКА(150))) + "")"" КАК УчетнаяЗапись,
		|	ВТ_Общая.ДокументВзаимодействия.АбонентКонтакт.Наименование КАК ДокументВзаимодействияАбонентКонтактНаименование,
		|	ВТ_Общая.ДокументВзаимодействия.АбонентКакСвязаться КАК КакСвязаться
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|
		|УПОРЯДОЧИТЬ ПО
		|	Звонок УБЫВ
		|ИТОГИ
		|	КОЛИЧЕСТВО(Звонок),
		|	МАКСИМУМ(КакСвязаться)
		|ПО
		|	УчетнаяЗапись";	
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Запрос.УстановитьПараметр("ОбъектСвязи", Форма.ОбъектСвязи);	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбщееКоличествоНепрочитанныхПисем = 0;
	
	СтрокиСписка = Новый Массив;
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	КоличествоСтрок = 0;
	
	Если Выборка.Количество() > 1 Тогда
		
		//ДопустимаяДлинаЗначения = 22;
		ДопустимаяДлинаЗначения = ДопустимаяДлинаЗначения(); // VOG Ульянов И.В. 12.02.2020 CRM-491
		
		Пока Выборка.Следующий() Цикл
			
			Если КоличествоСтрок < МаксимальноеКоличествоСтрок Тогда
				ПредставлениеЗначения = ПредставлениеЗначения(
					Строка(Выборка.УчетнаяЗапись), ДопустимаяДлинаЗначения);
					
				ЦветЗначения = ЦветТекста_Обычный;
				//Если ПороговоеЗначениеДляУчетнойЗаписи < Выборка.Письмо Тогда
				//	ЦветЗначения = ЦветТекста_ПросроченныеДанные;
				//КонецЕсли;
				
				// VOG Ульянов И.В. 12.02.2020 CRM-491
				//ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				//	НСтр("ru = '%1: <B><FONT color=""%2"">%3</FONT></B>'"),
				//	ПредставлениеЗначения,
				//	ЦветЗначения,
				//	Выборка.Звонок);
				
				СтрСписка = СтруктураПоказателяДляСписка();
				
				СтрСписка.Значение = ПредставлениеЗначения;
				
				СтрСписка.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(             // VOG Ульянов И.В. 12.02.2020 CRM-491
					"<FONT color=""%1"">%2</FONT>",
					ЦветЗначения,
					Выборка.Звонок);
				
				СтрСписка.Ссылка = "Звонки";
				
				СтрСписка.ИД = Выборка.КакСвязаться;
				
				СтрСписка.Подсказка = Выборка.УчетнаяЗапись;
				
				СтрокиСписка.Добавить(СтрСписка);
			КонецЕсли;
			
			ОбщееКоличествоНепрочитанныхПисем = ОбщееКоличествоНепрочитанныхПисем + Выборка.Звонок;
			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
	Иначе
		Выборка.Следующий();
		ВыборкаПисем = Выборка.Выбрать();
		ОбщееКоличествоНепрочитанныхПисем = ВыборкаПисем.Количество();
		
		ДопустимаяДлинаЗначения = 25;
		
		Пока ВыборкаПисем.Следующий() Цикл
			СтрСписка = СтруктураПоказателяДляСписка();
			СтрСписка.Картинка = "";
			ОбзорОбъектовКлиентСервер.ДобавитьКартинку(
				СтрСписка.Картинка, БиблиотекаКартинок.ТелефонныйЗвонок);
			СтрСписка.Значение = ПредставлениеЗначения(
				Строка(ВыборкаПисем.Звонок), ДопустимаяДлинаЗначения);
			СтрСписка.Ссылка = ПолучитьНавигационнуюСсылку(ВыборкаПисем.Звонок);
			
			СтрокиСписка.Добавить(СтрСписка);
			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокиСписка.Количество() > 0 Тогда
		//ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка, Истина);
		ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка, Истина, Истина); // VOG Ульянов И.В. 12.02.2020 CRM-491
	Иначе
		ТекстНовыеОтветы = НСтр("ru = 'Нет звонков'");
			
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, Символы.ПС, "<br>");
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, " ", "&nbsp;");
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНовыеОтветы);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	КонецЕсли;
	
	ЦветЗначения = ЦветТекста_Обычный;
	//Если ПороговоеЗначениеДляЗаголовка < ОбщееКоличествоНепрочитанныхПисем Тогда
	//	ЦветЗначения = ЦветТекста_ПросроченныеДанные;
	//КонецЕсли;
	
	СсылкаНаЗаголовок = "Звонки";
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		НСтр("ru = 'Звонки'"),
		ОбщееКоличествоНепрочитанныхПисем,
		СсылкаНаЗаголовок,
		ЦветТекста_Обычный,
		ЦветЗначения);
		
	ПодвалВиджета = ПодвалВиджетаСписком(КоличествоСтрок, "Звонки");
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,
		ПодвалВиджета,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		СсылкаНаЗаголовок);
		
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры	

Процедура ЗаполнитьВиджетКомандировки(Параметры) // VOG Ульянов И.В. 06.02.2020 CRM-239
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогКомандировкаЗадачи.Ссылка КАК Ссылка,
		|	вогКомандировкаЗадачи.Ссылка.Статус КАК Статус
		|ПОМЕСТИТЬ ВТ_Командировки
		|ИЗ
		|	Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|ГДЕ
		|	вогКомандировкаЗадачи.Ссылка.Проведен = ИСТИНА
		|	И (вогКомандировкаЗадачи.Клиент = &ОбъектСвязи
		|			ИЛИ вогКомандировкаЗадачи.ТорговаяТочка = &ОбъектСвязи
		|			ИЛИ вогКомандировкаЗадачи.ТорговаяТочка.Партнер = &ОбъектСвязи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(1) КАК Командировки_Все,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Командировки.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.ВРаботе)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Командировки_ВРаботе
		|ИЗ
		|	ВТ_Командировки КАК ВТ_Командировки";	
	
	Запрос.УстановитьПараметр("ОбъектСвязи", Форма.ОбъектСвязи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗначенияПоказателей = Новый Массив;
	
	Командировки = СтруктураПоказателя();
	Командировки.Заголовок = НСтр("ru = 'Командировки'");
	Командировки.ЦветЗаголовка = ЦветТекста_Обычный;
	Командировки.Значение = Выборка.Командировки_Все;
	Командировки.Ссылка = "Командировки";
	Командировки.ИмяПоказателя = "Командировки";
	ЗначенияПоказателей.Добавить(Командировки);
	
	Командировки_ВРаботе = СтруктураПоказателя();
	Командировки_ВРаботе.Заголовок = НСтр("ru = 'В работе'");
	Командировки_ВРаботе.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	Командировки_ВРаботе.Значение = Выборка.Командировки_ВРаботе;
	Командировки_ВРаботе.Ссылка = "Командировки_ВРаботе";
	Командировки_ВРаботе.ИмяПоказателя = "Командировки_ВРаботе";
	ЗначенияПоказателей.Добавить(Командировки_ВРаботе);
	
	Командировки_Все = СтруктураПоказателя();
	Командировки_Все.Заголовок = НСтр("ru = 'Всего'");
	Командировки_Все.ЦветЗаголовка = ЦветаВиджета.ЦветПодписи;
	Командировки_Все.Значение = Выборка.Командировки_Все;
	Командировки_Все.Ссылка = "Командировки";
	Командировки_Все.ИмяПоказателя = "Командировки_Все";
	ЗначенияПоказателей.Добавить(Командировки_Все);
	
	//УстановитьЦветЗначениямПоказателей(Справочники.Виджеты.МоиЗадачи, ЗначенияПоказателей);
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		Командировки.Заголовок,
		Командировки.Значение,
		Командировки.Ссылка,
		Командировки.ЦветЗаголовка,
		Командировки.ЦветЗначения);
	
	Показатели = Новый Массив;
	Показатели.Добавить(Командировки_ВРаботе);
	Показатели.Добавить(Командировки_Все);	
	
	СтрокиHTMLТаблицыПоказателей = ТелоВиджетаОбластями(Показатели);
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,,
		СтрокиHTMLТаблицыПоказателей,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		Командировки.Ссылка,
		Командировки_ВРаботе.Ссылка,
		Командировки_Все.Ссылка);
		
КонецПроцедуры	

// Заполняет виджет Мероприятия в форме Текущие дела.
//
// Параметры:
//   Параметры - Структура
//                  - Форма - УправляемаяФорма - форма Текущие дела.
//                  - ИндексВиджета - Строка - индекс виджета в форме.
//                  - ТекущаяДатаСеанса - Дата - текущая дата сеанса.
//                  - ТекущийПользователь - СправочникСсылка.Пользователи - Ссылка на текущего пользователя.
//
Процедура ЗаполнитьВиджетМероприятия(Параметры)
	УстановитьПривилегированныйРежим(Истина);
	
	Форма = Параметры.Форма;
	ИндексВиджета = Параметры.ИндексВиджета;
	ТекущийПользователь = Параметры.ТекущийПользователь;
	ТекущаяДата = Параметры.ТекущаяДатаСеанса;
	
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветаВиджета = ЦветаВиджета(ИндексВиджета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_Мероприятие.Партнер КАК ОбъектСвязи,
		|	CRM_Мероприятие.Ссылка КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Мероприятие.КонтактноеЛицо,
		|	CRM_Мероприятие.Ссылка
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Мероприятие.вогТорговаяТочка,
		|	CRM_Мероприятие.Ссылка
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Мероприятие,
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка.Дата КАК ДатаНачала,
		|	ВТ_Общая.ДокументВзаимодействия.Тема КАК Тема
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала УБЫВ";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ОбъектСвязи", Форма.ОбъектСвязи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//ДопустимаяДлинаЗначения = 23; CRM-491
	ДопустимаяДлинаЗначения = ДопустимаяДлинаЗначения(); // VOG Ульянов И.В. 12.02.2020 CRM-491
	
	МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВВиджете();
	КоличествоСтрок = 0;
	
	СтрокиСписка = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтрСписка = СтруктураПоказателяДляСписка();
		СтрСписка.Значение = ПредставлениеЗначения(
			Строка(Выборка.Тема), ДопустимаяДлинаЗначения);
		СтрСписка.Ссылка = ПолучитьНавигационнуюСсылку(Выборка.Мероприятие);
		СтрСписка.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			Формат(Выборка.ДатаНачала, "ДФ=dd.MM"));
			
		СтрСписка.ИД = СокрЛП(Выборка.Мероприятие.УникальныйИдентификатор());	
		
		СтрСписка.Подсказка = СокрЛП(Выборка.Тема);
			
		СтрокиСписка.Добавить(СтрСписка);
		
		КоличествоСтрок = КоличествоСтрок + 1;
	КонецЦикла;
	
	КоличествоМероприятийВБлижайшийМесяц = Выборка.Количество();
	
	Если СтрокиСписка.Количество() > 0 Тогда
		ТелоВиджета = ТелоВиджетаСписком(СтрокиСписка,,Истина);
	Иначе
		ТекстНовыеОтветы = НСтр("ru = 'В ближайшее время
			|нет мероприятий'");
			
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, Символы.ПС, "<br>");
		ТекстНовыеОтветы = СтрЗаменить(ТекстНовыеОтветы, " ", "&nbsp;");
		
		ТекстНовыеОтветы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<FONT color=""%1"">%2</FONT>",
			ЦветаВиджета.ЦветПодписи,
			ТекстНовыеОтветы);
		
		ТелоВиджета = ТелоВиджетаТекстомПоЦентру(ТекстНовыеОтветы);
	КонецЕсли;
	
	Показатели = ПоказателиВиджета(Справочники.Виджеты.Мероприятия);
	
	ЦветЗначения = ЦветТекста_Обычный;
	//Если Показатели[0].ИмяПоказателя = "Мероприятия" 
	//	И Показатели[0].ПороговоеЗначение < КоличествоСтрок Тогда
	//	
	//	ЦветЗначения = ЦветТекста_ПросроченныеДанные;
	//КонецЕсли;
	
	СсылкаНаЗаголовок = "Мероприятия";
	
	ЗаголовокВиджета = ЗаголовокВиджета(
		НСтр("ru = 'Мероприятия'"),
		КоличествоМероприятийВБлижайшийМесяц,
		СсылкаНаЗаголовок,
		ЦветТекста_Обычный,
		ЦветЗначения);
		
	ПодвалВиджета = ПодвалВиджетаСписком(КоличествоСтрок, "Мероприятия");
	
	Форма["HTML" + ИндексВиджета] = HTMLПредставлениеВиджета(
		ЗаголовокВиджета,
		ПодвалВиджета,
		ТелоВиджета,
		ЦветаВиджета.ЦветФона,
		ЦветаВиджета.ЦветРамкиТаблицы);
	
	Форма["СсылкиОбластей" + ИндексВиджета] = СтруктураСсылокОбластейВиджета(
		СсылкаНаЗаголовок);
		
	УстановитьПривилегированныйРежим(Истина);
КонецПроцедуры

// Устанавливает цвет значениям показателей виджета в соответствии
// с настроенными пороговыми значениями показателей.
//
// Параметры:
//   Виджет - СправочникСсылка.Виджеты
//   ЗначенияПоказателей - Массив
//     - Структура - структура показателя, соответствует возвращаемому значению функции СтруктураПоказателя().
//
Процедура УстановитьЦветЗначениямПоказателей(Виджет, ЗначенияПоказателей)
	
	ПоказателиВиджета = ПоказателиВиджета(Виджет);
	
	ЦветТекста_ПросроченныеДанные = ЦветТекста_ПросроченныеДанные();
	ЦветТекста_Обычный = ЦветТекста_Обычный();
	
	Для Каждого Показатель Из ПоказателиВиджета Цикл
		Для Каждого ЗначениеПоказателя Из ЗначенияПоказателей Цикл
			Если Показатель.ИмяПоказателя = ЗначениеПоказателя.ИмяПоказателя Тогда
				Если Показатель.ПороговоеЗначение < ЗначениеПоказателя.Значение Тогда
					ЗначениеПоказателя.ЦветЗначения = ЦветТекста_ПросроченныеДанные;
				Иначе
					ЗначениеПоказателя.ЦветЗначения = ЦветТекста_Обычный;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РасчетПоказателейРаботыПользователей

Процедура РассчитатьПоказателиПочтыДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту");
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИспользованиеПочты.Пользователь
			|ИЗ
			|	РегистрСведений.ИспользованиеПочты КАК ИспользованиеПочты
			|ГДЕ
			|	ИспользованиеПочты.НастройкаИспользоватьВстроеннуюПочту
			|	И ИспользованиеПочты.Пользователь В(&Пользователи)";

		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		
		ПользователиСПочтой = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		Если ПользователиСПочтой.Количество() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПапкиПисемТекущихДел.Пользователь КАК Пользователь,
			|	ПапкиПисемТекущихДел.Папка КАК Папка
			|ПОМЕСТИТЬ ПапкиПользователей
			|ИЗ
			|	РегистрСведений.ПапкиПисемТекущихДел КАК ПапкиПисемТекущихДел
			|ГДЕ
			|	ПапкиПисемТекущихДел.Пользователь В(&Пользователи)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Папка,
			|	Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПапкиПользователей.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ПапкиПользователей КАК ПапкиПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо КАК ВходящиеПисьма
			|		ПО ПапкиПользователей.Папка = ВходящиеПисьма.Папка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
			|		ПО (ВходящиеПисьма.Ссылка = СведенияОПрочтении.Объект)
			|			И (СведенияОПрочтении.Пользователь = ПапкиПользователей.Пользователь)
			|ГДЕ
			|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
			|	И НЕ ВходящиеПисьма.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ПапкиПользователей.Пользователь";
		
		Запрос.УстановитьПараметр("Пользователи", ПользователиСПочтой);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, Перечисления.ТипыПоказателейРаботы.НепрочитанныеПисьма);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Процедура РассчитатьПоказателиЗадачДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");		
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель,
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК Пользователь
			|ПОМЕСТИТЬ ИсполнителиЗадач
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат В(&ПользователиДляРасчета)
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО ИсполнителиЗадач.Исполнитель = ЗадачаИсполнителя.ТекущийИсполнитель
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
			|		ПО (ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача)
			|ГДЕ
			|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И ЕСТЬNULL(ЗадачиДляВыполнения.СостояниеВыполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
			|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
			|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсполнителиЗадач.Пользователь";
		
		Запрос.УстановитьПараметр("ПользователиДляРасчета", ПользователиДляРасчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, 
			Перечисления.ТипыПоказателейРаботы.АктивныеЗадачи); 
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры

Процедура РассчитатьПоказателиКалендаряДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");		
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ЗаписиРабочегоКалендаря.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
			|ГДЕ
			|	ЗаписиРабочегоКалендаря.Пользователь В(&Пользователи)
			|	И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления
			|	И ЗаписиРабочегоКалендаря.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И ЗаписиРабочегоКалендаря.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаписиРабочегоКалендаря.Пользователь";
		
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, 
			Перечисления.ТипыПоказателейРаботы.ЗаписиКалендаря); 
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры	

Процедура РассчитатьПоказателиМероприятийДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями");
		
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УчастникиМероприятия.Исполнитель КАК Пользователь,
			|	УчастникиМероприятия.Мероприятие КАК Мероприятие
			|ПОМЕСТИТЬ ПользователиМероприятия
			|ИЗ
			|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
			|ГДЕ
			|	УчастникиМероприятия.Исполнитель В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Организатор,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Организатор В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Председатель,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Председатель В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Секретарь,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Секретарь В(&Пользователи)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиМероприятия.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ПользователиМероприятия КАК ПользователиМероприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК СправочникМероприятия
			|		ПО ПользователиМероприятия.Мероприятие = СправочникМероприятия.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
			|		ПО (СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
			|			И (СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка)
			|ГДЕ
			|	СправочникМероприятия.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И СправочникМероприятия.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И НЕ СправочникМероприятия.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ПользователиМероприятия.Пользователь";
			
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка,
			Перечисления.ТипыПоказателейРаботы.Мероприятия); 

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры

Процедура РассчитатьПоказателиКонтроляДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
		
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.РольПользователь КАК Исполнитель,
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК Пользователь
			|ПОМЕСТИТЬ Контролеры
			|ИЗ
			|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.ИсполнительДелегат В(&ПользователиДляРасчета)
			|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Контроль"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Контролеры.Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контролеры КАК Контролеры
			|		ПО Контроль.Контролер = Контролеры.Исполнитель
			|ГДЕ
			|	Контроль.ПоставленНаКонтроль
			|	И НЕ Контроль.ПометкаУдаления
			|	И НЕ Контроль.СнятСКонтроля
			|
			|СГРУППИРОВАТЬ ПО
			|	Контролеры.Пользователь";
			
		Запрос.УстановитьПараметр("ПользователиДляРасчета", ПользователиДляРасчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка,
			Перечисления.ТипыПоказателейРаботы.НаКонтроле); 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Вог

Функция ПолучитьСписокМероприятий(ОбъектСвязи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_Мероприятие.Партнер КАК ОбъектСвязи,
		|	CRM_Мероприятие.Ссылка КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Мероприятие.КонтактноеЛицо,
		|	CRM_Мероприятие.Ссылка
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Мероприятие.вогТорговаяТочка,
		|	CRM_Мероприятие.Ссылка
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Мероприятие,
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка.Дата КАК ДатаНачала
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Мероприятие");	
	
КонецФункции	

Функция ПолучитьСписокЗадач(ОбъектСвязи, ТолькоПросроченные = Ложь, ТолькоНеПринятые = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогОбъектыДляПроцесса.Объект КАК ОбъектСвязи,
		|	вогОбъектыДляПроцесса.Процесс КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
		|ГДЕ
		|	вогОбъектыДляПроцесса.Процесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогЮридическиеЛица
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_БизнесПроцессы
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Общая.ДокументВзаимодействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	СУММА(ВЫБОР
		|			КОГДА ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК МоиЗадачи_НеПринятые,
		|	СУММА(ВЫБОР
		|			КОГДА ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|					И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК МоиЗадачи_Просроченные,
		|	ЗадачаИсполнителя.Дата КАК Дата
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс В
		|			(ВЫБРАТЬ
		|				ВТ_БизнесПроцессы.ДокументВзаимодействия КАК ДокументВзаимодействия
		|			ИЗ
		|				ВТ_БизнесПроцессы КАК ВТ_БизнесПроцессы)
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ТолькоНеПринятые = ЛОЖЬ
		|					И &ТолькоПросроченные = ЛОЖЬ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ТолькоНеПринятые = ИСТИНА
		|							И ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ВЫБОР
		|							КОГДА &ТолькоПросроченные = ИСТИНА
		|									И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|									И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТолькоПросроченные", ТолькоПросроченные);
	Запрос.УстановитьПараметр("ТолькоНеПринятые", ТолькоНеПринятые);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("БизнесПроцесс");	
	
КонецФункции

Функция ПолучитьСписокПисем(ОбъектСвязи) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК ОбъектСвязи,
		|	ЭлектронноеПисьмоВходящее.Ссылка КАК ДокументВзаимодействия,
		|	NULL КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоВходящееПолучателиПисьма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиКопий.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиКопий.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК ЭлектронноеПисьмоВходящееПолучателиКопий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоВходящееПолучателиОтвета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Ссылка,
		|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоИсходящееПолучателиОтвета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА вогСвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Письмо
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи";	
	
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Письмо");	
	
КонецФункции

Функция ПолучитьСписокЗвонков(ОбъектСвязи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТелефонныйЗвонок.АбонентКонтакт КАК ОбъектСвязи,
		|	ТелефонныйЗвонок.Ссылка КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогЮридическиеЛица
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА вогСвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Звонок
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи";	
	
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Звонок");	
	
КонецФункции

Функция ЗаполнитьТаблицуЗадачи(ОбъектСвязи, ТолькоПросроченные = Ложь, ТолькоНеПринятые = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогОбъектыДляПроцесса.Объект КАК ОбъектСвязи,
		|	вогОбъектыДляПроцесса.Процесс КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
		|ГДЕ
		|	вогОбъектыДляПроцесса.Процесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
		|	И вогОбъектыДляПроцесса.Процесс.Завершен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_БизнесПроцесс.вогАнкета.Респондент,
		|	CRM_БизнесПроцесс.Ссылка
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.вогАнкета.Респондент ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогЮридическиеЛица
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_БизнесПроцессы
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Общая.ДокументВзаимодействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ЗадачаИсполнителя.СрокИсполнения КАК КСроку,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.Ссылка КАК Документ
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	(ЗадачаИсполнителя.вогТорговаяТочка В (&ОбъектСвязи)
		|			ИЛИ ЗадачаИсполнителя.CRM_Партнер В (&ОбъектСвязи)
		|			ИЛИ ЗадачаИсполнителя.БизнесПроцесс В
		|				(ВЫБРАТЬ
		|					ВТ_БизнесПроцессы.ДокументВзаимодействия КАК ДокументВзаимодействия
		|				ИЗ
		|					ВТ_БизнесПроцессы КАК ВТ_БизнесПроцессы))
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ТолькоНеПринятые = ЛОЖЬ
		|					И &ТолькоПросроченные = ЛОЖЬ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ТолькоНеПринятые = ИСТИНА
		|							И ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ВЫБОР
		|							КОГДА &ТолькоПросроченные = ИСТИНА
		|									И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|									И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.ДатаНачала УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТолькоПросроченные", ТолькоПросроченные);
	Запрос.УстановитьПараметр("ТолькоНеПринятые", ТолькоНеПринятые);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Колонки.Дата.Заголовок = "Дата начала";
	ТаблицаРезультат.Колонки.КСроку.Заголовок = "К сроку";
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаРезультат);	
	
КонецФункции

Функция ЗаполнитьТаблицуМероприятия(ОбъектСвязи, ИДОтбора = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИДОтбора <> "" тогда
		ДокументОтбора = Документы.CRM_Мероприятие.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОтбора));		
	Иначе	
		ДокументОтбора = Неопределено;
	КонецЕсли;			
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_Мероприятие.Партнер КАК ОбъектСвязи,
		|	CRM_Мероприятие.Ссылка КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Мероприятие.КонтактноеЛицо,
		|	CRM_Мероприятие.Ссылка
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Мероприятие.вогТорговаяТочка,
		|	CRM_Мероприятие.Ссылка
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_Мероприятие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Общая.ДокументВзаимодействия.Тема КАК Тема,
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка.Дата КАК Начало,
		|	ВТ_Общая.ДокументВзаимодействия.ОкончаниеМероприятия КАК Окончание,
		|	(ВЫРАЗИТЬ(ВТ_Общая.ДокументВзаимодействия.СписокКлиентов КАК СТРОКА(1000))) + "" ("" + (ВЫРАЗИТЬ(ВТ_Общая.ДокументВзаимодействия.СписокУчастников КАК СТРОКА(1000))) + "")"" КАК Контакты,
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Документ
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|	И ВЫБОР
		|			КОГДА &ОтбиратьВсе = ИСТИНА
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_Общая.ДокументВзаимодействия.Ссылка = &ДокументОтбора
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начало УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	Запрос.УстановитьПараметр("ОтбиратьВсе", ?(ДокументОтбора = Неопределено, Истина,Ложь));
	Запрос.УстановитьПараметр("ДокументОтбора", ДокументОтбора);
	
	Возврат ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить());	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ЗаполнитьТаблицуПочта(ОбъектСвязи, ИДОтбора = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИДОтбора <> "" тогда		
		СправочникОтбора = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОтбора));		
	Иначе	
		СправочникОтбора = Неопределено;
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК ОбъектСвязи,
		|	ЭлектронноеПисьмоВходящее.Ссылка КАК ДокументВзаимодействия,
		|	NULL КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоВходящееПолучателиПисьма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиКопий.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиКопий.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК ЭлектронноеПисьмоВходящееПолучателиКопий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Контакт,
		|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоВходящееПолучателиОтвета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Контакт,
		|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Ссылка,
		|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоИсходящееПолучателиОтвета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА вогСвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_Общая.ДокументВзаимодействия.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
		|			ТОГДА ""Входящее""
		|		ИНАЧЕ ""Исходящее""
		|	КОНЕЦ КАК Тип,
		|	ВТ_Общая.ДокументВзаимодействия.Тема КАК Тема,
		|	ВТ_Общая.ДокументВзаимодействия.Дата КАК Дата,
		|	ВТ_Общая.ДокументВзаимодействия.СписокПолучателейПисьма КАК Кому,
		|	ВТ_Общая.ДокументВзаимодействия.УчетнаяЗапись КАК Сотрудник,
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Документ
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|	И ВЫБОР
		|			КОГДА &ОтбиратьВсе = ИСТИНА
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_Общая.ДокументВзаимодействия.УчетнаяЗапись = &СправочникОтбора
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";	
	
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	Запрос.УстановитьПараметр("ОтбиратьВсе", ?(СправочникОтбора = Неопределено, Истина,Ложь));
	Запрос.УстановитьПараметр("СправочникОтбора", СправочникОтбора);
	
	Возврат ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить());		
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ЗаполнитьТаблицуЗвонки(ОбъектСвязи, ИДОтбора = "") Экспорт		
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТелефонныйЗвонок.АбонентКонтакт КАК ОбъектСвязи,
		|	ТелефонныйЗвонок.Ссылка КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_ОбъектыВзаимодействия
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Партнеры
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогЮридическиеЛица
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
		|			ТОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|			ТОГДА СвязиКонтактныхЛиц.ОбъектСвязи
		|		КОГДА ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА вогСвязиКонтактныхЛиц.ОбъектСвязи
		|	КОНЕЦ КАК ОбъектСвязи,
		|	ВТ_ОбъектыВзаимодействия.ДокументВзаимодействия КАК ДокументВзаимодействия
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_ОбъектыВзаимодействия КАК ВТ_ОбъектыВзаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК СвязиФизЛицСКонтактнымиЛицамиПартнеров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК вогСвязиКонтактныхЛиц
		|			ПО СвязиФизЛицСКонтактнымиЛицамиПартнеров.КонтактноеЛицо = вогСвязиКонтактныхЛиц.КонтактноеЛицо
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиФизЛицСКонтактнымиЛицамиПартнеров.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СвязиКонтактныхЛиц
		|		ПО ВТ_ОбъектыВзаимодействия.ОбъектСвязи = СвязиКонтактныхЛиц.КонтактноеЛицо
		|ГДЕ
		|	НЕ ВТ_ОбъектыВзаимодействия.ОбъектСвязи ССЫЛКА Справочник.Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_Общая.ДокументВзаимодействия.Входящий = ИСТИНА
		|			ТОГДА ""Входящий""
		|		ИНАЧЕ ""Исходящий""
		|	КОНЕЦ КАК Тип,
		|	ВТ_Общая.ДокументВзаимодействия.сфпСостояниеЗвонка КАК Ответ,
		|	ВТ_Общая.ДокументВзаимодействия.Дата КАК Дата,
		|	ВТ_Общая.ДокументВзаимодействия.Тема КАК Тема,
		|	ВТ_Общая.ДокументВзаимодействия.АбонентКакСвязаться КАК Контакт,
		|	ВТ_Общая.ДокументВзаимодействия.АбонентКонтакт КАК Абонент,
		|	ВТ_Общая.ДокументВзаимодействия.Автор КАК Автор,
		|	ВТ_Общая.ДокументВзаимодействия.Ссылка КАК Документ
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.ОбъектСвязи = &ОбъектСвязи
		|	И ВЫБОР
		|			КОГДА &ОтбиратьВсе = ИСТИНА
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_Общая.ДокументВзаимодействия.АбонентКакСвязаться = &АбонентКакСвязаться
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	Запрос.УстановитьПараметр("ОтбиратьВсе", ?(ИДОтбора = "", Истина,Ложь));
	Запрос.УстановитьПараметр("АбонентКакСвязаться", ИДОтбора);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Колонки.Дата.Заголовок = "Дата звонка";
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаРезультат);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПолучитьМероприятиеОтбора(ИДОтбора) Экспорт // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ИДОтбора <> "" тогда
		ДокументОтбора = Документы.CRM_Мероприятие.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОтбора));		
	Иначе	
		ДокументОтбора = Неопределено;
	КонецЕсли;
	
	Возврат ДокументОтбора;

КонецФункции	

Функция ПолучитьПочтуОтбора(ИДОтбора) Экспорт // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ИДОтбора <> "" тогда		
		СправочникОтбора = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОтбора));		
	Иначе	
		СправочникОтбора = Неопределено;
	КонецЕсли;
	
	Возврат СправочникОтбора;
	
КонецФункции	

Функция ДопустимаяДлинаЗначения() // VOG Ульянов И.В. 12.02.2020 CRM-491
	Возврат 20;
КонецФункции	

#КонецОбласти
