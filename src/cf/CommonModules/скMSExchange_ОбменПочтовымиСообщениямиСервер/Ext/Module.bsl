
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СформироватьСтруктуруПодключения(Настройка) Экспорт
	СтруктураПодключения = Новый Структура(
	"Сервер,
	|ВерсияСервера,
	|Порт,
	|ПутьКWEBСервису,
	|Защищенное,
	|Логин,
	|Пароль,
	|ИспользоватьАутентификациюОС,
	|КонтактыFolderId,
	|КонтактыDistinguishedFolderId,
	|СобытияFolderId,
	|СобытияDistinguishedFolderId,
	|EMailAddessУчетнойЗаписиОбщихКонтактов,
	|EMailAddessУчетнойЗаписиОбщегоКалендаря");
	
	Подключение		= Настройка.Подключение;
	УчетнаяЗапись	= Настройка.УчетнаяЗапись;
	
	СтруктураПодключения.Сервер									= Подключение.АдресСервера;
	СтруктураПодключения.ВерсияСервера							= "2010_SP2"; // Ни в коем случае не менять этот параметр!
	СтруктураПодключения.Порт									= Подключение.Порт;
	СтруктураПодключения.ПутьКWEBСервису						= Подключение.ПутьКWEBСервису;
	СтруктураПодключения.Защищенное								= Подключение.Защищенное;
	СтруктураПодключения.Логин									= УчетнаяЗапись.Логин;
	СтруктураПодключения.Пароль									= УчетнаяЗапись.Пароль;
	СтруктураПодключения.ИспользоватьАутентификациюОС			= УчетнаяЗапись.скИспользоватьАутентификациюОС;
		
	Возврат СтруктураПодключения;
	
КонецФункции

Функция ПолучитьВерсиюMSExchange(Подключение, СтрокаОшибки = "") Экспорт
	ТекстЗапроса =
	"<?xml version=""1.0"" encoding=""utf-8""?>
	|<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
	|			xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
	|<soap:Header>
	|<t:RequestServerVersion Version=""Exchange2007_SP1""/>
	|</soap:Header>
	|<soap:Body>
	|<GetFolder xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
	|		   xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
	|<FolderShape>
	|	<t:BaseShape>Default</t:BaseShape>
	|</FolderShape>
	|	<FolderIds>
	|		<t:DistinguishedFolderId Id=""inbox""/>
	|	</FolderIds>
	|</GetFolder>
	|</soap:Body>
	|</soap:Envelope>";
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		СтрокиHeader = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "Header"), Истина);
		Если СтрокиHeader.Количество() > 0 Тогда
			СтрокиServerVersionInfo = СтрокиHeader[0].Строки.НайтиСтроки(Новый Структура("Имя", "ServerVersionInfo"), Истина);
			Если СтрокиServerVersionInfo.Количество() > 0 Тогда
				СтруктураРезультат = Новый Структура("MajorBuildNumber,MinorBuildNumber,MajorVersion,MinorVersion",
					Число(СтрокиServerVersionInfo[0].Атрибуты["MajorBuildNumber"]),
					Число(СтрокиServerVersionInfo[0].Атрибуты["MinorBuildNumber"]),
					Число(СтрокиServerVersionInfo[0].Атрибуты["MajorVersion"]),
					Число(СтрокиServerVersionInfo[0].Атрибуты["MinorVersion"]));
				//
				Возврат СтруктураРезультат;
			Иначе
				
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьВерсиюСервера(СтруктураСборки) Экспорт
	//Microsoft Exchange Server 2003		6.5.6944		6/30/2003
	//Microsoft Exchange Server 2003 SP1	6.5.7226		5/25/2004
	//Microsoft Exchange Server 2003 SP2	6.5.7638		10/19/2005
	//Microsoft Exchange Server 2007		8.0.685.24		12/9/2006
	//Microsoft Exchange Server 2007		8.0.685.25		12/9/2006
	//Microsoft Exchange Server 2007 SP1	8.1.240.6		11/29/2007
	//Microsoft Exchange Server 2007 SP2	8.2.176.2		8/24/2009
	//Microsoft Exchange Server 2007 SP3	8.3.083.6		6/20/2010
	//Microsoft Exchange Server 2010		14.0.639.21		11/9/2009
	//Microsoft Exchange Server 2010 SP1	14.1.218.15		8/24/2010
	//Microsoft Exchange Server 2010 SP2	14.2.247.5		12/4/2011
	//Microsoft Exchange Server 2010 SP3	14.3.123.4		2/12/2013
	//Microsoft Exchange Server 2013		15.0.516.32		10/11/2012

	Если СтруктураСборки.MajorVersion = 8 И СтруктураСборки.MinorVersion = 0 Тогда
		Возврат "Microsoft Exchange Server 2007";
	ИначеЕсли СтруктураСборки.MajorVersion = 8 И СтруктураСборки.MinorVersion = 1 Тогда
		Возврат "Microsoft Exchange Server 2007 SP1";
	ИначеЕсли СтруктураСборки.MajorVersion = 8 И СтруктураСборки.MinorVersion = 2 Тогда
		Возврат "Microsoft Exchange Server 2007 SP2";
	ИначеЕсли СтруктураСборки.MajorVersion = 8 И СтруктураСборки.MinorVersion = 3 Тогда
		Возврат "Microsoft Exchange Server 2007 SP3";
	ИначеЕсли СтруктураСборки.MajorVersion = 14 И СтруктураСборки.MinorVersion = 0 Тогда
		Возврат "Microsoft Exchange Server 2010";
	ИначеЕсли СтруктураСборки.MajorVersion = 14 И СтруктураСборки.MinorVersion = 1 Тогда
		Возврат "Microsoft Exchange Server 2010 SP1";
	ИначеЕсли СтруктураСборки.MajorVersion = 14 И СтруктураСборки.MinorVersion = 2 Тогда
		Возврат "Microsoft Exchange Server 2010 SP2";
	ИначеЕсли СтруктураСборки.MajorVersion = 14 И СтруктураСборки.MinorVersion = 3 Тогда
		Возврат "Microsoft Exchange Server 2010 SP3";
	ИначеЕсли СтруктураСборки.MajorVersion = 15 Тогда
		Возврат "Microsoft Exchange Server 2013";
	Иначе
		Возврат Строка(СтруктураСборки.MajorVersion)
			+ "." + Строка(СтруктураСборки.MinorVersion)
			+ "." + Строка(СтруктураСборки.MajorBuildNumber)
			+ "." + Строка(СтруктураСборки.MinorBuildNumber);
		//
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВерсиюСервера(СтруктураСборки) Экспорт
	Если СтруктураСборки.MajorVersion > 8 Тогда
		Возврат Истина;
	ИначеЕсли СтруктураСборки.MajorVersion = 8 И СтруктураСборки.MinorVersion >= 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПроверитьПодключение(Подключение) Экспорт
	СтруктураРезультат = Новый Структура("Успешно,СтруктураСборки,ВерсияСервера,СообщениеОшибки,ВерсияСервераАктуальна", Истина, Неопределено, "", "", Ложь);
	
	СтатусОтвета = Неопределено;
	СтрокаОшибки = "";
	СтруктураСборки = ПолучитьВерсиюMSExchange(Подключение, СтрокаОшибки);
	
	Если ТипЗнч(СтруктураСборки) = Тип("Структура") Тогда
		СтруктураРезультат.СтруктураСборки = СтруктураСборки;
		СтруктураРезультат.ВерсияСервера = ОпределитьВерсиюСервера(СтруктураСборки);
		
		ВерсияАктуальна = ПроверитьВерсиюСервера(СтруктураСборки);
		СтруктураРезультат.Успешно = ВерсияАктуальна;
		СтруктураРезультат.ВерсияСервераАктуальна = ВерсияАктуальна;
		
		Если Не ВерсияАктуальна Тогда
			СтруктураРезультат.СообщениеОшибки =
				НСтр("ru = 'Установленная версия Microsoft Exchange сервера не поддерживается!
				|
				|Обмен с Microsoft Exchange поддерживается начиная с версии сервера ""Microsoft Exchange Server 2007 SP1"".
				|В настоящее время установлена версия ""'") + СтруктураРезультат.ВерсияСервера + """.";
			//
		Иначе
			СтруктураРезультат.СообщениеОшибки = НСтр("ru = 'Проверка подключения прошла успешно!'");
		КонецЕсли;
	Иначе
		СтруктураРезультат.Успешно = Ложь;
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			СтруктураРезультат.СообщениеОшибки = СтрокаОшибки;
		Иначе
			СтруктураРезультат.СообщениеОшибки = НСтр("ru = 'Не удалось подключиться к серверу!'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

Функция ДобавитьСтрокуДереваСозданияДанных(Строки, ИмяТега, ЗначениеТега) Экспорт
	НоваяСтрока = Строки.Добавить();
	НоваяСтрока.Имя = ИмяТега;
	НоваяСтрока.Значение = ЗначениеТега;
	
	Возврат НоваяСтрока;
КонецФункции

Функция ПолучитьЧасыМинутыИзМинут(СмещениеВремениВМинутах) Экспорт
	СтруктураРезультат = Новый Структура("Часы,Минуты,Минус", 0, 0, Ложь);
	
	СмещениеВремениВМинутахПоложительное = СмещениеВремениВМинутах * ?(СмещениеВремениВМинутах > 0, 1, -1);;
	
	СтруктураРезультат.Часы		= Цел(СмещениеВремениВМинутахПоложительное / 60);
	СтруктураРезультат.Минуты	= (СмещениеВремениВМинутахПоложительное - (СтруктураРезультат.Часы * 60));
	СтруктураРезультат.Минус	= (СмещениеВремениВМинутах < 0);
	
	Возврат СтруктураРезультат;
КонецФункции

Функция ПолучитьСмещениеВремениСтрокойДляMSExchange(СмещениеВремениВМинутах) Экспорт
	Если ТипЗнч(СмещениеВремениВМинутах) = Тип("Число") Тогда
		Если СмещениеВремениВМинутах = 0 Тогда
			Возврат "Z";
		Иначе
			ЧасыМинутыИзМинут = ПолучитьЧасыМинутыИзМинут(СмещениеВремениВМинутах);
			Возврат
				?(ЧасыМинутыИзМинут.Минус, "-", "+")
				+ Формат(ЧасыМинутыИзМинут.Часы, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=")
				+ ":" + Формат(ЧасыМинутыИзМинут.Минуты, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=");
			//
		КонецЕсли;
	Иначе
		Возврат "Z";
	КонецЕсли;
КонецФункции

Функция ПолучитьBaseOffsetdurationСтрокой(СмещениеВремениВМинутах) Экспорт
	Если ТипЗнч(СмещениеВремениВМинутах) = Тип("Число") Тогда
		Если СмещениеВремениВМинутах = 0 Тогда
			Возврат "PT0H";
		Иначе
			СтрРезультат = ?(СмещениеВремениВМинутах > 0, "-", "");
			СтрРезультат = СтрРезультат + "PT" + Формат(СмещениеВремениВМинутах, "ЧН=0; ЧГ=") + "M";
			Возврат СтрРезультат;
		КонецЕсли;
	Иначе
		Возврат "PT0H";
	КонецЕсли;
КонецФункции

Функция Дата1СВДатуMsExchange(Знач Дата, Знач СмещениеВремениВМинутах = Неопределено) Экспорт
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		Если ТипЗнч(СмещениеВремениВМинутах) = Тип("Число") Тогда
			СмещениеВремениСтрокой = ПолучитьСмещениеВремениСтрокойДляMSExchange(СмещениеВремениВМинутах);
			Возврат Формат(Дата, "ДФ=гггг-ММ-ддTЧЧ:мм:сс; ДП=0001-01-01T00:00:00") + СмещениеВремениСтрокой;
		Иначе
			Возврат Формат(Дата, "ДФ=гггг-ММ-ддTЧЧ:мм:ссZ; ДП=0001-01-01T00:00:00Z");
		КонецЕсли;
	Иначе
		Возврат "0001-01-01T00:00:00Z";
	КонецЕсли;
КонецФункции

Функция ДатаMSExchangeВДату1С(Знач ДатаСтрока, Знач СмещениеВремениВМинутах = Неопределено) Экспорт
	Если ТипЗнч(ДатаСтрока) = Тип("Строка") Тогда
		ДатаСтрока = СтрЗаменить(ДатаСтрока, "-", "");
		ДатаСтрока = СтрЗаменить(ДатаСтрока, "T", "");
		ДатаСтрока = СтрЗаменить(ДатаСтрока, "Z", "");
		ДатаСтрока = СтрЗаменить(ДатаСтрока, ":", "");
		Попытка		Возврат Дата(ДатаСтрока) + (СмещениеВремениВМинутах * 60);
		Исключение	Возврат Дата("00010101"); 
		КонецПопытки;
	ИначеЕсли ТипЗнч(ДатаСтрока) = Тип("Дата") Тогда
		Возврат ДатаСтрока;
	Иначе
		Возврат Дата("00010101"); 
	КонецЕсли;
КонецФункции

Функция ПолучитьДанныеИзмененийВ1С(УзелДляОбмена, МассивВыгружаемыхМетаданных) Экспорт

	// ВЫБОРКА ИЗМЕНЕНИЙ
	Возврат ОбменДаннымиСервер.ВыбратьИзменения(УзелДляОбмена, УзелДляОбмена.НомерОтправленного, МассивВыгружаемыхМетаданных);

КонецФункции // ПолучитьДанныеИзменений1С()



////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// РЕАЛИЗАЦИЯ API ИНТЕРФЕЙСА СЛУЖБЫ EWS СЕРВЕРА EXCHANGE

////////////////////////////////////////////////////////////////////////////////////////////////////////
//DistinguishedFolderId:
//
//calendar							Represents the Calendar folder.
//contacts							Represents the Contacts folder.
//deleteditems						Represents the Deleted Items folder.
//drafts							Represents the Drafts folder.
//inbox								Represents the Inbox folder.
//journal							Represents the Journal folder.
//notes								Represents the Notes folder.
//outbox							Represents the Outbox folder.
//sentitems							Represents the Sent Items folder.
//tasks								Represents the Tasks folder.
//msgfolderroot						Represents the message folder root.
//root								Represents the root of the mailbox.
//junkemail							Represents the Junk E-mail folder.
//searchfolders						Represents the Search Folders folder.
//voicemail							Represents the Voice Mail folder.
//recoverableitemsroot				Represents the dumpster root folder.
//recoverableitemsdeletions			Represents the dumpster deletions folder.
//recoverableitemsversions			Represents the dumpster versions folder.
//recoverableitemspurges			Represents the dumpster purges folder.
//archiveroot						Represents the root archive folder.
//archivemsgfolderroot				Represents the root archive message folder.
//archivedeleteditems				Represents the archive deleted items folder.
//archiverecoverableitemsroot		Represents the archive recoverable items root folder.
//Archiverecoverableitemsdeletions	Represents the archive recoverable items deletions folder.
//Archiverecoverableitemsversions	Represents the archive recoverable items versions folder.
//Archiverecoverableitemspurges		Represents the archive recoverable items purges folder.
////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВидыТелефоновMSExchange() Экспорт
	МассивРезультат = Новый Массив();
	
	Текст = 
	"AssistantPhone
	|BusinessFax
	|BusinessPhone
	|BusinessPhone2
	|Callback
	|CarPhone
	|CompanyMainPhone
	|HomeFax
	|HomePhone
	|HomePhone2
	|Isdn
	|MobilePhone
	|OtherFax
	|OtherTelephone
	|Pager
	|PrimaryPhone
	|RadioPhone
	|Telex
	|TtyTddPhone";
	Для н = 1 По СтрЧислоСтрок(Текст) Цикл
		МассивРезультат.Добавить(СтрПолучитьСтроку(Текст, н));
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

Функция ПолучитьВидыАдресовMSExchange() Экспорт
	МассивРезультат = Новый Массив();
	
	Текст = 
	"Business
	|Home
	|Other";
	Для н = 1 По СтрЧислоСтрок(Текст) Цикл
		МассивРезультат.Добавить(СтрПолучитьСтроку(Текст, н));
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

Функция ПолучитьБланкДеревоСозданияДанных() Экспорт
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Имя");
	Дерево.Колонки.Добавить("Значение");
	Возврат Дерево;
КонецФункции

Функция ПолучитьЗаголовокXML()
	Возврат "<?xml version=""1.0"" encoding=""utf-8""?>
	|";
КонецФункции

Функция ПолучитьSOAPЗаголовок1(Подключение)
	Текст =
	"<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
     |			xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
	 |";
	 
	Если ЗначениеЗаполнено(Подключение.ВерсияСервера) Тогда
		Текст = Текст + "
		|<soap:Header>
		|<t:RequestServerVersion Version=""Exchange" + Подключение.ВерсияСервера + """ />
		|</soap:Header>
		|";
	КонецЕСли;
	 
	 Текст = Текст + "
	 |<soap:Body>
	 |";
	 Возврат Текст;
КонецФункции

Функция ПолучитьSOAPЗаголовок2(Подключение)
	Текст =
	"<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	|				xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
	|               xmlns:m=""http://schemas.microsoft.com/exchange/services/2006/messages""
	|				xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
	|				xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
	|";
	
	Если ЗначениеЗаполнено(Подключение.ВерсияСервера) Тогда
		Текст = Текст + "
		|<soap:Header>
		|<t:RequestServerVersion Version=""Exchange" + Подключение.ВерсияСервера + """ />
		|</soap:Header>
		|";
	КонецЕСли;
	
	Текст = Текст + "
	|<soap:Body>
	|";
	 Возврат Текст;
КонецФункции

Функция ПолучитьSOAPЗакрывающийТег()
	Текст =
	"
	|</soap:Body>
	|</soap:Envelope>";
	Возврат Текст;
КонецФункции

Функция ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета = Неопределено, СтрокаОшибки = "")
	ТекстОтвет = ОтправитьЗапрос(Подключение, ТекстЗапроса, СтрокаОшибки);
	
	Если ЗначениеЗаполнено(ТекстОтвет) Тогда
		Дерево = СформироватьДеревоXML(ТекстОтвет);
		СтатусОтвета = ПолучитьСтатусОтвета(Дерево);
		Если	Не (СтатусОтвета.Успешно = Истина)
			И	СтатусОтвета.Свойство("MessageText")
			И	ЗначениеЗаполнено(СтатусОтвета.MessageText) Тогда
			//
			скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, СтатусОтвета.MessageText);
		КонецЕсли;
		
		Возврат Дерево;
	Иначе
		СтатусОтвета = Новый Структура("Успешно,MessageText", Ложь, СтрокаОшибки);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ВеткуДереваВТаблицуДобавитьАтрибуты(Таблица, СтрокаДерева, СтрокаТаблицы)
	Если ТипЗнч(СтрокаДерева.Атрибуты) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из СтрокаДерева.Атрибуты Цикл
			Попытка
				ИмяКолонкиАтрибута = "Атрибут_" + КлючЗначение.Ключ;
				Если Таблица.Колонки.Найти(ИмяКолонкиАтрибута) = Неопределено Тогда
					Таблица.Колонки.Добавить(ИмяКолонкиАтрибута);
				КонецЕсли;
				СтрокаТаблицы[ИмяКолонкиАтрибута] = КлючЗначение.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ВеткуДереваВТаблицу(Строки, Таблица, СтрокаТаблицы)
	Для Каждого СтрокаДерева Из Строки Цикл
		Имя			= СтрокаДерева.Имя;
		Значение	= СтрокаДерева.Значение;
		
		Если Таблица.Колонки.Найти(Имя) = Неопределено Тогда
			Таблица.Колонки.Добавить(Имя);
		КонецЕсли;
		
		Если Имя = "ItemId" Или Имя = "FolderId" Тогда
			Если Таблица.Колонки.Найти("ID") = Неопределено Тогда
				Таблица.Колонки.Добавить("ID");
			КонецЕсли;
			Попытка СтрокаТаблицы.ID = СтрокаДерева.Атрибуты["Id"];
			Исключение КонецПопытки;
			
			Если Таблица.Колонки.Найти("ChangeKey") = Неопределено Тогда
				Таблица.Колонки.Добавить("ChangeKey");
			КонецЕсли;
			Попытка СтрокаТаблицы.ChangeKey = СтрокаДерева.Атрибуты["ChangeKey"];
			Исключение КонецПопытки;
		ИначеЕсли Имя = "ParentFolderId" Тогда
			Если Таблица.Колонки.Найти("ParentFolderId") = Неопределено Тогда
				Таблица.Колонки.Добавить("ParentFolderId");
			КонецЕсли;
			Попытка СтрокаТаблицы.ParentFolderId = СтрокаДерева.Атрибуты["Id"];
			Исключение КонецПопытки;
		ИначеЕсли (Имя = "EmailAddresses" Или Имя = "PhoneNumbers" Или Имя =  "ImAddresses") И СтрокаДерева.Строки.Количество() > 0 Тогда
			СтрокаТаблицы[Имя] = Новый ТаблицаЗначений();
			Если СтрокаТаблицы[Имя].Колонки.Найти("Entry") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("Entry");
			КонецЕсли;
			Для Каждого Стр Из СтрокаДерева.Строки Цикл
				НоваяСтрока = СтрокаТаблицы[Имя].Добавить();
				НоваяСтрока.Entry = Стр.Значение;
				ВеткуДереваВТаблицуДобавитьАтрибуты(СтрокаТаблицы[Имя], Стр, НоваяСтрока)
			КонецЦикла;
		ИначеЕсли (Имя = "RequiredAttendees" Или Имя = "OptionalAttendees") Тогда
			СтрокаТаблицы[Имя] = Новый ТаблицаЗначений();
			Если СтрокаТаблицы[Имя].Колонки.Найти("Attendee") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("Attendee");
			КонецЕсли;
			Для Каждого СтрAttendee Из СтрокаДерева.Строки Цикл
				СтрокаAttendee = СтрокаТаблицы[Имя].Добавить();
				СтрокаAttendee.Attendee = Новый ТаблицаЗначений();
				ВеткуДереваВТаблицуДобавитьАтрибуты(СтрокаТаблицы[Имя], СтрAttendee, СтрокаAttendee);
				
				Если СтрокаAttendee.Attendee.Колонки.Найти("Mailbox") = Неопределено Тогда
					СтрокаAttendee.Attendee.Колонки.Добавить("Mailbox");
				КонецЕсли;
				Если СтрокаAttendee.Attendee.Колонки.Найти("ResponseType") = Неопределено Тогда
					СтрокаAttendee.Attendee.Колонки.Добавить("ResponseType");
				КонецЕсли;
				
				Для Каждого СтрMailbox Из СтрAttendee.Строки Цикл
					Если СтрMailbox.Имя = "Mailbox" Тогда
						СтрокаMailBox = СтрокаAttendee.Attendee.Добавить();
						СтрокаMailBox.MailBox = Новый ТаблицаЗначений();
						ВеткуДереваВТаблицуДобавитьАтрибуты(СтрокаAttendee.Attendee, СтрMailbox, СтрокаMailBox);
						
						НоваяСтрока = СтрокаMailBox.Mailbox.Добавить();
						ВеткуДереваВТаблицу(СтрMailbox.Строки, СтрокаMailBox.Mailbox, НоваяСтрока);
						
					ИначеЕсли СтрMailbox.Имя = "ResponseType" Тогда
						НоваяСтрока = СтрокаAttendee.Attendee.Добавить();
						НоваяСтрока.ResponseType = СтрMailbox.Значение;
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Имя = "Attachments" Тогда
			СтрокаТаблицы[Имя] = Новый ТаблицаЗначений();
			ВеткуДереваВТаблицуДобавитьАтрибуты(Таблица, СтрокаДерева, СтрокаТаблицы);
			
			Если СтрокаТаблицы[Имя].Колонки.Найти("FileAttachment") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("FileAttachment");
			КонецЕсли;
			Для Каждого СтрFileAttachment Из СтрокаДерева.Строки Цикл
				Если СтрFileAttachment.Имя = "FileAttachment" Тогда
					
					СтрокаFileAttachment = СтрокаТаблицы[Имя].Добавить();
					СтрокаFileAttachment.FileAttachment = Новый ТаблицаЗначений();
					
					ВеткуДереваВТаблицуДобавитьАтрибуты(СтрокаТаблицы[Имя], СтрFileAttachment, СтрокаFileAttachment);
					
					НоваяСтрока = СтрокаFileAttachment.FileAttachment.Добавить();
					ВеткуДереваВТаблицу(СтрFileAttachment.Строки, СтрокаFileAttachment.FileAttachment, НоваяСтрока);
					
				КонецЕсли;
			КонецЦикла;
			
			
			
		//ИначеЕсли Имя = "DLExpansion" Тогда
		//	СтрокаТаблицы[Имя] = Новый ТаблицаЗначений();
		//	ВеткуДереваВТаблицуДобавитьАтрибуты(Таблица, СтрокаДерева, СтрокаТаблицы);
		//	
		//	Если СтрокаТаблицы[Имя].Колонки.Найти("Mailbox") = Неопределено Тогда
		//		СтрокаТаблицы[Имя].Колонки.Добавить("Mailbox");
		//	КонецЕсли;
		//	Для Каждого СтрMailbox Из СтрокаДерева.Строки Цикл
		//		Если СтрMailbox.Имя = "Mailbox" Тогда
		//			СтрокаMailBox = СтрокаТаблицы.Mailbox.Добавить();
		//			СтрокаMailBox.MailBox = Новый ТаблицаЗначений();
		//			ВеткуДереваВТаблицуДобавитьАтрибуты(СтрокаТаблицы[Имя], СтрMailbox, СтрокаMailBox);
		//			
		//			НоваяСтрока = СтрокаMailBox.Mailbox.Добавить();
		//			ВеткуДереваВТаблицу(СтрMailbox.Строки, СтрокаMailBox.Mailbox, НоваяСтрока);
		//		КонецЕсли;
		//	КонецЦикла;
			
		ИначеЕсли Имя = "Categories"  Тогда
			СтрокаТаблицы[Имя] = Новый ТаблицаЗначений();
			Если СтрокаТаблицы[Имя].Колонки.Найти("String") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("String");
			КонецЕсли;
			Для Каждого Стр Из СтрокаДерева.Строки Цикл
				НоваяСтрока = СтрокаТаблицы[Имя].Добавить();
				НоваяСтрока.String = Стр.Значение;
				ВеткуДереваВТаблицуДобавитьАтрибуты(СтрокаТаблицы[Имя], Стр, НоваяСтрока)
			КонецЦикла;
			
		ИначеЕсли Имя = "ToRecipients" 
		  ИЛИ Имя = "ToRecipients"
		  ИЛИ Имя = "CcRecipients"
		  ИЛИ Имя = "ReceivedBy"
		  ИЛИ Имя = "ReceivedRepresenting"
		  ИЛИ Имя = "From"
		  ИЛИ Имя = "Sender" Тогда
		  
			СтрокаТаблицы[Имя] = Новый ТаблицаЗначений();
			ВеткуДереваВТаблицуДобавитьАтрибуты(Таблица, СтрокаДерева, СтрокаТаблицы);
			
			Если СтрокаТаблицы[Имя].Колонки.Найти("Mailbox") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("Mailbox");
			КонецЕсли;
			Для Каждого СтрMailbox Из СтрокаДерева.Строки Цикл
				Если СтрMailbox.Имя = "Mailbox" Тогда
					СтрокаMailBox = СтрокаТаблицы[Имя].Добавить();
					СтрокаMailBox.MailBox = Новый ТаблицаЗначений();
					ВеткуДереваВТаблицуДобавитьАтрибуты(СтрокаТаблицы[Имя], СтрMailbox, СтрокаMailBox);
					
					НоваяСтрока = СтрокаMailBox.Mailbox.Добавить();
					ВеткуДереваВТаблицу(СтрMailbox.Строки, СтрокаMailBox.Mailbox, НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Имя = "Changes"  Тогда
			СтрокаТаблицы[Имя] = Новый ТаблицаЗначений();
			ВеткуДереваВТаблицуДобавитьАтрибуты(Таблица, СтрокаДерева, СтрокаТаблицы);
			
			Если СтрокаТаблицы[Имя].Колонки.Найти("Create") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("Create");
			КонецЕсли;
			
			Если СтрокаТаблицы[Имя].Колонки.Найти("Update") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("Update");
			КонецЕсли;
			
			Если СтрокаТаблицы[Имя].Колонки.Найти("Delete") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("Delete");
			КонецЕсли;
			
			Если СтрокаТаблицы[Имя].Колонки.Найти("ReadFlagChange") = Неопределено Тогда
				СтрокаТаблицы[Имя].Колонки.Добавить("ReadFlagChange");
			КонецЕсли;
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				СтрокаChanges = СтрокаТаблицы[Имя].Добавить();
				
				СтрокаChanges["Create"] = Новый ТаблицаЗначений();
				СтрокаChanges["Update"] = Новый ТаблицаЗначений();
				СтрокаChanges["Delete"] = Новый ТаблицаЗначений();
				СтрокаChanges["ReadFlagChange"] = Новый ТаблицаЗначений();
				
			КонецЕсли;
			
			Для Каждого СтрChanges Из СтрокаДерева.Строки Цикл				
				СтрокаИзменения = СтрокаChanges[СтрChanges.Имя].Добавить();
				ВеткуДереваВТаблицуДобавитьАтрибуты(СтрокаChanges[СтрChanges.Имя], СтрChanges, СтрокаИзменения);
				
				//НоваяСтрока = СтрокаИзменения.Добавить();
				ВеткуДереваВТаблицу(СтрChanges.Строки, СтрокаChanges[СтрChanges.Имя], СтрокаИзменения);
				
			КонецЦикла;
			
		ИначеЕсли СтрокаДерева.Строки.Количество() > 0 Тогда
			СтрокаТаблицы[Имя] = Новый ТаблицаЗначений();
			ВеткуДереваВТаблицуДобавитьАтрибуты(Таблица, СтрокаДерева, СтрокаТаблицы);
			НоваяСтрока = СтрокаТаблицы[Имя].Добавить();
			ВеткуДереваВТаблицу(СтрокаДерева.Строки, СтрокаТаблицы[Имя], НоваяСтрока)
		Иначе
			СтрокаТаблицы[Имя] = Значение;
			
			ВеткуДереваВТаблицуДобавитьАтрибуты(Таблица, СтрокаДерева, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура СформироватьXMLРекурсивно(ТекстЗапроса, Строки)
	Для Каждого СтрокаДерева Из Строки Цикл
		ИмяТега = СтрокаДерева.Имя;
		ЗначениеТега = СтрокаДерева.Значение;
		
		ПозицияПробела = Найти(ИмяТега, " ");
		Если ПозицияПробела > 0 Тогда
			ИмяЗакрывающегоТега = Лев(ИмяТега, ПозицияПробела - 1);
		Иначе
			ИмяЗакрывающегоТега = ИмяТега
		КонецЕсли;
		
		Если ЗначениеТега = Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса +
			"<" + ИмяТега + ">
			|";
			
			СформироватьXMLРекурсивно(ТекстЗапроса, СтрокаДерева.Строки);
			
			ТекстЗапроса = ТекстЗапроса +
			"</" + ИмяЗакрывающегоТега + ">
			|";
		Иначе
			Если ЗначениеТега = "" Тогда
				ТекстЗапроса = ТекстЗапроса +
				"<" + ИмяТега + "/>
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса +
				"<" + ИмяТега + ">" + ЗначениеТега + "</" + ИмяЗакрывающегоТега + ">
				|";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСтатусОтвета(Дерево, Знач ИмяСообщенияОтвета = Неопределено, ДополнительныеПараметры = Неопределено, СчитатьУспешнымЕслиХотьОдноУспешно = Истина) Экспорт
	Если ИмяСообщенияОтвета = Неопределено Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "ResponseMessages"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Попытка		СтрокаДерева = НайденныеСтроки[0].Строки[0];
			Исключение	СтрокаДерева = Неопределено;
			КонецПопытки;
			Если СтрокаДерева = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				ИмяСообщенияОтвета = СтрокаДерева.Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтрокиСообщенийОтвета = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", ИмяСообщенияОтвета), Истина);
	Если НайденныеСтрокиСообщенийОтвета.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Результат = Новый Структура("Успешно,MessageText", Ложь, "");
		
		Для Каждого ТекСтрока Из НайденныеСтрокиСообщенийОтвета Цикл
			Если ТипЗнч(ТекСтрока.Атрибуты) = Тип("Соответствие") Тогда
				Для Каждого КлючЗначение Из ТекСтрока.Атрибуты Цикл
					Попытка Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
					Исключение КонецПопытки;
				КонецЦикла;
			КонецЕсли;
			
			НайденныеСтроки = ТекСтрока.Строки.НайтиСтроки(Новый Структура("Имя", "ResponseCode"));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Результат.Вставить("ResponseCode", НайденныеСтроки[0].Значение);
			КонецЕсли;
			
			Если Результат["ResponseClass"] = "Success" Тогда
				Результат.Успешно = Результат.Успешно Или СчитатьУспешнымЕслиХотьОдноУспешно;
			Иначе
				Результат.Успешно = Результат.Успешно Или (Не СчитатьУспешнымЕслиХотьОдноУспешно);
				
				НайденныеСтроки = ТекСтрока.Строки.НайтиСтроки(Новый Структура("Имя", "MessageText"));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда
						скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(Результат.MessageText, НайденныеСтроки[0].Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
КонецФункции

Функция ВеткуДереваОтветаВСтруктуру(СтрокиДерева, СтруктураРезультат = Неопределено) Экспорт
	Если ТипЗнч(СтруктураРезультат) <> Тип("Структура") Тогда
		СтруктураРезультат = Новый Структура();
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		бИмяСвободно = Ложь;
		Попытка
			Если Не СтруктураРезультат.Свойство(СтрокаДерева.Имя) Тогда
				бИмяСвободно = Истина;
				ПолноеИмя = СтрокаДерева.Имя;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Не бИмяСвободно Тогда
			Для Счетчик = 1 По 30 Цикл
				ПолноеИмя = СтрокаДерева.Имя + "_" + Формат(Счетчик, "ЧН=0; ЧГ=");
				Если Не СтруктураРезультат.Свойство(ПолноеИмя) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Счетчик >= 30 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДерева.Атрибуты) = Тип("Соответствие") Тогда
			Для Каждого КлючЗначение Из СтрокаДерева.Атрибуты Цикл
				Попытка СтруктураРезультат.Вставить("Attr_" + ПолноеИмя + "_"  + КлючЗначение.Ключ, КлючЗначение.Значение);
				Исключение КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			Попытка
				СтруктураРезультат.Вставить(ПолноеИмя, Новый Структура());
			Исключение
				Продолжить;
			КонецПопытки;
			ВеткуДереваОтветаВСтруктуру(СтрокаДерева.Строки, СтруктураРезультат[ПолноеИмя]);
		Иначе
			Попытка
				СтруктураРезультат.Вставить(ПолноеИмя, СтрокаДерева.Значение);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
КонецФункции

Процедура СформироватьДеревоXMLРекурсивно(СтрокаДерева, Чтение,  ДополнительныеПараметры = Неопределено)
	Если Чтение.КоличествоАтрибутов() > 0 Тогда
		Если ТипЗнч(СтрокаДерева.Атрибуты) <> Тип("Соответствие") Тогда
			СтрокаДерева.Атрибуты = Новый Соответствие();
		КонецЕсли;
		Пока Чтение.ПрочитатьАтрибут() Цикл
			СтрокаДерева.Атрибуты.Вставить(Чтение.Имя, Чтение.Значение);
		КонецЦикла;
	КонецЕсли;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			СтрокаДерева.Значение = Чтение.Значение;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.Имя = Чтение.ЛокальноеИмя;
			СформироватьДеревоXMLРекурсивно(НоваяСтрока, Чтение, ДополнительныеПараметры);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьДеревоXML(ТекстXML,  ДополнительныеПараметры = Неопределено)
	Дерево = Новый ДеревоЗначений();
	
	Дерево.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Атрибуты");
	Дерево.Колонки.Добавить("Значение");
	
	Чтение = Новый ЧтениеXML();
	Чтение.УстановитьСтроку(ТекстXML);
	Чтение.Прочитать();
	
	Корень = Дерево.Строки.Добавить();
	Корень.Имя = Чтение.ЛокальноеИмя;
	
	СформироватьДеревоXMLРекурсивно(Корень, Чтение);
	
	Возврат Дерево;
КонецФункции

Функция ОтправитьЗапрос(Подключение, ТекстXML, СтрокаОшибки = "") Экспорт
	АдресСервера				 = Подключение.Сервер;
	АдресРесурса				 = Подключение.ПутьКWEBСервису;
	Порт						 = Подключение.Порт;
	ИмяПользователя				 = Подключение.Логин;
	Пароль						 = Подключение.Пароль;
	ЗащищенноеСоединение		 = Подключение.Защищенное;
	ИспользоватьАутентификациюОС = Подключение.ИспользоватьАутентификациюОС;
	
	ИспользоватьАутентификацию = Истина;
	
	Попытка
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла("xml");
		
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаЗапроса, КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстXML);
		ЗаписьТекста.Закрыть();
		
		Если ЗащищенноеСоединение Тогда
			Попытка
				// На случай использования версии платформы, в которой еще не поддерживается тип ЗащищенноеСоединениеOpenSSL
				ОбъектOpenSSL = Вычислить("Новый ЗащищенноеСоединениеOpenSSL");
			Исключение
				ОбъектOpenSSL = Неопределено;
			КонецПопытки;
		Иначе
			ОбъектOpenSSL = Неопределено;
		КонецЕсли;
		
		Если ИспользоватьАутентификацию Тогда
			Если ОбъектOpenSSL = Неопределено Тогда
				Если ЗначениеЗаполнено(Порт) Тогда
					Соединение = Новый HTTPСоединение(АдресСервера, Порт, ИмяПользователя, Пароль,,,, ИспользоватьАутентификациюОС);
				Иначе
					Соединение = Новый HTTPСоединение(АдресСервера,, ИмяПользователя, Пароль,,,, ИспользоватьАутентификациюОС);
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Порт) Тогда
					Соединение = Новый HTTPСоединение(АдресСервера, Порт, ИмяПользователя, Пароль,,, ОбъектOpenSSL, ИспользоватьАутентификациюОС);
				Иначе
					Соединение = Новый HTTPСоединение(АдресСервера,, ИмяПользователя, Пароль,,, ОбъектOpenSSL, ИспользоватьАутентификациюОС);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ОбъектOpenSSL = Неопределено Тогда
				Если ЗначениеЗаполнено(Порт) Тогда
					Соединение = Новый HTTPСоединение(АдресСервера, Порт,,,, ЗащищенноеСоединение);
				Иначе
					Соединение = Новый HTTPСоединение(АдресСервера,,,,, ЗащищенноеСоединение);
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Порт) Тогда
					Соединение = Новый HTTPСоединение(АдресСервера, Порт,,,,, ОбъектOpenSSL);
				Иначе
					Соединение = Новый HTTPСоединение(АдресСервера,,,,,, ОбъектOpenSSL);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("xml");
		
//START Кайдашов 08/07/19  416
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept","*/*");
		Заголовки.Вставить("Content-Type","text/xml");
		Заголовки.Вставить("Accept-Encoding","");
		Заголовки.Вставить("Connection","Keep-Alive");
		Заголовки.Вставить("Cache-Control","no-cache");
		Зпрс = НОвый HTTPЗапрос(АдресРесурса,Заголовки);
		Зпрс.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
		
		Соединение.ОтправитьДляОбработки(Зпрс,ИмяФайлаОтвета);

		//Заголовки = 
		//"Accept: */*" + Символы.ВК + Символы.ПС +
		//"Content-Type: text/xml" + Символы.ВК + Символы.ПС +
		//"Accept-Encoding: " + Символы.ВК + Символы.ПС +
		//"Connection: Keep-Alive" + Символы.ВК + Символы.ПС +
		//"Cache-Control: no-cache";
		//
		//Соединение.ОтправитьДляОбработки(ИмяФайлаЗапроса, АдресРесурса, ИмяФайлаОтвета, Заголовки);
//END Кайдашов

		Попытка УдалитьФайлы(ИмяФайлаЗапроса);
 		Исключение КонецПопытки;
		
		Файл = Новый Файл(ИмяФайлаОтвета);
		
		Если Файл.Существует() Тогда
			ТекстОтвет = "";
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОтвета, КодировкаТекста.UTF8);
			ТекстОтвет = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
			Попытка УдалитьФайлы(ИмяФайлаОтвета);
			Исключение КонецПопытки;
			
			Возврат ТекстОтвет;
		Иначе
			ВызватьИсключение НСтр("ru = 'Не получен файл ответа!'");
		КонецЕсли;
		
	Исключение
		ИО = ИнформацияОбОшибке();
		КраткоеПредставление = КраткоеПредставлениеОшибки(ИО);
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИО);
		//Если ЗначениеЗаполнено(КраткоеПредставление) Тогда
		//	скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, КраткоеПредставление);
		//Иначе
		//	скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, ПодробноеПредставление);
		//КонецЕсли;
		скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, ПодробноеПредставление);
		
		Попытка УдалитьФайлы(ИмяФайлаЗапроса);
		Исключение КонецПопытки;
		Попытка УдалитьФайлы(ИмяФайлаОтвета);
		Исключение КонецПопытки;
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ConvertID(Подключение, ID, AlternateIdFormat = "EwsLegacyId", DestinationFormat = "EwsId", Mailbox, СтрокаОшибки = "") Экспорт
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/bb799665(v=exchg.150).aspx
	
	// Пример:
	// ConvertID(Подключение, IDУчастника, "EwsLegacyId", "EwsId", Подключение.АдресEMail, СтрОшибки);
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	ТекстЗапроса = ТекстЗапроса + "
	|<ConvertId xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
	|		   xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types""
	|		   DestinationFormat=""" + DestinationFormat + """>
	|<SourceIds>
	|	<t:AlternateId Format=""" + AlternateIdFormat + """ Id=""" + ID + """ Mailbox=""" + Mailbox + """/>
	|</SourceIds>
	|</ConvertId>";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "AlternateId"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат НайденныеСтроки[0].Атрибуты["Id"];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция FindItem(	Подключение,
					FolderId = Неопределено,
					DistinguishedFolderId = Неопределено,
					BaseShape = "IdOnly",
					Restriction = "",
					SortOrder = "",
					QueryString = "",
					СтрокаОшибки = "",
					ТипЭлемента = Неопределено
				) Экспорт
	//
	
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/aa566107(v=exchg.150).aspx
	
	Если ТипЗнч(FolderId) = Тип("Строка") И ЗначениеЗаполнено(FolderId) Тогда
		ParentFolderIds = "<t:FolderId Id=""" + FolderId + """/>";
	ИначеЕсли ТипЗнч(DistinguishedFolderId) = Тип("Строка") И ЗначениеЗаполнено(DistinguishedFolderId) Тогда
		Если Подключение.Свойство("АдресEmail") 
		  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
			ParentFolderIds = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		Иначе
			ParentFolderIds = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """/>";
		КонецЕсли;
		
	Иначе
		скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'FindItem: не указаны FolderId и DistinguishedFolderId.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	ТекстЗапроса = ТекстЗапроса +
	"	<FindItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
	|			   xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types""
	|			  Traversal=""Shallow"">
	|	  <ItemShape>
	|		<t:BaseShape>" + BaseShape + "</t:BaseShape>
	|	  </ItemShape>
	|";
	
	// Описание Restriction
	// http://msdn.microsoft.com/en-us/library/aa563791(v=exchg.150).aspx
	Если ЗначениеЗаполнено(Restriction) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"	<Restriction>
		|		" + Restriction + "
		|	</Restriction>
		|";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(SortOrder) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"	<SortOrder>
		|		" + SortOrder + "
		|	</SortOrder>
		|";
	КонецЕсли;
	
	// Описание QueryString
	// http://msdn.microsoft.com/en-us/library/ee693615(v=exchg.150).aspx
	Если ЗначениеЗаполнено(QueryString) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"	<QueryString>" + QueryString + "</QueryString>
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"	  <ParentFolderIds>
	|		" + ParentFolderIds + "
	|	  </ParentFolderIds>
	|";
	
	ТекстЗапроса = ТекстЗапроса +
	"	</FindItem>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "RootFolder"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:RootFolder"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		RootFolder = НайденныеСтроки[0];
		Попытка		НайденоВсего = Число(RootFolder.Атрибуты.Получить("TotalItemsInView"));
		Исключение	НайденоВсего = Неопределено;
		КонецПопытки;
		
		Возврат RootFolder;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция GetAttachment(Подключение, ID, ChangeKey = Неопределено, СтрокаОшибки = "")
	
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/aa494316(v=exchg.140).aspx
	
	//<?xml version="1.0" encoding="utf-8"?>
	//<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	//xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	//xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	//xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//  <soap:Body>
	//	<GetAttachment xmlns="http://schemas.microsoft.com/exchange/services/2006/messages"
	//	xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//	  <AttachmentShape/>
	//	  <AttachmentIds>
	//		<t:AttachmentId Id="AAAtAEFkbWluaX..."/>
	//	  </AttachmentIds>
	//	</GetAttachment>
	//  </soap:Body>
	//</soap:Envelope>
	
	Если ТипЗнч(ID) = Тип("Строка") Тогда
		AttachmentIds = "<t:AttachmentId Id=""" + ID + """" + ?(ЗначениеЗаполнено(ChangeKey), " ChangeKey=""" + ChangeKey + """", "") + "/>";
	ИначеЕсли ТипЗнч(ID) = Тип("Массив") Тогда
		AttachmentIds = "";
		Для Каждого AttachmentId Из ID Цикл
			Если ТипЗнч(AttachmentId) = Тип("Структура") Тогда
				_AttachmentId = Неопределено;
				_ChangeKey = Неопределено;
				AttachmentId.Свойство("ID", _AttachmentId);
				AttachmentId.Свойство("ChangeKey", _ChangeKey);
			Иначе
				_AttachmentId = AttachmentId;
				_ChangeKey = ChangeKey;
			КонецЕсли;
			
			AttachmentIds = AttachmentIds + ?(AttachmentIds = "", "", Символы.ПС);
			AttachmentIds = AttachmentIds + "<t:AttachmentId Id=""" + AttachmentId + """" + ?(ЗначениеЗаполнено(_ChangeKey), " ChangeKey=""" + ChangeKey + """", "") + "/>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок2(Подключение);
	
	ТекстЗапроса = ТекстЗапроса +
	"<GetAttachment xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
	|xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
	|  <AttachmentShape/>
	|  <AttachmentIds>
	|	" + AttachmentIds + "
	|  </AttachmentIds>
	|</GetAttachment>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	//<?xml version="1.0" encoding="utf-8"?>
	//<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
	//			   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	//			   xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	//  <soap:Header>
	//	<t:ServerVersionInfo MajorVersion="8" MinorVersion="0" MajorBuildNumber="662" MinorBuildNumber="0" 
	//						 xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"/>
	//  </soap:Header>
	//  <soap:Body>
	//	<GetAttachmentResponse xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" 
	//						   xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" 
	//						   xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
	//	  <m:ResponseMessages>
	//		<m:GetAttachmentResponseMessage ResponseClass="Success">
	//		  <m:ResponseCode>NoError</m:ResponseCode>
	//		  <m:Attachments>
	//			<t:FileAttachment>
	//			  <t:AttachmentId Id="AAAtAEFkbWluaX..."/>
	//			  <t:Name>SomeFile</t:Name>
	//			  <t:Content>AQIDBAU=</t:Content>
	//			</t:FileAttachment>
	//		  </m:Attachments>
	//		</m:GetAttachmentResponseMessage>
	//	  </m:ResponseMessages>
	//	</GetAttachmentResponse>
	//  </soap:Body>
	//</soap:Envelope>
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "ResponseMessages"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:ResponseMessages"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		ResponseMessages = НайденныеСтроки[0];
		
		Возврат ResponseMessages;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция CreateAttachment(Подключение, СтруктураВложения, ID, ChangeKey = Неопределено, СтрокаОшибки = "")

	// Описание в MSDN:
	// https://msdn.microsoft.com/en-us/library/office/aa565877%28v=exchg.150%29.aspx
	
	//<?xml version="1.0" encoding="utf-8"?>
	//<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	//               xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	//               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	//               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//<soap:Body>
	//  <CreateAttachment xmlns="http://schemas.microsoft.com/exchange/services/2006/messages"
	//                    xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//    <ParentItemId Id="AAAtAE..." ChangeKey="CQAAABYA..."/>
	//    <Attachments>
	//      <t:FileAttachment>
	//        <t:Name>SomeFile</t:Name>
	//        <t:Content>AQIDBAU=</t:Content>
	//      </t:FileAttachment>
	//    </Attachments>
	//  </CreateAttachment>
	//</soap:Body>
	//</soap:Envelope>
	
	AttachmentIds = 
	"<t:FileAttachment>
	|<t:Name>" + СтруктураВложения.Имя + ?(ЗначениеЗаполнено(СтруктураВложения.Расширение), "." + СтруктураВложения.Расширение, "") + "</t:Name>
	|<t:Content>" + Base64Строка(СтруктураВложения.ДвоичныеДанные) + "</t:Content>
	|</t:FileAttachment>
	|";		

	ParentItemId = "<ParentItemId Id=""" + ID + """" + ?(ЗначениеЗаполнено(ChangeKey), " ChangeKey=""" + ChangeKey + """", "") + "/>";
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок2(Подключение);
	
	ТекстЗапроса = ТекстЗапроса +
	"<CreateAttachment xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
	|				   xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
	|	" + ParentItemId + "
	|<Attachments>
	|	" + AttachmentIds + "
	|</Attachments>
	|</CreateAttachment>";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	//<?xml version="1.0" encoding="utf-8"?>
	//<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
	//               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	//               xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	//  <soap:Header>
	//    <t:ServerVersionInfo MajorVersion="8" MinorVersion="0" MajorBuildNumber="653" MinorBuildNumber="0" 
	//                         xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"/>
	//  </soap:Header>
	//  <soap:Body>
	//    <CreateAttachmentResponse xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" 
	//                              xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" 
	//                              xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
	//      <m:ResponseMessages>
	//        <m:CreateAttachmentResponseMessage ResponseClass="Success">
	//          <m:ResponseCode>NoError</m:ResponseCode>
	//          <m:Attachments>
	//            <t:FileAttachment>
	//              <t:AttachmentId Id="AAAtAE=" RootItemId="AAAtAEFk=" RootItemChangeKey="CQAAAB"/>
	//            </t:FileAttachment>
	//          </m:Attachments>
	//        </m:CreateAttachmentResponseMessage>
	//      </m:ResponseMessages>
	//    </CreateAttachmentResponse>
	//  </soap:Body>
	//</soap:Envelope>

	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "ResponseMessages"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:ResponseMessages"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		ResponseMessages = НайденныеСтроки[0];
		
		Возврат ResponseMessages;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция GetItem(Подключение, ID, ChangeKey = Неопределено, ТипЭлемента, BaseShape = Неопределено, Properties = Неопределено, СтрокаОшибки = "")
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/aa565934(v=exchg.150).aspx
	
	Если BaseShape = Неопределено Тогда
		BaseShape = "AllProperties";
	КонецЕсли;
	
	Если ТипЗнч(ID) = Тип("Строка") Тогда
		ItemIds = "<t:ItemId Id=""" + ID + """" + ?(ЗначениеЗаполнено(ChangeKey), " ChangeKey=""" + ChangeKey + """", "") + "/>";
	ИначеЕсли ТипЗнч(ID) = Тип("Массив") Тогда
		ItemIds = "";
		Для Каждого ItemId Из ID Цикл
			Если ТипЗнч(ItemId) = Тип("Структура") Тогда
				_ItemId = Неопределено;
				_ChangeKey = Неопределено;
				ItemId.Свойство("ID", _ItemId);
				ItemId.Свойство("ChangeKey", _ChangeKey);
			ИначеЕсли ТипЗнч(ItemId) = Тип("СтрокаТаблицыЗначений") Тогда
				_ItemId = ItemId.ID;
				Попытка
					_ChangeKey = ItemId.ChangeKey;
				Исключение
					_ChangeKey = "";
				КонецПопытки;
				
			КонецЕсли;
			
			ItemIds = ItemIds + ?(ItemIds = "", "", Символы.ПС);
			ItemIds = ItemIds + "<t:ItemId Id=""" + _ItemId + """" + ?(ЗначениеЗаполнено(_ChangeKey), " ChangeKey=""" + ChangeKey + """", "") + "/>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	Если ТипЭлемента = "Контакт" Тогда
		ТекстЗапроса = ТекстЗапроса +
		"<GetItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"">
		|<ItemShape>
		|	<t:BaseShape>" + BaseShape + "</t:BaseShape>
		|	<t:AdditionalProperties>
		|		<t:FieldURI FieldURI=""item:ParentFolderId""/>
		|	</t:AdditionalProperties>
		|</ItemShape>
		|";
	ИначеЕсли ТипЭлемента = "Событие" Тогда
		ТекстЗапроса = ТекстЗапроса +
		"<GetItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"">
		|<ItemShape>
		|	<t:BaseShape>" + BaseShape + "</t:BaseShape>
		|</ItemShape>
		|";
	ИначеЕсли ТипЭлемента = "ПочтовоеСообщение" Тогда
		AdditionalProperties = "";
		Если ТипЗнч(Properties) = Тип("Массив") 
		  И Properties.Количество() > 0 Тогда 
		  Для Каждого Property Из Properties Цикл		
				AdditionalProperties = AdditionalProperties + ?(AdditionalProperties = "", "", Символы.ПС);
				AdditionalProperties = AdditionalProperties + "<t:FieldURI FieldURI=""item:" + Property + """/>";
			КонецЦикла;
			
			AdditionalProperties = 	
			"		<t:AdditionalProperties>
			|"			+ AdditionalProperties + "
			|		</t:AdditionalProperties>";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
		"<GetItem
		|	xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
		|	xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
		|	<ItemShape>
		|		<t:BaseShape>" + BaseShape + "</t:BaseShape>
		|		" + AdditionalProperties + "
		//|		<t:IncludeMimeContent>true</t:IncludeMimeContent>
		|	</ItemShape>
		|";
				
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"	<ItemIds>
	|		" + ItemIds + "
	|	</ItemIds>
	|</GetItem>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "ResponseMessages"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:ResponseMessages"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		ResponseMessages = НайденныеСтроки[0];
		
		Возврат ResponseMessages;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция SendItem(Подключение, ID, ChangeKey = Неопределено, DistinguishedFolderId, СтрокаОшибки, ДополнительныеДанные)
	// Описание в MSDN:
	//https://msdn.microsoft.com/en-us/library/aa580238%28v=exchg.150%29.aspx

	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок2(Подключение);
	
	Если ТипЗнч(ID) = Тип("Строка") Тогда
		ItemIds = "<t:ItemId Id=""" + ID + """" + ?(ЗначениеЗаполнено(ChangeKey), " ChangeKey=""" + ChangeKey + """", "") + "/>";
	ИначеЕсли ТипЗнч(ID) = Тип("ТаблицаЗначений") Тогда
		ItemIds = "";
		Для Каждого ItemId Из ID Цикл
			ItemIds = ItemIds + ?(ItemIds = "", "", Символы.ПС);
			ItemIds = ItemIds + "<t:ItemId Id=""" + ItemId.ID + """" + ?(ЗначениеЗаполнено(ItemId.ChangeKey), " ChangeKey=""" + ItemId.ChangeKey + """", "") + "/>";
		КонецЦикла;
	КонецЕсли;
	
	Если Подключение.Свойство("АдресEmail") 
	  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
		SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
		|	<t:Mailbox>
		|	<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
		|	</t:Mailbox>
		|	</t:DistinguishedFolderId>";
	Иначе
		SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """/>";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"<SendItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"" 
	|		   SaveItemToFolder=""true"">
	|	<ItemIds>
	|		" + ItemIds + "
	|	</ItemIds>  
	|	<SavedItemFolderId>
	|	" + SavedItemFolderId + "
	|	</SavedItemFolderId>
	|</SendItem>";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Возврат СтатусОтвета;
	
КонецФункции

Функция ExpandDL(Подключение, ID, ChangeKey = Неопределено, СтрокаОшибки = "")
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	ТекстЗапроса = ТекстЗапроса +
	"<ExpandDL xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
	|		  xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
	|	<Mailbox>
	|	  <t:ItemId Id=""" + ID + """" + ?(ЗначениеЗаполнено(ChangeKey), "ChangeKey=""" + ChangeKey + """", "") + "/>
	|	</Mailbox>
	|</ExpandDL>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "ResponseMessages"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:ResponseMessages"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		ResponseMessages = НайденныеСтроки[0];
		
		Возврат ResponseMessages;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция FindFolder(	Подключение,
					FolderId = Неопределено,
					DistinguishedFolderId = Неопределено,
					СтрокаОшибки = "",
					BaseShape = "Default",
					Restriction = "",
					Дерево = Неопределено
				) Экспорт
	//
	
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/aa563918(v=exchg.150).aspx
	
	Если ТипЗнч(FolderId) = Тип("Строка") И ЗначениеЗаполнено(FolderId) Тогда
		ParentFolderIds = "<t:FolderId Id=""" + FolderId + """/>";
	ИначеЕсли ТипЗнч(DistinguishedFolderId) = Тип("Строка") И ЗначениеЗаполнено(DistinguishedFolderId) Тогда
		Если Подключение.Свойство("АдресEmail") 
		  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
			ParentFolderIds = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		Иначе	
			ParentFolderIds = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """/>";
		КонецЕсли;
		
	Иначе
		скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'FindFolder: не указаны FolderId и DistinguishedFolderId.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	ТекстЗапроса = ТекстЗапроса +
	"<FindFolder Traversal=""Shallow"" xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"">
	|	<FolderShape>
	|		<t:BaseShape>" + BaseShape + "</t:BaseShape>
	|	</FolderShape>
	|";
	
	Если ЗначениеЗаполнено(Restriction) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"	<Restriction>
		|		" + Restriction + "
		|	</Restriction>
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"	  <ParentFolderIds>
	|		" + ParentFolderIds + "
	|	  </ParentFolderIds>
	|";
	
	ТекстЗапроса = ТекстЗапроса +
	"	</FindFolder>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "RootFolder"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:RootFolder"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		RootFolder = НайденныеСтроки[0];
		Попытка		НайденоВсего = Число(RootFolder.Атрибуты.Получить("TotalItemsInView"));
		Исключение	НайденоВсего = Неопределено;
		КонецПопытки;
		
		Возврат RootFolder;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция GetFolder(Подключение, FolderID = Неопределено, DistinguishedFolderId = Неопределено, BaseShape = "AllProperties", СтрокаОшибки = "")
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/aa580274(v=exchg.150).aspx
	
	FolderIds = "";
	Если ТипЗнч(FolderID) = Тип("Строка") Тогда
		FolderIds = FolderIds + ?(FolderIds = "", "", Символы.ПС);
		FolderIds = FolderIds + "<t:FolderId Id=""" + FolderID + """/>";
	ИначеЕсли ТипЗнч(FolderID) = Тип("Массив") Тогда
		Для Каждого ID Из FolderID Цикл
			FolderIds = FolderIds + ?(FolderIds = "", "", Символы.ПС);
			FolderIds = FolderIds + "<t:FolderId Id=""" + ID + """/>";
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(DistinguishedFolderId) = Тип("Строка") Тогда
		FolderIds = FolderIds + ?(FolderIds = "", "", Символы.ПС);
		Если Подключение.Свойство("АдресEmail") 
		  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
			FolderIds = FolderIds + "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		Иначе	
			FolderIds = FolderIds + "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """/>";
		КонецЕсли;
	ИначеЕсли ТипЗнч(DistinguishedFolderId) = Тип("Массив") Тогда
		Для Каждого ID Из DistinguishedFolderId Цикл
			FolderIds = FolderIds + ?(FolderIds = "", "", Символы.ПС);
			Если Подключение.Свойство("АдресEmail") 
			  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
				FolderIds = FolderIds + "<t:DistinguishedFolderId Id=""" + ID + """>
				|<t:Mailbox>
				|<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
				|</t:Mailbox>
				|</t:DistinguishedFolderId>
				|";
			Иначе	
				FolderIds = FolderIds + "<t:DistinguishedFolderId Id=""" + ID + """/>";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(FolderIds) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	ТекстЗапроса = ТекстЗапроса + 
	"<GetFolder xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
	|		   xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
	|<FolderShape>
	|	<t:BaseShape>" + BaseShape + "</t:BaseShape>
	|</FolderShape>
	|";
	
	ТекстЗапроса = ТекстЗапроса + 
	"	<FolderIds>
	|		" + FolderIds + "
	|	</FolderIds>
	|</GetFolder>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "Folders"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:Folders"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		Folders = НайденныеСтроки;
		
		Возврат Folders;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeleteItem(Подключение, ID, DeleteType = "SoftDelete", SendMeetingCancellations = Неопределено, СтрокаОшибки = "")
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/aa580484(v=exchg.150).aspx
	
	Если ТипЗнч(ID) = Тип("Строка") Тогда
		ItemIds = "<t:ItemId Id=""" + ID + """/>";
	ИначеЕсли ТипЗнч(ID) = Тип("Массив") Тогда
		ItemIds = "";
		Для Каждого ItemId Из ID Цикл
			ItemIds = ItemIds + ?(ItemIds = "", "", Символы.ПС);
			ItemIds = ItemIds + "<t:ItemId Id=""" + ItemId + """/>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	ТекстЗапроса = ТекстЗапроса + 
	"<DeleteItem DeleteType=""" + DeleteType + """"
	+ ?(ЗначениеЗаполнено(SendMeetingCancellations), " SendMeetingCancellations=""" + SendMeetingCancellations + """", "") + " xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"">
	|	<ItemIds>
	|		" + ItemIds + "
	|	</ItemIds>
	|</DeleteItem>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Возврат СтатусОтвета;
КонецФункции

Функция CreateItem(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, ТипЭлемента, Данные, СтрокаОшибки = "", ДополнительныеДанные = Неопределено)
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/aa563797(v=exchg.150).aspx
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок2(Подключение);
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		МассивДанных = Данные;
	ИначеЕсли ТипЗнч(Данные) = Тип("ДеревоЗначений") Тогда
		МассивДанных = Новый Массив();
		МассивДанных.Добавить(Данные);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(FolderId) = Тип("Строка") И ЗначениеЗаполнено(FolderId) Тогда
		SavedItemFolderId = "<t:FolderId Id=""" + FolderId + """/>";
	ИначеЕсли ТипЗнч(DistinguishedFolderId) = Тип("Строка") И ЗначениеЗаполнено(DistinguishedFolderId) Тогда
		Если ТипЭлемента = "Контакт" И ЗначениеЗаполнено(Подключение.EMailAddessУчетнойЗаписиОбщихКонтактов) Тогда
			SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.EMailAddessУчетнойЗаписиОбщихКонтактов + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		ИначеЕсли ТипЭлемента = "Событие" И ЗначениеЗаполнено(Подключение.EMailAddessУчетнойЗаписиОбщегоКалендаря) Тогда
			SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.EMailAddessУчетнойЗаписиОбщегоКалендаря + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		ИначеЕсли Подключение.Свойство("АдресEmail") 
		  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
			SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		Иначе
			SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """/>";
		КонецЕсли;
	
	Иначе
		скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'CreateItem: не указаны FolderId и DistinguishedFolderId.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЭлемента = "Контакт" Тогда
		ТекстЗапроса = ТекстЗапроса +
		"<CreateItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"">
		|  <SavedItemFolderId>
		|	" + SavedItemFolderId + "
		|  </SavedItemFolderId>
		|  <Items>
		|";
		
		Для Каждого ДеревоДанных Из МассивДанных Цикл
			ТекстЗапроса = ТекстЗапроса + 
			"<t:Contact>
			|";
			
			СформироватьXMLРекурсивно(ТекстЗапроса, ДеревоДанных.Строки);
			
			ТекстЗапроса = ТекстЗапроса + 
			"</t:Contact>
			|";
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса +
		"</Items>
		|</CreateItem>";
		
	ИначеЕсли ТипЭлемента = "Событие" Тогда
		ТекстЗапроса = ТекстЗапроса +
		"<CreateItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
		|			xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"" 
		|			SendMeetingInvitations=""" + ДополнительныеДанные.SendMeetingInvitations + """>
		|<SavedItemFolderId>
		|	" + SavedItemFolderId + "
		|</SavedItemFolderId>
		|<Items>
		|";
		
		Для Каждого ДеревоДанных Из МассивДанных Цикл
			ТекстЗапроса = ТекстЗапроса + 
			"<t:CalendarItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/types"">
			|";
			
			СформироватьXMLРекурсивно(ТекстЗапроса, ДеревоДанных.Строки);
			
			ТекстЗапроса = ТекстЗапроса + 
			"</t:CalendarItem>
			|";
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса +
		"</Items>
		|</CreateItem>";
		
	ИначеЕсли ТипЭлемента = "ПочтовоеСообщение" Тогда
		ТекстЗапроса = ТекстЗапроса +
		"<CreateItem MessageDisposition=""" + ДополнительныеДанные.MessageDisposition + """ xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"">
		|<SavedItemFolderId>
		|	" + SavedItemFolderId + "
		|</SavedItemFolderId>
		|<Items>
		|";
		
		Для Каждого ДеревоДанных Из МассивДанных Цикл
			ТекстЗапроса = ТекстЗапроса + 
			"<t:Message xmlns=""http://schemas.microsoft.com/exchange/services/2006/types"">
			|";
			
			СформироватьXMLРекурсивно(ТекстЗапроса, ДеревоДанных.Строки);
			
			ТекстЗапроса = ТекстЗапроса + 
			"</t:Message>
			|";
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса +
		"</Items>
		|</CreateItem>";
		
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "Items"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:Items"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		Folders = НайденныеСтроки[0];
		
		Возврат Folders;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция UpdateItemСформироватьТекстXMLДляIndexedFieldURIПолучитьFieldIndex(Знач Имя)
	FieldIndex = Имя;
	Поз = Найти(FieldIndex, " Key=""");
	FieldIndex = Сред(FieldIndex, Поз + 6);
	Поз = Найти(FieldIndex, """");
	FieldIndex = Лев(FieldIndex, Поз - 1);
	
	Возврат FieldIndex;
КонецФункции

Функция UpdateItemСформироватьТекстXMLДляIndexedFieldURI(СтрокаДерева, ДляУдаления = Ложь)
	//item:InternetMessageHeader
	//contacts:ImAddress
	
	//contacts:PhysicalAddress:Street
	//contacts:PhysicalAddress:City
	//contacts:PhysicalAddress:State
	//contacts:PhysicalAddress:CountryOrRegion
	//contacts:PhysicalAddress:PostalCode
	
	//contacts:PhoneNumber
	//contacts:EmailAddress
	//distributionlist:Members:Member
	
	//<IndexedFieldURI FieldURI="" FieldIndex="" />
	
	//<t:SetItemField>
	//<t:IndexedFieldURI FieldURI="contacts:PhysicalAddress:CountryOrRegion" FieldIndex="Business" />
	//<t:Contact>
	//<t:PhysicalAddresses>
	//<t:Entry Key="Business">
	//<t:CountryOrRegion>
	//</t:CountryOrRegion>
	//</t:Entry>
	//</t:PhysicalAddresses>
	//</t:Contact>
	//</t:SetItemField>
	
	ИмяАтрибута = СтрокаДерева.Имя;
	
	ИмяАтрибута = СтрЗаменить(ИмяАтрибута, "t:", "");
	ПозицияПробела = Найти(ИмяАтрибута, " ");
	Если ПозицияПробела > 0 Тогда
		ИмяАтрибута = СокрЛП(Лев(ИмяАтрибута, ПозицияПробела - 1));
	КонецЕсли;
	
	ТекстЗапроса = "
	|";
	
	Если ИмяАтрибута = "PhysicalAddresses" Тогда
		МассивПолей = Новый Массив();
		МассивПолей.Добавить("Street");
		МассивПолей.Добавить("City");
		МассивПолей.Добавить("State");
		МассивПолей.Добавить("CountryOrRegion");
		МассивПолей.Добавить("PostalCode");
		
		МассивFieldIndex = ПолучитьВидыАдресовMSExchange();
		
		Для Каждого FieldIndex Из МассивFieldIndex Цикл
			Для Каждого ИмяПоля Из МассивПолей Цикл
				ТекстЗапроса = ТекстЗапроса + "
				|<t:DeleteItemField>
				|<t:IndexedFieldURI FieldURI=""contacts:PhysicalAddress:" + ИмяПоля + """ FieldIndex=""" + FieldIndex + """/>
				|</t:DeleteItemField>
				|";
			КонецЦикла;
		КонецЦикла;
		
		Если Не ДляУдаления Тогда
			Для Каждого СтрокаPhysicalAddresse Из СтрокаДерева.Строки Цикл
				FieldIndex = UpdateItemСформироватьТекстXMLДляIndexedFieldURIПолучитьFieldIndex(СтрокаPhysicalAddresse.Имя);
				
				Для Каждого ИмяПоля Из МассивПолей Цикл
					НайденныеСтроки = СтрокаPhysicalAddresse.Строки.НайтиСтроки(Новый Структура("Имя", "t:" + ИмяПоля));
					Если НайденныеСтроки.Количество() > 0 Тогда
						ЗначениеПоля = НайденныеСтроки[0].Значение;
					Иначе
						ЗначениеПоля = "";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						ТекстЗапроса = ТекстЗапроса + "
						|<t:SetItemField>
						|<t:IndexedFieldURI FieldURI=""contacts:PhysicalAddress:" + ИмяПоля + """ FieldIndex=""" + FieldIndex + """/>
						|<t:Contact>
						|<t:PhysicalAddresses>
						|<t:Entry Key=""" + FieldIndex + """>
						|<t:" + ИмяПоля + ">" + ЗначениеПоля + "</t:" + ИмяПоля + ">
						|</t:Entry>
						|</t:PhysicalAddresses>
						|</t:Contact>
						|</t:SetItemField>
						|";
					Иначе
						ТекстЗапроса = ТекстЗапроса + "
						|<t:DeleteItemField>
						|<t:IndexedFieldURI FieldURI=""contacts:PhysicalAddress:" + ИмяПоля + """ FieldIndex=""" + FieldIndex + """/>
						|</t:DeleteItemField>
						|";
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяАтрибута = "EmailAddresses" Тогда
		МассивFieldIndex = Новый Массив();
		МассивFieldIndex.Добавить("EmailAddress1");
		МассивFieldIndex.Добавить("EmailAddress2");
		МассивFieldIndex.Добавить("EmailAddress3");
		
		// Примечание: адреса все равно не удаляются, видимо ошибка в Exchange (из Outlook тоже не удаляются)
		Для Каждого FieldIndex Из МассивFieldIndex Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|<t:DeleteItemField>
			|<t:IndexedFieldURI FieldURI=""contacts:EmailAddress"" FieldIndex=""" + FieldIndex + """/>
			|</t:DeleteItemField>
			|";
		КонецЦикла;
		
		Если Не ДляУдаления Тогда
			Для Каждого СтрокаEntry Из СтрокаДерева.Строки Цикл
				Если Найти(СтрокаEntry.Имя, "t:Entry") > 0 Тогда
					FieldIndex = UpdateItemСформироватьТекстXMLДляIndexedFieldURIПолучитьFieldIndex(СтрокаEntry.Имя);
					ЗначениеПоля = СтрокаEntry.Значение;
					
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						ТекстЗапроса = ТекстЗапроса + "
						|<t:SetItemField>
						|<t:IndexedFieldURI FieldURI=""contacts:EmailAddress"" FieldIndex=""" + FieldIndex + """/>
						|<t:Contact>
						|<t:EmailAddresses>
						|<t:Entry Key=""" + FieldIndex + """>" + ЗначениеПоля + "</t:Entry>
						|</t:EmailAddresses>
						|</t:Contact>
						|</t:SetItemField>
						|";
					Иначе
						// Примечание: адреса все равно не удаляются, видимо ошибка в Exchange (из Outlook тоже не удаляются)
						ТекстЗапроса = ТекстЗапроса + "
						|<t:DeleteItemField>
						|<t:IndexedFieldURI FieldURI=""contacts:EmailAddress"" FieldIndex=""" + FieldIndex + """/>
						|</t:DeleteItemField>
						|";
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяАтрибута = "PhoneNumbers" Тогда
		МассивFieldIndex = ПолучитьВидыТелефоновMSExchange();
		
		Для Каждого FieldIndex Из МассивFieldIndex Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|<t:DeleteItemField>
			|<t:IndexedFieldURI FieldURI=""contacts:PhoneNumber"" FieldIndex=""" + FieldIndex + """/>
			|</t:DeleteItemField>
			|";
		КонецЦикла;
		
		Если Не ДляУдаления Тогда
			Для Каждого СтрокаEntry Из СтрокаДерева.Строки Цикл
				Если Найти(СтрокаEntry.Имя, "t:Entry") > 0 Тогда
					FieldIndex = UpdateItemСформироватьТекстXMLДляIndexedFieldURIПолучитьFieldIndex(СтрокаEntry.Имя);
					ЗначениеПоля = СтрокаEntry.Значение;
					
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						ТекстЗапроса = ТекстЗапроса + "
						|<t:SetItemField>
						|<t:IndexedFieldURI FieldURI=""contacts:PhoneNumber"" FieldIndex=""" + FieldIndex + """/>
						|<t:Contact>
						|<t:PhoneNumbers>
						|<t:Entry Key=""" + FieldIndex + """>" + ЗначениеПоля + "</t:Entry>
						|</t:PhoneNumbers>
						|</t:Contact>
						|</t:SetItemField>
						|";
					Иначе
						ТекстЗапроса = ТекстЗапроса + "
						|<t:DeleteItemField>
						|<t:IndexedFieldURI FieldURI=""contacts:PhoneNumber"" FieldIndex=""" + FieldIndex + """/>
						|</t:DeleteItemField>
						|";
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//<UpdateItem MessageDisposition="SaveOnly"
	
	//				   ConflictResolution="AutoResolve"
	//				   xmlns=".../messages"
	//				   xmlns:t=".../types">
	//   <ItemChanges>
	//	  <t:ItemChange>
	//		 <t:ItemId Id="AAAeAGRhdnN..." ChangeKey="EQAAABYAAAD..."/>
	//		 <t:Updates>
	//			  <t:SetItemField>
	//				   <t:IndexedFieldURI FieldURI="contacts:PhysicalAddress:Street" FieldIndex="Business"/>
	//				   <t:Contact>
	//						 <t:PhysicalAddresses>
	//							 <t:Entry Key="Business">
	//								 <t:Street>2 Microsoft Way</t:Street>
	//							 </t:Entry>
	//						 </t:PhysicalAddresses>
	//				  </t:Contact>
	//			 </t:SetItemField>
	//		</t:Updates>
	//	 </t:ItemChange>
	//  </ItemChanges>
	//</UpdateItem>

	//<soap:Envelope
	// xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	// xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	// xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	// xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//  <soap:Body>
	//	<CreateItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages" >
	//	  <SavedItemFolderId>
	//		<t:DistinguishedFolderId Id="contacts"/>
	//	  </SavedItemFolderId>
	//	  <Items>
	//		<t:Contact>
	//		  <t:FileAs>SampleContact</t:FileAs>
	//		  <t:GivenName>Tanja</t:GivenName>
	//		  <t:CompanyName>Blue Yonder Airlines</t:CompanyName>
	//		  <t:EmailAddresses>
	//			<t:Entry Key="EmailAddress1">tplate@example.com</t:Entry>
	//		  </t:EmailAddresses>
	//		  <t:PhysicalAddresses>
	//			<t:Entry Key="Business">
	//			  <t:Street>1234 56th Ave</t:Street>
	//			  <t:City>La Habra</t:City>
	//			  <t:State>CA</t:State>
	//			  <t: CountryOrRegion>USA</t: CountryOrRegion>
	//			</t:Entry>
	//		  </t:PhysicalAddresses>
	//		  <t:PhoneNumbers>
	//			<t:Entry Key="BusinessPhone">4255550199</t:Entry>
	//		  </t:PhoneNumbers>
	//		  <t:JobTitle>Manager</t:JobTitle>
	//		  <t:Surname>Plate</t:Surname>
	//		</t:Contact>
	//	  </Items>
	//	</CreateItem>
	//  </soap:Body>
	//</soap:Envelope>
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция UpdateItemПолучитьFieldURI(ТипЭлемента, Знач ИмяАтрибута)
	Если ТипЭлемента = "Контакт" Тогда
		ПространствоИменПоУмолчанию = "contacts";
	ИначеЕсли ТипЭлемента = "Событие" Тогда
		ПространствоИменПоУмолчанию = "calendar";
	ИначеЕсли ТипЭлемента = "ПочтовоеСообщение" Тогда
		ПространствоИменПоУмолчанию = "message";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяАтрибута = СтрЗаменить(ИмяАтрибута, "t:", "");
	ПозицияПробела = Найти(ИмяАтрибута, " ");
	Если ПозицияПробела > 0 Тогда
		ИмяАтрибута = СокрЛП(Лев(ИмяАтрибута, ПозицияПробела - 1));
	КонецЕсли;
	
	Поля =
	"item:ItemId
	|item:ParentFolderId
	|item:ItemClass
	|item:MimeContent
	|item:Attachments
	|item:Subject
	|item:DateTimeReceived
	|item:Size
	|item:Categories
	|item:HasAttachments
	|item:Importance
	|item:InReplyTo
	|item:InternetMessageHeaders
	|item:IsAssociated
	|item:IsDraft
	|item:IsFromMe
	|item:IsResend
	|item:IsSubmitted
	|item:IsUnmodified
	|item:DateTimeSent
	|item:DateTimeCreated
	|item:Body
	|item:ResponseObjects
	|item:Sensitivity
	|item:ReminderDueBy
	|item:ReminderIsSet
	|item:ReminderNextTime
	|item:ReminderMinutesBeforeStart
	|item:DisplayTo
	|item:DisplayCc
	|item:Culture
	|item:EffectiveRights
	|item:LastModifiedName
	|item:LastModifiedTime
	|item:ConversationId
	|item:UniqueBody
	|item:Flag
	|item:StoreEntryId
	|item:InstanceKey
	|item:NormalizedBody
	|item:EntityExtractionResult
	|itemPolicyTag
	|item:ArchiveTag
	|item:RetentionDate
	|item:Preview
	|item:NextPredictedAction
	|item:GroupingAction
	|item:RightsManagementLicenseData
	|item:BlockStatus
	|item:HasBlockedImages
	|item:WebClientReadFormQueryString
	|item:WebClientEditFormQueryString
	|item:TextBody
	|message:ConversationIndex
	|message:ConversationTopic
	|message:InternetMessageId
	|message:IsRead
	|message:IsResponseRequested
	|message:IsReadReceiptRequested
	|message:IsDeliveryReceiptRequested
	|message:ReceivedBy
	|message:ReceivedRepresenting
	|message:References
	|message:ReplyTo
	|message:From
	|message:Sender
	|message:ToRecipients
	|message:CcRecipients
	|message:BccRecipients
	|meeting:AssociatedCalendarItemId
	|meeting:IsDelegated
	|meeting:IsOutOfDate
	|meeting:HasBeenProcessed
	|meeting:ResponseType
	|meeting:ProposedStart
	|meeting:PropsedEnd
	|meetingRequest:MeetingRequestType
	|meetingRequest:IntendedFreeBusyStatus
	|meetingRequest:ChangeHighlights
	|calendar:Start
	|calendar:End
	|calendar:OriginalStart
	|calendar:StartWallClock
	|calendar:EndWallClock
	|calendar:StartTimeZoneId
	|calendar:EndTimeZoneId
	|calendar:IsAllDayEvent
	|calendar:LegacyFreeBusyStatus
	|calendar:Location
	|calendar:When
	|calendar:IsMeeting
	|calendar:IsCancelled
	|calendar:IsRecurring
	|calendar:MeetingRequestWasSent
	|calendar:IsResponseRequested
	|calendar:CalendarItemType
	|calendar:MyResponseType
	|calendar:Organizer
	|calendar:RequiredAttendees
	|calendar:OptionalAttendees
	|calendar:Resources
	|calendar:ConflictingMeetingCount
	|calendar:AdjacentMeetingCount
	|calendar:ConflictingMeetings
	|calendar:AdjacentMeetings
	|calendar:Duration
	|calendar:TimeZone
	|calendar:AppointmentReplyTime
	|calendar:AppointmentSequenceNumber
	|calendar:AppointmentState
	|calendar:Recurrence
	|calendar:FirstOccurrence
	|calendar:LastOccurrence
	|calendar:ModifiedOccurrences
	|calendar:DeletedOccurrences
	|calendar:MeetingTimeZone
	|calendar:ConferenceType
	|calendar:AllowNewTimeProposal
	|calendar:IsOnlineMeeting
	|calendar:MeetingWorkspaceUrl
	|calendar:NetShowUrl
	|calendar:UID
	|calendar:RecurrenceId
	|calendar:DateTimeStamp
	|calendar:StartTimeZone
	|calendar:EndTimeZone
	|calendar:JoinOnlineMeetingUrl
	|calendar:OnlineMeetingSettings
	|calendar:IsOrganizer
	|contacts:Alias
	|contacts:AssistantName
	|contacts:Birthday
	|contacts:BusinessHomePage
	|contacts:Children
	|contacts:Companies
	|contacts:CompanyName
	|contacts:CompleteName
	|contacts:ContactSource
	|contacts:Culture
	|contacts:Department
	|contacts:DisplayName
	|contacts:DirectoryId
	|contacts:DirectReports
	|contacts:EmailAddresses
	|contacts:FileAs
	|contacts:FileAsMapping
	|contacts:Generation
	|contacts:GivenName
	|contacts:ImAddresses
	|contacts:Initials
	|contacts:JobTitle
	|contacts:Manager
	|contacts:ManagerMailbox
	|contacts:MiddleName
	|contacts:Mileage
	|contacts:MSExchangeCertificate
	|contacts:Nickname
	|contacts:Notes
	|contacts:OfficeLocation
	|contacts:PhoneNumbers
	|contacts:PhoneticFullName
	|contacts:PhoneticFirstName
	|contacts:PhoneticLastName
	|contacts:Photo
	|contacts:PhysicalAddresses
	|contacts:PostalAddressIndex
	|contacts:Profession
	|contacts:SpouseName
	|contacts:Surname
	|contacts:WeddingAnniversary
	|contacts:UserSMIMECertificate
	|contacts:HasPicture";
	
	ПолноеИмяПоУмолчанию = ПространствоИменПоУмолчанию + ":" + ИмяАтрибута;
	
	Если Найти(Поля, ПолноеИмяПоУмолчанию) > 0 Тогда
		Возврат ПолноеИмяПоУмолчанию;
	Иначе
		Поз = Найти(Поля, ":" + ИмяАтрибута);
		Если Поз = 0 Тогда
			Возврат Неопределено;
		Иначе
			СтрПространствоИмен = "";
			Поз = Поз - 1;
			Пока Поз > 0 Цикл
				ТекСимвол = Сред(Поля, Поз, 1);
				Если ТекСимвол = Символы.ПС Тогда Прервать; КонецЕсли;
				
				СтрПространствоИмен = ТекСимвол + СтрПространствоИмен;
				
				Поз = Поз - 1;
				Если Поз = 0 Тогда Прервать КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрПространствоИмен) Тогда
				Возврат СтрПространствоИмен + ":" + ИмяАтрибута;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция UpdateItemЭтоПолеДляУдаления() Экспорт
	// Возвращает строку-идентификтор, который используется как признак того, что в операции UpdateItem() поле нужно удалить
	Возврат "_CC6AB28BA9FAD121184B09E00F1DD6E7" + "_ИдентификаторДляУдаления_" + "b474d48cdfc4974d86ef4d24904cdd91_";
КонецФункции

Процедура UpdateItemСформироватьXMLДляОбновления(ТекстЗапроса, ТипЭлемента, СтрокиДерева)
	Если ТипЭлемента = "Контакт" Тогда
		ЭлементОткрывающийТег = "t:Contact";
		ЭлементЗакрывающийТег = "t:Contact";
	ИначеЕсли ТипЭлемента = "Событие" Тогда
		ЭлементОткрывающийТег = "t:CalendarItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/types""";
		ЭлементЗакрывающийТег = "t:CalendarItem";
	ИначеЕсли ТипЭлемента = "ПочтовоеСообщение" Тогда
		ЭлементОткрывающийТег = "t:Message";
		ЭлементЗакрывающийТег = "t:Message";
	Иначе
		ВызватьИсключение "UpdateItemСформироватьXMLДляОбновления: " + ТипЭлемента + НСтр("ru = ' Неподдерживаемый тип элемента'");
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ИмяАтрибута = СтрЗаменить(СтрокаДерева.Имя, "t:", "");
		ПозицияПробела = Найти(ИмяАтрибута, " ");
		Если ПозицияПробела > 0 Тогда
			ИмяАтрибута = Лев(ИмяАтрибута, ПозицияПробела - 1);
		КонецЕсли;
		
		ИмяТега = СтрокаДерева.Имя;
		ЗначениеТега = СтрокаДерева.Значение;
		
		ПозицияПробела = Найти(ИмяТега, " ");
		Если ПозицияПробела > 0 Тогда
			ИмяЗакрывающегоТега = Лев(ИмяТега, ПозицияПробела - 1);
		Иначе
			ИмяЗакрывающегоТега = ИмяТега
		КонецЕсли;
		
		ТипОбновления = "SetItemField";
		Если ЗначениеТега = UpdateItemЭтоПолеДляУдаления() Тогда
			// Считаем, что поле нужно удалить
			ТипОбновления = "DeleteItemField";
		КонецЕсли;
		
		Если	ИмяАтрибута = "EmailAddresses"
			Или	ИмяАтрибута = "PhysicalAddresses"
			Или	ИмяАтрибута = "PhoneNumbers" Тогда
			//
			
			ТекстЗапроса = ТекстЗапроса + UpdateItemСформироватьТекстXMLДляIndexedFieldURI(СтрокаДерева, (ЗначениеТега = UpdateItemЭтоПолеДляУдаления()));
			
		Иначе
			//Если ЗначениеТега <> UpdateItemЭтоПолеДляУдаления() И ЗначениеТега <> Неопределено И Не ЗначениеЗаполнено(ЗначениеТега) Тогда
			//	ТипОбновления = "DeleteItemField";
			//КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"
			|<t:" + ТипОбновления + ">
			|";
			
			FieldURI = UpdateItemПолучитьFieldURI(ТипЭлемента, ИмяАтрибута);
			Если Не ЗначениеЗаполнено(FieldURI) Тогда
				ВызватьИсключение "UpdateItemПолучитьFieldURI: " + ИмяАтрибута + НСтр("ru = ' Неопознанный тег'");
			КонецЕсли;
			
			Если ЗначениеТега = Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса +
				"<t:FieldURI FieldURI=""" + FieldURI + """/>
				|<" + ЭлементОткрывающийТег + ">
				|";
				
				ТекстЗапроса = ТекстЗапроса +
				"<" + ИмяТега + ">" + ЗначениеТега + "
				|";
				
				СформироватьXMLРекурсивно(ТекстЗапроса, СтрокаДерева.Строки);
				
				ТекстЗапроса = ТекстЗапроса +
				"</" + ИмяЗакрывающегоТега + ">
				|";
				
				ТекстЗапроса = ТекстЗапроса +
				"</" + ЭлементЗакрывающийТег + ">
				|";
			Иначе
				Если ТипОбновления = "SetItemField" Тогда
					ТекстЗапроса = ТекстЗапроса +
					"<t:FieldURI FieldURI=""" + FieldURI + """/>
					|<" + ЭлементОткрывающийТег + ">
					|";
					ТекстЗапроса = ТекстЗапроса +
					"<" + ИмяТега + ">" + ЗначениеТега + "</" + ИмяЗакрывающегоТега + ">
					|</" + ЭлементЗакрывающийТег + ">
					|";
				ИначеЕсли ТипОбновления = "DeleteItemField" Тогда
					ТекстЗапроса = ТекстЗапроса +
					"<t:FieldURI FieldURI=""" + FieldURI + """/>
					|";
				Иначе
					ВызватьИсключение "UpdateItemСформироватьXMLДляОбновления: " + ИмяТега + НСтр("ru = ' Неподдерживаемый тип обновления'");
				КонецЕсли;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"</t:" + ТипОбновления + ">
			|";
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция UpdateItem(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, Данные, ТипЭлемента, СтрокаОшибки = "", ДополнительныеДанные = Неопределено)
	// Описание в MSDN:
	// http://msdn.microsoft.com/en-us/library/aa581084(v=exchg.150).aspx
	
	Если ТипЗнч(Данные) = Тип("Массив") Или ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		ИтераторДанных = Данные;
	ИначеЕсли ТипЗнч(Данные) = Тип("СтрокаТаблицыЗначений")
	  ИЛИ ТипЗнч(Данные) = Тип("Структура") Тогда
		ИтераторДанных = Новый Массив();
		ИтераторДанных.Добавить(Данные);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(FolderId) = Тип("Строка") И ЗначениеЗаполнено(FolderId) Тогда
		SavedItemFolderId = "<t:FolderId Id=""" + FolderId + """/>";
	ИначеЕсли ТипЗнч(DistinguishedFolderId) = Тип("Строка") И ЗначениеЗаполнено(DistinguishedFolderId) Тогда
		Если ТипЭлемента = "Контакт" И ЗначениеЗаполнено(Подключение.EMailAddessУчетнойЗаписиОбщихКонтактов) Тогда
			SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.EMailAddessУчетнойЗаписиОбщихКонтактов + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		ИначеЕсли ТипЭлемента = "Событие" И ЗначениеЗаполнено(Подключение.EMailAddessУчетнойЗаписиОбщегоКалендаря) Тогда
			SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.EMailAddessУчетнойЗаписиОбщегоКалендаря + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		ИначеЕсли Подключение.Свойство("АдресEmail") 
		  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
			SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		Иначе
			SavedItemFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """/>";
		КонецЕсли;
	
	Иначе
		SavedItemFolderId = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(SavedItemFolderId) Тогда
		SavedItemFolderId = "
			|  <SavedItemFolderId>
			|	" + SavedItemFolderId + "
			|  </SavedItemFolderId>";
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок2(Подключение);
	
	//<?xml version="1.0" encoding="utf-8"?>
	//<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	//			   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	//			   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
	//			   xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//  <soap:Body>
	//	<UpdateItem MessageDisposition="SaveOnly" ConflictResolution="AutoResolve" 
	//				xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
	//	  <ItemChanges>
	//		<t:ItemChange>
	//		  <t:ItemId Id="AAAtAEFkb..." ChangeKey="CQAAABYAAAB..."/>
	//		  <t:Updates>
	//			<t:SetItemField>
	//			  <t:FieldURI FieldURI="item:Sensitivity"/>
	//			  <t:Message>
	//				<t:Sensitivity>Normal</t:Sensitivity>
	//			  </t:Message>
	//			</t:SetItemField>
	//		  </t:Updates>
	//		</t:ItemChange>
	//	  </ItemChanges>
	//	</UpdateItem>
	//  </soap:Body>
	//</soap:Envelope>
	
	//SendMeetingInvitationsOrCancellations
	
	Если ТипЭлемента = "Событие" Тогда
		ТекстЗапроса = ТекстЗапроса +
		"<UpdateItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
		|			MessageDisposition=""SaveOnly""
		|			ConflictResolution=""AlwaysOverwrite""
		|			SendMeetingInvitationsOrCancellations = """ + ДополнительныеДанные.SendMeetingInvitationsOrCancellations + """>
		|	<ItemChanges>
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"<UpdateItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
		|			MessageDisposition=""SaveOnly""
		|			ConflictResolution=""AlwaysOverwrite"">
		|	" + SavedItemFolderId + "
		|	<ItemChanges>
		|";
	КонецЕсли;
	
	Для Каждого ИзменяемыйОбъект Из ИтераторДанных Цикл
		ТекстЗапроса = ТекстЗапроса +
		"<t:ItemChange>
		|";
		
		ТекстЗапроса = ТекстЗапроса +
		"<t:ItemId Id=""" + ИзменяемыйОбъект.ID + """"
			+ ?(ЗначениеЗаполнено(ИзменяемыйОбъект.ChangeKey), " ChangeKey=""" + ИзменяемыйОбъект.ChangeKey + """/>", "/>")
			+ "
			|";
			
		ТекстЗапроса = ТекстЗапроса +
		"<t:Updates>
		|";
		
		UpdateItemСформироватьXMLДляОбновления(ТекстЗапроса, ТипЭлемента, ИзменяемыйОбъект.ДанныеОбновления.Строки);
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|</t:Updates>
		|";
		
		ТекстЗапроса = ТекстЗапроса +
		"</t:ItemChange>
		|";
			
		ТекстЗапроса = ТекстЗапроса +
		"</ItemChanges>
		|</UpdateItem>
		|";
		
	КонецЦикла;
	
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();	
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Возврат (СтатусОтвета.Успешно = Истина);
	
КонецФункции

Функция SyncFolderHierarchy(Подключение,
					FolderId = Неопределено,
					DistinguishedFolderId = Неопределено,
					SyncState    = "",
					BaseShape = "IdOnly",
					СтрокаОшибки = ""
					
				) Экспорт
	
	// Описание в MSDN:
	// https://msdn.microsoft.com/ru-ru/library/office/aa580990%28v=exchg.150%29.aspx
	
	//<?xml version="1.0" encoding="utf-8"?>
	//<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	//  xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//  <soap:Body>
	//    <SyncFolderHierarchy  xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
	//      <FolderShape>
	//        <t:BaseShape>AllProperties</t:BaseShape>
	//      </FolderShape>
	//      <SyncState>H4sIA=</SyncState>
	//    </SyncFolderHierarchy>
	//  </soap:Body>
	//</soap:Envelope>

	Если ТипЗнч(FolderId) = Тип("Строка") И ЗначениеЗаполнено(FolderId) Тогда
		SyncFolderId = "<t:FolderId Id=""" + FolderId + """/>";
	ИначеЕсли ТипЗнч(DistinguishedFolderId) = Тип("Строка") И ЗначениеЗаполнено(DistinguishedFolderId) Тогда
		Если Подключение.Свойство("АдресEmail") 
		  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
			SyncFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		Иначе	
			SyncFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """/>";
		КонецЕсли;
		
	Иначе
		скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'FindFolder: не указаны FolderId и DistinguishedFolderId.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	ТекстЗапроса = ТекстЗапроса +
	"<SyncFolderHierarchy  xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"">
	|	<FolderShape>
	|		<t:BaseShape>" + BaseShape + "</t:BaseShape>
	|	</FolderShape>
	|";
		
	ТекстЗапроса = ТекстЗапроса +
	"	  <SyncFolderId>
	|		" + SyncFolderId + "
	|	  </SyncFolderId>
	|";
	
	Если ЗначениеЗаполнено(SyncState) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"<SyncState>" + SyncState + "</SyncState>
		|";
	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"	</SyncFolderHierarchy>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	//<?xml version="1.0" encoding="utf-8" ?>
	//<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
	//               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	//               xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	//  <soap:Header>
	//    <t:ServerVersionInfo MajorVersion="8" MinorVersion="0" 
	//                         MajorBuildNumber="628" MinorBuildNumber="0" 
	//                         xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" />
	//  </soap:Header>
	//  <soap:Body>
	//    <SyncFolderHierarchyResponse xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" 
	//                                 xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" 
	//                                 xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
	//      <m:ResponseMessages>
	//        <m:SyncFolderHierarchyResponseMessage ResponseClass="Success">
	//          <m:ResponseCode>NoError</m:ResponseCode>
	//          <m:SyncState>H4sIAAA==</m:SyncState>
	//          <m:IncludesLastFolderInRange>true</m:IncludesLastFolderInRange>
	//          <m:Changes>
	//            <t:Create>
	//              <t:Folder>
	//                <t:FolderId Id="AQApAHR=" ChangeKey="AQAAABY" />
	//                <t:ParentFolderId Id="AQApA=" ChangeKey="AQAAAA==" />
	//                <t:FolderClass>IPF.Note</t:FolderClass>
	//                <t:DisplayName>NewFolder</t:DisplayName>
	//                <t:TotalCount>0</t:TotalCount>
	//                <t:ChildFolderCount>0</t:ChildFolderCount>
	//                <t:UnreadCount>0</t:UnreadCount>
	//              </t:Folder>
	//            </t:Create>
	//          </m:Changes>
	//        </m:SyncFolderHierarchyResponseMessage>
	//      </m:ResponseMessages>
	//    </SyncFolderHierarchyResponse>
	//  </soap:Body>
	//</soap:Envelope>	
	
	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "ResponseMessages"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:ResponseMessages"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		ResponseMessages = НайденныеСтроки[0];
		
		Возврат ResponseMessages;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция SyncFolderItems(Подключение,
					FolderId = Неопределено,
					DistinguishedFolderId = Неопределено,
					SyncState    = "",
					BaseShape = "IdOnly",
					MaxChangesReturned = "512", 
					Properties = Неопределено,
					СтрокаОшибки = ""
					
				) Экспорт
	
	// Описание в MSDN:
	// https://msdn.microsoft.com/ru-ru/library/office/aa563967%28v=exchg.150%29.aspx
	
	//<?xml version="1.0" encoding="utf-8"?>
	//<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	//  xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//  <soap:Body>
	//    <SyncFolderItems xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
	//      <ItemShape>
	//        <t:BaseShape>Default</t:BaseShape>
	//      </ItemShape>
	//      <SyncFolderId>
	//        <t:DistinguishedFolderId Id="sentitems"/>
	//      </SyncFolderId>
	//      <SyncState>AEbJ94eMOAAA=</SyncState>
	//      <Ignore>
	//        <t:ItemId Id="AQApAHRAA==" ChangeKey="CQAAABY"/>
	//      </Ignore>
	//      <MaxChangesReturned>100</MaxChangesReturned>
	//    </SyncFolderItems>
	//  </soap:Body>
	//</soap:Envelope>

	Если ТипЗнч(FolderId) = Тип("Строка") И ЗначениеЗаполнено(FolderId) Тогда
		SyncFolderId = "<t:FolderId Id=""" + FolderId + """/>";
	ИначеЕсли ТипЗнч(DistinguishedFolderId) = Тип("Строка") И ЗначениеЗаполнено(DistinguishedFolderId) Тогда
		Если Подключение.Свойство("АдресEmail") 
		  И ЗначениеЗаполнено(Подключение.АдресEmail) Тогда
			SyncFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """>
			|<t:Mailbox>
			|<t:EmailAddress>" + Подключение.АдресEmail + "</t:EmailAddress>
			|</t:Mailbox>
			|</t:DistinguishedFolderId>
			|";
		Иначе	
			SyncFolderId = "<t:DistinguishedFolderId Id=""" + DistinguishedFolderId + """/>";
		КонецЕсли;
		
	Иначе
		скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'FindFolder: не указаны FolderId и DistinguishedFolderId.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьЗаголовокXML();
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗаголовок1(Подключение);
	
	AdditionalProperties = "";
	Если ТипЗнч(Properties) = Тип("Массив") 
	  И Properties.Количество() > 0 Тогда 
	  Для Каждого Property Из Properties Цикл		
			AdditionalProperties = AdditionalProperties + ?(AdditionalProperties = "", "", Символы.ПС);
			AdditionalProperties = AdditionalProperties + "<t:FieldURI FieldURI=""item:" + Property + """/>";
		КонецЦикла;
		
		AdditionalProperties = 	
		"		<t:AdditionalProperties>
		|"			+ AdditionalProperties + "
		|		</t:AdditionalProperties>";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"<SyncFolderItems  xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"">
	|	<ItemShape>
	|		<t:BaseShape>" + BaseShape + "</t:BaseShape>
	|		" + AdditionalProperties + "
	|	</ItemShape>
	|";
		
	ТекстЗапроса = ТекстЗапроса +
	"	  <SyncFolderId>
	|		" + SyncFolderId + "
	|	  </SyncFolderId>
	|";
	
	Если ЗначениеЗаполнено(SyncState) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"<SyncState>" + SyncState + "</SyncState>
		|";
	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"<MaxChangesReturned>" + MaxChangesReturned + "</MaxChangesReturned>
	|";

	
	ТекстЗапроса = ТекстЗапроса +
	"	</SyncFolderItems>
	|";
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьSOAPЗакрывающийТег();
	
	//<?xml version="1.0" encoding="utf-8" ?>
	//<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
	//               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	//               xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	//  <soap:Header>
	//    <t:ServerVersionInfo MajorVersion="8" MinorVersion="0" 
	//                         MajorBuildNumber="628" MinorBuildNumber="0" 
	//      xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" />
	//  </soap:Header>
	//  <soap:Body>
	//    <SyncFolderItemsResponse xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" 
	//                             xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" 
	//                             xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">
	//      <m:ResponseMessages>
	//        <m:SyncFolderItemsResponseMessage ResponseClass="Success">
	//          <m:ResponseCode>NoError</m:ResponseCode>
	//          <m:SyncState>H4sIAAAAA=</m:SyncState>
	//          <m:IncludesLastItemInRange>true</m:IncludesLastItemInRange>
	//          <m:Changes>
	//            <t:Create>
	//              <t:MeetingRequest>
	//                <t:ItemId Id="AQApAHRwA==" ChangeKey="CwAAABYA" />
	//                <t:Subject>Budget Q3</t:Subject>
	//                <t:Sensitivity>Normal</t:Sensitivity>
	//                <t:IsOutOfDate>false</t:IsOutOfDate>
	//                <t:HasBeenProcessed>true</t:HasBeenProcessed>
	//                <t:ResponseType>NoResponseReceived</t:ResponseType>
	//                <t:IntendedFreeBusyStatus>Busy</t:IntendedFreeBusyStatus>
	//                <t:Start>2006-08-02T17:30:00Z</t:Start>
	//                <t:End>2006-08-02T19:30:00Z</t:End>
	//                <t:Location>Conference Room 2</t:Location>
	//                <t:Organizer>
	//                  <t:Mailbox>
	//                    <t:Name>Dan Park</t:Name>
	//                    <t:EmailAddress>dpark@example.com</t:EmailAddress>
	//                    <t:RoutingType>SMTP</t:RoutingType>
	//                  </t:Mailbox>
	//                </t:Organizer>
	//              </t:MeetingRequest>
	//            </t:Create>
	//          </m:Changes>
	//        </m:SyncFolderItemsResponseMessage>
	//      </m:ResponseMessages>
	//    </SyncFolderItemsResponse>
	//  </soap:Body>
	//</soap:Envelope>

	СтатусОтвета = Неопределено;
	Дерево = ВыполнитьЗапрос(Подключение, ТекстЗапроса, СтатусОтвета, СтрокаОшибки);
	
	Если СтатусОтвета.Успешно Тогда
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "ResponseMessages"), Истина);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя", "m:ResponseMessages"), Истина);
		КонецЕсли;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Новый Массив();
		КонецЕсли;
		
		ResponseMessages = НайденныеСтроки[0];
		
		Возврат ResponseMessages;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТАМИ MS EXCHANGE

Функция НайтиЭлемент(Подключение,  СтрокаЗапроса = "", Ограничение = "", FolderId = Неопределено, DistinguishedFolderId = Неопределено, BaseShape = "IdOnly", СтрокаОшибки = "", ТипЭлемента = Неопределено) Экспорт
	RootFolder = FindItem(Подключение, FolderId, DistinguishedFolderId, BaseShape, Ограничение,, СтрокаЗапроса,  СтрокаОшибки, ТипЭлемента);
	
	Если RootFolder <> Неопределено Тогда
		Попытка		СтрокиItems = RootFolder.Строки[0];
		Исключение	СтрокиItems = Неопределено;
		КонецПопытки;
		
		Если СтрокиItems <> Неопределено Тогда
			Таблица = Новый ТаблицаЗначений();
			Для Каждого Элемент Из СтрокиItems.Строки Цикл
				СтрокаТаблицы = Таблица.Добавить();
				ВеткуДереваВТаблицу(Элемент.Строки, Таблица, СтрокаТаблицы);
			КонецЦикла;
			Возврат Таблица;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиКонтакты(Подключение, СтрокаЗапроса = "", Ограничение = "", FolderId = Неопределено, DistinguishedFolderId = Неопределено, BaseShape = "IdOnly", СтрокаОшибки = "") Экспорт
	Если Не ЗначениеЗаполнено(DistinguishedFolderId) И Не ЗначениеЗаполнено(FolderId) Тогда
		FolderId = Подключение.КонтактыFolderId;
		DistinguishedFolderId = Подключение.КонтактыDistinguishedFolderId;
	КонецЕсли;
	
	Возврат НайтиЭлемент(Подключение, СтрокаЗапроса, Ограничение, FolderId, DistinguishedFolderId, BaseShape, СтрокаОшибки, "Контакт");
КонецФункции

Функция НайтиСобытия(Подключение, СтрокаЗапроса = "", Ограничение = "", FolderId = Неопределено, DistinguishedFolderId = Неопределено, BaseShape = "IdOnly", СтрокаОшибки = "") Экспорт
	Если Не ЗначениеЗаполнено(DistinguishedFolderId) И Не ЗначениеЗаполнено(FolderId) Тогда
		FolderId = Подключение.СобытияFolderId;
		DistinguishedFolderId = Подключение.СобытияDistinguishedFolderId;
	КонецЕсли;
	Возврат НайтиЭлемент(Подключение, СтрокаЗапроса, Ограничение, FolderId, DistinguishedFolderId, BaseShape, СтрокаОшибки, "Событие");
КонецФункции

Функция НайтиПочтовыеСообщения(Подключение, СтрокаЗапроса = "", Ограничение = "", FolderId = Неопределено, DistinguishedFolderId = Неопределено, BaseShape = "IdOnly", СтрокаОшибки = "") Экспорт
	Если Не ЗначениеЗаполнено(DistinguishedFolderId) И Не ЗначениеЗаполнено(FolderId) Тогда
		DistinguishedFolderId = "inbox";
	КонецЕсли;
	Возврат НайтиЭлемент(Подключение, СтрокаЗапроса, Ограничение, FolderId, DistinguishedFolderId, BaseShape, СтрокаОшибки);
КонецФункции

Функция ПолучитьВложение(Подключение, ID, ChangeKey = Неопределено, СтрокаОшибки = "") Экспорт
	ResponseMessages = GetAttachment(Подключение, ID, ChangeKey, СтрокаОшибки);
	Если ResponseMessages <> Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
		Для Каждого ResponseMessage Из ResponseMessages.Строки Цикл
			NoError = Ложь;
			Для Каждого СтрокаResponseMessage Из ResponseMessage.Строки Цикл
				Если СтрокаResponseMessage.Имя = "ResponseCode" И СтрокаResponseMessage.Значение = "NoError" Тогда
					NoError = Истина;
				ИначеЕсли СтрокаResponseMessage.Имя = "Attachments" И СтрокаResponseMessage.Строки.Количество() > 0 И NoError Тогда
					СтрокаТаблицы = Таблица.Добавить();
					ВеткуДереваВТаблицу(СтрокаResponseMessage.Строки[0].Строки, Таблица, СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция СоздатьВложение(Подключение, СтруктураВложения, ID, ChangeKey = Неопределено, СтрокаОшибки= "") Экспорт
	ResponseMessages = CreateAttachment(Подключение, СтруктураВложения, ID, ChangeKey, СтрокаОшибки);
	Если ResponseMessages <> Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
		Для Каждого ResponseMessage Из ResponseMessages.Строки Цикл
			NoError = Ложь;
			Для Каждого СтрокаResponseMessage Из ResponseMessage.Строки Цикл
				Если СтрокаResponseMessage.Имя = "ResponseCode" И СтрокаResponseMessage.Значение = "NoError" Тогда
					NoError = Истина;
				ИначеЕсли СтрокаResponseMessage.Имя = "Attachments" И СтрокаResponseMessage.Строки.Количество() > 0 И NoError Тогда
					СтрокаТаблицы = Таблица.Добавить();
					ВеткуДереваВТаблицу(СтрокаResponseMessage.Строки[0].Строки, Таблица, СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСоставГруппыКонтактовРекурсивно(Подключение, ID, СтрокаОшибки = "", ТаблицаРезультат = Неопределено) Экспорт
	Если ТаблицаРезультат = Неопределено Тогда
		ТаблицаРезультат = Новый ТаблицаЗначений();
		ТаблицаРезультат.Колонки.Добавить("Name");
		ТаблицаРезультат.Колонки.Добавить("EmailAddress");
		ТаблицаРезультат.Колонки.Добавить("RoutingType");
		ТаблицаРезультат.Колонки.Добавить("MailboxType");
		ТаблицаРезультат.Колонки.Добавить("ItemId");
		ТаблицаРезультат.Колонки.Добавить("ID");
		ТаблицаРезультат.Колонки.Добавить("ChangeKey");
	КонецЕсли;
	
	Таблица = ПолучитьСоставГруппыКонтактов(Подключение, ID, СтрокаОшибки);
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") И Таблица.Колонки.Найти("ID") <> Неопределено И Таблица.Колонки.Найти("MailboxType") <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Если СтрокаТаблицы.MailboxType = "PrivateDL" Или СтрокаТаблицы.MailboxType = "PublicDL" Тогда
				ПолучитьСоставГруппыКонтактовРекурсивно(Подключение, СтрокаТаблицы.ID, СтрокаОшибки, ТаблицаРезультат);
			Иначе
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
КонецФункции

Функция ПолучитьСоставГруппыКонтактов(Подключение, ID, СтрокаОшибки = "") Экспорт
	ResponseMessages = ExpandDL(Подключение, ID,, СтрокаОшибки);
	Если ResponseMessages <> Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
		Для Каждого ResponseMessage Из ResponseMessages.Строки Цикл
			NoError = Ложь;
			Для Каждого СтрокаResponseMessage Из ResponseMessage.Строки Цикл
				Если СтрокаResponseMessage.Имя = "ResponseCode" И СтрокаResponseMessage.Значение = "NoError" Тогда
					NoError = Истина;
				ИначеЕсли СтрокаResponseMessage.Имя = "DLExpansion" И СтрокаResponseMessage.Строки.Количество() > 0 И NoError Тогда
					Для Каждого СтрокаDLExpansion Из СтрокаResponseMessage.Строки Цикл
						Если СтрокаDLExpansion.Строки.Количество() > 0 Тогда
							СтрокаТаблицы = Таблица.Добавить();
							ВеткуДереваВТаблицу(СтрокаDLExpansion.Строки, Таблица, СтрокаТаблицы);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьЭлемент(Подключение, ID, ChangeKey = Неопределено, ТипЭлемента, BaseShape = Неопределено, МассивСвойств = Неопределено, СтрокаОшибки = "")
	ResponseMessages = GetItem(Подключение, ID, ChangeKey, ТипЭлемента, BaseShape, МассивСвойств, СтрокаОшибки);
	Если ResponseMessages <> Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
		Для Каждого ResponseMessage Из ResponseMessages.Строки Цикл
			NoError = Ложь;
			Для Каждого СтрокаResponseMessage Из ResponseMessage.Строки Цикл
				Если СтрокаResponseMessage.Имя = "ResponseCode" И СтрокаResponseMessage.Значение = "NoError" Тогда
					NoError = Истина;
				ИначеЕсли СтрокаResponseMessage.Имя = "Items" И СтрокаResponseMessage.Строки.Количество() > 0 И NoError Тогда
					СтрокаТаблицы = Таблица.Добавить();
					ВеткуДереваВТаблицу(СтрокаResponseMessage.Строки[0].Строки, Таблица, СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьКонтакт(Подключение, ID, ChangeKey = Неопределено, BaseShape = Неопределено, СтрокаОшибки = "") Экспорт
	Возврат ПолучитьЭлемент(Подключение, ID, ChangeKey, "Контакт", BaseShape, СтрокаОшибки);
КонецФункции

Функция ПолучитьСобытие(Подключение, ID, ChangeKey = Неопределено, BaseShape = Неопределено, СтрокаОшибки = "") Экспорт
	Возврат ПолучитьЭлемент(Подключение, ID, ChangeKey,  "Событие", BaseShape, СтрокаОшибки);
КонецФункции

Функция ПолучитьПочтовоеСообщение(Подключение, ID, ChangeKey = Неопределено, BaseShape = Неопределено, МассивСвойств = Неопределено, СтрокаОшибки = "") Экспорт
	Возврат ПолучитьЭлемент(Подключение, ID, ChangeKey,  "ПочтовоеСообщение", BaseShape, МассивСвойств, СтрокаОшибки);
КонецФункции

Функция НайтиПапки(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, СтрокаОшибки = "", BaseShape = "AllProperties", Дерево = Неопределено) Экспорт
	RootFolder = FindFolder(Подключение, FolderId, DistinguishedFolderId, СтрокаОшибки, BaseShape,, Дерево);
	
	Если RootFolder <> Неопределено Тогда
		Попытка		СтрокиFolders = RootFolder.Строки[0];
		Исключение	СтрокиFolders = Неопределено;
		КонецПопытки;
		
		Если СтрокиFolders <> Неопределено Тогда
			Таблица = Новый ТаблицаЗначений();
			Для Каждого Элемент Из СтрокиFolders.Строки Цикл
				СтрокаТаблицы = Таблица.Добавить();
				ВеткуДереваВТаблицу(Элемент.Строки, Таблица, СтрокаТаблицы);
			КонецЦикла;
			Возврат Таблица;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура СформироватьТаблицуПапок(Подключение, Папка, Таблица, УчетнаяЗаписьЭлектроннойПочты, СоответствиеDistinguishedFolderIds, СтрокаОшибки)
	
	Если Папка.FolderClass <> "IPF.Note" Тогда
		Возврат;	
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Папка);
	Попытка НоваяСтрока.ChildFolderCount = Число(НоваяСтрока.ChildFolderCount);
	Исключение КонецПопытки;
	
	Попытка		ChildFolderCount = Число(Папка.ChildFolderCount);
	Исключение	ChildFolderCount = 0;
	КонецПопытки;     
	
	Попытка		ID = Папка.ID;
	Исключение  ID = Неопределено;
	КонецПопытки;
		
	DistinguishedFolderId = СоответствиеDistinguishedFolderIds[ID];
	НоваяСтрока.DistinguishedFolderId = ?(DistinguishedFolderId = Неопределено, "", DistinguishedFolderId);
	
	НоваяСтрока.ВидПапкиЭлектроннойПочты1С = скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ОпределитьВидПапкиЭлектроннойПочты1С(НоваяСтрока);
	НоваяСтрока.Папка1С 				   = скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ПолучитьЭлементСтруктурыПапокMSExchangeПоID(УчетнаяЗаписьЭлектроннойПочты, ID);
	Если Не ЗначениеЗаполнено(НоваяСтрока.Папка1С) Тогда
		скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ОпределитьПапку1С(НоваяСтрока, УчетнаяЗаписьЭлектроннойПочты);		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуПапок(Подключение, УчетнаяЗаписьЭлектроннойПочты, СоответствиеDistinguishedFolderIds, НайденныеПапки, СтрокаОшибки = "") Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("DisplayName");
	Таблица.Колонки.Добавить("FolderClass");
	Таблица.Колонки.Добавить("ID");
	Таблица.Колонки.Добавить("DistinguishedFolderId");
	Таблица.Колонки.Добавить("ParentFolderId");
	Таблица.Колонки.Добавить("ChildFolderCount");
	Таблица.Колонки.Добавить("ВидПапкиЭлектроннойПочты1С");
	Таблица.Колонки.Добавить("Папка1С");
		
	Если ТипЗнч(НайденныеПапки) = Тип("ТаблицаЗначений") И НайденныеПапки.Количество() > 0 Тогда
		Для Каждого Папка Из НайденныеПапки Цикл
			СформироватьТаблицуПапок(Подключение, Папка, Таблица, УчетнаяЗаписьЭлектроннойПочты, СоответствиеDistinguishedFolderIds, СтрокаОшибки)
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьПапку(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, BaseShape = "AllProperties", СтрокаОшибки = "") Экспорт
	МассивFolders = GetFolder(Подключение, FolderId, DistinguishedFolderId, BaseShape, СтрокаОшибки);
	Если МассивFolders <> Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
		Для каждого Folders Из МассивFolders Цикл
			Для Каждого Элемент Из Folders.Строки Цикл
				СтрокаТаблицы = Таблица.Добавить();
				ВеткуДереваВТаблицу(Элемент.Строки, Таблица, СтрокаТаблицы);
			КонецЦикла;
		КонецЦикла;
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция УдалитьЭлемент(Подключение, ID, DeleteType = "SoftDelete", SendMeetingCancellations = Неопределено, СтрокаОшибки = "") Экспорт
	// Возможные значения DeleteType:
	//HardDelete
	//SoftDelete
	//MoveToDeletedItems
	
	// Возможные значения SendMeetingCancellations:
	//SendToNone
	//SendOnlyToAll
	//SendToAllAndSaveCopy
	
	Результат = DeleteItem(Подключение, ID, DeleteType, SendMeetingCancellations, СтрокаОшибки);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат (Результат.Успешно = Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция СоздатьЭлемент(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, ТипЭлемента, Данные, СтрокаОшибки = "", ДополнительныеДанные = Неопределено)
	Если Не ЗначениеЗаполнено(FolderId) И Не ЗначениеЗаполнено(DistinguishedFolderId) Тогда
		Если ТипЭлемента = "Контакт" Тогда
			FolderId = Подключение.КонтактыFolderId;
			DistinguishedFolderId = Подключение.КонтактыDistinguishedFolderId;
		ИначеЕсли ТипЭлемента = "Событие" Тогда
			FolderId = Подключение.СобытияFolderId;
			DistinguishedFolderId = Подключение.СобытияDistinguishedFolderId;
		ИначеЕсли ТипЭлемента = "ПочтовоеСообщение" Тогда
			//TODO:
			FolderId = Неопределено;
			DistinguishedFolderId = Неопределено;
		Иначе
			
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Items = CreateItem(Подключение, FolderId, DistinguishedFolderId, ТипЭлемента, Данные, СтрокаОшибки, ДополнительныеДанные);
	Если Items <> Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
		Для Каждого Элемент Из Items.Строки Цикл
			СтрокаТаблицы = Таблица.Добавить();
			ВеткуДереваВТаблицу(Элемент.Строки, Таблица, СтрокаТаблицы);
		КонецЦикла;
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СоздатьКонтакт(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, Данные, СтрокаОшибки = "") Экспорт
	Возврат СоздатьЭлемент(Подключение, FolderId, DistinguishedFolderId, "Контакт", Данные, СтрокаОшибки);
КонецФункции

Функция СоздатьСобытие(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, Данные, СтрокаОшибки = "", ДополнительныеДанные = Неопределено) Экспорт
	// SendMeetingInvitations может принимать значения:
	// SendOnlyToAll
	// SendToAllAndSaveCopy
	// SendToNone
	
	Если ТипЗнч(ДополнительныеДанные) <> Тип("Структура") Тогда
		ДополнительныеДанные = Новый Структура();
	КонецЕсли;
	Если Не ДополнительныеДанные.Свойство("SendMeetingInvitations") Тогда
		ДополнительныеДанные.Вставить("SendMeetingInvitations", "SendToAllAndSaveCopy");
	КонецЕсли;
	
	Возврат СоздатьЭлемент(Подключение, FolderId, DistinguishedFolderId, "Событие", Данные, СтрокаОшибки, ДополнительныеДанные);
КонецФункции

Функция СоздатьПочтовоеСообщение(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, Данные, СтрокаОшибки = "", ДополнительныеДанные = Неопределено) Экспорт
	Возврат СоздатьЭлемент(Подключение, FolderId, DistinguishedFolderId, "ПочтовоеСообщение", Данные, СтрокаОшибки, ДополнительныеДанные);
КонецФункции

Функция ОбновитьЭлемент(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, Данные, ТипЭлемента, СтрокаОшибки = "", ДополнительныеДанные = Неопределено)
	Возврат UpdateItem(Подключение, FolderId, DistinguishedFolderId, Данные, ТипЭлемента, СтрокаОшибки, ДополнительныеДанные);
КонецФункции

Функция ОбновитьКонтакт(Подключение, Данные, СтрокаОшибки = "") Экспорт
	Возврат ОбновитьЭлемент(Подключение,,, Данные, "Контакт", СтрокаОшибки);
КонецФункции

Функция ОбновитьСобытие(Подключение, Данные, СтрокаОшибки = "", ДополнительныеДанные = Неопределено) Экспорт
	Если ТипЗнч(ДополнительныеДанные) <> Тип("Структура") Тогда
		ДополнительныеДанные = Новый Структура();
	КонецЕсли;
	Если Не ДополнительныеДанные.Свойство("SendMeetingInvitationsOrCancellations") Тогда
		ДополнительныеДанные.Вставить("SendMeetingInvitationsOrCancellations", "SendToAllAndSaveCopy");
	КонецЕсли;
	
	Возврат ОбновитьЭлемент(Подключение, Данные, "Событие", СтрокаОшибки, ДополнительныеДанные);
КонецФункции

Функция ОбновитьПочтовоеСообщение(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, Данные, СтрокаОшибки = "", ДополнительныеДанные = Неопределено) Экспорт
	Возврат ОбновитьЭлемент(Подключение, FolderId, DistinguishedFolderId, Данные, "ПочтовоеСообщение", СтрокаОшибки, ДополнительныеДанные);
КонецФункции

Функция ОтправитьЭлемент(Подключение, ID, DistinguishedFolderId, СтрокаОшибки, ДополнительныеДанные = Неопределено) Экспорт
	Возврат SendItem(Подключение, ID,, DistinguishedFolderId, СтрокаОшибки, ДополнительныеДанные);
КонецФункции

Функция СинхронизироватьПапки(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, SyncState = "", BaseShape = "IdOnly", СтрокаОшибки = "") Экспорт
	ResponseMessages = SyncFolderHierarchy(Подключение, FolderId, DistinguishedFolderId, SyncState, BaseShape, СтрокаОшибки);
	Если ResponseMessages <> Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
		Для Каждого ResponseMessage Из ResponseMessages.Строки Цикл
			NoError = Ложь;
			Для Каждого СтрокаResponseMessage Из ResponseMessage.Строки Цикл
				Если СтрокаResponseMessage.Имя = "ResponseCode" И СтрокаResponseMessage.Значение = "NoError" Тогда
					NoError = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если NoError Тогда    
				СтрокаТаблицы = Таблица.Добавить();
				ВеткуДереваВТаблицу(ResponseMessage.Строки, Таблица, СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СинхронизироватьЭлементы(Подключение, FolderId = Неопределено, DistinguishedFolderId = Неопределено, SyncState = "", BaseShape = "IdOnly", MaxChangesReturned = "512", МассивСвойств = Неопределено, СтрокаОшибки = "") Экспорт
	ResponseMessages = SyncFolderItems(Подключение, FolderId, DistinguishedFolderId, SyncState, BaseShape, MaxChangesReturned, МассивСвойств, СтрокаОшибки);
	Если ResponseMessages <> Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
		Для Каждого ResponseMessage Из ResponseMessages.Строки Цикл
			NoError = Ложь;
			Для Каждого СтрокаResponseMessage Из ResponseMessage.Строки Цикл
				Если СтрокаResponseMessage.Имя = "ResponseCode" И СтрокаResponseMessage.Значение = "NoError" Тогда
					NoError = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если NoError Тогда    
				СтрокаТаблицы = Таблица.Добавить();
				ВеткуДереваВТаблицу(ResponseMessage.Строки, Таблица, СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Таблица.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Таблица;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБЪЕКТОВ, СВЯЗЕЙ И ИЗМЕНЕНИЙ

Процедура ЗаписатьДатыПоследнегоОбмена(УчетнаяЗапись, ДатаПоследнегоОбменаПочтовыхСообщений) Экспорт
	
	УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
			
	Если ТипЗнч(ДатаПоследнегоОбменаПочтовыхСообщений) = Тип("Дата") Тогда
		УчетнаяЗаписьОбъект.скДатаПоследнегоОбменаПочтовыхСообщений = ДатаПоследнегоОбменаПочтовыхСообщений;
	КонецЕсли;
	
	УчетнаяЗаписьОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	УчетнаяЗаписьОбъект.Записать();
	
КонецПроцедуры

Процедура ЗаписатьСостояниеСинхронизации(СсылкаОбъекта, СостояниеСинхронизации) Экспорт

	Объект = СсылкаОбъекта.ПолучитьОбъект();
	Объект.скСостояниеСинхронизацииMSExchange =  СостояниеСинхронизации;
	
	Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Объект.Записать();
	
КонецПроцедуры

Функция ПолучитьДанныеМенеджераСообщенияПоОбъекту1С(Объект1С) Экспорт
	
	Менеджер = РегистрыСведений.скMSExchange_ДанныеПочтовыхСообщений.СоздатьМенеджерЗаписи();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	скMSExchange_ДанныеПочтовыхСообщений.ID КАК ID,
	|	скMSExchange_ДанныеПочтовыхСообщений.ChangeKey,
	|	скMSExchange_ДанныеПочтовыхСообщений.СерверMSExchange
	|ИЗ
	|	РегистрСведений.скMSExchange_ДанныеПочтовыхСообщений КАК скMSExchange_ДанныеПочтовыхСообщений
	|ГДЕ
	|	скMSExchange_ДанныеПочтовыхСообщений.Объект1С = &Объект1С");
	
	Запрос.УстановитьПараметр("Объект1С", Объект1С);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Менеджер = ПолучитьДанныеМенеджераСообщенияПоID(
			Выборка.СерверMSExchange, Выборка.ID, Выборка.ChangeKey);	
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции

Функция ПолучитьДанныеМенеджераСообщенияПоID(ИсточникСервера, ID, ChangeKey = Неопределено) Экспорт

	Менеджер = РегистрыСведений.скMSExchange_ДанныеПочтовыхСообщений.СоздатьМенеджерЗаписи();
	
	Если ТипЗнч(ИсточникСервера) = Тип("СправочникСсылка.CRM_СерверыMSExchange") Тогда
		СерверMSExchange = ИсточникСервера;	
	ИначеЕсли ТипЗнч(ИсточникСервера) = Тип("СправочникСсылка.скMSExchange_НастройкиОбменаПочтовымиСообщениями") Тогда
		СерверMSExchange = ИсточникСервера.УчетнаяЗапись.СерверMSExchange;	
	Иначе
		СерверMSExchange = ИсточникСервера.СерверMSExchange;	
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.скMSExchange_ДанныеПочтовыхСообщений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ID.Установить(ID);
	НаборЗаписей.Отбор.СерверMSExchange.Установить(СерверMSExchange);
	Если ЗначениеЗаполнено(ChangeKey) Тогда
		НаборЗаписей.Отбор.ChangeKey.Установить(ChangeKey);
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
		
	Если НаборЗаписей.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(Менеджер, НаборЗаписей[0]);
	Иначе	
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.ID = ID Тогда
				ЗаполнитьЗначенияСвойств(Менеджер, ЗаписьНабора);
				Прервать;		
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	Менеджер.Прочитать();
	
	Возврат Менеджер;
			
КонецФункции // ПолучитьДанныеСообщенияПоID()
