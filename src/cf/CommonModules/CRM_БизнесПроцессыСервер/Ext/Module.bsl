
Функция ПолучитьВозможныхИсполнителейПоРоли(Роль) Экспорт
	
	СписокИсполнителей = Новый списокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РольИсполнителя",Роль);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
		
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции

// + Тищенко В.В.
Функция ПолучитьВозможныхИсполнителейПоРолиСАдресацией(Роль,ДополнительныеПараметры = Неопределено) Экспорт
	
	СписокИсполнителей = Новый СписокЗначений;
	
	Если Роль.вогИспользоватьНижеСтоящиеПодразделение Тогда
		
		//START Кайдашов 13/08/19 558		
		Если ДополнительныеПараметры<>Неопределено тогда 
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",ДополнительныеПараметры.Подразделение);
			запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
			|СтруктураПредприятия.Ссылка КАК Группа,СтруктураПредприятия.Ссылка как Подразделение,
			|1 КАК Поле1
			|ИЗ
			|Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|СтруктураПредприятия.Ссылка = &Ссылка
			|ИТОГИ
			|СУММА(Поле1)
			|ПО
			|Группа ТОЛЬКО ИЕРАРХИЯ";
			ТЗ = Запрос.Выполнить().Выгрузить();
			Для каждого Строка из ТЗ цикл
				Строка.Подразделение = ДополнительныеПараметры.Подразделение;		
			КонецЦикла;
		Иначе
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("Группа",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
			ТЗ.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		КонецЕсли;
	
		Запрос = Новый Запрос("
		|Выбрать Т.Группа как Группа,Т.Подразделение как Подразделение
		|Поместить ВТ_СтруктураПредприятия
		|ИЗ &ВРТ как Т
		|;
		|///////////////
		|ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
		|	СтруктураПредприятия.Подразделение КАК ОсновнойОбъектАдресации,
		//|	СтруктураПредприятия.Ссылка КАК ОсновнойОбъектАдресации,
		|	ИсполнителиЗадач.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
		|ПОМЕСТИТЬ ВТ_Исполнители
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО	ИсполнителиЗадач.ОсновнойОбъектАдресации = СтруктураПредприятия.Группа
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		//|		ПО (ИсполнителиЗадач.ОсновнойОбъектАдресации = СтруктураПредприятия.Ссылка.Родитель
		//|				ИЛИ ИсполнителиЗадач.ОсновнойОбъектАдресации = СтруктураПредприятия.Ссылка)
//END Кайдашов	558	
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
	 	|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_Исполнители.Исполнитель) КАК Исполнитель,
		|	ВТ_Исполнители.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ВТ_Исполнители.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
		|ИЗ
		|	ВТ_Исполнители КАК ВТ_Исполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированиеРолиИсполнителя.СрезПоследних КАК вогДелегированиеРолиИсполнителяСрезПоследних
		|		ПО ВТ_Исполнители.Исполнитель = вогДелегированиеРолиИсполнителяСрезПоследних.ВладелецРоли
		|			И ВТ_Исполнители.РольИсполнителя = вогДелегированиеРолиИсполнителяСрезПоследних.РольИсполнителя
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаНачала <= &ТекущаяДата)
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаОкончания >= &ТекущаяДата)
		|ГДЕ
		|	ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_Исполнители.Исполнитель),
		|	ВТ_Исполнители.ОсновнойОбъектАдресации,
		|	ВТ_Исполнители.ДополнительныйОбъектАдресации");

//START Кайдашов 13/08/19 558			
		Запрос.УстановитьПараметр("ВРТ",ТЗ);
//END Кайдашов 558			
		
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
		|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ИсполнителиЗадач.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
		|ПОМЕСТИТЬ ВТ_Исполнители
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_Исполнители.Исполнитель) КАК Исполнитель,
		|	ВТ_Исполнители.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ВТ_Исполнители.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
		|ИЗ
		|	ВТ_Исполнители КАК ВТ_Исполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированиеРолиИсполнителя.СрезПоследних КАК вогДелегированиеРолиИсполнителяСрезПоследних
		|		ПО ВТ_Исполнители.Исполнитель = вогДелегированиеРолиИсполнителяСрезПоследних.ВладелецРоли
		|			И ВТ_Исполнители.РольИсполнителя = вогДелегированиеРолиИсполнителяСрезПоследних.РольИсполнителя
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаНачала >= &ТекущаяДата)
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаОкончания <= &ТекущаяДата)");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РольИсполнителя"	,Роль);
	Запрос.УстановитьПараметр("ТекущаяДата"		,КонецДня(ТекущаяДата()));
	
	Если ДополнительныеПараметры <> Неопределено И НЕ Роль.вогИспользоватьНижеСтоящиеПодразделение Тогда
		
		Если Роль.ИспользуетсяСОбъектамиАдресации И ЗначениеЗаполнено(Роль.ТипыОсновногоОбъектаАдресации) И НЕ ЗначениеЗаполнено(Роль.ТипыДополнительногоОбъектаАдресации) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИСТИНА","	ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации");
			Запрос.УстановитьПараметр("ОсновнойОбъектАдресации",ДополнительныеПараметры.Подразделение);
		КонецЕсли;
		
		Если Роль.ИспользуетсяСОбъектамиАдресации И ЗначениеЗаполнено(Роль.ТипыОсновногоОбъектаАдресации) И ЗначениеЗаполнено(Роль.ТипыДополнительногоОбъектаАдресации) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИСТИНА","ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации");
			Запрос.УстановитьПараметр("ОсновнойОбъектАдресации",ДополнительныеПараметры.Подразделение);
			Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации",Неопределено);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры <> Неопределено И Роль.вогИспользоватьНижеСтоящиеПодразделение Тогда
		
		Если Роль.ИспользуетсяСОбъектамиАдресации И ЗначениеЗаполнено(Роль.ТипыОсновногоОбъектаАдресации) И НЕ ЗначениеЗаполнено(Роль.ТипыДополнительногоОбъектаАдресации) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИСТИНА","	ВТ_Исполнители.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации");
			Запрос.УстановитьПараметр("ОсновнойОбъектАдресации",ДополнительныеПараметры.Подразделение);
		КонецЕсли;
			
	КонецЕсли;
				
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции // - Тищенко В.В

// Тищенко В.В.
Функция ПолучитьВозможныхИсполнителейПоРолиДляПоручения(Роль,ДополнительныеПараметры,БизнесПроцесс = Неопределено) Экспорт

	СписокИсполнителей = Новый СписокЗначений;
	
	Если БизнесПроцесс <> Неопределено Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	вогСписокИсполнителейПоручения.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
		|ГДЕ
		|	вогСписокИсполнителейПоручения.БизнесПроцесс = &БизнесПроцесс");
		Запрос.УстановитьПараметр("БизнесПроцесс",БизнесПроцесс);
		РезультатЗапроса = Запрос.Выполнить();
		
		//Если НЕ РезультатЗапроса.Пустой() Тогда
			Массив = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Исполнитель");
			СписокИсполнителей.ЗагрузитьЗначения(Массив);
			Возврат СписокИсполнителей;
		//КонецЕсли;
	КонецЕсли;	
	
	Если Роль.ИспользуетсяСОбъектамиАдресации Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СправочникПользователи.Ссылка КАК Пользователь,
		|	СправочникПользователи.Наименование КАК Наименование,
		|	СправочникПользователи.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ДоступныеИсполнители
		|ИЗ
		|	Справочник.Пользователи КАК СправочникПользователи
		|ГДЕ
		|	СправочникПользователи.Подразделение В ИЕРАРХИИ(&Подразделение)
		//>>Бей(31.05.2019 16:57:14):#334
		|	%1
		//<<Бей(31.05.2019 16:57:17):#334
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
		|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
		|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
		|ПОМЕСТИТЬ ВТ_Исполнители
		|ИЗ
		|	ВТ_ДоступныеИсполнители КАК ВТ_ДоступныеИсполнители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ВТ_ДоступныеИсполнители.Пользователь = ИсполнителиЗадач.Исполнитель
		|			И (ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_Исполнители.Исполнитель) КАК Исполнитель,
		|	ВТ_Исполнители.РольИсполнителя КАК РольИсполнителя,
		|	ВТ_Исполнители.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
		|ПОМЕСТИТЬ ВТ_ИсполнителиЗаместители
		|ИЗ
		|	ВТ_Исполнители КАК ВТ_Исполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированиеРолиИсполнителя.СрезПоследних КАК вогДелегированиеРолиИсполнителяСрезПоследних
		|		ПО ВТ_Исполнители.Исполнитель = вогДелегированиеРолиИсполнителяСрезПоследних.ВладелецРоли
		|			И ВТ_Исполнители.РольИсполнителя = вогДелегированиеРолиИсполнителяСрезПоследних.РольИсполнителя
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаНачала <= &ТекущаяДата)
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаОкончания >= &ТекущаяДата)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Исполнители.ОсновнойОбъектАдресации,
		|	ВТ_Исполнители.РольИсполнителя,
		|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_Исполнители.Исполнитель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИсполнителиЗаместители.Исполнитель КАК Исполнитель,
		|	ВТ_ИсполнителиЗаместители.РольИсполнителя КАК РольИсполнителя,
		|	ВТ_ИсполнителиЗаместители.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
		|ИЗ
		|	ВТ_ИсполнителиЗаместители КАК ВТ_ИсполнителиЗаместители");
		
	//ИначеЕсли НЕ Роль.вогИспользоватьНижеСтоящиеПодразделение И Роль.ИспользуетсяСОбъектамиАдресации Тогда
	//	
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//	|	СправочникПользователи.Ссылка КАК Пользователь,
	//	|	СправочникПользователи.Наименование КАК Наименование,
	//	|	СправочникПользователи.Подразделение КАК Подразделение
	//	|ПОМЕСТИТЬ ВТ_ДоступныеИсполнители
	//	|ИЗ
	//	|	Справочник.Пользователи КАК СправочникПользователи
	//	|ГДЕ
	//	|	СправочникПользователи.Подразделение = &Подразделение
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
	//	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
	//	|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
	//	|ПОМЕСТИТЬ ВТ_Исполнители
	//	|ИЗ
	//	|	ВТ_ДоступныеИсполнители КАК ВТ_ДоступныеИсполнители
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	//	|		ПО ВТ_ДоступныеИсполнители.Пользователь = ИсполнителиЗадач.Исполнитель
	//	|			И (ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_Исполнители.Исполнитель) КАК Исполнитель,
	//	|	ВТ_Исполнители.РольИсполнителя КАК РольИсполнителя,
	//	|	ВТ_Исполнители.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
	//	|ИЗ
	//	|	ВТ_Исполнители КАК ВТ_Исполнители
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированиеРолиИсполнителя.СрезПоследних КАК вогДелегированиеРолиИсполнителяСрезПоследних
	//	|		ПО ВТ_Исполнители.Исполнитель = вогДелегированиеРолиИсполнителяСрезПоследних.ВладелецРоли
	//	|			И ВТ_Исполнители.РольИсполнителя = вогДелегированиеРолиИсполнителяСрезПоследних.РольИсполнителя
	//	|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаНачала <= &ТекущаяДата)
	//	|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаОкончания >= &ТекущаяДата)");
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
		|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
		|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
		|ПОМЕСТИТЬ ВТ_Исполнители
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		//>>Бей(31.05.2019 16:57:14):#334
		|	%2
		//<<Бей(31.05.2019 16:57:17):#334
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вогДелегированиеРолиИсполнителяСрезПоследних.Ответсвенный, ВТ_Исполнители.Исполнитель) КАК Исполнитель,
		|	ВТ_Исполнители.РольИсполнителя КАК РольИсполнителя,
		|	ВТ_Исполнители.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
		|ИЗ
		|	ВТ_Исполнители КАК ВТ_Исполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированиеРолиИсполнителя.СрезПоследних КАК вогДелегированиеРолиИсполнителяСрезПоследних
		|		ПО ВТ_Исполнители.Исполнитель = вогДелегированиеРолиИсполнителяСрезПоследних.ВладелецРоли
		|			И ВТ_Исполнители.РольИсполнителя = вогДелегированиеРолиИсполнителяСрезПоследних.РольИсполнителя
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаНачала <= &Текущаядата)
		|			И (вогДелегированиеРолиИсполнителяСрезПоследних.ДатаОкончания >= &ТекущаяДата)");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата"		,КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Подразделение"	,ДополнительныеПараметры.Подразделение);
	Запрос.УстановитьПараметр("РольИсполнителя"	,Роль);
	
	//>>Бей(31.05.2019 16:57:14):#334
	
	УсловиеПоПодчиненным1 = "";
	УсловиеПоПодчиненным2 = "";
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ПодчиненныеСотрудники") Тогда	
		
		УсловиеПоПодчиненным1 = "И СправочникПользователи.Ссылка в (&ПодчиненныеСотрудники)";	
		УсловиеПоПодчиненным2 = "И ИсполнителиЗадач.Исполнитель в (&ПодчиненныеСотрудники)";	
		Запрос.УстановитьПараметр("ПодчиненныеСотрудники",ДополнительныеПараметры.ПодчиненныеСотрудники);
		
	КонецЕсли;	
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,УсловиеПоПодчиненным1,УсловиеПоПодчиненным2);
	
	//<<Бей(31.05.2019 16:57:17):#334

	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции // -- Тищенко В.В.

Функция ПолучитьПодчиненныхИсполнителей() Экспорт//>>Бей(31.05.2019 17:37:09):#334
	
	СписокИсполнителей = Новый СписокЗначений;
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникПользователи.Ссылка КАК Пользователь,
		|	СправочникПользователи.Наименование КАК Наименование,
		|	СправочникПользователи.Подразделение КАК Подразделение
		|
		|ИЗ
		|	Справочник.Пользователи КАК СправочникПользователи
		|ГДЕ
		|	СправочникПользователи.Ссылка в (&ПодчиненныеСотрудники)");

	Запрос.УстановитьПараметр("ПодчиненныеСотрудники"		, ПараметрыСеанса.вогПодчиненныеСотрудники);
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;

КонецФункции
 
Функция ПолучитьРолиПоПользователю(Пользователь) Экспорт
	
	СписокИсполнителей = Новый списокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель",Пользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции

Функция ПолучитьРолиПоПользователюБезАдресации(Пользователь) Экспорт // ++ Тищенко В.В.
	
	СписокИсполнителей = Новый списокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель",Пользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель
	|	И ИсполнителиЗадач.РольИсполнителя.ИспользуетсяБезОбъектовАдресации";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции // -- Тищенко В.В.

// ++ VOG Солодов В.В. 22.08.2019 task 477
Функция ПолучитьРолиПоПользователюДляГруппПользователей(Пользователь) Экспорт
	
	СписокРолей = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель
	|	И ВЫРАЗИТЬ(ИсполнителиЗадач.РольИсполнителя КАК Справочник.РолиИсполнителей).вогРольДляГруппыПользователей";
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	
	СписокРолей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокРолей;
	
КонецФункции
// -- VOG Солодов В.В. 22.08.2019

Функция ЗадачаДоступнаДляПринятияКИсполнению(Задача) Экспорт

	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
		Исполнитель = Задача.Исполнитель;
	Иначе
		Исполнитель = Задача.РольИсполнителя;
	КонецЕсли;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Если Исполнитель= ПредопределенноеЗначение("Справочник.РолиИсполнителей.вогЗадачиДолжностнойПозиции") И ЗначениеЗаполнено(Задача.ОсновнойОбъектАдресации) Тогда
			Возврат НЕ ПараметрыСеанса.вогДолжностныеПозиции.Найти(Задача.ОсновнойОбъектАдресации)=Неопределено;
		Иначе 
			// + Тищенко В.В.
			// Оригинал
			//СписокВозможныхИсполнителей = ПолучитьВозможныхИсполнителейПоРоли(Исполнитель);
			ДополнительныеПараметрыАдресации = Неопределено;
			Если Исполнитель.ИспользуетсяСОбъектамиАдресации Тогда
				ДополнительныеПараметрыАдресации = Новый Структура;
				ДополнительныеПараметрыАдресации.Вставить("Автор"			, Задача.БизнесПроцесс.Автор);
				ДополнительныеПараметрыАдресации.Вставить("Подразделение"	, Задача.БизнесПроцесс.Автор.Подразделение);
				
				// ++ Тищенко В.В. 28.01.2019
				// Если это поручение тогда алгоритм поиска другой
				Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
					СписокИсполнителейРоли 				= ПолучитьВозможныхИсполнителейПоРолиДляПоручения(Исполнитель,ДополнительныеПараметрыАдресации, Задача.БизнесПроцесс.Ссылка);
				// ++ VOG Солодов В.В. 22.08.2019 task 477
				ИначеЕсли Исполнитель.вогРольДляГруппыПользователей Тогда
					
					//ТекущийПользователь 		= Пользователи.ТекущийПользователь();
					//СписокРолей 				= ПолучитьРолиПоПользователю(ТекущийПользователь);
					//СписокВозможныхИсполнителей = Новый СписокЗначений;
					//
					//Если СписокРолей.НайтиПоЗначению(Исполнитель) Тогда
					//	СписокВозможныхИсполнителей.Добавить(ТекущийПользователь);
					//КонецЕсли;
					
					СписокВозможныхИсполнителей 		= ПолучитьВозможныхИсполнителейПоРоли(Исполнитель);
					
				// -- VOG Солодов В.В. 22.08.2019
				Иначе
					СписокИсполнителейРоли 				= ПолучитьВозможныхИсполнителейПоРолиСАдресацией(Исполнитель,ДополнительныеПараметрыАдресации);
				КонецЕсли;
				//СписокВозможныхИсполнителей = ПолучитьВозможныхИсполнителейПоРолиСАдресацией(Исполнитель,ДополнительныеПараметрыАдресации);
				// -- Тищенко В.В.
			Иначе
				СписокВозможныхИсполнителей = ПолучитьВозможныхИсполнителейПоРолиСАдресацией(Исполнитель);
			КонецЕсли;
			
			// - Тищенко В.В.
		КонецЕсли;
	Иначе
		СписокВозможныхИсполнителей = Новый списокЗначений;
		СписокВозможныхИсполнителей.Добавить(Исполнитель);
		
		// ++ VOG Солодов В.В. 30.07.2019 task 106
		вогНастраиваемоеДелегированиеПрав.ДополнитьСписокОтветственныхДелегатами(
			СписокВозможныхИсполнителей, "ПроцессыИЗадачи", Исполнитель);
		// -- VOG Солодов В.В. 30.07.2019
		
	КонецЕсли;
	
	СписокДоступныхПользователей = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПользователей(Истина);
	попытка
		Возврат (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(СписокВозможныхИсполнителей.ВыгрузитьЗначения(), СписокДоступныхПользователей).Количество() > 0);
	Исключение
		Возврат Ложь;	
	КонецПопытки;
КонецФункции

// Функция получает представление варианта условия.
//
// Параметры:
//	ТочкаМаршрута		- СправочникСсылка	- Точка маршрута.
//	ВариантВыполнения	- Число				- Индекс варианта.
//	НомерВерсии			- Число				- Номер версии.
//
// Возвращаемое значение:
// Строка	- Представление варианта условия.
//
Функция ПолучитьПредставлениеВариантаУсловия(ТочкаМаршрута, ВариантВыполнения, НомерВерсии) Экспорт
	СтруктураИсхТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута, НомерВерсии);
	МассивСтрок			= СтруктураИсхТочки.ИсходящаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("Индекс,НомерВерсии", ВариантВыполнения, НомерВерсии));
	СтроковоеПредставление = "";
	Если СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
		СтроковоеПредставление = СтроковоеПредставление + СокрЛП(СтруктураИсхТочки.ИсходящаяТочка.Наименование);
	КонецЕсли;
	СтроковоеПредставление = СтроковоеПредставление + ?(СтроковоеПредставление = "", МассивСтрок[0].ВариантСиноним, "/" 
		+ МассивСтрок[0].ВариантСиноним);
	Возврат СтроковоеПредставление;
КонецФункции

// Функция проверяет приведет ли бизнес-процесс к неудачному завершению.
//
// Параметры:
//	БизнесПроцесс		- БизнесПроцессСсылка	- Бизнес-процесс
//	ТочкаМаршрута		- СправочникСсылка		- Точка маршрута.
//	ВариантВыполнения	- Число					- Индекс варианта.
//
// Возвращаемое значение:
// Булево	- Результат проверки.
//
Функция ПриведетКНеудачномуЗавершению(БизнесПроцесс, ТочкаМаршрута, ВариантВыполнения) Экспорт
	Если НЕ БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков
	И БизнесПроцесс.КартаМаршрута.УказыватьПричинуНеудачногоЗавершения Тогда
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс, ТочкаМаршрута,,,ВариантВыполнения);
		Если (МассивИсходящихТочек.Количество() = 1) И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			Возврат(МассивИсходящихТочек[0].ИсходящаяТочка.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ПриведетКНеудачномуЗавершению()

////////////////////////////////////////////////////////////////////////////////
// Процедуры досрочного завершения бизнес-процессов.

// Процедура - обработчик досрочного завершения бизнес-процесса.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс.
//
Процедура ОбработкаДосрочногоЗавершенияБизнесПроцесса(БизнесПроцесс) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Задача
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	НЕ ЗадачаИсполнителя.Выполнена
	               |	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Выборка.Задача);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК ВложенныйБизнесПроцесс
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.Завершен
	|	И НЕ CRM_БизнесПроцесс.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
	|	И CRM_БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс.CRM_БизнесПроцесс");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ВложенныйБизнесПроцесс);
			Блокировка.Заблокировать();
			БизнесПроцессОбъект = Выборка.ВложенныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Завершен					= Истина;
			БизнесПроцессОбъект.ЗавершенДосрочно			= Истина;
			БизнесПроцессОбъект.ВариантЗавершения			= БизнесПроцесс.ВариантЗавершения;
			БизнесПроцессОбъект.ПричинаДосрочногоЗавершения	= БизнесПроцесс.ПричинаДосрочногоЗавершения;
			БизнесПроцессОбъект.ДатаЗавершения				= БизнесПроцесс.ДатаЗавершения;
			БизнесПроцессОбъект.Записать();
			ЗафиксироватьТранзакцию();
			
			СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцессОбъект.Ссылка,,Истина,Истина);
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры // ОбработкаДосрочногоЗавершенияБизнесПроцесса()

// Процедура досрочно завершает бизнес-процесс.
//
// Параметры:
//	ПараметрыДосрочногоЗавершения	- Структура	- Параметры досрочного завершения.
//
Процедура ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения) Экспорт
//START Кайдашов 11/02/20
	Возврат;
//END Кайдашов	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс.CRM_БизнесПроцесс");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыДосрочногоЗавершения.Задача.БизнесПроцесс);
		Блокировка.Заблокировать();
		БизнесПроцессОбъект = ПараметрыДосрочногоЗавершения.Задача.БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Завершен					= ПараметрыДосрочногоЗавершения.ЗавершенДосрочно;
		БизнесПроцессОбъект.ЭтапДосрочногоЗавершения	= ПараметрыДосрочногоЗавершения.ЭтапДосрочногоЗавершения;
		БизнесПроцессОбъект.ЗавершенДосрочно			= ПараметрыДосрочногоЗавершения.ЗавершенДосрочно;
		БизнесПроцессОбъект.ВариантЗавершения			= ПараметрыДосрочногоЗавершения.ВариантЗавершения;
		БизнесПроцессОбъект.ПричинаДосрочногоЗавершения	= ПараметрыДосрочногоЗавершения.ПричинаДосрочногоЗавершения;
		БизнесПроцессОбъект.ДатаЗавершения				= ТекущаяДатаСеанса();
		БизнесПроцессОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
		СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцессОбъект.Ссылка,,Истина,Истина);
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры // ЗавершитьДосрочноБизнесПроцесс()

// Процедура создает или удаляет кнопки создания бизнес-процесса на форме.
//
// Параметры:
//	ЭтаФорма		- УправляемаяФорма						- Форма документа.
//	ЭлементРодитель	- ЭлементФормы							- Командная панель, в которую добавляются или удаляются кнопки.
//	КартаМаршрута	- СправочникСсылка.CRM_КартыМаршрута	- Карта маршрута.
//	ФлагУдалить		- Булево								- Если Истина - кнопки создаются, Ложь - удаляются.
//
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтаФорма, ЭлементРодитель = Неопределено, КартаМаршрута = Неопределено, ФлагУдалить) Экспорт
	Элементы = ЭтаФорма.Элементы;
	Команды = ЭтаФорма.Команды;
	
	Если ФлагУдалить Тогда
		ЭлементНачатьБизнесПроцесс = Элементы.Найти("Кнопка_НачатьБизнесПроцесс");
		Если НЕ ЭлементНачатьБизнесПроцесс = Неопределено Тогда
			Элементы.Удалить(ЭлементНачатьБизнесПроцесс);
		КонецЕсли;
	Иначе
		ЗаголовокКнопки = КартаМаршрута.Наименование;
		
		КомандаФормы = Команды.Найти("Команда_НачатьБизнесПроцесс");
		Если КомандаФормы = Неопределено Тогда
			НоваяКомандаФормы = Команды.Добавить("Команда_НачатьБизнесПроцесс");
			НоваяКомандаФормы.Заголовок					= НСтр("ru = 'Начать ""'")+ЗаголовокКнопки + """";
			НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Начать бизнес-процесс ""'")+ЗаголовокКнопки + """";
			НоваяКомандаФормы.Действие					= "Подключаемый_КомандаНачатьБизнесПроцесс";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Ложь;
			КомандаФормы = НоваяКомандаФормы;
		Иначе
			КомандаФормы.Заголовок						= НСтр("ru = 'Начать ""'")+ЗаголовокКнопки + """";
			КомандаФормы.Подсказка						= НСтр("ru = 'Начать бизнес-процесс ""'")+ЗаголовокКнопки + """";
		КонецЕсли;
		
		СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
		Если СписокТочекСтарта.Количество() > 1 Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Точки.Ссылка					КАК Ссылка,
			|	Точки.Наименование				КАК Наименование,
			|	Точки.РеквизитДопУпорядочивания	КАК Порядок
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов КАК Точки
			|ГДЕ
			|	Точки.Ссылка В (&Точки)
			|УПОРЯДОЧИТЬ ПО
			|	Точки.РеквизитДопУпорядочивания, Точки.Ссылка
			|");
			Запрос.УстановитьПараметр("Точки", СписокТочекСтарта.ВыгрузитьЗначения());
			Выборка = Запрос.Выполнить().Выбрать();
			СписокТочекСтарта = Новый СписокЗначений();
			Пока Выборка.Следующий() Цикл
				СписокТочекСтарта.Добавить(Выборка.Ссылка, ?(ЗначениеЗаполнено(Выборка.Наименование), Выборка.Наименование, Строка(Выборка.Ссылка)));
			КонецЦикла;
			
			КнопкаНачатьБизнесПроцесс = Элементы.Найти("Кнопка_НачатьБизнесПроцесс");
			Если КнопкаНачатьБизнесПроцесс <> Неопределено Тогда
				Элементы.Удалить(КнопкаНачатьБизнесПроцесс);
			КонецЕсли;
			
			ПодменюТочкиСтарта = Элементы.Найти("Подменю_ТочкиСтартаБизнесПроцесса");
			Если ПодменюТочкиСтарта = Неопределено Тогда
				ПодменюТочкиСтарта = Элементы.Вставить("Подменю_ТочкиСтартаБизнесПроцесса", Тип("ГруппаФормы"), ЭлементРодитель, Элементы.ЗапуститьПроизвольныйБизнесПроцесс);
				ПодменюТочкиСтарта.Вид			= ВидГруппыФормы.Подменю;
				ПодменюТочкиСтарта.Заголовок	= КомандаФормы.Заголовок;
				ПодменюТочкиСтарта.Подсказка	= КомандаФормы.Подсказка;
				ПодменюТочкиСтарта.Отображение	= ОтображениеКнопки.Текст;
			КонецЕсли;
			Пока ПодменюТочкиСтарта.ПодчиненныеЭлементы.Количество() > 0 Цикл
				Элементы.Удалить(ПодменюТочкиСтарта.ПодчиненныеЭлементы[0]);
			КонецЦикла;
			
			Для Каждого ТочкаСтартаЗначение Из СписокТочекСтарта Цикл
				ДополнениеКИмениКнопки = СтрЗаменить(СокрЛП(Строка(ТочкаСтартаЗначение.Значение.УникальныйИдентификатор())), "-", "_");
				НовыйПунктМеню = Элементы.Вставить("КнопкаТочкаСтартаБизнесПроцесса_" + ДополнениеКИмениКнопки, Тип("КнопкаФормы"), ПодменюТочкиСтарта, Элементы.ЗапуститьПроизвольныйБизнесПроцесс);
				НовыйПунктМеню.Заголовок = Строка(ТочкаСтартаЗначение.Представление);
				
				ИмяКоманды = "КомандаТочкаСтартаБизнесПроцесса_" + ДополнениеКИмениКнопки;
				КомандаФормы = Команды.Найти(ИмяКоманды);
				Если КомандаФормы = Неопределено Тогда
					КомандаФормы = Команды.Добавить(ИмяКоманды);
					КомандаФормы.Заголовок					= НовыйПунктМеню.Заголовок;
					КомандаФормы.Подсказка					= НовыйПунктМеню.Заголовок;
					КомандаФормы.Действие					= "Подключаемый_КомандаНачатьБизнесПроцесс";
					КомандаФормы.ИзменяетСохраняемыеДанные	= Ложь;
				КонецЕсли;
				НовыйПунктМеню.ИмяКоманды = ИмяКоманды;
			КонецЦикла;
			
		Иначе
			ПодменюТочкиСтарта = Элементы.Найти("Подменю_ТочкиСтартаБизнесПроцесса");
			Если ПодменюТочкиСтарта <> Неопределено Тогда
				Элементы.Удалить(ПодменюТочкиСтарта);
			КонецЕсли;
			
			КнопкаНачатьБизнесПроцесс = Элементы.Найти("Кнопка_НачатьБизнесПроцесс");
			Если КнопкаНачатьБизнесПроцесс = Неопределено Тогда
				КнопкаНачатьБизнесПроцесс = Элементы.Вставить("Кнопка_НачатьБизнесПроцесс", Тип("КнопкаФормы"), ЭлементРодитель, Элементы.ЗапуститьПроизвольныйБизнесПроцесс);
				КнопкаНачатьБизнесПроцесс.ИмяКоманды = "Команда_НачатьБизнесПроцесс";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с бизнес-процессом.

// Функция формирует представление бизнес-процесса.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс.
//
// Возвращаемое значение:
//	Строка	- Представление бизнес-процесса.
//
Функция СформироватьПредставлениеБизнесПроцесса(БизнесПроцесс) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"), СокрЛП(БизнесПроцесс.Наименование), БизнесПроцесс.Номер, БизнесПроцесс.Дата);
КонецФункции // СформироватьПредставлениеБизнесПроцесса()

////////////////////////////////////////////////////////////////////////////////
// Формирование, сохранение изменений Маршрута и исполнителей бизнес-процесса.

// Функция проверяет варианты выполнения на зацикливание и возвращает
// первый вариант, который приводит к успешному завершению бизнес-процесса.
//
Функция ПроверитьУсловиеВыборВариантаВернутьВариантВыполнения(ТочкаМаршрута, НомерВерсииКарты, ЗНАЧ ВариантВыполнения = 0, ПроверяемВариант, ЗНАЧ таблицаПройденныхТочек = Неопределено)
	Перем ТекущаяТочка;
	
	ТекущаяТочка = ТочкаМаршрута;
	
	Если таблицаПройденныхТочек = Неопределено Тогда
		таблицаПройденныхТочек = Новый ТаблицаЗначений;
		таблицаПройденныхТочек.Колонки.Добавить("ТочкаМаршрут");
	КонецЕсли;
	
	СидимВЦикле = Истина;
	Пока СидимВЦикле Цикл
		
		СтрокаТаб = таблицаПройденныхТочек.Найти(ТекущаяТочка,"ТочкаМаршрут");
		Если НЕ СтрокаТаб = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НоваяСтрока = таблицаПройденныхТочек.Добавить();
		НоваяСтрока.ТочкаМаршрут = ТекущаяТочка;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, 0);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			
			Если ПроверяемВариант Тогда
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
				ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
				ПроверяемВариант	= Ложь;
				Продолжить;
			КонецЕсли;
			
			МассивВариантов = ТекущаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("НомерВерсии",НомерВерсииКарты));
			Для Каждого СтрокаВарианта Из МассивВариантов Цикл
				
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, СтрокаВарианта.Индекс);
				
				таблицаПройденныхТочекКопия = таблицаПройденныхТочек.Скопировать();
				Если ПроверитьУсловиеВыборВариантаВернутьВариантВыполнения(СтруктураТочки.ИсходящаяТочка, НомерВерсииКарты, 0, Истина, таблицаПройденныхТочекКопия) Тогда
					ВариантВыполнения = СтрокаВарианта.Индекс;
					Прервать;
				Иначе
					ВариантВыполнения = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Если ВариантВыполнения = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			
			МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсииКарты);
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(МассивСтруктурТочек[0].ИсходящаяТочка, НомерВерсииКарты, 0);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			
			Если ТекущаяТочка.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Успешно
			ИЛИ ТекущаяТочка.ВариантЗавершения <> Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ОбъектБДСуществует(ТестоваяСсылка)

	МД = Метаданные.НайтиПоТипу(ТипЗнч(ТестоваяСсылка));
	ИмяОбъекта = МД.Имя;
	ПолноеИмяОбъекта = МД.ПолноеИмя();

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|   ИСТИНА КАК СсылкаБДСуществует
	|ИЗ
	|   " + ПолноеИмяОбъекта + " КАК " + ИмяОбъекта + "
	|ГДЕ
	|   " + ИмяОбъекта + ".Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ТестоваяСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

// Процедура формирует/корректирует маршрут и исполнителей при завершении редактирования карт маршрута.
//
// Параметры:
//	КартаМаршрута	- СправочникСсылка	- Карта маршрута.
//
Процедура СформироватьМаршрутИИсполнителейКартыМаршрута(КартаМаршрута, ДополнительныеНастройки = Неопределено)Экспорт
	
	ПреднастройкиЭтапов			= Неопределено;
	ПреднастройкиИсполнителей	= Неопределено;
	ПреднастройкиОбъектов		= Неопределено;
	
	Если НЕ ДополнительныеНастройки = Неопределено Тогда
		
		ПреднастройкиЭтапов			= ДополнительныеНастройки.НастройкиМаршрута;
		ПреднастройкиИсполнителей	= ДополнительныеНастройки.Исполнители;
		ПреднастройкиОбъектов		= ДополнительныеНастройки.Объекты;
		
	КонецЕсли;
	
	СписокВидов = Новый массив;
	СписокВидов.Добавить(Перечисления.CRM_ВидыТочекМаршрута.Действие);
	СписокВидов.Добавить(Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс);
	СписокВидов.Добавить(Перечисления.CRM_ВидыТочекМаршрута.Завершение);
	
	НаборМаршрута = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборМаршрута.Отбор.Объект.Установить(КартаМаршрута);
	НаборМаршрута.Прочитать();
	
	ТабМаршрут		= НаборМаршрута.Выгрузить();
	
	Если НаборМаршрута.Количество() > 0 Тогда
		НаборМаршрута.Очистить();
	КонецЕсли;
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(КартаМаршрута);
	НаборИсполнителей.Прочитать();
	
	ТабИсполнители	= НаборИсполнителей.Выгрузить();
	
	Если НаборИсполнителей.Количество() > 0 Тогда
		НаборИсполнителей.Очистить();
	КонецЕсли;
	
	НаборОбъектов = РегистрыСведений.CRM_ОбъектыЭтапов.СоздатьНаборЗаписей();
	НаборОбъектов.Отбор.Объект.Установить(КартаМаршрута);
	НаборОбъектов.Прочитать();
	НаборОбъектов.Очистить();
	
	// Получим точки маршрута
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка,
	|	CRM_ТочкиМаршрутов.Имя,
	|	CRM_ТочкиМаршрутов.Наименование,
	|	CRM_ТочкиМаршрутов.Вид КАК Вид,
	|	CRM_ТочкиМаршрутов.Групповая,
	|	CRM_ТочкиМаршрутов.ВложенныйПроцесс,
	|	CRM_ТочкиМаршрутов.Пояснение,
	|	CRM_ТочкиМаршрутов.РеквизитДопУпорядочивания КАК Порядок
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
	|ГДЕ
	|	CRM_ТочкиМаршрутов.Владелец = &Владелец
	|	И (НЕ CRM_ТочкиМаршрутов.НеИспользуется)
	|	И CRM_ТочкиМаршрутов.Вид В(&СписокВидов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
	Запрос.УстановитьПараметр("СписокВидов", СписокВидов);
	
	//Выборка = запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	ТаблицаТочекКарты = запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из ТаблицаТочекКарты Цикл
		
		Если НЕ Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			СтруктураИсхТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Выборка.Ссылка, КартаМаршрута.НомерВерсии);
			
			Если СтруктураИсхТочки = Неопределено Тогда Продолжить; КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрокаНабора = НаборМаршрута.Добавить();
		НоваяСтрокаНабора.Объект								= КартаМаршрута;
		НоваяСтрокаНабора.ТочкаМаршрута							= Выборка.Ссылка;
		НоваяСтрокаНабора.Используется							= Истина;
		НоваяСтрокаНабора.Порядок								= Выборка.Порядок;
		
		Если НЕ Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			НоваяСтрокаНабора.ВариантВыполнения						= 0;
			НоваяСтрокаНабора.ДлительностьДней						= 1;
			НоваяСтрокаНабора.ДлительностьЧасов						= 0;
			НоваяСтрокаНабора.ДлительностьМинут						= 0;
			Если СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
				НоваяСтрокаНабора.ВариантВыполнения					= 1;
			КонецЕсли;
			
			Если СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
			ИЛИ СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
			
				МассивВариантов = СтруктураИсхТочки.ИсходящаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("НомерВерсии",КартаМаршрута.НомерВерсии));
				Для Каждого СтрокаВарианта Из МассивВариантов Цикл
					Если ПроверитьУсловиеВыборВариантаВернутьВариантВыполнения(СтруктураИсхТочки.ИсходящаяТочка, КартаМаршрута.НомерВерсии, СтрокаВарианта.Индекс, Истина) Тогда
						НоваяСтрокаНабора.ВариантВыполнения = СтрокаВарианта.Индекс;
						НоваяСтрокаНабора.ВариантВыполненияСтрокой = ПолучитьПредставлениеВариантаУсловия(Выборка.Ссылка, СтрокаВарианта.Индекс, КартаМаршрута.НомерВерсии);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НоваяСтрокаНабора.ВариантВыполненияСтрокой = "" Тогда
					НоваяСтрокаНабора.ВариантВыполнения = 0;
					НоваяСтрокаНабора.ВариантВыполненияСтрокой = ПолучитьПредставлениеВариантаУсловия(Выборка.Ссылка, 0, КартаМаршрута.НомерВерсии);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТабМаршрут = Неопределено;
			Если НЕ ПреднастройкиЭтапов = Неопределено Тогда // Поищем в переданных настройках.
				МассивСтрок = ПреднастройкиЭтапов.НайтиСтроки(Новый Структура("Имя, Вид",Выборка.Имя,Выборка.Вид));
				Если МассивСтрок.Количество() > 0 Тогда
					СтрокаТабМаршрут = МассивСтрок[0];
					
					НоваяСтрокаНабора.ДлительностьДней						= СтрокаТабМаршрут.ДлительностьДней;
					НоваяСтрокаНабора.ДлительностьЧасов						= СтрокаТабМаршрут.ДлительностьЧасов;
					НоваяСтрокаНабора.ДлительностьМинут						= СтрокаТабМаршрут.ДлительностьМинут;
					НоваяСтрокаНабора.Используется							= СтрокаТабМаршрут.Используется;
					НоваяСтрокаНабора.Задание								= СтрокаТабМаршрут.Задание;
					НоваяСтрокаНабора.Используется							= СтрокаТабМаршрут.Используется;
					НоваяСтрокаНабора.Порядок								= СтрокаТабМаршрут.Порядок;
					НоваяСтрокаНабора.ВариантВыполнения						= СтрокаТабМаршрут.ВариантВыполнения;
					НоваяСтрокаНабора.ВариантВыполненияСтрокой				= СтрокаТабМаршрут.ВариантВыполненияСтрокой;
					Попытка
						НоваяСтрокаНабора.ОтложитьНачалоЭтапаДней				= СтрокаТабМаршрут.ОтложитьНачалоЭтапаДней;
						НоваяСтрокаНабора.ОтложитьНачалоЭтапаЧасов				= СтрокаТабМаршрут.ОтложитьНачалоЭтапаЧасов;
						НоваяСтрокаНабора.ОтложитьНачалоЭтапаМинут				= СтрокаТабМаршрут.ОтложитьНачалоЭтапаМинут;
					Исключение
					КонецПопытки;
					
					Если ЗначениеЗаполнено(СтрокаТабМаршрут.Шаблон) И ОбъектБДСуществует(СтрокаТабМаршрут.Шаблон) Тогда
						НоваяСтрокаНабора.Шаблон						= СтрокаТабМаршрут.Шаблон;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТабМаршрут = Неопределено Тогда
				СтрокаТабМаршрут = ТабМаршрут.Найти(Выборка.Ссылка, "ТочкаМаршрута");
				
				Если НЕ СтрокаТабМаршрут = Неопределено И Выборка.Вид = СтрокаТабМаршрут.ТочкаМаршрута.Вид Тогда
					НоваяСтрокаНабора.ДлительностьДней						= СтрокаТабМаршрут.ДлительностьДней;
					НоваяСтрокаНабора.ДлительностьЧасов						= СтрокаТабМаршрут.ДлительностьЧасов;
					НоваяСтрокаНабора.ДлительностьМинут						= СтрокаТабМаршрут.ДлительностьМинут;
					НоваяСтрокаНабора.Используется							= СтрокаТабМаршрут.Используется;
					НоваяСтрокаНабора.Задание								= СтрокаТабМаршрут.Задание;
					НоваяСтрокаНабора.Шаблон								= СтрокаТабМаршрут.Шаблон;
					НоваяСтрокаНабора.Состояние								= СтрокаТабМаршрут.Состояние;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТабМаршрут = ТабМаршрут.Найти(Выборка.Ссылка, "ТочкаМаршрута");
			
			Если НЕ СтрокаТабМаршрут = Неопределено И Выборка.Вид = СтрокаТабМаршрут.ТочкаМаршрута.Вид Тогда
				НоваяСтрокаНабора.Состояние = СтрокаТабМаршрут.Состояние;
			КонецЕсли;
		КонецЕсли;
		
		ИсполнительСтрокой = "";
		
		Если Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
		ИЛИ Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			
			СтрокаТабМаршрут		= Неопределено;
			СтрокиТабИсполнители	= Неопределено;
			Если НЕ ПреднастройкиИсполнителей = Неопределено Тогда // Поищем в переданных настройках.
				
				СтрокиТабИсполнители = ПреднастройкиИсполнителей.НайтиСтроки(Новый Структура("Имя, Вид",Выборка.Имя,Выборка.Вид));
				
				Если СтрокиТабИсполнители.Количество() > 0 Тогда
					
					Если Выборка.Групповая Тогда
						Для Каждого ЭлементМассива Из СтрокиТабИсполнители Цикл
							
							НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
							НоваяСтрокаИсполнителя.Объект			= КартаМаршрута;
							НоваяСтрокаИсполнителя.ТочкаМаршрута	= Выборка.Ссылка;
							
							Если ЗначениеЗаполнено(ЭлементМассива.Исполнитель) И ОбъектБДСуществует(ЭлементМассива.Исполнитель) Тогда
								НоваяСтрокаИсполнителя.Исполнитель = ЭлементМассива.Исполнитель;
							ИначеЕсли ЗначениеЗаполнено(ЭлементМассива.ТочкаИмя) Тогда
								МассивТочек = ТаблицаТочекКарты.НайтиСтроки(Новый Структура("Имя, Вид",ЭлементМассива.ТочкаИмя,ЭлементМассива.ТочкаВид));
								Если МассивТочек.Количество() > 0 Тогда
									НоваяСтрокаИсполнителя.Исполнитель = МассивТочек[0].Ссылка;
								Иначе
									НоваяСтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
								КонецЕсли;
							Иначе
								НоваяСтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
							КонецЕсли;
							
							Если ТипЗнч(НоваяСтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
								СтрокаИсполнителя = БизнесПроцессыИЗадачиСервер.РольСтрокой(НоваяСтрокаИсполнителя.Исполнитель);
							Иначе
								СтрокаИсполнителя = СокрЛП(Строка(НоваяСтрокаИсполнителя.Исполнитель));
							КонецЕсли;
							ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой ="","","; ") + СтрокаИсполнителя;
							
						КонецЦикла;
					Иначе
						НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
						НоваяСтрокаИсполнителя.Объект			= КартаМаршрута;
						НоваяСтрокаИсполнителя.ТочкаМаршрута	= Выборка.Ссылка;
						
						Если ЗначениеЗаполнено(СтрокиТабИсполнители[0].Исполнитель) И ОбъектБДСуществует(СтрокиТабИсполнители[0].Исполнитель) Тогда
							НоваяСтрокаИсполнителя.Исполнитель = СтрокиТабИсполнители[0].Исполнитель;
						ИначеЕсли ЗначениеЗаполнено(СтрокиТабИсполнители[0].ТочкаИмя) Тогда
							МассивТочек = ТаблицаТочекКарты.НайтиСтроки(Новый Структура("Имя, Вид",СтрокиТабИсполнители[0].ТочкаИмя,СтрокиТабИсполнители[0].ТочкаВид));
							Если МассивТочек.Количество() > 0 Тогда
								НоваяСтрокаИсполнителя.Исполнитель = МассивТочек[0].Ссылка;
							Иначе
								НоваяСтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
							КонецЕсли;
						Иначе
							НоваяСтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
						КонецЕсли;
						
						Если ТипЗнч(НоваяСтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
							СтрокаИсполнителя = БизнесПроцессыИЗадачиСервер.РольСтрокой(НоваяСтрокаИсполнителя.Исполнитель);
						Иначе
							СтрокаИсполнителя = СокрЛП(Строка(НоваяСтрокаИсполнителя.Исполнитель));
						КонецЕсли;
						ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой ="","","; ") + СтрокаИсполнителя;
						
					КонецЕсли;
				Иначе
					СтрокиТабИсполнители	= Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокиТабИсполнители = Неопределено Тогда
				СтрокиТабИсполнители = ТабИсполнители.НайтиСтроки(Новый Структура("ТочкаМаршрута",Выборка.Ссылка));
				
				Если СтрокиТабИсполнители.Количество() > 0 Тогда
					Если Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
						Если Выборка.Групповая Тогда
							Для Каждого ЭлементМассива Из СтрокиТабИсполнители Цикл
								НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнителя,ЭлементМассива);
								Если ТипЗнч(НоваяСтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
									СтрокаИсполнителя = БизнесПроцессыИЗадачиСервер.РольСтрокой(НоваяСтрокаИсполнителя.Исполнитель);
								Иначе
									СтрокаИсполнителя = СокрЛП(Строка(НоваяСтрокаИсполнителя.Исполнитель));
								КонецЕсли;
								ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой ="","","; ") + СтрокаИсполнителя;
							КонецЦикла;
						Иначе
							НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнителя,СтрокиТабИсполнители[0]);
							Если ТипЗнч(НоваяСтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
								СтрокаИсполнителя = БизнесПроцессыИЗадачиСервер.РольСтрокой(НоваяСтрокаИсполнителя.Исполнитель);
							Иначе
								СтрокаИсполнителя = СокрЛП(Строка(НоваяСтрокаИсполнителя.Исполнитель));
							КонецЕсли;
							ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой ="","","; ") + СтрокаИсполнителя;
						КонецЕсли;
					Иначе
						НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
						Для Каждого ЭлементМассива Из СтрокиТабИсполнители Цикл
							Если ТипЗнч(ЭлементМассива.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
								Продолжить;
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнителя,ЭлементМассива);
							Прервать;
						КонецЦикла;
						Если НЕ ЗначениеЗаполнено(НоваяСтрокаИсполнителя.Исполнитель) Тогда
							НоваяСтрокаИсполнителя.Объект			= КартаМаршрута;
							НоваяСтрокаИсполнителя.ТочкаМаршрута	= Выборка.Ссылка;
							НоваяСтрокаИсполнителя.Исполнитель		= Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
					НоваяСтрокаИсполнителя.Объект			= КартаМаршрута;
					НоваяСтрокаИсполнителя.ТочкаМаршрута	= Выборка.Ссылка;
					НоваяСтрокаИсполнителя.Исполнитель		= Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
					ИсполнительСтрокой = ИсполнительСтрокой + СокрЛП(Строка(Перечисления.CRM_ВидыИсполнителейЗадач.Автор));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрокаНабора.ИсполнительСтрокой = ИсполнительСтрокой;
	КонецЦикла;
	НаборМаршрута.Записать();
	НаборИсполнителей.Записать();
	
	// Заполним объекты из преднастроек.
	Если НЕ ПреднастройкиОбъектов = Неопределено Тогда
		времТаб = НаборМаршрута.Выгрузить();
				
		СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
		
		Для Каждого ЭлементСписка ИЗ СписокТочекСтарта Цикл
			НовСтр = времТаб.Добавить();
			НовСтр.ТочкаМаршрута = ЭлементСписка.Значение;
		КонецЦИкла;
		
		Для Каждого СтрокаНабора Из НаборМаршрута Цикл
			МассивОбъектов = ПреднастройкиОбъектов.НайтиСтроки(Новый Структура("Имя, Вид",СтрокаНабора.ТочкаМаршрута.Имя,СтрокаНабора.ТочкаМаршрута.Вид));
			Для Каждого ЭлементМассива Из МассивОбъектов Цикл
				
				Если ОбъектБДСуществует(ЭлементМассива.ВидОбъекта) Тогда
					
					НоваяСтрокаОбъекта = НаборОбъектов.Добавить();
					НоваяСтрокаОбъекта.Объект			= КартаМаршрута;
					НоваяСтрокаОбъекта.ТочкаМаршрута	= СтрокаНабора.ТочкаМаршрута;
					НоваяСтрокаОбъекта.ВидОбъекта		= ЭлементМассива.ВидОбъекта;
					НоваяСтрокаОбъекта.Обязательный		= ЭлементМассива.Обязательный;
					
					Для Каждого СтрокаВремТаб Из времТаб Цикл
						Если СтрокаВремТаб.ТочкаМаршрута.Имя = ЭлементМассива.ЭтапОснованияИмя И СтрокаВремТаб.ТочкаМаршрута.Вид = ЭлементМассива.ЭтапОснованияВид Тогда
							НоваяСтрокаОбъекта.ЭтапОснования		= СтрокаВремТаб.ТочкаМаршрута;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Если НаборОбъектов.Количество() > 0 Тогда
			НаборОбъектов.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьМаршрутИИсполнителейКартыМаршрута()

// Процедура заполняет настройки этапов бизнес-процесса при записи бизнес-процессов.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс
//	Отказ			- Булево				- Флаг отмены.
//
Процедура ЗаполнитьНастройкиЭтаповБизнесПроцесса(БизнесПроцесс, Отказ, КорректироватьДлительностьВедущего, ПараметрыПериодическогоСтарта = Неопределено) Экспорт
	
	Если ПараметрыПериодическогоСтарта = Неопределено Тогда
	
		НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
		
		Если ЗначениеЗаполнено(БизнесПроцесс.Проект)
		И (БизнесПроцесс.Проект.CRM_КартаМаршрута = БизнесПроцесс.КартаМаршрута) Тогда
			НаборМаршрут.Отбор.Объект.Установить(БизнесПроцесс.Проект);
			НаборМаршрут.Прочитать();
			Если НаборМаршрут.Количество()=0 Тогда
				НаборМаршрут.Отбор.Сбросить();
				НаборМаршрут.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
				НаборМаршрут.Прочитать();
			КонецЕсли;
		Иначе
			НаборМаршрут.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
			НаборМаршрут.Прочитать();
		КонецЕсли;
		
		Отказ = (НаборМаршрут.Количество() = 0);
		Если НЕ Отказ Тогда
			ТабНаборМаршрут = НаборМаршрут.Выгрузить();
			ТабНаборМаршрут.Колонки.Удалить("Объект");
			ТабНаборМаршрут.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
			ТабНаборМаршрут.Колонки.Добавить("ДатаНачала");
			ТабНаборМаршрут.Колонки.Добавить("ДатаВыполнения");
			ТабНаборМаршрут.Колонки.Добавить("ДатаНачалаВходящая");
			ТабНаборМаршрут.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
			
			Если ЗначениеЗаполнено(БизнесПроцесс.ДатаСтарта) И БизнесПроцесс.ДатаСтарта > ТекущаяДатаСеанса() Тогда
				НачПериода = БизнесПроцесс.ДатаСтарта;
			Иначе
				НачПериода = ТекущаяДатаСеанса();
			КонецЕсли;
			//НачПериода	= ?(НачалоДня(БизнесПроцесс.Дата) = НачалоДня(БизнесПроцесс.ДатаСтарта), БизнесПроцесс.Дата, БизнесПроцесс.ДатаСтарта);
			РассчитатьДатыВыполненияЭтаповПоМаршруту(БизнесПроцесс.НомерВерсииКартыМаршрута, БизнесПроцесс.Организация, БизнесПроцесс.ТочкаСтарта, ТабНаборМаршрут, НачПериода);
			
			НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборМаршрут.Отбор.Объект.Установить(БизнесПроцесс);
			НаборМаршрут.Прочитать();
			НаборМаршрут.Загрузить(ТабНаборМаршрут);
			НаборМаршрут.Записать();
			
			Если ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) И КорректироватьДлительностьВедущего Тогда
				
				ТабНаборМаршрут.Сортировать("ДатаВыполнения УБЫВ");
				
				ВедущийБП		= БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс;
				ВедущаяТочка	= БизнесПроцесс.ВедущаяЗадача.CRM_ТочкаМаршрута;
				
				НаборВедущего = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
				НаборВедущего.Отбор.Объект.Установить(ВедущийБП);
				НаборВедущего.Прочитать();
				
				ТабНаборВедущего			= НаборВедущего.Выгрузить();
				СтрокаТаб					= ТабНаборВедущего.Найти(ВедущаяТочка,"ТочкаМаршрута");
				СтрокаТаб.ДатаВыполнения	= ТабНаборМаршрут[0].ДатаВыполнения;
				
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ВедущаяТочка, ВедущийБП.НомерВерсииКартыМаршрута, СтрокаТаб.ВариантВыполнения);
				CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(ВедущийБП.НомерВерсииКартыМаршрута, ВедущийБП.Организация, СтруктураТочки.ИсходящаяТочка, ТабНаборВедущего, СтрокаТаб.ДатаВыполнения, СтрокаТаб.ВариантВыполнения);
				
				НаборВедущего.Загрузить(ТабНаборВедущего);
				НаборВедущего.Записать();
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Отсутствуют настройки этапов карты маршрута бизнес-процесса!'");		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТабНаборМаршрут = ПараметрыПериодическогоСтарта.НастройкиЭтаповБизнесПроцесса;
		ТабНаборМаршрут.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
		
		НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборМаршрут.Отбор.Объект.Установить(БизнесПроцесс);
		НаборМаршрут.Прочитать();
		НаборМаршрут.Загрузить(ТабНаборМаршрут);
		НаборМаршрут.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиЭтаповБизнесПроцесса()

// Процедура заполняет настройки объектов по этапам бизнес-процесса при записи бизнес-процессов.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс
//	Отказ			- Булево				- Флаг отмены.
//
Процедура ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса(БизнесПроцесс, Отказ) Экспорт
	НаборОбъекты = РегистрыСведений.CRM_ОбъектыЭтапов.СоздатьНаборЗаписей();
	НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
	НаборОбъекты.Прочитать();
	Если НаборОбъекты.Количество() > 0 Тогда
		ТабНаборОбъекты = НаборОбъекты.Выгрузить();
		ТабНаборОбъекты.Колонки.Удалить("Объект");
		ТабНаборОбъекты.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
		ТабНаборОбъекты.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
		НаборОбъекты = РегистрыСведений.CRM_ОбъектыЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс);
		НаборОбъекты.Прочитать();
		НаборОбъекты.Загрузить(ТабНаборОбъекты);
		НаборОбъекты.Записать();
	КонецЕсли;
КонецПроцедуры // ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса()

// Процедура заполняет настройки объектов по этапам бизнес-процесса при записи бизнес-процессов.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс
//	Отказ			- Булево				- Флаг отмены.
//
Процедура ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса_Новая(БизнесПроцесс, Отказ) Экспорт
	
	НаборОбъекты = РегистрыСведений.bpmУсловияЭтапов.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(БизнесПроцесс.Проект)
	И (БизнесПроцесс.Проект.CRM_КартаМаршрута = БизнесПроцесс.КартаМаршрута) Тогда
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.Проект);
		НаборОбъекты.Прочитать();
		Если НаборОбъекты.Количество() = 0 Тогда
			НаборОбъекты.Отбор.Сбросить();
			НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
			НаборОбъекты.Прочитать();
		КонецЕсли;
	Иначе
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
		НаборОбъекты.Прочитать();
	КонецЕсли;
	
	Если НаборОбъекты.Количество() > 0 Тогда
		ТабНаборОбъекты = НаборОбъекты.Выгрузить();
		ТабНаборОбъекты.Колонки.Удалить("Объект");
		ТабНаборОбъекты.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
		ТабНаборОбъекты.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
		НаборОбъекты = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс);
		НаборОбъекты.Прочитать();
		НаборОбъекты.Загрузить(ТабНаборОбъекты);
		НаборОбъекты.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса()

Процедура ЗаполнитьУсловияМаршрутизации(БизнесПроцесс, Отказ) Экспорт
	
	НаборОбъекты = РегистрыСведений.bpmУсловияМаршрутизации.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(БизнесПроцесс.Проект)
	И (БизнесПроцесс.Проект.CRM_КартаМаршрута = БизнесПроцесс.КартаМаршрута) Тогда
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.Проект);
		НаборОбъекты.Прочитать();
		Если НаборОбъекты.Количество() = 0 Тогда
			НаборОбъекты.Отбор.Сбросить();
			НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
			НаборОбъекты.Прочитать();
		КонецЕсли;
	Иначе
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
		НаборОбъекты.Прочитать();
	КонецЕсли;
	
	Если НаборОбъекты.Количество() > 0 Тогда
		ТабНаборОбъекты = НаборОбъекты.Выгрузить();
		ТабНаборОбъекты.Колонки.Удалить("Объект");
		ТабНаборОбъекты.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
		ТабНаборОбъекты.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
		НаборОбъекты = РегистрыСведений.bpmУсловияМаршрутизацииПоБизнесПроцессам.СоздатьНаборЗаписей();
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс);
		НаборОбъекты.Прочитать();
		НаборОбъекты.Загрузить(ТабНаборОбъекты);
		НаборОбъекты.Записать();
	КонецЕсли;
	
КонецПроцедуры

// +CRM не переносить в объединенные решения
Процедура ПроверитьСоответсвиеУровнейДоступаИсполнителейБизнесПроцессаУровнямПартнера(БизнесПроцесс, МассивИсполнителй) Экспорт
	
	Если ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
		Для Каждого Исполнитель ИЗ МассивИсполнителй Цикл
			Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Если ЗначениеЗаполнено(Исполнитель.CRM_УровеньДоступа)
					И БизнесПроцесс.Партнер.CRM_УровниДоступа.Найти(Исполнитель.CRM_УровеньДоступа,"УровеньДоступа") = Неопределено И БизнесПроцесс.Партнер.CRM_УровниДоступа.Количество() > 0 Тогда
					ПартнерОбъект = БизнесПроцесс.Партнер.ПолучитьОбъект();
					НоваяСтрокаУровня = ПартнерОбъект.CRM_УровниДоступа.Добавить();
					НоваяСтрокаУровня.УровеньДоступа = Исполнитель.CRM_УровеньДоступа;
					ПартнерОбъект.Записать();
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Исполнитель) = Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач") Тогда
				текИсполнитель = Неопределено;
				
				Если Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор Тогда
					текИсполнитель = БизнесПроцесс.Автор;
				ИначеЕсли Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Ответственный Тогда
					текИсполнитель = БизнесПроцесс.Ответственный;
				КонецЕсли;
				
				Если НЕ текИсполнитель = Неопределено Тогда
					Если ЗначениеЗаполнено(текИсполнитель.CRM_УровеньДоступа)
						И БизнесПроцесс.Партнер.CRM_УровниДоступа.Найти(текИсполнитель.CRM_УровеньДоступа,"УровеньДоступа") = Неопределено И БизнесПроцесс.Партнер.CRM_УровниДоступа.Количество() > 0 Тогда
						ПартнерОбъект = БизнесПроцесс.Партнер.ПолучитьОбъект();
						НоваяСтрокаУровня = ПартнерОбъект.CRM_УровниДоступа.Добавить();
						НоваяСтрокаУровня.УровеньДоступа = текИсполнитель.CRM_УровеньДоступа;
						ПартнерОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("РольИсполнителя",Исполнитель);
				Запрос.Текст = "ВЫБРАТЬ
				|	ИсполнителиЗадач.Исполнитель
				|ИЗ
				|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
				|ГДЕ
				|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
				|	И НЕ ИсполнителиЗадач.Исполнитель.CRM_УровеньДоступа = ЗНАЧЕНИЕ(Справочник.CRM_УровниДоступа.ПустаяСсылка)";
				
				Выборка = Запрос.Выполнить().Выбрать();
				ПартнерОбъект = БизнесПроцесс.Партнер.ПолучитьОбъект();
				ЕстьИзменения = Ложь;
				Пока Выборка.Следующий() Цикл
					Если ПартнерОбъект.CRM_УровниДоступа.Найти(Выборка.Исполнитель.CRM_УровеньДоступа,"УровеньДоступа") = Неопределено И ПартнерОбъект.CRM_УровниДоступа.Количество() > 0 Тогда
						ЕстьИзменения = Истина;
						НоваяСтрокаУровня = ПартнерОбъект.CRM_УровниДоступа.Добавить();
						НоваяСтрокаУровня.УровеньДоступа = Выборка.Исполнитель.CRM_УровеньДоступа;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьИзменения Тогда
					ПартнерОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
// -CRM не переносить в объединенные решения

// Процедура заполняет исполнителей этапов бизнес-процесса при записи бизнес-процессов.
//
// Параметры:
//	БизнесПроцесс		- БизнесПроцессСсылка	- Бизнес-процесс
//	Отказ				- Булево				- Флаг отмены.
//	ТаблицаИсполнителей	- ТаблицаЗначений		- Таблица исполнителей.
//
Процедура ЗаполнитьИсполнителейЭтаповБизнесПроцесса(БизнесПроцесс, Отказ, ТаблицаИсполнителей = Неопределено) Экспорт
	 // Таблица ТаблицаИсполнителей передается из формы бизнес-процесса.
	 // Если таблица не передана, значит БП вложенный или стартован программно.
	Если ТаблицаИсполнителей = Неопределено Тогда 
		// Для программно стартованных БП берем настройки карты.
		НаборИсполнители = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
		
		Если ЗначениеЗаполнено(БизнесПроцесс.Проект)
		И (БизнесПроцесс.Проект.CRM_КартаМаршрута = БизнесПроцесс.КартаМаршрута) Тогда
			НаборИсполнители.Отбор.Объект.Установить(БизнесПроцесс.Проект);
			НаборИсполнители.Прочитать();
			Если НаборИсполнители.Количество() = 0 Тогда
				НаборИсполнители.Отбор.Сбросить();
				НаборИсполнители.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
				НаборИсполнители.Прочитать();
			КонецЕсли;
		Иначе
			НаборИсполнители.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
			НаборИсполнители.Прочитать();
		КонецЕсли;
		
		ТабНаборИсполнители = НаборИсполнители.Выгрузить();
		ТабНаборИсполнители.Колонки.Удалить("Объект");
		ТабНаборИсполнители.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
		ТабНаборИсполнители.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
	Иначе
		НаборИсполнители = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		ТабНаборИсполнители = НаборИсполнители.ВыгрузитьКолонки();
		Для Каждого СтрокаТаб Из ТаблицаИсполнителей Цикл
			Если ТипЗнч(СтрокаТаб.Исполнитель) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из СтрокаТаб.Исполнитель Цикл
					НоваяСтрокаТаб = ТабНаборИсполнители.Добавить();
					НоваяСтрокаТаб.Объект			= БизнесПроцесс;
					НоваяСтрокаТаб.ТочкаМаршрута	= СтрокаТаб.ТочкаМаршрута;
					НоваяСтрокаТаб.Исполнитель		= ЭлементСписка.Значение;
					НоваяСтрокаТаб.Все				= ЭлементСписка.Пометка;
				КонецЦикла;
			Иначе
				НоваяСтрокаТаб = ТабНаборИсполнители.Добавить();
				НоваяСтрокаТаб.Объект			= БизнесПроцесс;
				НоваяСтрокаТаб.ТочкаМаршрута	= СтрокаТаб.ТочкаМаршрута;
				НоваяСтрокаТаб.Исполнитель		= СтрокаТаб.Исполнитель;
			КонецЕсли;
			Если БизнесПроцесс.КартаМаршрута.УказыватьСрокВыполненияЭтапов И ЗначениеЗаполнено(СтрокаТаб.ДатаВыполнения) Тогда
				ЗаписьЭтапа = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьМенеджерЗаписи();
				ЗаписьЭтапа.Объект			= БизнесПроцесс;
				ЗаписьЭтапа.ТочкаМаршрута	= СтрокаТаб.ТочкаМаршрута;
				ЗаписьЭтапа.Прочитать();
				Если ЗаписьЭтапа.Выбран() Тогда
					ЗаписьЭтапа.ДатаВыполнения = СтрокаТаб.ДатаВыполнения;
					ЗаписьЭтапа.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Отказ = (ТабНаборИсполнители.Количество() = 0);
	Если НЕ Отказ Тогда
		НаборИсполнители = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборИсполнители.Отбор.Объект.Установить(БизнесПроцесс);
		НаборИсполнители.Прочитать();
		НаборИсполнители.Загрузить(ТабНаборИсполнители);
		
		// ++ Харченко Д.И. №  - 31.10.2018 / Добавляем должностные позиции по ветке
		ДобавитьИсполнителейПоДолжностнымПозициям(БизнесПроцесс, НаборИсполнители);
		// -- Харченко Д.И. №  - 31.10.2018
		
		НаборИсполнители.Записать();
		// +CRM не переносить в объединенные решения
		ПроверитьСоответсвиеУровнейДоступаИсполнителейБизнесПроцессаУровнямПартнера(БизнесПроцесс, НаборИсполнители.Выгрузить().ВыгрузитьКолонку("Исполнитель"));
		// -CRM не переносить в объединенные решения
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствуют исполнители этапов карты маршрута бизнес-процесса!'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры // ЗаполнитьИсполнителейЭтаповБизнесПроцесса()	


// ++ Харченко Д.И. №  - 31.10.2018 / Добавляем должностные позиции по ветке

Процедура ЗаполнитьМассивРодителейДолжностныхПозиций(ИсходнаяПозиция, СписокРодителей)
	
	Если НЕ ЗначениеЗаполнено(ИсходнаяПозиция) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРодителей.Добавить(ИсходнаяПозиция);
	
	ЗаполнитьМассивРодителейДолжностныхПозиций(ИсходнаяПозиция.Родитель, СписокРодителей);
	
КонецПроцедуры

Процедура ДобавитьИсполнителейПоДолжностнымПозициям(БизнесПроцесс, НаборНаборCRM_ИсполнителиЭтаповБизнесПроцессов)
	
	Если НЕ ЗначениеЗаполнено(БизнесПроцесс.вогДолжностнаяПозиция) Тогда
		Возврат;	
	КонецЕсли;
	
	СписокРодителей = Новый Массив;
	
	ЗаполнитьМассивРодителейДолжностныхПозиций(БизнесПроцесс.вогДолжностнаяПозиция.Родитель, СписокРодителей);
	
	Если НЕ СписокРодителей.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТекНабор = НаборНаборCRM_ИсполнителиЭтаповБизнесПроцессов.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.Объект КАК Объект,
		|	ТЗ.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ТЗ.Исполнитель КАК Исполнитель
		|ПОМЕСТИТЬ Врем
		|ИЗ
		|	&ТЗ КАК ТЗ
		|ГДЕ
		|	ТЗ.Исполнитель ССЫЛКА Справочник.CRM_ДолжностныеПозиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_ДолжностныеПозиции.Ссылка КАК Исполнитель,
		|	Врем.Объект КАК Объект,
		|	Врем.ТочкаМаршрута КАК ТочкаМаршрута,
		|	Врем.Исполнитель КАК ИсходныйИсполнитель
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Врем КАК Врем
		|		ПО CRM_ДолжностныеПозиции.ЭталоннаяПозиция = Врем.Исполнитель
		|ГДЕ
		|	НЕ CRM_ДолжностныеПозиции.Ссылка В
		|				(ВЫБРАТЬ
		|					Врем.Исполнитель КАК Исполнитель
		|				ИЗ
		|					Врем КАК Врем)
		|	И CRM_ДолжностныеПозиции.Ссылка В (&СписокРодителей)";
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаТекНабор);
	Запрос.УстановитьПараметр("СписокРодителей", СписокРодителей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТекНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		
		СтруктураПоиска = Новый Структура("Исполнитель, Объект, ТочкаМаршрута", ВыборкаДетальныеЗаписи.ИсходныйИсполнитель, ВыборкаДетальныеЗаписи.Объект, ВыборкаДетальныеЗаписи.ТочкаМаршрута,);
		
		ПоискСтрок = ТаблицаТекНабор.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Стр Из ПоискСтрок Цикл 
			
			ТаблицаТекНабор.Удалить(Стр);
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборНаборCRM_ИсполнителиЭтаповБизнесПроцессов.Загрузить(ТаблицаТекНабор);
		
КонецПроцедуры

// -- Харченко Д.И. №  - 31.10.2018

// Функция возвращает список значений с доступными вариантами точки условия или выбора варианта
// в качестве точки маршрута передается входящая точка действия(вложенного бизнес-процесса).
//
// Параметры:
//	Процесс				- СправочникСсылка	- Процесс
//	ТочкаМаршрута		- СправочникСсылка	- Точка маршрута.
//	Маршрут				- СправочникСсылка	- Маршрут
//
// Возвращаемое значение:
// Неопределено или СписокЗначений	- Список значений с доступными вариантами точки условия или выбора варианта.
//
Функция СформироватьСписокДоступныхВариантовТочкиМаршрута(Процесс, ТочкаМаршрута, Маршрут) Экспорт
	Если ТипЗнч(Процесс) = Тип("СправочникСсылка.Проекты") Тогда
		НомерВерсии = Процесс.CRM_КартаМаршрута.НомерВерсии;
	ИначеЕсли ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		НомерВерсии = Процесс.НомерВерсииКартыМаршрута;
	ИначеЕсли ТипЗнч(Процесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		НомерВерсии = Процесс.НомерВерсии;
	КонецЕсли;
	// Получим точку выбора варианта(условия).
	СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута, НомерВерсии);
	Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
		ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
		СписокВариантов = Новый СписокЗначений;
		// Получим исходящие из варианта(условия) точки маршрута, вместе с ними получим и информацию по вариантам.
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка, НомерВерсии);
		// Обойдем все варианты и проверим на зацикливание (в данном случае когда маршрут
		// по данному варианту приводит снова к этой же точке выбора варианта(условия)).
		Для Каждого СтруктураВарианта Из МассивИсходящихТочек Цикл
			МассивТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Процесс, ТочкаМаршрута,, Маршрут, СтруктураВарианта.Индекс);
			Для Каждого СтруктураИсхТочкиВарианта Из МассивТочек Цикл
				Если СтруктураИсхТочкиВарианта.ИсходящаяТочка = ТочкаМаршрута Тогда
					СтрокаМаршрута = Маршрут.Найти(СтруктураИсхТочкиВарианта.ИсходящаяТочка,"ТочкаМаршрута");
					Если СтрокаМаршрута.Используется Тогда
						СписокВариантов.Добавить(СтруктураВарианта.Индекс, СтруктураВарианта.ВариантСиноним);
						Прервать;
					КонецЕсли;
				Иначе
					СписокВариантов.Добавить(СтруктураВарианта.Индекс, СтруктураВарианта.ВариантСиноним);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			СписокВариантов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		КонецЕсли;
		Возврат СписокВариантов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // СформироватьСписокДоступныхВариантовТочкиМаршрута()

// Функция возвращает структуру с вариантами выполнения задачи.
//
// Параметры:
//	Задача				- ЗадачаСсылка	- Задача.
//
// Возвращаемое значение:
// Структура	- Структура с вариантами выполнения задачи.
//
Функция ПолучитьВариантыВыполненияЗадачи(Задача) Экспорт
	
	ПредставлениеТочкиЗаголовок	= "";
	
	НаборМаршрута = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборМаршрута.Отбор.Объект.Установить(Задача.БизнесПроцесс);
	НаборМаршрута.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
	НаборМаршрута.Прочитать();
	ТабНабора = НаборМаршрута.Выгрузить();
	СтрокаМаршрута = ТабНабора.Найти(Задача.CRM_ТочкаМаршрута,"ТочкаМаршрута");
	СписокВариантов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс) Тогда
		СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Задача.CRM_ТочкаМаршрута,
		Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, 0);
		Если НЕ (СтруктураТочки = Неопределено) И (СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие 
			ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта) Тогда
			ПредставлениеТочкиЗаголовок = СтруктураТочки.ИсходящаяТочка.Наименование;
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка,
			Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
				СписокВариантов.Добавить(ЗначениеМассива.Индекс, ЗначениеМассива.ВариантСиноним,(СтрокаМаршрута.ВариантВыполнения = ЗначениеМассива.Индекс));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Новый Структура("СписокВариантов, ПредставлениеТочкиЗаголовок",СписокВариантов,ПредставлениеТочкиЗаголовок);
	
КонецФункции // ПолучитьВариантыВыполненияЗадачи()

// Функция проверяет наличие у точек задачи исполнителей.
//
// Параметры:
//	Задача	- ЗадачаСсылка	- Задача.
//
// Возвращаемое значение:
// СписокЗначений	- Список точек маршрута без исполнителей.
//
Функция ПроверитьНаличиеСледующегоИсполнителя(Задача) Экспорт
	СписокТочекМаршрута = Новый СписокЗначений;
	МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,Задача.CRM_ВариантВыполнения);
	Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
		регИсполнителиТекущейТочки = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		регИсполнителиТекущейТочки.Отбор.Объект.Установить(Задача.БизнесПроцесс);
		регИсполнителиТекущейТочки.Отбор.ТочкаМаршрута.Установить(ЗначениеМассива.ИсходящаяТочка);
		регИсполнителиТекущейТочки.Прочитать();
		Для Каждого СтрокаИсполнителя Из регИсполнителиТекущейТочки Цикл
			СтруктураИсполнителя = CRM_БизнесПроцессыСервер.ПолучитьАдресациюЗадачи(СтрокаИсполнителя,
				Задача.БизнесПроцесс, ЗначениеМассива.ИсходящаяТочка, Задача);
			Если СтруктураИсполнителя.Исполнитель = Неопределено Тогда
				СписокТочекМаршрута.Добавить(ЗначениеМассива.ИсходящаяТочка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СписокТочекМаршрута;
КонецФункции // ПроверитьНаличиеСледующегоИсполнителя()

// Функция проверяет наличие исполнителя у переданных этапов.
//
// Параметры:
//	МассивЭтапов	- Массив 
//
// Возвращаемое значение:
// СписокЗначений	- Список точек маршрута без исполнителей.
//
Функция ПроверитьНаличиеСледующегоИсполнителяУЭтапов(БизнесПроцесс, МассивЭтапов) Экспорт
	СписокТочекМаршрута = Новый СписокЗначений;
	
	Для Каждого ЗначениеМассива Из МассивЭтапов Цикл
		регИсполнителиТекущейТочки = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		регИсполнителиТекущейТочки.Отбор.Объект.Установить(БизнесПроцесс);
		регИсполнителиТекущейТочки.Отбор.ТочкаМаршрута.Установить(ЗначениеМассива);
		регИсполнителиТекущейТочки.Прочитать();
		Для Каждого СтрокаИсполнителя Из регИсполнителиТекущейТочки Цикл
			СтруктураИсполнителя = CRM_БизнесПроцессыСервер.ПолучитьАдресациюЗадачи(СтрокаИсполнителя, БизнесПроцесс, ЗначениеМассива);
			Если СтруктураИсполнителя.Исполнитель = Неопределено Тогда
				СписокТочекМаршрута.Добавить(ЗначениеМассива);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СписокТочекМаршрута;
	
КонецФункции // ПроверитьНаличиеСледующегоИсполнителя()

// Функция возвращает структуру типов объектов, которые должны быть созданы/выбраны при выполнении задачи.
//
// Параметры:
//	Задача	- ЗадачаСсылка	- Задача.
//
// Возвращаемое значение:
// Структура	- Структура типов объектов.
//
Функция ПолучитьСтруктуруТипов(Задача) Экспорт
	СписокОбязательныхТипов	= Новый СписокЗначений;
	ТаблицаТипов			= Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("ВидОбъекта");
	ТаблицаТипов.Колонки.Добавить("ЭтапОснования");
	ТаблицаТипов.Колонки.Добавить("Обязательный");
	НаборОбъектов = РегистрыСведений.CRM_ОбъектыЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборОбъектов.Отбор.Объект.Установить(Задача.БизнесПроцесс);
	НаборОбъектов.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
	НаборОбъектов.Прочитать();
	Для Каждого СтрокаНабора Из НаборОбъектов Цикл
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.ВидОбъекта		= СтрокаНабора.ВидОбъекта;
		НоваяСтрока.ЭтапОснования	= СтрокаНабора.ЭтапОснования;
		НоваяСтрока.Обязательный	= СтрокаНабора.Обязательный;
		МассивТипов = СтрокаНабора.ВидОбъекта.ТипЗначения.Типы();
		Если СтрокаНабора.Обязательный Тогда
			СписокОбязательныхТипов.Добавить(МассивТипов[0]);
		КонецЕсли;
	КонецЦикла;
	Возврат Новый Структура("ТаблицаТипов,СписокОбязательныхТипов",ТаблицаТипов,СписокОбязательныхТипов);
КонецФункции // ПолучитьСтруктуруТипов()

// Функция возвращает структуру типов объектов, которые должны быть созданы/выбраны при выполнении задачи.
//
// Параметры:
//	Задача	- ЗадачаСсылка	- Задача.
//
// Возвращаемое значение:
// Структура	- Структура типов объектов.
//
Функция ПолучитьСтруктуруТипов_Новая(Задача) Экспорт
	
	НаборОбъектов = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
	НаборОбъектов.Отбор.Объект.Установить(Задача.БизнесПроцесс);
	НаборОбъектов.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
	НаборОбъектов.Прочитать();
	
	СписокОбязательныхТипов	= Новый СписокЗначений;
	ТаблицаТипов			= Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("ВидОбъекта");
	ТаблицаТипов.Колонки.Добавить("ЭтапОснования");
	ТаблицаТипов.Колонки.Добавить("Обязательный");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Задача.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута",Задача.CRM_ТочкаМаршрута);
	Запрос.УстановитьПараметр("ТипДействия",Перечисления.bpmТипыДействий.ВводДокумента);
	Запрос.Текст = "ВЫБРАТЬ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Идентификатор,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Событие,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ТипДействия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Проверка,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Исполнителю,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Ответственному,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Клиенту,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ВыражениеУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ПредставлениеОтбора,
	|	bpmУсловияЭтаповПоБизнесПроцессам.СпособЗаданияУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Наименование,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Цель,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаКомбинацииУсловий,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаУсловия
	|ИЗ
	|	РегистрСведений.bpmУсловияЭтаповПоБизнесПроцессам КАК bpmУсловияЭтаповПоБизнесПроцессам
	|ГДЕ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект = &Объект
	|	И bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута
	|	И bpmУсловияЭтаповПоБизнесПроцессам.ТипДействия = &ТипДействия
	|	И НЕ bpmУсловияЭтаповПоБизнесПроцессам.Цель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.ВидОбъекта		= Выборка.Цель;
		НоваяСтрока.ЭтапОснования	= Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка();
		НоваяСтрока.Обязательный	= Выборка.Проверка;
		МассивТипов = Выборка.Цель.ТипЗначения.Типы();
		Если Выборка.Проверка Тогда
			СписокОбязательныхТипов.Добавить(МассивТипов[0]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаТипов,СписокОбязательныхТипов",ТаблицаТипов,СписокОбязательныхТипов);
	
КонецФункции // ПолучитьСтруктуруТипов()

// Функция проверяет наличие объектов по бизнес-процессу.
//
// Параметры:
//	Задача					- ЗадачаСсылка		- Задача
//	СписокОбязательныхТипов	- СписокЗначений	- Список обязательных типов.
//
// Возвращаемое значение:
// Массив	- Массив ошибок
//
Функция ПроверкаНаличияОбъектовПоБизнесПроцессу(Задача, СписокОбязательныхТипов = Неопределено,ЭтоПроцессОбъекта = Ложь)Экспорт
	Если СписокОбязательныхТипов = Неопределено Тогда
		СтруктураТипов = ПолучитьСтруктуруТипов_Новая(Задача);
		СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
	КонецЕсли;
	РегНабор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	РегНабор.Отбор.БизнесПроцесс.Установить(Задача.БизнесПроцесс);
	//РегНабор.Отбор.Задача.Установить(Задача.Ссылка);
	РегНабор.Прочитать();
	МассивОшибок = Новый Массив;
	Для Каждого ЭлементСписка Из СписокОбязательныхТипов Цикл
		ЕстьОбъект = Ложь;
		Для Каждого СтрокаНабора Из РегНабор Цикл
			Если ТипЗнч(СтрокаНабора.Объект) = ЭлементСписка.Значение Тогда
				ЕстьОбъект = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьОбъект Тогда
			МетаДокумента = Метаданные.НайтиПоТипу(ЭлементСписка.Значение);
			Синоним		= МетаДокумента.Синоним;
			ПолноеИмя	= МетаДокумента.ПолноеИмя();
			Если НЕ ЭтоПроцессОбъекта Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка! Для корректного выполнения задачи требуется добавить/выбрать документ %Синоним%'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Перед сменой состояния требуется ввести документ %Синоним%'");
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Синоним%", Синоним);
			МассивОшибок.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивОшибок;
КонецФункции // ПроверкаНаличияОбъектовПоБизнесПроцессу()

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за расчет сроков исполнения этапов.

//
//
Функция РассчитатьДатыВыполненияЭтаповПоМаршруту(НомерВерсииКарты, Организация, ТочкаМаршрута,
													ТаблицаМаршрута, ЗНАЧ НачалоПериода, Вариант = Неопределено,
													КалендарьЗаполнен = Истина, ТаблицаРассчитанныхТочек = Неопределено, КонтрольнаяТочка = Неопределено, ОтложитьСледующийЭтап = Неопределено) Экспорт
	
	Перем ВариантВыполнения;
	
	НачПериода = НачалоПериода;
	
	Если ТаблицаРассчитанныхТочек = Неопределено Тогда
		ТаблицаРассчитанныхТочек = Новый ТаблицаЗначений;
		ТаблицаРассчитанныхТочек.Колонки.Добавить("ТочкаМаршрута");
		
		ТаблицаВариантовВыполнения = Новый ТаблицаЗначений;
		ТаблицаВариантовВыполнения.Колонки.Добавить("Ветка");
		ТаблицаВариантовВыполнения.Колонки.Добавить("ОбсчитанныйВариант");
		
	КонецЕсли;
	
	Если НЕ Вариант = Неопределено Тогда
		ВариантВыполнения = Вариант;
	КонецЕсли;
	
	ТекущаяТочка		= ТочкаМаршрута;
	
	Пока ТекущаяТочка.Вид <> Перечисления.CRM_ВидыТочекМаршрута.Завершение Цикл
		
		ПроверкаНаЗацикливание = ТаблицаРассчитанныхТочек.Найти(ТекущаяТочка,"ТочкаМаршрута");
		Если ПроверкаНаЗацикливание = Неопределено Тогда
			НоваяСтрока = ТаблицаРассчитанныхТочек.Добавить();
			НоваяСтрока.ТочкаМаршрута = ТекущаяТочка;
		Иначе
			Прервать;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
			
			ВариантВыполнения = 0;
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
			
			СтрокаЭтапа			= ТаблицаМаршрута.Найти(ТекущаяТочка,"ТочкаМаршрута");
			ВариантВыполнения	= СтрокаЭтапа.ВариантВыполнения;
			
			СтруктураДлительностиНачалоПериода = Новый Структура();
			СтруктураДлительностиНачалоПериода.Вставить("Дней"	,СтрокаЭтапа.ОтложитьНачалоЭтапаДней);
			СтруктураДлительностиНачалоПериода.Вставить("Часов"	,СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов);
			СтруктураДлительностиНачалоПериода.Вставить("Минут"	,СтрокаЭтапа.ОтложитьНачалоЭтапаМинут);
			
			СтруктураДлительностиКонПериода = Новый Структура();
			СтруктураДлительностиКонПериода.Вставить("Дней"	,СтрокаЭтапа.ДлительностьДней);
			СтруктураДлительностиКонПериода.Вставить("Часов",СтрокаЭтапа.ДлительностьЧасов);
			СтруктураДлительностиКонПериода.Вставить("Минут",СтрокаЭтапа.ДлительностьМинут);
			
			Если НЕ КонтрольнаяТочка = Неопределено Тогда
				УжеПрошли = ТаблицаРассчитанныхТочек.Найти(КонтрольнаяТочка,"ТочкаМаршрута");
				
				Если КонтрольнаяТочка = ТекущаяТочка ИЛИ НЕ УжеПрошли = Неопределено Тогда
					//СтрокаЭтапа.ДатаНачала	= НачПериода;
					СтрокаЭтапа.ДатаНачалаВходящая = НачПериода;
					Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
						СтрокаЭтапа.ДатаНачала	= ОтложитьСледующийЭтап;
						ОтложитьСледующийЭтап = Неопределено;
					Иначе
						СтрокаЭтапа.ДатаНачала	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,СтруктураДлительностиНачалоПериода,,Организация,,КалендарьЗаполнен);
					КонецЕсли;
					КонПериода				= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаЭтапа.ДатаНачала,СтруктураДлительностиКонПериода,,Организация,,КалендарьЗаполнен);
				Иначе
					СтрокаЭтапа.ДатаНачала	= НачалоПериода;
					КонПериода				= НачалоПериода;
				КонецЕсли;
			Иначе
				//СтрокаЭтапа.ДатаНачала		= НачПериода;
				СтрокаЭтапа.ДатаНачалаВходящая = НачПериода;
				Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
					СтрокаЭтапа.ДатаНачала	= ОтложитьСледующийЭтап;
					ОтложитьСледующийЭтап = Неопределено;
				Иначе
					СтрокаЭтапа.ДатаНачала	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,СтруктураДлительностиНачалоПериода,,Организация,,КалендарьЗаполнен);
				КонецЕсли;
				КонПериода				= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаЭтапа.ДатаНачала,СтруктураДлительностиКонПериода,,Организация,,КалендарьЗаполнен);
			КонецЕсли;
			
			//СтрокаЭтапа.ДатаНачала		= НачПериода;
			СтрокаЭтапа.ДатаВыполнения	= КонПериода;
			НачПериода					= КонПериода;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			
			СтрокаЭтапа			= ТаблицаМаршрута.Найти(ТекущаяТочка,"ТочкаМаршрута");
			ВариантВыполнения	= 0;
			Если ЗначениеЗаполнено(СтрокаЭтапа.Шаблон) Тогда
				// Определим длительность вложенного БП по шаблону.
				
				НаборМаршрутВложенного = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
				НаборМаршрутВложенного.Отбор.Объект.Установить(СтрокаЭтапа.Шаблон);
				НаборМаршрутВложенного.Прочитать();
				
				ТабНаборМаршрутВложенного = НаборМаршрутВложенного.Выгрузить();
				ТабНаборМаршрутВложенного.Колонки.Удалить("Объект");
				ТабНаборМаршрутВложенного.Колонки.Добавить("ДатаНачала");
				ТабНаборМаршрутВложенного.Колонки.Добавить("ДатаВыполнения");
				ТабНаборМаршрутВложенного.Колонки.Добавить("ДатаНачалаВходящая");
				
				Если НаборМаршрутВложенного.Количество() > 0 Тогда
					
					КонПериода = Дата("00010101");
					СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(СтрокаЭтапа.Шаблон);
					Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
						РассчитатьДатыВыполненияЭтаповПоМаршруту(СтрокаЭтапа.Шаблон.НомерВерсии, Организация, ЭлементСписка.Значение, ТабНаборМаршрутВложенного, НачПериода,,КалендарьЗаполнен,,,ОтложитьСледующийЭтап);
						
						ТабНаборМаршрутВложенного.Сортировать("ДатаВыполнения УБЫВ");
						
						Если КонПериода < ТабНаборМаршрутВложенного[0].ДатаВыполнения Тогда
							КонПериода = ТабНаборМаршрутВложенного[0].ДатаВыполнения;
						КонецЕсли;
					КонецЦикла;
					
					ОтложитьСледующийЭтап = Неопределено;
					
					СтрокаЭтапа.ДатаНачала		= НачПериода;
					СтрокаЭтапа.ДатаВыполнения	= КонПериода;
					НачПериода					= КонПериода;
					
					СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
					ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДлительностиНачалоПериода = Новый Структура();
			СтруктураДлительностиНачалоПериода.Вставить("Дней"	,СтрокаЭтапа.ОтложитьНачалоЭтапаДней);
			СтруктураДлительностиНачалоПериода.Вставить("Часов"	,СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов);
			СтруктураДлительностиНачалоПериода.Вставить("Минут"	,СтрокаЭтапа.ОтложитьНачалоЭтапаМинут);
			
			СтруктураДлительностиКонПериода = Новый Структура();
			СтруктураДлительностиКонПериода.Вставить("Дней"	,СтрокаЭтапа.ДлительностьДней);
			СтруктураДлительностиКонПериода.Вставить("Часов",СтрокаЭтапа.ДлительностьЧасов);
			СтруктураДлительностиКонПериода.Вставить("Минут",СтрокаЭтапа.ДлительностьМинут);
			
			Если НЕ КонтрольнаяТочка = Неопределено Тогда
				УжеПрошли = ТаблицаРассчитанныхТочек.Найти(КонтрольнаяТочка,"ТочкаМаршрута");
				
				Если КонтрольнаяТочка = ТекущаяТочка ИЛИ НЕ УжеПрошли = Неопределено Тогда
					//СтрокаЭтапа.ДатаНачала	= НачПериода;
					СтрокаЭтапа.ДатаНачалаВходящая = НачПериода;
					Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
						СтрокаЭтапа.ДатаНачала	= ОтложитьСледующийЭтап;
						ОтложитьСледующийЭтап = Неопределено;
					Иначе
						СтрокаЭтапа.ДатаНачала	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,СтруктураДлительностиНачалоПериода,,Организация,,КалендарьЗаполнен);
					КонецЕсли;
					КонПериода				= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаЭтапа.ДатаНачала,СтруктураДлительностиКонПериода,,Организация,,КалендарьЗаполнен);
				Иначе
					СтрокаЭтапа.ДатаНачала	= НачалоПериода;
					КонПериода				= НачалоПериода;
				КонецЕсли;
			Иначе
				//СтрокаЭтапа.ДатаНачала		= НачПериода;
				СтрокаЭтапа.ДатаНачалаВходящая = НачПериода;
				Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
					СтрокаЭтапа.ДатаНачала	= ОтложитьСледующийЭтап;
					ОтложитьСледующийЭтап = Неопределено;
				Иначе
					СтрокаЭтапа.ДатаНачала	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,СтруктураДлительностиНачалоПериода,,Организация,,КалендарьЗаполнен);
				КонецЕсли;
				КонПериода				= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаЭтапа.ДатаНачала,СтруктураДлительностиКонПериода,,Организация,,КалендарьЗаполнен);
			КонецЕсли;
			
			//КонПериода	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,СтруктураДлительности,,Организация,,КалендарьЗаполнен);
			
			//СтрокаЭтапа.ДатаНачала		= НачПериода;
			СтрокаЭтапа.ДатаВыполнения	= КонПериода;
			НачПериода					= КонПериода;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка Тогда
			
			ВариантВыполнения	= 0;
			СтруктураТочки		= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
			ТекущаяТочка		= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
			
			//// ++ VOG Солодов В.В. 09.12.2019 task 986
			//Если СтруктураТочки = Неопределено Тогда
			//	
			//	Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
			//		
			//		РезультатОбработчика = CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВыборВарианта(
			//			Неопределено,
			//			Неопределено,
			//			ТекущаяТочка,
			//			ВариантВыполнения);
			//		
			//	Иначе
			//		
			//		РезультатОбработчика = CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиУсловияПроверкаУсловия(
			//			Неопределено,
			//			Неопределено,
			//			ТекущаяТочка,
			//			ВариантВыполнения);
			//		
			//	КонецЕсли;
			//	
			//	СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(
			//		ТекущаяТочка,
			//		НомерВерсииКарты,
			//		РезультатОбработчика);
			//	
			//КонецЕсли;
			//// -- VOG Солодов В.В. 09.12.2019
			Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта
				или СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда			
				стрВетка = ТаблицаВариантовВыполнения.Найти(СтруктураТочки.ИсходящаяТочка);				
				Если стрВетка = Неопределено тогда
					стрВетка = ТаблицаВариантовВыполнения.Добавить();
					стрВетка.Ветка = СтруктураТочки.ИсходящаяТочка;
					стрВетка.ОбсчитанныйВариант = 0; 
				Иначе
					стрВетка.ОбсчитанныйВариант = стрВетка.ОбсчитанныйВариант + 1; 
				КонецЕсли;
				ВариантВыполнения = стрВетка.ОбсчитанныйВариант; 
				Если СтруктураТочки.ИсходящаяТочка.ИсходящиеТочки.Количество() <= ВариантВыполнения тогда
					Прервать;	
				КонецЕсли; 
				ТекущаяТочка = СтруктураТочки.ИсходящаяТочка;
			КонецЕсли;				
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсииКарты);
			
			ДатаРазделения = Дата("00010101");
			Для Каждого СтруктураТочки Из МассивСтруктурТочек Цикл
				
				СтруктураВетки = РассчитатьДатыВыполненияЭтаповПоМаршруту(НомерВерсииКарты, Организация,СтруктураТочки.ИсходящаяТочка, ТаблицаМаршрута, НачПериода,,КалендарьЗаполнен,,КонтрольнаяТочка,ОтложитьСледующийЭтап);
				// ++ VOG Солодов В.В. 21.10.2019 task 638
				Если Не СтруктураВетки = Неопределено
					И СтруктураВетки.ДатаВетки > ДатаРазделения Тогда
					ДатаРазделения = СтруктураВетки.ДатаВетки;
				КонецЕсли;
				// До изменения
				//Если СтруктураВетки.ДатаВетки > ДатаРазделения Тогда
				//	ДатаРазделения = СтруктураВетки.ДатаВетки;
				//КонецЕсли;
				// -- VOG Солодов В.В. 21.10.2019
			КонецЦикла;
			
			ОтложитьСледующийЭтап = Неопределено;
			
			НачПериода = ДатаРазделения;
			ВариантВыполнения = 0;
			
			// ++ VOG Солодов В.В. 21.10.2019 task 638
			Если Не СтруктураВетки = Неопределено Тогда
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(СтруктураВетки.ТочкаСлияния, НомерВерсииКарты, ВариантВыполнения);
			Иначе
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, ВариантВыполнения);
			КонецЕсли;
			// До изменения
			//СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(СтруктураВетки.ТочкаСлияния, НомерВерсииКарты, ВариантВыполнения);
			// -- VOG Солодов В.В. 21.10.2019
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			
			Возврат Новый Структура("ТочкаСлияния,ДатаВетки",ТекущаяТочка,НачПериода);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ КонтрольнаяТочка = Неопределено Тогда
		УжеПрошли = ТаблицаРассчитанныхТочек.Найти(КонтрольнаяТочка,"ТочкаМаршрута");
		Если УжеПрошли = Неопределено Тогда
			РассчитатьДатыВыполненияЭтаповПоМаршруту(НомерВерсииКарты, Организация,КонтрольнаяТочка, ТаблицаМаршрута, НачалоПериода,,КалендарьЗаполнен,,,ОтложитьСледующийЭтап);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция РассчитатьПлановуюДатуЗавершенияБП(НомерВерсииКарты, Организация, ТочкаМаршрута, Проект, КартаМаршрута, ЗНАЧ ДатаСтарта) Экспорт
	
	НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(Проект)
	И (Проект.CRM_КартаМаршрута = КартаМаршрута) Тогда
		НаборМаршрут.Отбор.Объект.Установить(Проект);
		НаборМаршрут.Прочитать();
		Если НаборМаршрут.Количество()=0 Тогда
			НаборМаршрут.Отбор.Сбросить();
			НаборМаршрут.Отбор.Объект.Установить(КартаМаршрута);
			НаборМаршрут.Прочитать();
		КонецЕсли;
	Иначе
		НаборМаршрут.Отбор.Объект.Установить(КартаМаршрута);
		НаборМаршрут.Прочитать();
	КонецЕсли;
	ТабНаборМаршрут = НаборМаршрут.Выгрузить();
	ТабНаборМаршрут.Колонки.Удалить("Объект");
	ТабНаборМаршрут.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
	ТабНаборМаршрут.Колонки.Добавить("ДатаНачала");
	ТабНаборМаршрут.Колонки.Добавить("ДатаВыполнения");
	ТабНаборМаршрут.Колонки.Добавить("ДатаНачалаВходящая");
	Если ЗначениеЗаполнено(ДатаСтарта) И ДатаСтарта > ТекущаяДатаСеанса() Тогда
		НачПериода = ДатаСтарта;
	Иначе
		НачПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	РассчитатьДатыВыполненияЭтаповПоМаршруту(НомерВерсииКарты, Организация, ТочкаМаршрута, ТабНаборМаршрут, НачПериода);
	Возврат CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьМаксимальнуюДатуИзКолонкиСрокБизнесПроцесса(ТабНаборМаршрут);
	
КонецФункции

//
//
Функция ПересчитатьСрокиИсполненияЗадачБизнесПроцесса(Задача, НачПериода, ВариантВыполнения = Неопределено, ТочкаМаршрута = Неопределено, ОтложитьСледующийЭтап = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Состояние,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьДней,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьЧасов,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьМинут,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаДней,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаЧасов,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаМинут,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачалаВходящая,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Используется,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Задание,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Порядок,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Шаблон,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ИсполнительСтрокой,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачала,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииДней,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииЧасов,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииМинут
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|ГДЕ
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект",Задача.БизнесПроцесс);
	
	ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
	
	СтрокаЭтапа = ТаблицаЭтапов.Найти(Задача.CRM_ТочкаМаршрута,"ТочкаМаршрута");
	СтрокаЭтапа.ДатаВыполнения = НачПериода;
	
	СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Задача.CRM_ТочкаМаршрута, Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, ?(ВариантВыполнения = Неопределено,СтрокаЭтапа.ВариантВыполнения,ВариантВыполнения));
	РассчитатьДатыВыполненияЭтаповПоМаршруту(Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, Задача.БизнесПроцесс.Организация,
												СтруктураТочки.ИсходящаяТочка, ТаблицаЭтапов, НачПериода,
												?(ВариантВыполнения = Неопределено,СтрокаЭтапа.ВариантВыполнения,ВариантВыполнения),,,ТочкаМаршрута, ОтложитьСледующийЭтап);
	
	Возврат ТаблицаЭтапов;
	
КонецФункции

// Процедура перезаполняет длительности этапов из таблицы исполнителей.
//
Процедура СкорректироватьДлительностьЭтаповБизнесПроцесса(БизнесПроцесс, ТаблицаИсполнителей) Экспорт
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(БизнесПроцесс);
	НаборЭтапов.Прочитать();
	
	Для Каждого СтрокаНабора Из НаборЭтапов Цикл
		СтрокаТаблицы = ТаблицаИсполнителей.Найти(СтрокаНабора.ТочкаМаршрута,"ТочкаМаршрута");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			СтрокаНабора.ДлительностьДней	= СтрокаТаблицы.ДлительностьДней;
			СтрокаНабора.ДлительностьЧасов	= СтрокаТаблицы.ДлительностьЧасов;
			СтрокаНабора.ДлительностьМинут	= СтрокаТаблицы.ДлительностьМинут;
			СтрокаНабора.ДатаНачала			= СтрокаТаблицы.ДатаНачала;
			СтрокаНабора.ДатаВыполнения		= СтрокаТаблицы.ДатаВыполнения;
		КонецЕсли;
	КонецЦикла;
	
	НаборЭтапов.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за формирование задач и вложенных бизнес-процессов.

// Функция получает результат выполнения задачи.
//
// Параметры:
//	Задача	- ЗадачаСсылка	- Задача.
//
// Возвращаемое значение:
// Массив	- Массив ошибок
//
Функция ПолучитьРезультатВыполнения(Задача) Экспорт
	СписокБП = Новый СписокЗначений;
	МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,Задача.CRM_ВариантВыполнения);
	Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
		Если ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_БизнесПроцесс.Ссылка
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	(НЕ CRM_БизнесПроцесс.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка))
			|	И (НЕ CRM_БизнесПроцесс.ПометкаУдаления)
			|	И (НЕ CRM_БизнесПроцесс.Стартован)
			|	И CRM_БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс
			|	И CRM_БизнесПроцесс.ВедущаяЗадача.CRM_ТочкаМаршрута = &ТочкаМаршрута";
			Запрос.УстановитьПараметр("БизнесПроцесс", Задача.БизнесПроцесс);
			Запрос.УстановитьПараметр("ТочкаМаршрута", ЗначениеМассива.ИсходящаяТочка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокБП.Добавить(Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат СписокБП;
КонецФункции // ПолучитьРезультатВыполнения()

// Процедура вызывается из подписки на событие "CRM_ПиЗаписиЗадачиИсполнителя".
//
Процедура ПриЗаписиЗадачиИсполнителя(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ЗадачаИсполнителяМодульОбъектаПриЗаписи(Источник, Отказ);
	
	Если ЗначениеЗаполнено(Источник.БизнесПроцесс) И (ТипЗнч(Источник.БизнесПроцесс) = ТИП("БизнесПроцессСсылка.CRM_БизнесПроцесс")) Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ОповеститьОПринятииКИсполнению") И Источник.ДополнительныеСвойства.ОповеститьОПринятииКИсполнению Тогда
			
			ПолучитьУсловияЭтапаСформироватьОповещения(Источник.Ссылка, Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению);
			
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			
			Если Источник.ДополнительныеСвойства.Свойство("Взаимодействие") Тогда
				Взаимодействие = Источник.ДополнительныеСвойства.Взаимодействие;
			Иначе
				Взаимодействие = Неопределено;
			КонецЕсли;
			
			ПолучитьУсловияЭтапаСформироватьОповещения(Источник.Ссылка, Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи, Взаимодействие);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из подписки на событие "CRM_ПередЗаписьюЗадачиИсполнителя".
//
Процедура ПередЗаписьюЗадачиИсполнителя(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() И НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.БизнесПроцесс) И (ТипЗнч(Источник.БизнесПроцесс) = ТИП("БизнесПроцессСсылка.CRM_БизнесПроцесс")) Тогда
		Если Источник.ЭтоНовый() И (ЗначениеЗаполнено(Источник.РольИсполнителя)
			ИЛИ (НЕ ЗначениеЗаполнено(Источник.РольИсполнителя) И НЕ Источник.Исполнитель = Пользователи.ТекущийПользователь())) Тогда
			Источник.ДополнительныеСвойства.Вставить("мСоздатьОповещениеОНовойЗадаче", Истина);
		КонецЕсли;
		// Если Бизнес-процесс стартован по проекту, то возможно для процесса были настроены
		// оповещения для этапов. В таком случае надо сформировать оповещения.
		Если Источник.ПринятаКИсполнению И (НЕ Источник.Ссылка.ПринятаКИсполнению) Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ОповеститьОПринятииКИсполнению", Истина);
			
		КонецЕсли;
	КонецЕсли;
	//Если Источник.ПринятаКИсполнению И НЕ Источник.Исполнитель.Пустая() Тогда
	//	Источник.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
	//КонецЕсли;	
	
КонецПроцедуры

// Процедура вызывается из подписки на событие "CRM_ПриВыполненииЗадачиИсполнителя".
//
Процедура ПриВыполненииЗадачиИсполнителя(Источник, Отказ, ТочкаМаршрута = Неопределено, ЭтоСменаЭтапа = Ложь) Экспорт
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ЗадачаИсполнителяМодульОбъектаПриЗаписи(Источник, Отказ);
	
	Если ТипЗнч(Источник.БизнесПроцесс) = ТИП("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		
		ДинамическиРассчитыватьСрокиВыполненияЭтапов = Источник.БизнесПроцесс.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
		
		Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
			ТаблицаЭтапов = ПересчитатьСрокиИсполненияЗадачБизнесПроцесса(Источник, ТекущаяДатаСеанса(), Источник.CRM_ВариантВыполнения, ТочкаМаршрута, ?(Источник.ДополнительныеСвойства.Свойство("ОтложитьСледующийЭтап"),Источник.ДополнительныеСвойства.ОтложитьСледующийЭтап,Неопределено));
		КонецЕсли;
		
		Если ЭтоСменаЭтапа = Неопределено И НЕ Источник.CRM_Переадресована Тогда
			Если НЕ Источник.CRM_ЗавершенДосрочно Тогда
				Источник.CRM_Неудача = (Источник.БизнесПроцесс.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
			
			Если Источник.ДополнительныеСвойства.Свойство("Взаимодействие") Тогда
				Взаимодействие = Источник.ДополнительныеСвойства.Взаимодействие;
			Иначе
				Взаимодействие = Неопределено;
			КонецЕсли;
			
			// ++ VOG Ульянов И.В. 13.11.2019 task 904
			//ПолучитьСледующуюТочкуСформироватьЗадачи(Источник.Ссылка, ТаблицаЭтапов, Отказ, ?(Источник.ДополнительныеСвойства.Свойство("ОтложитьСледующийЭтап"),Источник.ДополнительныеСвойства.ОтложитьСледующийЭтап,Неопределено),Взаимодействие);
			Если Константы.вогФормироватьЗадачиРегламентнымЗаданием.Получить() = Истина тогда
				НаборЗаписей = РегистрыСведений.вогНеобработанныеЗадачиБизнесПроцессов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Задача.Установить(Источник.Ссылка);			
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Задача = Источник.Ссылка;
				НоваяЗапись.Дата = ТекущаяДата();
				НоваяЗапись.БизнесПроцесс = Источник.БизнесПроцесс;
				НоваяЗапись.ТочкаМаршрутаБизнесПроцесса = Источник.CRM_ТочкаМаршрута;
				НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
				Попытка
					НаборЗаписей.Записать(Истина);
				Исключение
					Отказ = Истина;
					ВызватьИсключение("Не удалось согласовать задачу "+СокрЛП(Источник.Ссылка)+" Ошибка создания следующей задачи. "+ОписаниеОшибки());
				КонецПопытки;	
			Иначе	
			    ПолучитьСледующуюТочкуСформироватьЗадачи(Источник.Ссылка, ТаблицаЭтапов, Отказ, ?(Источник.ДополнительныеСвойства.Свойство("ОтложитьСледующийЭтап"),Источник.ДополнительныеСвойства.ОтложитьСледующийЭтап,Неопределено),Взаимодействие);
			КонецЕсли;			
			// -- VOG Ульянов И.В. 13.11.2019 task 904
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
				НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
				НаборЭтапов.Отбор.Объект.Установить(Источник.БизнесПроцесс);
				НаборЭтапов.Прочитать();
				НаборЭтапов.Загрузить(ТаблицаЭтапов);
				НаборЭтапов.Записать();
			КонецЕсли;
			CRM_ОповещенияСервер.УдалитьОповещения(Источник.Ссылка);
			
			Если (Источник.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
				Или Источник.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеГрупповое) // ++ VOG Солодов В.В. 21.08.2019 task 477 // Добавил условие
				И Источник.БизнесПроцесс.ОповещатьАвтора И НЕ Источник.CRM_Переадресована Тогда
				CRM_ОповещенияСервер.ОповеститьАвтораПорученияОВыполненииЗадачи(Источник.Ссылка);
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(Источник.БизнесПроцесс.Проект) И НЕ Источник.CRM_Переадресована И НЕ Источник.CRM_Неудача Тогда
			Если НЕ Источник.CRM_Переадресована И НЕ Источник.CRM_Неудача Тогда
				// Если Бизнес-процесс стартован по проекту, то возможно для процесса были настроены
				// оповещения для этапов. В таком случае надо сформировать оповещения.
				
				//НастройкиОповещения = РегистрыСведений.CRM_ОповещенияЭтапов.СоздатьНаборЗаписей();
				//НастройкиОповещения.Отбор.Объект.Установить(Источник.БизнесПроцесс.Проект);
				//НастройкиОповещения.Отбор.ТочкаМаршрута.Установить(Источник.CRM_ТочкаМаршрута);
				//НастройкиОповещения.Отбор.Событие.Установить(Перечисления.CRM_СобытияЗадачи.ПриЗавершении);
				//НастройкиОповещения.Прочитать();
				//
				//ПараметрыОповещения = НастройкиОповещения.Выгрузить();
				//
				//CRM_ОповещенияСервер.СформироватьОповещениеПоЗадаче(Источник.Ссылка, ПараметрыОповещения);
				
				Если Источник.ДополнительныеСвойства.Свойство("Взаимодействие") Тогда
					Взаимодействие = Источник.ДополнительныеСвойства.Взаимодействие;
				Иначе
					Взаимодействие = Неопределено;
				КонецЕсли;
				
				ПолучитьУсловияЭтапаСформироватьОповещения(Источник.Ссылка, Перечисления.bpmСобытияЭтапа.ПриЗавершении, Взаимодействие);
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли Источник.БизнесПроцесс = Неопределено И Источник.CRM_Личная Тогда
		
		CRM_ОповещенияСервер.УдалитьОповещения(Источник.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьУсловияЭтапаСформироватьОповещения(ЗадачаСсылка, Событие, Взаимодействие = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект",ЗадачаСсылка.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута",ЗадачаСсылка.CRM_ТочкаМаршрута);
	Запрос.УстановитьПараметр("Событие",Событие);
	Запрос.Текст = "ВЫБРАТЬ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Цель КАК Шаблон,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Исполнителю,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Ответственному,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Клиенту,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ВыражениеУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ПредставлениеОтбора,
	|	bpmУсловияЭтаповПоБизнесПроцессам.СпособЗаданияУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Наименование,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаКомбинацииУсловий,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаУсловия
	|ИЗ
	|	РегистрСведений.bpmУсловияЭтаповПоБизнесПроцессам КАК bpmУсловияЭтаповПоБизнесПроцессам
	|ГДЕ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект = &Объект
	|	И bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута
	|	И bpmУсловияЭтаповПоБизнесПроцессам.Событие = &Событие
	|	И bpmУсловияЭтаповПоБизнесПроцессам.ТипДействия = ЗНАЧЕНИЕ(Перечисление.bpmТипыДействий.Оповещение)";
	
	Выборка= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если (НЕ Выборка.Исполнителю И НЕ Выборка.Ответственному И НЕ Выборка.Клиенту)
		ИЛИ НЕ ЗначениеЗаполнено(Выборка.Шаблон) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора Тогда
			
			ЕстьУсловия = Истина;
			Результат = ПроверитьУсловиеВРежимеКонструктора(ЗадачаСсылка,Выборка.НастройкаУсловия.Получить());
			
		ИначеЕсли Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
			
			ЕстьУсловия = Истина;
			
			Настройки = Выборка.НастройкаКомбинацииУсловий.Получить();
			ЗаполнитьКомбинациюПравил(ЗадачаСсылка, Настройки.Отбор.Элементы);
			Результат = ПроверитьУсловиеВРежимеКонструктора(ЗадачаСсылка, Настройки,"Условия");
			
		ИначеЕсли Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
			
			ЕстьУсловия = Истина;
			Результат = ПроверитьУсловиеНаВстроенномЯзыке(ЗадачаСсылка, Выборка);
			
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Результат)= Тип("Булево") И Результат Тогда
			CRM_ОповещенияСервер.СформироватьОповещениеПоЗадаче(ЗадачаСсылка, Выборка, Событие, Взаимодействие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьЗадачиПоЗапросуВыполнить(ЗадачаСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВедущаяЗадача",ЗадачаСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.Ссылка КАК Задача
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ПО CRM_БизнесПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	МассивЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача");
	
	Для Каждого Задача ИЗ МассивЗадач Цикл
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача,,,НСтр("ru = 'Выполнена автоматически по причине: Выполнена задача по которой был создан запрос.'"));
	КонецЦикла;
	
КонецПроцедуры

//
//
Процедура СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцесс, ТекущаяЗадача = Неопределено, ЗавершенДосрочно = Ложь, Завершен = Ложь) Экспорт
	
	ПредставлениеЭтапа = "";
	
	Если НЕ ЗавершенДосрочно И НЕ Завершен Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесПроцесс",БизнесПроцесс);
		Запрос.УстановитьПараметр("ТекущаяЗадача",ТекущаяЗадача);
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		Если НЕ ТекущаяЗадача = Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	И НЕ ЗадачаИсполнителя.Ссылка = &ТекущаяЗадача";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута";
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПредставлениеЭтапа = ПредставлениеЭтапа + ?(ПредставлениеЭтапа="","","; ") + Строка(Выборка.CRM_ТочкаМаршрута);
			
		КонецЦикла;
		
	ИначеЕсли ЗавершенДосрочно Тогда // Бизнес-процесс завершен досрочно.
		
		ВариантЗавершенияСтрокой = ?(ЗначениеЗаполнено(БизнесПроцесс.ВариантЗавершения),"("+ Строка(БизнесПроцесс.ВариантЗавершения) +")","");
		
		Если ЗначениеЗаполнено(БизнесПроцесс.ЭтапДосрочногоЗавершения) Тогда
			ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершен досрочно %1; по причине: %2; на этапе : %3'"),
																						 ВариантЗавершенияСтрокой,
																						 Строка(БизнесПроцесс.ПричинаДосрочногоЗавершения),
																						 Строка(БизнесПроцесс.ЭтапДосрочногоЗавершения));
		Иначе
			ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершен досрочно %1; по причине: %2'"),
																						 ВариантЗавершенияСтрокой,
																						 Строка(БизнесПроцесс.ПричинаДосрочногоЗавершения));
		КонецЕсли;
	ИначеЕсли Завершен Тогда // бизнес-процесс завершен
		Если ЗначениеЗаполнено(БизнесПроцесс.ВариантЗавершения) Тогда
			ПредставлениеЭтапа = НСтр("ru = 'Завершен ('") + Строка(БизнесПроцесс.ВариантЗавершения) + ")";
		Иначе
			ПредставлениеЭтапа = НСтр("ru = 'Завершен'");
		КонецЕсли;
	КонецЕсли;
	
	НоваяЗапись = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект		= БизнесПроцесс;
	НоваяЗапись.ТекущийЭтап	= ПредставлениеЭтапа;
	НоваяЗапись.Записать();
	
КонецПроцедуры

// Процедура вызывается из модуля объекта задачи исполнителя(при выполнении)
// выполняет проверки на возможность создания следующей задачи, формирует задачи,
// выполняет обработчики прописанные в точках маршрута.
//
// Параметры:
//	Задача	- ЗадачаСсылка	- Задача
//	Отказ	- Булево		- Флаг отказа.
//
Процедура ПолучитьСледующуюТочкуСформироватьЗадачи(Задача, ТаблицаЭтапов = Неопределено, Отказ, ОтложитьСледующийЭтап = Неопределено, Взаимодействие = Неопределено) Экспорт
	
	Перем мОтказ;
	
	мОтказ = Ложь;
	
	Если Задача.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
		Если НЕ Задача.CRM_ЗавершенДосрочно Тогда
			ТекстСообщения = "";
			
			// Аналог обработки задачей события ПриВыполнении.
			CRM_БизнесПроцессыПереопределяемый.ТочкаДействияПриВыполнении(Задача.CRM_ТочкаМаршрута, Задача, мОтказ, ТекстСообщения);
			
			Если мОтказ Тогда
				Если ТекстСообщения = "" Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось выполнить задачу.'")
				КонецЕсли;
				
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		НеФормируемЗадачи	= Ложь;
		ФормируемыеЗадачи	= Новый Массив;
		ДосрочноеЗавершение = Ложь;
		// ++ VOG Солодов В.В. 06.08.2020 CRM-572
		Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеНовое Тогда
			
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(
				Задача.БизнесПроцесс,
				Задача.CRM_ТочкаМаршрута,
				,
				,
				Задача.CRM_ВариантВыполнения,
				,
				Истина);
			
			Если МассивИсходящихТочек.Количество() = 1
				И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
				НеФормируемЗадачи = Истина;
			КонецЕсли;
			
		Иначе
			ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
		КонецЕсли;
		// До изменения
		//ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
		// -- VOG Солодов В.В. 06.08.2020 CRM-572
		// Если бизнес-процесс завершен досрочно, то не двигаемся дальше.
		Если Задача.БизнесПроцесс.ЗавершенДосрочно Тогда
			НеФормируемЗадачи	= Истина;
			ДосрочноеЗавершение = Истина;
		КонецЕсли;
		// Если бизнес-процесс завершен досрочно, то не двигаемся дальше в данной задаче досрочно завершили БП.
		Если Задача.CRM_ЗавершенДосрочно Тогда
			НеФормируемЗадачи	= Истина;
			ДосрочноеЗавершение = Истина;
		КонецЕсли;
		
		ПроверитьНаРазделения(Задача, Задача.CRM_ТочкаМаршрута);
		
		Если НЕ НеФормируемЗадачи Тогда
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,Задача.CRM_ВариантВыполнения,,Истина);
			СлияниеНеПройдено = ПроверитьНаСлияниеЗаписатьРезультат(Задача, МассивИсходящихТочек);
			БизнесПроцессЗавершен = ПроверитьНаЗавершение(Задача, МассивИсходящихТочек);
			
			Если БизнесПроцессЗавершен Тогда
				//CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиДействияПослеВыполнения(Задача, ФормируемыеЗадачи);
				//пока не вызывалось
				СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(Задача.БизнесПроцесс,,,Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НеФормируемЗадачи И НЕ БизнесПроцессЗавершен И НЕ СлияниеНеПройдено Тогда
			СформироватьМассивЗадач(Задача.БизнесПроцесс, Задача.ТочкаМаршрута, МассивИсходящихТочек, ФормируемыеЗадачи, Задача, ТаблицаЭтапов, Отказ,,ОтложитьСледующийЭтап, Взаимодействие);
			Если НЕ Отказ Тогда
				ЗаписатьЗадачи(ФормируемыеЗадачи, ТаблицаЭтапов);
				
				СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(Задача.БизнесПроцесс, Задача);
			КонецЕсли;
		КонецЕсли;
		Если НЕ Отказ И НЕ ДосрочноеЗавершение Тогда
			Если Задача.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиДействияПослеВыполнения(Задача, ФормируемыеЗадачи);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСледующуюТочкуСформироватьЗадачи()

// Процедура формирует задачи по переданному массиву точек маршрута
// вызывается процедурой ПолучитьСледующуюТочкуСформироватьЗадачи и из модуля объекта бизнес-процесса.
//
// Параметры:
//	БизнесПроцесс				- БизнесПроцессСсылка	- Ссылка на бизнес-процесс.
//	ТочкаМаршрутаБизнесПроцесса	- СправочникСсылка		- Точка маршрута родной карты бизнес-процесса.
//	МассивИсходящихТочек		- Массив				- Массив структур, содержит точки маршрута, по кот. требуется создать задачи.
//	ФормируемыеЗадачи			- Массив				- Массив, в котором находятся создаваемые задачи.
//	Задача						- ЗадачаСсылка			- Ссылка на предыдущую задачу, нужна при получении исполнителей.
//	Отказ						- Булево				- Флаг отмены.
//
Процедура СформироватьМассивЗадач(БизнесПроцесс, ТочкаМаршрутаБизнесПроцесса, МассивИсходящихТочек, ФормируемыеЗадачи, Задача = Неопределено, ТаблицаЭтапов = Неопределено, Отказ, СтандартнаяОбработка = Истина, ОтложитьСледующийЭтап = Неопределено, Взаимодействие = Неопределено) Экспорт
	
	// ++ VOG Солодов В.В. 20.09.2020 CRM-572
	ЭтоНовоеПоручение = (БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеНовое);
	// -- VOG Солодов В.В. 20.09.2020 CRM-572
	
	Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
		
		ФормируемыеЗадачиПоТочке = Новый Массив;
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Для точки вложенного бизнес-процесса ""'")+ЗначениеМассива.ИсходящаяТочка.Наименование + НСтр("ru = '"" не указан процесс.
			|Сорректируйте маршрут бизнес-процесса:'") + " " + СокрЛП(БизнесПроцесс);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Прервать;
		Иначе
			
			Если ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
				
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиДействияПередСозданиемЗадач(БизнесПроцесс ,ЗначениеМассива.ИсходящаяТочка, ФормируемыеЗадачиПоТочке, СтандартнаяОбработка);
				
			ИначеЕсли ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
				
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВложенныйБизнесПроцессПередСозданиемЗадач(БизнесПроцесс ,ЗначениеМассива.ИсходящаяТочка, ФормируемыеЗадачиПоТочке, СтандартнаяОбработка);
				
			КонецЕсли;
			
			Если СтандартнаяОбработка Тогда
			
				Если ТаблицаЭтапов = Неопределено Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	CRM_НастройкиЭтаповБизнесПроцессов.Объект,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Состояние,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьДней,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьЧасов,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьМинут,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаДней,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаЧасов,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаМинут,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Используется,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Задание,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Порядок,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Шаблон,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ИсполнительСтрокой,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачала,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения
					|ИЗ
					|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
					|ГДЕ
					|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект";
					
					Запрос.УстановитьПараметр("Объект",БизнесПроцесс);
					ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
				КонецЕсли;
				
				СтрокаЭтапа = ТаблицаЭтапов.Найти(ЗначениеМассива.ИсходящаяТочка, "ТочкаМаршрута");
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект,
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.ТочкаМаршрута,
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель,
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.Все
				|ИЗ
				|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
				|ГДЕ
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &Объект
				|	И CRM_ИсполнителиЭтаповБизнесПроцессов.ТочкаМаршрута = &ТочкаМаршрута";
				
				// ++ VOG Солодов В.В. 06.08.2020 CRM-572
				Если ЭтоНовоеПоручение
 					И ЗначениеЗаполнено(Задача)
					И ЗначениеЗаполнено(Задача.вогИсходнаяЗадача)
					И ЗначениеМассива.ИсходящаяТочка.Имя = "Действие1"
					И (ЗначениеМассива.НачальнаяТочка.Имя = "Действие2"
						Или ЗначениеМассива.НачальнаяТочка.Имя = "Действие3"
						Или ЗначениеМассива.НачальнаяТочка.Имя = "Действие4") Тогда
						
						Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.Таб + "И CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель = &Исполнитель";
						
						Запрос.УстановитьПараметр("Исполнитель", Задача.вогИсходнаяЗадача.Исполнитель);
					
 				КонецЕсли;
				// -- VOG Солодов В.В. 06.08.2020 CRM-572
				
				Запрос.УстановитьПараметр("Объект"			, БизнесПроцесс);
				Запрос.УстановитьПараметр("ТочкаМаршрута"	, ЗначениеМассива.ИсходящаяТочка);
				
				ТаблицаИсполнителей = Запрос.Выполнить().Выгрузить();
				//>>Бей(03.06.2019 0:49:38):#334   		
				ТаблицаОбъектовПоПроцессу = вогОбъектыДляПроцессаСервер.ПолучитьТаблицуОбъектовПоПроцессу(БизнесПроцесс);
				//<<Бей(03.06.2019 0:49:43):#334
				
				Для Каждого СтрокаИсполнителя Из ТаблицаИсполнителей Цикл
					СтруктураИсполнителя = ПолучитьАдресациюЗадачи(СтрокаИсполнителя, БизнесПроцесс, ЗначениеМассива.ИсходящаяТочка, Задача);
					
					СписокИсполнителейРоли = Неопределено;
					Если СтрокаИсполнителя.Все И ЗначениеЗаполнено(СтруктураИсполнителя.РольИсполнителя) Тогда
						СписокИсполнителейРоли = ПолучитьВозможныхИсполнителейПоРоли(СтруктураИсполнителя.РольИсполнителя);
					КонецЕсли;
					
					// + Тищенко В.В.
					Если ЗначениеЗаполнено(СтруктураИсполнителя.РольИсполнителя) И СтруктураИсполнителя.РольИсполнителя.ИспользуетсяСОбъектамиАдресации Тогда
						ДополнительныеПараметрыИсполнитель = Новый Структура;
						ДополнительныеПараметрыИсполнитель.Вставить("Автор"			,БизнесПроцесс.Автор);
						//START Кайдашов 24/01/20 CRM-177
						//ДополнительныеПараметрыИсполнитель.Вставить("Подразделение"	,БизнесПроцесс.Автор.Подразделение);
						Подразделение = Неопределено;
						Если ЗначениеЗаполнено(БизнесПроцесс.Предмет) и ТипЗнч(БизнесПроцесс.Предмет)=Тип("ДокументСсылка.вогАнкета") тогда
							Респондент = БизнесПроцесс.Предмет.Респондент;
							Если ТипЗнч(Респондент) = Тип("СправочникСсылка.Пользователи") тогда
								Подразделение = Респондент.Подразделение;
							Иначе
								Подразделение = БизнесПроцесс.Автор.Подразделение; 	
							КонецЕсли;
						Иначе
							Подразделение = БизнесПроцесс.Автор.Подразделение; 	
						КонецЕсли;
						ДополнительныеПараметрыИсполнитель.Вставить("Подразделение"	, Подразделение);
						//END Кайдашов CRM-177
						// ++ Тищенко В.В. 28.01.2019
						// Если это поручение тогда алгоритм поиска другой
						Если БизнесПроцесс.КартаМаршрута 	= Справочники.CRM_КартыМаршрутов.Поручение Тогда
							СписокИсполнителейРоли 			= ПолучитьВозможныхИсполнителейПоРолиДляПоручения(СтруктураИсполнителя.РольИсполнителя,ДополнительныеПараметрыИсполнитель,БизнесПроцесс.Ссылка);
						// ++ VOG Солодов В.В. 22.08.2019 task 477
						ИначеЕсли СтруктураИсполнителя.РольИсполнителя.вогРольДляГруппыПользователей Тогда
							СписокИсполнителейРоли 			= Новый СписокЗначений;
							СписокИсполнителейРоли.Добавить(СтруктураИсполнителя.РольИсполнителя);
						// -- VOG Солодов В.В. 22.08.2019	
						Иначе
							СписокИсполнителейРоли 			= ПолучитьВозможныхИсполнителейПоРолиСАдресацией(СтруктураИсполнителя.РольИсполнителя,ДополнительныеПараметрыИсполнитель);
						КонецЕсли;
						// -- Тищенко В.В.
						
						// Отказ от создания задачи. Если список исполнителей пустой 
						Если СписокИсполнителейРоли.Количество() = 0 Тогда
							ТекстСообщения = НСтр("ru = 'Не обнаружен исполнитель следующего этапа выполненения задачи'");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							Отказ = Истина;
							Прервать;
						КонецЕсли;
	
					КонецЕсли;
					// - Тищенко В.В.
					
					// ++ VOG Солодов В.В. 06.08.2020 CRM-572
					Если ЭтоНовоеПоручение И ЗначениеЗаполнено(Задача) Тогда
						
						Если ЗначениеЗаполнено(Задача.вогИсходнаяЗадача)
							И (ЗначениеМассива.НачальнаяТочка.Имя = "Действие1"
								Или ЗначениеМассива.ИсходящаяТочка.Имя = "Действие1") Тогда
							
							Если Задача.вогИсходнаяЗадача.CRM_Итерация < Задача.CRM_Итерация Тогда
								НомерПоследнейИтерации = Задача.CRM_Итерация;
							Иначе
								НомерПоследнейИтерации = Задача.вогИсходнаяЗадача.CRM_Итерация;
							КонецЕсли;
							
						ИначеЕсли ЗначениеЗаполнено(Задача.вогИсходнаяЗадача) Тогда
							
							НомерПоследнейИтерации = Задача.CRM_Итерация - 1;
							
						Иначе
							НомерПоследнейИтерации = 0;
 						КонецЕсли;
						
					Иначе
						НомерПоследнейИтерации = ПолучитьИтерациюЗадачи(БизнесПроцесс, ЗначениеМассива.ИсходящаяТочка);
					КонецЕсли;
					// До изменения
					//НомерПоследнейИтерации = ПолучитьИтерациюЗадачи(БизнесПроцесс, ЗначениеМассива.ИсходящаяТочка);
					// -- VOG Солодов В.В. 06.08.2020 CRM-572
					
					//>>Бей(03.06.201):#334 					
					Если БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
						
						МассивОбъектовПоПроцессу = ТаблицаОбъектовПоПроцессу.ВыгрузитьКолонку("Объект");
						
						МассивСтруктурИсполнителей = Новый Массив;

						Если БизнесПроцесс.вогНастройка.ЗадачаНаКаждыйПредмет и ТаблицаОбъектовПоПроцессу.Количество()>0 Тогда
							
							Если ТипЗнч(СтрокаИсполнителя.Исполнитель) = Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач") Тогда
								
								РольМенеджера = ?(СтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.ОсновнойКоординатор,Справочники.РолиКонтактныхЛицПартнеров.Координатор,Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
								СписокИсполнителейРоли 			= ПолучитьВозможныхИсполнителейПоРолиДляПоручения(СтруктураИсполнителя.РольИсполнителя,ДополнительныеПараметрыИсполнитель,БизнесПроцесс.Ссылка);
								
								Если СписокИсполнителейРоли = Неопределено Тогда
									ТаблицаОбъектовПоПроцессуПоМенеджеру = вогОбъектыДляПроцессаСервер.ПолучитьКлиентовМенеджера(РольМенеджера, СтруктураИсполнителя.Исполнитель, МассивОбъектовПоПроцессу);
									
									Для Каждого СтрОбъектПоПроцессу Из ТаблицаОбъектовПоПроцессуПоМенеджеру Цикл
										ТаблицаОбъектовПоПроцессуИзСтроки = Новый ТаблицаЗначений;
										ТаблицаОбъектовПоПроцессуИзСтроки.Колонки.Добавить("Процесс");
										ТаблицаОбъектовПоПроцессуИзСтроки.Колонки.Добавить("Объект");
										
										ЗаполнитьЗначенияСвойств(ТаблицаОбъектовПоПроцессуИзСтроки.Добавить(),СтрОбъектПоПроцессу);
										
										СтруктураИсполнителяКопия = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации,ТаблицаОбъектовПоПроцессу");
										
										ЗаполнитьЗначенияСвойств(СтруктураИсполнителяКопия,СтруктураИсполнителя);
										
										СтруктураИсполнителяКопия.Вставить("ТаблицаОбъектовПоПроцессу",ТаблицаОбъектовПоПроцессуИзСтроки);
										МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителяКопия);
									КонецЦикла;
								Иначе
									Для Каждого ЭлементСписка Из СписокИсполнителейРоли Цикл
										
										ТаблицаОбъектовПоПроцессуПоМенеджеру = вогОбъектыДляПроцессаСервер.ПолучитьКлиентовМенеджера(РольМенеджера, ЭлементСписка.Значение,МассивОбъектовПоПроцессу);
										
										Для Каждого СтрОбъектПоПроцессу Из ТаблицаОбъектовПоПроцессуПоМенеджеру Цикл
											
											ТаблицаОбъектовПоПроцессуИзСтроки = Новый ТаблицаЗначений;
											ТаблицаОбъектовПоПроцессуИзСтроки.Колонки.Добавить("Процесс");
											ТаблицаОбъектовПоПроцессуИзСтроки.Колонки.Добавить("Объект");
											ЗаполнитьЗначенияСвойств(ТаблицаОбъектовПоПроцессуИзСтроки.Добавить(),СтрОбъектПоПроцессу);
											
											
											СтруктураИсполнителяРоли = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации,ТаблицаОбъектовПоПроцессу");
											СтруктураИсполнителяРоли.Исполнитель					= ЭлементСписка.Значение;
											СтруктураИсполнителяРоли.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
											СтруктураИсполнителяРоли.ОсновнойОбъектАдресации		= Неопределено;
											СтруктураИсполнителяРоли.ДополнительныйОбъектАдресации	= Неопределено;
											СтруктураИсполнителяРоли.ТаблицаОбъектовПоПроцессу		= ТаблицаОбъектовПоПроцессуИзСтроки;
											
											Если ТаблицаОбъектовПоПроцессуИзСтроки.Количество()>0 Тогда
												МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителяРоли);
											КонецЕсли;
											
										КонецЦикла;
									КонецЦикла;

								КонецЕсли;
								
							Иначе
								
								Для Каждого СтрОбъектПоПроцессу Из ТаблицаОбъектовПоПроцессу Цикл
									ТаблицаОбъектовПоПроцессуИзСтроки = Новый ТаблицаЗначений;
									ТаблицаОбъектовПоПроцессуИзСтроки.Колонки.Добавить("Процесс");
									ТаблицаОбъектовПоПроцессуИзСтроки.Колонки.Добавить("Объект");
									ЗаполнитьЗначенияСвойств(ТаблицаОбъектовПоПроцессуИзСтроки.Добавить(),СтрОбъектПоПроцессу);
									
									Если СписокИсполнителейРоли = Неопределено Тогда
										
										СтруктураИсполнителяКопия = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации,ТаблицаОбъектовПоПроцессу");
										
										ЗаполнитьЗначенияСвойств(СтруктураИсполнителяКопия,СтруктураИсполнителя);

										СтруктураИсполнителяКопия.Вставить("ТаблицаОбъектовПоПроцессу",ТаблицаОбъектовПоПроцессуИзСтроки);
										
										МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителяКопия);
									Иначе
										Для Каждого ЭлементСписка Из СписокИсполнителейРоли Цикл
											
											ТаблицаОбъектовПоПроцессуИзСтроки = Новый ТаблицаЗначений;
											ТаблицаОбъектовПоПроцессуИзСтроки.Колонки.Добавить("Процесс");
											ТаблицаОбъектовПоПроцессуИзСтроки.Колонки.Добавить("Объект");
											ЗаполнитьЗначенияСвойств(ТаблицаОбъектовПоПроцессуИзСтроки.Добавить(),СтрОбъектПоПроцессу);

											СтруктураИсполнителяРоли = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации,ТаблицаОбъектовПоПроцессу");
											СтруктураИсполнителяРоли.Исполнитель					= ЭлементСписка.Значение;
											СтруктураИсполнителяРоли.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
											СтруктураИсполнителяРоли.ОсновнойОбъектАдресации		= Неопределено;
											СтруктураИсполнителяРоли.ДополнительныйОбъектАдресации	= Неопределено;
											СтруктураИсполнителяРоли.ТаблицаОбъектовПоПроцессу		= ТаблицаОбъектовПоПроцессуИзСтроки;
											
											МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителяРоли);
										КонецЦикла;
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
						Иначе
							
							Если ТипЗнч(СтрокаИсполнителя.Исполнитель) = Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач") Тогда
								
								РольМенеджера = ?(СтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.ОсновнойКоординатор,Справочники.РолиКонтактныхЛицПартнеров.Координатор,Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
								
								Если СписокИсполнителейРоли = Неопределено Тогда
									//ТаблицаОбъектовПоПроцессуПоМенеджеру = вогОбъектыДляПроцессаСервер.ПолучитьКлиентовМенеджера(СтруктураИсполнителя.Исполнитель,МассивОбъектовПоПроцессу);
									//СтруктураИсполнителя.Вставить("ТаблицаОбъектовПоПроцессу",ТаблицаОбъектовПоПроцессуПоМенеджеру);
									//Если ТаблицаОбъектовПоПроцессуПоМенеджеру.Количество()>0 Тогда
									//	МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителя);
									//КонецЕсли;
								Иначе
									Для Каждого ЭлементСписка Из СписокИсполнителейРоли Цикл
										
										ТаблицаОбъектовПоПроцессуПоМенеджеру = вогОбъектыДляПроцессаСервер.ПолучитьКлиентовМенеджера(РольМенеджера, ЭлементСписка.Значение,МассивОбъектовПоПроцессу);
										
										СтруктураИсполнителяРоли = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации,ТаблицаОбъектовПоПроцессу");
										СтруктураИсполнителяРоли.Исполнитель					= ЭлементСписка.Значение;
										СтруктураИсполнителяРоли.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
										СтруктураИсполнителяРоли.ОсновнойОбъектАдресации		= Неопределено;
										СтруктураИсполнителяРоли.ДополнительныйОбъектАдресации	= Неопределено;
										СтруктураИсполнителяРоли.ТаблицаОбъектовПоПроцессу		= ТаблицаОбъектовПоПроцессуПоМенеджеру;
										
										Если ТаблицаОбъектовПоПроцессуПоМенеджеру.Количество()>0 Тогда
											МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителяРоли);
										КонецЕсли;

									КонецЦикла;
								КонецЕсли;

							Иначе
								 
								Если СписокИсполнителейРоли = Неопределено Тогда
									СтруктураИсполнителя.Вставить("ТаблицаОбъектовПоПроцессу",ТаблицаОбъектовПоПроцессу);   
									МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителя);
								Иначе
									Для Каждого ЭлементСписка Из СписокИсполнителейРоли Цикл
										СтруктураИсполнителяРоли = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации,ТаблицаОбъектовПоПроцессу");
										СтруктураИсполнителяРоли.Исполнитель					= ЭлементСписка.Значение;
										СтруктураИсполнителяРоли.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
										СтруктураИсполнителяРоли.ОсновнойОбъектАдресации		= Неопределено;
										СтруктураИсполнителяРоли.ДополнительныйОбъектАдресации	= Неопределено;
										СтруктураИсполнителяРоли.ТаблицаОбъектовПоПроцессу		= ТаблицаОбъектовПоПроцессу;
										
										МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителяРоли);
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
							
					Иначе
					//<<Бей(03.06.2019):#334
					
						МассивСтруктурИсполнителей = Новый Массив;
						Если СписокИсполнителейРоли = Неопределено Тогда
							МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителя);
						Иначе
							Для Каждого ЭлементСписка Из СписокИсполнителейРоли Цикл
								СтруктураИсполнителяРоли = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
								СтруктураИсполнителяРоли.Исполнитель					= ЭлементСписка.Значение;
								СтруктураИсполнителяРоли.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
								СтруктураИсполнителяРоли.ОсновнойОбъектАдресации		= Неопределено;
								СтруктураИсполнителяРоли.ДополнительныйОбъектАдресации	= Неопределено;
								МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителяРоли);
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
					
					Для Каждого СтруктураИсполнителя Из МассивСтруктурИсполнителей Цикл
					
						НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
						НоваяЗадача.БизнесПроцесс					= БизнесПроцесс;
						// Для бизнес-процесса на основании предопределенной карты "Поручение" наименование задачи формируем по своему.
						Если БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
							Если ЗначениеМассива.ИсходящаяТочка.Имя = "Действие1" Тогда
								НоваяЗадача.Наименование			= БизнесПроцесс.Наименование;
							ИначеЕсли ЗначениеМассива.ИсходящаяТочка.Имя = "Действие2" Тогда
								НоваяЗадача.Наименование			= "Проверить: """+БизнесПроцесс.Наименование+"""";
							Иначе
								НоваяЗадача.Наименование			= ЗначениеМассива.ИсходящаяТочка.Наименование;
							КонецЕсли;
						Иначе
							// +++ VOG Кулаков П.Л. 14.08.2020 CRM-842
							Если ТипЗнч(БизнесПроцесс.Предмет) = Тип("ДокументСсылка.вогКомандировка") Тогда
								НоваяЗадача.Наименование = "Командировка с " + Формат(БизнесПроцесс.Предмет.ВремяНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(БизнесПроцесс.Предмет.ВремяОкончания,"ДФ=dd.MM.yyyy") + " от " + (БизнесПроцесс.Предмет.Сотрудник);
								Организация = вогОбщегоНазначения.ПолучитьФилиалПользователя(БизнесПроцесс.Предмет.Сотрудник);
								Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
									НаименованиеОрганизации = "";
								Иначе
									НаименованиеОрганизации = "/" + Организация.Наименование;
								КонецЕсли;
								НоваяЗадача.Наименование = НоваяЗадача.Наименование + НаименованиеОрганизации;
							Иначе
								НоваяЗадача.Наименование = БизнесПроцесс.Наименование + " (" + ЗначениеМассива.ИсходящаяТочка.Наименование + ")";
							КонецЕсли;
							// — VOG Кулаков П.Л.
						КонецЕсли;
						
						НоваяЗадача.CRM_Проект						= БизнесПроцесс.Проект;
						НоваяЗадача.CRM_Партнер						= БизнесПроцесс.Партнер;
						НоваяЗадача.CRM_КонтактноеЛицо				= БизнесПроцесс.КонтактноеЛицо;
						НоваяЗадача.ТочкаМаршрута					= ТочкаМаршрутаБизнесПроцесса;
						НоваяЗадача.CRM_ТочкаМаршрута				= ЗначениеМассива.ИсходящаяТочка;
						НоваяЗадача.CRM_Итерация					= НомерПоследнейИтерации + 1;
						
						// ++ VOG Солодов В.В. 17.08.2020 CRM-827
						Если БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеНовое Тогда
							
							Если ЗначениеЗаполнено(Задача)
								И ЗначениеМассива.ИсходящаяТочка.Имя = "Действие1"
								И (ЗначениеМассива.НачальнаяТочка.Имя = "Действие2"
									Или ЗначениеМассива.НачальнаяТочка.Имя = "Действие3"
									Или ЗначениеМассива.НачальнаяТочка.Имя = "Действие4") Тогда
								
								НоваяЗадача.Описание 					= Задача.Описание;
								
							КонецЕсли;
							
						Иначе
							НоваяЗадача.Описание 					= СтрокаЭтапа.Задание;
						КонецЕсли;
						// До изменения
						//НоваяЗадача.Описание						= СтрокаЭтапа.Задание;
						// -- VOG Солодов В.В. 17.08.2020 CRM-827
						НоваяЗадача.Дата							= ТекущаяДатаСеанса();
						НоваяЗадача.CRM_СостояниеИнтереса			= СтрокаЭтапа.Состояние;
						
						СтруктураДлительностиНачалоПериода = Новый Структура();
						СтруктураДлительностиНачалоПериода.Вставить("Дней"	,СтрокаЭтапа.ОтложитьНачалоЭтапаДней);
						СтруктураДлительностиНачалоПериода.Вставить("Часов"	,СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов);
						СтруктураДлительностиНачалоПериода.Вставить("Минут"	,СтрокаЭтапа.ОтложитьНачалоЭтапаМинут);
						
						Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
							НоваяЗадача.ДатаНачала = ОтложитьСледующийЭтап;
						Иначе
							НоваяЗадача.ДатаНачала = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(ТекущаяДатаСеанса(),СтруктураДлительностиНачалоПериода,,БизнесПроцесс.Организация);
						КонецЕсли;
						
						Если БизнесПроцесс.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
							НоваяЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
						ИначеЕсли БизнесПроцесс.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
							НоваяЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
						ИначеЕсли БизнесПроцесс.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
							НоваяЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
						КонецЕсли;
						
						Если ОтложитьСледующийЭтап = Неопределено И ЗначениеЗаполнено(СтрокаЭтапа.ДатаВыполнения) Тогда
							НоваяЗадача.СрокИсполнения				= ?(СтрокаЭтапа.ДатаВыполнения < ТекущаяДатаСеанса(),ТекущаяДатаСеанса(),СтрокаЭтапа.ДатаВыполнения);
						Иначе
							НачПериода = НоваяЗадача.ДатаНачала;
							
							СтруктураДлительностиКонПериода = Новый Структура();
							СтруктураДлительностиКонПериода.Вставить("Дней"	,СтрокаЭтапа.ДлительностьДней);
							СтруктураДлительностиКонПериода.Вставить("Часов",СтрокаЭтапа.ДлительностьЧасов);
							СтруктураДлительностиКонПериода.Вставить("Минут",СтрокаЭтапа.ДлительностьМинут);
							
							КонПериода	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,СтруктураДлительностиКонПериода,,БизнесПроцесс.Организация);
							
							НоваяЗадача.СрокИсполнения				= КонПериода;
						КонецЕсли;
						НоваяЗадача.CRM_ВариантВыполнения			= СтрокаЭтапа.ВариантВыполнения;
						НоваяЗадача.CRM_ВариантВыполненияСтрокой	= СтрокаЭтапа.ВариантВыполненияСтрокой;
						// ++ VOG Солодов В.В. 02.08.2019 task 463
						// ++ VOG Ульянов И.В. 22.11.2019 task 904
						АвторЗадачи = РегистрыСведений.вогНеобработанныеЗадачиБизнесПроцессов.ПолучитьАвтораЗадачи(БизнесПроцесс, ЗначениеМассива.НачальнаяТочка);
						
						Автор = АвторЗадачи;
						
						Если БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
							И БизнесПроцесс.Автор <> БизнесПроцесс.Ответственный Тогда
							
							РуководительПользователя 
								= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АвторЗадачи, "вогРуководитель");
							
							Если ЗначениеЗаполнено(РуководительПользователя) Тогда
								Автор = РуководительПользователя;
							КонецЕсли;
							
						КонецЕсли;
						
						//Автор = Пользователи.ТекущийПользователь();						
						//
						//Если БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
						//	И БизнесПроцесс.Автор <> БизнесПроцесс.Ответственный Тогда
						//	
						//	РуководительПользователя 
						//		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "вогРуководитель");
						//	
						//	Если ЗначениеЗаполнено(РуководительПользователя) Тогда
						//		Автор = РуководительПользователя;
						//	КонецЕсли;
						//	
						//КонецЕсли;
						
						// -- VOG Ульянов И.В. 22.11.2019 task 904
						
						НоваяЗадача.Автор						= Автор;
						// До изменения
						//НоваяЗадача.Автор							= Пользователи.ТекущийПользователь();
						// -- VOG Солодов В.В. 02.08.2019
						НоваяЗадача.Исполнитель						= СтруктураИсполнителя.Исполнитель;
						НоваяЗадача.РольИсполнителя					= СтруктураИсполнителя.РольИсполнителя;
						НоваяЗадача.ОсновнойОбъектАдресации			= СтруктураИсполнителя.ОсновнойОбъектАдресации;
						НоваяЗадача.ДополнительныйОбъектАдресации	= СтруктураИсполнителя.ДополнительныйОбъектАдресации;
						НоваяЗадача.Предмет							= БизнесПроцесс;
						
						Если НЕ Взаимодействие = Неопределено Тогда
							НоваяЗадача.ДополнительныеСвойства.Вставить("Взаимодействие",Взаимодействие);
						КонецЕсли;
						
						//>>Бей(03.06.2019 1:11:44):#334
						Если БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
							
							НоваяЗадача.ДополнительныеСвойства.Вставить("ТаблицаОбъектовПоПроцессу",СтруктураИсполнителя.ТаблицаОбъектовПоПроцессу);
							
						КонецЕсли;
						//<<Бей(03.06.2019 1:11:49):#334
						
						// ++ VOG Солодов В.В. 20.09.2020 CRM-572
						// Заполнение предметов
						Если ЭтоНовоеПоручение И ЗначениеЗаполнено(Задача) Тогда
							
							Для Каждого СтрокаПредмет Из Задача.вогПредметы Цикл
								НоваяСтрока = НоваяЗадача.вогПредметы.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПредмет);
							КонецЦикла;
							
						КонецЕсли;
						// -- VOG Солодов В.В. 20.09.2020 CRM-572
						
						ФормируемыеЗадачиПоТочке.Добавить(НоваяЗадача);
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
				
				ОчиститьМассивЗадач= Ложь;
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиДействияПриСозданииЗадач(БизнесПроцесс ,ЗначениеМассива.ИсходящаяТочка, ФормируемыеЗадачиПоТочке, ОчиститьМассивЗадач);
				
				Если НЕ ОчиститьМассивЗадач Тогда
					Для Каждого ЭлементМассива Из ФормируемыеЗадачиПоТочке Цикл
						ФормируемыеЗадачи.Добавить(ЭлементМассива);
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
				
				ОчиститьМассивЗадач= Ложь;
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВложенныйБизнесПроцессПриСозданииЗадач(БизнесПроцесс ,ЗначениеМассива.ИсходящаяТочка, ФормируемыеЗадачиПоТочке, ОчиститьМассивЗадач);
				
				Если НЕ ОчиститьМассивЗадач Тогда
					Для Каждого ЭлементМассива Из ФормируемыеЗадачиПоТочке Цикл
						ФормируемыеЗадачи.Добавить(ЭлементМассива);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ФормируемыеЗадачи.Количество() = 0 Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Не создано ни одной задачи в точке бизнес-процесса ""'")+ЗначениеМассива.ИсходящаяТочка.Наименование;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СформироватьМассивЗадач()

// Функция возвращает структуру с параметрами адресации для задачи.
//
// Параметры:
//	Исполнитель		- Произвольный			- Исполнитель
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс ссылка.
//	ТекущаяТочка	- СправочникСсылка		- Ссылка на текущую точку маршрута.
//	Задача			- ЗадачаСсылка			- Ссылка на задачу исполнителя.
//
// Возвращаемое значение:
//	Структура	- Структура исполнителя.
//
Функция ПолучитьАдресациюЗадачи(Исполнитель, БизнесПроцесс, ТекущаяТочка, Задача = Неопределено) Экспорт
	СтруктураИсполнителя = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
	Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		СтруктураИсполнителя.Исполнитель					= Справочники.Пользователи.ПустаяСсылка();
		СтруктураИсполнителя.РольИсполнителя				= Исполнитель.Исполнитель;
		СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
		СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
	ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач") Тогда
		Если Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор Тогда
			
			СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
			СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
			СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
			СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Ответственный Тогда
			
			СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Ответственный;
			СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
			СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
			СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.ИсполнительПредыдущейЗадачи Тогда
			
			Если НЕ Задача = Неопределено Тогда
				Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
					СтруктураИсполнителя.Исполнитель					= Задача.Исполнитель;
					СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
					СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
					СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
				Иначе
					СтруктураИсполнителя.Исполнитель					= Неопределено;
				КонецЕсли;
			Иначе
				СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
				СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			КонецЕсли;
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Руководитель Тогда
			Если НЕ Задача = Неопределено Тогда
				//+вог
				ТекущийРуководитель = вогУправлениеДоступом.ПолучитьРуководителяПодразделенияРекурсивно(Задача.Исполнитель.Подразделение);
				//Если ЗначениеЗаполнено(Задача.Исполнитель.Подразделение) И ЗначениеЗаполнено(Задача.Исполнитель.Подразделение.ТекущийРуководитель) Тогда
				Если ЗначениеЗаполнено(Задача.Исполнитель.Подразделение) И ЗначениеЗаполнено(ТекущийРуководитель) Тогда
					//+вог
					//СтруктураИсполнителя.Исполнитель					= Задача.Исполнитель.Подразделение.ТекущийРуководитель;
					СтруктураИсполнителя.Исполнитель = ТекущийРуководитель;
					//-вог
					СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
					СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
					СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
				Иначе
					СтруктураИсполнителя.Исполнитель					= Неопределено;
				КонецЕсли;
			Иначе
				СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
				СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			КонецЕсли;
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.ОсновнойМенеджер Тогда
			Если ЗначениеЗаполнено(БизнесПроцесс.Партнер) И ЗначениеЗаполнено(БизнесПроцесс.Партнер.ОсновнойМенеджер) Тогда
				СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Партнер.ОсновнойМенеджер;
				СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			Иначе
				СтруктураИсполнителя.Исполнитель					= Неопределено;
			КонецЕсли;
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан Тогда
			
			СтруктураИсполнителя.Исполнитель					= Неопределено;
				
		КонецЕсли;
	ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		СтруктураИсполнителя.Исполнитель					= Исполнитель.Исполнитель;
		СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
		СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
		СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
	ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
		Если НЕ Задача = Неопределено И Исполнитель.Исполнитель = Задача.CRM_ТочкаМаршрута Тогда
			СтруктураИсполнителя.Исполнитель					= Задача.Исполнитель;
			СтруктураИсполнителя.РольИсполнителя				= Задача.РольИсполнителя;
			СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
			СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
		Иначе
			// Харченко - Раньше запрос был прям тут, по правам не проходило
			СтруктураВыполеннойЗадачи = CRM_БизнесПроцессыСерверПривилегированный.ПолучитьСтруктуруВыполеннойЗадачи(БизнесПроцесс, Исполнитель.Исполнитель);
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("БизнесПроцесс"	, БизнесПроцесс);
			//Запрос.УстановитьПараметр("ТочкаМаршрута"	, Исполнитель.Исполнитель);
			//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Разрешенные
			//|	ЗадачаИсполнителя.Ссылка,
			//|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
			//|	ЗадачаИсполнителя.РольИсполнителя,
			//|	ЗадачаИсполнителя.Исполнитель
			//|ИЗ
			//|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			//|ГДЕ
			//|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			//|	И ЗадачаИсполнителя.CRM_ТочкаМаршрута = &ТочкаМаршрута
			//|	И ЗадачаИсполнителя.Выполнена
			//|
			//|УПОРЯДОЧИТЬ ПО
			//|	ДатаИсполнения УБЫВ";
			//Выборка = Запрос.Выполнить().Выбрать();
			//Если Выборка.Следующий() Тогда
			//	СтруктураИсполнителя.Исполнитель					= Выборка.Исполнитель;
			//	СтруктураИсполнителя.РольИсполнителя				= Выборка.РольИсполнителя;
			//	СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
			//	СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			//Иначе
			//	СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
			//	СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
			//	СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
			//	СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			//КонецЕсли;
			
			Если НЕ СтруктураВыполеннойЗадачи = Неопределено Тогда 
				СтруктураИсполнителя.Исполнитель					= СтруктураВыполеннойЗадачи.Исполнитель;
				СтруктураИсполнителя.РольИсполнителя				= СтруктураВыполеннойЗадачи.РольИсполнителя;
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= СтруктураВыполеннойЗадачи.ОсновнойОбъектАдресации;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			Иначе
				СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
				СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			КонецЕсли;

		КонецЕсли;
	//+вог
	ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		СтруктураИсполнителя.Исполнитель					= Справочники.Пользователи.ПустаяСсылка();
		СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.вогЗадачиПодразделения;
		СтруктураИсполнителя.ОсновнойОбъектАдресации		= Исполнитель.Исполнитель;
		СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
		
	ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.CRM_ДолжностныеПозиции") Тогда
		
		СтруктураИсполнителя.Исполнитель					= Справочники.Пользователи.ПустаяСсылка();
		СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.вогЗадачиДолжностнойПозиции;
		СтруктураИсполнителя.ОсновнойОбъектАдресации		= Исполнитель.Исполнитель;
		СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
		
	//-вог
	КонецЕсли;
	Возврат СтруктураИсполнителя;
КонецФункции // ПолучитьАдресациюЗадачи()

// Процедура сохраняет результат прохождения точки слияния в маршруте бизнес-процесса
// в дальнейшем эти данные нужны для получения следующей точки маршрута.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Ссылка на бизнес-процесс.
//	ТекущаяТочка	- СправочникСсылка		- Ссылка на текущую точку маршрута.
//	ИсходящаяТочка	- СправочникСсылка		- Ссылка на исходящую точку маршрута.
//
Процедура ЗаписатьРезультатСлиянияМаршрута(БизнесПроцесс, ТекущаяТочка, ИсходящаяТочка) Экспорт
	НоваяЗапись = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьМенеджерЗаписи();
	НоваяЗапись.БизнесПроцесс	= БизнесПроцесс;
	НоваяЗапись.ТочкаСлияния	= ИсходящаяТочка;
	НоваяЗапись.ВходящаяТочка	= ТекущаяТочка;
	НоваяЗапись.Записать();
КонецПроцедуры // ЗаписатьРезультатСлиянияМаршрута()

// Функция проверяет все ли ветки маршрута после точки разделения дошли до точки слияния.
//
// Параметры:
//	МассивИсходящихТочек	- Массив				- Массив структур, содержит точки маршрута.
//	БизнесПроцесс			- БизнесПроцессСсылка	- Ссылка на бизнес-процесс.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, БизнесПроцесс, ТочкаМаршрута = Неопределено, ВызовИзИнтереса = Ложь) Экспорт
	ТочкаСлияния = Неопределено;
	Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
		Если ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			ТочкаСлияния = ЗначениеМассива.ИсходящаяТочка;
			Прервать
		КонецЕсли;
	КонецЦикла;
	Если НЕ ТочкаСлияния = Неопределено Тогда
		МассивВходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВходящиеТочки(ТочкаСлияния, БизнесПроцесс.НомерВерсииКартыМаршрута);
	КонецЕсли;
	Результат = Истина;
	
	МассивТочек = Новый Массив;
	Для Каждого ЗначениеМассива Из МассивВходящихТочек Цикл
		МассивТочек.Добавить(ЗначениеМассива.ВходящаяТочка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивТочек"		,МассивТочек);
	Запрос.УстановитьПараметр("НомерВерсии"		,БизнесПроцесс.НомерВерсииКартыМаршрута);
	Запрос.УстановитьПараметр("БизнесПроцесс"	,БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаСлияния"	,ТочкаСлияния);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка КАК Ссылка,
	               |	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВетки КАК НомерВетки
	               |ПОМЕСТИТЬ Точки
	               |ИЗ
	               |	Справочник.CRM_ТочкиМаршрутов.ТочкиРазделенияСлияния КАК CRM_ТочкиМаршрутовТочкиРазделенияСлияния
	               |ГДЕ
	               |	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка В(&МассивТочек)
	               |	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВерсии = &НомерВерсии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_РезультатыСлиянияМаршрутов.ВходящаяТочка,
	               |	CRM_РезультатыСлиянияМаршрутов.ТочкаСлияния
	               |ПОМЕСТИТЬ Результат
	               |ИЗ
	               |	РегистрСведений.CRM_РезультатыСлиянияМаршрутов КАК CRM_РезультатыСлиянияМаршрутов
	               |ГДЕ
	               |	CRM_РезультатыСлиянияМаршрутов.БизнесПроцесс = &БизнесПроцесс
	               |	И CRM_РезультатыСлиянияМаршрутов.ТочкаСлияния = &ТочкаСлияния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Точки.Ссылка КАК Ссылка,
	               |	Точки.НомерВетки КАК НомерВетки,
	               |	ВЫБОР
	               |		КОГДА Результат.ТочкаСлияния ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Результат
	               |ИЗ
	               |	Точки КАК Точки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Результат КАК Результат
	               |		ПО Точки.Ссылка = Результат.ВходящаяТочка
	               |ИТОГИ
	               |	СУММА(Результат)
	               |ПО
	               |	НомерВетки";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Истина;
	
	Если ВызовИзИнтереса Тогда
		МассивТочек = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("ТочкаМаршрута, НомерВерсии",ТочкаСлияния,БизнесПроцесс.НомерВерсииКартыМаршрута));
		Пока Выборка.Следующий() Цикл
			Если Выборка.НомерВетки = МассивТочек[0].НомерВетки Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Результат = 0 Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если Выборка.Результат = 0 Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Раз все ветки дошли до точки слияния, то записи в регистре сведений уже не нужны.
	Если Результат И НЕ ВызовИзИнтереса Тогда
		Набор = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		Набор.Отбор.ТочкаСлияния.Установить(ТочкаСлияния);
		Набор.Прочитать();
		Набор.Очистить();
		Набор.Записать();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ПроверитьТочкиПередСозданиемЗадач()

// Процедура записывает ранее созданные задачи из массива формируемых задач.
// Если задача является ведущей, то создает вложенный бизнес-процесс
// вызывается процедурой ПолучитьСледующуюТочкуСформироватьЗадачи и из модуля объекта бизнес-процесса.
//
// Параметры:
//	ФормируемыеЗадачи	- Массив	- Массив, в котором находятся создаваемые задачи.
//
Процедура ЗаписатьЗадачи(ФормируемыеЗадачи, ТаблицаЭтапов,ПараметрыПериодическогоСтарта = Неопределено) Экспорт
	Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
		Если НЕ ПараметрыПериодическогоСтарта = Неопределено Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("мСостояниеСтрокой", ПараметрыПериодическогоСтарта.СостояниеСтрокой);
		КонецЕсли;
		ЗадачаОбъект.Записать();
		Если ЗадачаОбъект.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			СформироватьВложенныйБизнесПроцесс(ЗадачаОбъект.БизнесПроцесс, ЗадачаОбъект.Ссылка, ТаблицаЭтапов);
		Иначе
			//СодержаниеНапоминания = НСтр("ru = 'Новая задача: '") + ЗадачаОбъект.Наименование +"
			//|" + НСтр("ru = 'Бизнес-процесс: '") + CRM_БизнесПроцессыСервер.СформироватьПредставлениеБизнесПроцесса(ЗадачаОбъект.БизнесПроцесс) +"
			//|" + НСтр("ru = 'Срок выполнения: '") + Формат(ЗадачаОбъект.СрокИсполнения, "ДФ ='дд.ММ.гггг ЧЧ:мм'");
			//CRM_НапоминанияСервер.ДобавитьНапоминание(ЗадачаОбъект.Ссылка, СодержаниеНапоминания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьЗадачи()

// Функция возвращает номер итерации для создаваемой задачи.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Ссылка на бизнес-процесс.
//	ТочкаМаршрута	- СправочникСсылка		- Ссылка на точку маршрута.
//
// Возвращаемое значение:
//	Число	- Номер итерации
//
Функция ПолучитьИтерациюЗадачи(БизнесПроцесс, ТочкаМаршрута)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс",		БизнесПроцесс);
	Запрос.УстановитьПараметр("CRM_ТочкаМаршрута",	ТочкаМаршрута);
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителя.Ссылка) КАК Ссылка,
	|	ЗадачаИсполнителя.CRM_Итерация КАК Итерация
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.CRM_ТочкаМаршрута = &CRM_ТочкаМаршрута
	|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачаИсполнителя.CRM_Итерация
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Итерация УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Итерация;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПолучитьИтерациюЗадачи()

// Процедура проверяет является ли следующая точка разделением,
// если да, тогда удаляются записи в регистре CRM_РезультатыСлиянияМаршрутов.
//
Процедура ПроверитьНаРазделения(Задача, ТочкаМаршрута)
	
	СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Задача.CRM_ТочкаМаршрута,Задача.БизнесПроцесс.НомерВерсииКартыМаршрута,Задача.CRM_ВариантВыполнения);
	
	Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
	ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
		СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(СтруктураТочки.ИсходящаяТочка,Задача.БизнесПроцесс.НомерВерсииКартыМаршрута,Задача.CRM_ВариантВыполнения);
	КонецЕсли;
	
	Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
		
		МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка, Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
		
		Для Каждого РазделениеСтруктураТочки Из МассивСтруктурТочек Цикл
			СтруктураТочкиСлияния = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьТочкуСлияния(РазделениеСтруктураТочки.ИсходящаяТочка, Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Если НЕ СтруктураТочкиСлияния = Неопределено Тогда
				
				Набор = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
				Набор.Отбор.БизнесПроцесс.Установить(Задача.БизнесПроцесс);
				Набор.Отбор.ТочкаСлияния.Установить(СтруктураТочкиСлияния.ТочкаСлияния);
				Набор.Прочитать();
				Если Набор.Количество() > 0 Тогда
					Набор.Очистить();
					Набор.Записать();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет является ли след. точка маршрута слиянием, если да, то:
// 1. делает запись в рег. сведений 
// 2. если все ветки пройдены, то получает след. точку маршрута.
//
// Параметры:
//	Задача					- ЗадачаСсылка	- Ссылка на задачу.
//	МассивИсходящихТочек	- Массив		- Массив структур, содержит точки маршрута.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция ПроверитьНаСлияниеЗаписатьРезультат(Задача, МассивИсходящихТочек)
	Если (МассивИсходящихТочек.Количество() = 1) И (МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние) Тогда
		ЗаписатьРезультатСлиянияМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ТекущаяТочка, МассивИсходящихТочек[0].ИсходящаяТочка);
		Если ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс) Тогда
			// Получим следующую точку и проверим не слияние ли это.
			ТекТочка = МассивИсходящихТочек[0].ИсходящаяТочка;
			Пока Истина Цикл
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, ТекТочка);
				Если (МассивИсходящихТочек.Количество() = 1) 
					И (МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние) Тогда
					// Если точка является слиянием, то для нее надо сделать соответствующую запись в регистре сведений результата
					// слияния.
					ЗаписатьРезультатСлиянияМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ТекущаяТочка,
						МассивИсходящихТочек[0].ИсходящаяТочка);
					ТекТочка = МассивИсходящихТочек[0].ИсходящаяТочка;
					// Проверим текущее слияние на возможность продолжения маршрута,
					Если НЕ ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс) Тогда
						Возврат Истина;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПроверитьНаСлияниеЗаписатьРезультат()

// Процедура проверяет не является ли след. точка маршрута точкой завершения
// если да, то создавать задачи не надо.
//
// Параметры:
//	Задача					- ЗадачаСсылка	- Ссылка на задачу.
//	МассивИсходящихТочек	- Массив		- Массив структур, содержит точки маршрута.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция ПроверитьНаЗавершение(Задача, МассивИсходящихТочек)
	
	// ++ VOG Солодов В.В. 06.08.2020 CRM-572
	Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеНовое Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",			Задача);
		Запрос.УстановитьПараметр("БизнесПроцесс",	Задача.БизнесПроцесс);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И (НЕ ЗадачаИсполнителя.Выполнена)
		|	И (НЕ ЗадачаИсполнителя.Ссылка = &Ссылка)";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		Отказ = Не РезультатЗапроса.Пустой();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 06.08.2020 CRM-572
	
	Если (МассивИсходящихТочек.Количество() = 1) И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
		// В таком случае бизнес-процесс завершаем.
		БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.ВариантЗавершения	= МассивИсходящихТочек[0].ИсходящаяТочка.ВариантЗавершения;
		БизнесПроцессОбъект.ДатаЗавершения		= ТекущаяДатаСеанса();
		БизнесПроцессОбъект.Завершен = Истина;
		БизнесПроцессОбъект.Записать();
		Если ЗначениеЗаполнено(БизнесПроцессОбъект.ВедущаяЗадача) Тогда
			Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков
			И ЗначениеЗаполнено(БизнесПроцессОбъект.ВедущаяЗадача.CRM_ПеренестиСрокИсполненияНа) Тогда
				Если НЕ БизнесПроцессОбъект.ВедущаяЗадача.Выполнена Тогда
					НачатьТранзакцию();
					Попытка
						
						ЗадачаОбъект = БизнесПроцессОбъект.ВедущаяЗадача.ПолучитьОбъект();
						ЗадачаОбъект.Заблокировать();
						
						Если БизнесПроцессОбъект.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Успешно Тогда
							ЗадачаОбъект.СрокИсполнения = ЗадачаОбъект.CRM_ПеренестиСрокИсполненияНа;
							ЗадачаОбъект.CRM_ПеренестиСрокИсполненияНа = Дата("00010101");
							СтрокаРезультата = Символы.ПС + Символы.ПС + Формат(БизнесПроцессОбъект.ДатаЗавершения,"ДЛФ=DT") + НСтр("ru = '/ Перенос срока исполнения одобрен / '") + Строка(Задача.Исполнитель) + Символы.ПС + Задача.РезультатВыполнения;
						Иначе
							ЗадачаОбъект.CRM_ПеренестиСрокИсполненияНа = Дата("00010101");
							СтрокаРезультата = Символы.ПС + Символы.ПС + Формат(БизнесПроцессОбъект.ДатаЗавершения,"ДЛФ=DT'") + НСтр("ru = '/ В переносе срока исполнения отказано / '") + Строка(Задача.Исполнитель) + Символы.ПС + Задача.РезультатВыполнения;
						КонецЕсли;
						
						ЗадачаОбъект.РезультатВыполнения = ЗадачаОбъект.РезультатВыполнения + СтрокаРезультата;
						ЗадачаОбъект.Записать();
						ЗадачаОбъект.Разблокировать();
						
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
					КонецПопытки;
				КонецЕсли;
			Иначе
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(БизнесПроцессОбъект.ВедущаяЗадача.CRM_ТочкаМаршрута, БизнесПроцессОбъект.ВедущаяЗадача.БизнесПроцесс.НомерВерсииКартыМаршрута);
				ЗадачаОбъект = БизнесПроцессОбъект.ВедущаяЗадача.ПолучитьОбъект();
				// Если после точки вложенного БП по карте идет точка условия, то в зависимости от того, как
				// закончился вложенный БП (успешно или неудачно) пропишем вариант выполнения у ведущей задачи
				// для того, чтобы корректно получить следующую точку маршрута.
				Если МассивИсходящихТочек.Количество() = 1 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
					ЗадачаОбъект.CRM_ВариантВыполнения = ?(БизнесПроцессОбъект.ВариантЗавершения=Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,0,1);
					ЗадачаОбъект.Записать();
				КонецЕсли;
				ЗадачаОбъект.ВыполнитьЗадачу();
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПроверитьНаЗавершение()

// Процедура если точка задачи групповая, то делается проверка на выполнение всех задач
// созданных по этой точке и с текущей итерацией.
//
//
// Параметры:
//	Задача	- ЗадачаСсылка	- Ссылка на задачу.
//	Отказ	- Булево		- Флаг отмены.
//
Процедура ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, Отказ) Экспорт
	// Проверим групповая ли точка, если да, то проверим все ли задачи завершены
	// если не все задачи, то не создаем новую.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",				Задача);
	Запрос.УстановитьПараметр("БизнесПроцесс",		Задача.БизнесПроцесс);
	Запрос.УстановитьПараметр("CRM_Итерация",		Задача.CRM_Итерация);
	Запрос.УстановитьПараметр("CRM_ТочкаМаршрута",	Задача.CRM_ТочкаМаршрута);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |	И ЗадачаИсполнителя.CRM_Итерация = &CRM_Итерация
	               |	И ЗадачаИсполнителя.CRM_ТочкаМаршрута = &CRM_ТочкаМаршрута
	               |	И (НЕ ЗадачаИсполнителя.Выполнена)
	               |	И (НЕ ЗадачаИсполнителя.Ссылка = &Ссылка)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Отказ = Выборка.Следующий();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // ПроверитьВыполнениеГрупповойПереадресованнойЗадачи()

// Процедура создает вложенные бизнес-процессы.
//
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс ссылка.
//	ВедущаяЗадача	- ЗадачаСсылка			- Ссылка на задачу исполнителя.
//
Процедура СформироватьВложенныйБизнесПроцесс(БизнесПроцесс, ВедущаяЗадача, ТаблицаЭтапов)
	
	СтрокаТаблицыЭтапов = ТаблицаЭтапов.Найти(ВедущаяЗадача.CRM_ТочкаМаршрута,"ТочкаМаршрута");
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.ВедущаяЗадача			= ВедущаяЗадача;
	НовыйБизнесПроцесс.ГлавнаяЗадача			= ВедущаяЗадача;
	НовыйБизнесПроцесс.Дата						= ТекущаяДатаСеанса();
	НовыйБизнесПроцесс.ДатаСтарта				= ТекущаяДатаСеанса();
	НовыйБизнесПроцесс.Организация				= БизнесПроцесс.Организация;
	НовыйБизнесПроцесс.Подразделение			= БизнесПроцесс.Подразделение;
	НовыйБизнесПроцесс.Партнер					= БизнесПроцесс.Партнер;
	НовыйБизнесПроцесс.КонтактноеЛицо			= БизнесПроцесс.КонтактноеЛицо;
	НовыйБизнесПроцесс.Важность					= БизнесПроцесс.Важность;
	НовыйБизнесПроцесс.Автор					= ВедущаяЗадача.Исполнитель;
	НовыйБизнесПроцесс.Ответственный			= ВедущаяЗадача.Исполнитель;
	// ++ Тищенко В.В. 12.03.2019
	// Добавление предмета 
	НовыйБизнесПроцесс.Предмет					= БизнесПроцесс.Предмет;
	// -- Тищенко В.В. 
	ЕстьШаблон = ЗначениеЗаполнено(СтрокаТаблицыЭтапов.Шаблон);
	Если ЕстьШаблон Тогда
		Если ТипЗнч(СтрокаТаблицыЭтапов.Шаблон) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
			Если ЗначениеЗаполнено(БизнесПроцесс.Проект) Тогда
				НовыйБизнесПроцесс.Проект = БизнесПроцесс.Проект;
				CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(НовыйБизнесПроцесс,БизнесПроцесс.Проект);
			КонецЕсли;
			НовыйБизнесПроцесс.КартаМаршрута			= СтрокаТаблицыЭтапов.Шаблон;
			НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= СтрокаТаблицыЭтапов.Шаблон.НомерВерсии;
			НовыйБизнесПроцесс.Наименование				= СтрокаТаблицыЭтапов.Шаблон.Наименование;
		Иначе
			НовыйБизнесПроцесс.Проект					= СтрокаТаблицыЭтапов.Шаблон;
			НовыйБизнесПроцесс.Наименование				= СтрокаТаблицыЭтапов.Шаблон.Наименование;
			CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(НовыйБизнесПроцесс,СтрокаТаблицыЭтапов.Шаблон);
			НовыйБизнесПроцесс.КартаМаршрута			= СтрокаТаблицыЭтапов.Шаблон.КартаМаршрута;
			НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= СтрокаТаблицыЭтапов.Шаблон.КартаМаршрута.НомерВерсии;
		КонецЕсли;
		СписокТочекБезИсполнителя = Новый СписокЗначений;
		СписокВариантовСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
		Если СписокВариантовСтарта.Количество() = 1 Тогда
			НовыйБизнесПроцесс.ТочкаСтарта = СписокВариантовСтарта[0].Значение;
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(СтрокаТаблицыЭтапов.Шаблон, НовыйБизнесПроцесс.ТочкаСтарта);
			Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
				регИсполнителиТекущейТочки = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				регИсполнителиТекущейТочки.Отбор.Объект.Установить(СтрокаТаблицыЭтапов.Шаблон);
				регИсполнителиТекущейТочки.Отбор.ТочкаМаршрута.Установить(ЗначениеМассива.ИсходящаяТочка);
				регИсполнителиТекущейТочки.Прочитать();
				Для Каждого СтрокаИсполнителя Из регИсполнителиТекущейТочки Цикл
					Если СтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан Тогда
						СписокТочекБезИсполнителя.Добавить(ЗначениеМассива.ИсходящаяТочка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВложенныйБизнесПроцессПриСозданииВложенногоБизнесПроцесса(НовыйБизнесПроцесс, ВедущаяЗадача);
	НовыйБизнесПроцесс.Записать();
	
	Если БизнесПроцесс.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения КАК ДатаВыполнения
		|ИЗ
		|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
		|ГДЕ
		|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВыполнения УБЫВ";
		Запрос.УстановитьПараметр("Объект",НовыйБизнесПроцесс.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТаблицыЭтапов.ДатаВыполнения = Выборка.ДатаВыполнения;
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(СтрокаТаблицыЭтапов.ТочкаМаршрута, СтрокаТаблицыЭтапов.Объект.НомерВерсииКартыМаршрута, СтрокаТаблицыЭтапов.ВариантВыполнения);
			РассчитатьДатыВыполненияЭтаповПоМаршруту(СтрокаТаблицыЭтапов.Объект.НомерВерсииКартыМаршрута, СтрокаТаблицыЭтапов.Объект.Организация, СтруктураТочки.ИсходящаяТочка, ТаблицаЭтапов, СтрокаТаблицыЭтапов.ДатаВыполнения, СтрокаТаблицыЭтапов.ВариантВыполнения);
		КонецЕсли;
	КонецЕсли;
	
	CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВложенныйБизнесПроцессПослеСозданияВложенногоБизнесПроцесса(НовыйБизнесПроцесс, ВедущаяЗадача);
	Если ЕстьШаблон Тогда
		Если (СписокВариантовСтарта.Количество() = 1) И (СписокТочекБезИсполнителя.Количество() = 0)Тогда
			НовыйБизнесПроцесс.Старт();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СформироватьВложенныйБизнесПроцесс()


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за формирование точек маршрута карты маршрута.

// Процедура заполняет карту маршрута по макету.
//
// Параметры:
//	КартаМаршрута	- СправочникСсылка	- Карта маршрута.
//	ИмяМакета		- Строка			- Имя макета.
//
Процедура ЗаполнитьКартуМаршрутаПоМакету(КартаМаршрута, ИмяФайла) Экспорт
	
	НомерНовойВерсии	= 0;
	КартаОбъект			= КартаМаршрута.ПолучитьОбъект();
	
	// Прочитаем данные из XML файла.
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	Если Не ЧтениеXML.Прочитать() Тогда
		Возврат;
	ИначеЕсли НЕ ЧтениеXML.Имя = "НастройкиКартыМаршрута" Тогда
		Возврат;
	КонецЕсли;
	
	СхемаМаршрута		= Неопределено;
	НастройкиЭтапов		= Неопределено;
	ИсполнителиЭтапов	= Неопределено;
	ОбъектыЭтапов		= Неопределено;
	
	ЛокальноеИмя = "";
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Тогда 
			Хранилище = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			
			Если ЛокальноеИмя = "КартаМаршрута" Тогда
				СхемаМаршрута = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "НастройкиЭтапов" Тогда
				НастройкиЭтапов = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "ИсполнителиЭтапов" Тогда
				ИсполнителиЭтапов = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "ОбъектыЭтапов" Тогда
				ОбъектыЭтапов = Хранилище.Получить();
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если ЛокальноеИмя = "Комментарий" Тогда
				КартаОбъект.Комментарий = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНастроек = Новый Структура("НастройкиМаршрута, Исполнители, Объекты",НастройкиЭтапов, ИсполнителиЭтапов, ОбъектыЭтапов);
	
	// Далее временное решение ибо не понятно как обойтись без записи и создания новой ГС.
	
	ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(".grs");
	СхемаМаршрута.Записать(ПутьКВременномуФайлу);
	НоваяСхема	= Новый ГрафическаяСхема;
	НоваяСхема.Прочитать(ПутьКВременномуФайлу);
	АдресСхемы	= ПоместитьВоВременноеХранилище(НоваяСхема, Новый УникальныйИдентификатор);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКВременномуФайлу, КодировкаТекста.UTF8);
	
	СтруктураДанных = CRM_БизнесПроцессыЭкспортныеМетоды.ПрочитатьГрафическуюСхемуСформироватьДеревоТочек(СхемаМаршрута, ТекстовыйДокумент);
	ТаблицаТочек	= СтруктураДанных.ТабТочекМаршрута;
	Если КартаОбъект.НомерВерсии = 0 Тогда
		CRM_БизнесПроцессыЭкспортныеМетоды.ОчиститьВходящиеИсходящиеТочки(КартаОбъект.Ссылка,НомерНовойВерсии);
	КонецЕсли;
	НомерНовойВерсии = КартаОбъект.НомерВерсии+1;
	ДатаНовойВерсии = ТекущаяДатаСеанса();
	КартаОбъект.НомерВерсии = НомерНовойВерсии;
	CRM_БизнесПроцессыЭкспортныеМетоды.СформироватьТочкиМаршрута(ТаблицаТочек, КартаОбъект.Ссылка, НомерНовойВерсии);
	CRM_БизнесПроцессыЭкспортныеМетоды.УстановитьПометкуУдаленияНеАктуальныхТочек(КартаОбъект.Ссылка);
	CRM_БизнесПроцессыЭкспортныеМетоды.УстановитьАктуальностьТочекОтносительноПоследнейВерсии(КартаОбъект.Ссылка,КартаОбъект.НомерВерсии);
	Если НЕ НомерНовойВерсии = 0 Тогда
		СтрокаКарты = КартаОбъект.ВерсииКартыМаршрута.Найти(НомерНовойВерсии, "НомерВерсии");
		Если СтрокаКарты = Неопределено Тогда
			СтрокаКарты = КартаОбъект.ВерсииКартыМаршрута.Добавить();
			СтрокаКарты.КартаМаршрута = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемы));
		Иначе	
			СтрокаКарты.КартаМаршрута = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемы));
		КонецЕсли;
		СтрокаКарты.НомерВерсии		= НомерНовойВерсии;
		СтрокаКарты.ДатаСоздания	= ДатаНовойВерсии;
		НомерНовойВерсии = 0;
	КонецЕсли;
	КартаОбъект.ОписаниеБизнесПроцессаВСодержаниеЗадачи	= Истина;
	КартаОбъект.ИсторияБизнесПроцессаВСодержаниеЗадачи	= Истина;
	КартаОбъект.УказыватьСрокВыполненияЭтапов			= (КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение);
	КартаОбъект.УказыватьПричинуНеудачногоЗавершения	= Истина;
	КартаОбъект.СостояниеПроцесса						= Перечисления.bpmСостояниеПроцесса.Действует;
	КартаОбъект.Записать();
	
	СформироватьМаршрутИИсполнителейКартыМаршрута(КартаОбъект.Ссылка, СтруктураНастроек);
	
	// Для точек "неудачных" завершения пропишем вариант завершения.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",	КартаОбъект.Ссылка);
	Запрос.УстановитьПараметр("Имя",		"ЗавершениеНеудача");
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутов.Ссылка
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
	|ГДЕ
	|	CRM_ТочкиМаршрутов.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутов.Вид = Значение(Перечисление.CRM_ВидыТочекМаршрута.Завершение)
	|	И CRM_ТочкиМаршрутов.Имя = &Имя";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Точка = Выборка.Ссылка.ПолучитьОбъект();
		Точка.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно;
		Точка.Записать();
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКартуМаршрутаПоМакету()

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за старт периодических бизнес-процессов.

//
//
Функция ПолучитьВозможныеТочкуАвтоСтартаБизнесПроцесса(КартаМаршрутаПроцесс) Экспорт
	
	СписокТочекСтарта = Новый СписокЗначений;
	
	Если ТипЗнч(КартаМаршрутаПроцесс) = Тип("СправочникСсылка.Проекты") Тогда
		КартаМаршрута = КартаМаршрутаПроцесс.CRM_КартаМаршрута;
	ИначеЕсли ТипЗнч(КартаМаршрутаПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		КартаМаршрута = КартаМаршрутаПроцесс;
	КонецЕсли;
	
	СписокВариантовСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
	Для Каждого ЭлементСписка Из СписокВариантовСтарта Цикл
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(КартаМаршрута, ЭлементСписка.Значение);
		СписокТочекБезИсполнителя = Новый СписокЗначений;
		Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
			Если НЕ ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
				СписокТочекБезИсполнителя.Добавить(ЗначениеМассива.ИсходящаяТочка);
				Продолжить;
			КонецЕсли;
			регИсполнителиТекущейТочки = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
			регИсполнителиТекущейТочки.Отбор.Объект.Установить(КартаМаршрутаПроцесс);
			регИсполнителиТекущейТочки.Прочитать();
			
			Если ТипЗнч(КартаМаршрутаПроцесс) = Тип("СправочникСсылка.Проекты") Тогда
				Если регИсполнителиТекущейТочки.Количество() = 0 Тогда
					регИсполнителиТекущейТочки.Отбор.Сбросить();
					регИсполнителиТекущейТочки.Отбор.Объект.Установить(КартаМаршрута);
					регИсполнителиТекущейТочки.Прочитать();
				КонецЕсли;
			КонецЕсли;
			
			регИсполнителиТекущейТочки.Отбор.ТочкаМаршрута.Установить(ЗначениеМассива.ИсходящаяТочка);
			регИсполнителиТекущейТочки.Прочитать();
			Для Каждого СтрокаИсполнителя Из регИсполнителиТекущейТочки Цикл
				Если СтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан Тогда
					СписокТочекБезИсполнителя.Добавить(ЗначениеМассива.ИсходящаяТочка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СписокТочекСтарта.Добавить(ЭлементСписка.Значение,,(СписокТочекБезИсполнителя.Количество() = 0));
	КонецЦикла;
	
	Возврат СписокТочекСтарта;
	
КонецФункции

//
//
Процедура ВыполнитьСтартПериодическихБизнесПроцессов() Экспорт
	
	Организация = Неопределено;
	ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Организация = ЗначениеНастройки;
	Иначе
		Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.Ссылка КАК Проект,
	|	Проекты.CRM_КартаМаршрута КАК КартаМаршрута,
	|	Проекты.CRM_Расписание КАК Расписание
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.CRM_Периодический
	|	И НЕ Проекты.CRM_КартаМаршрута = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.ПустаяСсылка)
	|	И НЕ Проекты.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьЖурналаРегистрации("Старт периодических бизнес-процессов",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начат старт периодических бизнес-процессов'"));
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыАвтостарта = Выборка.Проект.CRM_ПараметрыАвтостарта.Получить();
		Расписание = Выборка.Расписание.Получить();
		
		Если Расписание = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПараметрыАвтостарта = Неопределено И Расписание.ТребуетсяВыполнение() Тогда
			Попытка
				НастройкиЭтаповБизнесПроцесса = ПараметрыАвтостарта.НастройкиЭтаповБизнесПроцесса;
				
				Копия = ПараметрыАвтостарта.НастройкиЭтаповБизнесПроцесса;
				Копия.Сортировать("ДатаНачала Возр");
				
				Смещение = 0;
				Для Каждого СтрокаНастройки Из Копия Цикл
					Если ЗначениеЗаполнено(СтрокаНастройки.ДатаНачала) Тогда
						Смещение = (ТекущаяДатаСеанса() - СтрокаНастройки.ДатаНачала);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаНастройки Из Копия Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаНастройки.ДатаНачала) Тогда
						Продолжить;
					КонецЕсли;
					
					ДатаНачала		= СтрокаНастройки.ДатаНачала;
					ДатаВыполнения	= СтрокаНастройки.ДатаВыполнения;
					
					Результат = CRM_ОбщегоНазначенияСервер.ПолучитьТрудозатратыЗаПериод(ДатаНачала, ДатаВыполнения,,Организация,,Истина);
					
					Дней = Цел(Результат.ВМинутах/(Результат.ПродолжительностьРабочегоДняВЧасах*60));
					Часов = ЦЕЛ((Результат.ВМинутах - (Дней*Результат.ПродолжительностьРабочегоДняВЧасах*60))/60);
					Минут = Результат.ВМинутах - ((Дней*Результат.ПродолжительностьРабочегоДняВЧасах*60) + (Часов*60));
					
					СтруктураДлительностиЭтапа = Новый Структура();
					СтруктураДлительностиЭтапа.Вставить("Дней"	,Дней);
					СтруктураДлительностиЭтапа.Вставить("Часов"	,Часов);
					СтруктураДлительностиЭтапа.Вставить("Минут"	,Минут);
					
					СтрокаНастройки.ДатаНачала = ДатаНачала + Смещение;
					СтрокаНастройки.ДатаВыполнения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаНастройки.ДатаНачала,СтруктураДлительностиЭтапа,,Организация);
					
					НайденнаяСтрока = НастройкиЭтаповБизнесПроцесса.Найти(СтрокаНастройки.ТочкаМаршрута,"ТочкаМаршрута");
					Если НЕ НайденнаяСтрока = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НайденнаяСтрока,СтрокаНастройки);
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыАвтостарта.НастройкиЭтаповБизнесПроцесса = НастройкиЭтаповБизнесПроцесса;
			
				НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
				НовыйБизнесПроцесс.Дата						= ТекущаяДатаСеанса();
				НовыйБизнесПроцесс.ДатаСтарта				= ТекущаяДатаСеанса();
				НовыйБизнесПроцесс.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
				НовыйБизнесПроцесс.Автор					= Выборка.Проект.Ответственный;
				НовыйБизнесПроцесс.Ответственный			= Выборка.Проект.Ответственный;
				НовыйБизнесПроцесс.Организация				= Организация;
				НовыйБизнесПроцесс.Проект					= Выборка.Проект;
				
				CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(НовыйБизнесПроцесс,Выборка.Проект);
				
				НовыйБизнесПроцесс.КартаМаршрута					= Выборка.КартаМаршрута;
				НовыйБизнесПроцесс.НомерВерсииКартыМаршрута			= Выборка.КартаМаршрута.НомерВерсии;
				НовыйБизнесПроцесс.ТочкаСтарта						= ПараметрыАвтостарта.ТочкаСтарта;
				НовыйБизнесПроцесс.мПараметрыПериодическогоСтарта	= ПараметрыАвтостарта;
				НовыйБизнесПроцесс.Записать();
				НовыйБизнесПроцесс.Старт();
			Исключение
				
				ЗаписьЖурналаРегистрации("Старт периодических бизнес-процессов",
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Старт периодических бизнес-процессов", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончен старт периодических бизнес-процессов'"));
	
КонецПроцедуры


Процедура ПриЗаписиОбъектаБизнесПроцесса(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТипПоддерживается = Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.СодержитТип(ТипЗнч(Источник.Ссылка));
	Если ТипПоддерживается Тогда
		
		МетаданныеДокумента = Источник.Метаданные();
		
		МассивРеквизитов = Новый Массив;
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
			Если ЗначениеЗаполнено(Источник[ИмяРеквизита]) 
			И Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.СодержитТип(ТипЗнч(Источник[ИмяРеквизита])) Тогда
				Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
				Набор.Отбор.Объект.Установить(Источник[ИмяРеквизита]);
				Набор.Прочитать();
				Если Набор.Количество() > 0 Тогда
					Для Каждого ЗаписьНабора Из Набор Цикл
						НаборПоИсточнику = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
						НаборПоИсточнику.Отбор.БизнесПроцесс.Установить(ЗаписьНабора.БизнесПроцесс);
						НаборПоИсточнику.Отбор.Объект.Установить(Источник.Ссылка);
						НаборПоИсточнику.Прочитать();
						//ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
						//ЗаписьРегистра.БизнесПроцесс	= ЗаписьНабора.БизнесПроцесс;
						//ЗаписьРегистра.Задача			= ЗаписьНабора.Задача;
						//ЗаписьРегистра.ТочкаМаршрута	= ЗаписьНабора.ТочкаМаршрута;
						//ЗаписьРегистра.Объект			= Источник.Ссылка;
						//ЗаписьРегистра.Прочитать();
						//Если НЕ ЗаписьРегистра.Выбран() Тогда
						Если НаборПоИсточнику.Количество() = 0 Тогда
							ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
							ЗаписьРегистра.БизнесПроцесс	= ЗаписьНабора.БизнесПроцесс;
							ЗаписьРегистра.Задача			= ЗаписьНабора.Задача;
							ЗаписьРегистра.ТочкаМаршрута	= ЗаписьНабора.ТочкаМаршрута;
							ЗаписьРегистра.Объект			= Источник.Ссылка;
							ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
							
							Выборка = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Выбрать();
							Пока Выборка.Следующий() Цикл
								Если Выборка.ТипЗначения.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
									ЗаписьРегистра.ВидОбъекта = Выборка.Ссылка;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							ЗаписьРегистра.Записать();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
 	КонецЕсли;
	
КонецПроцедуры


Процедура ЗафиксироватьИсполнителяЭтапаПоручения(Задача, Исполнитель) Экспорт
	
	// { VOG RMV 2019-03-18
	Если НЕ ЗначениеЗаполнено(Задача.БизнесПроцесс) Тогда
		Возврат;
	КонецЕсли;	
	// } VOG RMV 2019-03-18	
	
	Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
		
		НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборИсполнителей.Отбор.Объект.Установить(Задача.БизнесПроцесс);
		НаборИсполнителей.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
		НаборИсполнителей.Прочитать();
		
		НаборИсполнителей[0].Исполнитель = Исполнитель;
		НаборИсполнителей.Записать();
		// здесь возможно добавить подчиненных по ветке
		
		// ++ Тищенко В.В. 08.04.2019
		// Перенаправление задачи запись в служебный регитср для RLS
		МенеджерЗаписи 					= РегистрыСведений.вогИсполнителиЭтаповБизнесПроцесс.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.БизнесПроцесс 	= Задача.БизнесПроцесс;
		МенеджерЗаписи.Задача 			= Задача;
		МенеджерЗаписи.Исполнитель 		= Исполнитель;
		// -- Тищенко В.В. 
		
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиСервер.ПринятьЗапланированныеВзаимодействияПоЗадаче(Задача, Исполнитель);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за создание и старт бизнес-процессов по сделке.

//
//
Функция ВернутьСсылкуНаБизнесПроцессПоСделке(Ссылка, ИзмененыИсполнители = Ложь, ЗНАЧ Исполнители = Неопределено, ИзмененаДлительность = Ложь, ДатаСтартаБП) Экспорт
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата						= Ссылка.Дата;
	НовыйБизнесПроцесс.ДатаСтарта				= Ссылка.Дата;
	НовыйБизнесПроцесс.Организация				= Ссылка.Организация;
	НовыйБизнесПроцесс.Подразделение			= Ссылка.Подразделение;
	НовыйБизнесПроцесс.Партнер					= Ссылка.Клиент;
	НовыйБизнесПроцесс.КонтактноеЛицо			= Ссылка.КонтактноеЛицо;
	НовыйБизнесПроцесс.Важность					= Ссылка.Важность;
	НовыйБизнесПроцесс.Автор					= Пользователи.ТекущийПользователь();
	НовыйБизнесПроцесс.Ответственный			= Пользователи.ТекущийПользователь();
	НовыйБизнесПроцесс.Предмет					= Ссылка;
	
	НовыйБизнесПроцесс.Наименование				= Ссылка.Тема;
	НовыйБизнесПроцесс.Проект					= Ссылка.Проект;
	НовыйБизнесПроцесс.Сумма					= Ссылка.СуммаПотенциал;
	НовыйБизнесПроцесс.Описание					= Ссылка.Описание;
	НовыйБизнесПроцесс.КартаМаршрута			= Ссылка.КартаМаршрута;
	НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= Ссылка.НомерВерсииКартыМаршрута;
	
	СписокТочекСтарта							= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
	НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
	
	CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(НовыйБизнесПроцесс,НовыйБизнесПроцесс.Проект);
	
	Если ИзмененыИсполнители Тогда
		НовыйБизнесПроцесс.мИсполнители								= Исполнители;
		НовыйБизнесПроцесс.мТребуетсяСохранитьИсполнителейЭтапов	= Истина;
	КонецЕсли;
	
	Если ИзмененаДлительность Тогда
		НовыйБизнесПроцесс.мИсполнители = Исполнители;
		НовыйБизнесПроцесс.мТребуетсяСкорректироватьДлительностьЭтапов = Истина;
	КонецЕсли;
	
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();
	
	ДатаСтартаБП = НовыйБизнесПроцесс.ДатаСтарта;
	
	Возврат НовыйБизнесПроцесс.Ссылка;
	
КонецФункции

//
//
Процедура ЗафиксироватьИзмененияНастроекБизнесПроцессаИзСделки(Ссылка, Исполнители = Неопределено, ИзмененыИсполнители = Ложь,ИзмененаДлительность = Ложь) Экспорт
	
	БизнесПроцессОбъект = Ссылка.ПолучитьОбъект();
	
	Если ИзмененыИсполнители Тогда
		БизнесПроцессОбъект.мИсполнители								= Исполнители;
		БизнесПроцессОбъект.мТребуетсяСохранитьИсполнителейЭтапов	= Истина;
	КонецЕсли;
	
	Если ИзмененаДлительность Тогда
		БизнесПроцессОбъект.мИсполнители = Исполнители;
		БизнесПроцессОбъект.мТребуетсяСкорректироватьДлительностьЭтапов = Истина;
	КонецЕсли;
	
	БизнесПроцессОбъект.Записать();
	
КонецПроцедуры

//
//
Функция ПроверитьНаличиеПроектаСтартоватьБизнесПроцесс(Объект, Проект) Экспорт
	
	Если ЗначениеЗаполнено(Проект)
		И ЗначениеЗаполнено(Проект.CRM_КартаМаршрута)
		И Проект.CRM_КартаМаршрута.СтартоватьВФоновомРежимеИзДокументов Тогда
		
		СтруктураОснования = Новый Структура("Основание,КартаМаршрута", Объект, Проект.CRM_КартаМаршрута);
		НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
		НовыйБизнесПроцесс.Заполнить(СтруктураОснования);
		НовыйБизнесПроцесс.Записать();
		НовыйБизнесПроцесс.Старт();
		
		Возврат НовыйБизнесПроцесс.Ссылка;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие получение всех этапов после указанного этапа.

Функция ПолучитьСледующиеТочкиДобавитьВМассив(НомерВерсии, ТекущийЭтап, МассивТочек, ТаблицаПройденных = Неопределено, ПисатьВМассив = Ложь, ТочкаВхождения, ПроходимРазделение = Ложь)
	
	Если ТаблицаПройденных = Неопределено Тогда
		ТаблицаПройденных = Новый ТаблицаЗначений;
		ТаблицаПройденных.Колонки.Добавить("ТочкаМаршрута");
	КонецЕсли;
	
	ТекущаяТочка = ТекущийЭтап;
	
	Если ПроходимРазделение Тогда
		КонтрольныйВидТочки = Перечисления.CRM_ВидыТочекМаршрута.Слияние;
	Иначе
		КонтрольныйВидТочки = Перечисления.CRM_ВидыТочекМаршрута.Завершение;
	КонецЕсли;
	
	Пока ТекущаяТочка.Вид <> Перечисления.CRM_ВидыТочекМаршрута.Завершение Цикл
			
		Результат = ТаблицаПройденных.Найти(ТекущаяТочка,"ТочкаМаршрута");
		Если Результат = Неопределено Тогда
			НоваяСтрока = ТаблицаПройденных.Добавить();
			НоваяСтрока.ТочкаМаршрута = ТекущаяТочка;
		ИначеЕсли ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			Возврат ТекущаяТочка;
		Иначе
			Прервать;
		КонецЕсли;
		
		Если ТекущаяТочка = ТочкаВхождения Тогда
			ПисатьВМассив = Истина;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			
			Если ПисатьВМассив Тогда
				МассивТочек.Добавить(ТекущаяТочка);
			КонецЕсли;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка Тогда
			
			СтруктураТочки		= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии);
			ТекущаяТочка		= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			
			МассивИсходящихТочек = ТекущаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("НомерВерсии",НомерВерсии));
			
			ТекущееСостояние = ПисатьВМассив;
			
			Слияние = Неопределено;
			
			Для Каждого СтрокаИсходящейТочки ИЗ МассивИсходящихТочек Цикл
				
				РезультатПрохождения = ПолучитьСледующиеТочкиДобавитьВМассив(НомерВерсии, СтрокаИсходящейТочки.ТочкаМаршрута, МассивТочек, ТаблицаПройденных, ПисатьВМассив, ТочкаВхождения, ПроходимРазделение);
				
				Если НЕ РезультатПрохождения = Неопределено Тогда
					Слияние = РезультатПрохождения;
				КонецЕсли;
				
				Если НЕ ТекущееСостояние И ПисатьВМассив Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроходимРазделение Тогда
				Возврат Слияние;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			
			МассивИсходящихТочек = ТекущаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("НомерВерсии",НомерВерсии));
			
			ТекущееСостояние = ПисатьВМассив;
			Слияние = Неопределено;
			
			МассивТочекРазделения = Новый Массив;
			
			Для Каждого СтрокаИсходящейТочки ИЗ МассивИсходящихТочек Цикл
				
				Слияние = ПолучитьСледующиеТочкиДобавитьВМассив(НомерВерсии, СтрокаИсходящейТочки.ТочкаМаршрута, МассивТочекРазделения, ТаблицаПройденных, ПисатьВМассив, ТочкаВхождения, Истина);
				
				Если НЕ ТекущееСостояние И ПисатьВМассив Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТочкаИзРазделения ИЗ МассивТочекРазделения Цикл
				МассивТочек.Добавить(ТочкаИзРазделения);
			КонецЦикла;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Слияние, НомерВерсии);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			
			Возврат ТекущаяТочка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроходимРазделение И ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
		Возврат Слияние;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМассивТочекПосле(БизнесПроцесс, ТочкаВхождения = Неопределено) Экспорт
	
	МассивТочек = Новый Массив;
	ПолучитьСледующиеТочкиДобавитьВМассив(БизнесПроцесс.НомерВерсииКартыМаршрута, БизнесПроцесс.ТочкаСтарта, МассивТочек,,,ТочкаВхождения);
	
	Возврат МассивТочек;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за создание и старт бизнес-процессов по запросам.

Процедура ОтправитьЗапросНаПереносСрокаИсполнения(ВедущаяЗадача, ТекстЗапроса = "", ПараметрыПроцесса = Неопределено) Экспорт // VOG Солодов В.В. 20.01.2021 DEV-57 // Добавил параметр ПараметрыПроцесса
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата						= ТекущаяДатаСеанса();
	НовыйБизнесПроцесс.ДатаСтарта				= ТекущаяДатаСеанса();
	НовыйБизнесПроцесс.Организация				= ВедущаяЗадача.БизнесПроцесс.Организация;
	НовыйБизнесПроцесс.Подразделение			= ВедущаяЗадача.БизнесПроцесс.Подразделение;
	НовыйБизнесПроцесс.Важность					= ВедущаяЗадача.БизнесПроцесс.Важность;
	// ++ VOG Солодов В.В. 20.01.2021 DEV-57
	Если ТипЗнч(ПараметрыПроцесса) = Тип("Структура")
		И ПараметрыПроцесса.Свойство("Автор") Тогда
		НовыйБизнесПроцесс.Автор				= ПараметрыПроцесса.Автор;
	Иначе
		НовыйБизнесПроцесс.Автор				= ВедущаяЗадача.БизнесПроцесс.Ответственный;
	КонецЕсли;
	// До изменения
	//НовыйБизнесПроцесс.Автор					= ВедущаяЗадача.БизнесПроцесс.Ответственный;
	// -- VOG Солодов В.В. 20.01.2021 DEV-57
	НовыйБизнесПроцесс.Ответственный			= ВедущаяЗадача.БизнесПроцесс.Ответственный;
	НовыйБизнесПроцесс.Предмет					= ВедущаяЗадача;
	НовыйБизнесПроцесс.ВедущаяЗадача			= ВедущаяЗадача;
	
	НовыйБизнесПроцесс.Наименование				= НСтр("ru = 'Запрос на перенос срока исполнения.'");
	НовыйБизнесПроцесс.Проект					= ВедущаяЗадача.БизнесПроцесс.Проект;
	НовыйБизнесПроцесс.Описание					= ТекстЗапроса;
	НовыйБизнесПроцесс.КартаМаршрута			= Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков;
	НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.НомерВерсии;
	
	СписокТочекСтарта							= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков);
	НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
	
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();
	
КонецПроцедуры



// Процедура делает записи о изменениях в реквизитах партнера
//
// Параметры:
//	БизнесПроцессЗадача					- СправочникСсылка.Партнеры, СправочникСсылка.КонтактныеЛицаПартнеров	- Ссылка на партнера или КЛ партнера
//	СтруктураОбрабатываемыеРеквизиты	- Структура	- Структура в которой указано, какие реквизиты обрабатывать
//	НаДату								- Дата		- Если передан, то используется как дата в истории вместо текущей даты
//	АвторИзменений						- СправочникСсылка.Пользователи	- ссылка на пользователя, делающего изменения
//
Процедура ЗаписатьИсториюРеквизитовБизнесПроцесса(БизнесПроцессЗадача, СтруктураОбрабатываемыеРеквизиты, НаДату = Неопределено, АвторИзменений = Неопределено) Экспорт
	//Если Не ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов") Тогда Возврат; КонецЕсли;
	Если Не ЗначениеЗаполнено(БизнесПроцессЗадача) Тогда Возврат; КонецЕсли;
	
	Настройка = РегистрыСведений.bpmНастройкаВерсионированияРеквизитовБизнесПроцессов.ПолучитьНастройку();
	Если ТипЗнч(Настройка) = Тип("Структура") И Настройка.Свойство("СтруктураНастройки") Тогда
		Если ТипЗнч(Настройка.СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Реквизиты = Неопределено;
	РеквизитыЗадачи = Неопределено;
	Настройка.СтруктураНастройки.Свойство("Реквизиты", Реквизиты);
	Настройка.СтруктураНастройки.Свойство("РеквизитыЗадачи", РеквизитыЗадачи);
	
	Если ТипЗнч(Реквизиты) <> Тип("Массив") И ТипЗнч(РеквизитыЗадачи) <> ТипЗнч("Массив") Тогда Возврат; КонецЕсли;
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	ТекДата = ?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса());
	Автор = ?(ЗначениеЗаполнено(АвторИзменений), АвторИзменений, Пользователи.АвторизованныйПользователь());
	
	Если СтруктураОбрабатываемыеРеквизиты.Свойство("БизнесПроцесс") Или СтруктураОбрабатываемыеРеквизиты.Свойство("Задача") Тогда
		ТаблицаДанныеИстории = РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.СрезПоследних(ТекДата, Новый Структура("Объект", БизнесПроцессЗадача));
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.СоздатьНаборЗаписей();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Если ТипЗнч(БизнесПроцессЗадача) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ИтераторРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(БизнесПроцессЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ИтераторРеквизитов = РеквизитыЗадачи;
	Иначе
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ИтераторРеквизитов) <> Тип("Массив") Тогда Возврат; КонецЕсли;
	
	Для Каждого Реквизит Из ИтераторРеквизитов Цикл
		
		Если СтруктураОбрабатываемыеРеквизиты.Свойство("БизнесПроцесс") Или СтруктураОбрабатываемыеРеквизиты.Свойство("Задача") Тогда
			бСохранять = Ложь;
			
			//Если ТипЗнч(Реквизит) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") И ИспользоватьДополнительныеРеквизитыИСведения Тогда
			//	СтрокаДопРеквизита = БизнесПроцессЗадача.ДополнительныеРеквизиты.Найти(Реквизит, "Свойство");
			//	Если СтрокаДопРеквизита = Неопределено Тогда
			//		НайденныеСтроки = ТаблицаДанныеИстории.НайтиСтроки(Новый Структура("ПутьКДанным", Реквизит));
			//		Если НайденныеСтроки.Количество() = 0 Тогда
			//			Продолжить;
			//		Иначе
			//			// Значение доп. реквизита было очищено
			//			Если ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда
			//				Попытка		ЗначениеРеквизита = Реквизит.ТипЗначения.ПривестиЗначение(Неопределено);
			//				Исключение	ЗначениеРеквизита = Неопределено;
			//				КонецПопытки;
			//				бСохранять = Истина;
			//			Иначе
			//				Продолжить;
			//			КонецЕсли;
			//		КонецЕсли;
			//	Иначе
			//		ЗначениеРеквизита = СтрокаДопРеквизита.Значение;
			//	КонецЕсли;
			//Иначе
			//	Попытка		ЗначениеРеквизита = БизнесПроцессЗадача[Реквизит];
			//	Исключение	Продолжить;
			//	КонецПопытки;
			//КонецЕсли;
			
			Попытка		ЗначениеРеквизита = БизнесПроцессЗадача[Реквизит];
			Исключение	Продолжить;
			КонецПопытки;
			
			Если Не бСохранять Тогда
				НайденныеСтроки = ТаблицаДанныеИстории.НайтиСтроки(Новый Структура("ПутьКДанным", Реквизит));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если НайденныеСтроки[0].Значение <> ЗначениеРеквизита Тогда
						бСохранять = Истина;
					КонецЕсли;
				Иначе
					бСохранять = ЗначениеЗаполнено(ЗначениеРеквизита);
				КонецЕсли;
			КонецЕсли;
			Если бСохранять Тогда
				НоваяСтрока = ТаблицаЗаписей.Добавить();
				НоваяСтрока.Объект		= БизнесПроцессЗадача;
				НоваяСтрока.Автор		= Автор;
				НоваяСтрока.Период		= ТекДата;
				НоваяСтрока.ПутьКДанным	= Реквизит;
				НоваяСтрока.Значение	= ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
		
		Если СтруктураОбрабатываемыеРеквизиты.Свойство("БизнесПроцесс") Тогда
			БизнесПроцессСсылка = БизнесПроцессЗадача;
		ИначеЕсли СтруктураОбрабатываемыеРеквизиты.Свойство("Задача") Тогда
			БизнесПроцессСсылка = БизнесПроцессЗадача.бизнесПроцесс;
		КонецЕсли;
		
		НаборЗначенийСвойств = РегистрыСведений.bpmДополнительныеРеквизиты.СоздатьНаборЗаписей();
		НаборЗначенийСвойств.Отбор.БизнесПроцесс.Установить(БизнесПроцессСсылка);
		НаборЗначенийСвойств.Прочитать();
		ТаблицаЗначенийСвойств = НаборЗначенийСвойств.Выгрузить(,"Свойство,Значение");
		
		Для Каждого СтрокаДопРеквизита ИЗ ТаблицаЗначенийСвойств Цикл
			Если СтрокаДопРеквизита = Неопределено Тогда
				//НайденныеСтроки = ТаблицаДанныеИстории.НайтиСтроки(Новый Структура("ПутьКДанным", Реквизит));
				//Если НайденныеСтроки.Количество() = 0 Тогда
				//	Продолжить;
				//Иначе
				//	// Значение доп. реквизита было очищено
				//	Если ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда
				//		Попытка		ЗначениеРеквизита = Реквизит.ТипЗначения.ПривестиЗначение(Неопределено);
				//		Исключение	ЗначениеРеквизита = Неопределено;
				//		КонецПопытки;
				//		бСохранять = Истина;
				//	Иначе
				//		Продолжить;
				//	КонецЕсли;
				//КонецЕсли;
			Иначе
				ЗначениеРеквизита = СтрокаДопРеквизита.Значение;
			КонецЕсли;
		
			Если Не бСохранять Тогда
				НайденныеСтроки = ТаблицаДанныеИстории.НайтиСтроки(Новый Структура("ПутьКДанным", СтрокаДопРеквизита.Свойство));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если НайденныеСтроки[0].Значение <> ЗначениеРеквизита Тогда
						бСохранять = Истина;
					КонецЕсли;
				Иначе
					бСохранять = ЗначениеЗаполнено(ЗначениеРеквизита);
				КонецЕсли;
			КонецЕсли;
			
			Если бСохранять Тогда
				НоваяСтрока = ТаблицаЗаписей.Добавить();
				НоваяСтрока.Объект		= БизнесПроцессЗадача;
				НоваяСтрока.Автор		= Автор;
				НоваяСтрока.Период		= ТекДата;
				НоваяСтрока.ПутьКДанным	= СтрокаДопРеквизита.Свойство;
				НоваяСтрока.Значение	= ЗначениеРеквизита;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаЗаписей.Количество() > 0 Тогда
		СтрокаСвернуть = "";
		Для Каждого Измерение Из Метаданные.РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.Измерения Цикл
			СтрокаСвернуть = СтрокаСвернуть + Измерение.Имя + ",";
		КонецЦикла;
		Для Каждого Ресурс Из Метаданные.РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.Ресурсы Цикл
			СтрокаСвернуть = СтрокаСвернуть + Ресурс.Имя + ",";
		КонецЦикла;
		Для Каждого Реквизит Из Метаданные.РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.Реквизиты Цикл
			СтрокаСвернуть = СтрокаСвернуть + Реквизит.Имя + ",";
		КонецЦикла;
		СтрокаСвернуть = СтрокаСвернуть + "Период";
		ТаблицаЗаписей.Свернуть(СтрокаСвернуть);
		
		Для Каждого СтрокаТаблицы Из ТаблицаЗаписей Цикл
			МенеджерЗаписи = РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, СтрокаСвернуть);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за создание и старт процессных бизнес-процессов.

Процедура ПередЗаписьюОбъектаПроцесса(Источник, Отказ) Экспорт
	
	Если Источник.ЭтоНовый() Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
			Источник.ДополнительныеСвойства.ЭтоНовый = Истина;
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиОбъектаПроцесса(Источник, Отказ) Экспорт
	
	// ++ VOG Солодов В.В. 23.04.2019
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	// -- VOG Солодов В.В. 23.04.2019
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		
		ПолучитьИСтартоватьПроцессыПриЗаписиНовогоОбъектаПроцесса(Источник);
		//ПолучитьУсловияМаршрутизацииПроверитьВыполнить(Источник);
	ИначеЕсли Источник.ДополнительныеСвойства.ЭтоНовый ИЛИ НЕ ОбъектСвязанСБизнесПроцессом(Источник.Ссылка) Тогда
		
		ПолучитьИСтартоватьПроцессыПриЗаписиНовогоОбъектаПроцесса(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьУсловияМаршрутизацииПроверитьВыполнить(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.Объект,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.ТипОбъекта,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.Идентификатор,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.ВыражениеУсловия,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.ПредставлениеОтбора,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.СпособЗаданияУсловия,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.Наименование,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.Цель,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.НастройкаКомбинацииУсловий,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.НастройкаУсловия,
	|	bpmУсловияМаршрутизацииПоБизнесПроцессам.Событие
	|ИЗ
	|	РегистрСведений.bpmУсловияМаршрутизацииПоБизнесПроцессам КАК bpmУсловияМаршрутизацииПоБизнесПроцессам
	|ГДЕ
	|	НЕ bpmУсловияМаршрутизацииПоБизнесПроцессам.Объект.Завершен
	|	И НЕ bpmУсловияМаршрутизацииПоБизнесПроцессам.Объект.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипОбъекта.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес") Тогда
			
			Если Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора Тогда
				
				ЕстьУсловия = Истина;
				Результат = ПроверитьУсловиеВРежимеКонструктора(Источник.Ссылка,Выборка.НастройкаУсловия.Получить(),"Интерес");
					
			ИначеЕсли Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
				
				ЕстьУсловия = Истина;
				
				Настройки = Выборка.НастройкаКомбинацииУсловий.Получить();
				ЗаполнитьКомбинациюПравил(Источник.Ссылка, Настройки.Отбор.Элементы, "Интерес");
				Результат = ПроверитьУсловиеВРежимеКонструктора(Источник.Ссылка, Настройки,"Условия");
				
			ИначеЕсли Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
				
				ЕстьУсловия = Истина;
				Результат = ПроверитьУсловиеНаВстроенномЯзыке(Источник.Ссылка, Выборка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат Тогда
			
			ВыполнитьПереходБизнесПроцессаНаЭтап(Выборка.Объект, Выборка.Цель);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПереходБизнесПроцессаНаЭтап(БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	// Определим, принадлежит ли точка какой-либо ветке разделения, если да, то надо исключить
	// задачи других веток, т.к. их не откатываем.
	МассивИсключаемыхТочек = ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(БизнесПроцесс, ТочкаМаршрута);
	
	МассивИсключаемыхТочек.Добавить(ТочкаМаршрута);
	
	// Проверим, указан ли исполнитель выбранного этапа. Если нет, то попросим указать.
	МассивПроверяемыхЭтапов = Новый Массив;
	МассивПроверяемыхЭтапов.Добавить(ТочкаМаршрута);
	
	СписокТочекМаршрута = ПроверитьНаличиеСледующегоИсполнителяУЭтапов(БизнесПроцесс, МассивПроверяемыхЭтапов);
	
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		
	Иначе
		
		ЗавершитьВсеЗадачиБизнесПроцесса(БизнесПроцесс, МассивИсключаемыхТочек, ТочкаМаршрута);
		
		СоздатьЗадачуВТочкеОтката(БизнесПроцесс, ТочкаМаршрута);
		
		// Если точка отката принадлежит какой-либо ветке разделения, то надо для остальных веток
		// проверить наличие записей в регистре "CRM_РезультатыСлиянияМаршрутов", если их не, то добавить
		// для ветки в которой находится точка эту запись в регистре надо убить.
		ПроверитьТочкуНаПринадлежностьРазделению(БизнесПроцесс, ТочкаМаршрута);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(БизнесПроцесс,ТочкаМаршрута, МассивИсключаемыхТочек = Неопределено)
	
	Если МассивИсключаемыхТочек = Неопределено Тогда
		МассивИсключаемыхТочек = Новый Массив;
	КонецЕсли;
	
	// Если точка маршрута является разделением, то получим связанную с ней точку слияния и
	// проверим, не принадлежит ли она другому разделению.
	Если ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		СвязаннаяСРазделениемТочкаСлияния = МассивСтрок[0].ТочкаМаршрута;
		
		МассивСтрок = СвязаннаяСРазделениемТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	Иначе
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	КонецЕсли;
	
	// Если нашли, значит точка находится в одной из веток разделения.
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		
		ТочкаСлияния	= МассивСтрок[0].ТочкаМаршрута;
		Ветка			= МассивСтрок[0].НомерВетки;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец"	 ,БизнесПроцесс.КартаМаршрута);
		Запрос.УстановитьПараметр("ТочкаМаршрута",ТочкаСлияния);
		Запрос.УстановитьПараметр("Вид"			 ,ТочкаСлияния.Вид);
		Запрос.УстановитьПараметр("НомерВерсии"	 ,БизнесПроцесс.НомерВерсииКартыМаршрута);
		Запрос.УстановитьПараметр("НомерВетки"	 ,Ветка);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов.ТочкиРазделенияСлияния КАК CRM_ТочкиМаршрутовТочкиРазделенияСлияния
		|ГДЕ
		|	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Вид = &Вид
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВерсии = &НомерВерсии
		|	И НЕ CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВетки = &НомерВетки
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.ТочкаМаршрута = &ТочкаМаршрута";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
			ИЛИ Выборка.Ссылка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
				МассивИсключаемыхТочек.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Проверим, не ходит ли точка слияния в ветку другого разделения.
		МассивСтрок			= ТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		// Если нашли, значит точка находится в одной из веток разделения.
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(БизнесПроцесс,ТочкаСлияния, МассивИсключаемыхТочек);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат МассивИсключаемыхТочек;
	
КонецФункции

Процедура ЗавершитьВсеЗадачиБизнесПроцесса(БизнесПроцесс, МассивИсключаемыхТочек, ТочкаМаршрута = Неопределено)
	
	// 1. Завершим все задачи и вложенные бизнес-процессы.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |	И НЕ ЗадачаИсполнителя.Выполнена
	               |	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	               |	И НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&МассивИсключаемыхТочек)";
	Запрос.УстановитьПараметр("БизнесПроцесс"		  ,БизнесПроцесс);
	Запрос.УстановитьПараметр("МассивИсключаемыхТочек",МассивИсключаемыхТочек);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Завершаем вложенный бизнес-процесс.
		Если Выборка.Ссылка.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_БизнесПроцесс.Ссылка
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	(НЕ CRM_БизнесПроцесс.Завершен)
			|	И CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача";
			Запрос.УстановитьПараметр("ВедущаяЗадача",Выборка.Ссылка);
			Выборка_1 = Запрос.Выполнить().Выбрать();
			Если Выборка_1.Следующий() Тогда
				
				ПараметрыДосрочногоЗавершения = Новый Структура();
				ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				,Истина);
				ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"				,Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
				ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,Справочники.CRM_ПричиныОтказов.ОткатБизнесПроцесса);
				ПараметрыДосрочногоЗавершения.Вставить("Задача"							,Новый Структура("БизнесПроцесс",Выборка_1.Ссылка));
				ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"		,Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка());
				
				CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
			КонецЕсли;
		КонецЕсли;
		
		// Завершаем задачу
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ДатаИсполнения					= ТекущаяДатаСеанса();
			ЗадачаОбъект.Выполнена						= Истина;
			
			ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ТекущаяДатаСеанса());
			ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = ' -> Завершена автоматически'");
			
			ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой	= ПоследнееДействиеСтрокой;
			ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= "Завершена автоматически";
			ЗадачаОбъект.РезультатВыполнения			= ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),ПоследнееДействиеСтрокой,ПоследнееДействиеСтрокой + Символы.ПС+ ЗадачаОбъект.РезультатВыполнения);
			ЗадачаОбъект.ОбменДанными.Загрузка			= Истина;
			ЗадачаОбъект.Записать();
			CRM_БизнесПроцессыСервер.ПриВыполненииЗадачиИсполнителя(ЗадачаОбъект, Ложь, ТочкаМаршрута, Истина);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЗадачуВТочкеОтката(БизнесПроцесс, ТочкаМаршрута)
	
	МассивЗадач = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	//|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.Дата КАК Дата,
	|	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.CRM_ТочкаМаршрута = &ТочкаМаршрута
	|	И ЗадачаИсполнителя.Выполнена
	|	И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Итерация УБЫВ,
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("БизнесПроцесс",БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута",ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
							
			// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
			// позволить выполнять перенаправление по команде из формы этой задачи.
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Заполнить(ЗадачаОбъект);
			
			МассивЗадач.Добавить(НоваяЗадача);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_НастройкиЭтаповБизнесПроцессов.Объект,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьДней,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьЧасов,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьМинут,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Используется,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Задание,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Порядок,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Шаблон,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ИсполнительСтрокой,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачала,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения
			|ИЗ
			|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
			|ГДЕ
			|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект";
			
			Запрос.УстановитьПараметр("Объект",БизнесПроцесс);
			ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
				
			CRM_БизнесПроцессыСервер.ЗаписатьЗадачи(МассивЗадач, ТаблицаЭтапов);
			ЗафиксироватьТранзакцию();
			
			CRM_БизнесПроцессыСервер.СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцесс);
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	Иначе
		
		Отказ = Ложь;
		МассивИсходящихТочек = Новый Массив;
		МассивИсходящихТочек.Добавить(Новый Структура("ИсходящаяТочка",ТочкаМаршрута));
		
		ТаблицаЭтапов = Неопределено;
		CRM_БизнесПроцессыСервер.СформироватьМассивЗадач(БизнесПроцесс, БизнесПроцессы.CRM_БизнесПроцесс.ТочкиМаршрута.ЗадачаБизнесПроцесса, МассивИсходящихТочек, МассивЗадач,, ТаблицаЭтапов, Отказ);
		Если НЕ Отказ Тогда
			НачатьТранзакцию();
			Попытка
				CRM_БизнесПроцессыСервер.ЗаписатьЗадачи(МассивЗадач,ТаблицаЭтапов);
				ЗафиксироватьТранзакцию();
				
				CRM_БизнесПроцессыСервер.СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцесс);
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТочкуНаПринадлежностьРазделению(БизнесПроцесс, ТочкаМаршрута)
	
	// Если точка принадлежит ветке разделения.
	Если ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		СвязаннаяСРазделениемТочкаСлияния = МассивСтрок[0].ТочкаМаршрута;
		
		НаборЗаписей = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		НаборЗаписей.Отбор.ТочкаСлияния.Установить(СвязаннаяСРазделениемТочкаСлияния);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
		МассивСтрок = СвязаннаяСРазделениемТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	Иначе
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	КонецЕсли;
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		ТочкаСлияния	= МассивСтрок[0].ТочкаМаршрута;
		НомерВетки		= МассивСтрок[0].НомерВетки;
		
		МассивВходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВходящиеТочки(ТочкаСлияния, БизнесПроцесс.НомерВерсииКартыМаршрута);
		
		// Проверим, есть ли записи в регистре результатов слияния, если есть, значит БП
		// еще не дошел до точки слияния и удаляем запись только для ветки, в которой выбрали 
		// точку маршрута. Иначе БП прошел точку слияния(или вообще еще не заходил в это разделение), тогда
		// для всех веток разделения, кроме той, в которой мы выбрали точку для смены этапа, создаем запись в регистре,
		// якобы эти ветки уже пройдены.
		Набор = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		Набор.Отбор.ТочкаСлияния.Установить(ТочкаСлияния);
		Набор.Прочитать();
		
		СоздаемЗаписиПоВеткам = (Набор.Количество() = 0);
		
		Для Каждого СтруктураТочки Из МассивВходящихТочек Цикл
			
			ВходящаяТочка	= СтруктураТочки.ВходящаяТочка;
			МассивСтрок		= ВходящаяТочка.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,ТочкаМаршрута",БизнесПроцесс.НомерВерсииКартыМаршрута,ТочкаСлияния));
			
			Если МассивСтрок[0].НомерВетки = НомерВетки Тогда
				
				НаборЗаписей = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
				НаборЗаписей.Отбор.ТочкаСлияния.Установить(ТочкаСлияния);
				НаборЗаписей.Отбор.ВходящаяТочка.Установить(ВходящаяТочка);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
				
			ИначеЕсли СоздаемЗаписиПоВеткам Тогда
				
				ЗаписьРегистра = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.БизнесПроцесс	= БизнесПроцесс;
				ЗаписьРегистра.ТочкаСлияния		= ТочкаСлияния;
				ЗаписьРегистра.ВходящаяТочка	= ВходящаяТочка;
				ЗаписьРегистра.Записать();
				
			КонецЕсли;
		КонецЦикла;
		
		// Проверим, не принадлежит ли точка слияния ветке другого разделения.
		// Если принадлежит, то надо скорректировать записи регистра сведений
		// для этого разделения.
		ПроверитьТочкуНаПринадлежностьРазделению(БизнесПроцесс, ТочкаСлияния);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИСтартоватьПроцессыПриЗаписиНовогоОбъектаПроцесса(Источник)
	
	ИмяДокумента = Источник.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяДокумента",ИмяДокумента);
		
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Проекты.Ссылка КАК Ссылка,
	//|	ИСТИНА КАК ЭтоПроцесс
	//|ИЗ
	//|	Справочник.Проекты КАК Проекты
	//|ГДЕ
	//|	НЕ Проекты.CRM_ЭтоПроект
	//|	И НЕ Проекты.ПометкаУдаления
	//// +CRM не переносить в объединенные решения
	//|	И НЕ Проекты.ЭтоГруппа
	//// -CRM не переносить в объединенные решения
	//|	И Проекты.bpmВидОбъектаСтрокой = &ИмяДокумента
	//|	И Проекты.bpmТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	//|	И Проекты.bpmСостояниеПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmСостояниеПроцесса.Действует)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	"ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка,
	|	ЛОЖЬ КАК ЭтоПроцесс
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ПометкаУдаления
	|	И НЕ CRM_КартыМаршрутов.Редактируется
	|	И CRM_КартыМаршрутов.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И CRM_КартыМаршрутов.ВидОбъектаСтрокой = &ИмяДокумента
	|	И CRM_КартыМаршрутов.СостояниеПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmСостояниеПроцесса.Действует)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Стартовали = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Если Стартовали Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отказано в старте процесса ""%1"" по причине:
			|%2
			|Обратитесь к администратору.'"),
			Выборка.Ссылка.Наименование, 
			НСтр("ru = 'Уже есть стартованный процесс.'"));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отказано в старте процесса по объекту'"), 
			УровеньЖурналаРегистрации.Предупреждение,Источник.Метаданные(),Источник,
			ТекстИсключения);
		Иначе
			Попытка
				Стартовали = ПроверитьУсловияПроцессаСтартовать(Источник, Выборка.Ссылка, Выборка.ЭтоПроцесс);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьУсловияПроцессаСтартовать(Источник, КартаПроект, ЭтоПроцесс)
	
	Если ЭтоПроцесс Тогда
		СхемаКомпоновкиДанных		= КартаПроект.bpmХранилищеСхемыКомпоновкиДанных.Получить();
		НастройкиКомпоновкиДанных	= КартаПроект.bpmХранилищеНастроекКомпоновкиДанных.Получить();
	Иначе
		СхемаКомпоновкиДанных		= КартаПроект.ХранилищеСхемыКомпоновкиДанных.Получить();
		НастройкиКомпоновкиДанных	= КартаПроект.ХранилищеНастроекКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если ПроверитьУсловия(Источник.Ссылка, СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных) Тогда
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") Тогда
		
			НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			НовыйБизнесПроцесс.Дата						= Источник.Дата;
			НовыйБизнесПроцесс.ДатаСтарта				= Источник.Дата;
			НовыйБизнесПроцесс.Организация				= Источник.Организация;
			НовыйБизнесПроцесс.Подразделение			= Источник.Подразделение;
			НовыйБизнесПроцесс.Партнер					= Источник.Партнер;
			НовыйБизнесПроцесс.КонтактноеЛицо			= Источник.КонтактноеЛицо;
			НовыйБизнесПроцесс.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			НовыйБизнесПроцесс.Автор					= ПользователиКлиентСервер.ТекущийПользователь();
			НовыйБизнесПроцесс.Ответственный			= Источник.Ответственный;
			НовыйБизнесПроцесс.Предмет					= Источник.Ссылка;
			
			НовыйБизнесПроцесс.Наименование				= Источник.Тема;
			Если ЭтоПроцесс Тогда
				НовыйБизнесПроцесс.Проект					= КартаПроект;
			КонецЕсли;
			НовыйБизнесПроцесс.Сумма					= Источник.ОжидаемаяВыручка;
			НовыйБизнесПроцесс.Описание					= Источник.Описание;
			Если ЭтоПроцесс Тогда
				НовыйБизнесПроцесс.КартаМаршрута			= КартаПроект.CRM_КартаМаршрута;
				НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= КартаПроект.CRM_КартаМаршрута.НомерВерсии;
			Иначе
				НовыйБизнесПроцесс.КартаМаршрута			= КартаПроект;
				НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= КартаПроект.НомерВерсии;
			КонецЕсли;
			СписокТочекСтарта							= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
			НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
			
			НовыйБизнесПроцесс.Интерес					= Источник.Ссылка;
			Если ЭтоПроцесс Тогда
				CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(НовыйБизнесПроцесс,НовыйБизнесПроцесс.Проект);
			КонецЕсли;
		Иначе
			НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			НовыйБизнесПроцесс.Дата						= Источник.Дата;
			НовыйБизнесПроцесс.ДатаСтарта				= Источник.Дата;
			НовыйБизнесПроцесс.Организация				= Источник.Организация;
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
				НовыйБизнесПроцесс.Партнер					= Источник.Партнер;
				НовыйБизнесПроцесс.КонтактноеЛицо			= Источник.КонтактноеЛицо;
            КонецЕсли;
			НовыйБизнесПроцесс.Автор					= ПользователиКлиентСервер.ТекущийПользователь();
			НовыйБизнесПроцесс.Ответственный			= ПользователиКлиентСервер.ТекущийПользователь();
			НовыйБизнесПроцесс.Предмет					= Источник.Ссылка;
			
			Если ЭтоПроцесс Тогда
				НовыйБизнесПроцесс.Проект					= КартаПроект;
				НовыйБизнесПроцесс.КартаМаршрута			= КартаПроект.CRM_КартаМаршрута;
				НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= КартаПроект.CRM_КартаМаршрута.НомерВерсии;
				НовыйБизнесПроцесс.ВидОбъектаСтрокой		= КартаПроект.bpmВидОбъектаСтрокой;
				НовыйБизнесПроцесс.РеквизитОбъектаСтрокой	= КартаПроект.bpmРеквизитОбъектаСтрокой;
			Иначе
				НовыйБизнесПроцесс.КартаМаршрута			= КартаПроект;
				НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= КартаПроект.НомерВерсии;
				НовыйБизнесПроцесс.ВидОбъектаСтрокой		= КартаПроект.ВидОбъектаСтрокой;
				НовыйБизнесПроцесс.РеквизитОбъектаСтрокой	= КартаПроект.РеквизитОбъектаСтрокой;
			КонецЕсли;
			
			НовыйБизнесПроцесс.Наименование				= НовыйБизнесПроцесс.КартаМаршрута.Наименование;

			СписокТочекСтарта							= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
			НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
			
			НовыйБизнесПроцесс.Интерес					= Источник.Ссылка;
		КонецЕсли;
		
		Попытка
			НовыйБизнесПроцесс.Записать();
			НовыйБизнесПроцесс.Старт();
			
			Возврат Истина;
		Исключение
			Инфо = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Старт процессо по объекту'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Источник.Метаданные(),
				Источник.Ссылка,
				ПодробноеПредставлениеОшибки(Инфо));
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При попытке старта процесса ""%1"" возникла ошибка:
					|%2
					|Обратитесь к администратору.'"),
				КартаПроект.Наименование, 
				Инфо.Описание);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьУсловия(Источник, СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных)
	
	Параметр = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Ссылка");
	Параметр.Значение = Источник;
	Параметр.Использование = Истина;
		
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки()
		,
		,
		, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    ТаблицаРезультата = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Результат = ТаблицаРезультата.Количество() > 0;
	
	Возврат Результат;
	
КонецФункции


Функция ОснованиеЯвляетсяЗадача(НовыйЗвонок) Экспорт
	
	Если ЗначениеЗаполнено(НовыйЗвонок.ВзаимодействиеОснование) И ТипЗнч(НовыйЗвонок.ВзаимодействиеОснование) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат НовыйЗвонок.ВзаимодействиеОснование;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
	
Функция РассчитатьДлительностьБизнесПроцесса(БизнесПроцесс) Экспорт
	Если БизнесПроцесс.Завершен Тогда
		Длительность = БизнесПроцесс.ДатаЗавершения - БизнесПроцесс.ДатаСтарта;
	Иначе
		Длительность = ТекущаяДатаСеанса() - БизнесПроцесс.ДатаСтарта;
	КонецЕсли;	
	Возврат Длительность;
КонецФункции


Функция ПолучитьЗаписьСуществующегоУсловияПоНаименованию(Объект, НаименованиеУсловия)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Идентификатор,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Событие,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ТипДействия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Проверка,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Исполнителю,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Ответственному,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Клиенту,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ВыражениеУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ПредставлениеОтбора,
	|	bpmУсловияЭтаповПоБизнесПроцессам.СпособЗаданияУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Наименование,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Цель,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаКомбинацииУсловий,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаУсловия
	|ИЗ
	|	РегистрСведений.bpmУсловияЭтаповПоБизнесПроцессам КАК bpmУсловияЭтаповПоБизнесПроцессам
	|ГДЕ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект = &Объект
	|	И bpmУсловияЭтаповПоБизнесПроцессам.Наименование = &Наименование
	|	И bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеУсловия);
	Запрос.УстановитьПараметр("Объект", Объект.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", Объект.CRM_ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	   Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьКомбинациюПравил(Предмет, ЭлементыКомбинации,ТипМакета = "ШаблонСхемы")
	
	Для Каждого ЭлементОтбора Из ЭлементыКомбинации Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьКомбинациюПравил(Предмет, ЭлементОтбора.Элементы);
		Иначе
			
			ПравоеЗначение = ПолучитьЗаписьСуществующегоУсловияПоНаименованию(Предмет, ЭлементОтбора.ПравоеЗначение);
			
			Если ПравоеЗначение = Неопределено Тогда Продолжить; КонецЕсли;
			
			СпособЗаданияУсловия = ПравоеЗначение.СпособЗаданияУсловия;
			Если СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
				
				Результат = ПроверитьУсловиеНаВстроенномЯзыке(Предмет, ПравоеЗначение);
				
			ИначеЕсли СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора Тогда
				
				Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет, ПравоеЗначение.НастройкаУсловия.Получить(), ТипМакета);
					
			ИначеЕсли СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
				
				НастройкиВложенногоПравила = ПравоеЗначение.НастройкаКомбинацииУсловий.Получить();
				ЗаполнитьКомбинациюПравил(Предмет, НастройкиВложенногоПравила.Отбор.Элементы);
				
				Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет, НастройкиВложенногоПравила,"Условия");
					
			КонецЕсли;
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ПолеДляПроверки");
    		ЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
    		ЭлементОтбора.Использование = Истина;
    		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Результат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьУсловиеВРежимеКонструктора(Предмет, Настройки, ТипМакета = "ШаблонСхемы")
	
	Если ТипМакета = "ШаблонСхемы" Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.ВерсияДанных,
		|	ЗадачаИсполнителя.ПометкаУдаления,
		|	ЗадачаИсполнителя.Номер,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.CRM_ВариантВыполнения,
		|	ЗадачаИсполнителя.CRM_ВариантВыполненияСтрокой,
		|	ЗадачаИсполнителя.CRM_ЗавершенДосрочно,
		|	ЗадачаИсполнителя.CRM_Итерация,
		|	ЗадачаИсполнителя.CRM_КонтактноеЛицо,
		|	ЗадачаИсполнителя.CRM_Личная,
		|	ЗадачаИсполнителя.CRM_НачалоПереадресации,
		|	ЗадачаИсполнителя.CRM_Неудача,
		|	ЗадачаИсполнителя.CRM_ОсновнаяКатегория,
		|	ЗадачаИсполнителя.CRM_Партнер,
		|	ЗадачаИсполнителя.CRM_Переадресована,
		|	ЗадачаИсполнителя.CRM_Проект,
		|	ЗадачаИсполнителя.CRM_ПроцентВыполненияЗадачи,
		|	ЗадачаИсполнителя.CRM_Родитель,
		|	ЗадачаИсполнителя.CRM_СостояниеСтрокой,
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута,
		|	ЗадачаИсполнителя.CRM_Этап,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.Важность,
		|	ЗадачаИсполнителя.ГруппаИсполнителейЗадач,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.ДатаНачала,
		|	ЗадачаИсполнителя.ДатаПринятияКИсполнению,
		|	ЗадачаИсполнителя.Описание,
		|	ЗадачаИсполнителя.Предмет,
		|	ЗадачаИсполнителя.ПредметСтрокой,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.АвторСтрокой,
		|	ЗадачаИсполнителя.CRM_ПеренестиСрокИсполненияНа,
		|	ЗадачаИсполнителя.CRM_ПоследнееДействиеСтрокой,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации,
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.РольИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка = &Предмет";
		
		СхемаКомпоновкиДанных = РегистрыСведений.bpmУсловияМаршрутизации.ПолучитьМакет(ТипМакета);
		
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
		
		НаборДанных.Запрос = ТекстЗапроса;
		
		Если Настройки = Неопределено Тогда
			Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		
		Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Предмет");
		Параметр.Значение = Предмет;
		Параметр.Использование = Истина;
		
	ИначеЕсли ТипМакета = "Интерес" Тогда
		
		МетаОбъект = Предмет.Метаданные();
		
		ТекстЗапроса = "ВЫБРАТЬ
		|%Поля%
		|ИЗ
		|	%Источник%
		|ГДЕ
		|	%Условие%
		|";
		
		ТекстИсточника = МетаОбъект.ПолноеИмя() + " КАК " +МетаОбъект.Имя;
		
		ТекстПолей		= МетаОбъект.Имя + ".Ссылка";
		ТекстУсловия	= МетаОбъект.Имя + ".Ссылка = &Предмет";
		Для Каждого Реквизит ИЗ МетаОбъект.Реквизиты Цикл
			ТекстПолей = ТекстПолей + ",
			|" + МетаОбъект.Имя + "." + Реквизит.Имя;
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Поля%",ТекстПолей);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Источник%",ТекстИсточника);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Условие%",ТекстУсловия);
		
		СхемаКомпоновкиДанных = РегистрыСведений.bpmУсловияМаршрутизации.ПолучитьМакет("ШаблонСхемы");
		
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
		
		НаборДанных.Запрос = ТекстЗапроса;
		
		Если Настройки = Неопределено Тогда
			Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		
		Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Предмет");
		Параметр.Значение = Предмет;
		Параметр.Использование = Истина;
		
	Иначе
		
		СхемаКомпоновкиДанных = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.ПолучитьМакет(ТипМакета);
		
	КонецЕсли;
		
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки()
		,
		,
		, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    ТаблицаРезультата = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Результат = ТаблицаРезультата.Количество() > 0;
	
	Возврат Результат;
		
КонецФункции

Функция ПроверитьУсловиеНаВстроенномЯзыке(Предмет, СсылкаНаУсловие)
	
	Результат = Истина;
	
	Попытка
		УстановитьБезопасныйРежим(Истина);
		Выполнить(СсылкаНаУсловие.ВыражениеУсловия);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка условия этапа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Предмет.Метаданные(),
			Предмет,
			ПодробноеПредставлениеОшибки(Инфо));
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При проверке условия этапа ""%1"" возникла ошибка:
				|%2
				|Обратитесь к администратору.'"),
			СсылкаНаУсловие.Наименование, 
			Инфо.Описание);
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУсловиеЭтапаПроверитьПрименимость(Предмет, ПринятаКИсполнению = Ложь) Экспорт
	
	Результат = Ложь;
	
	Набор = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Предмет.БизнесПроцесс);
	Набор.Отбор.ТочкаМаршрута.Установить(Предмет.CRM_ТочкаМаршрута);
	Набор.Прочитать();
	
	ЕстьУсловия = Ложь;
	
	Для Каждого СтрокаНабора ИЗ Набор Цикл
		
		Если НЕ СтрокаНабора.ТипДействия = Перечисления.bpmТипыДействий.ПроверкаУсловия Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПринятаКИсполнению И СтрокаНабора.Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПринятаКИсполнению И СтрокаНабора.Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора Тогда
			
			ЕстьУсловия = Истина;
			Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет,СтрокаНабора.НастройкаУсловия.Получить());
				
		ИначеЕсли СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
			
			ЕстьУсловия = Истина;
			
			Настройки = СтрокаНабора.НастройкаКомбинацииУсловий.Получить();
			ЗаполнитьКомбинациюПравил(Предмет, Настройки.Отбор.Элементы);
			Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет, Настройки,"Условия");
			
		ИначеЕсли СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
			
			ЕстьУсловия = Истина;
			Результат = ПроверитьУсловиеНаВстроенномЯзыке(Предмет, СтрокаНабора);
			
		КонецЕсли;
		
		Если ЕстьУсловия И НЕ Результат Тогда
			Возврат 3;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьУсловия И Результат Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 5;
	
КонецФункции

Функция ПолучитьУсловиеЭтапаСформироватьОписание(Предмет, ПринятаКИсполнению = Ложь) Экспорт
	
	Результат = Ложь;
	
	Набор = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Предмет.БизнесПроцесс);
	Набор.Отбор.ТочкаМаршрута.Установить(Предмет.CRM_ТочкаМаршрута);
	Набор.Прочитать();
	
	ЕстьУсловия = Ложь;
	
	Для Каждого СтрокаНабора ИЗ Набор Цикл
		
		Если ПринятаКИсполнению И СтрокаНабора.Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПринятаКИсполнению И СтрокаНабора.Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора Тогда
			
			ЕстьУсловия = Истина;
			Настройки = СтрокаНабора.НастройкаУсловия.Получить();
			
			//Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет,СтрокаНабора.НастройкаУсловия.Получить());
			
		ИначеЕсли СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
			
			ЕстьУсловия = Истина;
			НастройкиКомбинацииУсловий	= СтрокаНабора.НастройкаКомбинацииУсловий.Получить();
			
		ИначеЕсли СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
			
			ЕстьУсловия = Истина;
			ВыражениеУсловия			= СтрокаНабора.ВыражениеУсловия;
			
		КонецЕсли;
		
		Если ЕстьУсловия И НЕ Результат Тогда
			Возврат 3;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьУсловия И Результат Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 5;
	
КонецФункции


Функция ВернутьСпискиДоступныхПроцессовИКарт(СписокДляМастера = Ложь) Экспорт
	
	СписокПроцессов			= Новый СписокЗначений;
	СписокКарт				= Новый СписокЗначений;
	МассивКартВПроцессах	= Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Проекты.Ссылка КАК Процесс,
	|	Проекты.bpmХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	Проекты.bpmХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	Проекты.bpmТипПроцесса КАК ТипПроцесса,
	|	Проекты.CRM_КартаМаршрута КАК КартаМаршрута
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|	И НЕ Проекты.CRM_КартаМаршрута = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.ПустаяСсылка)
	|	"+?(СписокДляМастера,"И Проекты.bpmИспользоватьПриПринятииОбращения","")+"
	|	И НЕ Проекты.bpmТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И Проекты.bpmСостояниеПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmСостояниеПроцесса.Действует)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
			СхемаКомпоновкиДанных		= Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			НастройкиКомпоновкиДанных	= Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			
			Если (СхемаКомпоновкиДанных = Неопределено) ИЛИ (НастройкиКомпоновкиДанных = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СхемаКомпоновкиДанных<>Неопределено И НастройкиКомпоновкиДанных<>Неопределено И ПроверитьУсловия(Пользователи.ТекущийПользователь(), СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных) Тогда
				СписокПроцессов.Добавить(Выборка.Процесс);
			КонецЕсли;
		ИначеЕсли НЕ СписокДляМастера Тогда
			СписокПроцессов.Добавить(Выборка.Процесс);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проекты.CRM_КартаМаршрута КАК Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|	И НЕ Проекты.CRM_ЭтоПроект
	|	И НЕ Проекты.CRM_КартаМаршрута = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.ПустаяСсылка)
	|	И Проекты.bpmСостояниеПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmСостояниеПроцесса.Действует)";
	МассивКартВПроцессах = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка КАК КартаМаршрута,
	|	CRM_КартыМаршрутов.ХранилищеСхемыКомпоновкиДанных,
	|	CRM_КартыМаршрутов.ХранилищеНастроекКомпоновкиДанных,
	|	CRM_КартыМаршрутов.ТипПроцесса КАК ТипПроцесса
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ПометкаУдаления
	|	"+?(НЕ СписокДляМастера,"И НЕ CRM_КартыМаршрутов.Ссылка В (&МассивКартВПроцессах)","")+"
	|	"+?(СписокДляМастера,"И CRM_КартыМаршрутов.ИспользоватьПриПринятииОбращения","")+"
	|	И НЕ CRM_КартыМаршрутов.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И CRM_КартыМаршрутов.СостояниеПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmСостояниеПроцесса.Действует)
	|	И НЕ CRM_КартыМаршрутов.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков)";
	Запрос.УстановитьПараметр("МассивКартВПроцессах", МассивКартВПроцессах);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
			СхемаКомпоновкиДанных		= Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			НастройкиКомпоновкиДанных	= Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			
			Если (СхемаКомпоновкиДанных = Неопределено) ИЛИ (НастройкиКомпоновкиДанных = Неопределено) Тогда
				Продолжить;
			КонецЕсли;			
			
			Если СхемаКомпоновкиДанных<>Неопределено И НастройкиКомпоновкиДанных<>Неопределено И ПроверитьУсловия(Пользователи.ТекущийПользователь(), СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных) Тогда
				СписокКарт.Добавить(Выборка.КартаМаршрута);
			КонецЕсли;
		ИначеЕсли НЕ СписокДляМастера Тогда
			СписокКарт.Добавить(Выборка.КартаМаршрута);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Процессы, Карты",СписокПроцессов,СписокКарт);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за отрисовку и работу кнопок выполнения задач на форме документов.

Функция ОбъектСвязанСБизнесПроцессом(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И CRM_БизнесПроцесс.Интерес = &Интерес";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПолучитьНеВыполненныеЗадачи(Ссылка, ПоТекущемуПользователю = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",Ссылка);
	Запрос.УстановитьПараметр("Исполнитель",ПользователиКлиентСервер.АвторизованныйПользователь());
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.CRM_СостояниеИнтереса = НЕОПРЕДЕЛЕНО
	|	И ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес";
	Если ПоТекущемуПользователю Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	И ВЫБОР
	|			КОГДА НЕ ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА ЗадачаИсполнителя.Исполнитель = &Исполнитель
	|			ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя В
	|					(ВЫБРАТЬ
	|						ИсполнителиЗадач.РольИсполнителя
	|					ИЗ
	|						РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|					ГДЕ
	|						ИсполнителиЗадач.Исполнитель = &Исполнитель)
	|		КОНЕЦ";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьБизнесПроцессПоОбъекту(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",Ссылка);
	Запрос.УстановитьПараметр("Исполнитель",ПользователиКлиентСервер.АвторизованныйПользователь());
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.БизнесПроцесс КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.CRM_СостояниеИнтереса = НЕОПРЕДЕЛЕНО
	|	И ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтрисоватьКоманднуюПанельРаботыСЗадачами(Форма);
	ЗаблокироватьУправляемыйРеквизит(Форма);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Форма.ЗадачаИсполнителя_Выполнена Тогда
		
		ДействияПослеВыполненияЗадачи(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ТекущийОбъект.ДополнительныеСвойства.ЭтоНовый Тогда
		
		МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(ТекущийОбъект.Ссылка, Истина);
		
		Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
			МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(ТекущийОбъект.Ссылка);
			ЭтоЧужаяЗадача = Истина;
		КонецЕсли;
		
		Если МассивЗадачПоОбъекту.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(МассивЗадачПоОбъекту[0].БизнесПроцесс.ВидОбъектаСтрокой)
				И ЗначениеЗаполнено(МассивЗадачПоОбъекту[0].БизнесПроцесс.РеквизитОбъектаСтрокой) Тогда
				Если СтрНайти(МассивЗадачПоОбъекту[0].БизнесПроцесс.РеквизитОбъектаСтрокой,"%Свойство%") Тогда
					
					СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(МассивЗадачПоОбъекту[0].БизнесПроцесс.РеквизитОбъектаСтрокой,"%Свойство%","")));
					
					МассивСтрок = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",СсылкаНаСвойство));
					
					Если МассивСтрок.Количество() > 0 Тогда
						Форма[МассивСтрок[0].ИмяРеквизитаЗначение] = МассивЗадачПоОбъекту[0].CRM_СостояниеИнтереса;
					КонецЕсли;
					
					// СтандартныеПодсистемы.Свойства
					УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
					// Конец СтандартныеПодсистемы.Свойства
				Иначе
					Форма.Объект[МассивЗадачПоОбъекту[0].БизнесПроцесс.РеквизитОбъектаСтрокой] = МассивЗадачПоОбъекту[0].CRM_СостояниеИнтереса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Форма.Записать();
		ЗаблокироватьУправляемыйРеквизит(Форма);
	Иначе
		ГруппаАвтоКнопки = Форма.Элементы.Найти("ГруппаАвтоКнопки");
		Если ГруппаАвтоКнопки = Неопределено Тогда
			ОтрисоватьКоманднуюПанельРаботыСЗадачами(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияПослеВыполненияЗадачи(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЭтоЧужаяЗадача = Ложь;
	
	МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(Форма.Объект.Ссылка, Истина);
	
	Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
		МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(Форма.Объект.Ссылка);
		ЭтоЧужаяЗадача = Истина;
	КонецЕсли;
	
	Если МассивЗадачПоОбъекту.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(МассивЗадачПоОбъекту[0].БизнесПроцесс.ВидОбъектаСтрокой)
			И ЗначениеЗаполнено(МассивЗадачПоОбъекту[0].БизнесПроцесс.РеквизитОбъектаСтрокой) Тогда
			Если СтрНайти(МассивЗадачПоОбъекту[0].БизнесПроцесс.РеквизитОбъектаСтрокой,"%Свойство%") Тогда
				
				СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(МассивЗадачПоОбъекту[0].БизнесПроцесс.РеквизитОбъектаСтрокой,"%Свойство%","")));
				
				МассивСтрок = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",СсылкаНаСвойство));
				
				Если МассивСтрок.Количество() > 0 Тогда
					Форма[МассивСтрок[0].ИмяРеквизитаЗначение] = МассивЗадачПоОбъекту[0].CRM_СостояниеИнтереса;
				КонецЕсли;
				
				// СтандартныеПодсистемы.Свойства
				УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
				// Конец СтандартныеПодсистемы.Свойства
			Иначе
				ТекущийОбъект[МассивЗадачПоОбъекту[0].БизнесПроцесс.РеквизитОбъектаСтрокой] = МассивЗадачПоОбъекту[0].CRM_СостояниеИнтереса;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Форма.ЗадачаИсполнителя.Выполнена И Форма.ЗадачаИсполнителя.БизнесПроцесс.Завершен Тогда
		
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Форма.ЗадачаИсполнителя_БизнесПроцесс, Форма.ЗадачаИсполнителя_ТочкаМаршрута,,,Форма.ЗадачаИсполнителя_ВариантВыполнения);
		
		Если МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Форма.ЗадачаИсполнителя_БизнесПроцесс);
			НаборЭтапов.Отбор.ТочкаМаршрута.Установить(МассивИсходящихТочек[0].ИсходящаяТочка);
			НаборЭтапов.Прочитать();
			
			Если (НаборЭтапов.Количество() > 0) И ЗначениеЗаполнено(НаборЭтапов[0].Состояние) Тогда
				
				Если ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс.ВидОбъектаСтрокой)
					И ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой) Тогда
					Если СтрНайти(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой,"%Свойство%") Тогда
						
						СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой,"%Свойство%","")));
						
						МассивСтрок = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",СсылкаНаСвойство));
						
						Если МассивСтрок.Количество() > 0 Тогда
							Форма[МассивСтрок[0].ИмяРеквизитаЗначение] = НаборЭтапов[0].Состояние;
						КонецЕсли;
						
						// СтандартныеПодсистемы.Свойства
						УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
						// Конец СтандартныеПодсистемы.Свойства
					Иначе
						ТекущийОбъект[Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой] = НаборЭтапов[0].Состояние;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьКоманднуюПанельРаботыСЗадачами(Форма, МассивЗадачПоОбъекту, ЭтоЧужаяЗадача);
	
	Форма.ЗадачаИсполнителя_Выполнена = Ложь;
	
КонецПроцедуры

Процедура ОбновитьКоманднуюПанельРаботыСЗадачами(Форма, МассивЗадачПоОбъекту, ЭтоЧужаяЗадача) Экспорт
	
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого ЭлементФормы ИЗ Форма.Элементы Цикл
		Если СтрНайти(ЭлементФормы.Имя,"Кнопка_ВыполнитьЗадачу_") > 0
			И ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
			МассивУдаляемыхЭлементов.Добавить(ЭлементФормы.Имя);
		КонецЕсли;
	КонецЦИкла;
	
	Для Каждого ЭлементИмя ИЗ МассивУдаляемыхЭлементов Цикл
		Форма.Элементы.Удалить(Форма.Элементы.Найти(ЭлементИмя));
	КонецЦикла;
	
	МассивУдаляемыхКоманд = Новый Массив;
	
	Для Каждого КомандаФормы ИЗ Форма.Команды Цикл
		Если СтрНайти(КомандаФормы.Имя,"Команда_ВыполнитьЗадачу_")> 0 Тогда
			МассивУдаляемыхКоманд.Добавить(КомандаФормы.Имя);
		КонецЕсли;
	КонецЦИкла;
	
	Для Каждого ИмяКоманды ИЗ МассивУдаляемыхКоманд Цикл
		Форма.Команды.Удалить(Форма.Команды[ИмяКоманды]);
	КонецЦикла;
	
	ТекстТекущегоЭтапа = "";
	
	Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
		БизнесПроцесс = ПолучитьБизнесПроцессПоОбъекту(Форма.Объект.Ссылка);
		Если НЕ БизнесПроцесс = Неопределено Тогда
			Форма.ЗадачаИсполнителя_БизнесПроцесс = БизнесПроцесс;
			
			ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаписьТекущегоЭтапа.Объект = БизнесПроцесс;
			ЗаписьТекущегоЭтапа.Прочитать();
			Если ЗаписьТекущегоЭтапа.Выбран() Тогда
				ТекстТекущегоЭтапа = ЗаписьТекущегоЭтапа.ТекущийЭтап;
			КонецЕсли;
			
			Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая.Видимость = Ложь;
			Форма.Элементы.ГруппаОписаниеЗадачи.Видимость = Ложь;
			Форма.Элементы.Декорация_СтраницаЗадачиЧужая.Заголовок = НСтр("ru = 'Этап: '") + ТекстТекущегоЭтапа;
			Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиЧужая;
		КонецЕсли;
	Иначе
		Задача = МассивЗадачПоОбъекту[0];
		
		ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
		ЗаписьТекущегоЭтапа.Объект = Задача.БизнесПроцесс;
		ЗаписьТекущегоЭтапа.Прочитать();
		Если ЗаписьТекущегоЭтапа.Выбран() Тогда
			ТекстТекущегоЭтапа = ЗаписьТекущегоЭтапа.ТекущийЭтап;
		КонецЕсли;
		
		Форма.ЗадачаИсполнителя									= Задача;
		Форма.ЗадачаИсполнителя_БизнесПроцесс					= Задача.БизнесПроцесс;
		Форма.ЗадачаИсполнителя_ПринятаКИсполнению				= Задача.ПринятаКИсполнению;
		Форма.ЗадачаИсполнителя_ТекущийПользователь				= ПользователиКлиентСервер.АвторизованныйПользователь();
		Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения	= Ложь;
		Форма.ЗадачаИсполнителя_ТочкаМаршрута					= Задача.CRM_ТочкаМаршрута;
		Форма.ЗадачаИсполнителя_НомерВерсииКартыМаршрута		= Задача.БизнесПроцесс.НомерВерсииКартыМаршрута;
		Форма.ЗадачаИсполнителя_УсловияВыполнены				= CRM_БизнесПроцессыСервер.ПолучитьУсловиеЭтапаПроверитьПрименимость(Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_ПринятаКИсполнению);
		
		// ЗАДАЧА ПРИНЯТА К ИСПОЛНЕНИЮ
		СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
		
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_0");
			НоваяКомандаФормы.Заголовок                 = "Выполнить";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0",Тип("КнопкаФормы"), Форма.Элементы.ПанельАвтоКнопокСтраницаЗадачиПринята, Форма.Элементы.Кнопка_КартаМаршрута_СтраницаЗадачиПринята);
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0",Тип("КнопкаФормы"), Форма.Элементы.ПанельАвтоКнопокСтраницаЗадачиПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_0";
			НовыйПунктМеню.Заголовок			= "Выполнить";
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЭтапов.Отбор.Объект.Установить(Задача.БизнесПроцесс.Ссылка);
		НаборЭтапов.Прочитать();
		
		// Если это задача БП Поручение и этап "Выполнить", то кнопка будет одна.
		Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			И НаборЭтапов[0].ТочкаМаршрута = Задача.CRM_ТочкаМаршрута Тогда
			
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_"+?(НаборЭтапов[1].Используется,"1","0"));
			НоваяКомандаФормы.Заголовок                 = "Выполнить";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0",Тип("КнопкаФормы"), Форма.Элементы.ПанельАвтоКнопокСтраницаЗадачиПринята, Форма.Элементы.Кнопка_КартаМаршрута_СтраницаЗадачиПринята);
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0",Тип("КнопкаФормы"), Форма.Элементы.ПанельАвтоКнопокСтраницаЗадачиПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_"+?(НаборЭтапов[1].Используется,"1","0");
			НовыйПунктМеню.Заголовок			= "Выполнить";
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
			НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
			
		Иначе
			Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения = (СтруктураВариантовВыполнения.СписокВариантов.Количество()>1);
			
			Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
				НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_"+СокрЛП(Строка(ЭлементСписка.Значение)));
				НоваяКомандаФормы.Заголовок                 = ЭлементСписка.Представление;
				НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
				НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
				
				НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_"+СокрЛП(Строка(ЭлементСписка.Значение)), Тип("КнопкаФормы"), Форма.Элементы.ПодменюАвтоКоманд);
				НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_"+СокрЛП(Строка(ЭлементСписка.Значение));
				НовыйПунктМеню.Заголовок			= ЭлементСписка.Представление;
				НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
				КнопкаПоУмолчанию					= ЭлементСписка.Пометка;
				НовыйПунктМеню.КнопкаПоУмолчанию	= КнопкаПоУмолчанию;
				НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
			КонецЦикла;
		КонецЕсли;
		
		Если Задача.ПринятаКИсполнению И НЕ ЭтоЧужаяЗадача Тогда
			Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиПринята;
		ИначеЕсли НЕ ЭтоЧужаяЗадача Тогда
			Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиНеПринята;
		Иначе
			Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиЧужая;
		КонецЕсли;
		
		Форма.Элементы.Декорация_СтраницаЗадачиПринята.Заголовок = НСтр("ru = 'Этап: '") + ТекстТекущегоЭтапа;
		Форма.Элементы.Декорация_СтраницаЗадачиНеПринята.Заголовок = НСтр("ru = 'Этап: '") + ТекстТекущегоЭтапа;
		Форма.Элементы.Декорация_СтраницаЗадачиЧужая.Заголовок = НСтр("ru = 'Этап: '") + ТекстТекущегоЭтапа;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтрисоватьКоманднуюПанельРаботыСЗадачами(Форма) Экспорт
	
	ЭтоЧужаяЗадача = Ложь;
	
	МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(Форма.Объект.Ссылка, Истина);
	
	Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
		МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(Форма.Объект.Ссылка);
		ЭтоЧужаяЗадача = Истина;
	КонецЕсли;
	
	Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
		
		БизнесПроцесс = ПолучитьБизнесПроцессПоОбъекту(Форма.Объект.Ссылка);
		Если НЕ БизнесПроцесс = Неопределено Тогда
			
			ТекстТекущегоЭтапа = "";
			ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаписьТекущегоЭтапа.Объект = БизнесПроцесс;
			ЗаписьТекущегоЭтапа.Прочитать();
			Если ЗаписьТекущегоЭтапа.Выбран() Тогда
				ТекстТекущегоЭтапа = ЗаписьТекущегоЭтапа.ТекущийЭтап;
			КонецЕсли;
			
			// Добавим необходимыеРеквизиты
			МассивДобавляемыхРеквизитов = Новый Массив;
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя", Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя")));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_БизнесПроцесс", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс")));
			
			Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
			Форма.ЗадачаИсполнителя_БизнесПроцесс = БизнесПроцесс;
			
			
			Для Каждого ЭлементФормы ИЗ Форма.Элементы Цикл
				ПервыйЭлемент = ЭлементФормы;
				Прервать;
			КонецЦикла;
			
			ГруппаАвтоКнопки = Форма.Элементы.Вставить("ГруппаАвтоКнопки",Тип("ГруппаФормы"),,ПервыйЭлемент);
			ГруппаАвтоКнопки.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаАвтоКнопки.Заголовок     = "ГруппаАвтоКнопки";
			ГруппаАвтоКнопки.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаАвтоКнопки.ОтображатьЗаголовок = Ложь;
			ГруппаАвтоКнопки.РастягиватьПоВертикали = Ложь;
			
			АвтоКнопки = Форма.Элементы.Добавить("АвтоКнопки",Тип("ГруппаФормы"),ГруппаАвтоКнопки);
			АвтоКнопки.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
			АвтоКнопки.Заголовок     = "АвтоКнопки";
			АвтоКнопки.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			АвтоКнопки.ОтображатьЗаголовок = Ложь;
			АвтоКнопки.РастягиватьПоВертикали = Ложь;
			
			ПанельСтраницАвтоКнопки = Форма.Элементы.Добавить("ПанельСтраницАвтоКнопки",Тип("ГруппаФормы"),АвтоКнопки);
			ПанельСтраницАвтоКнопки.Вид = ВидГруппыФормы.Страницы;
			ПанельСтраницАвтоКнопки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			
			СтраницаЗадачиЧужая = Форма.Элементы.Добавить("СтраницаЗадачиЧужая",Тип("ГруппаФормы"),ПанельСтраницАвтоКнопки);
			СтраницаЗадачиЧужая.Вид = ВидГруппыФормы.Страница;
			СтраницаЗадачиЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
			ГруппаЭлементовСтраницаЗадачиЧужая = Форма.Элементы.Добавить("ГруппаЭлементовСтраницаЗадачиЧужая",Тип("ГруппаФормы"),СтраницаЗадачиЧужая);
			ГруппаЭлементовСтраницаЗадачиЧужая.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементовСтраницаЗадачиЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаЭлементовСтраницаЗадачиЧужая.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементовСтраницаЗадачиЧужая.РастягиватьПоВертикали = Ложь;
			
			ПанельАвтоКнопокСтраницаЗадачиЧужая = Форма.Элементы.Добавить("ПанельАвтоКнопокСтраницаЗадачиЧужая",Тип("ГруппаФормы"),СтраницаЗадачиЧужая);
			ПанельАвтоКнопокСтраницаЗадачиЧужая.Вид           = ВидГруппыФормы.КоманднаяПанель;
			//ПанельАвтоКнопокСтраницаЗадачиЧужая.Ширина = 15;
			ПанельАвтоКнопокСтраницаЗадачиЧужая.РастягиватьПоГоризонтали	= Истина;
			
			// КОМАНДЫ
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_КартаМаршрута");
			НоваяКомандаФормы.Заголовок                 = "Карта маршрута";
			НоваяКомандаФормы.Подсказка                 = "Открыть карту маршрута бизнес-процесса";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ПодсистемаБизнесПроцессы_Такси;
			НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
			
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ОписаниеБизнесПроцесса");
			НоваяКомандаФормы.Заголовок                 = "Описание бизнес-процесса";
			НоваяКомандаФормы.Подсказка                 = "Описание бизнес-процесса и задач";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.Задача;
			НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
			
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПередвинутьЭтап");
			НоваяКомандаФормы.Заголовок                 = "Сменить текущий этап";
			НоваяКомандаФормы.Подсказка                 = "Сменить текущий этап";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ОтветитьНаЭлектронноеПисьмо;
			НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
			
			// ЧУЖАЯ ЗАДАЧА
			НовыйПунктМеню = Форма.Элементы.Вставить("Декорация_СтраницаЗадачиЧужая", Тип("ДекорацияФормы"), ГруппаЭлементовСтраницаЗадачиЧужая);
			НовыйПунктМеню.Вид = ВидДекорацииФормы.Надпись;
			НовыйПунктМеню.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Лево;
			НовыйПунктМеню.Заголовок = НСтр("ru = 'Этап: '") + ТекстТекущегоЭтапа;
			
			//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиЧужая);
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиЧужая);
			НовыйПунктМеню.ИмяКоманды			= "Команда_КартаМаршрута";
			НовыйПунктМеню.Ширина = 3;
			//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
			
			//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиЧужая);
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиЧужая);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеБизнесПроцесса";
			НовыйПунктМеню.Ширина = 3;
			//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
			
			ПанельСтраницАвтоКнопки.ТекущаяСтраница = СтраницаЗадачиЧужая;
		КонецЕсли;
	Иначе
		Задача = МассивЗадачПоОбъекту[0];
		
		ТекстТекущегоЭтапа = "";
		ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
		ЗаписьТекущегоЭтапа.Объект = Задача.БизнесПроцесс;
		ЗаписьТекущегоЭтапа.Прочитать();
		Если ЗаписьТекущегоЭтапа.Выбран() Тогда
			ТекстТекущегоЭтапа = ЗаписьТекущегоЭтапа.ТекущийЭтап;
		КонецЕсли;
		
		// Добавим необходимыеРеквизиты
		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя", Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_БизнесПроцесс", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ПринятаКИсполнению", Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_НесколькоВариантовВыполнения", Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ТекущийПользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ОтложитьНаДату", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.CRM_ТочкиМаршрутов")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_НомерВерсииКартыМаршрута", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ВариантВыполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ВариантВыполненияСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_УсловияВыполнены", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_Выполнена", Новый ОписаниеТипов("Булево")));
		
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		Форма.ЗадачаИсполнителя									= Задача;
		Форма.ЗадачаИсполнителя_БизнесПроцесс					= Задача.БизнесПроцесс;
		Форма.ЗадачаИсполнителя_ПринятаКИсполнению				= Задача.ПринятаКИсполнению;
		Форма.ЗадачаИсполнителя_ТекущийПользователь				= ПользователиКлиентСервер.АвторизованныйПользователь();
		Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения	= Ложь;
		Форма.ЗадачаИсполнителя_ТочкаМаршрута					= Задача.CRM_ТочкаМаршрута;
		Форма.ЗадачаИсполнителя_НомерВерсииКартыМаршрута		= Задача.БизнесПроцесс.НомерВерсииКартыМаршрута;
		Форма.ЗадачаИсполнителя_УсловияВыполнены				= CRM_БизнесПроцессыСервер.ПолучитьУсловиеЭтапаПроверитьПрименимость(Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_ПринятаКИсполнению);
		
		Для Каждого ЭлементФормы ИЗ Форма.Элементы Цикл
			ПервыйЭлемент = ЭлементФормы;
			Прервать;
		КонецЦикла;
		
		ГруппаАвтоКнопки = Форма.Элементы.Вставить("ГруппаАвтоКнопки",Тип("ГруппаФормы"),,ПервыйЭлемент);
		ГруппаАвтоКнопки.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаАвтоКнопки.Заголовок     = "ГруппаАвтоКнопки";
		ГруппаАвтоКнопки.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаАвтоКнопки.ОтображатьЗаголовок = Ложь;
		ГруппаАвтоКнопки.РастягиватьПоВертикали = Ложь;
		
		АвтоКнопки = Форма.Элементы.Добавить("АвтоКнопки",Тип("ГруппаФормы"),ГруппаАвтоКнопки);
		АвтоКнопки.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		АвтоКнопки.Заголовок     = "АвтоКнопки";
		АвтоКнопки.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		АвтоКнопки.ОтображатьЗаголовок = Ложь;
		АвтоКнопки.РастягиватьПоВертикали = Ложь;
		
		ПанельСтраницАвтоКнопки = Форма.Элементы.Добавить("ПанельСтраницАвтоКнопки",Тип("ГруппаФормы"),АвтоКнопки);
		ПанельСтраницАвтоКнопки.Вид = ВидГруппыФормы.Страницы;
		ПанельСтраницАвтоКнопки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		СтраницаЗадачиПринята = Форма.Элементы.Добавить("СтраницаЗадачиПринята",Тип("ГруппаФормы"),ПанельСтраницАвтоКнопки);
		СтраницаЗадачиПринята.Вид = ВидГруппыФормы.Страница;
		СтраницаЗадачиПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		СтраницаЗадачиНеПринята = Форма.Элементы.Добавить("СтраницаЗадачиНеПринята",Тип("ГруппаФормы"),ПанельСтраницАвтоКнопки);
		СтраницаЗадачиНеПринята.Вид = ВидГруппыФормы.Страница;
		СтраницаЗадачиНеПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		СтраницаЗадачиЧужая = Форма.Элементы.Добавить("СтраницаЗадачиЧужая",Тип("ГруппаФормы"),ПанельСтраницАвтоКнопки);
		СтраницаЗадачиЧужая.Вид = ВидГруппыФормы.Страница;
		СтраницаЗадачиЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		ГруппаЭлементовСтраницаЗадачиПринята = Форма.Элементы.Добавить("ГруппаЭлементовСтраницаЗадачиПринята",Тип("ГруппаФормы"),СтраницаЗадачиПринята);
		ГруппаЭлементовСтраницаЗадачиПринята.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементовСтраницаЗадачиПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаЭлементовСтраницаЗадачиПринята.ОтображатьЗаголовок = Ложь;
		//ГруппаЭлементовСтраницаЗадачиПринята.РастягиватьПоВертикали = Ложь;
		
		ПанельАвтоКнопокСтраницаЗадачиПринята = Форма.Элементы.Добавить("ПанельАвтоКнопокСтраницаЗадачиПринята",Тип("ГруппаФормы"),СтраницаЗадачиПринята);
		ПанельАвтоКнопокСтраницаЗадачиПринята.Вид           = ВидГруппыФормы.КоманднаяПанель;
		//ПанельАвтоКнопокСтраницаЗадачиПринята.Ширина = 15;
		ПанельАвтоКнопокСтраницаЗадачиПринята.РастягиватьПоГоризонтали	= Истина;
		
		ГруппаЭлементовСтраницаЗадачиНеПринята = Форма.Элементы.Добавить("ГруппаЭлементовСтраницаЗадачиНеПринята",Тип("ГруппаФормы"),СтраницаЗадачиНеПринята);
		ГруппаЭлементовСтраницаЗадачиНеПринята.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементовСтраницаЗадачиНеПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаЭлементовСтраницаЗадачиНеПринята.ОтображатьЗаголовок = Ложь;
		ГруппаЭлементовСтраницаЗадачиНеПринята.РастягиватьПоВертикали = Ложь;
		
		ПанельАвтоКнопокСтраницаЗадачиНеПринята = Форма.Элементы.Добавить("ПанельАвтоКнопокСтраницаЗадачиНеПринята",Тип("ГруппаФормы"),СтраницаЗадачиНеПринята);
		ПанельАвтоКнопокСтраницаЗадачиНеПринята.Вид           = ВидГруппыФормы.КоманднаяПанель;
		//ПанельАвтоКнопокСтраницаЗадачиНеПринята.Ширина = 15;
		ПанельАвтоКнопокСтраницаЗадачиНеПринята.РастягиватьПоГоризонтали	= Истина;
		
		ГруппаЭлементовСтраницаЗадачиЧужая = Форма.Элементы.Добавить("ГруппаЭлементовСтраницаЗадачиЧужая",Тип("ГруппаФормы"),СтраницаЗадачиЧужая);
		ГруппаЭлементовСтраницаЗадачиЧужая.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементовСтраницаЗадачиЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаЭлементовСтраницаЗадачиЧужая.ОтображатьЗаголовок = Ложь;
		ГруппаЭлементовСтраницаЗадачиЧужая.РастягиватьПоВертикали = Ложь;
		
		ПанельАвтоКнопокСтраницаЗадачиЧужая = Форма.Элементы.Добавить("ПанельАвтоКнопокСтраницаЗадачиЧужая",Тип("ГруппаФормы"),СтраницаЗадачиЧужая);
		ПанельАвтоКнопокСтраницаЗадачиЧужая.Вид           = ВидГруппыФормы.КоманднаяПанель;
		//ПанельАвтоКнопокСтраницаЗадачиЧужая.Ширина = 15;
		ПанельАвтоКнопокСтраницаЗадачиЧужая.РастягиватьПоГоризонтали	= Истина;
		
		ГруппаОписаниеЗадачи = Форма.Элементы.Добавить("ГруппаОписаниеЗадачи",Тип("ГруппаФормы"),ГруппаАвтоКнопки);
		ГруппаОписаниеЗадачи.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОписаниеЗадачи.Заголовок     = "Описание Задачи";
		ГруппаОписаниеЗадачи.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаОписаниеЗадачи.ОтображатьЗаголовок = Ложь;
		ГруппаОписаниеЗадачи.РастягиватьПоВертикали = Ложь;
		ГруппаОписаниеЗадачи.Видимость = Ложь;
		
		ПолеОписанияЗадачи = Форма.Элементы.Добавить("ПолеОписанияЗадачи",Тип("ПолеФормы"),ГруппаОписаниеЗадачи);
		ПолеОписанияЗадачи.Вид					= ВидПоляФормы.ПолеВвода;
		ПолеОписанияЗадачи.МногострочныйРежим	= Истина;
		ПолеОписанияЗадачи.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеОписанияЗадачи.ТолькоПросмотр		= Истина;
		ПолеОписанияЗадачи.ПутьКДанным			= "ЗадачаИсполнителя.Описание";
		ПолеОписанияЗадачи.АвтоМаксимальнаяШирина = Ложь;
		ПолеОписанияЗадачи.РастягиватьПоГоризонтали = Истина;
		
		// КОМАНДЫ
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_КартаМаршрута");
		НоваяКомандаФормы.Заголовок                 = "Карта маршрута";
		НоваяКомандаФормы.Подсказка                 = "Открыть карту маршрута бизнес-процесса";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ПодсистемаБизнесПроцессы_Такси;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ОписаниеБизнесПроцесса");
		НоваяКомандаФормы.Заголовок                 = "Описание бизнес-процесса";
		НоваяКомандаФормы.Подсказка                 = "Описание бизнес-процесса и задач";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.Задача;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		//НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПеренестиСрок");
		//НоваяКомандаФормы.Заголовок                 = "Отложить следующую задачу на...";
		//НоваяКомандаФормы.Подсказка                 = "Отложить следующую задачу на...";
		//НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		//НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_Просрочено;
		//НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_Перенаправить");
		НоваяКомандаФормы.Заголовок                 = "Перенаправить";
		НоваяКомандаФормы.Подсказка                 = "Перенаправить";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ПередатьДокумент;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ОписаниеЗадачи");
		НоваяКомандаФормы.Заголовок                 = "Описание задачи";
		НоваяКомандаФормы.Подсказка                 = "Описание задачи";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_Информация;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПередвинутьЭтап");
		НоваяКомандаФормы.Заголовок                 = "Сменить текущий этап";
		НоваяКомандаФормы.Подсказка                 = "Сменить текущий этап";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ОтветитьНаЭлектронноеПисьмо;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПринятьКИсполнению");
		НоваяКомандаФормы.Заголовок                 = "Принять";
		НоваяКомандаФормы.Подсказка                 = "Принять к исполнению";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_КИсполнению;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.КартинкаИТекст;
		
		// ЗАДАЧА ПРИНЯТА К ИСПОЛНЕНИЮ
		СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
		
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_0");
			НоваяКомандаФормы.Заголовок                 = "Выполнить";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0",Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_0";
			НовыйПунктМеню.Заголовок			= "Выполнить";
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЭтапов.Отбор.Объект.Установить(Задача.БизнесПроцесс.Ссылка);
		НаборЭтапов.Прочитать();
		
		// Если это задача БП Поручение и этап "Выполнить", то кнопка будет одна.
		Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			И НаборЭтапов[0].ТочкаМаршрута = Задача.CRM_ТочкаМаршрута Тогда
			
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_"+?(НаборЭтапов[1].Используется,"1","0"));
			НоваяКомандаФормы.Заголовок                 = "Выполнить";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0",Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_"+?(НаборЭтапов[1].Используется,"1","0");
			НовыйПунктМеню.Заголовок			= "Выполнить";
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
			НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
			
		Иначе
			
			Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения = (СтруктураВариантовВыполнения.СписокВариантов.Количество()>1);
			
			ПодменюАвтоКоманд = Форма.Элементы.Вставить("ПодменюАвтоКоманд", Тип("ГруппаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
			ПодменюАвтоКоманд.Вид = ВидГруппыФормы.Подменю;
			ПодменюАвтоКоманд.Заголовок = "   "+СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок+"   ";
			ПодменюАвтоКоманд.ЦветФона = Новый Цвет(255, 225, 0);
			
			Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
				НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_"+СокрЛП(Строка(ЭлементСписка.Значение)));
				НоваяКомандаФормы.Заголовок                 = ЭлементСписка.Представление;
				НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
				НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
				
				НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_"+СокрЛП(Строка(ЭлементСписка.Значение)), Тип("КнопкаФормы"), ПодменюАвтоКоманд);
				НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_"+СокрЛП(Строка(ЭлементСписка.Значение));
				НовыйПунктМеню.Заголовок			= ЭлементСписка.Представление;
				НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
				КнопкаПоУмолчанию					= ЭлементСписка.Пометка;
				НовыйПунктМеню.КнопкаПоУмолчанию	= КнопкаПоУмолчанию;
				НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
			КонецЦикла;
		КонецЕсли;
		
		НовыйПунктМеню = Форма.Элементы.Добавить("Декорация_СтраницаЗадачиПринята", Тип("ДекорацияФормы"), ГруппаЭлементовСтраницаЗадачиПринята);
		НовыйПунктМеню.Вид = ВидДекорацииФормы.Надпись;
		НовыйПунктМеню.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйПунктМеню.Заголовок = НСтр("ru = 'Этап: '") + ТекстТекущегоЭтапа;
		
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеЗадачи";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Перенаправить_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Перенаправить_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_Перенаправить";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		Если Форма.ЗадачаИсполнителя_БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап Тогда
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПередвинутьЭтап_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПередвинутьЭтап_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ПередвинутьЭтап";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		КонецЕслИ;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_КартаМаршрута";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеБизнесПроцесса";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		////НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПеренестиСрок_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПеренестиСрок_СтраницаЗадачиПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиПринята);
		//НовыйПунктМеню.ИмяКоманды			= "Команда_ПеренестиСрок";
		//НовыйПунктМеню.Ширина = 3;
		////НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		
		// ЗАДАЧА НЕ ПРИНЯТА К ИСПОЛНЕНИЮ
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Декорация_СтраницаЗадачиНеПринята", Тип("ДекорацияФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		НовыйПунктМеню.Вид = ВидДекорацииФормы.Надпись;
		НовыйПунктМеню.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйПунктМеню.Заголовок = НСтр("ru = 'Этап: '") + ТекстТекущегоЭтапа;
		
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиНеПринята);
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеЗадачи";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПринятьКИсполнению_СтраницаЗадачиНеПринята",Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиНеПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПринятьКИсполнению_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ПринятьКИсполнению";
		НовыйПунктМеню.Заголовок			= "Принять";
		НовыйПунктМеню.Картинка				= БиблиотекаКартинок.CRM_КИсполнению;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Перенаправить_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиНеПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Перенаправить_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_Перенаправить";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		Если Форма.ЗадачаИсполнителя_БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап Тогда
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПередвинутьЭтап_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиНеПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПередвинутьЭтап_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ПередвинутьЭтап";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		КонецЕсли;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиНеПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_КартаМаршрута";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиНеПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеБизнесПроцесса";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		////НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПеренестиСрок_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиНеПринята);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПеренестиСрок_СтраницаЗадачиНеПринята", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиНеПринята);
		//НовыйПунктМеню.ИмяКоманды			= "Команда_ПеренестиСрок";
		//НовыйПунктМеню.Ширина = 3;
		////НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		// ЧУЖАЯ ЗАДАЧА
		НовыйПунктМеню = Форма.Элементы.Вставить("Декорация_СтраницаЗадачиЧужая", Тип("ДекорацияФормы"), ГруппаЭлементовСтраницаЗадачиЧужая);
		НовыйПунктМеню.Вид = ВидДекорацииФормы.Надпись;
		НовыйПунктМеню.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйПунктМеню.Заголовок = НСтр("ru = 'Этап: '") + ТекстТекущегоЭтапа;
		
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиЧужая);
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиЧужая);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеЗадачи";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиЧужая);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиЧужая);
		НовыйПунктМеню.ИмяКоманды			= "Команда_КартаМаршрута";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ПанельАвтоКнопокСтраницаЗадачиЧужая);
		//НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиЧужая", Тип("КнопкаФормы"), ГруппаЭлементовСтраницаЗадачиЧужая);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеБизнесПроцесса";
		НовыйПунктМеню.Ширина = 3;
		//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
		Если Задача.ПринятаКИсполнению И НЕ ЭтоЧужаяЗадача Тогда
			ПанельСтраницАвтоКнопки.ТекущаяСтраница = СтраницаЗадачиПринята;
		ИначеЕсли НЕ ЭтоЧужаяЗадача Тогда
			ПанельСтраницАвтоКнопки.ТекущаяСтраница = СтраницаЗадачиНеПринята;
		Иначе
			ПанельСтраницАвтоКнопки.ТекущаяСтраница = СтраницаЗадачиЧужая;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаблокироватьУправляемыйРеквизит(Форма)
	
	Если ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс)
	И ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс.ВидОбъектаСтрокой)
	И ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой) Тогда
		Если СтрНайти(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой,"%Свойство%") Тогда
			
			СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой,"%Свойство%","")));
			
			МассивСтрок = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",СсылкаНаСвойство));
			
			Попытка
				Форма.Элементы[МассивСтрок[0].ИмяРеквизитаЗначение].ТолькоПросмотр = Истина;
			Исключение
			КонецПопытки;
		Иначе
			Для Каждого ЭлементФормы ИЗ Форма.Элементы Цикл
				Попытка
					Если ЭлементФормы.ПутьКДанным = "Объект."+Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой Тогда
						ЭлементФормы.ТолькоПросмотр = Истина;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отмечает указанную задачу как принятую к исполнению.
//
Функция ПринятьЗадачуКИсполнениюИзФормыДокумента(Задача, ТекущийПользователь) Экспорт
	
	Результат = Истина;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
		Блокировка.Заблокировать();
		
		// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
		// позволить выполнять перенаправление по команде из формы этой задачи.
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗадачаОбъект.ПринятаКИсполнению = Истина;
		ЗадачаОбъект.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
		Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.Исполнитель) Тогда
			ЗадачаОбъект.Исполнитель = ТекущийПользователь;
		КонецЕсли;
		
		ДатаПринятияКИсполнениюСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ЗадачаОбъект.ДатаПринятияКИсполнению);
		
		ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ДатаПринятияКИсполнениюСтрокой+" "+НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь);
		
		Если НЕ ЗадачаОбъект.РезультатВыполнения = "" Тогда
			ЗадачаОбъект.РезультатВыполнения = "
			|"+ДатаПринятияКИсполнениюСтрокой+" "+НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь) + "
			|
			|" + ЗадачаОбъект.РезультатВыполнения;
		Иначе
			ЗадачаОбъект.РезультатВыполнения = ДатаПринятияКИсполнениюСтрокой +" "+ НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь);
		КонецЕсли;
		
		ЗадачаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// 
//
Функция ЗафиксироватьРезультатПеренаправления(Задача, Результат) Экспорт
	
	РезультатПеренаправления = Истина;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
		Блокировка.Заблокировать();
		
		// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
		// позволить выполнять перенаправление по команде из формы этой задачи.
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПричинаПеренаправления = Результат.ПричинаПеренаправления;
		Если НЕ ЗначениеЗаполнено(ПричинаПеренаправления) Тогда
			ПричинаПеренаправления = НСтр("ru = 'Без указания причины.'")
		КонецЕсли;
		
		ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ТекущаяДатаСеанса());
		
		ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ДатаСтрокой + " " +НСтр("ru = 'Перенаправлена -> '") + Строка(?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель));
		
		ЗадачаОбъект.РезультатВыполнения = "
		|"+ ДатаСтрокой + " " +НСтр("ru = 'Перенаправлена -> '") + Строка(?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель)) + "
		|"+ПричинаПеренаправления + "
		|
		|" + ЗадачаОбъект.РезультатВыполнения;
		
		ЗадачаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатПеренаправления;
	
КонецФункции

Функция ПользовательУчастникРоли(Пользователь,Роль) Экспорт
	
	Набор = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
	Набор.Отбор.РольИсполнителя.Установить(Роль);
	Набор.Отбор.Исполнитель.Установить(Пользователь);
	Набор.Прочитать();
	
	Возврат (Набор.Количество()>0);
	
КонецФункции

Функция ЗафиксироватьРезультатВыполненияЗадачи(Задача, Результат, ПараметрыВыполнения) Экспорт
	
	РезультатВыполнения = Истина;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
		Блокировка.Заблокировать();
		
		// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
		// позволить выполнять перенаправление по команде из формы этой задачи.
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗадачаОбъект.CRM_ВариантВыполнения			= ПараметрыВыполнения.ВариантВыполнения;
		ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= ПараметрыВыполнения.ВариантВыполненияСтрокой;
		
		ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ТекущаяДатаСеанса());
		
		ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Выполнена -> '") + Строка(ЗадачаОбъект.Исполнитель);;
		
		ЗадачаОбъект.РезультатВыполнения = "
		|"+ДатаСтрокой+" "+НСтр("ru = 'Выполнена -> '") + Строка(ЗадачаОбъект.Исполнитель)+"
		|"+?(НЕ ПустаяСтрока(Результат.РезультатВыполнения),Результат.РезультатВыполнения,"")+"
		|
		|" +  ЗадачаОбъект.РезультатВыполнения;
		
		ЗадачаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции


// ++ Харченко Д.И. №  - 01.11.2018 / 

Процедура ПодключитьКомандыТочкиМаршрута(Форма, ЭлементПодменю) Экспорт
	
	СписокКоманд = Форма.Объект.CRM_ТочкаМаршрута;
	
	ИмяОписания = "ТаблицаКомандТочкиМаршрута";
	
	ТипОбщийПараметр = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.вогТипыЗначенийПараметровВопросов.Тип);
	
	МассивДобавляемыхРеквизитов = Новый Массив;                                              
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяКоманды",Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Заголовок",Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Обработчик",Новый ОписаниеТипов("Строка"), ИмяОписания));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Параметр1", ТипОбщийПараметр, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Параметр2", ТипОбщийПараметр, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Параметр3", ТипОбщийПараметр, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Параметр4", ТипОбщийПараметр, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Параметр5", ТипОбщийПараметр, ИмяОписания));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Для Каждого СтрокаКоманды из СписокКоманд.КомандыТочкиМаршрута Цикл 
		
		ИмяКоманды = "КомандаТочкиМаршрута_" + Формат(СтрокаКоманды.НомерСтроки, "ЧГ=0");
		
		КомандаСозданиеОбъектаОпроса = Форма.Команды.Добавить(ИмяКоманды);
		КомандаСозданиеОбъектаОпроса.Действие		= "Подключаемый_ОбработчикКоманды";
		КомандаСозданиеОбъектаОпроса.Заголовок		= СтрокаКоманды.Команда;
		
		Если ЗначениеЗаполнено(СтрокаКоманды.ИмяКартинки) Тогда
			КомандаСозданиеОбъектаОпроса.Картинка = БиблиотекаКартинок[СтрокаКоманды.ИмяКартинки];
			КомандаСозданиеОбъектаОпроса.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;

		НоваяСтрокаКоманды 								= Форма[ИмяОписания].Добавить();
		
		НоваяСтрокаКоманды.ИмяКоманды 					= ИмяКоманды;
		
		НоваяСтрокаКоманды.Заголовок 					= СтрокаКоманды.Команда;
		НоваяСтрокаКоманды.Обработчик 					= СтрокаКоманды.Обработчик;
		НоваяСтрокаКоманды.Параметр1 					= СтрокаКоманды.Параметр1;
		НоваяСтрокаКоманды.Параметр2 					= СтрокаКоманды.Параметр2;
		НоваяСтрокаКоманды.Параметр3 					= СтрокаКоманды.Параметр3;
		НоваяСтрокаКоманды.Параметр4 					= СтрокаКоманды.Параметр4;
		НоваяСтрокаКоманды.Параметр5 					= СтрокаКоманды.Параметр5;
		
		
		КнопкаЭлементФормы = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементПодменю);
		КнопкаЭлементФормы.ИмяКоманды  	= ИмяКоманды;
		
	КонецЦикла;
	
КонецПроцедуры
