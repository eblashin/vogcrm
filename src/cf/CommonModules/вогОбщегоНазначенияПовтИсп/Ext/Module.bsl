
#Область ПрограммныйИнтерфейс

Функция ИсключительныеВидыТорговыхТочек() Экспорт

	Массив = Новый Массив;
	//Массив.Добавить(Справочники.вогВидыТорговыхТочек.РаспределительныйЦентр);

	Возврат Массив; 	
	
КонецФункции // ИсключительныеВидыТорговыхТочек()

#Область Показатели

Функция ТаблицаОписанийПоказателейОбъекта(ИмяОбъектаМетаданных) Экспорт

	Возврат ТаблицаОписанийПоказателей().Скопировать(Новый Структура(ИмяОбъектаМетаданных, Истина))	

КонецФункции // ТаблицаОписанийПоказателейОбъекта()

Функция ТаблицаОписанийПоказателей() Экспорт

	ИспользуетсяУчетнаяСистема = ПолучитьФункциональнуюОпцию("вогИспользуетсяУчетнаяСистема");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("Имя"			   , ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ТаблицаОписаний.Колонки.Добавить("Представление"   , ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	ТаблицаОписаний.Колонки.Добавить("СпособПолучения" , ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	
	//Доступные объекты
	ТаблицаОписаний.Колонки.Добавить("Партнеры"		     , Новый ОписаниеТипов("Булево"));
	ТаблицаОписаний.Колонки.Добавить("вогТорговыеТочки"  , Новый ОписаниеТипов("Булево"));
	ТаблицаОписаний.Колонки.Добавить("вогЮридическиеЛица", Новый ОписаниеТипов("Булево"));
	ТаблицаОписаний.Колонки.Добавить("вогРаспределительныеЦентры", Новый ОписаниеТипов("Булево"));
	
	Если ИспользуетсяУчетнаяСистема Тогда
		
		#Область СегментКлиента 
			
		СтрокаОписания = ТаблицаОписаний.Добавить();
		СтрокаОписания.Имя 			   = "СегментКлиента";	
		СтрокаОписания.Представление   = НСтр("ru = 'Сегмент клиента'");	
		СтрокаОписания.СпособПолучения = "ДанныеУС";	
		
		СтрокаОписания.Партнеры = Истина;
		
		#КонецОбласти
		
		#Область ПредельнаяОтсрочка 
			
		СтрокаОписания = ТаблицаОписаний.Добавить();
		СтрокаОписания.Имя 			   = "ПредельнаяОтсрочка";	
		СтрокаОписания.Представление   = НСтр("ru = 'Предельная отсрочка'");	
		СтрокаОписания.СпособПолучения = "ДанныеУС";	
		
		СтрокаОписания.Партнеры = Истина;
		
		#КонецОбласти
		
		#Область МаксимальныйЛимит 
		
		СтрокаОписания = ТаблицаОписаний.Добавить();
		СтрокаОписания.Имя 			   = "МаксимальныйЛимит";	
		СтрокаОписания.Представление   = НСтр("ru = 'Максимальный лимит'");	
		СтрокаОписания.СпособПолучения = "ДанныеУС";	
		
		СтрокаОписания.Партнеры = Истина;
		
		#КонецОбласти
		
		#Область КредитныйЛимит
		
		СтрокаОписания = ТаблицаОписаний.Добавить();
		СтрокаОписания.Имя 			   = "КредитныйЛимит";	
		СтрокаОписания.Представление   = НСтр("ru = 'Кредитный лимит'");	
		СтрокаОписания.СпособПолучения = "ДанныеУС";	
		
		СтрокаОписания.Партнеры = Истина;
		
		#КонецОбласти
		
		#Область ДЗ
		
		СтрокаОписания = ТаблицаОписаний.Добавить();
		СтрокаОписания.Имя 			   = "ДЗ";	
		СтрокаОписания.Представление   = НСтр("ru = 'ДЗ'");	
		СтрокаОписания.СпособПолучения = "ДанныеУС";	
		
		СтрокаОписания.Партнеры 		  = Истина;
		СтрокаОписания.вогЮридическиеЛица = Истина;
		
		#КонецОбласти
		
		#Область ПДЗ
		
		СтрокаОписания = ТаблицаОписаний.Добавить();
		СтрокаОписания.Имя 			   = "ПДЗ";	
		СтрокаОписания.Представление   = НСтр("ru = 'ПДЗ'");	
		СтрокаОписания.СпособПолучения = "ДанныеУС";	
		
		СтрокаОписания.Партнеры 		  = Истина;
		СтрокаОписания.вогЮридическиеЛица = Истина;
		
		#КонецОбласти
		
	КонецЕсли;
		
	#Область СредняяОтгрузка
	
	СтрокаОписания = ТаблицаОписаний.Добавить();
	СтрокаОписания.Имя 			   = "СредняяОтгрузка";	
	СтрокаОписания.Представление   = НСтр("ru = 'Средняя отгрузка'");	
	СтрокаОписания.СпособПолучения = "ДанныеИБ";	
	
	СтрокаОписания.Партнеры 		= Истина;
	СтрокаОписания.вогТорговыеТочки = Истина;
	
	#КонецОбласти
			
	Возврат ТаблицаОписаний;
	
КонецФункции // ТаблицаОписанийПоказателей()

// ++ VOG Солодов В.В. 06.03.2020 CRM-196
Функция ДоступноМуниципальноеДеление() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьМуниципальноеДеление = Константы.вогИспользоватьМуниципальноеДеление.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользоватьМуниципальноеДеление;
	
КонецФункции // -- VOG Солодов В.В. 06.03.2020

#КонецОбласти

#КонецОбласти

Функция РольУчастникаМероприятия() Экспорт
	
	Возврат Справочники.вогРолиУчастникаМероприятия.НайтиПоНаименованию("Участник");	
	
КонецФункции



//START Кайдашов 09/08/19 500
Функция ПолучитьМакетОтображенияКлассификаторов() Экспорт
	Возврат РегистрыСведений.вогНастройкиОтображенияКлассификаторов.ПолучитьМакет("ПФ_MXL_ПечатьКлассификаторов");	
КонецФункции
//END Кайдашов

// ++ VOG Солодов В.В. 30.08.2019 
Функция ПолучитьПодчиненныхСотрудников() Экспорт
	Возврат ПараметрыСеанса.вогПодчиненныеСотрудники;
КонецФункции
// -- VOG Солодов В.В. 30.08.2019

// Возвращает структуру реквизитов справочника.
//
// Параметры:
//		ИмяСправочника - Строка - имя справочника как оно задано в метаданных
// Возвращаемое значение:
//		Структура - стандартные и обычные реквизиты справочника.
//
Функция РеквизитыСправочника(ИмяСправочника) Экспорт
	
	СтруктураРеквизитов   = Новый Структура;
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	
	Для Каждого Реквизит Из МетаданныеСправочника.СтандартныеРеквизиты Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции