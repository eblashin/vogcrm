Функция ПолучитьВариантыСтарта(КартаМаршрута) Экспорт
	СписокТочекСтарта = Новый СписокЗначений;
	Если КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПустаяСсылка() Тогда
		СписокТочекСтарта.Добавить(Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка(), "Не выбрана карта маршрута");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка КАК Ссылка,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута) КАК ТочкаМаршрута
		|	ИЗ
		|		Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
		|	ГДЕ
		|		CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
		|		И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
		|		И CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Старт)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка) КАК ВложенныйЗапрос";

		Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
		Запрос.УстановитьПараметр("НомерВерсии", КартаМаршрута.НомерВерсии);

		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			СписокТочекСтарта.Добавить(Выборка.Ссылка, Выборка.Ссылка.Наименование);
		КонецЦикла;
	КонецЕсли;

	Возврат СписокТочекСтарта;

КонецФункции

Функция ПолучитьИсходящиеТочки(ТочкаМаршрута, Версия) Экспорт
	МассивИсходящихТочек = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.НомерСтроки,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Индекс,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ВариантИмя,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ВариантСиноним,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка = &Ссылка
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Ссылка", ТочкаМаршрута);
	Запрос.УстановитьПараметр("НомерВерсии", Версия);
	Запрос.УстановитьПараметр("Владелец", ТочкаМаршрута.Владелец);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СтруктураТочки = Новый Структура;
		СтруктураТочки.Вставить("ТекущаяТочка", ТочкаМаршрута);
		СтруктураТочки.Вставить("ИсходящаяТочка", Выборка.ТочкаМаршрута);
		СтруктураТочки.Вставить("Индекс", Выборка.Индекс);
		СтруктураТочки.Вставить("ВариантИмя", Выборка.ВариантИмя);
		СтруктураТочки.Вставить("ВариантСиноним", Выборка.ВариантСиноним);
		СтруктураТочки.Вставить("НомерВерсии", Выборка.НомерВерсии);

		МассивИсходящихТочек.Добавить(СтруктураТочки);
	КонецЦикла;

	Возврат МассивИсходящихТочек;

КонецФункции

Функция ПолучитьВходящиеТочки(ТочкаМаршрута, Версия) Экспорт
	МассивВходящихТочек = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка,
	|	CRM_ТочкиМаршрутовВходящиеТочки.НомерСтроки,
	|	CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута,
	|	CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка = &Ссылка
	|	И CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
	|	И CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Ссылка", ТочкаМаршрута);
	Запрос.УстановитьПараметр("НомерВерсии", Версия);
	Запрос.УстановитьПараметр("Владелец", ТочкаМаршрута.Владелец);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СтруктураТочки = Новый Структура;
		СтруктураТочки.Вставить("ТекущаяТочка", ТочкаМаршрута);
		СтруктураТочки.Вставить("ВходящаяТочка", Выборка.ТочкаМаршрута);
		СтруктураТочки.Вставить("НомерВерсии", Выборка.НомерВерсии);

		МассивВходящихТочек.Добавить(СтруктураТочки);
	КонецЦикла;

	Возврат МассивВходящихТочек;

КонецФункции

Функция ПолучитьИсходящуюТочку(ТочкаМаршрута, Версия, Вариант = 0) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.НомерСтроки,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Индекс,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ВариантИмя,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ВариантСиноним,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка = &Ссылка
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец";

	Если ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Или ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.Индекс = &Индекс";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ТочкаМаршрута);
	Запрос.УстановитьПараметр("НомерВерсии", Версия);
	Запрос.УстановитьПараметр("Владелец", ТочкаМаршрута.Владелец);
	Запрос.УстановитьПараметр("Индекс", Вариант);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		СтруктураТочки = Новый Структура;
		СтруктураТочки.Вставить("ТекущаяТочка", ТочкаМаршрута);
		СтруктураТочки.Вставить("ИсходящаяТочка", Выборка.ТочкаМаршрута);
		СтруктураТочки.Вставить("Индекс", Выборка.Индекс);
		СтруктураТочки.Вставить("ВариантИмя", Выборка.ВариантИмя);
		СтруктураТочки.Вставить("ВариантСиноним", Выборка.ВариантСиноним);
		СтруктураТочки.Вставить("НомерВерсии", Выборка.НомерВерсии);

		Возврат СтруктураТочки;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Функция ПолучитьВходящиеТочкиДействия(ТочкаМаршрута, Версия) Экспорт
	МассивВходящихТочек = Новый Массив;

	МасивТочек = ПолучитьВходящиеТочки(ТочкаМаршрута, Версия);

	Для каждого СтруктураТочки Из МасивТочек Цикл
		Если СтруктураТочки.ВходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Или СтруктураТочки.ВходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Или СтруктураТочки.ВходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка Или СтруктураТочки.ВходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Или СтруктураТочки.ВходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда





			МассивВходящихТочек_1 = ПолучитьВходящиеТочкиДействия(СтруктураТочки.ВходящаяТочка, Версия);

			Для каждого ЭлементМассива Из МассивВходящихТочек_1 Цикл
				МассивВходящихТочек.Добавить(ЭлементМассива);
			КонецЦикла;
		Иначе
			СтруктураВходящейТочки = Новый Структура;
			СтруктураВходящейТочки.Вставить("ТекущаяТочка", СтруктураТочки.ТекущаяТочка);
			СтруктураВходящейТочки.Вставить("ВходящаяТочка", СтруктураТочки.ВходящаяТочка);
			СтруктураВходящейТочки.Вставить("НомерВерсии", СтруктураТочки.НомерВерсии);

			МассивВходящихТочек.Добавить(СтруктураВходящейТочки);
		КонецЕсли;

	КонецЦикла;

	Возврат МассивВходящихТочек;

КонецФункции

Функция ПолучитьМаксимальнуюДатуИзКолонкиСрокБизнесПроцесса(Исполнители) Экспорт
	КонтрольнаяДата = Дата("00010101");
	Для каждого СтрокаТаблицы Из Исполнители Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаВыполнения) И КонтрольнаяДата < СтрокаТаблицы.ДатаВыполнения Тогда
			КонтрольнаяДата = СтрокаТаблицы.ДатаВыполнения;
		КонецЕсли;
	КонецЦикла;

	Возврат КонтрольнаяДата;

КонецФункции

Процедура ПрочитатьМаршрутБизнесПроцесса(БизнесПроцесс, Маршрут = Неопределено) Экспорт
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Маршрут.ТочкаМаршрута,
	|	Маршрут.ВариантВыполнения,
	|	Маршрут.Используется,
	|	Маршрут.Шаблон КАК ПроцессШаблон";
	Если ТипЗнч(БизнесПроцесс) = Тип("СправочникСсылка.Проекты") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.CRM_НастройкиЭтапов КАК Маршрут";
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК Маршрут";
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.CRM_НастройкиЭтапов КАК Маршрут";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	Маршрут.Объект = &Процесс";

	Запрос.Текст = ТекстЗапроса;
	Если ТипЗнч(БизнесПроцесс) = Тип("СправочникСсылка.Проекты") Тогда
		Запрос.УстановитьПараметр("Процесс", БизнесПроцесс.КартаМаршрута);
	Иначе
		Запрос.УстановитьПараметр("Процесс", БизнесПроцесс);
	КонецЕсли;
	Маршрут = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Функция ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс, НачальнаяТочка, ТекущаяТочка = Неопределено, Маршрут = Неопределено, ВариантВыполнения = 0, ТочкаВеткиРазделения = Неопределено, ИспользоватьОбработчикиТочек = Ложь) Экспорт
	
	Если ТекущаяТочка = Неопределено Тогда
		ТекущаяТочка = НачальнаяТочка;
	КонецЕсли;

	Если ТипЗнч(БизнесПроцесс) = Тип("СправочникСсылка.Проекты") Тогда
		НомерВерсии = БизнесПроцесс.CRM_КартаМаршрута.НомерВерсии;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		НомерВерсии = БизнесПроцесс.НомерВерсииКартыМаршрута;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		НомерВерсии = БизнесПроцесс.НомерВерсии;
	КонецЕсли;

	Результат = Новый Массив;

	Если ТочкаВеткиРазделения = Неопределено Тогда
		СтруктураТочки = ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии, ВариантВыполнения);
	Иначе
		СтруктураТочки = ТочкаВеткиРазделения;
	КонецЕсли;

	Если Маршрут = Неопределено Тогда
		ПрочитатьМаршрутБизнесПроцесса(БизнесПроцесс, Маршрут);
	КонецЕсли;

	СтрокаМаршрута = Маршрут.Найти(СтруктураТочки.ИсходящаяТочка, "ТочкаМаршрута");

	Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Или СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда


		Если ЗначениеЗаполнено(СтрокаМаршрута) И Не СтрокаМаршрута.Используется Тогда

			Если ТочкаВеткиРазделения = Неопределено И НачальнаяТочка = СтруктураТочки.ИсходящаяТочка Тогда
				СтруктураИсходящейТочки = Новый Структура;
				СтруктураИсходящейТочки.Вставить("НачальнаяТочка", НачальнаяТочка);
				СтруктураИсходящейТочки.Вставить("ТекущаяТочка", ТекущаяТочка);
				СтруктураИсходящейТочки.Вставить("ИсходящаяТочка", СтруктураТочки.ИсходящаяТочка);
				СтруктураИсходящейТочки.Вставить("Индекс", СтруктураТочки.Индекс);
				СтруктураИсходящейТочки.Вставить("ВариантИмя", СтруктураТочки.ВариантИмя);
				СтруктураИсходящейТочки.Вставить("ВариантСиноним", СтруктураТочки.ВариантСиноним);
				СтруктураИсходящейТочки.Вставить("НомерВерсии", СтруктураТочки.НомерВерсии);

				Результат.Добавить(СтруктураИсходящейТочки);
			Иначе
				МассивИсходящихТочек = ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс, НачальнаяТочка, СтруктураТочки.ИсходящаяТочка, Маршрут, СтрокаМаршрута.ВариантВыполнения, , ИспользоватьОбработчикиТочек);

				Для каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
					Результат.Добавить(ЗначениеМассива);
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтруктураИсходящейТочки = Новый Структура;
			СтруктураИсходящейТочки.Вставить("НачальнаяТочка", НачальнаяТочка);
			СтруктураИсходящейТочки.Вставить("ТекущаяТочка", ТекущаяТочка);
			СтруктураИсходящейТочки.Вставить("ИсходящаяТочка", СтруктураТочки.ИсходящаяТочка);
			СтруктураИсходящейТочки.Вставить("Индекс", СтруктураТочки.Индекс);
			СтруктураИсходящейТочки.Вставить("ВариантИмя", СтруктураТочки.ВариантИмя);
			СтруктураИсходящейТочки.Вставить("ВариантСиноним", СтруктураТочки.ВариантСиноним);
			СтруктураИсходящейТочки.Вставить("НомерВерсии", СтруктураТочки.НомерВерсии);

			Результат.Добавить(СтруктураИсходящейТочки);
		КонецЕсли;

	ИначеЕсли СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда

		СтруктураИсходящейТочки = Новый Структура;
		СтруктураИсходящейТочки.Вставить("НачальнаяТочка", НачальнаяТочка);
		СтруктураИсходящейТочки.Вставить("ТекущаяТочка", ТекущаяТочка);
		СтруктураИсходящейТочки.Вставить("ИсходящаяТочка", СтруктураТочки.ИсходящаяТочка);
		СтруктураИсходящейТочки.Вставить("Индекс", СтруктураТочки.Индекс);
		СтруктураИсходящейТочки.Вставить("ВариантИмя", СтруктураТочки.ВариантИмя);
		СтруктураИсходящейТочки.Вставить("ВариантСиноним", СтруктураТочки.ВариантСиноним);
		СтруктураИсходящейТочки.Вставить("НомерВерсии", СтруктураТочки.НомерВерсии);

		Результат.Добавить(СтруктураТочки);

		Если ИспользоватьОбработчикиТочек Тогда
			CRM_БизнесПроцессыПереопределяемый.ТочкаЗавершенияПриЗавершении(СтруктураТочки.ИсходящаяТочка, БизнесПроцесс);
		КонецЕсли;

	ИначеЕсли СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Или СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда

		Если ИспользоватьОбработчикиТочек Тогда
			Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
				РезультатОбработчика = CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВыборВарианта(БизнесПроцесс, ТекущаяТочка, СтруктураТочки.ИсходящаяТочка, ВариантВыполнения);
			Иначе
				РезультатОбработчика = CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиУсловияПроверкаУсловия(БизнесПроцесс, ТекущаяТочка, СтруктураТочки.ИсходящаяТочка, ВариантВыполнения);
			КонецЕсли;
		Иначе
			РезультатОбработчика = ВариантВыполнения;
		КонецЕсли;
//START Кайдашов 18/11/19
		//МассивИсходящихТочекВарианта = ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс, НачальнаяТочка, СтруктураТочки.ИсходящаяТочка, Маршрут, РезультатОбработчика,, ИспользоватьОбработчикиТочек);
		Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта и ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта и не ИспользоватьОбработчикиТочек тогда
			МассивИсходящихТочекВарианта = ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс, НачальнаяТочка, СтруктураТочки.ИсходящаяТочка, Маршрут, 0,, ИспользоватьОбработчикиТочек);
		Иначе
			МассивИсходящихТочекВарианта = ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс, НачальнаяТочка, СтруктураТочки.ИсходящаяТочка, Маршрут, РезультатОбработчика,, ИспользоватьОбработчикиТочек);
		КонецЕсли;
//END Кайдашов
		Для каждого ЗначениеМассива Из МассивИсходящихТочекВарианта Цикл
			Результат.Добавить(ЗначениеМассива);
		КонецЦикла;

	ИначеЕсли СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда

		МассивСтруктурТочек = ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка, НомерВерсии);

		Для каждого РазделениеСтруктураТочки Из МассивСтруктурТочек Цикл

			СтруктураТочкиВеткиРазделения = Новый Структура;
			СтруктураТочкиВеткиРазделения.Вставить("ТекущаяТочка", СтруктураТочки.ИсходящаяТочка);
			СтруктураТочкиВеткиРазделения.Вставить("ИсходящаяТочка", РазделениеСтруктураТочки.ИсходящаяТочка);
			СтруктураТочкиВеткиРазделения.Вставить("Индекс", 0);
			СтруктураТочкиВеткиРазделения.Вставить("ВариантИмя", "");
			СтруктураТочкиВеткиРазделения.Вставить("ВариантСиноним", "");
			СтруктураТочкиВеткиРазделения.Вставить("НомерВерсии", НомерВерсии);

			МассивИсходящихТочек = ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс, НачальнаяТочка, СтруктураТочки.ИсходящаяТочка, Маршрут, , СтруктураТочкиВеткиРазделения, ИспользоватьОбработчикиТочек);

			Для каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
				СтруктураИсходящейТочки = Новый Структура;
				СтруктураИсходящейТочки.Вставить("НачальнаяТочка", НачальнаяТочка);
				СтруктураИсходящейТочки.Вставить("ТекущаяТочка", СтруктураТочки.ИсходящаяТочка);
				СтруктураИсходящейТочки.Вставить("ИсходящаяТочка", ЗначениеМассива.ИсходящаяТочка);
				СтруктураИсходящейТочки.Вставить("Индекс", ЗначениеМассива.Индекс);
				СтруктураИсходящейТочки.Вставить("ВариантИмя", ЗначениеМассива.ВариантИмя);
				СтруктураИсходящейТочки.Вставить("ВариантСиноним", ЗначениеМассива.ВариантСиноним);
				СтруктураИсходящейТочки.Вставить("НомерВерсии", ЗначениеМассива.НомерВерсии);

				Результат.Добавить(СтруктураИсходящейТочки);
			КонецЦикла;

		КонецЦикла;

	ИначеЕсли СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда

		СтруктураИсходящейТочки = Новый Структура;
		СтруктураИсходящейТочки.Вставить("НачальнаяТочка", НачальнаяТочка);
		СтруктураИсходящейТочки.Вставить("ТекущаяТочка", ТекущаяТочка);
		СтруктураИсходящейТочки.Вставить("ИсходящаяТочка", СтруктураТочки.ИсходящаяТочка);
		СтруктураИсходящейТочки.Вставить("Индекс", СтруктураТочки.Индекс);
		СтруктураИсходящейТочки.Вставить("ВариантИмя", СтруктураТочки.ВариантИмя);
		СтруктураИсходящейТочки.Вставить("ВариантСиноним", СтруктураТочки.ВариантСиноним);
		СтруктураИсходящейТочки.Вставить("НомерВерсии", СтруктураТочки.НомерВерсии);

		Результат.Добавить(СтруктураТочки);

	ИначеЕсли СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка Тогда

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("БизнесПроцесс", БизнесПроцесс);
		ДополнительныеПараметры.Вставить("ТекущаяТочка", ТекущаяТочка);
		ДополнительныеПараметры.Вставить("Вариант", ВариантВыполнения);

		Если ИспользоватьОбработчикиТочек Тогда
			CRM_БизнесПроцессыПереопределяемый.ТочкаОбработкиОбработка(СтруктураТочки.ИсходящаяТочка, ДополнительныеПараметры);
		КонецЕсли;

		МассивИсходящихТочек = ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс, НачальнаяТочка, СтруктураТочки.ИсходящаяТочка, Маршрут, ДополнительныеПараметры.Вариант, , ИспользоватьОбработчикиТочек);

		Для каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
			Результат.Добавить(ЗначениеМассива);
		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура СкорректироватьМаршрутыПроцессов(КартаМаршрута) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Процессы.Ссылка
	|ИЗ
	|	Справочник.Проекты КАК CRM_Процессы
	|ГДЕ
	|	CRM_Процессы.CRM_КартаМаршрута = &КартаМаршрута";
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	Выборка = Запрос.Выполнить().Выбрать();
	НаборИсполнителиКартаМаршрута = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	НаборИсполнителиКартаМаршрута.Отбор.Объект.Установить(КартаМаршрута);
	НаборИсполнителиКартаМаршрута.Прочитать();
	Пока Выборка.Следующий() Цикл
		НаборИсполнителиПроцесса = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
		НаборИсполнителиПроцесса.Отбор.Объект.Установить(Выборка.Ссылка);
		НаборИсполнителиПроцесса.Прочитать();
		Если НаборИсполнителиПроцесса.Количество() > 0 Тогда
			ТабНаборИсполнители = НаборИсполнителиКартаМаршрута.Выгрузить();
			ТабНаборИсполнители.Колонки.Удалить("Объект");
			ТабНаборИсполнители.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
			ТабНаборИсполнители.ЗаполнитьЗначения(Выборка.Ссылка, "Объект");
			НаборИсполнителиПроцесса.Загрузить(ТабНаборИсполнители);
			НаборИсполнителиПроцесса.Записать();
		КонецЕсли;

		Если Выборка.Ссылка.CRM_Периодический Тогда
			Попытка
				Проект = Выборка.Ссылка.ПолучитьОбъект();
				CRM_МетодыМодулейМенеджеровСправочников.УстановитьПараметрыАвтостарта(Проект);
				Проект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьТочкуСлияния(ТочкаМаршрута, Знач НомерВерсии, ТаблицаПройденныхТочек = Неопределено) Экспорт
	ТекущаяТочка = ТочкаМаршрута;

	Если ТаблицаПройденныхТочек = Неопределено Тогда
		ТаблицаПройденныхТочек = Новый ТаблицаЗначений;
		ТаблицаПройденныхТочек.Колонки.Добавить("ТочкаМаршрута");
	КонецЕсли;

	Пока ТекущаяТочка.Вид <> Перечисления.CRM_ВидыТочекМаршрута.Слияние Цикл

		СтрокаТаб = ТаблицаПройденныхТочек.Найти(ТекущаяТочка, "ТочкаМаршрута");
		Если СтрокаТаб = Неопределено Тогда
			НоваяСтрока = ТаблицаПройденныхТочек.Добавить();
			НоваяСтрока.ТочкаМаршрута = ТекущаяТочка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Или ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка Или ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда



			ВходящаяТочка = ТекущаяТочка;
			СтруктураТочки = ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии, 0);
			ТекущаяТочка = СтруктураТочки.ИсходящаяТочка;
			Продолжить;

		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Или ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда


			МассивСтруктурТочек = ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсии);

			Для каждого СтруктураТочки Из МассивСтруктурТочек Цикл
				СтруктураТочкиСлияния = ПолучитьТочкуСлияния(СтруктураТочки.ИсходящаяТочка, НомерВерсии, ТаблицаПройденныхТочек);
				Если Не (СтруктураТочкиСлияния = Неопределено) Тогда



					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если Не (СтруктураТочкиСлияния = Неопределено) Тогда
				ТекущаяТочка = СтруктураТочкиСлияния.ТочкаСлияния;
				Продолжить;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			МассивСтруктурТочек = ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсии);

			Для каждого СтруктураТочки Из МассивСтруктурТочек Цикл
				СтруктураТочкиСлияния = ПолучитьТочкуСлияния(СтруктураТочки.ИсходящаяТочка, НомерВерсии, ТаблицаПройденныхТочек);
				Если Не (СтруктураТочкиСлияния = Неопределено) Тогда

					ВходящаяТочка = СтруктураТочкиСлияния.ТочкаСлияния;
					СтруктураТочки = ПолучитьИсходящуюТочку(СтруктураТочкиСлияния.ТочкаСлияния, НомерВерсии, 0);
					ТекущаяТочка = СтруктураТочки.ИсходящаяТочка;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Продолжить;
		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			Если ВходящаяТочка = Неопределено Тогда
				ВходящаяТочка = ТекущаяТочка;
			КонецЕсли;

			Если ТочкаМаршрута = ТекущаяТочка Тогда
				СтруктураТочки = ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии, 0);
				ТекущаяТочка = СтруктураТочки.ИсходящаяТочка;
			КонецЕсли;
		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			Возврат Неопределено;
		КонецЕсли;

	КонецЦикла;

	Возврат Новый Структура("ВходящаяТочка,ТочкаСлияния", ВходящаяТочка, ТекущаяТочка);

КонецФункции

Процедура УстановитьСвязьТочекРазделенияСоСлияниями(КартаМаршрута, КартаМаршрутаВерсия) Экспорт
	СтрокаТекущейВерсии = КартаМаршрута.ВерсииКартыМаршрута.Найти(КартаМаршрутаВерсия, "НомерВерсии");
	СхемаМаршрута = СтрокаТекущейВерсии.КартаМаршрута.Получить();

	Для каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыРазделение") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_ТочкиМаршрутов.Ссылка
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
			|ГДЕ
			|	CRM_ТочкиМаршрутов.Владелец = &Владелец
			|	И CRM_ТочкиМаршрутов.Имя = &Имя
			|	И CRM_ТочкиМаршрутов.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Разделение)";
			Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
			Запрос.УстановитьПараметр("Имя", ЭлементСхемы.Имя);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТочкаРазделения = Выборка.Ссылка;
				ТочкаСлияния = Неопределено;

				МассивСтруктурТочек = ПолучитьИсходящиеТочки(Выборка.Ссылка, КартаМаршрутаВерсия);
				Для каждого СтруктураТочки Из МассивСтруктурТочек Цикл
					СтруктураТочкиСлияния = ПолучитьТочкуСлияния(СтруктураТочки.ИсходящаяТочка, КартаМаршрутаВерсия);
					Если Не (СтруктураТочкиСлияния = Неопределено) Тогда
						ТочкаСлияния = СтруктураТочкиСлияния.ТочкаСлияния;
						Прервать;
					КонецЕсли;
				КонецЦикла;

				Если Не (ТочкаСлияния = Неопределено) Тогда
					РазделениеОбъект = ТочкаРазделения.ПолучитьОбъект();
					МассивСтрок = РазделениеОбъект.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("ТочкаМаршрута,НомерВерсии", ТочкаСлияния, КартаМаршрутаВерсия));
					Если МассивСтрок.Количество() = 0 Тогда
						НоваяСтрока = РазделениеОбъект.ТочкиРазделенияСлияния.Добавить();
					Иначе
						НоваяСтрока = МассивСтрок[0];
					КонецЕсли;
					НоваяСтрока.ТочкаМаршрута = ТочкаСлияния;
					НоваяСтрока.Вид = ТочкаСлияния.Вид;
					НоваяСтрока.НомерВерсии = КартаМаршрутаВерсия;
					РазделениеОбъект.ОбменДанными.Загрузка = Истина;
					РазделениеОбъект.Записать();

					СлияниеОбъект = ТочкаСлияния.ПолучитьОбъект();
					МассивСтрок = СлияниеОбъект.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("ТочкаМаршрута,НомерВерсии", ТочкаРазделения, КартаМаршрутаВерсия));
					Если МассивСтрок.Количество() = 0 Тогда
						НоваяСтрока = СлияниеОбъект.ТочкиРазделенияСлияния.Добавить();
					Иначе
						НоваяСтрока = МассивСтрок[0];
					КонецЕсли;
					НоваяСтрока.ТочкаМаршрута = ТочкаРазделения;
					НоваяСтрока.Вид = ТочкаРазделения.Вид;
					НоваяСтрока.НомерВерсии = КартаМаршрутаВерсия;
					СлияниеОбъект.ОбменДанными.Загрузка = Истина;
					СлияниеОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСледующиеТочкиУстановитьПринадлежность(ТочкаМаршрута, ТочкаСлияния, Знач НомерВетки, Знач НомерВерсии, ТаблицаПройденныхТочек = Неопределено)
	ТекущаяТочка = ТочкаМаршрута;

	Если ТаблицаПройденныхТочек = Неопределено Тогда
		ТаблицаПройденныхТочек = Новый ТаблицаЗначений;
		ТаблицаПройденныхТочек.Колонки.Добавить("ТочкаМаршрута");
	КонецЕсли;

	Пока ТекущаяТочка <> ТочкаСлияния Цикл

		СтрокаТаб = ТаблицаПройденныхТочек.Найти(ТекущаяТочка, "ТочкаМаршрута");
		Если СтрокаТаб = Неопределено Тогда
			НоваяСтрока = ТаблицаПройденныхТочек.Добавить();
			НоваяСтрока.ТочкаМаршрута = ТекущаяТочка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Или ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка Или ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда



			ТочкаОбъект = ТекущаяТочка.ПолучитьОбъект();
			СтрокаТочкиСлияния = ТочкаОбъект.ТочкиРазделенияСлияния.Найти(НомерВерсии, "НомерВерсии");
			Если СтрокаТочкиСлияния = Неопределено Тогда
				СтрокаТочкиСлияния = ТочкаОбъект.ТочкиРазделенияСлияния.Добавить();
			КонецЕсли;
			СтрокаТочкиСлияния.ТочкаМаршрута = ТочкаСлияния;
			СтрокаТочкиСлияния.Вид = ТочкаСлияния.Вид;
			СтрокаТочкиСлияния.НомерВерсии = НомерВерсии;
			СтрокаТочкиСлияния.НомерВетки = НомерВетки;

			ТочкаОбъект.ОбменДанными.Загрузка = Истина;
			ТочкаОбъект.Записать();

			ВходящаяТочка = ТекущаяТочка;
			СтруктураТочки = ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии, 0);
			ТекущаяТочка = СтруктураТочки.ИсходящаяТочка;
			Продолжить;

		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Или ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда


			ТочкаОбъект = ТекущаяТочка.ПолучитьОбъект();
			СтрокаТочкиСлияния = ТочкаОбъект.ТочкиРазделенияСлияния.Найти(НомерВерсии, "НомерВерсии");
			Если СтрокаТочкиСлияния = Неопределено Тогда
				СтрокаТочкиСлияния = ТочкаОбъект.ТочкиРазделенияСлияния.Добавить();
			КонецЕсли;
			СтрокаТочкиСлияния.ТочкаМаршрута = ТочкаСлияния;
			СтрокаТочкиСлияния.Вид = ТочкаСлияния.Вид;
			СтрокаТочкиСлияния.НомерВерсии = НомерВерсии;
			СтрокаТочкиСлияния.НомерВетки = НомерВетки;

			ТочкаОбъект.ОбменДанными.Загрузка = Истина;
			ТочкаОбъект.Записать();

			МассивСтруктурТочек = ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсии);

			Для каждого СтруктураТочки Из МассивСтруктурТочек Цикл
				ПолучитьСледующиеТочкиУстановитьПринадлежность(СтруктураТочки.ИсходящаяТочка, ТочкаСлияния, НомерВетки, НомерВерсии, ТаблицаПройденныхТочек);
			КонецЦикла;

			Прервать;
		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда



			ТочкаОбъект = ТекущаяТочка.ПолучитьОбъект();
			СтрокаТочкиСлияния = ТочкаОбъект.ТочкиРазделенияСлияния.Найти(НомерВерсии, "НомерВерсии");


			Если СтрокаТочкиСлияния = Неопределено Тогда
				ИскомаяТочкаСлияния = Неопределено;
				МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсии);
				Для каждого СтруктураТочки Из МассивСтруктурТочек Цикл
					СтруктураТочкиСлияния = ПолучитьТочкуСлияния(СтруктураТочки.ИсходящаяТочка, НомерВерсии);
					Если Не (СтруктураТочкиСлияния = Неопределено) Тогда
						ИскомаяТочкаСлияния = СтруктураТочкиСлияния.ТочкаСлияния;
						Прервать;
					КонецЕсли;
				КонецЦикла;

				Если Не (ИскомаяТочкаСлияния = Неопределено) Тогда
					СтрокаТочкиСлияния = ТочкаОбъект.ТочкиРазделенияСлияния.Добавить();
					СтрокаТочкиСлияния.ТочкаМаршрута = ИскомаяТочкаСлияния;
					СтрокаТочкиСлияния.Вид = ИскомаяТочкаСлияния.Вид;
					СтрокаТочкиСлияния.НомерВерсии = НомерВерсии;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			СтрокаТочкиСлияния.НомерВетки = НомерВетки;

			ТочкаОбъект.ОбменДанными.Загрузка = Истина;
			ТочкаОбъект.Записать();



			ТочкаСлиянияОбъект = СтрокаТочкиСлияния.ТочкаМаршрута.ПолучитьОбъект();
			МассивСтрок = ТочкаСлиянияОбъект.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид", НомерВерсии, Перечисления.CRM_ВидыТочекМаршрута.Слияние));
			Если МассивСтрок.Количество() = 0 Тогда
				СтрокаВнешнейТочкиСлияния = ТочкаСлиянияОбъект.ТочкиРазделенияСлияния.Добавить();
			Иначе
				СтрокаВнешнейТочкиСлияния = МассивСтрок[0];
			КонецЕсли;

			СтрокаВнешнейТочкиСлияния.ТочкаМаршрута = ТочкаСлияния;
			СтрокаВнешнейТочкиСлияния.Вид = ТочкаСлияния.Вид;
			СтрокаВнешнейТочкиСлияния.НомерВерсии = НомерВерсии;
			СтрокаВнешнейТочкиСлияния.НомерВетки = НомерВетки;

			ТочкаСлиянияОбъект.ОбменДанными.Загрузка = Истина;
			ТочкаСлиянияОбъект.Записать();

			ВходящаяТочка = ТекущаяТочка;
			ТекущаяТочка = СтрокаТочкиСлияния.ТочкаМаршрута;

			Продолжить;
		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			ВходящаяТочка = ТекущаяТочка;
			СтруктураТочки = ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии, 0);
			ТекущаяТочка = СтруктураТочки.ИсходящаяТочка;
			Продолжить;
		КонецЕсли;

		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			Возврат Неопределено;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

Процедура УстановитьПринадлежностьТочекВеткамРазделения(КартаМаршрута, КартаМаршрутаВерсия) Экспорт
	СтрокаТекущейВерсии = КартаМаршрута.ВерсииКартыМаршрута.Найти(КартаМаршрутаВерсия, "НомерВерсии");
	СхемаМаршрута = СтрокаТекущейВерсии.КартаМаршрута.Получить();

	Для каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыРазделение") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_ТочкиМаршрутов.Ссылка
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
			|ГДЕ
			|	CRM_ТочкиМаршрутов.Владелец = &Владелец
			|	И CRM_ТочкиМаршрутов.Имя = &Имя
			|	И CRM_ТочкиМаршрутов.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Разделение)";
			Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
			Запрос.УстановитьПараметр("Имя", ЭлементСхемы.Имя);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТочкаРазделения = Выборка.Ссылка;
				СтрокаТочкиСлияния = ТочкаРазделения.ТочкиРазделенияСлияния.Найти(КартаМаршрутаВерсия, "НомерВерсии");

				Если СтрокаТочкиСлияния = Неопределено Тогда
					Возврат;
				КонецЕсли;

				ТочкаСлияния = СтрокаТочкиСлияния.ТочкаМаршрута;

				МассивСтруктурТочек = ПолучитьИсходящиеТочки(Выборка.Ссылка, КартаМаршрутаВерсия);
				НомерВетки = 0;
				Для каждого СтруктураТочки Из МассивСтруктурТочек Цикл
					ПолучитьСледующиеТочкиУстановитьПринадлежность(СтруктураТочки.ИсходящаяТочка, ТочкаСлияния, НомерВетки, КартаМаршрутаВерсия);
					НомерВетки = НомерВетки + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОбработчикиТочки(ТочкаМаршрута)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидТочкиМаршрута", ТочкаМаршрута.Вид);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбработчикиСобытийТочекМаршрута.Ссылка
	|ИЗ
	|	Справочник.CRM_ОбработчикиСобытийТочекМаршрута КАК CRM_ОбработчикиСобытийТочекМаршрута
	|ГДЕ
	|	(НЕ CRM_ОбработчикиСобытийТочекМаршрута.ПометкаУдаления)
	|	И CRM_ОбработчикиСобытийТочекМаршрута.Предопределенный
	|	И CRM_ОбработчикиСобытийТочекМаршрута.ВидТочкиМаршрута = &ВидТочкиМаршрута";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТочкаМаршрута.ОбработчикиСобытий.Добавить();
		НоваяСтрока.Событие = Выборка.Ссылка;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьТочкиМаршрута(ТабТочекМаршрута, КартаМаршрута, НомерНовойВерсии) Экспорт
	Для каждого СтрокаТаблицы Из ТабТочекМаршрута Цикл
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
		Запрос.УстановитьПараметр("Групповая", СтрокаТаблицы.Групповая);
		Запрос.УстановитьПараметр("Имя", СтрокаТаблицы.ИмяЭлемента);
		Запрос.УстановитьПараметр("Наименование", СтрокаТаблицы.НаименованиеЭлемента);
		Запрос.УстановитьПараметр("Вид", СтрокаТаблицы.ВидЭлемента);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
		|ГДЕ
		|	CRM_ТочкиМаршрутов.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутов.Групповая = &Групповая
		|	И CRM_ТочкиМаршрутов.Имя = &Имя
		//++ Бей 19072019 - при редактировании карты изменение наименования приводит к созданию новой точки.
		// поэтому оставляю только поиск по Имени - так как оно уникально в рамках карты
		//|	И CRM_ТочкиМаршрутов.Наименование = &Наименование
		|	И CRM_ТочкиМаршрутов.Вид = &Вид";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТочкаМаршрутаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТочкаМаршрутаОбъект.Наименование = СтрокаТаблицы.НаименованиеЭлемента;
			ТочкаМаршрутаОбъект.Пояснение = СтрокаТаблицы.Пояснение;
			ТочкаМаршрутаОбъект.РеквизитДопУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
			ТочкаМаршрутаОбъект.ПометкаУдаления = Ложь;
			Если ТочкаМаршрутаОбъект.ОбработчикиСобытий.Количество() = 0 Тогда
				ЗаполнитьОбработчикиТочки(ТочкаМаршрутаОбъект);
			КонецЕсли;
		Иначе
			ТочкаМаршрутаОбъект = Справочники.CRM_ТочкиМаршрутов.СоздатьЭлемент();
			ТочкаМаршрутаОбъект.Владелец = КартаМаршрута;
			ТочкаМаршрутаОбъект.Вид = СтрокаТаблицы.ВидЭлемента;
			ТочкаМаршрутаОбъект.Имя = СтрокаТаблицы.ИмяЭлемента;
			ТочкаМаршрутаОбъект.Наименование = СтрокаТаблицы.НаименованиеЭлемента;
			ТочкаМаршрутаОбъект.Групповая = СтрокаТаблицы.Групповая;
			ТочкаМаршрутаОбъект.Пояснение = СтрокаТаблицы.Пояснение;
			ТочкаМаршрутаОбъект.РеквизитДопУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
			Если ТочкаМаршрутаОбъект.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
				ТочкаМаршрутаОбъект.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Успешно;
			КонецЕсли;
			ЗаполнитьОбработчикиТочки(ТочкаМаршрутаОбъект);
		КонецЕсли;
		ТочкаМаршрутаОбъект.Записать();
	КонецЦикла;

	Для каждого СтрокаТаблицы Из ТабТочекМаршрута Цикл
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
		Запрос.УстановитьПараметр("Групповая", СтрокаТаблицы.Групповая);
		Запрос.УстановитьПараметр("Имя", СтрокаТаблицы.ИмяЭлемента);
		Запрос.УстановитьПараметр("Наименование", СтрокаТаблицы.НаименованиеЭлемента);
		Запрос.УстановитьПараметр("Вид", СтрокаТаблицы.ВидЭлемента);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
		|ГДЕ
		|	CRM_ТочкиМаршрутов.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутов.Групповая = &Групповая
		|	И CRM_ТочкиМаршрутов.Имя = &Имя
		|	И CRM_ТочкиМаршрутов.Наименование = &Наименование
		|	И CRM_ТочкиМаршрутов.Вид = &Вид";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТочкаМаршрутаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Запрос_1 = Новый Запрос;
			Запрос_1.Текст = "ВЫБРАТЬ
			|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
			|ГДЕ
			|	CRM_ТочкиМаршрутов.Владелец = &Владелец
			|	И CRM_ТочкиМаршрутов.Групповая = &Групповая
			|	И CRM_ТочкиМаршрутов.Имя = &Имя
			|	И CRM_ТочкиМаршрутов.Наименование = &Наименование
			|	И CRM_ТочкиМаршрутов.Вид = &Вид";

			Для каждого СтрокаВхТочек Из СтрокаТаблицы.ВходящиеТочки Цикл

				НайденаяСтрока = ТабТочекМаршрута.Найти(СтрокаВхТочек.ИмяЭлемента, "ИмяЭлемента");
				Запрос_1.УстановитьПараметр("Владелец", КартаМаршрута);
				Запрос_1.УстановитьПараметр("Групповая", НайденаяСтрока.Групповая);
				Запрос_1.УстановитьПараметр("Имя", НайденаяСтрока.ИмяЭлемента);
				Запрос_1.УстановитьПараметр("Наименование", НайденаяСтрока.НаименованиеЭлемента);
				Запрос_1.УстановитьПараметр("Вид", НайденаяСтрока.ВидЭлемента);
				Выборка_1 = Запрос_1.Выполнить().Выбрать();
				Если Выборка_1.Следующий() Тогда

					НоваяВхТочка = ТочкаМаршрутаОбъект.ВходящиеТочки.Добавить();
					НоваяВхТочка.ТочкаМаршрута = Выборка_1.Ссылка;
					НоваяВхТочка.НомерВерсии = НомерНовойВерсии;
				КонецЕсли;
			КонецЦикла;

			Для каждого СтрокаИсхТочек Из СтрокаТаблицы.ИсходящиеТочки Цикл

				НайденаяСтрока = ТабТочекМаршрута.Найти(СтрокаИсхТочек.ИмяЭлемента, "ИмяЭлемента");
				Запрос_1.УстановитьПараметр("Владелец", КартаМаршрута);
				Запрос_1.УстановитьПараметр("Групповая", НайденаяСтрока.Групповая);
				Запрос_1.УстановитьПараметр("Имя", НайденаяСтрока.ИмяЭлемента);
				Запрос_1.УстановитьПараметр("Наименование", НайденаяСтрока.НаименованиеЭлемента);
				Запрос_1.УстановитьПараметр("Вид", НайденаяСтрока.ВидЭлемента);
				Выборка_1 = Запрос_1.Выполнить().Выбрать();
				Если Выборка_1.Следующий() Тогда

					НоваяВхТочка = ТочкаМаршрутаОбъект.ИсходящиеТочки.Добавить();
					НоваяВхТочка.ТочкаМаршрута = Выборка_1.Ссылка;
					НоваяВхТочка.Индекс = СтрокаИсхТочек.Индекс;
					НоваяВхТочка.ВариантИмя = СтрокаИсхТочек.ВариантИмя;
					НоваяВхТочка.ВариантСиноним = СтрокаИсхТочек.ВариантСиноним;
					НоваяВхТочка.НомерВерсии = НомерНовойВерсии;
				КонецЕсли;
			КонецЦикла;
			ТочкаМаршрутаОбъект.НеИспользуется = Ложь;
			ТочкаМаршрутаОбъект.записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьПометкуУдаленияНеАктуальныхТочек(КартаМаршрута) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутов.Ссылка,
	|	КОЛИЧЕСТВО(ВложенныйЗапрос.ТочкаМаршрута) КАК Количество
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			CRM_ТочкиМаршрутовВходящиеТочки.Ссылка КАК Ссылка,
	|			CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута КАК ТочкаМаршрута
	|		ИЗ
	|			Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка,
	|			CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
	|		ИЗ
	|			Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки) КАК ВложенныйЗапрос
	|		ПО CRM_ТочкиМаршрутов.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	CRM_ТочкиМаршрутов.ПометкаУдаления = ЛОЖЬ
	|	И CRM_ТочкиМаршрутов.Владелец = &Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ТочкиМаршрутов.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество = 0 Тогда
			ТочкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТочкаОбъект.УстановитьПометкуУдаления(Истина, Ложь);
			ТочкаОбъект.НеИспользуется = Истина;
			ТочкаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьАктуальностьТочекОтносительноПоследнейВерсии(КартаМаршрута, КартаМаршрутаВерсия) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
	Запрос.УстановитьПараметр("НомерВерсии", КартаМаршрутаВерсия);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутов.Ссылка,
	|	КОЛИЧЕСТВО(ЕСТЬNULL(ВложенныйЗапрос.ТочкаМаршрута, 0)) КАК Количество
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			CRM_ТочкиМаршрутовВходящиеТочки.Ссылка КАК Ссылка,
	|			CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута КАК ТочкаМаршрута
	|		ИЗ
	|			Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
	|		ГДЕ
	|			CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка,
	|			CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
	|		ИЗ
	|			Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	|		ГДЕ
	|			CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии) КАК ВложенныйЗапрос
	|		ПО CRM_ТочкиМаршрутов.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	CRM_ТочкиМаршрутов.Владелец = &Владелец
	|	И (НЕ CRM_ТочкиМаршрутов.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ТочкиМаршрутов.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество = 0 Тогда
			ТочкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТочкаОбъект.НеИспользуется = Истина;
			ТочкаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьВходящиеИсходящиеТочки(КартаМаршрута, НомерНовойВерсии) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
	|ГДЕ
	|	CRM_ТочкиМаршрутов.Владелец = &Владелец";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		БылиИзменения = Ложь;
		ТочкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КолСтрок = ТочкаОбъект.ВходящиеТочки.Количество();
		Если КолСтрок > 0 Тогда
			Ном = КолСтрок;
			Пока Ном > 0 Цикл
				Если ТочкаОбъект.ВходящиеТочки[Ном - 1].НомерВерсии = НомерНовойВерсии Тогда
					ТочкаОбъект.ВходящиеТочки.Удалить(ТочкаОбъект.ВходящиеТочки.Индекс(ТочкаОбъект.ВходящиеТочки[Ном - 1]));
					БылиИзменения = Истина;
				КонецЕсли;
				Ном = Ном - 1;
			КонецЦикла;
		КонецЕсли;
		КолСтрок = ТочкаОбъект.ИсходящиеТочки.Количество();
		Если КолСтрок > 0 Тогда
			Ном = КолСтрок;
			Пока Ном > 0 Цикл
				Если ТочкаОбъект.ИсходящиеТочки[Ном - 1].НомерВерсии = НомерНовойВерсии Тогда
					ТочкаОбъект.ИсходящиеТочки.Удалить(ТочкаОбъект.ИсходящиеТочки.Индекс(ТочкаОбъект.ИсходящиеТочки[Ном - 1]));
					БылиИзменения = Истина;
				КонецЕсли;
				Ном = Ном - 1;
			КонецЦикла;
		КонецЕсли;
		КолСтрок = ТочкаОбъект.ТочкиРазделенияСлияния.Количество();
		Если КолСтрок > 0 Тогда
			Ном = КолСтрок;
			Пока Ном > 0 Цикл
				Если ТочкаОбъект.ТочкиРазделенияСлияния[Ном - 1].НомерВерсии = НомерНовойВерсии Тогда
					ТочкаОбъект.ТочкиРазделенияСлияния.Удалить(ТочкаОбъект.ТочкиРазделенияСлияния.Индекс(ТочкаОбъект.ТочкиРазделенияСлияния[Ном - 1]));
					БылиИзменения = Истина;
				КонецЕсли;
				Ном = Ном - 1;
			КонецЦикла;
		КонецЕсли;
		Если БылиИзменения Тогда
			ТочкаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОпределитьПорядокТочек(СтрокаИсхТочки, ТабТочекМаршрута, ТабПройденныхТочек, Порядок = 0)
	СтрокаТочки = ТабТочекМаршрута.Найти(СтрокаИсхТочки.ИмяЭлемента, "ИмяЭлемента");
	Порядок = Порядок + 1;
	СтрокаТочки.РеквизитДопУпорядочивания = Порядок;
	НоваяСтрокаПройденых = ТабПройденныхТочек.Добавить();
	НоваяСтрокаПройденых.ИмяЭлемента = СтрокаТочки.ИмяЭлемента;
	СтрокаТочки.ИсходящиеТочки.Сортировать("Индекс Возр");
	Для каждого ИсхТочка Из СтрокаТочки.ИсходящиеТочки Цикл
		СтрокаПройденых = ТабПройденныхТочек.Найти(ИсхТочка.ИмяЭлемента, "ИмяЭлемента");
		Если Не (СтрокаПройденых = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		ОпределитьПорядокТочек(ИсхТочка, ТабТочекМаршрута, ТабПройденныхТочек, Порядок);
	КонецЦикла;
КонецПроцедуры

Функция ВернутьВидТочкиПоЭлементу(ЭлементСхемы) Экспорт
	Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСтарт") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.Старт;
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыЗавершение") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.Завершение;
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДействие") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.Действие;
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыУсловие") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.Условие;
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта;
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыОбработка") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.Обработка;
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс;
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыРазделение") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.Разделение;
	ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСлияние") Тогда
		Возврат Перечисления.CRM_ВидыТочекМаршрута.Слияние;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗначениеПоПозиции(стр, Позиция)
	стр_1 = стр;
	стрДлина = СтрДлина(стр_1);
	Для Ном = 1 По Позиция Цикл
		Поз_1 = Найти(стр_1, ",");
		Если Поз_1 = 0 Тогда
			Возврат 0;
		КонецЕсли;
		стр_1 = Сред(стр_1, Поз_1 + 1, стрДлина);
	КонецЦикла;
	Поз_2 = Найти(стр_1, ",");
	Если Поз_2 = 0 Тогда
		Возврат стр_1;
	КонецЕсли;
	Возврат Сред(стр_1, 1, Поз_2 - 1);
КонецФункции

Функция ПроверитьУсловиеЛинии(ЭлементСхемы, СхемаМаршрута, ТекстовыйДокумент) Экспорт
	Проверка = """" + ЭлементСхемы.ИмяЭлемента + """";
	Текст = ТекстовыйДокумент.ПолучитьТекст();
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Проверка, Ложь);

	Флаг = Ложь;
	Для каждого ЭлементМассива Из Массив Цикл
		Если Флаг = Ложь И Прав(ЭлементМассива, 2) = "}," Тогда
			Флаг = Истина;
			Продолжить;
		КонецЕсли;

		Если Флаг Тогда
			Вариант = Число(ПолучитьЗначениеПоПозиции(ЭлементМассива, 4));
			Возврат ?(Вариант = 1, Истина, Ложь);
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция ПрочитатьГрафическуюСхемуСформироватьДеревоТочек(СхемаМаршрута, ПутьКВременномуФайлу) Экспорт
	ТабТочекМаршрута = Новый ТаблицаЗначений;
	ТабТочекМаршрута.Колонки.Добавить("Элемент");
	ТабТочекМаршрута.Колонки.Добавить("ВидЭлемента");
	ТабТочекМаршрута.Колонки.Добавить("ИмяЭлемента");
	ТабТочекМаршрута.Колонки.Добавить("НаименованиеЭлемента");
	ТабТочекМаршрута.Колонки.Добавить("Групповая");
	ТабТочекМаршрута.Колонки.Добавить("Пояснение");
	ТабТочекМаршрута.Колонки.Добавить("РеквизитДопУпорядочивания");
	ТабТочекМаршрута.Колонки.Добавить("ВходящиеТочки");
	ТабТочекМаршрута.Колонки.Добавить("ИсходящиеТочки");
	ТабЛиний = Новый ТаблицаЗначений;
	ТабЛиний.Колонки.Добавить("Элемент");
	ТабЛиний.Колонки.Добавить("ИмяЭлемента");
	ТабЛиний.Колонки.Добавить("НаименованиеЭлемента");
	ТабЛиний.Колонки.Добавить("НачалоЭлемент");
	ТабЛиний.Колонки.Добавить("КонецЭлемент");
	ТабЛиний.Колонки.Добавить("НачалоВариант");
	Для каждого ЭлементСхемы Из СхемаМаршрута.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСтарт") Или ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыЗавершение") Или ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДействие") Или ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыУсловие") Или ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") Или ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыОбработка") Или ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Или ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыРазделение") Или ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСлияние") Тогда








			НоваяСтрока = ТабТочекМаршрута.Добавить();
			НоваяСтрока.Элемент = ЭлементСхемы;
			НоваяСтрока.ВидЭлемента = ВернутьВидТочкиПоЭлементу(ЭлементСхемы);
			НоваяСтрока.ИмяЭлемента = ЭлементСхемы.Имя;
			НоваяСтрока.НаименованиеЭлемента = ЭлементСхемы.Наименование;
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДействие") Тогда
				НоваяСтрока.Групповая = ЭлементСхемы.Групповая;
				НоваяСтрока.Пояснение = ЭлементСхемы.Пояснение;
			Иначе
				НоваяСтрока.Групповая = Ложь;
			КонецЕсли;
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
				ТабИсходящиеТочки = Новый ТаблицаЗначений;
				ТабИсходящиеТочки.Колонки.Добавить("ВидЭлемента");
				ТабИсходящиеТочки.Колонки.Добавить("ИмяЭлемента");
				ТабИсходящиеТочки.Колонки.Добавить("Индекс");
				ТабИсходящиеТочки.Колонки.Добавить("ВариантИмя");
				ТабИсходящиеТочки.Колонки.Добавить("ВариантСиноним");
				ном = 0;
				Для каждого ВариантТочки Из ЭлементСхемы.Элементы Цикл
					НоваяИсх = ТабИсходящиеТочки.Добавить();
					НоваяИсх.Индекс = ном;
					НоваяИсх.ВариантИмя = Строка(ВариантТочки.Значение);
					НоваяИсх.ВариантСиноним = ВариантТочки.Наименование;
					ном = ном + 1;
				КонецЦикла;
				НоваяСтрока.ИсходящиеТочки = ТабИсходящиеТочки;
			ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыУсловие") Тогда
				ТабИсходящиеТочки = Новый ТаблицаЗначений;
				ТабИсходящиеТочки.Колонки.Добавить("ВидЭлемента");
				ТабИсходящиеТочки.Колонки.Добавить("ИмяЭлемента");
				ТабИсходящиеТочки.Колонки.Добавить("Индекс");
				ТабИсходящиеТочки.Колонки.Добавить("ВариантИмя");
				ТабИсходящиеТочки.Колонки.Добавить("ВариантСиноним");
				НоваяИсх = ТабИсходящиеТочки.Добавить();
				НоваяИсх.Индекс = 0;
				НоваяИсх = ТабИсходящиеТочки.Добавить();
				НоваяИсх.Индекс = 1;
				НоваяСтрока.ИсходящиеТочки = ТабИсходящиеТочки;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			НоваяСтрока = ТабЛиний.Добавить();
			НоваяСтрока.Элемент = ЭлементСхемы;
			НоваяСтрока.ИмяЭлемента = ЭлементСхемы.Имя;
			НоваяСтрока.НаименованиеЭлемента = ЭлементСхемы.Наименование;
			НоваяСтрока.НачалоЭлемент = ЭлементСхемы.НачалоЭлемент;
			НоваяСтрока.КонецЭлемент = ЭлементСхемы.КонецЭлемент;
			НоваяСтрока.НачалоВариант = ЭлементСхемы.НачалоВариант;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабТочекМаршрута Из ТабТочекМаршрута Цикл
		ТабВходящиеТочки = Новый ТаблицаЗначений;
		ТабВходящиеТочки.Колонки.Добавить("ВидЭлемента");
		ТабВходящиеТочки.Колонки.Добавить("ИмяЭлемента");
		МассивВходящихТочек = ТабЛиний.НайтиСтроки(Новый Структура("КонецЭлемент", СтрокаТабТочекМаршрута.Элемент));
		Для каждого ЭлементМассива Из МассивВходящихТочек Цикл
			НоваяСтрокаВх = ТабВходящиеТочки.Добавить();
			НоваяСтрокаВх.ВидЭлемента = ВернутьВидТочкиПоЭлементу(ЭлементМассива.НачалоЭлемент);
			НоваяСтрокаВх.ИмяЭлемента = ЭлементМассива.НачалоЭлемент.Имя;
		КонецЦикла;
		СтрокаТабТочекМаршрута.ВходящиеТочки = ТабВходящиеТочки;
		МассивИсходящихТочек = ТабЛиний.НайтиСтроки(Новый Структура("НачалоЭлемент", СтрокаТабТочекМаршрута.Элемент));
		Если ТипЗнч(СтрокаТабТочекМаршрута.Элемент) = Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
			Для каждого ЭлементМассива Из МассивИсходящихТочек Цикл
				Если Не (ЭлементМассива.КонецЭлемент = Неопределено) Тогда
					СтрокаИсх = СтрокаТабТочекМаршрута.ИсходящиеТочки.Найти(Строка(ЭлементМассива.НачалоВариант.Значение), "ВариантИмя");
					СтрокаИсх.ВидЭлемента = ВернутьВидТочкиПоЭлементу(ЭлементМассива.КонецЭлемент);
					СтрокаИсх.ИмяЭлемента = ЭлементМассива.КонецЭлемент.Имя;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(СтрокаТабТочекМаршрута.Элемент) = Тип("ЭлементГрафическойСхемыУсловие") Тогда
			Для каждого ЭлементМассива Из МассивИсходящихТочек Цикл

				ПозитивныйВариант = ПроверитьУсловиеЛинии(ЭлементМассива, СхемаМаршрута, ПутьКВременномуФайлу);
				СтрокаИсх = СтрокаТабТочекМаршрута.ИсходящиеТочки.Найти(?(ПозитивныйВариант, 1, 0), "Индекс");
				Если Не (ЭлементМассива.КонецЭлемент = Неопределено) Тогда
					СтрокаИсх.ВидЭлемента = ВернутьВидТочкиПоЭлементу(ЭлементМассива.КонецЭлемент);
					СтрокаИсх.ИмяЭлемента = ЭлементМассива.КонецЭлемент.Имя;
					СтрокаИсх.ВариантИмя = Строка(ПозитивныйВариант);
					СтрокаИсх.ВариантСиноним = ЭлементМассива.НаименованиеЭлемента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТабИсходящиеТочки = Новый ТаблицаЗначений;
			ТабИсходящиеТочки.Колонки.Добавить("ВидЭлемента");
			ТабИсходящиеТочки.Колонки.Добавить("ИмяЭлемента");
			ТабИсходящиеТочки.Колонки.Добавить("Индекс");
			ТабИсходящиеТочки.Колонки.Добавить("ВариантИмя");
			ТабИсходящиеТочки.Колонки.Добавить("ВариантСиноним");
			Для каждого ЭлементМассива Из МассивИсходящихТочек Цикл
				Если ЭлементМассива.КонецЭлемент = Неопределено Тогда Продолжить; КонецЕсли;
				НоваяСтрокаИсх = ТабИсходящиеТочки.Добавить();
				НоваяСтрокаИсх.ВидЭлемента = ВернутьВидТочкиПоЭлементу(ЭлементМассива.КонецЭлемент);
				НоваяСтрокаИсх.ИмяЭлемента = ЭлементМассива.КонецЭлемент.Имя;
				НоваяСтрокаИсх.Индекс = 0;
			КонецЦикла;
			СтрокаТабТочекМаршрута.ИсходящиеТочки = ТабИсходящиеТочки;
		КонецЕсли;
	КонецЦикла;

	МассивКритичныхОшибок = Новый массив;
	МассивНеКритичныхОшибок = Новый массив;

	МассивТочек = ТабТочекМаршрута.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.CRM_ВидыТочекМаршрута.Старт));
	Если МассивТочек.Количество() = 0 Тогда
		МассивКритичныхОшибок.Добавить(НСтр("ru = 'Ошибка! Не указано ни одной точки старта'"));
	КонецЕсли;
	МассивТочек = ТабТочекМаршрута.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.CRM_ВидыТочекМаршрута.Завершение));
	Если МассивТочек.Количество() = 0 Тогда
		МассивКритичныхОшибок.Добавить(НСтр("ru = 'Ошибка! Не указано ни одной точки завершения'"));
	КонецЕсли;

	Для каждого СтрокаТаб Из ТабТочекМаршрута Цикл
		Если СтрокаТаб.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда Продолжить; КонецЕсли;
		Если СтрокаТаб.ВходящиеТочки.Количество() = 0 Тогда
			МассивКритичныхОшибок.Добавить(НСтр("ru = 'Ошибка! Точка ('") + СтрокаТаб.ИмяЭлемента + НСтр("ru = '), не являющаяся точкой старта, не имеет ни одной входящей линии.'"));

		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТаб Из ТабТочекМаршрута Цикл
		Если СтрокаТаб.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда Продолжить; КонецЕсли;
		Если СтрокаТаб.ИсходящиеТочки.Количество() = 0 Тогда
			МассивКритичныхОшибок.Добавить(НСтр("ru = 'Ошибка! Точка ('") + СтрокаТаб.ИмяЭлемента + НСтр("ru = ') не имеет пути в точку завершения на карте маршрута.'"));

		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТаб Из ТабЛиний Цикл
		Если СтрокаТаб.КонецЭлемент = Неопределено Тогда
			МассивКритичныхОшибок.Добавить(НСтр("ru = 'Ошибка! Соединительная линия ('") + СтрокаТаб.ИмяЭлемента + НСтр("ru = ') не присоединена ни к одной точке карты.'"));

		КонецЕсли;
	КонецЦикла;

	МассивТочек = ТабТочекМаршрута.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта));
	Для каждого ЗначениеМассива Из МассивТочек Цикл
		Для каждого ИсхСтрока Из ЗначениеМассива.ИсходящиеТочки Цикл
			Если ИсхСтрока.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
				МассивНеКритичныхОшибок.Добавить(НСтр("ru = 'Предупреждение! После точки выбора варианта ('") + ЗначениеМассива.ИмяЭлемента + НСтр("ru = ') следует точка выбор варианта.'"));

			ИначеЕсли ИсхСтрока.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
				МассивНеКритичныхОшибок.Добавить(НСтр("ru = 'Предупреждение! После точки выбора варианта ('") + ЗначениеМассива.ИмяЭлемента + НСтр("ru = ') следует точка условия.'"));

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	МассивТочек = ТабТочекМаршрута.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.CRM_ВидыТочекМаршрута.Условие));
	Для каждого ЗначениеМассива Из МассивТочек Цикл
		Для каждого ИсхСтрока Из ЗначениеМассива.ИсходящиеТочки Цикл
			Если ИсхСтрока.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
				МассивНеКритичныхОшибок.Добавить(НСтр("ru = 'Предупреждение! После точки условия ('") + ЗначениеМассива.ИмяЭлемента + НСтр("ru = ') следует точка выбор варианта.'"));

			ИначеЕсли ИсхСтрока.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
				МассивНеКритичныхОшибок.Добавить(НСтр("ru = 'Предупреждение! После точки условия ('") + ЗначениеМассива.ИмяЭлемента + НСтр("ru = ') следует точка условия.'"));

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	МассивТочек = ТабТочекМаршрута.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.CRM_ВидыТочекМаршрута.Старт));
	Для каждого ЗначениеМассива Из МассивТочек Цикл
		Для каждого ИсхСтрока Из ЗначениеМассива.ИсходящиеТочки Цикл
			Если ИсхСтрока.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
				МассивНеКритичныхОшибок.Добавить(НСтр("ru = 'Предупреждение! После точки старта ('") + ЗначениеМассива.ИмяЭлемента + НСтр("ru = ') следует точка выбор варианта.'"));

			ИначеЕсли ИсхСтрока.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
				МассивНеКритичныхОшибок.Добавить(НСтр("ru = 'Предупреждение! После точки старта ('") + ЗначениеМассива.ИмяЭлемента + НСтр("ru = ') следует точка условия.'"));

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	МассивТочек = ТабТочекМаршрута.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	Для каждого ЗначениеМассива Из МассивТочек Цикл
		Для каждого ИсхСтрока Из ЗначениеМассива.ИсходящиеТочки Цикл
			Если ИсхСтрока.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
				МассивНеКритичныхОшибок.Добавить(НСтр("ru = 'Предупреждение! После точки слияния ('") + ЗначениеМассива.ИмяЭлемента + НСтр("ru = ') следует точка выбор варианта.'"));

			ИначеЕсли ИсхСтрока.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
				МассивНеКритичныхОшибок.Добавить(НСтр("ru = 'Предупреждение! После точки слияния ('") + ЗначениеМассива.ИмяЭлемента + НСтр("ru = ') следует точка условия.'"));

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если МассивКритичныхОшибок.Количество() = 0 Тогда
		ТабПройденныхТочек = Новый ТаблицаЗначений;
		ТабПройденныхТочек.Колонки.Добавить("ИмяЭлемента");
		МассивТочекСтарта = ТабТочекМаршрута.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.CRM_ВидыТочекМаршрута.Старт));
		Порядок = 0;
		Для каждого ЗначениеМассива Из МассивТочекСтарта Цикл
			ОпределитьПорядокТочек(ЗначениеМассива, ТабТочекМаршрута, ТабПройденныхТочек, Порядок);
		КонецЦикла;
	КонецЕсли;
	СтруктураВозврата = Новый Структура("ТабТочекМаршрута, КритичныеОшибки, НеКритичныеОшибки", ТабТочекМаршрута, МассивКритичныхОшибок, МассивНеКритичныхОшибок);

	Возврат СтруктураВозврата;
КонецФункции

// ++ VOG Солодов В.В. 20.08.2019 task 583
Функция ВыполнитьЗадачиПоАнкете(АнкетаСсылка, Статус) Экспорт
	
	МассивЗадач = Новый Массив;
	
	ВариантОпроса 				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АнкетаСсылка, "ВариантОпроса");
	ИспользоватьБизнесПроцесс 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантОпроса, "ИспользоватьБизнесПроцесс");
	
	Если ИспользоватьБизнесПроцесс Тогда
		Возврат МассивЗадач;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
		|	CRM_БизнесПроцесс.НомерВерсииКартыМаршрута КАК НомерВерсииКартыМаршрута
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО CRM_БизнесПроцесс.Ссылка = ЗадачаИсполнителя.Предмет
		|			И (CRM_БизнесПроцесс.Предмет = &Предмет)
		|			И (CRM_БизнесПроцесс.ПометкаУдаления = ЛОЖЬ)
		|			И (CRM_БизнесПроцесс.Стартован = ИСТИНА)
		|			И (CRM_БизнесПроцесс.Завершен = ЛОЖЬ)
		|			И (ЗадачаИсполнителя.Выполнена = ЛОЖЬ)
		|			И (ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Предмет", АнкетаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Задача = ВыборкаДетальныеЗаписи.Задача;
		
		СписокВариантов = ПолучитьВариантыВыполненияЗадачиПоСтатусуАнкеты(Задача, Статус);
		
		Для Каждого ВариантЗавершения Из СписокВариантов Цикл
			
			ЗадачаИсполнителя = Задача.ПолучитьОбъект();
			
			ЗадачаИсполнителя.CRM_ВариантВыполнения			= ВариантЗавершения.Значение;
			ЗадачаИсполнителя.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(
				ВыборкаДетальныеЗаписи.CRM_ТочкаМаршрута,
				ВариантЗавершения.Значение,
				ВыборкаДетальныеЗаписи.НомерВерсииКартыМаршрута);
			
			ЗадачаИсполнителя.Записать();
			
			ПродолжитьВыполнение = Истина;
			
			Результат = CRM_БизнесПроцессыИЗадачиВызовСервера.ЗаблокироватьДанныеДляРедактированияВедущейЗадачи(
				ЗадачаИсполнителя.БизнесПроцесс, ПродолжитьВыполнение);
			
			Если Не ПродолжитьВыполнение Тогда
				
				ШаблонПредупреждения = НСтр("ru = 'Невозможно выполнить, так как задача: %1 редактируется. %2'");
				ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, Результат.ПредставлениеЗадачи, Результат.ТекстОшибки);
				ВызватьИсключение(ТекстПредупреждения);
				
			Иначе
				
				// ++ VOG Солодов В.В. 11.12.2019
				МассивЗадачКОбработке = Новый Массив;
				МассивЗадачКОбработке.Добавить(Задача);
				
				CRM_БизнесПроцессыИЗадачиВызовСервера.ПринятьЗадачиКИсполнению(МассивЗадачКОбработке);
				
				ДатаСтрокой 	= CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ТекущаяДатаСеанса());
				ТекстВыполнения = СтрШаблон(НСтр("ru = '%1 Выполнена -> %2'"), ДатаСтрокой, Пользователи.ТекущийПользователь());
				
				НачатьТранзакцию();
				Попытка
					
					БизнесПроцессыИЗадачиСервер.ЗаблокироватьЗадачи(МассивЗадачКОбработке);
					
					ЗадачаИсполнителя = Задача.ПолучитьОбъект();
					ЗадачаИсполнителя.Прочитать();
					
					ЗадачаИсполнителя.CRM_ПоследнееДействиеСтрокой 	= ТекстВыполнения;
					ЗадачаИсполнителя.CRM_ВариантВыполнения 		= ВариантЗавершения.Значение;
					ЗадачаИсполнителя.РезультатВыполнения 			= ЗадачаИсполнителя.РезультатВыполнения + ТекстВыполнения;
					
					Если Не ЗначениеЗаполнено(ЗадачаИсполнителя.ДатаИсполнения) Тогда
						ЗадачаИсполнителя.ДатаИсполнения = ТекущаяДатаСеанса();
					КонецЕсли;
					
					ЗадачаИсполнителя.Записать();
					ЗадачаИсполнителя.ВыполнитьЗадачу();
					
					//Запись выполнения 
					вогСобытия.ЗаписатьПроцентВыполненияЗадачи(ЗадачаИсполнителя.Ссылка);
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					ВызватьИсключение;
					
				КонецПопытки;
				// До изменения
				//ЗадачаИсполнителя.ДатаИсполнения = ТекущаяДата();
				//ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(
				//	ЗадачаИсполнителя.ДатаИсполнения);
				//
				//ТекстВыполнения = СтрШаблон(НСтр("ru = '%1 Выполнена -> %2'"), ДатаСтрокой, Пользователи.ТекущийПользователь());
				//
				//ЗадачаИсполнителя.CRM_ПоследнееДействиеСтрокой 	= ТекстВыполнения;
				//ЗадачаИсполнителя.РезультатВыполнения 			= ТекстВыполнения;
				//
				//ЗадачаИсполнителя.Записать();
				//CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаИсполнителя.Ссылка,, Неопределено);
				// -- VOG Солодов В.В. 11.12.2019
				
				МассивЗадач.Добавить(ЗадачаИсполнителя.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивЗадач;
	
КонецФункции

Процедура ЗаполнитьТаблицуИсполнителейПоВариантуОпроса(Объект, ТаблицаИсполнителей) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И Объект.ДополнительныеСвойства.ЭтоНовый = Истина
		И ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.вогАнкета") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогРолиИсполнителейПоВариантамОпроса.Статус КАК Статус,
		|	вогРолиИсполнителейПоВариантамОпроса.РольИсполнителя КАК РольИсполнителя
		|ПОМЕСТИТЬ ВТ_РолиПоСтатусам
		|ИЗ
		|	Документ.вогАнкета КАК вогАнкета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогРолиИсполнителейПоВариантамОпроса КАК вогРолиИсполнителейПоВариантамОпроса
		|		ПО вогАнкета.ВариантОпроса = вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса
		|			И (вогАнкета.Ссылка = &Предмет)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_ТочкиМаршрутовПараметрыТочки.Ссылка КАК ТочкаМаршрута,
		|	ВТ_РолиПоСтатусам.РольИсполнителя КАК РольИсполнителя
		|ИЗ
		|	ВТ_РолиПоСтатусам КАК ВТ_РолиПоСтатусам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ТочкиМаршрутов.ПараметрыТочки КАК CRM_ТочкиМаршрутовПараметрыТочки
		|		ПО ВТ_РолиПоСтатусам.Статус = CRM_ТочкиМаршрутовПараметрыТочки.Параметр
		|			И (CRM_ТочкиМаршрутовПараметрыТочки.Ссылка.Владелец = &КартаМаршрута)";
		
		Запрос.УстановитьПараметр("Предмет", 		Объект.Предмет);
		Запрос.УстановитьПараметр("КартаМаршрута", 	Объект.КартаМаршрута);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Если ТаблицаИсполнителей = Неопределено Тогда
				ТаблицаИсполнителей = Новый ТаблицаЗначений;
				ТаблицаИсполнителей.Колонки.Добавить("Исполнитель", 	Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
				ТаблицаИсполнителей.Колонки.Добавить("ТочкаМаршрута", 	Новый ОписаниеТипов("СправочникСсылка.CRM_ТочкиМаршрутов"));
			КонецЕсли;
			
			ОсновнойОбъектАдресации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Автор, "Подразделение");
			ДополнительныеПараметры = Новый Структура("Подразделение", ОсновнойОбъектАдресации);
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				СписокИсполнителей = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиСАдресацией(
					Выборка.РольИсполнителя, ДополнительныеПараметры);
				
				Для Каждого ИсполнительРоли Из СписокИсполнителей Цикл
					НоваяСтрока = ТаблицаИсполнителей.Добавить();
					НоваяСтрока.Исполнитель 	= ИсполнительРоли.Значение;
					НоваяСтрока.ТочкаМаршрута 	= Выборка.ТочкаМаршрута;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 20.08.2019

#Область СлужебныеПроцедурыИФункции

// ++ VOG Солодов В.В. 20.08.2019 task 583
Функция ПолучитьВариантыВыполненияЗадачиПоСтатусуАнкеты(Задача, Статус)
	
	НаборМаршрута = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборМаршрута.Отбор.Объект.Установить(Задача.БизнесПроцесс);
	НаборМаршрута.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
	НаборМаршрута.Прочитать();
	ТабНабора = НаборМаршрута.Выгрузить();
	СтрокаМаршрута = ТабНабора.Найти(Задача.CRM_ТочкаМаршрута,"ТочкаМаршрута");
	СписокВариантов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс) Тогда
		
		СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Задача.CRM_ТочкаМаршрута,
			Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, 0);
		
		Если Не (СтруктураТочки = Неопределено) И (СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие 
			Или СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта) Тогда
			
			МассивИсходящихТочек = ПолучитьИсходящиеТочкиПоСтатусуАнкеты(СтруктураТочки.ИсходящаяТочка,
				Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, Статус);
			
			Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
					
				СписокВариантов.Добавить(
					ЗначениеМассива.Индекс,
					ЗначениеМассива.ВариантСиноним,
					(СтрокаМаршрута.ВариантВыполнения = ЗначениеМассива.Индекс));
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокВариантов;
	
КонецФункции

Функция ПолучитьИсходящиеТочкиПоСтатусуАнкеты(ТочкаМаршрута, Версия, Статус)
	
	МассивИсходящихТочек = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка КАК Ссылка,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.НомерСтроки КАК НомерСтроки,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута КАК ТочкаМаршрута,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Индекс КАК Индекс,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ВариантИмя КАК ВариантИмя,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ВариантСиноним КАК ВариантСиноним,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии КАК НомерВерсии
	|ПОМЕСТИТЬ ВТ_ИсходящиеТочки
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка = &Ссылка
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ИсходящиеТочки.Ссылка КАК Ссылка,
	|	ВТ_ИсходящиеТочки.НомерСтроки КАК НомерСтроки,
	|	ВТ_ИсходящиеТочки.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВТ_ИсходящиеТочки.Индекс КАК Индекс,
	|	ВТ_ИсходящиеТочки.ВариантИмя КАК ВариантИмя,
	|	ВТ_ИсходящиеТочки.ВариантСиноним КАК ВариантСиноним,
	|	ВТ_ИсходящиеТочки.НомерВерсии КАК НомерВерсии
	|ИЗ
	|	ВТ_ИсходящиеТочки КАК ВТ_ИсходящиеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ТочкиМаршрутов.ПараметрыТочки КАК CRM_ТочкиМаршрутовПараметрыТочки
	|		ПО ВТ_ИсходящиеТочки.ТочкаМаршрута = CRM_ТочкиМаршрутовПараметрыТочки.Ссылка
	|			И (CRM_ТочкиМаршрутовПараметрыТочки.Параметр = &Статус)";

	Запрос.УстановитьПараметр("Ссылка", 		ТочкаМаршрута);
	Запрос.УстановитьПараметр("НомерВерсии", 	Версия);
	Запрос.УстановитьПараметр("Владелец", 		ТочкаМаршрута.Владелец);
	Запрос.УстановитьПараметр("Статус", 		Статус);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтруктураТочки = Новый Структура;
		СтруктураТочки.Вставить("ТекущаяТочка", 	ТочкаМаршрута);
		СтруктураТочки.Вставить("ИсходящаяТочка", 	Выборка.ТочкаМаршрута);
		СтруктураТочки.Вставить("Индекс", 			Выборка.Индекс);
		СтруктураТочки.Вставить("ВариантИмя", 		Выборка.ВариантИмя);
		СтруктураТочки.Вставить("ВариантСиноним", 	Выборка.ВариантСиноним);
		СтруктураТочки.Вставить("НомерВерсии", 		Выборка.НомерВерсии);

		МассивИсходящихТочек.Добавить(СтруктураТочки);
		
	КонецЦикла;

	Возврат МассивИсходящихТочек;

КонецФункции
// -- VOG Солодов В.В. 20.08.2019
#КонецОбласти
