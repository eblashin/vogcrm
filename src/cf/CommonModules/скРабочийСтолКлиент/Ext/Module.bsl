
#Область ПрограммныйИнтерфейс

Процедура ПередНачаломРаботыСистемы() Экспорт
	
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		
		ПараметрыРаботыКлиентаПриЗапуске = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
		Если ПараметрыРаботыКлиентаПриЗапуске.ЗапускатьРабочийСтолМенеджера Тогда
			//{[-](фрагмент удален)Администратор 17.05.2018 14:51:18 ID
			//КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.РабочееМесто);
			//}Администратор 17.05.2018 14:51:18
			//{[+](фрагмент добавлен), Виноградов Дмитрий 17.05.2018 14:50:55 ID 000001857
			КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.Обычный);
			//}Администратор 17.05.2018 14:50:55
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ПараметрыРаботыКлиентаПриЗапуске = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботыКлиентаПриЗапуске.ЗапускатьРабочийСтолМенеджера Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			//ОткрытьФормуМодально("Обработка.скРабочийСтол.Форма.Форма");
			//ЗавершитьРаботуСистемы(Ложь);
			
		#Иначе
			//{[-](фрагмент удален)Администратор 17.05.2018 14:52:13 ID 000001857
			//ОткрытьФорму("Обработка.скРабочийСтол.Форма.Форма",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			//}Администратор 17.05.2018 14:52:13
			//{[+](фрагмент добавлен), Виноградов Дмитрий 17.05.2018 14:52:47 ID 000001857
			ОткрытьФорму("Обработка.скРабочийСтол.Форма.Форма",,,,,,, РежимОткрытияОкнаФормы.Независимый);
			//Решение задачи многооконности
			скРабочийСтолСервер.УстановитьНачальнуюСтраницу();
			ОбновитьИнтерфейс();
			//}Администратор 17.05.2018 14:52:47
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

#Область Инициализация

&НаКлиенте
Процедура ИнициализироватьРабочийСтолКлиент(ФормаПриемник = Неопределено) Экспорт
	
	// ++ VOG Солодов В.В. 24.06.2020 CRM-733
	ТекущийПользователь	 = ПользователиКлиентСервер.ТекущийПользователь();
	Собственник = вогОбщегоНазначенияКлиентСерверПовтИсп.ПользовательЯвляетсяСобственником(ТекущийПользователь);
	
	Если ФормаПриемник = Неопределено Или Собственник Тогда
	// До изменения
	//Если ФормаПриемник = Неопределено Тогда 
	//	ТекущийПользователь	 = ПользователиКлиентСервер.ТекущийПользователь();
	// -- VOG Солодов В.В. 24.06.2020 CRM-733
		ТекущееПодразделение = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");	
		
		СписокОбъектов = Новый СписокЗначений;
		// ++ VOG Солодов В.В. 24.06.2020 CRM-733
		СписокОбъектов.Добавить(ТекущийПользователь);
		Если Не Собственник Тогда
			СписокОбъектов.Добавить("ОбщиеНастройки");
			СписокОбъектов.Добавить(ТекущееПодразделение);
		КонецЕсли;
		// До изменения
		//СписокОбъектов.Добавить("ОбщиеНастройки");
		//СписокОбъектов.Добавить(ТекущийПользователь);
		//СписокОбъектов.Добавить(ТекущееПодразделение);
		// -- VOG Солодов В.В. 24.06.2020 CRM-733
		
		ЭлементыРабочегоСтола = скРабочийСтолСервер.ПолучитьТаблицуНастроекРабочегоСтола(СписокОбъектов, "ПорядокНастроек Убыв, Порядок Убыв");
		
	Иначе
		ТекущийПользователь	 = ФормаПриемник.ТекущийПользователь;
		ТекущееПодразделение = ФормаПриемник.ТекущееПодразделение;	
		
		СписокОбъектов = ФормаПриемник.СписокОбъектов;
		
		ЭлементыРабочегоСтола = ФормаПриемник[ФормаПриемник.ИмяОписания];	
		
	КонецЕсли;
	
	Если ЭлементыРабочегоСтола.Количество() = 0 Тогда
		ПараметрыОповещения = Новый Структура;
		Если ФормаПриемник <> Неопределено Тогда
			ПараметрыОповещения.Вставить("ФормаПриемник", ФормаПриемник);
		КонецЕсли;
		ПараметрыОповещения.Вставить("СписокОбъектов", СписокОбъектов);
		
		Оповещение = Новый ОписаниеОповещения("НастроитьРабочийСтолКлиент", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Настройки рабочего стола не определены. Перейти к настройке?'"), РежимДиалогаВопрос.ДаНет);	
		Возврат;
		
	КонецЕсли;
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ТекущееПодразделение", ТекущееПодразделение);
	ОбщиеПараметры.Вставить("ТекущийПользователь" , ТекущийПользователь);
	
	ск_глСтекФормРабочегоСтола = Новый Соответствие;	
	
	ШаблонПояснение = НСтр("ru = 'Формирование страницы ""%1""'");
	ВсегоСтраниц    = ЭлементыРабочегоСтола.Количество();	
	СчетчикСтраниц  = 1;	
	
	Для каждого ЭлементРабочегоСтола Из ЭлементыРабочегоСтола Цикл
		ТекстСостоянния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПояснение, ЭлементРабочегоСтола.Наименование);
		
		Состояние(
		ТекстСостоянния,
		Окр((СчетчикСтраниц / ВсегоСтраниц) * 100, 0)); 
		
		Форма = ск_глСтекФормРабочегоСтола.Получить(ЭлементРабочегоСтола.Идентификатор);
		Если Форма = Неопределено Тогда		
			ПараметрыФормы = Новый Структура("скНастройкиРабочегоСтола, скОбщиеПараметры",
			ЭлементыРабочегоСтола, ОбщиеПараметры 
			);
			
			Попытка
				Выполнить(ЭлементРабочегоСтола.Параметры);
			Исключение			
			КонецПопытки;
			
			Если ФормаПриемник = Неопределено Тогда
				Форма = ПолучитьФорму(ЭлементРабочегоСтола.ИмяФормы, ПараметрыФормы);
			Иначе	
				Форма = ПолучитьФорму(ЭлементРабочегоСтола.ИмяФормы, ПараметрыФормы,,, ФормаПриемник.Окно);
			КонецЕсли;
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
			
			ск_глСтекФормРабочегоСтола.Вставить(ЭлементРабочегоСтола.Идентификатор, Форма);
			скРабочийСтолКлиент.ОбработкаПриСменеВкладки(Форма, ЭлементРабочегоСтола);
			
		КонецЕсли;
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		
	КонецЦикла;  
	
	Форма.Подключаемый_ОбновитьТаблицуНапоминаний(CRM_НапоминанияСервер.ПолучитьНапоминания());
	Форма.Открыть(); 	
	
КонецПроцедуры // ИнициализироватьРабочийСтолКлиент()

&НаКлиенте
Процедура НастроитьРабочийСтолКлиент(Результат, Контекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Обработка.скРабочийСтол.Форма.ФормаНастройкиРабочегоСтола",
		Новый Структура("СписокОбъектов", Контекст.СписокОбъектов),,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
		);
		
	КонецЕсли;
	
	Если Контекст.Свойство("ФормаПриемник") Тогда
		Контекст.ФормаПриемник.ЗакрытьБезусловно = Истина;
		Контекст.ФормаПриемник.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // НастроитьРабочийСтолКлиент()

#КонецОбласти

Процедура ОбработкаГипперссылкиДействийНажатие(Форма, Элемент) Экспорт
	
	Если Элемент.Имя = "скИндикаторНапоминаний" Тогда
		СформироватьПанельНапоминаний(Форма);	
		
	ИначеЕсли Элемент.Имя = "скОткрытьЗаметки" Тогда
		СформироватьПанельЗаметок(Форма);
		
	ИначеЕсли Элемент.Имя = "скОткрытьИсторияРаботы" Тогда
		СформироватьПанельИсторииРаботы(Форма);
		
	ИначеЕсли Элемент.Имя = "скСоздатьПоручение" Тогда
		// ++ VOG Солодов В.В. 30.09.2020 CRM-942
		СписокКоманд = вогБизнесПроцессыИЗадачиВызовСервера.ДоступныНовыеПоручения();
		
		Если СписокКоманд.Количество() > 1 Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораТипаПоручения", скРабочийСтолКлиент, Форма);
			Форма.ПоказатьВыборИзМеню(Оповещение, СписокКоманд);
			
		ИначеЕсли СписокКоманд.Количество() = 1 Тогда
			ПослеВыбораТипаПоручения(СписокКоманд[0], Форма);
		Иначе
			СоздатьПоручение(Форма);
		КонецЕсли;
		// До изменения
		//СоздатьПоручение(Форма);
		// -- VOG Солодов В.В. 30.09.2020 CRM-942
		
	ИначеЕсли Элемент.Имя = "скОткрытьПанельУправленияКейсами" Тогда
		ОткрытьПанельУправленияКейсами(Форма);
		
	ИначеЕсли Элемент.Имя = "скСоздатьПоручениеПоШаблону" Тогда //Павелко, Таск 000000793, 31.10.2019
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораШаблонаДляЗаполненияПоручения", скРабочийСтолКлиент, Форма);
		ОткрытьФорму("Справочник.вогШаблоныПоручений.ФормаВыбора", , , , , , Оповещение);
		
	КонецЕсли;	
	
КонецПроцедуры

// ++ VOG Солодов В.В. 30.09.2020 CRM-942
&НаКлиенте
Процедура ПослеВыбораТипаПоручения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = 0 Тогда
		ИмяФормы 		= "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения_Старая";
		КартаМаршрута 	= ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение");
	Иначе
		ИмяФормы 		= "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения";
		КартаМаршрута 	= ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.ПоручениеНовое");
	КонецЕсли;
	
	ПараметрыПоручения = Новый Структура;
	ПараметрыПоручения.Вставить("ИмяФормы", 		ИмяФормы);
	ПараметрыПоручения.Вставить("КартаМаршрута", 	КартаМаршрута);
	
	СоздатьПоручение(ДополнительныеПараметры,, ПараметрыПоручения);
	
КонецПроцедуры // -- VOG Солодов В.В. 30.09.2020 CRM-942

#Область Поручения

Процедура СоздатьПоручение(Форма, Шаблон = Неопределено, ПараметрыПоручения = Неопределено) Экспорт //Павелко, Таск 000000793, 31.10.2019 - добавил параметр ДанныеЗаполнения
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();	
	
	// ++ VOG Солодов В.В. 30.09.2020 CRM-942
	СтруктураОснования = Новый Структура;
	СтруктураОснования.Вставить("КартаМаршрута");
	
	Если ТипЗнч(ПараметрыПоручения) = Тип("Структура")
		И ПараметрыПоручения.Свойство("КартаМаршрута") Тогда
		СтруктураОснования.КартаМаршрута = ПараметрыПоручения.КартаМаршрута;
		ИмяФормы = ПараметрыПоручения.ИмяФормы;
	Иначе
		СтруктураОснования.КартаМаршрута = ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение");
		ИмяФормы = "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения_Старая";
	КонецЕсли;
	// До изменения
	//СтруктураОснования = Новый Структура("КартаМаршрута", ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	// -- VOG Солодов В.В. 30.09.2020 CRM-942
	
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	
	//Павелко, Таск 000000793, 31.10.2019+++
	Если Не Шаблон = Неопределено Тогда
		ПараметрыФормы.Вставить("Шаблон", Шаблон);
	КонецЕсли;	
	//Павелко, Таск 000000793, 31.10.2019---
	
	// ++ VOG Солодов В.В. 30.09.2020 CRM-942
	ОткрытьФорму(ИмяФормы,
	// До изменения
	//ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", 
	// -- VOG Солодов В.В. 30.09.2020 CRM-942
	ПараметрыФормы,
	Форма,
	"Уникум");
	
	Форма.ТекущийЭлемент = Форма.Элементы.скТумблерРабочегоСтола;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораШаблонаДляЗаполненияПоручения(Результат, ДополнительныеПараметры) Экспорт //Павелко, Таск 000000793, 31.10.2019
	
	Если Не Результат = Неопределено Тогда
		
		СоздатьПоручение(ДополнительныеПараметры, Результат);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Напоминания

Процедура ОбновитьТаблицуНапоминаний(Форма, МассивНапоминаний) Экспорт
	
	ТаблицаНапоминаний = Форма.скНастройкиРабочегоСтолаТаблицаНапоминаний;
	НовыеНапоминания   = МассивНапоминаний;
	
	НапоминанияОВходящихПисьмах = Ложь;
	ПрочиеНапоминания 			= Истина;
	
	НовыеНапоминанияСписокЗначений	= Новый СписокЗначений;
	СтарыеНапоминанияСписокЗначений	= Новый СписокЗначений;
	Если НЕ (НовыеНапоминания = Неопределено) И НовыеНапоминания.Количество() > 0 Тогда
		Для Каждого Строка Из НовыеНапоминания Цикл
			КлючЗаписи = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(Строка);
			Строки = ТаблицаНапоминаний.НайтиСтроки(КлючЗаписи);
			Если Строки.Количество() = 0 Тогда
				НовыеНапоминанияСписокЗначений.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НапоминанияОВходящихПисьмах И ПрочиеНапоминания Тогда
		ТаблицаНапоминаний.Очистить();
		
	Иначе		
		ВидОповещенияОповещатьОНовыхВходящихПисьмах = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах");
		
		ТаблицаНапоминанийИндексЭлемента = 0;
		Пока ТаблицаНапоминанийИндексЭлемента < ТаблицаНапоминаний.Количество() Цикл
			ТекущаяСтрокаНапоминаний = ТаблицаНапоминаний[ТаблицаНапоминанийИндексЭлемента];
			
			ТекущееОповещениеОВходящихПисьмах = ТекущаяСтрокаНапоминаний.ВидОповещения = ВидОповещенияОповещатьОНовыхВходящихПисьмах;
			Если (НапоминанияОВходящихПисьмах И ТекущееОповещениеОВходящихПисьмах)
				ИЛИ (ПрочиеНапоминания И НЕ ТекущееОповещениеОВходящихПисьмах) Тогда
				ТаблицаНапоминаний.Удалить(ТаблицаНапоминанийИндексЭлемента);				
				
			Иначе
				ТаблицаНапоминанийИндексЭлемента = ТаблицаНапоминанийИндексЭлемента + 1;
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ (НовыеНапоминания = Неопределено) И НовыеНапоминания.Количество() > 0 Тогда
		Для Каждого Строка Из НовыеНапоминания Цикл
			СтрокаНапоминания = ТаблицаНапоминаний.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНапоминания, Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаНапоминаний.Количество() = 0 Тогда
		Форма.Элементы.скОбластьНапоминания.Видимость = Ложь;
	КонецЕсли;
	
//START Кайдашов 09/09/19 596
	//ПанельОткрыта = Форма.Элементы.скОбластьНапоминания.Видимость;
	//Форма.Элементы.скИндикаторНапоминаний.Видимость = ТаблицаНапоминаний.Количество() > 0 И Не ПанельОткрыта; 
	//Если ПанельОткрыта Тогда
	//	СформироватьПанельНапоминаний(Форма);	
	//	
	//КонецЕсли;
//END Кайдашов 596
КонецПроцедуры

Процедура СформироватьПанельНапоминаний(Форма)
	
	ТаблицаНапоминаний = Форма.скНастройкиРабочегоСтолаТаблицаНапоминаний;
	
	СоответствиеКартинок = Новый Соответствие;
	СоответствиеКартинок.Вставить(0, БиблиотекаКартинок.скНапоминаниеНизкая);
	СоответствиеКартинок.Вставить(1, БиблиотекаКартинок.скНапоминаниеОбычая);
	СоответствиеКартинок.Вставить(2, БиблиотекаКартинок.скНапоминаниеВысокая);
	
	МассивЭлементов = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаНапоминаний Цикл
		СтруктураЭлемента = Новый Структура;
		СтруктураЭлемента.Вставить("Картинка"     		 , СоответствиеКартинок.Получить(СтрокаТаблицы.Важность));
		СтруктураЭлемента.Вставить("Партнер"	  		 , СтрокаТаблицы.Партнер);       
		СтруктураЭлемента.Вставить("КонтактноеЛицо"	  	 , СтрокаТаблицы.КонтактноеЛицо);       		
		СтруктураЭлемента.Вставить("СрокИсполнения"		 , СтрокаТаблицы.СрокИсполнения);
		СтруктураЭлемента.Вставить("Содержание"   		 , СтрокаТаблицы.Содержание);
		СтруктураЭлемента.Вставить("Счетчик"	  		 , СтрокаТаблицы.Счетчик);
		СтруктураЭлемента.Вставить("Предмет"			 , СтрокаТаблицы.Предмет);
		СтруктураЭлемента.Вставить("ПредметПредставление", СтрокаТаблицы.ПредметПредставление);
		СтруктураЭлемента.Вставить("Индекс"				 , ТаблицаНапоминаний.Индекс(СтрокаТаблицы));
		
		МассивЭлементов.Добавить(СтруктураЭлемента);
		
	КонецЦикла;
	
	Форма.скПолеHTMLНапоминаний = HTMLПредставлениеСпискаНапоминаний(МассивЭлементов);
	Форма.Элементы.скОбластьНапоминания.Видимость = ТаблицаНапоминаний.Количество() > 0;	
	Форма.Элементы.скИндикаторНапоминаний.Видимость = Не Форма.Элементы.скОбластьНапоминания.Видимость; 
	
	//+вог
	//Исключить активизацию РС
	//Форма.ТекущийЭлемент = Форма.Элементы.скПолеHTMLНапоминаний;
	//+вог
	
КонецПроцедуры

Процедура ОткрытьПредметНапоминания(ВыделеннаяСтрока)
	
	ПоследняяУчетнаяЗапись = Неопределено;
	ПерейтиКЧерновикам		= Ложь;
	
	Если ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		ПоследняяУчетнаяЗапись = ВыделеннаяСтрока.Предмет;
		ПерейтиКЧерновикам = (Найти(ВыделеннаяСтрока.Содержание,"Письма перенесены в ""Черновики""") > 0);
	Иначе
		
		ПолучитьФормуОткрытьПредмет(ВыделеннаяСтрока.Предмет);
		
	КонецЕсли;
	
	Если Не ПоследняяУчетнаяЗапись = Неопределено Тогда
		
		ОткрытьМенеджерПочты(ПоследняяУчетнаяЗапись, ПерейтиКЧерновикам);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрекратитьНапоминание(Форма, ВыделеннаяСтрока)
	
	БылиИзмененыОповещенияОВходящихПисьмах = Ложь;
	Если ВыделеннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураСтроки = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(ВыделеннаяСтрока);
	СтруктураНапоминания = скРабочийСтолСервер.ПрекратитьНапоминание(СтруктураСтроки);
	Если НЕ СтруктураНапоминания.Выбран Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Напоминание удалено или модифицировано!'"));
		Возврат;
	КонецЕсли;
	Если СтруктураНапоминания.ЭтоНапоминаниеОВходящихПисьмах Тогда
		БылиИзмененыОповещенияОВходящихПисьмах = Истина;
	КонецЕсли; 
	
	Форма.Подключаемый_ОбновитьТаблицуНапоминаний(CRM_НапоминанияСервер.ПолучитьНапоминания());
	
КонецПроцедуры

Процедура ПеренестиНапоминание(Форма, ВыделеннаяСтрока)
	
	СписокВариантов = скРабочийСтолКлиентПовтИсп.СписокВариантовОтложенногоВремени();	
	Оповещение = Новый ОписаниеОповещения("ПеренестиНапоминаниеЗавершение", 
	ЭтотОбъект, Новый Структура("Форма, ВыделеннаяСтрока", Форма, ВыделеннаяСтрока));
	
	СписокВариантов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Нажмите ""Отложить"", чтобы получить оповещение через'"));
	
КонецПроцедуры

Процедура ПеренестиНапоминаниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	аэлемент = 0;
	
	БылиИзмененыОповещенияОВходящихПисьмах = Ложь;
	
	ТекущаяСтрока = ДополнительныеПараметры.ВыделеннаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	СтруктураСтроки = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(ТекущаяСтрока);
	СтруктураНапоминания = скРабочийСтолСервер.ПеренестиНапоминание(СтруктураСтроки, Результат.Значение, аэлемент);
	Если НЕ СтруктураНапоминания.Выбран Тогда
		аэлемент = аэлемент + 1; 
		ПоказатьПредупреждение(, НСтр("ru = 'Напоминание удалено или модифицировано!'"));
		Возврат;
	КонецЕсли;
	Если СтруктураНапоминания.ЭтоНапоминаниеОВходящихПисьмах Тогда
		БылиИзмененыОповещенияОВходящихПисьмах = Истина;
	КонецЕсли; 
	аэлемент = аэлемент + 1;
	
	ДополнительныеПараметры.Форма.Подключаемый_ОбновитьТаблицуНапоминаний(CRM_НапоминанияСервер.ПолучитьНапоминания());
	
КонецПроцедуры

Процедура ПрекратитьВсеНапоминания(Форма)
	
	Для Каждого Строка Из Форма.скНастройкиРабочегоСтолаТаблицаНапоминаний Цикл
		СтруктураСтроки = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(Строка);
		СтруктураНапоминания = скРабочийСтолСервер.ПрекратитьНапоминание(СтруктураСтроки);
		Если НЕ СтруктураНапоминания.Выбран Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Напоминание удалено или модифицировано!'"));
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Подключаемый_ОбновитьТаблицуНапоминаний(CRM_НапоминанияСервер.ПолучитьНапоминания());
	
КонецПроцедуры

Процедура СкрытьНапоминания(Форма) Экспорт
	
	Форма.Элементы.скОбластьНапоминания.Видимость = Ложь;
	Форма.скПолеHTMLНапоминаний 				  = "";
	
	Форма.Подключаемый_ОбновитьТаблицуНапоминаний(CRM_НапоминанияСервер.ПолучитьНапоминания());
	
КонецПроцедуры

Процедура ПеренестиВсеНапоминания(Форма)
	
	СписокВариантов = скРабочийСтолКлиентПовтИсп.СписокВариантовОтложенногоВремени();	
	Оповещение = Новый ОписаниеОповещения("ПеренестиВсеНапоминанияЗавершение", 
	ЭтотОбъект, Новый Структура("Форма", Форма));
	
	СписокВариантов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Нажмите ""Отложить"", чтобы получить оповещение через'"));
	
КонецПроцедуры

Процедура ПеренестиВсеНапоминанияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	аэлемент = 0;
	
	Для Каждого Строка Из ДополнительныеПараметры.Форма.скНастройкиРабочегоСтолаТаблицаНапоминаний Цикл
		СтруктураСтроки = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(Строка);
		СтруктураНапоминания = скРабочийСтолСервер.ПеренестиНапоминание(СтруктураСтроки, Результат.Значение, аэлемент);
		Если НЕ СтруктураНапоминания.Выбран Тогда
			аэлемент = аэлемент + 1; 
			ПоказатьПредупреждение(, НСтр("ru = 'Напоминание удалено или модифицировано!'"));
			Продолжить;
		КонецЕсли;
		Если СтруктураНапоминания.ЭтоНапоминаниеОВходящихПисьмах Тогда
			БылиИзмененыОповещенияОВходящихПисьмах = Истина;
		КонецЕсли; 
		аэлемент = аэлемент + 1;
		
	КонецЦикла;
	
	ДополнительныеПараметры.Форма.Подключаемый_ОбновитьТаблицуНапоминаний(CRM_НапоминанияСервер.ПолучитьНапоминания());
	
КонецПроцедуры

Процедура КомандаНапоминанийПрекратитьВсе(Форма, Команда) Экспорт
	ПрекратитьВсеНапоминания(Форма);
КонецПроцедуры

Процедура КомандаНапоминанийПеренестиВсе(Форма, Команда) Экспорт
	ПеренестиВсеНапоминания(Форма);
КонецПроцедуры

#КонецОбласти

#Область ПанельУправленияКейсами

Процедура ОткрытьПанельУправленияКейсами(Форма)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	ОткрытьФорму("Обработка.вогПанельУправленияКейсами.Форма", 
	ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);	
	
КонецПроцедуры

#КонецОбласти

#Область Заметки

Процедура СформироватьПанельЗаметок(Форма)
	
	МассивЭлементов = скРабочийСтолСервер.ЗаметкиПользователя();
	
	Форма.скПолеHTMLЗаметок = HTMLПредставлениеСпискаЗаметок(МассивЭлементов);	
	Форма.Элементы.скОбластьЗаметки.Видимость = Истина;
	Форма.Элементы.скОткрытьЗаметки.Видимость = Не Форма.Элементы.скОбластьЗаметки.Видимость; 
	
	Форма.ТекущийЭлемент = Форма.Элементы.скПолеHTMLЗаметок;
	
КонецПроцедуры

Процедура СкрытьЗаметки(Форма) Экспорт
	
	Форма.Элементы.скОбластьЗаметки.Видимость = Ложь;
	Форма.Элементы.скОткрытьЗаметки.Видимость = Истина; 
	Форма.скПолеHTMLЗаметок 				  = "";
	
КонецПроцедуры

Процедура КомандаЗаметкиВсе(Форма, Команда) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеРедактированияЗаметок", 
	ЭтотОбъект, Новый Структура("Форма", Форма));
	
	ОткрытьФорму("Справочник.Заметки.Форма.ВсеЗаметки",, 
	Форма,
	Форма.УникальныйИдентификатор,,,
	Оповещение);	
	
КонецПроцедуры

Процедура КомандаЗаметкиДобавить(Форма, Команда) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеРедактированияЗаметок", 
	ЭтотОбъект, Новый Структура("Форма", Форма));
	
	ОткрытьФорму("Справочник.Заметки.ФормаОбъекта",, 
	Форма,
	Форма.УникальныйИдентификатор,,, 
	Оповещение,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);	
	
КонецПроцедуры

Процедура ПослеРедактированияЗаметок(Результат, Контекст) Экспорт
	СформироватьПанельЗаметок(Контекст.Форма);	
КонецПроцедуры

#КонецОбласти

#Область ИсторияРаботы 

Процедура СформироватьПанельИсторииРаботы(Форма)
	
	МассивЭлементов = скРабочийСтолСервер.ИсторияРаботы();
	
	Форма.скПолеHTMLИсторииРаботы = HTMLПредставлениеСпискаИсторииРаботы(МассивЭлементов);	
	Форма.Элементы.скОбластьИсторияРаботы.Видимость = Истина;
	Форма.Элементы.скОткрытьИсторияРаботы.Видимость = Не Форма.Элементы.скОбластьИсторияРаботы.Видимость; 
	
	Форма.ТекущийЭлемент = Форма.Элементы.скПолеHTMLИсторииРаботы;
	
КонецПроцедуры

Процедура СкрытьИсториюРаботы(Форма) Экспорт
	
	Форма.Элементы.скОбластьИсторияРаботы.Видимость = Ложь;
	Форма.Элементы.скОткрытьИсторияРаботы.Видимость = Истина; 
	Форма.скПолеHTMLИсторииРаботы 				    = "";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ТумблерРабочегоСтолаПриИзменении(Форма, Элемент) Экспорт
	
	ЭлементыРабочегоСтола = Форма.скНастройкиРабочегоСтола.НайтиСтроки(
	Новый Структура("Идентификатор", Форма.скТумблерРабочегоСтола)
	);
	Если ЭлементыРабочегоСтола.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ЭлементРабочегоСтола = ЭлементыРабочегоСтола[0];
	Если ск_глСтекФормРабочегоСтола = Неопределено Тогда
		ск_глСтекФормРабочегоСтола = Новый Соответствие;	
	КонецЕсли;
	
	//Для корректного отображения вкладок (панель открытых)
	Форма.скТумблерРабочегоСтола = ск_глТекущийИдентификатор;
	
	ПолученнаяФорма = ск_глСтекФормРабочегоСтола.Получить(ЭлементРабочегоСтола.Идентификатор);
	Если ПолученнаяФорма <> Неопределено Тогда
		СкопироватьСвойстваФормы(Форма, ПолученнаяФорма);
		ОбработкаПриСменеВкладки(ПолученнаяФорма, ЭлементРабочегоСтола, CRM_НапоминанияСервер.ПолучитьНапоминания());
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не определена форма ""%1"". Обработка прервана. '"), ЭлементРабочегоСтола.ИмяФормы)
		);
		
		Возврат;
		
	КонецЕсли;
	
	Если ПолученнаяФорма.Открыта() Тогда
		ПолученнаяФорма.Активизировать();	
		
	Иначе	
		ПолученнаяФорма.Открыть();
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СкопироватьСвойстваФормы(ФормаИсточник, ФормаПриемник)
	
	МассивИменЭлементовВидимости = Новый Массив;	
	
	МассивИменЭлементовВидимости.Добавить("скОбластьНапоминания");
	
	МассивИменЭлементовВидимости.Добавить("скОткрытьЗаметки");
	МассивИменЭлементовВидимости.Добавить("скОбластьЗаметки");
	
	МассивИменЭлементовВидимости.Добавить("скОткрытьИсторияРаботы");
	МассивИменЭлементовВидимости.Добавить("скОбластьИсторияРаботы");
	
	Для каждого ИмяЭлементаВидимости Из МассивИменЭлементовВидимости Цикл
		ЭлементПриемник = ФормаПриемник.Элементы.Найти(ИмяЭлементаВидимости);
		Если ЭлементПриемник <> Неопределено Тогда
			ЭлементПриемник.Видимость = ФормаИсточник.Элементы[ИмяЭлементаВидимости].Видимость;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПриСменеВкладки(Форма, ЭлементРабочегоСтола, МассивНапоминаний = Неопределено) Экспорт
	
	Попытка //Диденко
		ск_глТекущийИдентификатор    = ЭлементРабочегоСтола.Идентификатор;
		Форма.скТумблерРабочегоСтола = ЭлементРабочегоСтола.Идентификатор;
		
		Обновить(Форма, МассивНапоминаний);
	Исключение КонецПопытки;
	
КонецПроцедуры // ОбработкаПриСменеВкладки()

Процедура Обновить(Форма, МассивНапоминаний)
	
	//Напоминания
	Если МассивНапоминаний <> Неопределено Тогда
		Форма.Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний);
	КонецЕсли; 
	
	//Заметки
	Если Форма.Элементы.скОбластьЗаметки.Видимость Тогда
		СформироватьПанельЗаметок(Форма);	
		
	КонецЕсли;
	
	//История работы
	Если Форма.Элементы.скОбластьИсторияРаботы.Видимость Тогда
		СформироватьПанельИсторииРаботы(Форма);	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

#Область Напоминания

Процедура ПолучитьФормуОткрытьПредмет(ТекущийПредмет)
	
	
//START Кайдашов 30/07/19	483
	Если ТипЗнч(ТекущийПредмет) = Тип("Строка") тогда
		
		Попытка
			ПерейтиПоНавигационнойСсылке(ТекущийПредмет);
		Исключение
		КонецПопытки;
		
		Возврат;
		
	КонецЕсли;
//END Кайдашов
	
	ИмяОбъектаМетаданных				= скРабочийСтолСервер.ПолучитьИмяОбъектаМетаданныхДляОткрытияФормы(ТекущийПредмет);
	ИмяОсновнойФормыОбъектаМетаданных	= скРабочийСтолСервер.ПолучитьИмяОсновнойФормыОбъектаМетаданных(ТекущийПредмет);
	Если ЗначениеЗаполнено(ИмяОсновнойФормыОбъектаМетаданных) Тогда
		Если ТипЗнч(ТекущийПредмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если скРабочийСтолСервер.ЭтоЛичнаяЗадача(ТекущийПредмет) Тогда
				ФормаОбъектаМетаданных = ПолучитьФорму(ИмяОбъектаМетаданных + ".Форма.CRM_ФормаЛичнойЗадачи", Новый Структура("Ключ", ТекущийПредмет));
			Иначе
				Если скРабочийСтолСервер.ЭтоНезависимыйПроцесс(ТекущийПредмет) Тогда
					// ++ Тищенко В.В. 22.02.2019
					// оригинал
					//ФормаОбъектаМетаданных = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачи", Новый Структура("Ключ", ТекущийПредмет));
					ФормаОбъектаМетаданных = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиНезависимыйПроцесс", Новый Структура("Ключ", ТекущийПредмет));
					// -- Тищенко В.В.
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ФормаОбъектаМетаданных = ПолучитьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", 
			Новый Структура("Ключ, ОткрытиеИзФормы", ТекущийПредмет, Истина),ЭтотОбъект);
		ИначеЕсли ТипЗнч(ТекущийПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ФормаОбъектаМетаданных = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", 
			Новый Структура("Ключ, ОткрытиеИзФормы", ТекущийПредмет, Истина),ЭтотОбъект);
		ИначеЕсли ТипЗнч(ТекущийПредмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ПоказатьЗначение(, ТекущийПредмет); 
			Возврат;
		Иначе
			// ++ Тищенко В.В. 15.02.2019
			//	ФормаОбъектаМетаданных = ПолучитьФорму(ИмяОбъектаМетаданных + ".Форма." + ИмяОсновнойФормыОбъектаМетаданных, Новый Структура("Ключ", ТекущийПредмет));
			ПоказатьЗначение(, ТекущийПредмет);
			// -- Тищенко В.В. 
		КонецЕсли;
		
		Если ФормаОбъектаМетаданных <> Неопределено Тогда
			Если ФормаОбъектаМетаданных.Открыта() Тогда
				ФормаОбъектаМетаданных.Активизировать();
			Иначе
				ФормаОбъектаМетаданных.Открыть();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьЗначение(, ТекущийПредмет); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьМенеджерПочты(УчетнаяЗапись,ПерейтиКЧерновикам)
	
	ФормаПочтовогоМенеджера = ПолучитьФорму("Обработка.CRM_МенеджерПочты.Форма");
	
	ВидПапки = ?(ПерейтиКЧерновикам,ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики"),ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие"));
	
	Если ФормаПочтовогоМенеджера.Открыта() Тогда
		ФормаПочтовогоМенеджера.УстановитьПапкуВходящиеУчетнойЗаписи(УчетнаяЗапись, ВидПапки);
		ФормаПочтовогоМенеджера.Активизировать();
	Иначе
		ФормаПочтовогоМенеджера.УчетнаяЗаписьВыбранная	= УчетнаяЗапись;
		ФормаПочтовогоМенеджера.ВидПапкиВыбранный		= ВидПапки;
		ФормаПочтовогоМенеджера.Открыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСHTML

#Область Напоминания

Функция HTMLПредставлениеСпискаНапоминаний(МассивЭлементовНапоминаний)
	
	HTMLТекст = "<html><body>";
	Для каждого ЭлементНапоминания Из МассивЭлементовНапоминаний Цикл
		HTMLТекст = HTMLТекст + 
		"<div class=block_1 style=""float: left; padding-right: 5px"">
		|" + ДобавитьКартинку(ЭлементНапоминания.Картинка) + "
		|</div>";
		
		HTMLТекст = HTMLТекст + 
		"<div class=block_2><font size=1 face=Arial>" + ЭлементНапоминания.СрокИсполнения + "</font>
		|</div>";
		
		HTMLТекст = HTMLТекст + 
		"<div class=block_2><b><font size=1 face=Arial>" + ЭлементНапоминания.ПредметПредставление + "</font></b>
		|</div>
		|<hr>";
		
		HTMLТекст = HTMLТекст + 
		"<div class=block_3><font size=1 face=Arial>" + ЭлементНапоминания.Содержание + "</font>
		|</div>
		|<hr>";
		
		HTMLТекст = HTMLТекст + 
		"<div class=block_4 align=right>";
		Если ЗначениеЗаполнено(ЭлементНапоминания.Предмет) Тогда
			HTMLТекст = HTMLТекст + "
			|" + ДобавитьКартинку(БиблиотекаКартинок.Найти) + "<a href=""Открыть_" + ЭлементНапоминания.Индекс + """><font size=1 face=Arial>Открыть</font></a>";
			
		КонецЕсли;
		HTMLТекст = HTMLТекст + "
		|" + ДобавитьКартинку(БиблиотекаКартинок.CRM_ВиджетыДинамикаНет) + "<a href=""Отложить_" + ЭлементНапоминания.Индекс + """><font size=1 face=Arial>Отложить</font></a> 
		|" + ДобавитьКартинку(БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение) + "<a href=""Завершить_" + ЭлементНапоминания.Индекс + """><font size=1 face=Arial>Завершить</font></a> 
		|</div>
		|<hr>";
		
	КонецЦикла;
	HTMLТекст = HTMLТекст + "</body></html>";
	
	Возврат HTMLТекст;
	
КонецФункции

Процедура ПолеHTMLНапоминанийПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивСсылки = СтрРазделить(ДанныеСобытия.Href, "/", Ложь);
	Если МассивСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = МассивСсылки[МассивСсылки.ВГраница()];
	СтрокаТаблицы = Форма.скНастройкиРабочегоСтолаТаблицаНапоминаний[ПолучитьИндексСтроки(ИмяКоманды)];
	Если СтрНайти(ИмяКоманды, "Открыть") > 0 Тогда
		ОткрытьПредметНапоминания(СтрокаТаблицы);	
		
	ИначеЕсли СтрНайти(ИмяКоманды, "Отложить") > 0 Тогда
		ПеренестиНапоминание(Форма, СтрокаТаблицы);
		
	ИначеЕсли СтрНайти(ИмяКоманды, "Завершить") > 0 Тогда
		ПрекратитьНапоминание(Форма, СтрокаТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИндексСтроки(ИмяКоманды)
	
	МассивИмени = СтрРазделить(ИмяКоманды, "_", Ложь);
	Возврат Число(МассивИмени[МассивИмени.ВГраница()]);
	
КонецФункции // ПолучитьИндексСтроки()

#КонецОбласти

#Область Заметки

Функция СтильЗаметокHTML()
	
	Возврат
	"<style type=""text/css"">
	|.wrapper_red{
	|border: 1px solid grey;
	|text-decoration:none;
	|color:#000;
	|background:#F78181;
	|display:block;
	|height:3.4em;
	|padding:10px;
	|overflow: hidden;
	|text-overflow:ellipsis;
	|margin:10px;
	|}
	|.wrapper_orange{
	|border: 1px solid grey;
	|text-decoration:none;
	|color:#000;
	|background:#FAAC58;
	|display:block;
	|height:3.4em;
	|padding:10px;
	|overflow: hidden;
	|text-overflow:ellipsis;
	|margin:10px;
	|}
	|.wrapper_yellow{
	|border: 1px solid grey;
	|text-decoration:none;
	|color:#000;
	|background:#F4FA58;
	|display:block;
	|height:3.4em;
	|padding:10px;
	|overflow: hidden;
	|text-overflow:ellipsis;
	|margin:10px;
	|}
	|.wrapper_green{
	|border: 1px solid grey;
	|text-decoration:none;
	|color:#000;
	|background:#40FF00;
	|display:block;
	|height:3.4em;
	|padding:10px;
	|overflow: hidden;
	|text-overflow:ellipsis;
	|margin:10px;
	|}
	|.wrapper_lightblue{
	|border: 1px solid grey;
	|text-decoration:none;
	|color:#000;
	|background:#81BEF7;
	|display:block;
	|height:3.4em;
	|padding:10px;
	|overflow: hidden;
	|text-overflow:ellipsis;
	|margin:10px;
	|}
	|.wrapper_blue{
	|border: 1px solid grey;
	|text-decoration:none;
	|color:#000;
	|background:#5858FA;
	|display:block;
	|height:3.4em;
	|padding:10px;
	|overflow: hidden;
	|text-overflow:ellipsis;
	|margin:10px;
	|}
	|.wrapper_violet{
	|border: 1px solid grey;
	|text-decoration:none;
	|color:#000;
	|background:#9A2EFE;
	|display:block;
	|height:3.4em;
	|padding:10px;
	|overflow: hidden;
	|text-overflow:ellipsis;
	|margin:10px;
	|}
	|a{ 
	|text-decoration:none;
	|color:#000;
	|} 
	|p{
	|font-size:70%;
	|font-style:normal;
	|text-align:justify;
	|font-family:sans-serif, arial;
	|}
	|.button{
	|display: block;
	|align:right;
	|position:relative;
	|}
	|</style>";
	
КонецФункции

Функция HTMLПредставлениеСпискаЗаметок(МассивЭлементовЗаметок)
	
	HTMLТекст = "<html><body>" + СтильЗаметокHTML();	
	Если МассивЭлементовЗаметок.Количество() = 0 Тогда
		HTMLТекст = HTMLТекст + 		
		"<div class=textcentr>нет заметок</div>";
	Иначе	
		Для каждого ЭлементНапоминания Из МассивЭлементовЗаметок Цикл
			HTMLТекст = HTMLТекст + 		
			"<div class=wrapper_" + ЭлементНапоминания.ЦветСтиля + ">
			|<div class=button>
			|<a href=""Скрыть_" + ЭлементНапоминания.ИдентификаторСсылки + """>" + ДобавитьКартинку(БиблиотекаКартинок.Очистить, "right") + "</a>  
			|</div>
			|<a href=""Открыть_" + ЭлементНапоминания.ИдентификаторСсылки + """>
			|<p>" + ЭлементНапоминания.ТекстСодержания +"</p>
			|</a>
			|</div>";
			
		КонецЦикла;
		
	КонецЕсли;
	HTMLТекст = HTMLТекст + "</body></html>";
	
	Возврат HTMLТекст;
	
КонецФункции

Процедура ПолеHTMLЗаметокПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	МассивСсылки = СтрРазделить(ДанныеСобытия.Href, "/", Ложь);
	Если МассивСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ИмяКоманды = МассивСсылки[МассивСсылки.ВГраница()];
	МассивКоманды = СтрРазделить(ИмяКоманды, "_", Ложь);
	Если СтрНайти(ИмяКоманды, "Скрыть") > 0 Тогда
		Если скРабочийСтолСервер.СкрытьЭлементЗаметки(МассивКоманды[МассивКоманды.ВГраница()]) Тогда
			СформироватьПанельЗаметок(Форма);
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяКоманды, "Открыть") > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеРедактированияЗаметок", 
		ЭтотОбъект, Новый Структура("Форма", Форма));
		
		ОткрытьФорму("Справочник.Заметки.ФормаОбъекта", 
		Новый Структура("Ключ", скРабочийСтолСервер.СсылкаЭлемента(МассивКоманды[МассивКоманды.ВГраница()], "Справочник.Заметки")), 
		Форма,
		Форма.УникальныйИдентификатор,,, 
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияРаботы

Функция HTMLПредставлениеСпискаИсторииРаботы(МассивЭлементовЗаметок)
	
КонецФункции

Процедура ПолеHTMLИсторииРаботыПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция ДобавитьКартинку(Картинка, Положение = "middle", Ссылка = "") Экспорт
	
	HTMLТекст = "";
	
	ДвоичныеДанныеКартинки = Картинка.ПолучитьДвоичныеДанные();
	Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		HTMLТекст = HTMLТекст + "<a href=" + Ссылка + ">";
	КонецЕсли;
	
	HTMLТекст = HTMLТекст
	+ "<img border=0 src='data:image/"
	+ Картинка.Формат()
	+ ";base64,"
	+ Base64ДанныеКартинки + "' align="+ Положение + ">";
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		HTMLТекст = HTMLТекст + "</a>";
	КонецЕсли;
	
	Возврат HTMLТекст;
	
КонецФункции

#КонецОбласти
