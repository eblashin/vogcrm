
#Область ПрограммныйИнтерфейс

// Получает имя значения перечисления как объекта метаданных.
//
// Параметры:
//  Значение - значение перечисления для которого необходимо получить имя перечисления.
//
// Возвращаемое значение:
//  Строка - имя значения перечисления как объекта метаданных.
//
Функция КомментарийЗначенияПеречисления(Значение) Экспорт
	
	ОбъектМетаданных = Значение.Метаданные();
	
	ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(Значение);
	
	Возврат ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Комментарий;
	
КонецФункции 

// Проверяет, что переданный тип - примитивный
//
// Параметры:
//  ПроверяемыйТип	 - Тип - 
// 
// Возвращаемое значение:
//  Ьулево 
//
Функция ЭтоПримитивныйТип(ПроверяемыйТип) Экспорт
	
	Если ПроверяемыйТип = Тип("Неопределено")
		Или ПроверяемыйТип = Тип("Булево")
		Или ПроверяемыйТип = Тип("Строка")
		Или ПроверяемыйТип = Тип("Число")
		Или ПроверяемыйТип = Тип("Дата")
		Или ПроверяемыйТип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция МенеджерОбъекта(Объект) Экспорт

	Ссылка = Неопределено;
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
		Ссылка = Объект;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
КонецФункции // МенеджерОбъекта()

Функция НайтиРегламентноеЗадание(Знач УникальныйНомерЗадания) Экспорт
	
	Если ПустаяСтрока(УникальныйНомерЗадания) Тогда
		Возврат Неопределено;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(УникальныйНомерЗадания));
	
КонецФункции

#Область РасширеннаяКарточкаОбъектов

Функция ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, Форма = Неопределено) Экспорт
	
	МенеджерОбъекта = МенеджерОбъекта(Объект);
	Если МенеджерОбъекта = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;	
	КонецЕсли;
	
	ТабличныйКарточкаОбъекта = МенеджерОбъекта.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков); 
	Если Форма <> Неопределено Тогда
		КарточкаОбъекта  = Новый ТабличныйДокумент;
		КарточкаОбъекта.Присоединить(ТабличныйКарточкаОбъекта);
		
		Макет 			  = ПолучитьОбщийМакет("ПФ_MXL_вогПоказателиОбъектов");
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
		
		#Область ТабличныйДокументПокзатели
		
		ТабличныйДокументПокзатели = Новый ТабличныйДокумент;
		
		#Область Покзатели
		
		Если МенеджерОбъекта = Справочники.вогТорговыеТочки Тогда
			ОбластьДопСтрока = Макет.ПолучитьОбласть("ДопСтрокаПоказатели");
			Для Сч = 1 По 2 Цикл
				ТабличныйДокументПокзатели.Вывести(ОбластьДопСтрока);				
			
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ПоказаетлиЗаголовок");
		ТабличныйДокументПокзатели.Вывести(ОбластьЗаголовок);
		
		ТаблицаПоказателей = вогОбщегоНазначенияПовтИсп.ТаблицаОписанийПоказателейОбъекта(МетаданныеОбъекта.Имя);
		Для каждого ОписаниеПоказателя Из ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаПоказателей) Цикл
			ОбластьПоказателиСтрока = Макет.ПолучитьОбласть("ПоказателиСтрока");
			ОбластьПоказателиСтрока.Параметры.ПоказателиСтрока = ОписаниеПоказателя.Представление;
			ОбластьПоказателиСтрока.Параметры.Расшифровка  	   = ОписаниеПоказателя.Имя;
			
			Если Форма.ПоказателиПолучены Тогда
				ОбластьПоказателиСтрока.Параметры.Показатель			   = Форма.КарточкаОбъекта.Области["ОбластьПоказателя_" + ОписаниеПоказателя.Имя].Текст;
				ОбластьПоказателиСтрока.Области.ОбластьПоказателя.Картинка = Неопределено;
			Иначе	
				ОбластьПоказателиСтрока.Параметры.Показатель  = НСтр("ru = 'Расчет...'");
			КонецЕсли;
			
			ОбластьПоказателиСтрока.Параметры.Расшифровка = ОписаниеПоказателя.Имя;
			ОбластьПоказателиСтрока.Области.ОбластьПоказателя.Имя = "ОбластьПоказателя_" + ОписаниеПоказателя.Имя;
			
			ТабличныйДокументПокзатели.Вывести(ОбластьПоказателиСтрока);		   
			
		КонецЦикла;
		
		КарточкаОбъекта.Присоединить(ТабличныйДокументПокзатели);
		
		#КонецОбласти
		
		//Рассчет
		Форма.АдресХранилищаПоказателей = ПоместитьвоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(Объект.Ссылка);
		ПараметрыВыполнения.Добавить(ТаблицаПоказателей);
		ПараметрыВыполнения.Добавить(Форма.АдресХранилищаПоказателей);
		
		НаименованиеЗадания = НСтр("ru = 'Получение данных показателей.'");
			
		Задание = ФоновыеЗадания.Выполнить("вогОбщегоНазначения.ПолучитьДанныеПоказателей", 
			ПараметрыВыполнения,, НаименованиеЗадания);
		Форма.ИдентификаторЗаданияПоказателей = Задание.УникальныйИдентификатор;
			
		#КонецОбласти
		
	Иначе
		КарточкаОбъекта = ТабличныйКарточкаОбъекта;
		
	КонецЕсли;
	
	Возврат КарточкаОбъекта;	
	
КонецФункции // ТабличныйДокументКарточкиОбъекта()

Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	МенеджерОбъекта = МенеджерОбъекта(Объект);
	Если МенеджерОбъекта = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;	
	КонецЕсли;
	
	Возврат МенеджерОбъекта.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);	
	
КонецФункции

Функция ПолучитьДанныеРазделаКарточки(Владелец, Положение, ВыборкаКлассификатор = Неопределено, ДополнительныеРеквизиты = Неопределено) Экспорт

	МассивДанныхРазделов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец" , Владелец);
	Запрос.УстановитьПараметр("Положение", Положение);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставРаздела.Ссылка КАК Раздел,
		|	СоставРаздела.Ссылка.Представление КАК РазделПредставление,
		|	СоставРаздела.НомерСтроки КАК Порядок,
		|	СоставРаздела.ДанныеРаздела КАК ДанныеРаздела,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СоставРаздела.ДанныеРаздела) = ТИП(ПланВидовХарактеристик.CRM_Классификаторы)
		|			ТОГДА ""Классификаторы""
		|		ИНАЧЕ ""ДополнительныеРеквизиты""
		|	КОНЕЦ КАК ТипРаздела,
		|	СоставРаздела.Ссылка.ЦветРаздела
		|ИЗ
		|	Справочник.вогРазделыКарточекОбъектов.СоставРаздела КАК СоставРаздела
		|ГДЕ
		|	(ВЫРАЗИТЬ(СоставРаздела.Ссылка.ВладелецКарточки КАК СТРОКА(1024))) = &Владелец
		|	И СоставРаздела.Ссылка.ПоложениеРаздела = &Положение
		|	И НЕ СоставРаздела.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		//{[+](фрагмент добавлен), Виноградов Дмитрий 14.06.2018 11:22:01 ID
		|	СоставРаздела.Ссылка.ПорядокГлавы,
		//}Администратор 14.06.2018 11:22:01
		|	Раздел,
		|	Порядок
		|ИТОГИ ПО
		|	Раздел
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаРаздел = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРаздел.Следующий() Цикл
		ОписаниеРаздела = Новый Структура;
		ОписаниеРаздела.Вставить("Раздел"			  , ВыборкаРаздел.Раздел);
		ОписаниеРаздела.Вставить("РазделПредставление", ВыборкаРаздел.РазделПредставление);
		ОписаниеРаздела.Вставить("ЦветФона"			  , Справочники.вогГруппыЦвета.ПолучитьЗначениеЦвета(ВыборкаРаздел.ЦветРаздела));
		ОписаниеРаздела.Вставить("ДанныеРаздела"	  , Новый Массив);
		
		ВыборкаРазделЗаписи = ВыборкаРаздел.Выбрать();
		Пока ВыборкаРазделЗаписи.Следующий() Цикл
			ОписаниеДанныхРаздела = Новый Структура;	
			ОписаниеДанныхРаздела.Вставить("ДанныеРаздела", ВыборкаРазделЗаписи.ДанныеРаздела);
			ОписаниеДанныхРаздела.Вставить("ТипРаздела"   , ВыборкаРазделЗаписи.ТипРаздела);
			
			СоставРаздела = Новый Структура;
			Если ВыборкаРазделЗаписи.ТипРаздела = "ДополнительныеРеквизиты"
			  И ДополнительныеРеквизиты <> Неопределено Тогда
				Строки = ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ВыборкаРазделЗаписи.ДанныеРаздела));
				Если Строки.Количество() > 0 Тогда
					СоставРаздела.Вставить("ОписаниеДанных", Строки[0]);
					
				КонецЕсли;
				
			ИначеЕсли ВыборкаРазделЗаписи.ТипРаздела = "Классификаторы"	
			  И ВыборкаКлассификатор <> Неопределено Тогда
			  
				ВыборкаКлассификатор.Сбросить();
				Пока ВыборкаКлассификатор.НайтиСледующий(Новый Структура("Классификатор", ВыборкаРазделЗаписи.ДанныеРаздела)) Цикл
					Если ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком
					  ИЛИ ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком Тогда
					  
						Значения = Новый Массив;
						
						ВыборкаЗаписи = ВыборкаКлассификатор.Выбрать();
						Пока ВыборкаЗаписи.Следующий() Цикл				
							Значения.Добавить(Новый Структура("Включен, ЗначениеПредставление", ВыборкаЗаписи.Включен, ВыборкаЗаписи.ЗначениеПредставление));
							
						КонецЦикла;	
					  
					ИначеЕсли ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
						
						Значения = Новый Массив;
						
						ВыборкаЗаписи = ВыборкаКлассификатор.Выбрать();
						Пока ВыборкаЗаписи.Следующий() Цикл				
							Значения.Добавить(Новый Структура("ЗначениеРеквизита, ЗначениеПредставление", ВыборкаЗаписи.ЗначениеРеквизита, ВыборкаЗаписи.ЗначениеПредставление));
							
						КонецЦикла;	
						
					Иначе
						
						Значения = "";
						
						ВыборкаЗаписи = ВыборкаКлассификатор.Выбрать();
						Пока ВыборкаЗаписи.Следующий() Цикл				
							Если ВыборкаЗаписи.Включен Тогда
								Значения = Значения + ?(ЗначениеЗаполнено(Значения), ", ", "") + ВыборкаЗаписи.ЗначениеПредставление;
							
							КонецЕсли;
							
						КонецЦикла;	
												
					КонецЕсли;
					
					СоставРаздела.Вставить("ОписаниеДанных", 
						Новый Структура("Классификатор, КлассификаторПредставление, ВидОтображения, Значения", 
							ВыборкаКлассификатор.Классификатор, ВыборкаКлассификатор.КлассификаторПредставление, ВыборкаКлассификатор.ВидОтображения, Значения)
					);
					
				КонецЦикла;	
			  
			КонецЕсли;
			
			ОписаниеДанныхРаздела.Вставить("СоставРаздела", СоставРаздела);
			ОписаниеРаздела.ДанныеРаздела.Добавить(ОписаниеДанныхРаздела);
			
		КонецЦикла;
		
		МассивДанныхРазделов.Добавить(ОписаниеРаздела);
		
	КонецЦикла;

	Возврат МассивДанныхРазделов;
	
КонецФункции // ПолучитьДанныеРазделаКарточки()

#КонецОбласти

Функция ГруппаВидовКИОбъекта(МетаданныеОбъекта) Экспорт

	Перем ГруппаВидовКИ;
	
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	Если ИмяОбъектаМетаданных = "Проекты" Тогда
		ИмяГруппыВидовКИ = "CRM_СправочникПроектыКейс";
		Перейти ~CRM_ИмяОбъектаПолучено;
	КонецЕсли;

	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	
	~CRM_ИмяОбъектаПолучено:
	Если (ИмяОбъектаМетаданных = "Партнеры") Тогда
		ГруппаВидовКИ = Новый Массив();
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"Компания"]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ+"ЧастноеЛицо"]);
		
	ИначеЕсли (ИмяОбъектаМетаданных = "Проекты") Тогда
		ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	КонецЕсли;
	
	Возврат ГруппаВидовКИ;
	
КонецФункции // ГруппаВидовКИОбъекта()

#Область СтатусыСогласования

// Процедура установки статуса согласования объекта.
//
// Параметры
//  Объект	- Объект которому устанавливается статус.
//  Статус	- устанавливаемый статус.
//  Дата	- Период.
//
Процедура УстановитьСтатусСогласованияОбъекта(Объект, Статус, Регистратор = Неопределено, Знач Дата = Неопределено, Отказ = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
		
	МенеджерЗаписей = РегистрыСведений.вогСтатусыСогласованияОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписей.Объект	= Объект;
	МенеджерЗаписей.Статус	= Статус;
	МенеджерЗаписей.Период 	= Дата;
	
	Если Регистратор <> Неопределено Тогда
		МенеджерЗаписей.РегистраторСтатуса = Регистратор;
	КонецЕсли;
		
	Попытка
		МенеджерЗаписей.Записать();
	Исключение       
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка установки статуса объекта.'") + Символы.ПС + ТекстОшибки,,,, Отказ);
		
	КонецПопытки;
	
КонецПроцедуры // УстановитьСтатусСогласованияОбъекта()

Функция ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект, Дата = Неопределено) Экспорт
	
	ОписаниеСтатуса = Новый Структура;
	ОписаниеСтатуса.Вставить("Статус"	  		 , Перечисления.вогСтатусыСогласования.ПустаяСсылка());
	ОписаниеСтатуса.Вставить("Автор"      		 , Пользователи.ТекущийПользователь());
	ОписаниеСтатуса.Вставить("РегистраторСтатуса", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыСогласованияОбъектовСрезПоследних.Статус,
		|	СтатусыСогласованияОбъектовСрезПоследних.Автор,
		|	СтатусыСогласованияОбъектовСрезПоследних.РегистраторСтатуса
		|ИЗ
		|	РегистрСведений.вогСтатусыСогласованияОбъектов.СрезПоследних(&ДатаСреза, Объект = &Объект) КАК СтатусыСогласованияОбъектовСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Объект"   , Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеСтатуса, Выборка);			
		
	КонецЕсли;
	
	Возврат ОписаниеСтатуса;
	
КонецФункции // ПолучитьСтатусСогласованияОбъекта()

#КонецОбласти

#Область ФормированиеБизнесПроцессов

Функция СформироватьЗапуститьБизнесПроцесс(ЗначенияЗаполнения) Экспорт
	
	Перем Результат;
	
	БизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	БизнесПроцесс.Заполнить(ЗначенияЗаполнения);
	
	БизнесПроцесс.Дата		 = ТекущаяДата();
	БизнесПроцесс.ДатаСтарта = ТекущаяДата();
	
	БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), 
		ЗначенияЗаполнения.КартаМаршрута, ЗначенияЗаполнения.Основание);

	Попытка
		БизнесПроцесс.Записать();
		БизнесПроцесс.Старт();
		
		Результат = БизнесПроцесс.Ссылка;

	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При попытке старта процесса ""%1"" возникла ошибка:
				|%2
				|Обратитесь к администратору.'"),
			ЗначенияЗаполнения.КартаМаршрута, 
			Инфо.Описание);
		
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
		
	КонецПопытки;

	Возврат Результат;
	
КонецФункции // СформироватьЗапуститьБизнесПроцесс()
	
#КонецОбласти

#Область РаботаСПериодамиИДатами

Функция ПолучитьТаблицуПериодов(НачалоПериода, КонецПериода, Периодичность) Экспорт
	
	Перем ТаблицаПериодов;
		
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	НовыйПериод = ТаблицаПериодов.Добавить();
	НовыйПериод.Период = НачалоПериода;
	
	РазностьДат = вогОбщегоНазначенияКлиентСервер.РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 1;
	Пока Счетчик <= РазностьДат Цикл 
		
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.Период = вогОбщегоНазначенияКлиентСервер.ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

#КонецОбласти

#Область ДелегированиеПрав

// Получает дерево метаданных конфигурации с заданным отбором по объектам метаданных.
//
// Параметры:
//   Отбор - Структура - содержит значения элементов отбора.
//						Если параметр задан, то будет получено дерево метаданных в соответствии с заданным отбором:
//						Ключ - Строка - имя свойства элемента метаданных;
//						Значение - Массив - множество значений для отбора.
//
// Пример инициализации переменной "Отбор":
//
// Массив = Новый Массив;
// Массив.Добавить("Константа.ИспользоватьСинхронизациюДанных");
// Массив.Добавить("Справочник.Валюты");
// Массив.Добавить("Справочник.Организации");
// Отбор = Новый Структура;
// Отбор.Вставить("ПолноеИмя", Массив);
// 
//  Возвращаемое значение:
//   ДеревоЗначений - дерево описания метаданных конфигурации.
//
Функция ДеревоМетаданныхКонфигурации(Отбор = Неопределено) Экспорт
	
	ИспользоватьОтбор = (Отбор <> Неопределено);
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	
	НоваяСтрокаКоллекцииОбъектовМетаданных("Константы",               НСтр("ru = 'Константы'"),                 БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Справочники",             НСтр("ru = 'Справочники'"),               БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Документы",               НСтр("ru = 'Документы'"),                 БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"), БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыСчетов",             НСтр("ru = 'Планы счетов'"),              БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовРасчета",       НСтр("ru = 'Планы видов расчета'"),       БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовРасчетаОбъект,       КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыСведений",        НСтр("ru = 'Регистры сведений'"),         БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыНакопления",      НСтр("ru = 'Регистры накопления'"),       БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыБухгалтерии",     НСтр("ru = 'Регистры бухгалтерии'"),      БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("РегистрыРасчета",         НСтр("ru = 'Регистры расчета'"),          БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("БизнесПроцессы",          НСтр("ru = 'Бизнес-процессы'"),           БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Задачи",                  НСтр("ru = 'Задачи'"),                    БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 КоллекцииОбъектовМетаданных);
	
	// Возвращаемое значение функции.
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить("Имя");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя");
	ДеревоМетаданных.Колонки.Добавить("Синоним");
	ДеревоМетаданных.Колонки.Добавить("Картинка");
	
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		СтрокаДерева = ДеревоМетаданных.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКоллекции);
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			Если ИспользоватьОтбор Тогда
				
				ОбъектПрошелФильтр = Истина;
				Для Каждого ЭлементОтбора Из Отбор Цикл
					
					Значение = ?(ВРег(ЭлементОтбора.Ключ) = ВРег("ПолноеИмя"), ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных[ЭлементОтбора.Ключ]);
					Если ЭлементОтбора.Значение.Найти(Значение) = Неопределено Тогда
						ОбъектПрошелФильтр = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ОбъектПрошелФильтр Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДереваОМ = СтрокаДерева.Строки.Добавить();
			СтрокаДереваОМ.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОМ.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОМ.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОМ.Картинка  = СтрокаКоллекции.КартинкаОбъекта;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаляем строки без подчиненных элементов.
	Если ИспользоватьОтбор Тогда
		
		// Используем обратный порядок обхода дерева значений.
		КоличествоЭлементовКоллекции = ДеревоМетаданных.Строки.Количество();
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
			
			ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
			СтрокаДерева = ДеревоМетаданных.Строки[ТекущийИндекс];
			Если СтрокаДерева.Строки.Количество() = 0 Тогда
				ДеревоМетаданных.Строки.Удалить(ТекущийИндекс);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДеревоМетаданных;
	
КонецФункции

#КонецОбласти

#Область ОтветственныеЛица

// Возвращает таблицу ответственных лиц, сформированную в соответствии с произвольным отбором.
//
// Параметры:
//  Отбор - Структура - структура, содержащая параметры отбора данных справочника вогОтветственныеЛицаОрганизаций.
//		Ключ - имя реквизита справочника. Возможны дополнительные ключи:
//			- Дата 		  - для отбора по периоду ДатаНачала - ДатаОкончания
//			- Организация - синоним ключа Владелец
//		Значение - значение для отбора по ключу
//	ДопустимыПомеченныеНаУдаление - Булево - выводить в результирующую таблицу помеченные на удаление элементы.
//	
// Возвращаемое значение:
//  Таблица значений - таблица, содержащая данные справочника вогОтветственныеЛицаОрганизаций.
//		Имена колонок таблицы совпадают с именами реквизитов справочника.
//
Функция ПолучитьТаблицуОтветственныхЛицПоОтбору(Знач Отбор, ДопустимыПомеченныеНаУдаление = Ложь, СтрокаПоиска = "") Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстВыбираемыеПоля = "";
	ТекстОтбора = "";
	НомерОтбора = 0;
	
	ПоляОтбора = вогОбщегоНазначенияПовтИсп.РеквизитыСправочника("вогОтветственныеЛицаОрганизаций");
	
	Если Отбор.Свойство("Дата") Тогда
		
		// Отбор по периоду действия записи об ответственном лице
		ТекстОтбора =
			ТекстОтбора
			+ ?(ТекстОтбора = "", "", " И ") + "вогОтветственныеЛицаОрганизаций.ДатаНачала <= &ОтборПоДате
			| И (вогОтветственныеЛицаОрганизаций.ДатаОкончания >= &ОтборПоДате 
			|	 ИЛИ вогОтветственныеЛицаОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1,1,1,0,0,0))
			|";
		Запрос.УстановитьПараметр("ОтборПоДате", НачалоДня(Отбор.Дата));
		
		Отбор.Удалить("Дата");
		
	КонецЕсли;
	
	Если Отбор.Свойство("Организация") Тогда
		Отбор.Вставить("Владелец", Отбор.Организация);
		Отбор.Удалить("Организация");
	КонецЕсли;
	
	Если НЕ ДопустимыПомеченныеНаУдаление Тогда
		Отбор.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	// Формируем секцию запроса "ГДЕ", устанавливаем параметры запроса
	Для Каждого ТекущийОтбор Из Отбор Цикл
		
		Если НЕ ПоляОтбора.Свойство(ТекущийОтбор.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерОтбора = НомерОтбора + 1;
		
		ТекстОтбора =
			ТекстОтбора
			+ ?(ТекстОтбора = "", "", " И ") + "вогОтветственныеЛицаОрганизаций." + ТекущийОтбор.Ключ 
				+ ?(ТипЗнч(ТекущийОтбор.Значение) = Тип("Массив") ИЛИ ТипЗнч(ТекущийОтбор.Значение) = Тип("ФиксированныйМассив"), " В ", " = ")
				+ "(&ЗначениеОтбора" + СокрЛП(НомерОтбора) + ")
			|";
		
		Запрос.УстановитьПараметр("ЗначениеОтбора" + СокрЛП(НомерОтбора), ТекущийОтбор.Значение);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		ТекстОтбора =
			ТекстОтбора
			+ ?(ТекстОтбора = "", "", " И ") + "вогОтветственныеЛицаОрганизаций.Наименование ПОДОБНО &ОтборПоПредставлению
			|";
		Запрос.УстановитьПараметр("ОтборПоПредставлению", СтрокаПоиска + "%");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОтбора) Тогда
		ТекстОтбора =
			"ГДЕ
			| " + ТекстОтбора;
	КонецЕсли;
	
	Для Каждого Поле Из ПоляОтбора Цикл
		ТекстВыбираемыеПоля = ТекстВыбираемыеПоля
			+ ?(ТекстВыбираемыеПоля = "", "", ",") + "
			|вогОтветственныеЛицаОрганизаций." + Поле.Ключ + " КАК " + Поле.Ключ;
	КонецЦикла;
	
	// Формируем запрос, получаем данные
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ТекстВыбираемыеПоля%
	|ИЗ
	|	Справочник.вогОтветственныеЛицаОрганизаций КАК вогОтветственныеЛицаОрганизаций
	|%ТекстОтбора%
	|УПОРЯДОЧИТЬ ПО
	|	Владелец,
	|	ОтветственноеЛицо,
	|	ПравоПодписиПоДоверенности,
	|	ДатаНачала,
	|	ДатаОкончания,
	|	ФизическоеЛицо";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстВыбираемыеПоля%", ТекстВыбираемыеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстОтбора%", 		  ТекстОтбора);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТаблицыДанных

Процедура ПрочитатьТаблицуДанных(ПроектСсылка, Знач ЭтапСсылка = Неопределено, ТаблицаДанных, ОписаниеТаблицы) Экспорт

	Если ЭтапСсылка = Неопределено Тогда
		ЭтапСсылка = Документы.CRM_ЭтапКалендарногоПлана.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаДанных.Очистить();
	
	Набор = РегистрыСведений[ОписаниеТаблицы.ИмяРегистра].СоздатьНаборЗаписей();
	Набор.Отбор.Проект.Установить(ПроектСсылка);
	Набор.Отбор.Этап.Установить(ЭтапСсылка);
	Набор.Прочитать();
	
	Для каждого Запись Из Набор Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), Запись);	
	КонецЦикла;
		
КонецПроцедуры // ПрочитатьТаблицуДанных()

Процедура ЗаписатьТаблицуДанных(ПроектСсылка, Знач ЭтапСсылка = Неопределено, ТаблицаДанных, ОписаниеТаблицы) Экспорт
	
	Если ЭтапСсылка = Неопределено Тогда
		ЭтапСсылка = Документы.CRM_ЭтапКалендарногоПлана.ПустаяСсылка();
	КонецЕсли;
	
	Набор = РегистрыСведений[ОписаниеТаблицы.ИмяРегистра].СоздатьНаборЗаписей();
	Набор.Отбор.Проект.Установить(ПроектСсылка);
	Набор.Отбор.Этап.Установить(ЭтапСсылка);
	
	Для каждого СтрокаТаблица Из ТаблицаДанных Цикл
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблица);
		
		Запись.Проект = ПроектСсылка;
		Запись.Этап = ЭтапСсылка;
		
	КонецЦикла;
	
	Если Набор.Количество() > 0 Тогда
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьТаблицуДанных()
	
#КонецОбласти

#Область ПоискДублейОбъектов

Функция НайтиДубли(Объект, СтруктураПоиска, СтруктураКонтактов, ТочноеСоответствие,ДополнительныеПараметры = Неопределено,ПропускатьПустые = Истина) Экспорт

	ИмяТаблицы 	   = ОбщегоНазначения.ИмяТаблицыПоСсылке(Объект.Ссылка);
	МассивОбъектов = Новый Массив;
	
	Сч				= 0;
	ПервоеЗначение	= Истина;
	Запрос = Новый Запрос;   
	Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
		Если КлючИЗначение.Ключ = "СоставноеУсловие" Тогда  		
			Условия = "";
			ЕстьКонтактыВУсловии = Ложь;

			ИменаРеквизитов    = "";
			ЗначенияРеквизитов = "";
			Для каждого СтруктураУсловия Из КлючИЗначение.Значение Цикл
				Для каждого КлючИЗначениеУсловия Из СтруктураУсловия Цикл
					ИмяРеквизита = КлючИЗначениеУсловия.Ключ;
					Если ТочноеСоответствие Тогда
						СтепеньСхожести	= "=";
					Иначе
						СтепеньСхожести	= КлючИЗначениеУсловия.Значение;
					КонецЕсли;
					
				КонецЦикла;
				
				ЗначениеРеквизита = Неопределено;
				Если Найти(ИмяРеквизита, "Контакт") = 0 Тогда
					Если ТипЗнч(Объект) = Тип("Структура") Тогда
						Объект.Свойство(ИмяРеквизита, ЗначениеРеквизита);
					Иначе
						ЗначениеРеквизита = Объект[ИмяРеквизита];
					КонецЕсли;
										
				Иначе
					ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Контакт_", "");
					СтруктураКонтактов.Свойство(ИмяРеквизита, ЗначениеРеквизита);
					
					ЕстьКонтактыВУсловии = Истина;
					
				КонецЕсли;
//START Кайдашов 05/08/19				
				Если Не ЗначениеЗаполнено(ЗначениеРеквизита) и ПропускатьПустые Тогда
					Продолжить;
				КонецЕсли;
//END Кайдашов				
				//Реквизиты
				Если ЗначениеЗаполнено(ИменаРеквизитов) Тогда
					ИменаРеквизитов = ИменаРеквизитов + " | ";				
				КонецЕсли;
				
				ИменаРеквизитов = ИменаРеквизитов + ИмяРеквизита;
				
				//Значения реквизитов
				Если ЗначениеЗаполнено(ЗначенияРеквизитов) Тогда
					ЗначенияРеквизитов = ЗначенияРеквизитов + " | ";				
				КонецЕсли;
				
				ЗначенияРеквизитов = ЗначенияРеквизитов + ЗначениеРеквизита;
				
				//Условия
				Если ЗначениеЗаполнено(Условия) Тогда
					Условия = Условия + " И ";	
				КонецЕсли;
				
				Условия = Условия + "
					|Данные." + ИмяРеквизита + " " + СтепеньСхожести + " &" + ИмяРеквизита;
				// { VOG RMV 2019-03-21 bugs 255
				//Запрос.УстановитьПараметр(ИмяРеквизита, ?(СтепеньСхожести = "ПОДОБНО", "%" + ЗначениеРеквизита + "%", ЗначениеРеквизита));
				// +++ VOG Кулаков П.Л. 17.03.2020 CRM-441
				Если ИмяРеквизита = "Адрес" Тогда
					ПерваяЗапятая = СтрНайти(ЗначениеРеквизита,",");
					Если ПерваяЗапятая <> 0 Тогда
						ИндексАдреса = Лев(ЗначениеРеквизита,ПерваяЗапятая-1);
						Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексАдреса) Тогда
							ЗначениеРеквизита = СокрЛП(Сред(ЗначениеРеквизита,ПерваяЗапятая + 1));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				// --- VOG Кулаков П.Л.
				Запрос.УстановитьПараметр(ИмяРеквизита, ?((СтепеньСхожести = "ПОДОБНО") И (ИмяРеквизита <> "Адрес"), "%" + ЗначениеРеквизита + "%", ЗначениеРеквизита));
				// } VOG RMV 2019-03-21 bugs 255
				
			КонецЦикла;
			
			СуффиксТаблицыДанных = "";
			Если ЕстьКонтактыВУсловии Тогда
				СуффиксТаблицыДанных = ".КонтактнаяИнформация";
				
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(ИменаРеквизитов) ИЛИ ЗначениеЗаполнено(Условия) ИЛИ ЗначениеЗаполнено(ЗначенияРеквизитов) Тогда
				
				ПервоеЗначение = Не ЗначениеЗаполнено(Запрос.Текст);
				Если Не ПервоеЗначение Тогда
					Запрос.Текст = Запрос.Текст + "
					| ОБЪЕДИНИТЬ ВСЕ
					|";
					
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ " + ?(ПервоеЗначение, " РАЗРЕШЕННЫЕ", "") +" 
				|Данные.Ссылка КАК Ссылка,
				|Данные.Ссылка.Представление КАК Представление,
				|""" + ЗначенияРеквизитов + """  КАК Реквизит,
				|""" + ИменаРеквизитов + """  КАК ИмяРеквизита
				|ИЗ " + ИмяТаблицы + СуффиксТаблицыДанных + " КАК Данные
				|ГДЕ " + Сред(Условия, 2);
			КонецЕсли;
			
		Иначе
			ИмяРеквизита = КлючИЗначение.Ключ;
			Если ТочноеСоответствие Тогда
				СтепеньСхожести	= "=";
			Иначе
				СтепеньСхожести	= КлючИЗначение.Значение;
			КонецЕсли;
			
			ЗначениеРеквизита	= Неопределено;
			Реквизиты			= "";
			Сч					= Сч + 1;
			
			Если Найти(ИмяРеквизита,"Контакт") = 0 Тогда
				Если ТипЗнч(Объект) = Тип("Структура") Тогда
					Объект.Свойство(ИмяРеквизита, ЗначениеРеквизита);
				Иначе
					ЗначениеРеквизита = Объект[ИмяРеквизита];
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ЗначениеРеквизита) и ПропускатьПустые Тогда
					Продолжить;
				КонецЕсли;
				
				ПервоеЗначение = Не ЗначениеЗаполнено(Запрос.Текст);
				Если Не ПервоеЗначение Тогда
					Реквизиты = "
					| ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				Реквизиты =  Реквизиты + "
					|ВЫБРАТЬ " + ?(ПервоеЗначение, " РАЗРЕШЕННЫЕ", "") +" 
					|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
					Реквизиты = Реквизиты + "
					|,Данные.Ссылка.Представление" + ?(ПервоеЗначение, " КАК Представление", "");
					Реквизиты = Реквизиты + "
					|,Данные." + ИмяРеквизита + ?(ПервоеЗначение, " КАК Реквизит", "");
					Реквизиты = Реквизиты + "
					|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
					Условия  = "
					|Данные." + ИмяРеквизита + " " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч);
					// { VOG RMV 2019-03-21 bugs 255
					//Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" + ЗначениеРеквизита + "%", ЗначениеРеквизита));
					// +++ VOG Кулаков П.Л. 17.03.2020 CRM-441
					Если ИмяРеквизита = "Адрес" Тогда
						ПерваяЗапятая = СтрНайти(ЗначениеРеквизита,",");
						Если ПерваяЗапятая <> 0 Тогда
							ИндексАдреса = Лев(ЗначениеРеквизита,ПерваяЗапятая-1);
							Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексАдреса) Тогда
								ЗначениеРеквизита = СокрЛП(Сред(ЗначениеРеквизита,ПерваяЗапятая + 1));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					// --- VOG Кулаков П.Л.
					Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?((СтепеньСхожести = "ПОДОБНО") И (ИмяРеквизита <> "Адрес"), "%" + ЗначениеРеквизита + "%", ЗначениеРеквизита));
					// } VOG RMV 2019-03-21 bugs 255
					Запрос.Текст = Запрос.Текст + Реквизиты + "
					|ИЗ " + ИмяТаблицы + " КАК Данные
					|ГДЕ " + Сред(Условия, 2);
					
				ПервоеЗначение = Ложь;
				
			Иначе
				Массив = Новый Массив;
				Для Каждого КлючИЗначениеКонтакта Из СтруктураКонтактов Цикл
					ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Контакт_", "");
					Если КлючИЗначениеКонтакта.Ключ = ИмяРеквизита 
					  И ЗначениеЗаполнено(КлючИЗначениеКонтакта.Значение) Тогда
						Массив.Добавить(КлючИЗначениеКонтакта.Значение);	
					КонецЕсли;
					
				КонецЦикла;
				
				Если Массив.Количество() > 0 Тогда
					ПервоеЗначение = Не ЗначениеЗаполнено(Запрос.Текст);
					Для Каждого Стр Из Массив Цикл
						Если Не ПервоеЗначение Тогда
							Реквизиты = "
							| ОБЪЕДИНИТЬ ВСЕ
							|";
							
						КонецЕсли;
						
						Реквизиты =  Реквизиты + "
							|ВЫБРАТЬ " + ?(ПервоеЗначение, " РАЗРЕШЕННЫЕ", "") +"
							|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
							Реквизиты = Реквизиты + "
							|,Данные.Ссылка.Представление" + ?(ПервоеЗначение, " КАК Представление", "");
							// ++ VOG Солодов В.В. 05.02.2021 DEV-125
							Если ВРег(ИмяРеквизита) = "КООРДИНАТЫ" Тогда
								
								Реквизиты = Реквизиты + "
								|,&КоординатыСтрокой" + ?(ПервоеЗначение, " КАК Реквизит", "");
								
								Условия = "
								|ВЫРАЗИТЬ(Данные.Широта КАК ЧИСЛО(15,4))" + СтепеньСхожести + "ВЫРАЗИТЬ(&Широта КАК ЧИСЛО(15,4))
								|	И ВЫРАЗИТЬ(Данные.Долгота КАК ЧИСЛО(15,4))" + СтепеньСхожести + "ВЫРАЗИТЬ(&Долгота КАК ЧИСЛО(15,4))";
								
								Запрос.УстановитьПараметр("Широта", Стр.Широта);
								Запрос.УстановитьПараметр("Долгота", Стр.Долгота);
								
								Запрос.УстановитьПараметр(
									"КоординатыСтрокой",
									СтрШаблон(НСтр("ru = '%1:%2'"), Формат(Стр.Широта, "ЧДЦ=4"), Формат(Стр.Долгота, "ЧДЦ=4")));
								
							Иначе
								
								Реквизиты = Реквизиты + "
								|,Данные.Представление" + ?(ПервоеЗначение, " КАК Реквизит", "");
								
								Условия = "
								|Данные.Представление " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч) + "
								|И Данные.Тип = &Тип" + Строка(Сч);
								
							КонецЕсли;
							// До изменения
							//Реквизиты = Реквизиты + "
							//|,Данные.Представление" + ?(ПервоеЗначение, " КАК Реквизит", "");
							//
							//Условия = "
							//|Данные.Представление " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч) + "
							//|И Данные.Тип = &Тип" + Строка(Сч);
							// -- VOG Солодов В.В. 05.02.2021 DEV-125
							Реквизиты = Реквизиты + "
							|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
							
							// { VOG RMV 2019-03-21 bugs 255
							//Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" + Стр + "%", Стр));
							// +++ VOG Кулаков П.Л. 17.03.2020 CRM-441
							Если ИмяРеквизита = "Адрес" Тогда
								ПерваяЗапятая = СтрНайти(Стр,",");
								Если ПерваяЗапятая <> 0 Тогда
									ИндексАдреса = Лев(Стр,ПерваяЗапятая-1);
									Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексАдреса) Тогда
										Стр = СокрЛП(Сред(Стр,ПерваяЗапятая + 1));
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							// --- VOG Кулаков П.Л.
							Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?((СтепеньСхожести = "ПОДОБНО") И (ИмяРеквизита <> "Адрес"), "%" + Стр + "%", Стр));
							// } VOG RMV 2019-03-21 bugs 255							
							
							// ++ Тищенко В.В. 20.05.2019
						Если ИмяРеквизита = "Адрес" Тогда
							Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Адрес);
							Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство(ИмяРеквизита) Тогда
								ЗначениеПараметра = Неопределено;
								ДополнительныеПараметры.Свойство(ИмяРеквизита,ЗначениеПараметра);
								//Условия по виду КИ	
								Условия = Условия + " И Данные.Вид = &Вид" + Строка(Сч);
								Запрос.УстановитьПараметр("Вид" + Строка(Сч), ЗначениеПараметра);
							КонецЕсли;
							// -- Тищенко В.В. 
						ИначеЕсли ИмяРеквизита = "Телефон" Тогда 
							Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Телефон);
							
						ИначеЕсли ИмяРеквизита = "АдресЭлектроннойПочты" Тогда 
							Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
						// + Тищенко В.В.
						ИначеЕсли ИмяРеквизита = "ВебСтраница" Тогда 
							Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
						// - Тищенко В.В.
						КонецЕсли;
						
						Запрос.Текст = Запрос.Текст + Реквизиты + "
							|ИЗ " + ИмяТаблицы + ".КонтактнаяИнформация КАК Данные
							|ГДЕ " + Сред(Условия, 2);
						
						Сч			   = Сч + 1;
						ПервоеЗначение = Ложь;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат МассивОбъектов;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			СтруктураВозврата.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		
		КонецЦикла;
		
		МассивОбъектов.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат МассивОбъектов;
	
КонецФункции // НайтиДубли()

Функция УдалитьНайтиДубли(Объект, СтруктураПоиска, СтруктураКонтактов, ТочноеСоответствие) Экспорт
	
	ИмяТаблицы 	   = ОбщегоНазначения.ИмяТаблицыПоСсылке(Объект.Ссылка);
	МассивОбъектов = Новый Массив;
	
	Запрос			= Новый Запрос;
	Сч				= 0;
	ПервоеЗначение	= Истина;
	Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		Если ТочноеСоответствие Тогда
			СтепеньСхожести	= "=";
		Иначе
			СтепеньСхожести	= КлючИЗначение.Значение;
		КонецЕсли;
		
		ЗначениеРеквизита	= Неопределено;
		Реквизиты			= "";
		Сч					= Сч + 1;
		
		Если Найти(ИмяРеквизита,"Контакт") = 0 Тогда
			Если ТипЗнч(Объект) = Тип("Структура") Тогда
				Объект.Свойство(ИмяРеквизита, ЗначениеРеквизита);
			Иначе
				ЗначениеРеквизита = Объект[ИмяРеквизита];
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ПервоеЗначение Тогда
				Реквизиты = "
				| ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			Реквизиты =  Реквизиты + "
				|ВЫБРАТЬ  
				|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
				Реквизиты = Реквизиты + "
				|,Данные.Ссылка.Представление" + ?(ПервоеЗначение, " КАК Представление", "");
				Реквизиты = Реквизиты + "
				|,Данные." + ИмяРеквизита + ?(ПервоеЗначение, " КАК Реквизит", "");
				Реквизиты = Реквизиты + "
				|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
				Условия  = "
				|Данные." + ИмяРеквизита + " " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч);
				Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" + ЗначениеРеквизита + "%", ЗначениеРеквизита));
				Запрос.Текст = Запрос.Текст + Реквизиты + "
				|ИЗ " + ИмяТаблицы + "КАК Данные
				|ГДЕ " + Сред(Условия, 2);
				
			ПервоеЗначение = Ложь;
			
		Иначе
			Массив = Новый Массив;
			Для Каждого КлючИЗначениеКонтакта Из СтруктураКонтактов Цикл
				ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Контакт_", "");
				Если КлючИЗначениеКонтакта.Ключ = ИмяРеквизита 
				  И ЗначениеЗаполнено(КлючИЗначениеКонтакта.Значение) Тогда
					Массив.Добавить(КлючИЗначениеКонтакта.Значение);	
				КонецЕсли;
				
			КонецЦикла;
			
			Если Массив.Количество() > 0 Тогда
				Для Каждого Стр Из Массив Цикл
					Если Не ПервоеЗначение Тогда
						Реквизиты = "
						| ОБЪЕДИНИТЬ ВСЕ
						|";
						
					КонецЕсли;
					
					Реквизиты =  Реквизиты + "
						|ВЫБРАТЬ 
						|Данные.Ссылка" +  ?(ПервоеЗначение, " КАК Ссылка", "");
						Реквизиты = Реквизиты + "
						|,Данные.Ссылка.Представление" + ?(ПервоеЗначение, " КАК Представление", "");
						Реквизиты = Реквизиты + "
						|,Данные.Представление" + ?(ПервоеЗначение, " КАК Реквизит", "");
						Реквизиты = Реквизиты + "
						|,""" + ИмяРеквизита + """" + ?(ПервоеЗначение, " КАК ИмяРеквизита", "");
						Условия = "
						|Данные.Представление " + СтепеньСхожести + " &" + ИмяРеквизита + Строка(Сч) + "
						|И Данные.Тип = &Тип" + Строка(Сч);
						
						Запрос.УстановитьПараметр(ИмяРеквизита + Строка(Сч), ?(СтепеньСхожести = "ПОДОБНО", "%" + Стр + "%", Стр));
						
					Если ИмяРеквизита = "Адрес" Тогда
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Адрес);
						
					ИначеЕсли ИмяРеквизита = "Телефон" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.Телефон);
						
					ИначеЕсли ИмяРеквизита = "АдресЭлектроннойПочты" Тогда 
						Запрос.УстановитьПараметр("Тип" + Строка(Сч), Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
						
					КонецЕсли;
					
					Запрос.Текст = Запрос.Текст + Реквизиты + "
						|ИЗ " + ИмяТаблицы + ".КонтактнаяИнформация КАК Данные
						|ГДЕ " + Сред(Условия, 2);
					
					Сч			   = Сч + 1;
					ПервоеЗначение = Ложь;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат МассивОбъектов;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			СтруктураВозврата.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		
		КонецЦикла;
		
		МассивОбъектов.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат МассивОбъектов;
	
КонецФункции

Процедура ВыполнитьОбработкуТорговыхТочек(ПараметрыОбработки, ТекущаяТорговаяТочка = Неопределено) Экспорт
	
	ПараметрыСозданияПартнера = ПараметрыОбработки.ПараметрыСозданияПартнера;
	Если ПараметрыСозданияПартнера.ЗначенияЗаполнения.Свойство("Адрес") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Адрес"				, ПараметрыСозданияПартнера.ЗначенияЗаполнения.Адрес);
		Запрос.УстановитьПараметр("ТекущаяТорговаяТочка", ТекущаяТорговаяТочка);
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТорговыеТочкиКонтактнаяИнформация.Ссылка
			|ИЗ
			|	Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК ТорговыеТочкиКонтактнаяИнформация
			|ГДЕ
			|	ТорговыеТочкиКонтактнаяИнформация.Ссылка.Рынок = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|	И ТорговыеТочкиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
			|	И ТорговыеТочкиКонтактнаяИнформация.Представление = &Адрес
			|	И ТорговыеТочкиКонтактнаяИнформация.Ссылка <> &ТекущаяТорговаяТочка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Заблокировать();
			
			Объект.Рынок 				 = ПараметрыОбработки.Партнер;
			Объект.МестоположениеНаРынке = ПараметрыСозданияПартнера.ЗначенияЗаполнения.Местоположение;
			
			Попытка
			    Объект.Записать();
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;	
		
		КонецЦикла;

		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Показатели

Процедура ПолучитьДанныеПоказателей(ОбъектСсылка, ТаблицаПоказателей, АдресХранилища) Экспорт
	
	МассивДанных = Новый Массив;
	
	//По данным УС
	вогИнтеграцияСУчетнойСистемой.ПолучитьДанныеПоказателейИзУС(ОбъектСсылка, 
		ТаблицаПоказателей.Скопировать(Новый Структура("СпособПолучения", "ДанныеУС")), 
		МассивДанных);	
	
	//По данным ИБ
	ПолучитьДанныеПоказателейИзИБ(ОбъектСсылка, 
		ТаблицаПоказателей.Скопировать(Новый Структура("СпособПолучения", "ДанныеИБ")), 
		МассивДанных);	
		
	ПоместитьВоВременноеХранилище(МассивДанных, АдресХранилища);
	
КонецПроцедуры

Процедура ПолучитьДанныеПоказателейИзИБ(ОбъектСсылка, ТаблицаПоказателей, Результат)

	Для каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		ОбработкаСтрокиПоказателя(ОбъектСсылка, СтрокаПоказателя, Результат);			
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаСтрокиПоказателя(ОбъектСсылка, СтрокаПоказателя, Результат)

	ОписаниеПоказателя = Новый Структура("Имя, Значение", СтрокаПоказателя.Имя, НСтр("ru = '<не определено>'"));
	Если СтрокаПоказателя.Имя = "СредняяОтгрузка" Тогда
		
	КонецЕсли;
	
	Результат.Добавить(ОписаниеПоказателя);
	
КонецПроцедуры

#КонецОбласти

#Область СериализацияОбъектов

Функция СериализоватьОбъект(Объект) Экспорт
	Возврат СериализаторXDTO.ЗаписатьXDTO(Объект);
КонецФункции

Функция ДесериализоватьОбъект(СериализованныйОбъект) Экспорт 
    Возврат СериализаторXDTO.ПрочитатьXDTO(СериализованныйОбъект); 
КонецФункции

// Преобразует строковое представление УИД в ссылку на объект текущей информационной базы.
//
// Параметры:
//  УИДОбъектаXDTO       - Строка - Уникальный идентификатор объекта XDTO, для которого необходимо
//                                  получить ссылку соответствующего объекта информационной базы
//
//  ТипЗначенияОбъектаИБ - Тип - Тип объекта информационной базы, которому должна соответствовать
//                               получаемая ссылка.
//
// Возвращаемое значение:
//  Ссылка на объект информационной базы.
//
Функция ПолучитьСсылкуОбъекта(УИДОбъектаXDTO,ТипЗначенияОбъектаИБ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НайденОбъект = Ложь;
	
	// Поиск ссылки по УИД
	СсылкаПоУИД = СсылкаПоУИД(ТипЗначенияОбъектаИБ, УИДОбъектаXDTO);
	Если Не СсылкаПоУИД.Пустая() И ОбщегоНазначения.СсылкаСуществует(СсылкаПоУИД) Тогда
		НайденОбъект = Истина;
	КонецЕсли;
	
	Данные= Новый Структура("СсылкаПоУИД,НайденОбъект",СсылкаПоУИД,НайденОбъект);
	
	Возврат Данные;
	
КонецФункции

Функция СсылкаПоУИД(ТипЗначенияОбъектаИБ, УИДОбъектаXDTO)
	
	МенеджерОбъектаМетаданных = ТипЗначенияОбъектаИБ;
	
	Возврат МенеджерОбъектаМетаданных.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДОбъектаXDTO));
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляПолученияПредставленияДанных

// Возвращает строковое представление документа для отображения в сообщениях.
//
// Параметры:
//	Ссылка - ссылка на документ
//	Номер - номер документа
//	Дата - дата документа
//
Функция ПолучитьПредставлениеДокумента(Ссылка, Номер, Дата) Экспорт
	
	Возврат
		Ссылка.Метаданные().Синоним
		+ ?(ЗначениеЗаполнено(Номер), " " + Номер, "")
		+ ?(ЗначениеЗаполнено(Дата), " от " + Формат(Дата,"ДЛФ=D"), "");
	
КонецФункции

//START Кайдашов 10/07/19

Процедура вогАвтоматическоеЗавершениеМероприятий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Мероприятие.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.CRM_Мероприятие КАК CRM_Мероприятие
	               |ГДЕ
	               |	НЕ CRM_Мероприятие.Состояние В(&СписокСостояний)
	               |	И НЕ CRM_Мероприятие.ПометкаУдаления
	               |	И CRM_Мероприятие.ОкончаниеМероприятия <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаОкончания",ТекущаяДата());
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Справочники.CRM_СостоянияСобытий.Завершено);
	СписокСостояний.Добавить(Справочники.CRM_СостоянияСобытий.Отменено);
	СписокСостояний.Добавить(Справочники.CRM_СостоянияСобытий.ВСтадииПодготовки);
	Запрос.УстановитьПараметр("СписокСостояний",СписокСостояний);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		ДокОб = Выборка.Ссылка.получитьобъект();
		ДокОб.Состояние = Справочники.CRM_СостоянияСобытий.Завершено;
		Попытка
			ДокОб.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка автоматического завершения мероприятия",УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НоваяСтрокаКоллекцииОбъектовМетаданных(Имя, Синоним, Картинка, КартинкаОбъекта, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 12.05.2020 CRM-631
// Функция раскладывает переданный массив ссылок в соответствие по типам этих ссылок.
//
//	Параметры:
//		МассивСсылок - Массив - массив ссылок на объекты информационной базы
//  Возвращаемое значение:
//		Соответствие:
//			Ключ - полное имя типа ссылки
//			Значение - массив ссылок этого типа.
//
Функция СоответствиеМассивовПоТипамОбъектов(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Каждого Объект Из МассивСсылок Цикл
		
		ТипОбъекта = Объект.Метаданные().ПолноеИмя();
		ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
		
		Если ТекущийТипОбъекта = Неопределено Тогда
			СоответствиеТипов.Вставить(ТипОбъекта, Новый Массив);
			ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
		КонецЕсли;
		ТекущийТипОбъекта.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции // -- VOG Солодов В.В. 12.05.2020

#КонецОбласти

// ++ VOG Солодов В.В. 08.10.2019 
#Область МетодыРаботыСЗапросом

// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//	Запрос			- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса	- СписокЗначений - в списке перечислены тексты запросов и их имена.
//	ОбходРезультата - ОбходРезультатаЗапроса - вариант обхода результата запроса.
//	ДобавитьРазделитель - Булево - добавлять разделитель между запросами из ТекстыЗапроса
//	УничтожитьСозданныеВременныеТаблицы - Булево - добавить уничтожение временных таблиц, создаваемых в ТекстыЗапроса
//										Для уничтожения таблице должно быть присвоено имя в ТекстыЗапроса.
//
// Возвращаемое значение:
//   Структура   - структура в которую помещены полученные таблицы.
//
Функция ВыгрузитьРезультатыЗапроса(Запрос,
								 	ТекстыЗапроса,
									ОбходРезультата = Неопределено,
									ДобавитьРазделитель = Ложь,
									УничтожитьСозданныеВременныеТаблицы = Ложь) Экспорт

	Таблицы = Новый Структура;
	
	// Инициализация варианта обхода результата запроса.
	Если ОбходРезультата = Неопределено Тогда
		ОбходРезультата = ОбходРезультатаЗапроса.Прямой;
	КонецЕсли;
	
	МассивТекстовЗапросов 	 = Новый Массив;
	МассивУничтожаемыхТаблиц = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстовЗапросов.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли; 
		
		МассивТекстовЗапросов.Добавить(ТекстЗапроса.Значение + ?(ДобавитьРазделитель, РазделительЗапросовВПакете(), ""));
		
		Если УничтожитьСозданныеВременныеТаблицы
		 И ЗначениеЗаполнено(ТекстЗапроса.Представление)
		 И СтрНайти(ВРег(ТекстЗапроса.Значение), "ПОМЕСТИТЬ") <> 0 Тогда
			МассивУничтожаемыхТаблиц.Добавить(ТекстЗапроса.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяУдаляемойТаблицы Из МассивУничтожаемыхТаблиц Цикл
		МассивТекстовЗапросов.Добавить("УНИЧТОЖИТЬ " + ИмяУдаляемойТаблицы + РазделительЗапросовВПакете());
	КонецЦикла;
	
	Если МассивТекстовЗапросов.Количество() > 0 Тогда
		
		// Выполнение запроса.
		Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, Символы.ПС);
		Результаты = Запрос.ВыполнитьПакет();

		// Помещение результатов запроса в таблицы.
		Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
			ИмяТаблицы = ТекстЗапроса.Представление;
			Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда // имя таблицы
				Результат = Результаты[ТекстыЗапроса.Индекс(ТекстЗапроса)];
				Если Результат <> Неопределено Тогда
					ТаблицаЗапроса = Результат.Выгрузить(ОбходРезультата);
					Если Таблицы.Свойство(ТекстЗапроса.Представление) Тогда
						ОбъединитьТаблицыРезультатовЗапроса(ТаблицаЗапроса, Таблицы[ИмяТаблицы]);
					Иначе
						Таблицы.Вставить(ИмяТаблицы, ТаблицаЗапроса);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблицы;
	
КонецФункции

// Возвращает строку для вставки между запросами, объединяемыми в пакет
// 
// Возвращаемое значение:
//  Строка 
//
Функция РазделительЗапросовВПакете() Экспорт
	
	Возврат "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

// Выполняет добавление строк из таблицы источника в таблицу приемник с предварительной проверкой:
// - типов колонок
// - состава колонок
// При необходимости выполняет корректировку таблицы-приемника.
//
Процедура ОбъединитьТаблицыРезультатовЗапроса(ТаблицаИсточник, ТаблицаПриемник)
	
	КолонкиДляОбъединенияТипов = Новый Структура();
	КолонкиДляДобавления = Новый Структура();
	
	Для Каждого КолонкаИсточника Из ТаблицаИсточник.Колонки Цикл
		
		КолонкаПриемника = ТаблицаПриемник.Колонки.Найти(КолонкаИсточника.Имя);
		
		Если КолонкаПриемника <> Неопределено Тогда
			
			КолонкаИсточникаТипы = КолонкаИсточника.ТипЗначения.Типы();
			ОтсутствующиеТипы = Новый Массив;
			
			// Проверим наличие типов входящих в описание источника в приемнике.
			// Если отсутствуют - объединим описания типов, пересоздадим колонки таблицы.
			Для Каждого ТипКолонкиИсточника Из КолонкаИсточникаТипы Цикл
				Если Не КолонкаПриемника.ТипЗначения.СодержитТип(ТипКолонкиИсточника) Тогда
					ОтсутствующиеТипы.Добавить(ТипКолонкиИсточника);
				КонецЕсли;
			КонецЦикла;
			
			// Сравним квалификаторы примитивных типов источника и приемника.
			// Если в описании типов источника квалификаторы "более общие", то возьмем их.
			ИзменитьКвалификаторыЧисла = Ложь;
			КвалификаторыЧисла = КолонкаПриемника.ТипЗначения.КвалификаторыЧисла;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Число")) И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				КвалификаторыЧислаИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыЧисла;  
				Если КвалификаторыЧислаИсточника.Разрядность > КвалификаторыЧисла.Разрядность Тогда
					Разрядность = КвалификаторыЧислаИсточника.Разрядность;
					ИзменитьКвалификаторЧисла = Истина;
				Иначе
					Разрядность = КвалификаторыЧисла.Разрядность;
				КонецЕсли;
				Если КвалификаторыЧислаИсточника.РазрядностьДробнойЧасти > КвалификаторыЧисла.РазрядностьДробнойЧасти Тогда
					РазрядностьДробнойЧасти = КвалификаторыЧислаИсточника.РазрядностьДробнойЧасти;
					ИзменитьКвалификаторыЧисла = Истина;
				Иначе
					РазрядностьДробнойЧасти = КвалификаторыЧисла.РазрядностьДробнойЧасти;
				КонецЕсли;
				Если КвалификаторыЧислаИсточника.ДопустимыйЗнак <> КвалификаторыЧисла.ДопустимыйЗнак Тогда
					Знак = ДопустимыйЗнак.Любой;
					ИзменитьКвалификаторыЧисла = Истина;
				Иначе
					Знак = КвалификаторыЧисла.ДопустимыйЗнак;
				КонецЕсли;
				Если ИзменитьКвалификаторыЧисла Тогда
					КвалификаторыЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак);
				КонецЕсли;
			КонецЕсли;
			
			ИзменитьКвалификаторыСтроки = Ложь;
			КвалификаторыСтроки = КолонкаПриемника.ТипЗначения.КвалификаторыСтроки;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Строка")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				КвалификаторыСтрокиИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыСтроки;
				Если КвалификаторыСтроки.Длина <> 0 И КвалификаторыСтрокиИсточника.Длина > КвалификаторыСтроки.Длина Тогда
					ИзменитьКвалификаторЧисла = Истина;
					КвалификаторыСтроки = Новый КвалификаторыСтроки(КвалификаторыСтрокиИсточника.Длина);
				КонецЕсли; 
			КонецЕсли;
			
			ИзменитьКвалификаторыДаты = Ложь;
			КвалификаторыДаты = КолонкаПриемника.ТипЗначения.КвалификаторыДаты;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Дата")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				КвалификаторыДатыИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыДаты;
				Если КвалификаторыДатыИсточника.ЧастиДаты <> КвалификаторыДаты.ЧастиДаты Тогда
					ИзменитьКвалификаторыДаты = Истина;
					КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
				КонецЕсли; 
			КонецЕсли;
			
			ИзменитьКвалификаторыДвоичныхДанных = Ложь;
			КвалификаторыДвоичныхДанных = КолонкаПриемника.ТипЗначения.КвалификаторыДвоичныхДанных;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("ДвоичныеДанные")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("ДвоичныеДанные")) Тогда
				КвалификаторыДвоичныхДанныхИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыДвоичныхДанных;
				Если КвалификаторыДвоичныхДанных.Длина <> 0 И КвалификаторыДвоичныхДанныхИсточника.Длина > КвалификаторыДвоичныхДанных.Длина Тогда
					ИзменитьКвалификаторыДвоичныхДанных = Истина;
					КвалификаторыДвоичныхДанных = Новый КвалификаторыДвоичныхДанных(КвалификаторыДвоичныхДанныхИсточника.Длина);
				КонецЕсли; 
			КонецЕсли;
			
			Если ОтсутствующиеТипы.Количество() > 0
				Или ИзменитьКвалификаторыЧисла 
				Или ИзменитьКвалификаторыСтроки 
				Или ИзменитьКвалификаторыДаты
				Или ИзменитьКвалификаторыДвоичныхДанных Тогда
				ОписаниеТиповОбъединение = Новый ОписаниеТипов(
					КолонкаПриемника.ТипЗначения,
					ОтсутствующиеТипы,
					,
					КвалификаторыЧисла,
					КвалификаторыСтроки,
					КвалификаторыДаты,
					КвалификаторыДвоичныхДанных);
				КолонкиДляОбъединенияТипов.Вставить(КолонкаПриемника.Имя, ОписаниеТиповОбъединение);
			КонецЕсли;
		Иначе
			КолонкиДляДобавления.Вставить(КолонкаИсточника.Имя, КолонкаИсточника.ТипЗначения)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Колонка Из КолонкиДляОбъединенияТипов Цикл
		ЗначенияВКолонке = ТаблицаПриемник.ВыгрузитьКолонку(Колонка.Ключ);
		ТаблицаПриемник.Колонки.Удалить(Колонка.Ключ);
		ТаблицаПриемник.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
		ТаблицаПриемник.ЗагрузитьКолонку(ЗначенияВКолонке, Колонка.Ключ);
	КонецЦикла;
	
	Для каждого Колонка Из КолонкиДляДобавления Цикл
		ТаблицаПриемник.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	
КонецПроцедуры

#КонецОбласти
// -- VOG Солодов В.В. 08.10.2019

Функция ПолучитьОрганизациюПользователяПоПодразделению(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Ссылка,
	               |	СтруктураПредприятия.Организация КАК Организация,
	               |	СтруктураПредприятия.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.Ссылка = &Подразделение
	               |ИТОГИ ПО
	               |	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Подразделение",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь,"Подразделение"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Если Выборка.Ссылка.ОбособленноеПодразделение и ЗначениеЗаполнено(Выборка.Ссылка.Организация) И Выборка.Ссылка.Организация.ИНН<>"5012089274" тогда
			Возврат Выборка.Ссылка.Организация;			
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.Организации.ПустаяСсылка();
КонецФункции


//START Кайдашов 11/02/20 CRM - 274
//Функция нужня для отчета сравнение двух периодов продаж
//Входящие параметры
//
//Возращаемое значение
//	Число - номер периода по порядку с учётом периодичности
//	-1 - если период для которого надо определить порядковый номер не входит в период
Функция ОпределитьНомерПоПорядкуВПериоде(НачалоПериода,КонецПериода,ПериодДляОпределения,Периодичность) Экспорт
	
	Если ПериодДляОпределения<НачалоПериода или ПериодДляОпределения>КонецПериода тогда
		Возврат -1;	
	КонецЕсли;
	
	Если Периодичность="Месяц" тогда
		ВыровненнаяДатаНачалаПериода = НачалоМесяца(НачалоПериода);	
		ВыровненнаяДатаКонцаПериода = КонецМесяца(КонецПериода);
	КонецЕсли;
	Если Периодичность="Квартал" тогда
		ВыровненнаяДатаНачалаПериода = НачалоКвартала(НачалоПериода);	
		ВыровненнаяДатаКонцаПериода = КонецКвартала(КонецПериода);
	КонецЕсли;
	Если Периодичность="Год" тогда
		ВыровненнаяДатаНачалаПериода = НачалоГода(НачалоПериода);	
		ВыровненнаяДатаКонцаПериода = КонецГода(КонецПериода);
	КонецЕсли;
	
	КолвоМесяцевВПериоде = (Год(ВыровненнаяДатаКонцаПериода) - Год(ВыровненнаяДатаНачалаПериода))*12 + (Месяц(ВыровненнаяДатаКонцаПериода) - Месяц(ВыровненнаяДатаНачалаПериода))+1;
	Если Периодичность="Месяц" тогда
		КолвоМесяцевОтПериодаДляОпределения = (Год(ПериодДляОпределения) - Год(ВыровненнаяДатаНачалаПериода))*12 + (Месяц(ПериодДляОпределения) - Месяц(ВыровненнаяДатаНачалаПериода))+1;  
		НомерПоПорядку = КолвоМесяцевОтПериодаДляОпределения; 
	КонецЕсли;
	Если Периодичность="Квартал" тогда
		КолвоМесяцевОтПериодаДляОпределения = Цел(((Год(ПериодДляОпределения) - Год(ВыровненнаяДатаНачалаПериода))*12 + (Месяц(ПериодДляОпределения) - Месяц(ВыровненнаяДатаНачалаПериода)))/3)+1;  
		НомерПоПорядку = КолвоМесяцевОтПериодаДляОпределения; 
	КонецЕсли;
	Если Периодичность="Год" тогда
		КолвоМесяцевОтПериодаДляОпределения = Цел(((Год(ПериодДляОпределения) - Год(ВыровненнаяДатаНачалаПериода))*12 + (Месяц(ПериодДляОпределения) - Месяц(ВыровненнаяДатаНачалаПериода)))/12)+1;  
		НомерПоПорядку = КолвоМесяцевОтПериодаДляОпределения; 
	КонецЕсли;
	Возврат НомерПоПорядку;
КонецФункции
//END Кайдашов CRM-274

//Кайдашов 17-03-2020
//Функция возвращает массив подчиненных сотрудников для пользователя
Функция ПолучитьПодчиненныхСотрудников(Пользователь) Экспорт
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|ПОМЕСТИТЬ ВТ_ДолжностныеПозиции
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_ДолжностныеПозиции.Ссылка
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.CRM_ДолжностнаяПозиция В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ВТ_ДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|			ИЗ
		|				ВТ_ДолжностныеПозиции КАК ВТ_ДолжностныеПозиции)
		|	И (НЕ Пользователи.CRM_ДолжностнаяПозиция = &ТекущаяДолжностнаяПозиция
		|			ИЛИ Пользователи.Ссылка = &ТекущийПользователь)
		|
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование");
		
		
		ТекущийПользователь  = Пользователь;
		ТекущаяДолжностнаяПозиция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь,"CRM_ДолжностнаяПозиция");
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("СписокДолжностныхПозиций", ПараметрыСеанса.вогДолжностныеПозиции);
		Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция", ТекущаяДолжностнаяПозиция);
		
		ПодчиненныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		
		Возврат ПодчиненныеСотрудники;
		
КонецФункции

//Функция возвращает филиал (подразделение) пользователя по подразделению указанному в пользователе
Функция ПолучитьФилиалПользователя(Пользователь) экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.ОбособленноеПодразделение
	               |	И СтруктураПредприятия.Родитель <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.)";
	Выборка = Запрос.Выполнить().Выбрать();
	Подразделение = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Пользователь,"Подразделение");
	Если Не ЗначениеЗаполнено(Подразделение) тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	Пока Выборка.Следующий() цикл
		Если Подразделение.ПринадлежитЭлементу(Выборка.Ссылка) тогда
			Возврат Выборка.Ссылка;			
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	
КонецФункции
	
Функция ПолучитьНаправлениеДеятельностиТекущегоПользователя() экспорт  //VOG Ульянов И.В. 09.04.2020 CRM-560
	Возврат ПараметрыСеанса.ТекущийПользователь.CRM_НаправлениеДеятельности;	
КонецФункции

Функция ПолучитьПодразделениеТекущегоПользователя() экспорт  //VOG Ульянов И.В. 09.04.2020 CRM-560
	Возврат Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ПараметрыСеанса.ТекущийПользователь.Подразделение);	
КонецФункции

Функция ДоступноНаправлениеОбои() экспорт  //VOG Ульянов И.В. 09.04.2020 CRM-574
	Если ПараметрыСеанса.ТекущийПользователь.CRM_НаправлениеДеятельности <> Справочники.НаправленияДеятельности.Плитка
		ИЛИ РольДоступна("ПолныеПрава") тогда
		Возврат Истина; 
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

// ++ VOG Солодов В.В. 15.01.2021 DEV-67

// Возвращает описание типов по переданному типу
// 
// Параметры:
//	Тип - Тип - тип значения
//
// Возвращаемое значение:
//	ОписаниеТипов - созданное на основании переданного типа описание типов.
//
Функция ОписаниеТиповПоТипу(Тип) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
	
КонецФункции

// -- VOG Солодов В.В. 15.01.2021 DEV-67

//+++ Терпогосян Д.Б. [13.08.2021 11:31:38] № Получение данных по ценам распродажи и затратам распродажи для планирования продаж обои
Процедура ПолучитьДанныеЦенЗатратОбои(Параметры, АдресХранилища) Экспорт
	
	лДата = НачалоДня(Параметры.ДатаДокумента); 
	Результат = вогОбщегоНазначенияКлиентСерверПовтИсп.ПолучитьЦеныЗатратыОбои(лДата); 
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры
 
//--- Терпогосян Д.Б. [13.08.2021 11:31:39] №  