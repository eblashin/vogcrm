
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПапку1СПоПапкеMSExchange(УчетнаяЗаписьЭлектроннойПочты, ПапкаMSExchangeИлиFolderId) Экспорт
	Если	ТипЗнч(ПапкаMSExchangeИлиFolderId) <> Тип("СправочникСсылка.CRM_СтруктурыПапокMSExchange")
		И	ТипЗнч(ПапкаMSExchangeИлиFolderId) <> Тип("Строка") Тогда
		//
		Возврат Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПапкаMSExchangeИлиFolderId) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если	ТипЗнч(УчетнаяЗаписьЭлектроннойПочты) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")
		Или Не ЗначениеЗаполнено(УчетнаяЗаписьЭлектроннойПочты) Тогда
		//
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ПапкаMSExchangeИлиFolderId) = Тип("Строка") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец = &УчетнаяЗаписьЭлектроннойПочты
		|	И ПапкиЭлектронныхПисем.CRM_ПапкаMSExchange <> ЗНАЧЕНИЕ(Справочник.CRM_СтруктурыПапокMSExchange.ПустаяСсылка)
		|	И (ПапкиЭлектронныхПисем.CRM_ПапкаMSExchange.ID = &ПапкаMSExchangeИлиFolderId ИЛИ ПапкиЭлектронныхПисем.CRM_ПапкаMSExchange.DistinguishedFolderId = &ПапкаMSExchangeИлиFolderId)
		|	И НЕ ПапкиЭлектронныхПисем.ПометкаУдаления
		|");
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец = &УчетнаяЗаписьЭлектроннойПочты
		|	И ПапкиЭлектронныхПисем.CRM_ПапкаMSExchange = &ПапкаMSExchangeИлиFolderId
		|	И НЕ ПапкиЭлектронныхПисем.ПометкаУдаления
		|");
	КонецЕсли;
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗаписьЭлектроннойПочты);
	Запрос.УстановитьПараметр("ПапкаMSExchangeИлиFolderId", ПапкаMSExchangeИлиFolderId);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУчетнуюЗаписьЭлектроннойПочтыПользователя(Пользователь) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись КАК УчетнаяЗапись
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь
	|	И УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись.ПометкаУдаления
	|");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УчетнаяЗапись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьУчетнуюЗаписьЭлектроннойПочтыПоУчетнойЗаписиMSExchange(УчетнаяЗаписьMSExchange) Экспорт
	АдресEMail = УчетнаяЗаписьMSExchange.АдресEMail;
	Если Не ЗначениеЗаполнено(АдресEMail) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресEMail
	|");
	Запрос.УстановитьПараметр("АдресEMail", АдресEMail);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УчетнаяЗапись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьУчетнуюЗаписьMSExchangeПоПользователю(Пользователь) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиПользователейMSExchange.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиПользователейMSExchange.СерверMSExchange КАК СерверMSExchange
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиПользователейMSExchange КАК УчетныеЗаписиПользователейMSExchange
	|ГДЕ
	|	НЕ УчетныеЗаписиПользователейMSExchange.ПометкаУдаления
	|	И УчетныеЗаписиПользователейMSExchange.Пользователь = &Пользователь
	|");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("УчетнаяЗапись,СерверMSExchange", Выборка.УчетнаяЗапись, Выборка.СерверMSExchange);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ВыполненОбменСMSExchange(Объект1С) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект1С",		Объект1С);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	CRM_СоответствиеОбъектовMSExchange.ID
	               |ИЗ
	               |	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК CRM_СоответствиеОбъектовMSExchange
	               |ГДЕ
	               |	CRM_СоответствиеОбъектовMSExchange.Объект1С = &Объект1С";
	Выборка = Запрос.Выполнить();
	Возврат НЕ Выборка.Пустой();
КонецФункции

Функция ПолучитьАккаунтMSExchangeПоПользователю(Пользователь) Экспорт
	УчетнаяЗаписьMSExchange = ПолучитьУчетнуюЗаписьMSExchangeПоПользователю(Пользователь);
	Если ЗначениеЗаполнено(УчетнаяЗаписьMSExchange) Тогда
		АдресEMail = УчетнаяЗаписьMSExchange.АдресEMail;
		Если ЗначениеЗаполнено(АдресEMail) Тогда
			Поз = Найти(АдресEMail, "@");
			Если Поз = 0 Тогда
				Возврат АдресEMail;
			Иначе
				Возврат Лев(АдресEMail, Поз - 1);
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьУчетнуюЗаписьMSExchangeПоАккаунтуMSExchange(Аккаунт) Экспорт
	Если ТипЗнч(Аккаунт) <> Тип("Строка") Или Не ЗначениеЗаполнено(Аккаунт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоАдресEMail = (Найти(Аккаунт, "@") > 0);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиПользователейMSExchange.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиПользователейMSExchange.СерверMSExchange КАК СерверMSExchange
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиПользователейMSExchange КАК УчетныеЗаписиПользователейMSExchange
	|ГДЕ
	|	НЕ УчетныеЗаписиПользователейMSExchange.ПометкаУдаления
	|	" + ?(ЭтоАдресEMail, "
	|	И УчетныеЗаписиПользователейMSExchange.АдресEMail = &Аккаунт
	|	", "
	|	И УчетныеЗаписиПользователейMSExchange.АдресEMail ПОДОБНО """ + СокрЛП(Аккаунт) + "@%""" + "
	|	") + "
	|");
	Если ЭтоАдресEMail Тогда
		Запрос.УстановитьПараметр("Аккаунт", СокрЛП(Аккаунт));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УчетнаяЗапись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПользователяПоАккаунтуMSExchange(Аккаунт) Экспорт
	УчетнаяЗаписьMSExchange = ПолучитьУчетнуюЗаписьMSExchangeПоАккаунтуMSExchange(Аккаунт);
	Если ЗначениеЗаполнено(УчетнаяЗаписьMSExchange) И ЗначениеЗаполнено(УчетнаяЗаписьMSExchange.Пользователь) Тогда
		Возврат УчетнаяЗаписьMSExchange.Пользователь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция СлитьСтроки(Строка1, Строка2, Разделитель = ", ")
	СтрРезультат = Строка1;
	
	Если ЗначениеЗаполнено(СтрРезультат) И ЗначениеЗаполнено(Строка2) Тогда
		СтрРезультат = СтрРезультат + Разделитель + Строка2;
	ИначеЕсли ЗначениеЗаполнено(Строка2) Тогда
		СтрРезультат = Строка2;
	КонецЕсли;
	
	Возврат СтрРезультат;
КонецФункции

Процедура ДобавитьВСтрокуОшибки(СтрокаОшибки, Текст) Экспорт
	Если Не ЗначениеЗаполнено(Текст) Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(СтрокаОшибки) <> Тип("Строка") Тогда
		СтрокаОшибки = "";
	КонецЕсли;
	ДобавляемыйТекст = Строка(Текст);
	
	СтрокаОшибки = СтрокаОшибки + ?(ПустаяСтрока(СтрокаОшибки), "", Символы.ПС);
	СтрокаОшибки = СтрокаОшибки + ДобавляемыйТекст;
КонецПроцедуры

Функция ПолучитьEMailКонтакта(Контакт)
	Попытка		КонтактнаяИнформация = Контакт.КонтактнаяИнформация;
	Исключение	КонтактнаяИнформация = Неопределено;
	КонецПопытки;
	
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.АдресЭП) Тогда
			Возврат СокрЛП(СтрокаТаблицы.АдресЭП);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ТекстHTMLВТекст(ТекстHTML)
	Текст = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстHTML);
	Текст = СтрЗаменить(Текст, "&nbsp;", "");
	Возврат СокрЛП(Текст);
КонецФункции

Функция ОпределитьВидТелефонаMSExchange(ВидКИ, Настройка = Неопределено)
	Если Настройка <> Неопределено И Не ВидКИ.Предопределенный Тогда
		НайденнаяСтрока = Настройка.СоответствиеВидовКИТелефоныПартнера.Найти(ВидКИ, "ВидКИ");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = Настройка.СоответствиеВидовКИТелефоныПартнераКомпания.Найти(ВидКИ, "ВидКИ");
		КонецЕсли;
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = Настройка.СоответствиеВидовКИТелефоныКонтактногоЛица.Найти(ВидКИ, "ВидКИ");
		КонецЕсли;
		Если НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.Имя) Тогда
			Возврат НайденнаяСтрока.Имя;
		КонецЕсли;
	КонецЕсли;
	
	Если	ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица
		Или	ВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица Тогда
		//
		Возврат "MobilePhone";
	ИначеЕсли	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера
			Или	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица
			Или	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
		//
		Возврат "BusinessPhone";
	ИначеЕсли	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица Тогда
		//
		Возврат "HomePhone";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ОпределитьВидАдресаMSExchange(ВидКИ, Настройка = Неопределено)
	Если Настройка <> Неопределено И Не ВидКИ.Предопределенный Тогда
		НайденнаяСтрока = Настройка.СоответствиеВидовКИАдресаПартнера.Найти(ВидКИ, "ВидКИ");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = Настройка.СоответствиеВидовКИАдресаПартнераКомпания.Найти(ВидКИ, "ВидКИ");
		КонецЕсли;
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = Настройка.СоответствиеВидовКИАдресаКонтактногоЛица.Найти(ВидКИ, "ВидКИ");
		КонецЕсли;
		Если НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.Имя) Тогда
			Возврат НайденнаяСтрока.Имя;
		КонецЕсли;
	КонецЕсли;
	
	// Business
	// Home
	// Other
	
	//Если ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес Тогда
	//Иначе
	//КонецЕсли;
	
	// У нас это всегда будет Business (рабочий адрес).
	
	Возврат "Business";
	
КонецФункции

Функция ПолучитьУчетнуюЗаписьMSExchangeПоУчетнойЗаписиЭлектроннойПочты(УчетнаяЗаписьЭлектроннойПочты) Экспорт
	АдресEMail = УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты;
	Если Не ЗначениеЗаполнено(АдресEMail) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиПользователейMSExchange.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиПользователейMSExchange КАК УчетныеЗаписиПользователейMSExchange
	|ГДЕ
	|	НЕ УчетныеЗаписиПользователейMSExchange.ПометкаУдаления
	|	И УчетныеЗаписиПользователейMSExchange.АдресEMail = &АдресEMail
	|");
	Запрос.УстановитьПараметр("АдресEMail", АдресEMail);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УчетнаяЗапись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ОпределитьВидТелефона1С(Key, ЭтоКонтактноеЛицо, ЭтоКомпания, Настройка = Неопределено) Экспорт
	// AssistantPhone
	// BusinessFax
	// BusinessPhone
	// BusinessPhone2
	// Callback
	// CarPhone
	// CompanyMainPhone
	// HomeFax
	// HomePhone
	// HomePhone2
	// Isdn
	// MobilePhone
	// OtherFax
	// OtherTelephone
	// Pager
	// PrimaryPhone
	// RadioPhone
	// Telex
	// TtyTddPhone
	
	Если Настройка <> Неопределено Тогда
		Если ЭтоКонтактноеЛицо Тогда
			НайденнаяСтрока = Настройка.СоответствиеВидовКИТелефоныКонтактногоЛица.Найти(Key, "Имя");
		ИначеЕсли ЭтоКомпания Тогда
			НайденнаяСтрока = Настройка.СоответствиеВидовКИТелефоныПартнераКомпания.Найти(Key, "Имя");
		Иначе
			НайденнаяСтрока = Настройка.СоответствиеВидовКИТелефоныПартнера.Найти(Key, "Имя");
		КонецЕсли;
		Если НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.ВидКИ) Тогда
			Возврат НайденнаяСтрока.ВидКИ;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоКонтактноеЛицо Тогда
		МобильныйТелефон = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ОбычныйТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;;
		РабочийТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		ТелефонОрганизации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		ДомашнийТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		Факс = Неопределено;
		
	Иначе
		МобильныйТелефон = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		ОбычныйТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		Если ЭтоКомпания Тогда
			РабочийТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		Иначе
			РабочийТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		КонецЕсли;
		Если ЭтоКомпания Тогда
			ТелефонОрганизации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		Иначе
			ТелефонОрганизации = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		КонецЕсли;
		ДомашнийТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		Факс = Неопределено;
	КонецЕсли;
	
	// ТелефонПартнера
	// CRM_МобильныйТелефонЧастногоЛица
	// МобильныйТелефонКонтактногоЛица
	// ТелефонКонтактногоЛица
	// ТелефонОрганизации
	// ТелефонДомашнийФизическиеЛица
	// ФаксОрганизации.
	
	Вид = Неопределено;
	
	// МобильныйТелефон
	// ОбычныйТелефон
	// РабочийТелефон
	// ТелефонОрганизации
	// ДомашнийТелефон
	// Факс
	
	Если Key = "AssistantPhone" Тогда
		Вид = РабочийТелефон;
	ИначеЕсли Key = "BusinessPhone" Или Key = "BusinessPhone2" Тогда
		Вид = РабочийТелефон;
	ИначеЕсли Key = "Callback" Тогда
		Вид = РабочийТелефон;
	ИначеЕсли Key = "CarPhone" Тогда
		Вид = МобильныйТелефон;
	ИначеЕсли Key = "CompanyMainPhone" Тогда
		Вид = ТелефонОрганизации;
	ИначеЕсли Key = "HomeFax" Тогда
		Вид = Факс;
	ИначеЕсли Key = "HomePhone" Или Key = "HomePhone2" Тогда
		Вид = ДомашнийТелефон;
	ИначеЕсли Key = "Isdn" Тогда
		Вид = ОбычныйТелефон;
	ИначеЕсли Key = "MobilePhone" Тогда
		Вид = МобильныйТелефон;
	ИначеЕсли Key = "OtherFax" Тогда
		Вид = Факс;
	ИначеЕсли Key = "OtherTelephone" Тогда
		Вид = ОбычныйТелефон;
	ИначеЕсли Key = "Pager" Тогда
		Вид = МобильныйТелефон;
	ИначеЕсли Key = "PrimaryPhone" Тогда
		Вид = РабочийТелефон;
	ИначеЕсли Key = "RadioPhone" Тогда
		Вид = МобильныйТелефон;
	ИначеЕсли Key = "Telex" Тогда
		Вид = МобильныйТелефон;
	ИначеЕсли Key = "TtyTddPhone" Тогда
		Вид = ОбычныйТелефон;
	Иначе
		Вид = ОбычныйТелефон;
	КонецЕсли;
	
	Возврат Вид;
КонецФункции

Функция ОпределитьВидАдреса1С(Key, ЭтоКонтактноеЛицо, ЭтоКомпания, Настройка = Неопределено) Экспорт
	Если Настройка <> Неопределено Тогда
		Если ЭтоКонтактноеЛицо Тогда
			НайденнаяСтрока = Настройка.СоответствиеВидовКИАдресаКонтактногоЛица.Найти(Key, "Имя");
		ИначеЕсли ЭтоКомпания Тогда
			НайденнаяСтрока = Настройка.СоответствиеВидовКИАдресаПартнераКомпания.Найти(Key, "Имя");
		Иначе
			НайденнаяСтрока = Настройка.СоответствиеВидовКИАдресаПартнера.Найти(Key, "Имя");
		КонецЕсли;
		Если НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.ВидКИ) Тогда
			Возврат НайденнаяСтрока.ВидКИ;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоКонтактноеЛицо Тогда
		// Для контактного лица адрес не предусмотрен.
		Возврат Неопределено;
	КонецЕсли;
	
	// Business
	// Home
	// Other
	
	// В спр. ВидыКонтактнойИнформации нет домашнего адреса.
	Если ЭтоКомпания Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес;
	Иначе
		Возврат Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	КонецЕсли;
КонецФункции

Функция ПолучитьКонтактПоАдресу(Адрес, СерверMSExchange, СоответствияАдресовИКонтактов = Неопределено) Экспорт
	Если ТипЗнч(СоответствияАдресовИКонтактов) <> Тип("Соответствие") Тогда
		СоответствияАдресовИКонтактов = Новый Соответствие();
	КонецЕсли;
	
	КонтактВСоответствии = СоответствияАдресовИКонтактов[Адрес];
	Если КонтактВСоответствии <> Ложь И ЗначениеЗаполнено(КонтактВСоответствии) Тогда
		Возврат КонтактВСоответствии;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка КАК Ссылка,
	|	3 КАК Флаг
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	2
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	1
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	CRM_УчетныеЗаписиПользователейMSExchange.Пользователь,
	|	0
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиПользователейMSExchange КАК CRM_УчетныеЗаписиПользователейMSExchange
	|ГДЕ
	|	НЕ CRM_УчетныеЗаписиПользователейMSExchange.ПометкаУдаления
	|	И CRM_УчетныеЗаписиПользователейMSExchange.СерверMSExchange = &СерверMSExchange
	|	И CRM_УчетныеЗаписиПользователейMSExchange.АдресEMail = &АдресЭП
	|
	|УПОРЯДОЧИТЬ ПО
	|	Флаг";
	
	Запрос.УстановитьПараметр("СерверMSExchange", СерверMSExchange);
	Запрос.УстановитьПараметр("АдресЭП", Адрес);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СоответствияАдресовИКонтактов.Вставить(Адрес, Выборка.Ссылка);
		Возврат Выборка.Ссылка;
	Иначе
		СоответствияАдресовИКонтактов.Вставить(Адрес, Ложь);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");

	Возврат НомерТелефона;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ И ОБНОВЛЕНИЯ ОБЪЕКТОВ

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Задачи

Функция СформироватьТекстЗапросаЗадачи(Настройка) Экспорт
	ТекстЗапроса = "";
	Если НЕ Настройка.СинхронизироватьЗадачи Тогда
		Возврат "ВЫБРАТЬ NULL";
	КонецЕсли;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Задачи.Ссылка КАК Задача
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК Задачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
	               |		ПО Задачи.Ссылка = СоответствиеОбъектовMSExchange.Объект1С
	               |			И (СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange)
	               |ГДЕ
	               |	Задачи.Исполнитель = &Пользователь
	               |	И (Задачи.CRM_Личная
	               |			ИЛИ Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	               |				И Задачи.БизнесПроцесс <> ЗНАЧЕНИЕ(БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка)
	               |				И Задачи.БизнесПроцесс.КартаМаршрута = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.Поручение))
	               |	И ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, Задачи.Дата) >= &ДатаПоследнейМодификации
	               |	И НЕ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) В (&МассивIDЗагруженныхОбновленныхЗадач)
	               |	И НЕ Задачи.Ссылка В (&МассивСсылокЗагруженныхОбновленныхЗадач)
	               |	И НЕ(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации ЕСТЬ NULL 
	               |				И (Задачи.ПометкаУдаления
	               |					ИЛИ Задачи.Выполнена))";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьСинхронизируемыеЗадачи1С(Настройка, МассивIDЗагруженныхОбновленныхЗадач = Неопределено, МассивСсылокЗагруженныхОбновленныхЗадач = Неопределено) Экспорт
	Если Не Настройка.СинхронизироватьЗадачи Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Эти массивы нужны чтобы исключить уже загруженные/обновленные ранее задачи для оптимизации по скорости.
	Если МассивIDЗагруженныхОбновленныхЗадач = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхЗадач = Новый Массив();
	КонецЕсли;
	Если МассивСсылокЗагруженныхОбновленныхЗадач = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхЗадач = Новый Массив();
	КонецЕсли;
	
	ТекстЗапроса = СформироватьТекстЗапросаЗадачи(Настройка);
	
	Отбор = Настройка.ХранилищеОтборЗадач.Получить();
	Если ТипЗнч(Отбор) <> Тип("ОтборКомпоновкиДанных") Тогда
		Отбор = Неопределено;
	КонецЕсли;
	
	ДатаПоследнейМодификации = Макс(Настройка.ЗадачиМодифицированныеПосле, Настройка.ДатаПоследнегоОбменаЗадач1СMSExchange);
	
	СоответствиеПараметры = Новый Соответствие();
	СоответствиеПараметры.Вставить("Пользователь", Настройка.УчетнаяЗапись.Пользователь);
	СоответствиеПараметры.Вставить("СерверMSExchange", Настройка.УчетнаяЗапись.СерверMSExchange);
	СоответствиеПараметры.Вставить("ДатаПоследнейМодификации", ДатаПоследнейМодификации);
	СоответствиеПараметры.Вставить("МассивIDЗагруженныхОбновленныхЗадач", МассивIDЗагруженныхОбновленныхЗадач);
	СоответствиеПараметры.Вставить("МассивСсылокЗагруженныхОбновленныхЗадач", МассивСсылокЗагруженныхОбновленныхЗадач);
	
	Таблица = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор, СоответствиеПараметры);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.*
	|ПОМЕСТИТЬ
	|	Задачи
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|///////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Задачи.Задача КАК Задача,
	|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) КАК ID,
	|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, Задачи.Задача.Дата) КАК ДатаПоследнейМодификации
	|ИЗ
	|	Задачи КАК Задачи
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
	|	ПО
	|		Задачи.Задача = СоответствиеОбъектовMSExchange.Объект1С
	|		И СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
	|	
	|ГДЕ
	|	(ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, Задачи.Задача.Дата) = ДАТАВРЕМЯ(1,1,1)
	|		ИЛИ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, Задачи.Задача.Дата) >= &ДатаПоследнейМодификации)
	|";
	
	Запрос = Новый Запрос();
	МВТ = Новый МенеджерВременныхТаблиц();
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("СерверMSExchange", Настройка.УчетнаяЗапись.СерверMSExchange);
	Запрос.УстановитьПараметр("ДатаПоследнейМодификации", ДатаПоследнейМодификации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСинхронизируемыеЗадачиMSExchange(Настройка, Подключение, СтрокаОшибки = "", МассивIDЗагруженныхОбновленныхЗадач = Неопределено) Экспорт
	Если МассивIDЗагруженныхОбновленныхЗадач = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхЗадач = Новый Массив();
	КонецЕсли;
	
	// Пропускаем:
	// - черновики
	//
	Ограничение = "<t:And>
	|<t:IsEqualTo>
	|	<t:FieldURI FieldURI=""item:IsDraft""/>
	|		<t:FieldURIOrConstant>
	|			<t:Constant Value=""false""/>
	|		</t:FieldURIOrConstant>
	|</t:IsEqualTo>
	|
	|";
	
	ДатаПоследнейМодификации = Макс(Настройка.ЗадачиМодифицированныеПосле, Настройка.ДатаПоследнегоОбменаЗадачMSExchange1С);
	Если ЗначениеЗаполнено(ДатаПоследнейМодификации) Тогда
		ДатаВФорматеMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(ДатаПоследнейМодификации, Настройка.СмещениеВремениВМинутах);
		
		Ограничение = Ограничение + "
		|<t:Or>
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:DateTimeCreated""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|	
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:LastModifiedTime""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|</t:Or>
		|"
	КонецЕсли;
	
	Ограничение = Ограничение +
	"</t:And>
	|";
	
	ТаблицаID = CRM_MSExchangeСерверЭкспортныеМетоды.НайтиЗадачи(Подключение,, Ограничение,,, "IdOnly", СтрокаОшибки);
	Если ТипЗнч(ТаблицаID) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаID.Количество() > 0 Тогда
			Если МассивIDЗагруженныхОбновленныхЗадач.Количество() > 0 Тогда
				нИндекс = 0;
				Пока нИндекс < ТаблицаID.Количество() Цикл
					Если МассивIDЗагруженныхОбновленныхЗадач.Найти(ТаблицаID[нИндекс].ID) = Неопределено Тогда
						нИндекс = нИндекс + 1;
					Иначе
						ТаблицаID.Удалить(нИндекс);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТаблицаID.Количество() > 0 Тогда
				МассивID = ТаблицаID.ВыгрузитьКолонку("ID");
				Таблица = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьЗадачу(Подключение, МассивID,, "AllProperties", СтрокаОшибки);
				
				Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") И Таблица.Колонки.Найти("Recurrence") <> Неопределено Тогда
					// Удаляем периодические задачи.
					нИндекс = 0;
					Пока нИндекс < Таблица.Количество() Цикл
						Если ТипЗнч(Таблица[нИндекс].Recurrence) = Тип("ТаблицаЗначений") Тогда
							Таблица.Удалить(нИндекс);
						Иначе
							нИндекс = нИндекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Возврат Таблица;
			Иначе
				Возврат Новый ТаблицаЗначений();
			КонецЕсли;
		Иначе
			Возврат Новый ТаблицаЗначений();
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СформироватьДанныеДляСозданияОбновленияЗадачи(Настройка, Задача, ДляОбновления = Ложь)
	//<Task>
	//   <MimeContent/>
	//   <ItemId/>
	//   <ParentFolderId/>
	//   <ItemClass/>
	//   <Subject/>
	//   <Sensitivity/>
	//   <Body/>
	//   <Attachments/>
	//   <DateTimeReceived/>
	//   <Size/>
	//   <Categories/>
	//   <InReplyTo/>
	//   <IsSubmitted/>
	//   <IsDraft/>
	//   <IsFromMe/>
	//   <IsResend/>
	//   <IsUnmodified/>
	//   <InternetMessageHeaders/>
	//   <DateTimeSent/>
	//   <DateTimeCreated/>
	//   <ResponseObjects/>
	//   <ReminderDueBy/>
	//   <ReminderIsSet/>
	//   <ReminderMinutesBeforeStart/>
	//   <DisplayCc/>
	//   <DisplayTo/>
	//   <HasAttachments/>
	//   <ExtendedProperty/>
	//   <Culture/>
	//   <ActualWork/>
	//   <AssignedTime/>
	//   <BillingInformation/>
	//   <ChangeCount/>
	//   <Companies/>
	//   <CompleteDate/>
	//   <Contacts/>
	//   <DelegationState/>
	//   <Delegator/>
	//   <DueDate/>
	//   <IsAssignmentEditable/>
	//   <IsComplete/>
	//   <IsRecurring/>
	//   <IsTeamTask/>
	//   <Mileage/>
	//   <Owner/>
	//   <PercentComplete/>
	//   <Recurrence/>
	//   <StartDate/>
	//   <Status/>
	//   <StatusDescription/>
	//   <TotalWork/>
	//   <EffectiveRights/>
	//   <LastModifiedName/>
	//   <LastModifiedTime/>
	//   <IsAssociated/>
	//   <WebClientReadFormQueryString/>
	//   <WebClientEditFormQueryString/>
	//   <ConversationId/>
	//   <UniqueBody/>
	//</Task>
	
	//<?xml version="1.0" encoding="utf-8"?>
	// <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	//			   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	//			   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	//			   xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//  <soap:Body>
	//	<CreateItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages"
	//				xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" 
	//				MessageDisposition="SaveOnly">
	//	  <Items>
	//		<t:Task>
	//		  <t:Subject>My task</t:Subject>
	//		  <t:DueDate>2006-10-26T21:32:52</t:DueDate>
	//		  <t:Status>NotStarted</t:Status>
	//		</t:Task>.
	//	  </Items>
	//	</CreateItem>
	//  </soap:Body>
	// </soap:Envelope>.
	
	ДанныеЗадачи = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьБланкДеревоСозданияДанных();
	
	// Subject
	// Body
	// DueDate
	// Importance
	// PercentComplete
	// StartDate
	// Status (только если завершена).
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеЗадачи.Строки, "t:Subject", Задача.Наименование);
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеЗадачи.Строки, "t:Body BodyType=""Text""", Задача.Описание);
	
	ВажностьMSExchange = ОпределитьВажностьЗадачиMSExchange(Задача);
	Если ЗначениеЗаполнено(ВажностьMSExchange) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеЗадачи.Строки, "t:Importance", ВажностьMSExchange);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача.ДатаИсполнения) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеЗадачи.Строки, "t:CompleteDate", CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(Задача.ДатаИсполнения, Настройка.СмещениеВремениВМинутах));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача.СрокИсполнения) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеЗадачи.Строки, "t:DueDate", CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(Задача.СрокИсполнения, Настройка.СмещениеВремениВМинутах));
	КонецЕсли;
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеЗадачи.Строки, "t:PercentComplete", Формат(Задача.CRM_ПроцентВыполненияЗадачи, "ЧН=0; ЧГ="));
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеЗадачи.Строки, "t:StartDate", CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(Задача.ДатаНачала, Настройка.СмещениеВремениВМинутах));
	
	Если Задача.Выполнена Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеЗадачи.Строки, "t:Status", "Completed");
	КонецЕсли;
	
	Возврат ДанныеЗадачи;
	
КонецФункции

Функция ЗагрузитьОбновитьЗадачуВMSExchange(Настройка, Подключение, СтрокаТаблицы, СтрокаОшибки = "", ДатаВремяНачалаОбмена = Неопределено)
	IDСозданногоИзмененногоОбъекта = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
		Если СтрокаТаблицы.Задача.ПометкаУдаления И Настройка.УдалятьПомеченныеНаУдаленияЗадачи Тогда
			Если CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьЭлемент(Подключение, СтрокаТаблицы.ID) Тогда
				CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Задача);
			КонецЕсли;
		Иначе
			// Здесь не передаем в ф-ю СтрокаОшибки чтобы не плодить ошибки, вида "такого объекта нет", которые могут сбить с
			// толку.
			ОбъектMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьЗадачу(Подключение, СтрокаТаблицы.ID,, "IdOnly");
			
			Если ТипЗнч(ОбъектMSExchange) = Тип("ТаблицаЗначений") И ОбъектMSExchange.Количество() > 0 Тогда
				Если Не Настройка.ЗадачиОбмениватьсяТолькоНовымиОбъектами Тогда
						Если СтрокаТаблицы.Владелец().Колонки.Найти("ChangeKey") = Неопределено Тогда
							СтрокаТаблицы.Владелец().Колонки.Добавить("ChangeKey");
						КонецЕсли;
						Если СтрокаТаблицы.Владелец().Колонки.Найти("ДанныеОбновления") = Неопределено Тогда
							СтрокаТаблицы.Владелец().Колонки.Добавить("ДанныеОбновления");
						КонецЕсли;
						СтрокаТаблицы.ChangeKey = ОбъектMSExchange[0].ChangeKey;
						СтрокаТаблицы.ДанныеОбновления = СформироватьДанныеДляСозданияОбновленияЗадачи(Настройка, СтрокаТаблицы.Задача, Истина);
						
						ОбновленоУспешно = CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьЗадачу(Подключение, СтрокаТаблицы, СтрокаОшибки);
						Если ОбновленоУспешно = Истина Тогда
							IDСозданногоИзмененногоОбъекта = СтрокаТаблицы.ID;
						Иначе
							IDСозданногоИзмененногоОбъекта = Неопределено;
						КонецЕсли;
					
				Иначе
					IDСозданногоИзмененногоОбъекта = СтрокаТаблицы.ID;
					
				КонецЕсли;
				
			Иначе
				// Такого объекта в MS Exchange уже нет.
				// Удаляем соответствие ID в регистре.
				CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Задача);
				
				// И создаем объект заново
				Если Не СтрокаТаблицы.Задача.ПометкаУдаления Тогда
					Данные = СформироватьДанныеДляСозданияОбновленияЗадачи(Настройка, СтрокаТаблицы.Задача);
					
					Результат = CRM_MSExchangeСерверЭкспортныеМетоды.СоздатьЗадачу(Подключение,,, Данные, СтрокаОшибки);
					Если Результат = Неопределено Тогда
						ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления задачи в MS Exchange: '") + СтрокаТаблицы.Задача.Наименование);
					Иначе
						CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Задача, Результат[0].ID, Результат[0].ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
						IDСозданногоИзмененногоОбъекта = Результат[0].ID;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Не СтрокаТаблицы.Задача.ПометкаУдаления Тогда
			Данные = СформироватьДанныеДляСозданияОбновленияЗадачи(Настройка, СтрокаТаблицы.Задача);
			
			Результат = CRM_MSExchangeСерверЭкспортныеМетоды.СоздатьЗадачу(Подключение,,, Данные, СтрокаОшибки);
			Если Результат = Неопределено Тогда
				ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления задачи в MS Exchange: '") + СтрокаТаблицы.Задача.Наименование);
			Иначе
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Задача, Результат[0].ID, Результат[0].ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
				IDСозданногоИзмененногоОбъекта = Результат[0].ID;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат IDСозданногоИзмененногоОбъекта;
	
КонецФункции

Функция ЗагрузитьОбновитьЗадачиВMSExchange(Настройка, Подключение, Данные, СтрокаОшибки = "", ДатаВремяНачалаОбмена = Неопределено) Экспорт
	МассивID = Новый Массив();
	Если НЕ ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		Возврат МассивID;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Данные Цикл
		IDСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьЗадачуВMSExchange(Настройка, Подключение, СтрокаТаблицы, СтрокаОшибки, ДатаВремяНачалаОбмена);
		Если ЗначениеЗаполнено(IDСозданногоИзмененногоОбъекта) Тогда
			МассивID.Добавить(IDСозданногоИзмененногоОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивID;
	
КонецФункции

Функция ЗагрузитьОбновитьЗадачуВ1С(Настройка, СтрокаТаблицы, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхЗадач, ДатаВремяНачалаОбмена = Неопределено)
	
	// Http://msdn.microsoft.com/en-us/library/aa563930(v=exchg.150).aspx.
	//<Task>
	//   <MimeContent/>
	//   <ItemId/>
	//   <ParentFolderId/>
	//   <ItemClass/>
	//   <Subject/>
	//   <Sensitivity/>
	//   <Body/>
	//   <Attachments/>
	//   <DateTimeReceived/>
	//   <Size/>
	//   <Categories/>
	//   <InReplyTo/>
	//   <IsSubmitted/>
	//   <IsDraft/>
	//   <IsFromMe/>
	//   <IsResend/>
	//   <IsUnmodified/>
	//   <InternetMessageHeaders/>
	//   <DateTimeSent/>
	//   <DateTimeCreated/>
	//   <ResponseObjects/>
	//   <ReminderDueBy/>
	//   <ReminderIsSet/>
	//   <ReminderMinutesBeforeStart/>
	//   <DisplayCc/>
	//   <DisplayTo/>
	//   <HasAttachments/>
	//   <ExtendedProperty/>
	//   <Culture/>
	//   <ActualWork/>
	//   <AssignedTime/>
	//   <BillingInformation/>
	//   <ChangeCount/>
	//   <Companies/>
	//   <CompleteDate/>
	//   <Contacts/>
	//   <DelegationState/>
	//   <Delegator/>
	//   <DueDate/>
	//   <IsAssignmentEditable/>
	//   <IsComplete/>
	//   <IsRecurring/>
	//   <IsTeamTask/>
	//   <Mileage/>
	//   <Owner/>
	//   <PercentComplete/>
	//   <Recurrence/>
	//   <StartDate/>
	//   <Status/>
	//   <StatusDescription/>
	//   <TotalWork/>
	//   <EffectiveRights/>
	//   <LastModifiedName/>
	//   <LastModifiedTime/>
	//   <IsAssociated/>
	//   <WebClientReadFormQueryString/>
	//   <WebClientEditFormQueryString/>
	//   <ConversationId/>
	//   <UniqueBody/>
	//</Task>
	
	ChangeKey = Неопределено;
	ЗадачаСсылка = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьОбъект1СПоID(Настройка.УчетнаяЗапись, СтрокаТаблицы.ID, ChangeKey);
	Если ЗначениеЗаполнено(ЗадачаСсылка) И МассивСсылокЗагруженныхОбновленныхЗадач.Количество() > 0 Тогда
		Если МассивСсылокЗагруженныхОбновленныхЗадач.Найти(ЗадачаСсылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСсылка) И ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСсылка) И ЗначениеЗаполнено(ChangeKey) И ChangeKey = СтрокаТаблицы.ChangeKey Тогда
		// Объект был загружен из 1С в прошлом сеансе обмена и не менялся - пропускаем его.
		Возврат ЗадачаСсылка;
	КонецЕсли;
	
	ОбновляетсяСуществующийОбъект = ЗначениеЗаполнено(ЗадачаСсылка);
	
	Если ОбновляетсяСуществующийОбъект И Настройка.ЗадачиОбмениватьсяТолькоНовымиОбъектами Тогда
		Возврат ЗадачаСсылка;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура();
	СтруктураЗаполнения = Новый Структура();
	
	Если ЗначениеЗаполнено(Настройка.УчетнаяЗапись.Пользователь) Тогда
		СтруктураЗаполнения.Вставить("Исполнитель",	Настройка.УчетнаяЗапись.Пользователь);
		СтруктураЗаполнения.Вставить("Автор",		Настройка.УчетнаяЗапись.Пользователь);
	Иначе
		// Не указан исполнитель (такого не должно быть).
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка		ЗадачаЗавершена = Булево(СтрокаТаблицы.IsComplete);
	Исключение	ЗадачаЗавершена = Ложь;
	КонецПопытки;
	
	Попытка		Status = СтрокаТаблицы.Status;
	Исключение	Status = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Status) Тогда
		Если Status = "Completed" Тогда
			ЗадачаЗавершена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗаполнения.Вставить("Выполнена", ЗадачаЗавершена);
	
	Если ЗадачаЗавершена Тогда
		СтруктураЗаполнения.Вставить("ПринятаКИсполнению", Истина);
	КонецЕсли;
	
	Попытка		StartDate = СтрокаТаблицы.StartDate;
	Исключение	StartDate = Неопределено;
	КонецПопытки;
	Если Не ЗначениеЗаполнено(StartDate) Тогда
		Попытка		StartDate = СтрокаТаблицы.DateTimeCreated;
		Исключение	StartDate = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(StartDate)Тогда
		// Задачи без дат пропускаем (таких не должно быть).
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка		DueDate = СтрокаТаблицы.DueDate;
	Исключение	DueDate = Неопределено;
	КонецПопытки;
	
	Попытка		CompleteDate = СтрокаТаблицы.CompleteDate;
	Исключение	CompleteDate = Неопределено;
	КонецПопытки;
	
	СтруктураЗаполнения.Вставить("Дата", CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(StartDate, Настройка.СмещениеВремениВМинутах));
	СтруктураЗаполнения.Вставить("ДатаНачала", CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(StartDate, Настройка.СмещениеВремениВМинутах));
	Если ЗначениеЗаполнено(DueDate) Тогда
		СтруктураЗаполнения.Вставить("СрокИсполнения", CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(DueDate, Настройка.СмещениеВремениВМинутах));
	КонецЕсли;
	Если ЗначениеЗаполнено(CompleteDate) Тогда
		СтруктураЗаполнения.Вставить("ДатаИсполнения", CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(CompleteDate, Настройка.СмещениеВремениВМинутах));
	КонецЕсли;
	
	Если	СтруктураЗаполнения.Свойство("ДатаНачала")
		И ТипЗнч(СтруктураЗаполнения.ДатаНачала) = Тип("Дата")
		И СтруктураЗаполнения.Свойство("ДатаИсполнения")
		И ТипЗнч(СтруктураЗаполнения.ДатаИсполнения) = Тип("Дата") Тогда
		//
		Если СтруктураЗаполнения.ДатаИсполнения < СтруктураЗаполнения.ДатаНачала Тогда
			СтруктураЗаполнения.ДатаИсполнения = СтруктураЗаполнения.ДатаНачала;
		КонецЕсли;
	КонецЕсли;
	
	Попытка		Subject = СтрокаТаблицы.Subject;
	Исключение	Subject = НСтр("ru = 'Тема не указана'");
	КонецПопытки;
	СтруктураЗаполнения.Вставить("Наименование", Subject);
	
	Попытка		Body = СтрокаТаблицы.Body;
	Исключение	Body = "";
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Body) Тогда
		Попытка		ТипОписанияHTML = (ВРег(СтрокаТаблицы.Атрибут_BodyType) = "HTML")
		Исключение	ТипОписанияHTML = Ложь;
		КонецПопытки;
		
		Если ТипОписанияHTML Тогда
			ТекстОписания = ТекстHTMLВТекст(Body);
		Иначе
			ТекстОписания = Body;
		КонецЕсли;
		
		СтруктураЗаполнения.Вставить("Описание", ТекстОписания);
	КонецЕсли;
	
	Попытка		Importance = СтрокаТаблицы.Importance;
	Исключение	Importance = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Importance) Тогда
		ВажностьЗадачи1С = ОпределитьВажностьЗадачи1С(Importance);
		Если ЗначениеЗаполнено(ВажностьЗадачи1С) Тогда
			ДанныеЗаполнения.Вставить("Важность", ВажностьЗадачи1С);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновляетсяСуществующийОбъект И ЗадачаСсылка.CRM_Личная Или Не ОбновляетсяСуществующийОбъект Тогда
		Попытка		PercentComplete = Число(СтрокаТаблицы.PercentComplete);
		Исключение	PercentComplete = 0;
		КонецПопытки;
		СтруктураЗаполнения.Вставить("CRM_ПроцентВыполненияЗадачи", PercentComplete);
	КонецЕсли;
	
	Если ТипЗнч(ЗадачаСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ДанныеЗаполнения);
	Иначе
		// Новая задача
		ЗадачаОбъект = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаОбъект.Заполнить(ДанныеЗаполнения);
		ЗадачаОбъект.CRM_Личная = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтруктураЗаполнения);
	
	Попытка
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьДатуПоследнейМодификации");
		
		Если ОбновляетсяСуществующийОбъект И ЗадачаЗавершена И Не ЗадачаСсылка.Выполнена Тогда
			// Временно ставим Выполнена = Ложь; и записываем задачу.
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.Записать();
			ЗадачаСсылка = ЗадачаОбъект.Ссылка;
			ЗадачаОбъект = Неопределено;
			
			// ... И завершаем задачу "правильно".
			CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаСсылка);
		Иначе
			ЗадачаОбъект.Записать();
			ЗадачаСсылка = ЗадачаОбъект.Ссылка;
		КонецЕсли;
	Исключение
		СтрОшибка = ОписаниеОшибки();
		ДобавитьВСтрокуОшибки(СтрокаОшибки, СтрОшибка);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОбновляетсяСуществующийОбъект Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьChangeKeyВСоответствииОбъектовMSExchange(Настройка.УчетнаяЗапись, ЗадачаСсылка, СтрокаТаблицы.ChangeKey);
	Иначе
		CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, ЗадачаСсылка, СтрокаТаблицы.ID, СтрокаТаблицы.ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
	КонецЕсли;
	
	Возврат ЗадачаСсылка;
	
КонецФункции

Функция ЗагрузитьОбновитьЗадачиВ1С(Настройка, Данные, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхЗадач = Неопределено, ДатаВремяНачалаОбмена = Неопределено) Экспорт
	Если МассивСсылокЗагруженныхОбновленныхЗадач = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхЗадач = Новый Массив();
	КонецЕсли;
	
	МассивСсылок = Новый Массив();
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		СсылкаСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьЗадачуВ1С(Настройка, СтрокаТаблицы, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхЗадач, ДатаВремяНачалаОбмена);
		Если ЗначениеЗаполнено(СсылкаСозданногоИзмененногоОбъекта) Тогда
			МассивСсылок.Добавить(СсылкаСозданногоИзмененногоОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Контакты

Функция СформироватьТекстЗапросаКонтакты(Настройка) Экспорт
//START Кайдашов 17/03/20 CRM - 408 	
	ТекстЗапроса = "";
	Если НЕ Настройка.СинхронизироватьКлиенты И Не Настройка.СинхронизироватьКонтактныеЛица Тогда
		Возврат "ВЫБРАТЬ NULL";
	КонецЕсли;
	бДобавленоРазрешенные = Ложь;
	Если Настройка.СинхронизироватьКлиенты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ" + ?(НЕ бДобавленоРазрешенные, " РАЗРЕШЕННЫЕ", "") + "
		|	Партнеры.Ссылка КАК Клиент" + ?(Настройка.СинхронизироватьКонтактныеЛица, ",", "") + "
		|" + ?(Настройка.СинхронизироватьКонтактныеЛица, "NULL КАК КонтактноеЛицо", "") + "
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
		|	ПО
		|		Партнеры.Ссылка = СоответствиеОбъектовMSExchange.Объект1С
		|		И СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
		|	
		|ГДЕ
		//|	Партнеры.ОсновнойМенеджер = &Пользователь
		|	НЕ Партнеры.ЭтоГруппа
		|	И
		|	(
		|		(ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, Партнеры.ДатаРегистрации) = ДАТАВРЕМЯ(1,1,1)
		|			ИЛИ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, Партнеры.ДатаРегистрации) >= &ДатаПоследнейМодификации)
		|	)
		|	И
		|	(
		|		ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) НЕ В (&МассивIDЗагруженныхОбновленныхКонтактов)
		|			И Партнеры.Ссылка НЕ В (&МассивСсылокЗагруженныхОбновленныхКонтактов)
		|	)
		|	
		|	// Если в регистре нет записи соответствия - пропускаем с пометкой удаления
		|	И НЕ (СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации ЕСТЬ NULL И Партнеры.ПометкаУдаления)
		|";
		бДобавленоРазрешенные = Истина;
	КонецЕсли;
	Если Настройка.СинхронизироватьКонтактныеЛица Тогда
		Если Настройка.СинхронизироватьКлиенты Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +
		"	
		|ВЫБРАТЬ" + ?(НЕ бДобавленоРазрешенные, " РАЗРЕШЕННЫЕ", "") + "
		|" + ?(Настройка.СинхронизироватьКлиенты, "NULL КАК Клиент,", "") + "
		|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СВЯЗЬ_С_ОБЪКТОМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК ОБЪЕКТЫ_УРОВНЕЙ_ДОСТУПА
		|			ПО СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = ОБЪЕКТЫ_УРОВНЕЙ_ДОСТУПА.ОбъектДоступа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ТТ
		|			ПО СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = МЕНЕДЖЕР_ТТ.Владелец
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ПАРТНЕР
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = ВЫРАЗИТЬ(МЕНЕДЖЕР_ПАРТНЕР.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ЮЛ
		|			ПО (ВЫРАЗИТЬ(СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи КАК Справочник.вогЮридическиеЛица).Партнер = ВЫРАЗИТЬ(МЕНЕДЖЕР_ЮЛ.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиРаспределительныхЦентров КАК СВЯЗИ_РЦ
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ТТ_РЦ
		|				ПО СВЯЗИ_РЦ.ОбъектСвязи = МЕНЕДЖЕР_ТТ_РЦ.Владелец
		|			ПО СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = СВЯЗИ_РЦ.РаспределительныйЦентр
		|		ПО (СВЯЗЬ_С_ОБЪКТОМ.КонтактноеЛицо = КонтактныеЛицаПартнеров.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированныеОбъектыДоступа КАК Т1
		|		ПО КонтактныеЛицаПартнеров.Ссылка = Т1.ОбъектДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
		|		ПО КонтактныеЛицаПартнеров.Ссылка = СоответствиеОбъектовMSExchange.Объект1С
		|			И (СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange)
		|ГДЕ
		|	(ЕСТЬNULL(МЕНЕДЖЕР_ТТ_РЦ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ТТ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ПАРТНЕР.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ЮЛ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ОБЪЕКТЫ_УРОВНЕЙ_ДОСТУПА.УровеньДоступа В (&CRM_ДоступныеПользователюУровниДоступа)
		|			ИЛИ Т1.ИсполнительДелегат В (&вогПодчиненныеСотрудники)
		|				И (ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, КонтактныеЛицаПартнеров.ДатаРегистрацииСвязи) = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, КонтактныеЛицаПартнеров.ДатаРегистрацииСвязи) >= &ДатаПоследнейМодификации)
		|				И (НЕ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) В (&МассивIDЗагруженныхОбновленныхКонтактов)
		|					И НЕ КонтактныеЛицаПартнеров.Ссылка В (&МассивСсылокЗагруженныхОбновленныхКонтактов))
		|				И НЕ(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации ЕСТЬ NULL
		|						И КонтактныеЛицаПартнеров.ПометкаУдаления))";
		бДобавленоРазрешенные = Истина;
	КонецЕсли;
	Возврат ТекстЗапроса;
//END Кайдашов crm-408

КонецФункции

Функция ПолучитьСинхронизируемыеКонтакты1С(Настройка, МассивIDЗагруженныхОбновленныхКонтактов = Неопределено, МассивСсылокЗагруженныхОбновленныхКонтактов = Неопределено) Экспорт
	Если Не Настройка.СинхронизироватьКлиенты И Не Настройка.СинхронизироватьКонтактныеЛица Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Эти массивы нужны чтобы исключить уже загруженные/обновленные ранее контакты для оптимизации по скорости.
	Если МассивIDЗагруженныхОбновленныхКонтактов = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхКонтактов = Новый Массив();
	КонецЕсли;
	Если МассивСсылокЗагруженныхОбновленныхКонтактов = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхКонтактов = Новый Массив();
	КонецЕсли;
	
 	ТекстЗапроса = СформироватьТекстЗапросаКонтакты(Настройка);
	
	Отбор = Настройка.ХранилищеОтборКонтактов.Получить();
	Если ТипЗнч(Отбор) <> Тип("ОтборКомпоновкиДанных") Тогда
		Отбор = Неопределено;
	КонецЕсли;
	
	ДатаПоследнейМодификации = Макс(Настройка.КонтактыМодифицированныеПосле, Настройка.ДатаПоследнегоОбменаКонтактов1СMSExchange);
	
	СоответствиеПараметры = Новый Соответствие();
	СоответствиеПараметры.Вставить("Пользователь", Настройка.УчетнаяЗапись.Пользователь);
//START Кайдашов 17/03/20 408
	СоответствиеПараметры.Вставить("вогПодчиненныеСотрудники",вогОбщегоНазначения.ПолучитьПодчиненныхСотрудников(Настройка.УчетнаяЗапись.Пользователь));
	СоответствиеПараметры.Вставить("CRM_ДоступныеПользователюУровниДоступа",CRM_УправлениеДоступомУровниДоступа.ПолучитьДоступныеУровниДоступа(Настройка.УчетнаяЗапись.Пользователь));
//END Кайдашов 408
	СоответствиеПараметры.Вставить("СерверMSExchange", Настройка.УчетнаяЗапись.СерверMSExchange);
	СоответствиеПараметры.Вставить("ДатаПоследнейМодификации", ДатаПоследнейМодификации);
	СоответствиеПараметры.Вставить("МассивIDЗагруженныхОбновленныхКонтактов", МассивIDЗагруженныхОбновленныхКонтактов);
	СоответствиеПараметры.Вставить("МассивСсылокЗагруженныхОбновленныхКонтактов", МассивСсылокЗагруженныхОбновленныхКонтактов);
	
	Таблица = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор, СоответствиеПараметры);
	
//START Кайдашов 17/03/20 408
	СтрокаКолонки = "";
	Для каждого Колонка из Таблица.Колонки цикл
		СтрокаКолонки = СтрокаКолонки +?(СтрокаКолонки<>"",",","")  +Колонка.Имя;
	КонецЦикла;
	Таблица.Свернуть(СтрокаКолонки);
//END Кайдашов 408
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.*
	|ПОМЕСТИТЬ
	|	Контакты
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|///////////////////////////////////////////////////////////////////////////
	|";
	Если Настройка.СинхронизироватьКлиенты Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контакты.Клиент КАК Контакт,
		|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) КАК ID,
		|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПоследнейМодификации
		|ИЗ
		|	Контакты КАК Контакты
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
		|	ПО
		|		Контакты.Клиент = СоответствиеОбъектовMSExchange.Объект1С
		|		И СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
		|ГДЕ
		|	(ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
		|		ИЛИ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ДАТАВРЕМЯ(1,1,1)) >= &ДатаПоследнейМодификации)
		|	И НЕ Контакты.Клиент ЕСТЬ NULL
		|";
	КонецЕсли;
	
	Если Настройка.СинхронизироватьКонтактныеЛица Тогда
		Если Настройка.СинхронизироватьКлиенты Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контакты.КонтактноеЛицо КАК Контакт,
		|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) КАК ID,
		|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПоследнейМодификации
		|ИЗ
		|	Контакты КАК Контакты
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
		|	ПО
		|		Контакты.КонтактноеЛицо = СоответствиеОбъектовMSExchange.Объект1С
		|		И СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
		|	
		|ГДЕ
		|	(ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
		|		ИЛИ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ДАТАВРЕМЯ(1,1,1)) >= &ДатаПоследнейМодификации)
		|	И НЕ Контакты.КонтактноеЛицо ЕСТЬ NULL
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	МВТ = Новый МенеджерВременныхТаблиц();
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("СерверMSExchange", Настройка.УчетнаяЗапись.СерверMSExchange);
	Запрос.УстановитьПараметр("ДатаПоследнейМодификации", ДатаПоследнейМодификации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСинхронизируемыеКонтактыMSExchange(Настройка, Подключение, СтрокаОшибки = "", МассивIDЗагруженныхОбновленныхКонтактов = Неопределено) Экспорт
	Если МассивIDЗагруженныхОбновленныхКонтактов = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхКонтактов = Новый Массив();
	КонецЕсли;
	
	Ограничение =
	"
	|<t:And>
	|	<t:IsEqualTo>
	|		<t:FieldURI FieldURI=""item:ItemClass""/>
	|			<t:FieldURIOrConstant>
	|				<t:Constant Value=""IPM.Contact""/>
	|			</t:FieldURIOrConstant>
	|	</t:IsEqualTo>
	|";
	
	ДатаПоследнейМодификации = Макс(Настройка.КонтактыМодифицированныеПосле, Настройка.ДатаПоследнегоОбменаКонтактовMSExchange1С);
	Если ЗначениеЗаполнено(ДатаПоследнейМодификации) Тогда
		ДатаВФорматеMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(ДатаПоследнейМодификации, Настройка.СмещениеВремениВМинутах);
		
		Ограничение = Ограничение + "
		|<t:Or>
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:DateTimeCreated""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|	
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:LastModifiedTime""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|</t:Or>
		|"
	КонецЕсли;
	
	Ограничение = Ограничение +
	"</t:And>
	|";
	
	Таблица = CRM_MSExchangeСерверЭкспортныеМетоды.НайтиКонтакты(Подключение,, Ограничение,,, "AllProperties", СтрокаОшибки);
	
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		Если МассивIDЗагруженныхОбновленныхКонтактов.Количество() > 0 И Таблица.Колонки.Найти("ID") <> Неопределено Тогда
			нИндекс = 0;
			Пока нИндекс < Таблица.Количество() Цикл
				Если МассивIDЗагруженныхОбновленныхКонтактов.Найти(Таблица[нИндекс].ID) = Неопределено Тогда
					нИндекс = нИндекс + 1;
				Иначе
					Таблица.Удалить(нИндекс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Таблица.Колонки.Найти("CompanyName") <> Неопределено Тогда
			Таблица.Сортировать("CompanyName Возр");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьСинхронизируемыеСпискиРассылокMSExchange(Настройка, Подключение, СтрокаОшибки = "")
	ДатаПоследнейМодификации = Настройка.ДатаПоследнегоОбменаСпискиРассылокMSExchange1С;
	
	Ограничение =
	"
	|<t:And>
	|	<t:IsEqualTo>
	|		<t:FieldURI FieldURI=""item:ItemClass""/>
	|			<t:FieldURIOrConstant>
	|				<t:Constant Value=""IPM.DistList""/>
	|			</t:FieldURIOrConstant>
	|	</t:IsEqualTo>
	|";
	
	Если ЗначениеЗаполнено(ДатаПоследнейМодификации) Тогда
		ДатаВФорматеMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(ДатаПоследнейМодификации, Настройка.СмещениеВремениВМинутах);
		
		Ограничение = Ограничение + "
		|<t:Or>
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:DateTimeCreated""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|	
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:LastModifiedTime""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|</t:Or>
		|"
	КонецЕсли;
	
	Ограничение = Ограничение +
	"</t:And>
	|";
	
	Таблица = CRM_MSExchangeСерверЭкспортныеМетоды.НайтиКонтакты(Подключение,, Ограничение,,, "AllProperties", СтрокаОшибки);
	
	Возврат Таблица;
	
КонецФункции

Функция СформироватьДанныеДляСозданияОбновленияКонтакта(Настройка, Контакт, ДляОбновления = Ложь)
	//<Contact>
	//   <MimeContent/>
	//   <ItemId/>
	//   <ParentFolderId/>
	//   <ItemClass/>
	//   <Subject/>
	//   <Sensitivity/>
	//   <Body/>
	//   <Attachments/>
	//   <DateTimeReceived/>
	//   <Size/>
	//   <Categories/>
	//   <Importance/>
	//   <InReplyTo/>
	//   <IsSubmitted/>
	//   <IsDraft/>
	//   <IsFromMe/>
	//   <IsResend/>
	//   <IsUnmodified/>
	//   <InternetMessageHeaders/>
	//   <DateTimeSent/>
	//   <DateTimeCreated/>
	//   <ResponseObjects/>
	//   <ReminderDueBy/>
	//   <ReminderIsSet/>
	//   <ReminderMinutesBeforeStart/>
	//   <DisplayCc/>
	//   <DisplayTo/>
	//   <HasAttachments/>
	//   <ExtendedProperty/>
	//   <Culture/>
	//   <EffectiveRights/>
	//   <LastModifiedName/>
	//   <LastModifiedTime/>
	//   <IsAssociated/>
	//   <WebClientReadFormQueryString/>
	//   <WebClientEditFormQueryString/>
	//   <ConversationId/>
	//   <UniqueBody/>
	//   <FileAs/>
	//   <FileAsMapping/>
	//   <DisplayName/>
	//   <GivenName/>
	//   <Initials/>
	//   <MiddleName/>
	//   <Nickname/>
	//   <CompleteName/>
	//   <CompanyName/>
	//   <EmailAddresses/>
	//   <PhysicalAddresses/>
	//   <PhoneNumbers/>
	//   <AssistantName/>
	//   <Birthday/>
	//   <BusinessHomePage/>
	//   <Children/>
	//   <Companies/>
	//   <ContactSource/>
	//   <Department/>
	//   <Generation/>
	//   <ImAddresses/>
	//   <JobTitle/>
	//   <Manager/>
	//   <Mileage/>
	//   <OfficeLocation/>
	//   <PostalAddressIndex/>
	//   <Profession/>
	//   <SpouseName/>
	//   <Surname/>
	//   <WeddingAnniversary/>
	//   <HasPicture/>
	//   <PhoneticFullName/>
	//   <PhoneticFirstName/>
	//   <PhoneticLastName/>
	//   <Alias/>
	//   <Notes/>
	//   <Photo/>
	//   <UserSMIMECertificate/>
	//   <MSExchangeCertificate/>
	//   <DirectoryId/>
	//   <ManagerMailbox/>
	//   <DirectReports/>
	//</Contact>

	// <soap:Envelope
	// xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	// xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	// xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	// xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//  <soap:Body>
	//	<CreateItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages" >
	//	  <SavedItemFolderId>
	//		<t:DistinguishedFolderId Id="contacts"/>
	//	  </SavedItemFolderId>
	//	  <Items>
	//		<t:Contact>
	//		  <t:FileAs>SampleContact</t:FileAs>
	//		  <t:GivenName>Tanja</t:GivenName>
	//		  <t:CompanyName>Blue Yonder Airlines</t:CompanyName>
	//		  <t:EmailAddresses>
	//			<t:Entry Key="EmailAddress1">tplate@example.com</t:Entry>
	//		  </t:EmailAddresses>
	//		  <t:PhysicalAddresses>
	//			<t:Entry Key="Business">
	//			  <t:Street>1234 56th Ave</t:Street>
	//			  <t:City>La Habra</t:City>
	//			  <t:State>CA</t:State>
	//			  <t:CountryOrRegion>USA</t: CountryOrRegion>
	//			</t:Entry>
	//		  </t:PhysicalAddresses>
	//		  <t:PhoneNumbers>
	//			<t:Entry Key="BusinessPhone">4255550199</t:Entry>
	//		  </t:PhoneNumbers>
	//		  <t:JobTitle>Manager</t:JobTitle>
	//		  <t:Surname>Plate</t:Surname>
	//		</t:Contact>
	//	  </Items>
	//	</CreateItem>
	//  </soap:Body>
	// </soap:Envelope>
	
	ДанныеКонтакта = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьБланкДеревоСозданияДанных();
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:FileAs", Контакт.Наименование);
	
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:DisplayName", Контакт.Наименование);
	
	Если (ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры")) И (Контакт.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:GivenName",	Контакт.Наименование);
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:GivenName",	Контакт.Наименование);
	Иначе	
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:GivenName",	Контакт.CRM_Имя);
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:MiddleName",	Контакт.CRM_Отчество);
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		//START Кайдашов 17/03/20 CRM-408
		//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:CompanyName", Контакт.Владелец.Наименование);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Разрешенные
		               |	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо,
		               |	вогСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи КАК ОбъектСвязи
		               |ИЗ
		               |	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК вогСвязиКонтактныхЛицСрезПоследних
		               |ГДЕ
		               |	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо = &КонтактноеЛицо";
		Запрос.УстановитьПараметр("КонтактноеЛицо",Контакт);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:CompanyName", Выборка.ОбъектСвязи.Наименование);
		КонецЕсли;	
		//END Кайдашов CRM-408	
	Иначе
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:CompanyName", "");
	КонецЕсли;
	
	// Адреса E-Mail
	СтрокиEMail = Контакт.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
	Если СтрокиEMail.Количество() > 0 Тогда
		СтрокаEmailAddresses = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:EmailAddresses", Неопределено);
		НомерСтроки = 1;
		Для Каждого СтрокаEMail Из СтрокиEMail Цикл
			CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаEmailAddresses.Строки, "t:Entry Key=""EmailAddress" + Формат(НомерСтроки, "ЧН=0; ЧГ=") + """", СтрокаEMail.Представление);
			НомерСтроки = НомерСтроки + 1;
			Если НомерСтроки > 3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ДляОбновления Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:EmailAddresses", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
	КонецЕсли;
	
	// Адреса
	Если Настройка.КИСинхронизироватьАдреса Тогда
		СтрокиАдрес = Контакт.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес));
		СтрокаPhysicalAddresses = Неопределено;
		Если СтрокиАдрес.Количество() > 0 Тогда
			бДобавлять = Ложь;
			Для Каждого СтрокаАдрес Из СтрокиАдрес Цикл
				Если ЗначениеЗаполнено(СтрокаАдрес.Представление) Тогда
					ВидАдресаMSExchange = ОпределитьВидАдресаMSExchange(СтрокаАдрес.Вид, Настройка);
					Если ВидАдресаMSExchange <> Неопределено Тогда
						бДобавлять = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если бДобавлять Тогда
				СтрокаPhysicalAddresses = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:PhysicalAddresses", Неопределено);
				Для Каждого СтрокаАдрес Из СтрокиАдрес Цикл
					Если ЗначениеЗаполнено(СтрокаАдрес.Представление) Тогда
						ВидАдресаMSExchange = ОпределитьВидАдресаMSExchange(СтрокаАдрес.Вид, Настройка);
						Если ВидАдресаMSExchange <> Неопределено Тогда
							СтрокаEntry = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаPhysicalAddresses.Строки, "t:Entry Key=""" + ВидАдресаMSExchange + """", Неопределено);
							CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаEntry.Строки, "t:Street", СтрокаАдрес.Представление);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если ДляОбновления И СтрокаPhysicalAddresses = Неопределено Тогда
			CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:PhysicalAddresses", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
		КонецЕсли;
	КонецЕсли;
	
	// Телефоны
	Если Настройка.КИСинхронизироватьТелефоны Тогда
		СтрокиТелефон = Контакт.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
		СтрокаPhoneNumbers = Неопределено;
		Если СтрокиТелефон.Количество() > 0 Тогда
			Для Каждого СтрокаТелефон Из СтрокиТелефон Цикл
				ВидТелефонаMSExchange = ОпределитьВидТелефонаMSExchange(СтрокаТелефон.Вид, Настройка);
				Если ВидТелефонаMSExchange = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаPhoneNumbers = Неопределено Тогда
					СтрокаPhoneNumbers = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:PhoneNumbers", Неопределено);
				КонецЕсли;
				CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаPhoneNumbers.Строки, "t:Entry Key=""" + ВидТелефонаMSExchange + """", СтрокаТелефон.Представление);
			КонецЦикла;
		КонецЕсли;
		Если ДляОбновления И СтрокаPhoneNumbers = Неопределено Тогда
			CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:PhoneNumbers", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
		КонецЕсли;
	КонецЕсли;
	
	// Имя реквизита менялось - перестраховка на всякий случай.
	Попытка
		ДатаРожденияКонтакта = Контакт.ДатаРождения;
	Исключение
		ДатаРожденияКонтакта = Дата("00010101");
	КонецПопытки;
	Если ЗначениеЗаполнено(ДатаРожденияКонтакта) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:Birthday", CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(ДатаРожденияКонтакта, Настройка.СмещениеВремениВМинутах));
	ИначеЕсли ДляОбновления Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:Birthday", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
	КонецЕсли;
	
	СтрокиВебСтраница = Контакт.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.ВебСтраница));
	бВебСтраницаДобавлена = Ложь;
	Если СтрокиВебСтраница.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(СтрокиВебСтраница[0].Представление) Тогда
			CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:BusinessHomePage", СтрокиВебСтраница[0].Представление);
			бВебСтраницаДобавлена = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ДляОбновления И Не бВебСтраницаДобавлена Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:BusinessHomePage", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
	КонецЕсли;
	Если НЕ (ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи")) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеКонтакта.Строки, "t:Surname", Контакт.CRM_Фамилия);
	КонецЕсли;
	Возврат ДанныеКонтакта;
	
КонецФункции

Функция ЗагрузитьОбновитьКонтактВMSExchange(Настройка, Подключение, СтрокаТаблицы, СтрокаОшибки = "", ЭтоКонтактыОбъекта = Ложь, ДатаВремяНачалаОбмена = Неопределено)
	IDСозданногоИзмененногоОбъекта = Неопределено;
	Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
		Если СтрокаТаблицы.Контакт.ПометкаУдаления И Настройка.УдалятьПомеченныеНаУдаленияКонтакты Тогда
			Если CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьЭлемент(Подключение, СтрокаТаблицы.ID) Тогда
				CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Контакт);
			КонецЕсли;
		Иначе
			// Здесь не передаем в ф-ю СтрокаОшибки чтобы не плодить ошибки, вида "такого объекта нет", которые могут сбить с
			// толку.
			ОбъектMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьКонтакт(Подключение, СтрокаТаблицы.ID, , "IdOnly");
			Если (ТипЗнч(ОбъектMSExchange) = Тип("ТаблицаЗначений")) И (ОбъектMSExchange.Количество() > 0) Тогда
				Если НЕ Настройка.КонтактыОбмениватьсяТолькоНовымиОбъектами Тогда
					// Если это контакт загружаемых событий и он существует, то не обновляем его.
					Если НЕ ЭтоКонтактыОбъекта Тогда
						Если СтрокаТаблицы.Владелец().Колонки.Найти("ChangeKey") = Неопределено Тогда
							СтрокаТаблицы.Владелец().Колонки.Добавить("ChangeKey");
						КонецЕсли;
						Если СтрокаТаблицы.Владелец().Колонки.Найти("ДанныеОбновления") = Неопределено Тогда
							СтрокаТаблицы.Владелец().Колонки.Добавить("ДанныеОбновления");
						КонецЕсли;
						СтрокаТаблицы.ChangeKey = ОбъектMSExchange[0].ChangeKey;
						СтрокаТаблицы.ДанныеОбновления = СформироватьДанныеДляСозданияОбновленияКонтакта(Настройка, СтрокаТаблицы.Контакт, Истина);
						ОбновленоУспешно = CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьКонтакт(Подключение, СтрокаТаблицы, СтрокаОшибки);
						Если ОбновленоУспешно = Истина Тогда
							IDСозданногоИзмененногоОбъекта = СтрокаТаблицы.ID;
						Иначе
							IDСозданногоИзмененногоОбъекта = Неопределено;
						КонецЕсли;
					КонецЕсли;
				Иначе
					IDСозданногоИзмененногоОбъекта = СтрокаТаблицы.ID;
				КонецЕсли;
			Иначе
				// Такого объекта в MS Exchange уже нет.
				// Удаляем соответствие ID в регистре.
				CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Контакт);
				// И создаем объект заново
				Если НЕ СтрокаТаблицы.Контакт.ПометкаУдаления Тогда
					Данные = СформироватьДанныеДляСозданияОбновленияКонтакта(Настройка, СтрокаТаблицы.Контакт);
					Результат = CRM_MSExchangeСерверЭкспортныеМетоды.СоздатьКонтакт(Подключение, , , Данные, СтрокаОшибки);
					Если Результат = Неопределено Тогда
						ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления контакта в MS Exchange: '") + СтрокаТаблицы.Контакт.Наименование);
					Иначе
						CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Контакт, Результат[0].ID, Результат[0].ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
						IDСозданногоИзмененногоОбъекта = Результат[0].ID;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ СтрокаТаблицы.Контакт.ПометкаУдаления Тогда
			Данные = СформироватьДанныеДляСозданияОбновленияКонтакта(Настройка, СтрокаТаблицы.Контакт);
			Результат = CRM_MSExchangeСерверЭкспортныеМетоды.СоздатьКонтакт(Подключение,,, Данные, СтрокаОшибки);
			Если Результат = Неопределено Тогда
				ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления контакта в MS Exchange: '") + СтрокаТаблицы.Контакт.Наименование);
			Иначе
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Контакт, Результат[0].ID, Результат[0].ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
				IDСозданногоИзмененногоОбъекта = Результат[0].ID;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат IDСозданногоИзмененногоОбъекта;
КонецФункции

Функция ЗагрузитьОбновитьКонтактыВMSExchange(Настройка, Подключение, Данные, СтрокаОшибки = "", ЭтоКонтактыОбъекта = Ложь, ДатаВремяНачалаОбмена = Неопределено) Экспорт
	МассивID = Новый Массив();
	
	Если Не ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		Возврат МассивID;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		IDСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьКонтактВMSExchange(Настройка, Подключение, СтрокаТаблицы, СтрокаОшибки, ЭтоКонтактыОбъекта, ДатаВремяНачалаОбмена);
		Если ЗначениеЗаполнено(IDСозданногоИзмененногоОбъекта) Тогда
			МассивID.Добавить(IDСозданногоИзмененногоОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивID;
	
КонецФункции

Функция ЗагрузитьОбновитьКонтактВ1С(Настройка, СтрокаТаблицы, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхКонтактов, ДатаВремяНачалаОбмена = Неопределено)
	ChangeKey = Неопределено;
	КонтактСсылка = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьОбъект1СПоID(Настройка.УчетнаяЗапись, СтрокаТаблицы.ID, ChangeKey);
	Если ЗначениеЗаполнено(КонтактСсылка) И НЕ (МассивСсылокЗагруженныхОбновленныхКонтактов.Найти(КонтактСсылка) = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КонтактСсылка) Тогда
		// Адреса E-Mail
		Попытка
			EmailAddresses = СтрокаТаблицы.EmailAddresses;
		Исключение
			EmailAddresses = Неопределено;
		КонецПопытки;
		Если ТипЗнч(EmailAddresses) = Тип("ТаблицаЗначений") И (EmailAddresses.Количество() > 0) Тогда
			Для Каждого СтрокаEmailAddresses Из EmailAddresses Цикл
				Попытка
					АдресEMail = СтрокаEmailAddresses.Entry;
				Исключение
					АдресEMail = Неопределено;
				КонецПопытки;
				Если ЗначениеЗаполнено(АдресEMail) Тогда
					КонтактСсылка = ПолучитьКонтактПоАдресу(АдресEMail, Настройка.УчетнаяЗапись.СерверMSExchange);
				КонецЕсли; 
				Если ЗначениеЗаполнено(КонтактСсылка) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	Если ЗначениеЗаполнено(КонтактСсылка) И НЕ (ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.Партнеры")) И НЕ (ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(КонтактСсылка) И ЗначениеЗаполнено(ChangeKey) И (ChangeKey = СтрокаТаблицы.ChangeKey) Тогда
		// Объект был загружен из 1С в прошлом сеансе обмена и не менялся - пропускаем его.
		Возврат КонтактСсылка;
	КонецЕсли;
	ОбновляетсяСуществующийОбъект = ЗначениеЗаполнено(КонтактСсылка);
	Если ОбновляетсяСуществующийОбъект И Настройка.КонтактыОбмениватьсяТолькоНовымиОбъектами Тогда
		Возврат КонтактСсылка;
	КонецЕсли;
	Фамилия				= Неопределено;
	Имя					= Неопределено;
	Отчество			= Неопределено;
	Наименование		= Неопределено;
	ПолноеНаименование	= Неопределено;
	ДатаРождения		= Неопределено;
	Попытка
		Наименование = СтрокаТаблицы.DisplayName;
		Если НЕ ЗначениеЗаполнено(Наименование) Тогда
			ВызватьИсключение "";
		КонецЕсли;
	Исключение
		Попытка
			Наименование = СтрокаТаблицы.FileAs;
		Исключение
			Попытка
				Наименование = СтрокаТаблицы.Subject;
			Исключение
				Наименование = "";
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;
	Попытка
		CompanyName = СтрокаТаблицы.CompanyName;
	Исключение
		CompanyName = Неопределено;
	КонецПопытки;
	ЭтоКонтактноеЛицо = ЗначениеЗаполнено(CompanyName);
	ВладелецКонтактногоЛица = Неопределено;
	Если ЭтоКонтактноеЛицо Тогда
		ВладелецКонтактногоЛица = Справочники.Партнеры.НайтиПоНаименованию(CompanyName);
		Если НЕ ЗначениеЗаполнено(ВладелецКонтактногоЛица) Тогда
			// Создаем владельца-организацию контактному лицу.
			ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
			ПартнерОбъект.Заполнить(Неопределено);
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			ПартнерОбъект.Наименование = CompanyName;
			ПартнерОбъект.НаименованиеПолное = CompanyName;
			Если ЗначениеЗаполнено(Настройка.ГруппаДляКонтактов) Тогда
				ПартнерОбъект.Родитель = Настройка.ГруппаДляКонтактов;
			КонецЕсли;
			Попытка
				ПартнерОбъект.Записать();
			Исключение
				СтрОшибка = ОписаниеОшибки();
				ДобавитьВСтрокуОшибки(СтрокаОшибки, СтрОшибка);
				Возврат Неопределено;
			КонецПопытки;
			ВладелецКонтактногоЛица = ПартнерОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Попытка
		CompleteName = СтрокаТаблицы.CompleteName;
	Исключение
		CompleteName = Неопределено;
	КонецПопытки;
 	Если (ТипЗнч(CompleteName) = Тип("ТаблицаЗначений")) И (CompleteName.Количество() > 0) Тогда
		//<CompleteName>
		//   <Title/> = обращение
		//   <FirstName/> имя
		//   <MiddleName/> отчество
		//   <LastName/> фамилия
		//   <Suffix/>
		//   <Initials/>
		//   <FullName/>
		//   <Nickname/>
		//   <YomiFirstName/>
		//   <YomiLastName/>
		//</CompleteName>
		ФИО = CompleteName[0];
		Попытка
			Если ЗначениеЗаполнено(ФИО.FirstName) Тогда
				Имя = ФИО.FirstName;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено(ФИО.LastName) Тогда
				Фамилия = ФИО.LastName;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено(ФИО.MiddleName) Тогда
				Отчество = ФИО.MiddleName;
			КонецЕсли;
		Исключение КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено(ФИО.FullName) Тогда
				ПолноеНаименование = ФИО.FullName;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЕсли;
	//   <Surname/> - CRM_Фамилия
	//   <MiddleName/> - CRM_Отчество
	//   <GivenName/> - CRM_Имя
	//   <DisplayName/> - Наименование
	//   <Birthday/> - ДатаРождения
	Если НЕ ЗначениеЗаполнено(Фамилия) Тогда
		Попытка
			Фамилия = СтрокаТаблицы.Surname;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Имя) Тогда
		Попытка
			Имя = СтрокаТаблицы.GivenName;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Отчество) Тогда
		Попытка
			Отчество = СтрокаТаблицы.MiddleName;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолноеНаименование) Тогда
		Попытка
			ПолноеНаименование = СтрокаТаблицы.DisplayName;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Попытка
		ДатаРождения = CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(СтрокаТаблицы.Birthday, Настройка.СмещениеВремениВМинутах);
	Исключение
		ДатаРождения = Дата("00010101");
	КонецПопытки;
	ЮрФизЛицо = Неопределено;
	Если ЭтоКонтактноеЛицо Тогда
		ЭтоКомпания = Ложь;
	Иначе
		ЭтоКомпания = (НЕ ЗначениеЗаполнено(Фамилия) И НЕ ЗначениеЗаполнено(Имя) И НЕ ЗначениеЗаполнено(Отчество));
		Если ЭтоКомпания Тогда
			ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		Иначе
			ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		КонецЕсли;
	КонецЕсли;
	//DisplayName - НаименованиеПолное
	//FileAs - Наименование
	
	СтруктураКонтакта = Новый Структура(
	"Наименование,
	|НаименованиеПолное,
	|ЮрФизЛицо,
	|ДатаРождения,
	|CRM_Имя,
	|CRM_Фамилия,
	|CRM_Отчество
	|");
	
	СтруктураКонтакта.Наименование			= Наименование;
	СтруктураКонтакта.НаименованиеПолное	= ПолноеНаименование;
	СтруктураКонтакта.ЮрФизЛицо				= ЮрФизЛицо;
	СтруктураКонтакта.ДатаРождения			= ДатаРождения;
	СтруктураКонтакта.CRM_Имя				= Имя;
	СтруктураКонтакта.CRM_Фамилия			= Фамилия;
	СтруктураКонтакта.CRM_Отчество			= Отчество;
	
	Если (ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"))
		И ЗначениеЗаполнено(КонтактСсылка) Тогда
		КонтактОбъект = КонтактСсылка.ПолучитьОбъект();
		Попытка
			КонтактОбъект.Заблокировать();
		Исключение
			// Объект в настоящий момент редактируется.
			Возврат Неопределено;
		КонецПопытки;
		КонтактОбъект.КонтактнаяИнформация.Очистить();
	Иначе
		Если ЭтоКонтактноеЛицо Тогда
			КонтактОбъект = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
			КонтактОбъект.Заполнить(Неопределено);
			КонтактОбъект.Владелец = ВладелецКонтактногоЛица;
		Иначе
			КонтактОбъект = Справочники.Партнеры.СоздатьЭлемент();
			КонтактОбъект.Заполнить(Неопределено);
			Если ЗначениеЗаполнено(Настройка.ГруппаДляКонтактов) Тогда
				КонтактОбъект.Родитель = Настройка.ГруппаДляКонтактов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(КонтактОбъект, СтруктураКонтакта);
	// Адреса E-Mail
	Попытка
		EmailAddresses = СтрокаТаблицы.EmailAddresses;
	Исключение
		EmailAddresses = Неопределено;
	КонецПопытки;
	Если ТипЗнч(EmailAddresses) = Тип("ТаблицаЗначений") И (EmailAddresses.Количество() > 0) Тогда
		Для Каждого СтрокаEmailAddresses Из EmailAddresses Цикл
			Попытка
				АдресEMail = СтрокаEmailAddresses.Entry;
			Исключение
				АдресEMail = Неопределено;
			КонецПопытки;
			Если ЗначениеЗаполнено(АдресEMail) Тогда
				НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
				НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				Если ЭтоКонтактноеЛицо Тогда
					НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
				ИначеЕсли ЭтоКомпания Тогда
					НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
				Иначе
					НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
				КонецЕсли;
				НоваяСтрока.Представление = АдресEMail;
				НоваяСтрока.АдресЭП = АдресEMail;
				Поз = Найти(АдресEMail, "@");
				Если Поз <> 0 Тогда
					НоваяСтрока.ДоменноеИмяСервера = Сред(АдресEMail, Поз + 1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	// Телефоны
	Попытка
		PhoneNumbers = СтрокаТаблицы.PhoneNumbers;
	Исключение
		PhoneNumbers = Неопределено;
	КонецПопытки;
	Если Настройка.КИСинхронизироватьТелефоны И (ТипЗнч(PhoneNumbers) = Тип("ТаблицаЗначений")) И (PhoneNumbers.Количество() > 0) Тогда
		//		  <t:PhoneNumbers>
		//			<t:Entry Key="BusinessPhone">4255550199</t:Entry>
		//		  </t:PhoneNumbers>
		
		// Варианты номера телефона
		// AssistantPhone
		// BusinessFax
		// BusinessPhone
		// BusinessPhone2
		// Callback
		// CarPhone
		// CompanyMainPhone
		// HomeFax
		// HomePhone
		// HomePhone2
		// Isdn
		// MobilePhone
		// OtherFax
		// OtherTelephone
		// Pager
		// PrimaryPhone
		// RadioPhone
		// Telex
		// TtyTddPhone
		Для Каждого СтрокаPhoneNumbers Из PhoneNumbers Цикл
			Попытка
				НомерТелефона = СтрокаPhoneNumbers.Entry;
			Исключение
				НомерТелефона = Неопределено;
			КонецПопытки;
			Если ЗначениеЗаполнено(НомерТелефона) Тогда
				Попытка
					ВидТелефонаMSExchange = СтрокаPhoneNumbers.Атрибут_Key;
				Исключение
					ВидТелефонаMSExchange = Неопределено;
				КонецПопытки;
				Если ЗначениеЗаполнено(ВидТелефонаMSExchange) Тогда
					ВидТелефона1С = CRM_MSExchangeВызовСервера.ОпределитьВидТелефона1С(ВидТелефонаMSExchange, ЭтоКонтактноеЛицо, ЭтоКомпания, Настройка);
					Если ЗначениеЗаполнено(ВидТелефона1С) Тогда
						НайденныеСтроки = КонтактОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ВидТелефона1С));
						Если НайденныеСтроки.Количество() > 0 Тогда
							// У нас не может быть несколько телефонов одинакового вида.
							Продолжить;
						КонецЕсли;
						НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
						Если ВидТелефона1С = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
							НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Факс;
						Иначе
							НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
						КонецЕсли;
						НоваяСтрока.Вид = ВидТелефона1С;
						НоваяСтрока.Представление = НомерТелефона;
						НоваяСтрока.НомерТелефона = НомерТелефона;
						НоваяСтрока.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ImAddresses решили писать как "Прочее", но пока нет предопределенного вида КИ "Другое" - отложено.
	//Попытка		ImAddresses = СтрокаТаблицы.ImAddresses;
	//Исключение	ImAddresses = Неопределено;
	// КонецПопытки;
	//Если ТипЗнч(ImAddresses) = Тип("ТаблицаЗначений") И ImAddresses.Количество() > 0 Тогда
	//	Для Каждого СтрокаImAddresses Из ImAddresses Цикл
	//		Попытка		АдресIM = СтрокаImAddresses.Entry;
	//		Исключение	АдресIM = Неопределено;
	//		КонецПопытки;
	//		Если ЗначениеЗаполнено(АдресIM) Тогда
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	// Адреса
	Попытка
		PhysicalAddresses = СтрокаТаблицы.PhysicalAddresses;
	Исключение
		PhysicalAddresses = Неопределено;
	КонецПопытки;
	Если Настройка.КИСинхронизироватьАдреса И (ТипЗнч(PhysicalAddresses) = Тип("ТаблицаЗначений")) И (PhysicalAddresses.Количество() > 0) Тогда
		Для Каждого СтрокаEntry Из PhysicalAddresses Цикл
			ТаблицаEntry = СтрокаEntry.Entry;
			Если (ТипЗнч(ТаблицаEntry) = Тип("ТаблицаЗначений")) И (ТаблицаEntry.Количество() > 0) Тогда
				ВидАдресаMSExchange = СтрокаEntry.Атрибут_Key;
				ВидАдреса1С = CRM_MSExchangeВызовСервера.ОпределитьВидАдреса1С(ВидАдресаMSExchange, ЭтоКонтактноеЛицо, ЭтоКомпания, Настройка);
				Если ВидАдреса1С <> Неопределено Тогда
					СтрокаАдрес = ТаблицаEntry[0];
					Попытка
						City = СтрокаАдрес.City;
					Исключение
						City = "";
					КонецПопытки;
					Попытка
						CountryOrRegion = СтрокаАдрес.CountryOrRegion;
					Исключение
						CountryOrRegion = "";
					КонецПопытки;
					Попытка
						PostalCode = СтрокаАдрес.PostalCode;
					Исключение
						PostalCode = "";
					КонецПопытки;
					Попытка
						State = СтрокаАдрес.State;
					Исключение
						State = "";
					КонецПопытки;
					Попытка
						Street = СтрокаАдрес.Street;
					Исключение
						Street = "";
					КонецПопытки;
					ПредставлениеАдреса = "";
					ПредставлениеАдреса = СлитьСтроки(ПредставлениеАдреса, Street);
					ПредставлениеАдреса = СлитьСтроки(ПредставлениеАдреса, City);
					ПредставлениеАдреса = СлитьСтроки(ПредставлениеАдреса, State);
					ПредставлениеАдреса = СлитьСтроки(ПредставлениеАдреса, PostalCode);
					ПредставлениеАдреса = СлитьСтроки(ПредставлениеАдреса, CountryOrRegion);
					Если ЗначениеЗаполнено(ПредставлениеАдреса) Тогда
						НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
						НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
						НоваяСтрока.Вид = ВидАдреса1С;
						НоваяСтрока.Представление = ПредставлениеАдреса;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Попытка
		BusinessHomePage = СтрокаТаблицы.BusinessHomePage;
	Исключение
		BusinessHomePage = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(BusinessHomePage) Тогда
		НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
		НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера;
		НоваяСтрока.Представление = BusinessHomePage;
	КонецЕсли;
	Попытка
		КонтактОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьДатуПоследнейМодификации");
		КонтактОбъект.Записать();
	Исключение
		СтрОшибка = ОписаниеОшибки();
		ДобавитьВСтрокуОшибки(СтрокаОшибки, СтрОшибка);
		Возврат Неопределено;
	КонецПопытки;
	Если ОбновляетсяСуществующийОбъект Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьChangeKeyВСоответствииОбъектовMSExchange(Настройка.УчетнаяЗапись, КонтактОбъект.Ссылка, СтрокаТаблицы.ChangeKey);
	Иначе
		CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, КонтактОбъект.Ссылка, СтрокаТаблицы.ID, СтрокаТаблицы.ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
	КонецЕсли;
	Возврат КонтактОбъект.Ссылка;
КонецФункции

Функция ЗагрузитьОбновитьКонтактыВ1С(Настройка, Данные, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхКонтактов = Неопределено, ДатаВремяНачалаОбмена = Неопределено) Экспорт
	Если МассивСсылокЗагруженныхОбновленныхКонтактов = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхКонтактов = Новый Массив();
	КонецЕсли;
	МассивСсылок = Новый Массив();
	Для Каждого СтрокаТаблицы Из Данные Цикл
		Попытка
			ItemClass = СтрокаТаблицы.ItemClass;
		Исключение
			ItemClass = Неопределено;
		КонецПопытки;
		Если (ItemClass = Неопределено) ИЛИ (НРег(ItemClass) = "ipm.contact") Тогда
			// Проверка на всякий случай - если вдруг попадется группа контактов (такого быть не должно).
			СсылкаСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьКонтактВ1С(Настройка, СтрокаТаблицы, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхКонтактов, ДатаВремяНачалаОбмена);
			Если ЗначениеЗаполнено(СсылкаСозданногоИзмененногоОбъекта) Тогда
				МассивСсылок.Добавить(СсылкаСозданногоИзмененногоОбъекта);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// События

Функция СформироватьТекстЗапросаСобытия(Настройка) Экспорт
	Если НЕ Настройка.СинхронизироватьСобытия Тогда
		Возврат "ВЫБРАТЬ NULL";
	КонецЕсли;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(Соответствия.Событие, События.Событие) КАК Событие,
	               |	ЕСТЬNULL(Соответствия.ID, НЕОПРЕДЕЛЕНО) КАК ID,
	               |	ЕСТЬNULL(Соответствия.Дата, События.Дата) КАК ДатаПоследнейМодификации
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		CRM_СоответствиеОбъектовMSExchange.Объект1С КАК Событие,
	               |		CRM_СоответствиеОбъектовMSExchange.ID КАК ID,
	               |		CRM_СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации КАК Дата
	               |	ИЗ
	               |		РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК CRM_СоответствиеОбъектовMSExchange
	               |	ГДЕ
	               |		CRM_СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
	               |		И CRM_СоответствиеОбъектовMSExchange.Объект1С ССЫЛКА Документ.CRM_Мероприятие
	               |		И CRM_СоответствиеОбъектовMSExchange.УчетнаяЗапись = &УчетнаяЗапись
	               |		И CRM_СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации >= &ДатаПоследнейМодификации) КАК Соответствия
	               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			CRM_Мероприятие.Ссылка КАК Событие,
	               |			CRM_Мероприятие.Дата КАК Дата
	               |		ИЗ
	               |			Документ.CRM_Мероприятие КАК CRM_Мероприятие
	               |		ГДЕ
	               |			CRM_Мероприятие.Ответственный = &Ответственный
	               |			И CRM_Мероприятие.Дата >= &ДатаПоследнейМодификации
	               |			И НЕ(CRM_Мероприятие.ПометкаУдаления
	               |						ИЛИ CRM_Мероприятие.Состояние.ТипСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ТипыСостоянийСобытий.Завершено))) КАК События
	               |		ПО Соответствия.Событие = События.Событие
	               |ГДЕ
	               |	НЕ ЕСТЬNULL(Соответствия.ID, НЕОПРЕДЕЛЕНО) В (&МассивIDЗагруженныхОбновленныхСобытий)
	               |	И НЕ ЕСТЬNULL(Соответствия.Событие, События.Событие) В (&МассивСсылокЗагруженныхОбновленныхСобытий)";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьУчастниковСобытия1С(СтрокаТаблицы, Настройка, СоответствияАдресовИКонтактов)
	СерверMSExchange	= Настройка.УчетнаяЗапись.СерверMSExchange;
	бОбщийКалендарь		= ЗначениеЗаполнено(Настройка.EMailAddessУчетнойЗаписиОбщегоКалендаря);
	МассивУчастников	= Новый Массив();
	Организатор			= Неопределено;
	Попытка
		Organizer = СтрокаТаблицы.Organizer;
	Исключение
		Organizer = Неопределено;
	КонецПопытки;
	АдресEMailОрганизатора = Неопределено;
	Если (ТипЗнч(Organizer) = Тип("ТаблицаЗначений")) И (Organizer.Количество() > 0) Тогда
		Для Каждого СтрокаMailBox Из Organizer Цикл
			Попытка
				Mailbox = СтрокаMailbox.Mailbox;
			Исключение
				Mailbox = Неопределено;
			КонецПопытки;
			Если ТипЗнч(Mailbox) = Тип("ТаблицаЗначений") Тогда
				Для Каждого ЭлементMailbox Из Mailbox Цикл
					Попытка
						АдресEMailОрганизатора = ЭлементMailbox.EmailAddress;
					Исключение
						АдресEMailОрганизатора = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(АдресEMailОрганизатора) Тогда
						Организатор = ПолучитьКонтактПоАдресу(АдресEMailОрганизатора, СерверMSExchange, СоответствияАдресовИКонтактов);
					КонецЕсли;
					Если ЗначениеЗаполнено(Организатор) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организатор) И бОбщийКалендарь Тогда
		Если НЕ (НРег(СокрЛП(АдресEMailОрганизатора)) = НРег(СокрЛП(Настройка.УчетнаяЗапись.АдресEMail))) Тогда
			Организатор				= Настройка.УчетнаяЗапись.Пользователь;
			АдресEMailОрганизатора	= Настройка.УчетнаяЗапись.АдресEMail;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организатор) И НЕ (ТипЗнч(Организатор) = Тип("СправочникСсылка.Пользователи")) Тогда
		МассивУчастников.Добавить(Новый Структура("Участник,Адрес", Организатор, АдресEMailОрганизатора));
		Организатор = Неопределено;
	КонецЕсли;
	Для НомерСтроки = 1 По 2 Цикл
		Если НомерСтроки = 1 Тогда
			ИмяAttendees = "RequiredAttendees";
		Иначе
			ИмяAttendees = "OptionalAttendees";
		КонецЕсли;
		Попытка
			Attendees = СтрокаТаблицы[ИмяAttendees];
		Исключение
			Attendees = Неопределено;
		КонецПопытки;
		Если (ТипЗнч(Attendees) = Тип("ТаблицаЗначений")) И (Attendees.Количество() > 0) Тогда
			Для Каждого СтрокаAttendee Из Attendees Цикл
				Попытка
					Attendee = СтрокаAttendee.Attendee;
				Исключение
					Attendee = Неопределено;
				КонецПопытки;
				Если (ТипЗнч(Attendee) = Тип("ТаблицаЗначений")) И (Attendee.Количество() > 0) Тогда
					Для Каждого СтрокаMailbox Из Attendee Цикл
						Попытка
							Mailbox = СтрокаMailbox.Mailbox;
						Исключение
							Mailbox = Неопределено;
						КонецПопытки;
						Если (ТипЗнч(Mailbox) = Тип("ТаблицаЗначений")) И (Mailbox.Количество() > 0) Тогда
							Для Каждого ЭлементMailbox Из Mailbox Цикл
								Попытка
									АдресEMail = ЭлементMailbox.EmailAddress;
								Исключение
									АдресEMail = Неопределено;
								КонецПопытки;
								Если ЗначениеЗаполнено(АдресEMail) Тогда
									Участник = ПолучитьКонтактПоАдресу(АдресEMail, СерверMSExchange, СоответствияАдресовИКонтактов);
									Если ЗначениеЗаполнено(Участник) Тогда
										МассивУчастников.Добавить(Новый Структура("Участник,Адрес", Участник, АдресEMail));
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Новый Структура("Организатор,Участники", Новый Структура("Участник,Адрес", Организатор, АдресEMailОрганизатора), МассивУчастников);
КонецФункции

Функция СобытиеУжеСинхронизировано(Событие, УчетнаяЗапись)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект1С",	 		Событие);
	Запрос.УстановитьПараметр("УчетнаяЗапись", 		УчетнаяЗапись);
	Запрос.УстановитьПараметр("СерверMSExchange",	УчетнаяЗапись.СерверMSExchange);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СоответствиеОбъектовMSExchange.ID
	               |ИЗ
	               |	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК CRM_СоответствиеОбъектовMSExchange
	               |ГДЕ
	               |	CRM_СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
	               |	И CRM_СоответствиеОбъектовMSExchange.Объект1С = &Объект1С
	               |	И CRM_СоответствиеОбъектовMSExchange.УчетнаяЗапись = &УчетнаяЗапись";
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции	
	
Функция ПолучитьСинхронизируемыеСобытия1С(Настройка, МассивIDЗагруженныхОбновленныхСобытий = Неопределено, МассивСсылокЗагруженныхОбновленныхСобытий = Неопределено) Экспорт
	Если НЕ Настройка.СинхронизироватьСобытия Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если МассивIDЗагруженныхОбновленныхСобытий = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхСобытий = Новый Массив();
	КонецЕсли;
	Если МассивСсылокЗагруженныхОбновленныхСобытий = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхСобытий = Новый Массив();
	КонецЕсли;
	ТекстЗапроса = СформироватьТекстЗапросаСобытия(Настройка);
	Отбор = Настройка.ХранилищеОтборСобытий.Получить();
	Если НЕ (ТипЗнч(Отбор) = Тип("ОтборКомпоновкиДанных")) Тогда
		Отбор = Неопределено;
	КонецЕсли;
	СоответствиеПараметры = Новый Соответствие();
	СоответствиеПараметры.Вставить("УчетнаяЗапись", 							Настройка.УчетнаяЗапись);
	СоответствиеПараметры.Вставить("Ответственный", 							Настройка.УчетнаяЗапись.Пользователь);
	СоответствиеПараметры.Вставить("СерверMSExchange",							Настройка.УчетнаяЗапись.СерверMSExchange);
	Если Настройка.ДатаПоследнегоОбменаСобытий1СMSExchange = Дата('00010101') Тогда
		СоответствиеПараметры.Вставить("ДатаПоследнейМодификации",				ТекущаяДатаСеанса());
	Иначе
		СоответствиеПараметры.Вставить("ДатаПоследнейМодификации",				Настройка.ДатаПоследнегоОбменаСобытий1СMSExchange);
	КонецЕсли;
	СоответствиеПараметры.Вставить("МассивIDЗагруженныхОбновленныхСобытий",		МассивIDЗагруженныхОбновленныхСобытий);
	СоответствиеПараметры.Вставить("МассивСсылокЗагруженныхОбновленныхСобытий",	МассивСсылокЗагруженныхОбновленныхСобытий);
	ТаблицаСобытий = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор, СоответствиеПараметры);
	КоличествоСобытий = ТаблицаСобытий.Количество();
	Для НомерСтроки = 1 По КоличествоСобытий Цикл
		СтрокаТаблицы = ТаблицаСобытий[КоличествоСобытий - НомерСтроки];
		Если СтрокаТаблицы.ID = Неопределено Тогда
			Если СобытиеУжеСинхронизировано(СтрокаТаблицы.Событие, Настройка.УчетнаяЗапись) Тогда
				ТаблицаСобытий.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаСобытий;
КонецФункции

Функция ПолучитьКонтактыСобытий1С(Настройка, СинхронизируемыеСобытия, МассивIDЗагруженныхОбновленныхКонтактов = Неопределено, МассивСсылокЗагруженныхОбновленныхКонтактов = Неопределено) Экспорт
	Если НЕ (ТипЗнч(СинхронизируемыеСобытия) = Тип("ТаблицаЗначений")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если МассивIDЗагруженныхОбновленныхКонтактов = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхКонтактов = Новый Массив();
	КонецЕсли;
	Если МассивСсылокЗагруженныхОбновленныхКонтактов = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхКонтактов = Новый Массив();
	КонецЕсли;
	МассивСобытий = СинхронизируемыеСобытия.ВыгрузитьКолонку("Событие");
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КонтактыСобытий.Контакт КАК Контакт,
	               |	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) КАК ID,
	               |	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоследнейМодификации
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СторонниеЛица.Ссылка КАК Событие,
	               |		СторонниеЛица.Партнер КАК Контакт,
	               |		ВЫРАЗИТЬ(СторонниеЛица.Партнер КАК Справочник.Партнеры).ПометкаУдаления КАК КонтактПометкаУдаления
	               |	ИЗ
	               |		Документ.CRM_Мероприятие.СторонниеЛица КАК СторонниеЛица
	               |	ГДЕ
	               |		СторонниеЛица.Партнер ССЫЛКА Справочник.Партнеры
	               |		И НЕ СторонниеЛица.Ссылка.ПометкаУдаления
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СторонниеЛица.Ссылка,
	               |		СторонниеЛица.КонтактноеЛицо,
	               |		ВЫРАЗИТЬ(СторонниеЛица.КонтактноеЛицо КАК Справочник.КонтактныеЛицаПартнеров).ПометкаУдаления
	               |	ИЗ
	               |		Документ.CRM_Мероприятие.СторонниеЛица КАК СторонниеЛица
	               |	ГДЕ
	               |		СторонниеЛица.КонтактноеЛицо ССЫЛКА Справочник.КонтактныеЛицаПартнеров
	               |		И НЕ СторонниеЛица.Ссылка.ПометкаУдаления
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СвоиЛица.Ссылка,
	               |		СвоиЛица.Лицо,
	               |		ВЫРАЗИТЬ(СвоиЛица.Лицо КАК Справочник.Пользователи).ПометкаУдаления
	               |	ИЗ
	               |		Документ.CRM_Мероприятие.СвоиЛица КАК СвоиЛица
	               |	ГДЕ
	               |		СвоиЛица.Лицо ССЫЛКА Справочник.Пользователи
	               |		И НЕ СвоиЛица.Ссылка.ПометкаУдаления) КАК КонтактыСобытий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
	               |		ПО КонтактыСобытий.Контакт = СоответствиеОбъектовMSExchange.Объект1С
	               |			И (СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange)
	               |ГДЕ
	               |	КонтактыСобытий.Событие В(&МассивСобытий)
	               |	И КонтактыСобытий.Контакт <> НЕОПРЕДЕЛЕНО
	               |	И КонтактыСобытий.Контакт <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И КонтактыСобытий.Контакт <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	               |	И КонтактыСобытий.Контакт <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |	И НЕ КонтактыСобытий.Контакт В (&МассивСсылокЗагруженныхОбновленныхКонтактов)
	               |	И НЕ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) В (&МассивIDЗагруженныхОбновленныхКонтактов)
	               |	И НЕ(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации ЕСТЬ NULL 
	               |				И КонтактыСобытий.КонтактПометкаУдаления)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СерверMSExchange",								Настройка.УчетнаяЗапись.СерверMSExchange);
	Запрос.УстановитьПараметр("МассивСобытий",									МассивСобытий);
	Запрос.УстановитьПараметр("МассивСсылокЗагруженныхОбновленныхКонтактов",	МассивСсылокЗагруженныхОбновленныхКонтактов);
	Запрос.УстановитьПараметр("МассивIDЗагруженныхОбновленныхКонтактов",		МассивIDЗагруженныхОбновленныхКонтактов);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьСинхронизируемыеСобытияMSExchange(Настройка, Подключение, СтрокаОшибки = "", МассивIDЗагруженныхОбновленныхСобытий = Неопределено) Экспорт
	Если МассивIDЗагруженныхОбновленныхСобытий = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхСобытий = Новый Массив();
	КонецЕсли;
	
	Ограничение = "";
	
	// calendar:CalendarItemType
	
	// Пропускаем:
	// - черновики
	//
	Ограничение = Ограничение + "
	|<t:And>
	|<t:IsEqualTo>
	|	<t:FieldURI FieldURI=""item:IsDraft""/>
	|		<t:FieldURIOrConstant>
	|			<t:Constant Value=""false""/>
	|		</t:FieldURIOrConstant>
	|</t:IsEqualTo>
	|
	|";
	
	ДатаПоследнейМодификации = Макс(Настройка.СобытияМодифицированныеПосле, Настройка.ДатаПоследнегоОбменаСобытийMSExchange1С);
	Если ЗначениеЗаполнено(ДатаПоследнейМодификации) Тогда
		ДатаВФорматеMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(ДатаПоследнейМодификации, Настройка.СмещениеВремениВМинутах);
		
		Ограничение = Ограничение + "
		|
		|<t:Or>
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:DateTimeCreated""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|	
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:LastModifiedTime""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|</t:Or>
		|
		|"
	КонецЕсли;
	
	Ограничение = Ограничение + 
	"
	|</t:And>
	|";
	
	ТаблицаID = CRM_MSExchangeСерверЭкспортныеМетоды.НайтиСобытия(Подключение,, Ограничение,,, "IdOnly", СтрокаОшибки);
	Если ТипЗнч(ТаблицаID) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаID.Количество() > 0 Тогда
			Если МассивIDЗагруженныхОбновленныхСобытий.Количество() > 0 Тогда
				нИндекс = 0;
				Пока нИндекс < ТаблицаID.Количество() Цикл
					Если МассивIDЗагруженныхОбновленныхСобытий.Найти(ТаблицаID[нИндекс].ID) = Неопределено Тогда
						нИндекс = нИндекс + 1;
					Иначе
						ТаблицаID.Удалить(нИндекс);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТаблицаID.Количество() > 0 Тогда
				МассивID = ТаблицаID.ВыгрузитьКолонку("ID");
				Таблица = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьСобытие(Подключение, МассивID,, "AllProperties", СтрокаОшибки);
				
				Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") И Таблица.Колонки.Найти("CalendarItemType") <> Неопределено Тогда
					// Удаляем периодические события.
					// Сделать это в Restriction (пока не получилось)!
					нИндекс = 0;
					Пока нИндекс < Таблица.Количество() Цикл
						Если НРег(Таблица[нИндекс].CalendarItemType) = "occurrence" Или НРег(Таблица[нИндекс].CalendarItemType) = "recurringmaster" Тогда
							Таблица.Удалить(нИндекс);
						Иначе
							нИндекс = нИндекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Возврат Таблица;
			Иначе
				Возврат Новый ТаблицаЗначений();
			КонецЕсли;
		Иначе
			Возврат Новый ТаблицаЗначений();
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКонтактыСобытийMSExchange(Настройка, Подключение, СинхронизируемыеСобытия, СтрокаОшибки = "") Экспорт
	
	
	
КонецФункции

Функция ОпределитьВажностьСобытияMSExchange(Событие)
	Возврат Неопределено;
КонецФункции

Функция ОпределитьВажностьСобытия1С(ВажностьMSExchange)
	Если ВажностьMSExchange = "Low" Тогда
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Низкая;
	ИначеЕсли ВажностьMSExchange = "Normal" Тогда
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ИначеЕсли ВажностьMSExchange = "High" Тогда
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Высокая;
	Иначе
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	КонецЕсли;
КонецФункции

Функция ОпределитьВажностьЗадачи1С(ВажностьMSExchange)
	Если ВажностьMSExchange = "Low" Тогда
		Возврат Перечисления.ВариантыВажностиЗадачи.Низкая;
	ИначеЕсли ВажностьMSExchange = "Normal" Тогда
		Возврат Перечисления.ВариантыВажностиЗадачи.Обычная;
	ИначеЕсли ВажностьMSExchange = "High" Тогда
		Возврат Перечисления.ВариантыВажностиЗадачи.Высокая;
	Иначе
		Возврат Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
КонецФункции

Функция ОпределитьВажностьЗадачиMSExchange(Задача)
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если Задача.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
			Возврат "Low";
		ИначеЕсли Задача.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
			Возврат "Normal";
		ИначеЕсли Задача.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
			Возврат "High";
		Иначе
			Возврат "Normal";
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗакрывающийТегКлиент()
	Возврат " ***/";
КонецФункции

Функция ПолучитьОткрывающийТегКлиент()
	Возврат "/*** " + НСтр("ru = 'Клиент:'") + " ";
КонецФункции

Функция ПолучитьОткрывающийТегУчастниковСобытия()
	Возврат "/*** " + НСтр("ru = 'Участники события:'");
КонецФункции

Функция ПолучитьЗакрывающийТегУчастниковСобытия()
	Возврат "***/";
КонецФункции

Функция СформироватьСписокУчастников(Событие)
	МассивСотрудников = Новый Массив();
	Для Каждого СтрокаТаблицы Из Событие.СвоиЛица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Лицо) Тогда
			МассивСотрудников.Добавить(Новый Структура("Участник", СтрокаТаблицы.Лицо));
		КонецЕсли;
	КонецЦикла;
	МассивСтороннихУчастников = Новый Массив();
	//Если ЗначениеЗаполнено(Событие.КонтактноеЛицо) Тогда
	//	МассивСтороннихУчастников.Добавить(Новый Структура("Участник", Событие.КонтактноеЛицо));
	//ИначеЕсли ЗначениеЗаполнено(Событие.Партнер) Тогда
	//	МассивСтороннихУчастников.Добавить(Новый Структура("Участник", Событие.Партнер));
	//КонецЕсли;
	Для Каждого СтрокаТаблицы Из Событие.СторонниеЛица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
			МассивСтороннихУчастников.Добавить(Новый Структура("Участник", СтрокаТаблицы.КонтактноеЛицо));
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
			МассивСтороннихУчастников.Добавить(Новый Структура("Участник", СтрокаТаблицы.Партнер));
		КонецЕсли;
	КонецЦикла;
	СтрУчастники = "";
	Если МассивСотрудников.Количество() > 0 Тогда
		СтрУчастники = СтрУчастники + ?(ЗначениеЗаполнено(СтрУчастники), "
		|", "") +
		НСтр("ru = 'Сотрудники:'");
		Для Каждого ЭлементМассива Из МассивСотрудников Цикл
			СтрУчастники = СтрУчастники + ?(ЗначениеЗаполнено(СтрУчастники), "
			|", "") +
			"  - " + Строка(ЭлементМассива.Участник);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтороннихУчастников.Количество() > 0 Тогда
		СтрУчастники = СтрУчастники + ?(ЗначениеЗаполнено(СтрУчастники), "
		|
		|", "") +
		НСтр("ru = 'Сторонние участники:'");
		Для Каждого ЭлементМассива Из МассивСтороннихУчастников Цикл
			СтрУчастники = СтрУчастники + ?(ЗначениеЗаполнено(СтрУчастники), Символы.ПС, "") +
				"  - " + Строка(ЭлементМассива.Участник);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрУчастники) Тогда
		Возврат "";
	КонецЕсли;
	СтрРезультат = ПолучитьОткрывающийТегУчастниковСобытия() + "
	|
	|" + СтрУчастники + "
	|
	|" + ПолучитьЗакрывающийТегУчастниковСобытия();
	Возврат СтрРезультат;
КонецФункции

Функция СформироватьДанныеДляСозданияОбновленияСобытия(Настройка, Событие, ДляОбновления = Ложь)
	//<CalendarItem>
	//   <MimeContent/>
	//   <ItemId/>
	//   <ParentFolderId/>
	//   <ItemClass/>
	//   <Subject/>
	//   <Sensitivity/>
	//   <Body/>
	//   <Attachments/>
	//   <DateTimeReceived/>
	//   <Size/>
	//   <Categories/>
	//   <InReplyTo/>
	//   <IsSubmitted/>
	//   <IsDraft/>
	//   <IsFromMe/>
	//   <IsResend/>
	//   <IsUnmodified/>
	//   <InternetMessageHeaders/>
	//   <DateTimeSent/>
	//   <DateTimeCreated/>
	//   <ResponseObjects/>
	//   <ReminderDueBy/>
	//   <ReminderIsSet/>
	//   <ReminderMinutesBeforeStart/>
	//   <DisplayCc/>
	//   <DisplayTo/>
	//   <HasAttachments/>
	//   <ExtendedProperty/>
	//   <Culture/>
	//   <Start/>
	//   <End/>
	//   <OriginalStart/>
	//   <IsAllDayEvent/>
	//   <LegacyFreeBusyStatus/>
	//   <Location/>
	//   <When/>
	//   <IsMeeting/>
	//   <IsCancelled/>
	//   <IsRecurring/>
	//   <MeetingRequestWasSent/>
	//   <IsResponseRequested/>
	//   <CalendarItemType/>
	//   <MyResponseType/>
	//   <Organizer/>
	//   <RequiredAttendees/>
	//   <OptionalAttendees/>
	//   <Resources/>
	//   <ConflictingMeetingCount/>
	//   <AdjacentMeetingCount/>
	//   <ConflictingMeetings/>
	//   <AdjacentMeetings/>
	//   <Duration/>
	//   <TimeZone/>
	//   <AppointmentReplyTime/>
	//   <AppointmentSequenceNumber/>
	//   <AppointmentState/>
	//   <Recurrence/>
	//   <FirstOccurrence/>
	//   <LastOccurrence/>
	//   <ModifiedOccurrences/>
	//   <DeletedOccurrences/>
	//   <MeetingTimeZone/>
	//   <StartTimeZone/>
	//   <EndTimeZone/>
	//   <ConferenceType/>
	//   <AllowNewTimeProposal/>
	//   <IsOnlineMeeting/>
	//   <MeetingWorkspaceUrl/>
	//   <NetShowUrl/>
	//   <EffectiveRights/>
	//   <LastModifiedName/>
	//   <LastModifiedTime/>
	//   <IsAssociated/>
	//   <WebClientReadFormQueryString/>
	//   <WebClientEditFormQueryString/>
	//   <ConversationId/>
	//   <UniqueBody/>
	//</CalendarItem>
	//
	//
	// <Soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	//			   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	//			   xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
	//			   xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">
	//  <soap:Body>
	//	<CreateItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages"
	//				xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" 
	//				SendMeetingInvitations="SendToAllAndSaveCopy" >
	//	  <SavedItemFolderId>
	//		<t:DistinguishedFolderId Id="calendar"/>
	//	  </SavedItemFolderId>
	//	  <Items>
	//		<t:CalendarItem xmlns="http://schemas.microsoft.com/exchange/services/2006/types">
	//		  <Subject>Planning Meeting</Subject>
	//		  <Body BodyType="Text">Plan the agenda for next week's meeting.</Body>
	//		  <ReminderIsSet>true</ReminderIsSet>
	//		  <ReminderMinutesBeforeStart>60</ReminderMinutesBeforeStart>
	//		  <Start>2006-11-02T14:00:00</Start>.
	//		  <End>2006-11-02T15:00:00</End>
	//		  <IsAllDayEvent>false</IsAllDayEvent>
	//		  <LegacyFreeBusyStatus>Busy</LegacyFreeBusyStatus>
	//		  <Location>Conference Room 721</Location>
	//		  <RequiredAttendees>
	//			<Attendee>
	//			  <Mailbox>
	//				<EmailAddress>User1@example.com</EmailAddress>
	//			  </Mailbox>
	//			</Attendee>
	//			<Attendee>
	//			  <Mailbox>
	//				<EmailAddress>User2@example.com</EmailAddress>
	//			  </Mailbox>
	//			</Attendee>
	//		  </RequiredAttendees>
	//		</t:CalendarItem>
	//	  </Items>
	//	</CreateItem>
	//  </soap:Body>
	// </soap:Envelope>
	
	ДанныеСобытия = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьБланкДеревоСозданияДанных();
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Subject", Событие.Тема);
	
	ТекстОписания = Событие.Описание;
	ТекстУчастники = СформироватьСписокУчастников(Событие);
	Если ЗначениеЗаполнено(ТекстУчастники) Тогда
		ТекстОписания = ТекстОписания + ?(ЗначениеЗаполнено(ТекстОписания), "
		|
		|", "");
		ТекстОписания = ТекстОписания + ТекстУчастники;
	КонецЕсли;
	//START Кайдашов 25/12/19 CRM-58
	Если ТипЗнч(Событие) = Тип("ДокументСсылка.CRM_Мероприятие") тогда
		ЗапросДопИнфа = Новый Запрос;
		ЗапросДопИнфа.Текст = "ВЫБРАТЬ
		                      |	CRM_МероприятиевогПрограмма.НомерСтроки КАК НомерСтроки,
		                      |	CRM_МероприятиевогПрограмма.ВремяПлан КАК ВремяПлан,
		                      |	CRM_МероприятиевогПрограмма.ВремяФакт КАК ВремяФакт,
		                      |	CRM_МероприятиевогПрограмма.Содержание КАК Содержание,
		                      |	CRM_МероприятиевогПрограмма.ТребуетПринятияРешения КАК ТребуетПринятияРешения,
		                      |	CRM_МероприятиевогПрограмма.Исполнитель как Ответственный
		                      |ИЗ
		                      |	Документ.CRM_Мероприятие.вогПрограмма КАК CRM_МероприятиевогПрограмма
		                      |ГДЕ
		                      |	CRM_МероприятиевогПрограмма.Ссылка = &Ссылка";
		ЗапросДопИнфа.УстановитьПараметр("Ссылка",Событие);
		РезультатДопИнфа = ЗапросДопИнфа.Выполнить();
		Если НЕ РезультатДопИнфа.Пустой() тогда
			ВыборкаДопИнфа = РезультатДопИнфа.Выбрать();
			ТекстОписания = ТекстОписания + Символы.ПС + Символы.ВК + "	Повестка мероприятия ";
			Пока ВыборкаДопИнфа.Следующий() цикл
				ТекстОписания = ТекстОписания + Символы.ПС + Символы.ВК + "	Пункт №"+Формат(ВыборкаДопИнфа.НомерСтроки,"ЧДЦ=0; ЧГ=0")+" "+СокрЛП(ВыборкаДопИнфа.Содержание) 
				+ ?(ЗначениеЗаполнено(ВыборкаДопИнфа.Ответственный)," Ответственный " + ВыборкаДопИнфа.Ответственный,"");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//END Кайдашов CRM-58
	
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Body BodyType=""Text""", ТекстОписания);
	ВажностьMSExchange = ОпределитьВажностьСобытияMSExchange(Событие);
	Если ЗначениеЗаполнено(ВажностьMSExchange) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Importance", ВажностьMSExchange);
	КонецЕсли;
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "ReminderIsSet", "true");
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "ReminderMinutesBeforeStart", "60");
	
	// TODO: проверить, нужно ли это поле
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Culture", "ru-RU");
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Start", CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(Событие.Дата, Настройка.СмещениеВремениВМинутах));
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "End",   CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(Событие.ОкончаниеМероприятия, Настройка.СмещениеВремениВМинутах));
	
	НаВесьДень = Событие.НаВесьДень;
	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "IsAllDayEvent", ?(НаВесьДень, "true", "false"));
	Если ЗначениеЗаполнено(Событие.Помещение) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Location", Строка(Событие.Помещение));
	ИначеЕсли ЗначениеЗаполнено(Событие.Место) Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Location", Событие.Место);
	ИначеЕсли ДляОбновления Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Location", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
	КонецЕсли;
	
	МассивУчастники = Новый Массив();
	Для Каждого СтрокаТаблицы Из Событие.СторонниеЛица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Адрес) И СтрокаТаблицы.ОтправлятьПоПочте Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) И (МассивУчастники.Найти(СтрокаТаблицы.КонтактноеЛицо) = Неопределено) Тогда
				МассивУчастники.Добавить(СтрокаТаблицы.КонтактноеЛицо);
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Партнер) И (МассивУчастники.Найти(СтрокаТаблицы.Партнер) = Неопределено) Тогда
				МассивУчастники.Добавить(СтрокаТаблицы.Партнер);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Событие.СвоиЛица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Лицо) И ТипЗнч(СтрокаТаблицы.Лицо) = Тип("СправочникСсылка.Пользователи") 
			И ЗначениеЗаполнено(СтрокаТаблицы.Адрес) И МассивУчастники.Найти(СтрокаТаблицы.Лицо) = Неопределено Тогда
			МассивУчастники.Добавить(СтрокаТаблицы.Лицо);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУчастники.Количество() > 0 Тогда
		//		  <RequiredAttendees>
		//			<Attendee>
		//			  <Mailbox>
		//				<EmailAddress>User1@example.com</EmailAddress>
		//			  </Mailbox>
		//			</Attendee>
		//			<Attendee>
		//			  <Mailbox>
		//				<EmailAddress>User2@example.com</EmailAddress>
		//			  </Mailbox>
		//			</Attendee>
		//		  </RequiredAttendees>
		
		СтрокаRequiredAttendees = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "RequiredAttendees", Неопределено);
		
		Для Каждого Участник Из МассивУчастники Цикл
			EMailУчастника	= ПолучитьEMailКонтакта(Участник);
			
			//Если ЗначениеЗаполнено(IDУчастника) Или ЗначениеЗаполнено(EMailУчастника) Тогда
			Если ЗначениеЗаполнено(EMailУчастника) Тогда
				СтрокаAttendee = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаRequiredAttendees.Строки, "Attendee", Неопределено);
				
				СтрокаMailbox = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаAttendee.Строки, "Mailbox", Неопределено);
				
				// <MailboxType>Mailbox or PublicDL or PrivateDL or Contact</MailboxType>
				
				Если ЗначениеЗаполнено(EMailУчастника) Тогда
					CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "Name", Строка(Участник));
					CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "EmailAddress", EMailУчастника);
					//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "MailboxType", "Contact");
				КонецЕсли;
				
				
				//Если ЗначениеЗаполнено(IDУчастника) Тогда
				//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "MailboxType", "Mailbox");
				//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "ItemId Id=""" + IDУчастника + """", "");
				//КонецЕсли;
				
				// ResponseType:
				// Unknown
				// Organizer
				// Tentative
				// Accept
				// Decline
				// NoResponseReceived
				
				//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаAttendee.Строки, "ResponseType", "Organizer");
				
			КонецЕсли;
		КонецЦикла;
		Если СтрокаRequiredAttendees.Строки.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
	ИначеЕсли ДляОбновления Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "RequiredAttendees", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
		
	КонецЕсли;
	
	СмещениеВремениСтрокой = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьСмещениеВремениСтрокойДляMSExchange(Настройка.СмещениеВремениВМинутах);
	Если ЗначениеЗаполнено(СмещениеВремениСтрокой) Тогда
		СтрокаMeetingTimeZone = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "MeetingTimeZone TimeZoneName=""(UTC" + СмещениеВремениСтрокой + ")""", Неопределено);
		CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMeetingTimeZone.Строки, "BaseOffset", CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьBaseOffsetdurationСтрокой(Настройка.СмещениеВремениВМинутах));
	КонецЕсли;
	
	Возврат ДанныеСобытия;
	
КонецФункции

Функция ЗагрузитьОбновитьСобытиеВMSExchange(Настройка, Подключение, СтрокаТаблицы, СтрокаОшибки = "", ДатаВремяНачалаОбмена = Неопределено)
	IDСозданногоИзмененногоОбъекта = Неопределено;
	Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
		Если СтрокаТаблицы.Событие.ПометкаУдаления И Настройка.УдалятьПомеченныеНаУдаленияСобытия Тогда
			CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьЭлемент(Подключение, СтрокаТаблицы.ID, , "SendToAllAndSaveCopy");
			CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Событие);
		Иначе
			// Здесь не передаем в ф-ю СтрокаОшибки чтобы не плодить ошибки, вида "такого объекта нет", которые могут сбить с
			// толку.
			ОбъектMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьСобытие(Подключение, СтрокаТаблицы.ID, , "AllProperties");
			Если (ТипЗнч(ОбъектMSExchange) = Тип("ТаблицаЗначений")) И (ОбъектMSExchange.Количество() > 0) Тогда
				// Обработка ситуации со сменой ответственного в событии 1С.
				Если НЕ (СтрокаТаблицы.Событие.Ответственный = Настройка.УчетнаяЗапись.Пользователь) Тогда
					CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьЭлемент(Подключение, СтрокаТаблицы.ID, , "SendToAllAndSaveCopy");
					CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Событие);
					ОбъектMSExchange				= Неопределено;
					IDСозданногоИзмененногоОбъекта	= Неопределено;
				ИначеЕсли Настройка.СобытияОбмениватьсяТолькоНовымиОбъектами Тогда
					IDСозданногоИзмененногоОбъекта = СтрокаТаблицы.ID;
				Иначе
					Если СтрокаТаблицы.Владелец().Колонки.Найти("ChangeKey") = Неопределено Тогда
						СтрокаТаблицы.Владелец().Колонки.Добавить("ChangeKey");
					КонецЕсли;
					Если СтрокаТаблицы.Владелец().Колонки.Найти("ДанныеОбновления") = Неопределено Тогда
						СтрокаТаблицы.Владелец().Колонки.Добавить("ДанныеОбновления");
					КонецЕсли;
					СтрокаТаблицы.ChangeKey = ОбъектMSExchange[0].ChangeKey;
					СтрокаТаблицы.ДанныеОбновления = СформироватьДанныеДляСозданияОбновленияСобытия(Настройка, СтрокаТаблицы.Событие, Истина);
					Если СтрокаТаблицы.ДанныеОбновления = Неопределено Тогда
						ОбновленоУспешно = Ложь;
					ИначеЕсли СтрокаТаблицы.Событие.Состояние.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено Тогда
						ДополнительныеДанные = Новый Структура("SendMeetingInvitationsOrCancellations", "SendToNone");
						ОбновленоУспешно = CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьСобытие(Подключение, СтрокаТаблицы, СтрокаОшибки, ДополнительныеДанные);
					Иначе	
						ОбновленоУспешно = CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьСобытие(Подключение, СтрокаТаблицы, СтрокаОшибки);
					КонецЕсли;	
					Если ОбновленоУспешно = Истина Тогда
						IDСозданногоИзмененногоОбъекта = СтрокаТаблицы.ID;
					Иначе
						IDСозданногоИзмененногоОбъекта = Неопределено;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Такого объекта в MS Exchange уже нет (возможно, сменился ответственный события в 1С).
				// Удаляем соответствие ID в регистре.
				CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Событие);
				// Создаем объект заново
				Если НЕ СтрокаТаблицы.Событие.ПометкаУдаления И (СтрокаТаблицы.Событие.Ответственный = Настройка.УчетнаяЗапись.Пользователь) Тогда
					Данные = СформироватьДанныеДляСозданияОбновленияСобытия(Настройка, СтрокаТаблицы.Событие);
					Если Данные = Неопределено Тогда
						Результат = Неопределено;
					Иначе	
						Результат = CRM_MSExchangeСерверЭкспортныеМетоды.СоздатьСобытие(Подключение,,, Данные, СтрокаОшибки);
					КонецЕсли;	
					Если Результат = Неопределено Тогда
						ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления события в MS Exchange: '") + Строка(СтрокаТаблицы.Событие) + НСтр("ru = ' Возможно, у клиента(ов) не указан ни один e-mail.'"));
					Иначе
						CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Событие, Результат[0].ID, Результат[0].ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
						IDСозданногоИзмененногоОбъекта = Результат[0].ID;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ (Настройка.УчетнаяЗапись.Пользователь = СтрокаТаблицы.Событие.Ответственный) Тогда
			Возврат Неопределено;
		ИначеЕсли НЕ СтрокаТаблицы.Событие.ПометкаУдаления Тогда
			Данные = СформироватьДанныеДляСозданияОбновленияСобытия(Настройка, СтрокаТаблицы.Событие);
			Если Данные = Неопределено Тогда
				Результат = Неопределено;
			Иначе	
				Результат = CRM_MSExchangeСерверЭкспортныеМетоды.СоздатьСобытие(Подключение,,, Данные, СтрокаОшибки);
			КонецЕсли;	
			Если Результат = Неопределено Тогда
				ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления события в MS Exchange: '") + Строка(СтрокаТаблицы.Событие) + НСтр("ru = ' Возможно, у клиента(ов) не указан ни один e-mail.'"));
			Иначе
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.Событие, Результат[0].ID, Результат[0].ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
				IDСозданногоИзмененногоОбъекта = Результат[0].ID;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат IDСозданногоИзмененногоОбъекта;
КонецФункции

Функция ЗагрузитьОбновитьСобытияВMSExchange(Настройка, Подключение, Данные, СтрокаОшибки = "", ДатаВремяНачалаОбмена = Неопределено) Экспорт
	// Массив идентификаторов созданных/измененных событий.
	МассивID = Новый Массив();
	Если НЕ (ТипЗнч(Данные) = Тип("ТаблицаЗначений")) Тогда
		Возврат МассивID;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Данные Цикл
		IDСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьСобытиеВMSExchange(Настройка, Подключение, СтрокаТаблицы, СтрокаОшибки, ДатаВремяНачалаОбмена);
		Если ЗначениеЗаполнено(IDСозданногоИзмененногоОбъекта) Тогда
			МассивID.Добавить(IDСозданногоИзмененногоОбъекта);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивID;
КонецФункции

Функция ЗагрузитьОбновитьСобытиеВ1С(Настройка, СтрокаТаблицы, СтрокаОшибки, СоответствияАдресовИКонтактов, МассивСсылокЗагруженныхОбновленныхСобытий, ДатаВремяНачалаОбмена = Неопределено)
	//<CalendarItem>
	//   <MimeContent/>
	//   <ItemId/>
	//   <ParentFolderId/>
	//   <ItemClass/>
	//   <Subject/>
	//   <Sensitivity/>
	//   <Body/>
	//   <Attachments/>
	//   <DateTimeReceived/>
	//   <Size/>
	//   <Categories/>
	//   <InReplyTo/>
	//   <IsSubmitted/>
	//   <IsDraft/>
	//   <IsFromMe/>
	//   <IsResend/>
	//   <IsUnmodified/>
	//   <InternetMessageHeaders/>
	//   <DateTimeSent/>
	//   <DateTimeCreated/>
	//   <ResponseObjects/>
	//   <ReminderDueBy/>
	//   <ReminderIsSet/>
	//   <ReminderMinutesBeforeStart/>
	//   <DisplayCc/>
	//   <DisplayTo/>
	//   <HasAttachments/>
	//   <ExtendedProperty/>
	//   <Culture/>
	//   <Start/>
	//   <End/>
	//   <OriginalStart/>
	//   <IsAllDayEvent/>
	//   <LegacyFreeBusyStatus/>
	//   <Location/>
	//   <When/>
	//   <IsMeeting/>
	//   <IsCancelled/>
	//   <IsRecurring/>
	//   <MeetingRequestWasSent/>
	//   <IsResponseRequested/>
	//   <CalendarItemType/>
	//   <MyResponseType/>
	//   <Organizer/>
	//   <RequiredAttendees/>
	//   <OptionalAttendees/>
	//   <Resources/>
	//   <ConflictingMeetingCount/>
	//   <AdjacentMeetingCount/>
	//   <ConflictingMeetings/>
	//   <AdjacentMeetings/>
	//   <Duration/>
	//   <TimeZone/>
	//   <AppointmentReplyTime/>
	//   <AppointmentSequenceNumber/>
	//   <AppointmentState/>
	//   <Recurrence/>
	//   <FirstOccurrence/>
	//   <LastOccurrence/>
	//   <ModifiedOccurrences/>
	//   <DeletedOccurrences/>
	//   <MeetingTimeZone/>
	//   <StartTimeZone/>
	//   <EndTimeZone/>
	//   <ConferenceType/>
	//   <AllowNewTimeProposal/>
	//   <IsOnlineMeeting/>
	//   <MeetingWorkspaceUrl/>
	//   <NetShowUrl/>
	//   <EffectiveRights/>
	//   <LastModifiedName/>
	//   <LastModifiedTime/>
	//   <IsAssociated/>
	//   <WebClientReadFormQueryString/>
	//   <WebClientEditFormQueryString/>
	//   <ConversationId/>
	//   <UniqueBody/>
	//</CalendarItem>
	ChangeKey = Неопределено;
	СобытиеСсылка = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьОбъект1СПоID(Настройка.УчетнаяЗапись, СтрокаТаблицы.ID, ChangeKey);
	Если ЗначениеЗаполнено(СобытиеСсылка) И (МассивСсылокЗагруженныхОбновленныхСобытий.Количество() > 0) Тогда
		Если НЕ (МассивСсылокЗагруженныхОбновленныхСобытий.Найти(СобытиеСсылка) = Неопределено) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СобытиеСсылка) И НЕ (ТипЗнч(СобытиеСсылка) = Тип("ДокументСсылка.CRM_Мероприятие")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(СобытиеСсылка) И ЗначениеЗаполнено(ChangeKey) И (ChangeKey = СтрокаТаблицы.ChangeKey) Тогда
		// Объект был загружен из 1С в прошлом сеансе обмена и не менялся - пропускаем его.
		Возврат СобытиеСсылка;
	КонецЕсли;
	ОбновляетсяСуществующийОбъект = ЗначениеЗаполнено(СобытиеСсылка);
	Если ОбновляетсяСуществующийОбъект И Настройка.СобытияОбмениватьсяТолькоНовымиОбъектами Тогда
		Возврат СобытиеСсылка;
	КонецЕсли;
	ДанныеЗаполнения	= Новый Структура();
	СтруктураЗаполнения	= Новый Структура();
	Попытка
		Start = СтрокаТаблицы.Start;
	Исключение
		Start = Неопределено;
	КонецПопытки;
	Попытка
		End = СтрокаТаблицы.End;
	Исключение
		End = Неопределено;
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(Start) ИЛИ НЕ ЗначениеЗаполнено(End) Тогда
		// События без дат пропускаем (таких не должно быть).
		Возврат Неопределено;
	КонецЕсли;
	ДанныеЗаполнения.Вставить("Дата", CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(Start, Настройка.СмещениеВремениВМинутах));
	ДанныеЗаполнения.Вставить("ОкончаниеМероприятия", CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(End, Настройка.СмещениеВремениВМинутах));
	Попытка
		Subject = СтрокаТаблицы.Subject;
	Исключение
		Subject = НСтр("ru = 'Тема не указана'");
	КонецПопытки;
	СтруктураЗаполнения.Вставить("Тема", Subject);
	Попытка
		Body = СтрокаТаблицы.Body;
	Исключение
		Body = "";
	КонецПопытки;
	Если ЗначениеЗаполнено(Body) Тогда
		Попытка
			ТипОписанияHTML = (ВРег(СтрокаТаблицы.Атрибут_BodyType) = "HTML")
		Исключение
			ТипОписанияHTML = Ложь;
		КонецПопытки;
		Если ТипОписанияHTML Тогда
			ТекстОписания = ТекстHTMLВТекст(Body);
		Иначе
			ТекстОписания = Body;
		КонецЕсли;
		ПозицияКлиент = Найти(ТекстОписания, ПолучитьОткрывающийТегКлиент());
		Если ПозицияКлиент > 0 Тогда
			СтрКлиент = Сред(ТекстОписания, ПозицияКлиент);
			ПозицияКлиентКонец = Найти(СтрКлиент, ПолучитьЗакрывающийТегКлиент());
			Если ПозицияКлиентКонец > 0 Тогда
				СтрКлиент = Лев(СтрКлиент, ПозицияКлиентКонец + СтрДлина(ПолучитьЗакрывающийТегКлиент()) - 1);
				ТекстОписания = СокрЛ(СтрЗаменить(ТекстОписания, СтрКлиент, ""));
			КонецЕсли;
		КонецЕсли;
		ПозицияУчастники = Найти(ТекстОписания, ПолучитьОткрывающийТегУчастниковСобытия());
		Если ПозицияУчастники > 0 Тогда
			СтрУчастники = Сред(ТекстОписания, ПозицияУчастники);
			ПозицияУчастникиКонец = Найти(СтрУчастники, ПолучитьЗакрывающийТегУчастниковСобытия());
			Если ПозицияУчастникиКонец > 0 Тогда
				СтрУчастники = Лев(СтрУчастники, ПозицияУчастникиКонец + СтрДлина(ПолучитьЗакрывающийТегУчастниковСобытия()) - 1);
				ТекстОписания = СокрП(СтрЗаменить(ТекстОписания, СтрУчастники, ""));
			КонецЕсли;
		КонецЕсли;
		СтруктураЗаполнения.Вставить("Описание", ТекстОписания);
	КонецЕсли;
	Попытка
		Importance = СтрокаТаблицы.Importance;
	Исключение
		Importance = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Importance) Тогда
		ВажностьСобытия1С = ОпределитьВажностьСобытия1С(Importance);
		Если ЗначениеЗаполнено(ВажностьСобытия1С) Тогда
			ДанныеЗаполнения.Вставить("Важность", ВажностьСобытия1С);
		КонецЕсли;
	КонецЕсли;
	Попытка
		IsAllDayEvent = СтрокаТаблицы.IsAllDayEvent;
		Если НРег(IsAllDayEvent) = "true" Тогда
			IsAllDayEvent = Истина;
		Иначе
			IsAllDayEvent = Ложь;
		КонецЕсли;
	Исключение
		IsAllDayEvent = Ложь;
	КонецПопытки;
	ДанныеЗаполнения.Вставить("НаВесьДень", IsAllDayEvent);
	Попытка
		IsCancelled = СтрокаТаблицы.IsCancelled;
		Если НРег(IsCancelled) = "true" Тогда
			IsCancelled = Истина;
		Иначе
			IsCancelled = Ложь;
		КонецЕсли;
	Исключение
		IsCancelled = Ложь;
	КонецПопытки;
	Если IsCancelled Тогда
		ДанныеЗаполнения.Вставить("Состояние", Справочники.CRM_СостоянияСобытий.Отменено);
	Иначе
		ДанныеЗаполнения.Вставить("Состояние", Справочники.CRM_СостоянияСобытий.Запланировано);
	КонецЕсли;
	Попытка
		IsMeeting = Булево(СтрокаТаблицы.IsMeeting);
	Исключение
		IsMeeting = Ложь;
	КонецПопытки;
	ДанныеЗаполнения.Вставить("ВидСобытия", ?(IsMeeting, Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча, Перечисления.CRM_ВидыСобытий.Прочее));
	Попытка
		Location = СтрокаТаблицы.Location;
	Исключение
		Location = Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Location) Тогда
		ДанныеЗаполнения.Вставить("Место", Location);
	КонецЕсли;
	ДанныеЗаполнения.Вставить("Ответственный",	Настройка.УчетнаяЗапись.Пользователь);
	ДанныеЗаполнения.Вставить("Автор",			Настройка.УчетнаяЗапись.Пользователь);
	СтруктураУчастников = Неопределено;
	Если Настройка.ИскатьКонтактыПоАдресамEMail Тогда
		СтруктураУчастников = ПолучитьУчастниковСобытия1С(СтрокаТаблицы, Настройка, СоответствияАдресовИКонтактов);
	КонецЕсли;
	Если ОбновляетсяСуществующийОбъект И ЗначениеЗаполнено(СобытиеСсылка.Ответственный) Тогда
		// Если обновляется существующее событие - на всякий случай не меняем ему ответственного, т.к.
		// порядок списка участников и настройки обмена могут быть изменены и есть вероятность что ответственный
		// будет определен неверно.
		ДанныеЗаполнения.Вставить("Ответственный", СобытиеСсылка.Ответственный);
	Иначе
		Если ТипЗнч(СтруктураУчастников) = Тип("Структура") И ЗначениеЗаполнено(СтруктураУчастников.Организатор.Участник)
			И (ТипЗнч(СтруктураУчастников.Организатор.Участник) = Тип("СправочникСсылка.Пользователи")) Тогда
			ДанныеЗаполнения.Вставить("Ответственный",	СтруктураУчастников.Организатор.Участник);
		Иначе
			ДанныеЗаполнения.Вставить("Ответственный",	Настройка.УчетнаяЗапись.Пользователь);
		КонецЕсли;
	КонецЕсли;
	Если (ТипЗнч(СобытиеСсылка) = Тип("ДокументСсылка.CRM_Мероприятие")) И ЗначениеЗаполнено(СобытиеСсылка) Тогда
		СобытиеОбъект = СобытиеСсылка.ПолучитьОбъект();
		Попытка
			СобытиеОбъект.Заблокировать();
		Исключение
			// Объект в настоящий момент редактируется.
			Возврат Неопределено;
		КонецПопытки;
		ЗаполнитьЗначенияСвойств(СобытиеОбъект, ДанныеЗаполнения);
	Иначе
		// Новое событие
		СобытиеОбъект = Документы.CRM_Мероприятие.СоздатьДокумент();
		СобытиеОбъект.Заполнить(ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(СобытиеОбъект, ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СобытиеОбъект, СтруктураЗаполнения);
	Если ТипЗнч(СтруктураУчастников) = Тип("Структура") Тогда
		МассивСтороннихЛиц	= Новый Массив;
		МассивСвоихЛиц		= Новый Массив;
		Для Каждого СтруктураУчастник Из СтруктураУчастников.Участники Цикл
			Если ТипЗнч(СтруктураУчастник.Участник) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Если МассивСтороннихЛиц.Найти(СтруктураУчастник.Участник) = Неопределено Тогда
					МассивСтороннихЛиц.Добавить(СтруктураУчастник.Участник);
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтруктураУчастник.Участник) = Тип("СправочникСсылка.Партнеры") Тогда
				Если МассивСтороннихЛиц.Найти(СтруктураУчастник.Участник) = Неопределено Тогда
					МассивСтороннихЛиц.Добавить(СтруктураУчастник.Участник);
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтруктураУчастник.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
				Если МассивСвоихЛиц.Найти(СтруктураУчастник.Участник) = Неопределено Тогда
					МассивСвоихЛиц.Добавить(СтруктураУчастник.Участник);
				КонецЕсли;
				Если СтруктураУчастник.Участник = СобытиеОбъект.Ответственный Тогда
					Продолжить;
				ИначеЕсли СобытиеОбъект.СвоиЛица.Найти(СтруктураУчастник.Участник, "Лицо") = Неопределено Тогда
					НоваяСтрока					= СобытиеОбъект.СвоиЛица.Добавить();
					НоваяСтрока.Лицо			= СтруктураУчастник.Участник;
					НоваяСтрока.Адрес			= СтруктураУчастник.Адрес;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Удаляем отсутствующие контакты.
		Если ЗначениеЗаполнено(СобытиеОбъект.Ответственный) Тогда
			Если МассивСвоихЛиц.Найти(СобытиеОбъект.Ответственный) = Неопределено Тогда
				СобытиеОбъект.Ответственный		= Справочники.Пользователи.ПустаяСсылка();	
			КонецЕсли;
		КонецЕсли;	
        КоличествоУчастников = СобытиеОбъект.СторонниеЛица.Количество();
		Для НомерСтроки = 1 По КоличествоУчастников Цикл 
			СтрокаУчастника = СобытиеОбъект.СторонниеЛица[КоличествоУчастников - НомерСтроки];
			Если ЗначениеЗаполнено(СтрокаУчастника.КонтактноеЛицо) Тогда
				Если (МассивСтороннихЛиц.Найти(СтрокаУчастника.КонтактноеЛицо) = Неопределено) Тогда
					СобытиеОбъект.СторонниеЛица.Удалить(КоличествоУчастников - НомерСтроки);
				КонецЕсли;
			ИначеЕсли (МассивСтороннихЛиц.Найти(СтрокаУчастника.Партнер) = Неопределено) Тогда
					СобытиеОбъект.СторонниеЛица.Удалить(КоличествоУчастников - НомерСтроки);
			КонецЕсли;
		КонецЦикла;
        КоличествоУчастников = СобытиеОбъект.СвоиЛица.Количество();
		Для НомерСтроки = 1 По КоличествоУчастников Цикл 
			СтрокаУчастника = СобытиеОбъект.СвоиЛица[КоличествоУчастников - НомерСтроки];
			Если (МассивСвоихЛиц.Найти(СтрокаУчастника.Лицо) = Неопределено) Тогда
				СобытиеОбъект.СвоиЛица.Удалить(КоличествоУчастников - НомерСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Попытка
		СобытиеОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьДатуПоследнейМодификации");
		СобытиеОбъект.Записать();
	Исключение
		СтрОшибка = ОписаниеОшибки();
		ДобавитьВСтрокуОшибки(СтрокаОшибки, СтрОшибка);
		Возврат Неопределено;
	КонецПопытки;
	Если ОбновляетсяСуществующийОбъект Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьChangeKeyВСоответствииОбъектовMSExchange(Настройка.УчетнаяЗапись, СобытиеОбъект.Ссылка, СтрокаТаблицы.ChangeKey);
	Иначе
		CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СобытиеОбъект.Ссылка, СтрокаТаблицы.ID, СтрокаТаблицы.ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
	КонецЕсли;
	Возврат СобытиеОбъект.Ссылка;
КонецФункции

Функция ЗагрузитьОбновитьСобытияВ1С(Настройка, Данные, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхСобытий = Неопределено, ДатаВремяНачалаОбмена = Неопределено)
	Если МассивСсылокЗагруженныхОбновленныхСобытий = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхСобытий = Неопределено;
	КонецЕсли;
	АдресEMailУчетнойЗаписи = Настройка.УчетнаяЗапись.АдресEMail;
	МассивСсылок = Новый Массив();
	СоответствияАдресовИКонтактов = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из Данные Цикл
		// Загружаем только события, у которых организатор соответствует учетной записи, под которой происходит загрузка
		// TODO: проверить, что это правильно.
		Попытка
			Organizer = СтрокаТаблицы.Organizer;
		Исключение
			Organizer = Неопределено;
		КонецПопытки;
		Если ТипЗнч(Organizer) = Тип("ТаблицаЗначений") Тогда
			бОрганизаторНайден = Ложь;
			Для Каждого СтрОрганизатор Из Organizer Цикл
				Попытка
					Mailbox = СтрОрганизатор.Mailbox;
				Исключение
					Mailbox = Неопределено;
				КонецПопытки;
				Если ТипЗнч(Mailbox) = Тип("ТаблицаЗначений") Тогда
					Для Каждого СтрокаАдрес Из Mailbox Цикл
						Попытка
							АдресПочты = СтрокаАдрес.EmailAddress;
						Исключение
							АдресПочты = Неопределено;
						КонецПопытки;
						Если НЕ (АдресПочты = Неопределено) Тогда
							Если ВРег(СокрЛП(АдресПочты)) = ВРег(СокрЛП(АдресEMailУчетнойЗаписи)) Тогда
								бОрганизаторНайден = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если бОрганизаторНайден Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не бОрганизаторНайден Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СсылкаСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьСобытиеВ1С(Настройка, СтрокаТаблицы, СтрокаОшибки, СоответствияАдресовИКонтактов, МассивСсылокЗагруженныхОбновленныхСобытий, ДатаВремяНачалаОбмена);
		Если ЗначениеЗаполнено(СсылкаСозданногоИзмененногоОбъекта) Тогда
			МассивСсылок.Добавить(СсылкаСозданногоИзмененногоОбъекта);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Почтовые сообщения

Функция СформироватьТекстЗапросаПочтовыеСообщения(Настройка) Экспорт
	ТекстЗапроса = "";
	
	Если Не Настройка.СинхронизироватьПочтовыеСообщенияВходящие И Не Настройка.СинхронизироватьПочтовыеСообщенияОтправленные Тогда
		Возврат "ВЫБРАТЬ NULL";
	КонецЕсли;
	
	бДобавленоРазрешенные = Ложь;
	
	Если Настройка.СинхронизироватьПочтовыеСообщенияВходящие Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ" + ?(Не бДобавленоРазрешенные, " РАЗРЕШЕННЫЕ", "") + "
		|	ЭлектронноеПисьмоВходящее.Ссылка КАК ЭлектронноеПисьмоВходящее" + ?(Настройка.СинхронизироватьПочтовыеСообщенияОтправленные, ",", "") + "
		|" + ?(Настройка.СинхронизироватьПочтовыеСообщенияОтправленные, "NULL КАК ЭлектронноеПисьмоИсходящее", "") + "
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
		|	ПО
		|		ЭлектронноеПисьмоВходящее.Ссылка = СоответствиеОбъектовMSExchange.Объект1С
		|		И СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
		|	
		|ГДЕ
		|	&Входящие = ИСТИНА
		|	И
		|	(
		|		ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ЭлектронноеПисьмоВходящее.Дата) >= &ДатаПоследнейМодификации
		|	)
		|	И
		|	(
		|		ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) НЕ В (&МассивIDЗагруженныхОбновленныхПочтовыхСообщений)
		|			И ЭлектронноеПисьмоВходящее.Ссылка НЕ В (&МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений)
		|	)
		|	
		|	// Если в регистре нет записи соответствия - пропускаем с пометкой удаления
		|	И НЕ (СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации ЕСТЬ NULL И ЭлектронноеПисьмоВходящее.ПометкаУдаления)
		|	
		|	И
		|	(
		|		&УчетнаяЗаписьЭлектроннойПочты = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
		|		ИЛИ &УчетнаяЗаписьЭлектроннойПочты = НЕОПРЕДЕЛЕНО
		|		ИЛИ &УчетнаяЗаписьЭлектроннойПочты = ЭлектронноеПисьмоВходящее.УчетнаяЗапись
		|	)
		|";
		бДобавленоРазрешенные = Истина;
	КонецЕсли;
	
	Если Настройка.СинхронизироватьПочтовыеСообщенияОтправленные Тогда
		Если Настройка.СинхронизироватьПочтовыеСообщенияВходящие Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса +
		"
		|ВЫБРАТЬ" + ?(Не бДобавленоРазрешенные, " РАЗРЕШЕННЫЕ", "") + "
		|" + ?(Настройка.СинхронизироватьПочтовыеСообщенияВходящие, "NULL КАК ЭлектронноеПисьмоВходящее,", "") + "
		|	ЭлектронноеПисьмоИсходящее.Ссылка КАК ЭлектронноеПисьмоИсходящее
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
		|	ПО
		|		ЭлектронноеПисьмоИсходящее.Ссылка = СоответствиеОбъектовMSExchange.Объект1С
		|		И СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
		|	
		|ГДЕ
		|	&Отправленные = ИСТИНА
		|	И
		|	(
		|		ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ЭлектронноеПисьмоИсходящее.Дата) >= &ДатаПоследнейМодификации
		|	)
		|	И
		|	(
		|		ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) НЕ В (&МассивIDЗагруженныхОбновленныхПочтовыхСообщений)
		|			И ЭлектронноеПисьмоИсходящее.Ссылка НЕ В (&МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений)
		|	)
		|	
		|	// Если в регистре нет записи соответствия - пропускаем с пометкой удаления
		|	И НЕ (СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации ЕСТЬ NULL И ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
		|	
		|	И
		|	(
		|		&УчетнаяЗаписьЭлектроннойПочты = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
		|		ИЛИ &УчетнаяЗаписьЭлектроннойПочты = НЕОПРЕДЕЛЕНО
		|		ИЛИ &УчетнаяЗаписьЭлектроннойПочты = ЭлектронноеПисьмоИсходящее.УчетнаяЗапись
		|	)
		|";
		
		бДобавленоРазрешенные = Истина;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСинхронизируемыеПочтовыеСообщения1С(Настройка, ТипПочтовыхСообщений, СтрокаОшибки = "", МассивIDЗагруженныхОбновленныхПочтовыхСообщений = Неопределено, МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений = Неопределено) Экспорт
	Если Не Настройка.СинхронизироватьПочтовыеСообщенияВходящие И Не Настройка.СинхронизироватьПочтовыеСообщенияОтправленные Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МассивIDЗагруженныхОбновленныхПочтовыхСообщений = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхПочтовыхСообщений = Новый Массив();
	КонецЕсли;
	Если МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений = Новый Массив();
	КонецЕсли;
	
	Если ТипПочтовыхСообщений = "Входящие" Тогда
		ПочтовыеСообщенияМодифицированныеПосле = Настройка.ПочтовыеСообщенияМодифицированныеПослеВходящие;
		ДатаПоследнегоОбменаПочтовыхСообщений = Настройка.ДатаПоследнегоОбменаПочтовыхСообщенийВходящие1СMSExchange;
	Иначе
		ПочтовыеСообщенияМодифицированныеПосле = Настройка.ПочтовыеСообщенияМодифицированныеПослеОтправленные;
		ДатаПоследнегоОбменаПочтовыхСообщений = Настройка.ДатаПоследнегоОбменаПочтовыхСообщенийОтправленные1СMSExchange;
	КонецЕсли;
	
	ТекстЗапроса = СформироватьТекстЗапросаПочтовыеСообщения(Настройка);
	
	Отбор = Настройка.ХранилищеОтборПочтовыхСообщений.Получить();
	Если ТипЗнч(Отбор) <> Тип("ОтборКомпоновкиДанных") Тогда
		Отбор = Неопределено;
	КонецЕсли;
	
	ДатаПоследнейМодификации = Макс(ПочтовыеСообщенияМодифицированныеПосле, ДатаПоследнегоОбменаПочтовыхСообщений);
	
	СоответствиеПараметры = Новый Соответствие();
	СоответствиеПараметры.Вставить("СерверMSExchange", Настройка.УчетнаяЗапись.СерверMSExchange);
	СоответствиеПараметры.Вставить("ДатаПоследнейМодификации", ДатаПоследнейМодификации);
	СоответствиеПараметры.Вставить("МассивIDЗагруженныхОбновленныхПочтовыхСообщений", МассивIDЗагруженныхОбновленныхПочтовыхСообщений);
	СоответствиеПараметры.Вставить("МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений", МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений);
	СоответствиеПараметры.Вставить("Входящие", (ТипПочтовыхСообщений = "Входящие"));
	СоответствиеПараметры.Вставить("Отправленные", (ТипПочтовыхСообщений <> "Входящие"));
	СоответствиеПараметры.Вставить("УчетнаяЗаписьЭлектроннойПочты", Настройка.УчетнаяЗаписьЭлектроннойПочты);
	
	Таблица = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор, СоответствиеПараметры);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.*
	|ПОМЕСТИТЬ
	|	ПочтовыеСообщения
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|///////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ПочтовыеСообщения." + ?(ТипПочтовыхСообщений = "Входящие", "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее") + " КАК ПочтовоеСообщение,
	|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) КАК ID,
	|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ПочтовыеСообщения." + ?(ТипПочтовыхСообщений = "Входящие", "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее") + ".Дата) КАК ДатаПоследнейМодификации
	|ИЗ
	|	ПочтовыеСообщения КАК ПочтовыеСообщения
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
	|	ПО
	|		ПочтовыеСообщения." + ?(ТипПочтовыхСообщений = "Входящие", "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее") + " = СоответствиеОбъектовMSExchange.Объект1С
	|		И СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
	|	
	|ГДЕ
	|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ПочтовыеСообщения." + ?(ТипПочтовыхСообщений = "Входящие", "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее") + ".Дата) >= &ДатаПоследнейМодификации
	|";
	
	Запрос = Новый Запрос();
	МВТ = Новый МенеджерВременныхТаблиц();
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("СерверMSExchange", Настройка.УчетнаяЗапись.СерверMSExchange);
	Запрос.УстановитьПараметр("ДатаПоследнейМодификации", ДатаПоследнейМодификации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьКонтактыПочтовыхСообщений1С(Настройка, ТипПочтовыхСообщений, СинхронизируемыеПочтовыеСообщения, МассивIDЗагруженныхОбновленныхКонтактов = Неопределено, МассивСсылокЗагруженныхОбновленныхКонтактов = Неопределено) Экспорт
	Если ТипЗнч(СинхронизируемыеПочтовыеСообщения) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МассивIDЗагруженныхОбновленныхКонтактов = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхКонтактов = Новый Массив();
	КонецЕсли;
	Если МассивСсылокЗагруженныхОбновленныхКонтактов = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхКонтактов = Новый Массив();
	КонецЕсли;
	
	МассивПочтовыхСообщений = СинхронизируемыеПочтовыеСообщения.ВыгрузитьКолонку("ПочтовоеСообщение");
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	КонтактыПочтовыхСообщений.Контакт КАК Контакт,
	|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) КАК ID,
	|	ЕСТЬNULL(СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации, ДАТАВРЕМЯ(1,1,1)) КАК ДатаПоследнейМодификации
	|	
	|ИЗ
	|	
	|	(
	|	
	|	ВЫБРАТЬ
	|		ТаблицаКонтакты.Ссылка КАК ПочтовоеСообщение,
	|		ТаблицаКонтакты.Контакт КАК Контакт,
	|		ТаблицаКонтакты.Контакт.ПометкаУдаления КАК КонтактПометкаУдаления
	|	ИЗ
	|		Документ._ИМЯ_ДОКУМЕНТА_.ПолучателиПисьма КАК ТаблицаКонтакты
	|	ГДЕ
	|		ТаблицаКонтакты.Ссылка В (&МассивПочтовыхСообщений)
	|		И
	|			(ТаблицаКонтакты.Контакт ССЫЛКА Справочник.Партнеры ИЛИ ТаблицаКонтакты.Контакт ССЫЛКА Справочник.КонтактныеЛицаПартнеров)
	|			И (ТаблицаКонтакты.Контакт <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) И ТаблицаКонтакты.Контакт <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаКонтакты.Ссылка КАК ПочтовоеСообщение,
	|		ТаблицаКонтакты.Контакт КАК Контакт,
	|		ТаблицаКонтакты.Контакт.ПометкаУдаления КАК КонтактПометкаУдаления
	|	ИЗ
	|		Документ._ИМЯ_ДОКУМЕНТА_.ПолучателиКопий КАК ТаблицаКонтакты
	|	ГДЕ
	|		ТаблицаКонтакты.Ссылка В (&МассивПочтовыхСообщений)
	|		И
	|			(ТаблицаКонтакты.Контакт ССЫЛКА Справочник.Партнеры ИЛИ ТаблицаКонтакты.Контакт ССЫЛКА Справочник.КонтактныеЛицаПартнеров)
	|			И (ТаблицаКонтакты.Контакт <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) И ТаблицаКонтакты.Контакт <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаКонтакты.Ссылка КАК ПочтовоеСообщение,
	|		ТаблицаКонтакты.Контакт КАК Контакт,
	|		ТаблицаКонтакты.Контакт.ПометкаУдаления КАК КонтактПометкаУдаления
	|	ИЗ
	|		Документ._ИМЯ_ДОКУМЕНТА_.ПолучателиОтвета КАК ТаблицаКонтакты
	|	ГДЕ
	|		ТаблицаКонтакты.Ссылка В (&МассивПочтовыхСообщений)
	|		И
	|			(ТаблицаКонтакты.Контакт ССЫЛКА Справочник.Партнеры ИЛИ ТаблицаКонтакты.Контакт ССЫЛКА Справочник.КонтактныеЛицаПартнеров)
	|			И (ТаблицаКонтакты.Контакт <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) И ТаблицаКонтакты.Контакт <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	|	
	|	" + ?(ТипПочтовыхСообщений = "Входящие", "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭлектронноеПисьма.Ссылка КАК ПочтовоеСообщение,
	|		ЭлектронноеПисьма.ОтправительКонтакт КАК Контакт,
	|		ЭлектронноеПисьма.ОтправительКонтакт.ПометкаУдаления КАК КонтактПометкаУдаления
	|	ИЗ
	|		Документ._ИМЯ_ДОКУМЕНТА_ КАК ЭлектронноеПисьма
	|	ГДЕ
	|		ЭлектронноеПисьма.Ссылка В (&МассивПочтовыхСообщений)
	|		И
	|			(ЭлектронноеПисьма.ОтправительКонтакт ССЫЛКА Справочник.Партнеры ИЛИ ЭлектронноеПисьма.ОтправительКонтакт ССЫЛКА Справочник.КонтактныеЛицаПартнеров)
	|			И (ЭлектронноеПисьма.ОтправительКонтакт <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) И ЭлектронноеПисьма.ОтправительКонтакт <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	|	
	|	", "") + "
	|	
	|	) КАК КонтактыПочтовыхСообщений
	|	
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
	|	ПО
	|		КонтактыПочтовыхСообщений.Контакт = СоответствиеОбъектовMSExchange.Объект1С
	|		И СоответствиеОбъектовMSExchange.СерверMSExchange = &СерверMSExchange
	|	
	|ГДЕ
	|	
	|	НЕ КонтактыПочтовыхСообщений.Контакт В (&МассивСсылокЗагруженныхОбновленныхКонтактов)
	|	И НЕ ЕСТЬNULL(СоответствиеОбъектовMSExchange.ID, НЕОПРЕДЕЛЕНО) В (&МассивIDЗагруженныхОбновленныхКонтактов)
	|	
	|	// Если в регистре нет записи соответствия - пропускаем с пометкой удаления
	|	И НЕ (СоответствиеОбъектовMSExchange.ДатаПоследнейМодификации ЕСТЬ NULL И КонтактыПочтовыхСообщений.КонтактПометкаУдаления)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_ИМЯ_ДОКУМЕНТА_", ?(ТипПочтовыхСообщений = "Входящие", "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СерверMSExchange", Настройка.УчетнаяЗапись.СерверMSExchange);
	Запрос.УстановитьПараметр("МассивПочтовыхСообщений", МассивПочтовыхСообщений);
	Запрос.УстановитьПараметр("МассивСсылокЗагруженныхОбновленныхКонтактов", МассивСсылокЗагруженныхОбновленныхКонтактов);
	Запрос.УстановитьПараметр("МассивIDЗагруженныхОбновленныхКонтактов", МассивIDЗагруженныхОбновленныхКонтактов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьПапкиСинхронизацииПочтовыхСообщений(Настройка, ТипПочтовыхСообщений)
	Если ТипПочтовыхСообщений = "Входящие" Тогда
		ТаблицаПапок = Настройка.ПапкиВходящихПисем.Выгрузить();
		DistinguishedFolderId = "inbox";
	Иначе
		ТаблицаПапок = Настройка.ПапкиОтправленныхПисем.Выгрузить();
		DistinguishedFolderId = "outbox";
	КонецЕсли;
	
	ТаблицаПапок.Колонки.Добавить("FolderID");
	ТаблицаПапок.Колонки.Добавить("DistinguishedFolderId");
	
	ТаблицаРезультат = ТаблицаПапок.Скопировать(Новый Массив());
	
	Если ТаблицаПапок.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаПапок.Добавить();
		НоваяСтрока.DistinguishedFolderId = DistinguishedFolderId;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПапок Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПапкаMSExchange) Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПапкаMSExchange.DistinguishedFolderId) Тогда
				СтрокаТаблицы.DistinguishedFolderId = СтрокаТаблицы.ПапкаMSExchange.DistinguishedFolderId;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ПапкаMSExchange.ID) Тогда
				СтрокаТаблицы.FolderID = СтрокаТаблицы.ПапкаMSExchange.ID;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрСвернуть = "";
	Для Каждого Колонка Из ТаблицаПапок.Колонки Цикл
		СтрСвернуть = СтрСвернуть + Колонка.Имя + ",";
	КонецЦикла;
	СтрСвернуть = Лев(СтрСвернуть, СтрДлина(СтрСвернуть) - 1);
	ТаблицаПапок.Свернуть(СтрСвернуть);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПапок Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.DistinguishedFolderId) Тогда
			НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(Новый Структура("DistinguishedFolderId", СтрокаТаблицы.DistinguishedFolderId));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.FolderID) Тогда
			НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(Новый Структура("FolderID", СтрокаТаблицы.FolderID));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьСинхронизируемыеПочтовыеСообщенияMSExchange(Настройка, ТипПочтовыхСообщений, Подключение, СтрокаОшибки = "", МассивIDЗагруженныхОбновленныхПочтовыхСообщений = Неопределено) Экспорт
	Если МассивIDЗагруженныхОбновленныхПочтовыхСообщений = Неопределено Тогда
		МассивIDЗагруженныхОбновленныхПочтовыхСообщений = Новый Массив();
	КонецЕсли;
	
	Ограничение = "";
	
	Если ТипПочтовыхСообщений = "Входящие" Тогда
		ПочтовыеСообщенияМодифицированныеПосле = Настройка.ПочтовыеСообщенияМодифицированныеПослеВходящие;
		ДатаПоследнегоОбменаПочтовыхСообщений = Настройка.ДатаПоследнегоОбменаПочтовыхСообщенийВходящиеMSExchange1С;
	Иначе
		ПочтовыеСообщенияМодифицированныеПосле = Настройка.ПочтовыеСообщенияМодифицированныеПослеОтправленные;
		ДатаПоследнегоОбменаПочтовыхСообщений = Настройка.ДатаПоследнегоОбменаПочтовыхСообщенийОтправленныеMSExchange1С;
	КонецЕсли;
	
	Ограничение = Ограничение + "
	|<t:And>
	|<t:IsEqualTo>
	|	<t:FieldURI FieldURI=""item:IsDraft""/>
	|		<t:FieldURIOrConstant>
	|			<t:Constant Value=""false""/>
	|		</t:FieldURIOrConstant>
	|</t:IsEqualTo>
	|
	//|<t:IsEqualTo>
	//|	<t:FieldURI FieldURI=""item:ItemClass""/>
	//|		<t:FieldURIOrConstant>
	//|			<t:Constant Value=""IPM.Note""/>
	//|		</t:FieldURIOrConstant>
	//|</t:IsEqualTo>
	|
	|";
	
	ДатаПоследнейМодификации = Макс(ПочтовыеСообщенияМодифицированныеПосле, ДатаПоследнегоОбменаПочтовыхСообщений);
	Если ЗначениеЗаполнено(ДатаПоследнейМодификации) Тогда
		ДатаВФорматеMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(ДатаПоследнейМодификации, Настройка.СмещениеВремениВМинутах);
		
		Ограничение = Ограничение + "
		|
		|<t:Or>
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:DateTimeCreated""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|	
		|	<t:IsGreaterThanOrEqualTo>
		|		<t:FieldURI FieldURI=""item:LastModifiedTime""/>
		|			<t:FieldURIOrConstant>
		|				<t:Constant Value=""" + ДатаВФорматеMSExchange + """/>
		|			</t:FieldURIOrConstant>
		|	</t:IsGreaterThanOrEqualTo>
		|</t:Or>
		|
		|"
	КонецЕсли;
	
	Ограничение = Ограничение + 
	"
	|</t:And>
	|";
	
	МассивID = Новый Массив();
	
	ПапкиСинхронизацииПочтовыхСообщений = ПолучитьПапкиСинхронизацииПочтовыхСообщений(Настройка, ТипПочтовыхСообщений);
	Для Каждого СтрокаТаблицыПапка Из ПапкиСинхронизацииПочтовыхСообщений Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыПапка.DistinguishedFolderId) Тогда
			ТаблицаID = CRM_MSExchangeСерверЭкспортныеМетоды.НайтиПочтовыеСообщения(Подключение,, Ограничение,, СтрокаТаблицыПапка.DistinguishedFolderId, "IdOnly", СтрокаОшибки);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыПапка.FolderID) Тогда
			ТаблицаID = CRM_MSExchangeСерверЭкспортныеМетоды.НайтиПочтовыеСообщения(Подключение,, Ограничение, СтрокаТаблицыПапка.FolderID,, "IdOnly", СтрокаОшибки);
		КонецЕсли;
		
		Если ТипЗнч(ТаблицаID) = Тип("ТаблицаЗначений") И ТаблицаID.Количество() > 0 И ТаблицаID.Колонки.Найти("ID") <> Неопределено Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаID Цикл
				Если МассивIDЗагруженныхОбновленныхПочтовыхСообщений.Найти(СтрокаТаблицы.ID) = Неопределено И МассивID.Найти(СтрокаТаблицы.ID) = Неопределено Тогда
					МассивID.Добавить(СтрокаТаблицы.ID);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивID.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе
		Таблица = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьПочтовоеСообщение(Подключение, МассивID,, "AllProperties", СтрокаОшибки);
		Возврат Таблица;
	КонецЕсли;
	
КонецФункции

Функция СформироватьДанныеДляСозданияОбновленияПочтовогоСообщения(Настройка, ПочтовоеСообщение, ДляОбновления = Ложь)
	
	//ДанныеСобытия = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьБланкДеревоСозданияДанных();
	//
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Subject", Событие.Тема);
	//
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Body BodyType=""Text""", Событие.Описание);
	//
	//ВажностьMSExchange = ОпределитьВажностьСобытияMSExchange(Событие);
	//Если ЗначениеЗаполнено(ВажностьMSExchange) Тогда
	//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Importance", ВажностьMSExchange);
	//КонецЕсли;
	//
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "ReminderIsSet", "true");
	//
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "ReminderMinutesBeforeStart", "60");
	//
	//// TODO: проверить, нужно ли это поле
	////CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Culture", "ru-RU");
	//
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Start", CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(Событие.Дата, Настройка.СмещениеВремениВМинутах));
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "End", CRM_MSExchangeСерверЭкспортныеМетоды.Дата1СВДатуMsExchange(Событие.ОкончаниеМероприятия, Настройка.СмещениеВремениВМинутах));
	//
	//НаВесьДень = Событие.НаВесьДень;
	//
	//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "IsAllDayEvent", ?(НаВесьДень, "true", "false"));
	//
	//
	//Если ЗначениеЗаполнено(Событие.Помещение) Тогда
	//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Location", Строка(Событие.Помещение));
	//ИначеЕсли ЗначениеЗаполнено(Событие.Место) Тогда
	//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Location", Событие.Место);
	//ИначеЕсли ДляОбновления Тогда
	//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "Location", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
	//КонецЕсли;
	//
	//МассивУчастники = Новый Массив();
	//Если ЗначениеЗаполнено(Событие.Партнер) И МассивУчастники.Найти(Событие.Партнер) = Неопределено Тогда
	//	МассивУчастники.Добавить(Событие.Партнер);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(Событие.КонтактноеЛицо) И МассивУчастники.Найти(Событие.КонтактноеЛицо) = Неопределено Тогда
	//	МассивУчастники.Добавить(Событие.КонтактноеЛицо);
	//КонецЕсли;
	//
	//Для Каждого СтрокаТаблицы Из Событие.СторонниеЛица Цикл
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.Партнер) И МассивУчастники.Найти(СтрокаТаблицы.Партнер) = Неопределено Тогда
	//		МассивУчастники.Добавить(СтрокаТаблицы.Партнер);
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) И МассивУчастники.Найти(СтрокаТаблицы.КонтактноеЛицо) = Неопределено Тогда
	//		МассивУчастники.Добавить(СтрокаТаблицы.КонтактноеЛицо);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого СтрокаТаблицы Из Событие.СвоиЛица Цикл
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.Лицо) И ТипЗнч(СтрокаТаблицы.Лицо) = Тип("СправочникСсылка.Пользователи") И МассивУчастники.Найти(СтрокаТаблицы.Лицо) = Неопределено Тогда
	//		МассивУчастники.Добавить(СтрокаТаблицы.Лицо);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если МассивУчастники.Количество() > 0 Тогда
	//	//		  <RequiredAttendees>
	//	//			<Attendee>
	//	//			  <Mailbox>
	//	//				<EmailAddress>User1@example.com</EmailAddress>
	//	//			  </Mailbox>
	//	//			</Attendee>
	//	//			<Attendee>
	//	//			  <Mailbox>
	//	//				<EmailAddress>User2@example.com</EmailAddress>
	//	//			  </Mailbox>
	//	//			</Attendee>
	//	//		  </RequiredAttendees>
	//	
	//	СтрокаRequiredAttendees = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "RequiredAttendees", Неопределено);
	//	
	//	Для Каждого Участник Из МассивУчастники Цикл
	//		
	//		//Если ЗначениеЗаполнено(IDУчастника) Или ЗначениеЗаполнено(EMailУчастника) Тогда
	//		Если ЗначениеЗаполнено(EMailУчастника) Тогда
	//			СтрокаAttendee = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаRequiredAttendees.Строки, "Attendee", Неопределено);
	//			
	//			СтрокаMailbox = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаAttendee.Строки, "Mailbox", Неопределено);
	//			
	//			//<MailboxType>Mailbox or PublicDL or PrivateDL or Contact</MailboxType>
	//			
	//			Если ЗначениеЗаполнено(EMailУчастника) Тогда
	//				CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "Name", Строка(Участник));
	//				CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "EmailAddress", EMailУчастника);
	//				//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "MailboxType", "Contact");
	//			КонецЕсли;
	//			
	//			
	//			//Если ЗначениеЗаполнено(IDУчастника) Тогда
	//			//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "MailboxType", "Mailbox");
	//			//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMailbox.Строки, "ItemId Id=""" + IDУчастника + """", "");
	//			//КонецЕсли;
	//			
	//			// ResponseType:
	//			// Unknown
	//			// Organizer
	//			// Tentative
	//			// Accept
	//			// Decline
	//			// NoResponseReceived
	//			
	//			//CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаAttendee.Строки, "ResponseType", "Organizer");
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//ИначеЕсли ДляОбновления Тогда
	//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "RequiredAttendees", CRM_MSExchangeСерверЭкспортныеМетоды.UpdateItemЭтоПолеДляУдаления());
	//	
	//КонецЕсли;
	//
	//СмещениеВремениСтрокой = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьСмещениеВремениСтрокойДляMSExchange(Настройка.СмещениеВремениВМинутах);
	//Если ЗначениеЗаполнено(СмещениеВремениСтрокой) Тогда
	//	СтрокаMeetingTimeZone = CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(ДанныеСобытия.Строки, "MeetingTimeZone TimeZoneName=""(UTC" + СмещениеВремениСтрокой + ")""", Неопределено);
	//	CRM_MSExchangeСерверЭкспортныеМетоды.ДобавитьСтрокуДереваСозданияДанных(СтрокаMeetingTimeZone.Строки, "BaseOffset", CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьBaseOffsetdurationСтрокой(Настройка.СмещениеВремениВМинутах));
	//КонецЕсли;
	//
	//Возврат ДанныеСобытия;
	
КонецФункции

Функция ЗагрузитьОбновитьПочтовоеСообщениеВMSExchange(Настройка, ТипПочтовогоСообщения, Подключение, СтрокаТаблицы, СтрокаОшибки = "", ДатаВремяНачалаОбмена = Неопределено)
	IDСозданногоИзмененногоОбъекта = Неопределено;
	
	Если ТипПочтовогоСообщения = "Входящие" Тогда
		ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектами = Настройка.ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектамиВходящие;
	Иначе
		ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектами = Настройка.ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектамиОтправленные;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
		Если СтрокаТаблицы.ПочтовоеСообщение.ПометкаУдаления И Настройка.УдалятьПомеченныеНаУдаленияПочтовыеСообщения Тогда
			CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьЭлемент(Подключение, СтрокаТаблицы.ID);
			CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.ПочтовоеСообщение);
		Иначе
			// Здесь не передаем в ф-ю СтрокаОшибки чтобы не плодить ошибки, вида "такого объекта нет", которые могут сбить с
			// толку.
			ОбъектMSExchange = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьПочтовоеСообщение(Подключение, СтрокаТаблицы.ID,, "IdOnly");
			
			Если ТипЗнч(ОбъектMSExchange) = Тип("ТаблицаЗначений") И ОбъектMSExchange.Количество() > 0 Тогда
				Если Не ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектами Тогда
					Если СтрокаТаблицы.Владелец().Колонки.Найти("ChangeKey") = Неопределено Тогда
						СтрокаТаблицы.Владелец().Колонки.Добавить("ChangeKey");
					КонецЕсли;
					Если СтрокаТаблицы.Владелец().Колонки.Найти("ДанныеОбновления") = Неопределено Тогда
						СтрокаТаблицы.Владелец().Колонки.Добавить("ДанныеОбновления");
					КонецЕсли;
					СтрокаТаблицы.ChangeKey = ОбъектMSExchange[0].ChangeKey;
					СтрокаТаблицы.ДанныеОбновления = СформироватьДанныеДляСозданияОбновленияПочтовогоСообщения(Настройка, СтрокаТаблицы.ПочтовоеСообщение, Истина);
					
					ОбновленоУспешно = CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьСобытие(Подключение, СтрокаТаблицы, СтрокаОшибки);
					Если ОбновленоУспешно = Истина Тогда
						IDСозданногоИзмененногоОбъекта = СтрокаТаблицы.ID;
					Иначе
						IDСозданногоИзмененногоОбъекта = Неопределено;
					КонецЕсли;
					
				Иначе
					IDСозданногоИзмененногоОбъекта = СтрокаТаблицы.ID;
					
				КонецЕсли;
			Иначе
				// Такого объекта в MS Exchange уже нет.
				// Удаляем соответствие ID в регистре.
				CRM_MSExchangeСерверЭкспортныеМетоды.УдалитьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.ПочтовоеСообщение);
				
				// И создаем объект заново
				Если Не СтрокаТаблицы.ПочтовоеСообщение.ПометкаУдаления Тогда
					Данные = СформироватьДанныеДляСозданияОбновленияПочтовогоСообщения(Настройка, СтрокаТаблицы.ПочтовоеСообщение);
					
					Результат = CRM_MSExchangeСерверЭкспортныеМетоды.СоздатьПочтовоеСообщение(Подключение,,, Данные, СтрокаОшибки);
					Если Результат = Неопределено Тогда
						ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления письма в MS Exchange: '") + Строка(СтрокаТаблицы.ПочтовоеСообщение));
					Иначе
						CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.ПочтовоеСообщение, Результат[0].ID, Результат[0].ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
						IDСозданногоИзмененногоОбъекта = Результат[0].ID;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Не СтрокаТаблицы.ПочтовоеСообщение.ПометкаУдаления Тогда
			Данные = СформироватьДанныеДляСозданияОбновленияПочтовогоСообщения(Настройка, СтрокаТаблицы.ПочтовоеСообщение);
			
			Результат = CRM_MSExchangeСерверЭкспортныеМетоды.СоздатьПочтовоеСообщение(Подключение,,, Данные, СтрокаОшибки);
			Если Результат = Неопределено Тогда
				ДобавитьВСтрокуОшибки(СтрокаОшибки, НСтр("ru = 'Ошибка создания/обновления письма в MS Exchange: '") + Строка(СтрокаТаблицы.ПочтовоеСообщение));
			Иначе
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СтрокаТаблицы.ПочтовоеСообщение, Результат[0].ID, Результат[0].ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
				IDСозданногоИзмененногоОбъекта = Результат[0].ID;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат IDСозданногоИзмененногоОбъекта;
	
КонецФункции

Функция ЗагрузитьОбновитьПочтовыеСообщенияВMSExchange(Настройка, ТипПочтовогоСообщения, Подключение, Данные, СтрокаОшибки = "", ДатаВремяНачалаОбмена = Неопределено) Экспорт
	МассивID = Новый Массив(); // Массив идентификаторов созданных/измененных почтовых сообщений.
	
	Если Не ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		Возврат МассивID;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		IDСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьПочтовоеСообщениеВMSExchange(Настройка, ТипПочтовогоСообщения, Подключение, СтрокаТаблицы, СтрокаОшибки, ДатаВремяНачалаОбмена);
		Если ЗначениеЗаполнено(IDСозданногоИзмененногоОбъекта) Тогда
			МассивID.Добавить(IDСозданногоИзмененногоОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивID;
	
КонецФункции

Функция ЗагрузитьОбновитьПочтовоеСообщениеВ1С(Настройка, ТипПочтовогоСообщения, СтрокаТаблицы, СтрокаОшибки, СоответствияАдресовИКонтактов, МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений, ДатаВремяНачалаОбмена = Неопределено, УчетнаяЗаписьЭлектроннойПочты = Неопределено)
	ChangeKey = Неопределено;
	ПочтовоеСообщениеСсылка = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьОбъект1СПоID(Настройка.УчетнаяЗапись, СтрокаТаблицы.ID, ChangeKey);
	Если ЗначениеЗаполнено(ПочтовоеСообщениеСсылка) И МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений.Количество() > 0 Тогда
		Если МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений.Найти(ПочтовоеСообщениеСсылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипПочтовогоСообщения = "Входящие" Тогда
		ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектами = Настройка.ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектамиВходящие;
		МенеджерДокумента = Документы.ЭлектронноеПисьмоВходящее;
		ТипДокумента = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее");
		
	Иначе
		ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектами = Настройка.ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектамиОтправленные;
		МенеджерДокумента = Документы.ЭлектронноеПисьмоИсходящее;
		ТипДокумента = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПочтовоеСообщениеСсылка) И ТипЗнч(ПочтовоеСообщениеСсылка) <> ТипДокумента И ТипЗнч(ПочтовоеСообщениеСсылка) <> Тип("ДокументСсылка.CRM_Мероприятие") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПочтовоеСообщениеСсылка) И ЗначениеЗаполнено(ChangeKey) И ChangeKey = СтрокаТаблицы.ChangeKey Тогда
		// Объект был загружен из 1С в прошлом сеансе обмена и не менялся - пропускаем его.
		Возврат ПочтовоеСообщениеСсылка;
	КонецЕсли;
	
	ОбновляетсяСуществующийОбъект = ЗначениеЗаполнено(ПочтовоеСообщениеСсылка);
	
	Если ОбновляетсяСуществующийОбъект И ПочтовыеСообщенияОбмениватьсяТолькоНовымиОбъектами Тогда
		Возврат ПочтовоеСообщениеСсылка;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура();
	СтруктураЗаполнения = Новый Структура();
	
	// СтрокаТаблицы.Атрибут_BodyType
	// СтрокаТаблицы.Sender[0].Mailbox[0].EmailAddress
	//СтрокаТаблицы.ToRecipients[0].Mailbox[0].EmailAddress
	// Undeliverable: Send only to all
	// СтрокаТаблицы.IsRead.

	// Таблица[0].HasAttachments

	//Таблица[0].From[0].Mailbox[0].EmailAddress

	// Таблица[0].InternetMessageId

	// Таблица[0].DateTimeSent

	// Таблица[0].DateTimeCreated

	// Таблица[0].ConversationTopic

	// Таблица[0].Body

	// Таблица[0].AssociatedCalendarItemId



	//Таблица[3].ItemClass (IPM.Schedule.Meeting.Request)

	// Таблица[3].Subject


	// Attachments.FileAttachment
	// Атрибут_Id,Name,ContentID;	
	
	//Попытка		Start = СтрокаТаблицы.Start;
	//Исключение	Start = Неопределено;
	// КонецПопытки;
	//
	//Попытка		End = СтрокаТаблицы.End;
	//Исключение	End = Неопределено;
	// КонецПопытки;
	//
	//Если Не ЗначениеЗаполнено(Start) Или Не ЗначениеЗаполнено(End) Тогда
	//	// События без дат пропускаем (таких не должно быть).
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//ДанныеЗаполнения.Вставить("Дата", CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(Start, Настройка.СмещениеВремениВМинутах));
	//ДанныеЗаполнения.Вставить("ОкончаниеМероприятия", CRM_MSExchangeСерверЭкспортныеМетоды.ДатаMSExchangeВДату1С(End, Настройка.СмещениеВремениВМинутах));
	//
	//Попытка		Subject = СтрокаТаблицы.Subject;
	//Исключение	Subject = НСтр("ru = 'Тема не указана'");
	// КонецПопытки;
	//СтруктураЗаполнения.Вставить("Тема", Subject);
	//
	//Попытка		Body = СтрокаТаблицы.Body;
	//Исключение	Body = "";
	// КонецПопытки;
	//Если ЗначениеЗаполнено(Body) Тогда
	//	Попытка		ТипОписанияHTML = (ВРег(СтрокаТаблицы.Атрибут_BodyType) = "HTML")
	//	Исключение	ТипОписанияHTML = Ложь;
	//	КонецПопытки;
	//	
	//	Если ТипОписанияHTML Тогда
	//		ТекстОписания = ТекстHTMLВТекст(Body);
	//	Иначе
	//		ТекстОписания = Body;
	//	КонецЕсли;
	//	
	//	СтруктураЗаполнения.Вставить("Описание", ТекстОписания);
	//КонецЕсли;
	//
	//Попытка		Importance = СтрокаТаблицы.Importance;
	//Исключение	Importance = Неопределено;
	// КонецПопытки;
	//Если ЗначениеЗаполнено(Importance) Тогда
	//	ВажностьСобытия1С = ОпределитьВажностьСобытия1С(Importance);
	//	Если ЗначениеЗаполнено(ВажностьСобытия1С) Тогда
	//		ДанныеЗаполнения.Вставить("Важность", ВажностьСобытия1С);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Попытка
	//	IsAllDayEvent = СтрокаТаблицы.IsAllDayEvent;
	//	Если НРег(IsAllDayEvent) = "true" Тогда
	//		IsAllDayEvent = Истина;
	//	Иначе
	//		IsAllDayEvent = Ложь;
	//	КонецЕсли;
	//Исключение
	//	IsAllDayEvent = Ложь;
	// КонецПопытки;
	//ДанныеЗаполнения.Вставить("НаВесьДень", IsAllDayEvent);
	//
	//Попытка
	//	IsCancelled = СтрокаТаблицы.IsCancelled;
	//	Если НРег(IsCancelled) = "true" Тогда
	//		IsCancelled = Истина;
	//	Иначе
	//		IsCancelled = Ложь;
	//	КонецЕсли;
	//Исключение
	//	IsCancelled = Ложь;
	// КонецПопытки;
	//Если IsCancelled Тогда
	//	ДанныеЗаполнения.Вставить("Состояние", Справочники.CRM_СостоянияСобытий.Отменено);
	//Иначе
	//	ДанныеЗаполнения.Вставить("Состояние", Справочники.CRM_СостоянияСобытий.Запланировано);
	//КонецЕсли;
	//
	//Попытка		IsMeeting = Булево(СтрокаТаблицы.IsMeeting);
	//Исключение	IsMeeting = Ложь;
	// КонецПопытки;
	//
	//ДанныеЗаполнения.Вставить("ВидСобытия", ?(IsMeeting, Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча, Перечисления.CRM_ВидыСобытий.Прочее));
	//
	//Попытка		Location = СтрокаТаблицы.Location;
	//Исключение	Location = Неопределено;
	// КонецПопытки;
	//Если ЗначениеЗаполнено(Location) Тогда
	//	ДанныеЗаполнения.Вставить("Место", Location);
	//КонецЕсли;
	//
	//ДанныеЗаполнения.Вставить("Ответственный", Настройка.УчетнаяЗапись.Пользователь);
	//
	//СтруктураУчастников = Неопределено;
	//Если Настройка.ИскатьКонтактыПоАдресамEMail Тогда
	//	СтруктураУчастников = ПолучитьУчастниковСобытия1С(СтрокаТаблицы, Настройка, СоответствияАдресовИКонтактов);
	//КонецЕсли;
	//
	//Если ОбновляетсяСуществующийОбъект И ЗначениеЗаполнено(СобытиеСсылка.Ответственный) Тогда
	//	// Если обновляется существующее событие - на всякий случай не меняем ему ответственного, т.к.
	//	// порядок списка участников и настройки обмена могут быть изменены и есть вероятность что ответственный
	//	// будет определен неверно.
	//	ДанныеЗаполнения.Вставить("Ответственный", СобытиеСсылка.Ответственный);
	//Иначе
	//	Если	ТипЗнч(СтруктураУчастников) = Тип("Структура")
	//		И	ЗначениеЗаполнено(СтруктураУчастников.Организатор.Участник)
	//		И	ТипЗнч(СтруктураУчастников.Организатор.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
	//		//
	//		ДанныеЗаполнения.Вставить("Ответственный", СтруктураУчастников.Организатор.Участник);
	//	Иначе
	//		ДанныеЗаполнения.Вставить("Ответственный", Настройка.УчетнаяЗапись.Пользователь);
	//	КонецЕсли;
	//КонецЕсли;
	//
	Если ТипЗнч(ПочтовоеСообщениеСсылка) = ТипДокумента И ЗначениеЗаполнено(ПочтовоеСообщениеСсылка) Тогда
		ПочтовоеСообщениеОбъект = ПочтовоеСообщениеСсылка.ПолучитьОбъект();
		Попытка
			ПочтовоеСообщениеОбъект.Заблокировать();
		Исключение
			// Объект в настоящий момент редактируется.
			Возврат Неопределено;
		КонецПопытки;
		
		ПочтовоеСообщениеОбъект.Партнер = Справочники.Партнеры.ПустаяСсылка();
		ПочтовоеСообщениеОбъект.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		ПочтовоеСообщениеОбъект.СторонниеЛица.Очистить();
		ПочтовоеСообщениеОбъект.СвоиЛица.Очистить();
		
		ЗаполнитьЗначенияСвойств(ПочтовоеСообщениеОбъект, ДанныеЗаполнения);
	Иначе
		// Новое почтовое сообщение
		ПочтовоеСообщениеОбъект = МенеджерДокумента.СоздатьДокумент();
		ПочтовоеСообщениеОбъект.Заполнить(ДанныеЗаполнения);
	КонецЕсли;
	
	
	Попытка
		ПочтовоеСообщениеОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьДатуПоследнейМодификации");
		
		ПочтовоеСообщениеОбъект.Записать();
	Исключение
		СтрОшибка = ОписаниеОшибки();
		ДобавитьВСтрокуОшибки(СтрокаОшибки, СтрОшибка);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОбновляетсяСуществующийОбъект Тогда
		CRM_MSExchangeСерверЭкспортныеМетоды.ОбновитьChangeKeyВСоответствииОбъектовMSExchange(Настройка.УчетнаяЗапись, ПочтовоеСообщениеОбъект.Ссылка, СтрокаТаблицы.ChangeKey);
	Иначе
		CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, ПочтовоеСообщениеОбъект.Ссылка, СтрокаТаблицы.ID, СтрокаТаблицы.ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
	КонецЕсли;
	
	Возврат ПочтовоеСообщениеОбъект.Ссылка;
	
КонецФункции

Функция ЗагрузитьОбновитьПочтовыеСообщенияВ1С(Настройка, ТипПочтовогоСообщения, Данные, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений = Неопределено, ДатаВремяНачалаОбмена = Неопределено)
	Если МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений = Неопределено Тогда
		МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений = Неопределено;
	КонецЕсли;
	
	МассивСсылок = Новый Массив();
	
	УчетнаяЗаписьЭлектроннойПочты = ПолучитьУчетнуюЗаписьЭлектроннойПочтыПоУчетнойЗаписиMSExchange(Настройка.УчетнаяЗапись);
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭлектроннойПочты) И Не Настройка.СоздаватьСобытияПоПочтовымСообщениям Тогда
		Возврат МассивСсылок;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		СсылкаСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьПочтовоеСообщениеВ1С(Настройка, ТипПочтовогоСообщения, СтрокаТаблицы, СтрокаОшибки, СоответствияАдресовИКонтактов, МассивСсылокЗагруженныхОбновленныхПочтовыхСообщений, ДатаВремяНачалаОбмена, УчетнаяЗаписьЭлектроннойПочты);
		Если ЗначениеЗаполнено(СсылкаСозданногоИзмененногоОбъекта) Тогда
			МассивСсылок.Добавить(СсылкаСозданногоИзмененногоОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Списки рассылок

Функция ЗагрузитьОбновитьСписокРассылкиВ1С(Настройка, Подключение, СтрокаТаблицы, СтрокаОшибки, ТолькоОбъектыБезСостава = Ложь, ДатаВремяНачалаОбмена = Неопределено)
	СписокРассылкиСсылка = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьОбъект1СПоID(Настройка.УчетнаяЗапись, СтрокаТаблицы.ID);
	
	Если ЗначениеЗаполнено(СписокРассылкиСсылка) И ТолькоОбъектыБезСостава Тогда
		Возврат СписокРассылкиСсылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокРассылкиСсылка) И ТипЗнч(СписокРассылкиСсылка) = Тип("СправочникСсылка.CRM_СпискиРассылок") Тогда
		СписокРассылкиОбъект = СписокРассылкиСсылка.ПолучитьОбъект();
	Иначе
		СписокРассылкиОбъект = Справочники.CRM_СпискиРассылок.СоздатьЭлемент();
	КонецЕсли;
	СписокРассылкиОбъект.ЗагруженИзMSExchange = Истина;
	СписокРассылкиОбъект.Состав.Очистить();
	
	Попытка СписокРассылкиОбъект.Наименование = СтрокаТаблицы.DisplayName;
	Исключение КонецПопытки;
	Если Не ЗначениеЗаполнено(СписокРассылкиОбъект.Наименование) Тогда
		Попытка СписокРассылкиОбъект.Наименование = СтрокаТаблицы.FileAs;
		Исключение КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СписокРассылкиОбъект.Наименование) Тогда
		Попытка СписокРассылкиОбъект.Наименование = СтрокаТаблицы.Subject;
		Исключение КонецПопытки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СписокРассылкиОбъект.Наименование) Тогда
		СписокРассылкиОбъект.Наименование = НСтр("ru = 'Список рассылки'");
	КонецЕсли;
	
	Если Не ТолькоОбъектыБезСостава Тогда
		СоставСпискаРассылки = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьСоставГруппыКонтактов(Подключение, СтрокаТаблицы.ID, СтрокаОшибки);
		
		Для Каждого СтрокаСостава Из СоставСпискаРассылки Цикл
			Если СтрокаСостава.MailboxType = "PrivateDL" Или СтрокаСостава.MailboxType = "PublicDL" Тогда
				ВложенныйСписокРассылкиСсылка = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьОбъект1СПоID(Настройка.УчетнаяЗапись, СтрокаСостава.ID);
				Если Не ЗначениеЗаполнено(ВложенныйСписокРассылкиСсылка) Или ТипЗнч(ВложенныйСписокРассылкиСсылка) <> Тип("СправочникСсылка.CRM_СпискиРассылок") Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки = СписокРассылкиОбъект.Состав.НайтиСтроки(Новый Структура("Контакт", ВложенныйСписокРассылкиСсылка));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = СписокРассылкиОбъект.Состав.Добавить();
					НоваяСтрока.Контакт = ВложенныйСписокРассылкиСсылка;
				КонецЕсли;
			Иначе
				Если Не ЗначениеЗаполнено(СтрокаСостава.EmailAddress) Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки = СписокРассылкиОбъект.Состав.НайтиСтроки(Новый Структура("Адрес", СтрокаСостава.EmailAddress));
				Если НайденныеСтроки.Количество() = 0 Тогда
					КонтактСсылка = Неопределено;
					Если СоставСпискаРассылки.Колонки.Найти("ID") <> Неопределено Тогда
						КонтактСсылка = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьОбъект1СПоID(Настройка.УчетнаяЗапись, СтрокаСостава.ID);
					КонецЕсли;
					Если Не ЗначениеЗаполнено(КонтактСсылка) Тогда
						КонтактСсылка = ПолучитьКонтактПоАдресу(СтрокаСостава.EmailAddress, Настройка.УчетнаяЗапись.СерверMSExchange);
					КонецЕсли;
					
					НоваяСтрока = СписокРассылкиОбъект.Состав.Добавить();
					НоваяСтрока.Адрес = СтрокаСостава.EmailAddress;
					Если ЗначениеЗаполнено(КонтактСсылка) Тогда
						НоваяСтрока.Контакт = КонтактСсылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		СписокРассылкиОбъект.Записать();
	Исключение
		СтрОшибка = ОписаниеОшибки();
		ДобавитьВСтрокуОшибки(СтрокаОшибки, СтрОшибка);
		
		Возврат Неопределено;
	КонецПопытки;
	
	CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьСоответствиеОбъектовMSExchange(Настройка.УчетнаяЗапись, СписокРассылкиОбъект.Ссылка, СтрокаТаблицы.ID, СтрокаТаблицы.ChangeKey, ?(ЗначениеЗаполнено(ДатаВремяНачалаОбмена), ДатаВремяНачалаОбмена - 1, Неопределено));
	
	Возврат СписокРассылкиОбъект.Ссылка;
	
КонецФункции

Функция ЗагрузитьОбновитьСпискиРассылокВ1С(Настройка, Подключение, Данные, СтрокаОшибки, ТолькоОбъектыБезСостава = Ложь, ДатаВремяНачалаОбмена = Неопределено)
	МассивСсылок = Новый Массив();
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		Попытка		ItemClass = СтрокаТаблицы.ItemClass;
		Исключение	ItemClass = Неопределено;
		КонецПопытки;
		
		// Проверка на всякий случай - если вдруг попадется не группа контактов (такого быть не должно).
		Если ItemClass = Неопределено Или НРег(ItemClass) = "ipm.distlist" Тогда
			СсылкаСозданногоИзмененногоОбъекта = ЗагрузитьОбновитьСписокРассылкиВ1С(Настройка, Подключение, СтрокаТаблицы, СтрокаОшибки, ТолькоОбъектыБезСостава, ДатаВремяНачалаОбмена);
			Если ЗначениеЗаполнено(СсылкаСозданногоИзмененногоОбъекта) Тогда
				МассивСсылок.Добавить(СсылкаСозданногоИзмененногоОбъекта);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Структура папок

Функция ПолучитьЭлементСтруктурыПапокMSExchangeПоID(СерверMSExchange, УчетнаяЗапись, ID)
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_СтруктурыПапокMSExchange
	|ГДЕ
	|	СерверMSExchange = &СерверMSExchange
	|	И УчетнаяЗапись = &УчетнаяЗапись
	|	И ID = &ID
	|");
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("СерверMSExchange", СерверMSExchange);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ПометитьНеИспользуемыеЭлементыСтруктурыПапокMSExchangeНаУдаление(СерверMSExchange, УчетнаяЗапись, МассивID)
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_СтруктурыПапокMSExchange
	|ГДЕ
	|	СерверMSExchange = &СерверMSExchange
	|	И УчетнаяЗапись = &УчетнаяЗапись
	|	И НЕ ID В (&МассивID)
	|	И НЕ ПометкаУдаления
	|");
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("СерверMSExchange", СерверMSExchange);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры

Функция ОпределитьВидПапкиЭлектроннойПочты1С(Папка)
	// Перечисление.CRM_ВидыПапокЭлектроннойПочты.
		// Входящие
		// Исходящие
		// Отправленные
		// Удаленные
		// Обработанные
	
	// Входящие = inbox = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие.
	// Черновики = drafts = НЕТ
	// Отправленные = sentitems = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные.
	// Удаленные = deleteditems = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные.
	// Исходящие = outbox = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие.
	// Нежелательная почта = junkemail = НЕТ.
	
	Если Папка.FolderClass = "IPF.Note" И ЗначениеЗаполнено(Папка.DistinguishedFolderId) Тогда
		Если Папка.DistinguishedFolderId = "inbox" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие;
		ИначеЕсли Папка.DistinguishedFolderId = "sentitems" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные;
		ИначеЕсли Папка.DistinguishedFolderId = "deleteditems" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные;
		ИначеЕсли Папка.DistinguishedFolderId = "outbox" Тогда
			Возврат Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ЗагрузитьЭлементыСтруктурыПапокMSExchangeРекурсивно(СтрокиДерева, СерверMSExchange, УчетнаяЗапись, СоответствиеDistinguishedFolderIds, МассивID)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Попытка		ID = СтрокаДерева.ID;
		Исключение	ID = Неопределено;
		КонецПопытки;
		Если Не ЗначениеЗаполнено(ID) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка		ParentFolderId = СтрокаДерева.ParentFolderId;
		Исключение	ParentFolderId = Неопределено;
		КонецПопытки;
		
		ПапкаСсылка = ПолучитьЭлементСтруктурыПапокMSExchangeПоID(СерверMSExchange, УчетнаяЗапись, ID);
		Если ЗначениеЗаполнено(ПапкаСсылка) Тогда
			ПапкаОбъект = ПапкаСсылка.ПолучитьОбъект();
			ПапкаОбъект.ПометкаУдаления = Ложь;
			ПапкаОбъект.Родитель = Справочники.CRM_СтруктурыПапокMSExchange.ПустаяСсылка();
		Иначе
			ПапкаОбъект = Справочники.CRM_СтруктурыПапокMSExchange.СоздатьЭлемент();
		КонецЕсли;
		
		ПапкаОбъект.СерверMSExchange = СерверMSExchange;
		ПапкаОбъект.УчетнаяЗапись = УчетнаяЗапись;
		
		ЗаполнитьЗначенияСвойств(ПапкаОбъект, СтрокаДерева);
		
		Если ЗначениеЗаполнено(ParentFolderId) Тогда
			РодительСсылка = ПолучитьЭлементСтруктурыПапокMSExchangeПоID(СерверMSExchange, УчетнаяЗапись, ParentFolderId);
			Если ЗначениеЗаполнено(РодительСсылка) Тогда
				ПапкаОбъект.Родитель = РодительСсылка;
			КонецЕсли;
		КонецЕсли;
		
		ПапкаОбъект.Наименование = ПапкаОбъект.DisplayName;
		
		DistinguishedFolderId = СоответствиеDistinguishedFolderIds[ID];
		ПапкаОбъект.DistinguishedFolderId = ?(DistinguishedFolderId = Неопределено, "", DistinguishedFolderId);
		
		ВидПапкиЭлектроннойПочты1С = ОпределитьВидПапкиЭлектроннойПочты1С(ПапкаОбъект);
		Если ЗначениеЗаполнено(ВидПапкиЭлектроннойПочты1С) Тогда
			ПапкаОбъект.ВидПапкиЭлектроннойПочты1С = ВидПапкиЭлектроннойПочты1С;
		КонецЕсли;
		
		ПапкаОбъект.ДатаПоследнейЗагрузки = ТекущаяДатаСеанса();
		
		ПапкаОбъект.Записать();
		
		Если МассивID.Найти(ПапкаОбъект.ID) = Неопределено Тогда
			МассивID.Добавить(ПапкаОбъект.ID);
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗагрузитьЭлементыСтруктурыПапокMSExchangeРекурсивно(СтрокаДерева.Строки, СерверMSExchange, УчетнаяЗапись, СоответствиеDistinguishedFolderIds, МассивID)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьОбновитьСтруктуруПапокВ1С(Настройка, Подключение, СтрокаОшибки = "", ПроверятьПодключение = Ложь) Экспорт
	Если ПроверятьПодключение Тогда
		РезультатПроверкиПодключения = CRM_MSExchangeСерверЭкспортныеМетоды.ПроверитьПодключение(Подключение);
		Если Не РезультатПроверкиПодключения.Успешно Тогда
			ДобавитьВСтрокуОшибки(СтрокаОшибки, РезультатПроверкиПодключения.СообщениеОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	DistinguishedFolderIds = 
	"calendar
	|contacts
	|deleteditems
	|drafts
	|inbox
	|journal
	|notes
	|outbox
	|sentitems
	|tasks
	|msgfolderroot
	|root
	|junkemail
	|searchfolders
	|voicemail";
	
	СоответствиеDistinguishedFolderIds = Новый Соответствие();
	Для НомерСтроки = 1 По СтрЧислоСтрок(DistinguishedFolderIds) Цикл
		Попытка
			СтрId = СтрПолучитьСтроку(DistinguishedFolderIds, НомерСтроки);
			Папка = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьПапку(Подключение,, СтрId);
			Если ТипЗнч(Папка) = Тип("ТаблицаЗначений") И Папка.Количество() > 0 Тогда
				СоответствиеDistinguishedFolderIds.Вставить(Папка[0].ID, СтрId);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ДеревоПапок = CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьДеревоПапок(Подключение,,, СтрокаОшибки);
	Если ТипЗнч(ДеревоПапок) = Тип("ДеревоЗначений") И ДеревоПапок.Строки.Количество() > 0 Тогда
		Попытка
			МассивID = Новый Массив();
			
			НачатьТранзакцию();
			
			ЗагрузитьЭлементыСтруктурыПапокMSExchangeРекурсивно(ДеревоПапок.Строки, Настройка.УчетнаяЗапись.СерверMSExchange, Настройка.УчетнаяЗапись, СоответствиеDistinguishedFolderIds, МассивID);
			
			ПометитьНеИспользуемыеЭлементыСтруктурыПапокMSExchangeНаУдаление(Настройка.УчетнаяЗапись.СерверMSExchange, Настройка.УчетнаяЗапись, МассивID);
			
			ЗафиксироватьТранзакцию();
		Исключение
			СтрОшибка = ОписаниеОшибки();
			ОтменитьТранзакцию();
			
			ДобавитьВСтрокуОшибки(СтрокаОшибки, СтрОшибка);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Основная процедура синхронизации по настройке.
//
Процедура СинхронизироватьПоНастройке(Настройка, СтрокаОшибки = "") Экспорт
	Если НЕ ЗначениеЗаполнено(Настройка.УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'В настройке не заполнена учетная запись!'");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Настройка.Подключение) Тогда
		ВызватьИсключение НСтр("ru = 'В настройке не заполнено подключение!'");
	КонецЕсли;
	Если НЕ (Настройка.Подключение.СерверMSExchange = Настройка.УчетнаяЗапись.СерверMSExchange) Тогда
		ВызватьИсключение НСтр("ru = 'Реквизит ""Сервер MS Exchange"" в подключении отличается от значения, указанного в учетной записи!'");
	КонецЕсли;
	Подключение				= CRM_MSExchangeСерверЭкспортныеМетоды.СформироватьСтруктуруПодключения(Настройка);
	
	Направление1С			= ((Настройка.НаправлениеОбмена = Перечисления.CRM_НаправленияОбменаСMSExchange.MSExchangeПредприятие)
		ИЛИ (Настройка.НаправлениеОбмена = Перечисления.CRM_НаправленияОбменаСMSExchange.ВОбеСтороны));
		
	НаправлениеMSExchange	= ((Настройка.НаправлениеОбмена = Перечисления.CRM_НаправленияОбменаСMSExchange.ПредприятиеMSExchange)
		ИЛИ (Настройка.НаправлениеОбмена = Перечисления.CRM_НаправленияОбменаСMSExchange.ВОбеСтороны));
	ДвустороннийОбмен		= (Направление1С И НаправлениеMSExchange);
	
	// Массивы уже загруженных/обновленных ID и ссылок, нужны для оптимизации при двустороннем обмене чтобы два раза не
	// обмениваться одними и теми же объектами.
	МассивIDЗагруженныхОбновленныхКонтактов		= Новый Массив();
	МассивСсылокЗагруженныхОбновленныхКонтактов	= Новый Массив();
	
	МассивIDЗагруженныхОбновленныхСобытий		= Новый Массив();
	МассивСсылокЗагруженныхОбновленныхСобытий	= Новый Массив();
	
	МассивIDЗагруженныхОбновленныхПочтовыхСообщенийВходящих		= Новый Массив();
	МассивСсылокЗагруженныхОбновленныхПочтовыхСообщенийВходящих	= Новый Массив();
	
	МассивIDЗагруженныхОбновленныхПочтовыхСообщенийОтправленных		= Новый Массив();
	МассивСсылокЗагруженныхОбновленныхПочтовыхСообщенийОтправленных	= Новый Массив();
	
	МассивIDЗагруженныхОбновленныхЗадач		= Новый Массив();
	МассивСсылокЗагруженныхОбновленныхЗадач	= Новый Массив();
	
	// Контакты
	ДатаВремяНачалаДвустороннегоОбмена = ТекущаяДатаСеанса();
	Если Настройка.СинхронизироватьКлиенты ИЛИ Настройка.СинхронизироватьКонтактныеЛица Тогда
		Если НаправлениеMSExchange Тогда
			// Здесь и далее датой/временем последнего обмена считаем дату/время начала сеанса обмена,
			// т.к. если во время сеанса обмена будут производится изменения в объектах - как со стороны Exchange
			// так и со стороны 1С:CRM - дата/время модификации объектов должна быть больше даты последнего
			// обмена, иначе они не будут учитываться как измененные объекты при следующем сеансе обмена.
			ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
			СинхронизируемыеКонтакты = ПолучитьСинхронизируемыеКонтакты1С(Настройка, МассивIDЗагруженныхОбновленныхКонтактов, МассивСсылокЗагруженныхОбновленныхКонтактов);
			Если ТипЗнч(СинхронизируемыеКонтакты) = Тип("ТаблицаЗначений") Тогда
				ЗагруженныеОбновленныеID = ЗагрузитьОбновитьКонтактыВMSExchange(Настройка, Подключение, СинхронизируемыеКонтакты, СтрокаОшибки, Ложь, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
				Если ТипЗнч(ЗагруженныеОбновленныеID) = Тип("Массив") Тогда
					Для Каждого ID Из ЗагруженныеОбновленныеID Цикл
						МассивIDЗагруженныхОбновленныхКонтактов.Добавить(ID);
					КонецЦикла;
				КонецЕсли;
				Если СинхронизируемыеКонтакты.Колонки.Найти("Контакт") <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из СинхронизируемыеКонтакты Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
							МассивСсылокЗагруженныхОбновленныхКонтактов.Добавить(СтрокаТаблицы.Контакт);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(Настройка, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
			КонецЕсли;
		КонецЕсли;
		Если Направление1С Тогда
			ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
			СинхронизируемыеКонтакты = ПолучитьСинхронизируемыеКонтактыMSExchange(Настройка, Подключение, СтрокаОшибки, МассивIDЗагруженныхОбновленныхКонтактов);
			Если ТипЗнч(СинхронизируемыеКонтакты) = Тип("ТаблицаЗначений") Тогда
				ЗагруженныеОбновленныеСсылки = ЗагрузитьОбновитьКонтактыВ1С(Настройка, СинхронизируемыеКонтакты, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхКонтактов, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
				Если ТипЗнч(ЗагруженныеОбновленныеСсылки) = Тип("Массив") Тогда
					Для Каждого ОбъектСсылка Из ЗагруженныеОбновленныеСсылки Цикл
						МассивСсылокЗагруженныхОбновленныхКонтактов.Добавить(ОбъектСсылка);
					КонецЦикла;
				КонецЕсли;
				Если СинхронизируемыеКонтакты.Колонки.Найти("ID") <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из СинхронизируемыеКонтакты Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
							Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
								МассивIDЗагруженныхОбновленныхКонтактов.Добавить(СтрокаТаблицы.ID);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(Настройка, Неопределено, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
			Иначе
				Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
					ВызватьИсключение СтрокаОшибки;
				Иначе
					ВызватьИсключение НСтр("ru = 'Ошибка при получении списка контактов!'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// События
	ДатаВремяНачалаДвустороннегоОбмена = ТекущаяДатаСеанса();
	Если Настройка.СинхронизироватьСобытия Тогда
		Если НаправлениеMSExchange Тогда
			ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
			СинхронизируемыеСобытия = ПолучитьСинхронизируемыеСобытия1С(Настройка, МассивIDЗагруженныхОбновленныхСобытий, МассивСсылокЗагруженныхОбновленныхСобытий);
			Если ТипЗнч(СинхронизируемыеСобытия) = Тип("ТаблицаЗначений") Тогда
				Если Настройка.СинхронизироватьКонтактыСобытий И (СинхронизируемыеСобытия.Количество() > 0) Тогда
					СинхронизируемыеКонтактыСобытий1С = ПолучитьКонтактыСобытий1С(Настройка, СинхронизируемыеСобытия, МассивIDЗагруженныхОбновленныхКонтактов, МассивСсылокЗагруженныхОбновленныхКонтактов);
					ЗагруженныеОбновленныеID = ЗагрузитьОбновитьКонтактыВMSExchange(Настройка, Подключение, СинхронизируемыеКонтактыСобытий1С, СтрокаОшибки, Истина, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
					Если ТипЗнч(ЗагруженныеОбновленныеID) = Тип("Массив") Тогда
						Для Каждого ID Из ЗагруженныеОбновленныеID Цикл
							МассивIDЗагруженныхОбновленныхКонтактов.Добавить(ID);
						КонецЦикла;
					КонецЕсли;
					Если СинхронизируемыеКонтактыСобытий1С.Колонки.Найти("Контакт") <> Неопределено Тогда
						Для Каждого СтрокаТаблицы Из СинхронизируемыеКонтактыСобытий1С Цикл
							Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
								МассивСсылокЗагруженныхОбновленныхКонтактов.Добавить(СтрокаТаблицы.Контакт);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ЗагруженныеОбновленныеID = ЗагрузитьОбновитьСобытияВMSExchange(Настройка, Подключение, СинхронизируемыеСобытия, СтрокаОшибки, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
				Если ТипЗнч(ЗагруженныеОбновленныеID) = Тип("Массив") Тогда
					Для Каждого ID Из ЗагруженныеОбновленныеID Цикл
						МассивIDЗагруженныхОбновленныхСобытий.Добавить(ID);
					КонецЦикла;
				КонецЕсли;
				Если СинхронизируемыеСобытия.Колонки.Найти("Событие") <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из СинхронизируемыеСобытия Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.Событие) Тогда
							МассивСсылокЗагруженныхОбновленныхСобытий.Добавить(СтрокаТаблицы.Событие);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(Настройка, Неопределено, Неопределено, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
			КонецЕсли;
		КонецЕсли;
		Если Направление1С Тогда
			ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
			СинхронизируемыеСобытия = ПолучитьСинхронизируемыеСобытияMSExchange(Настройка, Подключение, СтрокаОшибки, МассивIDЗагруженныхОбновленныхСобытий);
			Если ТипЗнч(СинхронизируемыеСобытия) = Тип("ТаблицаЗначений") Тогда
				ЗагруженныеОбновленныеСсылки = ЗагрузитьОбновитьСобытияВ1С(Настройка, СинхронизируемыеСобытия, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхСобытий, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
				Если ТипЗнч(ЗагруженныеОбновленныеСсылки) = Тип("Массив") Тогда
					Для Каждого ОбъектСсылка Из ЗагруженныеОбновленныеСсылки Цикл
						МассивСсылокЗагруженныхОбновленныхСобытий.Добавить(ОбъектСсылка);
					КонецЦикла;
				КонецЕсли;
				Если СинхронизируемыеСобытия.Колонки.Найти("ID") <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из СинхронизируемыеСобытия Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
							МассивIDЗагруженныхОбновленныхСобытий.Добавить(СтрокаТаблицы.ID);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(Настройка, Неопределено, Неопределено, Неопределено, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
			Иначе
				Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
					ВызватьИсключение СтрокаОшибки;
				Иначе
					ВызватьИсключение НСтр("ru = 'Ошибка при получении списка событий!'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Почтовые сообщение решили не делать, но и не удалять на всякий случай; сейчас они недоделаны и код пропускается во
	// избежании ошибок.
	Если Ложь Тогда
		
		// Почтовые сообщения
		Если Настройка.СинхронизироватьПочтовыеСообщенияВходящие Или Настройка.СинхронизироватьПочтовыеСообщенияОтправленные Тогда
			Если Настройка.СинхронизироватьПочтовыеСообщенияВходящие Тогда
				ДатаВремяНачалаДвустороннегоОбмена = ТекущаяДатаСеанса();
				
				Если НаправлениеMSExchange Тогда
					ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
					
					СинхронизируемыеПочтовыеСообщения = ПолучитьСинхронизируемыеПочтовыеСообщения1С(Настройка, "Входящие", СтрокаОшибки, МассивIDЗагруженныхОбновленныхПочтовыхСообщенийВходящих, МассивСсылокЗагруженныхОбновленныхПочтовыхСообщенийВходящих);
					
					Если ТипЗнч(СинхронизируемыеПочтовыеСообщения) = Тип("ТаблицаЗначений") > 0 Тогда
						Если Настройка.СинхронизироватьКонтактыПочтовыхСообщенийВходящие И СинхронизируемыеПочтовыеСообщения.Количество() > 0 Тогда
							СинхронизируемыеКонтактыПочтовыхСообщений1С = ПолучитьКонтактыПочтовыхСообщений1С(Настройка, "Входящие", СинхронизируемыеПочтовыеСообщения, МассивIDЗагруженныхОбновленныхКонтактов, МассивСсылокЗагруженныхОбновленныхКонтактов);
							ЗагруженныеОбновленныеID = ЗагрузитьОбновитьКонтактыВMSExchange(Настройка, Подключение, СинхронизируемыеКонтактыСобытий1С, СтрокаОшибки, Истина, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
							Если ТипЗнч(ЗагруженныеОбновленныеID) = Тип("Массив") Тогда
								Для Каждого ID Из ЗагруженныеОбновленныеID Цикл
									МассивIDЗагруженныхОбновленныхКонтактов.Добавить(ID);
								КонецЦикла;
							КонецЕсли;
							Если СинхронизируемыеКонтактыСобытий1С.Колонки.Найти("Контакт") <> Неопределено Тогда
								Для Каждого СтрокаТаблицы Из СинхронизируемыеКонтактыСобытий1С Цикл
									Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
										МассивСсылокЗагруженныхОбновленныхКонтактов.Добавить(СтрокаТаблицы.Контакт);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
						
						ЗагруженныеОбновленныеID = ЗагрузитьОбновитьПочтовыеСообщенияВMSExchange(Настройка, "Входящие", Подключение, СинхронизируемыеПочтовыеСообщения, СтрокаОшибки, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
						
						CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(
														Настройка,
														Неопределено,
														Неопределено,
														Неопределено,
														Неопределено,
														?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена),
														Неопределено,
														Неопределено,
														Неопределено,
														Неопределено);
						//
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				Если Направление1С Тогда
					УчетнаяЗаписьЭлектроннойПочты = ПолучитьУчетнуюЗаписьЭлектроннойПочтыПоУчетнойЗаписиMSExchange(Настройка.УчетнаяЗапись);
					// Выполняем обмен только если существует учетная запись почты для данного аккаунта в Exchange
					// или установлен флег сознадния событий по электронным письмам.
					Если ЗначениеЗаполнено(УчетнаяЗаписьЭлектроннойПочты) Или Настройка.СоздаватьСобытияПоПочтовымСообщениям Тогда
						
					    ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
						
						СинхронизируемыеПочтовыеСообщения = ПолучитьСинхронизируемыеПочтовыеСообщенияMSExchange(Настройка, "Входящие", Подключение, СтрокаОшибки, МассивIDЗагруженныхОбновленныхПочтовыхСообщенийВходящих);
						
						Если ТипЗнч(СинхронизируемыеПочтовыеСообщения) = Тип("ТаблицаЗначений") Тогда
							ЗагруженныеОбновленныеСсылки = ЗагрузитьОбновитьПочтовыеСообщенияВ1С(Настройка, "Входящие", СинхронизируемыеПочтовыеСообщения, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхПочтовыхСообщенийВходящих, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
							Если ТипЗнч(ЗагруженныеОбновленныеСсылки) = Тип("Массив") Тогда
								Для Каждого ОбъектСсылка Из ЗагруженныеОбновленныеСсылки Цикл
									МассивСсылокЗагруженныхОбновленныхПочтовыхСообщенийВходящих.Добавить(ОбъектСсылка);
								КонецЦикла;
							КонецЕсли;
							Если СинхронизируемыеПочтовыеСообщения.Колонки.Найти("ID") <> Неопределено Тогда
								Для Каждого СтрокаТаблицы Из СинхронизируемыеПочтовыеСообщения Цикл
									Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
										МассивIDЗагруженныхОбновленныхПочтовыхСообщенийВходящих.Добавить(СтрокаТаблицы.ID);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							
							
							CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(
															Настройка,
															Неопределено,
															Неопределено,
															Неопределено,
															Неопределено,
															Неопределено,
															?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена),
															Неопределено,
															Неопределено,
															Неопределено);
							//
							
						Иначе
							Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
								ВызватьИсключение СтрокаОшибки;
							Иначе
								ВызватьИсключение НСтр("ru = 'Ошибка при получении списка писем!'");
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Настройка.СинхронизироватьПочтовыеСообщенияОтправленные Тогда
				ДатаВремяНачалаДвустороннегоОбмена = ТекущаяДатаСеанса();
				
				Если НаправлениеMSExchange Тогда
					ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
					
					
					CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(
													Настройка,
													Неопределено,
													Неопределено,
													Неопределено,
													Неопределено,
													Неопределено,
													Неопределено,
													?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена),
													Неопределено,
													Неопределено);
					//
					
				КонецЕсли;
				
				Если Направление1С Тогда
					ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
					
					
					CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(
													Настройка,
													Неопределено,
													Неопределено,
													Неопределено,
													Неопределено,
													Неопределено,
													Неопределено,
													Неопределено,
													?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена),
													Неопределено);
					//
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; // Если Ложь
	
	
	// Задачи
	ДатаВремяНачалаДвустороннегоОбмена = ТекущаяДатаСеанса();
	Если Настройка.СинхронизироватьЗадачи Тогда
		Если НаправлениеMSExchange Тогда
			ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
			
			СинхронизируемыеЗадачи = ПолучитьСинхронизируемыеЗадачи1С(Настройка, МассивIDЗагруженныхОбновленныхЗадач, МассивСсылокЗагруженныхОбновленныхЗадач);
			Если ТипЗнч(СинхронизируемыеЗадачи) = Тип("ТаблицаЗначений") Тогда
				ЗагруженныеОбновленныеID = ЗагрузитьОбновитьЗадачиВMSExchange(Настройка, Подключение, СинхронизируемыеЗадачи, СтрокаОшибки, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
				Если ТипЗнч(ЗагруженныеОбновленныеID) = Тип("Массив") Тогда
					Для Каждого ID Из ЗагруженныеОбновленныеID Цикл
						МассивIDЗагруженныхОбновленныхЗадач.Добавить(ID);
					КонецЦикла;
				КонецЕсли;
				Если СинхронизируемыеЗадачи.Колонки.Найти("Задача") <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из СинхронизируемыеЗадачи Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.Задача) Тогда
							МассивСсылокЗагруженныхОбновленныхЗадач.Добавить(СтрокаТаблицы.Задача);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(
												Настройка,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
				//
					
			КонецЕсли;
		КонецЕсли;
		
		Если Направление1С Тогда
			ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
			
			СинхронизируемыеЗадачи = ПолучитьСинхронизируемыеЗадачиMSExchange(Настройка, Подключение, СтрокаОшибки, МассивIDЗагруженныхОбновленныхЗадач);
			Если ТипЗнч(СинхронизируемыеЗадачи) = Тип("ТаблицаЗначений") Тогда
				ЗагруженныеОбновленныеСсылки = ЗагрузитьОбновитьЗадачиВ1С(Настройка, СинхронизируемыеЗадачи, СтрокаОшибки, МассивСсылокЗагруженныхОбновленныхЗадач, ?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
				Если ТипЗнч(ЗагруженныеОбновленныеСсылки) = Тип("Массив") Тогда
					Для Каждого ОбъектСсылка Из ЗагруженныеОбновленныеСсылки Цикл
						МассивСсылокЗагруженныхОбновленныхЗадач.Добавить(ОбъектСсылка);
					КонецЦикла;
				КонецЕсли;
				Если СинхронизируемыеЗадачи.Колонки.Найти("ID") <> Неопределено Тогда
					Для Каждого СтрокаТаблицы Из СинхронизируемыеЗадачи Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
							Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
								МассивIDЗагруженныхОбновленныхЗадач.Добавить(СтрокаТаблицы.ID);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(
												Настройка,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												Неопределено,
												?(ДвустороннийОбмен, ДатаВремяНачалаДвустороннегоОбмена, ДатаВремяНачалаОбмена));
				//
				
			Иначе
				Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
					ВызватьИсключение СтрокаОшибки;
				Иначе
					ВызватьИсключение НСтр("ru = 'Ошибка при получении списка задач!'");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Списки рассылок
	Если Настройка.ЗагружатьСпискиРассылок Тогда
		ДатаВремяНачалаОбмена = ТекущаяДатаСеанса();
		
		СинхронизируемыеСпискиРассылок = ПолучитьСинхронизируемыеСпискиРассылокMSExchange(Настройка, Подключение, СтрокаОшибки);
		
		Если ТипЗнч(СинхронизируемыеСпискиРассылок) = Тип("ТаблицаЗначений") Тогда
			// За первый проход создаем сами списки рассылок чтобы были ссылка объектов справочника CRM_СпискиРассылок
			// это нужно для случая если списки рассылок содержас в составе другие списки рассылок.
			ЗагруженныеОбновленныеСсылки = ЗагрузитьОбновитьСпискиРассылокВ1С(Настройка, Подключение, СинхронизируемыеСпискиРассылок, СтрокаОшибки, Истина, ДатаВремяНачалаОбмена);
			
			// За второй проход зяполняем состав списков рассылок.
			Если ТипЗнч(ЗагруженныеОбновленныеСсылки) = Тип("Массив") И ЗагруженныеОбновленныеСсылки.Количество() > 0 Тогда
				ЗагрузитьОбновитьСпискиРассылокВ1С(Настройка, Подключение, СинхронизируемыеСпискиРассылок, СтрокаОшибки, Ложь, ДатаВремяНачалаОбмена);
			КонецЕсли;
			
			CRM_MSExchangeСерверЭкспортныеМетоды.ЗаписатьДатыПоследнегоОбмена(Настройка, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, ДатаВремяНачалаОбмена);
			
		Иначе
			Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
				ВызватьИсключение СтрокаОшибки;
			Иначе
				ВызватьИсключение НСтр("ru = 'Ошибка при получении списков рассылок!'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// Структуры папок
	Если Настройка.ЗагружатьСтруктуруПапок Тогда
		ЗагрузитьОбновитьСтруктуруПапокВ1С(Настройка, Подключение, СтрокаОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ И РЕГЛАМЕНТНЫХ ЗАДАНИЙ

Процедура ВыполнитьРегламентныйОбменДаннымиСMSExchange() Экспорт
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменСMSExchange") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Регламентный обмен данными с MS Exchange",
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начат регламентный обмен данными с MS Exchange'"));
	//
	
	Попытка
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НастройкиОбменаСMSExchange.Ссылка КАК Настройка
		|ИЗ
		|	Справочник.CRM_НастройкиОбменаСMSExchange КАК НастройкиОбменаСMSExchange
		|ГДЕ
		|	НЕ НастройкиОбменаСMSExchange.ПометкаУдаления
		|	И НастройкиОбменаСMSExchange.УчаствуетВРегламентномЗадании
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиОбменаСMSExchange.РеквизитДопУпорядочивания, НастройкиОбменаСMSExchange.Ссылка
		|");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СтрокаОшибки = "";
				
				Попытка
					СинхронизироватьПоНастройке(Выборка.Настройка, СтрокаОшибки);
					
					Если Не ПустаяСтрока(СтрокаОшибки) Тогда
						ЗаписьЖурналаРегистрации("Регламентный обмен данными с MS Exchange",
								УровеньЖурналаРегистрации.Предупреждение,,,
								НСтр("ru = 'При обмене данными по настройке '")
								+ """" + Строка(Выборка.Настройка) + """ "
								+ НСтр("ru = 'произошли ошибки: '")
								+ СтрокаОшибки); 
						//
					КонецЕсли;
					
				Исключение
					ИнфОбОшибке = ИнформацияОбОшибке();
					
					ЗаписьЖурналаРегистрации("Регламентный обмен данными с MS Exchange",
							УровеньЖурналаРегистрации.Ошибка,,,
							НСтр("ru = 'При обмене данными по настройке '")
							+ """" + Строка(Выборка.Настройка) + """ "
							+ НСтр("ru = 'произошло исключение: '")
							+ ПодробноеПредставлениеОшибки(ИнфОбОшибке)); 
					//
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Регламентный обмен данными с MS Exchange",
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Закончен регламентный обмен данными с MS Exchange'"));
		//
		
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации("Регламентный обмен данными с MS Exchange",
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнфОбОшибке));
		//
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиОбъектаОбменаСMSExchange(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменСMSExchange") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеОбновлятьДатуПоследнейМодификации") Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СоответствиеОбъектовMSExchange.УчетнаяЗапись.СерверMSExchange	КАК СерверMSExchange,
	|	СоответствиеОбъектовMSExchange.УчетнаяЗапись					КАК УчетнаяЗапись,
	|	СоответствиеОбъектовMSExchange.Объект1С							КАК Объект1С,
	|	СоответствиеОбъектовMSExchange.ID								КАК ID,
	|	СоответствиеОбъектовMSExchange.ChangeKey						КАК ChangeKey
	|	
	|ИЗ
	|	
	|	РегистрСведений.CRM_СоответствиеОбъектовMSExchange КАК СоответствиеОбъектовMSExchange
	|	
	|ГДЕ
	|	
	|	Объект1С = &Объект1С
	|");
	Запрос.УстановитьПараметр("Объект1С", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.CRM_СоответствиеОбъектовMSExchange.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СерверMSExchange	= Выборка.СерверMSExchange;
		МенеджерЗаписи.Объект1С			= Выборка.Объект1С;
		
		МенеджерЗаписи.ID				= Выборка.ID;
		МенеджерЗаписи.ChangeKey		= Выборка.ChangeKey;
		МенеджерЗаписи.УчетнаяЗапись	= Выборка.УчетнаяЗапись;
		
		МенеджерЗаписи.ДатаПоследнейМодификации = ТекДата;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры
