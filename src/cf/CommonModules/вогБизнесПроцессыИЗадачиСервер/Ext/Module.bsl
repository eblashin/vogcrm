
#Область ПрограммныйИнтерфейс

Процедура СкопироватьЗаписиЗадачПоручений(ЗадачаИсточник, ЗадачаПриемник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ЗадачаПриемник КАК Объект,
	|	вогЗадачиПоручений.Идентификатор КАК Идентификатор,
	|	вогЗадачиПоручений.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	вогЗадачиПоручений.Предмет КАК Предмет,
	|	вогЗадачиПоручений.Порядок КАК Порядок,
	|	вогЗадачиПоручений.Пункт КАК Пункт,
	|	вогЗадачиПоручений.Комментарий КАК Комментарий,
	|	вогЗадачиПоручений.Результат КАК Результат,
	|	вогЗадачиПоручений.Трудоемкость КАК Трудоемкость,
	|	вогЗадачиПоручений.НаборЗадач КАК НаборЗадач,
	|	вогЗадачиПоручений.ТиповаяЗадача КАК ТиповаяЗадача
	|ИЗ
	|	РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
	|ГДЕ
	|	вогЗадачиПоручений.Объект = &ЗадачаИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ЗадачаПриемник КАК Объект,
	|	вогРезультатыВыполненияЗадачПоручений.Идентификатор КАК Идентификатор,
	|	вогРезультатыВыполненияЗадачПоручений.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	вогРезультатыВыполненияЗадачПоручений.Предмет КАК Предмет,
	|	вогРезультатыВыполненияЗадачПоручений.Порядок КАК Порядок,
	|	вогРезультатыВыполненияЗадачПоручений.Пункт КАК Пункт,
	|	вогРезультатыВыполненияЗадачПоручений.Комментарий КАК Комментарий,
	|	вогРезультатыВыполненияЗадачПоручений.Результат КАК Результат,
	|	вогРезультатыВыполненияЗадачПоручений.НаборЗадач КАК НаборЗадач,
	|	вогРезультатыВыполненияЗадачПоручений.ТиповаяЗадача КАК ТиповаяЗадача,
	|	вогРезультатыВыполненияЗадачПоручений.ПринятоКонтролером КАК ПринятоКонтролером
	|ИЗ
	|	РегистрСведений.вогРезультатыВыполненияЗадачПоручений КАК вогРезультатыВыполненияЗадачПоручений
	|ГДЕ
	|	вогРезультатыВыполненияЗадачПоручений.Объект = &ЗадачаИсточник";
	
	Запрос.УстановитьПараметр("ЗадачаИсточник", ЗадачаИсточник);
	Запрос.УстановитьПараметр("ЗадачаПриемник", ЗадачаПриемник);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаЗадачиПоручений = РезультатЗапроса[0].Выгрузить();
	
	НаборЗаписейЗадачиПоручений = РегистрыСведений.вогЗадачиПоручений.СоздатьНаборЗаписей();
	НаборЗаписейЗадачиПоручений.Отбор.Объект.Установить(ЗадачаПриемник);
	
	НаборЗаписейЗадачиПоручений.Загрузить(ТаблицаЗадачиПоручений);
	
	НаборЗаписейЗадачиПоручений.Записать();
	
	//
	ТаблицаРезультатыВыполнения = РезультатЗапроса[1].Выгрузить();
	
	НаборЗаписейРезультатыВыполнения = РегистрыСведений.вогРезультатыВыполненияЗадачПоручений.СоздатьНаборЗаписей();
	НаборЗаписейРезультатыВыполнения.Отбор.Объект.Установить(ЗадачаПриемник);
	
	НаборЗаписейРезультатыВыполнения.Загрузить(ТаблицаРезультатыВыполнения);
	НаборЗаписейРезультатыВыполнения.Записать();
	
	// Перенос присоединенных файлов
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ЗадачаИсточник, МассивФайлов);
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ФайлОбъект.ВладелецФайла = ЗадачаПриемник;
		
		Попытка
			ФайлОбъект.Записать();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредметы(Форма, СсылкаНаОбъект, ИмяТаблицыЗадач = "ТаблицаЗадачи") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполнениеПредметов(СсылкаНаОбъект);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БизнесПроцесс 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "БизнесПроцесс");
		Запрос.УстановитьПараметр("БизнесПроцесс", 	БизнесПроцесс);
		Запрос.УстановитьПараметр("Задача", 		СсылкаНаОбъект);
	Иначе
		Запрос.УстановитьПараметр("БизнесПроцесс", 	СсылкаНаОбъект);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПредметы = РезультатЗапроса.Выгрузить();
	
	Форма.ДеревоПредметы.ПолучитьЭлементы().Очистить();
	
	ЭлементыКорня 			= Форма.ДеревоПредметы.ПолучитьЭлементы();
	КорневаяГруппа 			= ЭлементыКорня.Добавить();
	КорневаяГруппа.Предмет 	= "Предметы";
	КорневаяГруппа.Группа 	= Истина;
	
	ЗаполнитьДеревоПредметовРекурсивно(КорневаяГруппа, "", ТаблицаПредметы);
	Если Не ПустаяСтрока(ИмяТаблицыЗадач) Тогда
		ВыделитьПредметСЗадачамиРекурсивно(Форма, КорневаяГруппа, ИмяТаблицыЗадач);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПредметы(Форма, Объект) Экспорт
	
	Объект.вогПредметы.Очистить();
	
	Для Каждого КореньДерева Из Форма.ДеревоПредметы.ПолучитьЭлементы() Цикл
		ЗаписатьДеревоПредметовРекурсивно(КореньДерева, Объект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДеревоПредметовРекурсивно(Знач ЭлементДерева, Объект, ИдентификаторРодителя = Неопределено) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	Если Не ЭлементДерева.Группа Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементДерева, "ИдентификаторСтроки")
			И ЗначениеЗаполнено(ЭлементДерева.ИдентификаторСтроки) Тогда
			ИдентификаторСтроки = ЭлементДерева.ИдентификаторСтроки;
		Иначе
			ИдентификаторСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		НоваяСтрока = Объект.вогПредметы.Добавить();
		НоваяСтрока.Предмет 					= ЭлементДерева.Предмет;
		НоваяСтрока.ИдентификаторСтроки 		= ИдентификаторСтроки;
		НоваяСтрока.ИдентификаторРодителя 		= ИдентификаторРодителя;
		НоваяСтрока.ТребуетсяЗаполнениеЧекЛиста = ЭлементДерева.Пометка;
		
		// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементДерева, "Адрес") Тогда
			НоваяСтрока.Адрес = ЭлементДерева.Адрес;
		КонецЕсли;
		// -- VOG Солодов В.В. 30.11.2020 CRM-1071
		
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
		ЗаписатьДеревоПредметовРекурсивно(ПодчиненныйЭлементДерева, Объект, ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементыПоНастройке(Форма, ИдентификаторЭлемента, ГруппаРодитель, ИмяНастройки, ИндексСтроки) Экспорт
	
	СтруктураНастроек 	= Форма.НастройкаЭлементов[ИмяНастройки];
	ИмяТаблицы 			= СтруктураНастроек.ИмяТаблицы;
	
	Для Каждого НастройкаЭлемента Из СтруктураНастроек.Элементы Цикл
		
		ИмяЭлемента = СтрШаблон(НастройкаЭлемента.Имя, ИдентификаторЭлемента);
		
		Если ЗначениеЗаполнено(НастройкаЭлемента.ИмяРодителя) Тогда
			ИмяРодителя 	= СтрШаблон(НастройкаЭлемента.ИмяРодителя, ИдентификаторЭлемента);
			РодительЭлемента = Форма.Элементы.Найти(ИмяРодителя);
		Иначе
			РодительЭлемента = ГруппаРодитель;
		КонецЕсли;
		
		Если НастройкаЭлемента.Тип = Тип("ГруппаФормы") Тогда
			
			СоздатьГруппуЭлементовПоля(Форма, ИмяЭлемента, РодительЭлемента,, НастройкаЭлемента);
			
		ИначеЕсли НастройкаЭлемента.Тип = Тип("ПолеФормы")
			И Не НастройкаЭлемента.ЭтоРеквизитТаблицы Тогда
			
			ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИмяТаблицы, ИндексСтроки);
			СоздатьПолеФормы(Форма, ИмяЭлемента, РодительЭлемента, НастройкаЭлемента, ПутьКДанным);
			
			
		ИначеЕсли НастройкаЭлемента.Тип = Тип("ТаблицаФормы") Тогда
			
			Если СтрЧислоВхождений(НастройкаЭлемента.ПутьКДанным, "%") = 1 Тогда
				ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИдентификаторЭлемента);
			Иначе
				ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИмяТаблицы, ИндексСтроки);
			КонецЕсли;
			
			Если Не ПустаяСтрока(НастройкаЭлемента.ПутьКДаннымКартинкиСтроки) Тогда
				НастройкаЭлемента.ПутьКДаннымКартинкиСтроки = СтрШаблон(НастройкаЭлемента.ПутьКДаннымКартинкиСтроки, ИдентификаторЭлемента);
			КонецЕсли;
			
			СоздатьТаблицуФормы(Форма, ИмяЭлемента, РодительЭлемента, НастройкаЭлемента, ПутьКДанным);
			
		ИначеЕсли НастройкаЭлемента.Тип = Тип("ПолеФормы") Тогда
			
			Если СтрЧислоВхождений(НастройкаЭлемента.ПутьКДанным, "%") = 1 Тогда
				ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИдентификаторЭлемента);
			Иначе
				ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИмяТаблицы, ИндексСтроки);
			КонецЕсли;
			
			СоздатьПолеТаблицы(Форма, ИмяЭлемента, РодительЭлемента, НастройкаЭлемента, ПутьКДанным);
			
		ИначеЕсли НастройкаЭлемента.Тип = Тип("ДекорацияФормы") Тогда
			
			СоздатьРазделитель(Форма, ИмяЭлемента, РодительЭлемента, НастройкаЭлемента);
			
		КонецЕсли;
		
		НоваяСтрока = Форма.СозданныеЭлементы.Добавить();
		НоваяСтрока.ИмяЭлемента 	= ИмяЭлемента;
		НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКомандыПоНастройке(Форма, ИдентификаторЭлемента, ГруппаРодитель, ИмяНастройки, ДобавитьГруппу = Ложь) Экспорт
	
	СтруктураНастроек 		= Форма.НастройкаЭлементов[ИмяНастройки];
	
	МассивНастроекКоманд 	= СтруктураНастроек.Команды;
	ИмяТаблицы 				= СтруктураНастроек.ИмяТаблицы;
	
	ИмяГруппы = СтрШаблон("ГруппаКоманды_%1", ИдентификаторЭлемента);
	
	Если ДобавитьГруппу Тогда
		
		ГруппаКоманды = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель);
		
		ГруппаКоманды.Вид 									= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКоманды.ОтображатьЗаголовок 					= Ложь;
		ГруппаКоманды.Отображение 							= ОтображениеОбычнойГруппы.Нет;
		ГруппаКоманды.Группировка 							= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаКоманды.РастягиватьПоГоризонтали 				= Ложь;
		ГруппаКоманды.РастягиватьПоВертикали 				= Истина;
		ГруппаКоманды.ЦветТекстаЗаголовка 					= ЦветаСтиля.ЦветТекстаФормы;
		
	Иначе
		ГруппаКоманды = ГруппаРодитель;
	КонецЕсли;
	
	Для Каждого СтруктураКоманды Из МассивНастроекКоманд Цикл
		
		ИмяКоманды = СтрШаблон("%1_%2", СтруктураКоманды.Имя, ИдентификаторЭлемента);
		
		// Добавление команды
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			
			Команда 					= Форма.Команды.Добавить(ИмяКоманды);
			Команда.Действие			= СтруктураКоманды.Действие;
			Команда.Картинка 			= СтруктураКоманды.Картинка;
			Команда.Отображение 		= ОтображениеКнопки.Картинка;
			Команда.Подсказка 			= СтруктураКоманды.Подсказка;
			
		КонецЕсли;
		
		// Добавление элемента формы
		Кнопка 						= Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКоманды);
		Кнопка.ИмяКоманды 			= ИмяКоманды;
		Кнопка.ОтображениеФигуры 	= ОтображениеФигурыКнопки.Нет;
		Кнопка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		Кнопка.Видимость 			= СтруктураКоманды.Видимость;
		
		Если СтруктураКоманды.Свойство("ОбработчикОпределенияДоступности")
			И Не ПустаяСтрока(СтруктураКоманды.ОбработчикОпределенияДоступности) Тогда
			
			Попытка
				Выполнить(СтруктураКоманды.ОбработчикОпределенияДоступности);
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиПрисоединенныеФайлы(БизнесПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ VOG Солодов В.В. 25.12.2020
	ВыполнениеКонтролируется = Ложь;
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(БизнесПроцесс);
	НаборЭтапов.Прочитать();
	
	Если НаборЭтапов.Количество() > 0 
		И (НаборЭтапов[2].Используется Или НаборЭтапов[3].Используется Или НаборЭтапов[4].Используется) Тогда
		ВыполнениеКонтролируется = Истина;
	КонецЕсли;
	// -- VOG Солодов В.В. 25.12.2020
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Задачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Задачи.Ссылка КАК Задача,
		|	вогРезультатыВыполненияЗадачПоручений.ИдентификаторЗадачи КАК ИдентификаторГруппыФайлов,
		|	вогРезультатыВыполненияЗадачПоручений.Предмет КАК Предмет
		|ИЗ
		|	РегистрСведений.вогРезультатыВыполненияЗадачПоручений КАК вогРезультатыВыполненияЗадачПоручений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО вогРезультатыВыполненияЗадачПоручений.Объект = ВТ_Задачи.Ссылка
		// ++ VOG Солодов В.В. 25.12.2020
		|			И (ВЫБОР
		|				КОГДА &ВыполнениеКонтролируется
		|					ТОГДА вогРезультатыВыполненияЗадачПоручений.ПринятоКонтролером
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		// -- VOG Солодов В.В. 25.12.2020
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Задачи.Ссылка КАК Задача,
		|	вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
		|	вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла КАК ВидФайла,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель.Родитель КАК ГруппаФайлов
		|ИЗ
		|	ВТ_Задачи КАК ВТ_Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачаИсполнителяПрисоединенныеФайлы КАК ЗадачаИсполнителяПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
		|			ПО ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка = вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
		|		ПО ВТ_Задачи.Ссылка = ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла
		|			И (НЕ ЗадачаИсполнителяПрисоединенныеФайлы.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", 				БизнесПроцесс);
	Запрос.УстановитьПараметр("ВыполнениеКонтролируется", 	ВыполнениеКонтролируется); // VOG Солодов В.В. 25.12.2020
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	ТаблицаФайлы = РезультатЗапроса[2].Выгрузить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ГруппаФайлов = Справочники.ЗадачаИсполнителяПрисоединенныеФайлы.ПолучитьСсылку(
			ВыборкаДетальныеЗаписи.ИдентификаторГруппыФайлов);
			
		Если Не ОбщегоНазначения.СсылкаСуществует(ГруппаФайлов)
			Или Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Задача", 		ВыборкаДетальныеЗаписи.Задача);
		ПараметрыОтбораСтрок.Вставить("ГруппаФайлов", 	ГруппаФайлов);
		
		НайденныеСтроки = ТаблицаФайлы.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СоответствиеОтбора = Новый Соответствие;
			
			Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
				СоответствиеОтбора.Вставить(СтрокаТабличнойЧасти.ПрисоединенныйФайл, СтрокаТабличнойЧасти.ВидФайла);
			КонецЦикла;
			
			СкопироватьПрисоединенныеФайлы(ВыборкаДетальныеЗаписи.Задача, ВыборкаДетальныеЗаписи.Предмет, СоответствиеОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеТипаИдентификатор() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("УникальныйИдентификатор"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ОписаниеТипаХранилище() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ХранилищеЗначения"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ОписаниеТипаИсполнитель() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ОписаниеТипаПредмет() Экспорт
	
	ОписаниеТипаПредмет 	= Справочники.ТипВсеСсылки();
	ОписаниеТипаПредмет.Типы().Добавить(Тип("Строка"));
	
	Возврат ОписаниеТипаПредмет;
	
КонецФункции

Функция ОписаниеТипаПользователи() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ОписаниеТипаНаправлениеДеятельности() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.НаправленияДеятельности"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ОписаниеТипаНаселенныйПункт() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.вогНаселенныеПункты"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ОписаниеТипаБулево() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ПолучитьСписокТиповПредметов() Экспорт
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("Порядок", 		ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаТипов.Колонки.Добавить("Значение", 		ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ТаблицаТипов.Колонки.Добавить("Представление", 	ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	СоответствиеПорядка = Новый Соответствие;
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.Партнеры"), 					0);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.вогТорговыеТочки"), 			1);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.вогНаселенныеПункты"), 		2);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.вогРынки"), 					3);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.вогЮридическиеЛица"), 		4);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"), 	5);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.вогБренды"), 				6);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.КоллекцииДляСайта"), 		7);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.вогДизайныНоменклатуры"), 	8);
	СоответствиеПорядка.Вставить(Тип("СправочникСсылка.Номенклатура"), 				9);
	
	Счетчик = 0;
	
	Для Каждого ТипПредмета Из Метаданные.ОпределяемыеТипы.вогТипыПредметовПоручений.Тип.Типы() Цикл 
		
		// ++ VOG Солодов В.В. 17.11.2020 CRM-1052
		Если ТипПредмета = Тип("СправочникСсылка.вогРынки") Тогда
			Продолжить;
		КонецЕсли;
		// -- VOG Солодов В.В. 17.11.2020 CRM-1052
		
		Счетчик = Счетчик + 1;
		
		МассивТипов 	= Новый Массив;
		МассивТипов.Добавить(ТипПредмета);
		
		ОписаниеТипа 	= Новый ОписаниеТипов(МассивТипов);
		ПустаяСсылка 	= ОписаниеТипа.ПривестиЗначение(Неопределено);
		
		НоваяСтрока = ТаблицаТипов.Добавить();
		
		ПорядокТипа = СоответствиеПорядка.Получить(ТипПредмета);
		
		Если ПорядокТипа = Неопределено Тогда
			ПорядокТипа = 100 + Счетчик;
		КонецЕсли;
		
		НоваяСтрока.Порядок 		= ПорядокТипа;
		НоваяСтрока.Значение 		= ПустаяСсылка;
		Если ТипПредмета = Тип("СправочникСсылка.КоллекцииДляСайта") Тогда
			НоваяСтрока.Представление 	= НСтр("ru = 'Коллекция'");
		ИначеЕсли ТипПредмета = Тип("СправочникСсылка.вогДизайныНоменклатуры") Тогда
			НоваяСтрока.Представление 	= НСтр("ru = 'Дизайн'");
		Иначе
			НоваяСтрока.Представление 	= СокрЛП(ТипПредмета);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТипов.Сортировать("Порядок");
	
	СписокВыбора = Новый СписокЗначений;
	
	Для Каждого Строка Из ТаблицаТипов Цикл
		СписокВыбора.Добавить(Строка.Значение, Строка.Представление);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура ДополнитьОтборКомпоновкиНаправлениемДеятельности(ОбластьДобавления, НаправлениеДеятельности) Экспорт
	
	Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДоступноеПолеОтбора Из ОбластьДобавления.ДоступныеПоляОтбора.Элементы Цикл
		
		Если ДоступноеПолеОтбора.ТипЗначения = вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаНаправлениеДеятельности() Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ОбластьДобавления,
				Строка(ДоступноеПолеОтбора.Поле),
				НаправлениеДеятельности,
				ВидСравненияКомпоновкиДанных.Равно,
				,
				Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектыДоступныеПользователю(Пользователь, ОбъектыПроверки) Экспорт
	
	Если ОбъектыПроверки.Количество() = 0 Тогда
		Возврат ОбъектыПроверки;
	КонецЕсли;
	
	ТипОбъектаПроверки = ТипЗнч(ОбъектыПроверки[0]);
	
	СписокРолейПолногоДоступа = Новый Массив;
	СписокРолейПолногоДоступа.Добавить("ПолныеПрава");
	
	Если ТипОбъектаПроверки = Тип("СправочникСсылка.вогТорговыеТочки")
		Или ТипОбъектаПроверки = Тип("СправочникСсылка.Партнеры")
		Или ТипОбъектаПроверки = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		
		СписокРолейПолногоДоступа.Добавить("вогПолныйДоступККлиентскойБазеЧтение");
		СписокРолейПолногоДоступа.Добавить("вогПолныйДоступККлиентскойБазеИзменение");
		СписокРолейПолногоДоступа.Добавить("вогТехПоддержка");
		
		Если ТипОбъектаПроверки = Тип("СправочникСсылка.Партнеры") Тогда
			СписокРолейПолногоДоступа.Добавить("АдминистраторСистемы");
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.Номенклатура") Тогда
		СписокРолейПолногоДоступа.Добавить("ЧтениеНоменклатуры");
		СписокРолейПолногоДоступа.Добавить("CRM_ДобавлениеИзменениеНоменклатуры");
		СписокРолейПолногоДоступа.Добавить("АдминистраторСистемы");
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.вогНаселенныеПункты") Тогда
		СписокРолейПолногоДоступа.Добавить("вогБазовыеПрава");
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.вогРынки") Тогда
		СписокРолейПолногоДоступа.Добавить("вогБазовыеПрава");
		СписокРолейПолногоДоступа.Добавить("вогТехПоддержка");
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		СписокРолейПолногоДоступа.Добавить("АдминистраторСистемы");
		СписокРолейПолногоДоступа.Добавить("вогТехПоддержка");
		СписокРолейПолногоДоступа.Добавить("вогПолныйДоступККлиентскойБазеЧтение");
		СписокРолейПолногоДоступа.Добавить("вогПолныйДоступККлиентскойБазеИзменение");
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.вогБренды") Тогда
		СписокРолейПолногоДоступа.Добавить("вогБазовыеПрава");
		СписокРолейПолногоДоступа.Добавить("вогДобавлениеИзменениеБренды");
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.КоллекцииДляСайта") Тогда
		СписокРолейПолногоДоступа.Добавить("вогБазовыеПрава");
		СписокРолейПолногоДоступа.Добавить("вогДобавлениеИзменениеКоллекцииДляСайта");
		СписокРолейПолногоДоступа.Добавить("вогЧтениеКоллекцииДляСайта");
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.вогДизайныНоменклатуры") Тогда
		СписокРолейПолногоДоступа.Добавить("вогБазовыеПрава");
		СписокРолейПолногоДоступа.Добавить("вогДобавлениеИзменениеДизайны");
	КонецЕсли;
	
	СтрокаРолиПолногоДоступа = СтрСоединить(СписокРолейПолногоДоступа, ",");
	
	Если Пользователи.РолиДоступны(СтрокаРолиПолногоДоступа, Пользователь, Ложь) Тогда
		Возврат ОбъектыПроверки;
	КонецЕсли;
	
	ОбъектыДоступныеПользователю = Новый Массив;
	
	Если ТипОбъектаПроверки = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		ОбъектыДоступныеПользователю = ТорговаяТочкаДоступнаПользователю(Пользователь, ОбъектыПроверки);
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.Партнеры") Тогда
		ОбъектыДоступныеПользователю = ПартнерДоступенПользователю(Пользователь, ОбъектыПроверки);
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ОбъектыДоступныеПользователю = ЮридическоеЛицоДоступноПользователю(Пользователь, ОбъектыПроверки);
	ИначеЕсли ТипОбъектаПроверки = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ОбъектыДоступныеПользователю = КонтактноеЛицоДоступноПользователю(Пользователь, ОбъектыПроверки);
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыДоступныеПользователю);
	
КонецФункции

Функция СформироватьМакетЗадачиИсполнителя(Форма, Предмет, Мониторинг = Ложь) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Предмет", Предмет);
	
	Если Мониторинг Тогда
		ПараметрыОтбораСтрок.Вставить("Задача", Форма.ТекущаяЗадача);
	КонецЕсли;
	
	НайденныеСтроки = Форма.ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		МакетЗаполнения = БизнесПроцессы.CRM_БизнесПроцесс.ПолучитьМакет("вогМакетЗадачиИсполнителя");
		
		ОбластьШапка 				= МакетЗаполнения.ПолучитьОбласть("ОбластьШапка");
		ОбластьКомментарий 			= МакетЗаполнения.ПолучитьОбласть("ОбластьКомментарий");
		ОбластьФайлы 				= МакетЗаполнения.ПолучитьОбласть("ОбластьФайлы");
		ОбластьРазделитель 			= МакетЗаполнения.ПолучитьОбласть("ОбластьРазделитель");
		ОбластьРазделительНабора 	= МакетЗаполнения.ПолучитьОбласть("ОбластьРазделительНабора");
		
		Если ТипЗнч(Предмет) = Тип("Строка") Тогда
			ПредметСтрокой = НСтр("ru = 'Список задач'");
			ОбластьШапка.Параметры.Предмет 				= ПредметСтрокой;
			ОбластьШапка.Параметры.ПредметРасшифровка 	= ПредметСтрокой;
		Иначе
			ОбластьШапка.Параметры.Предмет 				= Предмет;
			ОбластьШапка.Параметры.ПредметРасшифровка 	= Предмет;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ПерваяСтрока 	= Истина;
		НаборЗадач 		= Неопределено;
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			ЭтоНабор = ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаборЗадач);
			
			Если Не Мониторинг Тогда
				
				Если СтрокаТабличнойЧасти.ДобавленИзЗадачи И Не Форма.ТолькоПросмотр Тогда
					РедактированиеРазрешено = (Не ЭтоНабор И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТиповаяЗадача));
				Иначе
					РедактированиеРазрешено = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ИдентификаторЗадачи = СтрокаТабличнойЧасти.ИдентификаторЗадачи;
			
			Если Не ПерваяСтрока И Не ЭтоНабор Тогда
				
				Если ЗначениеЗаполнено(НаборЗадач) Тогда
					// Если предыдущий пункт был в составе набора, то нужно вывести разделитель набора
					ТабличныйДокумент.Вывести(ОбластьРазделительНабора);
					НаборЗадач = Неопределено;
					
				Иначе
					ТабличныйДокумент.Вывести(ОбластьРазделитель);
				КонецЕсли;
				
			ИначеЕсли ЭтоНабор И Не СтрокаТабличнойЧасти.НаборЗадач = НаборЗадач Тогда
				
				Если Не ПерваяСтрока Тогда
					// Если текущий пункт в составе набора, то нужно вывести разделитель набора
					ТабличныйДокумент.Вывести(ОбластьРазделительНабора);
				КонецЕсли;
				
				ОбластьНаборЗадач 	= МакетЗаполнения.ПолучитьОбласть("ОбластьНаборЗадач");
				НаборЗадач 			= СтрокаТабличнойЧасти.НаборЗадач;
				ЗаполнитьОбластьНабораЗадач(Форма, Мониторинг, ОбластьНаборЗадач, СтрокаТабличнойЧасти);
				
				ТабличныйДокумент.Вывести(ОбластьНаборЗадач);
				
			КонецЕсли;
			
			ОбластьСтрокаЗадачи = МакетЗаполнения.ПолучитьОбласть("ОбластьСтрокаЗадачи");
			ЗаполнитьОбластьСтрокиЗадачи(Форма, Мониторинг, ОбластьСтрокаЗадачи, СтрокаТабличнойЧасти);
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаЗадачи);
			
			Если Мониторинг Тогда
				ЗаполнитьОбластьПунктовЗадачиМониторинг(Форма, МакетЗаполнения, СтрокаТабличнойЧасти, ТабличныйДокумент);
			Иначе
				ЗаполнитьОбластьПунктовЗадачи(Форма, МакетЗаполнения, СтрокаТабличнойЧасти, ТабличныйДокумент);
			КонецЕсли;
			
			// Комментарий
			ОбластьКомментарий.Параметры.Комментарий 			= СтрокаТабличнойЧасти.Комментарий;
			ОбластьКомментарий.Параметры.КомментарийИсполнитель = СтрокаТабличнойЧасти.КомментарийИсполнитель;
			
			ТабличныйДокумент.Вывести(ОбластьКомментарий);
			
			// Файлы
			ТабличныйДокумент.Вывести(ОбластьФайлы);
			ЗаполнитьОбластьФайлы(Форма, МакетЗаполнения, СтрокаТабличнойЧасти, ТабличныйДокумент, Мониторинг);
			
			ПерваяСтрока = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТабличныйДокумент.Автомасштаб 		= Истина;
	ТабличныйДокумент.ТолькоПросмотр 	= Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьСписокВыбораТипаПриложения(Предмет = Неопределено) Экспорт
	
	ТипПредмета = ТипЗнч(Предмет);
	
	СписокВыбора = Новый СписокЗначений;
	
	Если Предмет = Неопределено
		Или (Метаданные.ПланыВидовХарактеристик.вогВариантыОпросов.Тип.СодержитТип(ТипПредмета)
			И вогБизнесПроцессыИЗадачиСервер.ПредметуДоступныВариантыОпроса(Предмет)) Тогда
		СписокВыбора.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПустаяСсылка(), 	"Анкета");
	КонецЕсли;
	
	СписокВыбора.Добавить(Документы.вогКомандировка.ПустаяСсылка(), 						"Командировка");
	
	Если Предмет = Неопределено
		Или ТипПредмета = Тип("СправочникСсылка.Партнеры")
		Или ТипПредмета = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		СписокВыбора.Добавить(Документы.CRM_Мероприятие.ПустаяСсылка(), 					"Мероприятие");
	КонецЕсли;
	
	СписокВыбора.Добавить(Задачи.ЗадачаИсполнителя.ПустаяСсылка(), 							"Задача");
	СписокВыбора.Добавить("", 																"Текстовое описание");
	СписокВыбора.Добавить(Перечисления.вогТипыПрисоединенныхФайлов.ПустаяСсылка(), 			"Фото");
	СписокВыбора.Добавить(Справочники.Номенклатура.ПустаяСсылка(), 							"Номенклатура");
	СписокВыбора.Добавить(Справочники.вогБренды.ПустаяСсылка(), 							"Бренд");
	СписокВыбора.Добавить(Справочники.вогДизайныНоменклатуры.ПустаяСсылка(), 				"Дизайн");
	//СписокВыбора.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), 					"Договор");
	СписокВыбора.Добавить(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка(), 				"Контактное лицо");
	СписокВыбора.Добавить(Справочники.Пользователи.ПустаяСсылка(), 							"Пользователь");
	//СписокВыбора.Добавить(Справочники.КоллекцииДляСайта.ПустаяСсылка(), 					"Коллекция");
	
	Возврат СписокВыбора;
	
КонецФункции

// ++ VOG Солодов В.В. 23.10.2020 CRM-992
Функция ПолучитьСписокИсполнителейЗадачиПоручения(ЗадачаСсылка, ИсключитьСоисполнителей = Ложь) Экспорт
	
	СписокИсполнителей = Новый СписокЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаСсылка,
		"БизнесПроцесс, Исполнитель, CRM_ТочкаМаршрута, ОсновнойОбъектАдресации");
	// До изменения
	//РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	//	ЗадачаСсылка,
	//	"БизнесПроцесс, Исполнитель, CRM_ТочкаМаршрута");
	// -- VOG Солодов В.В. 03.12.2020 CRM-1099
		
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(РеквизитыЗадачи.БизнесПроцесс);
	НаборЭтапов.Прочитать();
	
	Если НаборЭтапов.Количество() > 0
		И (НаборЭтапов[2].ТочкаМаршрута = РеквизитыЗадачи.CRM_ТочкаМаршрута
		Или НаборЭтапов[3].ТочкаМаршрута = РеквизитыЗадачи.CRM_ТочкаМаршрута
		Или НаборЭтапов[4].ТочкаМаршрута = РеквизитыЗадачи.CRM_ТочкаМаршрута) Тогда
		
		СписокИсполнителей.Добавить(РеквизитыЗадачи.Исполнитель);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСписокИсполнителейПоручения.Исполнитель КАК Исполнитель,
		|	вогСписокИсполнителейПоручения.Контролер КАК Контролер,
		|	вогСписокИсполнителейПоручения.Соисполнитель КАК Соисполнитель,
		|	вогСписокИсполнителейПоручения.Наблюдатель КАК Наблюдатель
		|ПОМЕСТИТЬ ВТ_ИсполнителиПроцесса
		|ИЗ
		|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
		|ГДЕ
		|	вогСписокИсполнителейПоручения.БизнесПроцесс = &БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИсполнителиПроцесса.Исполнитель КАК Исполнитель,
		|	0 КАК Порядок
		|ИЗ
		|	ВТ_ИсполнителиПроцесса КАК ВТ_ИсполнителиПроцесса
		|ГДЕ
		|	НЕ ВТ_ИсполнителиПроцесса.Контролер
		|	И НЕ ВТ_ИсполнителиПроцесса.Соисполнитель
		|	И НЕ ВТ_ИсполнителиПроцесса.Наблюдатель
		|	И ВТ_ИсполнителиПроцесса.Исполнитель В(&Исполнители)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ИсполнителиПроцесса.Исполнитель,
		|	1
		|ИЗ
		|	ВТ_ИсполнителиПроцесса КАК ВТ_ИсполнителиПроцесса
		|ГДЕ
		|	ВТ_ИсполнителиПроцесса.Соисполнитель
		|	И НЕ &ИсключитьСоисполнителей
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", 				РеквизитыЗадачи.БизнесПроцесс);
		Запрос.УстановитьПараметр("ИсключитьСоисполнителей", 	ИсключитьСоисполнителей);
		// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
		Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
			МассивДелегатов = вогНастраиваемоеДелегированиеПрав.ПолучитьМассивПользователейДелегата(
				"ПроцессыИЗадачи",
				Истина,
				РеквизитыЗадачи.Исполнитель);
			Запрос.УстановитьПараметр("Исполнители", 			МассивДелегатов);
		Иначе
			МассивИсполнителей = Новый Массив;
			МассивИсполнителей.Добавить(РеквизитыЗадачи.ОсновнойОбъектАдресации);
			Запрос.УстановитьПараметр("Исполнители", 			МассивИсполнителей);
		КонецЕсли;
		// -- VOG Солодов В.В. 03.12.2020 CRM-1099
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
			// До изменения
			//Если РеквизитыЗадачи.Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель
			//	Или РеквизитыЗадачи.ОсновнойОбъектАдресации = ВыборкаДетальныеЗаписи.Исполнитель
			//	Или ВыборкаДетальныеЗаписи.Соисполнитель Тогда
			// -- VOG Солодов В.В. 03.12.2020 CRM-1099
			СписокИсполнителей.Добавить(ВыборкаДетальныеЗаписи.Исполнитель);
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокИсполнителей;
	
КонецФункции

Функция ЭтоНовоеПоручение(ОбъектПроверки) Экспорт
	
	ЭтоНовоеПоручение 	= Ложь;
	ТипОбъекта 			= ТипЗнч(ОбъектПроверки);
	ПроверяемаяСсылка 	= Неопределено;
	
	Если ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		Или ТипОбъекта = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		
		ПроверяемаяСсылка = ОбъектПроверки.БизнесПроцесс;
		
	ИначеЕсли ТипОбъекта = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.CRM_БизнесПроцесс") Тогда
		
		ПроверяемаяСсылка = ОбъектПроверки.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяемаяСсылка) Тогда
		
		КартаМаршрута 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемаяСсылка, "КартаМаршрута");
		ЭтоНовоеПоручение 	= (КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеНовое);
		
	КонецЕсли;
	
	Возврат ЭтоНовоеПоручение;
	
КонецФункции
// -- VOG Солодов В.В. 23.10.2020 CRM-992

Функция НайтиСтрокуДереваРекурсивно(ДеревоЗначений, СтруктураОтбора) Экспорт
	
	СтрокаДерева 	= Неопределено;
	ЭлементыДерева 	= ДеревоЗначений.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		СтруктураЭлемента = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементДерева);
		
		ПоискУспешен = Ложь;
		
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			
			Если СтруктураЭлемента[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				ПоискУспешен = Истина;
			Иначе
				ПоискУспешен = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоискУспешен Тогда
			СтрокаДерева = ЭлементДерева;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева = Неопределено Тогда
		
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			СтрокаДерева = НайтиСтрокуДереваРекурсивно(ЭлементДерева, СтруктураОтбора);
			Если Не СтрокаДерева = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции

Функция ПредметСоответствуетПринадлежностиОбъекта(Предмет, ПринадлежностьОбъекту) Экспорт
	
	Возврат (ПринадлежностьОбъекту = Неопределено Или ТипЗнч(Предмет) = ТипЗнч(ПринадлежностьОбъекту));
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьУникальныйИдентификатор(Идентификатор = Неопределено) Экспорт
	
	Если Идентификатор = Неопределено Тогда
		Возврат СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
	КонецЕсли;
	
	Возврат СтрЗаменить(Идентификатор, "-", "_");
	
КонецФункции

Функция СформироватьСтруктуруКоманды() Экспорт
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("Имя");
	СтруктураКоманды.Вставить("Действие");
	СтруктураКоманды.Вставить("Картинка");
	СтруктураКоманды.Вставить("Подсказка");
	СтруктураКоманды.Вставить("Видимость", 							Истина);
	СтруктураКоманды.Вставить("ОпределятьДоступность", 				Ложь);
	СтруктураКоманды.Вставить("ОбработчикОпределенияДоступности", 	"");
	
	Возврат СтруктураКоманды;
	
КонецФункции

Функция СформироватьСтруктуруЭлемента(ПолнаяСтруктура = Ложь, Мониторинг = Ложь) Экспорт
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Имя");
	СтруктураЭлемента.Вставить("Вид");
	СтруктураЭлемента.Вставить("ПодсказкаВвода", 			"");
	СтруктураЭлемента.Вставить("ПоложениеЗаголовка", 		"Нет");
	СтруктураЭлемента.Вставить("КнопкаРегулирования", 		Ложь);
	СтруктураЭлемента.Вставить("КнопкаОткрытия", 			Ложь);
	СтруктураЭлемента.Вставить("РежимВыбораИзСписка", 		Ложь);
	СтруктураЭлемента.Вставить("СписокВыбора", 				Новый Массив);
	СтруктураЭлемента.Вставить("ВидПереключателя", 			"Авто");
	СтруктураЭлемента.Вставить("ПутьКДанным", 				"ИмяЭлемента");
	СтруктураЭлемента.Вставить("ЭтоРеквизитТаблицы", 		Ложь);
	СтруктураЭлемента.Вставить("ТолькоПросмотр", 			Ложь);
	СтруктураЭлемента.Вставить("РастягиватьПоГоризонтали", 	Неопределено);
	СтруктураЭлемента.Вставить("Ширина", 					0);
	СтруктураЭлемента.Вставить("АвтоМаксимальнаяШирина", 	Истина);
	СтруктураЭлемента.Вставить("КартинкаКнопкиВыбора", 		Неопределено);
	СтруктураЭлемента.Вставить("ДействиеПриИзменении", 		"");
	СтруктураЭлемента.Вставить("ДействиеНачалоВыбора", 		"");
	СтруктураЭлемента.Вставить("АвтоОтметкаНезаполненного", Неопределено);
	СтруктураЭлемента.Вставить("ПараметрыВыбора", 			Неопределено);
	
	Если ПолнаяСтруктура Тогда
		
		СтруктураЭлемента.Вставить("Тип");
		СтруктураЭлемента.Вставить("ИмяРодителя");
		СтруктураЭлемента.Вставить("Подсказка", 				"");
		СтруктураЭлемента.Вставить("Заголовок", 				"");
		СтруктураЭлемента.Вставить("Доступность", 				Истина);
		СтруктураЭлемента.Вставить("Видимость", 				Истина);
		СтруктураЭлемента.Вставить("РастягиватьПоВертикали", 	Неопределено);
		СтруктураЭлемента.Вставить("МаксимальнаяШирина", 		0);
		СтруктураЭлемента.Вставить("АвтоМаксимальнаяВысота", 	Истина);
		СтруктураЭлемента.Вставить("ГруппировкаПодчиненных");
		СтруктураЭлемента.Вставить("ДобавитьРамку", 			Ложь);
		СтруктураЭлемента.Вставить("Действия", 					Новый Массив);
		СтруктураЭлемента.Вставить("Гиперссылка", 				Ложь);
		СтруктураЭлемента.Вставить("УстановитьРазмерыТаблицы", 	Ложь);
		СтруктураЭлемента.Вставить("ПутьКДаннымКартинкиСтроки", "");
		СтруктураЭлемента.Вставить("КартинкаСтрок", 			Неопределено);
		СтруктураЭлемента.Вставить("ВыводитьПодвал", 			Ложь);
		СтруктураЭлемента.Вставить("Шрифт", 					Неопределено);
		
	КонецЕсли;
	
	Если Мониторинг Тогда
		
		СтруктураЭлемента.РастягиватьПоГоризонтали 	= Истина;
		СтруктураЭлемента.РастягиватьПоВертикали 	= Истина;
		СтруктураЭлемента.Вставить("Высота", 								0);
		СтруктураЭлемента.Вставить("МаксимальнаяВысота", 					0);
		СтруктураЭлемента.Вставить("РазмерКартинки", 						"АвтоРазмер");
		СтруктураЭлемента.Вставить("ВертикальноеПоложениеПодчиненных", 		"Авто");
		СтруктураЭлемента.Вставить("ГоризонтальноеПоложениеПодчиненных", 	"Авто");
		СтруктураЭлемента.Вставить("ГоризонтальноеПоложение", 				"Авто");
		СтруктураЭлемента.Вставить("Формат", 								"");
		
	КонецЕсли;
	
	Возврат СтруктураЭлемента;
	
КонецФункции

Функция СформироватьСтруктуруРеквизита() Экспорт
	
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("Имя");
	СтруктураРеквизита.Вставить("Тип");
	СтруктураРеквизита.Вставить("Заголовок", "");
	
	Возврат СтруктураРеквизита;
	
КонецФункции

Функция СоздатьСтраницуФормы(Форма, ИдентификаторЭлемента, РодительЭлемента) Экспорт
	
	ИмяСтраницы = "Страница_" + ИдентификаторЭлемента;
	
	СтраницаЭлементов = Форма.Элементы.Найти(ИмяСтраницы);
	
	Если СтраницаЭлементов = Неопределено Тогда
		
		СтраницаЭлементов = Форма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), РодительЭлемента);
		СтраницаЭлементов.Вид 						= ВидГруппыФормы.Страница;
		СтраницаЭлементов.ОтображатьЗаголовок 		= Ложь;
		СтраницаЭлементов.РастягиватьПоВертикали 	= Ложь;
		СтраницаЭлементов.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
	КонецЕсли;
	
	Возврат СтраницаЭлементов;
	
КонецФункции

Функция СоздатьГруппуЭлементовПоля(Форма, ИмяЭлемента, РодительЭлемента, СледующийЭлемент = Неопределено, НастройкаЭлемента) Экспорт
	
	ГруппаЭлементов = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если Не ГруппаЭлементов = Неопределено Тогда
		Возврат ГруппаЭлементов;
	КонецЕсли;
	
	Если СледующийЭлемент = Неопределено Тогда
		ГруппаЭлементов = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), РодительЭлемента);
	Иначе
		ГруппаЭлементов = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), РодительЭлемента, СледующийЭлемент);
	КонецЕсли;
	
	ГруппаЭлементов.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.ОтображатьЗаголовок 		= Ложь;
	ГруппаЭлементов.Отображение 				= ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлементов.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы[НастройкаЭлемента.ГруппировкаПодчиненных];
	
	Если НастройкаЭлемента.Свойство("РастягиватьПоГоризонтали") Тогда
		ГруппаЭлементов.РастягиватьПоГоризонтали 	= НастройкаЭлемента.РастягиватьПоГоризонтали;
	Иначе
		ГруппаЭлементов.РастягиватьПоГоризонтали 	= Ложь;
	КонецЕсли;
	
	Если НастройкаЭлемента.Свойство("РастягиватьПоВертикали") Тогда
		ГруппаЭлементов.РастягиватьПоВертикали 	= НастройкаЭлемента.РастягиватьПоВертикали;
	Иначе
		ГруппаЭлементов.РастягиватьПоВертикали 	= Ложь;
	КонецЕсли;
	
	Если НастройкаЭлемента.Свойство("ЦветФона") Тогда
		
		Если ТипЗнч(НастройкаЭлемента.ЦветФона) = Тип("Цвет") Тогда
			ГруппаЭлементов.ЦветФона 				= НастройкаЭлемента.ЦветФона;
		Иначе
			ГруппаЭлементов.ЦветФона 				= ЦветаСтиля[НастройкаЭлемента.ЦветФона];
		КонецЕсли;
		
	Иначе
		ГруппаЭлементов.ЦветФона 					= ЦветаСтиля.ЦветФонаФормы;
	КонецЕсли;
	
	Если НастройкаЭлемента.Свойство("Ширина") Тогда
		ГруппаЭлементов.Ширина 						= НастройкаЭлемента.Ширина;
	КонецЕсли;
	
	Если НастройкаЭлемента.Свойство("ВертикальноеПоложениеПодчиненных") Тогда
		ГруппаЭлементов.ВертикальноеПоложениеПодчиненных
			= ВертикальноеПоложениеЭлемента[НастройкаЭлемента.ВертикальноеПоложениеПодчиненных];
	КонецЕсли;
	
	Если НастройкаЭлемента.Свойство("ГоризонтальноеПоложениеПодчиненных") Тогда
		ГруппаЭлементов.ГоризонтальноеПоложениеПодчиненных
			= ГоризонтальноеПоложениеЭлемента[НастройкаЭлемента.ГоризонтальноеПоложениеПодчиненных];
	КонецЕсли;
	
	Возврат ГруппаЭлементов;
	
КонецФункции

Процедура СоздатьПолеФормы(Форма, ИмяЭлемента, РодительЭлемента, НастройкаЭлемента, ПутьКДанным) Экспорт
	
	Элемент = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если Не Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, НастройкаЭлемента.Тип, РодительЭлемента);
	Элемент.Вид 							= ВидПоляФормы[НастройкаЭлемента.Вид];
	Элемент.ПоложениеЗаголовка 				= ПоложениеЗаголовкаЭлементаФормы[НастройкаЭлемента.ПоложениеЗаголовка];
	Элемент.ПутьКДанным 					= ПутьКДанным;
	Элемент.ТолькоПросмотр 					= НастройкаЭлемента.ТолькоПросмотр;
	
	Если Не НастройкаЭлемента.Шрифт = Неопределено Тогда
		Элемент.Шрифт 						= НастройкаЭлемента.Шрифт;
	КонецЕсли;
	
	Элемент.Ширина 							= НастройкаЭлемента.Ширина;
	Элемент.МаксимальнаяШирина 				= НастройкаЭлемента.МаксимальнаяШирина;
	Элемент.АвтоМаксимальнаяШирина 			= НастройкаЭлемента.АвтоМаксимальнаяШирина;
	Элемент.Высота 							= НастройкаЭлемента.Высота;
	Элемент.МаксимальнаяВысота 				= НастройкаЭлемента.МаксимальнаяВысота;
	Элемент.АвтоМаксимальнаяВысота 			= НастройкаЭлемента.АвтоМаксимальнаяВысота;
	Элемент.РастягиватьПоГоризонтали 		= НастройкаЭлемента.РастягиватьПоГоризонтали;
	Элемент.РастягиватьПоВертикали 			= НастройкаЭлемента.РастягиватьПоВертикали;
	
	Если ВидПоляФормы[НастройкаЭлемента.Вид] = ВидПоляФормы.ПолеКартинки Тогда
		
		Элемент.РазмерКартинки 				= РазмерКартинки[НастройкаЭлемента.РазмерКартинки];
		
		Если Не НастройкаЭлемента.ДобавитьРамку Тогда
			Элемент.Рамка 					= Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		КонецЕсли;
		
	Иначе
		Элемент.Формат 						= НастройкаЭлемента.Формат;
	КонецЕсли;
	
	Элемент.ВертикальноеПоложение 			= ВертикальноеПоложениеЭлемента.Верх;
	Элемент.ВертикальноеПоложениеВГруппе 	= ВертикальноеПоложениеЭлемента.Верх;
	
	Элемент.ГоризонтальноеПоложение 		= ГоризонтальноеПоложениеЭлемента[НастройкаЭлемента.ГоризонтальноеПоложение];
	
	Если НастройкаЭлемента.ГиперСсылка Тогда
		Элемент.Гиперссылка 				= Истина;
	КонецЕсли;
	
	Для Каждого СоответствиеДействий Из НастройкаЭлемента.Действия Цикл
		Для Каждого КлючИЗначение Из СоответствиеДействий Цикл
			Элемент.УстановитьДействие(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьРазделитель(Форма, ИмяЭлемента, РодительЭлемента, НастройкаЭлемента) Экспорт
	
	Если Не Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДекорацияРазделитель = Форма.Элементы.Добавить(
		ИмяЭлемента,
		Тип("ДекорацияФормы"),
		РодительЭлемента);
	
	ДекорацияРазделитель.Вид 						= ВидДекорацииФормы.Надпись;
	ДекорацияРазделитель.Шрифт 						= Новый Шрифт(, 4);
	ДекорацияРазделитель.АвтоМаксимальнаяШирина		= Ложь;
	ДекорацияРазделитель.РастягиватьПоГоризонтали 	= Истина;
	
	Если НастройкаЭлемента.ДобавитьРамку Тогда
		ДекорацияРазделитель.Рамка 					= Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 1);
	КонецЕсли;
	
	Если НастройкаЭлемента.Свойство("Ширина") Тогда
		ДекорацияРазделитель.Ширина 				= НастройкаЭлемента.Ширина;
		ДекорацияРазделитель.МаксимальнаяШирина 	= НастройкаЭлемента.МаксимальнаяШирина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьТаблицуФормы(Форма, ИмяЭлемента, РодительЭлемента, НастройкаЭлемента, ПутьКДанным) Экспорт
	
	Если Не Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементТаблица = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ТаблицаФормы"), РодительЭлемента);
	ЭлементТаблица.ПоложениеКоманднойПанели 				= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТаблица.ПоложениеЗаголовка 						= ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементТаблица.Заголовок 								= НастройкаЭлемента.Заголовок;
	ЭлементТаблица.ПутьКДанным 								= ПутьКДанным;
	ЭлементТаблица.РастягиватьПоВертикали 					= Ложь;
	ЭлементТаблица.РастягиватьПоГоризонтали 				= Истина;
	ЭлементТаблица.ТолькоПросмотр 							= НастройкаЭлемента.ТолькоПросмотр;
	ЭлементТаблица.ЦветФона									= WebЦвета.ДымчатоБелый;
	ЭлементТаблица.ЦветРамки								= WebЦвета.ДымчатоБелый;
	ЭлементТаблица.АвтоМаксимальнаяВысота					= Ложь;
	ЭлементТаблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы 	= Ложь;
	ЭлементТаблица.ВариантУправленияВысотой 				= ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементТаблица.Шапка 									= Ложь;
	ЭлементТаблица.Подсказка 								= НастройкаЭлемента.Подсказка;
	ЭлементТаблица.ГоризонтальныеЛинии 						= Ложь;
	ЭлементТаблица.Подвал 									= Ложь;
	
	Если НастройкаЭлемента.Заголовок = " " Тогда
		ЭлементТаблица.ЦветТекстаЗаголовка 					= WebЦвета.ДымчатоБелый;
	КонецЕсли;
	
	Если НастройкаЭлемента.УстановитьРазмерыТаблицы Тогда
		
		ЭлементТаблица.АвтоМаксимальнаяШирина 				= НастройкаЭлемента.АвтоМаксимальнаяШирина;
		ЭлементТаблица.РастягиватьПоГоризонтали 			= НастройкаЭлемента.РастягиватьПоГоризонтали;
		ЭлементТаблица.Ширина 								= НастройкаЭлемента.Ширина;
		ЭлементТаблица.МаксимальнаяШирина 					= НастройкаЭлемента.МаксимальнаяШирина;
		
	КонецЕсли;
	
	Для Каждого СоответствиеДействий Из НастройкаЭлемента.Действия Цикл
		Для Каждого КлючИЗначение Из СоответствиеДействий Цикл
			ЭлементТаблица.УстановитьДействие(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Если Не ПустаяСтрока(НастройкаЭлемента.ПутьКДаннымКартинкиСтроки) Тогда
		ЭлементТаблица.ПутьКДаннымКартинкиСтроки 			= НастройкаЭлемента.ПутьКДаннымКартинкиСтроки;
		ЭлементТаблица.КартинкаСтрок 						= НастройкаЭлемента.КартинкаСтрок;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПолеТаблицы(Форма, ИмяЭлемента, РодительЭлемента, НастройкаЭлемента, ПутьКданным) Экспорт
	
	Если Не Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), РодительЭлемента);
	Элемент.Вид 								= ВидПоляФормы[НастройкаЭлемента.Вид];
	Элемент.ПоложениеЗаголовка 					= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ПутьКДанным 						= ПутьКданным;
	Элемент.Доступность 						= НастройкаЭлемента.Доступность;
	Элемент.Видимость 							= НастройкаЭлемента.Видимость;
	
	Если НастройкаЭлемента.ГиперСсылка Тогда
		
		Элемент.Гиперссылка 					= Истина;
		Элемент.ГиперссылкаЯчейки 				= Истина;
		
	КонецЕсли;
	
	Если Элемент.Вид = ВидПоляФормы.ПолеКартинки Тогда
		Элемент.ГоризонтальноеПоложение 		= ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.ГоризонтальноеПоложениеВГруппе 	= ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.ГоризонтальноеПоложениеВШапке 	= ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.РастягиватьПоВертикали 			= Ложь;
		Элемент.РастягиватьПоГоризонтали 		= Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредметуДоступныВариантыОпроса(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	вогВариантыОпросов.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.вогВариантыОпросов КАК вогВариантыОпросов
		|ГДЕ
		|	вогВариантыОпросов.ИспользоватьДляПоручения = ИСТИНА
		|	И вогВариантыОпросов.ПометкаУдаления = ЛОЖЬ
		|	И вогВариантыОпросов.ТипыРеспондента.ТипРеспондента = &ТипРеспондента";
	
	Запрос.УстановитьПараметр("ТипРеспондента", Предмет.Метаданные().ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьПодчиненныхСотрудников(Пользователь) Экспорт
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
	|ПОМЕСТИТЬ ВТ_ДолжностныеПозиции
	|ИЗ
	|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
	|ГДЕ
	|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ДолжностныеПозиции.Ссылка
	|ИЗ
	|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
	|ГДЕ
	|	CRM_ДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.CRM_ДолжностнаяПозиция В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВТ_ДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
	|			ИЗ
	|				ВТ_ДолжностныеПозиции КАК ВТ_ДолжностныеПозиции)
	|	И (НЕ Пользователи.CRM_ДолжностнаяПозиция = &ДолжностнаяПозиция
	|			ИЛИ Пользователи.Ссылка = &Пользователь)
	|
	|СГРУППИРОВАТЬ ПО
	|	Пользователи.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	ДолжностнаяПозиция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "CRM_ДолжностнаяПозиция");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр(
		"СписокДолжностныхПозиций", ПолучитьСписокДолжностныхПозицийПользователя(Пользователь, ДолжностнаяПозиция));
	Запрос.УстановитьПараметр("ДолжностнаяПозиция", ДолжностнаяПозиция);
	
	ПодчиненныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Возврат ПодчиненныеСотрудники;
	
КонецФункции

// ++ VOG Солодов В.В. 01.06.2021 DEV-608
Функция ОпределитьФормуЗадачи(ЗадачаСсылка) Экспорт
	
	ИмяФормы = "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачи";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПроцессы.Ссылка КАК БизнесПроцесс,
		|	ТаблицаПроцессы.Автор КАК Автор,
		|	ТаблицаПроцессы.Ответственный КАК Ответственный
		|ПОМЕСТИТЬ ВТ_Процессы
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК ТаблицаПроцессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ТаблицаЗадачи
		|		ПО ТаблицаПроцессы.Ссылка = ТаблицаЗадачи.БизнесПроцесс
		|ГДЕ
		|	ТаблицаЗадачи.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаИсполнителей.Исполнитель КАК Исполнитель,
		|	ТаблицаИсполнителей.Контролер КАК Контролер,
		|	ТаблицаИсполнителей.Соисполнитель КАК Соисполнитель,
		|	ТаблицаИсполнителей.Наблюдатель КАК Наблюдатель
		|ПОМЕСТИТЬ ВТ_ВсеИсполнители
		|ИЗ
		|	РегистрСведений.вогСписокИсполнителейПоручения КАК ТаблицаИсполнителей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Процессы КАК ВТ_Процессы
		|		ПО ТаблицаИсполнителей.БизнесПроцесс = ВТ_Процессы.БизнесПроцесс
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_Процессы.Автор,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	ВТ_Процессы КАК ВТ_Процессы
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_Процессы.Ответственный,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	ВТ_Процессы КАК ВТ_Процессы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеИсполнители.Исполнитель КАК Исполнитель,
		|	ИСТИНА КАК ФормаЗадачи,
		|	ЛОЖЬ КАК ФормаМонитор
		|ПОМЕСТИТЬ ВТ_ОпределениеФормы
		|ИЗ
		|	ВТ_ВсеИсполнители КАК ВТ_ВсеИсполнители
		|ГДЕ
		|	НЕ ВТ_ВсеИсполнители.Контролер
		|	И НЕ ВТ_ВсеИсполнители.Наблюдатель
		|	И НЕ ВТ_ВсеИсполнители.Соисполнитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеИсполнители.Исполнитель,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ВТ_ВсеИсполнители КАК ВТ_ВсеИсполнители
		|ГДЕ
		|	ВТ_ВсеИсполнители.Соисполнитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеИсполнители.Исполнитель,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ВТ_ВсеИсполнители КАК ВТ_ВсеИсполнители
		|ГДЕ
		|	ВТ_ВсеИсполнители.Контролер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеИсполнители.Исполнитель,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ВТ_ВсеИсполнители КАК ВТ_ВсеИсполнители
		|ГДЕ
		|	ВТ_ВсеИсполнители.Наблюдатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ОпределениеФормы.Исполнитель КАК Исполнитель,
		|	МАКСИМУМ(ВТ_ОпределениеФормы.ФормаЗадачи) КАК ФормаЗадачи,
		|	МАКСИМУМ(ВТ_ОпределениеФормы.ФормаМонитор) КАК ФормаМонитор
		|ИЗ
		|	ВТ_ОпределениеФормы КАК ВТ_ОпределениеФормы
		|ГДЕ
		// ++ VOG Солодов В.В. 16.06.2021 DEV-652
		|	ВТ_ОпределениеФормы.Исполнитель В(&ПодчиненныеПользователи)
		// До изменения
		//|	ВТ_ОпределениеФормы.Исполнитель = &ТекущийПользователь
		// -- VOG Солодов В.В. 16.06.2021 DEV-652
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОпределениеФормы.Исполнитель
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат,
		|	МАКСИМУМ(ВТ_ОпределениеФормы.ФормаЗадачи),
		|	МАКСИМУМ(ВТ_ОпределениеФормы.ФормаМонитор)
		|ИЗ
		|	ВТ_ОпределениеФормы КАК ВТ_ОпределениеФормы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|		ПО ВТ_ОпределениеФормы.Исполнитель = вогИсполнителиРолейИДелегаты.РольПользователь
		|			И (вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи""))
		|ГДЕ
		// ++ VOG Солодов В.В. 16.06.2021 DEV-652
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат В(&ПодчиненныеПользователи)
		// До изменения
		//|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
		// -- VOG Солодов В.В. 16.06.2021 DEV-652
		|
		|СГРУППИРОВАТЬ ПО
		|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат";
	
	Запрос.УстановитьПараметр("Ссылка", 					ЗадачаСсылка);
	// ++ VOG Солодов В.В. 16.06.2021 DEV-652
	Запрос.УстановитьПараметр("ПодчиненныеПользователи", 	вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников());
	// До изменения
	//Запрос.УстановитьПараметр("ТекущийПользователь", 		Пользователи.ТекущийПользователь());
	// -- VOG Солодов В.В. 16.06.2021 DEV-652
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ФормаМонитор Тогда
			ИмяФормы = "БизнесПроцесс.CRM_БизнесПроцесс.Форма.вогМониторИсполненияПоручения";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяФормы;
	
КонецФункции // -- VOG Солодов В.В. 01.06.2021 DEV-608

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаЗаполнениеПредметов(СсылкаНаОбъект)
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_БизнесПроцессвогПредметы.НомерСтроки КАК НомерСтроки,
	|	%ТекстЗаменыПредмет%,
	|	CRM_БизнесПроцессвогПредметы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	CRM_БизнесПроцессвогПредметы.ИдентификаторРодителя КАК ИдентификаторРодителя,
	|	CRM_БизнесПроцессвогПредметы.ТребуетсяЗаполнениеЧекЛиста КАК ТребуетсяЗаполнениеЧекЛиста,
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	|	CRM_БизнесПроцессвогПредметы.Адрес КАК Адрес
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	|ПОМЕСТИТЬ ВТ_ПредметыБизнесПроцесса
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс.вогПредметы КАК CRM_БизнесПроцессвогПредметы
	|%ТекстСоединения%
	|ГДЕ
	|	CRM_БизнесПроцессвогПредметы.Ссылка = &БизнесПроцесс");
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ПредметыБизнесПроцесса.НомерСтроки КАК НомерСтроки,
		|	ВТ_ПредметыБизнесПроцесса.Предмет КАК Предмет,
		|	ВТ_ПредметыБизнесПроцесса.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТ_ПредметыБизнесПроцесса.ИдентификаторРодителя КАК ИдентификаторРодителя,
		|	ВТ_ПредметыБизнесПроцесса.ТребуетсяЗаполнениеЧекЛиста КАК ТребуетсяЗаполнениеЧекЛиста,
		|	ИСТИНА КАК ПредметБП,
		// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
		|	ВТ_ПредметыБизнесПроцесса.Адрес КАК Адрес
		// -- VOG Солодов В.В. 30.11.2020 CRM-1071
		|ИЗ
		|	ВТ_ПредметыБизнесПроцесса КАК ВТ_ПредметыБизнесПроцесса
		|ГДЕ
		|	НЕ ВТ_ПредметыБизнесПроцесса.Предмет ЕСТЬ NULL");
	
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителявогПредметы.НомерСтроки КАК НомерСтроки,
		|	ЗадачаИсполнителявогПредметы.Предмет КАК Предмет,
		|	ЗадачаИсполнителявогПредметы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЗадачаИсполнителявогПредметы.ИдентификаторРодителя КАК ИдентификаторРодителя,
		|	ЗадачаИсполнителявогПредметы.ТребуетсяЗаполнениеЧекЛиста КАК ТребуетсяЗаполнениеЧекЛиста,
		|	ВЫБОР
		|		КОГДА ВТ_ПредметыБизнесПроцесса.Предмет ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПредметБП
		|ИЗ
		|	Задача.ЗадачаИсполнителя.вогПредметы КАК ЗадачаИсполнителявогПредметы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредметыБизнесПроцесса КАК ВТ_ПредметыБизнесПроцесса
		|		ПО ЗадачаИсполнителявогПредметы.НомерСтроки = ВТ_ПредметыБизнесПроцесса.НомерСтроки
		|			И ЗадачаИсполнителявогПредметы.Предмет = ВТ_ПредметыБизнесПроцесса.Предмет
		|ГДЕ
		|	ЗадачаИсполнителявогПредметы.Ссылка = &Задача");
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ШаблонТекстаПредмет =
	"	КОГДА CRM_БизнесПроцессвогПредметы.Предмет ССЫЛКА %1
	|		ТОГДА %2.Ссылка";
	
	ШаблонТекстаСоединение =
	"		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК %2
	|		ПО CRM_БизнесПроцессвогПредметы.Предмет = %2.Ссылка";
	
	ТекстыЗаменыПредмет = Новый Массив;
	ТекстыЗаменыПредмет.Добавить("ВЫБОР");
	
	ТекстыСоединения = Новый Массив;
	
	Для Каждого ТипПредметаПоручения Из Метаданные.ОпределяемыеТипы.вогТипыПредметовПоручений.Тип.Типы() Цикл
		
		ПолноеИмяОбъектаМетаданных 	= СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипПредметаПоручения);
		Псевдоним 					= СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "_");
		
		ТекстыЗаменыПредмет.Добавить(СтрШаблон(ШаблонТекстаПредмет, ПолноеИмяОбъектаМетаданных, Псевдоним));
		ТекстыСоединения.Добавить(СтрШаблон(ШаблонТекстаСоединение, ПолноеИмяОбъектаМетаданных, Псевдоним));
		
	КонецЦикла;
	
	ТекстыЗаменыПредмет.Добавить("КОНЕЦ КАК Предмет");
	ТекстЗаменыПредмет = СтрСоединить(ТекстыЗаменыПредмет, Символы.ПС);
	ТекстСоединения = СтрСоединить(ТекстыСоединения, Символы.ПС);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстЗаменыПредмет%", ТекстЗаменыПредмет);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстСоединения%", ТекстСоединения);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДеревоПредметовРекурсивно(ЭлементДерева, ИдентификаторРодителя, ТаблицаПредметы)
	
	ЭлементыКорня = ЭлементДерева.ПолучитьЭлементы();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИдентификаторРодителя", ИдентификаторРодителя);
	
	КорневыеСтроки = ТаблицаПредметы.НайтиСтроки(ПараметрыОтбора);
	
	МассивИдентификаторовСтрок = Новый Массив;
	
	Для Каждого СтрокаКорня Из КорневыеСтроки Цикл
		МассивИдентификаторовСтрок.Добавить(СтрокаКорня.ИдентификаторСтроки);
	КонецЦикла;
	
	МассивИдентификаторовСтрок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИдентификаторовСтрок);
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		
		НайденныеСтроки = ТаблицаПредметы.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			НовыйЭлементДерева = ЭлементыКорня.Добавить();
			НовыйЭлементДерева.Предмет 					= СтрокаТабличнойЧасти.Предмет;
			НовыйЭлементДерева.Пометка 					= СтрокаТабличнойЧасти.ТребуетсяЗаполнениеЧекЛиста;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйЭлементДерева, "ПредметБП") Тогда
				НовыйЭлементДерева.ПредметБП 			= СтрокаТабличнойЧасти.ПредметБП;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйЭлементДерева, "ИдентификаторСтроки") Тогда
				НовыйЭлементДерева.ИдентификаторСтроки 	= ИдентификаторСтроки;
			КонецЕсли;
			
			// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйЭлементДерева, "Адрес") Тогда
				НовыйЭлементДерева.Адрес 				= СтрокаТабличнойЧасти.Адрес;
			КонецЕсли;
			// -- VOG Солодов В.В. 30.11.2020 CRM-1071
			
		КонецЦикла;
		
		ЗаполнитьДеревоПредметовРекурсивно(НовыйЭлементДерева, ИдентификаторСтроки, ТаблицаПредметы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыделитьПредметСЗадачамиРекурсивно(Форма, КореньДерева, ИмяТаблицыЗадач)
	
	ЭлементыДерева = КореньДерева.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяТаблицыЗадач) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Предмет", ЭлементДерева.Предмет);
		
		НайденныеСтроки = Форма[ИмяТаблицыЗадач].НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Форма.Элементы.Предметы.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Прервать;
			
		Иначе
			ВыделитьПредметСЗадачамиРекурсивно(Форма, ЭлементДерева, ИмяТаблицыЗадач);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПрисоединенныеФайлы(Источник, Получатель, СоответствиеОтбора)
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Источник, МассивФайлов);
	
	ИмяСправочникаХранилищаФайлов = Получатель.Метаданные().Имя + "ПрисоединенныеФайлы";
	МенеджерОбъекта = Справочники[ИмяСправочникаХранилищаФайлов];
	
	Для Каждого КопируемыйФайл Из МассивФайлов Цикл
		
		Если КопируемыйФайл.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ВидФайла = СоответствиеОтбора.Получить(КопируемыйФайл);
		
		Если ВидФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			КопияФайла = МенеджерОбъекта.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(
				КопияФайла,
				КопируемыйФайл,
				"ДатаМодификацииУниверсальная,
				|Наименование,
				|ДатаСоздания,
				|Зашифрован,
				|Описание,
				|ПодписанЭП,
				|Размер,
				|Расширение,
				|ТекстХранилище,
				|ПометкаУдаления");
			
			КопияФайлаСсылка = МенеджерОбъекта.ПолучитьСсылку();
			КопияФайла.УстановитьСсылкуНового(КопияФайлаСсылка);
			КопияФайла.ВладелецФайла = Получатель.Ссылка;
			КопияФайла.Редактирует = Справочники.Пользователи.ПустаяСсылка();
			
			КопияФайла.ТекстХранилище 	= Новый ХранилищеЗначения(КопируемыйФайл.ТекстХранилище.Получить());
			КопияФайла.ФайлХранилище 	= Новый ХранилищеЗначения(КопируемыйФайл.ФайлХранилище.Получить());
			
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(КопируемыйФайл);
			КопияФайла.ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайлов();
			
			Если РаботаСФайламиСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				
				РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(КопияФайлаСсылка, ДвоичныеДанные);
			Иначе
				// Добавление в один из томов (где есть свободное место).
				СведенияОФайле = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, КопияФайла.ДатаМодификацииУниверсальная,
				КопияФайла.Наименование, КопияФайла.Расширение,, КопияФайла.Зашифрован);
				КопияФайла.Том = СведенияОФайле.Том;
				КопияФайла.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
			КонецЕсли;
			КопияФайла.Записать();
			
			// Запись вида файла
			Если ЗначениеЗаполнено(ВидФайла) Тогда
				
				НаборЗаписей = РегистрыСведений.вогПрисоедниненныеФайлыОбъектовПоВидам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ВидФайла.Установить(ВидФайла);
				НаборЗаписей.Отбор.ПрисоединенныйФайл.Установить(КопияФайлаСсылка);
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ВидФайла 			= ВидФайла;
				НоваяЗапись.ПрисоединенныйФайл 	= КопияФайлаСсылка;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДоступКОбъектам

Функция ТорговаяТочкаДоступнаПользователю(Пользователь, ОбъектыПроверки)
	
	ТекстыЗапроса = Новый Массив;
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить("ОбъектыПроверки");
	
	Если Пользователи.РолиДоступны("ЧтениеТорговыхТочек", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогТорговыеТочки КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК Т1
		|		ПО (Т.Ссылка = Т1.Владелец)
		|ГДЕ
		|	Т1.Менеджер В(&вогПодчиненныеСотрудники)
		|	И Т.Ссылка В(&ОбъектыПроверки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.вогТорговыеТочки КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированныеОбъектыДоступа КАК Т2
		|		ПО Т.Ссылка = Т2.ОбъектДоступа
		|ГДЕ
		|	Т2.ИсполнительДелегат В(&вогПодчиненныеСотрудники)
		|	И Т.Ссылка В(&ОбъектыПроверки)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("вогПодчиненныеСотрудники");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогЧтениеТорговыхТочекПоУровнюДоступа", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогТорговыеТочки КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т3
		|		ПО (Т.Ссылка = Т3.ОбъектДоступа)
		|			И (Т3.Чтение)
		|			И (Т3.УровеньДоступа В (&CRM_ДоступныеПользователюУровниДоступа))
		|			И Т.Ссылка В(&ОбъектыПроверки)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		ПараметрыЗапросаДоступа = ПолучитьПараметрыЗапросаДоступа(ПараметрыЗапроса, Пользователь, ОбъектыПроверки);
		Возврат ВыполнитьЗапросДоступа(ПараметрыЗапросаДоступа, ТекстыЗапроса);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ПартнерДоступенПользователю(Пользователь, ОбъектыПроверки)
	
	ТекстыЗапроса = Новый Массив;
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить("ОбъектыПроверки");
	
	Если Пользователи.РолиДоступны("CRM_БазовыеПрава,CRM_ДобавлениеИзменениеКлиентов", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК Т1
		|		ПО (Т.Ссылка = ВЫРАЗИТЬ(Т1.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т1.Менеджер В(&вогПодчиненныеСотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК Т2
		|		ПО Т.Ссылка = Т2.Владелец
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т2.Менеджер В(&вогПодчиненныеСотрудники)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("вогПодчиненныеСотрудники");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ЧтениеТорговыхТочек", Пользователь, Ложь) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК Т1
		|		ПО (Т.Ссылка = ВЫРАЗИТЬ(Т1.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т1.Менеджер В(&вогПодчиненныеСотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК Т2
		|		ПО (Т.Ссылка = ВЫРАЗИТЬ(Т2.Владелец КАК Справочник.вогЮридическиеЛица).Партнер)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т2.Менеджер В(&вогПодчиненныеСотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированныеОбъектыДоступа КАК Т3
		|		ПО Т.Ссылка = Т3.ОбъектДоступа
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т3.ИсполнительДелегат В(&вогПодчиненныеСотрудники)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("вогПодчиненныеСотрудники");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогЧтениеТорговыхТочекПоУровнюДоступа", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т1
		|		ПО (Т.Ссылка = ВЫРАЗИТЬ(Т1.ОбъектДоступа КАК Справочник.вогТорговыеТочки).Партнер)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т1.УровеньДоступа В(&CRM_ДоступныеПользователюУровниДоступа)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогЧтениеПартнеровПоУровнюДоступа", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т1
		|		ПО (Т.Ссылка = Т1.ОбъектДоступа)
		|			И (Т1.УровеньДоступа В (&CRM_ДоступныеПользователюУровниДоступа))
		|			И (Т1.Чтение)
		|			И (Т.Ссылка В(&ОбъектыПроверки))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогЧтениеЮридическихЛицПоУровнюДоступа", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т1
		|		ПО (Т.Ссылка = ВЫРАЗИТЬ(Т1.ОбъектДоступа КАК Справочник.вогЮридическиеЛица).Партнер)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т1.УровеньДоступа В(&CRM_ДоступныеПользователюУровниДоступа)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		ПараметрыЗапросаДоступа = ПолучитьПараметрыЗапросаДоступа(ПараметрыЗапроса, Пользователь, ОбъектыПроверки);
		Возврат ВыполнитьЗапросДоступа(ПараметрыЗапросаДоступа, ТекстыЗапроса);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ЮридическоеЛицоДоступноПользователю(Пользователь, ОбъектыПроверки)
	
	ТекстыЗапроса = Новый Массив;
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить("ОбъектыПроверки");
	
	Если Пользователи.РолиДоступны("ЧтениеТорговыхТочек", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК Т1
		|		ПО (Т.Партнер = ВЫРАЗИТЬ(Т1.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т1.Менеджер В(&вогПодчиненныеСотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК Т2
		|		ПО Т.Ссылка = Т2.Владелец
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т2.Менеджер В(&вогПодчиненныеСотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т3
		|		ПО Т.Ссылка = Т3.ОбъектДоступа
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т3.УровеньДоступа В(&CRM_ДоступныеПользователюУровниДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированныеОбъектыДоступа КАК Т4
		|		ПО Т.Ссылка = Т4.ОбъектДоступа
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т4.ИсполнительДелегат В(&вогПодчиненныеСотрудники)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("вогПодчиненныеСотрудники");
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогЧтениеЮридическихЛицПоУровнюДоступа", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т1
		|		ПО (Т.Ссылка = Т1.ОбъектДоступа)
		|			И (Т1.УровеньДоступа В (&CRM_ДоступныеПользователюУровниДоступа))
		|			И (Т1.Чтение)
		|			И (Т.Ссылка В(&ОбъектыПроверки))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		ПараметрыЗапросаДоступа = ПолучитьПараметрыЗапросаДоступа(ПараметрыЗапроса, Пользователь, ОбъектыПроверки);
		Возврат ВыполнитьЗапросДоступа(ПараметрыЗапросаДоступа, ТекстыЗапроса);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция КонтактноеЛицоДоступноПользователю(Пользователь, ОбъектыПроверки)
	
	ТекстыЗапроса = Новый Массив;
	ПараметрыЗапроса = Новый Массив;
	// ++ VOG Солодов В.В. 24.11.2020
	ПараметрыЗапроса.Добавить("ОбъектыПроверки");
	// До изменения
	//ПараметрыЗапроса.Добавить("Ссылка");
	// -- VOG Солодов В.В. 24.11.2020
	
	Если Пользователи.РолиДоступны("вогБазовыеПрава", Пользователь, Ложь) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СВЯЗЬ_С_ОБЪКТОМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ТТ
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = МЕНЕДЖЕР_ТТ.Владелец)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ПАРТНЕР
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = ВЫРАЗИТЬ(МЕНЕДЖЕР_ПАРТНЕР.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ЮЛ
		|			ПО (ВЫРАЗИТЬ(СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи КАК Справочник.вогЮридическиеЛица).Партнер = ВЫРАЗИТЬ(МЕНЕДЖЕР_ЮЛ.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|		ПО (СВЯЗЬ_С_ОБЪКТОМ.КонтактноеЛицо = Т.Ссылка)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И (ЕСТЬNULL(МЕНЕДЖЕР_ТТ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ПАРТНЕР.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ЮЛ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("вогПодчиненныеСотрудники");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогДобавлениеИзменениеКонтактныхЛиц", Пользователь, Ложь) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СВЯЗЬ_С_ОБЪКТОМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК ОБЪЕКТЫ_УРОВНЕЙ_ДОСТУПА
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = ОБЪЕКТЫ_УРОВНЕЙ_ДОСТУПА.ОбъектДоступа)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ТТ
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = МЕНЕДЖЕР_ТТ.Владелец)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ПАРТНЕР
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = ВЫРАЗИТЬ(МЕНЕДЖЕР_ПАРТНЕР.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ЮЛ
		|			ПО (ВЫРАЗИТЬ(СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи КАК Справочник.вогЮридическиеЛица).Партнер = ВЫРАЗИТЬ(МЕНЕДЖЕР_ЮЛ.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиРаспределительныхЦентров КАК СВЯЗИ_РЦ
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ТТ_РЦ
		|				ПО (СВЯЗИ_РЦ.ОбъектСвязи = МЕНЕДЖЕР_ТТ_РЦ.Владелец)
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = СВЯЗИ_РЦ.РаспределительныйЦентр)
		|		ПО (СВЯЗЬ_С_ОБЪКТОМ.КонтактноеЛицо = Т.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогДелегированныеОбъектыДоступа КАК Т1
		|		ПО (Т.Ссылка = Т1.ОбъектДоступа)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И (ЕСТЬNULL(МЕНЕДЖЕР_ТТ_РЦ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ТТ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ПАРТНЕР.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ЮЛ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ОБЪЕКТЫ_УРОВНЕЙ_ДОСТУПА.УровеньДоступа В (&CRM_ДоступныеПользователюУровниДоступа)
		|			ИЛИ Т1.ИсполнительДелегат В (&вогПодчиненныеСотрудники))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("вогПодчиненныеСотрудники");
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ЧтениеТорговыхТочек", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СВЯЗЬ_С_ОБЪКТОМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ТТ
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = МЕНЕДЖЕР_ТТ.Владелец)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ПАРТНЕР
		|			ПО (СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи = ВЫРАЗИТЬ(МЕНЕДЖЕР_ПАРТНЕР.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК МЕНЕДЖЕР_ЮЛ
		|			ПО (ВЫРАЗИТЬ(СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи КАК Справочник.вогЮридическиеЛица).Партнер = ВЫРАЗИТЬ(МЕНЕДЖЕР_ЮЛ.Владелец КАК Справочник.вогТорговыеТочки).Партнер)
		|		ПО (СВЯЗЬ_С_ОБЪКТОМ.КонтактноеЛицо = Т.Ссылка)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И (ЕСТЬNULL(МЕНЕДЖЕР_ТТ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ПАРТНЕР.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники)
		|			ИЛИ ЕСТЬNULL(МЕНЕДЖЕР_ЮЛ.Менеджер, НЕОПРЕДЕЛЕНО) В (&вогПодчиненныеСотрудники))";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("вогПодчиненныеСотрудники");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогЧтениеТорговыхТочекПоУровнюДоступа", Пользователь, Ложь) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СВЯЗЬ_С_ОБЪКТОМ
		|		ПО (СВЯЗЬ_С_ОБЪКТОМ.КонтактноеЛицо = Т.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т1
		|		ПО ((ВЫРАЗИТЬ(СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи КАК Справочник.вогТорговыеТочки)) = Т1.ОбъектДоступа)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т1.УровеньДоступа В(&CRM_ДоступныеПользователюУровниДоступа)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогЧтениеПартнеровПоУровнюДоступа", Пользователь, Ложь) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СВЯЗЬ_С_ОБЪКТОМ
		|		ПО (СВЯЗЬ_С_ОБЪКТОМ.КонтактноеЛицо = Т.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т1
		|		ПО ((ВЫРАЗИТЬ(СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи КАК Справочник.Партнеры)) = Т1.ОбъектДоступа)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т1.УровеньДоступа В(&CRM_ДоступныеПользователюУровниДоступа)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("вогЧтениеЮридическихЛицПоУровнюДоступа", Пользователь, Ложь) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц КАК СВЯЗЬ_С_ОБЪКТОМ
		|		ПО (СВЯЗЬ_С_ОБЪКТОМ.КонтактноеЛицо = Т.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогОбъектыУровнейДоступа КАК Т1
		|		ПО ((ВЫРАЗИТЬ(СВЯЗЬ_С_ОБЪКТОМ.ОбъектСвязи КАК Справочник.вогЮридическиеЛица)) = Т1.ОбъектДоступа)
		|ГДЕ
		|	Т.Ссылка В(&ОбъектыПроверки)
		|	И Т1.УровеньДоступа В(&CRM_ДоступныеПользователюУровниДоступа)";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		ПараметрыЗапроса.Добавить("CRM_ДоступныеПользователюУровниДоступа");
		
	КонецЕсли;
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		ПараметрыЗапросаДоступа = ПолучитьПараметрыЗапросаДоступа(ПараметрыЗапроса, Пользователь, ОбъектыПроверки);
		Возврат ВыполнитьЗапросДоступа(ПараметрыЗапросаДоступа, ТекстыЗапроса);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьЗапросДоступа(ПараметрыЗапроса, ТекстыЗапроса)
	
	Запрос = Новый Запрос;
	
	Разделитель =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Разделитель);
	
	Для Каждого КлючИЗначение Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция ПолучитьПараметрыЗапросаДоступа(МассивПараметров, Пользователь, ОбъектыПроверки)
	
	ПараметрыЗапросаДоступа = Новый Соответствие;
	
	Если Не МассивПараметров.Найти("ОбъектыПроверки") = Неопределено Тогда
		ПараметрыЗапросаДоступа.Вставить("ОбъектыПроверки", ОбъектыПроверки);
	КонецЕсли;
	
	Если Не МассивПараметров.Найти("вогПодчиненныеСотрудники") = Неопределено Тогда
		ПараметрыЗапросаДоступа.Вставить(
			"вогПодчиненныеСотрудники", ПолучитьПодчиненныхСотрудников(Пользователь));
	КонецЕсли;
	
	Если Не МассивПараметров.Найти("CRM_ДоступныеПользователюУровниДоступа") = Неопределено Тогда
		ПараметрыЗапросаДоступа.Вставить(
			"CRM_ДоступныеПользователюУровниДоступа",
			CRM_УправлениеДоступомУровниДоступа.ПолучитьДоступныеУровниДоступа(Пользователь));
	КонецЕсли;
	
	Возврат ПараметрыЗапросаДоступа;
	
КонецФункции

Функция ПолучитьСписокДолжностныхПозицийПользователя(Пользователь, ДолжностнаяПозиция)
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
	|ПОМЕСТИТЬ ВТ_Подчиненные
	|ИЗ
	|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
	|ГДЕ
	|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
	|	И НЕ CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка.ПометкаУдаления
	|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_ДолжностныеПозиции.Ссылка КАК Позиция
	|ИЗ
	|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
	|ГДЕ
	|	CRM_ДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
	|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
	|	И НЕ CRM_ДолжностныеПозиции.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Подчиненные.CRM_ДолжностнаяПозиция
	|ИЗ
	|	ВТ_Подчиненные КАК ВТ_Подчиненные";
	
	Запрос.УстановитьПараметр("ТекущийПользователь"			, Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция"	, ДолжностнаяПозиция);
	
	ДолжностныеПозиции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Позиция");
	
	Если ДолжностныеПозиции.Количество() = 0 Тогда
		ДолжностныеПозиции.Добавить(ПредопределенноеЗначение("Справочник.CRM_ДолжностныеПозиции.УПользователяНеУстановленоДолжностнойПозиции"));
	КонецЕсли;
	
	Возврат ДолжностныеПозиции;
	
КонецФункции

#КонецОбласти

#Область МакетЗадачиТабличныйДокумент

Процедура ЗаполнитьОбластьФайлы(Форма, МакетЗаполнения, СтрокаТабличнойЧасти, ТабличныйДокумент, Мониторинг)
	
	СтрокиФайлыАвтор 		= ПолучитьСтрокиПрисоединенныхФайлов(Форма, СтрокаТабличнойЧасти.Идентификатор, Мониторинг);
	СтрокиФайлыИсполнитель 	= ПолучитьСтрокиПрисоединенныхФайлов(Форма, СтрокаТабличнойЧасти.ИдентификаторЗадачи, Мониторинг);
	
	Если СтрокиФайлыАвтор.Количество() > 0 Тогда
		
		ИндексСтроки = 0;
		
		Для Каждого СтрокаФайлАвтор Из СтрокиФайлыАвтор Цикл
			
			ОбластьСтрокаФайл = МакетЗаполнения.ПолучитьОбласть("ОбластьСтрокаФайл");
			
			ОбластьСтрокаФайл.Параметры.ФайлАвтор 				= СтрокаФайлАвтор.Представление;
			ОбластьСтрокаФайл.Параметры.ФайлАвторРасшифровка 	= СтрокаФайлАвтор.ДанныеФайла;
			
			Если (СтрокиФайлыИсполнитель.Количество() - 1) >= ИндексСтроки Тогда
				
				СтрокаФайлИсполнитель = СтрокиФайлыИсполнитель[ИндексСтроки];
				
				ОбластьСтрокаФайл.Параметры.ФайлИсполнитель 			= СтрокаФайлИсполнитель.Представление;
				ОбластьСтрокаФайл.Параметры.ФайлИсполнительРасшифровка 	= СтрокаФайлИсполнитель.ДанныеФайла;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаФайл);
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаФайлИсполнитель Из СтрокиФайлыИсполнитель Цикл
			
			ОбластьСтрокаФайл = МакетЗаполнения.ПолучитьОбласть("ОбластьСтрокаФайл");
			
			ОбластьСтрокаФайл.Параметры.ФайлИсполнитель 			= СтрокаФайлИсполнитель.Представление;
			ОбластьСтрокаФайл.Параметры.ФайлИсполнительРасшифровка 	= СтрокаФайлИсполнитель.ДанныеФайла;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаФайл);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтрокиПрисоединенныхФайлов(Форма, ИдентификаторГруппы, Мониторинг)
	
	ПараметрыОтбораСтрок = Новый Структура;
	
	Если Мониторинг Тогда
		ПараметрыОтбораСтрок.Вставить("ИдентификаторГруппы", ИдентификаторГруппы);
	Иначе
		ПараметрыОтбораСтрок.Вставить("Идентификатор", 	ИдентификаторГруппы);
		ПараметрыОтбораСтрок.Вставить("ВидФайла", 		Справочники.вогВидыПрисоединенныхФайлов.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Форма.ТаблицаПрисоединенныеФайлы.НайтиСтроки(ПараметрыОтбораСтрок);
	
КонецФункции

Процедура ЗаполнитьОбластьПунктовЗадачи(Форма, МакетЗаполнения, СтрокаТабличнойЧасти, ТабличныйДокумент)
	
	ИдентификаторЗадачи 	= СтрокаТабличнойЧасти.ИдентификаторЗадачи;
	Предмет 				= СтрокаТабличнойЧасти.Предмет;
	КартинкаПунктВыполнен 	= БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
	КартинкаПунктНеВыполнен = БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
	ИмяТаблицыРезультат 	= СтрШаблон("ТаблицаРезультаты_%1", ИдентификаторЗадачи);
	
	ПервыйПункт = Истина;
	Для Каждого СтрокаРезультат Из Форма[ИмяТаблицыРезультат] Цикл
		
		Если Не ПервыйПункт Тогда
			ОбластьПунктРезультатаРазделитель = МакетЗаполнения.ПолучитьОбласть("ОбластьПунктРезультатаРазделитель");
			ТабличныйДокумент.Вывести(ОбластьПунктРезультатаРазделитель);
		КонецЕсли;
		
		ОбластьПунктРезультата 	= МакетЗаполнения.ПолучитьОбласть("ОбластьПунктРезультата");
		КартинкаВыполнения 		= КартинкаПунктНеВыполнен;
		
		ОбластьПунктРезультата.Параметры.ПунктОжидаемогоРезультата 				= СтрокаРезультат.ЗначениеАвтор;
		ОбластьПунктРезультата.Параметры.ПунктОжидаемогоРезультатаРасшифровка 	= СтрокаРезультат.ЗначениеАвтор;
		
		Если СтрокаРезультат.Пометка Тогда
			
			ЗначениеИсполнитель = СтрокаРезультат.ЗначениеИсполнитель;
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("ЗначениеИсполнитель", 	ЗначениеИсполнитель);
			СтруктураРасшифровки.Вставить("Идентификатор", 			ИдентификаторЗадачи);
			СтруктураРасшифровки.Вставить("Предмет", 				Предмет);
			
			КартинкаВыполнения = КартинкаПунктВыполнен;
			
		Иначе
			
			СтруктураЗаполнения = СформироватьСтруктуруЗаполненияРезультатаИсполнителя(
				ИдентификаторЗадачи,
				Предмет,
				СтрокаРезультат);
			
			ЗначениеИсполнитель 	= СтруктураЗаполнения.ЗначениеЗаполнения;
			СтруктураРасшифровки 	= СтруктураЗаполнения.СтруктураРасшифровки;
			
		КонецЕсли;
		
		СтруктураРасшифровки.Вставить("ИндексСтроки", Форма[ИмяТаблицыРезультат].Индекс(СтрокаРезультат));
		
		// ++ VOG Солодов В.В. 07.12.2020 CRM-1054
		Если ТипЗнч(ЗначениеИсполнитель) = Тип("Строка")
			И СтрДлина(ЗначениеИсполнитель) > 300 Тогда
			ОбластьПунктРезультата.Параметры.ПунктРезультатаИсполнителя = СтрШаблон("%1...", Лев(ЗначениеИсполнитель, 300));
		Иначе
			ОбластьПунктРезультата.Параметры.ПунктРезультатаИсполнителя = ЗначениеИсполнитель;
		КонецЕсли;
		// До изменения
		//ОбластьПунктРезультата.Параметры.ПунктРезультатаИсполнителя = ЗначениеИсполнитель;
		// -- VOG Солодов В.В. 07.12.2020 CRM-1054
		ОбластьПунктРезультата.Параметры.ПунктРезультатаИсполнителяРасшифровка 	= СтруктураРасшифровки;
		
		ОбластьПунктРезультата.Параметры.КартинкаВыполнения = КартинкаВыполнения;
		
		ТабличныйДокумент.Вывести(ОбластьПунктРезультата);
		
		ПервыйПункт = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруЗаполненияРезультатаИсполнителя(ИдентификаторЗадачи, Предмет, СтрокаОжидаемыйРезультат)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОжидаемыйРезультат, "ЗначениеИсполнитель") Тогда
		ИмяКолонки = "ЗначениеИсполнитель";
	Иначе
		ИмяКолонки = "Приложение";
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ЗначениеЗаполнения");
	СтруктураЗаполнения.Вставить("СтруктураРасшифровки");
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("ЗначениеИсполнитель", 	СтрокаОжидаемыйРезультат[ИмяКолонки]);
	СтруктураРасшифровки.Вставить("Идентификатор", 			ИдентификаторЗадачи);
	СтруктураРасшифровки.Вставить("Предмет", 				Предмет);
	
	СтруктураЗаполнения.СтруктураРасшифровки = СтруктураРасшифровки;
	
	Если ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
		ЗначениеЗаполнения = СтрШаблон(НСтр("ru = 'Добавьте фото вида %1'"), СтрокаОжидаемыйРезультат[ИмяКолонки]);
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("ДокументСсылка.вогАнкета") Тогда
		ЗначениеЗаполнения = СтрокаОжидаемыйРезультат[ИмяКолонки];
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
		ЗначениеЗаполнения = СтрокаОжидаемыйРезультат[ИмяКолонки];
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Создайте мероприятие'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("ДокументСсылка.вогКомандировка") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Создайте командировку'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Создайте задачу'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Выберите номенклатуру'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("СправочникСсылка.вогБренды") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Выберите бренд'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("СправочникСсылка.вогДизайныНоменклатуры") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Выберите дизайн'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Выберите контактное лицо'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("СправочникСсылка.Пользователи") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Выберите пользователя'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Выберите договор'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("Строка")
		И ПустаяСтрока(СтрокаОжидаемыйРезультат[ИмяКолонки]) Тогда
		ЗначениеЗаполнения = НСтр("ru = 'Введите результат выполнения'");
	ИначеЕсли ТипЗнч(СтрокаОжидаемыйРезультат[ИмяКолонки]) = Тип("Строка") Тогда
		ЗначениеЗаполнения = СтрокаОжидаемыйРезультат[ИмяКолонки];
	Иначе
		ЗначениеЗаполнения = "";
	КонецЕсли;
	
	СтруктураЗаполнения.ЗначениеЗаполнения = ЗначениеЗаполнения;
	
	Возврат СтруктураЗаполнения;
	
КонецФункции

Процедура ЗаполнитьОбластьПунктовЗадачиМониторинг(Форма, МакетЗаполнения, СтрокаТабличнойЧасти, ТабличныйДокумент)
	
	Перем ОжидаемыйРезультат, РезультатВыполнения;
	
	Если ЭтоАдресВременногоХранилища(СтрокаТабличнойЧасти.ОжидаемыйРезультат) Тогда
		ОжидаемыйРезультат = ПолучитьИзВременногоХранилища(СтрокаТабличнойЧасти.ОжидаемыйРезультат);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(СтрокаТабличнойЧасти.РезультатВыполнения) Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(СтрокаТабличнойЧасти.РезультатВыполнения);
	КонецЕсли;
	
	ПервыйПункт = Истина;
	
	Если Не ОжидаемыйРезультат = Неопределено Тогда
		
		Для Каждого СтрокаРезультат Из ОжидаемыйРезультат Цикл
			
			Если Не ПервыйПункт Тогда
				ОбластьПунктРезультатаРазделитель = МакетЗаполнения.ПолучитьОбласть("ОбластьПунктРезультатаРазделитель");
				ТабличныйДокумент.Вывести(ОбластьПунктРезультатаРазделитель);
			КонецЕсли;
			
			ОбластьПунктРезультата = МакетЗаполнения.ПолучитьОбласть("ОбластьПунктРезультата");
			
			//КартинкаВыполнения = БиблиотекаКартинок.вог_СнятьФлажки_16;
			КартинкаВыполнения = БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
			
			Если ЗначениеЗаполнено(СтрокаРезультат.Приложение) Тогда
				ОбластьПунктРезультата.Параметры.ПунктОжидаемогоРезультата = СтрокаРезультат.Приложение;
			Иначе
				ОбластьПунктРезультата.Параметры.ПунктОжидаемогоРезультата = СтрокаРезультат.ТипПриложения;
			КонецЕсли;
			ОбластьПунктРезультата.Параметры.ПунктОжидаемогоРезультатаРасшифровка = СтрокаРезультат.Приложение;
			
			ИндексСтроки = ОжидаемыйРезультат.Индекс(СтрокаРезультат);
			
			Если Не РезультатВыполнения = Неопределено
				И ИндексСтроки <= РезультатВыполнения.Количество() - 1 Тогда
				
				СтрокаВыполнения = РезультатВыполнения[ИндексСтроки];
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("ЗначениеИсполнитель", 	СтрокаВыполнения.ЗначениеИсполнитель);
				СтруктураРасшифровки.Вставить("Идентификатор", 			СтрокаТабличнойЧасти.ИдентификаторЗадачи);
				СтруктураРасшифровки.Вставить("Предмет", 				СтрокаТабличнойЧасти.Предмет);
				СтруктураРасшифровки.Вставить("Задача", 				Форма.ТекущаяЗадача);
					
				Если СтрокаВыполнения.Пометка Тогда
					КартинкаВыполнения 	= БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
				КонецЕсли;
				
				ОбластьПунктРезультата.Параметры.ПунктРезультатаИсполнителя 			= СтрокаВыполнения.ЗначениеИсполнитель;
				ОбластьПунктРезультата.Параметры.ПунктРезультатаИсполнителяРасшифровка 	= СтруктураРасшифровки;
				
			КонецЕсли;
			
			ОбластьПунктРезультата.Параметры.КартинкаВыполнения = КартинкаВыполнения;
			
			ТабличныйДокумент.Вывести(ОбластьПунктРезультата);
			
			ПервыйПункт = Ложь;
			
		КонецЦикла;
		
	ИначеЕсли Не РезультатВыполнения = Неопределено Тогда
		
		Для Каждого СтрокаВыполнения Из РезультатВыполнения Цикл
			
			Если Не ПервыйПункт Тогда
				ОбластьПунктРезультатаРазделитель = МакетЗаполнения.ПолучитьОбласть("ОбластьПунктРезультатаРазделитель");
				ТабличныйДокумент.Вывести(ОбластьПунктРезультатаРазделитель);
			КонецЕсли;
			
			ОбластьПунктРезультата 	= МакетЗаполнения.ПолучитьОбласть("ОбластьПунктРезультата");
			КартинкаВыполнения 		= БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("ЗначениеИсполнитель", 	СтрокаВыполнения.ЗначениеИсполнитель);
			СтруктураРасшифровки.Вставить("Идентификатор", 			СтрокаТабличнойЧасти.ИдентификаторЗадачи);
			СтруктураРасшифровки.Вставить("Предмет", 				СтрокаТабличнойЧасти.Предмет);
			СтруктураРасшифровки.Вставить("Задача", 				Форма.ТекущаяЗадача);
			
			Если СтрокаВыполнения.Пометка Тогда
				КартинкаВыполнения = БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
			КонецЕсли;
			
			ОбластьПунктРезультата.Параметры.ПунктРезультатаИсполнителя 			= СтрокаВыполнения.ЗначениеИсполнитель;
			ОбластьПунктРезультата.Параметры.ПунктРезультатаИсполнителяРасшифровка 	= СтруктураРасшифровки;
			ОбластьПунктРезультата.Параметры.КартинкаВыполнения 					= КартинкаВыполнения;
			// ++ VOG Солодов В.В. 23.12.2020 DEV-28
			ОбластьПунктРезультата.Параметры.ПунктОжидаемогоРезультата 				= СтрокаВыполнения.ЗначениеАвтор;
			// -- VOG Солодов В.В. 23.12.2020 DEV-28
			ТабличныйДокумент.Вывести(ОбластьПунктРезультата);
			
			ПервыйПункт = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбластьНабораЗадач(Форма, Мониторинг, ОбластьНаборЗадач, СтрокаТабличнойЧасти)
	
	ОбластьНаборЗадач.Параметры.НаборЗадач = СтрокаТабличнойЧасти.НаборЗадач;
	
	УдалитьРисунки = Истина;
	
	Если Не Мониторинг Тогда
		
		СтруктураРасшифровкиНабора = Новый Структура;
		СтруктураРасшифровкиНабора.Вставить("ДобавленИзЗадачи", СтрокаТабличнойЧасти.ДобавленИзЗадачи);
		СтруктураРасшифровкиНабора.Вставить("Идентификатор", 	СтрокаТабличнойЧасти.ИдентификаторЗадачи);
		
		ОбластьНаборЗадач.Параметры.РасшифровкаНаборЗадач = СтруктураРасшифровкиНабора;
		
		// Команда набора
		Если СтрокаТабличнойЧасти.ДобавленИзЗадачи
			И Не Форма.ТолькоПросмотр Тогда
			
			СтруктураРасшифровкиУдалить = Новый Структура;
			СтруктураРасшифровкиУдалить.Вставить("Действие", 			"УдалитьНабор");
			СтруктураРасшифровкиУдалить.Вставить("Идентификатор", 		СтрокаТабличнойЧасти.ИдентификаторЗадачи);
			СтруктураРасшифровкиУдалить.Вставить("Предмет", 			СтрокаТабличнойЧасти.Предмет);
			СтруктураРасшифровкиУдалить.Вставить("Доступность", 		Истина);
			
			ОбластьНаборЗадач.Рисунки.КартинкаУдалитьНабор.Картинка 	= БиблиотекаКартинок.Корзина;
			ОбластьНаборЗадач.Рисунки.КартинкаУдалитьНабор.Расшифровка 	= СтруктураРасшифровкиУдалить;
			
			УдалитьРисунки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УдалитьРисунки Тогда
		ОбластьНаборЗадач.Рисунки.Удалить(ОбластьНаборЗадач.Рисунки.КартинкаУдалитьНабор);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбластьСтрокиЗадачи(Форма, Мониторинг, ОбластьСтрокаЗадачи, СтрокаТабличнойЧасти)
	
	ИдентификаторЗадачи = СтрокаТабличнойЧасти.ИдентификаторЗадачи;
	ЭтоНабор 			= ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаборЗадач);
	УдалитьРисунки 		= Истина;
	
	Если Не Мониторинг И СтрокаТабличнойЧасти.ДобавленИзЗадачи И Не Форма.ТолькоПросмотр Тогда
		РедактированиеРазрешено = Не ЭтоНабор И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТиповаяЗадача);
		УдалениеРазрешено = Истина; // VOG Солодов В.В. 07.12.2020 CRM-1108
	Иначе
		РедактированиеРазрешено = Ложь;
		УдалениеРазрешено = Ложь; // VOG Солодов В.В. 07.12.2020 CRM-1108
	КонецЕсли;
	
	ОбластьСтрокаЗадачи.Параметры.НомерПункта 	= СтрокаТабличнойЧасти.НомерСтроки;
	ОбластьСтрокаЗадачи.Параметры.Пункт 		= СтрокаТабличнойЧасти.Пункт;
	
	Если Не Мониторинг Тогда
		
		СтруктураРасшифровкиПункта = Новый Структура;
		СтруктураРасшифровкиПункта.Вставить("ДобавленИзЗадачи", СтрокаТабличнойЧасти.ДобавленИзЗадачи);
		СтруктураРасшифровкиПункта.Вставить("Идентификатор", 	ИдентификаторЗадачи);
		// ++ VOG Солодов В.В. 17.12.2020 DEV-20
		СтруктураРасшифровкиПункта.Вставить("Редактирование", 	РедактированиеРазрешено);
		// -- VOG Солодов В.В. 17.12.2020 DEV-20
		
		ОбластьСтрокаЗадачи.Параметры.РасшифровкаПункт 		= СтруктураРасшифровкиПункта;
		
		// Команды задачи (пункта)
		Если РедактированиеРазрешено Тогда
			
			СтруктураРасшифровкиПриложение = Новый Структура;
			СтруктураРасшифровкиПриложение.Вставить("Действие", 		"Приложение");
			СтруктураРасшифровкиПриложение.Вставить("Идентификатор", 	ИдентификаторЗадачи);
			СтруктураРасшифровкиПриложение.Вставить("Доступность", 		Истина);
			
			ОбластьСтрокаЗадачи.Рисунки.КартинкаПриложение.Картинка 	= БиблиотекаКартинок.ПриложитьФайл;
			ОбластьСтрокаЗадачи.Рисунки.КартинкаПриложение.Расшифровка 	= СтруктураРасшифровкиПриложение;
			
			// ++ VOG Солодов В.В. 07.12.2020 CRM-1108
			// До изменения
			//СтруктураРасшифровкиУдалить = Новый Структура;
			//СтруктураРасшифровкиУдалить.Вставить("Действие", 			"Удалить");
			//СтруктураРасшифровкиУдалить.Вставить("Идентификатор", 		ИдентификаторЗадачи);
			//СтруктураРасшифровкиУдалить.Вставить("Предмет", 			СтрокаТабличнойЧасти.Предмет);
			//СтруктураРасшифровкиУдалить.Вставить("Доступность", 		Истина);
			//
			//ОбластьСтрокаЗадачи.Рисунки.КартинкаУдалить.Картинка 		= БиблиотекаКартинок.Корзина;
			//ОбластьСтрокаЗадачи.Рисунки.КартинкаУдалить.Расшифровка 	= СтруктураРасшифровкиУдалить;
			//
			//УдалитьРисунки = Ложь;
			// -- VOG Солодов В.В. 07.12.2020 CRM-1108
			
		КонецЕсли;
		
		Если УдалениеРазрешено Тогда
			
			СтруктураРасшифровкиУдалить = Новый Структура;
			СтруктураРасшифровкиУдалить.Вставить("Действие", 			"Удалить");
			СтруктураРасшифровкиУдалить.Вставить("Идентификатор", 		ИдентификаторЗадачи);
			СтруктураРасшифровкиУдалить.Вставить("Предмет", 			СтрокаТабличнойЧасти.Предмет);
			СтруктураРасшифровкиУдалить.Вставить("Доступность", 		Истина);
			
			ОбластьСтрокаЗадачи.Рисунки.КартинкаУдалить.Картинка 		= БиблиотекаКартинок.Корзина;
			ОбластьСтрокаЗадачи.Рисунки.КартинкаУдалить.Расшифровка 	= СтруктураРасшифровкиУдалить;
			
		КонецЕсли;
		
		СтруктураРасшифровкиКомментарий = Новый Структура;
		СтруктураРасшифровкиКомментарий.Вставить("Действие", 		"Комментарий");
		СтруктураРасшифровкиКомментарий.Вставить("Идентификатор", 	ИдентификаторЗадачи);
		
		ОбластьСтрокаЗадачи.Рисунки.КартинкаКомментарий.Картинка 	= БиблиотекаКартинок.Комментарий;
		ОбластьСтрокаЗадачи.Рисунки.КартинкаКомментарий.Расшифровка = СтруктураРасшифровкиКомментарий;
		
		СтруктураРасшифровкиФайлы = Новый Структура;
		СтруктураРасшифровкиФайлы.Вставить("Действие", 				"Файлы");
		СтруктураРасшифровкиФайлы.Вставить("Идентификатор", 		ИдентификаторЗадачи);
		
		ОбластьСтрокаЗадачи.Рисунки.КартинкаФайлы.Картинка 			= БиблиотекаКартинок.CRM_ВложенияКПисьму18;
		ОбластьСтрокаЗадачи.Рисунки.КартинкаФайлы.Расшифровка 		= СтруктураРасшифровкиФайлы;
		
	Иначе
		
		СтруктураРасшифровкиПунктВыполнен = Новый Структура;
		СтруктураРасшифровкиПунктВыполнен.Вставить("ИдентификаторЗадачи", 	ИдентификаторЗадачи);
		СтруктураРасшифровкиПунктВыполнен.Вставить("Предмет", 				СтрокаТабличнойЧасти.Предмет);
		СтруктураРасшифровкиПунктВыполнен.Вставить("Пометка", 				СтрокаТабличнойЧасти.Принято);
		
		ОбластьСтрокаЗадачи.Параметры.РасшифровкаПунктВыполнен = СтруктураРасшифровкиПунктВыполнен;
		
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Принято Тогда
		ОбластьСтрокаЗадачи.Параметры.КартинкаПунктВыполнен = БиблиотекаКартинок.вог_УстановитьФлажки_16;
	Иначе
		ОбластьСтрокаЗадачи.Параметры.КартинкаПунктВыполнен = БиблиотекаКартинок.вог_СнятьФлажки_16;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 07.12.2020 CRM-1108
	Если Не РедактированиеРазрешено Тогда
		ОбластьСтрокаЗадачи.Рисунки.Удалить(ОбластьСтрокаЗадачи.Рисунки.КартинкаПриложение);
	КонецЕсли;
	
	Если Не УдалениеРазрешено Или ЭтоНабор Тогда
		ОбластьСтрокаЗадачи.Рисунки.Удалить(ОбластьСтрокаЗадачи.Рисунки.КартинкаУдалить);
	КонецЕсли;
	
	Если Мониторинг Тогда
		ОбластьСтрокаЗадачи.Рисунки.Удалить(ОбластьСтрокаЗадачи.Рисунки.КартинкаКомментарий);
		ОбластьСтрокаЗадачи.Рисунки.Удалить(ОбластьСтрокаЗадачи.Рисунки.КартинкаФайлы);
	КонецЕсли;
	// До изменения
	//Если УдалитьРисунки Тогда
	//	
	//	ОбластьСтрокаЗадачи.Рисунки.Удалить(ОбластьСтрокаЗадачи.Рисунки.КартинкаПриложение);
	//	ОбластьСтрокаЗадачи.Рисунки.Удалить(ОбластьСтрокаЗадачи.Рисунки.КартинкаУдалить);
	//	
	//	Если Мониторинг Тогда
	//		ОбластьСтрокаЗадачи.Рисунки.Удалить(ОбластьСтрокаЗадачи.Рисунки.КартинкаКомментарий);
	//		ОбластьСтрокаЗадачи.Рисунки.Удалить(ОбластьСтрокаЗадачи.Рисунки.КартинкаФайлы);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	// -- VOG Солодов В.В. 07.12.2020 CRM-1108

КонецПроцедуры

#КонецОбласти

#КонецОбласти
