
#Область ЭкспортныеПроцедурыИФункции

Процедура ЗаписатьВложениеЭлектронногоПисьма(Объект, Вложение,МассивПодписей,КоличествоПустыхИменВоВложениях) Экспорт
	
	ПисьмоСсылка = Объект.Ссылка;
	Размер = 0;
	Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
		Размер = Вложение.Данные.Размер();
	Иначе
		// А может быть и тип ИнтернетПочтовоеСообщение. На данный момент не поддерживаем.
		Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			НовоеУдаленноеВложение = Объект.НепринятыеВложения.Добавить();
			НовоеУдаленноеВложение.ИмяВложение = Вложение.Данные.Тема + " " + НСтр("ru = 'от'") + " " +Вложение.Данные.ДатаОтправления;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(Вложение.Данные, "");
	// +CRM - во вложение иногда портится Вложение.ИмяФайла, лучше использовать Вложение.Имя
	//ВложениеПисьмаСсылка = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
	//	ПисьмоСсылка, Адрес, Вложение.ИмяФайла, Размер,КоличествоПустыхИменВоВложениях);
	
	Если Не ПустаяСтрока(Вложение.Идентификатор) Тогда
		
		Если СтрНайти(Объект.ТекстHTML, Вложение.Идентификатор) = 0 Тогда
			
			Вложение.Идентификатор = "";
			
		ИначеЕсли СтрНайти(Объект.ТекстHTML, Вложение.Имя) > 0 
			И СтрНайти(Вложение.Идентификатор, Вложение.Имя + "@") = 0 Тогда
		
			Вложение.Идентификатор = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторВложения = Вложение.Идентификатор;
	
	ВложениеПисьмаСсылка = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(ПисьмоСсылка, Адрес,
		CRM_УправлениеЭлектроннойПочтой.ЗаменитьЗапрещенныеСимволыВИмениФайла(Вложение.Имя), Размер,КоличествоПустыхИменВоВложениях, 
		?(ЗначениеЗаполнено(ИдентификаторВложения),ИдентификаторВложения,Неопределено));
	// -CRM
	
	ЕстьПодписи = (МассивПодписей.Количество() > 0);
	ЭтоОтображаемыйФайл = НЕ ПустаяСтрока(Вложение.Идентификатор);
	
	// +CRM
	Если Найти(ПисьмоСсылка.ТекстHTML,Вложение.Идентификатор)=0 Тогда
		ЭтоОтображаемыйФайл = Ложь;
	КонецЕсли;
	// -CRM
	
	Если ЕстьПодписи Или ЭтоОтображаемыйФайл Тогда
		
		ВложениеПисьмаОбъект = ВложениеПисьмаСсылка.ПолучитьОбъект();
		
		Если ЕстьПодписи
		   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			
			Для Каждого ПодписьВложения Из МассивПодписей Цикл
				ЭП = ВложениеПисьмаОбъект.ЭлектронныеПодписи.Добавить();
				
				ДанныеПодписи = МодульЭлектроннаяПодпись.ПрочитатьДанныеПодписи(ПодписьВложения.Данные);
				Если ДанныеПодписи <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЭП, ДанныеПодписи);
				КонецЕсли;
				
				ЭП.Подпись = Новый ХранилищеЗначения(ПодписьВложения.Данные);
				ЭП.Комментарий = НСтр("ru = 'Вложение электронного письма'");
				ЭП.ДатаПодписи = ТекущаяДатаСеанса();
			КонецЦикла;
			
			ВложениеПисьмаОбъект.ПодписанЭП = Истина;
			
		КонецЕсли;
		
		Если ЭтоОтображаемыйФайл Тогда
			
			ВложениеПисьмаОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Идентификатор;
			
		КонецЕсли;
		
		ВложениеПисьмаОбъект.Записать();
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(Адрес);
	
КонецПроцедуры


Функция КонтактДоступен(Контакт,УчетнаяЗапись) Экспорт
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Константы["CRM_ИспользоватьОграниченияДоступа"].Получить() Тогда
		// Если у партнера не прописаны урови доступа, то доступен всем.
		Если Контакт["CRM_УровниДоступа"].Количество() = 0 Тогда
			Возврат Истина;
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("УчетнаяЗапись",УчетнаяЗапись);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
			|ГДЕ
			|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись";
			
			МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
			
			// Если хотя бы у одного пользователя учетной записи нет доступа к партнеру
			// то партнер считается недоступным и отменяем сопоставление.
			Для Каждого Пользователь Из МассивПользователей Цикл
				
				// Исключим из проверки пользователей с полными правами и тех, для кого нет пользователя ИБ.
				Если НЕ ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ) ИЛИ Пользователи.РолиДоступны("ПолныеПрава",Пользователь) Тогда
					Продолжить;
				КонецЕсли; 
				
				// Если у пользователя не указан уровень доступа, партнер недоступен.
				Если НЕ ЗначениеЗаполнено(Пользователь.CRM_УровеньДоступа) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Для Каждого СтрокаУровеняДоступа Из Контакт["CRM_УровниДоступа"] Цикл
					
					Если НЕ(СтрокаУровеняДоступа.УровеньДоступа = Пользователь["CRM_УровеньДоступа"] ИЛИ 
							СтрокаУровеняДоступа.УровеньДоступа.ПринадлежитЭлементу(Пользователь["CRM_УровеньДоступа"])) Тогда
						Возврат Ложь;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПапкуПисьма(УчетнаяЗапись, НаименованиеПапки, ВидПапки) Экспорт
	// Получить папку письма
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Наименование = &Наименование
	|	И ПапкиЭлектронныхПисем.Владелец = &Владелец
	|	И ПапкиЭлектронныхПисем.CRM_Вид = &Вид";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеПапки);
	Запрос.УстановитьПараметр("Владелец", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Вид", ВидПапки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Ссылка = РезультатЗапроса.Выгрузить()[0].Ссылка;
	Иначе
		тПапка = Справочники.ПапкиЭлектронныхПисем.СоздатьЭлемент();
		тПапка.УстановитьНовыйКод();
		тПапка.Наименование = НаименованиеПапки;
		тПапка.Владелец = УчетнаяЗапись;
		тПапка.CRM_Вид = ВидПапки;
		тПапка.ПредопределеннаяПапка = Истина;
		Если тПапка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие Тогда
			тПапка.РеквизитДопУпорядочивания = 1;
		ИначеЕсли тПапка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики Тогда
			тПапка.РеквизитДопУпорядочивания = 2;
		ИначеЕсли тПапка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие Тогда
			тПапка.РеквизитДопУпорядочивания = 3;
		ИначеЕсли тПапка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные Тогда
			тПапка.РеквизитДопУпорядочивания = 4;
		ИначеЕсли тПапка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные Тогда
			тПапка.РеквизитДопУпорядочивания = 5;
		ИначеЕсли тПапка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта Тогда
			тПапка.РеквизитДопУпорядочивания = 6;
		КонецЕсли;
		тПапка.ОбменДанными.Загрузка = Истина;
		тПапка.Записать();
		Ссылка = тПапка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

//
//
Процедура УдалитьЗаписиОНеотправленныхПисьмахПеренестиПисьмоВЧерновики(МассивПисем) Экспорт
	
	Для Каждого УчетнаяЗаписьИПисьма Из МассивПисем Цикл
		Для Каждого АвторИПисьма Из УчетнаяЗаписьИПисьма.Письма Цикл
			Для Каждого Письмо Из АвторИПисьма.Письма Цикл
				УдалитьЗаписьОНеотправленномПисьме(Письмо);
				
				ПисьмоОбъект				= Письмо.ПолучитьОбъект();
				ПисьмоОбъект.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
				ПисьмоОбъект.Записать();
				ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики));
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет запись о неотправленном письме.
//
Процедура ДобавитьЗаписьОНеотправленномПисьме(Письмо, ТекстОшибки) Экспорт
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Письмо);
	Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
	И НЕ Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
		Рассылка = Предмет;
	Иначе
		Рассылка = Письмо;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.CRM_НеОтправленныеПисьма.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Рассылка	= Рассылка;
	ЗаписьРегистра.Письмо	= Письмо;
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		Если ЗаписьРегистра.Итерация < 3 Тогда
			ЗаписьРегистра.Итерация = ЗаписьРегистра.Итерация + 1;
		КонецЕсли;
		ЗаписьРегистра.ТекстОшибки= ТекстОшибки;
	Иначе
		ЗаписьРегистра.Рассылка	= Рассылка;
		ЗаписьРегистра.Письмо	= Письмо;
		ЗаписьРегистра.Итерация = 1;
		ЗаписьРегистра.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

// Процедура удаляет запись о неотправленном письме.
//
Процедура УдалитьЗаписьОНеотправленномПисьме(Письмо) Экспорт
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Письмо);
	Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
	И НЕ Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
		Рассылка = Предмет;
	Иначе
		Рассылка = Письмо;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.CRM_НеОтправленныеПисьма.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Рассылка	= Рассылка;
	ЗаписьРегистра.Письмо	= Письмо;
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		ЗаписьРегистра.Удалить();
	КонецЕсли;
	
КонецПроцедуры


// +CRM
//Процедура ЗаполнитьДокументЭлектронноеПисьмо(Письмо, Сообщение, ЭтоИсходящееПисьмо)
Процедура ЗаполнитьДокументЭлектронноеПисьмо(Письмо, Сообщение, ЭтоИсходящееПисьмо) Экспорт
// -CRM
	
	ОтправительАдрес = АдресОтправителяИнтернетПочтовогоСообщения(Сообщение.Отправитель);
	
	Если Не ЭтоИсходящееПисьмо Тогда
		
		Письмо.ДатаПолучения    = Сообщение.ДатаПолучения;
// +CRM
		//Письмо.ОтправительАдрес = Сообщение.Отправитель.Адрес;
		Письмо.ОтправительАдрес = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Отправитель.Адрес,"");
// -CRM		
		
	Иначе
		
		Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		Письмо.ДатаОтправления = Сообщение.ДатаОтправления;
		
	КонецЕсли;
	
	ИмяОтправителя = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.ИмяОтправителя, "");
	Письмо.ОтправительПредставление = ?(ПустаяСтрока(Сообщение.ИмяОтправителя),
	                                    ОтправительАдрес,
	                                    ИмяОтправителя + " <"+ ОтправительАдрес +">");
	
	Письмо.Важность = ПолучитьВажностьЭлектронногоПисьма(Сообщение.Важность);
	Письмо.Дата = ?(Сообщение.ДатаОтправления = Дата(1,1,1), ТекущаяДатаСеанса(), Сообщение.ДатаОтправления);
	Письмо.ВнутреннийЗаголовок = Сообщение.Заголовок;
	Письмо.ИдентификаторНаСервере = ?(Сообщение.Идентификатор.Количество() = 0, "", Сообщение.Идентификатор[0]);
	Письмо.ИдентификаторСообщения = Сообщение.ИдентификаторСообщения;
	Письмо.Кодировка = Сообщение.Кодировка;
	Письмо.УведомитьОДоставке = Сообщение.УведомитьОДоставке;
	Письмо.УведомитьОПрочтении = Сообщение.УведомитьОПрочтении;
	
	Письмо.Размер = Сообщение.Размер;
	Письмо.Тема = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Тема);
	
	УстановитьТекстПисьма(Письмо, Сообщение);
	
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиКопий ,  Сообщение.Копии);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиОтвета, Сообщение.ОбратныйАдрес);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиПисьма, Сообщение.Получатели);
	
	Если ЭтоИсходящееПисьмо Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиСкрытыхКопий,
		                                Сообщение.СлепыеКопии);
	Иначе
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.АдресаУведомленияОПрочтении,
		                                Сообщение.АдресаУведомленияОПрочтении);
	КонецЕсли;
	
	// +CRM	
	Письмо.СписокПолучателейПисьма	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма),"_");
	Письмо.СписокПолучателейКопий	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий),"_");
	// -CRM	
	
	Письмо.ИдентификаторОснования    = ИзПисьмаПолучитьИдентификаторОснования(Сообщение);
	Письмо.ИдентификаторыОснований   = Сообщение.ПолучитьПолеЗаголовка("References", "Строка");
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		
		// +CRM
		//Если ПустаяСтрока(Вложение.Идентификатор) И (ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Или ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение"))Тогда
		//	Письмо.ЕстьВложения = Истина;
		//	Прервать;
		//КонецЕсли;
		Если ПустаяСтрока(Вложение.Идентификатор) Или Найти(Письмо.ТекстHTML, Вложение.Идентификатор) = 0 Тогда
			
			Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Или ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
				Письмо.ЕстьВложения = Истина;
				Прервать;
			КонецЕсли;	
				
		КонецЕсли;
		
		// -CRM
	КонецЦикла;
	
КонецПроцедуры


// Выполняет отправку рассылок электронных писем.
Процедура ОтправкаРассылокЭлектронныхПисем() Экспорт
	Если Не Константы.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная отправка рассылок электронных писем'"));
		
	МассивПисем = Новый Массив;
	
	// Отправка писем
	ПисемВПакете = Константы.CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.Получить();
	Если ПисемВПакете = 0 Тогда
		ПисемВПакете = 1;
	КонецЕсли;
	
	// Получим массив неотправленных писем, которые пытались отправить 3 раза.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НеОтправленныеПисьма.Письмо
	|ИЗ
	|	РегистрСведений.CRM_НеотправленныеПисьма КАК CRM_НеОтправленныеПисьма
	|ГДЕ
	|	CRM_НеОтправленныеПисьма.Рассылка ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	|	И CRM_НеОтправленныеПисьма.Итерация > 2";
	МассивНеОтправленныхПисем = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Письмо");
		
	Запрос = Новый Запрос;                        
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(ПисемВПакете, "ЧН=0; ЧГ=") + "
	               |	ЭлектронноеПисьмоИсходящее.Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
	               |	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
	               |	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	               |	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ТребуетсяОпределениеПапки,
	               |	ПредметыПапкиВзаимодействий.Предмет КАК Предмет,
	               |	ПредметыПапкиВзаимодействий.Предмет.Дата КАК ДатаРассылки,
	               |	ПредметыПапкиВзаимодействий.Предмет.Номер КАК НомерРассылки
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	               |		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	               |			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	               |		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	               |ГДЕ
	               |	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись.ИспользоватьДляОтправки
	               |	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	               |	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	               |	И ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	               |	И (ПредметыПапкиВзаимодействий.Предмет.ДатаНачалаВыполненияРассылки = ДАТАВРЕМЯ(1,1,1) ИЛИ ПредметыПапкиВзаимодействий.Предмет.ДатаНачалаВыполненияРассылки < &ТекущаяДата)
	               |	И ПредметыПапкиВзаимодействий.Предмет <> ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)
	               |	И НЕ ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Предмет КАК Документ.CRM_РассылкаЭлектронныхПисем).ОтправлятьПисьмаСразу
	               |	И НЕ ЭлектронноеПисьмоИсходящее.Ссылка В (&МассивНеОтправленныхПисем)
	               |ИТОГИ ПО
	               |	УчетнаяЗапись";
	Запрос.УстановитьПараметр("ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем", Константы.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем.Получить());
	Запрос.УстановитьПараметр("МассивНеОтправленныхПисем",МассивНеОтправленныхПисем);
	Запрос.УстановитьПараметр("ТекущаяДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СпособОтправки = Константы.CRM_СпособОтправкиРассылок.Получить();
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.SMTP Тогда
			Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
			Попытка
				Соединение = Новый ИнтернетПочта;
				Соединение.Подключиться(Профиль);
			Исключение
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'"), ВыборкаУчетныеЗаписи.УчетнаяЗапись, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
				                         УровеньЖурналаРегистрации.Ошибка, , ,
				                         ТекстСообщенияОбОшибке);
				
				// Если не можем подключиться к учетной записи, то для всех писем по этой учетной записи
				// создаем запись в РС CRM_НеОтправленныеПисьма.
				ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
				Пока ВыборкаПисьма.Следующий() Цикл
					ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ТекстСообщенияОбОшибке);
				КонецЦикла;
				
				Продолжить;
				
			КонецПопытки;
		ИначеЕсли СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
			ДанныеДоступаКUniSender = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender();
			api_key = ДанныеДоступаКUniSender.КлючДоступа;
			СписокРассылки = ДанныеДоступаКUniSender.СписокДляРассылок;
			Отправитель = ВыборкаУчетныеЗаписи.УчетнаяЗапись.ИмяПользователя;
			EmailОтправителя = ВыборкаУчетныеЗаписи.УчетнаяЗапись.АдресЭлектроннойПочты;
		КонецЕсли;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
			Попытка
				ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
				Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.SMTP Тогда
					ИдентификаторПисьма = CRM_Взаимодействия.CRM_ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение, ПараметрыПисьма);
				ИначеЕсли СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
					ИдРассылки = СтрЗаменить(Строка(Год(ВыборкаПисьма.ДатаРассылки)), Символы.НПП, "")+ВыборкаПисьма.НомерРассылки;
					ТекстОшибки = "";
					ИдентификаторПисьма = CRM_ИнтеграцияСUniSenderКлиентСервер.ОтправитьПисьмо(ПараметрыПисьма, api_key, СписокРассылки, Отправитель, EmailОтправителя, ИдРассылки, ТекстОшибки);
					Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
						Если ТипЗнч(ИдентификаторПисьма) = Тип("ПеречислениеСсылка.CRM_СтатусыПисемEmailРассылки") Тогда
							ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
							ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
							ЗаписьСтатуса.Статус = ИдентификаторПисьма;
							ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
							ЗаписьСтатуса.Записать();
							ВызватьИсключение ТекстОшибки;
						Иначе
							ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
							ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
							ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется;
							ЗаписьСтатуса.Записать();
						КонецЕсли;
					Иначе
						ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
						ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
						ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.ОшибкаОтправки;
						ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
						ЗаписьСтатуса.Записать();
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				КонецЕсли;
			Исключение
				// +CRM	
				// Если не отправилось по причине отсутствия получателей, то кидаем письмо в черновики
				// со статусом черновик.
				Если (ПисьмоОбъект.ПолучателиПисьма.Количество() = 0)
				И (ПисьмоОбъект.ПолучателиКопий.Количество() = 0)
				И (ПисьмоОбъект.ПолучателиСкрытыхКопий.Количество() = 0) Тогда
					ПисьмоОбъект.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
					ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьВЖурнале", Истина);
					ПисьмоОбъект.Записать();
					ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики));
				КонецЕсли;
				// -CRM
				// Если не удалось отправить Письмо, добавим информацию об этом в РС CRM_НеОтправленныеПисьма.
				ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время отправки электронного письма %1 произошла ошибка
				|%2'"), ВыборкаПисьма.ПредставлениеПисьма, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщенияОбОшибке);
				
				Продолжить;
			КонецПопытки;
			
			// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
			// если есть, то удалим.
			УдалитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка);
			
			Если ВыборкаПисьма.УдалятьПослеОтправки Тогда
				ПисьмоОбъект.Удалить();
			Иначе
				ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
				Если ПараметрыПисьма.Свойство("ПротоколПочты") И ПараметрыПисьма.ПротоколПочты = "IMAP" Тогда
					ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщения;
				КонецЕсли;
				ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.Размер = Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
				ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
				ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьВЖурнале", Истина);
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные));
				Если ВыборкаПисьма.ТребуетсяОпределениеПапки Тогда
					МассивПисем.Добавить(ВыборкаПисьма.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.SMTP Тогда
			Соединение.Отключиться();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляем статусы писем рассылки отправленных через сервис.
Процедура CRM_СтатусыEmailРассылок() Экспорт
	
	СпособОтправки = Константы.CRM_СпособОтправкиРассылок.Получить();
	Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.SMTP Тогда Возврат; КонецЕсли;
	
						  
	Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
		СтатусыВДоставке = CRM_ИнтеграцияСUniSenderКлиентСервер.СтатусыВДоставке();
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_СтатусыПисемEmailРассылки.Письмо,
		                      |	CRM_СтатусыПисемEmailРассылки.Письмо.ИдентификаторСообщения КАК ИдентификаторСообщения
		                      |ИЗ
		                      |	РегистрСведений.CRM_СтатусыПисемEmailРассылки КАК CRM_СтатусыПисемEmailРассылки
		                      |ГДЕ
		                      |	CRM_СтатусыПисемEmailРассылки.Статус В(&СтатусыВДоставке)");
							  
		Запрос.УстановитьПараметр("СтатусыВДоставке", СтатусыВДоставке);					  
		Выборка = Запрос.Выполнить().Выбрать();
		Количество = 0;
		ТаблицаПисем = Новый ТаблицаЗначений;
		ТаблицаПисем.Колонки.Добавить("Письмо");
		ТаблицаПисем.Колонки.Добавить("ИдентификаторСообщения");
		Пока Выборка.Следующий() Цикл
			Если Количество = 100 Тогда
				Количество = 0;
				CRM_ИнтеграцияСUniSenderКлиентСервер.ОбновитьСтатусыEmailРассылок(ТаблицаПисем);
				ТаблицаПисем.Очистить();
			КонецЕсли;
			НоваяСтрока = ТаблицаПисем.Добавить();
			НоваяСтрока.Письмо = Выборка.Письмо;
			НоваяСтрока.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		КонецЦикла;
		CRM_ИнтеграцияСUniSenderКлиентСервер.ОбновитьСтатусыEmailРассылок(ТаблицаПисем);
		
	КонецЕсли;
						  
КонецПроцедуры


// Процедура создает предопределенные папки для учетной записи электронной почты.
//
// Параметры:
//	УчетнаяЗапись	- СправочникСсылка	- Учетная запись, для которой будут созданы предопределенные папки.
//
Процедура СоздатьПредопределенныеПапкиЭлектронныхПисемДляУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", УчетнаяЗапись);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПапкиЭлектронныхПисем.Наименование,
	               |	ПапкиЭлектронныхПисем.CRM_Вид,
	               |	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания,
	               |	ПапкиЭлектронныхПисем.Ссылка
	               |ИЗ
	               |	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	               |ГДЕ
	               |	ПапкиЭлектронныхПисем.Владелец = &Владелец
	               |	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка";
	   
	ТаблицаИмеющихсяПапок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ПапкаПочты Из Перечисления.CRM_ВидыПапокЭлектроннойПочты Цикл
		
		Если ПапкаПочты = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие Тогда
			НомерПапки = 1;
		ИначеЕсли ПапкаПочты = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные Тогда
			НомерПапки = 2;
		ИначеЕсли ПапкаПочты = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики Тогда
			НомерПапки = 3;
		ИначеЕсли ПапкаПочты = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие Тогда
			НомерПапки = 4;
		ИначеЕсли ПапкаПочты = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные Тогда
			НомерПапки = 5;
		ИначеЕсли ПапкаПочты = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные Тогда
			НомерПапки = 6;
		ИначеЕсли ПапкаПочты = Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта Тогда
			НомерПапки = 7;
		КонецЕсли;	
		
		ИмяПапки = Строка(ПапкаПочты);
		
		СтрокаТаблицы = ТаблицаИмеющихсяПапок.Найти(ИмяПапки, "Наименование");
		
		Если СтрокаТаблицы = Неопределено Тогда
			НовыйОбъект = Справочники.ПапкиЭлектронныхПисем.СоздатьЭлемент();
			НовыйОбъект.УстановитьНовыйКод();
			НовыйОбъект.ОбменДанными.Загрузка		= Истина;
			НовыйОбъект.Владелец					= УчетнаяЗапись;
			НовыйОбъект.Наименование				= ИмяПапки;
			// +CRM
			НовыйОбъект.CRM_Вид						= ПапкаПочты;
			// -CRM
			НовыйОбъект.РеквизитДопУпорядочивания	= НомерПапки;
			НовыйОбъект.ПредопределеннаяПапка		= Истина;
			Попытка
				НовыйОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), УчетнаяЗапись, , , Истина);
			КонецПопытки;
		Иначе	
			Если (СтрокаТаблицы.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.ПустаяСсылка())
				ИЛИ (СтрокаТаблицы.РеквизитДопУпорядочивания = 0) Тогда 
				НовыйОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
				НовыйОбъект.ОбменДанными.Загрузка		= Истина;
				НовыйОбъект.CRM_Вид						= ПапкаПочты;
				НовыйОбъект.РеквизитДопУпорядочивания	= НомерПапки;
				Попытка
					НовыйОбъект.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), УчетнаяЗапись, , , Истина);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает контрагента для заполнения документов на основании
// документа "Электронное письмо входящее".
//
// Параметры:
//  ЭлектронноеПисьмо - ДокументСсылка.ЭлектронноеПисьмоВходящее - письмо;
//
// Возвращаемое значение:
//  СправочникСсылка.Партнеры - партнер для подстановки в документ, если не найден,
//                                 возвращается "Неопределено". 
//
Функция ЭлектронноеПисьмоВходящееПолучитьКонтрагента(ЭлектронноеПисьмо) Экспорт
	
	Контрагент = Неопределено;
		
	ОтправительПисьма = ЭлектронноеПисьмо.ОтправительКонтакт;
	
	Если ЗначениеЗаполнено(ОтправительПисьма) И ТипЗнч(ОтправительПисьма) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Контрагент = ОтправительПисьма;
		
	ИначеЕсли ЗначениеЗаполнено(ОтправительПисьма) И ТипЗнч(ОтправительПисьма) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		Контрагент = ОтправительПисьма.Владелец;
		
	КонецЕсли;
	
	Возврат Контрагент;
		
КонецФункции// ЭлектронноеПисьмоВходящееПолучитьКонтрагента(ЭлектронноеПисьмо) Экспорт	

// Функция возвращает контактное лицо для заполнения документов на основании
// документа "Электронное письмо входящее".
//
// Параметры:
//  ЭлектронноеПисьмо - ДокументСсылка.ЭлектронноеПисьмоВходящее - письмо;
//
// Возвращаемое значение:
//  СправочникСсылка.КонтактныеЛицаПартнеров - контакт для подстановки в документ, если не найден,
//                                 возвращается "Неопределено". 
//
Функция ЭлектронноеПисьмоВходящееПолучитьКонтактноеЛицо(ЭлектронноеПисьмо) Экспорт
	
	КонтактноеЛицо = Неопределено;
		
	ОтправительПисьма = ЭлектронноеПисьмо.ОтправительКонтакт;
	
	Если ЗначениеЗаполнено(ОтправительПисьма) И ТипЗнч(ОтправительПисьма) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		КонтактноеЛицо = ОтправительПисьма;
		
	КонецЕсли;
	
	Возврат КонтактноеЛицо;
		
КонецФункции// ЭлектронноеПисьмоВходящееПолучитьКонтактноеЛицо(ЭлектронноеПисьмо) Экспорт	

// Функция возвращает контрагента для заполнения документов на основании
// документа "Электронное письмо исходящее".
//
// Параметры:
//  ЭлектронноеПисьмо - ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо;
//
// Возвращаемое значение:
//  СправочникСсылка.Партнеры - партнер для подстановки в документ, если не найден,
//                                 возвращается "Неопределено". 
//
Функция ЭлектронноеПисьмоИсходящееПолучитьКонтрагента(ЭлектронноеПисьмо) Экспорт
	
	Контрагент = Неопределено;	
	
	ПолучателиПисьма = ЭлектронноеПисьмо.ПолучателиПисьма;
	
	Для Каждого СтрокаТЧ Из ПолучателиПисьма Цикл
		
		ПолучательПисьма = СтрокаТЧ.Контакт;
		
		Если ЗначениеЗаполнено(ПолучательПисьма) Тогда
			
			Если ТипЗнч(ПолучательПисьма) = Тип("СправочникСсылка.Партнеры") Тогда
				
				Контрагент = ПолучательПисьма;
				
				Прервать;					
				
			ИначеЕсли ТипЗнч(ПолучательПисьма) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				Если ЗначениеЗаполнено(ПолучательПисьма.Владелец) Тогда
					
					Контрагент = ПолучательПисьма.Владелец;
					
					Прервать;					
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;			 
	
	Возврат Контрагент;
		
КонецФункции// ЭлектронноеПисьмоИсходящееПолучитьКонтрагента(ЭлектронноеПисьмо) Экспорт	

// Функция возвращает контрагента для заполнения документов на основании
// документа "Электронное письмо исходящее".
//
// Параметры:
//  ЭлектронноеПисьмо - ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо;
//
// Возвращаемое значение:
//  СправочникСсылка.Партнеры - партнер для подстановки в документ, если не найден,
//                                 возвращается "Неопределено". 
//
Функция ЭлектронноеПисьмоИсходящееПолучитьКонтактноеЛицо(ЭлектронноеПисьмо) Экспорт
	
	КонтактноеЛицо = Неопределено;	
	
	ПолучателиПисьма = ЭлектронноеПисьмо.ПолучателиПисьма;
	
	Для Каждого СтрокаТЧ Из ПолучателиПисьма Цикл
		
		ПолучательПисьма = СтрокаТЧ.Контакт;
		
		Если ЗначениеЗаполнено(ПолучательПисьма) Тогда
			
			Если ТипЗнч(ПолучательПисьма) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				КонтактноеЛицо = ПолучательПисьма;
				Прервать
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;			 
	
	Возврат КонтактноеЛицо;
		
КонецФункции// ЭлектронноеПисьмоИсходящееПолучитьКонтактноеЛицо(ЭлектронноеПисьмо) Экспорт	

// извлекает объект типа "ИнтернетПочтовоеСообщение" из хранилища значений.
//
// Параметры:
//  ХранилищеПочтовогоСообщения - ХранилищеЗначений - хранилище почтового сообщения.
//
// Возвращаемое значение:
//  ИнтернетПочтовоеСообщение - почтовое сообщение из хранилища.
//
Функция ПолучитьИнтернетПочтовоеСообщениеИзХранилища(ХранилищеПочтовогоСообщения) Экспорт
	
	ПочтовоеСообщение = ХранилищеПочтовогоСообщения.Получить();
	
	Возврат ПочтовоеСообщение;	
	
КонецФункции// ПолучитьИнтернетПочтовоеСообщениеИзХранилища()

// удаляет из XML-текста недопустимые символы.
//
// Параметры:
//  Строка - Строка - XML-текст.
//
// Возвращаемое значение:
//  Строка - XML-текст без недопустимых символов.
//
Функция КорректнаяСтрока(Строка) Экспорт
	
	Позиция = НайтиНедопустимыеСимволыXML(Строка);
	
	Пока Позиция <> 0 Цикл
		
		Строка = СтрЗаменить(Строка, Сред(Строка, Позиция, 1), "");
		Позиция = НайтиНедопустимыеСимволыXML(Строка);
		
	КонецЦикла;	
	
	Возврат Строка;
	
КонецФункции

// Заменяет запрещенные символы в именах файлов.
//
Функция ЗаменитьЗапрещенныеСимволыВИмениФайла(Знач СтрокаДляЗамены) Экспорт
	
	СтрокаРезультат = СтрокаДляЗамены;
	
	//Если СтрокаДляЗамены = "" Тогда
	//	Возврат "Вложение.eml"
	//КонецЕсли;	
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "\", "_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "/", "_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ":", "_");
   	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "*", "_");	
	//СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ".", "_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "?", "_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, """","_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ">", "_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "<", "_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "|", "_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, Символы.Таб, "_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, Символы.ВТаб, "_");
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Функция возвращает файлы подписи электронного письма.
//
Функция ПолучитьФайлыПодписиЭлектронногоПисьма(Подпись) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_ПодписиПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Подпись";
	
	Запрос.УстановитьПараметр("Подпись", Подпись);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает основную папку учетной записи заданного вида.
//
Функция ПолучитьПапкуЭлектронногоПисьма(УчетнаяЗапись, Знач Вид) Экспорт
	
	Если  ТипЗнч(Вид) = Тип("Строка") Тогда
		
		Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты[Вид];
		
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.CRM_Вид = &Вид
		|	И ПапкиЭлектронныхПисем.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Вид", Вид);
	Запрос.УстановитьПараметр("Владелец", УчетнаяЗапись);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат  ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

    Возврат Справочники.ПапкиЭлектронныхПисем.ПустаяСсылка();
	
КонецФункции	

// Функция возвращает учетную запись указанную в письме.
//
Функция ПолучитьУчетнуюЗаписьПоПисьму(Письмо) Экспорт
	
	Возврат Письмо.УчетнаяЗапись;
	
КонецФункции

// Функция переносит письмо в папку.
//
Функция ПеренестиПисьмоВПапку(Письмо, Папка) Экспорт
	
	СтруктураДляЗаписи = ВзаимодействияКлиентСервер.ПустаяСтруктураРеквизитыВзаимодействия();
	СтруктураДляЗаписи.Папка                   = Папка;
	СтруктураДляЗаписи.Рассмотрено             = Истина;
	СтруктураДляЗаписи.РассчитыватьРассмотрено = Ложь;
	Попытка
		ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо, СтруктураДляЗаписи);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось перенести письмо'"));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция формирует представление списка адресатов электронной почты для коллекции адресатов.
//
// Параметры:
//  ТаблицаАдресатов	- ТаблицаЗначений	- Таблица с данным адресатов.
//  ВключатьИмяКонтакта	- Булево			- Признак необходимости включения в представление данных контакта.
//  Контакт				- СправочникСсылка	- Контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//   Строка	- Сформированное представление списка адресатов электронной почты.
// 
Функция ПолучитьПредставлениеСпискаАдресатов(ТаблицаАдресатов, ВключатьИмяКонтакта = Истина) Экспорт

	Представление = "";
	Для Каждого Стр Из ТаблицаАдресатов Цикл
		Представление = Представление + ?(Представление = "", "", ", ") 
			+ ПолучитьПредставлениеАдресата(Стр.Представление, Стр.Адрес, ?(ВключатьИмяКонтакта, Стр.Контакт, ""));
	КонецЦикла;

	Возврат Представление;

КонецФункции // ПолучитьПредставлениеСпискаАдресатов()

// Функция формирует представление адресата электронной почты.
//
// Параметры:
//  Имя			- Строка			- Имя адресата.
//  Адрес  		- Строка			- Адрес электронной почты адресата.
//  Контакт		- СправочникСсылка	- Контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//   Строка	- Сформированное представление адресата электронной почты.
// 
Функция ПолучитьПредставлениеАдресата(Имя, Адрес, Контакт) Экспорт
	
	АдресСоСкобками = "<" + Адрес + ">";
	Результат = ?(Имя = Адрес ИЛИ Имя = "" ИЛИ СтрНайти(Адрес, "<" + Имя + ">") > 0 , Адрес, ?(ПустаяСтрока(Адрес), Имя, СокрЛП(СтрЗаменить(Имя, АдресСоСкобками, "")) + " " + АдресСоСкобками));
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Результат = Результат + " [" + ПолучитьПредставлениеКонтакта(Контакт) + "]";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции // ПолучитьПредставлениеАдресата()

// Функция возвращает представление контакта.
//
// Параметры:
//  Контакт		- СправочникСсылка	- Контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//   Строка	- Сформированное представление контакта.
// 
Функция ПолучитьПредставлениеКонтакта(Контакт)

	Возврат Строка(Контакт);

КонецФункции // ПолучитьПредставлениеКонтакта()

// Функция возвращает массив контактов (контрагентов и КЛ) для заполнения документов на основании
// документа "Электронное письмо исходящее".
//
// Параметры:
//  ЭлектронноеПисьмо - ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо;
//
// Возвращаемое значение:
// (новое) Массив - массив контрагентов для выбора контрагентов
//
Функция ЭлектронноеПисьмоИсходящееПолучитьМассивКонтрагентов(ЭлектронноеПисьмо) Экспорт
	
	Контрагент = Неопределено;	
	
	ПолучателиПисьма = Новый Массив;
	
	Для каждого Получатель Из ЭлектронноеПисьмо.ПолучателиПисьма Цикл
		ПолучателиПисьма.Добавить(Получатель.Контакт);
	КонецЦикла;
	
	Для каждого Получатель Из ЭлектронноеПисьмо.ПолучателиСкрытыхКопий Цикл
		ПолучателиПисьма.Добавить(Получатель.Контакт);
	КонецЦикла;

	Для каждого Получатель Из ЭлектронноеПисьмо.ПолучателиКопий Цикл
		ПолучателиПисьма.Добавить(Получатель.Контакт);
	КонецЦикла;
	
	Контрагент = Новый Массив;
	
	Для Каждого ПолучательПисьма Из ПолучателиПисьма Цикл
		
		Если ТипЗнч(ПолучательПисьма) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Контрагент.Добавить(ПолучательПисьма);
			
		ИначеЕсли ТипЗнч(ПолучательПисьма) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			Если ЗначениеЗаполнено(ПолучательПисьма.Владелец) И ПолучателиПисьма.Найти(ПолучательПисьма.Владелец) = Неопределено Тогда
				
				Контрагент.Добавить(ПолучательПисьма);
				
			КонецЕсли;		
			
		КонецЕсли; 
		
	КонецЦикла;			 
	
	Возврат Контрагент;
	
КонецФункции// ЭлектронноеПисьмоВходящееПолучитьМассивКонтрагентов(ЭлектронноеПисьмо) Экспорт	

// Функция возвращает значение права текущего пользователя на работу с учетной записью.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - проверяемая учетная запись;
//  ИмяПрава	  - Строка - имя проверяемого права (значения: "Администрирование" или "Запись");
//
// Возвращаемое значение:
//  Булево - наличие права 
//
Функция ТекущийПользовательПолучитьПравоУчетнойЗаписи(УчетнаяЗапись, ИмяПрава) Экспорт
	
	ЗначениеПраваУчетнойЗаписи = Ложь;
	
	// Полноправным пользователям разрешены все действия независимо от настроек.
	Если ИмяПрава = "Администрирование" Тогда
		
		ЗначениеПраваУчетнойЗаписи = Пользователи.ЭтоПолноправныйПользователь()
	
	КонецЕсли; 
	
	Если НЕ ЗначениеПраваУчетнойЗаписи Тогда
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.Администрирование,
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.Запись
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
			               |ГДЕ
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
			               |	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь";
			
			Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
			Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ЗначениеПраваУчетнойЗаписи = Выборка[ИмяПрава];
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЕсли; 
	
	Возврат ЗначениеПраваУчетнойЗаписи;

КонецФункции // ПолучитьПравоПользователяУчетнойЗаписи() 

// Функция возвращает позицию в Тексте символа, следующего за переданным Тегом.
// Для закрывающего тега надо передавать его вместе с символом "/". 
//
// Параметры:
//	Текст - Строка - текст HTML-документа,
//	Тег   - Строка - HTML-тег без "скобок". Например, "body".
//
// Возвращаемое значение:
//	Число - Позиция в тексте символа, следующего за закрывающей скобкой
//          переданного Тега. 
//
Функция  ПозицияПослеТега(Знач Текст, Знач Тег) Экспорт
	
	Текст = НРег(Текст);
	Тег   = НРег(Тег);
	ПозицияСимвола = 0;
	КонецТега = Найти(Текст, "<" + Тег) + СтрДлина(Тег)+1;
	Если КонецТега > 0 Тогда
		ПозицияСимвола = Найти(Сред(Текст,КонецТега),">") + КонецТега;
	КонецЕсли;
	
	Возврат ПозицияСимвола;

КонецФункции

// Процедура заполняет настройки работы с почтой по умолчанию.
//
// Параметры: 
//	ИмяПользователя - Строка - имя пользователя информациооной базы.
//
Процедура ЗаполнитьНастройкиРаботыСПочтойПоУмолчанию(ИмяПользователя = Неопределено) Экспорт
	
	НастройкиХранилище = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РаботаСПочтой", "НастройкиПользователя", , , ИмяПользователя);
	
	Если ТипЗнч(НастройкиХранилище) = Тип("Структура") Тогда
		
		НастройкиХранилище.Вставить("ОтображатьТелоИсходногоПисьма", Истина);
		НастройкиХранилище.Вставить("ВключатьТелоИсходногоПисьма",	 Истина);
		
	Иначе	
		
		НастройкиХранилище = Новый Структура;
		НастройкиХранилище.Вставить("ВключатьПодписьДляНовыхСообщений",				Истина);
		НастройкиХранилище.Вставить("ВключатьПодписьПриОтветеПересылке",			Истина);
		НастройкиХранилище.Вставить("ВсегдаЗапрашиватьУведомлениеОПрочтении",		Ложь);
		НастройкиХранилище.Вставить("ВсегдаЗапрашиватьУведомленияОДоставке",		Ложь);
		НастройкиХранилище.Вставить("НовоеСообщениеФорматированныйДокумент",		Неопределено);
		НастройкиХранилище.Вставить("ПодписьДляНовыхСообщенийПростойТекст",			Неопределено);
		НастройкиХранилище.Вставить("ПодписьПриОтветеПересылкеПростойТекст",		Неопределено);
		НастройкиХранилище.Вставить("ПорядокОтветовНаЗапросыУведомленийОПрочтении", Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.ЗапрашиватьПередТемКакОтправитьУведомление);
		НастройкиХранилище.Вставить("ПриОтветеПересылкеФорматированныйДокумент",	Неопределено);
		НастройкиХранилище.Вставить("ФорматПодписиДляНовыхСообщений",				Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		НастройкиХранилище.Вставить("ФорматПодписиПриОтветеПересылке",				Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		НастройкиХранилище.Вставить("ОтображатьТелоИсходногоПисьма",				Истина);
		НастройкиХранилище.Вставить("ВключатьТелоИсходногоПисьма",					Истина);
		НастройкиХранилище.Вставить("ОтправлятьСообщенияСразу",						Истина);
	
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РаботаСПочтой", "НастройкиПользователя", НастройкиХранилище, , ИмяПользователя);	
	
КонецПроцедуры
 
// Функция возвращает параметры изображения: высоту и ширину
// по переданному тексту.
//
Функция ВычислитьВысотуИШиринуИзображения(ТекстАнализа) Экспорт
	ПараметрВысоты = "";
	ПараметрШирины = "";	
	ШиринаИзображения = Найти(ТекстАнализа, "height='");
	Если ШиринаИзображения > 0 Тогда
		Сч = 1;
		ТекстШирины = Сред(ТекстАнализа,ШиринаИзображения + 8);
		Пока Сред(ТекстШирины, Сч, 1) <> "'" Цикл
			ПараметрШирины = ПараметрШирины + Сред(ТекстШирины, Сч, 1);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;	
	ВысотаИзображения = Найти(ТекстАнализа, "width='");
	Если ВысотаИзображения > 0 Тогда
		Сч = 1;
		ТекстВысоты = Сред(ТекстАнализа,ВысотаИзображения + 7);
		Пока Сред(ТекстВысоты, Сч, 1) <> "'" Цикл
			ПараметрВысоты = ПараметрВысоты + Сред(ТекстВысоты, Сч, 1);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	Возврат ?(ЗначениеЗаполнено(ПараметрВысоты),"width='" + ПараметрВысоты + "' " + " height='" + ПараметрШирины + "'","");
КонецФункции

// Функция возвращает расширение ссылки на картинку, вставленной в текст.
//
Функция ОбработатьСсылкуДляПолученияРасширения(Ссылка) Экспорт
	РезСтрока = "";
	Сч = 1;
	Пока Сч <= СтрДлина(Ссылка) Цикл
		Если Сред(Ссылка,Сч,1) = "/" Тогда
			РезСтрока = Сред(Ссылка, Сч+1);
		КонецЕсли;			
		Сч = Сч + 1;		
	КонецЦикла;
	Если ЗначениеЗаполнено(РезСтрока) Тогда
		НомерТочки = Найти(РезСтрока,".");
		Если НомерТочки > 0 Тогда
			Возврат Сред(РезСтрока, НомерТочки + 1);
		КонецЕсли;			
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(РезСтрока) Тогда
		РезСтрока = "jpg";
	КонецЕсли;		
	Возврат РезСтрока;
КонецФункции

// удаляет из HTML-Текста теги "img", не содержащие параметра src
//
// Параметры:
//  ТекстHTML  - Строка - HTML-текст, содержащий картинки
//
// Возвращаемое значение:
//   Строка   - Отредактированный HTML-текст 
//
Функция УдалитьНекорректныеКартинкиИзТекстаHTML(ТекстHTML) Экспорт
	
	ОстатокТекстаHTML = ТекстHTML;
	
	НовыйТекстHTML = "";
	
	НомерПервогоСимволаТега = 1;
	
	Пока НомерПервогоСимволаТега > 0 Цикл
	
		НомерПервогоСимволаТега = СтрНайти(ОстатокТекстаHTML, "<img", НаправлениеПоиска.СНачала, НомерПервогоСимволаТега);
		
		Если НомерПервогоСимволаТега = 0 Тогда
			
			НовыйТекстHTML = НовыйТекстHTML + ОстатокТекстаHTML; 			
			
		Иначе	
			
			НомерПоследнегоСимволаТега = СтрНайти(ОстатокТекстаHTML, ">", НаправлениеПоиска.СНачала, НомерПервогоСимволаТега);
			
			ТегСодержитОшибки = Ложь;
			
			НомерПервогоСимволаПараметра = СтрНайти(ОстатокТекстаHTML, " src", НаправлениеПоиска.СНачала, НомерПервогоСимволаТега);
			
			Если НомерПервогоСимволаПараметра > 0 И НомерПервогоСимволаПараметра < НомерПоследнегоСимволаТега Тогда
				
				ТекущийСимволСтрокиНомер = НомерПервогоСимволаПараметра + 4;
				
				НомерСимволаЗнакРавенства = 0;
				НомерПервойОдинарнойКавычки = 0;
				НомерПервойДвойнойКавычки = 0;
				НомерВторойОдинарнойКавычки = 0;
				НомерВторойДвойнойКавычки = 0;
				
				ПроверкаУспешноЗавершена = Ложь;
				
				Пока ТекущийСимволСтрокиНомер < НомерПоследнегоСимволаТега И НЕ ТегСодержитОшибки И НЕ ПроверкаУспешноЗавершена Цикл
					
					ТекущийСимволСтроки = Сред(ОстатокТекстаHTML, ТекущийСимволСтрокиНомер, 1);
					
					// первым значащим символом после параметра должен быть знак равенства
					
					Если НомерСимволаЗнакРавенства = 0 Тогда
						
						Если ТекущийСимволСтроки = "=" Тогда
							
							НомерСимволаЗнакРавенства = ТекущийСимволСтрокиНомер;
							
						ИначеЕсли НЕ ТекущийСимволСтроки = " " Тогда
							
							ТегСодержитОшибки = Истина;
							
						КонецЕсли;	
							
					// следующим символом должна быть одиночная или двойная кавычка	
						
					ИначеЕсли НомерПервойОдинарнойКавычки + НомерПервойДвойнойКавычки = 0 Тогда
					
						Если ТекущийСимволСтроки = """" Тогда
							
							НомерПервойДвойнойКавычки = ТекущийСимволСтрокиНомер;
							
						ИначеЕсли ТекущийСимволСтроки = "'" Тогда
							
							НомерПервойОдинарнойКавычки = ТекущийСимволСтрокиНомер;
							
						ИначеЕсли НЕ ТекущийСимволСтроки = " " Тогда
							
							ТегСодержитОшибки = Истина;
							
						КонецЕсли;
						
					// закрывать одиночную кавычку может только одиночная кавычка	
						
					ИначеЕсли НомерПервойОдинарнойКавычки > 0 Тогда						
						
						Если ТекущийСимволСтроки = "'" Тогда
							
							НомерВторойОдинарнойКавычки = ТекущийСимволСтрокиНомер;
							
							// проверим на пустые кавычки
							
							Если НомерВторойОдинарнойКавычки - НомерПервойОдинарнойКавычки = 1 Тогда
							
								ТегСодержитОшибки = Истина;
								
							Иначе
								
								ПроверкаУспешноЗавершена = Истина;
							
							КонецЕсли;
							
						КонецЕсли;
						
					// закрывать одиночную кавычку может только одиночная кавычка	
						
					ИначеЕсли НомерПервойДвойнойКавычки > 0 Тогда						
						
						Если ТекущийСимволСтроки = """" Тогда
							
							НомерВторойДвойнойКавычки = ТекущийСимволСтрокиНомер;
							
							// проверим на пустые кавычки
							
							Если НомерВторойДвойнойКавычки - НомерПервойДвойнойКавычки = 1 Тогда
							
								ТегСодержитОшибки = Истина;
								
							Иначе
								
								ПроверкаУспешноЗавершена = Истина;
							
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ (ТегСодержитОшибки ИЛИ ПроверкаУспешноЗавершена) Тогда
					
						ТекущийСимволСтрокиНомер = ТекущийСимволСтрокиНомер + 1;
						
					КонецЕсли;	
				
				КонецЦикла;
				
				Если НЕ ПроверкаУспешноЗавершена Тогда
					
					ТегСодержитОшибки = Истина;	
					
				КонецЕсли;	
				
			Иначе
				
				ТегСодержитОшибки = Истина;
				
			КонецЕсли;			
				
			Если ТегСодержитОшибки Тогда
				
				// удалим некорректный тег "img"
				
				НовыйТекстHTML = НовыйТекстHTML + Лев(ОстатокТекстаHTML, НомерПервогоСимволаТега -1);
				
				// попробуем найти закрывающий тэг и удалить его
				
				ОстатокТекстаHTML = Сред(ОстатокТекстаHTML, НомерПоследнегоСимволаТега + 1);
				
				ПервыеШестьСимволовПослеПробелов = Лев(СокрЛ(ОстатокТекстаHTML), 6);
				
				Если ПервыеШестьСимволовПослеПробелов = "</img>" Тогда					
					
					ОстатокТекстаHTML = Сред(СокрЛ(ОстатокТекстаHTML), 7);
					
				КонецЕсли;	
				
			Иначе
				
				НовыйТекстHTML = НовыйТекстHTML + Лев(ОстатокТекстаHTML, НомерПоследнегоСимволаТега);
				
				ОстатокТекстаHTML = Сред(ОстатокТекстаHTML, НомерПоследнегоСимволаТега + 1);
				
			КонецЕсли;
			
			НомерПервогоСимволаТега = 1;			
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат НовыйТекстHTML;

КонецФункции // УдалитьНекорректныеКартинкиИзТекстаHTML()

// Выполняет процедуру отправки и получения электронных писем.
Процедура ПолучениеИОтправкаЭлектронныхПисем() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное получение и отправка электронной почты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	СтруктураМассивовПисем = СтруктураМассиваПисем();
	
	// Получение писем
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                                                                            КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                                                                             КАК АдресЭлектроннойПочты,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование                                                                                      КАК Наименование,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ)                                     КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОтветственныйЗаОбработкуПисем,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере                                                                  КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере                                                                  КАК ОставлятьДней,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя                                                                                   КАК ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь	                                                                                    КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты                                                                             КАК ПротоколВходящейПочты,
	// +CRM
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ИсточникЛидов																                    КАК CRM_ИсточникЛидов,
	// -CRM
	|	ЕСТЬNULL(ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1))                                 КАК ДатаЗагрузкиПисем,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты = ""IMAP""
	|		ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОбработкаПисемВыполняетсяВДругомПочтовомКлиенте, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                                                                           КАК ОбработкаПисемВедетсяВДругомПочтовомКлиенте
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
	|		ПО (ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Получено = 0;
		ПолучитьПисьма(Выборка, Ложь, Получено, СтруктураМассивовПисем);
		
	КонецЦикла;
	
	// Отправка писем
	Запрос = Новый Запрос;
	// +CRM
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	ЭлектронноеПисьмоИсходящее.Ссылка,
	//|	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
	//|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
	//|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	//|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ТребуетсяОпределениеПапки,
	//|	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) КАК КоличествоПопыток
	//|ИЗ
	//|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	//|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	//|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	//|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
	//|		ПО (НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка)
	//|ГДЕ
	//|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	//|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	//|	И ВЫБОР
	//|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить = ДАТАВРЕМЯ(1, 1, 1)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить < &ТекущаяДата
	//|		КОНЕЦ
	//|	И ВЫБОР
	//|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки > &ТекущаяДата
	//|		КОНЕЦ
	//|	И ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) < 5
	//|ИТОГИ ПО
	//|	УчетнаяЗапись";
	
	// Надо исключить письма, которые созданы при отправке оповещений, но не ушли по какой-либо причине
	// повторно они будут отправлены рег. заданием отправка оповещений по почте
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_Оповещения.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.Документ ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|	И CRM_Оповещения.Документ <> ЗНАЧЕНИЕ(Документ.ЭлектронноеПисьмоИсходящее.ПустаяСсылка)";
	
	Запрос.Текст = ТекстЗапроса;
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_НеОтправленныеПисьма.Письмо
	|ИЗ
	|	РегистрСведений.CRM_НеотправленныеПисьма КАК CRM_НеОтправленныеПисьма
	|ГДЕ
	|	CRM_НеОтправленныеПисьма.Рассылка ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	|	И CRM_НеОтправленныеПисьма.Итерация > 2";
	Запрос.Текст = ТекстЗапроса;
	МассивНеОтправленныхПисем = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Письмо");
	
	ТекстЗапроса = "ВЫБРАТЬ
   |	ЭлектронноеПисьмоИсходящее.Ссылка,
   |	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
   |	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
   |	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись,
   |	ЭлектронноеПисьмоИсходящее.Автор КАК Автор,
   |	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ТребуетсяОпределениеПапки,
   // +CRM_УТ КоличествоПопыток - из типовой УТ 11
   //|	Ложь КАК ЭтоРассылка
   |	Ложь КАК ЭтоРассылка,
   |	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) КАК КоличествоПопыток
   // -CRM_УТ
   |ПОМЕСТИТЬ Письма
   |ИЗ
   |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
   |		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
   |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
   |			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
   |		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
   // +CRM_УТ НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма - из типовой УТ 11
   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
   |		ПО (НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка)
   // -CRM_УТ
   |ГДЕ
   |	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись.ИспользоватьДляОтправки
   |	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	Если Массив.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	И НЕ ЭлектронноеПисьмоИсходящее.Ссылка В(&Массив)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	// +CRM_УТ условия из типовой УТ 11
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить < &ТекущаяДата
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки > &ТекущаяДата
	|		КОНЕЦ
	|	И ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) < 5
	// -CRM_УТ условия из типовой УТ 11
	|	И (ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	// +CRM_УТ
	//|				И (НЕ ЭлектронноеПисьмоИсходящее.Предмет ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	//|					ИЛИ ЭлектронноеПисьмоИсходящее.Предмет = ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)))
	|				И (НЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, """") ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	|					ИЛИ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, """") = ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)))
	// -CRM_УТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоИсходящее.Автор КАК Автор,
	|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ТребуетсяОпределениеПапки,
	// +CRM_УТ КоличествоПопыток - из типовой УТ 11
	//|	Истина КАК ЭтоРассылка
	|	Истина КАК ЭтоРассылка,
	|	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) КАК КоличествоПопыток
   // -CRM_УТ
	|ПОМЕСТИТЬ ПисьмаРассылок
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	// +CRM_УТ НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма - из типовой УТ 11
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
	|		ПО (НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка)
	// -CRM_УТ
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись.ИспользоватьДляОтправки
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	Если МассивНеОтправленныхПисем.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	И НЕ ЭлектронноеПисьмоИсходящее.Ссылка В(&МассивНеОтправленныхПисем)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	// +CRM_УТ условия из типовой УТ 11
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить < &ТекущаяДата
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки > &ТекущаяДата
	|		КОНЕЦ
	|	И ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) < 5
	// -CRM_УТ условия из типовой УТ 11
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	// +CRM_УТ
	//|			И (ЭлектронноеПисьмоИсходящее.Предмет ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	//|				И ЭлектронноеПисьмоИсходящее.Предмет <> ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка))
	//|			И (НЕ &ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем
	//|				ИЛИ ВЫРАЗИТЬ(ЭлектронноеПисьмоИсходящее.Предмет КАК Документ.CRM_РассылкаЭлектронныхПисем).ОтправлятьПисьмаСразу)
	|			И (ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, """") ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	|				И ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, """") <> ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка))
	|			И (НЕ &ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем
	|				ИЛИ ВЫРАЗИТЬ(ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, """") КАК Документ.CRM_РассылкаЭлектронныхПисем).ОтправлятьПисьмаСразу)
	// -CRM_УТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Письма.Ссылка,
	|	Письма.ПредставлениеПисьма,
	|	Письма.УдалятьПослеОтправки,
	|	Письма.УчетнаяЗапись КАК УчетнаяЗапись,
	|	Письма.Автор КАК Автор,
	|	Письма.ТребуетсяОпределениеПапки,
	|	Письма.ЭтоРассылка,
	// +CRM_УТ КоличествоПопыток - из типовой УТ 11
	|	Письма.КоличествоПопыток,
	// -CRM_УТ
	|	ЕСТЬNULL(НеотправленныеПисьма.Итерация, 0) КАК Итерация
	|ИЗ
	|	Письма КАК Письма
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НеотправленныеПисьма КАК НеотправленныеПисьма
	|		ПО Письма.Ссылка = НеотправленныеПисьма.Рассылка
	//|ГДЕ
	//|	НеотправленныеПисьма.Рассылка ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПисьмаРассылок.Ссылка,
	|	ПисьмаРассылок.ПредставлениеПисьма,
	|	ПисьмаРассылок.УдалятьПослеОтправки,
	|	ПисьмаРассылок.УчетнаяЗапись,
	|	ПисьмаРассылок.Автор КАК Автор,
	|	ПисьмаРассылок.ТребуетсяОпределениеПапки,
	|	ПисьмаРассылок.ЭтоРассылка,
	// +CRM_УТ КоличествоПопыток - из типовой УТ 11
	|	ПисьмаРассылок.КоличествоПопыток,
	// -CRM_УТ
	|	ЕСТЬNULL(НеотправленныеПисьмаРассылок.Итерация, 0)
	|ИЗ
	|	ПисьмаРассылок КАК ПисьмаРассылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НеотправленныеПисьма КАК НеотправленныеПисьмаРассылок
	|		ПО ПисьмаРассылок.Ссылка = НеотправленныеПисьмаРассылок.Рассылка
	//|ГДЕ
	//|	НеотправленныеПисьмаРассылок.Рассылка ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	|ИТОГИ ПО
	|	УчетнаяЗапись, Автор";	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Массив",Массив);
	Запрос.УстановитьПараметр("ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем", Константы.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем.Получить());
	Запрос.УстановитьПараметр("МассивНеОтправленныхПисем",МассивНеОтправленныхПисем);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	// -CRM	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// +CRM
	МассивНеотправленныхПисемПоУчетнымЗаписям = Новый Массив;
	// -CRM
	
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
	
		Попытка
			
			Соединение = Новый ИнтернетПочта;
			ПротоколПодключения = ?(ПустаяСтрока(Профиль.АдресСервераIMAP),ПротоколИнтернетПочты.POP3, ПротоколИнтернетПочты.IMAP);
			Соединение.Подключиться(Профиль, ПротоколПодключения);
			
			Если ПротоколПодключения = ПротоколИнтернетПочты.IMAP Тогда
				ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
				Для Каждого ПочтовыйЯщик Из ПочтовыеЯщики Цикл
					Если НРег(ПочтовыйЯщик) = "отправленные"
						Или НРег(ПочтовыйЯщик) = "sent" Тогда
						
						Соединение.ТекущийПочтовыйЯщик = ПочтовыйЯщик;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         ТекстСообщенияОбОшибке);
// +CRM
			МассивНеотправленныхПисемПоАвторам = Новый Массив;
			// Если не можем подключиться к учетной записи, то для всех писем по этой учетной записи
			// создаем запись в РС CRM_НеОтправленныеПисьма
			ВыборкаПоАвторам = ВыборкаУчетныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоАвторам.Следующий() Цикл
				
				МассивНеотправленныхПисем = Новый Массив;
				ВыборкаПисьма = ВыборкаПоАвторам.Выбрать();
				Пока ВыборкаПисьма.Следующий() Цикл
					Если НЕ ВыборкаПисьма.ЭтоРассылка И (ВыборкаПисьма.Итерация > 1) Тогда
						МассивНеотправленныхПисем.Добавить(ВыборкаПисьма.Ссылка);
					Иначе
						ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ТекстСообщенияОбОшибке);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивНеотправленныхПисем.Количество() > 0 Тогда
					МассивНеотправленныхПисемПоАвторам.Добавить(Новый Структура("Автор,Письма",ВыборкаПоАвторам.Автор,МассивНеотправленныхПисем));
				КонецЕсли;
			КонецЦикла;
			
			Если МассивНеотправленныхПисемПоАвторам.Количество() > 0 Тогда
				МассивНеотправленныхПисемПоУчетнымЗаписям.Добавить(Новый Структура("УчетнаяЗапись,Письма",ВыборкаУчетныеЗаписи.УчетнаяЗапись,МассивНеотправленныхПисемПоАвторам));
			КонецЕсли;
// -CRM
			Продолжить;
			
		КонецПопытки;
		
		// +CRM
		//ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		МассивНеотправленныхПисемПоАвторам = Новый Массив;
		ВыборкаПоАвторам = ВыборкаУчетныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоАвторам.Следующий() Цикл

		МассивНеотправленныхПисем = Новый Массив;
		ВыборкаПисьма = ВыборкаПоАвторам.Выбрать();
		// -CRM;		
		
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
			Попытка
				ПараметрыПисьма = Неопределено;
				ИдентификаторПисьма = CRM_Взаимодействия.CRM_ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение, ПараметрыПисьма);
			Исключение
				// +CRM
					//// Если не отправилось по причине отсутствия получателей, то кидаем письмо в черновики
					//// со статусом черновик
					//Если (ПисьмоОбъект.ПолучателиПисьма.Количество() = 0)
					//И (ПисьмоОбъект.ПолучателиКопий.Количество() = 0)
					//И (ПисьмоОбъект.ПолучателиСкрытыхКопий.Количество() = 0) Тогда
					//	ПисьмоОбъект.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
					//	ПисьмоОбъект.CRM_Папка		= CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики);
					//	ПисьмоОбъект.записать();
					//КонецЕсли;
					Если НЕ ВыборкаПисьма.ЭтоРассылка И (ВыборкаПисьма.Итерация > 1) Тогда
						МассивНеотправленныхПисем.Добавить(ВыборкаПисьма.Ссылка);
					Иначе
						ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецЕсли;
				// -CRM
				// +CRM_УТ
				//Если ЗначениеЗаполнено(ВыборкаПисьма.Ссылка.Предмет) И ТипЗнч(ВыборкаПисьма.Ссылка.Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
				//И НЕ ВыборкаПисьма.Ссылка.Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
				ВыборкаПисьмаПредмет = Взаимодействия.ПолучитьЗначениеПредмета(ВыборкаПисьма.Ссылка);
				Если ЗначениеЗаполнено(ВыборкаПисьмаПредмет) И ТипЗнч(ВыборкаПисьмаПредмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
				И НЕ ВыборкаПисьмаПредмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
				// -CRM_УТ
					// Если не удалось отправить Письмо, добавим информацию об этом в РС CRM_НеОтправленныеПисьма
					ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
				// -CRM
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Во время отправки электронного письма %1 произошла ошибка
						|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ВыборкаПисьма.ПредставлениеПисьма,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
				                         УровеньЖурналаРегистрации.Ошибка, , ,
				                         ТекстСообщенияОбОшибке);
				
				МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Письмо = ВыборкаПисьма.Ссылка;
				МенеджерЗаписи.КоличествоПопыток = ВыборкаПисьма.КоличествоПопыток + 1;
				МенеджерЗаписи.ИнформацияООшибке = ТекстСообщенияОбОшибке;
				МенеджерЗаписи.Записать();
				
				Продолжить;
			КонецПопытки;
			
			// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
			// если есть, то удалим
			CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка);
			
			ИдентификаторСообщенияОтправкаIMAP = "";
			
			Если ВыборкаПисьма.УдалятьПослеОтправки Тогда
				ПисьмоОбъект.Удалить();
			Иначе
				
				Попытка
					
					Если ПротоколПодключения = ПротоколИнтернетПочты.IMAP Тогда
						ИдентификаторСообщенияОтправкаIMAP = CRM_Взаимодействия.CRM_ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение, ПараметрыПисьма, "IMAP");
					КонецЕсли;
				
				Исключение
					
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Во время передачи электронного письма %1 на сервер произошла ошибка
						|%2. 
						|Письмо отправлено, но не сохранено на почтовом сервере.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ВыборкаПисьма.ПредставлениеПисьма,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
					                         УровеньЖурналаРегистрации.Ошибка, , ,
					                         ТекстСообщенияОбОшибке);
					
				КонецПопытки;
				
				ПисьмоОбъект.ИдентификаторСообщения             = ИдентификаторПисьма;
				ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ИдентификаторСообщенияОтправкаIMAP;
				ПисьмоОбъект.СтатусПисьма                       = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.Размер                             = Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
				ПисьмоОбъект.ДатаОтправления                    = ТекущаяДатаСеанса();
				ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				// +CRM
				ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные));
				// -CRM
				Если ВыборкаПисьма.ТребуетсяОпределениеПапки Тогда
					СтруктураМассивовПисем.ПисьмаДляОпределенияПапок.Добавить(ВыборкаПисьма.Ссылка);
				КонецЕсли;
				СтруктураМассивовПисем.ВсеПолученныеПисьма.Добавить(ВыборкаПисьма.Ссылка);
				// +CRM
				Если ЗначениеЗаполнено(ПисьмоОбъект.CRM_ТипОтвета) Тогда
					CRM_ОбщегоНазначенияСервер.ДобавитьЗаписьИнформацииОПисьме(ПисьмоОбъект.Ссылка);
				КонецЕсли;
				// -CRM
			КонецЕсли;
		// +CRM
			КонецЦикла;
			
			Если МассивНеотправленныхПисем.Количество() > 0 Тогда
				МассивНеотправленныхПисемПоАвторам.Добавить(Новый Структура("Автор,Письма",ВыборкаПоАвторам.Автор,МассивНеотправленныхПисем));
			КонецЕсли;
		КонецЦикла;
		
		Если МассивНеотправленныхПисемПоАвторам.Количество() > 0 Тогда
			МассивНеотправленныхПисемПоУчетнымЗаписям.Добавить(Новый Структура("УчетнаяЗапись,Письма",ВыборкаУчетныеЗаписи.УчетнаяЗапись,МассивНеотправленныхПисемПоАвторам));
		КонецЕсли;
		// -CRM
		Соединение.Отключиться();
		
	КонецЦикла;
	
	ОпределитьЗагруженныеРанееПодчиненныеПисьма(Выборка.Ссылка, СтруктураМассивовПисем.ВсеПолученныеПисьма);
	Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(СтруктураМассивовПисем.ВсеПолученныеПисьма);
	Взаимодействия.УстановитьПапкиДляМассиваПисем(СтруктураМассивовПисем.ПисьмаДляОпределенияПапок);
// +CRM
	Если МассивНеотправленныхПисемПоУчетнымЗаписям.Количество() > 0 Тогда
		
		CRM_НапоминанияСервер.ДобавитьНапоминанияОНеотправленныхПисьмах(МассивНеотправленныхПисемПоУчетнымЗаписям);
		CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписиОНеотправленныхПисьмахПеренестиПисьмоВЧерновики(МассивНеотправленныхПисемПоУчетнымЗаписям);
		
	КонецЕсли;
// -CRM
	Взаимодействия.РассчитатьРассмотреноПоПредметам(СтруктураМассивовПисем.ВсеПолученныеПисьма);
	Взаимодействия.РассчитатьРассмотреноПоКонтактам(СтруктураМассивовПисем.ВсеПолученныеПисьма);
	
	// Отправим уведомления о прочтении.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УведомленияОПрочтении.Письмо,
	|	ПРЕДСТАВЛЕНИЕ(УведомленияОПрочтении.Письмо) КАК ПредставлениеПисьма,
	|	УведомленияОПрочтении.ДатаПрочтения,
	|	ЭлектронноеПисьмоВходящее.АдресаУведомленияОПрочтении.(
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.Дата,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты,
	|	ЭлектронноеПисьмоВходящее.Тема
	|ИЗ
	|	РегистрСведений.УведомленияОПрочтении КАК УведомленияОПрочтении
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|			ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ПО УведомленияОПрочтении.Письмо = ЭлектронноеПисьмоВходящее.Ссылка
	|ГДЕ
	|	УведомленияОПрочтении.ТребуетсяОтправка
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
		
		Попытка
			Соединение = Новый ИнтернетПочта;
			Соединение.Подключиться(Профиль);
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         ТекстСообщенияОбОшибке);
			
			Продолжить;
			
		КонецПопытки;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			СоздатьОтправитьУведомлениеОПрочтении(ВыборкаПисьма, Истина, Соединение);
			
		КонецЦикла;
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное получение и отправка электронной почты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

Процедура СоздатьОтправитьУведомлениеОПрочтении(Выборка,ЭтоРегламентноеЗадание,Соединение = Неопределено)
	
	ПараметрыПисьма = Новый Структура;
	
	Взаимодействия.ДобавитьВПараметрАдресатов(Выборка, ПараметрыПисьма, "Кому", "АдресаУведомленияОПрочтении");
	
	ПараметрыПисьма.Вставить("Тема",НСтр("ru = 'Уведомление о прочтении'") + " / " +"Reading Confirmation");
	ПараметрыПисьма.Вставить("Тело",СформироватьТекстУведомленияОПрочтении(Выборка));
	ПараметрыПисьма.Вставить("Кодировка","UTF-8");
	ПараметрыПисьма.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Обычная);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты",Ложь);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Выборка.УчетнаяЗапись, ПараметрыПисьма, Соединение);
	Исключение
		
		Если ЭтоРегламентноеЗадание Тогда
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время регламентной отправки уведомления о прочтении электронного письма %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Выборка.ПредставлениеПисьма,
				ОписаниеОшибки());
				
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщенияОбОшибке);
			
		Иначе
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время отправки уведомления о прочтении электронного письма %1 произошла ошибка
					|%2'"),
				Выборка.ПредставлениеПисьма,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,Выборка.Письмо);
			
		КонецЕсли;
		
		Возврат;
	КонецПопытки;
	
	УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Выборка.Письмо,Ложь);
	
КонецПроцедуры	

Функция СформироватьТекстУведомленияОПрочтении(Выборка)

	ТекстУведомленияАнглийский = "
		|Your message from " + Выборка.ОтправительПредставление + "<" + Выборка.ОтправительАдрес + ">
		|Subject: " + Выборка.Тема + "
		|Sent " + Выборка.Дата + "
		|Has been read " +  Выборка.ДатаПрочтения + "
		|By Recipient " +Выборка.ИмяПользователя + "<" + Выборка.АдресЭлектроннойПочты + ">";
	
	ЛокализованноеУведомление = Символы.ПС + Нстр("ru='Сообщение от %1 < %2 >
		|Тема: %3
		|Отправленное %4
		|Было прочитано %5
		|Получателем %6 <%7>'");
	
	ЛокализованноеУведомление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЛокализованноеУведомление,
		Выборка.ОтправительПредставление,
		Выборка.ОтправительАдрес,
		Выборка.Тема,
		Выборка.Дата,
		Выборка.ДатаПрочтения,
		Выборка.ИмяПользователя,
		Выборка.АдресЭлектроннойПочты);
	
	Возврат ЛокализованноеУведомление + Символы.ПС + Символы.ПС + ТекстУведомленияАнглийский;

КонецФункции

// Выполняет отправку писем пользователя.
Процедура ОтправитьПочтуПользователя() Экспорт

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Отправка писем
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	               |	ЭлектронноеПисьмоИсходящее.Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
	               |	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
	               |	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ТребуетсяОпределениеПапки,
	               |	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) КАК КоличествоПопыток,
	               |	ПредметыПапкиВзаимодействий.Предмет
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	               |		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	               |			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	               |		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
	               |		ПО (НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка)
	               |ГДЕ
	               |	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	               |	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	               |	И ЭлектронноеПисьмоИсходящее.Автор = &Пользователь
	               |	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	               |	И ВЫБОР
	               |			КОГДА ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить = ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить < &ТекущаяДата
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки > &ТекущаяДата
	               |		КОНЕЦ
	               |	И ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) < 5
	               |ИТОГИ ПО
	               |	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("Пользователь",ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	МассивПисем = Новый Массив;
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
		
		Попытка
			Соединение = Новый ИнтернетПочта;
			ПротоколПодключения = ?(ПустаяСтрока(Профиль.АдресСервераIMAP),ПротоколИнтернетПочты.POP3, ПротоколИнтернетПочты.IMAP);
			Соединение.Подключиться(Профиль);
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			// Если не можем подключиться к учетной записи, то для всех писем по этой учетной записи
			// создаем запись в РС CRM_НеОтправленныеПисьма.
			ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
			Пока ВыборкаПисьма.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаПисьма.Предмет) И ТипЗнч(ВыборкаПисьма.Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
				И НЕ ВыборкаПисьма.Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
					ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ТекстСообщенияОбОшибке);
				КонецЕсли;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке, ВыборкаУчетныеЗаписи.УчетнаяЗапись);
			
			Продолжить;
			
		КонецПопытки;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
			ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьВЖурнале", Истина);
			Попытка
				ПараметрыПисьма = Неопределено;
				ИдентификаторПисьма = CRM_Взаимодействия.CRM_ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение, ПараметрыПисьма);
			Исключение
				// Если не отправилось по причине отсутствия получателей, то кидаем письмо в черновики
				// со статусом черновик.
				Если (ПисьмоОбъект.ПолучателиПисьма.Количество() = 0)
					И (ПисьмоОбъект.ПолучателиКопий.Количество() = 0)
					И (ПисьмоОбъект.ПолучателиСкрытыхКопий.Количество() = 0) Тогда
					ПисьмоОбъект.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
					ПисьмоОбъект.записать();
					ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПисьма.Предмет) И ТипЗнч(ВыборкаПисьма.Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
					И НЕ ВыборкаПисьма.Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
					// Если не удалось отправить Письмо, добавим информацию об этом в РС CRM_НеОтправленныеПисьма.
					ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецЕсли;
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Во время отправки электронного письма %1 произошла ошибка
						|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ВыборкаПисьма.ПредставлениеПисьма,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке, ВыборкаПисьма.Ссылка);
				
				МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Письмо = ВыборкаПисьма.Ссылка;
				МенеджерЗаписи.КоличествоПопыток = ВыборкаПисьма.КоличествоПопыток + 1;
				МенеджерЗаписи.ИнформацияООшибке = ТекстСообщенияОбОшибке;
				МенеджерЗаписи.Записать();
				
				Продолжить;
			КонецПопытки;
			// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
			// если есть, то удалим.
			CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка);
			Если ВыборкаПисьма.УдалятьПослеОтправки Тогда
				ПисьмоОбъект.Удалить();
			Иначе
				Попытка
					
					Если ПротоколПодключения = ПротоколИнтернетПочты.IMAP Тогда
						ИдентификаторСообщенияОтправкаIMAP = CRM_Взаимодействия.CRM_ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение, ПараметрыПисьма, "IMAP");
					КонецЕсли;
				
				Исключение
					
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Во время передачи электронного письма %1 на сервер произошла ошибка
						|%2. 
						|Письмо отправлено, но не сохранено на почтовом сервере.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ВыборкаПисьма.ПредставлениеПисьма,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
					                         УровеньЖурналаРегистрации.Ошибка, , ,
					                         ТекстСообщенияОбОшибке);
					
				КонецПопытки;
				
				ПисьмоОбъект.ИдентификаторСообщения             = ИдентификаторПисьма;
				ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ИдентификаторСообщенияОтправкаIMAP;
				ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.Размер = Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
				ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
				ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ПисьмоОбъект.УчетнаяЗапись, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные));
				Если ВыборкаПисьма.ТребуетсяОпределениеПапки Тогда
					МассивПисем.Добавить(ВыборкаПисьма.Ссылка);
				КонецЕсли;
				Если ЗначениеЗаполнено(ПисьмоОбъект.CRM_ТипОтвета) Тогда
					CRM_ОбщегоНазначенияСервер.ДобавитьЗаписьИнформацииОПисьме(ПисьмоОбъект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
	Взаимодействия.УстановитьПапкиДляМассиваПисем(МассивПисем);
	
	// Отправим уведомления о прочтении.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомленияОПрочтении.Письмо,
	|	ПРЕДСТАВЛЕНИЕ(УведомленияОПрочтении.Письмо) КАК ПредставлениеПисьма,
	|	УведомленияОПрочтении.ДатаПрочтения,
	|	ЭлектронноеПисьмоВходящее.АдресаУведомленияОПрочтении.(
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.Дата,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты,
	|	ЭлектронноеПисьмоВходящее.Тема,
	|	УведомленияОПрочтении.Пользователь
	|ИЗ
	|	РегистрСведений.УведомленияОПрочтении КАК УведомленияОПрочтении
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|			ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ПО УведомленияОПрочтении.Письмо = ЭлектронноеПисьмоВходящее.Ссылка
	|ГДЕ
	|	УведомленияОПрочтении.ТребуетсяОтправка
	|	И УведомленияОПрочтении.Пользователь = &Пользователь
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("Пользователь",ТекущийПользователь);
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
		
		Попытка
			Соединение = Новый ИнтернетПочта;
			Соединение.Подключиться(Профиль);
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,ВыборкаУчетныеЗаписи.УчетнаяЗапись);
			
			Продолжить;
			
		КонецПопытки;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			СоздатьОтправитьУведомлениеОПрочтении(ВыборкаПисьма,Ложь,Соединение);
			
		КонецЦикла;
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПисьма(ДанныеУчетнойЗаписи, ЕстьОшибки, Получено, СтруктураМассивовСозданныхПисем, ТекстСообщенияОбОшибке = "") Экспорт
	
	// Проверим блокировку учетной записи и если она доступна для получения, установим блокировку.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаблокированныеДляПолученияУчетныеЗаписи.ДатаБлокировки
	|ИЗ
	|	РегистрСведений.ЗаблокированныеДляПолученияУчетныеЗаписи КАК ЗаблокированныеДляПолученияУчетныеЗаписи
	|ГДЕ
	|	ЗаблокированныеДляПолученияУчетныеЗаписи.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ДатаБлокировки + 60 * 60 > ТекущаяДатаСеанса() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЗаблокированныеДляПолученияУчетныеЗаписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись  = ДанныеУчетнойЗаписи.Ссылка;
	МенеджерЗаписи.ДатаБлокировки = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();

	// -----------------------------------------------------------------
	// Сформируем почтовый профиль и подключимся к почтовому серверу.
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ДанныеУчетнойЗаписи.Ссылка, Истина);
	
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль, Протокол);
	Исключение
		
		СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);
		
		ЕстьОшибки = Истина;
		//++ VOG Иванов С.А. 05.11.2019 ID заявки: 000000830 
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если Найти(ВРег(ИнформацияОбОшибке.Причина.Описание), ВРег("Код ошибки: 28")) > 0 Тогда
			УчетнаяЗаписьОбъект = ДанныеУчетнойЗаписи.Ссылка.ПолучитьОбъект();
			УчетнаяЗаписьОбъект.ИспользоватьДляПолучения = Ложь;
			УчетнаяЗаписьОбъект.ОбменДанными.Загрузка = Истина;
			Попытка
				УчетнаяЗаписьОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЕСли;
		//-- VOG Иванов С.А. 05.11.2019 ID заявки: 000000830
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ДанныеУчетнойЗаписи.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         ТекстСообщенияОбОшибке);
		
		Возврат;
		
	КонецПопытки;
	
	Если Протокол = ПротоколИнтернетПочты.POP3 Тогда
		ПолучитьПочтуПоПроколуPOP3(ДанныеУчетнойЗаписи, Почта, Получено, СтруктураМассивовСозданныхПисем);
	Иначе
		ПолучитьПочтуПоПроколуIMAP(ДанныеУчетнойЗаписи, Почта, Получено, СтруктураМассивовСозданныхПисем);
		СинхронизироватьПризнакРассмотреноССервером(Почта, ДанныеУчетнойЗаписи, СтруктураМассивовСозданныхПисем.ВсеПолученныеПисьма);
	КонецЕсли;
	
	Почта.Отключиться();
	
	СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);

КонецПроцедуры

Процедура СнятьБлокировкуУчетнойЗаписиДляПолучения(УчетнаяЗапись)

	НаборЗаписей = РегистрыСведений.ЗаблокированныеДляПолученияУчетныеЗаписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ЗаписатьЭлектронноеПисьмо(ДанныеУчетнойЗаписи,
                                  Сообщение,
                                  ОтветственныйЗаОбработкуПисем,
                                  ПомещатьПисьмоВПапкуПисьмаОснования,
                                  ДобавлятьВМассивПисемДляПолученияПапки,
                                  ЭтоИсходящееПисьмо, 
                                  ЭтоЗагрузкаПисьма = Ложь) Экспорт

	// Создадим документ и заполним его реквизиты на основе сообщения.
	Если ЭтоИсходящееПисьмо Тогда
		Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	Иначе
		Письмо = Документы.ЭлектронноеПисьмоВходящее.СоздатьДокумент();
	КонецЕсли;
	
	
	ЗаполнитьДокументЭлектронноеПисьмо(Письмо, Сообщение, ЭтоИсходящееПисьмо);
	Письмо.УчетнаяЗапись = ДанныеУчетнойЗаписи.Ссылка;
	
	// Найдем основание письма, определим предмет и контакты.
	Предмет = Неопределено;
	Папка   = Неопределено;
	
	ЗаполнитьПредметИКонтакты(Письмо,
		ДанныеУчетнойЗаписи.Ссылка,
		Предмет,
		Папка,
		ЭтоИсходящееПисьмо,
		ПомещатьПисьмоВПапкуПисьмаОснования);
	
	// Заполним ответственного
	Письмо.Ответственный = ОтветственныйЗаОбработкуПисем;
	
	// +++ VOG Кулаков П.Л. 16.03.2020 CRM-183
	Если ЭтоИсходящееПисьмо Тогда
		Письмо.Автор = Справочники.Пользователи.НайтиПоНаименованию(Сообщение.ИмяОтправителя);
	КонецЕсли;
	// --- VOG Кулаков П.Л.

// Запишем письмо
	Письмо.Записать();
// +CRM
	// Применим значения фильтра
	Если ЭтоЗагрузкаПисьма и ЗначениеЗаполнено(Письмо.Ссылка) Тогда
		// проверим есть у письма уже папка, которая в том числе могла быть получена из справочника "Правила обработки электронной почты"
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Предмет,
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма,
		|	ПредметыПапкиВзаимодействий.Рассмотрено,
		|	ПредметыПапкиВзаимодействий.РассмотретьПосле
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Взаимодействие = &Взаимодействие";
		
		Запрос.УстановитьПараметр("Взаимодействие",Письмо.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.ПапкаЭлектронногоПисьма) Тогда
				ПапкаУстановлена 	= Истина;
				Папка 				= Выборка.ПапкаЭлектронногоПисьма;
			Иначе
				ПапкаУстановлена = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПапкаУстановлена = Ложь;
	КонецЕсли;
	
	Если НЕ ПапкаУстановлена Тогда
		ВидПапкиНовогоПисьма = ?(ЭтоИсходящееПисьмо, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные, Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие); 
		Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(Письмо.УчетнаяЗапись, ВидПапкиНовогоПисьма);
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Письмо.Ссылка, Папка);
	КонецЕсли;	
// -CRM
	
	// +CRM
	// Создадим напоминание о новом письме
	CRM_ОповещенияСервер.СформироватьНапоминаниеОНовомПисьме(Письмо.Ссылка);
	
	// Снимем установим отметку о прочтение
	Если ТипЗнч(Письмо.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		МенеджерЗаписи = РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Письмо			= Письмо.Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ДобавитьЗаписьИнформацииОПисьме(Письмо.Ссылка);
	
	// -CRM
	
	// Установим папку письма  и предмет.
	// +CRM_УТ
	//Если ДанныеУчетнойЗаписи.ОбработкаПисемВедетсяВДругомПочтовомКлиенте Тогда 
	//	ПризнакРассмотрено = Истина;
	//Иначе
	// -CRM_УТ
		ПризнакРассмотрено = ?(ЭтоИсходящееПисьмо, Истина, Ложь);
	// +CRM_УТ
	//КонецЕсли;
	// -CRM_УТ
	
	СтруктураДляЗаписи = ВзаимодействияКлиентСервер.ПустаяСтруктураРеквизитыВзаимодействия();
	СтруктураДляЗаписи.Папка                   = Папка;
	СтруктураДляЗаписи.Предмет                 = ?(ЗначениеЗаполнено(Предмет),Предмет,Письмо.Ссылка);
	СтруктураДляЗаписи.Рассмотрено             = ПризнакРассмотрено;
	СтруктураДляЗаписи.РассчитыватьРассмотрено = Ложь;
	
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, СтруктураДляЗаписи);
	
	МассивИменВложений              = Новый Массив;
	МассивДублирующихсяИменВложений = Новый Массив;
	
	// Запишем вложения
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Если МассивИменВложений.Найти(Вложение.ИмяФайла) = Неопределено Тогда 
			МассивИменВложений.Добавить(Вложение.ИмяФайла);
		ИначеЕсли МассивДублирующихсяИменВложений.Найти(Вложение.ИмяФайла) = Неопределено Тогда
			МассивДублирующихсяИменВложений.Добавить(Вложение.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДублирующеесяВложение Из МассивДублирующихсяИменВложений Цикл
		ИндексВМассиве = МассивИменВложений.Найти(ДублирующеесяВложение);
		Если ИндексВМассиве <> Неопределено Тогда
			МассивИменВложений.Удалить(ИндексВМассиве);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебныйКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйКлиентСервер");
		
		СоответствиеВложенийИПодписей =
			МодульЭлектроннаяПодписьСлужебныйКлиентСервер.ИменаФайловПодписейИменФайловДанных(
				МассивИменВложений);
	Иначе
		СоответствиеВложенийИПодписей = Новый Соответствие;
		Для Каждого ИмяФайлаВложения Из МассивИменВложений Цикл
			СоответствиеВложенийИПодписей.Вставить(ИмяФайлаВложения, Новый Массив);
		КонецЦикла;
	КонецЕсли;
	
	КоличествоПустыхИменВоВложениях = 0;
	Для каждого ЭлементСоответствия Из СоответствиеВложенийИПодписей Цикл
		
		НайденноеВложение = Неопределено;
		МассивПодписей    = Новый Массив;
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			Если Вложение.ИмяФайла = ЭлементСоответствия.Ключ Тогда
				НайденноеВложение = Вложение;
				Прервать;
			КонецЕсли
		КонецЦикла;
		
		Если НайденноеВложение <> Неопределено И ЭлементСоответствия.Значение.Количество() > 0 Тогда
			Для каждого Вложение Из Сообщение.Вложения Цикл
				Если ЭлементСоответствия.Значение.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
					МассивПодписей.Добавить(Вложение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденноеВложение <> Неопределено Тогда
			// +CRM
			// Проверим расширение вложения электронного письма	
			СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(Вложение.Имя);
			Если СтрокиПути.Количество() > 1 Тогда
				РасширениеФайла = СтрокиПути[СтрокиПути.Количество()-1];
				Если НЕ РаботаСФайламиСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, Ложь) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -CRM
			ЗаписатьВложениеЭлектронногоПисьма(
				Письмо,НайденноеВложение,
				МассивПодписей,
				КоличествоПустыхИменВоВложениях);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДублирующихсяИменВложений.Количество() > 0 Тогда
		Для каждого Вложение Из Сообщение.Вложения Цикл
			Если МассивДублирующихсяИменВложений.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
// +CRM
				// Проверим расширение вложения электронного письма	
				СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(Вложение.Имя);
				Если СтрокиПути.Количество() > 1 Тогда
					РасширениеФайла = СтрокиПути[СтрокиПути.Количество()-1];
					Если НЕ РаботаСФайламиСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, Ложь) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
// -CRM
				ЗаписатьВложениеЭлектронногоПисьма(
					Письмо,Вложение,
					Новый Массив,
					КоличествоПустыхИменВоВложениях);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Письмо.НепринятыеВложения.Количество() > 0 Тогда
		Письмо.Записать();
	КонецЕсли;
	
	// Запишем идентификатор
	Если Не ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		
		ЗаписатьИдентификаторПолученногоПисьма(ДанныеУчетнойЗаписи.Ссылка,
			Письмо.ИдентификаторНаСервере,
			Сообщение.ДатаПолучения);
		
	КонецЕсли;
	
	Если Не ЭтоИсходящееПисьмо И Письмо.УведомитьОПрочтении Тогда
		
		ЗаписатьНеобходимостьОбработкиУведомленияОПрочтении(Письмо.Ссылка);
		
	КонецЕсли;
	
	Если (НЕ ПомещатьПисьмоВПапкуПисьмаОснования) ИЛИ (НЕ ЗначениеЗаполнено(Папка)) Тогда
		ДобавлятьВМассивПисемДляПолученияПапки = Истина;
	КонецЕсли;
	
	Возврат Письмо.Ссылка;
	
КонецФункции


// Записывает вложение электронного письма, копируя вложение другого письма.
Функция ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
	Письмо,
	СсылкаНаФайл,
	УникальныйИдентификаторФормы) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(
		СсылкаНаФайл, УникальныйИдентификаторФормы, Истина);
	
	Возврат ПрисоединенныеФайлы.ДобавитьФайл(
		Письмо,
		ДанныеФайла.Наименование,
		ДанныеФайла.Расширение,
		ДанныеФайла.ДатаМодификацииУниверсальная,
		ДанныеФайла.ДатаМодификацииУниверсальная,
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		"");
	
КонецФункции

Процедура ЗаписатьИдентификаторПолученногоПисьма(УчетнаяЗапись, Идентификатор, ДатаПолучения)

	Запись = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьМенеджерЗаписи();
	Запись.УчетнаяЗапись = УчетнаяЗапись;
	Запись.Идентификатор = Идентификатор;
	Запись.ДатаПолучения = ДатаПолучения;
	Запись.Записать();

КонецПроцедуры

Процедура ЗаписатьНеобходимостьОбработкиУведомленияОПрочтении(Письмо)
	
	Запись = РегистрыСведений.УведомленияОПрочтении.СоздатьМенеджерЗаписи();
	Запись.Письмо = Письмо;
	Запись.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПредметИКонтакты(Письмо,
	                                УчетнаяЗапись,
	                                Предмет,
	                                Папка,
	                                ЭтоИсходящееПисьмо,
	                                ПомещатьПисьмоВПапкуПисьмаОснования)
	
	// -----------------------------------------------------------------
	// Получим идентификаторы писем оснований.
	МассивИдентификаторов = Новый Массив;
	СтрокаИдентификаторы = Письмо.ИдентификаторыОснований;
	Пока Не ПустаяСтрока(СтрокаИдентификаторы) Цикл
		Позиция = СтрНайти(СтрокаИдентификаторы, "<");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
		
		Позиция = СтрНайти(СтрокаИдентификаторы, ">");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТекущийИдентификатор = СокрЛП(Лев(СтрокаИдентификаторы, Позиция-1));
		СтрокаИдентификаторы = СокрЛП(Сред(СтрокаИдентификаторы, Позиция+1));
		
		Если Не ПустаяСтрока(ТекущийИдентификатор) Тогда
			МассивИдентификаторов.Добавить(ТекущийИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Если (МассивИдентификаторов.Найти(Письмо.ИдентификаторОснования) = Неопределено) 
		И (НЕ ПустаяСтрока(Письмо.ИдентификаторОснования)) Тогда
		МассивИдентификаторов.Добавить(Письмо.ИдентификаторОснования);
	КонецЕсли;
	
	Если МассивИдентификаторов.Найти(Письмо.ИдентификаторСообщения) = Неопределено 
		И НЕ ПустаяСтрока(Письмо.ИдентификаторСообщения) Тогда
		МассивИдентификаторов.Добавить(Письмо.ИдентификаторСообщения);
	КонецЕсли;
	
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(МассивИдентификаторов);

	// -----------------------------------------------------------------
	// Получим все основания
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоВходящее.Дата   КАК Дата,
	|	0                                КАК Приоритет
	|ПОМЕСТИТЬ ВсеЭлектронныеПисьма
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ТаблицаИдентификаторов.Идентификатор = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Дата   КАК Дата,
	|	0                                 КАК Приоритет
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ТаблицаИдентификаторов.Идентификатор = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоВходящее.Дата   КАК Дата,
	|	1                                КАК Приоритет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись
	|	И ЭлектронноеПисьмоВходящее.ИдентификаторОснования = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Дата   КАК Дата,
	|	1                                 КАК Приоритет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись
	|	И ЭлектронноеПисьмоИсходящее.ИдентификаторОснования = &ИдентификаторСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеЭлектронныеПисьма.Ссылка,
	|	ВсеЭлектронныеПисьма.Приоритет,
	|	ВсеЭлектронныеПисьма.Дата КАК Дата,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, НЕОПРЕДЕЛЕНО) КАК Предмет,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма, ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)) КАК Папка,
	|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ЛОЖЬ) КАК ПредопределеннаяПапка
	|ИЗ
	|	ВсеЭлектронныеПисьма КАК ВсеЭлектронныеПисьма
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ВсеЭлектронныеПисьма.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО (ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеЭлектронныеПисьма.Приоритет Возр,
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Письмо.ИдентификаторСообщения);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Предмет = Выборка.Предмет;
		Если Выборка.Приоритет = 0 Тогда
			Письмо.ВзаимодействиеОснование = Выборка.Ссылка;
			Если ПомещатьПисьмоВПапкуПисьмаОснования И Не Выборка.ПредопределеннаяПапка Тогда
				Папка = Выборка.Папка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Предмет = Неопределено Тогда
		Предмет = Письмо.Ссылка;
	КонецЕсли;

	// -----------------------------------------------------------------
	// Получим проставленные контакты в предмете.
// +CRM
	СоответствиеКонтактов = СоответствиеКонтактовВПисьме(Письмо.ВзаимодействиеОснование, Письмо.УчетнаяЗапись);
	//СоответствиеКонтактов = СоответствиеКонтактовВПисьме(Письмо.ВзаимодействиеОснование);
// -CRM

	// -----------------------------------------------------------------
	// Проставим контакты на основании предмета.
	НеопределенныеАдреса = Новый Массив;
	УстановитьКонтактыВПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса, ЭтоИсходящееПисьмо);

	// -----------------------------------------------------------------
	// Если есть неопределенные адреса, то поищем их по контактной информации.
// +CRM
	СоответствиеКонтактов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(НеопределенныеАдреса,Письмо.УчетнаяЗапись.АдресЭлектроннойПочты,Письмо.УчетнаяЗапись);
	//СоответствиеКонтактов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(НеопределенныеАдреса);
// -CRM
	Если СоответствиеКонтактов.Количество() > 0 Тогда
		УстановитьКонтактыВПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса, ЭтоИсходящееПисьмо);
	КонецЕсли;
	
	Письмо.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
	Письмо.СписокПолучателейКопий  = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий, Ложь);
	
	Если ТипЗнч(Письмо) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		Письмо.СписокПолучателейКопий  = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьТаблицуСИдентификаторами(Идентификаторы)
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(100)));
	Для Каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Возврат ТаблицаИдентификаторов;
	
КонецФункции

// +CRM
//Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов)
Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов, АдресУЗ, УчетнаяЗапись)
// -CRM
	СоответствиеКонтактов = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка,
	|	Контакты.АдресЭП КАК АдресЭП
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	// +CRM
	|,
	|		2 КАК Флаг
	// -CRM
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	// +CRM
	// +++ VOG Кулаков П.Л. 19.03.2020 CRM-183
	//|		И НЕ КонтактнаяИнформация.АдресЭП = &АдресУЗ
	// --- VOG Кулаков П.Л.
	// -CRM
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.МассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" ИЛИ ЭлементМассиваОписания.Имя = "ФизическиеЛица" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		// +CRM
		|";
		Если ЭлементМассиваОписания.Имя = "КонтактныеЛицаПартнеров" Тогда
			Запрос.Текст = Запрос.Текст + "
			|,
			|		0 КАК Флаг";
		ИначеЕсли ЭлементМассиваОписания.Имя = "Партнеры" Тогда
			Запрос.Текст = Запрос.Текст + "
			|,
			|		1 КАК Флаг";
		ИначеЕсли ЭлементМассиваОписания.Имя = "CRM_ПотенциальныеКлиенты" Тогда
			Запрос.Текст = Запрос.Текст + "
			|,
			|		-1 КАК Флаг";
		// { VOG RMV 2019-03-14
		// если там вогТорговыеТочки или вогЮридическиеЛица, то считаем, что это тот же приоритет, что и у Партнеры
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|,
			|		1 КАК Флаг";
		// } VOG RMV 2019-03-14		
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		// -CRM
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;	
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты
	// +CRM
	|УПОРЯДОЧИТЬ ПО
	|	Контакты.Флаг
	// -CRM
	|ИТОГИ ПО
	|	АдресЭП";
	// +CRM
	Запрос.УстановитьПараметр("АдресУЗ", АдресУЗ);
	// -CRM
	Запрос.УстановитьПараметр("МассивАдресов", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если (ВыборкаПоСсылкам.Следующий()) Тогда
			// +CRM
			// Проверим, если включено использование уровне доступа, контактом является партнер или КЛ партнера
			// и пользователям учетной записи доступен патрер, тогда добавим в соответствие.
//START Кайдашов 10/07/19			
			//Если ТипЗнч(ВыборкаПоСсылкам.Ссылка) = Тип("СправочникСсылка.Партнеры")
			//ИЛИ ТипЗнч(ВыборкаПоСсылкам.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			//	Если НЕ CRM_УправлениеЭлектроннойПочтой.КонтактДоступен(?(ТипЗнч(ВыборкаПоСсылкам.Ссылка) = Тип("СправочникСсылка.Партнеры"),ВыборкаПоСсылкам.Ссылка,ВыборкаПоСсылкам.Ссылка.Владелец),УчетнаяЗапись) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			// -CRM
			СоответствиеКонтактов.Вставить(ВРег(Выборка.АдресЭП), ВыборкаПоСсылкам.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;

КонецФункции

Процедура ОбработатьПоляКонтактИАдрес(Адрес, Контакт, СоответствиеКонтактов, НеопределенныеАдреса)
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйКонтакт = СоответствиеКонтактов.Получить(ВРег(Адрес));
	Если НайденныйКонтакт <> Неопределено И ТипЗнч(НайденныйКонтакт) <> Тип("Строка") Тогда
		Контакт = НайденныйКонтакт;
		Возврат;
	КонецЕсли;
	
	Если НеопределенныеАдреса.Найти(ВРег(Адрес)) = Неопределено Тогда
		НеопределенныеАдреса.Добавить(ВРег(Адрес));
	КонецЕсли;
	
КонецПроцедуры

// +CRM
//Функция ПолучитьСоответствиеКонтактовВПисьме(Письмо)
Функция ПолучитьСоответствиеКонтактовВПисьме(Письмо,УчетнаяЗапись)
// -CRM
	СоответствиеКонтактов = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Письмо) Тогда
		Возврат СоответствиеКонтактов;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адреса.Адрес,
	|	Адреса.Контакт
	|ИЗ
	|	(" + ?(ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"), "", "ВЫБРАТЬ
	|		ПОДСТРОКА(ЭлектронноеПисьмоВходящее.ОтправительАдрес, 1, 100) КАК Адрес,
	|		ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|	ГДЕ
	|		ЭлектронноеПисьмоВходящее.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	") + "ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо) КАК Адреса
	|ГДЕ
	|	(НЕ Адреса.Контакт ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контакт) <> Тип("Строка") Тогда
			// +CRM
			// Проверим, если включено использование уровне доступа, контактом является партнер или КЛ партнера
			// и пользователям учетной записи доступен патрер, тогда добавим в соответствие.
//START Кайдашов 10/07/19			
			//Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Партнеры")
			//ИЛИ ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			//	Если НЕ CRM_УправлениеЭлектроннойПочтой.КонтактДоступен(?(ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Партнеры"),Выборка.Контакт,Выборка.Контакт.Владелец),УчетнаяЗапись) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			//СоответствиеКонтактов.Вставить(Выборка.Адрес, Выборка.Контакт);
			СоответствиеКонтактов.Вставить(ВРег(Выборка.Адрес), Выборка.Контакт);
			// -CRM
			
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;
	
КонецФункции

Процедура УстановитьКонтактыВоВходящемПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса)

	ОбработатьПоляКонтактИАдрес(Письмо.ОтправительАдрес, Письмо.ОтправительКонтакт, СоответствиеКонтактов, НеопределенныеАдреса);
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиПисьма Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиКопий Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиОтвета Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;

КонецПроцедуры


// Записывает вложение электронного письма, расположенное во временном хранилище в файл.
Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
	Письмо,
	АдресВоВременномХранилище,
	ИмяФайла,
	Размер,
	// +CRM
	//КоличествоПустыхИменВоВложениях = 0) Экспорт
	КоличествоПустыхИменВоВложениях = 0,
	ИдентификаторПочтовогоВложения = Неопределено) Экспорт
	// -CRM
	
	ИмяФайлаДляРазбора = ИмяФайла;
	РасширениеБезТочки = ВзаимодействияКлиентСервер.РасширениеФайла(ИмяФайлаДляРазбора);
	// +CRM
	//ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора, "_");
	ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ИмяБезРасширения, "_");
	// -CRM
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		
		ИмяФайлаБезРасширения =
			НСтр("ru = 'Вложение без имени'") + ?(КоличествоПустыхИменВоВложениях = 0, ""," " + Строка(КоличествоПустыхИменВоВложениях + 1));
		КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
		
	Иначе
		ИмяБезРасширения =
			?(РасширениеБезТочки = "",
			ИмяБезРасширения,
			Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	КонецЕсли;
	// +CRM
	//Если наименование файла больше 256 символов, то не запишется и упадет.
	// в этом случае имя без расширения меняем.
	Если СтрДлина(ИмяФайлаДляРазбора)>256 Тогда
		
		ИмяБезРасширения = СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","_");
		
	КонецЕсли;
	ВремяИзменения = ТекущаяДатаСеанса();
	// -CRM
	
	Возврат ПрисоединенныеФайлы.ДобавитьФайл(
		Письмо,
		ИмяБезРасширения,
		РасширениеБезТочки,
		,
		,
		АдресВоВременномХранилище,
		"");
	
КонецФункции

//// Выполняет получение электронной почты по доступным для пользователя учетным записям.
////
//// Параметры:
////  Получено               - Число - в данный параметр будет возвращено количество полученных писем.
////  ДоступноУчетныхЗаписей - Число - в данный параметр будет возвращено количество доступных пользователю учетных
////                                   записей.
////  ЕстьОшибки             - Булево - признак наличия ошибок при получении писем.
////
//// +CRM
////Процедура ЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки) Экспорт
//Процедура ЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки, УчетнаяЗаписьОтбор = Неопределено) Экспорт
//	
//	Запрос = Новый Запрос;
//	ТекстЗапроса =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ЛОЖЬ КАК ПомещатьПисьмоВПапкуПисьмаОснования,
//	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись КАК Ссылка,
//	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись.Наименование,
//	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере КАК ОставлятьКопии,
//	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере КАК ОставлятьДней
//	|ИЗ
//	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
//	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
//	|	ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись
//	|ГДЕ
//	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись.ИспользоватьДляПолучения
//	|	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь";
//	
//	Если НЕ УчетнаяЗаписьОтбор = Неопределено Тогда
//		ТекстЗапроса = ТекстЗапроса + "
//		|	И CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗаписьОтбор";
//	КонецЕсли;
//	
//	Запрос.Текст = ТекстЗапроса;
//	Запрос.УстановитьПараметр("УчетнаяЗаписьОтбор", УчетнаяЗаписьОтбор);
//	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
//	Выборка = Запрос.Выполнить().Выбрать();

//	ПолученоПисем = 0;
//	ДоступноУчетныхЗаписей = Выборка.Количество();
//	Если ДоступноУчетныхЗаписей = 0 Тогда
//		Если УчетнаяЗаписьОтбор = Неопределено Тогда
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет доступных для получения почты учетных записей'"));
//		Иначе
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Учетная запись почты: "+ УчетнаяЗаписьОтбор +" не используется для получения.'"));
//		КонецЕсли;
//		Возврат;
//	КонецЕсли;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Получено = 0;
//		МассивПисем = Новый Массив;
//		
//		ПолучитьПисьма(Выборка, ЕстьОшибки, Получено, МассивПисем);
//		ПолученоПисем = ПолученоПисем + Получено;
//		Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(МассивПисем);
//		CRM_Взаимодействия.CRM_УстановитьПапкиДляМассиваПисем(МассивПисем);
//		Взаимодействия.РассчитатьРассмотреноПоПредметам(МассивПисем);
//		Взаимодействия.РассчитатьРассмотреноПоКонтактам(МассивПисем);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

// Выполняет получение электронной почты по доступным для пользователя учетным записям.
//
// Параметры:
//  Получено               - Число - в данный параметр будет возвращено количество полученных писем.
//  ДоступноУчетныхЗаписей - Число - в данный параметр будет возвращено количество доступных пользователю учетных
//                                   записей.
//  ЕстьОшибки             - Булево - признак наличия ошибок при получении писем.
//
Процедура ЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки, СписокПолученныхПисем = Неопределено, УчетнаяЗаписьОтбор = Неопределено) Экспорт
// +CRM
//Процедура ЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, ЕстьОшибки) Экспорт
// -CRM
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	// +CRM
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                                                                            КАК Ссылка,
	//|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                                                                             КАК АдресЭлектроннойПочты,
	//|	УчетныеЗаписиЭлектроннойПочты.Наименование                                                                                      КАК Наименование,
	//|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ)                                     КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	//|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОтветственныйЗаОбработкуПисем,
	//|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере                                                                  КАК ОставлятьКопии,
	//|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере                                                                  КАК ОставлятьДней,
	//|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты                                                                             КАК ПротоколВходящейПочты,
	//|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя                                                                                   КАК ИмяПользователя,
	//|	ЕСТЬNULL(ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1))                                 КАК ДатаЗагрузкиПисем,
	//|	ВЫБОР
	//|		КОГДА УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты = ""IMAP""
	//|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОбработкаПисемВыполняетсяВДругомПочтовомКлиенте, ЛОЖЬ)
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ                                                                                                                           КАК ОбработкаПисемВедетсяВДругомПочтовомКлиенте
	//|ИЗ
	//|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	//|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
	//|		ПО (ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	//|ГДЕ
	//|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	//|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)";
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                                                                            КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                                                                             КАК АдресЭлектроннойПочты,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование                                                                                      КАК Наименование,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ)                                     КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ОтветственныйЗаОбработкуПисем,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере                                                                  КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере                                                                  КАК ОставлятьДней,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты                                                                             КАК ПротоколВходящейПочты,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя                                                                                   КАК ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь				                                                                        КАК Пользователь,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты = ""IMAP""
	|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОбработкаПисемВыполняетсяВДругомПочтовомКлиенте, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                                                                           КАК ОбработкаПисемВедетсяВДругомПочтовомКлиенте
	|ПОМЕСТИТЬ УчетныеЗаписиПользователя
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО (УчетныеЗаписиЭлектроннойПочты.Ссылка = CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись)
	|ГДЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись.ИспользоватьДляПолучения
	|	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)";
	Если НЕ УчетнаяЗаписьОтбор = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗаписьОтбор";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УчетнаяЗаписьОтбор", УчетнаяЗаписьОтбор);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Результат = Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                                            КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                                             КАК АдресЭлектроннойПочты,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование                                                      КАК Наименование,
	|	УчетныеЗаписиЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования                               КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	УчетныеЗаписиЭлектроннойПочты.ОтветственныйЗаОбработкуПисем                                     КАК ОтветственныйЗаОбработкуПисем,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопии                                                    КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьДней                                                     КАК ОставлятьДней,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты                                             КАК ПротоколВходящейПочты,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя                                                   КАК ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.ОбработкаПисемВедетсяВДругомПочтовомКлиенте                       КАК ОбработкаПисемВедетсяВДругомПочтовомКлиенте,
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ИсточникЛидов								                    КАК CRM_ИсточникЛидов,
	|	ЕСТЬNULL(ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) КАК ДатаЗагрузкиПисем
	|ИЗ
	|	УчетныеЗаписиПользователя КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
	|		ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись";
	
	// -CRM
	
	Выборка = Запрос.Выполнить().Выбрать();

	ПолученоПисем = 0;
	ДоступноУчетныхЗаписей = Выборка.Количество();
	Если ДоступноУчетныхЗаписей = 0 Тогда
		// +CRM
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет доступных для получения почты учетных записей'"));
		Если УчетнаяЗаписьОтбор = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет доступных для получения почты учетных записей'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Учетная запись почты: "+ УчетнаяЗаписьОтбор +" не используется для получения.'"));
		КонецЕСли;
		// -CRM
		Возврат;
	КонецЕсли;
	
	// +CRM
	//УстановитьПривилегированныйРежим(Истина); // перенесено выше!
	СписокПолученныхПисем = Новый СписокЗначений;
	// -CRM
	
	Пока Выборка.Следующий() Цикл
		
		Получено = 0;
		СтруктураМассивовПисем = СтруктураМассиваПисем();
		
		ПолучитьПисьма(Выборка, ЕстьОшибки, Получено, СтруктураМассивовПисем);
		ПолученоПисем = ПолученоПисем + Получено;
		ОпределитьЗагруженныеРанееПодчиненныеПисьма(Выборка.Ссылка, СтруктураМассивовПисем.ВсеПолученныеПисьма);
		Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(СтруктураМассивовПисем.ВсеПолученныеПисьма);
		Взаимодействия.УстановитьПапкиДляМассиваПисем(СтруктураМассивовПисем.ПисьмаДляОпределенияПапок);
		Взаимодействия.РассчитатьРассмотреноПоПредметам(СтруктураМассивовПисем.ВсеПолученныеПисьма);
		Взаимодействия.РассчитатьРассмотреноПоКонтактам(СтруктураМассивовПисем.ВсеПолученныеПисьма);
		
		// +CRM
		
		МассивПисем = СтруктураМассивовПисем.ВсеПолученныеПисьма;
		
		Для Каждого СтрокаМассива ИЗ МассивПисем Цикл
			СписокПолученныхПисем.Добавить(СтрокаМассива);
		КонецЦикла;
		// -CRM
		
	КонецЦикла;
	
КонецПроцедуры



// Получает вложения электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка - документ электронное письмо для которого необходимо получить вложения.
//
// Возвращаемое значение:
//  ТаблицаЗначений   - таблица значений, содержащая информацию о вложениях.
//
Функция ПолучитьВложенияЭлектронногоПисьма(Письмо,ФормироватьРазмерПредставление = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
		ВладелецФайлов       = Письмо;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ФормироватьРазмерПредставление Тогда
		ТекстРазмерПредставление = ",
		|ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление";
	Иначе
		ТекстРазмерПредставление = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	// +CRM
	//|	Файлы.ИДФайлаЭлектронногоПисьма,
	|	";
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		ИЛИ ТипЗнч(Письмо) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") 
		ИЛИ ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_ШаблоныРассылки") Тогда
		ТекстЗапроса = Строка(ТекстЗапроса) + "
		|	Файлы.ИДФайлаЭлектронногоПисьма,";
	Иначе
		ТекстЗапроса = Строка(ТекстЗапроса) + "
		|	"""" КАК ИДФайлаЭлектронногоПисьма,";
	КонецЕсли;
	ТекстЗапроса = Строка(ТекстЗапроса) + "
	// -CRM
	|	Файлы.ПодписанЭП,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = &ПустаяСтрока
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла" + ТекстРазмерПредставление + "
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо
	|	И НЕ Файлы.ПометкаУдаления";
	// +CRM
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	// -CRM
	Запрос.УстановитьПараметр("Письмо", ВладелецФайлов);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	ТаблицаКВозврату =  Запрос.Выполнить().Выгрузить();
	
	Если ФормироватьРазмерПредставление Тогда
		Для каждого СтрокаТаблицы Из ТаблицаКВозврату Цикл
		
			СтрокаТаблицы.РазмерПредставление = 
				ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер);
		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаКВозврату;
	
КонецФункции

// Получает имя объекта метаданных присоединенных файлов электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка - письмо для которого определяется имя.
//
// Возвращаемое значение:
//  Строка,Неопределено  - имя объекта метаданных присоединенных файлов электронного письма.
 Функция ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо) Экспорт

	 Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоВходящееПрисоединенныеФайлы";
		
	// +CRM
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		
		Возврат "CRM_РассылкаЭлектронныхПисемПрисоединенныеФайлы";

	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
		
		Возврат "УдалитьCRM_СобытиеПрисоединенныеФайлы";

	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
		
		Возврат "МаркетинговыеМероприятияПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_ШаблоныРассылки") Тогда
		
		Возврат "CRM_ШаблоныРассылкиПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_Подписи") Тогда
		
		Возврат "CRM_ПодписиПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_Решения") Тогда
		
		Возврат "CRM_РешенияПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		
		Возврат "CRM_ТелемаркетингПрисоединенныеФайлы";
		
	// -CRM
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции


// Получает и добавляет в список значений доступные пользователю учетные записи электронной почты.
//
// Параметры:
//  СписокВыбора  - СписокЗначений - в него будут добавлены доступные пользователю записи электронной почты.
//
// +CRM
//Процедура ПолучитьДоступныеУчетныеЗаписиДляОтправки(СписокВыбора,ТаблицаДанныхУчетнойЗаписи) Экспорт
Процедура ПолучитьДоступныеУчетныеЗаписиДляОтправки(СписокВыбора, ТаблицаДанныхУчетнойЗаписи = Неопределено, ТекущийПользователь = Неопределено) Экспорт
// -CRM
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя КАК ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь
	|	И CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись.ИспользоватьДляОтправки
	|	И CRM_УчетныеЗаписиЭлектроннойПочты.Запись
	|	И НЕ CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись.ПометкаУдаления";
	Запрос.УстановитьПараметр("Пользователь", ?(ТекущийПользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, ТекущийПользователь));
	// -CRM
	Запрос.УстановитьПараметр("ТекущийПользователь",?(ТекущийПользователь = Неопределено, Пользователи.ТекущийПользователь(), ТекущийПользователь));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.УчетнаяЗапись, 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Выборка.ИмяПользователя,
			                                                         Выборка.АдресЭлектроннойПочты,
			                                                         ""));
	КонецЦикла;
	
	// +CRM
	//ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаДанныхУчетнойЗаписи);
	Если НЕ (ТаблицаДанныхУчетнойЗаписи = Неопределено) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаДанныхУчетнойЗаписи);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

Функция ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, УчетнаяЗапись) Экспорт
// +CRM
	// Получим список сообщений которые не были раньше получены.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись",          УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись ЕСТЬ NULL ";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция ПолучитьИдентификаторыПисемДляУдаленияНаСервере(Идентификаторы, УчетнаяЗапись, ДатаПоКоторуюУдалять) Экспорт
// -CRM
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаПоКоторуюУдалять);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.ДатаПолучения <= &ДатаПолучения";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

// Получает ответственного за обработку электронных писем по умолчанию.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись, для которой определяется
//                                                                   ответственный.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи   - ответственный за обработку электронных писем.
//
// +CRM
//Функция ПолучитьОтветственногоЗаОбработкуПисьмаПоУмолчанию(УчетнаяЗапись)
Функция ПолучитьОтветственногоЗаОбработкуПисьмаПоУмолчанию(УчетнаяЗапись) Экспорт
// -CRM
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|ГДЕ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗапись);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	Возврат Выборка.ОтветственныйЗаОбработкуПисем;
	
КонецФункции

Функция ПолучитьВажностьЭлектронногоПисьма(Важность)
	
	Если (Важность = ВажностьИнтернетПочтовогоСообщения.Высокая)
		ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Наивысшая) Тогда
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Высокая;

	ИначеЕсли (Важность = ВажностьИнтернетПочтовогоСообщения.Наименьшая)
		ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Низкая) Тогда
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Низкая;

	Иначе
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьТекстПисьма(Письмо, Сообщение)
	
	ТекстHTML = "";
	ТекстПростой = "";
	ТекстРазмеченный = "";

	Для Каждого ТекстПочтовогоСообщения Из Сообщение.Тексты Цикл
		Если ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			
			ТекстHTML = ТекстHTML + ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			
			ТекстHTML = CRM_УправлениеЭлектроннойПочтой.УдалитьНекорректныеКартинкиИзТекстаHTML(ТекстHTML);
			
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			
			ТекстПростой = ТекстПростой + ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст Тогда
			ТекстРазмеченный = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстHTML <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Письмо.ТекстHTML = ТекстHTML;
		Письмо.Текст = ?(ТекстПростой <> "", ТекстПростой, ПолучитьПростойТекстИзHTML(ТекстHTML));
		
	ИначеЕсли ТекстРазмеченный <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст;
		Письмо.Текст = ТекстРазмеченный;
		
	Иначе
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		Письмо.Текст = ТекстПростой;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьИнтернетПочтовыеАдреса(ТабличнаяЧасть, Адреса)
	
	Для Каждого Адрес Из Адреса Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Адрес         = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Адрес.Адрес, "");
		НоваяСтрока.Представление = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Адрес.ОтображаемоеИмя, "");
	КонецЦикла;
	
КонецПроцедуры

// +CRM
//Процедура УдалитьИдентификаторыРанееПолученныхПисем(УчетнаяЗапись, ИдентификаторыНаСервере, ИдентификаторыУдалять)
Процедура УдалитьИдентификаторыРанееПолученныхПисем(УчетнаяЗапись, ИдентификаторыНаСервере, ИдентификаторыУдалять) Экспорт
// -CRM
	// Получим список идентификаторов которые не нужно удалять.
	ИдентификаторыКУдалению = Новый Соответствие;
	Для Каждого Элемент Из ИдентификаторыУдалять Цикл
		ИдентификаторыКУдалению.Вставить(Элемент, Истина);
	КонецЦикла;
	
	ИдентификаторыОставляем = Новый Массив;
	Для Каждого Элемент Из ИдентификаторыНаСервере Цикл
		Если ИдентификаторыКУдалению.Получить(Элемент) = Неопределено Тогда
			ИдентификаторыОставляем.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	// Получим идентификаторы которые нужно удалить, те которые есть в регистре, но не нужно оставлять.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(ИдентификаторыОставляем);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ГДЕ
	|	ТаблицаИдентификаторов.Идентификатор ЕСТЬ NULL
	|	 И ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";

	МассивКУдалению = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	// Удалим все ненужные идентификаторы.
	Для Каждого Идентификатор Из МассивКУдалению Цикл
		Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		Набор.Отбор.Идентификатор.Установить(Идентификатор);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры


Процедура УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись) Экспорт
// -CRM
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьПростойТекстИзHTML(ТекстHTML)
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	Возврат ДокументHTML.Тело.ТекстовоеСодержимое;
	
	Возврат "";
	
КонецФункции

Функция ИзПисьмаПолучитьИдентификаторОснования(Сообщение)

	СтрокаИдентификаторы = СокрЛП(Сообщение.ПолучитьПолеЗаголовка("In-Reply-To", "Строка"));
	
	Позиция = СтрНайти(СтрокаИдентификаторы, "<");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
	КонецЕсли;
	
	Позиция = СтрНайти(СтрокаИдентификаторы, ">");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Лев(СтрокаИдентификаторы, Позиция-1);
	КонецЕсли;

	Возврат СтрокаИдентификаторы;

КонецФункции

// Устанавливает признак отправки уведомления о прочтении электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее - письмо для которого устанавливается признак.
//  Отправлять  - Булево - если Истина, то признак будет установлен, снят если Ложь.
//
Процедура УстановитьПризнакОтправкиУведомления(Письмо, Отправлять) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Письмо, Отправлять);
	
КонецПроцедуры

Процедура УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, УстановитьПометку = Ложь) Экспорт
	
	Для Каждого Письмо Из ВыделенныеПисьма Цикл
		
		Если ТипЗнч(Письмо)<>Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Продолжить;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Письмо			= Письмо;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ УстановитьПометку Тогда
			
			МенеджерЗаписи.Письмо			= Письмо;
			МенеджерЗаписи.Записать();
			
		ИначеЕсли МенеджерЗаписи.Выбран() И УстановитьПометку Тогда
			Попытка
				МенеджерЗаписи.Удалить();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	


#КонецОбласти

#Область ЭкспортныеПроцедурыИФункцииИзБСП

Функция СтруктураМассиваПисем() Экспорт
	
	СтруктураМассивовПисем = Новый Структура;
	СтруктураМассивовПисем.Вставить("ВсеПолученныеПисьма", Новый Массив);
	СтруктураМассивовПисем.Вставить("ПисьмаДляОпределенияПапок", Новый Массив);
	
	Возврат СтруктураМассивовПисем;
	
КонецФункции

Процедура ОпределитьЗагруженныеРанееПодчиненныеПисьма(УчетнаяЗапись, МассивЗагруженныхПисем) Экспорт
	
	Если МассивЗагруженныхПисем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДобавляемыхКОбработкеПисем = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|ПОМЕСТИТЬ ПолученныеПисьмаИдентификаторы
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка В(&МассивПисем)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка В(&МассивПисем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка                                      КАК Письмо,
	|	ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование                     КАК ТекущееОснование,
	|	ПолученныеПисьмаИдентификаторы.Ссылка                                  КАК СсылкаНаОснование,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействийОснования.Предмет, НЕОПРЕДЕЛЕНО)   КАК ПредметПисьмаОснования,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействийПодчиненные.Предмет, НЕОПРЕДЕЛЕНО) КАК ПредметПисьмаПодчиненное
	|ИЗ
	|	ПолученныеПисьмаИдентификаторы КАК ПолученныеПисьмаИдентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ПолученныеПисьмаИдентификаторы.ИдентификаторСообщения = ЭлектронноеПисьмоИсходящее.ИдентификаторОснования
	|			И (ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование <> ПолученныеПисьмаИдентификаторы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействийПодчиненные
	|		ПО (ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействийПодчиненные.Взаимодействие)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействийОснования
	|		ПО ПолученныеПисьмаИдентификаторы.Ссылка = ПредметыПапкиВзаимодействийОснования.Взаимодействие
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ВзаимодействиеОснование,
	|	ПолученныеПисьмаИдентификаторы.Ссылка,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействийОснования.Предмет, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействийПодчиненные.Предмет, НЕОПРЕДЕЛЕНО) 
	|ИЗ
	|	ПолученныеПисьмаИдентификаторы КАК ПолученныеПисьмаИдентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ПолученныеПисьмаИдентификаторы.ИдентификаторСообщения = ЭлектронноеПисьмоВходящее.ИдентификаторОснования
	|			И (ЭлектронноеПисьмоВходящее.ВзаимодействиеОснование <> ПолученныеПисьмаИдентификаторы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействийПодчиненные
	|		ПО (ЭлектронноеПисьмоВходящее.Ссылка = ПредметыПапкиВзаимодействийПодчиненные.Взаимодействие)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействийОснования
	|		ПО ПолученныеПисьмаИдентификаторы.Ссылка = ПредметыПапкиВзаимодействийОснования.Взаимодействие
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("МассивПисем", МассивЗагруженныхПисем);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект = Выборка.Письмо.ПолучитьОбъект();
		ПисьмоОбъект.ВзаимодействиеОснование = Выборка.СсылкаНаОснование;
		ПисьмоОбъект.Записать();
		
		Если Выборка.ПредметПисьмаОснования <> Выборка.ПредметПисьмаПодчиненное Тогда
			
			Если Выборка.ПредметПисьмаПодчиненное = Выборка.Письмо Тогда
				
				Взаимодействия.УстановитьПредмет(Выборка.Письмо, Выборка.ПредметПисьмаОснования, Ложь);
				
			ИначеЕсли НЕ ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Выборка.ПредметПисьмаПодчиненное) Тогда
				
				Если ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Выборка.ПредметПисьмаОснования) Тогда
					
					Взаимодействия.УстановитьПредмет(Выборка.Письмо, Выборка.ПредметПисьмаОснования, Ложь);
					МассивДобавляемыхКОбработкеПисем.Добавить(Выборка.Письмо);
					
				Иначе 
					
					Взаимодействия.УстановитьПредмет(Выборка.СсылкаНаОснование, Выборка.ПредметПисьмаПодчиненное, Ложь);
					
				КонецЕсли;
				
			Иначе
				
				Если ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Выборка.ПредметПисьмаОснования) Тогда
					
					Взаимодействия.УстановитьПредмет(Выборка.Письмо, Выборка.ПредметПисьмаОснования, Ложь);
					МассивДобавляемыхКОбработкеПисем.Добавить(Выборка.Письмо);
					
				Иначе 
					
					Взаимодействия.УстановитьПредмет(Выборка.СсылкаНаОснование, Выборка.ПредметПисьмаПодчиненное, Ложь);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	 
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗагруженныхПисем, МассивДобавляемыхКОбработкеПисем, Истина);
	
КонецПроцедуры

Процедура ПолучитьПисьмаПоМассивуИдентификаторов(Почта,
	                                            ДанныеУчетнойЗаписи,
	                                            ИдЗагружать, 
	                                            Получено,
	                                            СтруктураМассивовСозданныхПисем,
	                                            ВсеИдентификаторы = Неопределено)
	
	// +GOOGLE
	Если Константы.CRM_СинхронизироватьКалендарьСКалендаремGoogle.Получить() Тогда
		УчетнаяЗаписьПолученияОповещенийGAPI = Константы.CRM_УчетнаяЗаписьПолученияОповещенийGAPI.Получить();
		Если	ЗначениеЗаполнено(УчетнаяЗаписьПолученияОповещенийGAPI)
			И	ЗначениеЗаполнено(ДанныеУчетнойЗаписи)
			И	ВРег(УчетнаяЗаписьПолученияОповещенийGAPI.АдресЭлектроннойПочты)= ВРег(ДанныеУчетнойЗаписи.АдресЭлектроннойПочты)
			И	ВРег(УчетнаяЗаписьПолученияОповещенийGAPI.Пользователь)= ВРег(ДанныеУчетнойЗаписи.Пользователь) Тогда
			//
			УчетнаяЗаписьИспользуетсяДляПолученияОповещенийGAPI = Истина;
		Иначе
			УчетнаяЗаписьИспользуетсяДляПолученияОповещенийGAPI = Ложь;
		КонецЕсли;
	Иначе
		УчетнаяЗаписьИспользуетсяДляПолученияОповещенийGAPI = Ложь;
	КонецЕсли;
	// -GOOGLE
												
	Получено = 0;
	
	Если ИдЗагружать.Количество() <> 0 Тогда
		
		// +CRM
		// +CRM_УТ
		ОтветственныйЗаОбработкуПисем = ДанныеУчетнойЗаписи.ОтветственныйЗаОбработкуПисем;
		//ОтветственныйЗаОбработкуПисем = ДанныеУчетнойЗаписи.Ссылка.УдалитьОтветственныйЗаОбработкуПисем;
		// -CRM_УТ
		КоличествоНеАктуальныхСообщений = 0;
		Если НЕ ЗначениеЗаполнено(ОтветственныйЗаОбработкуПисем) Тогда
			ОтветственныйЗаОбработкуПисем = Пользователи.ТекущийПользователь();
		КонецЕсли;
		МассивСозданныхПисемДляОповещения = Новый Массив;
		// -CRM
		КоличествоОшибокПриЗаписи = 0;
		// +GOOGLE
		ИдентификаторыПропущенных = Новый Массив();
		// -GOOGLE
		Пока ИдЗагружать.Количество() > (Получено + КоличествоОшибокПриЗаписи + КоличествоНеАктуальныхСообщений) Цикл
			
			КоличествоВПорции = 0;
			МассивИдентификаторовПорцииДляЗагрузки = Новый Массив;
			
			Для Инд = (Получено + КоличествоОшибокПриЗаписи) По ИдЗагружать.Количество() - 1 Цикл
				
				МассивИдентификаторовПорцииДляЗагрузки.Добавить(ИдЗагружать.Получить(Инд));
				КоличествоВПорции = КоличествоВПорции + 1;
				
				Если КоличествоВПорции = 10 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Получим нужные сообщения
			Сообщения = Почта.Выбрать(Ложь, 
			                          МассивИдентификаторовПорцииДляЗагрузки,
			                          ?(ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP",Ложь, Истина));
									  
			КоличествоНеАктуальныхСообщений = КоличествоНеАктуальныхСообщений + (КоличествоВПорции - Сообщения.Количество());
			
			// Запишем их
			Для Каждого Сообщение Из Сообщения Цикл
			// +GOOGLE
				Если УчетнаяЗаписьИспользуетсяДляПолученияОповещенийGAPI Тогда
					Если Сообщение.ИмяОтправителя = "noreply@pushservice.rarus.ru" Тогда
						Попытка
							ИдентификаторыПропущенных.Добавить(Сообщение.Идентификатор[0]);
							Продолжить;
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			// -GOOGLE
				ДобавлятьВМассивПисемДляПолученияПапки = Ложь;
				
				НачатьТранзакцию();
				
				Попытка
					
					ЭтоИсходящееПисьмо =  ПочтовыеАдресаРавны(ДанныеУчетнойЗаписи.АдресЭлектроннойПочты,
					                                          АдресОтправителяИнтернетПочтовогоСообщения(Сообщение.Отправитель));
					
					СозданноеПисьмо = ЗаписатьЭлектронноеПисьмо(ДанныеУчетнойЗаписи,
					                                           Сообщение,
					                                           ОтветственныйЗаОбработкуПисем,
					                                           ДанныеУчетнойЗаписи.ПомещатьПисьмоВПапкуПисьмаОснования,
					                                           ДобавлятьВМассивПисемДляПолученияПапки,
					                                           ЭтоИсходящееПисьмо);
					// +CRM					
					Если НЕ ЭтоИсходящееПисьмо Тогда
					
						// добавим в массив для напоминания об электронном письме
						МассивСозданныхПисемДляОповещения.Добавить(СозданноеПисьмо);	
					
						// Зарегистрируем статус лида
						Если ДанныеУчетнойЗаписи.CRM_ИсточникЛидов Тогда
							РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(СозданноеПисьмо);
						КонецЕсли;
					КонецЕсли; 
					// -CRM
					
					Получено = Получено + 1;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					ЕстьОшибки = Истина;
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                      НСтр("ru = 'При получении письма %1 от %2, отправленное c адреса %3 произошла ошибка
					                      |%4'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					                      Сообщение.Тема,
					                      Сообщение.ДатаОтправления,
					                      Сообщение.Отправитель.Адрес,
					                      ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
					                         УровеньЖурналаРегистрации.Ошибка, , ,
					                         ТекстСообщенияОбОшибке);
					
					КоличествоОшибокПриЗаписи = КоличествоОшибокПриЗаписи + 1;
					
					Если ВсеИдентификаторы <> Неопределено Тогда
						Для Каждого ИдентификаторСообщения Из Сообщение.Идентификатор Цикл
							ИндексИдентификатораВМассиве = ВсеИдентификаторы.Найти(ИдентификаторСообщения);
							Если ИндексИдентификатораВМассиве <> Неопределено Тогда
								ВсеИдентификаторы.Удалить(ИндексИдентификатораВМассиве);
							КонецЕсли;
							Продолжить;
						КонецЦикла;
					КонецЕсли;
					
				КонецПопытки;
				
				СтруктураМассивовСозданныхПисем.ВсеПолученныеПисьма.Добавить(СозданноеПисьмо);
				Если ДобавлятьВМассивПисемДляПолученияПапки Тогда
					СтруктураМассивовСозданныхПисем.ПисьмаДляОпределенияПапок.Добавить(СозданноеПисьмо);
				КонецЕсли;
				
			КонецЦикла;
		
			// +GOOGLE
			Для Каждого ПропущенныйИдентификатор Из ИдентификаторыПропущенных Цикл
				нПоз = ВсеИдентификаторы.Найти(ПропущенныйИдентификатор);
				Если нПоз <> Неопределено Тогда
					ВсеИдентификаторы.Удалить(нПоз);
				КонецЕсли;
			КонецЦикла;
			// -GOOGLE
			
			// +CRM
			CRM_НапоминанияСервер.ДобавитьНапоминанияОВходящихПисьмах(МассивСозданныхПисемДляОповещения, ДанныеУчетнойЗаписи.Ссылка);
			// -CRM
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПочтуПоПроколуIMAP(ДанныеУчетнойЗаписи, Почта, Получено, СтруктураМассивовСозданныхПисем)
	
	МассивИменАктивныхПапок = МассивИменАктивныхПапок(Почта);
	
	КвалификаторСтроки150 =  Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная));
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки150);
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПисьма", КвалификаторСтроки150);
	
	ДатаЗагрузкиПисем = ТекущаяДатаСеанса();
	
	Для каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
			
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПараметрыОтбора = Новый Структура;
		
		Если Не ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем = Дата(1,1,1,1,1,1) Тогда 
			ПараметрыОтбора.Вставить("ПослеДатыОтправления",ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем);
		Иначе
			// +CRM
			Если ЗначениеЗаполнено(ДанныеУчетнойЗаписи.Ссылка.CRM_ДатаНачальнойЗагрузки) Тогда
				
				ПараметрыОтбора.Вставить("ПослеДатыОтправления", ДанныеУчетнойЗаписи.Ссылка.CRM_ДатаНачальнойЗагрузки);
			
			Иначе
				
				ПараметрыОтбора.Вставить("Удаленные", Ложь);
			
			КонецЕсли;		
			// -CRM
		КонецЕсли;
		
		МассивИдентификаторовДляЗагрузки = Новый Массив; 
		
		Попытка
			ЗаголовкиПисемДляЗагрузки = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТаблицаИдентификаторов.Очистить();
		Для Каждого ЗаголовокПисьма Из ЗаголовкиПисемДляЗагрузки Цикл
			
			Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаТаблицыИдентификаторов = ТаблицаИдентификаторов.Добавить();
			НоваяСтрокаТаблицыИдентификаторов.ИдентификаторНаСервере = ?(ЗаголовокПисьма.Идентификатор.Количество() = 0, "", ЗаголовокПисьма.Идентификатор[0]);
			НоваяСтрокаТаблицыИдентификаторов.ИдентификаторПисьма    = ЗаголовокПисьма.ИдентификаторСообщения;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма,
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
		|ПОМЕСТИТЬ ИдентификаторыПисемКЗагрузке
		|ИЗ
		|	&ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма,
		|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
		|ИЗ
		|	ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
		|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		|		ПО (ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
		|			И (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
		|				ИЛИ ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщенияОтправкаIMAP)
		|ГДЕ
		|	ЭлектронноеПисьмоВходящее.Ссылка ЕСТЬ NULL
		|	И ЭлектронноеПисьмоИсходящее.Ссылка ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ИдентификаторыПисемКЗагрузке", ТаблицаИдентификаторов);
		Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
		
		ИдЗагружать = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторНаСервере");
		
		ПолученоПисемВТекущемПочтовомЯщике = 0;
		ПолучитьПисьмаПоМассивуИдентификаторов(Почта, 
		                                       ДанныеУчетнойЗаписи,
		                                       ИдЗагружать, 
		                                       ПолученоПисемВТекущемПочтовомЯщике, 
		                                       СтруктураМассивовСозданныхПисем);
		Получено = Получено + ПолученоПисемВТекущемПочтовомЯщике; 

	КонецЦикла;

	УстановитьДатуПоследнейЗагрузкиПисем(ДанныеУчетнойЗаписи.Ссылка, ДатаЗагрузкиПисем);

КонецПроцедуры

Процедура ПолучитьПочтуПоПроколуPOP3(ДанныеУчетнойЗаписи, Почта, Получено, СтруктураМассивовСозданныхПисем)

	// Получим идентификаторы сообщений на сервере.
	Идентификаторы = Почта.ПолучитьИдентификаторы();
	Если Идентификаторы.Количество() = 0 И (Не ДанныеУчетнойЗаписи.ОставлятьКопии) Тогда
		// Если на сервере сообщений нет, то удалим все записи по учетной записи в регистре сведений
		// ИдентификаторыПолученныхЭлектронныхПисем.
		УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
		Возврат;
	КонецЕсли;

	// -----------------------------------------------------------------
	// Определим какие сообщения нужно получать.
	ИдЗагружать = ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, ДанныеУчетнойЗаписи.Ссылка);
	
	ПолученоПоДаннойУчетнойЗаписи = 0;
	ПолучитьПисьмаПоМассивуИдентификаторов(Почта,
	                                       ДанныеУчетнойЗаписи,
	                                       ИдЗагружать, 
	                                       ПолученоПоДаннойУчетнойЗаписи, 
	                                       СтруктураМассивовСозданныхПисем, 
	                                       Идентификаторы);
	
	Получено = Получено + ПолученоПоДаннойУчетнойЗаписи;
	
	// -----------------------------------------------------------------
	// Удалим ненужные сообщения на сервере.
	Если Не ДанныеУчетнойЗаписи.ОставлятьКопии Тогда
		// удалять все
		МассивКУдалению = Идентификаторы;
		УдалятьВсе = Истина;
	Иначе
		УдалятьВсе = Ложь;
		Если ДанныеУчетнойЗаписи.ОставлятьДней > 0 Тогда
			МассивКУдалению = ПолучитьИдентификаторыПисемДляУдаленияНаСервере(
			Идентификаторы, 
			ДанныеУчетнойЗаписи.Ссылка, 
			ТекущаяДатаСеанса() - ДанныеУчетнойЗаписи.ОставлятьДней * 24 * 60 * 60);
		Иначе
			МассивКУдалению = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивКУдалению.Количество() <> 0 Тогда
		Почта.УдалитьСообщения(МассивКУдалению);
	КонецЕсли;
	
	// -----------------------------------------------------------------
	// Удалим ненужные идентификаторы в регистре сведений.
	Если УдалятьВсе Тогда
		УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
	Иначе
		УдалитьИдентификаторыРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка, Идентификаторы, МассивКУдалению);
	КонецЕсли;

КонецПроцедуры

Процедура СинхронизироватьПризнакРассмотреноССервером(Почта, ДанныеУчетнойЗаписи, МассивЗагруженныхПисем) Экспорт

	Если НЕ ДанныеУчетнойЗаписи.ОбработкаПисемВедетсяВДругомПочтовомКлиенте Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменАктивныхПапок = МассивИменАктивныхПапок(Почта);
	
	МассивИдентификаторовНеПрочитанныхПисем = Новый Массив;
	
	Для каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
			
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Прочитанные", Ложь);
		
		Попытка
			ЗаголовкиПрочитанныхПисем = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
		Исключение
			Продолжить;
		КонецПопытки;
		
		
		Для Каждого ЗаголовокПисьма Из ЗаголовкиПрочитанныхПисем Цикл
			
			МассивИдентификаторовНеПрочитанныхПисем.Добавить(ЗаголовокПисьма.ИдентификаторСообщения);
			
		КонецЦикла;
			
	КонецЦикла;
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", 
	                                        Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная)));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаИдентификаторов,
	                                                       МассивИдентификаторовНеПрочитанныхПисем,
	                                                       "Идентификатор");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИдентификаторыПрочтенныхПисем.Идентификатор
	|ПОМЕСТИТЬ ИдентификаторыПрочтенныхПисем
	|ИЗ
	|	&ИдентификаторыПрочтенныхПисем КАК ИдентификаторыПрочтенныхПисем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК Рассмотрено
	|ИЗ
	|	ИдентификаторыПрочтенныхПисем КАК ИдентификаторыПрочтенныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|		ПО ИдентификаторыПрочтенныхПисем.Идентификатор = Взаимодействия.ИдентификаторСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие)
	|ГДЕ
	|	Взаимодействия.УчетнаяЗапись = &УчетнаяЗапись
	|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ) = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыПрочтенныхПисем КАК ИдентификаторыПрочтенныхПисем
	|		ПО ИдентификаторыПрочтенныхПисем.Идентификатор = Взаимодействия.ИдентификаторСообщения
	|ГДЕ
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ) = ЛОЖЬ
	|	И Взаимодействия.УчетнаяЗапись = &УчетнаяЗапись
	|	И ИдентификаторыПрочтенныхПисем.Идентификатор IS NULL";
	
	Запрос.УстановитьПараметр("ИдентификаторыПрочтенныхПисем", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПисемРассмотрено   = Новый Массив;
	МассивПисемНеРассмотрено = Новый Массив;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Рассмотрено Тогда
			МассивПисемРассмотрено.Добавить(Выборка.Ссылка);
		Иначе
			МассивПисемНеРассмотрено.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьИзменения = Ложь;
	
	Взаимодействия.УстановитьПризнакРассмотрено(МассивПисемРассмотрено, Истина, ЕстьИзменения);
	Взаимодействия.УстановитьПризнакРассмотрено(МассивПисемНеРассмотрено, Ложь, ЕстьИзменения);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗагруженныхПисем, МассивПисемРассмотрено, Ложь);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗагруженныхПисем, МассивПисемНеРассмотрено, Ложь);
	
КонецПроцедуры


Функция ПочтовыеАдресаРавны(ПервыйАдрес, ВторойАдрес) Экспорт

	ОбработанныйПервыйАдрес = НРег(СокрЛП(ПервыйАдрес));
	ОбработанныйВторойАдрес = НРег(СокрЛП(ВторойАдрес));
	
	ИзменитьДоменВПочтовомАдресеЕслиНеобходимо(ОбработанныйПервыйАдрес);
	ИзменитьДоменВПочтовомАдресеЕслиНеобходимо(ОбработанныйВторойАдрес);
	
	Возврат (ОбработанныйПервыйАдрес = ОбработанныйВторойАдрес);
	
КонецФункции


Функция АдресОтправителяИнтернетПочтовогоСообщения(Отправитель) Экспорт
	
	Если ТипЗнч(Отправитель) = Тип("ИнтернетПочтовыйАдрес") Тогда
		ОтправительАдрес = Отправитель.Адрес;
	Иначе
		ОтправительАдрес = Отправитель;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ОтправительАдрес, "");
	
КонецФункции

Процедура ИзменитьДоменВПочтовомАдресеЕслиНеобходимо(ПочтовыйАдрес)
	
	СтруктураАдреса =  СтруктураАдресаЭлектроннойПочты(ПочтовыйАдрес);
	Если СтруктураАдреса <> Неопределено Тогда
		СоответствиеПодменяемыхДоменов = СоответствиеПодменяемыхДоменовЭлектроннойПочты();
		ДоменНаКоторыйНеобходимоЗаменить = СоответствиеПодменяемыхДоменов.Получить(СтруктураАдреса.Домен);
		Если ДоменНаКоторыйНеобходимоЗаменить <> Неопределено Тогда
			ПочтовыйАдрес = СтруктураАдреса.ИмяПочтовогоЯщика + "@" + ДоменНаКоторыйНеобходимоЗаменить;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция МассивИменАктивныхПапок(Почта) Экспорт
	
	МассивИменАктивныхПапок = Новый Массив;
	 
	ИменаАктивныхПапок     = Почта.ПолучитьПочтовыеЯщикиПоПодписке();
	Если ИменаАктивныхПапок.Количество() = 0 Тогда
		ИменаАктивныхПапок = Почта.ПолучитьПочтовыеЯщики();
	КонецЕсли;
	
	Разделитель = ""; 
	Попытка
		Разделитель = Почта.СимволРазделитель;
	Исключение
		// Некоторые почтовые сервера не поддерживают эту команду.
	КонецПопытки;
	
	МассивИгнорируемыхИмен  = МассивИменПапокДляКоторыхНеВыполняетсяЗагрузкаПисем();
	
	Для Каждого ИмяАктивнойПапки Из ИменаАктивныхПапок Цикл
		
		Если Не ПустаяСтрока(Разделитель) Тогда
			
			МассивСтрокИмениПапки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИмяАктивнойПапки,Разделитель);
			Если МассивСтрокИмениПапки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяПапкиБезРазделителя = МассивСтрокИмениПапки[МассивСтрокИмениПапки.Количество()-1];
			Если ПустаяСтрока(ИмяПапкиБезРазделителя) Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(ИмяПапкиБезРазделителя,1) = "[" И Прав(ИмяПапкиБезРазделителя,1) = "]" Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивИгнорируемыхИмен.Найти(НРег(ИмяПапкиБезРазделителя)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Лев(ИмяАктивнойПапки,1) = "[" И Прав(ИмяАктивнойПапки,1) = "]" Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивИгнорируемыхИмен.Найти(НРег(ИмяАктивнойПапки)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивИменАктивныхПапок.Добавить(ИмяАктивнойПапки);
		
	КонецЦикла;

	Возврат МассивИменАктивныхПапок;
	
КонецФункции

Функция МассивИменПапокДляКоторыхНеВыполняетсяЗагрузкаПисем()

	МассивИмен = Новый Массив;
	МассивИмен.Добавить("спам");
	МассивИмен.Добавить("удаленные");
	МассивИмен.Добавить("черновики");
	МассивИмен.Добавить("корзина");
	МассивИмен.Добавить("spam");
	МассивИмен.Добавить("trash");
	МассивИмен.Добавить("drafts");
	МассивИмен.Добавить("draftBox");
	МассивИмен.Добавить("deleted");
	МассивИмен.Добавить("junk");
	МассивИмен.Добавить("bulk mail");
	Возврат МассивИмен;

КонецФункции

Процедура УстановитьКонтактыВПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса, ЭтоИсходящееПисьмо)
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиПисьма Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиКопий Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиОтвета Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Если ЭтоИсходящееПисьмо Тогда
		Для Каждого СтрокаТаблицы Из Письмо.ПолучателиСкрытыхКопий Цикл
			ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
		КонецЦикла;
	Иначе
		ОбработатьПоляКонтактИАдрес(Письмо.ОтправительАдрес, Письмо.ОтправительКонтакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДатуПоследнейЗагрузкиПисем(УчетнаяЗапись, ДатаЗагрузки) Экспорт

	МенеджерЗаписи = РегистрыСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись     = УчетнаяЗапись;
	МенеджерЗаписи.ДатаЗагрузкиПисем = ДатаЗагрузки;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Функция СоответствиеКонтактовВПисьме(Письмо,УчетнаяЗапись)
	
	СоответствиеКонтактов = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Письмо) Тогда
		Возврат СоответствиеКонтактов;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адреса.Адрес,
	|	Адреса.Контакт
	|ИЗ
	|	(" + ?(ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"), "", "ВЫБРАТЬ
	|		ПОДСТРОКА(ЭлектронноеПисьмоВходящее.ОтправительАдрес, 1, 100) КАК Адрес,
	|		ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|	ГДЕ
	|		ЭлектронноеПисьмоВходящее.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	") + "ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо) КАК Адреса
	|ГДЕ
	|	(НЕ Адреса.Контакт ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контакт) <> Тип("Строка") Тогда
// +CRM
			//Проверим, если включено использование уровне доступа, контактом является партнер или КЛ партнера
			//и пользователям учетной записи доступен патрер, тогда добавим в соответствие
//START Кайдашов 10/07/19 433			
			//Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Партнеры")
			//ИЛИ ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			//	Если НЕ CRM_УправлениеЭлектроннойПочтой.КонтактДоступен(?(ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Партнеры"),Выборка.Контакт,Выборка.Контакт.Владелец),УчетнаяЗапись) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
// -CRM
			СоответствиеКонтактов.Вставить(Выборка.Адрес, Выборка.Контакт);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;
	
КонецФункции

Функция СоответствиеПодменяемыхДоменовЭлектроннойПочты()

	СоответствиеДоменов = Новый Соответствие;
	СоответствиеДоменов.Вставить("yandex.ru","ya.ru");
	
	Возврат СоответствиеДоменов;

КонецФункции

Функция СтруктураАдресаЭлектроннойПочты(АдресЭлектроннойПочты)
	
	МассивАдреса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресЭлектроннойПочты,"@");
	
	Если МассивАдреса.Количество() = 2 Тогда
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("ИмяПочтовогоЯщика", МассивАдреса[0]);
		СтруктураАдреса.Вставить("Домен"            , МассивАдреса[1]);
		
		Возврат СтруктураАдреса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти