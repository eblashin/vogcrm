// В данный модуль вынесены методы подсистемы CRM, вызываемые из модулей типовых объектов. 
// Выносить можно только те методы, которые не вызывают стандартные методы типового модуля или обработчики форм. 
// Т.е. вызывают только те методы, что тоже вынесены из типового или не содержат таких вызовов.

// Для каждого объекта необходимо задать свою #Область с именем объекта и модуля, как он называется в метаданных.
#Область ОбщегоНазначения

Процедура ДобавитьКомандыПечатиДляВнешнихМакетов(КомандыПечати, ПолноеИмяОбъекта)

	КомандыПечати.Колонки.Добавить("CRM", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ПолноеИмяОбъекта);
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	ПользовательскиеМакетыПечати.ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект,
	|	ПользовательскиеМакетыПечати.CRM_Представление
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.CRM_ВнешнийМакет
	|	И ПользовательскиеМакетыПечати.Объект = &Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяКоманда = КомандыПечати.Добавить();
		НоваяКоманда.Идентификатор	= Выборка.ИмяМакета;
		НоваяКоманда.Представление	= Выборка.CRM_Представление;
		НоваяКоманда.CRM			= Истина;
		НоваяКоманда.Порядок		= 99;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти // ОбщегоНазначения

#Область ОпределениеФормОбъектов

Процедура ОбработкаПолученияФормОбъектовCRM(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	#Область ПолученияФормАнкета
	
	Если ТипЗнч(Источник) = Тип("ДокументМенеджер.Анкета") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.Анкета.Форма.CRM_ФормаДокумента";
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.Анкета.Форма.CRM_ФормаСписка";
		КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолученияФормНазначениеОпросов
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.НазначениеОпросов") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.НазначениеОпросов.Форма.CRM_ФормаДокумента";
		КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолученияФормСообщениеSMS
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.СообщениеSMS") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.СообщениеSMS.Форма.sms4bФормаДокумента";
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.СообщениеSMS.Форма.sms4bФормаСписка";
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.СообщениеSMS.Форма.sms4bФормаВыбора";
		КонецЕсли;
	
	#КонецОбласти

	#Область ПолученияФормЭлектронноеПисьмоИсходящее
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.ЭлектронноеПисьмоИсходящее") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента";
		КонецЕсли;
	
	#КонецОбласти
		
	#Область ПолученияФормЭлектронноеПисьмоВходящее
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.ЭлектронноеПисьмоВходящее") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента";
		КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолученияФормТелефонныйЗвонок
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.ТелефонныйЗвонок") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаДокумента";
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаСписка";
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаСписка";
		КонецЕсли;
	
	#КонецОбласти	
	
	#Область ПолученияФормКоммерческоеПредложениеКлиенту
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.КоммерческоеПредложениеКлиенту") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы", "CRM_Модуль_ФормаДокумента") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаДокумента";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы", "CRM_ФормаДокумента") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаДокумента";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы", "CRM_Модуль_ФормаСписка") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаСписка";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы", "CRM_ФормаСписка") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаСписка";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы", "CRM_Модуль_ФормаВыбора") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаВыбора";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы", "CRM_ФормаВыбора") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаВыбора";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	
	#КонецОбласти

	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ОпределениеФормОбъектов

#Область Документ_ЭлектронноеПисьмоИсходящее_МодульМенеджера

// Процедура добавляет в параметры письма адресатов.
//
// Параметры:
//	Объект			- ДокументСсылка	- Письмо
//	ПараметрыПисьма	- Структура			- Параметры письма.
//	ИмяПараметра	- Строка			- Имя параметра.
//	ИмяТаблицы		- Строка			- Имя таблицы.
//
Процедура ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма, ИмяПараметра, ИмяТаблицы)
	
	ТабЗн = Объект[ИмяТаблицы];
	Если ТабЗн.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адресаты = Новый Массив;
	Для Каждого Стр Из ТабЗн Цикл
		Представление = СокрЛП(СтрЗаменить(Стр.Представление, "<" + Стр.Адрес + ">", ""));
		Адресаты.Добавить(Новый Структура("Адрес,Представление", Стр.Адрес, Представление));
	КонецЦикла;
	
	ПараметрыПисьма.Вставить(ИмяПараметра, Адресаты);
	
КонецПроцедуры // ДобавитьВПараметрАдресатов()

// Функция получает параметры письма для отправки.
//
// Параметры:
//	Объект	- ДокументСсылка	- Письмо
//
// Возвращаемое значение:
//	Структура	- Параметры письма.
//
Функция ПолучитьПараметрыПисьмаДляОтправки(Объект)  Экспорт
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	ПараметрыПисьма = Новый Структура;
	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,	"Кому",			"ПолучателиПисьма");
	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,	"Копии", 		"ПолучателиКопий");
	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,	"СкрытыеКопии",	"ПолучателиСкрытыхКопий");
	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,	"СлепыеКопии",	"ПолучателиСкрытыхКопий");
	ПараметрыПисьма.Вставить("Тема",		Объект.Тема);
	ПараметрыПисьма.Вставить("Тело",		Объект.ТекстHTML);
	ПараметрыПисьма.Вставить("Кодировка",	Объект.Кодировка);
	ПараметрыПисьма.Вставить("ТипТекста",	Объект.ТипТекста);
	ПараметрыПисьма.Вставить("Важность",	УправлениеЭлектроннойПочтой.ПолучитьВажность(Объект.Важность));
	ПараметрыПисьма.Вставить("УведомитьОДоставке",	Объект.УведомитьОДоставке);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении",	Объект.УведомитьОПрочтении);
	Если НЕ ПустаяСтрока(Объект.ИдентификаторыОснований) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", Объект.ИдентификаторыОснований);
	КонецЕсли;
	
	СоотвВложения = Новый Соответствие;
	ДанныеПрисоединенныхФайловПисьма = ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Объект);
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = CRM_УправлениеЭлектроннойПочтой.ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Объект.Ссылка);
		ВладелецФайлов       = Объект.Ссылка;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИдентификаторПочтовогоВложения,
	|	Файлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайлов);
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		ИмяФайла = Выборка.ПолноеНаименование + ?(Выборка.Расширение = "", "", "." + Выборка.Расширение);
		
		ДанныеВложения = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка);
		Если ДанныеВложения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанныеВложения = Новый Структура;
		СтруктураДанныеВложения.Вставить("ДвоичныеДанные", ДанныеВложения);
		СтруктураДанныеВложения.Вставить("Идентификатор", СокрЛП(Выборка.ИдентификаторПочтовогоВложения));
		СоотвВложения.Вставить(ИмяФайла, ?(Выборка.ИдентификаторПочтовогоВложения = "", ДанныеВложения, СтруктураДанныеВложения));
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ЭлектронныеПодписиВладельца = МодульЭлектроннаяПодпись.УстановленныеПодписи(Выборка.Ссылка);
		КонецЕсли;
		НомерСтроки = 1;
		Для каждого ЭП Из ЭлектронныеПодписиВладельца Цикл
		
			СоотвВложения.Вставить(Выборка.ПолноеНаименование + "-DS("+ НомерСтроки + ")." 
			                       + РасширениеДляФайловПодписи, ЭП.Подпись);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	ПараметрыПисьма.Вставить("Вложения", СоотвВложения);
	//ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	
	Возврат ПараметрыПисьма;
	
КонецФункции // ПолучитьПараметрыПисьмаДляОтправки()

#КонецОбласти

#Область Документ_CRM_Интерес_МодульМенеджера

Функция ВернутьКЛПартнера(Партнер) Экспорт
	Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать(,Партнер);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;		
КонецФункции	

#КонецОбласти

#Область Документ_Анкеты_МодульОбъекта

// Процедура - обработчик подписки на событие "ОбработкаПроверкиЗаполнения" документа "Анкета".
//
Процедура ОбработкаПроверкиЗаполненияКоммерческогоПредложенияКлиенту(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	Если ЗначениеЗаполнено(Источник.CRM_ШаблонАнкеты) Тогда
		// Не надо проверять Опрос.
		ИндексОпроса = ПроверяемыеРеквизиты.Найти("Опрос");
		Если НЕ (ИндексОпроса = Неопределено) Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексОпроса);			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Документ_КоммерческоеПредложениеКлиенту


// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПредложения(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПредложения.Период КАК Период,
	|	ТаблицаПредложения.Организация КАК Организация,
	|	ТаблицаПредложения.Подразделение КАК Подразделение,
	|	ТаблицаПредложения.Партнер КАК Партнер,
	|	ТаблицаПредложения.Номенклатура КАК Номенклатура,
	|	ТаблицаПредложения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаПредложения.Документ КАК ДокументПредложения,
	|	ТаблицаПредложения.Проект КАК Проект,
	|	СУММА(ТаблицаПредложения.Количество) КАК Количество,
	|	СУММА(ТаблицаПредложения.Сумма) КАК Стоимость,
	|	СУММА(ТаблицаПредложения.СуммаБезСкидок) КАК СтоимостьБезСкидок
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПредложения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПредложения.Период,
	|	ТаблицаПредложения.Организация,
	|	ТаблицаПредложения.Подразделение,
	|	ТаблицаПредложения.Партнер,
	|	ТаблицаПредложения.Номенклатура,
	|	ТаблицаПредложения.ХарактеристикаНоменклатуры,
	|	ТаблицаПредложения.Документ,
	|	ТаблицаПредложения.Проект";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредложения", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПредложения()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура КПИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗапасы.НомерСтроки КАК НомерСтроки,
	|	ДокументЗапасы.Ссылка КАК Документ,
	|	ДокументЗапасы.Ссылка.Дата КАК Период,
	|	ДокументЗапасы.Ссылка.Партнер КАК Партнер,
	|	ДокументЗапасы.Ссылка.CRM_Проект КАК Проект,
	|	ДокументЗапасы.Ссылка.CRM_Подразделение КАК Подразделение,
	|	&Организация КАК Организация,
	|	ДокументЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ДокументЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДокументЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ДокументЗапасы.Количество
	|		ИНАЧЕ ДокументЗапасы.Количество * ДокументЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ДокументЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ДокументЗапасы.Всего * ДокументЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс * ДокументЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ((ДокументЗапасы.Цена * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ДокументЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА ДокументЗапасы.Количество
	|			ИНАЧЕ ДокументЗапасы.Количество * ДокументЗапасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДокументЗапасы.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ДокументЗапасы.СуммаНДС
	|		КОНЕЦ) * ДокументЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс * ДокументЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаБезСкидок,
	|	0 КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ДокументЗапасы.Ссылка.Валюта = &ВалютаРегламентированногоУчета
	|				ТОГДА ДокументЗапасы.Всего * КурсыРегВалюты.Курс * ДокументЗапасы.Ссылка.Кратность / (ДокументЗапасы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ДокументЗапасы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ДокументЗапасы.Всего КАК Всего,
	|	ДокументЗапасы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУправленческогоУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта = &ВалютаРегламентированногоУчета) КАК КурсыРегВалюты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДокументЗапасы.Ссылка = &Ссылка И ДокументЗапасы.Номенклатура ССЫЛКА Справочник.Номенклатура И ДокументЗапасы.CRM_Утвержден;";

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.ВыполнитьПакет();
	
	СформироватьТаблицаПредложения(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура КППолучитьКонтактныеДанные(ОбъектСсылка, СтруктураДанных) Экспорт
	
	Для Каждого КлючИЗначение Из СтруктураДанных Цикл
		Попытка
			ВидКИ = Справочники.ВидыКонтактнойИнформации[КлючИЗначение.Ключ];
			НайденаяСтрока = ОбъектСсылка.КонтактнаяИнформация.Найти(ВидКИ,"Вид");
		Исключение
			НайденаяСтрока = ОбъектСсылка.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации["Телефон"],"Тип");
		КонецПопытки;
		Если НЕ НайденаяСтрока = Неопределено Тогда
			СтруктураДанных[КлючИЗначение.Ключ] = НайденаяСтрока.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Функция КПВернутьКЛКонтрагента(КонтрагентСсылка) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	               |ГДЕ
	               |	(НЕ КонтактныеЛица.ПометкаУдаления)
	               |	И КонтактныеЛица.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", КонтрагентСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КонтактноеЛицо;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции


Функция КППолучитьВарианты(КоммерческоеПредложение) Экспорт
	
	СписокВариантов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДокументЗапасы.CRM_ИДВарианта КАК ИДВарианта,
	               |	ДокументЗапасы.CRM_Утвержден КАК Утвержден,
	               |	МАКСИМУМ(ДокументЗапасы.CRM_ИмяВарианта) КАК ИмяВарианта
	               |ИЗ
	               |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументЗапасы
	               |ГДЕ
	               |	ДокументЗапасы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДокументЗапасы.CRM_ИДВарианта,
	               |	ДокументЗапасы.CRM_Утвержден";
				   
	Запрос.УстановитьПараметр("Ссылка", КоммерческоеПредложение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокВариантов.Добавить(Выборка.ИДВарианта, ?(ЗначениеЗаполнено(Выборка.ИмяВарианта), Выборка.ИмяВарианта, НСтр("ru = 'Вариант '")+Строка(Выборка.ИДВарианта))+?(Выборка.Утвержден,НСтр("ru = ' (Утв.)'"),""),Выборка.Утвержден);
		
	КонецЦикла;
	
	СписокВариантов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат СписокВариантов;
	
КонецФункции

Функция КППолучитьДанныеОбъекта(СсылкаНаОбъект, знач НомерВарианта = Неопределено) Экспорт
		
	Объект = СсылкаНаОбъект.ПолучитьОбъект();	
	
	Если НомерВарианта = Неопределено Тогда
		
		// Печатаем утвержденный вариант.
		
		СтрокаУтвержденного = Объект.Товары.Найти(Истина, "CRM_Утвержден");
		
		Если Не СтрокаУтвержденного = Неопределено Тогда
			
			НомерВарианта = СтрокаУтвержденного.CRM_ИДВарианта;
			
		Иначе
			
			НомерВарианта = 0;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ДанныеОбъекта = Новый Структура;
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Константы", "CRM_ПечататьНомераДокументовБезПрефиксов") Тогда
		ФлагУдалитьПрефикс = Константы["CRM_ПечататьНомераДокументовБезПрефиксов"].Получить();
	Иначе
		ФлагУдалитьПрефикс = Ложь;
	КонецЕсли;
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер, ФлагУдалитьПрефикс, ФлагУдалитьПрефикс);
	
	ДанныеОбъекта.Вставить("Дата",	Формат(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),"ДЛФ=D"));
	ДанныеОбъекта.Вставить("Номер",	НомерДокумента);
	
	СведенияОбОрганизации	= CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(Объект.Организация, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ,);
	НаименованиеОрганизации	= CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	АдресОрганизации		= CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес,");
	ТелефоныОрганизации		= CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "Телефоны,");
	
	СведенияОКонтрагенте	= CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(Объект.Партнер, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ,);
	НаименованиеКонтрагента = CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,");
	
	ДанныеОбъекта.Вставить("Организация",	НаименованиеОрганизации);
	
	ДанныеОбъекта.Вставить("АдресОрганизации",	АдресОрганизации);
	ДанныеОбъекта.Вставить("ТелефонОрганизации",	ТелефоныОрганизации);
	ДанныеОбъекта.Вставить("ТелефонОрганизации_1",	ТелефоныОрганизации);
	
	ДанныеОбъекта.Вставить("Клиент",		НаименованиеКонтрагента);
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		
		КЛ_Контрагента = Объект.КонтактноеЛицо;
		
	Иначе
		
		КЛ_Контрагента = КПВернутьКЛКонтрагента(Объект.Партнер);
		
	КонецЕсли;	
	
	ДанныеОбъекта.Вставить("КонтактноеЛицо",	КЛ_Контрагента);
	ДанныеОбъекта.Вставить("КонтактноеЛицо_1",	КЛ_Контрагента);
	
	НадписьУважаемый = "Уважаемый(ая)";
	
	Если ЗначениеЗаполнено(КЛ_Контрагента) И ЗначениеЗаполнено(КЛ_Контрагента.Пол) Тогда
		
		Если КЛ_Контрагента.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
	
			НадписьУважаемый = "Уважаемый";
	
		Иначе
	
			НадписьУважаемый = "Уважаемая";
	
		КонецЕсли;	
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Уважаемый",	НадписьУважаемый);
	
	ДанныеОбъекта.Вставить("Ответственный",	Объект.Менеджер);
	ДанныеОбъекта.Вставить("Ответственный_1",	Объект.Менеджер);
	
	СтруктураДанных = Новый Структура("Телефон, EmailПользователя","","");
	
	Если ЗначениеЗаполнено(Объект.Менеджер) Тогда
		КППолучитьКонтактныеДанные(Объект.Менеджер, СтруктураДанных);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТелефонОтветственного",	СтруктураДанных.Телефон);
	ДанныеОбъекта.Вставить("EmailОтветственного",	СтруктураДанных.EmailПользователя);
	
	ДанныеОбъекта.Вставить("ИсходныеУсловия",	Объект.CRM_ИсходныеУсловия);
	
	ДанныеОбъекта.Вставить("ПорядокВыполненияРабот", Объект.CRM_ПорядокВыполненияРабот);
	
	ДанныеОбъекта.Вставить("Варианты", Новый Массив);
	
	//ДанныеОбъекта.Вставить("Товары", Новый Массив);
		
	СписокВариантов = КППолучитьВарианты(СсылкаНаОбъект);
	
	Для Каждого ЭлементСписка Из СписокВариантов Цикл
		Если (Не НомерВарианта = 0) И НЕ ЭлементСписка.Значение = НомерВарианта Тогда
			Продолжить;
		КонецЕсли;
		
		ИтогоБезСкидки = 0;
		
		ИтоговаяСумма	 = 0;
		ИтоговаяСуммаНДС = 0;
		
		НомерСтрокиПоПорядку = 0;
		
		ЕстьРазделители = Ложь;
		
		ТекущийРазделитель = Неопределено;
		
		ИтогПоРазделу = 0;	
		
		СтруктураВарианта = Новый Структура;
		СтруктураВарианта.Вставить("идВарианта",ЭлементСписка.Значение);
		СтруктураВарианта.Вставить("Утвержден",ЭлементСписка.Пометка);
		СтруктураВарианта.Вставить("СтрокаВарианта","Вариант "+Строка(ЭлементСписка.Значение)+?(ЭлементСписка.Пометка," (Утвержден)",""));
		СтруктураВарианта.Вставить("Товары", Новый Массив);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			
			Если СтрокаТабличнойЧасти.CRM_ИДВарианта = ЭлементСписка.Значение Тогда
				
				СтрокаТаблицыТовары = Новый Структура;
				
				Если СтрокаТабличнойЧасти.CRM_ЭтоРазделитель Тогда
					
					Если Не ТекущийРазделитель = Неопределено И ТекущийРазделитель.Итог Тогда
						
						// Если предусмотрен вывод итогов, добавим строку с итогами в массив.
						СтрокаТаблицыТовары.Вставить("НомерСтроки",		" ");
						СтрокаТаблицыТовары.Вставить("Номенклатура",	"Итого по " + ТекущийРазделитель + ":");
						СтрокаТаблицыТовары.Вставить("Количество",		" ");
						СтрокаТаблицыТовары.Вставить("Цена",			" ");
						СтрокаТаблицыТовары.Вставить("Единица",			" ");
						СтрокаТаблицыТовары.Вставить("Скидка",			" ");
						СтрокаТаблицыТовары.Вставить("Сумма",			Формат(ИтогПоРазделу, "ЧЦ=15; ЧДЦ=2"));
						СтрокаТаблицыТовары.Вставить("ТипСтроки",	    "ИтогПоРазделу");
						
						СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
								
						СтрокаТаблицыТовары = Новый Структура;
							
					КонецЕсли;	
					
					СтрокаТаблицыТовары.Вставить("НомерСтроки",		" ");
					СтрокаТаблицыТовары.Вставить("Номенклатура",	СтрокаТабличнойЧасти.Номенклатура);
					СтрокаТаблицыТовары.Вставить("Количество",		" ");
					СтрокаТаблицыТовары.Вставить("Цена",			" ");
					СтрокаТаблицыТовары.Вставить("Единица",			" ");
					СтрокаТаблицыТовары.Вставить("Скидка",			" ");
					СтрокаТаблицыТовары.Вставить("Сумма",			" ");
					СтрокаТаблицыТовары.Вставить("ТипСтроки",	    "Разделитель");
					
					ЕстьРазделители = Истина;
							
					ТекущийРазделитель = СтрокаТабличнойЧасти.Номенклатура;
						
					ИтогПоРазделу = 0;
						
				Иначе
					
					НомерСтрокиПоПорядку = НомерСтрокиПоПорядку + 1;
					
					СтрокаТаблицыТовары.Вставить("НомерСтроки",		НомерСтрокиПоПорядку);
					СтрокаТаблицыТовары.Вставить("Номенклатура",	?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Содержание), СтрокаТабличнойЧасти.Содержание, СтрокаТабличнойЧасти.Номенклатура));
					СтрокаТаблицыТовары.Вставить("Количество",		Формат(СтрокаТабличнойЧасти.Количество,"ЧЦ=15; ЧДЦ=3"));
					СтрокаТаблицыТовары.Вставить("Цена",			Формат(СтрокаТабличнойЧасти.Цена,"ЧЦ=15; ЧДЦ=2"));
					СтрокаТаблицыТовары.Вставить("Единица",			СтрокаТабличнойЧасти.ЕдиницаИзмерения);				
					
					СуммаБезСкидки	= СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
					СкидкаНаценка	= ?(СуммаБезСкидки >= СтрокаТабличнойЧасти.Сумма, СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма,СтрокаТабличнойЧасти.Сумма - СуммаБезСкидки);
					
					ИтогоБезСкидки = ИтогоБезСкидки + СуммаБезСкидки;
					
					СтрокаТаблицыТовары.Вставить("Скидка",			Формат(СкидкаНаценка,"ЧЦ=15; ЧДЦ=2"));
					СтрокаТаблицыТовары.Вставить("Сумма",			Формат(СтрокаТабличнойЧасти.Сумма,"ЧЦ=15; ЧДЦ=2"));
					
					ИтоговаяСумма    = ИтоговаяСумма    + СтрокаТабличнойЧасти.Сумма;
					ИтоговаяСуммаНДС = ИтоговаяСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
					
					ИтогПоРазделу = ИтогПоРазделу + СтрокаТабличнойЧасти.Сумма;
					
					СтрокаТаблицыТовары.Вставить("ТипСтроки",	    "Номенклатура");				
				КонецЕсли;
				
				СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
				
			КонецЕсли;
			
		КонецЦикла;

		// Итоги по последнему разделителю не выведены в цикле
		// если предусмотрен вывод итогов, добавим строку с итогами в массив.
		Если Не ТекущийРазделитель = Неопределено И ТекущийРазделитель.Итог Тогда
			
			СтрокаТаблицыТовары = Новый Структура;		
			
			СтрокаТаблицыТовары.Вставить("НомерСтроки",		" ");
			СтрокаТаблицыТовары.Вставить("Номенклатура",	"Итого по " + ТекущийРазделитель + ":");
			СтрокаТаблицыТовары.Вставить("Количество",		" ");
			СтрокаТаблицыТовары.Вставить("Цена",			" ");
			СтрокаТаблицыТовары.Вставить("Единица",			" ");
			СтрокаТаблицыТовары.Вставить("Скидка",			" ");
			СтрокаТаблицыТовары.Вставить("Сумма",			Формат(ИтогПоРазделу, "ЧЦ=15; ЧДЦ=2"));
			СтрокаТаблицыТовары.Вставить("ТипСтроки",	    "ИтогПоРазделу");
			
			СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);		
				
		КонецЕсли;	

		СтруктураВарианта.Вставить("ЕстьРазделители", ЕстьРазделители);
		
		// выводим итоги
		
		СтруктураВарианта.Вставить("Всего",	Формат(ИтоговаяСумма,"ЧЦ=15; ЧДЦ=2"));
		
		Если ИтоговаяСуммаНДС = 0 Тогда
			СтруктураВарианта.Вставить("СтрокаНДС", НСтр("ru = 'без налога (НДС)'"));
			СтруктураВарианта.Вставить("ВсегоНДС", "");
		Иначе
			СтруктураВарианта.Вставить("СтрокаНДС", ?(Объект.ЦенаВключаетНДС, НСтр("ru = 'в том числе НДС:'"), НСтр("ru = 'Сумма НДС:'")));
			СтруктураВарианта.Вставить("ВсегоНДС",  Формат(ИтоговаяСуммаНДС, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли; 
		
		СтруктураВарианта.Вставить("ВсегоКОплате",	Формат(ИтоговаяСумма + ?(Объект.ЦенаВключаетНДС, 0, ИтоговаяСуммаНДС),"ЧЦ=15; ЧДЦ=2"));
		
		СтруктураВарианта.Вставить("ТелефонОтвественного",	СтруктураДанных.Телефон);
		СтруктураВарианта.Вставить("EmailОтвественного",	СтруктураДанных.EmailПользователя);

		СтруктураВарианта.Вставить("СтоимостьПропись",	НРег(РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговаяСумма + ?(Объект.ЦенаВключаетНДС, 0, ИтоговаяСуммаНДС), Объект.Валюта)));
		ДанныеОбъекта.Варианты.Добавить(СтруктураВарианта);
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("Валюта",		Объект.Валюта);
	ДанныеОбъекта.Вставить("Валюта_1",		Объект.Валюта);
	ДанныеОбъекта.Вставить("Курс",			Формат(Объект.Курс,"ЧЦ=10; ЧДЦ=4"));
	ДанныеОбъекта.Вставить("Кратность",		Формат(Объект.Кратность,"ЧЦ=10"));
	ДанныеОбъекта.Вставить("Комментарий",	Объект.Комментарий);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция КППолучитьОписаниеОбластейМакетаОфисногоДокумента() Экспорт
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул",		"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижняяЧасть",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаРазделительТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаИтогиПоРазделуТаблицаТовары", "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ИтогиТаблицаТовары",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТоварыТекст",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыНоменклатура",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыНоменклатура",		"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыВсего",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыВсего",			"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОписаниеВарианта",			"Общая");
		
	Возврат ОписаниеОбластей;
	
КонецФункции

// Формирует описание серий и характеристик ТМЦ для печати.
//
// Параметры:
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание серий и характеристик ТМЦ.
//
Функция КППредставлениеСерий(Выборка) 

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат)

КонецФункции // ПредставлениеСерий()

Функция КПВывестиСтрокиВарианта(ТабличныйДокумент, Макет, ВыборкаВариантИд, ЕстьСкидки) Экспорт
	
	// шапка таблицы
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ВыборкаВариантИд.ЕстьСкидка > 0 Тогда
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ИтогоПоРазделу 	= 0;
	ИтогоСумма 		= 0;
	ИтогоСуммаНДС 	= 0;
	ИтогоБезСкидок 	= 0;	
	
	Ном = 0;
	ПерваяСтрока = Истина;
	МассивИтогов = Новый Массив;
	МассивИтоговСкидок = Новый Массив;
	МассивРазделителей = Новый Массив;
	
	ТекРазделитель = Справочники.CRM_Разделители.ПустаяСсылка();
	СтруктураДопИнф = Новый Структура("Характеристика, Серия"); 
	
	ОписаниеВарианта = "";
	
	// СтрокиТаблицы
	ВыборкаЗапасы = ВыборкаВариантИд.Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
		
		ОписаниеВарианта = ВыборкаЗапасы.КомментарийВарианта;
		
		Если ТипЗнч(ВыборкаЗапасы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Ном = Ном + 1;
			// строки номенклатуры
			ОбластьНомера.Параметры.Ном = Ном;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Заполнить(ВыборкаЗапасы);
			
			// +CRM
			ТипНоменклатуры = ВыборкаЗапасы.Номенклатура.ТипНоменклатуры;
			Если Не ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				СтруктураДопИнф.Характеристика = ВыборкаЗапасы.Характеристика;			
				ХарактеристикаНоменклатуры = КППредставлениеСерий(СтруктураДопИнф);
				ОбластьДанных.Параметры.Содержание = ?(ПустаяСтрока(ВыборкаЗапасы.Содержание), ВыборкаЗапасы.Номенклатура.НаименованиеПолное, ВыборкаЗапасы.Содержание) 
													 + ХарактеристикаНоменклатуры;
			КонецЕсли;	
			// -CRM
			
			ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Ложь, , , );
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка = ВыборкаЗапасы.Количество * ВыборкаЗапасы.Цена - ВыборкаЗапасы.Сумма;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаЗапасы.Количество * ВыборкаЗапасы.Цена;
				ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Ложь, , , );
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
				ИтогоБезСкидок = ИтогоБезСкидок + ОбластьСкидок.Параметры.СуммаБезСкидки;
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ВыборкаЗапасы.Сумма;
			ОбластьСуммы.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Ложь, , , );
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			ИтогоСумма = ИтогоСумма + ВыборкаЗапасы.Сумма;
			ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаЗапасы.СуммаНДС;
			
			Если МассивИтогов.Количество() > 0 Тогда
				МассивИтогов[МассивИтогов.Количество() - 1] = МассивИтогов[МассивИтогов.Количество() - 1] + ВыборкаЗапасы.Сумма;
			КонецЕсли;
			Если МассивИтоговСкидок.Количество() > 0 Тогда
				МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1] = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1] + (ВыборкаЗапасы.Количество * ВыборкаЗапасы.Цена - ВыборкаЗапасы.Сумма);
			КонецЕсли;
		Иначе
			Если МассивРазделителей.Количество() > 0 Тогда
				ИтогоПоРазделу = МассивИтогов[МассивИтогов.Количество() - 1];
				ИтогоСкидкаПоРазделу = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1];
				Разделитель = МассивРазделителей[МассивРазделителей.Количество() - 1];
				МассивИтогов.Удалить(МассивИтогов.Количество() - 1);
				МассивИтоговСкидок.Удалить(МассивИтоговСкидок.Количество() - 1);
				МассивРазделителей.Удалить(МассивРазделителей.Количество() - 1);
				Если Разделитель.Итог Тогда
					// Строки итогов по иерархии (итоги).
					ОбластьНомера.Параметры.Ном = "";
					ТабличныйДокумент.Вывести(ОбластьНомера);
					ОбластьДанных.Параметры.Содержание  = "Итого по: " + Строка(Разделитель);
					ОбластьДанных.Параметры.Номенклатура = Разделитель;
					ОбластьДанных.Параметры.Количество = "";
					ОбластьДанных.Параметры.Цена = "";
					ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
					ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина, , , );
					ТабличныйДокумент.Присоединить(ОбластьДанных);
					Если ЕстьСкидки Тогда
						ОбластьСкидок.Параметры.СуммаБезСкидки = СокрЛП(Формат(ИтогоПоРазделу + ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
						ОбластьСкидок.Параметры.Скидка = СокрЛП(Формат(ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
						ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
						ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Истина, , , );
						ТабличныйДокумент.Присоединить(ОбластьСкидок);
					КонецЕсли;
					ОбластьСуммы.Параметры.Сумма = СокрЛП(CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоПоРазделу));
					ОбластьСуммы.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина, , , );
					ТабличныйДокумент.Присоединить(ОбластьСуммы);
					
				КонецЕсли;
			КонецЕсли;
			// Строки разделителей иерархии (заголовки).
			ОбластьНомера.Параметры.Ном = "";
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Содержание  = ВыборкаЗапасы.Номенклатура;
			ОбластьДанных.Параметры.Номенклатура = ВыборкаЗапасы.Номенклатура;
			ОбластьДанных.Параметры.Количество = "";
			ОбластьДанных.Параметры.Цена = "";
			ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
			ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина, , , );
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.СуммаБезСкидки = "";
				ОбластьСкидок.Параметры.Скидка = "";
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = "";
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			МассивИтогов.Добавить(0);
			МассивИтоговСкидок.Добавить(0);
			Если НЕ ТипЗнч(ВыборкаЗапасы.Номенклатура) = Тип("Неопределено") Тогда 
				МассивРазделителей.Добавить(ВыборкаЗапасы.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивИтогов.Количество() > 0 Тогда
		ИтогоПоРазделу = МассивИтогов[МассивИтогов.Количество() - 1];
		ИтогоСкидкаПоРазделу = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1];
		Разделитель = МассивРазделителей[МассивРазделителей.Количество() - 1];
		МассивИтогов.Удалить(МассивИтогов.Количество()-1);
		МассивИтоговСкидок.Удалить(МассивИтоговСкидок.Количество() - 1);
		МассивРазделителей.Удалить(МассивРазделителей.Количество() - 1);
		Если Разделитель.Итог Тогда
			// Последняя строка итогов по иерархии (итоги).
			ОбластьНомера.Параметры.Ном = "";
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Содержание  = "Итого по: " + Строка(Разделитель);
			ОбластьДанных.Параметры.Номенклатура = Разделитель;
			ОбластьДанных.Параметры.Количество = "";
			ОбластьДанных.Параметры.Цена = "";
			ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина, , , );
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.СуммаБезСкидки = СокрЛП(Формат(ИтогоПоРазделу + ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСкидок.Параметры.Скидка = СокрЛП(Формат(ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Истина, , , );
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = СокрЛП(Формат(ИтогоПоРазделу, "ЧЦ=15; ЧДЦ=2"));
			ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина, , , );
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
		КонецЕсли;
	КонецЕсли;
	
	// итоги
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ИтогоБезСкидок;
		ОбластьСкидок.Параметры.ВсегоСкидок = ИтогоБезСкидок - ИтогоСумма;
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоСумма);
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	// итоги НДС
	//Если УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		ТабличныйДокумент.Вывести(ОбластьНомера);
		ОбластьДанных.Параметры.НДС = ?(ВыборкаВариантИд.ЦенаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоСуммаНДС);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
	//КонецЕсли;
	
	// сумма прописью
	
	СуммаКПрописи = ИтогоСумма + ?(ВыборкаВариантИд.ЦенаВключаетНДС, 0, ИтогоСуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + Ном + ", на сумму " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаКПрописи, ВыборкаВариантИд.Валюта);
	ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ВыборкаВариантИд.Валюта);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// заголовок таблицы
	Если ЗначениеЗаполнено(ОписаниеВарианта) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОписаниеВарианта");
		ОбластьМакета.Параметры.ПредставлениеОписания = ОписаниеВарианта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
	
КонецФункции

Процедура КП_ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Коммерческое предложение (Microsoft Word)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложениеMicrosoftWord";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КоммерческоеПредложениеMicrosoftWord";
	КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение (Microsoft Word)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Коммерческое предложение (OpenOffice.org Writer)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложениеOpenOfficeOrgWriter";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КоммерческоеПредложениеOpenOfficeOrgWriter";
	КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение (OpenOffice.org Writer)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Коммерческое предложение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложение";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КоммерческоеПредложение";
	КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Договор (Microsoft Word)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьДоговорMicrosoftWord";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ДоговорMicrosoftWord";
	КомандаПечати.Представление = НСтр("ru = 'Договор (Microsoft Word)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Договор (OpenOffice.org Writer)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьДоговорOpenOfficeOrgWriter";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ДоговорOpenOfficeOrgWriter";
	КомандаПечати.Представление = НСтр("ru = 'Договор (OpenOffice.org Writer)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	//// Комплект документов на принтер
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
	//КомандаПечати.МенеджерПечати = "";
	//КомандаПечати.Идентификатор = "КомплектДокументов";
	//КомандаПечати.СразуНаПринтер = Истина;
	//КомандаПечати.Представление = НСтр("ru = 'Комплект документов на принтер'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Порядок = 1;
	//
	//// Комплект документов с настройкой...
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой";
	//КомандаПечати.МенеджерПечати = "";
	//КомандаПечати.Идентификатор = "КомплектДокументовСНастройкой";
	//КомандаПечати.Представление = НСтр("ru = 'Комплект документов с настройкой...'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Порядок = 2;
	
	//ДобавитьКомандыПечатиДляВнешнихМакетов(КомандыПечати, Метаданные.Документы.КоммерческоеПредложениеКлиенту.ПолноеИмя());
	
КонецПроцедуры

Функция КП_ПолучитьДанныеПечати(знач СтруктураДокументыИВариант, знач МассивИменМакетов) Экспорт
	
	МассивДокументов = СтруктураДокументыИВариант.СоставДокументов;
	
	НомерВарианта = Неопределено;
	
	СтруктураДокументыИВариант.Свойство("НомерВарианта", НомерВарианта);
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, CRM_ОбщегоНазначенияСервер.CRM_ПолучитьДанныеОбъекта(ОбъектСсылка, НомерВарианта));
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "CRM_ПФ_DOC_КоммерческоеПредложение" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_DOC_КоммерческоеПредложение"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC");
		ИначеЕсли ИмяМакета = "CRM_ПФ_ODT_КоммерческоеПредложение" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, УправлениеПечатью.МакетПечатнойФормы("Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_ODT_КоммерческоеПредложение"));
			ТипыМакетов.Вставить(ИмяМакета, "ODT");
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, CRM_МетодыМодулейМенеджеровДокументов.КППолучитьОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

Функция КП_СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, КомплектыПечати, ПараметрыПечати = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ (ПараметрыПечати = Неопределено) И ПараметрыПечати.Свойство("НомерВарианта") Тогда
		НомерВарианта = ПараметрыПечати.НомерВарианта;
	Иначе
		НомерВарианта = Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	
	Если НомерВарианта = Неопределено Тогда	// Печать нескольких документов.
		
		ТекстВременныхТаблиц = "";
		ТекстТаблиц = "";
		
		Для Индекс = 0 По МассивОбъектов.ВГраница() Цикл
			
			ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
			|ВЫБРАТЬ
			|	ДокументЗапасы.Ссылка,
			|	ДокументЗапасы.CRM_ИДВарианта КАК ИДВарианта,
			|	ДокументЗапасы.CRM_Утвержден КАК Утвержден
			|ПОМЕСТИТЬ Временная"+Строка(Индекс)+"
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументЗапасы
			|ГДЕ
			|	ДокументЗапасы.Ссылка = &Ссылка"+Строка(Индекс)+"
			|	И ДокументЗапасы.CRM_Утвержден
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументЗапасы.Ссылка,
			|	ДокументЗапасы.CRM_ИДВарианта,
			|	ДокументЗапасы.CRM_Утвержден КАК Утвержден
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументЗапасы
			|ГДЕ
			|	ДокументЗапасы.Ссылка = &Ссылка"+Строка(Индекс)+"
			|	И ДокументЗапасы.CRM_ИДВарианта = 1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			Если ТекстТаблиц = "" Тогда
				ТекстТаблиц = ТекстТаблиц + "
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Ссылка,
				|	ВложенныйЗапрос.ИДВарианта,
				|	ВложенныйЗапрос.Утвержден
				|ПОМЕСТИТЬ ВариантыИтог";
			Иначе
				ТекстТаблиц = ТекстТаблиц + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Ссылка,
				|	ВложенныйЗапрос.ИДВарианта,
				|	ВложенныйЗапрос.Утвержден";
			КонецЕсли;
			ТекстТаблиц = ТекстТаблиц + "
			|ИЗ
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|		Временная"+Строка(Индекс)+".Ссылка КАК Ссылка,
			|		Временная"+Строка(Индекс)+".ИДВарианта КАК ИДВарианта,
			|		Временная"+Строка(Индекс)+".Утвержден КАК Утвержден
			|	ИЗ
			|		Временная"+Строка(Индекс)+" КАК Временная"+Строка(Индекс)+") КАК ВложенныйЗапрос";
			
			Запрос.УстановитьПараметр("Ссылка"+Строка(Индекс), МассивОбъектов[Индекс]);
		КонецЦикла;
		
		ТекстЗапроса = ТекстВременныхТаблиц + ТекстТаблиц + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументЗапасы.Ссылка КАК Ссылка,
		|	ДокументЗапасы.Ссылка.Организация,
		|	ДокументЗапасы.Ссылка.Организация.Префикс КАК Префикс,
		|	ДокументЗапасы.Ссылка.Дата КАК ДатаДокумента,
		|	ДокументЗапасы.Ссылка.Номер КАК Номер,
		|	ДокументЗапасы.Ссылка.Партнер,
		|	ДокументЗапасы.Ссылка.Валюта,
		|	ДокументЗапасы.Ссылка.ЦенаВключаетНДС,
		|	ДокументЗапасы.Ссылка.СуммаДокумента,
		|	ДокументЗапасы.НомерСтроки КАК НомерСтроки,
		|	ДокументЗапасы.Номенклатура,
		|	ДокументЗапасы.Характеристика,
		|	ДокументЗапасы.Количество,
		|	ДокументЗапасы.ЕдиницаИзмерения,
		|	ДокументЗапасы.Цена,
		|	ДокументЗапасы.ПроцентРучнойСкидки,
		|	ДокументЗапасы.Сумма,
		|	ДокументЗапасы.СтавкаНДС,
		|	ДокументЗапасы.СуммаНДС,
		|	ДокументЗапасы.Всего,
		|	ДокументЗапасы.Содержание,
		|	ДокументЗапасы.CRM_ИДВарианта КАК ИДВарианта,
		|	ДокументЗапасы.CRM_ИмяВарианта КАК ИмяВарианта,
		|	ДокументЗапасы.CRM_Утвержден КАК Утвержден,
		|	ВЫБОР
		|		КОГДА ДокументЗапасы.ПроцентРучнойСкидки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьСкидка,
		|	ДокументЗапасы.CRM_ЭтоРазделитель КАК ЭтоРазделитель,
		|	ДокументКомментарииВариантов.КомментарийВарианта
		|ИЗ
		|	ВариантыИтог КАК ВариантыИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументЗапасы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.CRM_КомментарииВариантов КАК ДокументКомментарииВариантов
		|			ПО ДокументЗапасы.Ссылка = ДокументКомментарииВариантов.Ссылка
		|				И ДокументЗапасы.CRM_ИДВарианта = ДокументКомментарииВариантов.ИДВарианта
		|		ПО ВариантыИтог.Ссылка = ДокументЗапасы.Ссылка
		|			И ВариантыИтог.ИДВарианта = ДокументЗапасы.CRM_ИДВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(ЕстьСкидка),
		|	МАКСИМУМ(ИмяВарианта)
		|ПО
		|	Ссылка,
		|	Утвержден,
		|	ИДВарианта";
		
	ИначеЕсли НомерВарианта = 0 Тогда		// Печать всех вариантов документа.
		ТекстЗапроса = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	ДокументЗапасы.Ссылка КАК Ссылка,
		|	ДокументЗапасы.Ссылка.Организация,
		|	ДокументЗапасы.Ссылка.Организация.Префикс КАК Префикс,
		|	ДокументЗапасы.Ссылка.Дата КАК ДатаДокумента,
		|	ДокументЗапасы.Ссылка.Номер КАК Номер,
		|	ДокументЗапасы.Ссылка.Партнер,
		|	ДокументЗапасы.Ссылка.Валюта,
		|	ДокументЗапасы.Ссылка.ЦенаВключаетНДС,
		|	ДокументЗапасы.Ссылка.СуммаДокумента,
		|	ДокументЗапасы.НомерСтроки КАК НомерСтроки,
		|	ДокументЗапасы.Номенклатура,
		|	ДокументЗапасы.Характеристика,
		|	ДокументЗапасы.Количество,
		|	ДокументЗапасы.ЕдиницаИзмерения,
		|	ДокументЗапасы.Цена,
		|	ДокументЗапасы.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ДокументЗапасы.Сумма,
		|	ДокументЗапасы.СтавкаНДС,
		|	ДокументЗапасы.СуммаНДС,
		|	ДокументЗапасы.Всего,
		|	ДокументЗапасы.Содержание,
		|	ДокументЗапасы.CRM_ИДВарианта КАК ИДВарианта,
		|	ДокументЗапасы.CRM_ИмяВарианта КАК ИмяВарианта,
		|	ДокументЗапасы.CRM_Утвержден КАК Утвержден,
		|	ВЫБОР
		|		КОГДА ДокументЗапасы.ПроцентРучнойСкидки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьСкидка,
		|	ДокументЗапасы.CRM_ЭтоРазделитель КАК ЭтоРазделитель,
		|	ДокументКомментарииВариантов.КомментарийВарианта
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.CRM_КомментарииВариантов КАК ДокументКомментарииВариантов
		|		ПО ДокументЗапасы.Ссылка = ДокументКомментарииВариантов.Ссылка
		|			И ДокументЗапасы.CRM_ИДВарианта = ДокументКомментарииВариантов.ИДВарианта
		|ГДЕ
		|	ДокументЗапасы.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Утвержден УБЫВ,
		|	ИДВарианта
		|ИТОГИ
		|	СУММА(ЕстьСкидка),
		|	МАКСИМУМ(ИмяВарианта)
		|ПО
		|	Ссылка,
		|	Утвержден,
		|	ИДВарианта";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
	Иначе									// Печать конткретного варианта документа.
		ТекстЗапроса = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	ДокументЗапасы.Ссылка КАК Ссылка,
		|	ДокументЗапасы.Ссылка.Организация,
		|	ДокументЗапасы.Ссылка.Организация.Префикс КАК Префикс,
		|	ДокументЗапасы.Ссылка.Дата КАК ДатаДокумента,
		|	ДокументЗапасы.Ссылка.Номер КАК Номер,
		|	ДокументЗапасы.Ссылка.Партнер,
		|	ДокументЗапасы.Ссылка.Валюта,
		|	ДокументЗапасы.Ссылка.ЦенаВключаетНДС,
		|	ДокументЗапасы.Ссылка.СуммаДокумента,
		|	ДокументЗапасы.НомерСтроки КАК НомерСтроки,
		|	ДокументЗапасы.Номенклатура,
		|	ДокументЗапасы.Характеристика,
		|	ДокументЗапасы.Количество,
		|	ДокументЗапасы.ЕдиницаИзмерения,
		|	ДокументЗапасы.Цена,
		|	ДокументЗапасы.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ДокументЗапасы.Сумма,
		|	ДокументЗапасы.СтавкаНДС,
		|	ДокументЗапасы.СуммаНДС,
		|	ДокументЗапасы.Всего,
		|	ДокументЗапасы.Содержание,
		|	ДокументЗапасы.CRM_ИДВарианта КАК ИДВарианта,
		|	ДокументЗапасы.CRM_ИмяВарианта КАК ИмяВарианта,
		|	ДокументЗапасы.CRM_Утвержден КАК Утвержден,
		|	ВЫБОР
		|		КОГДА ДокументЗапасы.ПроцентРучнойСкидки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьСкидка,
		|	ДокументЗапасы.CRM_ЭтоРазделитель КАК ЭтоРазделитель,
		|	ДокументКомментарииВариантов.КомментарийВарианта
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.CRM_КомментарииВариантов КАК ДокументКомментарииВариантов
		|		ПО ДокументЗапасы.Ссылка = ДокументКомментарииВариантов.Ссылка
		|			И ДокументЗапасы.CRM_ИДВарианта = ДокументКомментарииВариантов.ИДВарианта
		|ГДЕ
		|	ДокументЗапасы.Ссылка В(&МассивОбъектов)
		|	И ДокументЗапасы.CRM_ИДВарианта = &ИДВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(ЕстьСкидка)
		|ПО
		|	Ссылка,
		|	Утвержден,
		|	ИДВарианта";
		
		Запрос.УстановитьПараметр("МассивОбъектов"	,МассивОбъектов);
		Запрос.УстановитьПараметр("ИДВарианта"		,НомерВарианта);
	КонецЕсли;
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументЗапасы.ЕдиницаИзмерения", "ДокументЗапасы.Упаковка КАК ЕдиницаИзмерения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументЗапасы.Всего", "ДокументЗапасы.СуммаСНДС КАК Всего");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументЗапасы.Содержание", "ДокументЗапасы.ТекстовоеОписание КАК Содержание");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	//Макет = ПолучитьМакет("ПФ_MXL_КоммерческоеПредложение");
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_MXL_КоммерческоеПредложение");
		
		СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаДокументов.Организация, ВыборкаДокументов.ДатаДокумента);
		СведенияОбКонтрагенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаДокументов.Партнер, ВыборкаДокументов.ДатаДокумента, ,);
		
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Константы", "CRM_ПечататьНомераДокументовБезПрефиксов") Тогда
			ФлагУдалитьПрефикс = Константы["CRM_ПечататьНомераДокументовБезПрефиксов"].Получить();
		Иначе
			ФлагУдалитьПрефикс = Ложь;
		КонецЕсли;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДокументов.Номер, ФлагУдалитьПрефикс, ФлагУдалитьПрефикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Коммерческое предложение № "
												+ НомерДокумента
												+ " от "
												+ Формат(ВыборкаДокументов.ДатаДокумента, "ДФ=""dd MMMM yyyy""");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// поставщик и покупатель
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = СведенияОбОрганизации.ПолноеНаименование;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = СведенияОбКонтрагенте.ПолноеНаименование;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаВариантУтвержен = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВариантУтвержен.Следующий() Цикл
			ВыборкаВариантИд = ВыборкаВариантУтвержен.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВариантИд.Следующий() Цикл
				Если НомерВарианта = 0 Тогда // Все варианты
					Если ВыборкаВариантИд.Утвержден Тогда    
						ДобавитьКОбластиВариант = " (утв.)";
					Иначе
						ДобавитьКОбластиВариант = ""; 
					КонецЕсли; 
					
					// область варианта
					ОбластьВарианта = Макет.ПолучитьОбласть("Вариант");
					ИмяВариантаПоУмолчанию = "Вариант " + ВыборкаВариантИд.ИДВарианта;
					ОбластьВарианта.Параметры.Вариант = ИмяВариантаПоУмолчанию + ?(ИмяВариантаПоУмолчанию = ВыборкаВариантИд.ИмяВарианта, "", " """ + ВыборкаВариантИд.ИмяВарианта + """") + ДобавитьКОбластиВариант;
					ТабличныйДокумент.Вывести(ОбластьВарианта);
				КонецЕсли;
					
				CRM_МетодыМодулейМенеджеровДокументов.КПВывестиСтрокиВарианта(ТабличныйДокумент, Макет, ВыборкаВариантИд, ?(ВыборкаВариантИд.ЕстьСкидка>0,Истина,Ложь));
					
			КонецЦикла;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументов.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
КонецФункции

#КонецОбласти
