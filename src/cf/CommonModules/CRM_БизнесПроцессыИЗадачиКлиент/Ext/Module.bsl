////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-процессы и задачи".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ВыбораАдресации(Знач Результат, Знач Параметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "Пользователь" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		//ПараметрыФормы.Вставить("ВставатьНаТекущегоПользователя", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПользователиКлиентСервер.ТекущийПользователь());
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбораАдресацииЗавершение", ЭтотОбъект, Новый Структура("ВариантВыбора, Параметры", Результат, Параметры));
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,Параметры.ВладелецФорма,,,, ОписаниеОповещения);
	
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбораАдресацииЗавершение", ЭтотОбъект, Новый Структура("ВариантВыбора, Параметры", Результат, Параметры));
		ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора",ПараметрыФормы,Параметры.ВладелецФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбораАдресацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВариантВыбора = "Пользователь" Тогда
		
		МассивПеренаправленныхЗадач = Неопределено;
		ЗадачиПеренаправлены = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
			ДополнительныеПараметры.Параметры.МассивЗадач, Результат, Ложь, МассивПеренаправленныхЗадач);
	Иначе
		
		МассивПеренаправленныхЗадач = Неопределено;
		ЗадачиПеренаправлены = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
			ДополнительныеПараметры.Параметры.МассивЗадач, Результат, Ложь, МассивПеренаправленныхЗадач);
	КонецЕсли;
	Оповестить("ЗадачаИзменена"			, Новый Структура("МассивЗадач, ОбновлятьКалендарь", ДополнительныеПараметры.Параметры.МассивЗадач, 
			?(ДополнительныеПараметры.Параметры.ВладелецФорма.Параметры.Свойство("ОбновлятьКалендарь"), ДополнительныеПараметры.Параметры.ВладелецФорма.Параметры.ОбновлятьКалендарь, 0)));
	Оповестить("ЗадачаПеренаправлена"	, Новый Структура("МассивЗадач, ОбновлятьКалендарь", ДополнительныеПараметры.Параметры.МассивЗадач, 2));
	Оповестить("Запись_ЗадачаИсполнителя");
	
КонецПроцедуры

// Открыть форму для перенаправления одной или нескольких задач другому исполнителю.
//
// Параметры:
//  МассивЗадач  - Массив - список задач, которые необходимо перенаправить.
//  ВладелецФорма - УправляемаяФорма - форма, которая должна быть владельцем для открываемой
//                                     формы перенаправления задач.
//
Процедура ПеренаправитьЗадачи(МассивЗадач, ВладелецФорма, Исполнитель = Неопределено) Экспорт

	Если МассивЗадач = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны задачи.'"));
		Возврат;
	КонецЕсли;
	
	ПричинаОтказа = "";
	ЗадачиМогутБытьПеренаправлены = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
		МассивЗадач, Неопределено, Истина,, ПричинаОтказа);
	Если НЕ ЗадачиМогутБытьПеренаправлены И МассивЗадач.Количество() = 1 Тогда
		ПоказатьПредупреждение(, ПричинаОтказа);
		Возврат;
	КонецЕсли;
		
	Если Исполнитель = Неопределено Тогда
		
		ТекстВопроса = НСтр("ru = 'Перенаправить задачу на:'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Пользователь"	, "Пользователя");
		СписокКнопок.Добавить("Роль"			, "Роль исполнителя");
		СписокКнопок.Добавить("Отмена"			, "Отмена");
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("МассивЗадач"		, МассивЗадач);
		ПараметрыОповещения.Вставить("ВладелецФорма"	, ВладелецФорма);
		
		Оповещение = Новый ОписаниеОповещения("ВыбораАдресации", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Пользователь", НСтр("ru = 'Адресация задачи'"));
	Иначе
		Результат = Исполнитель;
		
		МассивПеренаправленныхЗадач = Неопределено;
		ЗадачиПеренаправлены = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
			МассивЗадач, Результат, Ложь, МассивПеренаправленныхЗадач);
		Оповестить("ЗадачаИзменена", Новый Структура("МассивЗадач, ОбновлятьКалендарь", МассивЗадач, ВладелецФорма.Параметры.ОбновлятьКалендарь));
		Оповестить("ЗадачаПеренаправлена", Новый Структура("МассивЗадач, ОбновлятьКалендарь", МассивЗадач, 2));
	КонецЕсли;
	
КонецПроцедуры

// Открыть форму для ввода новой задачи.
//
// Параметры:
//  ФормаВладелец  - УправляемаяФорма - форма, которая должна быть владельцем для открываемой.
//  ПараметрыФормы - Структура - параметры открываемой формы.
//
Процедура СоздатьЛичнуюЗадачу(Знач ФормаВладелец = Неопределено, Знач ПараметрыФормы = Неопределено) Экспорт
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи", ПараметрыФормы, ФормаВладелец);
КонецПроцедуры	

Процедура ОбработкаКомандыПеренаправить(ПараметрКоманды, ПараметрыВыполненияКоманды) экспорт
	
	Если ПараметрКоманды = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")  Тогда
		Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПараметрКоманды[0], "Выполнена") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя перенаправить выполненную задачу!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды[0]) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		СтатусПисьма = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПараметрКоманды[0], "СтатусПисьма");
		Если НЕ (СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик")) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Нельзя изменять ответственного для отправленных писем.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	МассивИзбранныхПолучателей = CRM_БизнесПроцессыИЗадачиСервер.ПолучитьИзбранныхПолучателей(ПараметрКоманды[0]);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, Новый Структура("ПараметрКоманды, ПараметрыВыполненияКоманды", ПараметрКоманды, ПараметрыВыполненияКоманды));
	СписокВыбора = Новый СписокЗначений;
	Для Каждого ЭлементМассива Из МассивИзбранныхПолучателей Цикл
		СписокВыбора.Добавить(ЭлементМассива, Строка(ЭлементМассива));
	КонецЦикла;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"), НСтр("ru = 'Выбрать пользователя ...'"), , БиблиотекаКартинок.Лупа);
	Если ТипЗнч(ПараметрКоманды[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И НЕ CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПараметрКоманды[0], "CRM_Личная") Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка"), НСтр("ru = 'Выбрать роль исполнителя ...'"), , БиблиотекаКартинок.Лупа);
	КонецЕсли;
	Если СписокВыбора.Количество() > 1 Тогда
		Элемент = ПараметрыВыполненияКоманды.Источник.ТекущийЭлемент;
		Если ТипЗнч(Элемент) <> Тип("КнопкаФормы") Тогда
			Кнопка = ПараметрыВыполненияКоманды.Источник.Элементы.Найти("Перенаправить");
			Если Кнопка <> Неопределено Тогда
				Если Кнопка.Вид <> ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
					Элемент = Кнопка;
				Иначе
					Элемент = Кнопка.Родитель;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИзМенюЗавершение", ЭтотОбъект, ОписаниеОповещения);
		ПараметрыВыполненияКоманды.Источник.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Элемент);
	Иначе
		ПоказатьОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьОткрытьФорму(ИмяФормы, ОписаниеОповещения)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПользователиКлиентСервер.ТекущийПользователь());
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,,ОписаниеОповещения);
КонецПроцедуры

Процедура ОбработкаКомандыЗавершение(Ответственный, ДополнительныеПараметры) экспорт
	
	Если Ответственный = Неопределено Тогда Возврат; КонецЕсли;
	Если ТипЗнч(ДополнительныеПараметры.ПараметрКоманды[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
		Попытка
			ЗадачиПеренаправлены = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
				ДополнительныеПараметры.ПараметрКоманды, Ответственный, Ложь, );
			ТекстОшибки = "";
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
		
	Иначе		
		
		ТекстОшибки = CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(ДополнительныеПараметры.ПараметрКоманды, Ответственный);
		
	КонецЕсли;
	Если ТекстОшибки <> "" Тогда
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	Попытка
		Если Найти(ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.ИмяФормы, "ФормаСписка") = 0 
			И Найти(ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.ИмяФормы, "ФормаМессенджера") = 0 
			И Найти(ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.ИмяФормы, "CRM_МенеджерПочты") = 0 
			И Найти(ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.ИмяФормы, "CRM_ФормаМоиЗадачи") = 0 Тогда
			
			Если ТипЗнч(ДополнительныеПараметры.ПараметрКоманды[0]) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда //Павелко, CRM-324, 13.02.2020
				Оповестить("ИзмененоМероприятие",ДополнительныеПараметры.ПараметрКоманды[0]);	
			КонецЕсли;
			
			ФормаДокумента = ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник;
			ФормаДокумента.Закрыть();
			ФормаДокумента.ВладелецФормы.Обновить();	
			
		ИначеЕсли Найти(ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.ИмяФормы, "ФормаСписка") <> 0 
			ИЛИ Найти(ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.ИмяФормы, "CRM_ФормаМоиЗадачи") <> 0 Тогда
			ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.Элементы.Список.Обновить();
		Иначе	
			Оповестить("УстановленНовыйОтветственный", ДополнительныеПараметры.ПараметрКоманды[0]);
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура ОбработкаВыбораИзМенюЗавершение(ВыбранныйЭлемент, ОписаниеОповещения) экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	Ответственный = ВыбранныйЭлемент.Значение;
	Если Ответственный = Неопределено Тогда Возврат; КонецЕсли;
	Если Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") Тогда	
		ПоказатьОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ОписаниеОповещения);
	ИначеЕсли Ответственный = ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка") Тогда	
		ПоказатьОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", ОписаниеОповещения);
	Иначе
		ОбработкаКомандыЗавершение(Ответственный, ОписаниеОповещения.ДополнительныеПараметры);		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Открыть форму выполнения задачи, которую предоставляет бизнес-процесс.  
//
// Параметры:
//  ЗадачаСсылка       - ЗадачаИсполнителяСсылка  - задача.
//
// Возвращаемое значение:
//   Булево   - Истина, если форма выполнения задачи была найдена и открыта.
//
Функция ОткрытьФормуВыполненияЗадачи(Знач ЗадачаСсылка, Знач ИзКалендаря = 0) Экспорт
	
	ПараметрыФормы = CRM_БизнесПроцессыИЗадачиВызовСервера.ФормаВыполненияЗадачи(ЗадачаСсылка, ИзКалендаря);
	ИмяФормыВыполненияЗадачи = "";
	Результат = ПараметрыФормы.Свойство("ИмяФормы", ИмяФормыВыполненияЗадачи);
	Если Результат Тогда
		ОткрытьФорму(ИмяФормыВыполненияЗадачи, ПараметрыФормы.ПараметрыФормы);
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

// Записать и закрыть форму выполнения задачи.
//
// Параметры:
//  Форма  - УправляемаяФорма - форма выполнения задачи.
//  ВыполнитьЗадачу  - Булево - задача записывается в режиме выполнения.
//  ПараметрыОповещения - Структура - дополнительные параметры оповещения.
//
// Возвращаемое значение:
//   Булево   - Истина, если запись прошла успешно.
//
Функция ЗаписатьИЗакрытьВыполнить(Форма, ВыполнитьЗадачу = Ложь, ПараметрыОповещения = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	НовыйОбъект = Форма.Объект.Ссылка.Пустая();
	ТекстОповещения = "";
	Если ПараметрыОповещения = Неопределено Тогда
		ПараметрыОповещения = Новый Структура;
	КонецЕсли;
	Если НЕ Форма.НачальныйПризнакВыполнения И ВыполнитьЗадачу Тогда
		Если НЕ Форма.Записать(Новый Структура("ВыполнитьЗадачу", Истина)) Тогда
			Возврат Ложь;
		КонецЕсли;
		ТекстОповещения = НСтр("ru = 'Задача выполнена'");
	Иначе
		Если НЕ Форма.Записать() Тогда
			Возврат Ложь;
		КонецЕсли;
		ТекстОповещения = ?(НовыйОбъект, НСтр("ru = 'Задача создана'"), НСтр("ru = 'Задача изменена'"));
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ОбновлятьКалендарь") Тогда
		ПараметрыОповещения.Вставить("ОбновлятьКалендарь", Форма.Параметры.ОбновлятьКалендарь);
	КонецЕсли;
	
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыОповещения, Форма.Объект.Ссылка);
	ПоказатьОповещениеПользователя(ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
		Строка(Форма.Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	Форма.Закрыть();
	Возврат Истина;
	
КонецФункции

// Отмечает указанные задачи как принятые к исполнению.
//
Процедура ПринятьЗадачиКИсполнению(Знач МассивЗадач) Экспорт
	
	Если МассивЗадач.Количество() = 1 Тогда
		
		Задача = МассивЗадач[0];
		
		Если ТипЗнч(Задача) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			МассивЗадач = Новый Массив;
			
		Иначе
			
			ЗадачаПринятаКИсполнению = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Задача, "ПринятаКИсполнению");
			
			Если ЗадачаПринятаКИсполнению Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПринятьЗадачиКИсполнениюОтменаПослеВопроса", БизнесПроцессыИЗадачиКлиент, МассивЗадач);
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Задача уже принята к исполнению. Отменить?'"), РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ПринятьЗадачиКИсполнению(МассивЗадач);
	Если МассивЗадач.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;	
	
	ТипЗначенияЗадачи = Неопределено;
	Для каждого Задача Из МассивЗадач Цикл
		Если ТипЗнч(Задача) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
			ТипЗначенияЗадачи = ТипЗнч(Задача);
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Если ТипЗначенияЗадачи <> Неопределено Тогда
		ОповеститьОбИзменении(ТипЗначенияЗадачи);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПринятьЗадачиКИсполнениюОтменаПослеВопроса(Ответ, МассивЗадач) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач);
	КонецЕсли;
	
КонецПроцедуры

// Отмечает указанную задачу как принятую к исполнению.
//
Процедура ПринятьЗадачуКИсполнению(Форма, ТекущийПользователь) Экспорт
	
	Если ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("Ссылка")
		И ТипЗнч(Форма.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Форма.Объект.ПринятаКИсполнению = Истина;
		
		// ДатаПринятияКИсполнению устанавливается пустой - она будет проинициализирована 
		// текущей датой сеанса перед записью самой  задачи.
		//Форма.Объект.ДатаПринятияКИсполнению = Дата('00010101');
		Форма.Объект.ДатаПринятияКИсполнению = ТекущаяДата();
		// Условие закомментировано по задаче В000195413
		//Если НЕ ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
			Форма.Объект.Исполнитель = ТекущийПользователь;
		//КонецЕсли;
		
		ОчиститьСообщения();
		Форма.Записать();
		//ОбновитьДоступностьКомандПринятияКИсполнению(Форма);
		ОповеститьОбИзменении(Форма.Объект.Ссылка);
		
		CRM_БизнесПроцессыСервер.ЗафиксироватьИсполнителяЭтапаПоручения(Форма.Ссылка, ТекущийПользователь);
	Иначе
		
		Форма.Объект.ПринятаКИсполнению = Истина;
		Форма.Объект.ДатаПринятияКИсполнению = ТекущаяДата();
		// Условие закомментировано по задаче В000195413
		//Если НЕ ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
			Форма.Объект.Исполнитель = ТекущийПользователь;
		//КонецЕсли;
		
		ДатаПринятияКИсполнениюСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(Форма.Объект.ДатаПринятияКИсполнению);
		
		Форма.Объект.CRM_ПоследнееДействиеСтрокой = ДатаПринятияКИсполнениюСтрокой+" "+НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь);
		
		Если НЕ Форма.Объект.РезультатВыполнения = "" Тогда
			Форма.Объект.РезультатВыполнения = "
			|"+ДатаПринятияКИсполнениюСтрокой+" "+НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь) + "
			|
			|" + Форма.Объект.РезультатВыполнения;
		Иначе
			Форма.Объект.РезультатВыполнения = ДатаПринятияКИсполнениюСтрокой +" "+ НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь);
		КонецЕсли;
		
		ОчиститьСообщения();
		Форма.Записать();
		ОповеститьОбИзменении(Форма.Объект.Ссылка);
		
		CRM_БизнесПроцессыСервер.ЗафиксироватьИсполнителяЭтапаПоручения(Форма.Объект.Ссылка, ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

// Отмечает указанную задачу как не принятую к исполнению.
//
Процедура ОтменитьПринятиеЗадачиКИсполнению(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("Ссылка")
		И ТипЗнч(Форма.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Форма.Объект.ПринятаКИсполнению = Ложь;
		Форма.Объект.ДатаПринятияКИсполнению = "00010101000000";
		Если Не Форма.Объект.РольИсполнителя.Пустая() Тогда
			Форма.Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЕсли;
		
		ОчиститьСообщения();
		Форма.Записать();
		//ОбновитьДоступностьКомандПринятияКИсполнению(Форма);
		ОповеститьОбИзменении(Форма.Объект.Ссылка);
	Иначе
		ТекущийПользователь = Форма.Объект.Исполнитель;
		
		Форма.Объект.ПринятаКИсполнению = Ложь;
		Форма.Объект.ДатаПринятияКИсполнению = "00010101000000";
		Если Не Форма.Объект.РольИсполнителя.Пустая() Тогда
			Форма.Объект.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЕсли;
		
		ДатаПринятияКИсполнениюСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ТекущаяДата());
		
		Форма.Объект.CRM_ПоследнееДействиеСтрокой = ДатаПринятияКИсполнениюСтрокой+" "+НСтр("ru = 'Отмена принятия к исполнению -> '") + Строка(ТекущийПользователь);
		
		Если НЕ Форма.Объект.РезультатВыполнения = "" Тогда
			Форма.Объект.РезультатВыполнения = "
			|"+ДатаПринятияКИсполнениюСтрокой+" "+НСтр("ru = 'Отмена принятия к исполнению -> '") + Строка(ТекущийПользователь) + "
			|
			|"+ Форма.Объект.РезультатВыполнения;
		Иначе
			Форма.Объект.РезультатВыполнения = ДатаПринятияКИсполнениюСтрокой +" "+ НСтр("ru = 'Отмена принятия к исполнению -> '") + Строка(ТекущийПользователь);
		КонецЕсли;
		
		// ++ VOG Солодов В.В. 29.08.2019 task 477
		Если Форма.Объект.РольИсполнителя = ПредопределенноеЗначение("Справочник.РолиИсполнителей.вогЗадачиПодразделения") Тогда
			Подразделение = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");
			CRM_БизнесПроцессыСервер.ЗафиксироватьИсполнителяЭтапаПоручения(Форма.Объект.Ссылка, Подразделение);
		КонецЕсли;
		// -- VOG Солодов В.В. 29.08.2019
		
		// ++ VOG Солодов В.В. 01.04.2020 CRM-468
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТаблицаРеквизитовТочкиМаршрута") Тогда
			Форма.ЗаполнитьЗначенияРеквизитовПоТочкеМаршрута();
		КонецЕсли;
		// -- VOG Солодов В.В. 01.04.2020
		
		ОчиститьСообщения();
		Форма.Записать();
		ОповеститьОбИзменении(Форма.Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПоручение(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	СтруктураОснования = Новый Структура("Основание,КартаМаршрута", ПараметрКоманды, ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	Если ТипЗнч(ПараметрКоманды) = Тип("СправочникСсылка.Пользователи") Тогда
		ПараметрыФормы.Вставить("Исполнитель", ПараметрКоманды);
	КонецЕсли;				
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения",ПараметрыФормы,ПараметрыВыполненияКоманды.Источник,ПараметрыВыполненияКоманды.Уникальность);

КонецФункции // CRM_СоздатьПоручение()

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Стандартный обработчик Выбор для списков задач.
// Для вызова из обработчика события таблицы формы Выбор.
//
// Параметры:
//   аналогичны параметрам обработчика таблицы формы Выбор.
//
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;	
	КонецЕсли;
	СтандартнаяОбработка = НЕ ОткрытьФормуВыполненияЗадачи(ВыбраннаяСтрока);
	
КонецПроцедуры

// Стандартный обработчик ПередНачаломИзменения для списков задач.
// Для вызова из обработчика события таблицы формы ПередНачаломИзменения.
//
// Параметры:
//   аналогичны параметрам обработчика таблицы формы ПередНачаломИзменения.
//
Процедура СписокЗадачПередНачаломИзменения(Элемент, Отказ) Экспорт
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОткрытьФормуВыполненияЗадачи(Элемент.ТекущаяСтрока) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытий

Процедура ЗадачаИсполнителя_Выполнено_ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	бГрупповаяОбработка = (ПараметрКоманды.Количество() > 1);
	
	ОчиститьСообщения();
	Для Каждого Задача Из ПараметрКоманды Цикл
	
		Если Не ЗначениеЗаполнено(Задача) Или ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = CRM_БизнесПроцессыИЗадачиВызовСервера.ОпределитьПринадлежностьЗадачи(Задача);
		Если СтруктураДанных.Свойство("ЕстьПодчиненныеЗадачи") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'У задачи'") + " """ + Строка(Задача) + """ "
				+ НСтр("ru = 'есть подчиненные задачи, задача не будет выполнена!'");
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		Если СтруктураДанных.Тип = 1 И НЕ СтруктураДанных.Выполнена Тогда
			// Получим варианты выполнения задачи, если они есть (когда после точки действия задачи идет точка выбора варианта
			// или условия).
			ВариантВыполнения = Неопределено;
			СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
			Если СтруктураВариантовВыполнения.СписокВариантов.Количество() > 0 Тогда
				Если бГрупповаяОбработка Тогда
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Задача пропущена'"),
						ПолучитьНавигационнуюСсылку(Задача),
						НСтр("ru = 'Невозможна групповая обработка: '") + Строка(Задача));
					//
					Продолжить;
				Иначе
					ПараметрыФормы = Новый Структура("Ключ",Задача);
					ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачи",ПараметрыФормы,ПараметрыВыполненияКоманды.Источник);
					Продолжить;;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДанных.Вставить("Задача", Задача);
			СтруктураДанных.Вставить("ПараметрКоманды", ПараметрКоманды);
			СтруктураДанных.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
			СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Задача);
			Если СписокТочекМаршрута.Количество() > 0 Тогда
				Если бГрупповаяОбработка Тогда
					ПоказатьОповещениеПользователя(
					НСтр("ru = 'Задача пропущена'"),
					ПолучитьНавигационнуюСсылку(Задача),
					НСтр("ru = 'Невозможна групповая обработка: '") + Строка(Задача));
					//
					Продолжить;
				Иначе
					ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", СтруктураДанных.БизнесПроцесс, СписокТочекМаршрута);
					ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКомандыПродолжение", ЭтотОбъект, СтруктураДанных);
					ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ОбработкаКомандыПродолжение(Истина, СтруктураДанных);
			Возврат;
		ИначеЕсли СтруктураДанных.Тип = 0 Тогда
			БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача, Истина);
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Задача выполнена'"),
				ПолучитьНавигационнуюСсылку(Задача),
				Строка(Задача));
				
			Если ЗначениеЗаполнено(СтруктураДанных.Предмет) И ТипЗнч(СтруктураДанных.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				
				УчетнаяЗапись = CRM_УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьПоПисьму(СтруктураДанных.Предмет);
				ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",Новый Структура("Ключ",СтруктураДанных.Предмет)); 
				Если НЕ (ФормаПисьма = Неопределено) Тогда
					ДополнительныеПараметры = Новый Структура("СтруктураДанных, ПараметрКоманды, ФормаПисьма", СтруктураДанных, ПараметрКоманды, ФормаПисьма);
					ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТипОснованияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись, ФормаПисьма.Папка, ОписаниеОповещения);
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Предмет) И ТипЗнч(СтруктураДанных.Предмет) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
				ФормаДокумента = ПолучитьФорму("Документ.УдалитьCRM_Событие.Форма.ФормаДокумента",Новый Структура("Ключ",СтруктураДанных.Предмет)); 
				Если бГрупповаяОбработка Тогда
					Ответ = КодВозвратаДиалога.Да;
				Иначе
					ТипСостоянияСобытия = CRM_БизнесПроцессыИЗадачиВызовСервера.ЗначениеРеквизитаОбъекта(ФормаДокумента.Объект.СостояниеСобытия, "ТипСостояния");
					Если	ТипСостоянияСобытия <> ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Завершено")
						И	ТипСостоянияСобытия <> ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено") Тогда
						//
						ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКомандыЗавершениеУдалитьCRM_Событие", ЭтотОбъект, ДополнительныеПараметры);
						ПоказатьВопрос(ОписаниеОповещения, "Завершить связанное событие?", РежимДиалогаВопрос.ДаНет);
						Возврат;
					Иначе
						Ответ = КодВозвратаДиалога.Нет;
						ОбработкаКомандыЗавершениеУдалитьCRM_Событие(Ответ, ДополнительныеПараметры);
						Возврат;
					КонецЕсли;
				КонецЕсли;
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Если ФормаДокумента.Открыта() Тогда
						ФормаДокумента.Объект.СостояниеСобытия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
						Попытка
							ФормаДокумента.Записать();
							ФормаДокумента.Закрыть();
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить состояние, вероятно событие заблокировано: '") + Строка(СтруктураДанных.Предмет));
						КонецПопытки;
					Иначе
						CRM_БизнесПроцессыИЗадачиВызовСервера.ИзменитьСобытие(СтруктураДанных.Предмет);	
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Предмет) И ТипЗнч(СтруктураДанных.Предмет) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
				ФормаСправочник = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаОбъекта", Новый Структура("Ключ",СтруктураДанных.Предмет)); 
				Если ФормаСправочник.Открыта() Тогда
					ФормаСправочник.Объект.Завершено = Истина;
					Попытка
						ФормаСправочник.Записать();
						ФормаСправочник.Закрыть();
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить состояние, вероятно событие заблокировано: '") + Строка(СтруктураДанных.Предмет));
					КонецПопытки;
				Иначе
					CRM_БизнесПроцессыИЗадачиВызовСервера.ИзменитьМаркетинговоеМероприятие(СтруктураДанных.Предмет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Оповестить("Запись_ЗадачаИсполнителя", Новый Структура("Выполнена, ОбновлятьКалендарь", Истина, 1), ПараметрКоманды);
	
КонецПроцедуры

Процедура ОбработкаКомандыЗавершениеУдалитьCRM_Событие(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.ФормаДокумента.Открыта() Тогда
			ДополнительныеПараметры.ФормаДокумента.Объект.СостояниеСобытия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
			Попытка
				ДополнительныеПараметры.ФормаДокумента.Записать();
				ДополнительныеПараметры.ФормаДокумента.Закрыть();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить состояние, вероятно событие заблокировано: '") + Строка(ДополнительныеПараметры.СтруктураДанных.Предмет));
			КонецПопытки;
		Иначе
			CRM_БизнесПроцессыИЗадачиВызовСервера.ИзменитьСобытие(ДополнительныеПараметры.СтруктураДанных.Предмет);	
		КонецЕсли;
	КонецЕсли;
	Оповестить("Запись_ЗадачаИсполнителя", Новый Структура("Выполнена, ОбновлятьКалендарь", Истина, 1), ДополнительныеПараметры.ПараметрКоманды);
КонецПроцедуры

Процедура ОбработкаКомандыПродолжение(Результат, СтруктураДанных) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Проверим не требуется ли создать что-либо, для завершения задачи.
	МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(СтруктураДанных.Задача);
	Если МассивОшибок.Количество() > 0 Тогда
		Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(СтруктураДанных.БизнесПроцесс, СтруктураДанных.ТочкаМаршрута, СтруктураДанных.ВариантВыполнения) Тогда
		
		ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",, СтруктураДанных.Источник);
		ФормаДосрочногоЗавершения.Заголовок = НСтр("ru = 'Неудачное завершение бизнес-процесса'");
		ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = НСтр("ru = 'Причина неудачного завершения'");
		ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗадачаИсполнителя_Выполнено_ОбработкаКомандыЗавершение", ЭтотОбъект, СтруктураДанных);
		ФормаДосрочногоЗавершения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаДосрочногоЗавершения.Открыть();
		Возврат;
	КонецЕсли;
	ОбработкаКомандыЗавершение(Истина, СтруктураДанных);
	
КонецПроцедуры

Процедура ЗадачаИсполнителя_Выполнено_ОбработкаКомандыЗавершение(Результат, СтруктураДанных) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.ЗавершенДосрочно = Ложь;
		Результат.Вставить("Задача", СтруктураДанных.Задача);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	, ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
	КонецЕсли;
	
	// Выполним задачу
	CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(СтруктураДанных.Задача);
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Задача выполнена'"),
		ПолучитьНавигационнуюСсылку(СтруктураДанных.Задача),
		Строка(СтруктураДанных.Задача));
	Оповестить("Запись_ЗадачаИсполнителя", Новый Структура("Выполнена, ОбновлятьКалендарь", Истина, 1), СтруктураДанных.ПараметрКоманды);
	
КонецПроцедуры

// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат CRM_БизнесПроцессыИЗадачиВызовСервера.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

#КонецОбласти

#Область ОбработчикиСобытийИзФормДокументов

// Вызывается в формах при выборе команды, которая добавлена программно
//
// Параметры:
//  Форма					 - УправляемаяФорма - форма в которой расположена команда
//  Команда					 - КомандаФормы - выбранная команда
//  ДополнительныеПараметры	 - Структура - дополнительные параметры
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если Команда.Имя = "Команда_ПринятьКИсполнению" Тогда
		
		Если НЕ Форма.ЗадачаИсполнителя_ПринятаКИсполнению Тогда
			
			Если CRM_БизнесПроцессыСервер.ПринятьЗадачуКИсполнениюИзФормыДокумента(Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_ТекущийПользователь) Тогда
				
				Оповестить("ПереопределяемаяКоманда_ЗадачаИсполнителя_ПринятаКИсполнению",Форма.ЗадачаИсполнителя,Форма.ЗадачаИсполнителя_ТекущийПользователь);
				
				Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиПринята;
				Форма.ЗадачаИсполнителя_УсловияВыполнены = CRM_БизнесПроцессыСервер.ПолучитьУсловиеЭтапаПроверитьПрименимость(Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_ПринятаКИсполнению);
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Команда.Имя = "Команда_КартаМаршрута" Тогда
		
		ОткрытьФорму("Обработка.CRM_КартаМаршрутаБизнесПроцесса.Форма", 
					 Новый Структура("БизнесПроцесс",
					 Форма.ЗадачаИсполнителя_БизнесПроцесс),
					 Форма, Ложь, Неопределено);
					 
	ИначеЕсли Команда.Имя = "Команда_ОписаниеБизнесПроцесса" Тогда
					 
		ОткрытьФорму("ОбщаяФорма.CRM_ОписаниеБизнесПроцесса",
					 Новый Структура("ОбъектОтбора", Форма.ЗадачаИсполнителя_БизнесПроцесс),
					 Форма, Ложь, Неопределено);
					 
	ИначеЕсли Команда.Имя = "Команда_ПеренестиСрок" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтложитьСледующуюЗадачуЗавершение", ЭтотОбъект, Форма);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаОтложитьСледующуюЗадачу",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Команда.Имя = "Команда_Перенаправить" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПеренаправитьЗавершение", ЭтотОбъект, Форма);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачаПеренаправить",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Команда.Имя = "Команда_ОписаниеЗадачи" Тогда
		
		Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиПринята.Пометка = НЕ Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиПринята.Пометка;
		Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиНеПринята.Пометка = НЕ Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиНеПринята.Пометка;
		Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая.Пометка = НЕ Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая.Пометка;
		
		Форма.Элементы.ГруппаОписаниеЗадачи.Видимость = Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиПринята.Пометка;
		
	ИначеЕсли Команда.Имя = "Команда_ПередвинутьЭтап" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Форма.ЗадачаИсполнителя_БизнесПроцесс);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередвинутьЭтапЗавершения", ЭтотОбъект, Форма);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПеремещенияЭтапа",ПараметрыФормы, Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СтрНайти(Команда.Имя,"Команда_ВыполнитьЗадачу_") > 0 Тогда
		
		Если Форма.Модифицированность И НЕ Форма.Записать() Тогда
			Возврат;
		КонецЕсли;
		
		Если Форма.ЗадачаИсполнителя_УсловияВыполнены = 3 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выполнены все условия для выполнения задачи!'"));
			Возврат;
		КонецЕсли;
			
		ВариантПоКнопке										= СтрЗаменить(Команда.Имя, "Команда_ВыполнитьЗадачу_", "");
		Форма.ЗадачаИсполнителя_ВариантВыполнения			= Число(ВариантПоКнопке);
		Если Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения Тогда
			Форма.ЗадачаИсполнителя_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(Форма.ЗадачаИсполнителя_ТочкаМаршрута, Форма.ЗадачаИсполнителя_ВариантВыполнения, Форма.ЗадачаИсполнителя_НомерВерсииКартыМаршрута);
		КонецЕсли;
		
		СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Форма.ЗадачаИсполнителя);
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыполнениеЗадачиЗавершение", ЭтотОбъект, Форма);
		
		Если СписокТочекМаршрута.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Форма.ЗадачаИсполнителя_БизнесПроцесс, СписокТочекМаршрута);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуПродолжение", ЭтотОбъект, ОписаниеОповещенияЗавершение);
			ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		
//START Кайдашов 07/02/20		
		//ВыполнитьЗадачуПродолжение(Истина, ОписаниеОповещенияЗавершение);
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  ИмяСобытия				- Строка - идентификатор сообщения принимающей формой (см. метод Оповестить)
//	Параметр				- Произвольный - параметр сообщения (см. метод Оповестить)
//	Источник				- Произвольный - источник события (см. метод Оповестить)
//  ДополнительныеПараметры	- Структура - дополнительные параметры
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	
	
	Если ИмяСобытия = "ПереопределяемаяКоманда_ЗадачаИсполнителя_ПринятаКИсполнению" И Форма.ЗадачаИсполнителя = Параметр Тогда
		
	ИначеЕсли ИмяСобытия = "ПереопределяемаяКоманда_ЗадачаИсполнителя_Перенаправить" И Форма.ЗадачаИсполнителя = Параметр Тогда
		
	ИначеЕсли ИмяСобытия = "ПереопределяемаяКоманда_ЗадачаИсполнителя_ВыполнитьЗадачу" И Форма.ЗадачаИсполнителя = Параметр Тогда
		
		Форма.ЗадачаИсполнителя_Выполнена = Истина;
		Форма.Записать();
		
	ИначеЕсли ИмяСобытия = "ВыполненаСменаЭтапаБизнесПроцесса" И Форма.ЗадачаИсполнителя_БизнесПроцесс = Параметр Тогда
		
		Форма.ЗадачаИсполнителя_Выполнена = Истина;
		Форма.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПеремещениеЭтапа

Процедура ПередвинутьЭтапЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеЗадачи

Процедура ВыполнитьЗадачуПродолжение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ЧТО ТУТ ДЕЛАТЬ??? Если не проходим проверку на ввод документа на этапе
	
	//Если СписокОбязательныхТипов.Количество() > 0 Тогда
	//	МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(Объект.Ссылка, СписокОбязательныхТипов);
	//	Если МассивОшибок.Количество() > 0 Тогда
	//		Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
	//		КонецЦикла;
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(ОписаниеОповещения.ДополнительныеПараметры.ЗадачаИсполнителя_БизнесПроцесс,
																ОписаниеОповещения.ДополнительныеПараметры.ЗадачаИсполнителя_ТочкаМаршрута,
																ОписаниеОповещения.ДополнительныеПараметры.ЗадачаИсполнителя_ВариантВыполнения) Тогда
		
		ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтотОбъект);
		ФормаДосрочногоЗавершения.Заголовок = НСтр("ru = 'Неудачное завершение бизнес-процесса'");
		ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = НСтр("ru = 'Причина неудачного завершения'");
		ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаДосрочногоЗавершения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаДосрочногоЗавершения.Открыть();
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);

КонецПроцедуры

Процедура ВыполнениеЗадачиЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.ЗавершенДосрочно = Ложь;
		Результат.Вставить("Задача"					,Форма.ЗадачаИсполнителя);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	,ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
	КонецЕсли;
	
	ПродолжитьВыполнение = Истина;
	Если ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс) Тогда
		
		ТекстОшибки = "";
		//Проверим не работате ли кто-то с ведущей задачей если она есть
		Результат = CRM_БизнесПроцессыИЗадачиВызовСервера.ЗаблокироватьДанныеДляРедактированияВедущейЗадачи(Форма.ЗадачаИсполнителя_БизнесПроцесс, ПродолжитьВыполнение);
		Если НЕ ПродолжитьВыполнение Тогда
			ТекстПредупреждения = НСтр("ru = 'Невозможно выполнить, так как задача: '") + Результат.ПредставлениеЗадачи + НСтр("ru = ' редактируется '") + Результат.ТекстОшибки;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжитьВыполнение Тогда
		
		ПараметрыФормы = Новый Структура("Задача, ПредставлениеВариантаВыполнения, ОтложитьНаДату", Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_ВариантВыполнения, Форма.ЗадачаИсполнителя_ОтложитьНаДату);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводРезультатаВыполненияПродолжение", ЭтотОбъект, Форма);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнениеЗадачиПоУсловию()

Процедура ВводРезультатаВыполненияПродолжение(Результат, Форма) Экспорт
	
	Если НЕ Результат = Неопределено И НЕ Результат.Отказ Тогда
		
		Форма.ЗадачаИсполнителя_ОтложитьНаДату = Результат.ОтложитьНаДату;
		//ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ВернутьДату());
		//
		//Объект.CRM_ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Выполнена -> '") + Строка(Объект.Исполнитель);
		//
		//Объект.РезультатВыполнения = "
		//|"+ДатаСтрокой+" "+НСтр("ru = 'Выполнена -> '") + Строка(Объект.Исполнитель)+"
		//|"+?(НЕ ПустаяСтрока(Результат.РезультатВыполнения),Результат.РезультатВыполнения,"")+"
		//|
		//|" +  Объект.РезультатВыполнения;
		//
		//Записать();
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ВариантВыполнения"		, Форма.ЗадачаИсполнителя_ВариантВыполнения);
		ПараметрыВыполнения.Вставить("ВариантВыполненияСтрокой"	, Форма.ЗадачаИсполнителя_ВариантВыполненияСтрокой);
		
		Если CRM_БизнесПроцессыСервер.ЗафиксироватьРезультатВыполненияЗадачи(Форма.ЗадачаИсполнителя, Результат, ПараметрыВыполнения) Тогда
			
			CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Форма.ЗадачаИсполнителя,,?(ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_ОтложитьНаДату),Форма.ЗадачаИсполнителя_ОтложитьНаДату,Неопределено));
			
		КонецЕсли;
		
		//??? ЗАПРОС НА ПЕРЕНОС СРОКОВ
		
		//// Если был отправлен запрос на перенос срока исполнения,
		//// то надо автоматически завершить задачу по запросу. т.к. она стала  неактуальной.
		//Если ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа) Тогда
		//	CRM_БизнесПроцессыСервер.ПолучитьЗадачиПоЗапросуВыполнить(Объект.Ссылка);
		//Конецесли;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Задача выполнена'"),
		ПолучитьНавигационнуюСсылку(Форма.ЗадачаИсполнителя),
		Строка(Форма.ЗадачаИсполнителя));
		
		Оповестить("ПереопределяемаяКоманда_ЗадачаИсполнителя_ВыполнитьЗадачу",Форма.ЗадачаИсполнителя);
		
		Оповестить("ЗадачаВыполнена", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Форма.ЗадачаИсполнителя, Истина));
		//Форма.Закрыть();
		
		//Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
		//
		//СписокНеСтартованныхБП = CRM_БизнесПроцессыСервер.ПолучитьРезультатВыполнения(Объект.Ссылка);
		//
		//Для Каждого ЭлементСписка Из СписокНеСтартованныхБП Цикл
		//	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", 
		//	Новый Структура("Ключ", ЭлементСписка.Значение));
		//КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтложитьСледующуюЗадачу

Процедура ОтложитьСледующуюЗадачуЗавершение(Результат, Форма) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Форма.ЗадачаИсполнителя_ОтложитьНаДату = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПеренаправлениеЗадачи

Процедура ЗадачаПеренаправитьЗавершение(Результат, Форма) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Форма.ЗадачаИсполнителя);
		
		Если CRM_БизнесПроцессыСервер.ЗафиксироватьРезультатПеренаправления(Форма.ЗадачаИсполнителя, Результат) Тогда
			CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(МассивЗадач,?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель), Ложь,);
			
			Оповестить("ПереопределяемаяКоманда_ЗадачаИсполнителя_Перенаправить",Форма.ЗадачаИсполнителя, ?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель));
			
			Если ТипЗнч(Результат.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Если Форма.ЗадачаИсполнителя_ТекущийПользователь = Результат.Исполнитель Тогда
					Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиНеПринята;
				Иначе
					Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиЧужая;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Результат.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				Если CRM_БизнесПроцессыСервер.ПользовательУчастникРоли(Форма.ЗадачаИсполнителя_ТекущийПользователь,Результат.Исполнитель) Тогда
					Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиНеПринята;
				Иначе
					Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиЧужая;
				КонецЕсли;
			Иначе
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция НайтиСтрокуКоманды(Форма, ИмяКоманды) Экспорт
	
	Строки = Форма.ТаблицаКомандТочкиМаршрута.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));	
	
	Если Строки.Количество() Тогда
		Возврат Строки[0]
	Иначе	
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

// -- Харченко Д.И. №  - 01.11.2018

#КонецОбласти



