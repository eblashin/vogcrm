
Процедура ВыполнениеОбмена(ДействиеОбмена) Экспорт
	
	ВсеНастройкиДействия = ПолучитьПараметрыОбмена(ДействиеОбмена);
	Если ВсеНастройкиДействия = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	МассивСтруктурСостояния = Новый Массив;
	
	Для каждого НастройкаОбработки Из ВсеНастройкиДействия Цикл
		
		ОтпечатокОбработки = НастройкаОбработки.Ключ;
		МассивПараметровОбмена = НастройкаОбработки.Значение;
		
		Если МассивПараметровОбмена.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ГрупповойРежим = ПроверитьВозможностьГрупповойОбработки(ОтпечатокОбработки, МассивПараметровОбмена);
		Если ГрупповойРежим Тогда
			МассивСтруктурСостояния = ЗапуститьОбработкуДействия(ОтпечатокОбработки,ДействиеОбмена, МассивПараметровОбмена, ГрупповойРежим);
		Иначе
			МассивСтруктурСостояния = Новый Массив;
			Для каждого ПараметрыОбмена Из МассивПараметровОбмена Цикл
				локМассивСтруктурСостояния = ЗапуститьОбработкуДействия(ОтпечатокОбработки,ДействиеОбмена, ПараметрыОбмена, ГрупповойРежим);
				Для каждого локСтруктураСостояния Из локМассивСтруктурСостояния Цикл
					МассивСтруктурСостояния.Добавить(локСтруктураСостояния);	
				КонецЦикла; 
			КонецЦикла;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//ЗаписатьСостоянияДействийОбмена(МассивСтруктурСостояния);
	
КонецПроцедуры

Процедура ВыполнениеОбработчикаДействия(ПараметрыОбработчика) Экспорт
	
	ОтпечатокОбработки = ПараметрыОбработчика.ОтпечатокОбработки;
	
	//ЭтоОтладка = Истина;
	ЭтоОтладка = Ложь;

	Если ЭтоОтладка Тогда
	    ОбработкаОбменаДанными = Обработки.desШаблонОбработкиОчереди.Создать(); 
	Иначе 	
		ОбработкаОбменаДанными = desОбменДаннымиПовтИсп.ПодключитьОбработкуДействияПоОтпечатку(ОтпечатокОбработки);
	КонецЕсли;
	
	ОбработкаОбменаДанными.ВыполнитьОбмен(ПараметрыОбработчика);

КонецПроцедуры
 
// Процедура - Запустить обработку действия
//
// Параметры:
//  ПараметрыОбмена		 - Массив,Структура	 - В зависимости от группового режима либо массив параметров обмена, либо сама структура параметров обмена
//  ГрупповойРежим		 - Булево	 - Режим выполнения
//
// Возвращаемое значение:
//  СтруктураСостояния	 - Массив	 - Массив структур состояния обмена
//
Функция ЗапуститьОбработкуДействия(ОтпечатокОбработки, ДействиеОбмена, ПараметрыОбмена, ГрупповойРежим = Ложь)
	
	СтруктураСостояния = Новый Структура("Действие, Настройка, ВыполненоУспешно, Комментарий, Период", ДействиеОбмена, Неопределено, Ложь, "", Дата(1, 1, 1));
		
	ОбработкаОбменаДанными = desОбменДаннымиПовтИсп.ПодключитьОбработкуДействияПоОтпечатку(ОтпечатокОбработки);
 
	
	
	
	Если ОбработкаОбменаДанными = Неопределено Тогда
		СтруктураСостояния.Комментарий = "Ошибка при создании обработки. " + ОписаниеОшибки();
		
	Иначе 
		Попытка
			//ОбработкаОбменаДанными.ВыполнитьОбмен(ДействиеОбмена, НастройкаДействияОбмена, ДополнительныеПараметры);				
			Если ГрупповойРежим Тогда
				ОбработкаОбменаДанными.ВыполнитьОбмен_ГрупповойРежим(ПараметрыОбмена);
			Иначе
				ОбработкаОбменаДанными.ВыполнитьОбмен(ПараметрыОбмена);
			КонецЕсли;
			
			СтруктураСостояния.ВыполненоУспешно = Истина;
		Исключение
			СтруктураСостояния.Комментарий = "Ошибка при выполнении обработки. " + ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	//КонецЕсли;
	
	// Вернем состояние выполнения обработок
	СтруктураСостояния.Период = ТекущаяДата();
	
	МассивСтруктурСостояния = Новый Массив;
	Если ГрупповойРежим Тогда
		Для каждого Настройка Из ПараметрыОбмена Цикл
			СтруктураСостояния.Настройка = Настройка.Настройка;
			МассивСтруктурСостояния.Добавить(СтруктураСостояния);
		КонецЦикла; 
	Иначе
		СтруктураСостояния.Настройка = ПараметрыОбмена.Настройка;
		МассивСтруктурСостояния.Добавить(СтруктураСостояния);
	КонецЕсли; 
	
	Возврат МассивСтруктурСостояния;
КонецФункции
 
// Функция - Проверить возможность групповой обработки настроек действия обмена
//
// Параметры:
//  ОтпечатокОбработки		 - Строка(44)	 - SHA-256 отпечаток двоичных данных обработки
//  МассивПараметровОбмена	 - Массив	 - Массив всех настроек действия обмена
// 
// Возвращаемое значение:
//  Булево - Истина, если обработка поддерживает возможность групповой обработки данных
//
Функция ПроверитьВозможностьГрупповойОбработки(ОтпечатокОбработки, МассивПараметровОбмена)
	
	ГрупповойРежим = Ложь;	
	
	Если МассивПараметровОбмена.Количество() > 1 Тогда
		//ДанныеОбработки			= МассивПараметровОбмена[0].ХранилищеОбработка.Получить();
		//Если ДанныеОбработки <> Неопределено Тогда
			//ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".epf");
			//ДанныеОбработки.Записать(ИмяВременногоФайла);
			//Попытка
			//	ОбработкаОбменаДанными = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
			//Исключение
			//	ТекстСообщения = ОбменДаннымиСервер.СтрШаблонОбычноеПриложение(
			//	НСтр("ru = 'Ошибка при создании обработки %1 для настройки ""%2"" по причине: %3.'")
			//	,?(ЗначениеЗаполнено(ОтпечатокОбработки), ОтпечатокОбработки, "<Пустой отпечаток обработки>")
			//	,?(ЗначениеЗаполнено(МассивПараметровОбмена[0].Настройка), МассивПараметровОбмена[0].Настройка, "<Настройка не выбрана>")
			//	,ОписаниеОшибки());
			//	
			//	ЗаписьЖурналаРегистрации(НСтр("ru = '(DES) Выполнение обмена'"), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			//	Возврат Ложь;
			//КонецПопытки;
			ОбработкаОбменаДанными = desОбменДаннымиПовтИсп.ПодключитьОбработкуДействияПоОтпечатку(ОтпечатокОбработки);
			
			Если ОбработкаОбменаДанными = Неопределено Тогда
			Иначе 
				Попытка
					//ОбработкаОбменаДанными.ВыполнитьОбмен(ДействиеОбмена, НастройкаДействияОбмена, ДополнительныеПараметры);				
					ГрупповойРежим = ОбработкаОбменаДанными.ГрупповойРежимДоступен();
				Исключение
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли; 
	
	Возврат ГрупповойРежим;
КонецФункции

// Функция - Записать состояние действий обмена
//
// Параметры:
//  МассивСтруктурСостояния	 - Массив	 - Массив структур СтруктураСостояния
// 
// Возвращаемое значение:
//  Булево - Код возврата выполнения
//
Функция ЗаписатьСостоянияДействийОбмена(МассивСтруктурСостояния)
	Для каждого СтруктураСостояния Из МассивСтруктурСостояния Цикл
		НачатьТранзакцию();
		Попытка
			ЗаписьСостояния = РегистрыСведений.desСостоянияДействийОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьСостояния, СтруктураСостояния);
			ЗаписьСостояния.Записать();
		Исключение
			ТекстСообщения = ОбменДаннымиСервер.СтрШаблонОбычноеПриложение(
			НСтр("ru = 'Не удалось обновить состояние действия обмена ""%1"" для настройки ""%2"" по причине: %3.'")
			,?(ЗначениеЗаполнено(СтруктураСостояния.Действие), СтруктураСостояния.Действие, "<Действие не выбрано>")
			,?(ЗначениеЗаполнено(СтруктураСостояния.Настройка), СтруктураСостояния.Настройка, "<Настройка не выбрана>")
			,ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрации(НСтр("ru = '(DES) Выполнение обмена'"), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	Возврат Истина;
КонецФункции

Функция ПолучитьПараметрыОбмена(Действие, Организация = Неопределено, Контрагент = Неопределено) Экспорт
	
	ВсеНастройкиДействия = Новый Соответствие;
	
	Запрос = Новый Запрос;
	#Область Запрос
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	desНастройкиДействийПриОбмене.Ссылка КАК Настройка,
	|	desНастройкиДействийПриОбмене.Организация,
	|	desНастройкиДействийПриОбмене.Контрагент,
	|	desНастройкиДействийПриОбменеДействия.ОтпечатокОбработки КАК ОтпечатокОбработки,
	|	desНастройкиДействийПриОбменеДействия.ОтпечатокПараметров,
	|	desНастройкиДействийПриОбмене.ХранилищеОбщихПараметров,
	|	desНастройкиДействийПриОбмене.ОстанавливатьОбмен,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеСхемаИсточникаДанных,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеКомпоновщикНастроек,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеОбработка,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеЗначенияПоУмолчанию,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеПараметры,
	|	desНастройкиДействийПриОбменеДействия.УведомлятьПоЭлектроннойПочте,
	|	desНастройкиДействийПриОбменеДействия.АдресПолучателяУведомления
	|ИЗ
	|	Справочник.desНастройкиДействийПриОбмене.Действия КАК desНастройкиДействийПриОбменеДействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.desНастройкиДействийПриОбмене КАК desНастройкиДействийПриОбмене
	|		ПО desНастройкиДействийПриОбменеДействия.Ссылка = desНастройкиДействийПриОбмене.Ссылка
	|ГДЕ
	|	desНастройкиДействийПриОбменеДействия.Включено
	|	И НЕ desНастройкиДействийПриОбмене.ПометкаУдаления
	|	И desНастройкиДействийПриОбменеДействия.Действие = &Действие
	|	%ОтборОрганизация%
	|	%ОтборКонтрагент%
	|ИТОГИ ПО
	|	ОтпечатокОбработки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборОрганизация%", ?(Организация = Неопределено, "", "И desНастройкиДействийПриОбмене.Организация = &Организация"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборКонтрагент%", ?(Контрагент = Неопределено, "", "И desНастройкиДействийПриОбмене.Контрагент = &Контрагент"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Действие", Действие);
	#КонецОбласти 
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ВсеНастройкиДействия;
	КонецЕсли;
	
	ВыборкаОбработок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбработок.Следующий() Цикл
		ВыборкаНастроек = ВыборкаОбработок.Выбрать();
		МассивПараметровОбмена = Новый Массив;
		Пока ВыборкаНастроек.Следующий() Цикл
			
			СтруктураПараметров = Новый Структура;
			Для каждого КолонкаРезультата Из Результат.Колонки Цикл
				СтруктураПараметров.Вставить(КолонкаРезультата.Имя);		
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВыборкаНастроек);
			
			МассивПараметровОбмена.Добавить(СтруктураПараметров);
		КонецЦикла; 
		ВсеНастройкиДействия.Вставить(ВыборкаОбработок.ОтпечатокОбработки, МассивПараметровОбмена);
	КонецЦикла;
	
	Возврат ВсеНастройкиДействия;
	
КонецФункции // ()

Функция СформироватьСообщениеОбмена(Организация,Контрагент,ДействиеОбмена,ПараметрыСообщенияОбмена) Экспорт
	// Получим обработку
	ОбработкаДействия = desОбменДаннымиПовтИсп.ПолучитьОбработкуДействия(Организация,Контрагент,ДействиеОбмена);	
	// Убедимся, что обработка получена	
	Если ОбработкаДействия=Неопределено Тогда	
		ТекстИсключения = ОбменДаннымиСервер.СтрШаблонОбычноеПриложение("Не найдено действие обмена: %1. Организация: %2, контрагент: %3",ДействиеОбмена,Организация,Контрагент);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	// Получим настройки действия с отбором по организации и контрагенту
	ВсеНастройкиДействия = ПолучитьПараметрыОбмена(ДействиеОбмена, Организация, Контрагент);
	// Убедимся что получены параметры для одной обработки
	Если ВсеНастройкиДействия.Количество() <> 1 Тогда
		ТекстИсключения = ОбменДаннымиСервер.СтрШаблонОбычноеПриложение("Не найдено параметры обмена: %1. Организация: %2, контрагент: %3",ДействиеОбмена,Организация,Контрагент);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	// Поместим параметры обработки в параметры сообщения обмена
	Для каждого НастройкаОбработки Из ВсеНастройкиДействия Цикл
		ОтпечатокОбработки = НастройкаОбработки.Ключ;
		МассивПараметровОбмена = НастройкаОбработки.Значение;
		ПараметрыСообщенияОбмена.Вставить("ПараметрыОбмена", МассивПараметровОбмена[0]);
		Прервать;
	КонецЦикла;  
	
	Возврат ОбработкаДействия.СформироватьСообщениеОбмена(Организация,Контрагент,ПараметрыСообщенияОбмена);
	
КонецФункции
 
Функция ПолучитьПараметрыДействияНастройки(Настройка,Действие) Экспорт
	
	ПараметрыДействия = Новый Структура(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	desНастройкиДействийПриОбменеДействия.Ссылка КАК НастройкаДействий,
	|	desНастройкиДействийПриОбменеДействия.Ссылка.ХранилищеОбщихПараметров КАК ХранилищеОбщихПараметров,
	|	desНастройкиДействийПриОбменеДействия.Действие КАК Действие,
	|	desНастройкиДействийПриОбменеДействия.ОтпечатокОбработки КАК ОтпечатокОбработки,
	|	desНастройкиДействийПриОбменеДействия.ОтпечатокПараметров КАК ОтпечатокПараметров,
	|	desНастройкиДействийПриОбменеДействия.Включено КАК Включено,
	|	desНастройкиДействийПриОбменеДействия.РегламентноеЗадание КАК РегламентноеЗадание,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеОбработка КАК ХранилищеОбработка,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеСхемаИсточникаДанных КАК ХранилищеСхемаИсточникаДанных,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеКомпоновщикНастроек КАК ХранилищеКомпоновщикНастроек,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеПараметры КАК ХранилищеПараметры,
	|	desНастройкиДействийПриОбменеДействия.ХранилищеЗначенияПоУмолчанию КАК ХранилищеЗначенияПоУмолчанию,
	|	desНастройкиДействийПриОбменеДействия.УведомлятьПоЭлектроннойПочте КАК УведомлятьПоЭлектроннойПочте,
	|	desНастройкиДействийПриОбменеДействия.АдресПолучателяУведомления КАК АдресПолучателяУведомления
	|ИЗ
	|	Справочник.desНастройкиДействийПриОбмене.Действия КАК desНастройкиДействийПриОбменеДействия
	|ГДЕ
	|	desНастройкиДействийПриОбменеДействия.Ссылка = &Настройка
	|	И desНастройкиДействийПриОбменеДействия.Действие = &Действие";
	
	Запрос.УстановитьПараметр("Настройка",Настройка);
	Запрос.УстановитьПараметр("Действие",Действие);

	
	Результат = Запрос.Выполнить();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		ПараметрыДействия.Вставить(Колонка.Имя);
	КонецЦикла; 
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
	
		ЗаполнитьЗначенияСвойств(ПараметрыДействия,Выборка);	
	
	КонецЕсли;
	
	Возврат ПараметрыДействия;

КонецФункции // ()
 
#Область РаботаСРегламентнымиЗаданиямиИзERP

// Удаляет РегламентноеЗадание из информационной базы.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  не предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание, которое нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
//
Процедура УдалитьЗадание(Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
		ВызватьИсключение( НСтр("ru = 'Предопределенное регламентное задание удалить невозможно.'") );
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И НЕ Идентификатор.Предопределенное Тогда
		СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
		Для каждого РегламентноеЗадание Из СписокЗаданий Цикл
			РегламентноеЗадание.Удалить();
		КонецЦикла; 
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
		Если РегламентноеЗадание <> Неопределено Тогда
			РегламентноеЗадание.Удалить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает РегламентноеЗадание из информационной базы.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания 
//                           или имя метаданных предопределенного регламентного задания.
//                - РегламентноеЗадание - регламентное задание из которого нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание - прочитано из базы данных.
//
Функция Задание(Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		Если Идентификатор.Предопределенное Тогда
			РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
		Иначе
			СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
			Если СписокЗаданий.Количество() > 0 Тогда
				РегламентноеЗадание = СписокЗаданий[0];
			КонецЕсли;
		КонецЕсли; 
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Добавляет новое задание в очередь или как регламентное.
// 
// Параметры: 
//  Параметры - Структура - Параметры добавляемого задания, возможные ключи:
//   Использование
//   Метаданные - обязательно для указания.
//   Параметры
//   Ключ
//   ИнтервалПовтораПриАварийномЗавершении.
//   Расписание
//   КоличествоПовторовПриАварийномЗавершении.
//
// Возвращаемое значение: 
//  РегламентноеЗадание, СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - Идентификатор
//  добавленного задания.
// 
Функция ДобавитьЗадание(Параметры) Экспорт
	
	ПараметрыЗадания = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	
	МетаданныеЗадания = ПараметрыЗадания.Метаданные;
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);
	
	Если ПараметрыЗадания.Свойство("Наименование") Тогда
		Задание.Наименование = ПараметрыЗадания.Наименование;
	Иначе
		Задание.Наименование = МетаданныеЗадания.Наименование;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Использование") Тогда
		Задание.Использование = ПараметрыЗадания.Использование;
	Иначе
		Задание.Использование = МетаданныеЗадания.Использование;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Ключ") Тогда
		Задание.Ключ = ПараметрыЗадания.Ключ;
	Иначе
		Задание.Ключ = МетаданныеЗадания.Ключ;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ИмяПользователя") Тогда
		Задание.ИмяПользователя = ПараметрыЗадания.ИмяПользователя;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
		Задание.ИнтервалПовтораПриАварийномЗавершении = ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении;
	Иначе
		Задание.ИнтервалПовтораПриАварийномЗавершении = МетаданныеЗадания.ИнтервалПовтораПриАварийномЗавершении;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
		Задание.КоличествоПовторовПриАварийномЗавершении = ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении;
	Иначе
		Задание.КоличествоПовторовПриАварийномЗавершении = МетаданныеЗадания.КоличествоПовторовПриАварийномЗавершении;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Параметры") Тогда
		Задание.Параметры = ПараметрыЗадания.Параметры;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Расписание") Тогда
		Задание.Расписание = ПараметрыЗадания.Расписание;
	КонецЕсли;
	
	Задание.Записать();
	
	Возврат Задание;
	
КонецФункции

// Возвращает уникальный идентификатор регламентного задания.
//  Перед вызовом требуется иметь право Администрирования или УстановитьПривилегированныйРежим.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - УИ объекта регламентного задания.
// 
Функция УникальныйИдентификатор(Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Возврат Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
		Возврат РегламентныеЗадания.НайтиПредопределенное(Идентификатор).УникальныйИдентификатор;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И НЕ Идентификатор.Предопределенное Тогда
		СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
		Для каждого РегламентноеЗадание Из СписокЗаданий Цикл
			Возврат РегламентноеЗадание.УникальныйИдентификатор;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Изменяет задание с указанным идентификатором.
// В случае вызова в транзакции на задание устанавливается объектная блокировка.
// 
// Параметры: 
//  Идентификатор - СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - Идентификатор задания
//  Параметры     - Структура - Параметры, которые следует установить заданию, 
//   возможные ключи:
//   Использование
//   Параметры
//   Ключ
//   ИнтервалПовтораПриАварийномЗавершении.
//   Расписание
//   КоличествоПовторовПриАварийномЗавершении.
//   
//   В случае если задание создано на основе шаблона или предопределенное, могут быть указаны
//   только следующие ключи: Использование.
// 
Процедура ИзменитьЗадание(Знач Идентификатор, Знач Параметры) Экспорт
	
	ПараметрыЗадания = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание <> Неопределено Тогда
		
		Если ПараметрыЗадания.Свойство("Наименование") Тогда
			Задание.Наименование = ПараметрыЗадания.Наименование;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Использование") Тогда
			Задание.Использование = ПараметрыЗадания.Использование;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Ключ") Тогда
			Задание.Ключ = ПараметрыЗадания.Ключ;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("ИмяПользователя") Тогда
			Задание.ИмяПользователя = ПараметрыЗадания.ИмяПользователя;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
			Задание.ИнтервалПовтораПриАварийномЗавершении = ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
			Задание.КоличествоПовторовПриАварийномЗавершении = ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Параметры") Тогда
			Задание.Параметры = ПараметрыЗадания.Параметры;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Расписание") Тогда
			Задание.Расписание = ПараметрыЗадания.Расписание;
		КонецЕсли;
		
		Задание.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Оповещения
Процедура ОповеститьПоПочте(Знач ТекстСообщения, Знач Тема, Знач Кому) Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ДляРассылки;
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", Кому);
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", ТекстСообщения);
	
	РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);  
	
КонецПроцедуры
#КонецОбласти 

#Область ПолучениеДанных

Функция ПодготовитьДанные(Знач СхемаКомпоновкиДанных, Знач НастройкиКомпоновкиДанных) Экспорт 
	
	Перем МакетКомпоновки, НастройкаКомпановкиДанных, НастройкаКомпоновкиДанныхПоУмолчанию, ПроцессорВывода, ПроцессорКомпоновки, ТаблицаРезультат, ТаблицыРезультатов, ЭлементСтруктурыНастроек, ЭлементСтруктурыНастроекПоУмолчанию;
	
	ТаблицыРезультатов = Новый Структура;
	
	НастройкаКомпоновкиДанныхПоУмолчанию = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных); 
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);//НастройкаКомпоновкиДанныхПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	КомпоновщикНастроек.РазвернутьАвтоПоля();
	
	НастройкаКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//Для Каждого ЭлементСтруктурыНастроекПоУмолчанию Из НастройкаКомпоновки.Структура Цикл 
		
		НастройкаКомпановкиДанных = НастройкиКомпоновкиДанных;//СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		//Для Каждого ЭлементСтруктурыНастроек Из НастройкаКомпановкиДанных.Структура Цикл
		//	Если НастройкаКомпоновки.Структура.Индекс(ЭлементСтруктурыНастроекПоУмолчанию)
		//		<> НастройкаКомпановкиДанных.Структура.Индекс(ЭлементСтруктурыНастроек) Тогда
		//		
		//		ЭлементСтруктурыНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
		//		ПоменятьСостояниеВложеннойГруппировки(ЭлементСтруктурыНастроек, СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен);
		//	Иначе
		//		ЭлементСтруктурыНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
		//		ПоменятьСостояниеВложеннойГруппировки(ЭлементСтруктурыНастроек, СостояниеЭлементаНастройкиКомпоновкиДанных.Включен);
		//	КонецЕсли;
		//КонецЦикла;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкаКомпановкиДанных,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		//ТаблицыРезультатов.Вставить(ЭлементСтруктурыНастроекПоУмолчанию.Имя, Новый Структура("СтруктураПолей,ТаблицаРезультат"
		//,ПолучитьСтруктуруГруппировки(ЭлементСтруктурыНастроекПоУмолчанию)
		//,ТаблицаРезультат));
		
	//КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ПоменятьСОстояниеВложеннойГруппировки(ЭлементСтруктурыНастроек, Состояние)
	Для каждого Элемент Из ЭлементСтруктурыНастроек.Структура Цикл
		Элемент.Состояние = Состояние;
		ПоменятьСОстояниеВложеннойГруппировки(Элемент, Состояние)
	КонецЦикла; 			
КонецПроцедуры

Функция ПолучитьСтруктуруГруппировки(ЭлементСтруктурыГруппировка)
	
	Возврат Новый Структура("ВыбранныеПоля, ПоляГруппировки, ВложенныеГруппировки, ИмяГруппировки"
	,ПолучитьМассивИменВыбранныхПолей(ЭлементСтруктурыГруппировка)
	,ПолучитьМассивИменПолейГруппировки(ЭлементСтруктурыГруппировка)
	,ПолучитьСтруктуруВложенныхГруппировок(ЭлементСтруктурыГруппировка)
	,ЭлементСтруктурыГруппировка.Имя);
	
КонецФункции

Функция ПолучитьМассивИменВыбранныхПолей(ЭлементСтруктурыГруппировка)
	
	ВыбранныеПоля = Новый Массив;
	
	Для Каждого ПолеГруппировки Из ЭлементСтруктурыГруппировка.Выбор.Элементы Цикл
		Если ПолеГруппировки.Использование Тогда
			ИмяПоля = СТрЗаменить(Строка(ПолеГруппировки.Поле), ".", "");
			ВыбранныеПоля.Добавить(ИмяПоля);	
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ВыбранныеПоля;
	
КонецФункции

Функция ПолучитьМассивИменПолейГруппировки(ЭлементСтруктурыГруппировка)
	
	ПоляГруппировки = Новый Массив;
	
	Для Каждого ПолеГруппировки Из ЭлементСтруктурыГруппировка.ПоляГруппировки.Элементы Цикл
		Если ПолеГруппировки.Использование Тогда
			ИмяПоля = СТрЗаменить(Строка(ПолеГруппировки.Поле), ".", "");
			ПоляГруппировки.Добавить(ИмяПоля);	
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ПоляГруппировки;

КонецФункции

Функция ПолучитьСтруктуруВложенныхГруппировок(ЭлементСтруктурыГруппировка)
	
	ВложенныеГруппировки = Новый Массив;
	
	Для каждого ЭлементСтруктуры Из ЭлементСтруктурыГруппировка.Структура Цикл
		ВложенныеГруппировки.Добавить(Новый Структура("ВыбранныеПоля, ПоляГруппировки, ВложенныеГруппировки, ИмяГруппировки"
		,ПолучитьМассивИменВыбранныхПолей(ЭлементСтруктуры)
		,ПолучитьМассивИменПолейГруппировки(ЭлементСтруктуры)
		,ПолучитьСтруктуруВложенныхГруппировок(ЭлементСтруктуры)
		,ЭлементСтруктуры.Имя));		
	КонецЦикла;
	
	Возврат ВложенныеГруппировки;
	
КонецФункции

#КонецОбласти 

#Область ОбрабаботкаСообщенийОчереди

Процедура ОбработатьСообщениеОчереди(ПараметрыВыполнения,АдресРезультата) Экспорт
	
		
	НастройкаДействий = Справочники.desНастройкиДействийПриОбмене.ПолучитьСсылку(ПараметрыВыполнения.ИдентификаторНастройки); 
	
	мсвАктивныхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Наименование,Состояние",ПараметрыВыполнения.ИмяОчереди,СостояниеФоновогоЗадания.Активно));
	
	Если мсвАктивныхЗаданий.Количество() > 10 Тогда
		ФоновыеЗадания.ОжидатьЗавершенияВыполнения(мсвАктивныхЗаданий,5);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	desОбработчикиОчередейСообщений.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.desОбработчикиОчередейСообщений КАК desОбработчикиОчередейСообщений
	|ГДЕ
	|	desОбработчикиОчередейСообщений.НастройкаДействий = &НастройкаДействий
	|	И desОбработчикиОчередейСообщений.ИмяОчереди = &ИмяОчереди";
	
	Запрос.УстановитьПараметр("НастройкаДействий",НастройкаДействий);
	Запрос.УстановитьПараметр("ИмяОчереди",ПараметрыВыполнения.ИмяОчереди);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда	
		
		ПараметрыОбработчика = ПолучитьПараметрыДействияНастройки(НастройкаДействий,Выборка.Обработчик);
		
		
		ПараметрыДействия = ПараметрыОбработчика.ХранилищеПараметры.Получить();
		
		Если Не ПараметрыДействия.Свойство("ИдентификаторСообщения") Тогда
			ПараметрыДействия.Вставить("ИдентификаторСообщения",ПараметрыВыполнения.ИдентификаторСообщения);
		КонецЕсли; 
		
		ПараметрыОбработчика.ХранилищеПараметры  = Новый ХранилищеЗначения(ПараметрыДействия);
		
		ВыполнениеОбработчикаДействия(ПараметрыОбработчика);
		
	КонецЕсли;
	
	 
	
	

КонецПроцедуры
 
Функция ПолучитьСообщенияИзОчереди(ИдентификаторНастройки,ИмяОчереди,ИдентификаторСообщения = "") Экспорт
	
	мсвСообщений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	desОчередьВходящихСообщений.ИдентификаторНастройки КАК ИдентификаторНастройки,
	|	desОчередьВходящихСообщений.ИмяОчереди КАК ИмяОчереди,
	|	desОчередьВходящихСообщений.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.desОчередьВходящихСообщений КАК desОчередьВходящихСообщений
	|ГДЕ
	|	desОчередьВходящихСообщений.ИдентификаторНастройки = &ИдентификаторНастройки
	|	И desОчередьВходящихСообщений.ИмяОчереди = &ИмяОчереди
	|{ГДЕ
	|	(desОчередьВходящихСообщений.Идентификатор = &ИдентификаторСообщения) КАК Поле2}";
	
	Запрос.УстановитьПараметр("ИдентификаторНастройки",ИдентификаторНастройки);
	Запрос.УстановитьПараметр("ИмяОчереди",ИмяОчереди);

	
	Если Не ПустаяСтрока(ИдентификаторСообщения) Тогда
	
		Запрос.УстановитьПараметр("ИдентификаторСообщения",ИдентификаторСообщения);	
	
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции
 
#КонецОбласти

#Область РаботасJSON

Функция ДанныеВJSON(Данные , ТолькоСсылки = Истина, БезПроверки = Ложь) Экспорт
	
	Если БезПроверки Тогда
		ПреобразоватьВJSON(Данные);
	Иначе
		Возврат ПреобразоватьВJSON(ДанныеВПростыеТипыРекурсивно(Данные, ТолькоСсылки));
	КонецЕсли;
	
КонецФункции // СтруктураВJSON()

Функция ПреобразоватьВJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб,,,,,Истина);
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON);
	
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;	
	
КонецФункции

Функция ЗначениеВФорматJSON(Данные, ИмяФайла = "") Экспорт 

    ЗаписьJSON = Новый ЗаписьJSON;
	
	//Если Не ПустаяСтрока(ИмяФайла) Тогда
	ЗаписьJSON.ОткрытьФайл(ИмяФайла);
	//КонецЕсли; 

	//ЗаписьJSON.ПроверятьСтруктуру = Ложь;

	//

	//ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);

	//ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
    

    ЗаписатьJSON(ЗаписьJSON, Данные);
	
 	ТекстСообщения = ЗаписьJSON.Закрыть();
    
    Возврат ТекстСообщения;    

КонецФункции

Функция ДанныеВПростыеТипыРекурсивно(Данные, ТолькоСсылки = Ложь) Экспорт

    
    ЭтоМассив = Ложь;

    ЭтоТаблица = Ложь;

    Если ТипЗнч(Данные) = Тип("Структура") Тогда

        ПреобразованныеДанные = Новый Структура();

    ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда

        ПреобразованныеДанные = Новый Массив;

        ЭтоМассив = Истина;    

    ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда

        ПреобразованныеДанные = Новый Массив;

        ЭтоТаблица = Истина;

    Иначе

        Возврат ЭлементВПростыеТипы(Данные, ТолькоСсылки);

    КонецЕсли;

    

    Если ЭтоТаблица Тогда

        Если Данные.Количество() = 0 Тогда                

        Иначе

            СтруктураСтроки = "";

            Для Каждого Колонка Из Данные.Колонки Цикл

                СтруктураСтроки = СтруктураСтроки + Колонка.Имя + ",";

            КонецЦикла;

            СтруктураСтроки = Лев(СтруктураСтроки, СтрДлина(СтруктураСтроки)-1);

        КонецЕсли;

    КонецЕсли;

    

    Для Каждого Элемент Из Данные Цикл                

        Если ЭтоМассив Тогда

            НовоеЗначение = ЭлементВПростыеТипы(Элемент, ТолькоСсылки);

            ПреобразованныеДанные.Добавить(НовоеЗначение);

        ИначеЕсли ЭтоТаблица Тогда        

            СтрокаСтруктурой = Новый Структура(СтруктураСтроки);

            ЗаполнитьЗначенияСвойств(СтрокаСтруктурой, Элемент);                    

            ПреобразованныеДанные.Добавить(ЭлементВПростыеТипы(СтрокаСтруктурой, ТолькоСсылки));

        Иначе

            НовоеЗначение = ЭлементВПростыеТипы(Элемент.Значение, ТолькоСсылки);

            ПреобразованныеДанные.Вставить(Элемент.Ключ, НовоеЗначение);

        КонецЕсли;

    КонецЦикла;

    

    Возврат ПреобразованныеДанные;

    

КонецФункции // СтруктураВJSON()

Функция ЭлементВПростыеТипы(Элемент, ТолькоСсылка = Ложь)

    

    Если ТипЗнч(Элемент) = Тип("Число") ИЛИ

         ТипЗнч(Элемент) = Тип("Булево") ИЛИ             

         ТипЗнч(Элемент) = Тип("Дата")    

    Тогда

        НовоеЗначение = Элемент;

    ИначеЕсли ТипЗнч(Элемент) = Тип("Строка") Тогда

        НовоеЗначение = Элемент;

    ИначеЕсли ТипЗнч(Элемент) = Тип("null") Тогда

        НовоеЗначение = "";

    ИначеЕсли ТипЗнч(Элемент) = Тип("УникальныйИдентификатор") Тогда

        НовоеЗначение = Строка(Элемент);

    ИначеЕсли ТипЗнч(Элемент) = Тип("Неопределено") Тогда

        НовоеЗначение = "";

    ИначеЕсли ТипЗнч(Элемент) = Тип("ХранилищеЗначения") Тогда

        ДанныеХранилища = Элемент.Получить();

        Если ТипЗнч(ДанныеХранилища) = Тип("ДвоичныеДанные") Тогда

            НовоеЗначение = Новый Структура("Тип, Значение", "ХранилищеЗначения.ХранилищеЗначения", Base64Строка(ДанныеХранилища));

        Иначе

            НовоеЗначение = Новый Структура("Тип, Значение", "ХранилищеЗначения.ХранилищеЗначения", ДанныеХранилища);

        КонецЕсли;

    ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда

        НовоеЗначение = Новый Структура;

        Для Каждого ВложенныйЭлемент Из Элемент Цикл

            НовоеЗначение.Вставить(ВложенныйЭлемент.Ключ, ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент.Значение, ТолькоСсылка));

        КонецЦикла;

    ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда    

        НовоеЗначение = Новый Массив;

        Для Каждого ВложенныйЭлемент Из Элемент Цикл

            НовоеЗначение.Добавить(ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент, ТолькоСсылка));

        КонецЦикла;

    ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда    

        НовоеЗначение = ДанныеВПростыеТипыРекурсивно(Элемент, ТолькоСсылка);

    Иначе

        НовоеЗначение = Объект1сВПростыеТипы(Элемент, ТолькоСсылка);

    КонецЕсли;

    

    Возврат НовоеЗначение;

    

КонецФункции // ЭлементВПростыеТипы()

Функция ОбъектВСтруктуру(ЗначениеСсылка, КоллекцияТипа, ТолькоСсылка = Ложь)  
	
	Данные = Новый Структура();
			
	Мета = ЗначениеСсылка.Метаданные();
		
	Если Найти(КоллекцияТипа, "ПеречислениеСсылка") Тогда
		Данные.Вставить("id", ПолучитьПолноеИмяПредопределенногоЗначения(ЗначениеСсылка));
	Иначе
		Данные.Вставить("id", Строка(ЗначениеСсылка.УникальныйИдентификатор()));    
	КонецЕсли;
	
	Если Не ТолькоСсылка Тогда
		
		Данные.Вставить("type", КоллекцияТипа + "." + Мета.Имя);
		
		Данные.Вставить("presentation", Строка(ЗначениеСсылка));
		
		Если Найти(КоллекцияТипа, "СправочникСсылка") Тогда
			
			Данные.Вставить("name", ЗначениеСсылка.Наименование);
			
			Данные.Вставить("code", ЗначениеСсылка.Код);
			
		КонецЕсли;
		
		
		
		Если Найти(КоллекцияТипа, "ДокументСсылка") Тогда
			
			Данные.Вставить("date", ЗначениеСсылка.Дата);
			
			Данные.Вставить("number", ЗначениеСсылка.Номер);
			
		КонецЕсли;
		
		desОбменДаннымиСервераПереопределяемый.ОбъектВСтруктуру(Данные,ЗначениеСсылка);
		
	КонецЕсли;
		
	Возврат Данные;
		
КонецФункции // ОбъектВСтруктуру()

Функция Объект1сВПростыеТипы(Элемент, Знач ТолькоСсылка = Ложь, ВключаяДвижения = Ложь)

   
    ТипЭлемента = ТипЗнч(Элемент);

    Если Найти(ТипЭлемента, "Регистр") = 0 Тогда

        Если Не ЗначениеЗаполнено(Элемент) Тогда

            Возврат "";

        КонецЕсли;    

    КонецЕсли;

    

    Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда            

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"СправочникСсылка", ТолькоСсылка);

    ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда            

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ДокументСсылка", ТолькоСсылка);

    ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПеречислениеСсылка", ТолькоСсылка);

    ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда        

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовХарактеристикСсылка", ТолькоСсылка);

    ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда        

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланСчетовСсылка", ТолькоСсылка);

    ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда        

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовРасчетаСсылка", ТолькоСсылка);

    ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда        

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"БизнесПроцессСсылка", ТолькоСсылка);

    ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда        

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ЗадачаСсылка", ТолькоСсылка);

    ИначеЕсли Найти(ТипЭлемента, "Регистр сведений") Тогда

        НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрСведенийНаборЗаписей");

    ИначеЕсли Найти(ТипЭлемента, "Регистр накопления") Тогда    

        НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрНакопленияНаборЗаписей");

    ИначеЕсли Найти(ТипЭлемента, "Регистр бухгалтерии") Тогда    

        НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрБухгалтерииНаборЗаписей");

    Иначе

        НовоеЗначение = Новый Структура("СложныйТип, Тип, Представление", Истина, Строка(ТипЗнч(Элемент)), Строка(Элемент));        

    КонецЕсли;

    

    Возврат НовоеЗначение;

КонецФункции

Функция Объект1сВJSON(Элемент, ТолькоСсылка = Ложь, ВключаяДвижения = Ложь)    

    

    ТипЭлемента = ТипЗнч(Элемент);

    

    Если Справочники.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда    

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"СправочникСсылка", ТолькоСсылка);

    ИначеЕсли Найти(ТипЭлемента, "Справочник объект") Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"СправочникСсылка", ТолькоСсылка);

        

    ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда    

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ДокументСсылка", ТолькоСсылка);

    ИначеЕсли Найти(ТипЭлемента, "Документ объект") Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ДокументСсылка", ТолькоСсылка);    

        

    ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПеречислениеСсылка", ТолькоСсылка);

    ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПеречислениеСсылка", ТолькоСсылка);

        

    ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовХарактеристикСсылка", ТолькоСсылка);

    ИначеЕсли Найти(ТипЭлемента, "План видов характеристик объект") Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовХарактеристикСсылка", ТолькоСсылка);

        

    ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланСчетовСсылка", ТолькоСсылка);

    ИначеЕсли Найти(ТипЭлемента, "План счетов объект") Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланСчетовСсылка", ТолькоСсылка);

        

    ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовРасчетаСсылка", ТолькоСсылка);

    ИначеЕсли Найти(ТипЭлемента, "План видов расчетов объект") Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовРасчетаСсылка", ТолькоСсылка);

        

    ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"БизнесПроцессСсылка", ТолькоСсылка);

    ИначеЕсли Найти(ТипЭлемента, "Бизнес-процесс объект") Тогда        

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"БизнесПроцессСсылка", ТолькоСсылка);

        

    ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ЗадачаСсылка", ТолькоСсылка);

    ИначеЕсли Найти(ТипЭлемента, "Задача объект") Тогда

        НовоеЗначение = ОбъектВСтруктуру(Элемент,"ЗадачаСсылка", ТолькоСсылка);

        

    ИначеЕсли Найти(ТипЭлемента, "Регистр сведений") Тогда

        НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрСведенийНаборЗаписей");

        

    ИначеЕсли Найти(ТипЭлемента, "Регистр накопления") Тогда    

        НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрНакопленияНаборЗаписей");

        

    ИначеЕсли Найти(ТипЭлемента, "Регистр бухгалтерии") Тогда    

        НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрБухгалтерииНаборЗаписей");

    Иначе

        НовоеЗначение = Новый Структура("СложныйТип, Тип, Представление", Истина, Строка(ТипЭлемента), Строка(Элемент));

    КонецЕсли;

    

    Возврат НовоеЗначение;

КонецФункции

Функция ВыгрузитьНаборЗаписей(Источник, КоллекцияТипа)

    Мета = Источник.Метаданные();

    Данные = ДанныеВПростыеТипыРекурсивно(Источник.Выгрузить(),Истина);

    

    ДанныеНабора = Новый Структура("Тип, Отбор, НаборЗаписей");

    ДанныеНабора.Вставить("Тип", КоллекцияТипа + "." + Мета.Имя);

    ДанныеНабора.Вставить("НаборЗаписей", Данные);

    

    Отбор = Новый Массив;

    Для Каждого ЭлементОтбора Из Источник.Отбор Цикл

        СтруктураОтбора = Новый Структура("Имя, ВидСравнения, Значение");

        СтруктураОтбора.Вставить("Имя",          ЭлементОтбора.Имя);

        СтруктураОтбора.Вставить("ВидСравнения", Строка(ЭлементОтбора.ВидСравнения));

        СтруктураОтбора.Вставить("Значение",     ЗначениеВJSON(ЭлементОтбора.Значение, Истина));

        

        Отбор.Добавить(СтруктураОтбора);

    КонецЦикла;

    ДанныеНабора.Вставить("Отбор", Отбор);

    Возврат ДанныеНабора;

КонецФункции

Функция ЗначениеВJSON(Элемент, ТолькоСсылка = Ложь)

    
    Если ТипЗнч(Элемент) = Тип("Число") ИЛИ

         ТипЗнч(Элемент) = Тип("Булево") ИЛИ             

         ТипЗнч(Элемент) = Тип("Дата")    

    Тогда

        НовоеЗначение = Элемент;

    ИначеЕсли ТипЗнч(Элемент) = Тип("Строка") Тогда

        НовоеЗначение = Элемент;

    ИначеЕсли ТипЗнч(Элемент) = Тип("null") Тогда

        НовоеЗначение = "";

    ИначеЕсли ТипЗнч(Элемент) = Тип("УникальныйИдентификатор") Тогда

        НовоеЗначение = Строка(Элемент);

    ИначеЕсли ТипЗнч(Элемент) = Тип("Неопределено") Тогда

        НовоеЗначение = "";

    ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда    

        НовоеЗначение = Новый Структура;

        Для Каждого ВложенныйЭлемент Из Элемент Цикл

            НовоеЗначение.Вставить(ВложенныйЭлемент.Ключ, ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент.Значение, ТолькоСсылка));

        КонецЦикла;

    ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда    

        НовоеЗначение = Новый Массив;

        Для Каждого ВложенныйЭлемент Из Элемент Цикл

            НовоеЗначение.Добавить(ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент, ТолькоСсылка));

        КонецЦикла;

    ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда    

        НовоеЗначение = ДанныеВПростыеТипыРекурсивно(Элемент, ТолькоСсылка);

    Иначе

        НовоеЗначение = Объект1сВJSON(Элемент, ТолькоСсылка);

    КонецЕсли;

    

    Возврат НовоеЗначение;

    

КонецФункции // СтруктураВJSON()

 
#КонецОбласти 
