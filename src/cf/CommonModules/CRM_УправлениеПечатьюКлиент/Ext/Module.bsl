////////////////////////////////////////////////////////////////////////////////
// Подсистема "Печать".
//
////////////////////////////////////////////////////////////////////////////////

// ++ VOG Солодов В.В. 12.05.2020 CRM-631
#Область ПрограммныйИнтерфейс

#Область КомплектыДокументов

// Отправляет на печать комплект документов
//
// Параметры:
//  ОписаниеКоманды - Структура - сведения о выполняемой команде.
//
Функция ПечатьКомплектаДокументов(ОписаниеКоманды) Экспорт
	
	ЗапрашиватьПодтверждение = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов");
	Если ЗапрашиватьПодтверждение <> Неопределено Тогда
		ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов = ЗапрашиватьПодтверждение;
	Иначе
		ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов = Истина;
	КонецЕсли; 
	
	Если ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("КодВозвратаДиалога.Да",	НСтр("ru = 'Распечатать'"));
		Кнопки.Добавить("КодВозвратаДиалога.Нет",	НСтр("ru = 'Не печатать'"));
		
		Параметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		Параметры.КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
		Параметры.Заголовок = НСтр("ru = 'Печать комплекта документов'");
		Параметры.КнопкаТаймаута = КодВозвратаДиалога.Нет;
		Параметры.БольшеНеЗадаватьЭтотВопрос = ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов;
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
			Новый ОписаниеОповещения("ПечатьКомплектаДокументовЗавершение", ЭтотОбъект, Новый Структура("ОписаниеКоманды", ОписаниеКоманды)),
			НСтр("ru = 'Распечатать комплект документов на принтере?'"), 
			Кнопки,
			Параметры);
		Возврат Ложь;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Документы отправлены на печать'"),
		,
		,
		БиблиотекаКартинок.Информация32);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
		"РегистрСведений.НастройкиПечатиОбъектов",
		"КомплектДокументов",
		ОписаниеКоманды.ОбъектыПечати,
		Новый Структура);
	
КонецФункции

// Служебная процедура, обработка оповещения.
//
// Параметры:
//  Результат				 - Структура - результат после вопроса пользователю.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры оповещения.
//
Процедура ПечатьКомплектаДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриПечатиКомплектаДокументов", Не Результат.БольшеНеЗадаватьЭтотВопрос);
	
	Если Результат.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Документы отправлены на печать'"),
		,
		,
		БиблиотекаКартинок.Информация32);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
		"РегистрСведений.НастройкиПечатиОбъектов",
		"КомплектДокументов",
		ОписаниеКоманды.ОбъектыПечати,
		Новый Структура);
	
КонецПроцедуры

// Отправляет на печать комплект документов с настройкой
//
// Параметры:
//  ОписаниеКоманды - Структура - сведения о выполняемой команде.
Функция ПечатьКомплектаДокументовСНастройкой(ОписаниеКоманды) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объекты", 					ОписаниеКоманды.ОбъектыПечати);
	ПараметрыФормы.Вставить("ДополнительныеПараметры", 	ОписаниеКоманды.ДополнительныеПараметры);
	
	ОткрытьФорму("РегистрСведений.НастройкиПечатиОбъектов.Форма.НастройкаПечатиКомплекта", ПараметрыФормы);
	
КонецФункции

#КонецОбласти

#КонецОбласти
// -- VOG Солодов В.В. 12.05.2020

#Область СлужебныеПроцедурыИФункции

//
//
Функция УпорядочитьИменаТЧПоМакетуMicrosoftWord(МассивИмен, COMСоединение)
	
	СписокИмен = Новый СписокЗначений;
	СписокИмен.ЗагрузитьЗначения(МассивИмен);
	
	Для Каждого ЭлементСписка Из СписокИмен Цикл
		
		Имя = ЭлементСписка.Значение;
		
		ИдентификаторОбласти = "{v8 Область.ШапкаТаблицы" + Имя + "}";
		
		ВесьДокумент = COMСоединение.ActiveDocument.Content;
		ВесьДокумент.Select();
		
		Поиск = COMСоединение.Selection.Find;
		Поиск.Text = ИдентификаторОбласти;
		Поиск.ClearFormatting();
		Поиск.Forward = Истина;
		Поиск.execute();
		
		Если Поиск.Found Тогда
			ПозицияНачалаОбласти = COMСоединение.Selection.End;
			ЭлементСписка.Значение = ПозицияНачалаОбласти;
			//ЭлементСписка.Представление = Строка(ПозицияНачалаОбласти);
		Иначе
			ЭлементСписка.Значение = 999999999999999999;
			//ЭлементСписка.Представление = "999999999999999999";
		КонецЕсли;
		ЭлементСписка.Представление	= Имя;
	КонецЦикла;
	
	СписокИмен.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Массив = Новый Массив;
	Для Каждого ЭлементСписка Из СписокИмен Цикл
		Массив.Добавить(ЭлементСписка.Представление);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция УпорядочитьИменаТЧПоМакетуOpenOffice(МассивИмен, Handler)
	
	СписокИмен = Новый СписокЗначений;
	СписокИмен.ЗагрузитьЗначения(МассивИмен);
	
	xDocument	= Handler.Document;
	oText		= xDocument.Text.getText().String;
	
	Для Каждого ЭлементСписка Из СписокИмен Цикл
		
		Имя = ЭлементСписка.Значение;
		
		ТекстДляПоиска = "{v8 Область.ШапкаТаблицы" + Имя + "}";
		
		Рез = Найти(oText, ТекстДляПоиска);
		
		ЭлементСписка.Значение		= ?(Рез = 0,999999999999999999,Рез);
		ЭлементСписка.Представление	= Имя;
		
	КонецЦикла;
	
	СписокИмен.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Массив = Новый Массив;
	Для Каждого ЭлементСписка Из СписокИмен Цикл
		Массив.Добавить(ЭлементСписка.Представление);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

//
//
Процедура ПечатьВнешнегоМакетаMicrosoftWord(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета, ЛокальныйКаталогФайловПечати) Экспорт
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Попытка
		Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета, Макет);
		
		Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда

			// Вывод колонтитулов документа.
			
			//ВОГ ++
			Если ТипЗнч(ДокументСсылка) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
			КонецЕсли;
			
			//ВОГ --
			
			// Вывод верхней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
// 1. Печать Коммерческого предложения.
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			
				// Выведем варианты
				ВыводитьСтрокуВарианта = (ДанныеОбъекта.Варианты.Количество() > 1);
				
				Для Каждого ДанныеВарианта Из ДанныеОбъекта.Варианты Цикл
					Если ВыводитьСтрокуВарианта Тогда
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						
					Попытка
						
						ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
						ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
						
						ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
						
					Исключение
						
						ТоварыЕстьРазделители = Ложь;
						
					КонецПопытки;				
					
					Если ТоварыЕстьРазделители Тогда
						
						// выводим построчно
						КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
						
						Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
							
							МассивСтрокиТовары = Новый Массив;
							МассивСтрокиТовары.Добавить(СтрокаТовары);
							
							Если СтрокаТовары.ТипСтроки = "Разделитель" Тогда
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
								
							ИначеЕсли СтрокаТовары.ТипСтроки = "ИтогПоРазделу" Тогда
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьИтогиПоРазделу, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
								
							Иначе
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
								
							КонецЕсли;
							
							КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
							
						КонецЦикла;
						
					Иначе
						
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
						
					КонецЕсли;
					
					Попытка // Для совместимости с предыдущей версией
						// вывод итогов табличной части.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					Исключение
					КонецПопытки;
						
				КонецЦикла;
				
				// Вывод нижней части документа - обычная область с параметрами.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
				//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
// 2. Печать всего остального
			Иначе
				Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
					
					ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуMicrosoftWord(ДанныеОбъекта.ТабличныеЧасти, Макет.COMСоединение);
					Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"+ИмяТЧ+"Текст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"+ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица"+ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица"+ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
						Исключение
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка"+ИмяТЧ+"Номенклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ+"Номенклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка"+ИмяТЧ+"Всего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ+"Всего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
						КонецПопытки;
						
					КонецЦикла;
				Иначе
					
					// Вывод коллекции данных из информационной базы в виде таблицы.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
					КонецПопытки;
					
					// Вывод коллекции данных из информационной базы в виде нумерованного списка.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
					КонецПопытки;
					
					// Вывод коллекции данных из информационной базы в виде списка.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
				// Вывод нижней части документа - обычная область с параметрами.
				Попытка
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма,Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
КонецПроцедуры

//
//
Процедура ПечатьВнешнегоМакетаOpenOffice(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета, ЛокальныйКаталогФайловПечати) Экспорт
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Попытка
		
		Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
		
		Если Не ПечатнаяФорма = Неопределено И Не Макет = Неопределено Тогда
			
			// Вывод колонтитулов документа.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
			
			Попытка
				// Вывод верхней части документа - обычная область с параметрами.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			Исключение
			КонецПопытки;
// 1. Печать Коммерческого предложения.
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				
				// Выведем варианты
				ВыводитьСтрокуВарианта = (ДанныеОбъекта.Варианты.Количество() > 1);
				
				Для Каждого ДанныеВарианта Из ДанныеОбъекта.Варианты Цикл
					Если ВыводитьСтрокуВарианта Тогда
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					// Вывод коллекции данных из информационной базы в виде таблицы.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
					
					Попытка
						
						ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
						ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
						
						//ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
						
					Исключение
						
						//ТоварыЕстьРазделители = Ложь;
						
					КонецПопытки;				
					
					ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
					
					Если ТоварыЕстьРазделители Тогда
						
						// выводим построчно
						КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
						
						Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
							
							МассивСтрокиТовары = Новый Массив;
							МассивСтрокиТовары.Добавить(СтрокаТовары);
							
							Если СтрокаТовары.ТипСтроки = "Разделитель" Тогда
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
								
							ИначеЕсли СтрокаТовары.ТипСтроки = "ИтогПоРазделу" Тогда
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьИтогиПоРазделу, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
								
							Иначе
								
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
								
							КонецЕсли;
							
							КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
							
						КонецЦикла;
					Иначе
						
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
						
					КонецЕсли;
					
					Попытка // Для совместимости с предыдущей версией
					// вывод итогов табличной части.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					Исключение
					КонецПопытки;
				КонецЦикла;
				
				// Вывод нижней части документа - обычная область с параметрами.
				Попытка
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
				КонецПопытки;
// 2. Печать всего остального
			Иначе
			Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
					
					ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуOpenOffice(ДанныеОбъекта.ТабличныеЧасти, Макет);
					Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"+ИмяТЧ+"Текст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"+ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица"+ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица"+ИмяТЧ]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
						Исключение
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка"+ИмяТЧ+"Номенклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ+"Номенклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка"+ИмяТЧ+"Всего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ+"Всего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
						Исключение
						КонецПопытки;
						
					КонецЦикла;
				Иначе
					
					// Вывод коллекции данных из информационной базы в виде таблицы.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
					КонецПопытки;
					
					// Вывод коллекции данных из информационной базы в виде нумерованного списка.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
					КонецПопытки;
					
					// Вывод коллекции данных из информационной базы в виде списка.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					Исключение
					КонецПопытки;
					
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				// Вывод нижней части документа - обычная область с параметрами.
				Попытка
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
		КонецЕсли;
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
		
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
КонецПроцедуры

//
//
Процедура ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, НомерВарианта = Неопределено) Экспорт
	
	МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьВнешниеМакетыИДанныеОбъектов(ИмяМакета, ОбъектыНазначения, НомерВарианта);
	Если Найти(ИмяМакета, "ПФ_DOC") > 0 Тогда
		ТипМакета = "DOC";
	ИначеЕсли Найти(ИмяМакета, "ПФ_ODT") > 0 Тогда
		ТипМакета = "ODT";
	КонецЕсли;
	Для Каждого ЭлементСписка Из ОбъектыНазначения Цикл
		Если ТипМакета = "DOC" Тогда
			ПечатьВнешнегоМакетаMicrosoftWord(ЭлементСписка.Значение, МакетИДанныеОбъекта, ИмяМакета, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		ИначеЕсли ТипМакета = "ODT" Тогда
			ПечатьВнешнегоМакетаOpenOffice(ЭлементСписка.Значение, МакетИДанныеОбъекта, ИмяМакета, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//
//
Процедура ПечатьВстроенногоМакета(ИмяМакета, ОбъектыНазначения, НомерВарианта = Неопределено) Экспорт
	
	МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьМакетыИДанныеОбъектов(ИмяМакета, ОбъектыНазначения, НомерВарианта);
	Если Найти(ИмяМакета, "ПФ_DOC") > 0 Тогда
		ТипМакета = "DOC";
	ИначеЕсли Найти(ИмяМакета, "ПФ_ODT") > 0 Тогда
		ТипМакета = "ODT";
	КонецЕсли;
	Для Каждого ЭлементСписка Из ОбъектыНазначения Цикл
		Если ТипМакета = "DOC" Тогда
			ПечатьВнешнегоМакетаMicrosoftWord(ЭлементСписка.Значение, МакетИДанныеОбъекта, ИмяМакета, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		ИначеЕсли ТипМакета = "ODT" Тогда
			ПечатьВнешнегоМакетаOpenOffice(ЭлементСписка.Значение, МакетИДанныеОбъекта, ИмяМакета, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область КоммерческоеПредложение
Функция CRM_ПечатьКоммерческоеПредложениеMicrosoftWord(ОписаниеКоманды) Экспорт
	
	СоставДокументовИВариант = Новый Структура;
	СоставДокументовИВариант.Вставить("СоставДокументов", ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		СоставДокументовИВариант.Вставить("НомерВарианта", ОписаниеКоманды.НомерВарианта);
	Иначе
		СоставДокументовИВариант.Вставить("НомерВарианта", CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища());
	КонецЕсли;
	
	СоставДокументов = ОписаниеКоманды.ОбъектыПечати;
	
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
	
	ИмяМакета = "CRM_ПФ_DOC_КоммерческоеПредложение";
	ТипМакета = "doc";
	
	МассивИменМакетов		= СтрРазделить(ИмяМакета, ", ", Ложь);
	МакетИДанныеОбъекта		= CRM_МетодыМодулейМенеджеровДокументов.КП_ПолучитьДанныеПечати(СоставДокументовИВариант, МассивИменМакетов);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Области = МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	Для Каждого ДокументСсылка Из СоставДокументов Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		Попытка
			Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета, Макет);
			
			Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда
				
				// Вывод колонтитулов документа.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
				
				// Вывод верхней части документа - обычная область с параметрами.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
	// 1. Печать Коммерческого предложения.
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				
					// Выведем варианты
					ВыводитьСтрокуВарианта = (ДанныеОбъекта.Варианты.Количество() > 1);
					
					Для Каждого ДанныеВарианта Из ДанныеОбъекта.Варианты Цикл
						Если ВыводитьСтрокуВарианта Тогда
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							
						Попытка
							
							ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
							ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
							
							ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
							
						Исключение
							
							ТоварыЕстьРазделители = Ложь;
							
						КонецПопытки;				
						
						Если ТоварыЕстьРазделители Тогда
							
							// выводим построчно
							КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
							
							Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
								
								МассивСтрокиТовары = Новый Массив;
								МассивСтрокиТовары.Добавить(СтрокаТовары);
								
								Если СтрокаТовары.ТипСтроки = "Разделитель" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
									
								ИначеЕсли СтрокаТовары.ТипСтроки = "ИтогПоРазделу" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьИтогиПоРазделу, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
									
								Иначе
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
									
								КонецЕсли;
								
								КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
								
							КонецЦикла;
							
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
							
						КонецЕсли;
						
						Попытка // Для совместимости с предыдущей версией
							// вывод итогов табличной части.
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						Исключение
						КонецПопытки;
							
					КонецЦикла;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
					//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					
	// 2. Печать всего остального
				Иначе
					Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
						
						ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуMicrosoftWord(ДанныеОбъекта.ТабличныеЧасти, Макет.COMСоединение);
						Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
							
							// Вывод коллекции данных из информационной базы в виде таблицы.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"+ИмяТЧ+"Текст"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"+ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица"+ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица"+ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
							Исключение
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде нумерованного списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка"+ИмяТЧ+"Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ+"Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка"+ИмяТЧ+"Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ+"Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
							КонецПопытки;
							
						КонецЦикла;
					Иначе
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
						КонецПопытки;
						
					КонецЕсли;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
				УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат Неопределено;
		КонецПопытки;
		
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Формирование печатных форм завершено'"));
	
КонецФункции

Функция CRM_ПечатьДоговорMicrosoftWord(ОписаниеКоманды) Экспорт
	
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_DOC_Договор", ОписаниеКоманды.ОбъектыПечати,
			ОписаниеКоманды.НомерВарианта);
	Иначе
		МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_DOC_Договор", ОписаниеКоманды.ОбъектыПечати,
			CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища());
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакетаMicrosoftWord(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_DOC_Договор", МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Формирование печатных форм завершено'"));
	
КонецФункции

Функция CRM_ПечатьКоммерческоеПредложениеOpenOfficeOrgWriter(ОписаниеКоманды) Экспорт
	
	СоставДокументовИВариант = Новый Структура;
	СоставДокументовИВариант.Вставить("СоставДокументов", ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		СоставДокументовИВариант.Вставить("НомерВарианта", ОписаниеКоманды.НомерВарианта);
	Иначе
		СоставДокументовИВариант.Вставить("НомерВарианта", CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища());
	КонецЕсли;
	
	СоставДокументов = ОписаниеКоманды.ОбъектыПечати;
	
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
	
	ИмяМакета = "CRM_ПФ_ODT_КоммерческоеПредложение";
	ТипМакета = "odt";
	
	МассивИменМакетов		= СтрРазделить(ИмяМакета, ", ", Ложь);
	МакетИДанныеОбъекта		= CRM_МетодыМодулейМенеджеровДокументов.КП_ПолучитьДанныеПечати(СоставДокументовИВариант, МассивИменМакетов);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Области = МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	Для Каждого ДокументСсылка Из СоставДокументов Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		Попытка
			
			Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
			
			Если Не ПечатнаяФорма = Неопределено И Не Макет = Неопределено Тогда
				
				// Вывод колонтитулов документа.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
				
				Попытка
					// Вывод верхней части документа - обычная область с параметрами.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				Исключение
				КонецПопытки;
	// 1. Печать Коммерческого предложения.
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
					
					// Выведем варианты
					ВыводитьСтрокуВарианта = (ДанныеОбъекта.Варианты.Количество() > 1);
					
					Для Каждого ДанныеВарианта Из ДанныеОбъекта.Варианты Цикл
						Если ВыводитьСтрокуВарианта Тогда
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
						
						Попытка
							
							ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
							ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
							
							//ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
							
						Исключение
							
							//ТоварыЕстьРазделители = Ложь;
							
						КонецПопытки;				
						
						ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
						
						Если ТоварыЕстьРазделители Тогда
							
							// выводим построчно
							КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
							
							Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
								
								МассивСтрокиТовары = Новый Массив;
								МассивСтрокиТовары.Добавить(СтрокаТовары);
								
								Если СтрокаТовары.ТипСтроки = "Разделитель" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
									
								ИначеЕсли СтрокаТовары.ТипСтроки = "ИтогПоРазделу" Тогда
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьИтогиПоРазделу, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
									
								Иначе
									
									УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
									
								КонецЕсли;
								
								КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
								
							КонецЦикла;
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
							
						КонецЕсли;
						
						Попытка // Для совместимости с предыдущей версией
						// вывод итогов табличной части.
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						Исключение
						КонецПопытки;
					КонецЦикла;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						//ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение
					КонецПопытки;
	// 2. Печать всего остального
				Иначе
				Если ДанныеОбъекта.Свойство("ТабличныеЧасти") Тогда
						
						ТабличныеЧасти = УпорядочитьИменаТЧПоМакетуOpenOffice(ДанныеОбъекта.ТабличныеЧасти, Макет);
						Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
							
							// Вывод коллекции данных из информационной базы в виде таблицы.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"+ИмяТЧ+"Текст"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицы"+ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблица"+ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблица"+ИмяТЧ]);
								УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
							Исключение
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде нумерованного списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка"+ИмяТЧ+"Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ+"Номенклатура"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
							КонецПопытки;
							
							// Вывод коллекции данных из информационной базы в виде списка.
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Шапка"+ИмяТЧ+"Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
							Исключение
							КонецПопытки;
							
							Попытка
								Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета][ИмяТЧ+"Всего"]);
								УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта[ИмяТЧ]);
							Исключение
							КонецПопытки;
							
						КонецЦикла;
					Иначе
						
						// Вывод коллекции данных из информационной базы в виде таблицы.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТоварыТекст"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде нумерованного списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыНоменклатура"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
						КонецПопытки;
						
						// Вывод коллекции данных из информационной базы в виде списка.
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
						Исключение
						КонецПопытки;
						
						Попытка
							Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ТоварыВсего"]);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеОбъекта.Товары);
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					// Вывод нижней части документа - обычная область с параметрами.
					Попытка
						Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
						УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
				УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			КонецЕсли;
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			Возврат Неопределено;
			
		КонецПопытки;

		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Формирование печатных форм завершено'"));
	
КонецФункции

Функция CRM_ПечатьДоговорOpenOfficeOrgWriter(ОписаниеКоманды) Экспорт
	
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
	
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_ODT_Договор", ОписаниеКоманды.ОбъектыПечати,
			ОписаниеКоманды.НомерВарианта);
	Иначе
		МакетыИДанные = CRM_УправлениеПечатьюВызовСервера.ПолучитьМакетИДанныеОбъектов("CRM_ПФ_ODT_Договор", ОписаниеКоманды.ОбъектыПечати,
			CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища());
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакетаOpenOffice(ОбъектСсылка, МакетыИДанные, "CRM_ПФ_ODT_Договор", МакетыИДанные.ЛокальныйКаталогФайловПечати);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Формирование печатных форм завершено'"));
	
КонецФункции

Функция CRM_ПечатьКоммерческоеПредложение(ОписаниеКоманды) Экспорт
	
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
		
	Если ОписаниеКоманды.Свойство("НомерВарианта") Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.КоммерческоеПредложениеКлиенту","КоммерческоеПредложение",
			ОписаниеКоманды.ОбъектыПечати, Неопределено, Новый Структура("НомерВарианта", ОписаниеКоманды.НомерВарианта));
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.КоммерческоеПредложениеКлиенту","КоммерческоеПредложение",
			ОписаниеКоманды.ОбъектыПечати, Неопределено, Новый Структура("НомерВарианта", CRM_УправлениеПечатьюВызовСервера.ПолучитьВариантНаПечатьИзХранилища()));
	КонецЕсли;
		
	Состояние(НСтр("ru = 'Формирование печатных форм завершено'"));
	
КонецФункции

#КонецОбласти

#Область СчетНаОплату
Функция CRM_ПечатьСчетаНаОплату(ОписаниеКоманды) Экспорт
	
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
		
	Если ОписаниеКоманды.ОбъектыПечати.Количество() = 1 Тогда
		ЕстьБанковскийСчет = Ложь;
		
		Источник = ОписаниеКоманды.ОбъектыПечати[0];
		
		ЕстьБанковскийСчет = ЗначениеЗаполнено(CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Источник, "БанковскийСчет")); 
		
		Если Не ЕстьБанковскийСчет Тогда
			
			Организация = Строка(CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Источник, "Организация"));
			
			ЗаголовокДиалога = НСтр("ru = 'Внимание!'");  
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(		
			НСтр("ru = 'Не выбран банковский счет организации ""%1""!
			|Продолжить печать?'"),
			Организация);							
			ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПечатьСчетаНаОплатуЗавершение", ЭтотОбъект, ОписаниеКоманды);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокДиалога);
			Возврат Неопределено;				
			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.CRM_СчетНаОплатуПокупателю","СчетНаОплату",
			ОписаниеКоманды.ОбъектыПечати, );
		
	Состояние(НСтр("ru = 'Формирование печатных форм завершено'"));
	
КонецФункции

&НаКлиенте
Процедура CRM_ПечатьСчетаНаОплатуЗавершение(Ответ, ОписаниеКоманды) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;				
	КонецЕсли;
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.CRM_СчетНаОплатуПокупателю","СчетНаОплату",
			ОписаниеКоманды.ОбъектыПечати, );
	Состояние(НСтр("ru = 'Формирование печатных форм завершено'"));
КонецПроцедуры

#КонецОбласти

#КонецОбласти
