
////////////////////////////////////////////////////////////////////////////////
// РАБОТА С GOOGLE CALENDAR API v3


////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НАСТРОЙКИ КАНАЛА СИНХРОНИЗАЦИИ

// Функция  создает канал синхронизации для текущего пользователя и указанного календаря
//
// Возвращаемое значение:
//  Результат    - Булево - признак успешной настройки канала.
// 
Функция НастроитьКаналСинхронизации(Пользователь = Неопределено) Экспорт

	Результат = Ложь;
	Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle(Пользователь) Тогда

		КодАвторизации = Неопределено;
		КодДействителен = ОбновитьКодАвторизации(Пользователь);
		Если КодДействителен Тогда
			Если Пользователь = Неопределено Тогда
				КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
			Иначе
				КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
			КонецЕсли;
		КонецЕсли;
		КодОтвета = 0;
		Если ЗначениеЗаполнено(КодАвторизации)  Тогда
			Если Пользователь = Неопределено Тогда
				ИдКалендаря    =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьGoogle");
			Иначе
				ИдКалендаря = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "КалендарьGoogle");
			КонецЕсли;
			ИдКанала = Новый УникальныйИдентификатор;	
			ВремяЖизниКанала = 365*24*60*60;
			
			ОписаниеКанала = СформироватьОписаниеКанала(ИдКанала,ВремяЖизниКанала);
			ФайлЗапроса = ПолучитьИмяВременногоФайла("txt");
			
			ЗаписатьФайлВформате_UTF8_без_BOM(ОписаниеКанала,ФайлЗапроса);
			Файл = Новый Файл(ФайлЗапроса);
			РазмерФайла = Файл.Размер();
			Файл = Неопределено;
				
			Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина);

			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
			Заголовки.Вставить("Content-Type",	"application/json ; charset=UTF-8");
			Заголовки.Вставить("Content-Length", Формат(РазмерФайла, "ЧГ="));

			ФайлРезультата = ПолучитьИмяВременногоФайла("txt");
			АдресРесурса = "/calendar/v3/calendars/"+ИдКалендаря+"/events/watch";
			ЗапросHTTP				= Новый HTTPЗапрос;
			ЗапросHTTP.АдресРесурса	= АдресРесурса;
			ЗапросHTTP.Заголовки	= Заголовки;
			ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);
			Попытка 
				Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
				Если Ответ.КодСостояния =  200 Тогда
					// найдем время жизни канала
					// в документации написано, что по умолчанию время жизни 3600 сек, но как показала
					// практика - 1 неделю. Можно самому указывать время жизни
					ТекстовыйФайл = Новый ТекстовыйДокумент;
					ТекстовыйФайл.Прочитать(ФайлРезультата,"UTF-8");
					РезультатСоответствие = UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
					// добавим ИД   календаря
					ИдКалендаряКанала = РезультатСоответствие.Получить("resourceId");
					ВремяЖизниКанала = РезультатСоответствие.Получить("expiration");
					
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ИдКалендаряКанала, "ИдКалендаряКанала",Пользователь);
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ИдКанала, "IDКаналаGApi",Пользователь);
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ТекущаяДатаСеанса()+604800, "ВремяЖизниКаналаGApi",Пользователь);
					Результат = Истина И СоздатьЗаписьОКаналеНаСайте(ИдКалендаряКанала,ИдКанала);
				КонецЕсли;	
			Исключение
				СообщениеСОшибкой = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не удалось настроить канал синхронизации по причине: '") + Символы.ПС + СообщениеСОшибкой;
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
		// запрос на сайтик
	КонецЕсли;
	Возврат Результат;
	
КонецФункции // НастроитьКаналСинхронизации

// Процедура отключает ранее настроенный канал связи
// Вызывается при смене календаря или при отключении синхронизации с Google
//
Процедура ОтключитьКаналСинхронизации(Пользователь = Неопределено) Экспорт
	
	КодДействителен = ОбновитьКодАвторизации(Пользователь);
	Если КодДействителен Тогда
		Если Пользователь = Неопределено Тогда
			КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
		Иначе
			КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
		КонецЕсли;

		ИдКалендаряКанала = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИдКалендаряКанала");
		ИдКанала          = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("IDКаналаGApi");
		Если ЗначениеЗаполнено(ИдКанала) Тогда
			ОписаниеКанала = "{
	  						|	""id"": """+ИдКанала+""",
	 						| 	""resourceId"": """+ИдКалендаряКанала+"""
							|  }";
			ФайлЗапроса = ПолучитьИмяВременногоФайла("txt");
			                                                                 
			ЗаписатьФайлВформате_UTF8_без_BOM(ОписаниеКанала,ФайлЗапроса);
			Файл = Новый Файл(ФайлЗапроса);
			РазмерФайла = Файл.Размер();
			Файл = Неопределено;
				
			Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина);
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
			Заголовки.Вставить("Content-Type",	"application/json ; charset=UTF-8");
			Заголовки.Вставить("Content-Length", Формат(РазмерФайла, "ЧГ="));

			ФайлРезультата = ПолучитьИмяВременногоФайла("txt");
			АдресРесурса = "calendar/v3/channels/stop";
			ЗапросHTTP				= Новый HTTPЗапрос;
			ЗапросHTTP.АдресРесурса	= АдресРесурса;
			ЗапросHTTP.Заголовки	= Заголовки;
			ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);
			Попытка 
				Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
				Если (Ответ.КодСостояния = 200) ИЛИ (Ответ.КодСостояния = 204) Тогда
					// если успешно отключили канал - обнуляем настройки
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя("", "IDКаналаGApi");
					CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(Дата(1,1,1), "ВремяЖизниКаналаGApi");
					УдалитьЗаписьОКаналеНаСайте(ИдКалендаряКанала,ИдКанала);
				КонецЕсли;	
			Исключение
				СообщениеСОшибкой = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не удалось отключить канал синхронизации по причине: '") + Символы.ПС + СообщениеСОшибкой;
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтключитьКаналСинхронизации()

// Функция  проверяет настройку календаря и в случае необходимости перенастраивает канал обновления
//
// Возвращаемое значение:
//  КаналДействителен    - Булево - признак успешного обновления/существования канала.
// 
Функция ОбновитьКаналСинхронизации(Пользователь = Неопределено) Экспорт
		
	КаналДействителен = Ложь;
	Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle(Пользователь) Тогда

		Если Пользователь = Неопределено Тогда
			ИдКанала            =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("IDКаналаGApi");
			ВремяЖизниКанала    =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ВремяЖизниКаналаGApi");
		Иначе
			ИдКанала            =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "IDКаналаGApi");
			ВремяЖизниКанала    =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяЖизниКаналаGApi");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИдКанала) ИЛИ ТекущаяДатаСеанса()> ВремяЖизниКанала Тогда
			// удалим запись в таблице на сайте, если время жизни канала закончилось
			Если ТекущаяДатаСеанса()> ВремяЖизниКанала Тогда
				Если Пользователь = Неопределено Тогда
					ИдКалендаряКанала    =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИдКалендаряКанала");
				Иначе
					ИдКалендаряКанала = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ИдКалендаряКанала");
				КонецЕсли;
				Если ЗначениеЗаполнено(ИдКанала) Тогда
					УдалитьЗаписьОКаналеНаСайте(ИдКалендаряКанала,ИдКанала);
				КонецЕсли;
			КонецЕсли;
			КаналДействителен = НастроитьКаналСинхронизации(Пользователь);
		ИначеЕсли ЗначениеЗаполнено(ИдКанала) ИЛИ ТекущаяДатаСеанса()< ВремяЖизниКанала Тогда
			КаналДействителен = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	Возврат КаналДействителен;

КонецФункции // ОбновитьКаналСинхронизации()

// Функция  формирет json описание канала. !!!Переработать на внутренний механизм формирования json,
// когда он станет доступен
//
// Параметры:
//  ИдКанала  - Строка - уникальный идентификатор канала.
//  ВремяЖизниКанала - Число - время жизни канала в секундах.
//
// Возвращаемое значение:
//  Текст    - Строка - содержит описание канала в виде json-модели.
// 
Функция СформироватьОписаниеКанала(ИдКанала,ВремяЖизниКанала)
	
	// возвможно сайт стоит вынести в константу
	// токен может быть любой
	Текст = "{
	  |""id"": """+ИдКанала+""",
	  |""type"": ""web_hook"",
	  |""address"": ""https://pushtest.rarus.ru/notifications.php"", 
	  |""token"": ""target=myApp-myCalendarChannelDest""
	  |}";
	Возврат Текст;
				
КонецФункции // СформироватьОписаниеКанала()

////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НАСТРОЙКИ КАНАЛА СИНХРОНИЗАЦИИ НА САЙТЕ https://pushtest.rarus.ru/

Функция  УдалитьЗаписьОКаналеНаСайте(ИдКалендаря,ИдКанала)
	
	Результат = Ложь;
	Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle() Тогда

		Соединение = Новый HTTPСоединение("pushtest.rarus.ru",,,,,Истина);
		Запрос = Новый  HTTPЗапрос;
		Запрос.АдресРесурса =  "stopChannel.php?channel="+ИдКанала+"&resourse="+ИдКалендаря;
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
		Попытка
			Ответ = Соединение.Получить(Запрос,ИмяВыходногоФайла);
			Если Ответ.КодСостояния = 200 Тогда
				Результат = Истина;
			Иначе
				Результат = Ложь;
			КонецЕсли;
		Исключение
			
			СообщениеСОшибкой = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не удалось удалить запись о канале синхронизации на сайте pushtest.rarus.ru по причине: '") + Символы.ПС + СообщениеСОшибкой;
			Сообщение.Сообщить();

			Результат = Ложь;
		КонецПопытки;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция  СоздатьЗаписьОКаналеНаСайте(ИдКалендаря,ИдКанала) Экспорт
	
	Результат = Ложь;
	Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle() Тогда
		
		Соединение = Новый HTTPСоединение("pushtest.rarus.ru",,,,,Истина);
		Запрос = Новый  HTTPЗапрос;
		Запрос.АдресРесурса =  "signup.php?channel="+ИдКанала+"&resourse="+ИдКалендаря+"&email="+Константы.CRM_УчетнаяЗаписьПолученияОповещенийGAPI.Получить().АдресЭлектроннойПочты;
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла();
		Попытка
			Ответ = Соединение.Получить(Запрос,ИмяВыходногоФайла);
			Если Ответ.КодСостояния = 200 Тогда
				Результат = Истина;
			Иначе
				Результат = Ложь;
			КонецЕсли;
		Исключение
			СообщениеСОшибкой = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не удалось создать запись о канале синхронизации на сайте pushtest.rarus.ru по причине: '") + Символы.ПС + СообщениеСОшибкой;
			Сообщение.Сообщить();
			
			Результат = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОЛУЧЕНИЯ ТОКЕНОВ ДОСТУПА

// Функция  проверяет актуальность токена доступа и в случае необходимости обновляет его
//
// Возвращаемое значение:
//  КодДействителен    - Булево - признак успешного обновления/существования токена.
// 
Функция ОбновитьКодАвторизации(Пользователь = Неопределено)
	
	КодДействителен = Ложь;            
	// токен доступа
	Если Пользователь = Неопределено Тогда
		Access_token = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
		ВремяЖизниТокена = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ВремяЖизниТокенаAPI");
	Иначе
		Access_token = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
		ВремяЖизниТокена = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВремяЖизниТокенаAPI");
	КонецЕсли;

	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Access_token) ИЛИ ТекущаяДатаСеанса()> ВремяЖизниТокена Тогда
		СтруктураТокенаАвторизации = ПолучитьКодАвторизации(Пользователь);
		Если Не СтруктураТокенаАвторизации = Неопределено Тогда 
			CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(СтруктураТокенаАвторизации.access_token, "AccessTokenGApi", Пользователь);
			CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ТекущаяДатаСеанса()+Число(СтруктураТокенаАвторизации.TTL), "ВремяЖизниТокенаAPI", Пользователь);
			КодДействителен = Истина;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Access_token) ИЛИ ТекущаяДатаСеанса()< ВремяЖизниТокена Тогда
		КодДействителен = Истина;
	КонецЕсли;
	
	Возврат КодДействителен;

КонецФункции // ОбновитьКодАвторизации()

// Функция обвновляет токен доступа.
// В дальнейшем токен доступа используется для непосредственного обращения к Calendar API  
//
// Возвращаемое значение:
//  СтруктураТокенов    - Неопределено,Структура - Неопределено возврящается в случае неуспешной попытки получения 
// токена доступа. Структура возвращается при успешной попытке получения токен обновления. Содержит текущий токен
// доступа и его время жизни
// 
Функция ПолучитьКодАвторизации(Пользователь = Неопределено) Экспорт
		
	МакетНастроекКонсоли = ПолучитьОбщийМакет("CRM_ПараметрыПриложенияGoogle");
	Client_id         = МакетНастроекКонсоли.ПолучитьОбласть("Client_id|Значение").ТекущаяОбласть.Текст;
	Client_secret     = МакетНастроекКонсоли.ПолучитьОбласть("Client_secret|Значение").ТекущаяОбласть.Текст;
	Redirect_uri      = МакетНастроекКонсоли.ПолучитьОбласть("Redirect_uri|Значение").ТекущаяОбласть.Текст;
	// в текущем сеансе
	Если Пользователь = Неопределено Тогда
		Refresh_token     = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("RefreshTokenGApi");
	Иначе
		Refresh_token = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "RefreshTokenGApi");
	КонецЕсли;
	СтруктураТокенов = Новый Структура;
	Сервер = "accounts.google.com";
    Ресурс = "/o/oauth2/token";
	КодОтвета = 0;
	
	Если ЗначениеЗаполнено(Refresh_token) Тогда
	    Соединение = Новый HTTPСоединение(Сервер,,,,,Истина);
	    ФайлЗапроса = ПолучитьИмяВременногоФайла();
	    ТекстовыйФайл = Новый ТекстовыйДокумент;
	    ПараметрыЗапроса = "client_id=" + Client_id + "&client_secret=" + Client_secret + "&refresh_token=" + Refresh_token + "&grant_type=refresh_token";
	    ТекстовыйФайл.УстановитьТекст(ПараметрыЗапроса);
	    ТекстовыйФайл.Записать(ФайлЗапроса);
	    ФайлРезультата = ПолучитьИмяВременногоФайла();
	    Заголовки = Новый Соответствие;
	    Заголовки.Вставить("Host","accounts.google.com");
	    Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
		ЗапросHTTP				= Новый HTTPЗапрос;
		ЗапросHTTP.АдресРесурса	= Ресурс;
		ЗапросHTTP.Заголовки	= Заголовки;
		ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);
		Попытка 
			Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
	        КодОтвета = Ответ.КодСостояния;
		Исключение
			СообщениеСОшибкой = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не удалось получить код доступа к Google API по причине: '") + Символы.ПС + СообщениеСОшибкой;
			Сообщение.Сообщить();
		КонецПопытки;
		
		Если КодОтвета = 200 Тогда
			ФайлОтвет = Новый ТекстовыйДокумент();
			ФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
			ТекстОтвета = ФайлОтвет.ПолучитьТекст();
			
			Для н = 1 По СтрЧислоСтрок(ТекстОтвета) Цикл
				ТекСтр = СтрПолучитьСтроку(ТекстОтвета, н);
				Если Найти(ТекСтр, "access_token") > 0 Тогда
					access_token = Сред(ТекСтр, 21, СтрДлина(ТекСтр) - 22);
					СтруктураТокенов.Вставить("access_token", access_token);
				КонецЕсли;
				Если Найти(ТекСтр, "expires_in") > 0 Тогда
					expires_in = Сред(ТекСтр, 18, СтрДлина(ТекСтр) - 18);
					СтруктураТокенов.Вставить("TTL", expires_in);
				КонецЕсли;
			КонецЦикла;
			Возврат СтруктураТокенов;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьКодАвторизации()

// Функция получает токен обновления.
// В дальнейшем токен обновления используется для получения токена доступа.
// Токен обновления получается 1 раз
//
// Возвращаемое значение:
//  СтруктураТокенов    - Неопределено,Структура - Неопределено возврящается в случае неуспешной попытки получения 
// токена доступа. Структура возвращается при успешной попытке получения токен обновления. Содержит текущий токен
// доступа и его время жизни
// 
Функция ПолучитьСтруктуруТокенов(ТокенДоступа) Экспорт
	
	МакетНастроекКонсоли = ПолучитьОбщийМакет("CRM_ПараметрыПриложенияGoogle");
	Client_id         = МакетНастроекКонсоли.ПолучитьОбласть("Client_id|Значение").ТекущаяОбласть.Текст;
	Client_secret     = МакетНастроекКонсоли.ПолучитьОбласть("Client_secret|Значение").ТекущаяОбласть.Текст;
	Redirect_uri      = МакетНастроекКонсоли.ПолучитьОбласть("Redirect_uri|Значение").ТекущаяОбласть.Текст;

	СтруктураТокенов = Новый Структура;
	Сервер = "accounts.google.com";
    Ресурс = "/o/oauth2/token";
		
    Соединение = Новый HTTPСоединение(Сервер,,,,,Истина);
    ФайлЗапроса = ПолучитьИмяВременногоФайла();
    ТекстовыйФайл = Новый ТекстовыйДокумент;
    ПараметрыЗапроса = "code="+ТокенДоступа+"&";
    ПараметрыЗапроса = ПараметрыЗапроса+"client_id="+Client_id+"&client_secret="+Client_secret+"&redirect_uri="+Redirect_uri+"&grant_type=authorization_code";
    ТекстовыйФайл.УстановитьТекст(ПараметрыЗапроса);
    ТекстовыйФайл.Записать(ФайлЗапроса);
    ФайлРезультата = ПолучитьИмяВременногоФайла();
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("Host","accounts.google.com");
    Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
	ЗапросHTTP				= Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса	= Ресурс;
	ЗапросHTTP.Заголовки	= Заголовки;
	ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);
	Попытка 
		Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
		Если Ответ.КодСостояния = 200 Тогда
			ФайлОтвет = Новый ТекстовыйДокумент();
			ФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
			ТекстОтвета = ФайлОтвет.ПолучитьТекст();
			
			Для н = 1 По СтрЧислоСтрок(ТекстОтвета) Цикл
				ТекСтр = СтрПолучитьСтроку(ТекстОтвета, н);
				Если Найти(ТекСтр, "access_token") > 0 Тогда
					access_token = Сред(ТекСтр, 21, СтрДлина(ТекСтр) - 22);
					СтруктураТокенов.Вставить("access_token", access_token);
				КонецЕсли;
				Если Найти(ТекСтр, "expires_in") > 0 Тогда
					expires_in = Сред(ТекСтр, 18, СтрДлина(ТекСтр) - 18);
					СтруктураТокенов.Вставить("TTL", expires_in);
				КонецЕсли;
				Если Найти(ТекСтр, "refresh_token") > 0 Тогда
					refresh_token = Сред(ТекСтр, 22, СтрДлина(ТекСтр) - 23);
					СтруктураТокенов.Вставить("refresh_token",refresh_token);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		СообщениеСОшибкой = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось получить код доступа к Google API по причине: '") + Символы.ПС + СообщениеСОшибкой;
		Сообщение.Сообщить();
	КонецПопытки;
		
	Возврат СтруктураТокенов;

КонецФункции // ПолучитьСтруктуруТокенов()

//Процедура - обработчик события закрытия формы "Авторизация Google Calendar". Сохраняет
// токен обновления и токен доступа
//
// Параметры:
//  РезультатЗакрытия  - Произвольный - Результат выполнения операции в подчиненной форме.
//  ПараметрОповещения - Произвольный - Дополнительные параметры вызова обработчика.
//
Процедура СохранитьТокены(РезультатЗакрытия, ПараметрОповещения=Неопределено) Экспорт	
	
	Если ЗначениеЗаполнено(РезультатЗакрытия)  И ТипЗнч(РезультатЗакрытия) = Тип("Строка") Тогда
		СтруктураТокеновАвторизации = ПолучитьСтруктуруТокенов(РезультатЗакрытия);
		CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(СтруктураТокеновАвторизации.refresh_token, "RefreshTokenGApi");
		CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(СтруктураТокеновАвторизации.access_token, "AccessTokenGApi");
		CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ТекущаяДатаСеанса()+ Число(СтруктураТокеновАвторизации.TTL), "ВремяЖизниТокенаAPI");
	КонецЕсли;
	
КонецПроцедуры  // СохранитьТокены()


////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С СОБЫТИЯМИ

// Процедура создает или обновляет событие в Google календаре
//
// Параметры:
//  ОбъектСобытия    - Ссылка на объект - документ "Событие", которое необходимо синхронизировать
//
Процедура ОбновитьСобытиеВКалендаре(ОбъектСобытия, Пользователь = Неопределено, ИзмененРяд = Ложь, Оригинальное = Ложь, ИдПовтСобытия = Неопределено) Экспорт
	
	Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle(Пользователь) Тогда
		Если (ОбъектСобытия.Периодическое ИЛИ ОбъектСобытия.ИзмененоВРяде)  И НЕ ИзмененРяд Тогда
			ОбновитьПериодическоеСобытиеВКалендаре(ОбъектСобытия, Пользователь);
		Иначе
			// найдем ИД события
			НаборЗаписейРегистра = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.Объект.Установить(ОбъектСобытия.Ссылка);
			НаборЗаписейРегистра.Прочитать();

			Если НЕ ЗначениеЗаполнено(ИдПовтСобытия) Тогда 
				Если НЕ НаборЗаписейРегистра.Количество()= 0 Тогда
					ИдСобытияGApi = НаборЗаписейРегистра[0].ИдСобытияGApi;
					НомерПоследовательности = НаборЗаписейРегистра[0].НомерПоследовательностиGApi;
				КонецЕсли;
			Иначе
				ИдСобытияGApi = ИдПовтСобытия;
			КонецЕсли;
	
			Если Пользователь = Неопределено Тогда
				Пользователь = Пользователи.ТекущийПользователь();
			КонецЕсли;
			
			// 1С не поддреживает Patch запрос, с помощью которого можно обновить "чужое событие"
			Если ОбъектСобытия.ОрганизаторGApi = Пользователь Тогда
				Если ОбновитьКодАвторизации(Пользователь) Тогда
					Если Пользователь = Неопределено Тогда
						КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
					Иначе
						КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
					КонецЕсли;
		
					КодОтвета = 0;
					Если ЗначениеЗаполнено(КодАвторизации)  Тогда
						Если Пользователь = Неопределено Тогда
							ИдКалендаря    =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьGoogle");
						Иначе
							ИдКалендаря = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "КалендарьGoogle");
						КонецЕсли;
						// при обновлении события обязательно необходимо увеличивать занчение параметра sequense
						Если ЗначениеЗаполнено(ИдСобытияGApi) Тогда
							НомерПоследовательности = ?(НомерПоследовательности=Неопределено,1,НомерПоследовательности+1);
						КонецЕсли;
						// сформируем json - описание события
						//!!! в 8.3 в ближайших релизах появится сериализатор и парсер json
						КатегорияПоУмолчанию = ПолучитьКатегориюДляКалендаря(КодАвторизации,ИдКалендаря);
						ОписаниеСобытия = СформироватьОписаниеСобытия(ОбъектСобытия,НомерПоследовательности, Оригинальное, КатегорияПоУмолчанию);
						//ОписаниеСобытия = СформироватьОписаниеСобытия(ОбъектСобытия,НомерПоследовательности,Истина);
						ФайлЗапроса = ПолучитьИмяВременногоФайла("txt");
						// Google не понимает файлы в utf-8 c BOM - байтом
						ЗаписатьФайлВформате_UTF8_без_BOM(ОписаниеСобытия,ФайлЗапроса);
						Файл = Новый Файл(ФайлЗапроса);
						РазмерФайла = Файл.Размер();
						Файл = Неопределено;
						
						Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина);
						Заголовки = Новый Соответствие;
						Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
						Заголовки.Вставить("Content-Type",	"application/json ; charset=UTF-8");
						Заголовки.Вставить("Content-Length", Формат(РазмерФайла, "ЧГ="));

						// апдейт put
						Если ЗначениеЗаполнено(ИдСобытияGApi) Тогда
							АдресРесурса = "/calendar/v3/calendars/"+ИдКалендаря+"/events/"+ИдСобытияGApi+?(ОбъектСобытия.РассылатьУведомлениПриИзмененииGApi,"?sendNotifications=true","");
							Попытка
								Ответ = Соединение.Записать(ФайлЗапроса, АдресРесурса, Заголовки);
								КодОтвета = Ответ.КодСостояния;
							Исключение
								СообщениеСОшибкой = ОписаниеОшибки();
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = НСтр("ru = 'Не удалось обновить событие в Google Calendar по причине: '") + Символы.ПС + СообщениеСОшибкой;
								Сообщение.Сообщить();
							КонецПопытки;
						Иначе  // создание post
							ФайлРезультата = ПолучитьИмяВременногоФайла("txt");
							АдресРесурса = "/calendar/v3/calendars/"+ИдКалендаря+"/events/"+?(ОбъектСобытия.РассылатьУведомлениПриСозданииGApi,"?sendNotifications=true","");
							ЗапросHTTP				= Новый HTTPЗапрос;
							ЗапросHTTP.АдресРесурса	= АдресРесурса;
							ЗапросHTTP.Заголовки	= Заголовки;
							ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);
							Попытка 
								Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
								КодОтвета = Ответ.КодСостояния;
								Если КодОтвета = 200 Тогда
									ТекстовыйФайл = Новый ТекстовыйДокумент;
									ТекстовыйФайл.Прочитать(ФайлРезультата,"UTF-8");
									РезультатСоответствие = UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
									ИдСобытияGApi = РезультатСоответствие.Получить("id");
									НомерПоследовательности = РезультатСоответствие.Получить("sequence"); 
								КонецЕсли;	
							Исключение
								СообщениеСОшибкой = ОписаниеОшибки();
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = НСтр("ru = 'Не удалось обновить в Google Calendar событие по причине: '") + Символы.ПС + СообщениеСОшибкой;
								Сообщение.Сообщить();
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Обновим данные в регистре
			Для Сч = 0  По НаборЗаписейРегистра.Количество()-1 Цикл
				// добавим ИД
				НаборЗаписейРегистра[Сч].ИдСобытияGApi = ИдСобытияGApi;
				
				Если КодОтвета <> 200 И ОбъектСобытия.ОрганизаторGApi = ОбъектСобытия.Ответственный  Тогда
					// текущая дата, так как в дате события хранится дата начала события 
					НаборЗаписейРегистра[Сч].ТаймСтампGApi = ТекущаяДатаСеанса();
					НаборЗаписейРегистра[Сч].НомерПоследовательностиGApi = НомерПоследовательности-1;
					ПериодическоеСобытиеСпособИзмененияРядаGApi="";
					ОбъектСобытия.ДополнительныеСвойства.Свойство("ПериодическоеСобытиеСпособИзмененияРяда",ПериодическоеСобытиеСпособИзмененияРядаGApi);
					Если ЗначениеЗаполнено(ПериодическоеСобытиеСпособИзмененияРядаGApi) Тогда
						НаборЗаписейРегистра[Сч].ПериодическоеСобытиеСпособИзмененияРядаGApi = ПериодическоеСобытиеСпособИзмененияРядаGApi;	
					КонецЕсли;
				Иначе
					НаборЗаписейРегистра[Сч].ТаймСтампGApi = Дата(1,1,1);
					НаборЗаписейРегистра[Сч].НомерПоследовательностиGApi = НомерПоследовательности;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписейРегистра.Записать();
			//ряд событий
			Если Оригинальное Тогда 
				ОбъектРяд = ОбъектСобытия.РядСобытий.ПолучитьОбъект();
				ОбъектРяд.ИдПовтСобытия = ИдСобытияGApi;
				ОбъектРяд.Записать();
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;     
	
КонецПроцедуры // ОбновитьСобытиеВКалендаре()

Процедура ОбновитьПериодическоеСобытиеВКалендаре(ОбъектСобытия, Пользователь)
	
	РядСобытия = ОбъектСобытия.РядСобытий;
	Если Не ЗначениеЗаполнено(РядСобытия) Тогда
		Возврат;
	КонецЕсли;
	СобытияПоРяду = ПолучитьТаблицуСобытийПоРяду(РядСобытия);
	ПериодическоеСобытиеСпособИзмененияРяда = "";
	ОбъектСобытия.ДополнительныеСвойства.Свойство("ПериодическоеСобытиеСпособИзмененияРяда",ПериодическоеСобытиеСпособИзмененияРяда);

	// обрабатываем первое ("оригинальное") событие в ряде
	// идентификатор
	// если идентификатор заполнен, значит обновление, иначе
	// создание оригинального события
	Если  ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
		ИдентификаторПовтСобытия = РядСобытия.ИдПовтСобытия;

		ОбновитьСобытиеВКалендаре(СобытияПоРяду[0].Мероприятие.ПолучитьОбъект(), Пользователь,Истина, Истина, ИдентификаторПовтСобытия);
		// заполним идентификаторы у дочерних событий
		ЗаполнитьИдентификаторыСобытий(ОбъектСобытия,СобытияПоРяду);

	ИначеЕсли ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда" Тогда
		Если ОбъектСобытия.Ссылка = СобытияПоРяду[0].Мероприятие Тогда
			ОбновитьСобытиеВКалендаре(ОбъектСобытия, Пользователь,Истина,Истина);
			ЗаполнитьИдентификаторыСобытий(ОбъектСобытия,СобытияПоРяду);
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
		ИдентификаторПовтСобытия = РядСобытия.ИдПовтСобытия;
		Если ОбъектСобытия.Ссылка = СобытияПоРяду[0].Мероприятие Тогда
			УдалитьСобытиеИзКалендаря(ОбъектСобытия, Пользователь);
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли  ПериодическоеСобытиеСпособИзмененияРяда = "ТолькоТекущее" Тогда
		ОбновитьСобытиеВКалендаре(ОбъектСобытия, Пользователь,Истина);	
	КонецЕсли;
	
Конецпроцедуры

Процедура ЗаполнитьИдентификаторыСобытий(ОригинальноеСобытие, ТаблицаСобытий)
	
	ИдСобытияGApi = "";
	Если ЗначениеЗаполнено(ОригинальноеСобытие.РядСобытий) Тогда
		ИдСобытияGApi = ОригинальноеСобытие.РядСобытий.ИдПовтСобытия;
	КонецЕсли;
	АвторСобытия = Неопределено;
	Если ТипЗнч(ОригинальноеСобытие.ОрганизаторGApi) = Тип("Строка") Тогда
		ТаблицаОрганизатор =    CRM_GoogleИнтеграция.НайтиКонтакт(ОригинальноеСобытие.ОрганизаторGApi); 
		Если ТаблицаОрганизатор.Количество()<>0 Тогда
			Если ТипЗнч(ТаблицаОрганизатор[0].Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				АвторСобытия = ТаблицаОрганизатор[0].Контакт;
			Иначе
				АвторСобытия = ОригинальноеСобытие.ОрганизаторGApi;	
			КонецЕсли;
		Иначе 
			АвторСобытия = ОригинальноеСобытие.ОрганизаторGApi;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОригинальноеСобытие.ОрганизаторGApi) = Тип("СправочникСсылка.Пользователи") Тогда
		АвторСобытия = ОригинальноеСобытие.ОрганизаторGApi;	
	КонецЕсли;

	// отправим это событие в Google
	Пользователь = Неопределено;
	Если ТипЗнч(АвторСобытия) = Тип("Строка") ИЛИ (ТипЗнч(АвторСобытия) = Тип("СправочникСсылка.Пользователи") И ОригинальноеСобытие.Автор <> АвторСобытия) Тогда
		Пользователь = АвторСобытия;	
	Иначе
		Пользователь = ОригинальноеСобытие.Автор;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИдСобытияGApi) Тогда
		Если ОбновитьКодАвторизации(Пользователь) Тогда
			Если Пользователь = Неопределено Тогда
				КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
			Иначе
				КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
			КонецЕсли;

			КодОтвета = 0;
			Если ЗначениеЗаполнено(КодАвторизации)  Тогда
				Если Пользователь = Неопределено Тогда
					ИдКалендаря    =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьGoogle");
				Иначе
					ИдКалендаря = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "КалендарьGoogle");
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
			 						
			Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина);
			Запрос = Новый HTTPЗапрос;
			Запрос.АдресРесурса = "calendar/v3/calendars/"+ИдКалендаря+"/events/"+ИдСобытияGApi+"/instances"; 
			Запрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
			ФайлРезультата =  ПолучитьИмяВременногоФайла("txt");
            Ответ = Соединение.Получить(Запрос,ФайлРезультата);
			Если Ответ.КодСостояния =  200 Тогда
				ТекстовыйФайл = Новый ТекстовыйДокумент;
				ТекстовыйФайл.Прочитать(ФайлРезультата,"UTF-8");
				РезультатСоответствие = UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
				События = РезультатСоответствие.Получить("items");
				Для Сч = 0  По  События.Количество()-1 Цикл
					ОбъектОбновлСобытия = ТаблицаСобытий[Сч].Мероприятие;
					НаборЗаписейРегистра = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
					НаборЗаписейРегистра.Отбор.Объект.Установить(ОбъектОбновлСобытия);
					НаборЗаписейРегистра.Прочитать();
					ИдСобытияGApi = События[Сч].Получить("id");
					НомерПоследовательности = События[Сч].Получить("sequence");
					// Обновим данные в регистре
					Для Каждого НаборЗаписи Из НаборЗаписейРегистра Цикл
						// добавим ИД
						НаборЗаписи.ИдСобытияGApi = ИдСобытияGApi;
						Если НЕ (КодОтвета = 200) И (ОригинальноеСобытие.ОрганизаторGApi = ОригинальноеСобытие.Автор)  Тогда
							// Текущая дата, так как в дате события хранится дата начала события 
							НаборЗаписи.ТаймСтампGApi = ТекущаяДатаСеанса();
							НаборЗаписи.НомерПоследовательностиGApi = НомерПоследовательности-1;
						Иначе
							НаборЗаписи.ТаймСтампGApi = Дата(1,1,1);
							НаборЗаписи.НомерПоследовательностиGApi = НомерПоследовательности;
						КонецЕсли;
					КонецЦикла;
					НаборЗаписейРегистра.Записать();
				КонецЦикла;
			Иначе
				Сч = 0;
				Для Каждого Событие Из ТаблицаСобытий Цикл
					НаборЗаписейРегистра = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
					НаборЗаписейРегистра.Отбор.Объект.Установить(Событие.Мероприятие);
					НаборЗаписейРегистра.Прочитать();
					// Обновим данные в регистре
					Для Каждого НаборЗаписи Из НаборЗаписейРегистра Цикл
						НаборЗаписи.ТаймСтампGApi = ТекущаяДатаСеанса();
						Если Сч = 0  Тогда
							ПериодическоеСобытиеСпособИзмененияРядаGApi = "";
							ОригинальноеСобытие.ДополнительныеСвойства.Свойство("ПериодическоеСобытиеСпособИзмененияРяда",ПериодическоеСобытиеСпособИзмененияРядаGApi);
							Если ЗначениеЗаполнено(ПериодическоеСобытиеСпособИзмененияРядаGApi) Тогда
								НаборЗаписи.ПериодическоеСобытиеСпособИзмененияРядаGApi = ПериодическоеСобытиеСпособИзмененияРядаGApi;	
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					НаборЗаписейРегистра.Записать();
					Сч = Сч +1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуСобытийПоРяду(РядСобытий)

	ДатаНачала = РядСобытий.ДатаНачала;
	ДатаОкончания = РядСобытий.ДатаОкончания;
	ДатаНачала		= НачалоДня(ДатаНачала);
	ДатаОкончания	= НачалоДня(ДатаОкончания);
	
	РезультатЗапросаПоСобытиямРяда = CRM_МероприятияСервер.ПолучитьРезультатЗапросаПоМероприятиямРяда(РядСобытий,, Мин(ДатаНачала, ДатаОкончания),, Истина, Истина,Истина);
		
	Возврат РезультатЗапросаПоСобытиямРяда.Выгрузить();
	
КонецФункции

// Процедура удаляет заданное событие из Google календаря
//
// Параметры:
//  ОбъектСобытия    - Ссылка на объект - документ "Событие", которое необходимо синхронизировать
//
Процедура УдалитьСобытиеИзКалендаря(ОбъектСобытия,Пользователь = Неопределено, ИдентификаторПовтСобытия = "")Экспорт

	Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle(Пользователь) Тогда

		КодОтвета = 0;
		// Найдем ИД события
		НаборЗаписейРегистра = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Объект.Установить(ОбъектСобытия.Ссылка);
		НаборЗаписейРегистра.Прочитать();

		Если ЗначениеЗаполнено(ИдентификаторПовтСобытия) Тогда
			ИдСобытияGApi = ИдентификаторПовтСобытия;
		Иначе
			ИдСобытияGApi = НаборЗаписейРегистра[0].ИдСобытияGApi;
		КонецЕсли;
		
		НомерПоследовательности = НаборЗаписейРегистра[0].НомерПоследовательностиGApi;
				
		Если  ЗначениеЗаполнено(ИдСобытияGApi) Тогда
			Если  ОбновитьКодАвторизации(Пользователь) Тогда
				Если Пользователь = Неопределено Тогда
					КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
				Иначе
					КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
				КонецЕсли;
				КодОтвета = 0;
				Если ЗначениеЗаполнено(КодАвторизации)  Тогда
					Если Пользователь = Неопределено Тогда
						ИдКалендаря    =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьGoogle");
					Иначе
						ИдКалендаря = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "КалендарьGoogle");
		            КонецЕсли;
					Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина);
					Запрос = Новый HTTPЗапрос;
					Запрос.АдресРесурса = "/calendar/v3/calendars/"+ИдКалендаря+"/events/"+ИдСобытияGApi+?(ОбъектСобытия.РассылатьОповещенияПриУдаленииGApi, "?sendNotifications=true","");
					Запрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
					Попытка 
						Ответ = Соединение.Удалить(Запрос);
						КодОтвета = Ответ.КодСостояния;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Обновим данные в регистре
		Если КодОтвета = 200 ИЛИ КодОтвета = 410 ИЛИ КодОтвета = 204 ИЛИ КодОтвета = 404  Тогда  
			НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ОбъектСобытия.Ссылка);
			НаборЗаписей.Записать();
		Иначе
			Для Каждого НаборЗаписи Из НаборЗаписейРегистра Цикл
				// добавим ИД
				НаборЗаписи.ИдСобытияGApi = ИдСобытияGApi;
				// текущая дата, так как в дате события хранится дата начала события 
				НаборЗаписи.ТаймСтампGApi = ТекущаяДатаСеанса();
				НаборЗаписи.НомерПоследовательностиGApi = НомерПоследовательности;
			КонецЦикла;
			НаборЗаписейРегистра.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УдалитьСобытиеИзКалендаря()

Функция ПроверитьАдресЭп(Адрес)
	Если ЗначениеЗаполнено(Адрес) Тогда
		РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(Адрес);
		Возврат (РезультатПроверки.КодОшибки = 0);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Функция формирует описание события в виде json модели.
//
// Параметры:
//  ОбъектСобытия - Ссылка на объект - документ "Событие", которое необходимо синхронизировать
//  sequence      -  Число - определеяет идентификатор обновления. При создании события sequence = 0,
// при первом изменении sequence = 1, при втором  2 и т.д.
//
// Возвращаемое значение:
//  Текст    - Строка - опиисание события в виде json модели. 
//
Функция СформироватьОписаниеСобытия(ОбъектСобытия, sequence = Неопределено, Оригинальное = Ложь, КатегорияПоУмолчанию = Неопределено)
	
	Оповещения = "";
	Если ОбъектСобытия.РассылкаПоУмолчаниюGApi Тогда
		Оповещения =   "
						|""reminders"": {
						|""useDefault"": true
						|}";
  	Иначе
		Оповещения =   "
						|""reminders"": {
						|""overrides"": [
						|{
						|""method"": ""email"",
						|""minutes"": "+ОбъектСобытия.МинутыGApi+"
						|}
						|],
						|""useDefault"": false
						|}";
	КонецЕсли;
	
	ЧасовойПояс = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ОбъектСобытия.Автор,"ЧасовойПоясКалендаряGApi");
	РеквизитыПериодичности = "";
	Если ОбъектСобытия.Периодическое И ЗначениеЗаполнено(ОбъектСобытия.РядСобытий) Тогда
		Если Оригинальное Тогда
			РеквизитыПериодичности = Символы.ПС+"  ""recurrence"": [
									|"""+ПолучитьПравилоПериодичности(ОбъектСобытия)+"""
									|],";	
		Иначе
			РядСобытия = ОбъектСобытия.РядСобытий;
			Если ЗначениеЗаполнено(РядСобытия) Тогда
				ИдПовтСобытия = РядСобытия.ИдПовтСобытия;
				ДатаНачала = РядСобытия.ДатаНачала;
				РеквизитыПериодичности = Символы.ПС+"""recurringEventId"": """+?(ЗначениеЗаполнено(ИдПовтСобытия),ИдПовтСобытия,"")+""",
							|""originalStartTime"": {
							|""dateTime"": """+ДатуВФормат(ДатаНачала,ОбъектСобытия.Автор)+""",
							|""timeZone"": """+ЧасовойПояс+"""
							|},";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Гости = "";
	
	ЧасовойПояс = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ЧасовойПоясКалендаряGApi");

	ТаблицаУчастники = Новый ТаблицаЗначений();
	ТаблицаУчастники.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	ТаблицаУчастники.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаУчастники.Колонки.Добавить("Посещение", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ОбъектСобытия.СвоиЛица Цикл
		Если ПроверитьАдресЭп(СтрокаТаблицы.Адрес) Тогда
			НайденнаяСтрока = ТаблицаУчастники.Найти(СтрокаТаблицы.Адрес, "Адрес");
			Если НайденнаяСтрока <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаУчастники.Добавить();
			НоваяСтрока.Адрес = СтрокаТаблицы.Адрес;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Лицо) Тогда
				НоваяСтрока.Представление = Строка(СтрокаТаблицы.Лицо);
			Иначе
				НоваяСтрока.Представление = СтрокаТаблицы.Адрес;
			КонецЕсли;
			НоваяСтрока.Посещение	= СтрокаТаблицы.ПосетитМероприятие;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ОбъектСобытия.СторонниеЛица Цикл
		Если ПроверитьАдресЭп(СтрокаТаблицы.Адрес) Тогда
			НайденнаяСтрока = ТаблицаУчастники.Найти(СтрокаТаблицы.Адрес, "Адрес");
			Если НайденнаяСтрока <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаУчастники.Добавить();
			НоваяСтрока.Адрес = СтрокаТаблицы.Адрес;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда
				НоваяСтрока.Представление = Строка(СтрокаТаблицы.КонтактноеЛицо);
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
				НоваяСтрока.Представление = Строка(СтрокаТаблицы.Партнер);
			Иначе
				НоваяСтрока.Представление = СтрокаТаблицы.Адрес;
			КонецЕсли;
			НоваяСтрока.Посещение	= -1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаУчастники.Количество() > 0 Тогда
		ОбщееЧислоГостей = ТаблицаУчастники.Количество();
		Гости = Символы.ПС+"""attendees"": [";
 	    Сч = 0;
		
		Для Каждого СтрокаГостей Из ТаблицаУчастники Цикл
			Гости = Гости +	"	
								|{
								|""email"": """+СтрокаГостей.Адрес+""",
								|""displayName"": """+СтрокаГостей.Представление+"""
								|}"+?(Сч = ОбщееЧислоГостей-1,"",",");
			Сч = Сч +1;
		КонецЦикла;

		Гости = Гости +"	]";
	КонецЕсли;                                        	
	ОписаниеСобытия = ОбъектСобытия.Описание;
	Если ОбъектСобытия.Место  = ""+Справочники.CRM_Помещения.Другое Тогда
		Индекс = Найти(ОписаниеСобытия,"Место проведения:"); 
		МестоСобытия = СтрЗаменить(Сред(ОписаниеСобытия,Индекс+17),"""","/");
		ОписаниеСобытия = СтрЗаменить(Сред(ОписаниеСобытия,0,Индекс-1),"""","/");
	Иначе
		ОписаниеСобытия = СтрЗаменить(ОписаниеСобытия,"""","/");
		МестоСобытия  = СтрЗаменить(ОбъектСобытия.Место,"""","/");
	КонецЕсли;
	ОписаниеСобытия = СтрЗаменить(ОписаниеСобытия,Символы.ПС," \n\r");
	МестоСобытия    = СтрЗаменить(МестоСобытия,Символы.ПС," \n\r");

	ОписаниеСобытия = СтрЗаменить(ОписаниеСобытия,Символы.Пф," \n\r");
	МестоСобытия    = СтрЗаменить(МестоСобытия,Символы.ПФ," \n\r");
	
	ОписаниеСобытия = СтрЗаменить(ОписаниеСобытия,Символы.ВК," \n\r");
	МестоСобытия    = СтрЗаменить(МестоСобытия,Символы.ВК," \n\r");
	
	ОписаниеСобытия = СтрЗаменить(ОписаниеСобытия,Символы.ВТаб," ");
	МестоСобытия    = СтрЗаменить(МестоСобытия,Символы.ВТаб," ");

	ОписаниеСобытия = СтрЗаменить(ОписаниеСобытия,Символы.НПП," ");
	МестоСобытия    = СтрЗаменить(МестоСобытия,Символы.НПП," ");
	
	ОписаниеСобытия = СтрЗаменить(ОписаниеСобытия,Символы.Таб," ");
	МестоСобытия    = СтрЗаменить(МестоСобытия,Символы.Таб," ");
	
	КатегорияСобытия =  ПолучитьИДЦветаСобытия(ОбъектСобытия, КатегорияПоУмолчанию);
	Если ЗначениеЗаполнено(КатегорияПоУмолчанию) И КатегорияСобытия = Число(КатегорияПоУмолчанию) Тогда
		ВключатьКатегорию = Ложь;
		КатегорияСобытия = "";
	Иначе
		ВключатьКатегорию = Истина;
		КатегорияСобытия = "
		|""colorId"": """+КатегорияСобытия+"""";
	КонецЕсли;

	
	ДатаНачала = ОбъектСобытия.Дата;
	ДатаКонца = ОбъектСобытия.ОкончаниеМероприятия;
	Текст = "
	|{
	|""end"": {
	|" + ?(ОбъектСобытия.НаВесьДень, """dateTime"": """, """dateTime"": """) + ДатуВФормат(ДатаКонца, ОбъектСобытия.Ответственный) + """" + "," + "
	|""timeZone"": """ + ЧасовойПояс + """
	|},
	|""start"": {
	|" + ?(ОбъектСобытия.НаВесьДень, """dateTime"": """, """dateTime"": """) + ДатуВФормат(ДатаНачала, ОбъектСобытия.Ответственный) + """" + "," + "
	|""timeZone"": """ + ЧасовойПояс + """
	|}," + РеквизитыПериодичности +
	?(ЗначениеЗаполнено(ОбъектСобытия.Тема),Символы.ПС+"""summary"": """+СтрЗаменить(ОбъектСобытия.Тема,"""","\""")+""",","")+
	?(ЗначениеЗаполнено(ОписаниеСобытия),Символы.ПС+"""description"": """+ОписаниеСобытия+""",","")+
	?(ЗначениеЗаполнено(МестоСобытия),Символы.ПС+"""location"": """+МестоСобытия+""",","")+
	?((ОбъектСобытия.ПометкаУдаления),Символы.ПС+"""status"": = ""cancelled""","")+"
	|""guestsCanModify"": "+?(ОбъектСобытия.ГостиМогутИзменятьМероприятиеGApi,"true,","false,")+"
	|""guestsCanInviteOthers"": "+?(ОбъектСобытия.ГостиМогутПриглашатьДругихГостейGApi,"true,","false,")+"
	|""guestsCanSeeOtherGuests"": "+?(ОбъектСобытия.ГостиМогутВидетьСписокГостейGApi,"true,","false,")+
	Оповещения + ?(ЗначениеЗаполнено(Гости), ",", "") + Гости +
	?(ЗначениеЗаполнено(sequence),"," + Символы.ПС + """sequence"": " + sequence, "")
	+?(ВключатьКатегорию, ",", "") + КатегорияСобытия +"
	|}";
	Возврат Текст;
	
КонецФункции  // СформироватьОписаниеСобытия()

Функция ПолучитьПравилоПериодичности(ОбъектСобытия)
	РядСобытия = ОбъектСобытия.РядСобытий;
	Правило = "";
	ИсключитьДниНедели = Ложь;
	Расписание = РядСобытия.Расписание.Получить();
	Если НЕ ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
		Возврат Правило;
	КонецЕсли;	
	
	Правило = "RRULE:";   
	ДатаВремяОкончания = Расписание.ДатаКонца + Час(Расписание.ВремяКонца)*3600+Минута(Расписание.ВремяКонца)*60+Секунда(Расписание.ВремяКонца);
	// периодичность 
	Если ЗначениеЗаполнено(Расписание.ПериодНедель) Тогда
		Правило = Правило +"FREQ=WEEKLY"+";UNTIL="+ВФормат(ДатаВремяОкончания, ОбъектСобытия.Автор, Истина)+?(Расписание.ПериодНедель>1,";INTERVAL="+Расписание.ПериодНедель,"");	
	ИначеЕсли ЗначениеЗаполнено(Расписание.ДеньНеделиВМесяце) Тогда  // каждый месяц в i-ую пятницу
		Если Расписание.ДниНедели.Количество()>1 Тогда 
			Правило  = Правило +"FREQ=MONTHLY"+";UNTIL="+ВФормат(ДатаВремяОкончания, ОбъектСобытия.Автор, Истина)+";BYDAY="+Расписание.ДеньНеделиВМесяце+""+ПреобразоватьДниНеделиВСтроку(Расписание.ДниНедели);
			ИсключитьДниНедели = Истина;
		Иначе // просто каждый месяц x-того числа
			Правило = Правило +"FREQ=MONTHLY"+";UNTIL="+ВФормат(ДатаВремяОкончания, ОбъектСобытия.Автор, Истина);
		КонецЕсли;
	Иначе
		Правило = Правило +"FREQ=DAILY"+";UNTIL="+ВФормат(ДатаВремяОкончания, ОбъектСобытия.Автор, Истина)+?(Расписание.ПериодПовтораДней>0,";INTERVAL="+Расписание.ПериодПовтораДней,"");
	КонецЕсли;
	Если НЕ ИсключитьДниНедели И Расписание.ДниНедели.Количество()>1 Тогда
		Правило  = Правило +";BYDAY="+ПреобразоватьДниНеделиВСтроку(Расписание.ДниНедели);
	КонецЕсли;
	             
	Если Расписание.Месяцы.Количество()>1 Тогда
		Правило  = Правило +";BYMONTH="+ПреобразоватьМесяцыВСтроку(Расписание.Месяцы);
	КонецЕсли;

	// COUNT пока опускаем
	//Правило = Правило + ";UNTIL="+ВФормат(Расписание.ДатаКонца, ОбъектСобытия.Автор, Истина);

	Возврат Правило;
	
КонецФункции

Функция ПреобразоватьДниНеделиВСтроку(МассивДней)
	
	СтрокаДней = "";
	Сч = 0;
	Для Каждого НомерДня Из МассивДней Цикл
		СтрокаДней = СтрокаДней +ПреобразоватьЧислоВДень(НомерДня)+?(Сч=МассивДней.Количество()-1,"",","); 
		Сч = Сч+1;
	КонецЦикла;
	Возврат СтрокаДней;
	
КонецФункции

Функция ПреобразоватьМесяцыВСтроку(МассивМесяцев)
	
	Строка = "";
	Сч = 0;
	Для Каждого НомерМесяца Из МассивМесяцев Цикл
		Строка = Строка +НомерМесяца+?(Сч=МассивМесяцев.Количество()-1,"",","); 
		Сч = Сч+1;
	КонецЦикла;
	Возврат Строка;
	
КонецФункции

Функция ПреобразоватьЧислоВДень(НомерДляВНеделе)
	ИмяДняВНеделе= "";
	Если НомерДляВНеделе = 1 Тогда
		ИмяДняВНеделе = "MO";	
	ИначеЕсли НомерДляВНеделе = 2 Тогда
		ИмяДняВНеделе = "TU";
	ИначеЕсли НомерДляВНеделе = 3 Тогда
		ИмяДняВНеделе = "WE";
	ИначеЕсли НомерДляВНеделе = 4 Тогда
		ИмяДняВНеделе = "TH";
	ИначеЕсли НомерДляВНеделе = 5 Тогда
		ИмяДняВНеделе = "FR";
	ИначеЕсли НомерДляВНеделе = 6 Тогда
		ИмяДняВНеделе = "SU";
    Иначе                       
		ИмяДняВНеделе = "SA";
	КонецЕсли;
	
	Возврат ИмяДняВНеделе;
		
КонецФункции
// Функция формирует описание изменений в календаре.
//
// Параметры:
//  Дата - Дата - дата изменения
//
// Возвращаемое значение:
//  Текст    - ТаблицаЗначений, Неопределено - в случае наличия изменений возвращается таблица значений. 
//
Функция ПолучитьОписаниеИзменений(ТаблицаИзмененийВКалендарях) Экспорт
	
	СобытияИПользователи = Новый Соответствие;
	// подготовим данные
	ТаблицаПользователей = ТаблицаИзмененийВКалендарях.Скопировать();
	ТаблицаПользователей.Свернуть("Пользователь");
	КодОтвета = 0;
	Для Каждого СтрокаТаблицыПользователей Из ТаблицаПользователей Цикл 
		Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle(СтрокаТаблицыПользователей.Пользователь) Тогда
			КодДействителен = ОбновитьКодАвторизации(СтрокаТаблицыПользователей.Пользователь);
			Если КодДействителен Тогда
				ТаблицаСобытий = Новый ТаблицаЗначений;
				ТаблицаСобытий.Колонки.Добавить("ИдСобытияGApi");
				ТаблицаСобытий.Колонки.Добавить("ТаймСтампGApi");
				ТаблицаСобытий.Колонки.Добавить("Sync");
				ТаблицаСобытий.Колонки.Добавить("Описание");
				ТаблицаСобытий.Колонки.Добавить("КатегорияПоУмолчанию");
				КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(СтрокаТаблицыПользователей.Пользователь, "AccessTokenGApi");
				ИдКалендаря = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(СтрокаТаблицыПользователей.Пользователь, "КалендарьGoogle");
				РезультатИмяФайла =  ПолучитьИмяВременногоФайла(); 
				Дата = ПолучитьМинимальнуюДатуИзменений(ТаблицаИзмененийВКалендарях,СтрокаТаблицыПользователей.Пользователь);
				Запрос = Новый HTTPЗапрос;
				Запрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
				Запрос.АдресРесурса = "calendar/v3/calendars/"+ИдКалендаря+"/events?showDeleted=true"+?(ЗначениеЗаполнено(Дата),"&singleEvents=true&updatedMin="+ВФормат(Дата-120,СтрокаТаблицыПользователей.Пользователь),"");
				Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина); 
				Попытка 
					Ответ = Соединение.Получить(Запрос,РезультатИмяФайла);
					Если Ответ.КодСостояния =  200 Тогда
						ТекстовыйФайл = Новый ТекстовыйДокумент;
						ТекстовыйФайл.Прочитать(РезультатИмяФайла,"UTF-8");
						РезультатСоответствие = UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
						События = РезультатСоответствие.Получить("items");
						КатегорияПоУмолчанию = ПолучитьКатегориюДляКалендаря(КодАвторизации,ИдКалендаря);
						Для Каждого Событие Из События Цикл
							СтрокаТаблицыСобытий = ТаблицаСобытий.Добавить();
							СтрокаТаблицыСобытий.ИдСобытияGApi = Событие.Получить("id"); 
							СтрокаТаблицыСобытий.ТаймСтампGApi = ФорматВДату(Событие.Получить("updated"),СтрокаТаблицыПользователей.Пользователь,Истина);
							СтрокаТаблицыСобытий.Sync = Событие.Получить("sequence");
							СтрокаТаблицыСобытий.Описание = Событие;
							СтрокаТаблицыСобытий.КатегорияПоУмолчанию = КатегорияПоУмолчанию;
						КонецЦикла;
						СобытияИПользователи.Вставить(СтрокаТаблицыПользователей.Пользователь,ТаблицаСобытий);
					КонецЕсли;	
				Исключение
					СообщениеСОшибкой = ОписаниеОшибки();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Ошибка при получении описания изменений: '") + Символы.ПС + СообщениеСОшибкой;
					Сообщение.Сообщить();
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат СобытияИПользователи;
	
КонецФункции // ПолучитьОписаниеИзменений()

Функция ПолучитьКатегориюДляКалендаря(КодАвторизации,ИдКалендаря)
	
	ЦветПоУмолчанию = "5";
	РезультатИмяФайла =  ПолучитьИмяВременногоФайла();
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
	Запрос.АдресРесурса = "calendar/v3/users/me/calendarList/"+ИдКалендаря+"?fields=colorId";
	Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина); 
	Попытка 
		Ответ = Соединение.Получить(Запрос,РезультатИмяФайла);
		Если Ответ.КодСостояния =  200 Тогда
			ТекстовыйФайл = Новый ТекстовыйДокумент;
			ТекстовыйФайл.Прочитать(РезультатИмяФайла,"UTF-8");
			РезультатСоответствие = UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
			ЦветПоУмолчанию = РезультатСоответствие.Получить("colorId");
		КонецЕсли;	
	Исключение
		СообщениеСОшибкой = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Ошибка при получении категории календаря: '") + Символы.ПС + СообщениеСОшибкой;
		Сообщение.Сообщить();
	КонецПопытки;
	
	Возврат  ЦветПоУмолчанию;

КонецФункции

Функция ПолучитьМинимальнуюДатуИзменений(ТаблицаИзмененийВКалендарях,Пользователь)
	
	ОтборПоПользователю = Новый Структура;
	ОтборПоПользователю.Вставить("Пользователь", Пользователь);
	МассивСтрок = ТаблицаИзмененийВКалендарях.НайтиСтроки(ОтборПоПользователю);
	Если МассивСтрок.Количество() = 1 Тогда
		Возврат МассивСтрок[0].Дата;
	Иначе
		МинДата = МассивСтрок[0].Дата;
		Для Сч = 1 По МассивСтрок.Количество() - 1 Цикл
			Если МинДата>МассивСтрок[Сч].Дата Тогда
				МинДата = МассивСтрок[Сч].Дата;
			КонецЕсли;
		КонецЦикла;
		Возврат МинДата;
	КонецЕсли;
	
КонецФункции

// Функция получает описание события в Google. 
//
// Параметры:
//  ИдСобытия - Строка - УИД события
//
// Возвращаемое значение:
//  ОписаниеСобытия    - Соответствие, Неопределено - в случае успешного обращения к google возвращает
// описание события. 
//
Функция ПолучитьСобытиеПоИД (ИдСобытия, Пользователь = Неопределено) Экспорт
	
	ОписаниеСобытия = Неопределено;
	Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle(Пользователь) Тогда

		Если Пользователь = Неопределено Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;

		Если ОбновитьКодАвторизации(Пользователь) Тогда
			Если Пользователь = Неопределено Тогда
				КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
			Иначе
				КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "AccessTokenGApi");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КодАвторизации)  Тогда
				Если Пользователь = Неопределено Тогда
					ИдКалендаря    =  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьGoogle");
				Иначе
					ИдКалендаря = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "КалендарьGoogle");
				КонецЕсли;

				РезультатИмяФайла =  ПолучитьИмяВременногоФайла();  
				Запрос = Новый HTTPЗапрос;
				Запрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
				Запрос.АдресРесурса = "/calendar/v3/calendars/"+ИдКалендаря+"/events/"+ИдСобытия+"?fields=end,recurrence,start";
				
				Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина); 
			    Попытка
					Ответ = Соединение.Получить(Запрос,РезультатИмяФайла);
					КодОтвета = Ответ.КодСостояния;
					Если Ответ.КодСостояния =  200 Тогда
						ТекстовыйФайл = Новый ТекстовыйДокумент;
						ТекстовыйФайл.Прочитать(РезультатИмяФайла,"UTF-8");
						ОписаниеСобытия = UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
					КонецЕсли;
				Исключение
					СообщениеСОшибкой = ОписаниеОшибки();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = '"+Символы.ПС+СообщениеСОшибкой+"'");
					Сообщение.Сообщить();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОписаниеСобытия;

КонецФункции // ПолучитьСобытиеПоИД()


////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ СО СПИСКОМ КАЛЕНДАРЕЙ

// Функция получает список календарей для текущего пользователя в Google. 
//
//
// Возвращаемое значение:
//  Календари    - Список значений - в случае успешного обращения к google возвращает
// список календарей пользователя. 
//
Функция ПолучитьТаблицуКалендарей() Экспорт
	
	КодДействителен = ОбновитьКодАвторизации();
	ТаблицаКалендарей = Новый ТаблицаЗначений;
	ТаблицаКалендарей.Колонки.Добавить("ИдКалендаря");
	ТаблицаКалендарей.Колонки.Добавить("Календарь");
	ТаблицаКалендарей.Колонки.Добавить("ЧасовойПояс");

	Если КодДействителен Тогда
		КодАвторизации = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("AccessTokenGApi");
		РезультатИмяФайла =  ПолучитьИмяВременногоФайла("xml");  
		Запрос = новый HTTPЗапрос;
		Запрос.Заголовки.Вставить("Authorization", "Bearer " + КодАвторизации);
		Запрос.АдресРесурса = "calendar/v3/users/me/calendarList";

		Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,Истина); 
		Попытка 
			Ответ = Соединение.Получить(Запрос,РезультатИмяФайла);
			Если Ответ.КодСостояния =  200 Тогда
				ТекстовыйФайл = Новый ТекстовыйДокумент;
				ТекстовыйФайл.Прочитать(РезультатИмяФайла,"UTF-8");
				РезультатСоответствие = UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
				МассивКалендарей = РезультатСоответствие.Получить("items");
				Для Каждого Календарь Из МассивКалендарей Цикл
					СтрокаТаблицы = ТаблицаКалендарей.Добавить();
					СтрокаТаблицы.ИдКалендаря = Календарь.Получить("id");
					СтрокаТаблицы.Календарь = Календарь.Получить("summary");
					СтрокаТаблицы.ЧасовойПояс = Календарь.Получить("timeZone");
				КонецЦикла;
			КонецЕсли;	
		Исключение
			СообщениеСОшибкой = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = '"+Символы.ПС+СообщениеСОшибкой+"'");
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
	Возврат ТаблицаКалендарей;
		
КонецФункции // ПолучитьСписокКалендарей()


////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Функция получает идентификатор цвета Google по первой категории события. 
//
// Параметры:
//  Категории - ТабличнаяЧасть - Категории события
//
// Возвращаемое значение:
//  ИдЦвета    - Число - идентификатор Google цвета. 
//
Функция ПолучитьИДЦветаСобытия(ОбъектСобытия, КатегорияПоУмолчанию=Неопределено)
	
	Если ТипЗнч(ОбъектСобытия) = Тип("ДокументОбъект.CRM_Мероприятие") Тогда
		Возврат 5;
	КонецЕсли;	
	
	Категории = ОбъектСобытия.Категории;
	
	Если Не ЗначениеЗаполнено(ОбъектСобытия.ОсновнаяКатегория) И Категории.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(КатегорияПоУмолчанию) Тогда
			Возврат Число(КатегорияПоУмолчанию);
		Иначе
			Возврат 5;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСобытия.ОсновнаяКатегория) Тогда
		ИндексЦвета = ОбъектСобытия.ОсновнаяКатегория.ЦветИндекс;
	Иначе
		ИндексЦвета = Категории[0].Категория.ЦветИндекс;
	КонецЕсли;
	
	Если ИндексЦвета = 22 Тогда
		Возврат 9;
	ИначеЕсли ИндексЦвета = 7 Тогда
		Возврат 1;
	ИначеЕсли ИндексЦвета = 5 Тогда
		Возврат 7;
	ИначеЕсли ИндексЦвета = 4 Тогда
		Возврат 2;
	ИначеЕсли ИндексЦвета = 19 Тогда
		Возврат 10;
	ИначеЕсли ИндексЦвета = 2 Тогда
		Возврат 5;
	ИначеЕсли ИндексЦвета = 1 Тогда
		Возврат 6;
	ИначеЕсли ИндексЦвета = 0 Тогда
		Возврат 4;
	ИначеЕсли ИндексЦвета = 15 Тогда
		Возврат 11;
	ИначеЕсли ИндексЦвета = 8 Тогда
		Возврат 3;
	ИначеЕсли ИндексЦвета = 12 Тогда
		Возврат 8;
	ИначеЕсли ИндексЦвета = 3 Или  ИндексЦвета = 18 Тогда
		Возврат 5;
	ИначеЕсли ИндексЦвета = 22 Тогда
		Возврат 9;
	ИначеЕсли ИндексЦвета = 7 Тогда
		Возврат 1;
	ИначеЕсли ИндексЦвета = 5 Или  ИндексЦвета = 20 Тогда
		Возврат 7;
	ИначеЕсли ИндексЦвета = 4 Или  ИндексЦвета = 6 Тогда
		Возврат 2;
	ИначеЕсли ИндексЦвета = 19 Или  ИндексЦвета = 21 Тогда
		Возврат 10;
	ИначеЕсли ИндексЦвета = 1 Или  ИндексЦвета = 2 ИЛИ  ИндексЦвета = 16 Или  ИндексЦвета = 17 Тогда
		Возврат 6;
	ИначеЕсли ИндексЦвета = 0 Тогда
		Возврат 4;
	ИначеЕсли ИндексЦвета = 9 Или  ИндексЦвета = 15 Или  ИндексЦвета = 24 Тогда
		Возврат 11;
	ИначеЕсли ИндексЦвета = 8 Или  ИндексЦвета = 23 Тогда
		Возврат 3;
	ИначеЕсли ИндексЦвета = 10 Или  ИндексЦвета = 11 Или ИндексЦвета = 12 Или  ИндексЦвета = 13 Или ИндексЦвета = 14 Тогда
		Возврат 8;
	Иначе
		Возврат 5;
	КонецЕсли;
	
КонецФункции // ПолучитьИДЦветаСобытия()

// Функция получает категорию по идентификатору цвета Google. 
//
// Параметры:
//  ИдЦвета - Число - идентификатор Google цвета
//
// Возвращаемое значение:
//  Категория    - ТабличнаяЧасть - Категории события. 
//
Функция ПолучитьКатегориюПоЦветуСобытия(ИдЦвета)Экспорт
	
	Если ИдЦвета = "1" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Голубой'");
		ЦветКатегории = 7;
	ИначеЕсли ИдЦвета = "2" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Зеленый'");
		ЦветКатегории = 4;
	ИначеЕсли ИдЦвета = "3" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Фиолетовый'");
		ЦветКатегории = 8;
	ИначеЕсли ИдЦвета = "4" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Красный'");
		ЦветКатегории = 0;
	ИначеЕсли ИдЦвета = "5" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Желтый'");
		ЦветКатегории = 2;
	ИначеЕсли ИдЦвета = "6" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Оранжевый'");
		ЦветКатегории = 1;
	ИначеЕсли ИдЦвета = "7" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Бирюзовый'");
		ЦветКатегории = 5;
	ИначеЕсли ИдЦвета = "8" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Серый'");
		ЦветКатегории = 12;
	ИначеЕсли ИдЦвета = "9" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Ярко-синий'");
		ЦветКатегории = 22;
	ИначеЕсли ИдЦвета = "10" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Ярко-зеленый'");
		ЦветКатегории = 19;
	ИначеЕсли ИдЦвета = "11" Тогда
		ПредставлениеКатегории = НСтр("ru = 'Ярко-красный'");
		ЦветКатегории = 15;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Категории.Ссылка
	               |ИЗ
	               |	Справочник.CRM_Категории КАК CRM_Категории
	               |ГДЕ
				   |	НЕ CRM_Категории.ПометкаУдаления
	               |	И CRM_Категории.ЦветИндекс = &ИндексЦвета";
	Запрос.УстановитьПараметр("ИндексЦвета",ЦветКатегории);
	Результат = Запрос.Выполнить();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	RGBКатегории = CRM_МероприятияСервер.ПолучитьRGBКатегорииПоИндексу(ЦветКатегории);
	Если ТипЗнч(RGBКатегории) = Тип("Структура") Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		// создаем новую категорию
		//TODO: нужно ли это делать?
		Попытка
			НоваяКатегория = Справочники.CRM_Категории.СоздатьЭлемент();
			НоваяКатегория.Заполнить(Неопределено);
			НоваяКатегория.Наименование = ПредставлениеКатегории;
			НоваяКатегория.ЦветПредставление = ПредставлениеКатегории;
			НоваяКатегория.ЦветИндекс = ЦветКатегории;
			НоваяКатегория.ЦветКрасный = RGBКатегории.Красный;
			НоваяКатегория.ЦветЗеленый = RGBКатегории.Зеленый;
			НоваяКатегория.ЦветСиний = RGBКатегории.Синий;
			НоваяКатегория.Записать();
		Исключение
			НоваяКатегория = Неопределено;
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если НоваяКатегория <> Неопределено И ЗначениеЗаполнено(НоваяКатегория.Ссылка) Тогда
			Возврат НоваяКатегория.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьКатегориюПоЦветуСобытия()

// Функция преобразует дату в нужный Google формат. 
//
// Параметры:
//  Дата - Дата - дата, которую нужно преобразовать
//
// Возвращаемое значение:
//  Результат    - Строка - результат преобразования. 
//	
Функция ДатуВФормат(Дата,Пользователь = Неопределено) 
	Результат = "";

	Дата = УниверсальноеВремя(Дата);
	Результат = ""+Формат(Год(Дата),"ЧГ=0")+"-"+
				?(СтрДлина(""+Месяц(Дата))=1,"0"+Месяц(Дата),Месяц(Дата))+"-"+
				?(СтрДлина(""+День(Дата))=1,"0"+День(Дата),День(Дата))+"T"+
				?(СтрДлина(""+Час(Дата))=1,"0"+Час(Дата),Час(Дата))+":"+
				?(СтрДлина(""+Минута(Дата))=1,"0"+Минута(Дата),Минута(Дата))+":"+
				?(СтрДлина(""+Секунда(Дата))=1,"0"+Секунда(Дата),Секунда(Дата))+"+00:00"; // уже внесены изменения в дату в соответствии с часовым поясом
	
	Возврат Результат;
	
КонецФункции // ДатуВФормат

// Функция преобразует формат даты Google в дату. 
//
// Параметры:
//  Строка -   - Строка - строка, которую необходимо преобразования.
//
// Возвращаемое значение:
//  Результат  - Дата - дата, полученная в результате преобразования 
//	
Функция ФорматВДату(Строка, Пользователь = Неопределено, УниверсальноеВремя = Ложь)Экспорт 
	
	Если Пользователь = Неопределено Тогда
		ЧасовойПояс = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ЧасовойПоясКалендаряGApi");
	Иначе
		ЧасовойПояс = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ЧасовойПоясКалендаряGApi");
	КонецЕсли;

	ЕстьЧасовойпояс = Истина;
	Если Найти(Строка,".")>0 Тогда 
    	Строка = Лев(Строка,Найти(Строка,".")-1);
		ЕстьЧасовойПояс = Ложь;
	КонецЕсли;
	Строка = СтрЗаменить(Строка,"-","");
	Строка = СтрЗаменить(Строка,"T","");
	Если ЕстьЧасовойпояс Тогда
		ЧасовойПоясВСтроке = Прав(Строка, СтрДлина(Строка)-Найти(Строка,"+")+1);
		Строка = СтрЗаменить(Строка,ЧасовойПоясВСтроке,"");
		Если Строка = "" Тогда
			Строка = Лев(ЧасовойПоясВСтроке, СтрДлина(ЧасовойПоясВСтроке)-5);
		КонецЕсли;
	КонецЕсли;
	Строка = СтрЗаменить(Строка, ":","");
	Если Не УниверсальноеВремя  Тогда
		УниверсальноеВремя = УниверсальноеВремя(Дата(Строка),ЧасовойПояс);
		//ЛетнееСмещениеПоЧПКалендаря = СмещениеЛетнегоВремени(ЧасовойПояс,УниверсальноеВремя);
		//ЛетнееСмещениеПоМестномуПоясу = СмещениеЛетнегоВремени(ЧасовойПояс(),УниверсальноеВремя);
		Возврат МестноеВремя(УниверсальноеВремя); 
	Иначе
		Возврат МестноеВремя(Дата(Строка));
	КонецЕсли;;
	
КонецФункции // ФорматВДату

// Функция преобразует дату в нужный Google формат с посимвольным декодированием. 
//
// Параметры:
//  Дата - Дата - дата, которую нужно преобразовать
//
// Возвращаемое значение:
//  Результат    - Строка - результат преобразования. 
//
Функция ВФормат(Дата, Пользователь = Неопределено, ДляПериодичного = Ложь) 
	Результат = "";

	Если ДляПериодичного Тогда 
		Результат = ""+Формат(Год(Дата),"ЧГ=0")+
					?(СтрДлина(""+Месяц(Дата))=1,"0"+Месяц(Дата),Месяц(Дата))+
					?(СтрДлина(""+День(Дата))=1,"0"+День(Дата),День(Дата))+"T"+
					?(СтрДлина(""+Час(Дата))=1,"0"+Час(Дата),Час(Дата))+
					?(СтрДлина(""+Минута(Дата))=1,"0"+Минута(Дата),Минута(Дата))+
					?(СтрДлина(""+Секунда(Дата))=1,"0"+Секунда(Дата),Секунда(Дата))+"Z";

	Иначе
		Дата = УниверсальноеВремя(Дата);
		Результат = ""+Формат(Год(Дата),"ЧГ=0")+"-"+
					?(СтрДлина(""+Месяц(Дата))=1,"0"+Месяц(Дата),Месяц(Дата))+"-"+
					?(СтрДлина(""+День(Дата))=1,"0"+День(Дата),День(Дата))+"T"+
					?(СтрДлина(""+Час(Дата))=1,"0"+Час(Дата),Час(Дата))+"%3A"+
					?(СтрДлина(""+Минута(Дата))=1,"0"+Минута(Дата),Минута(Дата))+"%3A"+
					?(СтрДлина(""+Секунда(Дата))=1,"0"+Секунда(Дата),Секунда(Дата))+"%2B00%3A00";
					
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ВФормат()

// Функция получает описание объекта из модели json. 
//
// Параметры:
//  СтрJSON - Строка - описание объекта в виде модели json
//
// Возвращаемое значение:
//  Значение    - Соответствие - соответствие свойств и значений объекта 
//
Функция UnJSON(СтрJSON) Экспорт 
	
	Перем Значение;
	Если ПолучитьЗначениеJSON(СтрJSON,Значение)=0 Тогда
		Возврат Значение;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции // UnJSON()

// Функция осуществляет непосредственный разбор json. 
//
//
Функция ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция=1,Ключ="") Экспорт
	Перем Кавычка;

	ЗначениеВСтроке="";
	Кавычек=0;
	Комментарий=Ложь;
	Строка=Ложь;

	Пока Позиция<=СтрДлина(СтрJSON) Цикл
		ХХ=Сред(СтрJSON,Позиция,2);
		Х=Лев(ХХ,1);
		Позиция=Позиция+1;

		Если Х>" " ИЛИ Строка Тогда //Отсекаем всякий хлам

			Если Комментарий Тогда
				//Это комментарий. Крутимся в цикле пока не встретится конец комментария
				Если ХХ="*/" Тогда
					//Комментарий закончился
					Комментарий=Ложь;
					Позиция=Позиция+1;
				КонецЕсли;

			ИначеЕсли Х="\" Тогда
				Позиция=Позиция+1;
				ХХ=ВРег(ХХ);
				Если ХХ="\""" Тогда ЗначениеВСтроке=ЗначениеВСтроке+""""
				ИначеЕсли ХХ="\\" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"\"
				ИначеЕсли ХХ="\/" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"/"
				ИначеЕсли ХХ="\B" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символ(8)
				ИначеЕсли ХХ="\F" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПФ //перевод формы (страницы)
				ИначеЕсли ХХ="\N" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПС //перевод строки
				ИначеЕсли ХХ="\R" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВК //возврат каретки
				ИначеЕсли ХХ="\T" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВТаб //символ вертикальной табуляции
				ИначеЕсли ХХ="\U" Тогда
					ЗначениеВСтроке=ЗначениеВСтроке+Символ(Hex2Число(Сред(СтрJSON,Позиция,4))); //шестнадцатиричное число
					Позиция=Позиция+4
				КонецЕсли;

			ИначеЕсли Строка Тогда
				//Если строка не закончилась - то пропускаем управляющие символы
				Если Х=Кавычка Тогда
					//Закончилась строка
					Строка=Ложь;
					Кавычек=Кавычек+1;
				Иначе
					ЗначениеВСтроке=ЗначениеВСтроке+Х;
				КонецЕсли;

			ИначеЕсли ХХ="/*" Тогда
				//Начался комментарий
				Комментарий=Истина;
				Позиция=Позиция+1;

			ИначеЕсли Найти("""'{}[]:,",Х)>0 Тогда
				Если Х="""" ИЛИ Х="'" Тогда
					//Началась строка
					//Строка - коллекция нуля или больше символов Unicode, заключенная в
					//двойные кавычки, используя "\" в качестве символа экранирования.
					//Символ представляется как односимвольная строка.
					//Похожий синтаксис используется в C и Java.
					Строка=Истина;
					Кавычка=Х;
					Кавычек=Кавычек+1;

				ИначеЕсли Х="{" Тогда
					//Начался объект
					//Объект - неупорядоченный набор пар ключ/значение.
					//Объект начинается с "{" и заканчивается "}".
					//Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					Объект=Новый Соответствие;
					//Объект=Новый Структура;
					Пока Истина Цикл
						//Получим ключ и значение
						Ключ="";
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция,Ключ);
						//0 - есть значение и не конец объекта (запятая)
						//1 - есть значение и конец объекта
						//2 - нет значения и не конец объекта (запятая)
						//3 - нет значения и конец объекта
						Если Режим=0 Тогда
							Объект.Вставить(Ключ,Значение);
						ИначеЕсли Режим=1 Тогда
							Объект.Вставить(Ключ,Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение=Объект;
					Возврат 0

				ИначеЕсли Х="[" Тогда
					//Начался массив
					//Массив - упорядоченная коллекция значений.
					//Массив начинается с "[" и заканчивается "]".
					//Значения разделены ",".
					Массив=Новый Массив;
					Пока Истина Цикл
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);
						//0 - есть значение и не конец массива (запятая)
						//1 - есть значение и конец массива
						//2 - нет значения и не конец массива (запятая)
						//3 - нет значения и конец массива
						Если Режим=0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим = 1 Тогда
							Массив.Добавить(Значение);
							Прервать
						ИначеЕсли Режим = 3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение = Массив;
					Возврат 0

				ИначеЕсли Х="]" ИЛИ Х="}" Тогда
					//Закончился массив/объект
					Если ЗначениеВСтроке = "" И Кавычек = 0 Тогда
						Возврат 3 //нет значения и конец массива/объекта
					Иначе
						Значение = ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек);
						Возврат 1 //есть значение и конец массива/объекта
					КонецЕсли;

				ИначеЕсли Х=":" Тогда
					Ключ = ЗначениеВСтроке;
					Возврат ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);

				Иначе
					// запятая
					Прервать
				КонецЕсли;

			Иначе
				ЗначениеВСтроке = ЗначениеВСтроке+Х;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Кавычек > 0 Тогда
		Значение = ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке="" Тогда
			Возврат 2;
		Иначе
			Значение = ЗначениеБезКавычек(ЗначениеВСтроке)
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции // ПолучитьЗначениеJSON()

// Вспомогательная функция 
//
//
Функция Hex2Число(Hex) 
	Стр=ВРег(СокрЛП(Hex));
	Dec=0;
	Для Х=1 По СтрДлина(Стр) Цикл
		Dec=Dec+Найти("123456789ABCDEF",Сред(Стр,Х,1))*Pow(16,СтрДлина(Стр)-Х)
	КонецЦикла;
	Возврат Dec
КонецФункции

// Вспомогательная функция 
//
//
Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек)
	Если Кавычек>0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке)
	ИначеЕсли ЗначениеВСтроке="" Тогда
		Возврат Неопределено
	КонецЕсли;
	Возврат ЗначениеБезКавычек(ЗначениеВСтроке)
КонецФункции

// Вспомогательная функция 
//
//
Функция ЗначениеВКавычках(ЗначениеВСтроке)
	Возврат ЗначениеВСтроке;
КонецФункции

// Вспомогательная функция 
//
//
Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	// Это число, булево или null.
	// Хотя здесь могут быть и строки. Например: {Code:123}
	Стр = ВРег(ЗначениеВСтроке);
	Если Стр = "TRUE" Тогда
		Возврат Истина;
	ИначеЕсли Стр = "FALSE" Тогда
		Возврат Ложь;
	ИначеЕсли Стр = "NULL" Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Пробежимся по предполагаемому "числу"
	Экспонента	= Ложь;
	ХХ			= " ";
	Для Индекс = 1 По СтрДлина(Стр) Цикл
		Х = Сред(Стр, Индекс, 1);
		Если Найти("0123456789.+-", Х) Тогда
			ХХ = ХХ + Х;
		ИначеЕсли Х = "E" Тогда
			#Если ВебКлиент Тогда
				Возврат ЗначениеВСтроке;
			#Иначе
				Экспонента = Истина;
				УУ = XMLЗначение(Тип("Число"),ХХ);
				ХХ = " ";
			#КонецЕсли
		Иначе
			// то точно не число, а строка
			Возврат ЗначениеВСтроке;
		КонецЕсли;
	КонецЦикла;
	#Если ВебКлиент Тогда
		Попытка
			ХХ = Число(ХХ);
		Исключение
		КонецПопытки;	
	#Иначе
		ХХ = XMLЗначение(Тип("Число"), ХХ);
		Если Экспонента Тогда
			ХХ = УУ * Pow(10, ХХ);
		КонецЕсли;
	#КонецЕсли
	Возврат ХХ;
КонецФункции

// Процедура осуществляет запись файла в кодировке UTF-8 без BOM. 
//
// Параметры:
//  Текст - Строка - текст, который необходимо записать
//  ПолноеИмяФайла - Строка - полный путь к записываемому файлу
//
// Возвращаемое значение:
//  Значение    - Соответствие - соответствие свойств и значений объекта 
//
Процедура ЗаписатьФайлВформате_UTF8_без_BOM(Текст,ПолноеИмяФайла) 

    // записываем в файл с символами BOM в начале файле	
    ТекстовыйФайлUTF8_Bom = Новый ТекстовыйДокумент();
    ТекстовыйФайлUTF8_Bom.ДобавитьСтроку(текст);
    ТекстовыйФайлUTF8_Bom.Записать(полноеИмяФайла,"UTF-8");
	
    // открываем файл и считываем символы после символов BOM
    Данные = Новый ДвоичныеДанные(полноеИмяФайла);
    Строка64=Base64Строка(Данные);
    Строка64=Прав(Строка64,СтрДлина(Строка64)-4);
    ДанныеНаЗапись=Base64Значение(Строка64);
    ДанныеНаЗапись.Записать(полноеИмяФайла); // записываем
	
КонецПроцедуры 

// Функция возвращает признак синхронизации календаря Google
//
// Параметры:
//  Пользователь  - СправочникСсылка.Пользователи - пользователь, по умолчанию - текущий пользователь.
//
// Возвращаемое значение:
//  Булево - празнак синхронизации
// 
Функция СинхронизироватьКалендарьGoogle(Пользователь = Неопределено) Экспорт
	Если ПолучитьФункциональнуюОпцию("CRM_СинхронизироватьКалендарьСКалендаремGoogle") Тогда
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(Пользователь) Тогда
			ЗначениеНастройкиПользователя = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "СинхронизироватьКалендарьGoogle");
			Возврат (ЗначениеНастройкиПользователя = Истина);
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
КонецФункции

//////////////////////////////////////////////////////
////////////////////Кодировка////////////////////////

Функция НайтиКонтакт(АдресЭп, Наименование = Неопределено) Экспорт
	
	ТаблицаКонтакты = ПолучитьВсеКонтактыПоEmail(АдресЭп);
	
	ТаблицаКонтакты.Колонки.Добавить("_ПолеСортировки", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтакты Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаТаблицы._ПолеСортировки = 1;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				СтрокаТаблицы._ПолеСортировки = 2;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				СтрокаТаблицы._ПолеСортировки = 3;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				СтрокаТаблицы._ПолеСортировки = 4;
			Иначе
				СтрокаТаблицы._ПолеСортировки = 10;
			КонецЕсли;
		Иначе
			СтрокаТаблицы._ПолеСортировки = 999;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКонтакты.Сортировать("_ПолеСортировки ВОЗР");
	ТаблицаКонтакты.Колонки.Удалить(ТаблицаКонтакты.Колонки._ПолеСортировки);
	
	Возврат ТаблицаКонтакты;
	
КонецФункции


// Возвращает таблицу всех контактов, связанных с EMail.
//
// Параметры:
//  Адрес - Строка - адрес электронной почты для поиска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, которая содержит информацию о контактах.
//
Функция ПолучитьВсеКонтактыПоEmail(Адрес)
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаДляПоискаПоEmail(Ложь);
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует текст запроса для поиска контактов по Email.
//
// Параметры:
//  ПоискПоСписку  - Булево - признак того, что в качестве параметра передается массив значений.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция СформироватьТекстЗапросаДляПоискаПоEmail(ПоискПоСписку,ИтогиПоEmail = Ложь)
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.МассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ТаблицаКонтактнойИнформации.Представление,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
	|	И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ТаблицаКонтактнойИнформации.Представление,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнойИнформации.Ссылка." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Наименование
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
			|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Если ИтогиПоEmail Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИТОГИ ПО
		|	Представление";
	КонецЕсли;
	
	Если ПоискПоСписку Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Адрес", "В (&Адрес)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции
