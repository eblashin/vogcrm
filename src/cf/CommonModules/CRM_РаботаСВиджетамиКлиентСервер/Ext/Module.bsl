
////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для
//                               формирования HTML-обзора объектов системы.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет в текст html реквизит в формате "Наименование реквизита: значение реквизита".
//   HTMLТекст - Строка - текст html.
//   Подпись - Строка - название реквизита.
//   Значение - Любой тип - значение реквизита.
//   Цвет - строка – шестнадцатеричное представление цвета (например: E9B7FF) значения реквизита.
//
Процедура ДобавитьРеквизит(HTMLТекст, Подпись, Значение, Цвет = "") Экспорт
	
	ДобавитьПодпись(HTMLТекст, Подпись);
	ДобавитьЗначение(HTMLТекст, Значение, Цвет); 
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

// Добавляет переданную строку в текст html.
//
// Параметры:
//   HTMLТекст - Строка - текст html.
//   Подпись - Строка - добавляемая строка.
//
Процедура ДобавитьПодпись(HTMLТекст, Подпись) Экспорт
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<FONT color=#413003>";
		HTMLТекст = HTMLТекст + Подпись + " ";
		HTMLТекст = HTMLТекст + "</FONT>";
	КонецЕсли;
	
КонецПроцедуры

// Добавляет значение любого типа в текст html.
// Если в процедуру передается ссылочный тип данных, то в текст html
// добавляется навигационная ссылка с представлением переданного значения.
//
// Параметры:
//   HTMLТекст - Строка - текст html.
//   Значение - Любой тип - значение реквизита.
//   Цвет - строка – шестнадцатеричное представление цвета (например: E9B7FF) значения реквизита.
//
Процедура ДобавитьЗначение(HTMLТекст, ЗначениеДанных, Цвет) Экспорт
	
	Значение = ЗначениеДанных;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда 
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(Значение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Булево") Тогда 
		CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(Значение);
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + Значение;
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + Значение;
		КонецЕсли;	
	Иначе
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			ПолучитьНавигационнуюСсылку(Значение),
			CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(Строка(Значение)));
	КонецЕсли;
	
КонецПроцедуры

// Добавляет картинку в текст html.
//
// Параметры:
//   HTMLТекст - Строка - текст html.
//   Картинка - Картинка
//   Ссылка - Строка - ссылки для вставки в тег <a>.
//
Процедура ДобавитьКартинку(HTMLТекст, Картинка, Ссылка = "") Экспорт
	
	ДвоичныеДанныеКартинки = Картинка.ПолучитьДвоичныеДанные();
	Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		HTMLТекст = HTMLТекст + "<a href=" + Ссылка + ">";
	КонецЕсли;
	
	HTMLТекст = HTMLТекст
		+ "<img src='data:image/"
		+ Картинка.Формат()
		+ ";base64,"
		+ Base64ДанныеКартинки + "'>";
		
	Если ЗначениеЗаполнено(Ссылка) Тогда
		HTMLТекст = HTMLТекст + "</a>";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает общий стиль для документов html.
//
Функция СтильHTML() Экспорт
	
	Возврат "<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  2px;
		|		margin-left: 2px;
		|		font-family: Arial;
		|		font-size:   10pt;}
		|	table {
		|		width:       100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;}
		|	td {vertical-align: top;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 15px;}
		|	table.frame {
		|		border-collapse: collapse;
		|		border: 1px solid #C8C8C8;}
		|	td.frame {
		|		border: 1px solid #C8C8C8;}
		|</style>";
	
КонецФункции

// Получает элемент из списка виджетов по переданному индексу.
//
// Параметры:
//   СписокВиджетов - СписокЗначений - список виджетов.
//   ИндексВиджета 	- Число - Индекс виджета.
//
// Возвращаемое значение:
//  ЭлементСписка ИЛИ Неопределено - Найденный элемент
//
Функция ПолучитьЭлементСпискаЗначенийПоИндексу(СписокВиджетов, ИндексВиджета) Экспорт
	
	Для Каждого тЭлемент Из СписокВиджетов Цикл
		Если тЭлемент.Представление = ИндексВиджета Тогда
			Возврат тЭлемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Клиентские и серверные процедуры и функции.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру виджета в форме Текущие дела.
//
// Возвращаемое значение:
//   Виджет
//   Показатели - Массив
//   ПапкиПисем - Массив
//
Функция СтруктураВиджетаФормы() Экспорт
	
	СтруктураВиджетаФормы = Новый Структура;
	СтруктураВиджетаФормы.Вставить("Виджет");
	СтруктураВиджетаФормы.Вставить("Показатели", Новый Массив);
	СтруктураВиджетаФормы.Вставить("ПапкиПисем", Новый Массив);
	
	Возврат СтруктураВиджетаФормы;
	
КонецФункции

// Возвращает структуру виджета в форме Текущие дела.
//
// Возвращаемое значение:
//   Показатель
//   ИмяПоказателя
//   ПороговоеЗначение
//
Функция СтруктураПоказателяВиджета() Экспорт
	
	СтруктураПоказателя = Новый Структура;
	СтруктураПоказателя.Вставить("Показатель");
	СтруктураПоказателя.Вставить("ИмяПоказателя");
	СтруктураПоказателя.Вставить("ПороговоеЗначение");
	
	Возврат СтруктураПоказателя;
	
КонецФункции

#КонецОбласти