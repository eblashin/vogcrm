#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновляет записи регистра по Пользователю.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого добавляется
//                 запись в регистр.
//
Процедура ОбновитьЗаписиПоПользователю(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Пользователь)) Тогда
		СсылкаНаПользователя = Пользователь;
		ЭтоСлужебныйПользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Служебный");
	Иначе
		СсылкаНаПользователя = Пользователь.Ссылка;
		ЭтоСлужебныйПользователь = Пользователь.Служебный;
	КонецЕсли;
	
	Если ЭтоСлужебныйПользователь Тогда
		Возврат;
	КонецЕсли;
	
	Запись = СоздатьМенеджерЗаписи();
	Запись.РольПользователь = СсылкаНаПользователя;
	Запись.ИсполнительДелегат = СсылкаНаПользователя;
	
	Запись.Записать();
	
КонецПроцедуры

// Обновляет записи регистра по настройке делегирования.
// При этом учитываются роли делегирующего. Т.е. если у делегирующего
// имеются роли, то они дублируются для делегата с заполнением измерения НастройкаДелегирования.
//
// Параметры:
//  НастройкаДелегирования - СправочникОбъект.ДелегированиеПрав,
//                           СправочникСсылка.ДелегированиеПрав -  настройка делегирования.
//
Процедура ОбновитьЗаписиПоНастройкеДелегирования(НастройкаДелегирования, ДелегироватьРоли = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(НастройкаДелегирования)) Тогда
		РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НастройкаДелегирования,
			"Ссылка, ОтКого, Кому, Действует, ВариантДелегирования, ОбластиДелегирования");
			
		РеквизитыНастройки.ОбластиДелегирования = РеквизитыНастройки.ОбластиДелегирования.Выгрузить();
	Иначе
		РеквизитыНастройки = НастройкаДелегирования;
	КонецЕсли;
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.НастройкаДелегирования.Установить(РеквизитыНастройки.Ссылка);
	
	Если РеквизитыНастройки.Действует Тогда
		
		// Получим имена делегированных областей.
		ИменаДелегированныхОбластей = Новый Массив;
		Если РеквизитыНастройки.ВариантДелегирования = Перечисления.вогВариантыДелегированияПрав.ВсеПрава
			Или РеквизитыНастройки.ВариантДелегирования = Перечисления.вогВариантыДелегированияПрав.ВсеПраваЗапись Тогда
			
			ИменаДелегированныхОбластей.Добавить("");
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОбластиДелегированияПрав.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
				|	ОбластиДелегированияПрав.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.вогОбластиДелегированияПрав КАК ОбластиДелегированияПрав
				|ГДЕ
				|	ОбластиДелегированияПрав.Ссылка В(&ОбластиДелегирования)
				|	И ОбластиДелегированияПрав.ИмяПредопределенныхДанных <> """"";
				
			Запрос.УстановитьПараметр("ОбластиДелегирования", 
				РеквизитыНастройки.ОбластиДелегирования.ВыгрузитьКолонку("ОбластьДелегирования"));
				
			ИменаДелегированныхОбластей = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		// Определим делегируемые роли
		Если ДелегироватьРоли Тогда
			
			ДелегируемыеРоли = 
				РегистрыСведений.ИсполнителиЗадач.РолиИсполнителя(РеквизитыНастройки.ОтКого);
			
		КонецЕсли;
		
		// Определеим делегируемых подчиненных пользователей
		ПодчиненныеСотрудники = ПолучитьПодчиненныхПользователей(РеквизитыНастройки.ОтКого);
		
		Для Каждого ИмяОбластиДелегирования Из ИменаДелегированныхОбластей Цикл
			
			ОбластиДелегирования = Неопределено;
			
			Если ТипЗнч(ИменаДелегированныхОбластей) = Тип("ТаблицаЗначений") Тогда
				ИмяОбласти = ИмяОбластиДелегирования.ИмяПредопределенныхДанных;
			Иначе
				ИмяОбласти = ИмяОбластиДелегирования;
			КонецЕсли;
			
			// Добавляем делегата.
			Запись = Набор.Добавить();
			
			Запись.НастройкаДелегирования 	= РеквизитыНастройки.Ссылка;
			Запись.РольПользователь 		= РеквизитыНастройки.ОтКого;
			Запись.ИсполнительДелегат 		= РеквизитыНастройки.Кому;
			Запись.ИмяОбластиДелегирования 	= ИмяОбласти;
			
			Если ТипЗнч(ИменаДелегированныхОбластей) = Тип("ТаблицаЗначений") Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ОбластьДелегирования", ИмяОбластиДелегирования.Ссылка);
				
				ОбластиДелегирования = РеквизитыНастройки.ОбластиДелегирования.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого ОбластьДелегирования Из ОбластиДелегирования Цикл
					Запись.Запись = ОбластьДелегирования.Запись;
				КонецЦикла;
				
			ИначеЕсли РеквизитыНастройки.ВариантДелегирования = Перечисления.вогВариантыДелегированияПрав.ВсеПраваЗапись Тогда
				
				Запись.Запись = Истина;
				
			КонецЕсли;
			
			// Добавляем делегированные роли.
			Если ДелегироватьРоли Тогда
				
				Для Каждого ДелегируемаяРоль Из ДелегируемыеРоли Цикл
					
					Запись = Набор.Добавить();
					
					Запись.РольПользователь = ДелегируемаяРоль;
					Запись.ИсполнительДелегат = РеквизитыНастройки.Кому;
					Запись.НастройкаДелегирования = РеквизитыНастройки.Ссылка;
					Запись.ИмяОбластиДелегирования = ИмяОбластиДелегирования;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Добавляем делегированных подчиненных сотрудников
			Для Каждого ПодчиненныйСотрудник Из ПодчиненныеСотрудники Цикл
				
				Запись = Набор.Добавить();
				
				Запись.РольПользователь 		= РеквизитыНастройки.ОтКого;
				Запись.ИсполнительДелегат 		= РеквизитыНастройки.Кому;
				Запись.НастройкаДелегирования 	= РеквизитыНастройки.Ссылка;
				Запись.ИмяОбластиДелегирования 	= ИмяОбласти;
				Запись.ПодчиненныйСотрудник 	= ПодчиненныйСотрудник;
				
				Если ТипЗнч(ИменаДелегированныхОбластей) = Тип("ТаблицаЗначений")
					И ТипЗнч(ОбластиДелегирования) = Тип("Массив") Тогда
					
					Для Каждого ОбластьДелегирования Из ОбластиДелегирования Цикл
						Запись.Запись = ОбластьДелегирования.Запись;
					КонецЦикла;
					
				ИначеЕсли РеквизитыНастройки.ВариантДелегирования = Перечисления.вогВариантыДелегированияПрав.ВсеПраваЗапись Тогда
					
					Запись.Запись = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		// Если настройка делегирования не действует, то удаляем все записи по настройке.
	КонецЕсли;
	
	Набор.Записать();
	
	ФоновыеЗадания.Выполнить(
		"вогНастраиваемоеДелегированиеПрав.ОбновитьДелегированныеОбъектыДоступа",
		Новый Массив,
		,
		"Обновление делегированных объектов доступа");
	
КонецПроцедуры

// Обновляет записи регистра по исполнителю роли.
// При этом учитывается делегирование прав от текущего исполнителя - если от исполнителя
// делегированы полномочия, то текущая роль обновляется и в записях регистра по этим делегированиям.
//
// Параметры:
//  Исполнитель - СправочникСсылка.Пользователи - исполнитель роли.
//  РольИсполнителя - СправочникСсылка.РолиИсполнителей - роль.
//  ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - объект адресации роли.
//  ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - объект адресации роли.
//
Процедура ОбновитьЗаписиПоИсполнителюРоли(Исполнитель, РольИсполнителя) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим наличие записей для текущего исполнителя роли
	// в регистр ИсполнителиЗадач.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсполнителиЗадач.Исполнитель,
		|	ИсполнителиЗадач.РольИсполнителя
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.Исполнитель = &Исполнитель
		|	И ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|";
		
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.ИсполнительДелегат.Установить(Исполнитель);
	Набор.Отбор.РольПользователь.Установить(РольИсполнителя);
	Набор.Отбор.НастройкаДелегирования.Установить(Справочники.вогДелегированиеПрав.ПустаяСсылка());
	
	УдалениеИсполнителя = РезультатЗапроса.Пустой();
	
	Если УдалениеИсполнителя Тогда
		// Если записей нет, то удаляем все записи соответствующие
		// текущему исполнителю роли.
	Иначе
		// Если записи есть, то формируем новую запись в регистре для
		// текущего исполнителя.
		Запись = Набор.Добавить();
		
		Запись.РольПользователь = РольИсполнителя;
		Запись.ИсполнительДелегат = Исполнитель;
		
	КонецЕсли;
	
	Набор.Записать();
	
	// Определим настройки делегирования исполнителя роли.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДелегированиеПрав.Ссылка КАК Ссылка,
		|	ДелегированиеПрав.Кому,
		|	ЕСТЬNULL(ОбластиДелегированияПрав.ИмяПредопределенныхДанных, """") КАК ИмяОбластиДелегирования
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ДелегированиеПравОбластиДелегирования
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|			ПО ДелегированиеПравОбластиДелегирования.ОбластьДелегирования = ОбластиДелегированияПрав.Ссылка
		|		ПО (ДелегированиеПравОбластиДелегирования.Ссылка = ДелегированиеПрав.Ссылка)
		|ГДЕ
		|	ДелегированиеПрав.ОтКого = &ОтКого
		|	И ДелегированиеПрав.Действует = ИСТИНА
		|ИТОГИ ПО
		|	Ссылка";
		
	Запрос.УстановитьПараметр("ОтКого", Исполнитель);
	ВыборкаПоНастройкамДелегирования = 
		Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНастройкамДелегирования.Следующий() Цикл
		
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.РольПользователь.Установить(РольИсполнителя);
		Набор.Отбор.НастройкаДелегирования.Установить(ВыборкаПоНастройкамДелегирования.Ссылка);
		
		Если УдалениеИсполнителя Тогда
			// Удаляем записи с ролью исполнителя по настройкам делегирования.
			
		Иначе
			// Добавляем запись по настройке делегирования для текущей роли.
			ВыборкаПоОбластямДелегирования = ВыборкаПоНастройкамДелегирования.Выбрать();
			
			ПропуститьОбластьБезИмени = Ложь;
			Если ВыборкаПоОбластямДелегирования.Количество() > 1 Тогда
				ПропуститьОбластьБезИмени = Истина;
			КонецЕсли;
			
			Пока ВыборкаПоОбластямДелегирования.Следующий() Цикл
				
				Если ПропуститьОбластьБезИмени
					И ВыборкаПоОбластямДелегирования.ИмяОбластиДелегирования = "" Тогда
					
					Продолжить;
				КонецЕсли;
					
				Запись = Набор.Добавить();
				
				Запись.РольПользователь = РольИсполнителя;
				Запись.ИсполнительДелегат = ВыборкаПоОбластямДелегирования.Кому;
				Запись.НастройкаДелегирования = ВыборкаПоНастройкамДелегирования.Ссылка;
				Запись.ИмяОбластиДелегирования = ВыборкаПоОбластямДелегирования.ИмяОбластиДелегирования;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак делегата для исполнителя роли или полномочий пользователя.
//
// Параметры:
//  Пользователи - Массив - СправочникСсылка.Пользователи, СправочникСсылка.ПолныеРоли - 
//                     роль или пользователь, чьи полномочия выполняет исполнитель.
//  Исполнитель - СправочникСсылка.Пользователи - Исполнитель.
//  ИмяОбластиДелегирования - Строка - имя предопределенного элемента справочника ОбластиДелегированияПрав
//
// Возвращаемое значение:
//  Булево - возвращается Истина если исполнитель выполняет роль или полномочия пользователя по делегированию.
//           Иначе возвращается ложь.
//
Функция ИсполнительЯвляетсяДелегатом(Пользователи, Исполнитель, ИмяОбластиДелегирования, ТолькоЗапись = Истина) Экспорт
	
	// Определяем признак делегирования для текущей задачи по ее исполнителю.
	// Если в регистре ИсполнителиРолейИДелегаты есть записи без настройки делегирования
	// для текущего пользователя и исполнителя задачи, то считается, что задача не делегирована.
	// Если есть записи только с настройками делегирования, тогда задача делегирована пользователю.
	// Если записей в регистре нет, то не определяем и не выводим признак делегированной задачи.
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(вогИсполнителиРолейИДелегаты.НастройкаДелегирования <> ЗНАЧЕНИЕ(Справочник.вогДелегированиеПрав.)), ЛОЖЬ) КАК ЭтоДелегат
	|ИЗ
	|	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
	|ГДЕ
	|	вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь
	|	И вогИсполнителиРолейИДелегаты.РольПользователь В(&Исполнители)
	|	И вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", &ИмяОбластиДелегирования)
	|	%ТекстУсловия%";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", 		Исполнитель);
	Запрос.УстановитьПараметр("Исполнители", 				Пользователи);
	Запрос.УстановитьПараметр("ИмяОбластиДелегирования", 	ИмяОбластиДелегирования);
	
	Если ТолькоЗапись Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстУсловия%", "И вогИсполнителиРолейИДелегаты.Запись = ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстУсловия%", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭтоДелегат;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПодчиненныхПользователей(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Павелко, CRM-69, 18.12.2019+++
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
	|ПОМЕСТИТЬ ВТ_ДолжностныеПозиции
	|ИЗ
	|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
	|ГДЕ
	|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
	|	И НЕ CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка.ПометкаУдаления
	|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ДолжностныеПозиции.Ссылка
	|ИЗ
	|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
	|ГДЕ
	|	CRM_ДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
	|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
	|	И НЕ CRM_ДолжностныеПозиции.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.CRM_ДолжностнаяПозиция В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВТ_ДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
	|			ИЗ
	|				ВТ_ДолжностныеПозиции КАК ВТ_ДолжностныеПозиции)
	|	И (НЕ Пользователи.CRM_ДолжностнаяПозиция = &ТекущаяДолжностнаяПозиция
	|			ИЛИ Пользователи.Ссылка = &ТекущийПользователь)
	|
	|СГРУППИРОВАТЬ ПО
	|	Пользователи.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование");

	ТекущаяДолжностнаяПозиция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь,"CRM_ДолжностнаяПозиция");

	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция", ТекущаяДолжностнаяПозиция);

	ПодчиненныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Возврат ПодчиненныеСотрудники;
	
	//ТекущаяДолжностнаяПозиция 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "CRM_ДолжностнаяПозиция");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	CRM_ДолжностныеПозиции.Ссылка КАК ДолжностнаяПозиция
	//	|ПОМЕСТИТЬ ВТ_ДолжностныеПозиции
	//	|ИЗ
	//	|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
	//	|ГДЕ
	//	|	CRM_ДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
	//	|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
	//	|	И НЕ CRM_ДолжностныеПозиции.ПометкаУдаления
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	Пользователи.Ссылка КАК Сотрудник,
	//	|	ВТ_ДолжностныеПозиции.ДолжностнаяПозиция КАК Позиция
	//	|ИЗ
	//	|	Справочник.Пользователи КАК Пользователи
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДолжностныеПозиции КАК ВТ_ДолжностныеПозиции
	//	|		ПО Пользователи.CRM_ДолжностнаяПозиция = ВТ_ДолжностныеПозиции.ДолжностнаяПозиция
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Пользователи.Ссылка,
	//	|	ВТ_ДолжностныеПозиции.ДолжностнаяПозиция
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Пользователи.Наименование";
	//
	//Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция", ТекущаяДолжностнаяПозиция);
	//
	//РезультатЗапроса 		= Запрос.Выполнить();
	//ПодчиненныеСотрудники 	= РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	//
	//Возврат ПодчиненныеСотрудники;
	//Павелко, CRM-69, 18.12.2019---
	
КонецФункции

#КонецОбласти

#КонецЕсли