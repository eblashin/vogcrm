
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

&НаКлиенте
Перем ВводЧисла; // Признак ввода числа
&НаКлиенте
Перем ЕстьТочка; // Признак того, что при вводе числа уже поставлен десятичный разделитель.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьТаблицуПоказателей()
	ТаблицаПоказатели.Очистить();
	Показатели = CRM_РасчетПотенциалаСервер.ПолучитьИменаИНаименованияПоказателей();
	
	Для Каждого ТекПоказатель Из Показатели Цикл
		НоваяСтрока = ТаблицаПоказатели.Добавить();
		НоваяСтрока.Показатель = ТекПоказатель.Имя;
		НоваяСтрока.ПоказательПредставление = ТекПоказатель.Наименование;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоказателейНаСервере(СФильтром = Ложь)
	
	ДеревоПоказатели.ПолучитьЭлементы().Очистить();
	
	Показатели = CRM_РасчетПотенциалаСервер.ПолучитьИменаИНаименованияПоказателей();
	
	Для Каждого ТекПоказатель Из Показатели Цикл
		Если СФильтром И ИспользуемыеПоказатели.НайтиПоЗначению(ТекПоказатель.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВеткаПоказателя = ДеревоПоказатели.ПолучитьЭлементы().Добавить();
		ВеткаПоказателя.Показатель = ТекПоказатель.Наименование;
		
		МетаданныеПоказателя = CRM_РасчетПотенциалаСервер.ПолучитьМетаданныеПоказателя(ТекПоказатель.Имя);
		
		Если МетаданныеПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если МетаданныеПоказателя = "Булево" Тогда
			ВеткаЗначения = ВеткаПоказателя.ПолучитьЭлементы().Добавить();
			ВеткаЗначения.Показатель = Ложь;
			ВеткаЗначения = ВеткаПоказателя.ПолучитьЭлементы().Добавить();
			ВеткаЗначения.Показатель = Истина;
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеПоказателя.Иерархический Тогда
			ДобавитьЭлементыИерархическогоСправочника(ВеткаПоказателя, МетаданныеПоказателя);
		Иначе
			ДобавитьЭлементыЛинейногоСправочника(ВеткаПоказателя, МетаданныеПоказателя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.ДеревоПоказателиВес.Видимость Тогда
		ЗаполнитьВес("Вес", "Установлено", Подразделение);
	КонецЕсли;
	
	Если Элементы.ДеревоПоказателиВесСравнение.Видимость Тогда
		ЗаполнитьВес("ВесСравнение", "УстановленоСравнение", ПодразделениеСравнение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыИерархическогоСправочника(ЗНАЧ ВеткаПоказателя, МетаданныеПоказателя = Неопределено, Родитель = Неопределено);
	
	ИмяМетаданных = МетаданныеПоказателя.Имя;
	
	Если Родитель = Неопределено Тогда
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	" + ИмяМетаданных + ".Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник." + ИмяМетаданных + " КАК " + ИмяМетаданных + "
		               |ГДЕ
		               |	НЕ " + ИмяМетаданных + ".ПометкаУдаления
					   |И
					   |	" + ИмяМетаданных + ".Родитель = &Родитель
		               |УПОРЯДОЧИТЬ ПО
		               |	" + ИмяМетаданных + ".Наименование
					   |";
		Запрос.УстановитьПараметр("Родитель", Справочники[ИмяМетаданных].ПустаяСсылка());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяВетка = ВеткаПоказателя.ПолучитьЭлементы().Добавить();
			НоваяВетка.Показатель = Выборка.Ссылка;
			
			ДобавитьЭлементыИерархическогоСправочника(НоваяВетка, МетаданныеПоказателя, Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	" + ИмяМетаданных + ".Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник." + ИмяМетаданных + " КАК " + ИмяМетаданных + "
		               |ГДЕ
		               |	НЕ " + ИмяМетаданных + ".ПометкаУдаления
					   |И
					   |	" + ИмяМетаданных + ".Родитель = &Родитель
		               |УПОРЯДОЧИТЬ ПО
		               |	" + ИмяМетаданных + ".Наименование
					   |";
		Запрос.УстановитьПараметр("Родитель", Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяВетка = ВеткаПоказателя.ПолучитьЭлементы().Добавить();
			НоваяВетка.Показатель = Выборка.Ссылка;
			
			ДобавитьЭлементыИерархическогоСправочника(НоваяВетка, МетаданныеПоказателя, Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Процедура ДобавитьЭлементыЛинейногоСправочника(ВеткаПоказателя, МетаданныеПоказателя);
	ИмяМетаданных = МетаданныеПоказателя.Имя;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	" + ИмяМетаданных + ".Ссылка
	               |ИЗ
	               |	Справочник." + ИмяМетаданных + " КАК " + ИмяМетаданных + "
	               |ГДЕ
	               |	НЕ " + ИмяМетаданных + ".ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	" + ИмяМетаданных + ".Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяВетка = ВеткаПоказателя.ПолучитьЭлементы().Добавить();
		НоваяВетка.Показатель = Выборка.Ссылка;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура РазвернутьВсеУровниДерева(СтрокаУровня = Неопределено)
	Для Каждого СтрокаДерева Из ДеревоПоказатели.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПоказатели.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеУровниДерева()
	Для Каждого СтрокаДерева Из ДеревоПоказатели.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПоказатели.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьДерево()
	
	Если Элементы.КомандаСвернуть.Пометка Тогда
		СвернутьВсеУровниДерева();
	Иначе
		РазвернутьВсеУровниДерева();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользуемыеПоказатели()
	
	ИспользуемыеПоказатели.Очистить();
	
	СтрокаФормулы = Формула;
	
	Если ПустаяСтрока(СтрокаФормулы) Тогда
		Возврат;
	КонецЕсли;
	
	Пока Найти(СтрокаФормулы, "[") > 0 Цикл
		
		НачальнаяПозиция = Найти(СтрокаФормулы, "[");
		КонечнаяПозиция  = Найти(СтрокаФормулы, "]");
		
		НаименованиеПоказателя = Сред(СтрокаФормулы, НачальнаяПозиция + 1, КонечнаяПозиция - НачальнаяПозиция - 1);
		
		Показатель = CRM_РасчетПотенциалаСервер.ПолучитьПоказательПоНаименованию(НаименованиеПоказателя);
		
		ИспользуемыеПоказатели.Добавить(Показатель);
		
		СтрокаФормулы = Сред(СтрокаФормулы, КонечнаяПозиция + 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКорректностьФормулы()
	СообщенияОбОшибке = "";
	Результат = (ПустаяСтрока(Формула)) ИЛИ CRM_РасчетПотенциалаСервер.СинтаксическийКонтрольФормулыПоказателя(Формула, СообщенияОбОшибке);
	Если НЕ Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СохранитьФормулуПодразделения()
	ОбъектПодразделения = Подразделение.ПолучитьОбъект();
	ОбъектПодразделения.CRM_ФормулаРасчетаПотенциала = Формула;
	Попытка
		ОбъектПодразделения.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать формулу для подразделения!");
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СохранитьВесаПоказателей()
	ЗаписатьВесаПоказателей();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВес(ИмяКолонкиВеса, ИмяКолонкиОтметки, ЗаполняемоеПодразделение)
	
	Для Каждого ТекВеткаПоказателя Из ДеревоПоказатели.ПолучитьЭлементы() Цикл
		
		ИмяПоказателя = CRM_РасчетПотенциалаСервер.ПолучитьПоказательПоНаименованию(ТекВеткаПоказателя.Показатель);
		
		МенеджерЗаписи = РегистрыСведений.CRM_ВесаПоказателейПотенциала.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Подразделение      = ЗаполняемоеПодразделение;
		МенеджерЗаписи.ИмяПоказателя      = ИмяПоказателя;
		МенеджерЗаписи.ЗначениеПоказателя = Неопределено;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			ТекВеткаПоказателя[ИмяКолонкиВеса] = МенеджерЗаписи.ВесПоказателя;
		Иначе
			ТекВеткаПоказателя[ИмяКолонкиВеса] = 0;
		КонецЕсли;
		
		ТекВеткаПоказателя[ИмяКолонкиОтметки] = Истина;
		
		ЗаполнитьВесРекурсивно(ИмяКолонкиВеса, ИмяКолонкиОтметки, ЗаполняемоеПодразделение, ИмяПоказателя, ТекВеткаПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВесРекурсивно(ИмяКолонкиВеса, ИмяКолонкиОтметки, ЗаполняемоеПодразделение, ИмяПоказателя, ТекущаяВетка)
	
	Для Каждого ТекВеткаПоказателя Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		ЗначениеПоказателя = ТекВеткаПоказателя.Показатель;
		
		МенеджерЗаписи = РегистрыСведений.CRM_ВесаПоказателейПотенциала.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Подразделение      = ЗаполняемоеПодразделение;
		МенеджерЗаписи.ИмяПоказателя      = ИмяПоказателя;
		МенеджерЗаписи.ЗначениеПоказателя = ЗначениеПоказателя;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			ТекВеткаПоказателя[ИмяКолонкиВеса] = МенеджерЗаписи.ВесПоказателя;
			ТекВеткаПоказателя[ИмяКолонкиОтметки] = Истина;
		Иначе
			ТекВеткаПоказателя[ИмяКолонкиВеса] = ТекущаяВетка[ИмяКолонкиВеса];
			ТекВеткаПоказателя[ИмяКолонкиОтметки] = Ложь;
		КонецЕсли;
		
		ЗаполнитьВесРекурсивно(ИмяКолонкиВеса, ИмяКолонкиОтметки, ЗаполняемоеПодразделение, ИмяПоказателя, ТекВеткаПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВесаПоказателей()
	ЕстьОшибка = Ложь;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ВесаПоказателейПотенциала.Подразделение,
	               |	CRM_ВесаПоказателейПотенциала.ИмяПоказателя,
	               |	CRM_ВесаПоказателейПотенциала.ЗначениеПоказателя
	               |ИЗ
	               |	РегистрСведений.CRM_ВесаПоказателейПотенциала КАК CRM_ВесаПоказателейПотенциала
	               |ГДЕ
	               |	CRM_ВесаПоказателейПотенциала.Подразделение = &Подразделение
	               |	И CRM_ВесаПоказателейПотенциала.ИмяПоказателя = &ИмяПоказателя";
				   
	Для Каждого ТекВеткаПоказателя Из ДеревоПоказатели.ПолучитьЭлементы() Цикл
		
		ИмяПоказателя = CRM_РасчетПотенциалаСервер.ПолучитьПоказательПоНаименованию(ТекВеткаПоказателя.Показатель);
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("ИмяПоказателя", ИмяПоказателя);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.CRM_ВесаПоказателейПотенциала.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Подразделение      = Подразделение;
			МенеджерЗаписи.ИмяПоказателя      = ИмяПоказателя;
			МенеджерЗаписи.ЗначениеПоказателя = Выборка.ЗначениеПоказателя;
			Попытка
				МенеджерЗаписи.Удалить();
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекВеткаПоказателя Из ДеревоПоказатели.ПолучитьЭлементы() Цикл
		
		ИмяПоказателя = CRM_РасчетПотенциалаСервер.ПолучитьПоказательПоНаименованию(ТекВеткаПоказателя.Показатель);
		
		Если ТекВеткаПоказателя.Вес <> 0 Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_ВесаПоказателейПотенциала.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Подразделение      = Подразделение;
			МенеджерЗаписи.ИмяПоказателя      = ИмяПоказателя;
			МенеджерЗаписи.ЗначениеПоказателя = Неопределено;
			МенеджерЗаписи.ВесПоказателя = ТекВеткаПоказателя.Вес;
			
			Попытка
				МенеджерЗаписи.Записать(Истина);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для показателя <" + ИмяПоказателя + "> запись произвести не удалось!");
				ЕстьОшибка = Истина;
				Прервать;
			КонецПопытки;
		КонецЕсли;
		
		ЗаписатьВесаПоказателейРекурсивно(ИмяПоказателя, ТекВеткаПоказателя, ЕстьОшибка);
		
		Если ЕстьОшибка Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибка Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВесаПоказателейРекурсивно(ИмяПоказателя, ТекущаяВетка, ЕстьОшибка)
	
	Для Каждого ТекВеткаПоказателя Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		ЗначениеПоказателя = ТекВеткаПоказателя.Показатель;
		
		Если ТекВеткаПоказателя.Установлено Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_ВесаПоказателейПотенциала.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Подразделение      = Подразделение;
			МенеджерЗаписи.ИмяПоказателя      = ИмяПоказателя;
			МенеджерЗаписи.ЗначениеПоказателя = ЗначениеПоказателя;
			МенеджерЗаписи.ВесПоказателя      = ТекВеткаПоказателя.Вес;
			
			Попытка
				МенеджерЗаписи.Записать(Истина);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для показателя <" + ИмяПоказателя + "> со значением <" + ЗначениеПоказателя + "> запись произвести не удалось!");
				ЕстьОшибка = Истина;
				Прервать;
			КонецПопытки;                                                      
		КонецЕсли;
		
		ЗаписатьВесаПоказателейРекурсивно(ИмяПоказателя, ТекВеткаПоказателя, ЕстьОшибка);
		
		Если ЕстьОшибка Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВесПоказателейВнизПоИерархии(ВеткаДерева)
	
	Для Каждого ТекСтрока Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		ТекСтрока.Вес = ВеткаДерева.Вес;
		ТекСтрока.УСтановлено = Ложь;
		ИзменитьВесПоказателейВнизПоИерархии(ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеИзмененияПодразделения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия = Подразделение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для сравнения выбраны два одинаковых подразделения!");
		Элементы.ДеревоПоказателиВесСравнение.Видимость = Ложь;
		ПодразделениеСравнение = Неопределено;
		Возврат;
	КонецЕсли;
		
	Если РезультатЗакрытия.Пустая() Тогда
		Элементы.ДеревоПоказателиВесСравнение.Видимость = Ложь;
		ПодразделениеСравнение = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПодразделениеСравнение = РезультатЗакрытия;
	
	Элементы.ДеревоПоказателиВесСравнение.Видимость = Истина;
	Элементы.ДеревоПоказателиВесСравнение.Заголовок = "Вес (" + СокрЛП(ПодразделениеСравнение) + ")";
	
	ЗаполнитьВес("ВесСравнение", "УстановленоСравнение", ПодразделениеСравнение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПотенциалыКлиентов()
	// Заполнение ведем из регистра "Потенциалы".
	
	Для Каждого ТекСтрока Из ТаблицаКлиенты Цикл
		ТекСтрока.ПотенциалТекущий = CRM_РасчетПотенциалаСервер.ПолучитьПотенциалКлиента(ТекСтрока.Клиент, Подразделение);
		ТекСтрока.ЕстьДоступ       = Число(CRM_РасчетПотенциалаСервер.ЕстьДоступККлиенту(ТекСтрока.Клиент, Подразделение));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПотенциалНовый(Команда)
	ФормулаВведенаКорректно = ПроверитьКорректностьФормулы();
	Если НЕ ФормулаВведенаКорректно Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаКлиенты Цикл
		ТекСтрока.ПотенциалНовый = CRM_РасчетПотенциалаСервер.РассчитатьПотенциалКлиента(ТекСтрока.Клиент, Подразделение, Формула);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПотенциалы(Команда)
	//	Сохраняем
	Применить(Команда);
	
	// Пересчитываем данные в регистре по текущему подразделению.
	CRM_РасчетПотенциалаСервер.ЗаполнитьПотенциалыДляПодразделения(Подразделение);
	
	// Выводим значения текущих потенциалов.
	ЗаполнитьПотенциалыКлиентов();
	
	// Выводим значения новых потенциалов (должны совпать с текущими - проверка).
	РассчитатьПотенциалНовый(Команда);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	МассивКлиентов = Новый Массив();
	
	Для Каждого ТекСтрока Из ТаблицаКлиенты Цикл
		МассивКлиентов.Добавить(ТекСтрока.Клиент);
	КонецЦикла;
	
	ХранилищеНастроекДанныхФорм.Сохранить("__СписокКлиентовВНастройкахВесовПотенциалов", "Клиенты", МассивКлиентов, , );
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	МассивКлиентов = ХранилищеНастроекДанныхФорм.Загрузить("__СписокКлиентовВНастройкахВесовПотенциалов", "Клиенты", ,);
	Если МассивКлиентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКлиенты.Очистить();
	
	Для Каждого ТекКлиент Из МассивКлиентов Цикл
		НоваяСтрока = ТаблицаКлиенты.Добавить();
		НоваяСтрока.Клиент = ТекКлиент;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ И СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ТаблицаКлиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", , Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКлиентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		НайденныеСтроки = ТаблицаКлиенты.НайтиСтроки(Новый Структура("Клиент", ВыбранноеЗначение));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаКлиенты.Добавить();
			НоваяСтрока.Клиент = ВыбранноеЗначение;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказателиВесПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДеревоПоказатели.ТекущиеДанные;
	ТекущаяСтрока.Установлено = Истина;
	
	// Здесь рекурсивно выводим для подчиненных строк.
	
	ИзменитьВесПоказателейВнизПоИерархии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвернуть(Команда)
	Элементы.КомандаСвернуть.Пометка = НЕ Элементы.КомандаСвернуть.Пометка;
	
	Если Элементы.КомандаСвернуть.Пометка Тогда
		Элементы.КомандаСвернуть.Заголовок = "Развернуть";
	Иначе
		Элементы.КомандаСвернуть.Заголовок = "Свернуть";
	КонецЕсли;
	
	СвернутьРазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура КомандаФильтрПоФормуле(Команда)
	Элементы.КомандаФильтрПоФормуле.Пометка = НЕ Элементы.КомандаФильтрПоФормуле.Пометка;
	
	Если Элементы.КомандаФильтрПоФормуле.Пометка Тогда
		Элементы.КомандаФильтрПоФормуле.Заголовок = "Снять фильтр";
	Иначе
		Элементы.КомандаФильтрПоФормуле.Заголовок = "Фильтр по формуле";
	КонецЕсли;
	
	ЗаполнитьДеревоПоказателейНаСервере(Элементы.КомандаФильтрПоФормуле.Пометка);
	СвернутьРазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСравнитьС(Команда)
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПодразделениеСравнение", ПодразделениеСравнение);
	
	ОповещениеИзменения = Новый ОписаниеОповещения("ОповещениеИзмененияПодразделения", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.CRM_ВесаПоказателейПотенциала.Форма.ФормаВводаПодразделения", СтруктураПараметров, ЭтотОбъект, Новый УникальныйИдентификатор(), , , ОповещениеИзменения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	ФормулаВведенаКорректно = ПроверитьКорректностьФормулы();
	Если ФормулаВведенаКорректно Тогда
		Если РежимВыбора Тогда
			ЗакрыватьПриВыборе = Ложь;
			ОповеститьОВыборе(Формула);
		Иначе
			СохранитьФормулуПодразделения();
		КонецЕсли;
	КонецЕсли;
	СохранитьВесаПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Применить(Команда);
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Калькулятор

// Обработчик нажатия цифр
//
&НаКлиенте
Процедура КнопкаЦифраНажатие(Элемент)
	Если НЕ ВводЧисла Тогда
		ВводЧисла = Истина;
		ЕстьТочка = Ложь;
		Формула = Формула + " ";
	КонецЕсли;
	Формула = Формула + ЭтотОбъект.ТекущийЭлемент.Заголовок;
КонецПроцедуры

// Обработчик нажатия знаков
//
&НаКлиенте
Процедура КнопкаЗнакНажатие(Элемент)
	ВводЧисла = Ложь;
	ЕстьТочка = Ложь;
	Если (СтрДлина(Формула) > 0) И (Прав(Формула,1) = ",") Тогда
		Формула = Формула + "0";
	КонецЕсли;
	Формула = Формула + " " + ЭтотОбъект.ТекущийЭлемент.Заголовок;
КонецПроцедуры

// Обработчик нажатия точки
//
&НаКлиенте
Процедура КнопкаТочкаНажатие(Элемент)
	Если ЕстьТочка ИЛИ (НЕ ВводЧисла)Тогда
		Возврат;
	КонецЕсли;
	ЕстьТочка = Истина;
	Формула = Формула + ",";
КонецПроцедуры

// Обработчик кнопки Забой
//
&НаКлиенте
Процедура КнопкаЗабойНажатие(Элемент)
	Если ПустаяСтрока(Формула) Тогда
		Возврат;
	КонецЕсли;
	// Выясним, что мы вводили до этого.
	ОпределитьТекущийРежимВвода();
	Если ВводЧисла Тогда
		// Для числа удалим символ
		ЕстьТочка = НЕ Прав(Формула, 1) = ",";
		Формула = Сред(Формула, 1, СтрДлина(Формула) - 1);
		// Может, мы удалили уже всё число.
		Если Прав(Формула, 1) = " " Тогда
			Формула = Сред(Формула, 1, СтрДлина(Формула) - 1);
			ВводЧисла = Ложь;
			ЕстьТочка = Ложь;
		КонецЕсли;
		Возврат;
	ИначеЕсли Прав(Формула, 1) = "]" Тогда
		// Удаляем Показатель
		Счетчик = СтрДлина(Формула) - 1;
		КодПоказатель = "";
		Пока Сред(Формула, Счетчик, 1) <> "[" Цикл
			Счетчик = Счетчик - 1;
			КодПоказатель = КодПоказатель + Сред(Формула, Счетчик + 1, 1);
		КонецЦикла;
		// инвертируем КодПоказатель
		Длина = СтрДлина(КодПоказатель);
		ИмяПоказателя = "";
		Пока Длина > 0 Цикл			
			ИмяПоказателя = ИмяПоказателя + Сред(КодПоказатель, Длина, 1);
			Длина = Длина - 1;
		КонецЦикла;	
		
		// Удалим из списка задействованных показателей.
		
		Показатель = ИспользуемыеПоказатели.НайтиПоЗначению(ИмяПоказателя);
		Если НЕ Показатель = Неопределено Тогда
			ИспользуемыеПоказатели.Удалить(Показатель);
		КонецЕсли;
		
		// Очищаем Показатель (вместе с лидирующим пробелом).
		Формула = Сред(Формула, 1, Счетчик - 2);
		
		Возврат;
	ИначеЕсли Найти("+-*/", Прав(Формула, 1)) > 0 Тогда
		// Знак операции
		// Удалим вместе с пробелом
		Формула = Сред(Формула, 1, СтрДлина(Формула) - 2);
	ИначеЕсли Найти("(", Прав(Формула, 1)) > 0 Тогда
		// Скобка открывающая
		// Удалим вместе с пробелом
		Формула = Сред(Формула, 1, СтрДлина(Формула) - 2);
	ИначеЕсли Найти(")", Прав(Формула, 1)) > 0 Тогда
		// Скобка закрывающая
		// Удалим 
		Формула = Сред(Формула, 1, СтрДлина(Формула) - 1);
	КонецЕсли;
	ОпределитьТекущийРежимВвода();
КонецПроцедуры

// Обработчик кнопки стереть
//
&НаКлиенте
Процедура КнопкаСтеретьНажатие(Элемент)
	Формула = "";
	ВводЧисла = Ложь;
	ЕстьТочка = Ложь;
	ИспользуемыеПоказатели.Очистить();
КонецПроцедуры

// Обработчик кнопки скобка
//
&НаКлиенте
Процедура КнопкаОткрСкобкаНажатие(Элемент)
	ВводЧисла = Ложь;
	ЕстьТочка = Ложь;
	Если (СтрДлина(Формула) > 0) И (Прав(Формула,1) = ",") Тогда
		Формула = Формула + "0";
	КонецЕсли;
	Формула = Формула + " (";
КонецПроцедуры

// Обработчик кнопки скобка
//
&НаКлиенте
Процедура КнопкаЗакрСкобкаНажатие(Элемент)
	ВводЧисла = Ложь;
	ЕстьТочка = Ложь;
	Если (СтрДлина(Формула) > 0) И (Прав(Формула,1) = ",") Тогда
		Формула = Формула + "0";
	КонецЕсли;
	Формула = Формула + ")";
КонецПроцедуры

// Определяет режим ввода формулы (вводится ли число или что-то другое).
&НаКлиенте
Процедура ОпределитьТекущийРежимВвода()
	ВводЧисла = Ложь;
	ЕстьТочка = Ложь;
	Если ПустаяСтрока(Формула) Тогда
		Возврат;
	КонецЕсли;
	ПослСимвол = Прав(Формула, 1);
	// Число заканчивается на цифру или (что нежелательно) на разделитель.
	Если Найти("0123456789,", ПослСимвол) > 0 Тогда
		ВводЧисла = Истина;
		// Теперь узнаем, есть ли разделитель в числе.
		Счетчик = СтрДлина(Формула);
		Пока Сред(Формула, Счетчик, 1) <> " " Цикл
			Если Сред(Формула, Счетчик, 1) = "," Тогда
				ЕстьТочка = Истина;
				Возврат;
			КонецЕсли;
			Счетчик = Счетчик - 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Калькулятор
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ТаблицаПоказателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ТаблицаПоказатели.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВводЧисла = Ложь;
	ЕстьТочка = Ложь;
	Если (СтрДлина(Формула) > 0) И (Прав(Формула,1) = ",") Тогда
		Формула = Формула + "0";
	КонецЕсли;
	
	Формула = Формула + " [" + ТекДанные.ПоказательПредставление + "]";
	
	ИспользуемыеПоказатели.Добавить(ТекДанные.Показатель);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму настройки показателей. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Свойство("Подразделение") Тогда
		Подразделение = Параметры.Подразделение;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимВыбора") Тогда
		РежимВыбора = Параметры.РежимВыбора;
	КонецЕсли;
	
	Если Параметры.Свойство("Формула") Тогда
		Формула = Параметры.Формула;
	Иначе
		Формула = Подразделение.CRM_ФормулаРасчетаПотенциала;
	КонецЕсли;
	
	Если Параметры.Свойство("ПериодРасчета") Тогда
		ПериодРасчета = Параметры.ПериодРасчета;
	Иначе
		ПериодРасчета = Подразделение.CRM_ПериодРасчетаПотенциала;
	КонецЕсли;
	
	ФормулаНачальная = Формула;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		ВызватьИсключение НСтр("ru = 'Форма может быть открыта только для подразделения!'");
	КонецЕсли;
	
	ЗаполнитьТаблицуПоказателей();
	
	ЗаполнитьДеревоПоказателейНаСервере(Элементы.КомандаФильтрПоФормуле.Пометка);
	
	// Используемые показатели
	ЗаполнитьИспользуемыеПоказатели();
	
	// Клиенты
	ЗагрузитьНастройкиФормы();
	ЗаполнитьПотенциалыКлиентов();
	
	// Заголовок
	Если ПериодРасчета.Пустая() Тогда
		Элементы.ГруппаЛеваяЧасть.Заголовок = "Формула расчета потенциала";
	Иначе
		Элементы.ГруппаЛеваяЧасть.Заголовок = "Формула расчета потенциала (период расчета: " + НРег(ПериодРасчета) + ")";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	// Интерфейс
	ЭтотОбъект.Заголовок = "Мастер установки показателей для <" + СокрЛП(Подразделение) + ">";
	СвернутьРазвернутьДерево();
	
	// Формула
	ВводЧисла = Ложь;
	ЕстьТочка = Ложь;
	Если (СтрДлина(Формула) > 0) И (Лев(Формула,1) <> " ") Тогда
		Формула = " " + Формула;
	КонецЕсли;
	ОпределитьТекущийРежимВвода();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	СохранитьНастройкиФормы();
КонецПроцедуры

#КонецОбласти
