
// + Тищенко В.В.

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура СформироватьМакетСОтбором(Знач Ссылка,Результат,Знач Объект, ФормаОбъекта = Неопределено,Знач НазваниеТаблицы = "",Знач НаправлениеДеятельности,ПовторныйВызов = Ложь) Экспорт
	
	//УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Идентификатор 	= ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Объект);
		НастройкиМакета = Неопределено; ЗначениеОтбора = Неопределено;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	вогНастройкиОтображенияКлассификаторов.НастройкиМакета КАК ТекущийМакет
		                      |ИЗ
		                      |	РегистрСведений.вогНастройкиОтображенияКлассификаторов КАК вогНастройкиОтображенияКлассификаторов
		                      |ГДЕ
		                      |	вогНастройкиОтображенияКлассификаторов.Объект = &Объект
		                      |	И вогНастройкиОтображенияКлассификаторов.Включен
		                      |	И вогНастройкиОтображенияКлассификаторов.ИспользоватьОтбор
		                      |	И вогНастройкиОтображенияКлассификаторов.Вид = ЗНАЧЕНИЕ(Перечисление.вогВидНастройкиМакетаСправочника.Специальный)");
		Запрос.УстановитьПараметр("Объект",Идентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		 
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Настройки = Выборка.ТекущийМакет.Получить();
				ТекущиеНастройкиОтбора 	= Настройки.Получить("Отбор").Получить();
				СхемаКомпоновкиДанных 	= РегистрыСведений.вогНастройкиОтображенияКлассификаторов.ПолучитьМакет("ОтборПоОбъекту");
				
//START Кайдашов 26/08/19 581				
				// Проверка условия отбора
				Если Объект = Метаданные.Справочники.вогТорговыеТочки или Объект = Метаданные.Справочники.вогДизайныНоменклатуры
					или Объект = Метаданные.Справочники.вогНоменклатурныеПозиции или Объект = Метаданные.Справочники.Номенклатура Тогда
//END Кайдашов 26/08/19 581				
					Для каждого ЭлементОтбора Из ТекущиеНастройкиОтбора.Отбор.Элементы Цикл
						Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = ТипЗнч(НаправлениеДеятельности) Тогда
							ЗначениеОтбора = ЭлементОтбора.ПравоеЗначение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеОтбора <> Неопределено И ЗначениеОтбора <> НаправлениеДеятельности Тогда Продолжить; КонецЕсли;
				
				СхемаКомпоновкиДанных.Параметры.Ссылка.Значение = Ссылка;
				
				КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
//START Кайдашов 26/08/19 581				
				СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,"вогТорговыеТочки",Объект.Имя);
//END Кайдашов 26/08/19 581				
				МакетКомпоновки		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,ТекущиеНастройкиОтбора,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
				
				ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				ТЗ 					= ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
				
				Если ТЗ.Количество() <> 0 Тогда
					НастройкиМакета = Настройки;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НастройкиМакета <> Неопределено Тогда
			
			КоличествоКолонок 				= НастройкиМакета.Получить("КоличествоКолонок");
			ТабДок 							= Новый ТабличныйДокумент;
			ТаблицаРазделов					= НастройкиМакета.Получить("ТаблицаРазделов");
			ТаблицаЗапросы					= НастройкиМакета.Получить("СписокВнешниеДанные");
			СписокКлассификаторов			= НастройкиМакета.Получить("СписокДоступныхКлассификаторов");
			СписокЗаголовков				= НастройкиМакета.Получить("СписокОтображаниеЗаголовков");
			СписокЗаполЗнач					= НастройкиМакета.Получить("СписокВыводитьТолькоЗаполненныеЗначения");
			СписокРасшифровккиКлас			= НастройкиМакета.Получить("СписокРасшифровкиКлассификатора");
			СписокРасшифровкаДляОтчета		= НастройкиМакета.Получить("СписокИспользоватьРасшифровкуДляОтчета");
			ТаблицаОбработчиковГиперСсылка 	= НастройкиМакета.Получить("СписокГипперссылок");

			Если Метаданные.РегистрыСведений.вогНастройкиОтображенияКлассификаторов.Макеты.Найти("ПФ_MXL_ПечатьКлассификаторов")  =  Неопределено Тогда
				Текстообщения = НСтр("ru = 'Не найден макет ""%1"" '");
				Текстообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текстообщения,"ПФ_MXL_ПечатьКлассификаторов");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текстообщения);
				Возврат;
			КонецЕсли;
			
			// ++ VOG Солодов В.В. 07.11.2019 
			МакетОтображения 			= вогОбщегоНазначенияПовтИсп.ПолучитьМакетОтображенияКлассификаторов();
			// До изменения
			//МакетОтображения 			= РегистрыСведений.вогНастройкиОтображенияКлассификаторов.ПолучитьМакет("ПФ_MXL_ПечатьКлассификаторов");
			// -- VOG Солодов В.В. 07.11.2019
			ОбластьЗаголовок 			= МакетОтображения.ПолучитьОбласть("Шапка|Колонка");
			ОбластьСтрока				= МакетОтображения.ПолучитьОбласть("СтрокаКлассификатор");
			ОбластьСтрокаАналитика		= МакетОтображения.ПолучитьОбласть("СтрокаКлассификаторАналитика");
			ОбластьОтступ				= МакетОтображения.ПолучитьОбласть("СтрокаКлассификатор|Колонка");
			ОбластьСтрокаФлажокЛожь		= МакетОтображения.ПолучитьОбласть("СтрокаКлассификаторФлажокЛожь|Колонка");
			ОбластьСтрокаФлажокИстина	= МакетОтображения.ПолучитьОбласть("СтрокаКлассификаторФлажокИстина|Колонка");
			ОбластьРеквизит				= МакетОтображения.ПолучитьОбласть("РеквизитОбъекта|Колонка");
			ОбластьзаголовкТаблицы		= МакетОтображения.ПолучитьОбласть("ЗаголовокТаблица|Колонка");
			ОбластьСтрокаТаблицы		= МакетОтображения.ПолучитьОбласть("СтрокаТаблицы|Колонка");
			ОбластьСтрокаГиперссылка	= МакетОтображения.ПолучитьОбласть("СтрокаГиперссылка|Колонка");
			ОбластьСтрокаЗапрос			= МакетОтображения.ПолучитьОбласть("СтрокаВнешниеДанные|Колонка");
			ОбластьСтрокаТаблицыВыдед	= МакетОтображения.ПолучитьОбласть("СтрокаТаблицыТриПараметра|Колонка");
			ОбластьСтрокадваПараметра	= МакетОтображения.ПолучитьОбласть("СтрокаТаблицыДваПараметра|Колонка");
			ГоризонтальныйОтступ		= МакетОтображения.ПолучитьОбласть("ГоризонтальныйОтступ|Колонка");
			Изображение					= МакетОтображения.ПолучитьОбласть("Изображение|Колонка");

			МассивКолонок = Новый Массив; // VOG Солодов В.В. 08.11.2019 Task 821
			
			Для Сч = 1 По КоличествоКолонок Цикл
				НайденныеСтроки = ТаблицаРазделов.НайтиСтроки(Новый Структура("ИмяРаздела","Раздел_"+Сч));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				Иначе
					ТекущиеДерево = ЗначениеИзСтрокиВнутр(НайденныеСтроки[0].ЗначениеРаздела);
				КонецЕсли;
				Корень 			= ТекущиеДерево.Строки;
				Колонка			= Неопределено;
				Для каждого ЭлементыКорень Из Корень Цикл
					Если ЭлементыКорень.Пометка Тогда
						Если Колонка 	= Неопределено Тогда
							Колонка 	= Новый ТабличныйДокумент;
						КонецЕсли;
						Если ЭлементыКорень.ЭтоКлассификатор  И НЕ ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор Тогда
							ОбластьЗаголовок.Параметры.ТекстЗаголовка = ЭлементыКорень.Имя;
							Колонка.Вывести(ОбластьЗаголовок);
							ДочерниеСтроки = ЭлементыКорень.Строки;
							Для каждого ЭлементДерева Из ДочерниеСтроки Цикл
								Если ЭлементДерева.Пометка Тогда
									Если ТипЗнч(ЭлементДерева.Имя) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
										ЗначениеКлассификатора = ПолучитьЗначениеКлассификатора(Ссылка,ЭлементДерева.Имя,ЭлементДерева.Имя.ВидОтображения,СписокКлассификаторов,НаправлениеДеятельности);
										Если ЗначениеКлассификатора <> Неопределено И ЭлементДерева.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
											Если ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Флажок Тогда
												ТекущиеЗначение = ЗначениеКлассификатора;
												Если ТипЗнч(ТекущиеЗначение) = Тип("Булево") Тогда
													Если ТекущиеЗначение Тогда
														ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
														Колонка.Вывести(ОбластьСтрокаФлажокИстина);
													Иначе	
														ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
														Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
													КонецЕсли;
													
												Иначе
													ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
													Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
												КонецЕсли;
											Иначе
												ОбластьСтрока.Параметры.КлассификаторЗаголовок 				= ЭлементДерева.Имя;
												ОбластьСтрока.Параметры.КлассификаторЗначение 				= ЗначениеКлассификатора;
												ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка 	= ЗначениеКлассификатора;
												Колонка.Вывести(ОбластьСтрока);
											КонецЕсли;
										ИначеЕсли ЗначениеКлассификатора <> Неопределено И (ЭлементДерева.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком 
											ИЛИ ЭлементДерева.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком
											ИЛИ ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение) Тогда
											ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы 	= ЭлементДерева.Имя;
											Колонка.Вывести(ОбластьзаголовкТаблицы);
											Для каждого Стр Из ЗначениеКлассификатора Цикл
												Если Стр.Использование Тогда
													ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = Стр.Имя;
													Колонка.Вывести(ОбластьСтрокаФлажокИстина);
												Иначе	
													ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = Стр.Имя;
													Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
												КонецЕсли;
											КонецЦикла;
										ИначеЕсли ЗначениеКлассификатора <> Неопределено И ЭлементДерева.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
											Для каждого Стр Из ЗначениеКлассификатора Цикл
												ОбластьСтрока.Параметры.КлассификаторЗаголовок 				= Стр.ИмяКлассификатора;
												ОбластьСтрока.Параметры.КлассификаторЗначение 				= Стр.Результат;
												ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка 	= Стр.Результат;
												Колонка.Вывести(ОбластьСтрока);
											КонецЦикла;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Колонка.Вывести(ГоризонтальныйОтступ);
						ИначеЕсли ЭлементыКорень.ЭтоКлассификатор И ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор Тогда
							Если ТипЗнч(ЭлементыКорень.Имя) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
								ТолкоЗаполненныеЗначения = Ложь;
								Если СписокЗаполЗнач.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя)).Количество() <> 0 Тогда
									ТолкоЗаполненныеЗначения = СписокЗаполЗнач.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя))[0].Значение;
								КонецЕсли;
								ЗначениеКлассификатора = ПолучитьЗначениеКлассификатора(Ссылка,ЭлементыКорень.Имя,ЭлементыКорень.Имя.ВидОтображения,СписокКлассификаторов,ТолкоЗаполненныеЗначения,НаправлениеДеятельности);
								Если ЗначениеКлассификатора <> Неопределено И ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
									Если ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Флажок Тогда
										ТекущиеЗначение = ЗначениеКлассификатора;
										Если ТипЗнч(ТекущиеЗначение) = Тип("Булево") Тогда
											Если ТекущиеЗначение Тогда
												ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
												Колонка.Вывести(ОбластьСтрокаФлажокИстина);
											Иначе	
												ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
												Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
											КонецЕсли;
										Иначе
											ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
											Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
										КонецЕсли;
									Иначе
										ОбластьСтрока.Параметры.КлассификаторЗаголовок 				= ЭлементыКорень.Имя;
										// ++ VOG Солодов В.В. 08.11.2019 task 821
										ОбластьСтрока.Параметры.КлассификаторЗначение 
											= ОтформатироватьЗначениеРеквизита(ЗначениеКлассификатора, ТекущиеДерево, ЭлементыКорень);
										// До изменения
										//ОбластьСтрока.Параметры.КлассификаторЗначение 				= ЗначениеКлассификатора;
										// -- VOG Солодов В.В. 08.11.2019
										ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка 	= ЗначениеКлассификатора;
										Колонка.Вывести(ОбластьСтрока);
									КонецЕсли;
								ИначеЕсли ЗначениеКлассификатора <> Неопределено И (ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком 
									ИЛИ ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком
									ИЛИ ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение) Тогда
									НайденныеСтрокиЗаголовок = СписокЗаголовков.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя));
									Если НайденныеСтрокиЗаголовок.Количество() <> 0 Тогда
										ЭлементЗаголовка = НайденныеСтрокиЗаголовок[0];
										Если ЭлементЗаголовка.Значение Тогда
											ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы = ЭлементыКорень.Имя;
											Колонка.Вывести(ОбластьзаголовкТаблицы);
										КонецЕсли;
									КонецЕсли;
									Для каждого Стр Из ЗначениеКлассификатора Цикл
										Если Стр.Использование Тогда
											ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = Стр.Имя;
											// --> VOG Солодов
											Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
												Если РасКлас.Имя.Наименование = Стр.Имя Тогда
													ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = РасКлас.Имя;
													Прервать;
												КонецЕсли;
											КонецЦикла;
											// <-- VOG Солодов
											Колонка.Вывести(ОбластьСтрокаФлажокИстина);
										Иначе	
											ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = Стр.Имя;
											// --> VOG Солодов
											Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
												Если РасКлас.Имя.Наименование = Стр.Имя Тогда
													ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = РасКлас.Имя;
													Прервать;
												КонецЕсли;
											КонецЦикла;
											// <-- VOG Солодов
											Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
										КонецЕсли;
									КонецЦикла;
								ИначеЕсли ЗначениеКлассификатора <> Неопределено И ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
									НайденныеСтрокиЗаголовок = СписокЗаголовков.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя));
									Если НайденныеСтрокиЗаголовок.Количество() <> 0 Тогда
										ЭлементЗаголовка = НайденныеСтрокиЗаголовок[0];
										Если ЭлементЗаголовка.Значение Тогда
											ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы = ЭлементыКорень.Имя;
											Колонка.Вывести(ОбластьзаголовкТаблицы);
										КонецЕсли;
									КонецЕсли;
									// --> VOG Солодов
									Если СписокРасшифровкаДляОтчета <> Неопределено Тогда
										СтруктураПоиска = Новый Структура("Имя", ЭлементыКорень.Имя);
										НайденныеСтрокиИспользоватьРасшифровкуДляОтчета = СписокРасшифровкаДляОтчета.НайтиСтроки(СтруктураПоиска);
										// ++ Тищенко В.В. 14.01.2019
										// Для отработки простой расшифровки
										Если НайденныеСтрокиИспользоватьРасшифровкуДляОтчета.Количество() <> 0 Тогда
											ИспользоватьРасшифровкуДляОтчета = НайденныеСтрокиИспользоватьРасшифровкуДляОтчета[0].Значение;	
										Иначе
											ИспользоватьРасшифровкуДляОтчета 	= Ложь;
										КонецЕсли;
									Иначе
										ИспользоватьРасшифровкуДляОтчета 		= Ложь;
									КонецЕсли;
									// <-- VOG Солодов
									Для каждого Стр Из ЗначениеКлассификатора Цикл	
										ИспользоватьАналитикиу = Ложь;
										Если ЗначениеКлассификатора.Колонки.Найти("Аналитика") <> Неопределено Тогда
											ИспользоватьАналитикиу = Истина;
											ОбластьСтрокаАналитика.Параметры.КлассификаторЗаголовок 				= Стр.ИмяКлассификатора;
											ОбластьСтрокаАналитика.Параметры.КлассификаторЗначение 					= Стр.результат;
											ОбластьСтрокаАналитика.Параметры.КлассификаторАналитика					= Стр.Аналитика;
											Если ИспользоватьРасшифровкуДляОтчета Тогда
												ОбластьСтрокаАналитика.Параметры.КлассификаторЗначениеРасшифровка	= ЭлементыКорень.Имя;	
											Иначе
												ОбластьСтрокаАналитика.Параметры.КлассификаторЗначениеРасшифровка	= Стр.результат;
												Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
													Если РасКлас.Имя.Наименование = Стр.ИмяКлассификатора Тогда
														ОбластьСтрокаАналитика.Параметры.КлассификаторЗначениеРасшифровка = РасКлас.Имя;
														Прервать;
													КонецЕсли;
												КонецЦикла;
											КонецЕсли;
										Иначе	
											ОбластьСтрока.Параметры.КлассификаторЗаголовок 					= Стр.ИмяКлассификатора;
											ОбластьСтрока.Параметры.КлассификаторЗначение 					= Стр.результат;
											Если ИспользоватьРасшифровкуДляОтчета Тогда
												ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка	= ЭлементыКорень.Имя;	
											Иначе
												ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка	= Стр.результат;
												Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
													Если РасКлас.Имя.Наименование = Стр.ИмяКлассификатора Тогда
														ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка = РасКлас.Имя;
														Прервать;
													КонецЕсли;
												КонецЦикла;
											КонецЕсли;
										КонецЕсли;
										Колонка.Вывести(?(ИспользоватьАналитикиу,ОбластьСтрокаАналитика,ОбластьСтрока));
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЭлементыКорень.ЭтоРеквизит Тогда
							
							// VOG Солодов В.В. 05.11.2019 task 821 Рефакторинг
							ВывестиРеквизит(
								Изображение,
								Колонка,
								ОбластьРеквизит,
								ОбластьСтрокаФлажокИстина,
								ОбластьСтрокаФлажокЛожь, Ссылка,
								ТекущиеДерево,
								ЭлементыКорень);
								
						ИначеЕсли ЭлементыКорень.ЭтоТаблица Тогда
							НайденныеСтрокиЗаголовок = СписокЗаголовков.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя));
							Если НайденныеСтрокиЗаголовок.Количество() <> 0 Тогда
								ЭлементЗаголовка = НайденныеСтрокиЗаголовок[0];
								Если ЭлементЗаголовка.Значение Тогда
									ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы = ЭлементыКорень.Синоним;
									Колонка.Вывести(ОбластьзаголовкТаблицы);
								КонецЕсли;
							КонецЕсли;
							ДочерниеСтроки = ЭлементыКорень.Строки;
							КолонкиТаблицы = Новый Массив;
							Для каждого ЭлементДерева Из ДочерниеСтроки Цикл
								Если ЭлементДерева.Пометка И ЭлементДерева.ЭтоРеквизитТаблицы Тогда
									КолонкиТаблицы.Добавить(ЭлементДерева.Имя);
								КонецЕсли;
							КонецЦикла;
							ИмяТаблицы = СтрЗаменить(ЭлементыКорень.Имя,"Объект.","");
							Если КолонкиТаблицы.Количество() <= 2 Тогда
								 ОбластьСтрокадваПараметра.Параметры.Параметр_1 = "";
								 ОбластьСтрокадваПараметра.Параметры.Параметр_2 = "";
								Для каждого Стр Из Ссылка[ИмяТаблицы] Цикл
									СчКолонок = 0;
									Для каждого РекТЧ Из КолонкиТаблицы Цикл
										СчКолонок = СчКолонок + 1;
										ПараметрСтроки= "Параметр_" + (СчКолонок);
										ОбластьСтрокадваПараметра.Параметры[ПараметрСтроки] = Стр[РекТЧ];
										Если ИмяТаблицы = "КонтактнаяИнформация" Тогда
											ОбластьСтрокадваПараметра.Параметры.ИмяРасшифровка = "КИ_" + Стр[РекТЧ];
										Иначе
											ОбластьСтрокадваПараметра.Параметры.ИмяРасшифровка = "Расшифровка_"+ИмяТаблицы;
										КонецЕсли;
									КонецЦикла;
									Колонка.Вывести(ОбластьСтрокадваПараметра);
								КонецЦикла;
							ИначеЕсли КолонкиТаблицы.Количество() <= 3 Тогда
								ОбластьСтрокаТаблицыВыдед.Параметры_1 = "";
								ОбластьСтрокаТаблицыВыдед.Параметры_2 = "";
								ОбластьСтрокаТаблицыВыдед.Параметры_3 = "";
								Для каждого Стр Из Ссылка[ИмяТаблицы] Цикл
									СчКолонок = 0;
									Для каждого РекТЧ Из КолонкиТаблицы Цикл
										СчКолонок = СчКолонок + 1;
										ПараметрСтроки= "Параметр_" + (СчКолонок);
										ОбластьСтрокаТаблицыВыдед.Параметры[ПараметрСтроки] = Стр[РекТЧ];
										ОбластьСтрокаТаблицыВыдед.Параметры.ИмяРасшифровка = "Расшифровка_"+ИмяТаблицы;
									КонецЦикла;
									Колонка.Вывести(ОбластьСтрокаТаблицыВыдед);
								КонецЦикла;
							Иначе
								Для каждого Стр Из Ссылка[ИмяТаблицы] Цикл
									СтрокаОтображения = "";
									Для каждого РекТЧ Из КолонкиТаблицы Цикл
										СтрокаОтображения = СтрокаОтображения + Стр[РекТЧ]+" ";
									КонецЦикла;
									ОбластьСтрокаТаблицы.Параметры.ЗначениеСтрокиТаблицы = СтрокаОтображения;
									ОбластьСтрокаТаблицы.Параметры.ИмяРасшифровка = "Расшифровка_"+ИмяТаблицы;
									Колонка.Вывести(ОбластьСтрокаТаблицы);
								КонецЦикла;
							КонецЕсли;
						ИначеЕсли ЭлементыКорень.ЭтоЗаголовок Тогда
							ОбластьЗаголовок.Параметры.ТекстЗаголовка = ЭлементыКорень.Имя;
							Колонка.Вывести(ОбластьЗаголовок);
						ИначеЕсли ЭлементыКорень.ЭтоРаздилитель Тогда
							Колонка.Вывести(ГоризонтальныйОтступ);
						ИначеЕсли ЭлементыКорень.ЭтоГиперссылка Тогда
							ОбластьСтрокаГиперссылка.Параметры.ИмяГиперссылки 		= ЭлементыКорень.Имя;
							ОбластьСтрокаГиперссылка.Параметры.ПараметрыГиперссылки = "Гиперссылка_" + ЭлементыКорень.Имя;
							// Сформировать количество гипперссылок
							МассивНайденныхСтрокГиперссылок = ТаблицаОбработчиковГиперСсылка.НайтиСтроки(Новый Структура("имя",ЭлементыКорень.Имя));
							Если МассивНайденныхСтрокГиперссылок.Количество() <> 0 Тогда
								НастройкиГиперссылки = МассивНайденныхСтрокГиперссылок[0];
								Если НастройкиГиперссылки.ОтображатьКоличество Тогда
									Запрос 				= Новый Запрос(НастройкиГиперссылки.ТекстОбработчикаКоличество);
									Запрос.УстановитьПараметр("Ссылка",Ссылка);
									КоличествоОбъектов 	= Запрос.Выполнить().Выбрать().Количество();
									ОбластьСтрокаГиперссылка.Параметры.ИмяГиперссылки = ОбластьСтрокаГиперссылка.Параметры.ИмяГиперссылки +" "+ "("+КоличествоОбъектов+")";
								КонецЕсли;
							КонецЕсли;
							Колонка.Вывести(ОбластьСтрокаГиперссылка);
						ИначеЕсли ЭлементыКорень.ЭтоЗапрос Тогда
							ВывестиРезультатЗапроса(Колонка, МакетОтображения, Ссылка, ТаблицаЗапросы, ЭлементыКорень); // VOG Солодов В.В. 07.11.2019 task 821 Рефакторинг
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если Колонка <> Неопределено Тогда
					// ++ VOG Солодов В.В. 08.11.2019 Task 821
					МассивКолонок.Добавить(Колонка);
					// До изменения
					//ТабДок.Присоединить(Колонка);
					// -- VOG Солодов В.В. 08.11.2019
				КонецЕсли;
			КонецЦикла;
			
			ВывестиКолонки(МассивКолонок, ТабДок); // VOG Солодов В.В. 08.11.2019 Task 821
			
			// Повторный вызов не создаем реквизиты
			Если НЕ ПовторныйВызов ТОгда
				// Таблица команд Гиперссылки
				//ТаблицаОбработчиковГиперСсылка = НастройкиМакета.Получить("СписокГипперссылок");
				
				Если ЗначениеЗаполнено(НазваниеТаблицы)Тогда
					
					ИмяТаблицы = НазваниеТаблицы+"_Обработчики";
					
					ДобавляемыеРеквизиты 		= Новый Массив;
					
					ТаблицаОбработчиков 		= Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"), , ИмяТаблицы, Ложь);
					ДобавляемыеРеквизиты.Добавить(ТаблицаОбработчиков);
					
					Имя = Новый РеквизитФормы("Имя", Новый ОписаниеТипов("Строка"),ИмяТаблицы, "Имя", Ложь);
					ДобавляемыеРеквизиты.Добавить(Имя);
					
					ПроизвольныйКод = Новый РеквизитФормы("ПроизвольныйКод", Новый ОписаниеТипов("Строка"),ИмяТаблицы, "ПроизвольныйКод", Ложь);
					ДобавляемыеРеквизиты.Добавить(ПроизвольныйКод);
					
					ФормаОбъекта.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
					ФормаОбъекта[ИмяТаблицы].Загрузить(ТаблицаОбработчиковГиперСсылка);
					
				КонецЕсли;
				
				// Таблица команд Расшифровка
				ТаблицаРасшифровка	= НастройкиМакета.Получить("СписокРасшифровка");
				
				Если ЗначениеЗаполнено(НазваниеТаблицы) Тогда
					
					ИмяТаблицы = НазваниеТаблицы+"_Расшифровка";
					
					ДобавляемыеРеквизиты 		= Новый Массив;
					
					ТаблицаРасшифровкаФормы 	= Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"), , ИмяТаблицы, Ложь);
					ДобавляемыеРеквизиты.Добавить(ТаблицаРасшифровкаФормы);
					
					Имя = Новый РеквизитФормы("Имя", Новый ОписаниеТипов("Строка"),ИмяТаблицы, "Имя", Ложь);
					ДобавляемыеРеквизиты.Добавить(Имя);
					
					ПроизвольныйКод = Новый РеквизитФормы("Текстобработчика", Новый ОписаниеТипов("Строка"),ИмяТаблицы, "Текстобработчика", Ложь);
					ДобавляемыеРеквизиты.Добавить(ПроизвольныйКод);
					
					ФормаОбъекта.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
					ФормаОбъекта[ИмяТаблицы].Загрузить(ТаблицаРасшифровка);
					
				КонецЕсли;
				
				// Таблица команд Расшифровка классификатора
				ТаблицаРасшифровкаКлассификатора	= НастройкиМакета.Получить("СписокРасшифровкиКлассификатора");
				
				Если ЗначениеЗаполнено(НазваниеТаблицы) Тогда
					
					ИмяТаблицы = НазваниеТаблицы+"_РасшифровкаКлассификатора";
					
					ДобавляемыеРеквизиты 		= Новый Массив;
					
					ТаблицаРасшифровкаКлассификатораФормы 	= Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"), , ИмяТаблицы, Ложь);
					ДобавляемыеРеквизиты.Добавить(ТаблицаРасшифровкаКлассификатораФормы);
					
					Имя = Новый РеквизитФормы("Имя",Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"),ИмяТаблицы, "Имя", Ложь);
					ДобавляемыеРеквизиты.Добавить(Имя);
		
					ПроизвольныйКод = Новый РеквизитФормы("Расшифровка", Новый ОписаниеТипов("СправочникСсылка.вогWebServices"),ИмяТаблицы, "Текстобработчика", Ложь);
					ДобавляемыеРеквизиты.Добавить(ПроизвольныйКод);
					
					ФормаОбъекта.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
					ФормаОбъекта[ИмяТаблицы].Загрузить(ТаблицаРасшифровкаКлассификатора);
					
				КонецЕсли;
			КонецЕсли;
			
			Результат.Очистить();
			Результат = ТабДок;
			
		КонецЕсли;
		
	Исключение
		
		ТекстОписаниеОшибки = "" + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование макета '"), УровеньЖурналаРегистрации.Ошибка,,,
		ТекстОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОписаниеОшибки);
		
	КонецПопытки;

КонецПроцедуры

Процедура СформироватьМакет(Знач Ссылка,Результат,Знач Объект, ФормаОбъекта = Неопределено,НазваниеТаблицы = "",ПовторныйВызов = Ложь) Экспорт
	
	//УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Идентификатор 	= ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Объект);
		НастройкиМакета = Неопределено;
		//START Кайдашов 10/07/19 451		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	вогНастройкиОтображенияКлассификаторов.НастройкиМакета КАК ТекущийМакет,
		                      |	ВЫБОР
		                      |		КОГДА вогНастройкиОтображенияКлассификаторов.ИспользоватьОтбор
		                      |			ТОГДА 0
		                      |		ИНАЧЕ 1
		                      |	КОНЕЦ КАК Приоритет,
		                      |	вогНастройкиОтображенияКлассификаторов.ИспользоватьОтбор КАК ИспользоватьОтбор,
		                      |	вогНастройкиОтображенияКлассификаторов.Объект КАК Объект
		                      |ИЗ
		                      |	РегистрСведений.вогНастройкиОтображенияКлассификаторов КАК вогНастройкиОтображенияКлассификаторов
		                      |ГДЕ
		                      |	вогНастройкиОтображенияКлассификаторов.Объект = &Объект
		                      |	И вогНастройкиОтображенияКлассификаторов.Включен
		                      |	И вогНастройкиОтображенияКлассификаторов.Вид = ЗНАЧЕНИЕ(Перечисление.вогВидНастройкиМакетаСправочника.Общий)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Приоритет");
		Запрос.УстановитьПараметр("Объект",Идентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Настройки = Выборка.ТекущийМакет.Получить();
				Если Выборка.ИспользоватьОтбор тогда
					ТекущиеНастройкиОтбора 	= Настройки.Получить("Отбор").Получить();
					СхемаКомпоновкиДанных 	= РегистрыСведений.вогНастройкиОтображенияКлассификаторов.ПолучитьМакет("ОтборПоОбъекту");
					//START Кайдашов 16/07/19
					СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = стрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,"вогТорговыеТочки",Выборка.Объект.Имя);
					//END Кайдашов
					СхемаКомпоновкиДанных.Параметры.Ссылка.Значение = Ссылка;
					
					КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
					
					МакетКомпоновки		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,ТекущиеНастройкиОтбора,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
					
					ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
					ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
					
					ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
					ТЗ 					= ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
					
					Если ТЗ.Количество() <> 0 Тогда
						НастройкиМакета = Настройки;
						Прервать;
					КонецЕсли;
				Иначе	
					НастройкиМакета = Настройки;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		//Если НЕ РезультатЗапроса.Пустой() Тогда
		//	Выборка = РезультатЗапроса.Выбрать();
		//	Пока Выборка.Следующий() Цикл
		//		НастройкиМакета = Выборка.ТекущийМакет.Получить();
		//	КонецЦикла;
		//	
		//КонецЕсли;
//END Кайдашов 451	
УстановитьПривилегированныйРежим(Истина);
		Если НастройкиМакета <> Неопределено Тогда
			
			МассивКолонок = Новый Массив; // VOG Солодов В.В. 08.11.2019 Task 821
			
			КоличествоКолонок 				= НастройкиМакета.Получить("КоличествоКолонок");
			ТабДок 							= Новый ТабличныйДокумент;
			ТаблицаРазделов					= НастройкиМакета.Получить("ТаблицаРазделов");
			ТаблицаЗапросы					= НастройкиМакета.Получить("СписокВнешниеДанные");
			СписокКлассификаторов			= НастройкиМакета.Получить("СписокДоступныхКлассификаторов");
			СписокЗаголовков				= НастройкиМакета.Получить("СписокОтображаниеЗаголовков");
			СписокЗаполЗнач					= НастройкиМакета.Получить("СписокВыводитьТолькоЗаполненныеЗначения");
			СписокРасшифровккиКлас			= НастройкиМакета.Получить("СписокРасшифровкиКлассификатора");
//START Кайдашов 09/08/19	500		
			СписокРасшифровккиКлас.Колонки.Добавить("Наименование");
			Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
				РасКлас.Наименование = Строка(РасКлас.Имя);
			КонецЦикла;
			СписокРасшифровккиКлас.Индексы.Добавить("Наименование");
//END Кайдашов			
			СписокРасшифровкаДляОтчета		= НастройкиМакета.Получить("СписокИспользоватьРасшифровкуДляОтчета");
			ТаблицаОбработчиковГиперСсылка 	= НастройкиМакета.Получить("СписокГипперссылок");
			
			Если Метаданные.РегистрыСведений.вогНастройкиОтображенияКлассификаторов.Макеты.Найти("ПФ_MXL_ПечатьКлассификаторов")  =  Неопределено Тогда
				Текстообщения = НСтр("ru = 'Не найден макет ""%1"" '");
				Текстообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текстообщения,"ПФ_MXL_ПечатьКлассификаторов");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текстообщения);
				Возврат;
			КонецЕсли;
			
//START Кайдашов 09/08/19 500			
			МакетОтображения 			= вогОбщегоНазначенияПовтИсп.ПолучитьМакетОтображенияКлассификаторов();
//END Кайдашов			
			ОбластьЗаголовок 			= МакетОтображения.ПолучитьОбласть("Шапка|Колонка");
			ОбластьСтрока				= МакетОтображения.ПолучитьОбласть("СтрокаКлассификатор");
			ОбластьСтрокаАналитика		= МакетОтображения.ПолучитьОбласть("СтрокаКлассификаторАналитика");
			ОбластьОтступ				= МакетОтображения.ПолучитьОбласть("СтрокаКлассификатор|Колонка");
			ОбластьСтрокаФлажокЛожь		= МакетОтображения.ПолучитьОбласть("СтрокаКлассификаторФлажокЛожь|Колонка");
			ОбластьСтрокаФлажокИстина	= МакетОтображения.ПолучитьОбласть("СтрокаКлассификаторФлажокИстина|Колонка");
			ОбластьРеквизит				= МакетОтображения.ПолучитьОбласть("РеквизитОбъекта|Колонка");
			ОбластьзаголовкТаблицы		= МакетОтображения.ПолучитьОбласть("ЗаголовокТаблица|Колонка");
			ОбластьСтрокаТаблицы		= МакетОтображения.ПолучитьОбласть("СтрокаТаблицы|Колонка");
			ОбластьСтрокаГиперссылка	= МакетОтображения.ПолучитьОбласть("СтрокаГиперссылка|Колонка");
			ОбластьСтрокаЗапрос			= МакетОтображения.ПолучитьОбласть("СтрокаВнешниеДанные|Колонка");
			ОбластьСтрокаТаблицыВыдед	= МакетОтображения.ПолучитьОбласть("СтрокаТаблицыТриПараметра|Колонка");
			ОбластьСтрокадваПараметра	= МакетОтображения.ПолучитьОбласть("СтрокаТаблицыДваПараметра|Колонка");
			ГоризонтальныйОтступ		= МакетОтображения.ПолучитьОбласть("ГоризонтальныйОтступ|Колонка");
			Изображение					= МакетОтображения.ПолучитьОбласть("Изображение|Колонка");
			
			Для Сч = 1 По КоличествоКолонок Цикл
				НайденныеСтроки = ТаблицаРазделов.НайтиСтроки(Новый Структура("ИмяРаздела","Раздел_"+Сч));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				Иначе
					ТекущиеДерево = ЗначениеИзСтрокиВнутр(НайденныеСтроки[0].ЗначениеРаздела);
				КонецЕсли;
				Корень 			= ТекущиеДерево.Строки;
				Колонка			= Неопределено;
				Для каждого ЭлементыКорень Из Корень Цикл
					Если ЭлементыКорень.Пометка Тогда
						Если Колонка 	= Неопределено Тогда
							Колонка 	= Новый ТабличныйДокумент;
						КонецЕсли;
						Если ЭлементыКорень.ЭтоКлассификатор  И НЕ ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор Тогда
							ОбластьЗаголовок.Параметры.ТекстЗаголовка = ЭлементыКорень.Имя;
							Колонка.Вывести(ОбластьЗаголовок);
							ДочерниеСтроки = ЭлементыКорень.Строки;
							Для каждого ЭлементДерева Из ДочерниеСтроки Цикл
								Если ЭлементДерева.Пометка Тогда
									Если ТипЗнч(ЭлементДерева.Имя) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
										ЗначениеКлассификатора = ПолучитьЗначениеКлассификатора(Ссылка,ЭлементДерева.Имя,ЭлементДерева.Имя.ВидОтображения,СписокКлассификаторов);
										Если ЗначениеКлассификатора <> Неопределено И ЭлементДерева.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
											Если ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Флажок Тогда
												ТекущиеЗначение = ЗначениеКлассификатора;
												Если ТипЗнч(ТекущиеЗначение) = Тип("Булево") Тогда
													Если ТекущиеЗначение Тогда
														ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
														Колонка.Вывести(ОбластьСтрокаФлажокИстина);
													Иначе	
														ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
														Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
													КонецЕсли;
												Иначе
													ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
													Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
												КонецЕсли;
											Иначе
												ОбластьСтрока.Параметры.КлассификаторЗаголовок 				= ЭлементДерева.Имя;
												ОбластьСтрока.Параметры.КлассификаторЗначение 				= ЗначениеКлассификатора;
												ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка 	= ЗначениеКлассификатора;
												Колонка.Вывести(ОбластьСтрока);
											КонецЕсли;
											
										ИначеЕсли ЗначениеКлассификатора <> Неопределено И (ЭлементДерева.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком 
											ИЛИ ЭлементДерева.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком) Тогда
											ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы 	= ЭлементДерева.Имя;
											Колонка.Вывести(ОбластьзаголовкТаблицы);
											Для каждого Стр Из ЗначениеКлассификатора Цикл
												Если Стр.Использование Тогда
													ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = Стр.Имя;
													Колонка.Вывести(ОбластьСтрокаФлажокИстина);
												Иначе	
													ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = Стр.Имя;
													Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
												КонецЕсли;
											КонецЦикла;
										ИначеЕсли ЗначениеКлассификатора <> Неопределено И ЭлементДерева.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
											Для каждого Стр Из ЗначениеКлассификатора Цикл
												ОбластьСтрока.Параметры.КлассификаторЗаголовок 	= Стр.ИмяКлассификатора;
												ОбластьСтрока.Параметры.КлассификаторЗначение 	= Стр.результат;
												Колонка.Вывести(ОбластьСтрока);
											КонецЦикла;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Колонка.Вывести(ГоризонтальныйОтступ);
						ИначеЕсли ЭлементыКорень.ЭтоКлассификатор И ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор Тогда
							Если ТипЗнч(ЭлементыКорень.Имя) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
								ТолкоЗаполненныеЗначения = Ложь;
								Если СписокЗаполЗнач.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя)).Количество() <> 0 Тогда
									ТолкоЗаполненныеЗначения = СписокЗаполЗнач.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя))[0].Значение;
								КонецЕсли;
								ЗначениеКлассификатора = ПолучитьЗначениеКлассификатора(Ссылка,ЭлементыКорень.Имя,ЭлементыКорень.Имя.ВидОтображения,СписокКлассификаторов,ТолкоЗаполненныеЗначения);
								Если ЗначениеКлассификатора <> Неопределено И ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
									Если ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Флажок Тогда
										ТекущиеЗначение = ЗначениеКлассификатора;
										Если ТипЗнч(ТекущиеЗначение) = Тип("Булево") Тогда
											Если ТекущиеЗначение Тогда
												ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
												Колонка.Вывести(ОбластьСтрокаФлажокИстина);
											Иначе	
												ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
												Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
											КонецЕсли;
										Иначе
											ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
											Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
										КонецЕсли;
									Иначе
										ОбластьСтрока.Параметры.КлассификаторЗаголовок 			 = ЭлементыКорень.Имя;
										// ++ VOG Солодов В.В. 08.11.2019 task 821
										ОбластьСтрока.Параметры.КлассификаторЗначение 
											= ОтформатироватьЗначениеРеквизита(ЗначениеКлассификатора, ТекущиеДерево, ЭлементыКорень);
										// До изменения
										//ОбластьСтрока.Параметры.КлассификаторЗначение 				= ЗначениеКлассификатора;
										// -- VOG Солодов В.В. 08.11.2019
										ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка = ЗначениеКлассификатора;
										Колонка.Вывести(ОбластьСтрока);
									КонецЕсли;
								ИначеЕсли ЗначениеКлассификатора <> Неопределено И (ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком 
									ИЛИ ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком
									ИЛИ ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение) Тогда
									НайденныеСтрокиЗаголовок = СписокЗаголовков.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя));
									Если НайденныеСтрокиЗаголовок.Количество() <> 0 Тогда
										ЭлементЗаголовка = НайденныеСтрокиЗаголовок[0];
										Если ЭлементЗаголовка.Значение Тогда
											ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы = ЭлементыКорень.Имя;
											Колонка.Вывести(ОбластьзаголовкТаблицы);
										КонецЕсли;
									КонецЕсли;
									Для каждого Стр Из ЗначениеКлассификатора Цикл
										Если Стр.Использование Тогда
											ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = Стр.Имя;
											
//START Кайдашов 09/08/19											
											СтрокаРасшифровкиКлассификаторов = СписокРасшифровккиКлас.Найти(Стр.Имя,"Наименование");
											Если СтрокаРасшифровкиКлассификаторов<>Неопределено тогда
												ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = СтрокаРасшифровкиКлассификаторов.Имя;
											КонецЕсли;
											// --> VOG Солодов
											//Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
											//	Если РасКлас.Имя.Наименование = Стр.Имя Тогда
											//		ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = РасКлас.Имя;
											//		Прервать;
											//	КонецЕсли;
											//КонецЦикла;
//END Кайдашов											
											// <-- VOG Солодов
											Колонка.Вывести(ОбластьСтрокаФлажокИстина);
										Иначе	
											ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = Стр.Имя;
//START Кайдашов 09/08/19	500										
											СтрокаРасшифровкиКлассификаторов = СписокРасшифровккиКлас.Найти(Стр.Имя,"Наименование");
											Если СтрокаРасшифровкиКлассификаторов<>Неопределено тогда
												ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = СтрокаРасшифровкиКлассификаторов.Имя;
											КонецЕсли;
											//Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
											//	Если РасКлас.Имя.Наименование = Стр.Имя Тогда
											//		ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = РасКлас.Имя;
											//		Прервать;
											//	КонецЕсли;
											//КонецЦикла;
											// <-- VOG Солодов
//END Кайдашов 
											Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
										КонецЕсли;
									КонецЦикла;
								ИначеЕсли ЗначениеКлассификатора <> Неопределено И ЭлементыКорень.Имя.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
									НайденныеСтрокиЗаголовок = СписокЗаголовков.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя));
									Если НайденныеСтрокиЗаголовок.Количество() <> 0 Тогда
										ЭлементЗаголовка = НайденныеСтрокиЗаголовок[0];
										Если ЭлементЗаголовка.Значение Тогда
											ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы = ЭлементыКорень.Имя;
											Колонка.Вывести(ОбластьзаголовкТаблицы);
										КонецЕсли;
									КонецЕсли;
									// --> VOG Солодов
									Если СписокРасшифровкаДляОтчета <> Неопределено Тогда
										СтруктураПоиска = Новый Структура("Имя", ЭлементыКорень.Имя);
										НайденныеСтрокиИспользоватьРасшифровкуДляОтчета = СписокРасшифровкаДляОтчета.НайтиСтроки(СтруктураПоиска);
										// ++ Тищенко В.В. 14.01.2019
										// Для отработки простой расшифровки
										Если НайденныеСтрокиИспользоватьРасшифровкуДляОтчета.Количество() <> 0 Тогда
											ИспользоватьРасшифровкуДляОтчета = НайденныеСтрокиИспользоватьРасшифровкуДляОтчета[0].Значение;	
										Иначе
											ИспользоватьРасшифровкуДляОтчета 	= Ложь;
										КонецЕсли;
									Иначе
										ИспользоватьРасшифровкуДляОтчета 		= Ложь;
									КонецЕсли;
									// -- Тищенко В.В.
									// <-- VOG Солодов
									Для каждого Стр Из ЗначениеКлассификатора Цикл
										ИспользоватьАналитикиу = Ложь;
										Если ЗначениеКлассификатора.Колонки.Найти("Аналитика") <> Неопределено Тогда
											ИспользоватьАналитикиу = Истина;
											ОбластьСтрокаАналитика.Параметры.КлассификаторЗаголовок 				= Стр.ИмяКлассификатора;
											ОбластьСтрокаАналитика.Параметры.КлассификаторЗначение 					= Стр.результат;
											ОбластьСтрокаАналитика.Параметры.КлассификаторАналитика					= Стр.Аналитика;
											Если ИспользоватьРасшифровкуДляОтчета Тогда
												ОбластьСтрокаАналитика.Параметры.КлассификаторЗначениеРасшифровка	= ЭлементыКорень.Имя;	
											Иначе
												ОбластьСтрокаАналитика.Параметры.КлассификаторЗначениеРасшифровка	= Стр.результат;
												Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
													Если РасКлас.Имя.Наименование = Стр.ИмяКлассификатора Тогда
														ОбластьСтрокаАналитика.Параметры.КлассификаторЗначениеРасшифровка = РасКлас.Имя;
														Прервать;
													КонецЕсли;
												КонецЦикла;
											КонецЕсли;
										Иначе	
											ОбластьСтрока.Параметры.КлассификаторЗаголовок 						= Стр.ИмяКлассификатора;
											ОбластьСтрока.Параметры.КлассификаторЗначение 						= Стр.результат;
											Если ИспользоватьРасшифровкуДляОтчета Тогда
												ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка		= ЭлементыКорень.Имя;	
											Иначе
												ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка		= Стр.результат;
												
												//START Кайдашов 09/08/19 500	
												СтрокаРасшифровкиКласс = СписокРасшифровккиКлас.Найти(Стр.ИмяКлассификатора,"Наименование");
												Если СтрокаРасшифровкиКласс<>Неопределено тогда
													ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка = СтрокаРасшифровкиКласс.Имя;	
												КонецЕсли;
												//Для каждого РасКлас Из СписокРасшифровккиКлас Цикл
												//
												//	Если РасКлас.Имя.Наименование = Стр.ИмяКлассификатора Тогда
												//		ОбластьСтрока.Параметры.КлассификаторЗначениеРасшифровка = РасКлас.Имя;
												//		Прервать;
												//	КонецЕсли;
												//КонецЦикла;
												//END Кайдашов 
											КонецЕсли;
										КонецЕсли;
										Колонка.Вывести(?(ИспользоватьАналитикиу,ОбластьСтрокаАналитика,ОбластьСтрока));
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ЭлементыКорень.ЭтоРеквизит Тогда
							
							// VOG Солодов В.В. 05.11.2019 task 821 Рефакторинг
							ВывестиРеквизит(
								Изображение,
								Колонка,
								ОбластьРеквизит,
								ОбластьСтрокаФлажокИстина,
								ОбластьСтрокаФлажокЛожь, Ссылка,
								ТекущиеДерево,
								ЭлементыКорень);
								
						ИначеЕсли ЭлементыКорень.ЭтоТаблица Тогда
							НайденныеСтрокиЗаголовок = СписокЗаголовков.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя));
							Если НайденныеСтрокиЗаголовок.Количество() <> 0 Тогда
								ЭлементЗаголовка = НайденныеСтрокиЗаголовок[0];
								Если ЭлементЗаголовка.Значение Тогда
									ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы = ЭлементыКорень.Синоним;
									Колонка.Вывести(ОбластьзаголовкТаблицы);
								КонецЕсли;
							КонецЕсли;
							ДочерниеСтроки = ЭлементыКорень.Строки;
							КолонкиТаблицы = Новый Массив;
							Для каждого ЭлементДерева Из ДочерниеСтроки Цикл
								Если ЭлементДерева.Пометка И ЭлементДерева.ЭтоРеквизитТаблицы Тогда
									КолонкиТаблицы.Добавить(ЭлементДерева.Имя);
								КонецЕсли;
							КонецЦикла;
							ИмяТаблицы = СтрЗаменить(ЭлементыКорень.Имя,"Объект.","");
							Если КолонкиТаблицы.Количество() <= 2 Тогда
								 ОбластьСтрокадваПараметра.Параметры.Параметр_1 = "";
								 ОбластьСтрокадваПараметра.Параметры.Параметр_2 = "";
								Для каждого Стр Из Ссылка[ИмяТаблицы] Цикл
									СчКолонок = 0;
									Для каждого РекТЧ Из КолонкиТаблицы Цикл
										СчКолонок = СчКолонок + 1;
										ПараметрСтроки= "Параметр_" + (СчКолонок);
										ОбластьСтрокадваПараметра.Параметры[ПараметрСтроки] = Стр[РекТЧ];
										Если ИмяТаблицы = "КонтактнаяИнформация" Тогда
											//В качестве параметра передадим номер строки таблицы КИ
											ОбластьСтрокадваПараметра.Параметры.ИмяРасшифровка = "КИ_" + Стр.НомерСтроки;
											
											//ОбластьСтрокадваПараметра.Параметры.ИмяРасшифровка = "КИ_" + Стр[РекТЧ];

										Иначе
											ОбластьСтрокадваПараметра.Параметры.ИмяРасшифровка = "Расшифровка_"+ИмяТаблицы;
										КонецЕсли;
									КонецЦикла;
									Колонка.Вывести(ОбластьСтрокадваПараметра);
								КонецЦикла;
							ИначеЕсли КолонкиТаблицы.Количество() <= 3 Тогда
								ОбластьСтрокаТаблицыВыдед.Параметры_1 = "";
								ОбластьСтрокаТаблицыВыдед.Параметры_2 = "";
								ОбластьСтрокаТаблицыВыдед.Параметры_3 = "";
								Для каждого Стр Из Ссылка[ИмяТаблицы] Цикл
									СчКолонок = 0;
									Для каждого РекТЧ Из КолонкиТаблицы Цикл
										СчКолонок = СчКолонок + 1;
										ПараметрСтроки= "Параметр_" + (СчКолонок);
										ОбластьСтрокаТаблицыВыдед.Параметры[ПараметрСтроки] = Стр[РекТЧ];
										ОбластьСтрокаТаблицыВыдед.Параметры.ИмяРасшифровка = "Расшифровка_"+ИмяТаблицы;
									КонецЦикла;
									Колонка.Вывести(ОбластьСтрокаТаблицыВыдед);
								КонецЦикла;
							Иначе
								Для каждого Стр Из Ссылка[ИмяТаблицы] Цикл
									СтрокаОтображения = "";
									Для каждого РекТЧ Из КолонкиТаблицы Цикл
										СтрокаОтображения = СтрокаОтображения + Стр[РекТЧ]+" ";
									КонецЦикла;
									ОбластьСтрокаТаблицы.Параметры.ЗначениеСтрокиТаблицы = СтрокаОтображения;
									ОбластьСтрокаТаблицы.Параметры.ИмяРасшифровка = "Расшифровка_"+ИмяТаблицы;
									Колонка.Вывести(ОбластьСтрокаТаблицы);
								КонецЦикла;
							КонецЕсли;
						ИначеЕсли ЭлементыКорень.ЭтоЗаголовок Тогда
							ОбластьЗаголовок.Параметры.ТекстЗаголовка = ЭлементыКорень.Имя;
							Колонка.Вывести(ОбластьЗаголовок);
						ИначеЕсли ЭлементыКорень.ЭтоРаздилитель Тогда
							Колонка.Вывести(ГоризонтальныйОтступ);
						ИначеЕсли ЭлементыКорень.ЭтоГиперссылка Тогда
							ОбластьСтрокаГиперссылка.Параметры.ИмяГиперссылки 		= ЭлементыКорень.Имя;
							ОбластьСтрокаГиперссылка.Параметры.ПараметрыГиперссылки = "Гиперссылка_" + ЭлементыКорень.Имя;	
							// Сформировать количество гипперссылок
							МассивНайденныхСтрокГиперссылок = ТаблицаОбработчиковГиперСсылка.НайтиСтроки(Новый Структура("имя",ЭлементыКорень.Имя));
							Если МассивНайденныхСтрокГиперссылок.Количество() <> 0 Тогда
								НастройкиГиперссылки = МассивНайденныхСтрокГиперссылок[0];
								Если НастройкиГиперссылки.ОтображатьКоличество Тогда
									Запрос 				= Новый Запрос(НастройкиГиперссылки.ТекстОбработчикаКоличество);
									Запрос.УстановитьПараметр("Ссылка",Ссылка);
									КоличествоОбъектов 	= Запрос.Выполнить().Выбрать().Количество();
									ОбластьСтрокаГиперссылка.Параметры.ИмяГиперссылки = ОбластьСтрокаГиперссылка.Параметры.ИмяГиперссылки +" "+ "("+КоличествоОбъектов+")";
								КонецЕсли;
							КонецЕсли;
							Колонка.Вывести(ОбластьСтрокаГиперссылка);
						ИначеЕсли ЭлементыКорень.ЭтоЗапрос Тогда
							
							ВывестиРезультатЗапроса(Колонка, МакетОтображения, Ссылка, ТаблицаЗапросы, ЭлементыКорень); // ++ VOG Солодов В.В. 07.11.2019 task 821 Рефакторинг
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если Колонка <> Неопределено Тогда
					// ++ VOG Солодов В.В. 08.11.2019 task 821
					МассивКолонок.Добавить(Колонка);
					// До изменения
					//ТабДок.Присоединить(Колонка);
					// -- VOG Солодов В.В. 08.11.2019
				КонецЕсли;
			КонецЦикла;
			
			ВывестиКолонки(МассивКолонок, ТабДок); // VOG Солодов В.В. 08.11.2019 Task 821
			
			// Повторный вызов - Не создаем реквизиы
			Если НЕ ПовторныйВызов Тогда
				// Таблица команд Гиперссылки
				//ТаблицаОбработчиковГиперСсылка = НастройкиМакета.Получить("СписокГипперссылок");
				
 				Если ЗначениеЗаполнено(НазваниеТаблицы)Тогда
					
					ИмяТаблицы = НазваниеТаблицы+"_Обработчики";
					
					ДобавляемыеРеквизиты 		= Новый Массив;
					// ++ VOG Ульянов И.В. 10.10.2019 bugs 700							
					Попытка 
						РеквизитИмяТаблицы = ФормаОбъекта[ИмяТаблицы];
					Исключение						
						ТаблицаОбработчиков = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"), , ИмяТаблицы, Ложь);
						ДобавляемыеРеквизиты.Добавить(ТаблицаОбработчиков);
					КонецПопытки;	
					
					Попытка 
						РеквизитИмяТаблицыИмя = ФормаОбъекта[ИмяТаблицы].Итог("Имя");
					Исключение						
						Имя = Новый РеквизитФормы("Имя", Новый ОписаниеТипов("Строка"),ИмяТаблицы, "Имя", Ложь);
						ДобавляемыеРеквизиты.Добавить(Имя);
					КонецПопытки;					
					
					Попытка 
						РеквизитИмяТаблицыИмя = ФормаОбъекта[ИмяТаблицы].Итог("ПроизвольныйКод");
					Исключение						
						ПроизвольныйКод = Новый РеквизитФормы("ПроизвольныйКод", Новый ОписаниеТипов("Строка"),ИмяТаблицы, "ПроизвольныйКод", Ложь);
						ДобавляемыеРеквизиты.Добавить(ПроизвольныйКод);
					КонецПопытки;					
					// -- VOG Ульянов И.В. 10.10.2019 bugs 700					
					
					ФормаОбъекта.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
					ФормаОбъекта[ИмяТаблицы].Загрузить(ТаблицаОбработчиковГиперСсылка);
					
				КонецЕсли;
				
				// Таблица команд Расшифровка
				ТаблицаРасшифровка	= НастройкиМакета.Получить("СписокРасшифровка");
				
				Если ЗначениеЗаполнено(НазваниеТаблицы) Тогда
					
					ИмяТаблицы = НазваниеТаблицы+"_Расшифровка";
					
					ДобавляемыеРеквизиты 		= Новый Массив;
					
					// ++ VOG Ульянов И.В. 10.10.2019 bugs 700					
					Попытка 
						РеквизитИмяТаблицы = ФормаОбъекта[ИмяТаблицы];
					Исключение						
						ТаблицаРасшифровкаФормы 	= Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"), , ИмяТаблицы, Ложь);
						ДобавляемыеРеквизиты.Добавить(ТаблицаРасшифровкаФормы);
					КонецПопытки;					
					
					Попытка 
						РеквизитИмяТаблицыИмя = ФормаОбъекта[ИмяТаблицы].Итог("Имя");
					Исключение						
						Имя = Новый РеквизитФормы("Имя", Новый ОписаниеТипов("Строка"),ИмяТаблицы, "Имя", Ложь);
						ДобавляемыеРеквизиты.Добавить(Имя);
					КонецПопытки;					
					
					Попытка 
						РеквизитИмяТаблицыИмя = ФормаОбъекта[ИмяТаблицы].Итог("Текстобработчика");
					Исключение						
						ПроизвольныйКод = Новый РеквизитФормы("Текстобработчика", Новый ОписаниеТипов("Строка"),ИмяТаблицы, "Текстобработчика", Ложь);
						ДобавляемыеРеквизиты.Добавить(ПроизвольныйКод);
					КонецПопытки;					
					// -- VOG Ульянов И.В. 10.10.2019 bugs 700
					
					ФормаОбъекта.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
					ФормаОбъекта[ИмяТаблицы].Загрузить(ТаблицаРасшифровка);
					
				КонецЕсли;
				
				// Таблица команд Расшифровка классификатора
				ТаблицаРасшифровкаКлассификатора	= НастройкиМакета.Получить("СписокРасшифровкиКлассификатора");
				
				Если ЗначениеЗаполнено(НазваниеТаблицы) Тогда
					
					ИмяТаблицы = НазваниеТаблицы+"_РасшифровкаКлассификатора";
					
					ДобавляемыеРеквизиты 		= Новый Массив;
					
					// ++ VOG Ульянов И.В. 10.10.2019 bugs 700
					Попытка 
						РеквизитИмяТаблицы = ФормаОбъекта[ИмяТаблицы];
					Исключение						
						ТаблицаРасшифровкаКлассификатораФормы 	= Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"), , ИмяТаблицы, Ложь);
						ДобавляемыеРеквизиты.Добавить(ТаблицаРасшифровкаКлассификатораФормы);
					КонецПопытки;					
					
					Попытка 
						РеквизитИмяТаблицыИмя = ФормаОбъекта[ИмяТаблицы].Итог("Имя");
					Исключение						
						Имя = Новый РеквизитФормы("Имя",Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"),ИмяТаблицы, "Имя", Ложь);
						ДобавляемыеРеквизиты.Добавить(Имя);
					КонецПопытки;					
					// -- VOG Ульянов И.В. 10.10.2019 bugs 700
					
					ДоступныеТипы = Новый Массив;
					ДоступныеТипы.Добавить(Тип("СправочникСсылка.вогWebServices"));
					ДоступныеТипы.Добавить(Тип("СправочникСсылка.вог_ПроизвольныйКодНастройкаОтображения"));
					
					Попытка 
						РеквизитИмяТаблицыИмя = ФормаОбъекта[ИмяТаблицы].Итог("Расшифровка");
					Исключение						
						ПроизвольныйКод = Новый РеквизитФормы("Расшифровка", Новый ОписаниеТипов(ДоступныеТипы),ИмяТаблицы, "Текстобработчика", Ложь);
						ДобавляемыеРеквизиты.Добавить(ПроизвольныйКод);
					КонецПопытки;					
					
					ФормаОбъекта.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
					ФормаОбъекта[ИмяТаблицы].Загрузить(ТаблицаРасшифровкаКлассификатора);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Очистить();
			Результат = ТабДок;
			
		КонецЕсли;
		
	Исключение
		
		ТекстОписаниеОшибки = "" + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование макета '"), УровеньЖурналаРегистрации.Ошибка,,,
		ТекстОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначениеКлассификатора(Ссылка, Классификатор,ВидОтображения,СписокДоступныхКлассификаторов = Неопределено,ТолькоЗаполненнчеЗначения = Ложь,НаправлениеДеятельности = Неопределено) Экспорт
	
	//УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	
	Если ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
		
		Результат = "";
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Классификаторы
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &ЗначениеКлассификатора
		|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Классификаторы.Ссылка КАК Классификатор,
		|	ВЫБОР
		|		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
		|			ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|		ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец
		|	КОНЕЦ КАК ИмяКлассификатора,
		|	ВЫБОР
		|		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
		|			ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
		|		ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|	КОНЕЦ КАК Результат
		|ПОМЕСТИТЬ ВТ_Результат
		|ИЗ
		|	Классификаторы КАК Классификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|		ПО Классификаторы.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Результат.Классификатор КАК Классификатор,
		|	ВТ_Результат.ИмяКлассификатора КАК ИмяКлассификатора,
		|	ВТ_Результат.Результат КАК Результат
		|ИЗ
		|	ВТ_Результат КАК ВТ_Результат
		|ГДЕ
		|	ИСТИНА");
		Запрос.УстановитьПараметр("ЗначениеКлассификатора",Классификатор);
		
		Если НаправлениеДеятельности <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект",
			"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &НаправлениеДеятельности");
			Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Объект",Ссылка);
		
		Если ТолькоЗаполненнчеЗначения Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИСТИНА","(ВЫРАЗИТЬ(ВТ_Результат.Результат КАК СТРОКА(150))) <> """);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Результат;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
		
		ТаблицаСписокКлассификаторов = Новый ТаблицаЗначений;
		ТаблицаСписокКлассификаторов.Колонки.Добавить("Классификатор"		,Новый ОписаниеТипов("Строка"));
		ТаблицаСписокКлассификаторов.Колонки.Добавить("ИмяКлассификатора"	,Новый ОписаниеТипов("Строка"));
		ТаблицаСписокКлассификаторов.Колонки.Добавить("Результат"			,Новый ОписаниеТипов("Строка"));
		
		МассивЗапрещенныхКласссификаторов 	= Новый Массив;
		НайденныеСтроки 					= СписокДоступныхКлассификаторов.НайтиСтроки(Новый Структура("Имя",Классификатор));
		
		Если НайденныеСтроки.Количество() <> 0 Тогда
			СписокЗначенийКлассификаторов = ЗначениеИзСтрокиВнутр(НайденныеСтроки[0].Значение);
			Для каждого СписКлас Из СписокЗначенийКлассификаторов Цикл
				Если НЕ СписКлас.Пометка Тогда
					МассивЗапрещенныхКласссификаторов.Добавить(СписКлас.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Проверка Вывод с аналитикой
		Если НайденныеСтроки.Количество() <> 0 И НайденныеСтроки[0].ИспользоватьАналитику Тогда
			
			ТаблицаСписокКлассификаторов.Колонки.Добавить("Аналитика"			,Новый ОписаниеТипов("Строка"));
			
			Запрос = Новый запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ Классификаторы
			|ИЗ
			|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
			|ГДЕ
			|	CRM_ЗначенияКлассификаторов.Владелец = &ЗначениеКлассификатора
			|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
			|	И НЕ CRM_ЗначенияКлассификаторов.Ссылка В (&СписокЗапрещенныхКлассификаторов)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Классификаторы.Ссылка КАК Ссылка
			|ИЗ
			|	Классификаторы КАК Классификаторы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Классификаторы.Ссылка КАК Классификатор,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
			|				ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
			|			ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец
			|		КОНЕЦ, """") КАК ИмяКлассификатора,
			|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
			|				ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
			|			ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
			|		КОНЕЦ, """") КАК Результат
			|ИЗ
			|	Классификаторы КАК Классификаторы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
			|		ПО Классификаторы.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
			|ГДЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект");
			
			Если НаправлениеДеятельности <> Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект",
				"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &НаправлениеДеятельности");
				Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Объект",Ссылка);
			Запрос.УстановитьПараметр("ЗначениеКлассификатора"			,Классификатор);
			Запрос.УстановитьПараметр("СписокЗапрещенныхКлассификаторов",МассивЗапрещенныхКласссификаторов);
			
			РезультатЗапроса 		= Запрос.ВыполнитьПакет();
			СписокКлассификаторов 	= РезультатЗапроса[1].Выгрузить();
			СписокЗначений 			= РезультатЗапроса[2].Выгрузить();
			
			Для каждого СтрКлас Из СписокКлассификаторов Цикл
				НайтиСтроки 								= СписокЗначений.НайтиСтроки(Новый Структура("Классификатор",СтрКлас.Ссылка));
				Если НайтиСтроки.Количество() <> 0 Тогда
					Для каждого Стр Из НайтиСтроки Цикл
						СтрокаДобавления 					= ТаблицаСписокКлассификаторов.Добавить();
						СтрокаДобавления.Классификатор 		= СтрКлас.Ссылка;
						СтрокаДобавления.ИмяКлассификатора 	= СтрКлас.Ссылка;
						СтрокаДобавления.Аналитика			= Стр.Аналитика;
						СтрокаДобавления.Результат 			= Стр.Результат;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
			
		Иначе	
			
			Запрос = Новый запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ Классификаторы
			|ИЗ
			|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
			|ГДЕ
			|	CRM_ЗначенияКлассификаторов.Владелец = &ЗначениеКлассификатора
			|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
			|	И НЕ CRM_ЗначенияКлассификаторов.Ссылка В (&СписокЗапрещенныхКлассификаторов)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Классификаторы.Ссылка КАК Ссылка
			|ИЗ
			|	Классификаторы КАК Классификаторы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Классификаторы.Ссылка КАК Классификатор,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
			|				ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
			|			ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец
			|		КОНЕЦ, """") КАК ИмяКлассификатора,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
			|				ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
			|			ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
			|		КОНЕЦ, """") КАК Результат
			|ИЗ
			|	Классификаторы КАК Классификаторы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
			|		ПО Классификаторы.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
			|ГДЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект");
			
			Если НаправлениеДеятельности <> Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект",
				"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &НаправлениеДеятельности");
				Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Объект",Ссылка);
			Запрос.УстановитьПараметр("ЗначениеКлассификатора"			,Классификатор);
			Запрос.УстановитьПараметр("СписокЗапрещенныхКлассификаторов",МассивЗапрещенныхКласссификаторов);
			
			РезультатЗапроса 		= Запрос.ВыполнитьПакет();
			СписокКлассификаторов 	= РезультатЗапроса[1].Выгрузить();
			СписокЗначений 			= РезультатЗапроса[2].Выгрузить();
			
			Для каждого Стр Из СписокКлассификаторов Цикл
				СтрокаДобавления 					= ТаблицаСписокКлассификаторов.Добавить();
				СтрокаДобавления.Классификатор 		= Стр.Ссылка;
				СтрокаДобавления.ИмяКлассификатора 	= Стр.Ссылка;
				НайтиСтроки 						= СписокЗначений.НайтиСтроки(Новый Структура("Классификатор",Стр.Ссылка));
				Если НайтиСтроки.Количество() <> 0 Тогда
					ЗначениеРеквизита = НайтиСтроки[0].Результат;
					Если НайтиСтроки.количество() > 1 И ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
						СуммаРеквизита = 0;
						Для каждого Стр Из НайтиСтроки Цикл
							СуммаРеквизита 			= СуммаРеквизита + Стр.Результат;	
						КонецЦикла;
						СтрокаДобавления.Результат 	= СуммаРеквизита;	
					Иначе
						СтрокаДобавления.Результат 	= ЗначениеРеквизита;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Результат = ТаблицаСписокКлассификаторов;
		
	ИначеЕсли 	ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком 
		ИЛИ ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком Тогда
		
		ТаблицаСписокКлассификаторов = Новый ТаблицаЗначений;
		ТаблицаСписокКлассификаторов.Колонки.Добавить("Имя"				,Новый ОписаниеТипов("Строка"));
		ТаблицаСписокКлассификаторов.Колонки.Добавить("Использование"	,Новый ОписаниеТипов("Булево"));
		
		МассивЗапрещенныхКласссификаторов 	= Новый Массив;
		НайденныеСтроки 					= СписокДоступныхКлассификаторов.НайтиСтроки(Новый Структура("Имя",Классификатор));
		
		Если НайденныеСтроки.Количество() <> 0 Тогда
			СписокЗначенийКлассификаторов = ЗначениеИзСтрокиВнутр(НайденныеСтроки[0].Значение);
			Для каждого СписКлас Из СписокЗначенийКлассификаторов Цикл
				Если НЕ СписКлас.Пометка Тогда
					МассивЗапрещенныхКласссификаторов.Добавить(СписКлас.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Запрос = Новый запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Классификаторы
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &ЗначениеКлассификатора
		|	И НЕ CRM_ЗначенияКлассификаторов.Ссылка В (&СписокЗапрещенныхКлассификаторов)
		|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Классификаторы.Ссылка КАК Ссылка
		|ИЗ
		|	Классификаторы КАК Классификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Классификаторы.Ссылка КАК Классификатор,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
		|				ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|			ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец
		|		КОНЕЦ, """") КАК ИмяКлассификатора,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
		|				ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
		|			ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|		КОНЕЦ, """") КАК Результат
		|ИЗ
		|	Классификаторы КАК Классификаторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|		ПО Классификаторы.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект");
		
		Если НаправлениеДеятельности <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект",
			"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &НаправлениеДеятельности");
			Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Объект",Ссылка);
		Запрос.УстановитьПараметр("ЗначениеКлассификатора"			,Классификатор);
		Запрос.УстановитьПараметр("СписокЗапрещенныхКлассификаторов",МассивЗапрещенныхКласссификаторов);
		РезультатЗапроса 		= Запрос.ВыполнитьПакет();
		СписокКлассификаторов 	= РезультатЗапроса[1].Выгрузить();
		СписокЗначений 			= РезультатЗапроса[2].Выгрузить();
		
		Для каждого Стр Из СписокКлассификаторов Цикл
			СтрокаДобавления 		= ТаблицаСписокКлассификаторов.Добавить();
			СтрокаДобавления.Имя 	= Стр.Ссылка;
			НайтиСтроки 			= СписокЗначений.НайтиСтроки(Новый Структура("Классификатор",Стр.Ссылка));
			Если НайтиСтроки.Количество() <> 0 Тогда
				СтрокаДобавления.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Результат = ТаблицаСписокКлассификаторов;
		
	ИначеЕсли ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение Тогда
		
		ТаблицаСписокКлассификаторов = Новый ТаблицаЗначений;
		ТаблицаСписокКлассификаторов.Колонки.Добавить("Имя"				,Новый ОписаниеТипов("Строка"));
		ТаблицаСписокКлассификаторов.Колонки.Добавить("Использование"	,Новый ОписаниеТипов("Булево"));
		
		МассивЗапрещенныхКласссификаторов 	= Новый Массив;
		НайденныеСтроки 					= СписокДоступныхКлассификаторов.НайтиСтроки(Новый Структура("Имя",Классификатор));
		
		Если НайденныеСтроки.Количество() <> 0 Тогда
			СписокЗначенийКлассификаторов = ЗначениеИзСтрокиВнутр(НайденныеСтроки[0].Значение);
			Для каждого СписКлас Из СписокЗначенийКлассификаторов Цикл
				Если НЕ СписКлас.Пометка Тогда
					МассивЗапрещенныхКласссификаторов.Добавить(СписКлас.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Запрос = Новый запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Классификаторы
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &ЗначениеКлассификатора
		|	И НЕ CRM_ЗначенияКлассификаторов.Ссылка В (&СписокЗапрещенныхКлассификаторов)
		|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Классификаторы.Ссылка КАК Ссылка
		|ИЗ
		|	Классификаторы КАК Классификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Классификаторы.Ссылка КАК Классификатор,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
		|				ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|			ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец
		|		КОНЕЦ, """") КАК ИмяКлассификатора,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
		|				ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
		|			ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|		КОНЕЦ, """") КАК Результат
		|ИЗ
		|	Классификаторы КАК Классификаторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|		ПО Классификаторы.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
		|ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект");
		
		Если НаправлениеДеятельности <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект",
			"CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &НаправлениеДеятельности");
			Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Объект",Ссылка);
		Запрос.УстановитьПараметр("ЗначениеКлассификатора"			,Классификатор);
		Запрос.УстановитьПараметр("СписокЗапрещенныхКлассификаторов",МассивЗапрещенныхКласссификаторов);
		РезультатЗапроса 		= Запрос.ВыполнитьПакет();
		СписокКлассификаторов 	= РезультатЗапроса[1].Выгрузить();
		СписокЗначений 			= РезультатЗапроса[2].Выгрузить();
		
		Для каждого Стр Из СписокКлассификаторов Цикл
			СтрокаДобавления 		= ТаблицаСписокКлассификаторов.Добавить();
			СтрокаДобавления.Имя 	= Стр.Ссылка;
			НайтиСтроки 			= СписокЗначений.НайтиСтроки(Новый Структура("Классификатор",Стр.Ссылка));
			Если НайтиСтроки.Количество() <> 0 Тогда
				СтрокаДобавления.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Результат = ТаблицаСписокКлассификаторов;
		
	КонецЕсли;
	
	Если ТолькоЗаполненнчеЗначения И ТаблицаСписокКлассификаторов.Количество() <> 0 Тогда
		УдалитьПустыеЗначения(ТаблицаСписокКлассификаторов,ВидОтображения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьПустыеЗначения(ТаблицаСписокКлассификаторов,ВидОтображения)

	МассивУдаленияСтрок = Новый Массив;
	
	Если ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда 
		Для каждого ТекКлассификатор Из ТаблицаСписокКлассификаторов Цикл
			Если НЕ ЗначениеЗаполнено(ТекКлассификатор.Результат) Тогда
				МассивУдаленияСтрок.Добавить(ТекКлассификатор);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого ТекКлассификатор Из ТаблицаСписокКлассификаторов Цикл
			Если НЕ ТекКлассификатор.Использование Тогда
				МассивУдаленияСтрок.Добавить(ТекКлассификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивУдаленияСтрок.Количество() <> 0 Тогда
		Для каждого СтрУдаления Из МассивУдаленияСтрок Цикл
			ТаблицаСписокКлассификаторов.Удалить(СтрУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоГипперссылок(ТекстЗапроса,Ссылка)

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

// ++ VOG Солодов В.В. 06.11.2019  task 821
Функция СформироватьСинонимИмениКолонки(Знач ИмяРеквизита)
	
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "_", " ");
	
	Синоним 	= ВРег(Сред(ИмяРеквизита, 1, 1));
	ДлинаСтроки = СтрДлина(ИмяРеквизита);
	
	Для Позиция = 2 По ДлинаСтроки Цикл
		
		Символ 			= Сред(ИмяРеквизита, Позиция, 1);
		ПредСимвол 		= Сред(ИмяРеквизита, Позиция - 1, 1);
		СледСимвол 		= Сред(ИмяРеквизита, Позиция + 1, 1);
		Прописная 		= ((Символ = ВРег(Символ)) И СтрНайти("1234567890_ ", ПредСимвол) = 0);
		ПредПрописная 	= ((ПредСимвол = ВРег(ПредСимвол)) И СтрНайти("1234567890_ ", ПредСимвол) = 0);
		СледПрописная 	= ((СледСимвол = ВРег(СледСимвол)) И СтрНайти("1234567890_ ", ПредСимвол) = 0);
		
		Если Не ПредПрописная И Прописная И СледПрописная Тогда
			Синоним 	= Синоним + " " + Символ;
		ИначеЕсли ПредПрописная И Прописная Тогда
			Синоним 	= Синоним + Символ;
		ИначеЕсли Не ПредПрописная И Прописная Тогда
			Синоним 	= Синоним + " " + НРег(Символ);
		ИначеЕсли Прописная И Не СледПрописная Тогда
			Синоним 	= Синоним + " " + Символ;
		Иначе
			Синоним 	= Синоним + Символ;
		Конецесли;
		
	КонецЦикла;
	
	Возврат Синоним;
	
КонецФункции

Процедура ВывестиРеквизит(Изображение, Колонка, ОбластьРеквизит, ОбластьСтрокаФлажокИстина, ОбластьСтрокаФлажокЛожь, Ссылка, ТекущиеДерево, ЭлементыКорень)
	
	Если ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Флажок Тогда
		ОбластьРеквизит.Параметры.ИмяРеквизита = ЭлементыКорень.Синоним;
		ИмяРеквизита 	= СтрЗаменить(ЭлементыКорень.Имя,"Объект.","");
		ТекущиеЗначение = Ссылка[ИмяРеквизита];
		Если ТипЗнч(ТекущиеЗначение) = Тип("Булево") Тогда
			Если ТекущиеЗначение Тогда
				ОбластьСтрокаФлажокИстина.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
				Колонка.Вывести(ОбластьСтрокаФлажокИстина);
			Иначе	
				ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
				Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
			КонецЕсли;
		Иначе
			ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
			Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
		КонецЕсли;
	ИначеЕсли ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Изображение Тогда
		ИмяРеквизита = СтрЗаменить(ЭлементыКорень.Имя,"Объект.","");
		СсылкаНаИзображение =  Ссылка[ИмяРеквизита];
		Попытка
			КартинкаОбъекта = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СсылкаНаИзображение);
		Исключение
			КартинкаОбъекта = Неопределено; 
		КонецПопытки;
		Если ЗначениеЗаполнено(КартинкаОбъекта) Тогда
			ОбластьКартинка = Изображение;
			КартинкаТЧ = ОбластьКартинка.Области.АдресКартинки;
			Если ТипЗнч(КартинкаОбъекта) = Тип("Картинка") Тогда
				КартинкаТЧ.Картинка = КартинкаОбъекта;
			ИначеЕсли ТипЗнч(КартинкаОбъекта) = Тип("ДвоичныеДанные") Тогда
				КартинкаТЧ.Картинка = Новый Картинка(КартинкаОбъекта);
			КонецЕсли;
			Колонка.Вывести(Изображение);
		КонецЕсли;	
	Иначе	
		// ++ VOG Солодов В.В. 05.11.2019 task 821
		// Имя реквизита
		СинонимРеквизита 	= ЭлементыКорень.Синоним;
		Если Не ТекущиеДерево.Колонки.Найти("ВыводимоеИмя") = Неопределено
			И ЗначениеЗаполнено(ЭлементыКорень.ВыводимоеИмя) Тогда
			СинонимРеквизита = ЭлементыКорень.ВыводимоеИмя;
		Иначе
			МассивСтрокСинонима = СтрРазделить(СинонимРеквизита, ".", Ложь);
			Для Индекс = 0 По МассивСтрокСинонима.ВГраница() Цикл
				СинонимРеквизита = МассивСтрокСинонима[Индекс];
			КонецЦикла;
		КонецЕсли;
		ОбластьРеквизит.Параметры.ИмяРеквизита = СинонимРеквизита;
		
		// Значение реквизита
		ИмяРеквизита = СтрЗаменить(ЭлементыКорень.Имя, "Объект.", "");
		МассивСтрок = СтрРазделить(ИмяРеквизита, ".");
		ЗначениеРеквизита = Ссылка;
		Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеРеквизита, МассивСтрок[Индекс]);
			КонецЕсли;
		КонецЦикла;
		ОбластьРеквизит.Параметры.ЗначениеРеквизита
			= ОтформатироватьЗначениеРеквизита(ЗначениеРеквизита, ТекущиеДерево, ЭлементыКорень);
		
		// Проверка заполнения
		Если Не ТекущиеДерево.Колонки.Найти("ВыводитьТолькоЗаполненный") = Неопределено
			И ЭлементыКорень.ВыводитьТолькоЗаполненный
			И Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			Возврат;
			
		КонецЕсли;
		// До изменения
		//ОбластьРеквизит.Параметры.ИмяРеквизита = ЭлементыКорень.Синоним;
		//ИмяРеквизита = СтрЗаменить(ЭлементыКорень.Имя,"Объект.","");
		//ОбластьРеквизит.Параметры.ЗначениеРеквизита = Ссылка[ИмяРеквизита];
		// -- VOG Солодов В.В. 05.11.2019
		Колонка.Вывести(ОбластьРеквизит);
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиРезультатЗапроса(Колонка, Знач МакетОтображения, Знач Ссылка, Знач ТаблицаЗапросы, Знач ЭлементыКорень)
	
	// ++ VOG Солодов В.В. 07.11.2019 task 821
	НайденныеСтроки = Новый Массив;
	
	Если ТипЗнч(ТаблицаЗапросы) = Тип("ТаблицаЗначений") Тогда
		НайденныеСтроки = ТаблицаЗапросы.НайтиСтроки(Новый Структура("Имя", ЭлементыКорень.Имя));
	ИначеЕсли ТипЗнч(ТаблицаЗапросы) = Тип("Массив") Тогда
		
		Для Каждого СтруктураНастроек Из ТаблицаЗапросы Цикл
			Если СтруктураНастроек.Имя = ЭлементыКорень.Имя Тогда
				НайденныеСтроки.Добавить(СтруктураНастроек);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// До изменения
	//НайденныеСтроки = ТаблицаЗапросы.НайтиСтроки(Новый Структура("Имя",ЭлементыКорень.Имя));
	// -- VOG Солодов В.В. 07.11.2019
	Если НайденныеСтроки.Количество() <> 0 Тогда
		НайденаяСтрока 							= НайденныеСтроки[0];
		ТекстЗапроса 							= НайденаяСтрока.ТекстЗапроса;
		ИспользоватьНеСтандартнуюРасшифровку 	= НайденаяСтрока.ИспользоватьНеСтандартнуюРасшифровку;
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Если СтрНайти(ТекстЗапроса,"&Объект") <> 0 Тогда
				Запрос 				= Новый Запрос(ТекстЗапроса);
				СписокПараметров 	= Запрос.НайтиПараметры();
				Для каждого ПараметрЗапроса Из СписокПараметров Цикл
					Если ПараметрЗапроса.Имя 		= "Объект" Тогда
						Запрос.УстановитьПараметр("Объект",Ссылка);
					ИначеЕсли ПараметрЗапроса.Имя	= "ТекущаяДата" Тогда
						Запрос.УстановитьПараметр("ТекущаяДата",CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
					ИначеЕсли ПараметрЗапроса.Имя	= "Организация" Тогда
						Запрос.УстановитьПараметр("Организация",вогОбщегоНазначения.ПолучитьОрганизациюПользователяПоПодразделению(Пользователи.ТекущийПользователь()));
					ИначеЕсли ПараметрЗапроса.Имя	= "ТекущийПользователь" Тогда
						Запрос.УстановитьПараметр("ТекущийПользователь",Пользователи.ТекущийПользователь());
					КонецЕсли;
				КонецЦикла;
				РезультатЗапроса	= Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ТаблицаРезультат 	= РезультатЗапроса.Выгрузить();
					КолонкиТЗ			= ТаблицаРезультат.Колонки;
					// ++ VOG Солодов В.В. 06.11.2019 task 821
					// Вывод шапки таблицы
					Если ТипЗнч(НайденаяСтрока) = Тип("Структура") И НайденаяСтрока.ВыводитьШапку Тогда
						
						НомерКолонки = 0;
						
						Для Каждого ИмяКолонки Из КолонкиТЗ Цикл
							
							НомерКолонки = НомерКолонки + 1;
							
							ОбластьСтрокаЗапросИмяКолонки = МакетОтображения.ПолучитьОбласть("СтрокаВнешниеДанныеИмяКолонки|ИмяКолонки");
							ОбластьСтрокаЗапросИмяКолонки.Параметры.ИмяКолонки = СформироватьСинонимИмениКолонки(ИмяКолонки.Имя);
							
							Если НомерКолонки = 1 Тогда
								Колонка.Вывести(ОбластьСтрокаЗапросИмяКолонки);
							Иначе
								Колонка.Присоединить(ОбластьСтрокаЗапросИмяКолонки);
							КонецЕсли;
							
							УстановитьШиринуКолонки(ИмяКолонки, Колонка, НайденаяСтрока, НомерКолонки);
							
						КонецЦикла;
						
					КонецЕсли;
					
					// Вывод таблицы
					Для Каждого СтрТЧ Из ТаблицаРезультат Цикл
						
						НомерКолонки = 0;
						
						Для Каждого ИмяКолонки Из КолонкиТЗ Цикл
							
							ВыводитьКолонку = Ложь;
							
							Если ТипЗнч(НайденаяСтрока) = Тип("Структура") Тогда
								СтруктураНастроек = НайденаяСтрока.Настройки.Получить(ИмяКолонки.Имя);
								Если Не СтруктураНастроек = Неопределено Тогда
									ВыводитьКолонку = Истина;
								КонецЕсли;
							Иначе
								ВыводитьКолонку = Истина;
							КонецЕсли;
							
							Если Не ВыводитьКолонку Тогда
								Продолжить;
							КонецЕсли;
							
							НомерКолонки = НомерКолонки + 1;
							
							ОбластьСтрокаЗапросПараметр = МакетОтображения.ПолучитьОбласть("СтрокаВнешниеДанные|КолонкаПараметр");
							ОбластьСтрокаЗапросПараметр.Параметры.Параметр = СтрТЧ[ИмяКолонки.Имя];
							
							СчСтр 			= КолонкиТЗ.Индекс(ИмяКолонки) + 1;
							ПараметрСтроки 	= "Параметр_" + СчСтр;
							
							// Только 3 параметра пока
							Если СчСтр <= 3 Тогда
								ПоляРасшифровки = НайденаяСтрока[ПараметрСтроки];
							Иначе
								ПоляРасшифровки = "";
							КонецЕсли;
							
							Если ИспользоватьНеСтандартнуюРасшифровку И ЗначениеЗаполнено(ПоляРасшифровки) Тогда
								
								МассивРасшифровки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПоляРасшифровки, "+");
								
								Если МассивРасшифровки.Количество() > 1 Тогда
									
									// Сложное поле расшифровки
									СоответствиеРасшифровки = Новый Соответствие;
									
									Для Каждого ПолеРасшифровки Из МассивРасшифровки Цикл
										СоответствиеРасшифровки.Вставить(ПолеРасшифровки, СтрТЧ[ПолеРасшифровки]);
									КонецЦикла;
									
									Если СоответствиеРасшифровки.Количество() <> 0 Тогда
										КлиентРасшифровка = "Параметр_" + СчСтр + "_КлиентРасшифровка";
										СерверРасшифровка = "Параметр_" + СчСтр + "_СерверРасшифровка";
										СоответствиеРасшифровки.Вставить("КлиентРасшифровка", НайденаяСтрока[КлиентРасшифровка]);
										СоответствиеРасшифровки.Вставить("СерверРасшифровка", НайденаяСтрока[СерверРасшифровка]);
										ОбластьСтрокаЗапросПараметр.Параметры.Расшифровка = СоответствиеРасшифровки;
									КонецЕсли;
									
								Иначе
									// Простое поле расшифровки
									ОбластьСтрокаЗапросПараметр.Параметры.Расшифровка = СтрТЧ[МассивРасшифровки[0]];
								КонецЕсли;
								
							Иначе
								//Простое поле расшифровки
								ОбластьСтрокаЗапросПараметр.Параметры.Расшифровка = СтрТЧ[ИмяКолонки.Имя];
							КонецЕсли;
							
							Если НомерКолонки = 1 Тогда
								Колонка.Вывести(ОбластьСтрокаЗапросПараметр);
							Иначе
								Колонка.Присоединить(ОбластьСтрокаЗапросПараметр);
							КонецЕсли;
							
							УстановитьШиринуКолонки(ИмяКолонки, Колонка, НайденаяСтрока, НомерКолонки);
							
						КонецЦикла;
						
					КонецЦикла;
					// До изменения
					//КоличествоКолонокТЗ	= ?(ТаблицаРезультат.Колонки.Количество() <=3,ТаблицаРезультат.Колонки.Количество(),3);
					//ОбластьСтрокаЗапрос.Параметры.Параметр_1 = "";
					//ОбластьСтрокаЗапрос.Параметры.Параметр_2 = "";
					//ОбластьСтрокаЗапрос.Параметры.Параметр_3 = "";
					//Для каждого СтрТЧ Из ТаблицаРезультат Цикл
					//	Для СчСтр =0 По КоличествоКолонокТЗ -1 Цикл
					//		ПараметрСтроки									= "Параметр_" + (СчСтр + 1);
					//		Расшифровка										= "Расшифровка_" + (СчСтр + 1);
					//		ИмяКолонки 										= КолонкиТЗ.Получить(СчСтр);
					//		ОбластьСтрокаЗапрос.Параметры[ПараметрСтроки] 	= СтрТЧ[ИмяКолонки.Имя];
					//		ПоляРасшифровки 								= НайденаяСтрока[ПараметрСтроки];
					//		// Использование нестандартной расшифровки 
					//		Если ИспользоватьНеСтандартнуюРасшифровку И ЗначениеЗаполнено(ПоляРасшифровки) Тогда
					//			МассивРасшифровки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПоляРасшифровки,"+");
					//			Если МассивРасшифровки.Количество() > 1 Тогда
					//				// Сложное поле расшифровки	
					//				СоответствиеРасшифровки = Новый Соответствие;
					//				Для каждого ПолеРасшифровки Из МассивРасшифровки Цикл
					//					СоответствиеРасшифровки.Вставить(ПолеРасшифровки,СтрТЧ[ПолеРасшифровки]);
					//				КонецЦикла;
					//				Если СоответствиеРасшифровки.Количество() <> 0 Тогда
					//					КлиентРасшифровка = "Параметр_"+(СчСтр + 1)+"_КлиентРасшифровка";
					//					СерверРасшифровка = "Параметр_"+ (СчСтр + 1)+"_СерверРасшифровка";
					//					СоответствиеРасшифровки.Вставить("КлиентРасшифровка",НайденаяСтрока[КлиентРасшифровка]);
					//					СоответствиеРасшифровки.Вставить("СерверРасшифровка",НайденаяСтрока[СерверРасшифровка]);
					//					ОбластьСтрокаЗапрос.Параметры[Расшифровка] 	= СоответствиеРасшифровки;
					//				КонецЕсли;
					//			Иначе
					//				// Простое поле расшифровки
					//				ОбластьСтрокаЗапрос.Параметры[Расшифровка] 		= СтрТЧ[ПолеРасшифровки];
					//			КонецЕсли;
					//		Иначе
					//			// Стандартная обработка
					//			ОбластьСтрокаЗапрос.Параметры[Расшифровка] 		= СтрТЧ[ИмяКолонки.Имя];
					//		КонецЕсли;
					//	КонецЦикла;
					//	Колонка.Вывести(ОбластьСтрокаЗапрос);
					//КонецЦикла;
					// -- VOG Солодов В.В. 06.11.2019
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьШиринуКолонки(Знач ИмяКолонки, Знач Колонка, Знач НайденаяСтрока, Знач НомерКолонки)
	
	Если ТипЗнч(НайденаяСтрока) = Тип("Структура") Тогда
		Настройки = НайденаяСтрока.Настройки;
	Иначе
		Настройки = Новый Соответствие;
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Поле", 			ИмяКолонки.Имя);
		СтруктураНастройки.Вставить("ШиринаКолонки", 	27);
		Настройки.Вставить(ИмяКолонки.Имя, СтруктураНастройки);
	КонецЕсли;
	
	СтруктураНастроек = Настройки.Получить(ИмяКолонки.Имя);
	Если СтруктураНастроек = Неопределено
		Или СтруктураНастроек.ШиринаКолонки = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ШаблонАдреса 	= "R%1C%2";
	АдресЯчейки 	= СтрШаблон(ШаблонАдреса, Колонка.ВысотаТаблицы, НомерКолонки);
	Область 		= Колонка.Область(АдресЯчейки);
			
	Если Не Область = Неопределено Тогда
		Область.ШиринаКолонки = СтруктураНастроек.ШиринаКолонки;
	КонецЕсли;

КонецПроцедуры

Функция ОтформатироватьЗначениеРеквизита(Знач ЗначениеРеквизита, Знач ДеревоЭлементов, Знач ЭлементыКорень)
	
	Если ДеревоЭлементов.Колонки.Найти("Формат") = Неопределено Тогда
		Возврат ЗначениеРеквизита;
	Иначе
		ФорматнаяСтрока = ЭлементыКорень.Формат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Дата"));
	МассивТипов.Добавить(Тип("Булево"));
	
	Если МассивТипов.Найти(ТипЗнч(ЗначениеРеквизита)) = 0 Тогда
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	Возврат Формат(ЗначениеРеквизита, ФорматнаяСтрока);
	
КонецФункции

Процедура ВывестиКолонки(Знач МассивКолонок, ТабДок)
	
	СоответствиеШириныКолонки 	= Новый Соответствие;
	
	Для ИндексКолонки = 0 По МассивКолонок.ВГраница() Цикл
		
		СоответствиеШирины = Новый Соответствие;
		
		Для НомерСтроки = 1 По МассивКолонок[ИндексКолонки].ВысотаТаблицы Цикл
			
			Для НомерКолонки = 1 По МассивКолонок[ИндексКолонки].ШиринаТаблицы Цикл
				
				ШаблонАдреса 		= "R%1C%2";
				АдресЯчейки 		= СтрШаблон(ШаблонАдреса, НомерСтроки, НомерКолонки);
				Ячейка 				= МассивКолонок[ИндексКолонки].Область(АдресЯчейки);
				
				СоответствиеШирины.Вставить(Ячейка.Имя, Ячейка.ШиринаКолонки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("ШиринаТаблицы", МассивКолонок[ИндексКолонки].ШиринаТаблицы);
		СтруктураКолонки.Вставить("ШиринаКолонок", СоответствиеШирины);
		
		СоответствиеШириныКолонки.Вставить(ИндексКолонки, СтруктураКолонки);
		
	КонецЦикла;
	
	Для Индекс = 0 По МассивКолонок.ВГраница() Цикл
		ТабДок.Присоединить(МассивКолонок[Индекс]);
	КонецЦикла;
	
	ВсегоШиринаТаблицы = 0;
	
	Для Индекс = 0 По МассивКолонок.ВГраница() Цикл
		
		СтруктураКолонки = СоответствиеШириныКолонки.Получить(Индекс);
		
		Если СтруктураКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВсегоШиринаТаблицы 	= ВсегоШиринаТаблицы + СтруктураКолонки.ШиринаТаблицы;
		
		Для Каждого СоответствиеШирины Из СтруктураКолонки.ШиринаКолонок Цикл
			
			Если СоответствиеШирины.Значение <> 9 Тогда
				
				КоличествоСимволов 		= СтрДлина(СоответствиеШирины.Ключ);
				ТекущаяСтрока 			= Прав(Лев(СоответствиеШирины.Ключ, КоличествоСимволов - 2), КоличествоСимволов - 3);
				
				НомерКолонки 			= ВсегоШиринаТаблицы - СтруктураКолонки.ШиринаТаблицы + Число(Прав(СоответствиеШирины.Ключ, 1));
				
				ШаблонАдреса 			= "R%1C%2";
				АдресЯчейки 			= СтрШаблон(ШаблонАдреса, ТекущаяСтрока, НомерКолонки);
				Ячейка 					= ТабДок.Область(АдресЯчейки);
				
				Ячейка.ВысотаСтроки 	= 0;
				Ячейка.АвтоВысотаСтроки = Истина;
				Ячейка.ШиринаКолонки 	= СоответствиеШирины.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
// -- VOG Солодов В.В. 06.11.2019

#КонецОбласти

#КонецЕсли

// - Тищенко В.В.
