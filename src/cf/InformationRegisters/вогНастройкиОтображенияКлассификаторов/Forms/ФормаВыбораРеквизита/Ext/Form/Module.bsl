
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ИмяКорневогоЭлемента", ИмяКорневогоЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	АдресКэшаКартинок = ПоместитьВоВременноеХранилище(Новый Соответствие, ЭтотОбъект.УникальныйИдентификатор);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.РежимКомпоновкиДанных = Истина;
	
	АдресСхемыЗапроса = ПоместитьВоВременноеХранилище(СхемаЗапроса, ЭтотОбъект.УникальныйИдентификатор);
	
	СтруктураСтраниц = Новый Структура;
	СтруктураСтраниц.Вставить("СтраницаДоступныхТаблиц", Истина);
	
	ЗаполнитьТаблицыНаСервере(СтруктураСтраниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МассивЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяКорневогоЭлемента, ".");
	КоличествоСтрок = МассивЭлементов.Количество() - 1;
	
	РазвернутьДерево(ДоступныеТаблицы, КоличествоСтрок, КоличествоСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеТаблицы

&НаКлиенте
Процедура ДоступныеТаблицыПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеЭлементы = ДоступныеТаблицы.НайтиПоИдентификатору(Строка);
	
	Если Не ЭтоЛожноеПоле(ТекущиеЭлементы) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ 					= Истина;
	СтрокаРазворачивания 	= Строка;
	
	ПодключитьОбработчикОжидания("ДоступныеТаблицыПередРазворачиваниемОбработчик", 0.01, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеТаблицыПередРазворачиваниемОбработчик()
	
	ДоступныеТаблицыПередРазворачиваниемНаСервере(СтрокаРазворачивания);
	Элементы.ДоступныеТаблицы.Развернуть(СтрокаРазворачивания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДоступныеТаблицы.ТекущиеДанные;
	
	Закрыть(ТекущиеДанные.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекущиеДанные = Элементы.ДоступныеТаблицы.ТекущиеДанные;
	
	Закрыть(ТекущиеДанные.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицыНаСервере(Знач СтруктураСтраниц)
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресСхемыЗапроса);
	
	Если СхемаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
	
	Запрос = ПолучитьЗапросИзСхемы(СхемаЗапроса);
	
	Если СтруктураСтраниц.Свойство("СтраницаДоступныхТаблиц") Тогда
		
		ДоступныеТаблицы.ПолучитьЭлементы().Очистить();
		
		ЗаполнитьИсточникиПоИндексам(
			ДоступныеТаблицы.ПолучитьЭлементы(),
			Запрос.ДоступныеТаблицы,
			,
			,
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросИзСхемы(Знач СхемаЗапроса)
	
	ПакетЗапросов 	= СхемаЗапроса.ПакетЗапросов;
	Запрос 			= ПакетЗапросов.Получить(0);
	
	Возврат Запрос;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИсточникиПоИндексам(Знач ДеревоЭлементов,
							Знач ИсточникДанных,
							Знач Индексы = Неопределено,
							Знач ДоступныеТаблицыЗапроса = Неопределено,
							Знач Сортировка = Истина)
	
	Если Индексы = Неопределено Тогда
		Источник = ИсточникДанных;
	Иначе
		Источник = ПолучитьИсточник(ИсточникДанных, Индексы);
	КонецЕсли;
	
	Если Источник <> Неопределено Тогда
		ЗаполнитьЭлементыИсточников(ДеревоЭлементов, Источник, ДоступныеТаблицыЗапроса, Сортировка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыИсточников(Знач ДеревоЭлементов,
						Знач Источник,
						Знач ДоступныеТаблицыЗапроса,
						Знач Сортировать,
						Знач ЛожноеПоле = Ложь)
	
	Если ТипЗнч(Источник) = Тип("ДоступныеТаблицыСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ГруппаДоступныхТаблицСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник.Состав;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДоступнаяТаблицаСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник.Поля;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник.Поля;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник.Поля;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДоступныеПоляСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ИсточникиДанныхСхемыКомпоновкиДанных") Тогда
		КоллекцияЭлементов = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ИсточникиСхемыЗапроса") Тогда

		ЗаполнитьЭлементыИсточников(
			ДеревоЭлементов,
			Источник.Источник,
			ДоступныеТаблицыЗапроса,
			Сортировать,
			ЛожноеПоле);
			
		Возврат;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник.ДоступныеПоля;
	ИначеЕсли ТипЗнч(Источник) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник.ДоступныеПоля;
	ИначеЕсли ТипЗнч(Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		КоллекцияЭлементов = Источник.ДоступныеПоля;
	Иначе
		Возврат;
	КонецЕсли;

	ДеревоЭлементов.Очистить();
	КоличествоЭлементов = КоллекцияЭлементов.Количество();
	
	Если Не ЛожноеПоле Тогда
		
		Для Индекс = 0 По КоличествоЭлементов - 1 Цикл
			
			Элемент = КоллекцияЭлементов.Получить(Индекс);
			
			Если ТипЗнч(Элемент) = Тип("ГруппаДоступныхТаблицСхемыЗапроса") Тогда
				
				Если Элемент.Представление = "Справочники" Тогда
					
					ДобавитьЭлементИсточника(ДеревоЭлементов, Элемент, Индекс, ДоступныеТаблицыЗапроса, Сортировать);
					Прервать;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ДобавитьЭлементИсточника(ДеревоЭлементов, Элемент, Индекс, ДоступныеТаблицыЗапроса, Сортировать);
			
		КонецЦикла;
		
	Иначе
		
		Если КоличествоЭлементов > 0 Тогда
			НовыйЭлемент = ДеревоЭлементов.Добавить();
			НовыйЭлемент["Имя"] = "ЛожноеПоле";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сортировать Тогда
		БыстраяСортировка(ДеревоЭлементов, "Представление");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементИсточника(Знач ДеревоЭлементов,
						Знач Источник,
						Знач Позиция,
						Знач ДоступныеТаблицыЗапроса,
						Знач Сортировка)
						
	ТекущийУровень 	= Неопределено;
	МассивУровней 	= Неопределено;
	
	Если ТипЗнч(Источник) = Тип("ГруппаДоступныхТаблицСхемыЗапроса") Тогда
		
		НовыйЭлемент = ДеревоЭлементов.Добавить();
		НовыйЭлемент["Тип"] 			= 1;
		НовыйЭлемент["Представление"] 	= Источник.Представление;
		НовыйЭлемент["Имя"] 			= Источник.Представление;
		НовыйЭлемент["Индекс"] 			= Позиция;
		
		Если НовыйЭлемент.Свойство("ИндексКартинки") Тогда
			НовыйЭлемент["ИндексКартинки"] = ПолучитьКартинкуИсточника(НовыйЭлемент["Имя"],,, Истина);
		КонецЕсли;

		ЗаполнитьЭлементыИсточников(
			НовыйЭлемент.ПолучитьЭлементы(),
			Источник.Состав,
			ДоступныеТаблицыЗапроса,
			Сортировка,
			Истина);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДоступнаяТаблицаСхемыЗапроса") Тогда
		
		Если (Найти(Источник.Имя, ".Изменения") = СтрДлина(Источник.Имя) - СтрДлина(".Изменения") + 1) Тогда
			
			Если (Найти(Источник.Имя, ".Изменения") > 0) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйЭлемент = ДеревоЭлементов.Добавить();
		
		Если ТекущийУровень = Неопределено Тогда
			ТекущийУровень = ПолучитьТекущийУровень(НовыйЭлемент);
		КонецЕсли;
		
		Если МассивУровней = Неопределено Тогда
			МассивУровней = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяКорневогоЭлемента, ".");
		КонецЕсли;
		
		Если ТекущийУровень > МассивУровней.Количество() Тогда
			ДеревоЭлементов.Удалить(НовыйЭлемент);
			Возврат;
		КонецЕсли;
		
		ТребуемыйУровень = МассивУровней.Получить(ТекущийУровень);
		
		Если ТребуемыйУровень = Неопределено Или ("Справочник." + ТребуемыйУровень) <> Источник.Имя Тогда
			ДеревоЭлементов.Удалить(НовыйЭлемент);
			Возврат;
		КонецЕсли;
		
		НовыйЭлемент["Тип"] 			= 1;
		НовыйЭлемент["Имя"] 			= Источник.Имя;
		НовыйЭлемент["Представление"] 	= Сред(Источник.Имя, Найти(Источник.Имя, ".") + 1, СтрДлина(Источник.Имя));
		НовыйЭлемент["Индекс"] 			= Позиция;
		
		Если НовыйЭлемент.Свойство("ИндексКартинки") Тогда
			
			КартинкаРодителя = Неопределено;
			НовыйЭлемент["ИндексКартинки"] = ПолучитьКартинкуИсточника(НовыйЭлемент["Имя"], АдресКэшаКартинок,, КартинкаРодителя);
			Родитель = НовыйЭлемент.ПолучитьРодителя();
			
			Если Родитель <> Неопределено И КартинкаРодителя <> Неопределено Тогда
				Родитель["ИндексКартинки"] = КартинкаРодителя;
			КонецЕсли;;
			
		КонецЕсли;
		
		ЗаполнитьЭлементыИсточников(
			НовыйЭлемент.ПолучитьЭлементы(),
			Источник.Поля,
			ДоступныеТаблицыЗапроса,
			Сортировка,
			Истина);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
		
		НовыйЭлемент = ДеревоЭлементов.Добавить();
		
		//ТекущийУровень = ПолучитьТекущийУровень(НовыйЭлемент);
		//МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяКорневогоЭлемента, ".");
		//
		//Если ТекущийУровень <= (МассивСтрок.Количество() - 1) Тогда
		//	
		//	ТребуемыйУровень = МассивСтрок.Получить(ТекущийУровень);
		//	
		//	Если ТребуемыйУровень = Неопределено Или ТребуемыйУровень <> Источник.Имя Тогда
		//		ДеревоЭлементов.Удалить(НовыйЭлемент);
		//		Возврат;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		НовыйЭлемент["Тип"] 			= 2;
		НовыйЭлемент["Представление"] 	= Источник.Имя;
		НовыйЭлемент["Имя"] 			= ПолучитьИмя(НовыйЭлемент["Тип"], НовыйЭлемент);
		НовыйЭлемент["ТипЗначения"] 	= Источник.ТипЗначения;
		НовыйЭлемент["Индекс"] 			= Позиция;
		
		Если НовыйЭлемент.Свойство("ИндексКартинки") Тогда
			НовыйЭлемент["ИндексКартинки"] = ПолучитьКартинкуДоступногоПоля(Источник);
		КонецЕсли;

		ЗаполнитьЭлементыИсточников(
			НовыйЭлемент.ПолучитьЭлементы(),
			Источник.Поля,
			ДоступныеТаблицыЗапроса,
			Сортировка,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийУровень(НовыйЭлемент)
	
	Родитель 	= НовыйЭлемент.ПолучитьРодителя();
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Родитель.Имя, ".");
	
	Возврат МассивСтрок.Количество();
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДерево(Дерево, Знач Уровень, ВсегоУровней)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		
		Если Уровень = ВсегоУровней Тогда
			
			ДоступныеТаблицыПередРазворачиваниемНаСервере(ИдентификаторСтроки);
			Элементы.ДоступныеТаблицы.Развернуть(ИдентификаторСтроки);
			
			РазвернутьДерево(Строка, Уровень - 1, ВсегоУровней);
			
		ИначеЕсли Уровень > 0 И СтрНайти(ИмяКорневогоЭлемента, Строка.Имя) > 0 Тогда
			
			ДоступныеТаблицыПередРазворачиваниемНаСервере(ИдентификаторСтроки);
			Элементы.ДоступныеТаблицы.Развернуть(ИдентификаторСтроки);
			
			РазвернутьДерево(Строка, Уровень - 1, ВсегоУровней);
			
		ИначеЕсли Уровень = 0 Тогда
			
			Если Строка.Имя = ИмяКорневогоЭлемента Тогда
				Элементы.ДоступныеТаблицы.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсточник(Знач ИсточникДанных, Знач Индексы)
	
	Источник = ИсточникДанных;
	
	Для Позиция = 0 По Индексы.Количество() - 1 Цикл
		
		Если ТипЗнч(Источник) = Тип("QuerySchemaAvailableTables") Тогда
			Источник = Источник.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaSources") Тогда
			Источник = Источник.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaSource") Тогда
			Источник = Источник.Источник.ДоступныеПоля.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaAvailableTablesGroup") Тогда
			Источник = Источник.Content.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaAvailableTable") Тогда
			Источник = Источник.Поля.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaAvailableNestedTable") Тогда
			Источник = Источник.Поля.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaAvailableField") Тогда
			Источник = Источник.Поля.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaAvailableFields") Тогда
			Источник = Источник.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaTable") Тогда
			Источник = Источник.ДоступныеПоля.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaNestedQuery") Тогда
			Источник = Источник.ДоступныеПоля.Получить(Индексы[Позиция]);
		ИначеЕсли ТипЗнч(Источник) = Тип("QuerySchemaTempTableDescription") Тогда
			Источник = Источник.ДоступныеПоля.Получить(Индексы[Позиция]);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Источник;
	
КонецФункции

&НаСервере
Функция ПолучитьКартинкуИсточника(Знач ИмяТаблицы,
							 Val IsNestedTableRet = Неопределено,
							 Val КартинкаРодителя = Неопределено,
							 Val TablesGroup = Ложь)
	
	КэшИсточникаКартинокИзменен = Ложь;
	ТипыИсточника 				= Неопределено;
	
	Если АдресКэшаКартинок <> Неопределено Тогда
		КэшИсточникаКартинок = ПолучитьИзВременногоХранилища(АдресКэшаКартинок);
	КонецЕсли;

	Если КэшИсточникаКартинок <> Неопределено Тогда
		
		ТипыИсточника 				= КэшИсточникаКартинок.Получить("ТипыИсточника_");
		ТаблицаКартинокИсточника 	= КэшИсточникаКартинок.Получить(ИмяТаблицы);
		
		Если ТаблицаКартинокИсточника <> Неопределено Тогда
			
			IsNestedTableRet = ТаблицаКартинокИсточника["IsNestedTableRet"];
			КартинкаРодителя = ТаблицаКартинокИсточника["КартинкаРодителя"];
			
			Возврат ТаблицаКартинокИсточника["Картинка"];
			
		КонецЕсли;
		
	КонецЕсли;

	Если IsNestedTableRet <> Неопределено Тогда
		IsNestedTableRet = Ложь;
	КонецЕсли;

	Картинка 	= -1;
	Pos 		= Найти(ИмяТаблицы, ".Cube.") + Найти(ИмяТаблицы, ".Куб.");
	
	Если Pos > 0 Тогда
		КартинкаРодителя 	= 14;
		Картинка 			= 36;
	КонецЕсли;

	Если ТипЗнч(ТипыИсточника) <> Тип("Массив") Тогда
		
		ТипыИсточника = Новый Массив;

		ДобавитьТипИсточника(ТипыИсточника, "Справочник.", 1,, "Справочники");
		ДобавитьТипИсточника(ТипыИсточника, "Документ.", 2,, "Документы");
		ДобавитьТипИсточника(ТипыИсточника, "КритерийОтбора.", 37,, "КритерииОтбора");
		ДобавитьТипИсточника(ТипыИсточника, "РегистрРасчета.", 8, Истина, "РегистрыРасчета");
		ДобавитьТипИсточника(ТипыИсточника, "РегистрСведений.", 3, Истина, "РегистрыСведений");
		ДобавитьТипИсточника(ТипыИсточника, "РегистрНакопления.", 6, Истина, "РегистрыНакопления");
		ДобавитьТипИсточника(ТипыИсточника, "Отчет.", 15,, "Отчеты");
		ДобавитьТипИсточника(ТипыИсточника, "Обработка.", 11, , "Обработки");
		ДобавитьТипИсточника(ТипыИсточника, "Перечисление.", 13,, "Перечисления");
		ДобавитьТипИсточника(ТипыИсточника, "Константа.", 10,, "Константы");
		ДобавитьТипИсточника(ТипыИсточника, "ЖурналДокументов.", 12,, "ЖурналыДокументов");
		ДобавитьТипИсточника(ТипыИсточника, "ПланВидовХарактеристик.", 4,, "ПланыВидовХарактеристик");
		ДобавитьТипИсточника(ТипыИсточника, "ВнешнийИсточникДанных.", 35, Истина, "ВнешнийИсточникДанных",, 14);
		ДобавитьТипИсточника(ТипыИсточника, "Задача.", 16, Истина, "Задачи");
		ДобавитьТипИсточника(ТипыИсточника, "ПланСчетов.", 32, Истина, "ПланыСчетов");
		ДобавитьТипИсточника(ТипыИсточника, "ПланВидовРасчета.", 9,, "ПланыВидовРасчета");
		ДобавитьТипИсточника(ТипыИсточника, "ПланОбмена.", 31, Истина, "ПланыОбмена");
		ДобавитьТипИсточника(ТипыИсточника, "БизнесПроцесс.", 7, Истина, "БизнесПроцессы");
		
		Если КэшИсточникаКартинок <> Неопределено Тогда
			КэшИсточникаКартинок.Вставить("ТипыИсточника_", ТипыИсточника);
			КэшИсточникаКартинокИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	TmpTableName = ИмяТаблицы;
	Pos = Найти(TmpTableName, ".");
	N = 0;
	Пока Найти(TmpTableName, ".") Цикл
		TmpTableName = Сред(TmpTableName, Pos + 1, СтрДлина(TmpTableName));
		Pos = Найти(TmpTableName, ".");
		N = N + 1;
	КонецЦикла;

	Если Картинка < 0 Тогда
		
		Для Каждого ТипИсточника Из ТипыИсточника Цикл
			
			Если (ТипИсточника["Equival"] <> "")
				И (ИмяТаблицы = ТипИсточника["Equival"]) Тогда
				
				КартинкаРодителя = ТипИсточника["КартинкаРодителя"];
				Картинка = ТипИсточника["Картинка"];
				
				Прервать;
				
			КонецЕсли;
			
			F = Найти(ИмяТаблицы, ТипИсточника["Имя"]);
			Если ((F > 0) AND (F = ТипИсточника["НачПозиция"]))
				Или ((F > 0) AND (ТипИсточника["НачПозиция"] = 0)) Тогда
				
				Если (N >= 2) И (ТипИсточника["HaveNested"] = Ложь) Тогда
					
					Если IsNestedTableRet <> Неопределено Тогда
						IsNestedTableRet = True;
					КонецЕсли;
					Картинка = 29; // для вложенной таблицы
					
					Прервать;
					
				Иначе
					
					КартинкаРодителя 	= ТипИсточника["КартинкаРодителя"];
					Картинка 			= ТипИсточника["Картинка"];
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Если Картинка < 0 Тогда
		
		Pos = Найти(ИмяТаблицы, ".");
		Если (Pos = 0) И (StrLen(TmpTableName) > 0) Тогда // для временной таблицы
			Если Не TablesGroup Тогда
				Картинка = 17;  // это для временной таблицы
			Иначе
				Картинка = 14; // а это для группы внешнего источника
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КэшИсточникаКартинок <> Неопределено Тогда
		ТаблицаКартинокИсточника = Новый Структура;
		ТаблицаКартинокИсточника.Вставить("Картинка", Картинка);
		ТаблицаКартинокИсточника.Вставить("IsNestedTableRet", IsNestedTableRet);
		ТаблицаКартинокИсточника.Вставить("КартинкаРодителя", КартинкаРодителя);

		КэшИсточникаКартинок.Вставить(ИмяТаблицы, ТаблицаКартинокИсточника);
		КэшИсточникаКартинокИзменен = Истина;
	КонецЕсли;
	
	Если КэшИсточникаКартинокИзменен Тогда
		ПоместитьВоВременноеХранилище(КэшИсточникаКартинок, АдресКэшаКартинок);
	КонецЕсли; 
	
	Возврат Картинка;
	
КонецФункции

&НаСервере
Процедура ДобавитьТипИсточника(Знач ТипыИсточника, 
							Знач Имя, 
							Знач Картинка, 
							Знач HaveNested = Ложь, 
							Знач Equival = "", 
							Знач НачПозиция = 1, 
							Знач КартинкаРодителя = Неопределено)
						
	Перем Элемент;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Имя", 				Имя);
	Элемент.Вставить("Картинка", 			Картинка);
	Элемент.Вставить("HaveNested", 			HaveNested);
	Элемент.Вставить("Equival", 			Equival);
	Элемент.Вставить("НачПозиция", 			НачПозиция);
	Элемент.Вставить("КартинкаРодителя", 	КартинкаРодителя);

	ТипыИсточника.Добавить(Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКартинкуДоступногоПоля(Знач Поле)
	
	Если ТипЗнч(Поле) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
		
		Если Поле.Роль.Измерение Тогда
			Возврат 27;
		ИначеЕсли Поле.Роль.Ресурс Тогда
			Возврат 23;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 22;
	
КонецФункции

&НаСервере
Процедура БыстраяСортировка(Коллекция, Поле, low = Неопределено, high = Неопределено)
	
	Если low = Неопределено Или high = Неопределено Тогда
		low = 0;
		high = Коллекция.Количество() - 1;
	КонецЕсли;

	Если (Коллекция.Количество() = 0) Или (Коллекция.Количество() = 1) Тогда
		Возврат;
	КонецЕсли;
	
	i = low;
	j = high;
	m = Коллекция[(i + j) / 2];

	Пока i <= j Цикл
		
		Пока Коллекция[i][Поле] < m[Поле] Цикл
			i = i + 1
		КонецЦикла;
		
		Пока Коллекция[j][Поле] > m[Поле] Цикл
			j = j - 1
		КонецЦикла;
		
		Если i <= j Тогда
			
			Если i <> j Тогда
				Коллекция.Сдвинуть(j, i - j);
				Коллекция.Сдвинуть(i + 1, j - i - 1);
			КонецЕсли;
			i = i + 1;
			j = j - 1;
			
		КонецЕсли;
		
	КонецЦикла;

	if low < j then
		БыстраяСортировка(Коллекция, Поле, low, j);
	EndIf;

	If i < high Then
		БыстраяСортировка(Коллекция, Поле, i, high);
	EndIf;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмя(Знач Тип, Знач Элемент)

	Имя = "";
	
	Если Тип = 1 Тогда // Если таблица
		
		РодительскийЭлемент 	= Элемент.ПолучитьРодителя();
		ПредставлениеЭлемента 	= СтрЗаменить(Элемент["Представление"], ".", "");
		
		Если РодительскийЭлемент <> Неопределено Тогда
			
			ПредставлениеРодителя = СтрЗаменить(РодительскийЭлемент["Представление"], ".", "");
			
			Если РодительскийЭлемент["Тип"] >= 0 Тогда
				Имя = ПредставлениеРодителя + "." + ПредставлениеЭлемента;
			Иначе
				Имя = ПредставлениеЭлемента;
			КонецЕсли;
			
		Иначе
			Имя = ПредставлениеЭлемента;
		КонецЕсли;
		
	ИначеЕсли Тип = 2 Тогда // Если поле
		
		Имя = ПолучитьИмяПоля(Элемент, 3);
		
		Если Имя = "" Тогда
			Имя = Элемент["Представление"];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяПоля(Знач Элемент, Знач Тип = 1)

	РодительскийЭлемент = Элемент.GetParent();
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Если Элемент["Тип"] <> 2 Тогда
		Имя = СтрЗаменить(Элемент["Представление"], ".", "");
	Иначе
		Имя = Элемент["Представление"];
	КонецЕсли;

	Если РодительскийЭлемент["Тип"] <> 2 Тогда
		
		Если Найти(РодительскийЭлемент["Имя"], ".") = 0 Тогда
			ПредставлениеРодителя = "";
		Иначе
			ПредставлениеРодителя = СтрЗаменить(РодительскийЭлемент["Представление"], ".", "");
		КонецЕсли;
		
	Иначе
		ПредставлениеРодителя = РодительскийЭлемент["Представление"];
	КонецЕсли;
	
	Если РодительскийЭлемент["Тип"] <> 1 Тогда
		
		ПредставлениеРодителя = ПолучитьИмяПоля(РодительскийЭлемент, Тип);
		
		Если ПредставлениеРодителя = "" Тогда
			ПредставлениеРодителя = РодительскийЭлемент["Имя"];
		КонецЕсли;
		
		Имя = ПредставлениеРодителя + "." + Имя;
		
	Иначе
		
		Если Тип = 3 Тогда
			Имя = РодительскийЭлемент["Имя"] + "." + Имя;
		Иначе
			
			Если ПредставлениеРодителя <> "" Тогда
				Имя = ПредставлениеРодителя + "." + Имя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

&НаКлиенте
Функция ЭтоЛожноеПоле(Знач Единица)
	
	ЭлементыЕдиницы = Единица.ПолучитьЭлементы();
	
	Если (ЭлементыЕдиницы.Количество() = 1) И (ЭлементыЕдиницы.Получить(0)["Имя"] = "ЛожноеПоле") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДоступныеТаблицыПередРазворачиваниемНаСервере(Знач Строка, Знач Уровень = 1)
	
	РазвернутьНаСервере(Строка, Уровень);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьНаСервере(Знач Строка, Знач Уровень = 1, Запрос = Неопределено)
	
	Если Запрос = Неопределено Тогда
		
		СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресСхемыЗапроса);
		
		Если СхемаЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = ПолучитьЗапросИзСхемы(СхемаЗапроса);
		
	КонецЕсли;

	Если ТипЗнч(Запрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		Возврат;
	КонецЕсли;

	ТекущиеЭлементы = ДоступныеТаблицы.НайтиПоИдентификатору(Строка);
	
	Индексы = Новый Массив;
	Индексы.Вставить(0, ТекущиеЭлементы["Индекс"]);
	
	Родитель = ТекущиеЭлементы.ПолучитьРодителя();
	
	Пока (Родитель <> Неопределено) И (Родитель["Тип"] > 0) Цикл
		Индексы.Вставить(0, Родитель["Индекс"]);
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;

	ЗаполнитьИсточникиПоИндексам(ТекущиеЭлементы.ПолучитьЭлементы(), Запрос.ДоступныеТаблицы, Индексы);
	
	Если Уровень > 1 Тогда
		
		Для Каждого Элемент Из ТекущиеЭлементы.ПолучитьЭлементы() Цикл
			
			Если (Элемент.ПолучитьЭлементы().Количество() = 1)
				И (Элемент.ПолучитьЭлементы().Получить(0)["Имя"] = "ЛожноеПоле") Тогда
				
				РазвернутьНаСервере(Элемент.ПолучитьИдентификатор(), Уровень - 1, Запрос);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
