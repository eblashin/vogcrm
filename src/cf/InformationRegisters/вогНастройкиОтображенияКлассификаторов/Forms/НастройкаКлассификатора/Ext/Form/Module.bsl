
// + Тищенко В.В.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Классификатор = Параметры.Классификатор;
	
	Если НЕ ЗначениеЗаполнено(Классификатор) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Параметры.Адрес) Тогда
		ВходящаяСтруктура 				= ПолучитьИзВременногоХранилища(Параметры.Адрес);
		СписокЗначенийКлассификатора	= ЗначениеИзСтрокиВнутр(ВходящаяСтруктура.Значение);
	КонецЕсли;
	
	//Если ЭтоАдресВременногоХранилища(Параметры.СписокРасшифровкиКлассификатора) Тогда
	//	СписокРасшифровкиКлассификатора.Загрузить(ПолучитьИзВременногоХранилища(Параметры.СписокРасшифровкиКлассификатора));
	//	ИспользоватьРасшифровку = СписокРасшифровкиКлассификатора.Количество() <> 0;
	//КонецЕсли;
	
	Параметры.Свойство("ИспользоватьРасшифровкуДляОтчета", ИспользоватьРасшифровкуДляОтчета);
	
	ОтображатьЗаголовокКлассификатора 				= Параметры.ОтображатьЗаголовок;
	ВыводитьТолькоЗаполненныеЗначения				= Параметры.ВыводитьТолькоЗаполненныеЗначения;
	
	Если ВходящаяСтруктура <> Неопределено Тогда
		Если ВходящаяСтруктура.Свойство("ИспользоватьАналитику") Тогда
			ИспользоватьАналитику							= ВходящаяСтруктура.ИспользоватьАналитику;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьСписокЗначенийКлассификатора();
	ЗаполнитьСписокРасшифровкиКлассификатора(Параметры.СписокРасшифровкиКлассификатора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СписокРасшифровкиКлассификатора","Видимость",ИспользоватьРасшифровку);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИспользоватьРасшифровкуДляОтчета","Видимость",ИспользоватьРасшифровку);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьРасшифровкуПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СписокРасшифровкиКлассификатора","Видимость",ИспользоватьРасшифровку);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИспользоватьРасшифровкуДляОтчета","Видимость",ИспользоватьРасшифровку);
	
	Если ИспользоватьРасшифровку Тогда 
		ЗаполнитьКлассификаторы(Неопределено); 
	Иначе
		
		СписокРасшифровкиТекущегоКлассификатора.Очистить();
		
		Для каждого Стр Из СписокЗначенийКлассификатора Цикл
			
			СтруктураПоиска = Новый Структура("Имя", Стр.Значение);
			МассивНайденных = СписокРасшифровкиКлассификатора.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ЭлементМассива Из МассивНайденных Цикл
				СписокРасшифровкиКлассификатора.Удалить(ЭлементМассива);
			КонецЦикла;
			
		КонецЦикла;
		
		ИспользоватьРасшифровкуДляОтчета = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗначенийКлассификатора

&НаКлиенте
Процедура СписокЗначенийКлассификатораПометкаПриИзменении(Элемент)
	
	Если ИспользоватьРасшифровку Тогда
		
		ТекущиеДанные = Элементы.СписокЗначенийКлассификатора.ТекущиеДанные;
		
		Если ТекущиеДанные.Пометка Тогда
			
			СтрокаДобавления 		= СписокРасшифровкиТекущегоКлассификатора.Добавить();
			СтрокаДобавления.Имя 	= ТекущиеДанные.Значение;
			
		Иначе
			
			СтруктураПоиска = Новый Структура("Имя", ТекущиеДанные.Значение);
			МассивНайденных = СписокРасшифровкиТекущегоКлассификатора.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ЭлементМассива Из МассивНайденных Цикл
				СписокРасшифровкиТекущегоКлассификатора.Удалить(ЭлементМассива);
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаРасшифровкиКлассификатора

&НаКлиенте
Процедура ЗаполнитьКлассификаторы(Команда)
	
	СписокРасшифровкиТекущегоКлассификатора.Очистить();
	
	Для каждого Стр Из СписокЗначенийКлассификатора Цикл
		Если Стр.Пометка Тогда
			СтрокаДобавления 		= СписокРасшифровкиТекущегоКлассификатора.Добавить();
			СтрокаДобавления.Имя 	= Стр.Значение;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ИсходящаяСтруктура = Новый Структура("Имя,Значение,ОтображатьЗаголовок,ВыводитьТолькоЗаполненныеЗначения,СписокРасшифровкиКлассификатора,ИспользоватьРасшифровкуДляОтчета,ИспользоватьАналитику"
						,Классификатор,
						СериализоватьСписокЗначений(),
						ОтображатьЗаголовокКлассификатора,
						ВыводитьТолькоЗаполненныеЗначения,
						ВыгрузитьСписокРасшифровкиКлассификатора(),
						ИспользоватьРасшифровкуДляОтчета,
						ИспользоватьАналитику);
	Закрыть(ИсходящаяСтруктура);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьСписокЗначенийКлассификатора()

	Если Классификатор.ВидОтображения 	 = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком
		ИЛИ Классификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком 
		ИЛИ Классификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит
		ИЛИ Классификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение 
		ИЛИ Классификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Классификаторы
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &ЗначениеКлассификатора
		|	И НЕ CRM_ЗначенияКлассификаторов.Ссылка В (&СписокКлассификаторов)
		|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Классификаторы.Ссылка КАК Ссылка
		|ИЗ
		|	Классификаторы КАК Классификаторы");
		Запрос.УстановитьПараметр("ЗначениеКлассификатора",Классификатор);
		Запрос.УстановитьПараметр("СписокКлассификаторов",СписокЗначенийКлассификатора.ВыгрузитьЗначения());
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				СписокЗначенийКлассификатора.Добавить(ВыборкаИзРезультатаЗапроса.Ссылка, ,Истина, БиблиотекаКартинок.СтруктураПодчиненности);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СериализоватьСписокЗначений()
	Возврат ЗначениеВСтрокуВнутр(СписокЗначенийКлассификатора);
КонецФункции

&НаСервере
Функция ВыгрузитьСписокРасшифровкиКлассификатора()
	
	Для Каждого СтрТекущаяРасшифровка Из СписокРасшифровкиТекущегоКлассификатора Цикл
		
		СтруктураОтбора = Новый Структура("Имя", СтрТекущаяРасшифровка.Имя);
		МассивНайденных = СписокРасшифровкиКлассификатора.НайтиСтроки(СтруктураОтбора);
		
		Если МассивНайденных.Количество() = 0 Тогда
			НоваяСтрокаРасшифровки = СписокРасшифровкиКлассификатора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, СтрТекущаяРасшифровка);
		Иначе
			ЗаполнитьЗначенияСвойств(МассивНайденных[0], СтрТекущаяРасшифровка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(СписокРасшифровкиКлассификатора.Выгрузить(),УникальныйИдентификатор);
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьСписокРасшифровкиКлассификатора(Адрес)
	
	СписокРасшифровкиТекущегоКлассификатора.Очистить();
	
	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		
		СписокРасшифровкиКлассификатора.Загрузить(ПолучитьИзВременногоХранилища(Адрес));
		
		Для Каждого СтрЗначение Из СписокЗначенийКлассификатора Цикл
			
			СтруктураПоиска = Новый Структура("Имя", СтрЗначение.Значение);
			МассивНайденных = СписокРасшифровкиКлассификатора.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ЭлементМассива Из МассивНайденных Цикл
				
				НоваяСтрокаРасшифровки = СписокРасшифровкиТекущегоКлассификатора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, ЭлементМассива);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ИспользоватьРасшифровку = СписокРасшифровкиТекущегоКлассификатора.Количество() <> 0;
		Если Не ИспользоватьРасшифровку Тогда
			ИспользоватьРасшифровкуДляОтчета = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// - Тищенко В.В.