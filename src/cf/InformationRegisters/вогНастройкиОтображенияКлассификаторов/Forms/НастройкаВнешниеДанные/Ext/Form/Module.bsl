
// + Тищенко В.В.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Идентификатор 	= Параметры.Идентификатор;
	ТипОтображения	= Параметры.ТипОтображения;
	
	Если ЭтоАдресВременногоХранилища(Параметры.Адрес) Тогда
		ВходящаяСтруктура 						= ПолучитьИзВременногоХранилища(Параметры.Адрес);
		Имя 									= ВходящаяСтруктура.Имя;
		Шаблон									= ВходящаяСтруктура.Шаблон;
		ИспользоватьНеСтандартнуюРасшифровку 	= ВходящаяСтруктура.ИспользоватьНеСтандартнуюРасшифровку;
		Параметр_1								= ВходящаяСтруктура.Параметр_1;
		Параметр_2								= ВходящаяСтруктура.Параметр_2;
		Параметр_3								= ВходящаяСтруктура.Параметр_3;
		Параметр_1_КлиентРасшифровка			= ВходящаяСтруктура.Параметр_1_КлиентРасшифровка;
		Параметр_1_СерверРасшифровка			= ВходящаяСтруктура.Параметр_1_СерверРасшифровка;
		Параметр_2_КлиентРасшифровка			= ВходящаяСтруктура.Параметр_2_КлиентРасшифровка;
		Параметр_2_СерверРасшифровка			= ВходящаяСтруктура.Параметр_2_СерверРасшифровка;
		Параметр_3_КлиентРасшифровка			= ВходящаяСтруктура.Параметр_3_КлиентРасшифровка;
		Параметр_3_СерверРасшифровка			= ВходящаяСтруктура.Параметр_3_СерверРасшифровка;
		// ++ VOG Солодов В.В. 07.11.2019 task 821
		ТаблицаНастроек 						= ПолучитьИзВременногоХранилища(ВходящаяСтруктура.АдресТаблицыНастроек);
		Если ТипЗнч(ТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
			ТаблицаПолейЗапроса.Загрузить(ТаблицаНастроек);
		КонецЕсли;
		ВыводитьШапку							= ВходящаяСтруктура.ВыводитьШапку;
		// -- VOG Солодов В.В. 07.11.2019
		ТекстЗапроса.УстановитьТекст(ВходящаяСтруктура.Текстзапроса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИспользоватьНеСтандартнуюРасшифровкуПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	ПолучитьТекстОбработчика();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНеСтандартнуюРасшифровкуПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаПараметрыРасшифровки","Видимость",ИспользоватьНеСтандартнуюРасшифровку);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("Параметр_1");
	МассивПараметров.Добавить("Параметр_2");
	МассивПараметров.Добавить("Параметр_3");
	УстановитьВидимостьОбработчикиРасшифровки(МассивПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Параметр_ПриИзменении(Элемент)
	ИзменитьВидимостьПараметровРасшифровки(Элемент.Имя,ЭтаФорма[Элемент.Имя]);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	ТекстЗапросаВФорме 	= СокрЛП(ТекстЗапроса.ПолучитьТекст());
	
	КонструкторЗапроса 	= Новый КонструкторЗапроса(ТекстЗапросаВФорме);
	Оповещение 			= Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект, Неопределено);
	КонструкторЗапроса.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Если ЗначениеЗаполнено(Имя) Тогда
		ИсходящаяСтруктура = Новый Структура;
		ИсходящаяСтруктура.Вставить("Имя"									, Имя);
		ИсходящаяСтруктура.Вставить("ТекстЗапроса"							, ТекстЗапроса.ПолучитьТекст());
		ИсходящаяСтруктура.Вставить("Шаблон"								, Шаблон);
		ИсходящаяСтруктура.Вставить("ИспользоватьНеСтандартнуюРасшифровку"	, ИспользоватьНеСтандартнуюРасшифровку);
		ИсходящаяСтруктура.Вставить("Параметр_1"							, Параметр_1);
		ИсходящаяСтруктура.Вставить("Параметр_2"							, Параметр_2);
		ИсходящаяСтруктура.Вставить("Параметр_3"							, Параметр_3);
		ИсходящаяСтруктура.Вставить("Параметр_1_КлиентРасшифровка"			, Параметр_1_КлиентРасшифровка);
		ИсходящаяСтруктура.Вставить("Параметр_1_СерверРасшифровка"			, Параметр_1_СерверРасшифровка);
		ИсходящаяСтруктура.Вставить("Параметр_2_КлиентРасшифровка"			, Параметр_2_КлиентРасшифровка);
		ИсходящаяСтруктура.Вставить("Параметр_2_СерверРасшифровка"			, Параметр_2_СерверРасшифровка);
		ИсходящаяСтруктура.Вставить("Параметр_3_КлиентРасшифровка"			, Параметр_3_КлиентРасшифровка);
		ИсходящаяСтруктура.Вставить("Параметр_3_СерверРасшифровка"			, Параметр_3_СерверРасшифровка);
		// ++ VOG Солодов В.В. 07.11.2019 task 821
		МассивСтруктурНастроек = ПолучитьАдресТаблицыНастроек();
		ИсходящаяСтруктура.Вставить("МассивСтруктурНастроек"				, МассивСтруктурНастроек);
		ИсходящаяСтруктура.Вставить("ВыводитьШапку"							, ВыводитьШапку);
		// -- VOG Солодов В.В. 07.11.2019
		Закрыть(ИсходящаяСтруктура);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите имя источника'"));
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 07.11.2019 task 821
&НаКлиенте
Процедура ЗаполнитьПоляЗапроса(Команда)
	
	ТаблицаПолейЗапроса.Очистить();
	ПоляЗапроса = ПолучитьПоляЗапросаНаСервере(ТекстЗапроса);
	
	Если ПоляЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из ПоляЗапроса Цикл
		
		НоваяСтрока = ТаблицаПолейЗапроса.Добавить();
		НоваяСтрока.Поле = Поле;
		
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 07.11.2019

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапроса(ТекстЗапросаВФорме, ДополнительныеПараметры) Экспорт
	Если ТекстЗапросаВФорме <> Неопределено Тогда
		ТекстЗапроса.Очистить();
		ТекстЗапроса.УстановитьТекст(ТекстЗапросаВФорме);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстОбработчика()
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		ТекстЗапроса.УстановитьТекст(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон,"ПроизвольныйКод",Истина));
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьВидимостьПараметровРасшифровки(ИмяПараметра,Текст)
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ИмяПараметра);
	УстановитьВидимостьОбработчикиРасшифровки(МассивПараметров,Текст);
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьВидимостьОбработчикиРасшифровки(МассивПараметров,Текст = Неопределено)
	
	Для каждого Стр Из МассивПараметров Цикл	
		НомерГруппы 					= Прав(Строка(Стр),1);
		Флаг 							= ?(Текст = Неопределено, ЗначениеЗаполнено(ЭтаФорма[Стр]),ЗначениеЗаполнено(Текст));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаПараметрРасшифровки_"+НомерГруппы+"_Обработчики","Видимость",Флаг);
		
		РеквизитГруппыСервер = "Параметр_"+ НомерГруппы +"_СерверРасшифровка";
		ЭтаФорма[РеквизитГруппыСервер] 	= ?(Флаг,ЭтаФорма[РеквизитГруппыСервер],"");
		
		РеквизитГруппыКлиент = "Параметр_"+ НомерГруппы +"_КлиентРасшифровка";
		ЭтаФорма[РеквизитГруппыКлиент] 	= ?(Флаг,ЭтаФорма[РеквизитГруппыКлиент],"");
	КонецЦикла;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 07.11.2019 task 821
&НаСервереБезКонтекста
Функция ПолучитьПоляЗапросаНаСервере(Знач ТекстЗапроса)
	
	врТекстЗапроса = ТекстЗапроса.ПолучитьТекст();
	
	Если ЗначениеЗаполнено(врТекстЗапроса) Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		
		Попытка
			СхемаЗапроса.УстановитьТекстЗапроса(врТекстЗапроса);
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Неопределено;
			
		КонецПопытки;
		
		ПоляЗапроса = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1].Колонки;
		МассивПолей = Новый Массив;
		
		Для Каждого Поле Из ПоляЗапроса Цикл
			МассивПолей.Добавить(Поле.Псевдоним);
		КонецЦикла;
		
		Возврат МассивПолей;
		
	КонецЕсли;
	
КонецФункции // -- VOG Солодов В.В. 07.11.2019

&НаСервере
Функция ПолучитьАдресТаблицыНастроек()
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаПолейЗапроса.Выгрузить());
КонецФункции

#КонецОбласти

// - Тищенко В.В.
