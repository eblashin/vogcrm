
// + Тищенко В.В.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СкрытьРаскрытьВсеГруппы(Истина);
	//ЗаполнитьДоступныеОбъекты();
	
	Если Параметры.Ключ.Пустой() Тогда
		Запись.Автор 		= Пользователи.ТекущийПользователь();
		Запись.Наименоваине	= Запись.Объект;
		ИнициализироватьОтбор();
	Иначе
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Построение дерево реквизитов
	Если ЗначениеЗаполнено(ТекущийОбъект.Объект) Тогда
		ПостроитьДеревоРеквизитов(ТекущийОбъект.Объект);
	КонецЕсли;
	
	// Восстановление настроек отображения макета
	НастройкиМакета = ТекущийОбъект.НастройкиМакета.Получить();
	
	Если НастройкиМакета <> Неопределено Тогда
		// Восстановление колонок макета
		КоличествоКолонок = НастройкиМакета.Получить("КоличествоКолонок");
		СоздатьКолонкиСервер();
		// Восстановление отбора
		ИнициализироватьОтбор();
		ТекущиеНастройкиОтбора = НастройкиМакета.Получить("Отбор").Получить();
		Если ТекущиеНастройкиОтбора <> Неопределено Тогда
			Отбор.ЗагрузитьНастройки(ТекущиеНастройкиОтбора);
		КонецЕсли;
		// Восстановление значений колонок
		ТаблицаКолонок = НастройкиМакета.Получить("ТаблицаКолонок");
		Для каждого ТекущаяТаблица Из ТаблицаКолонок Цикл
			ЭтаФорма[ТекущаяТаблица.ИмяКолонки].Загрузить(ЗначениеИзСтрокиВнутр(ТекущаяТаблица.ЗначениеКолонки));
		КонецЦикла;
		// Восстановление разделов
		ТаблицаРазделов = НастройкиМакета.Получить("ТаблицаРазделов");
		Если ТаблицаРазделов.Количество() <> 0 Тогда
			СоздатьРазделыСервер();
			Для каждого ТекущийРаздел Из ТаблицаРазделов Цикл
				// ++ VOG Солодов В.В. 08.11.2019 task 821
				ДеревоРаздела = ЗначениеИзСтрокиВнутр(ТекущийРаздел.ЗначениеРаздела);
				
				Если ДеревоРаздела.Колонки.Найти("ВыводимоеИмя") = Неопределено Тогда
					
					НоваяКолонка = ДеревоРаздела.Колонки.Добавить(
						"ВыводимоеИмя",
						Новый ОписаниеТипов("Строка"),
						"Выводимое имя");
					
				КонецЕсли;
				
				Если ДеревоРаздела.Колонки.Найти("ВыводитьТолькоЗаполненный") = Неопределено Тогда
					
					НоваяКолонка = ДеревоРаздела.Колонки.Добавить(
						"ВыводитьТолькоЗаполненный",
						Новый ОписаниеТипов("Булево"),
						"Только заполненный");
					
				КонецЕсли;
				
				Если ДеревоРаздела.Колонки.Найти("Формат") = Неопределено Тогда
					
					НоваяКолонка = ДеревоРаздела.Колонки.Добавить(
						"Формат",
						Новый ОписаниеТипов("Строка"),
						"Формат");
					
				КонецЕсли;
				
				ЗначениеВДанныеФормы(ДеревоРаздела, ЭтотОбъект[ТекущийРаздел.ИмяРаздела]);
				// До изменения
				//ЗначениеВДанныеФормы(ЗначениеИзСтрокиВнутр(ТекущийРаздел.ЗначениеРаздела),ЭтаФорма[ТекущийРаздел.ИмяРаздела]);
				// -- VOG Солодов В.В. 08.11.2019
			КонецЦикла;
		КонецЕсли;
		// Восстановление гиперссылок
		СписокГипперссылок.Загрузить(НастройкиМакета.Получить("СписокГипперссылок"));
		// Восстановление внешние данные
		// ++ VOG Солодов В.В. 07.11.2019 task 821
		ВнешниеДанные 	= НастройкиМакета.Получить("СписокВнешниеДанные");
		
		Если ТипЗнч(ВнешниеДанные) = Тип("Массив") Тогда
			
			Для Каждого СтруктураВД Из ВнешниеДанные Цикл
				
				НоваяСтрокаВД = СписокВнешниеДанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВД, СтруктураВД);
				
				Для Каждого СоответствиеНастроек Из СтруктураВД.Настройки Цикл
					Если ТипЗнч(СоответствиеНастроек) = Тип("КлючИЗначение") Тогда
						НоваяСтрокаНастройки = НоваяСтрокаВД.ТаблицаНастроек.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНастройки, СоответствиеНастроек.Значение);
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ВнешниеДанные) = Тип("ТаблицаЗначений") Тогда
			СписокВнешниеДанные.Загрузить(НастройкиМакета.Получить("СписокВнешниеДанные"));
		КонецЕсли;
		// До изменения
		//СписокВнешниеДанные.Загрузить(НастройкиМакета.Получить("СписокВнешниеДанные"));
		// -- VOG Солодов В.В. 07.11.2019
		// Восстановление расшифровка
		СписокРасшифровка.Загрузить(НастройкиМакета.Получить("СписокРасшифровка"));
		// СписокДоступныхКлассификаторов
		СписокДоступныхКлассификаторов.Загрузить(НастройкиМакета.Получить("СписокДоступныхКлассификаторов"));
		// Список отображения заголовков
		СписокОтображаниеЗаголовков.Загрузить(НастройкиМакета.Получить("СписокОтображаниеЗаголовков"));
		// Список Выводить только заполненные значения
		ТЗ_СписокТолькоЗаполненныхЗначений = НастройкиМакета.Получить("СписокВыводитьТолькоЗаполненныеЗначения");
		Если ТЗ_СписокТолькоЗаполненныхЗначений <> Неопределено Тогда
			СписокВыводитьТолькоЗаполненныеЗначения.Загрузить(ТЗ_СписокТолькоЗаполненныхЗначений);
		КонецЕсли;
		// Список Расшифровки классификатора
		ТЗ_СписокРасшифровкиКлассификатора = НастройкиМакета.Получить("СписокРасшифровкиКлассификатора");
		Если ТЗ_СписокРасшифровкиКлассификатора <> Неопределено Тогда
			СписокРасшифровкиКлассификатора.Загрузить(ТЗ_СписокРасшифровкиКлассификатора);
		КонецЕсли;
		// Список Использовать расшифровку для отчета
		ТЗ_СписокИспользоватьРасшифровкуДляОтчета = НастройкиМакета.Получить("СписокИспользоватьРасшифровкуДляОтчета");
		Если ТЗ_СписокИспользоватьРасшифровкуДляОтчета <> Неопределено Тогда
			СписокИспользоватьРасшифровкуДляОтчета.Загрузить(ТЗ_СписокИспользоватьРасшифровкуДляОтчета);
		КонецЕсли;
		// Формирование макета из настроек
		СформироватьМакетСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ГруппаСтраницыПриСменеСтраницы(Неопределено,Элементы.СтраницаНастройкаКолонок);
	
	Если НЕ Параметры.Ключ.Пустой() Тогда
		ПодключитьОбработчикОжидания("ДоступностьРедактированияКоличествоКолонок",1,Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиМакета 				= СформироватьДанныеДляЗаписи();
	ТекущийОбъект.НастройкиМакета 	= Новый ХранилищеЗначения(НастройкиМакета,Новый СжатиеДанных(9));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	Запись.Наименоваине = Запись.Объект;
	Модифицированность 	= Ложь;
	ПостроитьДеревоРеквизитов(Запись.Объект);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИмяЭлемента = Неопределено; 
	
	Если ТекущаяСтраница.Имя = Элементы.СтраницаНастройкаКолонок.Имя Тогда
		ИмяЭлемента 										= Элементы.ДекорацияШаг1.Имя;
		Элементы.ФормаКомандаНазад.Видимость 				= Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость 			= Ложь;
		Элементы.ФормаКомандаДалее.Видимость 				= Истина;
		Элементы.ФормаКомандаДалее.КнопкаПоУмолчанию		= Истина;
	ИначеЕсли ТекущаяСтраница.Имя = Элементы.СтраницаНастройкаРазделов.Имя Тогда
		ИмяЭлемента 										= Элементы.ДекорацияШаг2.Имя;
		Элементы.ФормаКомандаНазад.Видимость 				= Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость 			= Ложь;
		Элементы.ФормаКомандаДалее.Видимость 				= Истина;
		Элементы.ФормаКомандаДалее.КнопкаПоУмолчанию		= Истина;
	ИначеЕсли ТекущаяСтраница.Имя = Элементы.СтраницаРезультат.Имя Тогда
		ИмяЭлемента 										= Элементы.ДекорацияШаг3.Имя;
		Элементы.ФормаКомандаНазад.Видимость 				= Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость 			= Истина;
		Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию 	= Истина;
		Элементы.ФормаКомандаДалее.Видимость 				= Ложь;
	КонецЕсли;
	
	Для каждого Шаг Из Элементы.СтраницаШагиНастройкаМакета.ПодчиненныеЭлементы Цикл
		Шаг.Шрифт = Новый Шрифт(,,Ложь);
	КонецЦикла;
	
	Если ИмяЭлемента <> Неопределено Тогда
		Элементы[ИмяЭлемента].Шрифт = Новый Шрифт(,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименоваинеПриИзменении(Элемент)
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	СписокВыбора 			= Новый СписокЗначений;
	ЗаполнитьСписокОбъектыМетаданных(СписокВыбора);
	
	Для каждого ТекЭлемент Из СписокВыбора Цикл
		ТекЭлемент.Картинка = БиблиотекаКартинок.Справочник;
	КонецЦикла;
	
	ДанныеВыбора 			= СписокВыбора;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКолонки

&НаКлиенте
Процедура ОбработчикНачалоПеретаскивание(ПараметрыПеретаскивания,Выполнение)
	ПеретаскиваниеМеждуТаблицами = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПроверкаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() <> 0 Тогда
		
		ТекущаяТаблица					= ЭтаФорма[Элемент.Имя];
		ВыбранноеЗначение				= ПараметрыПеретаскивания.Значение[0];
		
		Если НЕ ПеретаскиваниеМеждуТаблицами Тогда
		
			Если ТипЗнч(ВыбранноеЗначение) 	= Тип("СправочникСсылка.вогРазделыКарточекОбъектов") Тогда
			Если ТекущаяТаблица.НайтиСтроки(Новый Структура("Наименование",ВыбранноеЗначение)).Количество() = 0 Тогда
				СтрокаДобавления 				= ТекущаяТаблица.Добавить();
				СтрокаДобавления.Наименование 	= ВыбранноеЗначение;
				СтрокаДобавления.Пометка		= Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) 	= Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
			Если ТекущаяТаблица.НайтиСтроки(Новый Структура("Наименование",ВыбранноеЗначение)).Количество() = 0 Тогда
				СтрокаДобавления 				= ТекущаяТаблица.Добавить();
				СтрокаДобавления.Наименование 	= ВыбранноеЗначение;
				СтрокаДобавления.Пометка		= Истина;
			КонецЕсли;
		Иначе
			Если ТекущаяТаблица.НайтиСтроки(Новый Структура("Наименование",ВыбранноеЗначение.Путь)).Количество() = 0 И ВыбранноеЗначение.СтандартнаяКартинка <> 6 Тогда
				СтрокаДобавления 				= ТекущаяТаблица.Добавить();
				СтрокаДобавления.Наименование 	= ВыбранноеЗначение.Путь;
				СтрокаДобавления.Пометка 		= Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПеретаскиваниеМеждуТаблицами 	= Ложь;
		Если ТекущаяТаблица.НайтиСтроки(Новый Структура("Наименование",ВыбранноеЗначение.Наименование)).Количество() = 0 Тогда
			СтрокаДобавления 				= ТекущаяТаблица.Добавить();
			СтрокаДобавления.Наименование 	= ВыбранноеЗначение.Наименование;
			СтрокаДобавления.Пометка		= ВыбранноеЗначение.Пометка;
			УдалитьЭлементПеретаскивание 	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОкончаниеПеретаскивание(ПараметрыПеретаскивания,СтандартнаяОбработка)
	
	Если УдалитьЭлементПеретаскивание Тогда
		ТекущаяСтрока 	= ПараметрыПеретаскивания.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			ЭтаФорма[ПараметрыПеретаскивания.Имя].Удалить(ТекущаяСтрока);
		КонецЕсли;
		УдалитьЭлементПеретаскивание = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 01.11.2019 task 821
&НаКлиенте
Процедура КолонкаНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	
	ИмяКолонки 				= Элемент.Родитель.Имя;
	ТекущиеДанные 			= Элементы[ИмяКолонки].ТекущиеДанные;
	
	Если Не ТипЗнч(ТекущиеДанные.Наименование) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита 			= СтрЗаменить(ТекущиеДанные.Наименование, "Объект.", "");
	ИмяКорневогоЭлемента 	= СформироватьИмяКорневогоЭлемента(ИмяРеквизита);
	
	СтруктураПараметров 	= Новый Структура;
	СтруктураПараметров.Вставить("ИмяКорневогоЭлемента", ИмяКорневогоЭлемента);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКолонки", 		ИмяКолонки);
	ДополнительныеПараметры.Вставить("ПредыдущееИмя", 	ТекущиеДанные.Наименование);
	ДополнительныеПараметры.Вставить("ДанныеВыбора", 	ДанныеВыбора);
	
	ОповещениеОЗавершении 	= Новый ОписаниеОповещения(
		"КолонкаНаименованиеНачалоВыбораЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОткрытьФорму(
		"РегистрСведений.вогНастройкиОтображенияКлассификаторов.Форма.ФормаВыбораРеквизита",
		СтруктураПараметров,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаНаименованиеНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеИмя = СформироватьИмяКорневогоЭлемента(ВыбранноеЗначение, Истина);
	
	Если ДополнительныеПараметры.ПредыдущееИмя = НовоеИмя Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица = ЭтотОбъект[ДополнительныеПараметры.ИмяКолонки];
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Наименование", ДополнительныеПараметры.ПредыдущееИмя);
	
	НайденныеСтроки = ТекущаяТаблица.НайтиСТроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.Наименование = НовоеИмя;
	КонецЦикла;
	
	ДополнительныеПараметры.ДанныеВыбора = НовоеИмя;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделЗаполненностьПриИзменении(Элемент)
	
	ИмяКолонки 		= Элемент.Родитель.Имя;
	ТекущиеДанные 	= Элементы[ИмяКолонки].ТекущиеДанные;
	
	Если Не ТекущиеДанные.ОтображениеПоля = 
			ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Поле")
		И Не ТекущиеДанные.ОтображениеПоля = 
			ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Классификатор") Тогда
		
		ТекущиеДанные.ВыводитьТолькоЗаполненный = Не ТекущиеДанные.ВыводитьТолькоЗаполненный;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 01.11.2019

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделы

&НаКлиенте
Процедура ВыборРаздел(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка 	= Ложь;
	ТекущиеДанные 			= Элемент.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоГиперссылка Тогда
		Оповещение 		= Новый ОписаниеОповещения("ИзменитьГиперссылкуЗавершение",ЭтаФорма,ЭтаФорма[Элемент.Имя]);
		ПараметрыФормы 	= Новый Структура("Адрес,Идентификатор,ТипОтображения",ПолучитьНастройкиГиперссылки(ТекущиеДанные.Имя)
											,Запись.Объект,ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Гиперссылка"));
		ОткрытьФорму("РегистрСведений.вогНастройкиОтображенияКлассификаторов.Форма.НастройкаГиперссылки",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,
					,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ТекущиеДанные.ЭтоЗапрос Тогда
		Оповещение 		= Новый ОписаниеОповещения("ИзменитьВнешниеДанныеЗавершение",ЭтаФорма,ЭтаФорма[Элемент.Имя]);
		ПараметрыФормы 	= Новый Структура("Адрес,Идентификатор,ТипОтображения",ПолучитьНастройкиВнешниеДанные(ТекущиеДанные.Имя)
											,Запись.Объект,ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Запрос"));
		ОткрытьФорму("РегистрСведений.вогНастройкиОтображенияКлассификаторов.Форма.НастройкаВнешниеДанные",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,
					,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ТекущиеДанные.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Таблица") Тогда
		Оповещение 				= Новый ОписаниеОповещения("ИзменитьРасшифровкаЗавершение",ЭтаФорма,ЭтаФорма[Элемент.Имя]);
		НайтиСтрокиЗаголовок 	= СписокОтображаниеЗаголовков.НайтиСтроки(Новый Структура("Имя",ТекущиеДанные.Имя));
		Если НайтиСтрокиЗаголовок.Количество() <> 0 Тогда
			ОтображатьЗаголовок = НайтиСтрокиЗаголовок[0].Значение;
		Иначе
			ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		ПараметрыФормы 	= Новый Структура("Адрес,Идентификатор,ТипОтображения,Имя,ОтображатьЗаголовок",ПолучитьНастройкиРасшифровка(ТекущиеДанные.Имя)
						,Запись.Объект,ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Расшифровка"),ТекущиеДанные.Имя,ОтображатьЗаголовок);
		ОткрытьФорму("РегистрСведений.вогНастройкиОтображенияКлассификаторов.Форма.НастройкаРасшифровки",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,
					,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ТекущиеДанные.ЭтоКлассификатор Тогда
		Оповещение 				= Новый ОписаниеОповещения("ИзменитьКлассификатор",ЭтаФорма,ЭтаФорма[Элемент.Имя]);
		// Отображать заголовки
		НайтиСтрокиЗаголовок 	= СписокОтображаниеЗаголовков.НайтиСтроки(Новый Структура("Имя",ТекущиеДанные.Имя));
		Если НайтиСтрокиЗаголовок.Количество() <> 0 Тогда
			ОтображатьЗаголовок = НайтиСтрокиЗаголовок[0].Значение;
		Иначе
			ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		// Выводить только заполненные значения
		НайтиСтрокиТолькЗаполненынеЗначения 	= СписокВыводитьТолькоЗаполненныеЗначения.НайтиСтроки(Новый Структура("Имя",ТекущиеДанные.Имя));
		Если НайтиСтрокиТолькЗаполненынеЗначения.Количество() <> 0 Тогда
			ВыводитьТолькоЗаполненныеЗначения 	= НайтиСтрокиТолькЗаполненынеЗначения[0].Значение;
		Иначе
			ВыводитьТолькоЗаполненныеЗначения 	= Ложь;
		КонецЕсли;
		// Использовать расшифровку для отчета (Отчет вогРезультатыОпросов)
		НайтиСтрокиИспользоватьРасшифровкуДляОтчета = СписокИспользоватьРасшифровкуДляОтчета.НайтиСтроки(Новый Структура("Имя",ТекущиеДанные.Имя));
		Если НайтиСтрокиИспользоватьРасшифровкуДляОтчета.Количество() <> 0 Тогда
			ИспользоватьРасшифровкуДляОтчета 	= НайтиСтрокиИспользоватьРасшифровкуДляОтчета[0].Значение;
		Иначе
			ИспользоватьРасшифровкуДляОтчета 	= Ложь;
		КонецЕсли;
		ПараметрыФормы 	= Новый Структура("Классификатор,Адрес,ОтображатьЗаголовок,ВыводитьТолькоЗаполненныеЗначения,СписокРасшифровкиКлассификатора,ИспользоватьРасшифровкуДляОтчета"
						,ТекущиеДанные.Имя,
						ПолучитьНастройкиКлассификатора(ТекущиеДанные.Имя),
						ОтображатьЗаголовок,
						ВыводитьТолькоЗаполненныеЗначения,
						ВыгрузитьСписокРасшифровкиКлассификаторов(),
						ИспользоватьРасшифровкуДляОтчета);
		ОткрытьФорму("РегистрСведений.вогНастройкиОтображенияКлассификаторов.Форма.НастройкаКлассификатора",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,
					,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачалоПеретаскиваниеРаздел(ПараметрыПеретаскивания,Выполнение)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПроверкаПеретаскиваниеРаздел(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПеретаскиваниеРаздел(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() <> 0 Тогда
		ТекущаяТаблица		= ЭтаФорма[Элемент.Имя].ПолучитьЭлементы();
		ВыбранноеЗначение	= ПараметрыПеретаскивания.Значение[0];
		// Добавление в колонки
		Если ВыбранноеЗначение.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Поле")
			ИЛИ ВыбранноеЗначение.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Классификатор") 
			И НЕ ВыбранноеЗначение.ЭтоТаблица Тогда
			ИндексТаблицы 					= СтрЗаменить(Элемент.Имя,"Раздел","");
			ИмяТаблицы 						= "Колонка" + ИндексТаблицы;
			СтрокаДобавления 				= ЭтаФорма[ИмяТаблицы].Добавить();
			СтрокаДобавления.Наименование 	= ВыбранноеЗначение.Имя;
			СтрокаДобавления.Пометка 		= ВыбранноеЗначение.Пометка;
		ИначеЕсли ВыбранноеЗначение.ЭтоТаблица Тогда
			СтандартнаяОбработка			= Ложь;
			ИндексТаблицы 					= СтрЗаменить(Элемент.Имя,"Раздел","");
			ИмяТаблицыРаздела 				= "Раздел" + ИндексТаблицы;
			ИмяТаблицы 						= "Колонка" + ИндексТаблицы;
			// Начало добавление в раздел
			ПеретаскиваниеСформироватьРеквизитыТабличнойЧасти(ИмяТаблицыРаздела,ВыбранноеЗначение.Имя);
			// Конец добавление в раздел
			СтрокаДобавления 				= ЭтаФорма[ИмяТаблицы].Добавить();
			СтрокаДобавления.Наименование 	= ВыбранноеЗначение.Имя;
			СтрокаДобавления.Пометка 		= ВыбранноеЗначение.Пометка;
		ИначеЕсли ВыбранноеЗначение.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Разделитель") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		Если СтандартнаяОбработка Тогда
			// Добавление в раздел
			СтрокаДобавления 	= ТекущаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавления,ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОкончаниеПеретаскиваниеРаздел(ПараметрыПеретаскивания,СтандартнаяОбработка)
	
	ТекущаяСтрока 	= ПараметрыПеретаскивания.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		// Уадление из раздела
		ЭтаФорма[ПараметрыПеретаскивания.Имя].ПолучитьЭлементы().Удалить(ТекущаяСтрока);
		// Удаление из колонки
		Если ТекущаяСтрока.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Поле")
			ИЛИ ТекущаяСтрока.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Классификатор")
			ИЛИ ТекущаяСтрока.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Таблица") Тогда
			ИндексТаблицы 					= СтрЗаменить(ПараметрыПеретаскивания.Имя,"Раздел","");
			ИмяТаблицы 						= "Колонка" + ИндексТаблицы;
			НайденныеСтроки = ЭтаФорма[ИмяТаблицы].НайтиСтроки(Новый Структура("Наименование",ТекущаяСтрока.Имя));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				УдалаемоеЗначение = НайденныеСтроки[0];
				ЭтаФорма[ИмяТаблицы].Удалить(УдалаемоеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКолонки(Команда)
	
	Если Элементы.СворачиваемаяГруппаКолонки.ПодчиненныеЭлементы.Количество() = 0 Тогда
		СоздатьКолонкиСервер();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветПользователя", ЭтотОбъект), НСтр("ru = 'Перед изменением кол-во колонок  список колонок будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	РаскрытьГруппу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)
	
	Если КоличествоКолонок <> 0 Тогда
		ДобавитьКолонкуСервер();
	Иначе
		ТекстСообщения = Нстр("ru= 'Перед добавление колонки. Создайте колонки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя 		= Элементы.СтраницаНастройкаКолонок.Имя Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница 			= Элементы.СтраницаНастройкаРазделов;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя 	= Элементы.СтраницаНастройкаРазделов.Имя Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница 			= Элементы.СтраницаРезультат;
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(Неопределено,Элементы.ГруппаСтраницы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя 		= Элементы.СтраницаНастройкаРазделов.Имя Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница 			= Элементы.СтраницаНастройкаКолонок;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя 	= Элементы.СтраницаРезультат.Имя Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница 			= Элементы.СтраницаНастройкаРазделов;
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(Неопределено,Элементы.ГруппаСтраницы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРазделы(Команда)
	
	Если Элементы.СворачиваемаяГруппаРазделы.ПодчиненныеЭлементы.Количество() = 0 Тогда
		СоздатьРазделыСервер();
		ЗаполнитьРазделы();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветПользователяРазделы", ЭтотОбъект), НСтр("ru = 'Перед изменением кол-во разделов  список разделов будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	РаскрытьГруппу(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРазделы(Команда)
	ОбновитьРазделыСервер();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьМакет(Команда)
	СформироватьМакетСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортМакета(Команда)
	
	Если Параметры.Ключ.Пустой() Тогда
		Записать();
	КонецЕсли;
		
	ДиалогВыбораКаталога 		= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ОпопвещениеВыборКаталога 	= Новый ОписаниеОповещения("ВыбранКаталог",ЭтотОбъект);
	ДиалогВыбораКаталога.Показать(ОпопвещениеВыборКаталога);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка выполнена");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеКолонок

&НаСервере
Процедура СоздатьКолонкиСервер()
	
	Для Сч = 1 По КоличествоКолонок Цикл
		
		Группа = СоздатьГруппу("ГруппаТаблица_"+Сч,Элементы.СворачиваемаяГруппаКолонки);
		
		КоманднаяПанельТаблицы 		= Элементы.Добавить("КоманднаяПанельТаблицы_" +Сч,Тип("ГруппаФормы"),Группа);
		КоманднаяПанельТаблицы.Вид	= ВидГруппыФормы.КоманднаяПанель;
		
		НоваяКоманда 						= Команды.Добавить("Колонка_Вверх_"+Сч);
		НоваяКоманда.Действие 				= "КомандаВверх";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.ПереместитьВверх;
		
		СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаВверх_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Колонка_Вверх_"+Сч;
		НовыйЭлемент.Заголовок 				= "Вверх";
		
		НоваяКоманда 						= Команды.Добавить("Колонка_Низ_"+Сч);
		НоваяКоманда.Действие 				= "КомандаВниз";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.ПереместитьВниз;
		
		СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаВниз_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Колонка_Низ_"+Сч;
		НовыйЭлемент.Заголовок 				= "Вниз";
		
		НоваяКоманда 						= Команды.Добавить("Колонка_УстановитьФлажки_"+Сч);
		НоваяКоманда.Действие 				= "КомандаУстановитьФлажки";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.УстановитьФлажки;
		
		СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаУстановитьФлажки_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Колонка_УстановитьФлажки_"+Сч;
		НовыйЭлемент.Заголовок 				= "Установить пометки";
		
		НоваяКоманда 						= Команды.Добавить("Колонка_СнятьФлажки_"+Сч);
		НоваяКоманда.Действие 				= "КомандаСнятьФлажки";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.СнятьФлажки;
		
		СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКоманда_СнятьФлажки_" +Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Колонка_СнятьФлажки_"+Сч;
		НовыйЭлемент.Заголовок 				= "Снять пометки";
		
		НоваяКоманда 						= Команды.Добавить("Колонка_УдалитьЗначение_"+Сч);
		НоваяКоманда.Действие 				= "КомандаУдалитьЗначение";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.Удалить;
		
		СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКоманда_УдалитьЗначение_" +Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Колонка_УдалитьЗначение_"+Сч;
		НовыйЭлемент.Заголовок 				= "Удалить значение";
		
		НоваяКоманда 						= Команды.Добавить("Колонка_УдалитьКолонку_"+Сч);
		НоваяКоманда.Действие 				= "КомандаУдалитьКолонку";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.УдалитьНепосредственно;
		
		СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКоманда_УдалитьКолонку_" +Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Колонка_УдалитьКолонку_"+Сч;
		НовыйЭлемент.Заголовок 				= "Удалить колонку";
		
		ДобавляемыеРеквизиты 		= Новый Массив;
		КолонкаМакета 				= Новый РеквизитФормы("Колонка_" + Сч, Новый ОписаниеТипов("ТаблицаЗначений"), , "Колонка_"+Сч, Ложь);
		ДобавляемыеРеквизиты.Добавить(КолонкаМакета);
		
		ЗначениеКолонки 		= Новый РеквизитФормы("Пометка", Новый ОписаниеТипов("Булево"),"Колонка_" + Сч, "Пометка", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЗначениеКолонки);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.вогРазделыКарточекОбъектов"));
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы"));
		МассивТипов.Добавить(Тип("Строка"));
		
		ЗначениеКолонки 		= Новый РеквизитФормы("Наименование", Новый ОписаниеТипов(МассивТипов),"Колонка_" + Сч , "Наименование", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЗначениеКолонки);
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ТаблицаФормы 				= ЭтаФорма.Элементы.Добавить("Колонка_"+Сч, Тип("ТаблицаФормы"), Группа);
		ТаблицаФормы.ПутьКДанным 	= "Колонка_" + Сч;
		
		Колонка 					= ЭтаФорма.Элементы.Добавить("ПометкаКолонки_" +Сч, Тип("ПолеФормы"), ТаблицаФормы);
		Колонка.ПутьКДанным 		= "Колонка_" + Сч+"."+"Пометка";
		Колонка.Вид 				= ВидПоляФормы.ПолеФлажка;
		Колонка.ТолькоПросмотр 		= Ложь;
		Колонка.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Колонка 					= ЭтаФорма.Элементы.Добавить("ЗначениеКолонки_" +Сч, Тип("ПолеФормы"), ТаблицаФормы);
		Колонка.ПутьКДанным 		= "Колонка_" + Сч+"."+"Наименование";
		// ++ VOG Солодов В.В. 01.11.2019 task 821
		Колонка.Вид 					= ВидПоляФормы.ПолеВвода;
		Колонка.ТолькоПросмотр 			= Ложь;
		Колонка.РедактированиеТекста 	= Ложь;
		Колонка.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		Колонка.КнопкаВыпадающегоСписка = Ложь;
		Колонка.КнопкаОткрытия 			= Ложь;
		Колонка.КнопкаСоздания 			= Ложь;
		Колонка.ИсторияВыбораПриВводе 	= ИсторияВыбораПриВводе.НеИспользовать;
		Колонка.УстановитьДействие("НачалоВыбора", "КолонкаНаименованиеНачалоВыбора");
		// До изменения
		//Колонка.ТолькоПросмотр 		= Истина;
		// -- VOG Солодов В.В. 01.11.2019
		
		ТаблицаФормы.ПоложениеЗаголовка				= ПоложениеЗаголовкаЭлементаФормы.Верх;
		ТаблицаФормы.ПоложениеКоманднойПанели		= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ТаблицаФормы.ИзменятьСоставСтрок			= Ложь;
		ТаблицаФормы.ИзменятьПорядокСтрок			= Истина;
		ТаблицаФормы.Подвал							= Ложь;
		ТаблицаФормы.Шапка							= Ложь;
		ТаблицаФормы.ГоризонтальныеЛинии			= Ложь;
		ТаблицаФормы.ВертикальныеЛинии 				= Ложь;
		ТаблицаФормы.ПоложениеСтрокиПоиска			= ПоложениеСтрокиПоиска.Верх;
		ТаблицаФормы.АвтоВводНовойСтроки			= Ложь;
		ТаблицаФормы.РежимВыделенияСтроки			= РежимВыделенияСтрокиТаблицы.Строка;
		ТаблицаФормы.ВертикальнаяПолосаПрокрутки	= ИспользованиеПолосыПрокрутки.НеИспользовать;
		ТаблицаФормы.ГоризонтальнаяПолосаПрокрутки	= ИспользованиеПолосыПрокрутки.НеИспользовать;
		ТаблицаФормы.ПоложениеЗаголовка				= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ТаблицаФормы.КонтекстноеМеню.Видимость		= Ложь;
		ТаблицаФормы.РазрешитьПеретаскивание		= Истина;
		ТаблицаФормы.РазрешитьНачалоПеретаскивания	= Истина;
		ТаблицаФормы.УстановитьДействие("ПроверкаПеретаскивания","ОбработчикПроверкаПеретаскивание");
		ТаблицаФормы.УстановитьДействие("Перетаскивание","ОбработчикПеретаскивание");
		ТаблицаФормы.УстановитьДействие("НачалоПеретаскивания","ОбработчикНачалоПеретаскивание");
		ТаблицаФормы.УстановитьДействие("ОкончаниеПеретаскивания","ОбработчикОкончаниеПеретаскивание");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуСервер()

	КоличествоКолонок 	= КоличествоКолонок + 1;
	Сч 					= КоличествоКолонок;
	
	Группа = СоздатьГруппу("ГруппаТаблица_"+Сч,Элементы.СворачиваемаяГруппаКолонки);
	
	КоманднаяПанельТаблицы 		= Элементы.Добавить("КоманднаяПанельТаблицы_" +Сч,Тип("ГруппаФормы"),Группа);
	КоманднаяПанельТаблицы.Вид	= ВидГруппыФормы.КоманднаяПанель;
	
	НоваяКоманда 						= Команды.Добавить("Колонка_Вверх_"+Сч);
	НоваяКоманда.Действие 				= "КомандаВверх";
	НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
	НоваяКоманда.Картинка 				= БиблиотекаКартинок.ПереместитьВверх;
	
	СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
	СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
	
	НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаВверх_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
	НовыйЭлемент.ИмяКоманды 			= "Колонка_Вверх_"+Сч;
	НовыйЭлемент.Заголовок 				= "Вверх";
		
	НоваяКоманда 						= Команды.Добавить("Колонка_Низ_"+Сч);
	НоваяКоманда.Действие 				= "КомандаВниз";
	НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
	НоваяКоманда.Картинка 				= БиблиотекаКартинок.ПереместитьВниз;
	
	СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
	СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
	
	НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаВниз_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
	НовыйЭлемент.ИмяКоманды 			= "Колонка_Низ_"+Сч;
	НовыйЭлемент.Заголовок 				= "Вниз";
	
	НоваяКоманда 						= Команды.Добавить("Колонка_УстановитьФлажки_"+Сч);
	НоваяКоманда.Действие 				= "КомандаУстановитьФлажки";
	НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
	НоваяКоманда.Картинка 				= БиблиотекаКартинок.УстановитьФлажки;
	
	СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
	СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
	
	НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаУстановитьФлажки_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
	НовыйЭлемент.ИмяКоманды 			= "Колонка_УстановитьФлажки_"+Сч;
	НовыйЭлемент.Заголовок 				= "Установить пометки";
	
	НоваяКоманда 						= Команды.Добавить("Колонка_СнятьФлажки_"+Сч);
	НоваяКоманда.Действие 				= "КомандаСнятьФлажки";
	НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
	НоваяКоманда.Картинка 				= БиблиотекаКартинок.СнятьФлажки;
	
	СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
	СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
	
	НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКоманда_СнятьФлажки_" +Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
	НовыйЭлемент.ИмяКоманды 			= "Колонка_СнятьФлажки_"+Сч;
	НовыйЭлемент.Заголовок 				= "Снять пометки";
	
	НоваяКоманда 						= Команды.Добавить("Колонка_УдалитьЗначение_"+Сч);
	НоваяКоманда.Действие 				= "КомандаУдалитьЗначение";
	НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
	НоваяКоманда.Картинка 				= БиблиотекаКартинок.Удалить;
	
	СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
	СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
	
	НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКоманда_УдалитьЗначение_" +Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
	НовыйЭлемент.ИмяКоманды 			= "Колонка_УдалитьЗначение_"+Сч;
	НовыйЭлемент.Заголовок 				= "Удалить значение";
	
	НоваяКоманда 						= Команды.Добавить("Колонка_УдалитьКолонку_"+Сч);
	НоваяКоманда.Действие 				= "КомандаУдалитьКолонку";
	НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
	НоваяКоманда.Картинка 				= БиблиотекаКартинок.УдалитьНепосредственно;
	
	СтрокаДобавленияКоманды				= СписокКоманд.Добавить();
	СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
	
	НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКоманда_УдалитьКолонку_" +Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
	НовыйЭлемент.ИмяКоманды 			= "Колонка_УдалитьКолонку_"+Сч;
	НовыйЭлемент.Заголовок 				= "Удалить колонку";
	
	ДобавляемыеРеквизиты 		= Новый Массив;
	КолонкаМакета 				= Новый РеквизитФормы("Колонка_" + Сч, Новый ОписаниеТипов("ТаблицаЗначений"), , "Колонка_"+Сч, Ложь);
	ДобавляемыеРеквизиты.Добавить(КолонкаМакета);
	
	ЗначениеКолонки 		= Новый РеквизитФормы("Пометка", Новый ОписаниеТипов("Булево"),"Колонка_" + Сч, "Пометка", Ложь);
	ДобавляемыеРеквизиты.Добавить(ЗначениеКолонки);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.вогРазделыКарточекОбъектов"));
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы"));
	МассивТипов.Добавить(Тип("Строка"));
	
	ЗначениеКолонки 		= Новый РеквизитФормы("Наименование", Новый ОписаниеТипов(МассивТипов),"Колонка_" + Сч , "Наименование", Ложь);
	ДобавляемыеРеквизиты.Добавить(ЗначениеКолонки);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ТаблицаФормы 				= ЭтаФорма.Элементы.Добавить("Колонка_"+Сч, Тип("ТаблицаФормы"), Группа);
	ТаблицаФормы.ПутьКДанным 	= "Колонка_" + Сч;
	
	Колонка 					= ЭтаФорма.Элементы.Добавить("ПометкаКолонки_" +Сч, Тип("ПолеФормы"), ТаблицаФормы);
	Колонка.ПутьКДанным 		= "Колонка_" + Сч+"."+"Пометка";
	Колонка.Вид 				= ВидПоляФормы.ПолеФлажка;
	Колонка.ТолькоПросмотр 		= Ложь;
	
	Колонка 					= ЭтаФорма.Элементы.Добавить("ЗначениеКолонки_" +Сч, Тип("ПолеФормы"), ТаблицаФормы);
	Колонка.ПутьКДанным 		= "Колонка_" + Сч+"."+"Наименование";
	Колонка.ТолькоПросмотр 		= Истина;
	
	ТаблицаФормы.ПоложениеЗаголовка				= ПоложениеЗаголовкаЭлементаФормы.Верх;
	ТаблицаФормы.ПоложениеКоманднойПанели		= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаФормы.ИзменятьСоставСтрок			= Ложь;
	ТаблицаФормы.ИзменятьПорядокСтрок			= Истина;
	ТаблицаФормы.Подвал							= Ложь;
	ТаблицаФормы.Шапка							= Ложь;
	ТаблицаФормы.ГоризонтальныеЛинии			= Ложь;
	ТаблицаФормы.ВертикальныеЛинии 				= Ложь;
	ТаблицаФормы.ПоложениеСтрокиПоиска			= ПоложениеСтрокиПоиска.Верх;
	ТаблицаФормы.АвтоВводНовойСтроки			= Ложь;
	ТаблицаФормы.РежимВыделенияСтроки			= РежимВыделенияСтрокиТаблицы.Строка;
	ТаблицаФормы.ВертикальнаяПолосаПрокрутки	= ИспользованиеПолосыПрокрутки.НеИспользовать;
	ТаблицаФормы.ГоризонтальнаяПолосаПрокрутки	= ИспользованиеПолосыПрокрутки.НеИспользовать;
	ТаблицаФормы.ПоложениеЗаголовка				= ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТаблицаФормы.КонтекстноеМеню.Видимость		= Ложь;
	ТаблицаФормы.РазрешитьПеретаскивание		= Истина;
	ТаблицаФормы.РазрешитьНачалоПеретаскивания	= Истина;
	ТаблицаФормы.УстановитьДействие("ПроверкаПеретаскивания","ОбработчикПроверкаПеретаскивание");
	ТаблицаФормы.УстановитьДействие("Перетаскивание","ОбработчикПеретаскивание");
	ТаблицаФормы.УстановитьДействие("НачалоПеретаскивания","ОбработчикНачалоПеретаскивание");
	ТаблицаФормы.УстановитьДействие("ОкончаниеПеретаскивания","ОбработчикОкончаниеПеретаскивание");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкиСервер()
	
	МассивУдаленияЭлементов 	= Новый Массив;
	МассивУдаленияРеквизитов 	= Новый Массив;
	УдалитьЭлементыРекурсивно(Элементы.СворачиваемаяГруппаКолонки,МассивУдаленияЭлементов,МассивУдаленияРеквизитов);
	
	Для каждого Элемент Из МассивУдаленияЭлементов Цикл
		Попытка
			Элементы.Удалить(Элемент);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Для каждого Стр Из СписокКоманд Цикл
		Команды.Удалить(Команды.Найти(Стр.ИмяКоманды));
	КонецЦикла;
	СписокКоманд.Очистить();
	
	ИзменитьРеквизиты(,МассивУдаленияРеквизитов);
	СоздатьКолонкиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДеревоРазделов

&НаСервере
Процедура СоздатьРазделыСервер(ИтераторСчетчика = 1)
	
	КоличествоРазделов 	= 0;
	
	Для Сч = ИтераторСчетчика По КоличествоКолонок Цикл
		
		Группа = СоздатьГруппу("ГруппаДерево_"+Сч,Элементы.СворачиваемаяГруппаРазделы);
		
		КоманднаяПанельТаблицы 		= Элементы.Добавить("КоманднаяПанельДерево_" +Сч,Тип("ГруппаФормы"),Группа);
		КоманднаяПанельТаблицы.Вид	= ВидГруппыФормы.КоманднаяПанель;
		
		НоваяКоманда 						= Команды.Добавить("Раздел_Вверх_"+Сч);
		НоваяКоманда.Действие 				= "КомандаВверх";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.ПереместитьВверх;
		
		СтрокаДобавленияКоманды				= СписокКомандДерево.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаВверхРаздел_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Раздел_Вверх_"+Сч;
		НовыйЭлемент.Заголовок 				= "Вверх";
		
		НоваяКоманда 						= Команды.Добавить("Раздел_Низ_"+Сч);
		НоваяКоманда.Действие 				= "КомандаВниз";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.ПереместитьВниз;
		
		СтрокаДобавленияКоманды				= СписокКомандДерево.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаВнизРаздел_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Раздел_Низ_"+Сч;
		НовыйЭлемент.Заголовок 				= "Вниз";
		
		НоваяКоманда 						= Команды.Добавить("Раздел_СоздатьЗаголовок_"+Сч);
		НоваяКоманда.Действие 				= "КомандаСоздатьЗаголовк";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.CRM_Информация;
		
		СтрокаДобавленияКоманды				= СписокКомандДерево.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаСоздатьЗаголовк_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Раздел_СоздатьЗаголовок_"+Сч;
		НовыйЭлемент.Заголовок 				= "Создать заголовок";
				
		НоваяКоманда 						= Команды.Добавить("Раздел_ДобавитьРазделитель_"+Сч);
		НоваяКоманда.Действие 				= "КомандаДобавитьРазделитель";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.CRM_СтрелкаВниз;
		
		СтрокаДобавленияКоманды				= СписокКомандДерево.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаДобавитьРазделитель_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Раздел_ДобавитьРазделитель_"+Сч;
		НовыйЭлемент.Заголовок 				= "Добавить разделитель";

		НоваяКоманда 						= Команды.Добавить("Раздел_ДобавитьГиперссылку_"+Сч);
		НоваяКоманда.Действие 				= "КомандаДобавитьГиперссылку";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.ВставитьНовуюГиперссылку;
		
		СтрокаДобавленияКоманды				= СписокКомандДерево.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаДобавитьГиперСсылку_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Раздел_ДобавитьГиперссылку_"+Сч;
		НовыйЭлемент.Заголовок 				= "Добавить гипрерссылку";
		
		НоваяКоманда 						= Команды.Добавить("Раздел_ДобавитьВнешниеДанные_"+Сч);
		НоваяКоманда.Действие 				= "КомандаДобавитьВнешниеДанные";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.КонструкторЗапроса;
		
		СтрокаДобавленияКоманды				= СписокКомандДерево.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаДобавитьВнешниеДанные_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Раздел_ДобавитьВнешниеДанные_"+Сч;
		НовыйЭлемент.Заголовок 				= "Добавить внешние данные";

		НоваяКоманда 						= Команды.Добавить("Раздел_УдалитьЗаголовок_"+Сч);
		НоваяКоманда.Действие 				= "КомандаУдалитьЗаголовок";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.Удалить;
		
		СтрокаДобавленияКоманды				= СписокКомандДерево.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаУдалитьЗаголовк_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Раздел_УдалитьЗаголовок_"+Сч;
		НовыйЭлемент.Заголовок 				= "Удалить заголовок";
		
		// ++ VOG Солодов В.В. 08.11.2019 task 821
		// Команда форматирование
		НоваяКоманда 						= Команды.Добавить("Раздел_Форматирование_" + Сч);
		НоваяКоманда.Действие 				= "КомандаФорматирование";
		НоваяКоманда.Отображение			= ОтображениеКнопки.Картинка;
		НоваяКоманда.Картинка 				= БиблиотекаКартинок.ФорматированиеШрифтЦветТекста;
		НоваяКоманда.Подсказка 				= "Установить форматирование текущего элемента";
		
		СтрокаДобавленияКоманды				= СписокКомандДерево.Добавить();
		СтрокаДобавленияКоманды.ИмяКоманды 	= НоваяКоманда.Имя;
		
		НовыйЭлемент 						= Элементы.Добавить("КнопкаНоваяКомандаФорматирование_"+ Сч, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
		НовыйЭлемент.ИмяКоманды 			= "Раздел_Форматирование_" + Сч;
		НовыйЭлемент.Заголовок 				= "Форматирование";
		
		// -- VOG Солодов В.В. 08.11.2019
		
		ДобавляемыеРеквизиты 		= Новый Массив;
		РазделМакета 				= Новый РеквизитФормы("Раздел_" + Сч, Новый ОписаниеТипов("ДеревоЗначений"), , "Раздел_"+Сч, Ложь);
		ДобавляемыеРеквизиты.Добавить(РазделМакета);
		
		// ++ VOG Солодов В.В. 08.11.2019 task 821
		Пометка = Новый РеквизитФормы("Пометка", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "Включен", Ложь);
		// До изменения
		//Пометка = Новый РеквизитФормы("Пометка", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "Пометка", Ложь);
		// -- VOG Солодов В.В. 08.11.2019
		ДобавляемыеРеквизиты.Добавить(Пометка);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.вогРазделыКарточекОбъектов"));
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы"));
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		МассивТипов.Добавить(Тип("Строка"));
		
		Имя 				= Новый РеквизитФормы("Имя", Новый ОписаниеТипов(МассивТипов),"Раздел_" + Сч, "Имя", Ложь);
		ДобавляемыеРеквизиты.Добавить(Имя);
		
		ОтображениеПоля 	= Новый РеквизитФормы("ОтображениеПоля", Новый ОписаниеТипов("ПеречислениеСсылка.вогНастройкаОтображенияКлассификатор"),"Раздел_" + Сч, "Отображение поля", Ложь);
		ДобавляемыеРеквизиты.Добавить(ОтображениеПоля);
		
		СтандартнаяКартинка = Новый РеквизитФормы("СтандартнаяКартинка", Новый ОписаниеТипов("Число"),"Раздел_" + Сч, "СтандартнаяКартинка", Ложь);
		ДобавляемыеРеквизиты.Добавить(СтандартнаяКартинка);
		
		Синоним 			= Новый РеквизитФормы("Синоним", Новый ОписаниеТипов(МассивТипов),"Раздел_" + Сч, "Синоним", Ложь);
		ДобавляемыеРеквизиты.Добавить(Синоним);
		
		ЭтоКлассификатор 	= Новый РеквизитФормы("ЭтоКлассификатор", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "ЭтоКлассификатор", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЭтоКлассификатор);
		
		ЭтоРеквизит 		= Новый РеквизитФормы("ЭтоРеквизит", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "ЭтоРеквизит", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЭтоРеквизит);
		
		ЭтоТаблица 			= Новый РеквизитФормы("ЭтоТаблица", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "ЭтоТаблица", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЭтоТаблица);
		
		ЭтоРеквизитТаблицы 	= Новый РеквизитФормы("ЭтоРеквизитТаблицы", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "ЭтоРеквизитТаблицы", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЭтоРеквизитТаблицы);
		
		ЭтоЗаголовок 		= Новый РеквизитФормы("ЭтоЗаголовок", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "ЭтоЗаголовок", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЭтоЗаголовок);
		
		ЭтоГиперссылка 		= Новый РеквизитФормы("ЭтоГиперссылка", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "ЭтоГиперссылка", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЭтоГиперссылка);
		
		ЭтоЗапрос 			= Новый РеквизитФормы("ЭтоЗапрос", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "ЭтоЗапрос", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЭтоЗапрос);
		
		ЭтоРаздилитель 		= Новый РеквизитФормы("ЭтоРаздилитель", Новый ОписаниеТипов("Булево"),"Раздел_" + Сч, "ЭтоРаздилитель", Ложь);
		ДобавляемыеРеквизиты.Добавить(ЭтоРаздилитель);
		
		// ++ VOG Солодов В.В. 06.11.2019 task 821
		ВыводимоеИмя = Новый РеквизитФормы("ВыводимоеИмя", Новый ОписаниеТипов("Строка"),"Раздел_" + Сч, "ВыводимоеИмя", Ложь);
		ДобавляемыеРеквизиты.Добавить(ВыводимоеИмя);
		
		ТолькоЗаполненный 		= Новый РеквизитФормы(
			"ВыводитьТолькоЗаполненный",
			Новый ОписаниеТипов("Булево"),
			"Раздел_" + Сч,
			"Только заполненный",
			Ложь);
		ДобавляемыеРеквизиты.Добавить(ТолькоЗаполненный);
		
		Формат = Новый РеквизитФормы("Формат", Новый ОписаниеТипов("Строка"),"Раздел_" + Сч, "Формат", Ложь);
		ДобавляемыеРеквизиты.Добавить(Формат);
		// -- VOG Солодов В.В. 06.11.2019
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ТаблицаФормы 				= ЭтаФорма.Элементы.Добавить("Раздел_"+Сч, Тип("ТаблицаФормы"), Группа);
		ТаблицаФормы.ПутьКДанным 	= "Раздел_" + Сч;
		
		Колонка 					= ЭтаФорма.Элементы.Добавить("ПометкаДерево" +Сч, Тип("ПолеФормы"), ТаблицаФормы);
		Колонка.ПутьКДанным 		= "Раздел_" + Сч+"."+"Пометка";
		Колонка.Вид 				= ВидПоляФормы.ПолеФлажка;
		
		Колонка 					= ЭтаФорма.Элементы.Добавить("Имя_" +Сч, Тип("ПолеФормы"), ТаблицаФормы);
		Колонка.ПутьКДанным 		= "Раздел_" + Сч+"."+"Имя";
		
		Колонка 					= ЭтаФорма.Элементы.Добавить("ОтображениеПоля" +Сч, Тип("ПолеФормы"), ТаблицаФормы);
		Колонка.ПутьКДанным 		= "Раздел_" + Сч+"."+"ОтображениеПоля";
		Колонка.Доступность			= Истина;
		Колонка.Вид					= ВидПоляФормы.ПолеВвода;
		
		// ++ VOG Солодов В.В. 06.11.2019 task 821
		Колонка 					= ЭтаФорма.Элементы.Добавить("ВыводимоеИмя_" + Сч, Тип("ПолеФормы"), ТаблицаФормы);
		Колонка.ПутьКДанным 		= "Раздел_" + Сч + "." + "ВыводимоеИмя";
		Колонка.Вид 				= ВидПоляФормы.ПолеВвода;
		Колонка.ТолькоПросмотр 		= Ложь;
		
		Колонка 					= ЭтаФорма.Элементы.Добавить("ЗаполнениеКолонки_" + Сч, Тип("ПолеФормы"), ТаблицаФормы);
		Колонка.ПутьКДанным 		= "Раздел_" + Сч + "." + "ВыводитьТолькоЗаполненный";
		Колонка.Вид 				= ВидПоляФормы.ПолеФлажка;
		Колонка.ТолькоПросмотр 		= Ложь;
		Колонка.Подсказка 			= "Признак вывода на макет только заполненного значения.";
		Колонка.УстановитьДействие("ПриИзменении", "РазделЗаполненностьПриИзменении");
		
		Колонка 					= ЭтаФорма.Элементы.Добавить("Формат_" + Сч, Тип("ПолеФормы"), ТаблицаФормы);
		Колонка.ПутьКДанным 		= "Раздел_" + Сч + "." + "Формат";
		Колонка.Вид 				= ВидПоляФормы.ПолеНадписи;
		Колонка.ТолькоПросмотр 		= Ложь;
		Колонка.Подсказка 			= "Форматирование.";
		// -- VOG Солодов В.В. 06.11.2019
		
		ТаблицаФормы.ПоложениеЗаголовка				= ПоложениеЗаголовкаЭлементаФормы.Верх;
		ТаблицаФормы.ПоложениеКоманднойПанели		= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ТаблицаФормы.РазрешитьНачалоПеретаскивания 	= Истина;
		ТаблицаФормы.РазрешитьПеретаскивание		= Истина;
		ТаблицаФормы.ИзменятьСоставСтрок			= Ложь;
		ТаблицаФормы.ИзменятьПорядокСтрок			= Истина;
		ТаблицаФормы.Подвал							= Ложь;
		//ТаблицаФормы.Шапка							= Ложь; // VOG Солодов В.В. 06.11.2019 task 821 // Закомментировал
		ТаблицаФормы.ГоризонтальныеЛинии			= Ложь;
		ТаблицаФормы.ВертикальныеЛинии 				= Ложь;
		ТаблицаФормы.ПоложениеСтрокиПоиска			= ПоложениеСтрокиПоиска.Верх;
		ТаблицаФормы.АвтоВводНовойСтроки			= Ложь;
		ТаблицаФормы.РежимВыделенияСтроки			= РежимВыделенияСтрокиТаблицы.Строка;
		ТаблицаФормы.ВертикальнаяПолосаПрокрутки	= ИспользованиеПолосыПрокрутки.НеИспользовать;
		ТаблицаФормы.ГоризонтальнаяПолосаПрокрутки	= ИспользованиеПолосыПрокрутки.НеИспользовать;
		ТаблицаФормы.ПоложениеЗаголовка				= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ТаблицаФормы.КартинкаСтрок					= БиблиотекаКартинок.ДополнительныеРеквизитыСведения;
		ТаблицаФормы.ПутьКДаннымКартинкиСтроки		= "Раздел_"+Сч+"."+"СтандартнаяКартинка";
		ТаблицаФормы.УстановитьДействие("Выбор","ВыборРаздел");
		ТаблицаФормы.УстановитьДействие("ПроверкаПеретаскивания","ОбработчикПроверкаПеретаскиваниеРаздел");
		ТаблицаФормы.УстановитьДействие("Перетаскивание","ОбработчикПеретаскиваниеРаздел");
		ТаблицаФормы.УстановитьДействие("НачалоПеретаскивания","ОбработчикНачалоПеретаскиваниеРаздел");
		ТаблицаФормы.УстановитьДействие("ОкончаниеПеретаскивания","ОбработчикОкончаниеПеретаскиваниеРаздел");
		
		КоличествоРазделов = КоличествоРазделов + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРазделыСервер()
	
	МассивУдаленияЭлементов 	= Новый Массив;
	МассивУдаленияРеквизитов 	= Новый Массив;
	УдалитьЭлементыРекурсивно(Элементы.СворачиваемаяГруппаРазделы,МассивУдаленияЭлементов,МассивУдаленияРеквизитов);
	
	Для каждого Элемент Из МассивУдаленияЭлементов Цикл
		Попытка
			Элементы.Удалить(Элемент);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Для каждого Стр Из СписокКомандДерево Цикл
		Команды.Удалить(Команды.Найти(Стр.ИмяКоманды));
	КонецЦикла;
	
	СписокКомандДерево.Очистить();
	СписокГипперссылок.Очистить();
	СписокВнешниеДанные.Очистить();
	СписокРасшифровка.Очистить();
	СписокДоступныхКлассификаторов.Очистить();
	СписокОтображаниеЗаголовков.Очистить();
	ИзменитьРеквизиты(,МассивУдаленияРеквизитов);
	СоздатьРазделыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделы()
	
	Для Сч =1 По КоличествоКолонок Цикл
		Попытка
			КолонкаМакета 				= ЭтаФорма["Колонка_" + Сч];
			ТекущийРаздел 				= Неопределено;
			МассивГруппКлассификаторов 	= Новый Массив;
			МассивКлассификаторов		= Новый Массив;
			МассивРеквизитов			= Новый Массив;
			Если КолонкаМакета.Количество() <> 0 Тогда;
				Для каждого ТекущаяКолонка Из КолонкаМакета Цикл
					Если ТекущаяКолонка.Пометка И ТипЗнч(ТекущаяКолонка.Наименование) = Тип("СправочникСсылка.вогРазделыКарточекОбъектов") Тогда
						МассивГруппКлассификаторов.Добавить(ТекущаяКолонка.Наименование);
					ИначеЕсли ТекущаяКолонка.Пометка И ТипЗнч(ТекущаяКолонка.Наименование) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
						МассивКлассификаторов.Добавить(ТекущаяКолонка.Наименование);
					Иначе
						МассивРеквизитов.Добавить(ТекущаяКолонка.Наименование);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТекущийРаздел = ДанныеФормыВЗначение(ЭтаФорма["Раздел_"+Сч],Тип("ДеревоЗначений"));
			
			Если МассивРеквизитов.Количество() <> 0 Тогда
				ОбъектМетданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Запись.Объект);
				Для каждого ТекущийРеквизит Из МассивРеквизитов Цикл
					РеквзитОбъекта 				= СтрЗаменить(ТекущийРеквизит,"Объект.","");
					НайденныйРевизит			= ОбъектМетданных.Реквизиты.Найти(СокрЛП(РеквзитОбъекта));
					НайденыйСтандартныйРеквизит = Неопределено;
					
					Для каждого СтанРеквизит Из ОбъектМетданных.СтандартныеРеквизиты Цикл
						Если СтанРеквизит.Имя = СокрЛП(РеквзитОбъекта) Тогда
							НайденыйСтандартныйРеквизит = СтанРеквизит;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					НайденнаяТЧ					= ОбъектМетданных.ТабличныеЧасти.Найти(СокрЛП(РеквзитОбъекта));
					Если НайденныйРевизит <> Неопределено Тогда
						ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
						ЭлементРаздела.Имя 					= ТекущийРеквизит;
						ЭлементРаздела.СтандартнаяКартинка 	= 1;
						ЭлементРаздела.Пометка				= Истина;
						ЭлементРаздела.ЭтоРеквизит			= Истина;
						ЭлементРаздела.Синоним				= НайденныйРевизит.Синоним;
						ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Поле;
					ИначеЕсли НайденыйСтандартныйРеквизит <> Неопределено Тогда
						ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
						ЭлементРаздела.Имя 					= ТекущийРеквизит;
						ЭлементРаздела.СтандартнаяКартинка 	= 1;
						ЭлементРаздела.Пометка				= Истина;
						ЭлементРаздела.ЭтоРеквизит			= Истина;
						Если ЗначениеЗаполнено(НайденыйСтандартныйРеквизит.Синоним) Тогда
							ЭлементРаздела.Синоним			= НайденыйСтандартныйРеквизит.Синоним;
						Иначе
							ЭлементРаздела.Синоним 			= НайденыйСтандартныйРеквизит.Имя;
						КонецЕсли;
						ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Поле;
					ИначеЕсли НайденнаяТЧ <> Неопределено Тогда
						ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
						ЭлементРаздела.Имя 					= ТекущийРеквизит;
						ЭлементРаздела.СтандартнаяКартинка 	= 0;
						ЭлементРаздела.Пометка				= Истина;
						ЭлементРаздела.ЭтоТаблица			= Истина;
						ЭлементРаздела.Синоним				= НайденнаяТЧ.Синоним;
						ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Таблица;
						Для каждого ЭлементТаблицы Из НайденнаяТЧ.Реквизиты Цикл
							РеквизитыРаздела 						= ЭлементРаздела.Строки.Добавить();
							РеквизитыРаздела.Имя 					= ЭлементТаблицы.Имя;
							РеквизитыРаздела.СтандартнаяКартинка 	= 1;
							РеквизитыРаздела.Пометка 				= Истина;
							РеквизитыРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Поле;
							РеквизитыРаздела.ЭтоРеквизитТаблицы		= Истина;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если МассивКлассификаторов.Количество() <> 0 Тогда
				Для каждого СтрКлассификатор Из МассивКлассификаторов Цикл
					ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
					ЭлементРаздела.Имя 					= СтрКлассификатор;
					ЭлементРаздела.СтандартнаяКартинка 	= 2;
					ЭлементРаздела.Пометка				= Истина;
					ЭлементРаздела.ЭтоКлассификатор		= Истина;
					ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор;
				КонецЦикла;
			КонецЕсли;
			
			Если МассивГруппКлассификаторов.Количество() <> 0 Тогда
				ЗначенияКлассификатора = ПолучитьЗначенияКлассификатора(МассивГруппКлассификаторов);
				Если ЗначенияКлассификатора <> Неопределено Тогда
					Для каждого ПерУровень Из ЗначенияКлассификатора.Строки Цикл
						ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
						ЭлементРаздела.Имя 					= ПерУровень.Ссылка;
						ЭлементРаздела.СтандартнаяКартинка 	= 0;
						ЭлементРаздела.Пометка				= Истина;
						ЭлементРаздела.ЭтоКлассификатор		= Истина;
						ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Группа;
						Для каждого ВторУровень Из ПерУровень.Строки Цикл
							РеквизитыРаздела 						= ЭлементРаздела.Строки.Добавить();
							РеквизитыРаздела.Имя 					= ВторУровень.ДанныеРаздела;
							РеквизитыРаздела.СтандартнаяКартинка 	= 2;
							РеквизитыРаздела.Пометка 				= Истина;
							РеквизитыРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор;
							РеквизитыРаздела.ЭтоКлассификатор		= Истина;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ЗначениеВДанныеФормы(ТекущийРаздел,ЭтаФорма["Раздел_"+Сч]);
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияКлассификатора(МассивГруппКлассификаторов)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вогРазделыКарточекОбъектовСоставРаздела.Ссылка КАК Ссылка,
	|	вогРазделыКарточекОбъектовСоставРаздела.ДанныеРаздела КАК ДанныеРаздела
	|ИЗ
	|	Справочник.вогРазделыКарточекОбъектов.СоставРаздела КАК вогРазделыКарточекОбъектовСоставРаздела
	|ГДЕ
	|	вогРазделыКарточекОбъектовСоставРаздела.Ссылка В(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка");
	Запрос.УстановитьПараметр("Ссылка",МассивГруппКлассификаторов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьРазделыСервер()
	
	// Добавить недостоющие разделы
	Если КоличествоКолонок > КоличествоРазделов Тогда
		Разница 			= КоличествоКолонок - КоличествоРазделов;
		Итератор 			= КоличествоКолонок - Разница;
		СоздатьРазделыСервер(Итератор + 1);
		КоличествоРазделов 	= КоличествоКолонок;
	КонецЕсли;
	
	// Начало Обновить данные разделов 
	
	// Удалить данные из разделов (Неактуальные значения)
	
	Для Сч = 1 По КоличествоКолонок Цикл
		
		ТаблицаРазделов = "Раздел_" + Сч;
		ТекущиеДерево 	= ДанныеФормыВЗначение(ЭтаФорма[ТаблицаРазделов],Тип("ДеревоЗначений"));
		
		Для каждого ЭлементДерева Из ТекущиеДерево.Строки Цикл
			МассивУдаленияСтрокДерева = Новый Массив;
			Если ЭлементДерева.ЭтоРеквизит ИЛИ ЭлементДерева.ЭтоКлассификатор 
				ИЛИ ЭлементДерева.ЭтоТаблица ИЛИ ЭлементДерева.ЭтоРеквизитТаблицы Тогда
				ИмяТаблицы = "Колонка_" + Сч;
				НайденныеСтроки = ЭтаФорма[ИмяТаблицы].НайтиСтроки(Новый Структура("Наименование",ЭлементДерева.Имя));
				Если НайденныеСтроки.Количество() = 0 Тогда
					МассивУдаленияСтрокДерева.Добавить(ЭлементДерева);
					Если ЭлементДерева.ЭтоТаблица Тогда
						Для каждого ДочерниеЭлементыСтроки Из ЭлементДерева.Строки Цикл
						//	МассивУдаленияСтрокДерева.Добавить(ДочерниеЭлементыСтроки);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрУдаления Из МассивУдаленияСтрокДерева Цикл
				ТекущиеДерево.Строки.Удалить(СтрУдаления);
			КонецЦикла;
			ЗначениеВДанныеФормы(ТекущиеДерево,ЭтаФорма[ТаблицаРазделов]);
		КонецЦикла;
	КонецЦикла;
	
	// Добавление данных
	
	Для Сч = 1 По КоличествоКолонок Цикл
		
		ТаблицаРазделов = "Раздел_" + Сч;
		ИмяТаблицы		= "Колонка_" + Сч;
		ТекущийРаздел 	= ДанныеФормыВЗначение(ЭтаФорма[ТаблицаРазделов],Тип("ДеревоЗначений"));
		ТаблицаКолонка	= ЭтаФорма[ИмяТаблицы];
		
		МассивГруппКлассификаторов 	= Новый Массив;
		МассивКлассификаторов		= Новый Массив;
		МассивРеквизитов			= Новый Массив;
		
		Для каждого Стр Из ТаблицаКолонка Цикл
			ЭлементыДерева = ТекущийРаздел.Строки;
			Если ЭлементыДерева.Найти(Стр.Наименование,"Имя",Истина) = Неопределено Тогда
				Если Стр.Пометка И ТипЗнч(Стр.Наименование) = Тип("СправочникСсылка.вогРазделыКарточекОбъектов") Тогда
					МассивГруппКлассификаторов.Добавить(Стр.Наименование);
				ИначеЕсли Стр.Пометка И ТипЗнч(Стр.Наименование) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
					МассивКлассификаторов.Добавить(Стр.Наименование);
				Иначе
					МассивРеквизитов.Добавить(Стр.Наименование);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивРеквизитов.Количество() <> 0 Тогда
			ОбъектМетданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Запись.Объект);
			Для каждого ТекущийРеквизит Из МассивРеквизитов Цикл
				РеквзитОбъекта 				= СтрЗаменить(ТекущийРеквизит,"Объект.","");
				// ++ VOG Солодов В.В. 05.11.2019 task 821
				СтрокаРеквизитов 			= ПолучитьСтрокуРеквизитов(РеквзитОбъекта);
				// -- VOG Солодов В.В. 05.11.2019
				НайденныйРевизит			= ОбъектМетданных.Реквизиты.Найти(СокрЛП(РеквзитОбъекта));
				НайденыйСтандартныйРеквизит = Неопределено;
				
				Для каждого СтанРеквизит Из ОбъектМетданных.СтандартныеРеквизиты Цикл
					Если СтанРеквизит.Имя = СокрЛП(РеквзитОбъекта) Тогда
						НайденыйСтандартныйРеквизит = СтанРеквизит;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				НайденнаяТЧ					= ОбъектМетданных.ТабличныеЧасти.Найти(СокрЛП(РеквзитОбъекта));
				Если НайденныйРевизит <> Неопределено 
					Или ЗначениеЗаполнено(СтрокаРеквизитов) Тогда
					ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
					ЭлементРаздела.Имя 					= ТекущийРеквизит;
					ЭлементРаздела.СтандартнаяКартинка 	= 1;
					ЭлементРаздела.Пометка				= Истина;
					ЭлементРаздела.ЭтоРеквизит			= Истина;
					// ++ VOG Солодов В.В. 05.11.2019 task 821
					ЭлементРаздела.Синоним 				= ?(ЗначениеЗаполнено(СтрокаРеквизитов), СтрокаРеквизитов, НайденныйРевизит.Синоним);
					// До изменения
					//ЭлементРаздела.Синоним				= НайденныйРевизит.Синоним;
					// -- VOG Солодов В.В. 05.11.2019
					ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Поле;
				ИначеЕсли НайденыйСтандартныйРеквизит <> Неопределено Тогда
					ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
					ЭлементРаздела.Имя 					= ТекущийРеквизит;
					ЭлементРаздела.СтандартнаяКартинка 	= 1;
					ЭлементРаздела.Пометка				= Истина;
					ЭлементРаздела.ЭтоРеквизит			= Истина;
					Если ЗначениеЗаполнено(НайденыйСтандартныйРеквизит.Синоним) Тогда
						ЭлементРаздела.Синоним				= НайденыйСтандартныйРеквизит.Синоним;
					Иначе
						ЭлементРаздела.Синоним = НайденыйСтандартныйРеквизит.Имя;
					КонецЕсли;
					
					ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Поле;
				ИначеЕсли НайденнаяТЧ <> Неопределено Тогда
					ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
					ЭлементРаздела.Имя 					= ТекущийРеквизит;
					ЭлементРаздела.СтандартнаяКартинка 	= 0;
					ЭлементРаздела.Пометка				= Истина;
					ЭлементРаздела.ЭтоТаблица			= Истина;
					ЭлементРаздела.Синоним				= НайденнаяТЧ.Синоним;
					ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Таблица;
					Для каждого ЭлементТаблицы Из НайденнаяТЧ.Реквизиты Цикл
						РеквизитыРаздела 						= ЭлементРаздела.Строки.Добавить();
						РеквизитыРаздела.Имя 					= ЭлементТаблицы.Имя;
						РеквизитыРаздела.СтандартнаяКартинка 	= 1;
						РеквизитыРаздела.Пометка 				= Истина;
						РеквизитыРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Поле;
						РеквизитыРаздела.ЭтоРеквизитТаблицы		= Истина;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивКлассификаторов.Количество() <> 0 Тогда
			Для каждого СтрКлассификатор Из МассивКлассификаторов Цикл
				ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
				ЭлементРаздела.Имя 					= СтрКлассификатор;
				ЭлементРаздела.СтандартнаяКартинка 	= 2;
				ЭлементРаздела.Пометка				= Истина;
				ЭлементРаздела.ЭтоКлассификатор		= Истина;
				ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивГруппКлассификаторов.Количество() <> 0 Тогда
			ЗначенияКлассификатора = ПолучитьЗначенияКлассификатора(МассивГруппКлассификаторов);
			Если ЗначенияКлассификатора <> Неопределено Тогда
				Для каждого ПерУровень Из ЗначенияКлассификатора.Строки Цикл
					ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
					ЭлементРаздела.Имя 					= ПерУровень.Ссылка;
					ЭлементРаздела.СтандартнаяКартинка 	= 0;
					ЭлементРаздела.Пометка				= Истина;
					ЭлементРаздела.ЭтоКлассификатор		= Истина;
					ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Группа;
					Для каждого ВторУровень Из ПерУровень.Строки Цикл
						РеквизитыРаздела 						= ЭлементРаздела.Строки.Добавить();
						РеквизитыРаздела.Имя 					= ВторУровень.ДанныеРаздела;
						РеквизитыРаздела.СтандартнаяКартинка 	= 2;
						РеквизитыРаздела.Пометка 				= Истина;
						РеквизитыРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор;
						РеквизитыРаздела.ЭтоКлассификатор		= Истина;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ЗначениеВДанныеФормы(ТекущийРаздел,ЭтаФорма[ТаблицаРазделов]);
	КонецЦикла;
	
	// Конец Обновить данные разделов 
	
КонецПроцедуры

// ++ VOG Солодов В.В. 05.11.2019 task 821
&НаСервере
Функция ПолучитьСтрокуРеквизитов(СтрокаРеквизитов)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРеквизитов, ".");
	ОбъектМетданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Запись.Объект);
	
	СтрокаСинонимов = "";
	
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		
		Если Индекс = 0 Тогда
			
			НайденныйРевизит = ОбъектМетданных.Реквизиты.Найти(СокрЛП(МассивСтрок[Индекс]));
			
			Если Не НайденныйРевизит = Неопределено Тогда
				СтрокаСинонимов = НайденныйРевизит.Синоним;
			КонецЕсли;
			
		ИначеЕсли Не НайденныйРевизит = Неопределено Тогда
			
			ОбъектМетданныхРеквизита = Неопределено;
			ТипыРеквизита = НайденныйРевизит.Тип.Типы();
			
			Для Каждого Тип Из ТипыРеквизита Цикл
				ОбъектМетданныхРеквизита = Метаданные.НайтиПоТипу(Тип);
			КонецЦикла;
			
			Если Не ОбъектМетданныхРеквизита = Неопределено Тогда
				
				НайденныйРевизит = ОбъектМетданныхРеквизита.Реквизиты.Найти(СокрЛП(МассивСтрок[Индекс]));
				
				Если Не НайденныйРевизит = Неопределено Тогда
					СтрокаСинонимов = СтрокаСинонимов + "." + НайденныйРевизит.Синоним;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаСинонимов;
	
КонецФункции
// -- VOG Солодов В.В. 05.11.2019

#КонецОбласти

#Область РеквизитыОбъекта

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокОбъектыМетаданных(ДанныеВыбора)

	ИдентификаторДокументы = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Справочники");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Спр
	|ГДЕ
	|	Спр.Родитель = &Родитель
	|	И НЕ Спр.ПометкаУдаления");
	Запрос.УстановитьПараметр("Родитель",ИдентификаторДокументы);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ДанныеВыбора.Добавить(ВыборкаИзРезультатаЗапроса.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоРеквизитов(ИдентификаторОбъекта)
	
	ОбъектМетданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъекта);
	ДеревоЭлементов = ДанныеФормыВЗначение(ДеревоРеквизитов,Тип("ДеревоЗначений"));
	ДеревоЭлементов.Строки.Очистить();
	
	ПервыйУровень 						= ДеревоЭлементов.Строки.Добавить();
	ПервыйУровень.Имя 					= ОбъектМетданных.Имя;
	ПервыйУровень.СтандартнаяКартинка 	= 6;
	ПервыйУровень.Путь 					= "Объект";
	
	ИмяПервыйУровень = ПервыйУровень.Путь;
	
	Для каждого Реквизит Из ОбъектМетданных.СтандартныеРеквизиты Цикл
		ВторойУровень 						= ПервыйУровень.Строки.Добавить();
		ВторойУровень.Имя 					= Реквизит.Имя;
		ВторойУровень.СтандартнаяКартинка 	= 1;
		ВторойУровень.Путь					= ИмяПервыйУровень+"." + Реквизит.Имя;
	КонецЦикла;

	Для каждого Реквизит Из ОбъектМетданных.Реквизиты Цикл
		ВторойУровень 						= ПервыйУровень.Строки.Добавить();
		ВторойУровень.Имя 					= Реквизит.Имя;
		ВторойУровень.СтандартнаяКартинка 	= 1;
		ВторойУровень.Путь					= ИмяПервыйУровень+"." + Реквизит.Имя;
	КонецЦикла;
	
	Для каждого ТабличнаяЧасть Из ОбъектМетданных.ТабличныеЧасти Цикл
		ВторойУровень 						= ПервыйУровень.Строки.Добавить();
		ВторойУровень.Имя 					= ТабличнаяЧасть.Имя;
		ВторойУровень.СтандартнаяКартинка 	= 0;
		ВторойУровень.Путь					= ИмяПервыйУровень+"." + ТабличнаяЧасть.Имя;
		ИмяВторойУровень					= ВторойУровень.Путь;
		Для каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
			ТретийУровень 						= ВторойУровень.Строки.Добавить();
			ТретийУровень.Имя 					= РеквизитТЧ.Имя;
			ТретийУровень.СтандартнаяКартинка 	= 1;
			ТретийУровень.Путь 					= ИмяВторойУровень + "." + РеквизитТЧ.Имя;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоЭлементов,ДеревоРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	ИменаСворачиваемыхГрупп.Добавить("Отбор");
	ИменаСворачиваемыхГрупп.Добавить("Классификатор");
	ИменаСворачиваемыхГрупп.Добавить("Колонки");
	ИменаСворачиваемыхГрупп.Добавить("Разделы");
	
	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаСервере
Функция ИменаОткрываемыхГруппГрупп(Разделы = Ложь)
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	Если Разделы Тогда
		ИменаСворачиваемыхГрупп.Добавить("Разделы");
	Иначе
		ИменаСворачиваемыхГрупп.Добавить("Колонки");
	КонецЕсли;
	
	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РаскрытьГруппу(Разделы = Ложь)
	
	ИменаСворачиваемыхГрупп = ИменаОткрываемыхГруппГрупп(Разделы);
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		ИзменитьСвернутостьГруппы(ИмяГруппы, Ложь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СистемаКомпоновкиДанных

&НаСервере
Процедура ИнициализироватьОтбор()
	
	СхемаКомпоновкиДанных 	= РегистрыСведений.вогНастройкиОтображенияКлассификаторов.ПолучитьМакет("ОтборПоОбъекту");
	//START Кайдашов 16/07/19
	Если ЗначениеЗаполнено(Запись.Объект) тогда 
		СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,"вогТорговыеТочки",Запись.Объект.Имя);
	КонецЕсли;
	//END Кайдашов
	URLСхемы 				= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек 		= Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Отбор.Инициализировать(ИсточникНастроек);
	Отбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти

#Область СериализацияОбъекта

&НаСервере
Функция СформироватьДанныеДляЗаписи()
	
	// Формирование настроек для отображения макета
	СоответствиеНастроек 	= Новый Соответствие;
	СоответствиеНастроек.Вставить("КоличествоКолонок",КоличествоКолонок);
	
	// Таблица колонок
	ТаблицаКолонок 			= Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("ИмяКолонки",Новый ОписаниеТипов("Строка"));
	ТаблицаКолонок.Колонки.Добавить("ЗначениеКолонки",Новый ОписаниеТипов("Строка"));
	
	// Обход колонок макета
	Для Сч =1 По КоличествоКолонок Цикл
		Попытка
			СтрокаДобавления 					= ТаблицаКолонок.Добавить();
			СтрокаДобавления.ИмяКолонки 		= Элементы["Колонка_" + Сч].Имя;
			СтрокаДобавления.ЗначениеКолонки	= ЗначениеВСтрокуВнутр((ЭтаФорма["Колонка_" + Сч].Выгрузить()));
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	СоответствиеНастроек.Вставить("ТаблицаКолонок",ТаблицаКолонок);
	
	// Таблица разделов
	ТаблицаРазделов 			= Новый ТаблицаЗначений;
	ТаблицаРазделов.Колонки.Добавить("ИмяРаздела",Новый ОписаниеТипов("Строка"));
	ТаблицаРазделов.Колонки.Добавить("ЗначениеРаздела",Новый ОписаниеТипов("Строка"));
	
	// Обход разделов
	Для Сч =1 По КоличествоКолонок Цикл
		Попытка
			СтрокаДобавления 					= ТаблицаРазделов.Добавить();
			СтрокаДобавления.ИмяРаздела 		= Элементы["Раздел_" + Сч].Имя;
			ТекущиеДеревоРаздела				= ДанныеФормыВЗначение(ЭтаФорма["Раздел_" + Сч],Тип("ДеревоЗначений"));
			СтрокаДобавления.ЗначениеРаздела	= ЗначениеВСтрокуВнутр(ТекущиеДеревоРаздела);
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	// Список таблиц разделов
	СоответствиеНастроек.Вставить("ТаблицаРазделов",ТаблицаРазделов);
	
	// Настройки отбора
	СоответствиеНастроек.Вставить("Отбор",Новый ХранилищеЗначения(Отбор.Настройки,Новый СжатиеДанных(9)));
	
	// Гиперссылки
	СоответствиеНастроек.Вставить("СписокГипперссылок",СписокГипперссылок.Выгрузить());
	
	// Внешние данные
	// ++ VOG Солодов В.В. 07.11.2019 task 821
	МассивВнешниеДанные 	= Новый Массив;
	ТаблицаВнешниеДанные 	= СписокВнешниеДанные.Выгрузить();
	
	Для Каждого СтрокаВД Из СписокВнешниеДанные Цикл
		
		СтруктураВнешниеДанные = Новый Структура;
		Для Каждого Колонка Из ТаблицаВнешниеДанные.Колонки Цикл
			СтруктураВнешниеДанные.Вставить(Колонка.Имя, СтрокаВД[Колонка.Имя]);
		КонецЦикла;
		
		ТаблицаНастроек = СтрокаВД.ТаблицаНастроек.Выгрузить();
		
		СоответствиеПолей = Новый Соответствие;
		
		Для Каждого СтрокаНастроек Из ТаблицаНастроек Цикл
			
			СтруктураНастроек = Новый Структура;
			
			Для Каждого Колонка Из ТаблицаНастроек.Колонки Цикл
				СтруктураНастроек.Вставить(Колонка.Имя, СтрокаНастроек[Колонка.Имя]);
			КонецЦикла;
			
			СоответствиеПолей.Вставить(СтрокаНастроек.Поле, СтруктураНастроек);
			
		КонецЦикла;
		
		СтруктураВнешниеДанные.Вставить("Настройки", СоответствиеПолей);
		МассивВнешниеДанные.Добавить(СтруктураВнешниеДанные);
		
	КонецЦикла;
	
	СоответствиеНастроек.Вставить("СписокВнешниеДанные", МассивВнешниеДанные);
	// До изменения
	//СоответствиеНастроек.Вставить("СписокВнешниеДанные",СписокВнешниеДанные.Выгрузить());
	// -- VOG Солодов В.В. 07.11.2019
	
	// Расшифровка
	СоответствиеНастроек.Вставить("СписокРасшифровка",СписокРасшифровка.Выгрузить());

	// Список доступных классификаторов
	СоответствиеНастроек.Вставить("СписокДоступныхКлассификаторов",СписокДоступныхКлассификаторов.Выгрузить());
	
	// Список отображения заголовков
	СоответствиеНастроек.Вставить("СписокОтображаниеЗаголовков",СписокОтображаниеЗаголовков.Выгрузить());
	
	// Список Выводить только заполненные значения
	СоответствиеНастроек.Вставить("СписокВыводитьТолькоЗаполненныеЗначения",СписокВыводитьТолькоЗаполненныеЗначения.Выгрузить());
	
	// Список Расшифровки классификаторов
	СоответствиеНастроек.Вставить("СписокРасшифровкиКлассификатора",СписокРасшифровкиКлассификатора.Выгрузить());
	
	// Список Использовать расшифровку для отчета
	СоответствиеНастроек.Вставить("СписокИспользоватьРасшифровкуДляОтчета",СписокИспользоватьРасшифровкуДляОтчета.Выгрузить());
	
	Возврат СоответствиеНастроек;
	
КонецФункции

#КонецОбласти

#Область ФормированиеМакетаОтображения

&НаСервере
Процедура СформироватьМакетСервер()
	
	Результат.Очистить();
	ТабДок = Новый ТабличныйДокумент;
	
	Если Элементы.СворачиваемаяГруппаРазделы.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		
		Если Метаданные.РегистрыСведений.вогНастройкиОтображенияКлассификаторов.Макеты.Найти("ПФ_MXL_ПечатьКлассификаторов")  =  Неопределено Тогда
			Текстообщения = НСтр("ru = 'Не найден макет ""%1"" '");
			Текстообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текстообщения,"ПФ_MXL_ПечатьКлассификаторов");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текстообщения);
			Возврат;
		КонецЕсли;
		
		МакетОтображения 		= РегистрыСведений.вогНастройкиОтображенияКлассификаторов.ПолучитьМакет("ПФ_MXL_ПечатьКлассификаторов_Старый");
		ОбластьЗаголовок 		= МакетОтображения.ПолучитьОбласть("Шапка|Колонка");
		ОбластьСтрока			= МакетОтображения.ПолучитьОбласть("СтрокаКлассификатор");
		ОбластьОтступ			= МакетОтображения.ПолучитьОбласть("СтрокаКлассификатор|Колонка");
		ОбластьСтрокаФлажокЛожь	= МакетОтображения.ПолучитьОбласть("СтрокаКлассификаторФлажокЛожь|Колонка");
		ОбластьРеквизит			= МакетОтображения.ПолучитьОбласть("РеквизитОбъекта|Колонка");
		ОбластьзаголовкТаблицы	= МакетОтображения.ПолучитьОбласть("ЗаголовокТаблица|Колонка");
		ОбластьСтрокаТаблицы	= МакетОтображения.ПолучитьОбласть("СтрокаТаблицы|Колонка");
		ОбластьСтрокаГиперссылка= МакетОтображения.ПолучитьОбласть("СтрокаГиперссылка|Колонка");
		ОбластьСтрокаЗапрос		= МакетОтображения.ПолучитьОбласть("СтрокаВнешниеДанные|Колонка");
		ГоризонтальныйОтступ	= МакетОтображения.ПолучитьОбласть("ГоризонтальныйОтступ|Колонка");
		
		Для Сч = 1 По КоличествоКолонок Цикл
			ТекущиеДерево 	= ЭтаФорма["Раздел_"+Сч];
			Корень 			= ТекущиеДерево.ПолучитьЭлементы();
			Колонка			= Неопределено;
			Для каждого ЭлементыКорень Из Корень Цикл
				Если ЭлементыКорень.Пометка Тогда
					Если Колонка 	= Неопределено Тогда
						Колонка 	= Новый ТабличныйДокумент;
					КонецЕсли;
					Если ЭлементыКорень.ЭтоКлассификатор И НЕ ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор Тогда
						ОбластьЗаголовок.Параметры.ТекстЗаголовка = ЭлементыКорень.Имя;
						Колонка.Вывести(ОбластьЗаголовок);
						ДочерниеСтроки = ЭлементыКорень.ПолучитьЭлементы();
						Для каждого ЭлементДерева Из ДочерниеСтроки Цикл
							Если ЭлементДерева.Пометка Тогда
								Если ЭлементДерева.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор Тогда
									ОбластьСтрока.Параметры.КлассификаторЗаголовок = ЭлементДерева.Имя;
									Колонка.Вывести(ОбластьСтрока);
								ИначеЕсли ЭлементДерева.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Флажок Тогда
									ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементДерева.Имя;
									Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Колонка.Вывести(ГоризонтальныйОтступ);
					ИначеЕсли ЭлементыКорень.ЭтоКлассификатор И ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Классификатор Тогда
								ОбластьСтрока.Параметры.КлассификаторЗаголовок = ЭлементыКорень.Имя;
								Колонка.Вывести(ОбластьСтрока);
					ИначеЕсли ЭлементыКорень.ЭтоРеквизит Тогда
						Если ЭлементыКорень.ОтображениеПоля = Перечисления.вогНастройкаОтображенияКлассификатор.Поле Тогда
							ОбластьРеквизит.Параметры.ИмяРеквизита = ЭлементыКорень.Синоним;
							Колонка.Вывести(ОбластьРеквизит);
						Иначе
							ОбластьСтрокаФлажокЛожь.Параметры.КлассификаторЗаголовокФлажок = ЭлементыКорень.Синоним;
							Колонка.Вывести(ОбластьСтрокаФлажокЛожь);
						КонецЕсли;
					ИначеЕсли ЭлементыКорень.ЭтоТаблица Тогда
						ОбластьзаголовкТаблицы.Параметры.ИмяТаблицы = ЭлементыКорень.Синоним;
						Колонка.Вывести(ОбластьзаголовкТаблицы);
						ДочерниеСтроки = ЭлементыКорень.ПолучитьЭлементы();
						СтрокаОтображения = "";
						Для каждого ЭлементДерева Из ДочерниеСтроки Цикл
							Если ЭлементДерева.Пометка И ЭлементДерева.ЭтоРеквизитТаблицы Тогда
								СтрокаОтображения = СтрокаОтображения + ЭлементДерева.Имя+"; ";
							КонецЕсли;
						КонецЦикла;
						ОбластьСтрокаТаблицы.Параметры.ЗначениеСтрокиТаблицы = СтрокаОтображения;
						Колонка.Вывести(ОбластьСтрокаТаблицы);
					ИначеЕсли ЭлементыКорень.ЭтоЗаголовок Тогда
						ОбластьЗаголовок.Параметры.ТекстЗаголовка = ЭлементыКорень.Имя;
						Колонка.Вывести(ОбластьЗаголовок);
					ИначеЕсли ЭлементыКорень.ЭтоГиперссылка Тогда
						ОбластьСтрокаГиперссылка.Параметры.ИмяГиперссылки = ЭлементыКорень.Имя;
						Колонка.Вывести(ОбластьСтрокаГиперссылка);
					ИначеЕсли ЭлементыКорень.ЭтоЗапрос Тогда
						ОбластьСтрокаЗапрос.Параметры.Параметр_1 = ЭлементыКорень.Имя;
						Колонка.Вывести(ОбластьСтрокаЗапрос);
					ИначеЕсли ЭлементыКорень.ЭтоРаздилитель Тогда
						Колонка.Вывести(ГоризонтальныйОтступ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Колонка <> Неопределено Тогда
				ТабДок.Присоединить(Колонка);
			КонецЕсли;
		КонецЦикла;
		Результат = ТабДок;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КолонкиИРазделыСлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьКолонкуРазделСервер(Индекс)

	// Начало сохранение данных
	
	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("Итератор",Новый ОписаниеТипов("Число"));
	ТаблицаКолонок.Колонки.Добавить("ЗначениеКолонки");
	
	ТаблицаРазделов = Новый ТаблицаЗначений;
	ТаблицаРазделов.Колонки.Добавить("Итератор",Новый ОписаниеТипов("Число"));
	ТаблицаРазделов.Колонки.Добавить("ЗначениеРаздела");
	
	ИндексПропуска = Индекс;
	НовыйИтератор = 1;
	
	Для Сч = 1 По КоличествоКолонок Цикл
		
		Если Сч = ИндексПропуска Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы 		= "Колонка_" + Сч;
		ТекущаяКолонка 	= ДанныеФормыВЗначение(ЭтаФорма[ИмяТаблицы],Тип("ТаблицаЗначений"));
		
		СтрокаДобавления 					= ТаблицаКолонок.Добавить();
		СтрокаДобавления.Итератор 			= НовыйИтератор;
		СтрокаДобавления.ЗначениеКолонки 	= ЗначениеВСтрокуВнутр(ТекущаяКолонка);
		
		Если СписокКомандДерево.Количество() <> 0 Тогда
			Попытка
				ИмяРаздела 		= "Раздел_" + Сч;
				ТекущиеДерево 	= ДанныеФормыВЗначение(ЭтаФорма[ИмяРаздела],Тип("ДеревоЗначений"));
				СтрокаДобавления 					= ТаблицаРазделов.Добавить();
				СтрокаДобавления.Итератор 			= НовыйИтератор;
				СтрокаДобавления.ЗначениеРаздела 	= ЗначениеВСтрокуВнутр(ТекущиеДерево);
			Исключение
				а=1;
			КонецПопытки;
		КонецЕсли;
		НовыйИтератор = НовыйИтератор + 1;
	КонецЦикла;
	
	// Конец сохранение данных
	
	// Начало удаление элементов и реквизитов
	КоличествоКолонок = КоличествоКолонок - 1;
	УдалитьКолонкиСервер();
	УдалитьРазделыСервер();
	// Конец удаление элементов и реквизитов
	
	// Начало востановление данных
	
	Для Сч = 1 По КоличествоКолонок Цикл
		ИмяТаблицы 		= "Колонка_" + Сч;
		ТекущаяКолонка 	= ЭтаФорма[ИмяТаблицы];
		СохраненыеЗначения = ЗначениеИзСтрокиВнутр(ТаблицаКолонок[Сч - 1].ЗначениеКолонки);
		ТекущаяКолонка.Загрузить(СохраненыеЗначения);
		Если СписокКомандДерево.Количество() <> 0 Тогда
			Попытка
				ИмяРаздела 			= "Раздел_" + Сч;
				СохраненыеЗначения 	= ЗначениеИзСтрокиВнутр(ТаблицаРазделов[Сч - 1].ЗначениеРаздела);
				ЗначениеВДанныеФормы(СохраненыеЗначения,ЭтаФорма[ИмяРаздела]);
			Исключение
				а=1;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// Конец востановление данных
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОтветПользователя(Ответ,ДополнительныеПраметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьКолонкиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветПользователяРазделы(Ответ,ДополнительныеПраметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьРазделыСервер();
		ЗаполнитьРазделы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОбъекты()
	
	Элементы.Объект.СписокВыбора.Добавить(Метаданные.Справочники.вогТорговыеТочки.Имя,Метаданные.Справочники.вогТорговыеТочки.Синоним, ,БиблиотекаКартинок.Документ);
	Запись.Объект = Элементы.Объект.СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаСервере
Функция СоздатьГруппу(Имя,Родитель) Экспорт
	
	Идентификатор 					= СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	Группа 							= Элементы.Добавить("Имя"+Идентификатор, Тип("ГруппаФормы"),Родитель);
	Группа.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Поведение 				= ПоведениеОбычнойГруппы.Обычное;
	Группа.Заголовок 				= Имя;
	Группа.Подсказка 				= "";
	Группа.ОтображатьЗаголовок		= Ложь;
	Группа.Отображение 				= ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Возврат Группа;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа, МассивЭлементов, МассивРеквизитов)
	
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент, МассивЭлементов, МассивРеквизитов);
		ИначеЕсли ТипЗнч(Элемент)=Тип("КомандаФормы") Тогда
			Команды.Удалить(Команды.Найти(Элемент.ИмяКоманды));
		ИначеЕсли ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент.КонтекстноеМеню, МассивЭлементов, МассивРеквизитов);
			Позиция = Найти(Элемент.ПутьКДанным, ".");
			Если Позиция>0 Тогда
				ИмяРеквизита = Лев(Элемент.ПутьКДанным, Позиция-1);
			Иначе
				ИмяРеквизита = Элемент.ПутьКДанным;
			КонецЕсли;
			Если МассивРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
				МассивРеквизитов.Добавить(ИмяРеквизита);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент.КонтекстноеМеню, МассивЭлементов, МассивРеквизитов);
			Позиция = Найти(Элемент.ПутьКДанным, ".");
			Если Позиция>0 Тогда
				ИмяРеквизита = Лев(Элемент.ПутьКДанным, Позиция-1);
			Иначе
				ИмяРеквизита = Элемент.ПутьКДанным;
			КонецЕсли;
			Если МассивРеквизитов.Найти(ИмяРеквизита)=Неопределено Тогда
				МассивРеквизитов.Добавить(ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаголовк(Текст,ТекущаяТаблица) Экспорт

	Если ЗначениеЗаполнено(Текст) Тогда
		СтрокиДерева 							= ТекущаяТаблица.ПолучитьЭлементы();
		НовыйЭлементДерева 						= СтрокиДерева.Добавить();
		НовыйЭлементДерева.Имя 					= Текст;
		НовыйЭлементДерева.СтандартнаяКартинка 	= 6;
		НовыйЭлементДерева.Пометка				= Истина;
		НовыйЭлементДерева.ОтображениеПоля		= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Заголовок");
		НовыйЭлементДерева.ЭтоЗаголовок			= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементыРаздела(СписокВыбора,ТекущаяТаблица) Экспорт

	Если СписокВыбора <> Неопределено Тогда
		СтрокиДерева = ТекущаяТаблица.ПолучитьЭлементы();
		Для каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
				Для каждого ЭлементДерева Из СтрокиДерева Цикл
					Если ЭлементСписка.Значение = ЭлементДерева.Имя Тогда
						Если ЭлементДерева.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Гиперссылка") Тогда
							Для каждого Стр Из СписокГипперссылок Цикл
								Если Стр.Имя = ЭлементДерева.Имя Тогда
									СписокГипперссылок.Удалить(Стр);
									Прервать;
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ЭлементДерева.ОтображениеПоля = ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Запрос") Тогда
							Для каждого Стр Из СписокВнешниеДанные Цикл
								Если Стр.Имя = ЭлементДерева.Имя Тогда
									СписокВнешниеДанные.Удалить(Стр);
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						СтрокиДерева.Удалить(ЭлементДерева);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГиперссылкуЗавершение(РезультатЗакрытия,ТекущаяТаблица) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		СтрокиДерева 							= ТекущаяТаблица.ПолучитьЭлементы();
		НовыйЭлементДерева 						= СтрокиДерева.Добавить();
		НовыйЭлементДерева.Имя 					= РезультатЗакрытия.Имя;
		НовыйЭлементДерева.СтандартнаяКартинка 	= 8;
		НовыйЭлементДерева.Пометка				= Истина;
		НовыйЭлементДерева.ОтображениеПоля		= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Гиперссылка");
		НовыйЭлементДерева.ЭтоГиперссылка		= Истина;
		
		СтрокаДобавления 						= СписокГипперссылок.Добавить();
		СтрокаДобавления.Имя 					= РезультатЗакрытия.Имя;
		СтрокаДобавления.ПроизвольныйКод 		= РезультатЗакрытия.ТекстОбработчика;
		СтрокаДобавления.Шаблон					= РезультатЗакрытия.Шаблон;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГиперссылкуЗавершение(РезультатЗакрытия,ТекущаяТаблица) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		Для каждого ТекущийОбработчик Из СписокГипперссылок Цикл
			Если ТекущийОбработчик.Имя = РезультатЗакрытия.Имя Тогда
				ТекущийОбработчик.ПроизвольныйКод 				= РезультатЗакрытия.ТекстОбработчика;
				ТекущийОбработчик.Шаблон						= РезультатЗакрытия.Шаблон;
				ТекущийОбработчик.ОтображатьКоличество			= РезультатЗакрытия.ОтображатьКоличество;
				ТекущийОбработчик.ТекстОбработчикаКоличество	= РезультатЗакрытия.ТекстОбработчикаКоличество;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнешниеДанныеЗавершение(РезультатЗакрытия,ТекущаяТаблица) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		СтрокиДерева 							= ТекущаяТаблица.ПолучитьЭлементы();
		НовыйЭлементДерева 						= СтрокиДерева.Добавить();
		НовыйЭлементДерева.Имя 					= РезультатЗакрытия.Имя;
		НовыйЭлементДерева.СтандартнаяКартинка 	= 7;
		НовыйЭлементДерева.Пометка				= Истина;
		НовыйЭлементДерева.ОтображениеПоля		= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Запрос");
		НовыйЭлементДерева.ЭтоЗапрос			= Истина;
		
		СтрокаДобавления 										= СписокВнешниеДанные.Добавить();
		СтрокаДобавления.Имя 									= РезультатЗакрытия.Имя;
		СтрокаДобавления.Текстзапроса 							= РезультатЗакрытия.Текстзапроса;
		СтрокаДобавления.Шаблон									= РезультатЗакрытия.Шаблон;
		СтрокаДобавления.ИспользоватьНеСтандартнуюРасшифровку 	= РезультатЗакрытия.ИспользоватьНеСтандартнуюРасшифровку;
		СтрокаДобавления.Параметр_1 							= РезультатЗакрытия.Параметр_1;
		СтрокаДобавления.Параметр_2 							= РезультатЗакрытия.Параметр_2;
		СтрокаДобавления.Параметр_3 							= РезультатЗакрытия.Параметр_3;
		СтрокаДобавления.Параметр_1_КлиентРасшифровка 			= РезультатЗакрытия.Параметр_1_КлиентРасшифровка;
		СтрокаДобавления.Параметр_1_СерверРасшифровка 			= РезультатЗакрытия.Параметр_1_СерверРасшифровка;
		СтрокаДобавления.Параметр_2_КлиентРасшифровка 			= РезультатЗакрытия.Параметр_2_КлиентРасшифровка;
		СтрокаДобавления.Параметр_2_СерверРасшифровка 			= РезультатЗакрытия.Параметр_2_СерверРасшифровка;
		СтрокаДобавления.Параметр_3_КлиентРасшифровка 			= РезультатЗакрытия.Параметр_3_КлиентРасшифровка;
		СтрокаДобавления.Параметр_3_СерверРасшифровка 			= РезультатЗакрытия.Параметр_3_СерверРасшифровка;
		// ++ VOG Солодов В.В. 07.11.2019 task 821
		СтрокаДобавления.ВыводитьШапку 							= РезультатЗакрытия.ВыводитьШапку;
		
		СтрокаДобавления.ТаблицаНастроек.Очистить();
		МассивСтруктурНастроек = РезультатЗакрытия.МассивСтруктурНастроек;
		
		Для Каждого СтруктураНастройки Из МассивСтруктурНастроек Цикл
			НоваяСтрока = СтрокаДобавления.ТаблицаНастроек.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастройки);
		КонецЦикла;
		// -- VOG Солодов В.В. 07.11.2019

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиГиперссылки(Имя)
	
	Адрес = "";
	
	Если ЗначениеЗаполнено(Имя) Тогда
		НайденныеСтроки = СписокГипперссылок.НайтиСтроки(Новый Структура("Имя",Имя));
		Если НайденныеСтроки.Количество() <> 0  Тогда
			НайденнаяСтрока 	= НайденныеСтроки[0];	
			ИсходящаяСтруктура 	= Новый Структура("Имя,ТекстОбработчика,Шаблон,ОтображатьКоличество,ТекстОбработчикаКоличество"
								,НайденнаяСтрока.Имя,НайденнаяСтрока.ПроизвольныйКод,НайденнаяСтрока.Шаблон,
								НайденнаяСтрока.ОтображатьКоличество,НайденнаяСтрока.ТекстОбработчикаКоличество);
			Адрес 				= ПоместитьВоВременноеХранилище(ИсходящаяСтруктура,УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьВнешниеДанныеЗавершение(РезультатЗакрытия,ТекущаяТаблица) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		Для каждого ТекущийОбработчик Из СписокВнешниеДанные Цикл
			Если ТекущийОбработчик.Имя 									= РезультатЗакрытия.Имя Тогда
				ТекущийОбработчик.Текстзапроса 							= РезультатЗакрытия.ТекстЗапроса;
				ТекущийОбработчик.Шаблон								= РезультатЗакрытия.Шаблон;
				ТекущийОбработчик.ИспользоватьНеСтандартнуюРасшифровку 	= РезультатЗакрытия.ИспользоватьНеСтандартнуюРасшифровку;
				ТекущийОбработчик.Параметр_1 							= РезультатЗакрытия.Параметр_1;
				ТекущийОбработчик.Параметр_2 							= РезультатЗакрытия.Параметр_2;
				ТекущийОбработчик.Параметр_3 							= РезультатЗакрытия.Параметр_3;
				ТекущийОбработчик.Параметр_1_КлиентРасшифровка 			= РезультатЗакрытия.Параметр_1_КлиентРасшифровка;
				ТекущийОбработчик.Параметр_1_СерверРасшифровка 			= РезультатЗакрытия.Параметр_1_СерверРасшифровка;
				ТекущийОбработчик.Параметр_2_КлиентРасшифровка 			= РезультатЗакрытия.Параметр_2_КлиентРасшифровка;
				ТекущийОбработчик.Параметр_2_СерверРасшифровка 			= РезультатЗакрытия.Параметр_2_СерверРасшифровка;
				ТекущийОбработчик.Параметр_3_КлиентРасшифровка 			= РезультатЗакрытия.Параметр_3_КлиентРасшифровка;
				ТекущийОбработчик.Параметр_3_СерверРасшифровка 			= РезультатЗакрытия.Параметр_3_СерверРасшифровка;
				// ++ VOG Солодов В.В. 07.11.2019 task 821
				ТекущийОбработчик.ВыводитьШапку 						= РезультатЗакрытия.ВыводитьШапку;
				
				ТекущийОбработчик.ТаблицаНастроек.Очистить();
				МассивСтруктурНастроек = РезультатЗакрытия.МассивСтруктурНастроек;
				
				Для Каждого СтруктураНастройки Из МассивСтруктурНастроек Цикл
					НоваяСтрока = ТекущийОбработчик.ТаблицаНастроек.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастройки);
				КонецЦикла;
				// -- VOG Солодов В.В. 07.11.2019
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиВнешниеДанные(Имя)
	
	Адрес = "";
	
	Если ЗначениеЗаполнено(Имя) Тогда
		НайденныеСтроки = СписокВнешниеДанные.НайтиСтроки(Новый Структура("Имя",Имя));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденнаяСтрока 	= НайденныеСтроки[0];
			ИсходящаяСтруктура 	= Новый Структура;
			ИсходящаяСтруктура.Вставить("Имя"									,НайденнаяСтрока.Имя);
			ИсходящаяСтруктура.Вставить("ТекстЗапроса"							,НайденнаяСтрока.Текстзапроса);
			ИсходящаяСтруктура.Вставить("Шаблон"								,НайденнаяСтрока.Шаблон);
			ИсходящаяСтруктура.Вставить("ИспользоватьНеСтандартнуюРасшифровку"	,НайденнаяСтрока.ИспользоватьНеСтандартнуюРасшифровку);
			ИсходящаяСтруктура.Вставить("Параметр_1"							,НайденнаяСтрока.Параметр_1);
			ИсходящаяСтруктура.Вставить("Параметр_2"							,НайденнаяСтрока.Параметр_2);
			ИсходящаяСтруктура.Вставить("Параметр_3"							,НайденнаяСтрока.Параметр_3);
			ИсходящаяСтруктура.Вставить("Параметр_1_КлиентРасшифровка"			,НайденнаяСтрока.Параметр_1_КлиентРасшифровка);
			ИсходящаяСтруктура.Вставить("Параметр_1_СерверРасшифровка"			,НайденнаяСтрока.Параметр_1_СерверРасшифровка);
			ИсходящаяСтруктура.Вставить("Параметр_2_КлиентРасшифровка"			,НайденнаяСтрока.Параметр_2_КлиентРасшифровка);
			ИсходящаяСтруктура.Вставить("Параметр_2_СерверРасшифровка"			,НайденнаяСтрока.Параметр_2_СерверРасшифровка);
			ИсходящаяСтруктура.Вставить("Параметр_3_КлиентРасшифровка"			,НайденнаяСтрока.Параметр_3_КлиентРасшифровка);
			ИсходящаяСтруктура.Вставить("Параметр_3_СерверРасшифровка"			,НайденнаяСтрока.Параметр_3_СерверРасшифровка);
			// ++ VOG Солодов В.В. 07.11.2019 task 821
			ИсходящаяСтруктура.Вставить("ВыводитьШапку" 						,НайденнаяСтрока.ВыводитьШапку);
			
			АдресТаблицыНастроек = ПоместитьВоВременноеХранилище(НайденнаяСтрока.ТаблицаНастроек.Выгрузить(), УникальныйИдентификатор);
			ИсходящаяСтруктура.Вставить("АдресТаблицыНастроек" 					,АдресТаблицыНастроек);
			// -- VOG Солодов В.В. 07.11.2019
			Адрес 				= ПоместитьВоВременноеХранилище(ИсходящаяСтруктура,УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьРасшифровкаЗавершение(РезультатЗакрытия,ТекущаяТаблица) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		// Список команд расшифровки
		Если СписокРасшифровка.НайтиСтроки(Новый Структура("Имя",РезультатЗакрытия.Имя)).Количество() <> 0 Тогда
			Для каждого ТекущийОбработчик Из СписокРасшифровка Цикл
				Если ТекущийОбработчик.Имя = РезультатЗакрытия.Имя Тогда
					ТекущийОбработчик.ТекстОбработчика 	= РезультатЗакрытия.ТекстОбработчика;
					ТекущийОбработчик.Шаблон			= РезультатЗакрытия.Шаблон;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаДобавления 					= СписокРасшифровка.Добавить();
			СтрокаДобавления.Имя 				= РезультатЗакрытия.Имя;
			СтрокаДобавления.ТекстОбработчика 	= РезультатЗакрытия.ТекстОбработчика;
			СтрокаДобавления.Шаблон				= РезультатЗакрытия.Шаблон;
		КонецЕсли;
		// Список отображения заголовков
		Если СписокОтображаниеЗаголовков.НайтиСтроки(Новый Структура("Имя",РезультатЗакрытия.Имя)).Количество() <> 0 Тогда
			Для каждого ТекущийОбработчик Из СписокОтображаниеЗаголовков Цикл
				Если ТекущийОбработчик.Имя 		= РезультатЗакрытия.Имя Тогда
					ТекущийОбработчик.Значение 	= РезультатЗакрытия.ОтображатьЗаголовок;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаДобавления 			= СписокОтображаниеЗаголовков.Добавить();
			СтрокаДобавления.Имя 		= РезультатЗакрытия.Имя;
			СтрокаДобавления.Значение 	= РезультатЗакрытия.ОтображатьЗаголовок;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиРасшифровка(Имя)
	
	Адрес = "";
	
	Если ЗначениеЗаполнено(Имя) Тогда
		НайденныеСтроки = СписокРасшифровка.НайтиСтроки(Новый Структура("Имя",Имя));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденнаяСтрока 	= НайденныеСтроки[0];
			ИсходящаяСтруктура 	= Новый Структура("ТекстОбработчика,Шаблон",НайденнаяСтрока.ТекстОбработчика,НайденнаяСтрока.Шаблон);
			Адрес 				= ПоместитьВоВременноеХранилище(ИсходящаяСтруктура,УникальныйИдентификатор);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьКлассификатор(РезультатЗакрытия,ТекущаяТаблица) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		// Список доступных классификаторов
		Если СписокДоступныхКлассификаторов.НайтиСтроки(Новый Структура("Имя",РезультатЗакрытия.Имя)).Количество() <> 0 Тогда
			Для каждого ТекущийОбработчик Из СписокДоступныхКлассификаторов Цикл
				Если ТекущийОбработчик.Имя 					= РезультатЗакрытия.Имя Тогда
					ТекущийОбработчик.Значение 				= РезультатЗакрытия.Значение;
					ТекущийОбработчик.ИспользоватьАналитику = РезультатЗакрытия.ИспользоватьАналитику;							
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаДобавления 						= СписокДоступныхКлассификаторов.Добавить();
			СтрокаДобавления.Имя 					= РезультатЗакрытия.Имя;
			СтрокаДобавления.Значение 				= РезультатЗакрытия.Значение;
			СтрокаДобавления.ИспользоватьАналитику 	= РезультатЗакрытия.ИспользоватьАналитику;
		КонецЕсли;
		// Список отображения заголовков
		Если СписокОтображаниеЗаголовков.НайтиСтроки(Новый Структура("Имя",РезультатЗакрытия.Имя)).Количество() <> 0 Тогда
			Для каждого ТекущийОбработчик Из СписокОтображаниеЗаголовков Цикл
				Если ТекущийОбработчик.Имя 		= РезультатЗакрытия.Имя Тогда
					ТекущийОбработчик.Значение 	= РезультатЗакрытия.ОтображатьЗаголовок;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаДобавления 			= СписокОтображаниеЗаголовков.Добавить();
			СтрокаДобавления.Имя 		= РезультатЗакрытия.Имя;
			СтрокаДобавления.Значение 	= РезультатЗакрытия.ОтображатьЗаголовок;
		КонецЕсли;
		// Список Выводить только заполненные значения
		Если СписокВыводитьТолькоЗаполненныеЗначения.НайтиСтроки(Новый Структура("Имя",РезультатЗакрытия.Имя)).Количество() <> 0 Тогда
			Для каждого ТекущийОбработчик Из СписокВыводитьТолькоЗаполненныеЗначения Цикл
				Если ТекущийОбработчик.Имя 		= РезультатЗакрытия.Имя Тогда
					ТекущийОбработчик.Значение 	= РезультатЗакрытия.ВыводитьТолькоЗаполненныеЗначения;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаДобавления 			= СписокВыводитьТолькоЗаполненныеЗначения.Добавить();
			СтрокаДобавления.Имя 		= РезультатЗакрытия.Имя;
			СтрокаДобавления.Значение 	= РезультатЗакрытия.ВыводитьТолькоЗаполненныеЗначения;
		КонецЕсли;
		// Список Использовать расшифровку для отчета
		Если СписокИспользоватьРасшифровкуДляОтчета.НайтиСтроки(Новый Структура("Имя",РезультатЗакрытия.Имя)).Количество() <> 0 Тогда
			Для каждого ТекущийОбработчик Из СписокИспользоватьРасшифровкуДляОтчета Цикл
				Если ТекущийОбработчик.Имя 		= РезультатЗакрытия.Имя Тогда
					ТекущийОбработчик.Значение 	= РезультатЗакрытия.ИспользоватьРасшифровкуДляОтчета;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаДобавления 			= СписокИспользоватьРасшифровкуДляОтчета.Добавить();
			СтрокаДобавления.Имя 		= РезультатЗакрытия.Имя;
			СтрокаДобавления.Значение 	= РезультатЗакрытия.ИспользоватьРасшифровкуДляОтчета;
		КонецЕсли;
		ЗагрузитьСписокРасшифровкиКлассификатора(РезультатЗакрытия.СписокРасшифровкиКлассификатора);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиКлассификатора(Имя)

	Адрес = "";
	
	Если ЗначениеЗаполнено(Имя) Тогда
		НайденныеСтроки = СписокДоступныхКлассификаторов.НайтиСтроки(Новый Структура("Имя",Имя));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденнаяСтрока 	= НайденныеСтроки[0];
			ИсходящаяСтруктура 	= Новый Структура("Имя,Значение,ИспользоватьАналитику",НайденнаяСтрока.Имя,НайденнаяСтрока.Значение,НайденнаяСтрока.ИспользоватьАналитику);
			Адрес 				= ПоместитьВоВременноеХранилище(ИсходящаяСтруктура,УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции

&НаСервере
Функция ВыгрузитьСписокРасшифровкиКлассификаторов()
	Возврат ПоместитьВоВременноеХранилище(СписокРасшифровкиКлассификатора.Выгрузить(),УникальныйИдентификатор);	
КонецФункции

&НаСервере
Процедура ЗагрузитьСписокРасшифровкиКлассификатора(Адрес)

	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		СписокРасшифровкиКлассификатора.Очистить();
		СписокРасшифровкиКлассификатора.Загрузить(ПолучитьИзВременногоХранилища(Адрес));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеретаскиваниеСформироватьРеквизитыТабличнойЧасти(ТекущиеДерево,ВыбранноеЗначение)

	ИмяТаблицы = СтрЗаменить(ВыбранноеЗначение,"Объект.","");
	ОбъектМетданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Запись.Объект);
	НайденнаяТЧ		= ОбъектМетданных.ТабличныеЧасти.Найти(СокрЛП(ИмяТаблицы));
	Если НайденнаяТЧ <> Неопределено Тогда
		ТекущийРаздел 						= ДанныеФормыВЗначение(ЭтаФорма[ТекущиеДерево],Тип("ДеревоЗначений"));
		ЭлементРаздела 						= ТекущийРаздел.Строки.Добавить();
		ЭлементРаздела.Имя 					= ВыбранноеЗначение;
		ЭлементРаздела.СтандартнаяКартинка 	= 0;
		ЭлементРаздела.Пометка				= Истина;
		ЭлементРаздела.ЭтоТаблица			= Истина;
		ЭлементРаздела.Синоним				= НайденнаяТЧ.Синоним;
		ЭлементРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Таблица;
		Для каждого ЭлементТаблицы Из НайденнаяТЧ.Реквизиты Цикл
			РеквизитыРаздела 						= ЭлементРаздела.Строки.Добавить();
			РеквизитыРаздела.Имя 					= ЭлементТаблицы.Имя;
			РеквизитыРаздела.СтандартнаяКартинка 	= 1;
			РеквизитыРаздела.Пометка 				= Истина;
			РеквизитыРаздела.ОтображениеПоля 		= Перечисления.вогНастройкаОтображенияКлассификатор.Поле;
			РеквизитыРаздела.ЭтоРеквизитТаблицы		= Истина;
		КонецЦикла;
		ЗначениеВДанныеФормы(ТекущийРаздел,ЭтаФорма[ТекущиеДерево]);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДоступностьРедактированияКоличествоКолонок() Экспорт

	Если КоличествоКолонок <> 0 И СписокКоманд.Количество() <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"КоличествоКолонок","Доступность",Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"КоличествоКолонок","Доступность",Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	ИмяТаблицы = СтрЗаменить(Команда.Имя,"_УстановитьФлажки","");
	ТекущаяТаблица = ЭтаФорма[ИмяТаблицы];
	
	Для каждого Стр Из ТекущаяТаблица Цикл
		Стр.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	ИмяТаблицы 		= СтрЗаменить(Команда.Имя,"_СнятьФлажки","");
	ТекущаяТаблица 	= ЭтаФорма[ИмяТаблицы];
	
	Для каждого Стр Из ТекущаяТаблица Цикл
		Стр.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьЗначение(Команда)
	
	ТекущаяСтрока 	= Элементы[СтрЗаменить(Команда.Имя,"_УдалитьЗначение","")].ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ИмяТаблицы 	= СтрЗаменить(Команда.Имя,"_УдалитьЗначение","");
		ЭтаФорма[ИмяТаблицы].Удалить(ТекущаяСтрока);
	КонецЕсли;
	
	// Удаление из служебных таблиц
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("СписокГипперссылок");
	МассивТаблиц.Добавить("СписокДоступныхКлассификаторов");
	МассивТаблиц.Добавить("СписокРасшифровка");
	МассивТаблиц.Добавить("СписокОтображаниеЗаголовков");
	
	Для каждого ТекТаблица Из МассивТаблиц Цикл
		НайтиСтроки = ЭтаФорма[ТекТаблица].НайтиСтроки(Новый Структура("Имя",ТекущаяСтрока.Наименование));
		Если НайтиСтроки.Количество() <> 0 Тогда
			Для каждого СтрокаУдаления Из НайтиСтроки Цикл
				ЭтаФорма[ТекТаблица].Удалить(СтрокаУдаления);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЗаголовк(Команда)

	ИмяТаблицы 		= СтрЗаменить(Команда.Имя,"_СоздатьЗаголовок","");
	ТекущаяТаблица 	= ЭтаФорма[ИмяТаблицы];

	Оповещение = Новый ОписаниеОповещения("СоздатьЗаголовк",ЭтаФорма,ТекущаяТаблица);
	ПоказатьВводСтроки(Оповещение, ,"Название группы",150,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьЗаголовок(Команда)

	ИмяТаблицы 		= СтрЗаменить(Команда.Имя,"_УдалитьЗаголовок","");
	ТекущаяТаблица 	= ЭтаФорма[ИмяТаблицы];

	СписокЗаголовоков 	= Новый СписокЗначений;
	СтрокиДерева 		= ТекущаяТаблица.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из СтрокиДерева Цикл
		Если ЭлементДерева.ОтображениеПоля 	= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Заголовок") Тогда
			СписокЗаголовоков.Добавить(ЭлементДерева.Имя,ЭлементДерева.Имя, ,БиблиотекаКартинок.Папка);
		ИначеЕсли ЭлементДерева.ОтображениеПоля 	= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Гиперссылка") Тогда
			СписокЗаголовоков.Добавить(ЭлементДерева.Имя,ЭлементДерева.Имя, ,БиблиотекаКартинок.ВставитьНовуюГиперссылку);
		ИначеЕсли ЭлементДерева.ОтображениеПоля 	= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Запрос") Тогда
			СписокЗаголовоков.Добавить(ЭлементДерева.Имя,ЭлементДерева.Имя, ,БиблиотекаКартинок.КонструкторЗапроса);
		ИначеЕсли ЭлементДерева.ОтображениеПоля 	= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Разделитель") Тогда
			СписокЗаголовоков.Добавить(ЭлементДерева.Имя,ЭлементДерева.Имя, ,БиблиотекаКартинок.CRM_СтрелкаВниз);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокЗаголовоков.Количество() <> 0 Тогда
		Оповещение = Новый ОписаниеОповещения("УдалитьЭлементыРаздела",ЭтаФорма,ТекущаяТаблица);
		СписокЗаголовоков.ПоказатьОтметкуЭлементов(Оповещение,"Удаление элементов раздела");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьГиперссылку(Команда)

	ИмяТаблицы 		= СтрЗаменить(Команда.Имя,"_ДобавитьГиперссылку","");
	ТекущаяТаблица 	= ЭтаФорма[ИмяТаблицы];

	ПараметрыФормы 	= Новый Структура("Идентификатор,ТипОтображения",Запись.Объект
										,ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Гиперссылка"));
	Оповещение 		= Новый ОписаниеОповещения("ДобавитьГиперссылкуЗавершение",ЭтаФорма,ТекущаяТаблица);
	ОткрытьФорму("РегистрСведений.вогНастройкиОтображенияКлассификаторов.Форма.НастройкаГиперссылки",ПараметрыФормы,ЭтаФорма,
					УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВнешниеДанные(Команда)

	ИмяТаблицы 		= СтрЗаменить(Команда.Имя,"_ДобавитьВнешниеДанные","");
	ТекущаяТаблица 	= ЭтаФорма[ИмяТаблицы];

	ПараметрыФормы 	= Новый Структура("Идентификатор,ТипОтображения",Запись.Объект
										,ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Запрос"));
	Оповещение 		= Новый ОписаниеОповещения("ДобавитьВнешниеДанныеЗавершение",ЭтаФорма,ТекущаяТаблица);
	ОткрытьФорму("РегистрСведений.вогНастройкиОтображенияКлассификаторов.Форма.НастройкаВнешниеДанные", ПараметрыФормы,ЭтаФорма,
					УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьРазделитель(Команда)

	ИмяТаблицы 		= СтрЗаменить(Команда.Имя,"_ДобавитьРазделитель","");
	ТекущаяТаблица 	= ЭтаФорма[ИмяТаблицы];
	КолРазделителей	= 1;
	Строкидерева 	= ТекущаяТаблица.ПолучитьЭлементы();
	
	Для каждого Стр Из Строкидерева Цикл
		Если Стр.ОтображениеПоля 	= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Разделитель") Тогда
			КолРазделителей 		= КолРазделителей + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиДерева 							= ТекущаяТаблица.ПолучитьЭлементы();
	НовыйЭлементДерева 						= СтрокиДерева.Добавить();
	НовыйЭлементДерева.Имя 					= "Разделитель_" +КолРазделителей;
	НовыйЭлементДерева.СтандартнаяКартинка 	= 1;
	НовыйЭлементДерева.Пометка				= Истина;
	НовыйЭлементДерева.ОтображениеПоля		= ПредопределенноеЗначение("Перечисление.вогНастройкаОтображенияКлассификатор.Разделитель");
	НовыйЭлементДерева.ЭтоРаздилитель		= Истина;

КонецПроцедуры

&НаКлиенте
Процедура КомандаВверх(Команда)

	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для перемещения требуется OS Microsoft Windows.'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		Wsh = Новый COMОбъект("Wscript.shell");
		Wsh.SendKeys("^+{UP}");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВниз(Команда)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для перемещения требуется OS Microsoft Windows.'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		Wsh = Новый COMОбъект("Wscript.shell");
		Wsh.SendKeys("^+{DOWN}");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьКолонку(Команда)

	ИндексКолонки = Число(СтрЗаменить(Команда.Имя,"Колонка_УдалитьКолонку_",""));
	УдалитьКолонкуРазделСервер(ИндексКолонки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранКаталог(Каталог,ДополнительныеПараметры) Экспорт
	
	Если Каталог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Каталог.Количество() <> 0 Тогда
		КаталогЗаписи 	= Каталог[0];
		ФайлМакета		= ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогЗаписи) + "export_layout.xml";
		АдресФайла 		= ЭкспортМакетаСервер();
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		ФайлЗаписи = ПолучитьИзВременногоХранилища(АдресФайла);
		ФайлЗаписи.Записать(ФайлМакета);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ЭкспортМакетаСервер()

	ТекущийОбъект = РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СоздатьНаборЗаписей();
	ТекущийОбъект.Отбор.Объект.Установить(Запись.Объект);
	ТекущийОбъект.Отбор.Включен.Установить(Запись.Включен);
	ТекущийОбъект.Отбор.ИспользоватьОтбор.Установить(Запись.ИспользоватьОтбор);
	ТекущийОбъект.Отбор.Наименоваине.Установить(Запись.Наименоваине);
	ТекущийОбъект.Прочитать();
	
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML 			= Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Начало");
	Сериализатор 		= Новый СериализаторXDTO(ФабрикаXDTO);
	Сериализатор.ЗаписатьXML(ЗаписьXML,ТекущийОбъект);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();

	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
КонецФункции 

// ++ VOG Солодов В.В. 08.11.2019 task 821
&НаКлиенте
Процедура КомандаФорматирование(Команда)
	
	ИмяТаблицы 		= СтрЗаменить(Команда.Имя, "_Форматирование", "");
	ТекущаяТаблица 	= Элементы[ИмяТаблицы];
	ТекущиеДанные 	= ТекущаяТаблица.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("КомандаФорматированиеЗавершение", ЭтотОбъект, ИмяТаблицы);
	
	Конструктор = Новый КонструкторФорматнойСтроки(ТекущиеДанные.Формат);
	Конструктор.Показать(ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаФорматированиеЗавершение(РезультатФорматирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатФорматирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТаблица 	= Элементы[ДополнительныеПараметры];
	ТекущиеДанные 	= ТекущаяТаблица.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Формат = РезультатФорматирования;
	
КонецПроцедуры
// -- VOG Солодов В.В. 08.11.2019

#КонецОбласти

// - Тищенко В.В.

// ++ VOG Солодов В.В. 01.11.2019 task 821
&НаСервере
Функция СформироватьИмяКорневогоЭлемента(ИмяРеквизита, Обратно = Ложь)
	
	СсылкаНаИсточник = Запись.Объект.ЗначениеПустойСсылки;
	
	ВидОбъекта 		= ОбщегоНазначения.ВидОбъектаПоСсылке(СсылкаНаИсточник);
	ИмяИсточника 	= СсылкаНаИсточник.Метаданные().Имя;
	
	Если Обратно Тогда
		
		ШаблонИмени = НСтр("ru = '%1.%2'");
		ШаблонИмени = СтрШаблон(ШаблонИмени, ВидОбъекта, ИмяИсточника);
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, ШаблонИмени, "Объект");
		
	Иначе
		
		ШаблонИмени = НСтр("ru = '%1.%2.%3'");
		ИмяЭлемента = СтрШаблон(ШаблонИмени, ВидОбъекта, ИмяИсточника, ИмяРеквизита);
		
	КонецЕсли;
	
	Возврат ИмяЭлемента;
	
КонецФункции
// -- VOG Солодов В.В. 01.11.2019
