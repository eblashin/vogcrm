//////////////////////////////////////////////////////////////////////
//////////   МОДУЛЬ ФОРМЫ
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////   ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//////////////////////////////////////////////////////////////////////
//////////   ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура выполняет построение дерева настроек.
//
// Параметры:
//    НЕТ
//
// Возвращаемое значение;
//    НЕТ
//
Процедура ПостроитьДеревоНаСервере()
	ДеревоНастроек.ПолучитьЭлементы().Очистить();
	
	// Отслеживание модифицированности дерева.
	ДеревоИзменено = Ложь;
	СтароеЗначение = КомпанияОфис;
	
	// Нет офиса - нет записей
	Если КомпанияОфис.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Выбираем доступную важность.
	ЗапросПоВажности = Новый Запрос();
	
	ЗапросПоВажности.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                         |	CRM_ВажностьКлиентов.Ссылка,
	                         |	CRM_ВажностьКлиентов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	                         |ИЗ
	                         |	Справочник.CRM_ВажностьКлиентов КАК CRM_ВажностьКлиентов
	                         |ГДЕ
	                         |	НЕ CRM_ВажностьКлиентов.ПометкаУдаления
	                         |
	                         |УПОРЯДОЧИТЬ ПО
	                         |	РеквизитДопУпорядочивания";
							 
	ВыборкаПоВажности = ЗапросПоВажности.Выполнить().Выбрать();
	
	// Выбираем доступные типы услуг.
	ЗапросПоТипамУслуг = Новый Запрос();
	
	ЗапросПоТипамУслуг.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	CRM_ТипУслуги.Ссылка
	                          |ИЗ
	                          |	Справочник.CRM_ТипУслуги КАК CRM_ТипУслуги
	                          |ГДЕ
	                          |	НЕ CRM_ТипУслуги.ПометкаУдаления
	                          |
	                          |УПОРЯДОЧИТЬ ПО
	                          |	CRM_ТипУслуги.Наименование";
							  
	ВыборкаПоТипамУслуг = ЗапросПоТипамУслуг.Выполнить().Выбрать();
	
	// Готовим кэш регистра, чтобы постоянно его не перечитывать.
	ЗапросКэша = Новый Запрос();
	ЗапросКэша.Текст = "ВЫБРАТЬ
	                   |	CRM_ГоризонтПланированияВзаимодействий.Важность,
	                   |	CRM_ГоризонтПланированияВзаимодействий.ТипУслуги,
	                   |	CRM_ГоризонтПланированияВзаимодействий.Дней
	                   |ИЗ
	                   |	РегистрСведений.CRM_ГоризонтПланированияВзаимодействий КАК CRM_ГоризонтПланированияВзаимодействий
	                   |ГДЕ
	                   |	CRM_ГоризонтПланированияВзаимодействий.КомпанияОфис = &КомпанияОфис";
					   
	ЗапросКэша.УстановитьПараметр("КомпанияОфис", КомпанияОфис);
	КэшНастроек = ЗапросКэша.Выполнить().Выгрузить();
	
	// Структуры поиска
	ПоискВажности = Новый Структура("Важность,ТипУслуги", Неопределено, Справочники.CRM_ТипУслуги.ПустаяСсылка());
	ПоискТипаУслуги = Новый Структура("Важность,ТипУслуги");
	
	// Строим дерево
	
	// Добавляем потенциального клиента
	ВеткаВажности = ДеревоНастроек.ПолучитьЭлементы().Добавить();
	ВеткаВажности.ВажностьТипУслуги = Справочники.CRM_ВажностьКлиентов.ПустаяСсылка();
	// Заполним данные о днях
	ПоискВажности.Важность = Справочники.CRM_ВажностьКлиентов.ПустаяСсылка();
	НайденныеСтроки = КэшНастроек.НайтиСтроки(ПоискВажности);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВеткаВажности.Дней			= НайденныеСтроки[0].Дней;
		ВеткаВажности.ИзРегистра	= НайденныеСтроки[0].Дней;
	КонецЕсли;
	ВыборкаПоТипамУслуг.Сбросить();
	Пока ВыборкаПоТипамУслуг.Следующий() Цикл
		ВеткаПоТипамУслуг					= ВеткаВажности.ПолучитьЭлементы().Добавить();
		ВеткаПоТипамУслуг.ВажностьТипУслуги	= ВыборкаПоТипамУслуг.Ссылка;
		// Заполним данные о днях
		ПоискТипаУслуги.Важность	= Справочники.CRM_ВажностьКлиентов.ПустаяСсылка();
		ПоискТипаУслуги.ТипУслуги	= ВыборкаПоТипамУслуг.Ссылка;
		НайденныеСтроки = КэшНастроек.НайтиСтроки(ПоискТипаУслуги);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВеткаПоТипамУслуг.Дней			= НайденныеСтроки[0].Дней;
			ВеткаПоТипамУслуг.ИзРегистра	= НайденныеСтроки[0].Дней;
		Иначе
			// у родителя возьмем
			ВеткаПоТипамУслуг.Дней			= ВеткаВажности.Дней;
			ВеткаПоТипамУслуг.ИзРегистра	= 0;
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем остальные элементы
	Пока ВыборкаПоВажности.Следующий() Цикл
		
		ВеткаВажности = ДеревоНастроек.ПолучитьЭлементы().Добавить();
		ВеткаВажности.ВажностьТипУслуги = ВыборкаПоВажности.Ссылка;
		
		// Заполним данные о днях
		ПоискВажности.Важность = ВыборкаПоВажности.Ссылка;
		НайденныеСтроки = КэшНастроек.НайтиСтроки(ПоискВажности);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВеткаВажности.Дней       = НайденныеСтроки[0].Дней;
			ВеткаВажности.ИзРегистра = НайденныеСтроки[0].Дней;
		КонецЕсли;
		
		ВыборкаПоТипамУслуг.Сбросить();
		
		Пока ВыборкаПоТипамУслуг.Следующий() Цикл
			ВеткаПоТипамУслуг = ВеткаВажности.ПолучитьЭлементы().Добавить();
			ВеткаПоТипамУслуг.ВажностьТипУслуги = ВыборкаПоТипамУслуг.Ссылка;
			
			// Заполним данные о днях
			ПоискТипаУслуги.Важность = ВыборкаПоВажности.Ссылка;
			ПоискТипаУслуги.ТипУслуги  = ВыборкаПоТипамУслуг.Ссылка;
			НайденныеСтроки = КэшНастроек.НайтиСтроки(ПоискТипаУслуги);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ВеткаПоТипамУслуг.Дней       = НайденныеСтроки[0].Дней;
				ВеткаПоТипамУслуг.ИзРегистра = НайденныеСтроки[0].Дней;
			Иначе
				// у родителя возьмем
				ВеткаПоТипамУслуг.Дней       = ВеткаВажности.Дней;
				ВеткаПоТипамУслуг.ИзРегистра = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура управляет возможностью редактирования данных.
//
// Параметры:
//    НЕТ
//
// Возвращаемое значение;
//    НЕТ
//
&НаКлиенте
Процедура УстановитьВозможностьРедактирования()
	Элементы.ДеревоНастроекДней.ТолькоПросмотр = (КомпанияОфис <> КомпанияОфисПользователя);
КонецПроцедуры

// Процедура сохраняет данные дерева настроек в регистр.
//
// Параметры:
//    НЕТ
//
// Возвращаемое значение;
//    НЕТ
//
&НаСервере
Процедура СохранитьДанныеДереваВРегистр()
	ДеревоИзменено = Ложь;
	
	// Все делаем в транзакции
	НачатьТранзакцию();
	
	// Очищаем регистр для данного офиса.
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ГоризонтПланированияВзаимодействий.Важность,
	               |	CRM_ГоризонтПланированияВзаимодействий.ТипУслуги,
	               |	CRM_ГоризонтПланированияВзаимодействий.КомпанияОфис
	               |ИЗ
	               |	РегистрСведений.CRM_ГоризонтПланированияВзаимодействий КАК CRM_ГоризонтПланированияВзаимодействий
	               |ГДЕ
	               |	CRM_ГоризонтПланированияВзаимодействий.КомпанияОфис = &КомпанияОфис";
	Запрос.УстановитьПараметр("КомпанияОфис", КомпанияОфис);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Ключ = РегистрыСведений.CRM_ГоризонтПланированияВзаимодействий.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Ключ, Выборка);
		Попытка
			Ключ.Прочитать();
			// Проверим на всякий случай
			Если Ключ.Выбран() Тогда
				Ключ.Удалить();
			КонецЕсли;
			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Сохраняем новые данные
	Для Каждого ВеткаВажности Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		ДнейВажности = ВеткаВажности.Дней;
		Важность     = ВеткаВажности.ВажностьТипУслуги;
		
		Сохранять = (ДнейВажности > 0);
		
		// Сохраняем
		Если Сохранять Тогда
			Ключ = РегистрыСведений.CRM_ГоризонтПланированияВзаимодействий.СоздатьМенеджерЗаписи();
			Ключ.КомпанияОфис = КомпанияОфис;
			Ключ.Важность     = Важность;
			Ключ.ТипУслуги    = Справочники.CRM_ТипУслуги.ПустаяСсылка();
			Ключ.Дней         = ВеткаВажности.Дней;
			
			Попытка
				Ключ.Записать(Истина);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого ВеткаТипаУслуги Из ВеткаВажности.ПолучитьЭлементы() Цикл
			// А нужно ли сохранять "частное" значение?
			Сохранять = (ВеткаТипаУслуги.ИзРегистра = ВеткаТипаУслуги.Дней);
			Сохранять = Сохранять И (ВеткаТипаУслуги.Дней <> ДнейВажности);
			
			// Сохраняем
			Если Сохранять Тогда
				Ключ = РегистрыСведений.CRM_ГоризонтПланированияВзаимодействий.СоздатьМенеджерЗаписи();
				Ключ.КомпанияОфис = КомпанияОфис;
				Ключ.Важность     = Важность;
				Ключ.ТипУслуги    = ВеткаТипаУслуги.ВажностьТипУслуги;
				Ключ.Дней         = ВеткаТипаУслуги.Дней;
				
				Попытка
					Ключ.Записать(Истина);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура раскрывает дерево настроек.
//
// Параметры:
//    НЕТ
//
// Возвращаемое значение;
//    НЕТ
//
&НаКлиенте
Процедура РаскрытьДерево()
	
	Для Каждого Ветка Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Элементы.ДеревоНастроек.Развернуть(Ветка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
//////////   ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДеревоНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// нельзя добавлять
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПередУдалением(Элемент, Отказ)
	// нельзя удалять
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпанияОфисПриИзменении(Элемент)
	// А хочет ли пользователь, чтобы изменения не сохранились?
	Если ДеревоИзменено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаОтветаОбИзмененииОфиса", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(ОповещениеОЗавершении, "Данные были изменены! Продолжить без сохранения изменений?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ПостроитьДеревоНаСервере();
		РаскрытьДерево();
		УстановитьВозможностьРедактирования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекДнейПриИзменении(Элемент)
	ДеревоИзменено = Истина; // самое важное
	
	ТекВетка = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекВетка.ПолучитьРодителя() = Неопределено Тогда
		// Это важность
		
		ТекВетка.ИзРегистра = ТекВетка.Дней;
		
		// Проставим проценты всем "детям".
		Для Каждого ВеткаТипаУслуги Из ТекВетка.ПолучитьЭлементы() Цикл
			ВеткаТипаУслуги.Дней = ТекВетка.Дней;
			ВеткаТипаУслуги.ИзРегистра = 0; // Ибо теперь данные берутся "из важности".
		КонецЦикла;
		
	Иначе
		// Это тип услуги
		
		ТекВетка.ИзРегистра = ТекВетка.Дней;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
//////////   ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура Обновить(Команда)
	// А хочет ли пользователь, чтобы изменения не сохранились?
	Если ДеревоИзменено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаОтветаОбОбновлении", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(ОповещениеОЗавершении, "Данные были изменены! Продолжить без сохранения изменений?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ПостроитьДеревоНаСервере();
		РаскрытьДерево();
		УстановитьВозможностьРедактирования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	// А хочет ли пользователь, чтобы изменения не сохранились?
	Если ДеревоИзменено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаОтветаОЗакрытии", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(ОповещениеОЗавершении, "Данные были изменены! Продолжить без сохранения изменений?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	ДеревоИзменено = Ложь;
	СохранитьДанныеДереваВРегистр();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДеревоИзменено = Ложь;
	СохранитьДанныеДереваВРегистр();
	Закрыть();
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
//////////   ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ

&НаКлиенте
Процедура ОбработкаОтветаОбИзмененииОфиса(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПостроитьДеревоНаСервере();
		РаскрытьДерево();
		УстановитьВозможностьРедактирования();
	Иначе
		КомпанияОфис = СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОбОбновлении(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПостроитьДеревоНаСервере();
		РаскрытьДерево();
		УстановитьВозможностьРедактирования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОЗакрытии(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДеревоИзменено = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Заполним данные из параметров сеанса.
	Пользователь = ПараметрыСеанса.АвторизованныйПользователь;
	КомпанияОфисПользователя = Пользователь.Подразделение.CRM_офис;
	
	// Установим значение из параметрва или по умолчанию.
	Если Параметры.Свойство("Ссылка") И ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		КомпанияОфис = Параметры.Ссылка;
	Иначе
		КомпанияОфис = КомпанияОфисПользователя;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Сразу построим дерево
	ПостроитьДеревоНаСервере();
	РаскрытьДерево();
	УстановитьВозможностьРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	// А хочет ли пользователь, чтобы изменения не сохранились?
	Если ДеревоИзменено Тогда
		Отказ = Истина;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаОтветаОЗакрытии", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(ОповещениеОЗавершении, "Данные были изменены! Продолжить без сохранения изменений?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
