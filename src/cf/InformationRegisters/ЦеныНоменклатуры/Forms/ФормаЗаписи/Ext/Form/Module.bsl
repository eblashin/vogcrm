&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
		
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, Номенклатура.ЕдиницаИзмерения.Наименование + " (ед. изм.)");
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	МассивОтбора.Добавить(Номенклатура.НоменклатурнаяГруппа);
	
	Родитель = Номенклатура.НоменклатурнаяГруппа.Родитель;
		
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()	

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(Номенклатура)
	
	Возврат Номенклатура.ЕдиницаИзмерения;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()	

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ВидЦенПриИзменении.
//
Функция ПолучитьДанныеВидЦенПриИзменении(ВидЦен)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
	СтруктураДанных.Вставить("ПорядокОкругления", ВидЦен.ПорядокОкругления);
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеВидЦенПриИзменении()	

&НаКлиенте
// Округляет число по заданному порядку.
//
// Параметры:
//  Число        - Число, которое необходимо округлить.
//  ПорядокОкругления - Перечисления.ПорядкиОкругления - порядок округления.
//  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
//
// Возвращаемое значение:
//  Число        - результат округления.
//
Функция ОкруглитьЦену(Число, ПравилоОкругления, ОкруглятьВБольшуюСторону) Экспорт
	
	Перем Результат; // Возвращаемый результат.
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПравилоОкругления) Тогда
		ПорядокОкругления = ПорядкиОкругленияОкр0_01; 
	Иначе
		ПорядокОкругления = ПравилоОкругления;
	КонецЕсли;
	Порядок = Число(Строка(ПорядокОкругления));
	
	// Вычислим количество интервалов, входящих в число.
	КоличествоИнтервал	= Число / Порядок;
	
	// Вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4.
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦену()

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаписьБылЗаписана = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Запись.ИсходныйКлючЗаписи.ВидЦен) Тогда
		Запись.Автор = ПараметрыСеанса.ТекущийПользователь;		
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
			И Параметры.ЗначенияЗаполнения.Свойство("Номенклатура")
			И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Номенклатура) Тогда
			Запись.ЕдиницаИзмерения = Параметры.ЗначенияЗаполнения.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли; 
	КонецЕсли; 
	
	ОкруглятьВБольшуюСторону = Запись.ВидЦен.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = Запись.ВидЦен.ПорядокОкругления;
	ПорядкиОкругленияОкр0_01 = Перечисления.ПорядкиОкругления.Окр0_01;	
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	Если ЗаписьБылЗаписана Тогда
		Оповестить("ИзмененаЦена", ЗаписьБылЗаписана);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ВидЦен.РассчитываетсяДинамически Тогда
		
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя записывать данные с динамическими видами цен!";
		Сообщение.Поле 	= "Запись.ВидЦен";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекущийОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаписьБылЗаписана = Истина;
КонецПроцедуры

#Область ПроцедурыОбработчикиРеквизитовФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
Процедура НоменклатураПриИзменении(Элемент)
	
	Запись.ЕдиницаИзмерения = ПолучитьДанныеНоменклатураПриИзменении(Запись.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ЕдиницаИзмерения.
//
Процедура ЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Запись.Номенклатура);
		
	Для каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;	
	
КонецПроцедуры // ЕдиницаИзмеренияНачалоВыбораИзСписка()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
Процедура ВидЦенПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьДанныеВидЦенПриИзменении(Запись.ВидЦен);
	ОкруглятьВБольшуюСторону = СтруктураДанных.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = СтруктураДанных.ПорядокОкругления;
	
	Запись.Цена = ОкруглитьЦену(Запись.Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
	
КонецПроцедуры // ВидЦенПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
Процедура ЦенаПриИзменении(Элемент)
	
	Запись.Цена = ОкруглитьЦену(Запись.Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
	
КонецПроцедуры // ЦенаПриИзменении()

#КонецОбласти

#КонецОбласти
