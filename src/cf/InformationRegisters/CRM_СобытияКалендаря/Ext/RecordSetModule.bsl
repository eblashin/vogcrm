#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем Объект Экспорт;
Перем Параметры Экспорт;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Инициализация()
	Объект		= Неопределено;
	Параметры	= Неопределено;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕНОСА СОБЫТИЯ КАЛЕНДАРЯ НА ДРУГУЮ ДАТУ

Процедура ПеренестиОбъект_Документ_CRM_КонтрольнаяТочкаПроекта(Ошибки)
	// Если нужно переносить документ CRM_КонтрольнаяТочкаПроекта на другую дату
	// перетаскиванием в календаре, код переноса нужно разместить здесь.
	
КонецПроцедуры

Процедура ПеренестиОбъект_Задача_ЗадачаИсполнителя(Ошибки)
	Перем ПеренестиНаДатуВремя;
	Перем СобытиеНаВесьДень;
	Перем ПользовательОтбор;
	Перем СтарыйПользовательОтбор;
	
	Параметры.Свойство("ПеренестиНаДатуВремя",		ПеренестиНаДатуВремя);
	Параметры.Свойство("СобытиеНаВесьДень",			СобытиеНаВесьДень);
	Параметры.Свойство("ПользовательОтбор",			ПользовательОтбор);
	Параметры.Свойство("СтарыйПользовательОтбор",	СтарыйПользовательОтбор);
	
	Если ПеренестиНаДатуВремя = НачалоДня(ПеренестиНаДатуВремя) Тогда
		ПеренестиНаДатуВремя = ПеренестиНаДатуВремя + (Объект.СрокИсполнения - НачалоДня(Объект.СрокИсполнения));
	КонецЕсли;
	
	РезультатВыполнения = Истина;
	Попытка
		Если Объект.СрокИсполнения <> ПеренестиНаДатуВремя Тогда
			ЗадачаОбъект = Объект.ПолучитьОбъект();
			ЗадачаОбъект.Заблокировать();
			
			ЗадачаОбъект.СрокИсполнения = ПеренестиНаДатуВремя;
			ЗадачаОбъект.Записать();
		КонецЕсли;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		
		СтрОшибка = НСтр("ru = 'Не удалось перенести задачу: '")
			+ """" + Строка(Объект) + """: "
			+ КраткоеПредставлениеОшибки(ИнфОбОшибке);
		//
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
		Ошибки = Ошибки + СтрОшибка;
		
		РезультатВыполнения = Ложь;
	КонецПопытки;
	
	Если РезультатВыполнения И ЗначениеЗаполнено(ПользовательОтбор) И ПользовательОтбор <> Объект.Исполнитель Тогда
		МассивЗадач = Новый Массив();
		МассивЗадач.Добавить(Объект);
		МассивПеренаправленныхЗадач = Новый Массив();
		CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(МассивЗадач, ПользовательОтбор, Ложь, МассивПеренаправленныхЗадач);
		
		Если ТипЗнч(МассивПеренаправленныхЗадач) = Тип("Массив") И МассивПеренаправленныхЗадач.Количество() > 0 Тогда
			Попытка
				Если МассивПеренаправленныхЗадач[0].СрокИсполнения <> ПеренестиНаДатуВремя Тогда
					ЗадачаОбъект = МассивПеренаправленныхЗадач[0].ПолучитьОбъект();
					ЗадачаОбъект.Заблокировать();
					
					ЗадачаОбъект.СрокИсполнения = ПеренестиНаДатуВремя;
					ЗадачаОбъект.Записать();
				КонецЕсли;
			Исключение
				ИнфОбОшибке = ИнформацияОбОшибке();
				
				СтрОшибка = НСтр("ru = 'Не удалось перенести задачу: '")
					+ """" + Строка(Объект) + """: "
					+ КраткоеПредставлениеОшибки(ИнфОбОшибке);
				//
				Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
				Ошибки = Ошибки + СтрОшибка;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПеренестиОбъектПоУмолчанию(Ошибки)
	Перем ПеренестиНаДатуВремя;
	Перем СобытиеНаВесьДень;
	Перем ПользовательОтбор;
	Перем ПомещениеОтбор;
	Перем СтарыйПользовательОтбор;
	Перем СтароеПомещениеОтбор;
	Перем ПериодНачало;
	Перем ПериодОкончание;
	Перем Пользователь;
	
	Параметры.Свойство("ПеренестиНаДатуВремя",		ПеренестиНаДатуВремя);
	Параметры.Свойство("СобытиеНаВесьДень",			СобытиеНаВесьДень);
	Параметры.Свойство("ПользовательОтбор",			ПользовательОтбор);
	Параметры.Свойство("ПомещениеОтбор",			ПомещениеОтбор);
	Параметры.Свойство("СтарыйПользовательОтбор",	СтарыйПользовательОтбор);
	Параметры.Свойство("СтароеПомещениеОтбор",		СтароеПомещениеОтбор);
	Параметры.Свойство("ПериодНачало",				ПериодНачало);
	Параметры.Свойство("ПериодОкончание",			ПериодОкончание);
	Параметры.Свойство("Пользователь",				Пользователь);
	
	Отбор.Объект.Установить(Объект);
	Если ЗначениеЗаполнено(ПериодНачало) Тогда
		Отбор.ПериодНачало.Установить(ПериодНачало);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПериодОкончание) Тогда
		Отбор.ПериодОкончание.Установить(ПериодОкончание);
	КонецЕсли;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Отбор.Пользователь.Установить(Пользователь);
	КонецЕсли;
	Прочитать();
	ТаблицаСобытия = Выгрузить();
	Очистить();
	Записать();
	
	Если ТаблицаСобытия.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСобытия Цикл
		Если	ЗначениеЗаполнено(ПользовательОтбор)
			И	ЗначениеЗаполнено(СтарыйПользовательОтбор)
			И	ПользовательОтбор <> СтарыйПользовательОтбор Тогда
			//
			Если СтрокаТаблицы.Пользователь = СтарыйПользовательОтбор Тогда
				СтрокаТаблицы.Пользователь = ПользовательОтбор;
				Если ЗначениеЗаполнено(Отбор.Пользователь.Значение) И Отбор.Пользователь.Использование Тогда
					Отбор.Пользователь.Установить(СтрокаТаблицы.Пользователь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если	ЗначениеЗаполнено(ПомещениеОтбор)
			И	ЗначениеЗаполнено(СтароеПомещениеОтбор)
			И	ПомещениеОтбор <> СтароеПомещениеОтбор Тогда
			//
			Если СтрокаТаблицы.ПомещениеСобытия = СтароеПомещениеОтбор Тогда
				СтрокаТаблицы.ПомещениеСобытия = ПомещениеОтбор;
			КонецЕсли;
		КонецЕсли;
		
		РазностьДат = СтрокаТаблицы.ПериодОкончание - СтрокаТаблицы.ПериодНачало;
		
		СтрокаТаблицы.ПериодНачало = ПеренестиНаДатуВремя;
		Если ЗначениеЗаполнено(Отбор.ПериодНачало.Значение) И Отбор.ПериодНачало.Использование Тогда
			Отбор.ПериодНачало.Установить(СтрокаТаблицы.ПериодНачало);
		КонецЕсли;
		
		СтрокаТаблицы.ПериодОкончание = СтрокаТаблицы.ПериодНачало + РазностьДат;
		Если ЗначениеЗаполнено(Отбор.ПериодОкончание.Значение) И Отбор.ПериодОкончание.Использование Тогда
			Отбор.ПериодОкончание.Установить(СтрокаТаблицы.ПериодОкончание);
		КонецЕсли;
	КонецЦикла;
	
	Загрузить(ТаблицаСобытия);
	Попытка
		Записать();
	Исключение
		СтрОшибка = ОписаниеОшибки();
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
		Ошибки = Ошибки + СтрОшибка;
	КонецПопытки;
КонецПроцедуры

// Функция переносит объект
//
Функция ПеренестиОбъект() Экспорт
	Ошибки = "";
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
		Ошибки = Ошибки + НСтр("ru = 'Не выбран объект для переноса!'");
	КонецЕсли;
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
		Ошибки = Ошибки + НСтр("ru = 'Данные для действия не инициализированы!'");
	КонецЕсли;
	Если ТипЗнч(Параметры) = Тип("Структура") И (Не Параметры.Свойство("ПеренестиНаДатуВремя") Или Не ЗначениеЗаполнено(Параметры.ПеренестиНаДатуВремя)) Тогда
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
		Ошибки = Ошибки + НСтр("ru = 'Не указана дата на которую переносится объект!'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(Ошибки) Тогда Возврат Ошибки; КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
		ПеренестиОбъект_Документ_CRM_КонтрольнаяТочкаПроекта(Ошибки);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПеренестиОбъект_Задача_ЗадачаИсполнителя(Ошибки);
		
	Иначе
		ПеренестиОбъектПоУмолчанию(Ошибки);
		
	КонецЕсли;
	
	Инициализация();
	
	Возврат Ошибки;
КонецФункции

//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УДАЛЕНИЯ СОБЫТИЯ ИЗ КАЛЕНДАРЯ

Процедура УдалитьСсылочныйОбъектПоУмолчанию(УдаляемыйОбъект, Ошибки, ОчищатьЗаписиРегистраВручную = Ложь)
	Попытка
		ОбъектДляУдаления = УдаляемыйОбъект.Объект.ПолучитьОбъект();
		Попытка ОбъектДляУдаления.ДополнительныеСвойства.Вставить("ОбъектЗаписанПользователем");
		Исключение КонецПопытки;
		ОбъектДляУдаления.УстановитьПометкуУдаления(Истина);
	Исключение
		СтрОшибка = ОписаниеОшибки();
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
		Ошибки = Ошибки + СтрОшибка;
	КонецПопытки;
	
	Если ОчищатьЗаписиРегистраВручную Тогда
		Отбор.Объект.Установить(УдаляемыйОбъект.Объект);
		Попытка
			Записать();
		Исключение
			СтрОшибка = ОписаниеОшибки();
			Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
			Ошибки = Ошибки + СтрОшибка;
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьОбъект_Документ_CRM_Событие(УдаляемыйОбъект, Ошибки)
	УдалитьСсылочныйОбъектПоУмолчанию(УдаляемыйОбъект, Ошибки, Ложь);
КонецПроцедуры

Процедура УдалитьОбъект_Документ_CRM_КонтрольнаяТочкаПроекта(УдаляемыйОбъект, Ошибки)
	УдалитьСсылочныйОбъектПоУмолчанию(УдаляемыйОбъект, Ошибки, Ложь);
КонецПроцедуры

Процедура УдалитьОбъектПоУмолчанию(УдаляемыйОбъект, Ошибки)
	Отбор.Объект.Установить(УдаляемыйОбъект.Объект);
	Если ЗначениеЗаполнено(УдаляемыйОбъект.ПериодНачало) Тогда
		Отбор.ПериодНачало.Установить(УдаляемыйОбъект.ПериодНачало);
	КонецЕсли;
	Если ЗначениеЗаполнено(УдаляемыйОбъект.ПериодОкончание) Тогда
		Отбор.ПериодОкончание.Установить(УдаляемыйОбъект.ПериодОкончание);
	КонецЕсли;
	Если ЗначениеЗаполнено(УдаляемыйОбъект.Пользователь) Тогда
		Отбор.Пользователь.Установить(УдаляемыйОбъект.Пользователь);
	КонецЕсли;
	Попытка
		Записать();
	Исключение
		СтрОшибка = ОписаниеОшибки();
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
		Ошибки = Ошибки + СтрОшибка;
	КонецПопытки;
КонецПроцедуры

// Функция удаляет объект
//
Функция УдалитьОбъект() Экспорт
	Ошибки = "";
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки), "", Символы.ПС);
		Ошибки = Ошибки + НСтр("ru = 'Не выбран объект для переноса!'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(Ошибки) Тогда Возврат Ошибки; КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		УдаляемыеОбъекты = Объект;
	Иначе
		УдаляемыеОбъекты = Новый Массив();
		УдаляемыеОбъекты.Добавить(Объект);
	КонецЕсли;
	
	Для Каждого УдаляемыйОбъект Из УдаляемыеОбъекты Цикл
		Если ТипЗнч(УдаляемыйОбъект.Объект) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
			УдалитьОбъект_Документ_CRM_Событие(УдаляемыйОбъект, Ошибки)
		ИначеЕсли ТипЗнч(УдаляемыйОбъект.Объект) = Тип("ДокументСсылка.CRM_КонтрольнаяТочкаПроекта") Тогда
			УдалитьОбъект_Документ_CRM_КонтрольнаяТочкаПроекта(УдаляемыйОбъект, Ошибки)
		Иначе
			УдалитьОбъектПоУмолчанию(УдаляемыйОбъект, Ошибки);
		КонецЕсли;
	КонецЦикла;
	
	Инициализация();
	
	Возврат Ошибки;
КонецФункции

//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ

Инициализация();

#КонецЕсли