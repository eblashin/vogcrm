////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Добавляет в таблицу результата строку среза классификации.
// Параметры:
// Срез - срез классификации,
// Результат - таблица результата.
//
Процедура ВставитьСтроку(Срез, Результат)

	Строка = Результат.Вставить(0);
	Строка.ДатаИзменения = Срез.Получить(0);
	Строка.Выручка          = ПолучитьПредставлениеКласса(Срез.Получить(1), Срез.Получить(2), Срез.Получить(3));
	Строка.КоличествоПродаж = ПолучитьПредставлениеКласса(Срез.Получить(4), Срез.Получить(5), Срез.Получить(6));

КонецПроцедуры

&НаСервере
// Возвращает строку - представление классификации клиента.
// Параметры:
// Стадия - стадия отношений с клиентом,
// ABCКласс - ABC класс клиента,
// XYZКласс - XYZ класс клиента.
//
Функция ПолучитьПредставлениеКласса(Стадия, ABCКласс, XYZКласс)

	Результат = Строка(Стадия);
	ПредставлениеABC = "";
	ПредставлениеXYZ = "";

	Если ABCКласс = Перечисления.ABCКлассификация.AКласс Тогда

		ПредставлениеABC = "A";

	ИначеЕсли ABCКласс = Перечисления.ABCКлассификация.BКласс Тогда

		ПредставлениеABC = "B";

	ИначеЕсли ABCКласс = Перечисления.ABCКлассификация.CКласс Тогда

		ПредставлениеABC = "C";

	КонецЕсли;

	Если XYZКласс = Перечисления.XYZКлассификация.XКласс Тогда

		ПредставлениеXYZ = "X";

	ИначеЕсли XYZКласс = Перечисления.XYZКлассификация.YКласс Тогда

		ПредставлениеXYZ = "Y";

	ИначеЕсли XYZКласс = Перечисления.XYZКлассификация.ZКласс Тогда

		ПредставлениеXYZ = "Z";

	КонецЕсли;

	Если ПредставлениеABC <> "" Или ПредставлениеXYZ <> "" Тогда
		Результат = Результат + ", " + ПредставлениеABC + ПредставлениеXYZ;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Партнер") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
		Запрос.Текст = "ВЫБРАТЬ
			|	Периоды.Период КАК Период,
			|	ВЫБОР
			|		КОГДА XYZВыручка.Класс ЕСТЬ NULL 
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииВзаимоотношенийСКлиентами.ПотенциальныйКлиент)
			|		КОГДА XYZВыручка.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииВзаимоотношенийСКлиентами.РазовыйКлиент)
			|		КОГДА XYZВыручка.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.НеКлассифицирован)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииВзаимоотношенийСКлиентами.ПотерянныйКлиент)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтадииВзаимоотношенийСКлиентами.ПостоянныйКлиент)
			|	КОНЕЦ КАК СтадияВыручка,
			|	ABCВыручка.Класс КАК ABCВыручка,
			|	XYZВыручка.Класс КАК XYZВыручка,
			|	ВЫБОР
			|		КОГДА XYZКоличество.Класс ЕСТЬ NULL 
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииВзаимоотношенийСКлиентами.ПотенциальныйКлиент)
			|		КОГДА XYZКоличество.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииВзаимоотношенийСКлиентами.РазовыйКлиент)
			|		КОГДА XYZКоличество.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.НеКлассифицирован)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииВзаимоотношенийСКлиентами.ПотерянныйКлиент)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтадииВзаимоотношенийСКлиентами.ПостоянныйКлиент)
			|	КОНЕЦ КАК СтадияКоличество,
			|	ABCКоличество.Класс КАК ABCКоличество,
			|	XYZКоличество.Класс КАК XYZКоличество
			|ИЗ
			|	(ВЫБРАТЬ
			|		ABCXYZКлассификацияКлиентов.Период КАК Период
			|	ИЗ
			|		РегистрСведений.ABCXYZКлассификацияКлиентов КАК ABCXYZКлассификацияКлиентов
			|	ГДЕ
			|		ABCXYZКлассификацияКлиентов.Партнер = &Партнер
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ABCXYZКлассификацияКлиентов.Период) КАК Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ABCXYZКлассификацияКлиентов КАК ABCВыручка
			|		ПО Периоды.Период = ABCВыручка.Период
			|			И (ABCВыручка.Партнер = &Партнер)
			|			И (ABCВыручка.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ABC))
			|			И (ABCВыручка.ТипПараметраКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыПараметровКлассификации.Выручка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ABCXYZКлассификацияКлиентов КАК ABCКоличество
			|		ПО Периоды.Период = ABCКоличество.Период
			|			И (ABCКоличество.Партнер = &Партнер)
			|			И (ABCКоличество.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ABC))
			|			И (ABCКоличество.ТипПараметраКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыПараметровКлассификации.Количество))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ABCXYZКлассификацияКлиентов КАК XYZВыручка
			|		ПО Периоды.Период = XYZВыручка.Период
			|			И (XYZВыручка.Партнер = &Партнер)
			|			И (XYZВыручка.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.XYZ))
			|			И (XYZВыручка.ТипПараметраКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыПараметровКлассификации.Выручка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ABCXYZКлассификацияКлиентов КАК XYZКоличество
			|		ПО Периоды.Период = XYZКоличество.Период
			|			И (XYZКоличество.Партнер = &Партнер)
			|			И (XYZКоличество.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.XYZ))
			|			И (XYZКоличество.ТипПараметраКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыПараметровКлассификации.Количество))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			
		Выборка = Запрос.Выполнить();
		КоличествоПолей = Выборка.Колонки.Количество() - 1;
		
		Результат = РеквизитФормыВЗначение("ИсторияКлассификации");

		Если НЕ Выборка.Пустой() Тогда

			// Заполнить историю классификации.
			ПрошлыйСрез = Неопределено;
			Выборка = Выборка.Выбрать();
			Пока Выборка.Следующий() Цикл

				// Сформировать срез на дату классификации.
				Срез = Новый Массив;
				Для счПолей = 0 По КоличествоПолей Цикл
					Срез.Добавить(Выборка.Получить(счПолей));
				КонецЦикла;

				// Добавить строку при изменении текущих результатов классификации.
				Если ПрошлыйСрез = Неопределено Тогда
					ВставитьСтроку(Срез, Результат);
				Иначе
					СрезИзменился = Ложь;
					Для счПолей = 1 По КоличествоПолей Цикл
						ТекущееЗначение = Срез.Получить(счПолей);
						ПрошлоеЗначение = ПрошлыйСрез.Получить(счПолей);
						Если НЕ (ТекущееЗначение = ПрошлоеЗначение) Тогда
							Если ПрошлоеЗначение = Перечисления.СтадииВзаимоотношенийСКлиентами.ПотерянныйКлиент
							 Или ПрошлоеЗначение = Перечисления.ABCКлассификация.НеКлассифицирован
							 Или ПрошлоеЗначение = Перечисления.XYZКлассификация.НеКлассифицирован Тогда
								ТекущееЗначение = ПрошлоеЗначение;
							Иначе
								ПрошлыйСрез = Срез;
								ВставитьСтроку(Срез, Результат);
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;

			// Добавить строку регистрации клиента.
			Строка = Результат.Добавить();
			Строка.ДатаИзменения    = Параметры.Партнер.ДатаРегистрации;
			Строка.Выручка          = "Потенциальный клиент";
			Строка.КоличествоПродаж = Строка.Выручка;

		КонецЕсли;

		// Скрыть неиспользуемые столбцы.
		Элементы.ИсторияКлассификацииВыручка.Видимость = 
			ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке");
		Элементы.ИсторияКлассификацииКоличествоПродаж.Видимость =
			ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");

		ЗначениеВРеквизитФормы(Результат, "ИсторияКлассификации");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
