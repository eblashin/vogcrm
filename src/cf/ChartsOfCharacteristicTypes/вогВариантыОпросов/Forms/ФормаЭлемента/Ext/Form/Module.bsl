#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьДеревоСтруктуры();
	
	УстановитьВидимостьДоступность(ЭтаФорма);
	ЗаполнитьПараметрыВыбора(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоСтруктуры();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СостояниеПроцессов","Видимость",Объект.ИспользоватьСостояниеПроцессов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НастройкаБизнесПроцесса","Видимость",Объект.ИспользоватьБизнесПроцесс);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПодготовитьЛинейнуюСтруктуруАнкеты(ТекущийОбъект);
	
	// ++ VOG Солодов В.В. 01.10.2020 CRM-932
	Если Объект.ИспользоватьДляПоручения И Не ЕстьЗаписиРолейИсполнителейПоВариантуОпроса() Тогда
		
		ТекстСообщения = НСтр("ru = 'Вариант опроса невозможно использовать для поручения. Не указаны роли исполнителей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	// -- VOG Солодов В.В. 01.10.2020 CRM-932
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура ДобавитьЭлементарныйВопрос(Команда)
	
	ДобавитьЭлементВДерево(ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.ЭлементарныйВопрос"));
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРаздел(Команда)
	
	ДобавитьЭлементВДерево(ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВопрос(Команда)
	
	ДобавитьЭлементВДерево(ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Вопрос"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКлассификатор(Команда)
	
	ДобавитьЭлементВДерево(ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Классификатор"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуЗаполнения(Команда)
	
	Описание = Новый ОписаниеОповещения("ОписаниеОповещенияВводДанныхДляЗагрузки", ЭтаФорма,);
	
	ПоказатьВводСтроки(Описание, , "Введите данные",, Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработкуЗаполнения(Команда)
	
	ДанныеСтроки = ПолучитьДанныеВыгрузкиОбработчиков();
	
	Описание = Новый ОписаниеОповещения("ОписаниеОповещенияЗаглушка", ЭтаФорма);
	
	ПоказатьВводСтроки(Описание, ДанныеСтроки, "Данные",, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Ововещения

&НаКлиенте
Процедура ОписаниеОповещенияЗаглушка(Данные, ИмяТЧ) Экспорт 
	
КонецПроцедуры // ОписаниеОтветаНаВопросГиперссылки()

&НаКлиенте
Процедура ОписаниеОповещенияВводДанныхДляЗагрузки(Данные, ИмяТЧ) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуДанныхОбработчиков(Данные);

КонецПроцедуры // ОписаниеОтветаНаВопросГиперссылки()

&НаКлиенте
Процедура ОповещениеОбработчикРедактированиеСинонима(Значение, Доп) Экспорт 
	
	Если Значение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Доп.Синоним = Значение;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОповещениеОбработчикРедактированиеСинонима()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)	
	
	ОчиститьСвязанныеДанные();
	ЗаполнитьПараметрыВыбора(ЭтаФорма);
	
	РазвернутьДеревоСтруктуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВопросыПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКлассификаторыПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УказатьНаправлениеДеятельностиПриИзменении(Элемент) //--> VOG Бей В.В.  24.08.2018 16:18:03 ID заявки:000002167
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

// ++ VOG Солодов В.В. 09.10.2020 CRM-932
&НаКлиенте
Процедура ИспользоватьДляПорученияПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры // -- VOG Солодов В.В. 09.10.2020 CRM-932

&НаКлиенте
Процедура ПараметрыОбработчиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ПараметрыОбработчиков.Количество() >= 5 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Если больше 5 параметров, значит что-то пошло не так... Поддерживается только 5",,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСостояниеПроцессовПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СостояниеПроцессов","Видимость",Объект.ИспользоватьСостояниеПроцессов);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБизнесПроцессПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НастройкаБизнесПроцесса","Видимость",Объект.ИспользоватьБизнесПроцесс);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормаСтуктурыАнкеты

&НаКлиенте
Процедура ДеревоСтруктурыПриИзменении(Элемент)
	Модифицированность = Истина;
	вогУправлениеОпросамиКлиентСервер.СформироватьНумерациюДерева(ДеревоСтруктуры);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = ДеревоСтруктуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ДеревоСтруктурыСиноним" Тогда
		
		Если МожноЗадаватьСиноним(ТекДанные.ЭлементСсылка) Тогда
			
			ОписаниеОповещенияРедактированиеСинонима = Новый ОписаниеОповещения("ОповещениеОбработчикРедактированиеСинонима", ЭтотОбъект, ТекДанные);
			
			ПоказатьВводСтроки(ОписаниеОповещенияРедактированиеСинонима, ТекДанные.Синоним, "Введите синоним");
			
		Иначе 
			ПоказатьПредупреждение(, "Задание синонима для данного типа элемента анкеты не поддерживается",, "Синоним варианта опроса");
		КонецЕсли;
		
	Иначе 
		
		Если ЗначениеЗаполнено(ТекДанные.ЭлементСсылка) Тогда
			ПоказатьЗначение(, ТекДанные.ЭлементСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	СписокВыбора = Новый  СписокЗначений;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Вопрос"), НСтр("ru = 'Вопрос'"),, БиблиотекаКартинок.ДобавитьПростойВопрос);
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.ЭлементарныйВопрос"), НСтр("ru = 'Элементарный вопрос'"),, БиблиотекаКартинок.ДобавитьКомплексныйВопрос);
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Классификатор"), НСтр("ru = 'Классификатор'"),, БиблиотекаКартинок.ДобавитьТабличныйВопрос);	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел"), НСтр("ru = 'Раздел'"),, БиблиотекаКартинок.ДобавитьРазделАнкеты);
		
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборТипаДобавляемогоЭлементаПриЗавершении", ЭтотОбъект);
	СписокВыбора.ПоказатьВыборЭлемента(ОбработчикОповещенияОЗакрытии, НСтр("ru = 'Выберите тип добавляемого элемента.'"),СписокВыбора[0]);

КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаДобавляемогоЭлементаПриЗавершении(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		
		Если ВыбранныйЭлемент.Значение = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") Тогда
			
			ДобавитьРаздел(Команды.ДобавитьРаздел);
			
		ИначеЕсли ВыбранныйЭлемент.Значение = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Вопрос") Тогда
			
			ДобавитьВопрос(Команды.ДобавитьВопрос)
			
		ИначеЕсли ВыбранныйЭлемент.Значение = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.ЭлементарныйВопрос") Тогда
			
			ДобавитьЭлементарныйВопрос(Команды.ДобавитьЭлементарныйВопрос)
					
		ИначеЕсли ВыбранныйЭлемент.Значение = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Классификатор") Тогда
			
			ДобавитьКлассификатор(Команды.ДобавитьКлассификатор)
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;  	
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ТипСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияУдалениеСтрокиДереваСтруктуры = Новый ОписаниеОповещения("ОписаниеОповещенияУдалениеСтрокиДереваСтруктуры", ЭтотОбъект, ТекущиеДанные);
	
	ПоказатьВопрос(ОписаниеОповещенияУдалениеСтрокиДереваСтруктуры, "Действительно удалить?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.ДеревоСтруктуры.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли; 
	
	СтрокаПеретаскивание = ДеревоСтруктуры.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если ТипЗнч(СтрокаПеретаскивание) = Тип("Неопределено") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		Если не ЗначениеЗаполнено(СтрокаПеретаскивание.ТипСтроки) Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если (Строка = Неопределено) ИЛИ (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Число") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтрокаНазначение     = ДеревоСтруктуры.НайтиПоИдентификатору(Строка);
	СтрокаПеретаскивание = ДеревоСтруктуры.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если СтрокаПеретаскивание.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") 
		И НЕ (СтрокаНазначение.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел")
		ИЛИ СтрокаНазначение.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.ПустаяСсылка")) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;	
		
	ИначеЕсли (СтрокаПеретаскивание.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") ) 
		И (СтрокаНазначение.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") ) Тогда
		
		
	ИначеЕсли НЕ СтрокаПеретаскивание.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел")
		И  НЕ СтрокаНазначение.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ПеретащитьЭлементДерева(СтрокаНазначение,СтрокаПеретаскивание,ИспользоватьРодителяСтрокиНазначения = ЛОЖЬ,УдалятьПослеДобавления = Истина);
	
	Если ИспользоватьРодителяСтрокиНазначения Тогда
		НоваяСтрока = СтрокаНазначение.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = СтрокаНазначение.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПеретаскивание);
		
	Для каждого Элемент Из СтрокаПеретаскивание.ПолучитьЭлементы() Цикл
		ПеретащитьЭлементДерева(НоваяСтрока,Элемент,Ложь,Ложь);
	КонецЦикла;
	
	Если УдалятьПослеДобавления Тогда
		СтрокаПеретаскивание.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаПеретаскивание);
	КонецЕсли;
	
	Если ИспользоватьРодителяСтрокиНазначения Тогда
		Элементы.ДеревоСтруктуры.Развернуть(СтрокаНазначение.ПолучитьРодителя().ПолучитьИдентификатор(),Ложь);
	Иначе	
		Элементы.ДеревоСтруктуры.Развернуть(СтрокаНазначение.ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	вогУправлениеОпросамиКлиентСервер.СформироватьНумерациюДерева(ДеревоСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтрокаНазначение     = ДеревоСтруктуры.НайтиПоИдентификатору(Строка);
	СтрокаПеретаскивание = ДеревоСтруктуры.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	ВыполнитьПеремещение = Ложь;
	ИспользоватьРодителяСтрокиНазначения = Ложь;
	УдалятьПослеДобавления = Истина;
	
	// ПЕНЕНОС РАЗДЕЛА
	Если СтрокаПеретаскивание.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") 
		И СтрокаНазначение.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел")  Тогда
		
		Если УзелЯвляетсяПотомком(СтрокаНазначение, СтрокаПеретаскивание) Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Иначе 
			ВыполнитьПеремещение = Истина; 
		КонецЕсли;
		
	// ПЕНЕНОС ЭЛЕМЕНТА В РАЗДЕЛ
	ИначеЕсли НЕ СтрокаПеретаскивание.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") 
		И СтрокаНазначение.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") Тогда
		
		ВыполнитьПеремещение = Истина; 
		
	КонецЕсли;
	
	Если ВыполнитьПеремещение Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПеретащитьЭлементДерева(СтрокаНазначение, СтрокаПеретаскивание, ИспользоватьРодителяСтрокиНазначения, УдалятьПослеДобавления);
		
		Модифицированность = Истина; 

	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДеревоСтруктуры() Экспорт 
	
	Корень = ПолучитьКонерьДерева();
	Корень.ПолучитьЭлементы().Очистить();
	
	СтруктураОтборов = Новый Структура("Раздел", ПредопределенноеЗначение("Справочник.вогРазделыАнкет.ПустаяСсылка"));
	
	ОтрисоватьДеревоСтруктурыРекурсивно(СтруктураОтборов, Корень);
	
КонецПроцедуры

Функция ПолучитьКонерьДерева()
	
	СписокЭлементов = ДеревоСтруктуры.ПолучитьЭлементы();
	
	Если СписокЭлементов.Количество() Тогда
		Возврат СписокЭлементов.Получить(0);	
	Иначе 
		Возврат СписокЭлементов.Добавить();
	КонецЕсли;
	
КонецФункции

Процедура ОтрисоватьДеревоСтруктурыРекурсивно(СтруктураОтборов, УровеньРодитель)
	
	ПоискСтрок = Объект.СтруктураРазделов.НайтиСтроки(СтруктураОтборов);
	
	ЭлементыДобавления = УровеньРодитель.ПолучитьЭлементы();
	
	Для Каждого Стр из ПоискСтрок Цикл 
		
		НоваяСтрока 				= ЭлементыДобавления.Добавить();
		
		НоваяСтрока.ТипСтроки 		= Стр.ТипСтроки;
		
		ЗаполнитьСтрукуДереваСтруктурыАнкеты(НоваяСтрока, Стр.Значение);
		
		НоваяСтрока.КлючСтроки 		= Стр.КлючСтроки;
		НоваяСтрока.ПолныйКод 		= Стр.ПолныйКод;
		НоваяСтрока.Синоним 		= Стр.Синоним;
		    	
		Если ТипЗнч(Стр.Значение) = Тип("СправочникСсылка.вогРазделыАнкет") Тогда
			
			СтруктураОтборов.Вставить("Раздел", Стр.Значение);
			
			ОтрисоватьДеревоСтруктурыРекурсивно(СтруктураОтборов, НоваяСтрока);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьЛинейнуюСтруктуруАнкеты(ПереданныйОбъект=Неопределено)
	
	Если ПереданныйОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	Иначе 
		ТекущийОбъект = ПереданныйОбъект;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 24.09.2020 CRM-935
	// Сохранение таблицы классификаторов
	ТаблицаКлассификаторов = ТекущийОбъект.НаборКлассификаторов.Выгрузить();
	// -- VOG Солодов В.В. 24.09.2020 CRM-935
	
	// ОЧИЩАЕМ ТЕКУЩИЕ ДАННЫЕ ТЧ
	
	ТекущийОбъект.СтруктураРазделов.Очистить();
	ТекущийОбъект.НаборВопросов.Очистить();
	ТекущийОбъект.НаборКлассификаторов.Очистить();
	ТекущийОбъект.НаборДополнительныхРеквизитов.Очистить();
	
	// ОБХОД ДЕРЕВА
		
	ОбойтиДеревоСтруктурыДляЗаполненияЛинейно(ТекущийОбъект);
	
	
	// ВОССТАНАВЛИВАЕМ ДАННЫЕ В ТАБЛИЧНЫХ ЧАСТЯХ
	
	Для Каждого стр ИЗ ТекущийОбъект.СтруктураРазделов Цикл 
		
		Если ТипЗнч(стр.Значение) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
			
			НоваяСтрока = ТекущийОбъект.НаборКлассификаторов.Добавить();
			НоваяСтрока.Классификатор = стр.Значение;
			
			// ++ VOG Солодов В.В. 24.09.2020 CRM-935
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Классификатор", НоваяСтрока.Классификатор);
			
			НайденныеСтроки = ТаблицаКлассификаторов.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
				НоваяСтрока.НомерВерсииОпроса = СтрокаТабличнойЧасти.НомерВерсииОпроса;
			КонецЦикла;
			// -- VOG Солодов В.В. 24.09.2020 CRM-935
			
		ИначеЕсли ТипЗнч(стр.Значение) = Тип("ПланВидовХарактеристикСсылка.ВопросыДляАнкетирования") 
			ИЛИ ТипЗнч(стр.Значение) = Тип("СправочникСсылка.вогВопросы") Тогда
			
			НоваяСтрока = ТекущийОбъект.НаборВопросов.Добавить();
			НоваяСтрока.Вопрос = стр.Значение;
			
		ИначеЕсли ТипЗнч(стр.Значение) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")  Тогда
			
			НоваяСтрока = ТекущийОбъект.НаборДополнительныхРеквизитов.Добавить();
			НоваяСтрока.Вопрос = стр.Значение;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбойтиДеревоСтруктурыДляЗаполненияЛинейно(ТекущийОбъект=Неопределено, ВходнойУзел= Неопределено, ТекущийРаздел=Неопределено)
	
	Если ВходнойУзел = Неопределено Тогда
		ВходнойУзел = ПолучитьКонерьДерева();
	КонецЕсли;
	
	Если ТекущийРаздел = Неопределено Тогда
		ТекущийРаздел = ПредопределенноеЗначение("Справочник.вогРазделыАнкет.ПустаяСсылка");
	КонецЕсли;
	
	Если ТекущийОбъект = Неопределено Тогда
		ОбъектОбхода = Объект;
	Иначе 
		ОбъектОбхода = ТекущийОбъект;
	КонецЕсли;
	
	ЭлементыУзла = ВходнойУзел.ПолучитьЭлементы();
	
	Для Каждого стр из ЭлементыУзла Цикл 
		
		НоваяСтрока = ОбъектОбхода.СтруктураРазделов.Добавить();
		
		НоваяСтрока.Раздел = ТекущийРаздел;
		НоваяСтрока.Значение = стр.ЭлементСсылка;
		
		Если ТипЗнч(стр.ЭлементСсылка) = Тип("СправочникСсылка.вогРазделыАнкет") Тогда
			
			ОбойтиДеревоСтруктурыДляЗаполненияЛинейно(ОбъектОбхода, стр, стр.ЭлементСсылка);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(стр.КлючСтроки) Тогда
			стр.КлючСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		НоваяСтрока.КлючСтроки 	= стр.КлючСтроки;
		НоваяСтрока.ПолныйКод 	= стр.ПолныйКод;
		НоваяСтрока.ТипСтроки 	= стр.ТипСтроки;
		НоваяСтрока.Синоним 	= стр.Синоним;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция МожноЗадаватьСиноним(СсылкаНаЭлементАнкеты)
	
	Если ТипЗнч(СсылкаНаЭлементАнкеты) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьЗагрузкуДанныхОбработчиков(ДанныеТекст)
	
	Данные = ЗначениеИзСтрокиВнутр(ДанныеТекст);
	
	Объект.ИспользоватьОбработкуУтверждения 	= Данные.ИспользоватьОбработкуУтверждения;
	Объект.ОбработкаУтверждения 				= Данные.ОбработкаУтверждения;
	
	Объект.ПараметрыОбработчиков.Загрузить(Данные.ПараметрыОбработчиков);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Функция ПолучитьДанныеВыгрузкиОбработчиков()
	
	СтруктураДанных = Новый Структура("ИспользоватьОбработкуУтверждения, ОбработкаУтверждения, ПараметрыОбработчиков", Объект.ИспользоватьОбработкуУтверждения, Объект.ОбработкаУтверждения, Объект.ПараметрыОбработчиков.Выгрузить());
	Возврат ЗначениеВСтрокуВнутр(СтруктураДанных);
	
КонецФункции

&НаКлиенте
Функция УзелЯвляетсяПотомком(Узел, ВозможныйРодитель)
	
	ТекУзел = Узел;
	Пока Истина Цикл 
		
		РодительУзла = ТекУзел.ПолучитьРодителя();
		
		Если РодительУзла = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекУзел.ПолучитьИдентификатор() = ВозможныйРодитель.ПолучитьИдентификатор() Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТекУзел = РодительУзла;
		
	КонецЦикла;
	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДеревоСтруктуры()
	
	Для Каждого стр из ДеревоСтруктуры.ПолучитьЭлементы() Цикл 
		Элементы.ДеревоСтруктуры.Развернуть(стр.ПолучитьИдентификатор(),  Истина);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияУдалениеСтрокиДереваСтруктуры(Ответ, ТекущиеДанныеСтроки) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РодительУдаляемойСтроки = ТекущиеДанныеСтроки.ПолучитьРодителя();
	
	Если РодительУдаляемойСтроки = Неопределено Тогда
		РодительУдаляемойСтроки = ДеревоСтруктуры;
	КонецЕсли;
	
	РодительУдаляемойСтроки.ПолучитьЭлементы().Удалить(ТекущиеДанныеСтроки);
	
	ПодготовитьЛинейнуюСтруктуруАнкеты();
	
	вогУправлениеОпросамиКлиентСервер.СформироватьНумерациюДерева(ДеревоСтруктуры);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОписаниеОповещенияУдалениеСтрокиДереваСтруктуры

&НаКлиенте
Процедура ДобавитьЭлементВДерево(ТипВопроса)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщить("Необходимо записать вариант опроса.");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоСтруктуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		РодительДобавления = ДеревоСтруктуры;
	Иначе 
		РодительДобавления = ПолучитьРодителяДляДобавления(ТекущиеДанные);
	КонецЕсли;
	
	Если НЕ РодительДобавления.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел")
		И НЕ ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") Тогда
		Сообщить("Элементы анкеты можно добавлять только в разделы, потому что для каждого раздела создается страница в анкете");
		Возврат;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("РодительДобавления", РодительДобавления);
	СтруктураДопПараметров.Вставить("ТипВопроса", ТипВопроса);
	
	ОписаниеЗакрытия = Новый ОписаниеОповещения("ОписаниеОповещенияЗакрытиеФормыДобавленияЭлемента" , ЭтотОбъект, СтруктураДопПараметров);
	
		// РАЗДЕЛ
	Если ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") Тогда
		
		ПараметрыОткрытияФормыВыбора = Новый Структура;
		ПараметрыОткрытияФормыВыбора.Вставить("Отбор", Новый Структура("Владелец", Объект.Ссылка));
		
		ОткрытьФорму("Справочник.вогРазделыАнкет.ФормаВыбора",ПараметрыОткрытияФормыВыбора , ЭтаФорма,,,, ОписаниеЗакрытия);		
		
		// ВОПРОС
	ИначеЕсли ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Вопрос") Тогда
		
		ПараметрыОткрытияФормыВыбора = Новый Структура;
		ПараметрыОткрытияФормыВыбора.Вставить("Отбор", Новый Структура("Владелец", Объект.Ссылка));
		
		ОткрытьФорму("Справочник.вогВопросы.ФормаВыбора",ПараметрыОткрытияФормыВыбора , ЭтаФорма,,,, ОписаниеЗакрытия);
		
		// ЭЛЕМЕНТАРНЫЙ ВОПРОС
	ИначеЕсли ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.ЭлементарныйВопрос") Тогда
		
		ПараметрыОткрытияФормыВыбора = Новый Структура;
		ПараметрыОткрытияФормыВыбора.Вставить("Отбор", Новый Структура("ВариантОпроса", Объект.Ссылка));
		
		ОткрытьФорму("ПланВидовХарактеристик.ВопросыДляАнкетирования.ФормаВыбора", ПараметрыОткрытияФормыВыбора, ЭтаФорма,,,, ОписаниеЗакрытия);	
		
		// КЛАССИФИКАТОР
	ИначеЕсли ТипВопроса = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Классификатор") Тогда
		
		ТипыРеспондента = ПолучитьМассивДоступныхТипвоРеспондента();
		
		ПараметрыОткрытияФормыВыбора = Новый Структура;

		Если ТипыРеспондента.Количество() Тогда
			ПараметрыОткрытияФормыВыбора.Вставить("Принадлежность", Новый Структура("ИмяТаблиц", ТипыРеспондента));
		КонецЕсли;
		
		// отключаем общим списком, потому что в разделах смысла выводить нет
		ПараметрыОткрытияФормыВыбора.Вставить("ВидОтображенияИсключить", ПредопределенноеЗначение("Перечисление.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком"));
		
		ОткрытьФорму("ПланВидовХарактеристик.CRM_Классификаторы.ФормаВыбора",ПараметрыОткрытияФормыВыбора , ЭтаФорма,,,, ОписаниеЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРодителяДляДобавления(ТекущийРодитель)
	
	Если ТипЗнч(ТекущийРодитель) = Тип("ДанныеФормыСтруктура") Тогда
		 Возврат ДеревоСтруктуры.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	Если ТекущийРодитель.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел")
		ИЛИ НЕ ЗначениеЗаполнено(ТекущийРодитель.ТипСтроки) Тогда
		Возврат ТекущийРодитель;
	КонецЕсли;
	
	Родитель = ТекущийРодитель.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат ДеревоСтруктуры.ПолучитьЭлементы().Добавить();	
	КонецЕсли;
	
	Возврат ПолучитьРодителяДляДобавления(Родитель);
	
КонецФункции

Функция ЗаполнитьСтруктуруПараметровОтбораДопРеквизита(СтруктураДанныхОтбор)
	
	СтруктураДанныхОтбор.Вставить("ЭтоДополнительноеСведение", Истина);
	
	СписокПринадлежность = Объект.ТипыРеспондента.Выгрузить();
	
	Если СписокПринадлежность.Количество() Тогда
		
		МассивОтбора = Новый Массив;
		
		Если СписокПринадлежность.НайтиСтроки(Новый Структура("ТипРеспондента", "Справочник.Партнеры")).Количество() Тогда
			
			МассивОтбора.Добавить(ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие"));
			МассивОтбора.Добавить(ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Компании_CRM"));
			
		Иначе	
			
			ИмяНабора = СтрЗаменить(СписокПринадлежность[0].ТипРеспондента, ".", "_");
			
			Если ЗначениеЗаполнено(ИмяНабора) Тогда
				
				МассивОтбора.Добавить(ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяНабора));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыВыбора.Количество() Тогда
			СтруктураДанныхОтбор.Вставить("НаборСвойств", ПараметрыВыбора); 	
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОписаниеОповещенияЗакрытиеФормыДобавленияЭлемента(Значение, СтруктураДопПараметров) Экспорт 
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверкаДобавленияЭлементаАнкеты(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДобавления 			= СтруктураДопПараметров.РодительДобавления.ПолучитьЭлементы();
	
	НоваяСтрока 				= ЭлементыДобавления.Добавить();
	НоваяСтрока.ТипСтроки		= СтруктураДопПараметров.ТипВопроса;
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбработатьДобавлениеСтрокиНаСервере(ИдентификаторСтроки, Значение);
	
	Модифицированность = Истина;
	
	Родитель = НоваяСтрока.ПолучитьРодителя();
	
	Если НЕ Родитель = Неопределено Тогда
		Элементы.ДеревоСтруктуры.Развернуть(Родитель.ПолучитьИдентификатор(), Ложь);
	КонецЕсли;
	
КонецПроцедуры // ОписаниеОтветаНаВопросГиперссылки()

&НаКлиенте
Функция ПроверкаДобавленияЭлементаАнкеты(ЭлементАнкеты)
	
	СтруктураПоиска = Новый Структура("Значение", ЭлементАнкеты);
	
	ПоискСтрок = Объект.СтруктураРазделов.НайтиСтроки(СтруктураПоиска);
	
	Если ПоискСтрок.Количество() Тогда
		
		НазваниеРаздела = ПоискСтрок.Получить(0).Раздел;
		
		Если Не ЗначениеЗаполнено(НазваниеРаздела) Тогда
			НазваниеРаздела = "Корень";
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон("Элемент анкеты ""%1"" уже есть в разделе ""%2""", ЭлементАнкеты, НазваниеРаздела);
		Сообщить(ТекстСообщения, СтатусСообщения.Информация);
		
		Возврат Ложь;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбработатьДобавлениеСтрокиНаСервере(ИдентификаторСтроки, Значение)
	
	ЗаполнитьСтрукуДереваСтруктурыАнкеты(ИдентификаторСтроки, Значение);

	ОбойтиДеревоСтруктурыДляЗаполненияЛинейно();
	
	вогУправлениеОпросамиКлиентСервер.СформироватьНумерациюДерева(ДеревоСтруктуры);
	
КонецПроцедуры

Процедура ЗаполнитьСтрукуДереваСтруктурыАнкеты(СтрокаДереваВходная, ЭлементАнкеты)
	
	Если ТипЗнч(СтрокаДереваВходная) = Тип("Число") Тогда
		СтрокаДерева = ДеревоСтруктуры.НайтиПоИдентификатору(СтрокаДереваВходная);
	Иначе 
		СтрокаДерева = СтрокаДереваВходная;
	КонецЕсли;
		
	СтрокаДерева.ЭлементСсылка 	= ЭлементАнкеты;
	
	СтрокаДерева.Обязательный 	= ЭлементАнкеты.Обязательный;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.ТипСтроки) Тогда
		СтрокаДерева.ТипСтроки = вогУправлениеОпросамиСервер.ПолучитьТипВопросаАнкетыПоЭлементуАнкеты(ЭлементАнкеты);
	КонецЕсли;
		
	СтрокаДерева.КодКартинки     = вогУправлениеОпросамиКлиентСервер.ПолучитьКодКартинкиШаблонаАнкеты(СтрокаДерева.ТипСтроки);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	////--> VOG Бей В.В.  24.08.2018 16:18:03 ID заявки:000002167
	Элементы.НаправлениеДеятельности.Видимость = Объект.УказатьНаправлениеДеятельности;
	//<-- VOG Бей В.В.  24.08.2018 16:18:03 ID заявки:000002167
	
	Элементы.ГруппаОбработкаУтверждения.Видимость = Объект.ИспользоватьОбработкуУтверждения;
	
	Элементы.ГруппаНаборДополнительныхРеквизитов.Видимость = Объект.ИспользоватьДополнительныеРеквизиты;
	
	// ++ VOG Солодов В.В. 09.10.2020 CRM-932
	Элементы.ОбработчикПроведенияДляПоручения.Видимость = Объект.ИспользоватьДляПоручения;
	// -- VOG Солодов В.В. 09.10.2020 CRM-932
	
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыВыбора(Форма)
	
	//Классификаторы
	СписокПринадлежность = Новый СписокЗначений;
	Типы = Форма.Объект.ТипЗначения.Типы();
	Для Инд = 1 По Типы.Количество() Цикл
		СписокПринадлежность.Добавить(ИмяТаблицыПоСсылке(Новый(Типы[Инд - 1])));
	КонецЦикла;		
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.СпособФормирования", ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.вогАнкетирование")));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Принадлежность.ИмяТаблиц", СписокПринадлежность));
	
	Форма.Элементы.НаборКлассификаторовКлассификатор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	// ПЕРЕНЕСЕНО В ОТДЕЛЬНУЮ ФОРМУ ДОБАВЛЕНИЯ
	//Доп. реквизиты
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЭтоДополнительноеСведение", Ложь));
	
	Если СписокПринадлежность[0].Значение = "Справочник.Партнеры" Тогда
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Компании_CRM"));
		
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.НаборСвойств", Новый ФиксированныйМассив(МассивОтбора)));
	Иначе	
		ИмяНабора = СтрЗаменить(СписокПринадлежность[0].Значение, ".", "_");
		Если ЗначениеЗаполнено(ИмяНабора) Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.НаборСвойств", 
				ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяНабора)));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.НаборДополнительныхРеквизитовДополнительныйРеквизит.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);

КонецПроцедуры // ЗаполнитьПараметрыВыбора()

Процедура ОчиститьСвязанныеДанные()

	Объект.НаборКлассификаторов.Очистить();
	Объект.НаборДополнительныхРеквизитов.Очистить();
	
	ПрочитатьДеревоСтруктуры();
	
КонецПроцедуры // ОчиститьСвязанныеДанные()

&НаСервереБезКонтекста
Функция ИмяТаблицыПоСсылке(Ссылка)
	
	Возврат ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
КонецФункции // ИмяТаблицыПоСсылке()

Функция ПолучитьМассивДоступныхТипвоРеспондента()
	
	Возврат Объект.ТипыРеспондента.Выгрузить().ВыгрузитьКолонку("ТипРеспондента");
	
КонецФункции

// ++ VOG Солодов В.В. 01.10.2020 CRM-932
&НаСервере
Функция ЕстьЗаписиРолейИсполнителейПоВариантуОпроса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогРолиИсполнителейПоВариантамОпроса.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.вогРолиИсполнителейПоВариантамОпроса КАК вогРолиИсполнителейПоВариантамОпроса
		|ГДЕ
		|	вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса = &ВариантОпроса";
	
	Запрос.УстановитьПараметр("ВариантОпроса", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции
// -- VOG Солодов В.В. 01.10.2020 CRM-932

#КонецОбласти