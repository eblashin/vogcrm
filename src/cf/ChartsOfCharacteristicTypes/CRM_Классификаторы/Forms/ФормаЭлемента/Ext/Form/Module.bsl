
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Получаем расписание из самого регламентного задания
	// если РЗ не задано, то расписание = Неопределено и будет создано на клиенте в момент редактирования расписания.
	РасписаниеРегламентногоЗадания = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьРасписаниеВыполненияКлассификатора(Объект.Ссылка);
	
	Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище();
	АдресСхемыКомпоновкиДанных = Адреса.СхемаКомпоновкиДанных;
	АдресНастроекКомпоновкиДанных = Адреса.НастройкиКомпоновкиДанных;	
	
	УстановитьВидимостьДоступность(ЭтаФорма);
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:07:49 ID
	УправлениеВидимостьюОсобогоРазмещения();
	//}Администратор 10.07.2018 15:07:49
	
	вогУправлениеОпросамиСервер.ЗаполнитьДанныеУсловийВопросовПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеРасписания();
	
	УстановитьДоступностьГиперссылкиНастройкиРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.CRM_Классификаторы.ОбновитьДанныеРегламентногоЗадания(Отказ, РасписаниеРегламентногоЗадания, ТекущийОбъект);
	
	Если НЕ ПустаяСтрока(АдресНастроекКомпоновкиДанных) Тогда
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		
	Иначе
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
		
	КонецЕсли;
	
	вогУправлениеОпросамиСервер.ЗаполнитьДанныеУсловийВопросовПередЗаписью(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	вогУправлениеОпросамиСервер.ЗаполнитьДанныеУсловийВопросовПриЧтении(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьПринадлежность(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастроитьПринадлежность_Завершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресСхемы"			 , АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроек"			 , АдресНастроекКомпоновкиДанных);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ОткрытьФорму("ПланВидовХарактеристик.CRM_Классификаторы.Форма.ФормаНастройкиОтборов",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	РедактированиеРасписанияРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьУсловия(Команда)
	
	вогУправлениеОпросамиКлиентСервер.ОткрытьФормуНастройкиУсловийЗависимости(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	АдресНастроекКомпоновкиДанных = "";
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеПриИзменении(Элемент)
	
	УстановитьДоступностьГиперссылкиНастройкиРасписания();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое.
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	// Открываем диалог для редактирования Расписания.
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = Расписание;
		ОбновитьПредставлениеРасписания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПринадлежность_Завершение(Результат, ДополнительныеПараметры) Экспорт

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		АдресНастроекКомпоновкиДанных = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // НастроитьПринадлежность_Завершение()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)

	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект;
	
	Элементы.ГруппаДанныеРасписания.Видимость = 
		Объект.СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять");	
		
	// ++ Харченко Д.И. №  - 14.09.2018 / 
	Элементы.ГоризонтальноеРазмещение.Видимость = Объект.ВидОтображения = ПредопределенноеЗначение("Перечисление.CRM_ВидыОтображенияКлассификаторов.Вхождение") ИЛИ Объект.ВидОтображения = ПредопределенноеЗначение("Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит");
	// -- Харченко Д.И. №  - 14.09.2018
	
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьГиперссылкиНастройкиРасписания()
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = Объект.ИспользоватьРегламентноеЗадание;
	
КонецПроцедуры

&НаСервере 
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище()
	
	Возврат ПланыВидовХарактеристик.CRM_Классификаторы.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Объект);
	
КонецФункции

&НаКлиенте
Процедура ОсобоеРазмещениеПриИзменении(Элемент)
	УправлениеВидимостьюОсобогоРазмещения();
КонецПроцедуры

//{[+](фрагмент добавлен), Виноградов Дмитрий 10.07.2018 15:48:20 ID
&НаКлиенте
Процедура ВидОтображенияПриИзменении(Элемент)
	ВидОтображенияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидОтображенияПриИзмененииНаСервере()
	Если Объект.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком Тогда
		Объект.ОсобоеРазмещение = Ложь;	
	КонецЕсли;
	
	УправлениеВидимостьюОсобогоРазмещения();
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюОсобогоРазмещения()
	Элементы.ГруппаОсобоеРазмещение.Видимость = Объект.ОсобоеРазмещение И Объект.ВидОтображения <> Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком;
	Элементы.ОсобоеРазмещение.Доступность = Объект.ВидОтображения <> Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком;	
КонецПроцедуры


//}Администратор 10.07.2018 15:48:20

#КонецОбласти

//++ VOG Иванов С.А. 14.10.2019 task: 706 
&НаКлиенте
Процедура ОбработчикПриИзмененииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	
	ИмяМакетаСправки = "Справочники.вогВопросы.ПолучитьМакет(""СправкаОбработчикСобытия"")";
	
	ПараметрыФормыОткрытия = Новый Структура();
	ПараметрыФормыОткрытия.Вставить("ТекстОбработки", 	Объект[Элемент.Имя]);
	ПараметрыФормыОткрытия.Вставить("Заголовок", 		"Обработчик события ""При изменении""");
	ПараметрыФормыОткрытия.Вставить("ИмяМакетаСправки", ИмяМакетаСправки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПриИзмененииВыборЗавершение", ЭтотОбъект, Элемент);
	
	ОткрытьФорму("Справочник.CRM_ТочкиМаршрутов.Форма.ФормаРедактированияТекста", 
		ПараметрыФормыОткрытия, 
		ЭтотОбъект,
		,
		,
		, 
		ОписаниеОповещения);

	КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПриИзмененииВыборЗавершение(Результат, Элемент) экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство("Обработчик", Объект[Элемент.Имя]);
		Иначе 
			Объект[Элемент.Имя] = Результат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработчикНачалоВыбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ИмяМакетаСправки = "Справочники.вогВопросы.ПолучитьМакет(""СправкаОбработчикСобытия"")";
	
	ПараметрыФормыОткрытия = Новый Структура();
	ПараметрыФормыОткрытия.Вставить("ТекстОбработки", 	Объект[Элемент.Имя]);
	ПараметрыФормыОткрытия.Вставить("Заголовок", 		"Обработчик события ""При изменении""");
	ПараметрыФормыОткрытия.Вставить("ИмяМакетаСправки", ИмяМакетаСправки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПриИзмененииВыборЗавершение", ЭтотОбъект, Элемент);
	
	ОткрытьФорму("Справочник.CRM_ТочкиМаршрутов.Форма.ФормаРедактированияТекста", 
		ПараметрыФормыОткрытия, 
		ЭтотОбъект,
		,
		,
		, 
		ОписаниеОповещения);
		
КонецПроцедуры
//-- VOG Иванов С.А. 14.10.2019 task: 706