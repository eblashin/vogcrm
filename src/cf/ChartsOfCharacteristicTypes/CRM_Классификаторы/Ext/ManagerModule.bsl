#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РасписаниеРегламентногоЗаданияПоУмолчанию() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 3600; // 1 час
	Расписание.ПериодПовтораДней        = 1; // каждый день
	Расписание.Месяцы                   = Месяцы;
	
	Возврат Расписание;
КонецФункции

// Получает расписание регламентного задания.
// Если регламентное задание не задано, то возвращает пустое расписание (по умолчанию).
//
Функция ПолучитьРасписаниеВыполненияКлассификатора(Классификатор) Экспорт
	
	РегламентноеЗаданиеОбъект = CRM_КлассификаторыВызовСервера.НайтиРегламентноеЗадание(Классификатор.РегламентноеЗаданиеGUID);
	
	Если РегламентноеЗаданиеОбъект <> Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = РегламентноеЗаданиеОбъект.Расписание;
		
	Иначе
		
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Возврат РасписаниеРегламентногоЗадания;
	
КонецФункции

Процедура ОбновитьДанныеРегламентногоЗадания(Отказ, РасписаниеРегламентногоЗадания, ТекущийОбъект) Экспорт
	
	// Получаем регламентное задание по идентификатору, если объект не находим, то создаем новый.
	РегламентноеЗаданиеОбъект = СоздатьРегламентноеЗаданиеПриНеобходимости(Отказ, ТекущийОбъект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// обновляем свойства РЗ
	УстановитьПараметрыРегламентногоЗадания(РегламентноеЗаданиеОбъект, РасписаниеРегламентногоЗадания, ТекущийОбъект);
	
	// Записываем измененное задание.
	ЗаписатьРегламентноеЗадание(Отказ, РегламентноеЗаданиеОбъект);
	
	// Запоминаем GUID регламентное задания в реквизите объекта.
	ТекущийОбъект.РегламентноеЗаданиеGUID = Строка(РегламентноеЗаданиеОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

Функция СоздатьРегламентноеЗаданиеПриНеобходимости(Отказ, ТекущийОбъект)
	
	РегламентноеЗаданиеОбъект = CRM_КлассификаторыВызовСервера.НайтиРегламентноеЗадание(ТекущийОбъект.РегламентноеЗаданиеGUID);
	
	// При необходимости создаем регламентное задание.
	Если РегламентноеЗаданиеОбъект = Неопределено Тогда
		
		РегламентноеЗаданиеОбъект = РегламентныеЗадания.СоздатьРегламентноеЗадание("CRM_ФормированиеСоставаЗначенийКлассификаторов");
		
	КонецЕсли;
	
	Возврат РегламентноеЗаданиеОбъект;
	
КонецФункции

Процедура УстановитьПараметрыРегламентногоЗадания(РегламентноеЗаданиеОбъект, РасписаниеРегламентногоЗадания, ТекущийОбъект)
		
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(ТекущийОбъект.Ссылка);
	
	НаименованиеРегламентногоЗадания = НСтр("ru = 'Формирование состава значений классификатора: %1'");
	НаименованиеРегламентногоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеРегламентногоЗадания, СокрЛП(ТекущийОбъект.Наименование));
	
	РегламентноеЗаданиеОбъект.Наименование  = Лев(НаименованиеРегламентногоЗадания, 120);
	РегламентноеЗаданиеОбъект.Использование = ТекущийОбъект.ИспользоватьРегламентноеЗадание;
	РегламентноеЗаданиеОбъект.Параметры     = ПараметрыРегламентногоЗадания;
	
	// Обновляем расписание, если оно было изменено.
	Если РасписаниеРегламентногоЗадания <> Неопределено Тогда
		РегламентноеЗаданиеОбъект.Расписание = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись регламентного задания.
//
// Параметры:
//  Отказ                     - Булево - флаг отказа. Если в процессе выполнения процедуры были обнаружены ошибки,
//                                       то флаг отказа устанавливается в значение Истина.
//  РегламентноеЗаданиеОбъект - объект регламентного задания, которое необходимо записать.
// 
Процедура ЗаписатьРегламентноеЗадание(Отказ, РегламентноеЗаданиеОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		// записываем задание
		РегламентноеЗаданиеОбъект.Записать();
		
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Произошла ошибка при сохранении расписания. Подробное описание ошибки: %1'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбменДаннымиСервер.СообщитьОбОшибке(СтрокаСообщения, Отказ);
		
	КонецПопытки;
	
КонецПроцедуры

// Помещает во временное хранилище схему компоновки данных,
// настройки компоновки данных и возвращает их адреса
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.скНастройкиЗапускаБизнесПроцессовОбъектов - цель, для которой требуется получить адреса
//
// Возвращаемое значение:
//	Структура - структура, содержащая адреса
//				СхемаКомпоновкиДанных - Строка - адрес схемы компоновки данных
//				НастройкиКомпоновкиДанных - Строка - адрес настроек компоновки данных
//
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементНастройки) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ДанныеФормыСтруктура") Тогда
		ЭлементНастройкиСсылка = ЭлементНастройки.Ссылка;
	Иначе
		ЭлементНастройкиСсылка = ЭлементНастройки;
	КонецЕсли;
	
	// Получим схему компоновки данных
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = CRM_КлассификаторыВызовСервера.СформироватьТекстЗапросаПринадлежностиКлассификатора(ЭлементНастройки);
		
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
		
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Настройки = ЭлементНастройкиСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

Функция ПринадлежностьКлассификаторов() Экспорт

	СписокПринадлежность = Новый СписокЗначений;
	
	ТипЗначения = Метаданные.ПланыВидовХарактеристик.CRM_Классификаторы.Тип;
	Типы 		= ТипЗначения.Типы();
	
	КоличествоТипов  = Типы.Количество();	
	Для Инд = 1 По КоличествоТипов Цикл
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(Типы[Инд - 1]);
		Если МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПринадлежность.Добавить(МетаданныеОбъекта.ПолноеИмя(), МетаданныеОбъекта.Представление());
		
	КонецЦикла;	
	
	Возврат СписокПринадлежность;

КонецФункции // ПринадлежностьКлассификаторов()

#КонецОбласти

#КонецЕсли
