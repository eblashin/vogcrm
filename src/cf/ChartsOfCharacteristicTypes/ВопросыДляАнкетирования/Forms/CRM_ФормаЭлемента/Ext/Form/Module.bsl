
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриИзмененииТипаОтвета();
	КонецЕсли;
	УправлениеВидимостью();
	// +CRM
	CRM_УправлениеДоступностьюЭлементовФормы();
	// -CRM
	
	// ++ VOG Солодов В.В. 18.11.2019 task 888
	Для Каждого СтрокаТЧ Из Объект.ОчищаемыеПоля Цикл
		Если ТипЗнч(СтрокаТЧ.Поле) = Тип("СправочникСсылка.вогВопросы") Тогда
			СтрокаТЧ.ЭтоВопрос = Истина;
		КонецЕсли;
	КонецЦикла;
	// -- VOG Солодов В.В. 18.11.2019
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Установим отбор по владельцу на динамическом списке справочника "Варианты ответов анкет".
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВариантыОтветов,"Владелец", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно, ,Истина);
	
	// +CRM	
	CRM_УстановитьВидСправочника();
	CRM_ЗаполнитьТаблицыРеквизитовСправочников();
	Если НЕ ПустаяСтрока(Объект.CRM_ИмяСправочника) Тогда
		ИмяТаблицыРеквизитов = "CRM_ТаблицаРеквизитов" + Объект.CRM_ИмяСправочника;
		CRM_ЗаполнитьСписокВыбораРеквизитовПоВидуСправочника(Элементы.CRM_ИмяРеквизитаСправочника.СписокВыбора, ЭтотОбъект[ИмяТаблицыРеквизитов]);
	КонецЕсли;
	// Для вопроса с условием не даем изменять тип ответа.
	Если Параметры.Свойство("ПараметрыВыбора") Тогда 
		Если Параметры.ПараметрыВыбора.Свойство("ТипОтвета") Тогда 
			Если Параметры.ПараметрыВыбора.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево Тогда
				Элементы.ТипОтвета.ОграничениеТипа = Новый ОписаниеТипов("Булево");
				Элементы.ТипОтвета.ТолькоПросмотр = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	// -CRM
	
	УстановитьТипОтвета();
	
	Если ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Строка Тогда
		ДлинаСтроки = Объект.Длина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВидПереключателя = Перечисления.ВидыПереключателяВАнкетах.Переключатель;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВопросыДляАнкетирования");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("СправочникСсылка.ВариантыОтветовАнкет");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ТаблицаВариантыОтветовКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "ВариантыОтветовАнкет";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	вогУправлениеОпросамиСервер.ЗаполнитьДанныеУсловийВопросовПриСозданииНаСервере(ЭтаФорма);
	
	// ++ Тищенко В.В. 23.01.2019
	// Проверка на дубль контактной информации	
	//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"вогПроверкаНаДубль","Видимость",ТипОтвета = Перечисления.ТипыОтветовНаВопрос.CRM_ВидКонтактнойИнформации);
	// -- Тищенко В.В.
	
	// ++ Солодов В.В.
	Если Не Объект.Ссылка.Пустая() Тогда
		УУИД = Объект.Ссылка.УникальныйИдентификатор();	
	КонецЕсли;
	// -- Солодов В.В.
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Число") Тогда
		
		Если Объект.МинимальноеЗначение > Объект.МаксимальноеЗначение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Минимально допустимое значение не может быть больше чем максимальное.'"),,
			                                                  "Объект.МинимальноеЗначение");
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Строка") Тогда	
		
		Объект.Длина = ДлинаСтроки;
		Если ДлинаСтроки = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено значение длины строки.'"),,"ДлинаСтроки");
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Текст") Тогда
		
		Объект.Длина = 1024;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДоступностьТаблицыВариантыОтветов(ЭтотОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВариантыОтветов,
	                                                                        "Владелец",
	                                                                        Объект.Ссылка,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        Истина);
																			
	// ++ Солодов В.В.
	УУИД = Объект.Ссылка.УникальныйИдентификатор();	
	// -- Солодов В.В.
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	вогУправлениеОпросамиСервер.ЗаполнитьДанныеУсловийВопросовПриЧтении(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	вогУправлениеОпросамиСервер.ЗаполнитьДанныеУсловийВопросовПередЗаписью(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипОтветаПриИзменении(Элемент)
	
	ПриИзмененииТипаОтвета();
	
	// ++ VOG Солодов В.В. 18.11.2019 task 888
	УстановитьОтветДляОчисткиПоТипуОтвета();
	// -- VOG Солодов В.В. 18.11.2019
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВариантыОтветовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФормуЭлементаСправочникаВопросыОтветовАнкет(Элемент,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяКомментарийПриИзменении(Элемент)
	
	ДоступностьНеобходимостьПояснениеКомментария();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.Формулировка) Тогда
	
		Объект.Формулировка = Объект.Наименование;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВариантыОтветовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуЭлементаСправочникаВопросыОтветовАнкет(Элемент,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВариантыОтветовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуЭлементаСправочникаВопросыОтветовАнкет(Элемент,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	
	УстановитьТочностьВЗависимостиОтДлиныЧисла();
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьПриИзменении(Элемент)
	
	УстановитьТочностьВЗависимостиОтДлиныЧисла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактированиеФормулировкиПриЗакрытии", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(ОповещениеОЗакрытии, Элемент.ТекстРедактирования, НСтр("ru = 'Формулировка'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбработкуЗаполненияПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбработчиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ПараметрыОбработчиков.Количество() >= 5 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Если больше 5 параметров, значит что-то пошло не так... Поддерживается только 5",,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если СтрНачинаетсяС(Команда.Имя, "ВариантыОтветовАнкет") Тогда
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ТаблицаВариантыОтветов);
	Иначе
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	Если СтрНачинаетсяС(Контекст.ИмяКомандыВФорме, "ВариантыОтветовАнкет") Тогда
		ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ТаблицаВариантыОтветов, Результат);
	Иначе
		ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ТаблицаВариантыОтветов);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура РедактироватьУсловия(Команда)
	
	вогУправлениеОпросамиКлиентСервер.ОткрытьФормуНастройкиУсловийЗависимости(ЭтаФорма, Объект.ВариантОпроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкуЗаполнения(Команда)
	
	Описание = Новый ОписаниеОповещения("ОписаниеОповещенияВводДанныхДляЗагрузки", ЭтаФорма,);
	
	ПоказатьВводСтроки(Описание, , "Введите данные",, Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработкуЗаполнения(Команда)
	
	ДанныеСтроки = ПолучитьДанныеВыгрузкиОбработчиков();
	
	Описание = Новый ОписаниеОповещения("ОписаниеОповещенияЗаглушка", ЭтаФорма);
	
	ПоказатьВводСтроки(Описание, ДанныеСтроки, "Данные",, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Ововещения

&НаКлиенте
Процедура ОписаниеОповещенияЗаглушка(Данные, ИмяТЧ) Экспорт 
	
КонецПроцедуры // ОписаниеОтветаНаВопросГиперссылки()

&НаКлиенте
Процедура ОписаниеОповещенияВводДанныхДляЗагрузки(Данные, ИмяТЧ) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуДанныхОбработчиков(Данные);

КонецПроцедуры // ОписаниеОтветаНаВопросГиперссылки()

#КонецОбласти

Процедура ВыполнитьЗагрузкуДанныхОбработчиков(ДанныеТекст)
	
	Данные = ЗначениеИзСтрокиВнутр(ДанныеТекст);
	
	Объект.ИспользоватьОбработкуЗаполнения 	= Данные.ИспользоватьОбработкуЗаполнения;
	Объект.АлгоритмОбработкиЗаполнения 		= Данные.АлгоритмОбработкиЗаполнения;
	
	Объект.ПараметрыОбработчиков.Загрузить(Данные.ПараметрыОбработчиков);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Функция ПолучитьДанныеВыгрузкиОбработчиков()
	
	СтруктураДанных = Новый Структура("ИспользоватьОбработкуЗаполнения, АлгоритмОбработкиЗаполнения, ПараметрыОбработчиков", Объект.ИспользоватьОбработкуЗаполнения, Объект.АлгоритмОбработкиЗаполнения, Объект.ПараметрыОбработчиков.Выгрузить());
	Возврат ЗначениеВСтрокуВнутр(СтруктураДанных);
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Длина.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Длина");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипОтвета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОтветовНаВопрос.Строка;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипОтвета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОтветовНаВопрос.Число;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТипОтвета.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОтвета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	// ++ VOG Солодов В.В. 18.11.2019 task 888
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОчищаемыеПоляОчищатьТаблицу.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.ОчищаемыеПоля.ЭтоВопрос");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	// -- VOG Солодов В.В. 18.11.2019

КонецПроцедуры

// Управляет видимостью страниц и элементов формы.
&НаКлиенте
Процедура УправлениеВидимостью()
	
	ВозможенКомментарий = НЕ (Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.НесколькоВариантовИз") 
	                        ИЛИ Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Текст"));
	Элементы.ТребуетсяКомментарий.Доступность  = ВозможенКомментарий;
	Элементы.Комментарий.Доступность           = ВозможенКомментарий;
	Если НЕ ВозможенКомментарий Тогда
		Объект.ТребуетсяКомментарий = Ложь;
		Объект.ПояснениеКомментария = "";
	КонецЕсли;
	ДоступностьНеобходимостьПояснениеКомментария();
	
	Если Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Строка") Тогда 
		
		Элементы.ЗависимыеПараметры.ТекущаяСтраница = Элементы.СтраницаСтрока;
		
	ИначеЕсли Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Число") Тогда
		
		Элементы.ЗависимыеПараметры.ТекущаяСтраница = Элементы.СтраницаЧисло;
		
	ИначеЕсли Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы") Тогда
		
		Элементы.ЗависимыеПараметры.ТекущаяСтраница = Элементы.Пустая;
		
	// +CRM
	ИначеЕсли Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.CRM_ВидКонтактнойИнформации") Тогда
		
		Элементы.ЗависимыеПараметры.ТекущаяСтраница = Элементы.CRM_КонтактнаяИнформация;
	
	// -CRM
	ИначеЕсли Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.ОдинВариантИз") 
	      ИЛИ Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.НесколькоВариантовИз") Тогда
		
		Элементы.ЗависимыеПараметры.ТекущаяСтраница = Элементы.ВариантыОтветов; 
		
		ДоступностьТаблицыВариантыОтветов(ЭтотОбъект);
		
	Иначе
		
		Элементы.ЗависимыеПараметры.ТекущаяСтраница = Элементы.Пустая;
		
	КонецЕсли;
	
	Если Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.ОдинВариантИз") Тогда
		
		Элементы.ГруппаВидПереключателя.ТекущаяСтраница = Элементы.ГруппаВидПереключателяОтображать;
		
	Иначе
		
		Элементы.ГруппаВидПереключателя.ТекущаяСтраница = Элементы.ГруппаВидПереключателяНеОтображать;
		
	КонецЕсли;
	
	Элементы.АлгоритмОбработкиЗаполнения.Доступность = Объект.ИспользоватьОбработкуЗаполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаОтвета()

	Если ТипЗнч(ТипОтвета) = Тип("ПеречислениеСсылка.ТипыОтветовНаВопрос") Тогда
		
		Объект.ТипОтвета = ТипОтвета;
		
	ИначеЕсли ТипЗнч(ТипОтвета) = Тип("ОписаниеТипов") Тогда
		
		Объект.ТипОтвета   = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы");
		Объект.ТипЗначения = ТипОтвета;
		
	КонецЕсли;
	
	УправлениеВидимостью();
	
	Если Объект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Число") Тогда
		УстановитьТочностьВЗависимостиОтДлиныЧисла();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоступностьНеобходимостьПояснениеКомментария()
	
	Элементы.ПояснениеКомментария.АвтоОтметкаНезаполненного = Объект.ТребуетсяКомментарий;
	Элементы.ПояснениеКомментария.ТолькоПросмотр            = НЕ Объект.ТребуетсяКомментарий;
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьТаблицыВариантыОтветов(Форма)
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Форма.Элементы.ТаблицаВариантыОтветов.ТолькоПросмотр  = Истина;
		Форма.ИнформацияВариантыОтветов                       = НСтр("ru = 'Для редактирования вариантов ответов необходимо записать вопрос для анкетирования'");
	Иначе
		Форма.Элементы.ТаблицаВариантыОтветов.ТолькоПросмотр = Ложь;
		Форма.ИнформацияВариантыОтветов                      = НСтр("ru = 'Варианты ответов на вопрос:'");
	КонецЕсли; 
	
	Если Форма.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.ОдинВариантИз") Тогда
		Форма.Элементы.ТребуетОткрытогоОтвета.Видимость = Ложь;
	ИначеЕсли Форма.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.НесколькоВариантовИз") Тогда
		Форма.Элементы.ТребуетОткрытогоОтвета.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЭлементаСправочникаВопросыОтветовАнкет(Элемент,РежимДобавления)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец",Объект.Ссылка);
	СтруктураПараметров.Вставить("ТипОтвета",Объект.ТипОтвета);
	
	Если Не РежимДобавления Тогда
		ТекущиеДанные = Элементы.ТаблицаВариантыОтветов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтруктураПараметров.Вставить("Ключ",ТекущиеДанные.Ссылка);
	КонецЕсли;
		
	ОткрытьФорму("Справочник.ВариантыОтветовАнкет.Форма.ФормаЭлемента",СтруктураПараметров,Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипОтвета()
	
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.ТипыОтветовНаВопрос.ЗначенияПеречисления Цикл
		
		Если Перечисления.ТипыОтветовНаВопрос[ЗначениеПеречисления.Имя] = Перечисления.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы Тогда 
			
			Для каждого ДоступныйТип Из РеквизитФормыВЗначение("Объект").Метаданные().Тип.Типы() Цикл
				
				Если ДоступныйТип = Тип("Строка") ИЛИ ДоступныйТип = Тип("Булево") ИЛИ ДоступныйТип = Тип("Число") ИЛИ ДоступныйТип = Тип("Дата") ИЛИ ДоступныйТип = Тип("СправочникСсылка.ВариантыОтветовАнкет") Тогда
					Продолжить;
				КонецЕсли;
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ДоступныйТип);
				Элементы.ТипОтвета.СписокВыбора.Добавить(Новый ОписаниеТипов(МассивТипов));
				
			КонецЦикла;
			
		Иначе
			Элементы.ТипОтвета.СписокВыбора.Добавить(Перечисления.ТипыОтветовНаВопрос[ЗначениеПеречисления.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы Тогда
		
		ТипОтвета = Объект.ТипЗначения;
		
	ИначеЕсли Объект.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ПустаяСсылка() Тогда
		
		ТипОтвета = Элементы.ТипОтвета.СписокВыбора[0].Значение;
		
	Иначе
		
		ТипОтвета = Объект.ТипОтвета;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает точность числового ответа в зависимости от выбранной длины.
//
&НаКлиенте
Процедура УстановитьТочностьВЗависимостиОтДлиныЧисла()

	Если Объект.Длина > 15 Тогда
		Объект.Длина = 15;
	КонецЕсли;
	
	Если Объект.Длина = 0 Тогда
		Объект.Точность = 0;
	ИначеЕсли Объект.Длина <= Объект.Точность Тогда
		Объект.Точность = Объект.Длина - 1;
	КонецЕсли;
	
	Если Объект.Точность > 3 Тогда
		Объект.Точность = 3;
	КонецЕсли;
	
	Если (Объект.Длина - Объект.Точность) > 12 Тогда
		Объект.Длина = Объект.Точность + 12;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормулировкиПриЗакрытии(ТекстВозврата, ДополнительныеПараметры) Экспорт
	
	Если Объект.Формулировка <> ТекстВозврата Тогда
		Объект.Формулировка = ТекстВозврата;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// +CRM

#Область ОбщиеПроцедурыИФункцииCrm

&НаСервере
// Процедура заполняет список выбора видов справочника.
//
// Параметры:
//	Нет.
//
Процедура CRM_УстановитьВидСправочника()
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("",							"Независимый ответ");
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("Партнеры",					"Реквизит справочника ""Партнеры""");
	//+вог
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("вогТорговыеТочки",			"Реквизит справочника ""Торговые точки""");
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("вогЮридическиеЛица",			"Реквизит справочника ""Юридические лица""");
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("вогРаспределительныеЦентры",	"Реквизит справочника ""Распределительные центры""");
	//-вог
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("КонтактныеЛицаПартнеров",	"Реквизит справочника ""Контактные лица""");
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("Пользователи",				"Реквизит справочника ""Пользователи""");
	// ++ VOG Солодов В.В. 10.09.2019 
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("вогКоммерческиеСоглашения",	"Реквизит справочника ""Коммерческие соглашения""");
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("ДоговорыКонтрагентов",		"Реквизит справочника ""Договоры контрагентов""");
	// -- VOG Солодов В.В. 10.09.2019
	//++ VOG Иванов С.А. 11.10.2019 task: 721 
	Элементы.CRM_ВидВопроса.СписокВыбора.Добавить("БанковскиеСчета",	"Реквизит справочника ""Банковские счета""");
	//-- VOG Иванов С.А. 11.10.2019 task: 721
КонецПроцедуры // CRM_УстановитьВидСправочника()

&НаСервере
// Процеура заполняет таблицу реквизитов справочника.
//
// Параметры:
//	ИмяСправочника	- Строка	- Имя справочника.
//
Процедура CRM_ЗаполнитьТаблицуРеквизитовСправочника(ИмяСправочника)
	ИмяТаблицыРеквизитов = "CRM_ТаблицаРеквизитов" + ИмяСправочника;
	//+вог
	// Заполним список стандартных реквизитов с типами, соответствующими.
	МетаданныеРеквизитыСправочника = Метаданные.Справочники[ИмяСправочника].СтандартныеРеквизиты;
	ОписаниеТиповОтветовНаВопросы = РеквизитФормыВЗначение("Объект").Метаданные().Тип;
	Для Каждого РеквизитСправочника Из МетаданныеРеквизитыСправочника Цикл
		Если РеквизитСправочника.Имя = "Наименование" Тогда
			ОписаниеТиповРеквизита = РеквизитСправочника.Тип;
			ТипыРеквизитаСправочника = ОписаниеТиповРеквизита.Типы();
			Для Каждого ТипРеквизитаСправочника Из ТипыРеквизитаСправочника Цикл
				Если ОписаниеТиповОтветовНаВопросы.СодержитТип(ТипРеквизитаСправочника) Тогда
					ТаблицаРеквизитовНоваяСтрока = ЭтотОбъект[ИмяТаблицыРеквизитов].Добавить();
					ТаблицаРеквизитовНоваяСтрока.Значение = РеквизитСправочника.Имя;
					ТаблицаРеквизитовНоваяСтрока.Представление = ?(ПустаяСтрока(РеквизитСправочника.Синоним) ,РеквизитСправочника.Имя, РеквизитСправочника.Синоним);
					ТаблицаРеквизитовНоваяСтрока.ТипыРеквизита = ОписаниеТиповРеквизита;
					Прервать;
				КонецЕсли;
		    КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	//-вог
	
	// Заполним список реквизитов с типами, соответствующими.
	МетаданныеРеквизитыСправочника = Метаданные.Справочники[ИмяСправочника].Реквизиты;
	//+вог
	//ОписаниеТиповОтветовНаВопросы = РеквизитФормыВЗначение("Объект").Метаданные().Тип;
	//-вог
	Для Каждого РеквизитСправочника Из МетаданныеРеквизитыСправочника Цикл
		
		ОписаниеТиповРеквизита = РеквизитСправочника.Тип;
		ТипыРеквизитаСправочника = ОписаниеТиповРеквизита.Типы();
		
		Для Каждого ТипРеквизитаСправочника Из ТипыРеквизитаСправочника Цикл
			
			Если ОписаниеТиповОтветовНаВопросы.СодержитТип(ТипРеквизитаСправочника) Тогда
				ТаблицаРеквизитовНоваяСтрока = ЭтотОбъект[ИмяТаблицыРеквизитов].Добавить();
				ТаблицаРеквизитовНоваяСтрока.Значение = РеквизитСправочника.Имя;
				ТаблицаРеквизитовНоваяСтрока.Представление = ?(ПустаяСтрока(РеквизитСправочника.Синоним) ,РеквизитСправочника.Имя, РеквизитСправочника.Синоним);
				ТаблицаРеквизитовНоваяСтрока.ТипыРеквизита = ОписаниеТиповРеквизита;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	// Добавляем контактную информацию.
	Если ИмяСправочника = "Партнеры" Тогда
		ГруппаВидовКИ = Новый Массив;
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["Справочник" + ИмяСправочника]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_Справочник" + ИмяСправочника + "Компания"]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_Справочник" + ИмяСправочника + "ЧастноеЛицо"]);
	// ++ VOG Солодов В.В. 10.09.2019 
	ИначеЕсли ИмяСправочника = "вогКоммерческиеСоглашения"
		Или ИмяСправочника = "ДоговорыКонтрагентов" 
		ИЛИ ИмяСправочника = "БанковскиеСчета" Тогда //+ VOG Иванов С.А. 11.10.2019 Task: 721 
		ГруппаВидовКИ = Новый Массив;
	// -- VOG Солодов В.В. 10.09.2019
	Иначе
		ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации["Справочник" + ИмяСправочника];
	КонецЕсли;
	ЗапросПоКонтактнойИнформации = Новый Запрос;
	ЗапросПоКонтактнойИнформации.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	ЗапросПоКонтактнойИнформации.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип,
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	|	ВидыКонтактнойИнформации.ВидРедактирования,
	// До изменения
	//|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге,
	// -- VOG Солодов В.В. 02.03.2020
	|	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления,
	|	ВидыКонтактнойИнформации.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ";
	Если ИмяСправочника = "Партнеры"
		Или ИмяСправочника = "вогКоммерческиеСоглашения" // VOG Солодов В.В. 10.09.2019 // Добавлено условие
		Или ИмяСправочника = "ДоговорыКонтрагентов"    // VOG Солодов В.В. 10.09.2019 // Добавлено условие
		ИЛИ ИмяСправочника = "БанковскиеСчета" Тогда // VOG Иванов С.А. 11.10.2019 // Добавлено условие 
		ЗапросПоКонтактнойИнформации.Текст = ЗапросПоКонтактнойИнформации.Текст + "
		|	ВидыКонтактнойИнформации.Родитель В (&ГруппаВидовКИ)";
	Иначе
		ЗапросПоКонтактнойИнформации.Текст = ЗапросПоКонтактнойИнформации.Текст + "
		|	ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ";
	КонецЕсли;
	ЗапросПоКонтактнойИнформации.Текст = ЗапросПоКонтактнойИнформации.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	ВидыКонтактнойИнформации.Родитель,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания";
	Выборка = ЗапросПоКонтактнойИнформации.Выполнить().Выбрать();
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТиповКонтактнойИнформации = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
	Пока Выборка.Следующий() Цикл
		ТаблицаРеквизитовНоваяСтрока = ЭтотОбъект[ИмяТаблицыРеквизитов].Добавить();
		ТаблицаРеквизитовНоваяСтрока.Значение = "КонтактнаяИнформация_" + Выборка.Наименование;
		ТаблицаРеквизитовНоваяСтрока.Представление = Выборка.Наименование;
		ТаблицаРеквизитовНоваяСтрока.ТипыРеквизита = ОписаниеТиповКонтактнойИнформации;
		ТаблицаРеквизитовНоваяСтрока.ВидКонтактнойИнформации = Выборка.Вид;
    КонецЦикла;
	// Добавляем дополнительные реквизиты.
	НаборыСвойств = Новый Массив;
	Если ИмяСправочника = "Партнеры" Тогда
		НаборыСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие);
		НаборыСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Компании_CRM);
		НаборыСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_ЧастныеЛица_CRM);
	ИначеЕсли ИмяСправочника = "КонтактныеЛицаПартнеров" Тогда
		НаборыСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛицаПартнеров);
	//+вог
	ИначеЕсли ИмяСправочника = "вогТорговыеТочки" Тогда
		НаборыСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_вогТорговыеТочки);
	ИначеЕсли ИмяСправочника = "вогЮридическиеЛица" Тогда
		НаборыСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_вогЮридическиеЛица);
	ИначеЕсли ИмяСправочника = "вогРаспределительныеЦентры" Тогда
		НаборыСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_вогРаспределительныеЦентры);
	//-вог
	КонецЕсли;
	Если НаборыСвойств.Количество() > 0 Тогда
		ЗапросПоДополнительнымРеквизитам = Новый Запрос;
	    ЗапросПоДополнительнымРеквизитам.УстановитьПараметр("НаборыСвойств", НаборыСвойств);
		ЗапросПоДополнительнымРеквизитам.Текст = "ВЫБРАТЬ
		                                         |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК ДополнительныйРеквизит,
		                                         |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
		                                         |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Наименование КАК Наименование
		                                         |ИЗ
		                                         |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		                                         |ГДЕ
		                                         |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка В(&НаборыСвойств)";
		Выборка = ЗапросПоДополнительнымРеквизитам.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеТиповРеквизита = Выборка.ТипЗначения;
			ТипыРеквизитаСправочника = ОписаниеТиповРеквизита.Типы();
			Для Каждого ТипРеквизитаСправочника Из ТипыРеквизитаСправочника Цикл
				Если ОписаниеТиповОтветовНаВопросы.СодержитТип(ТипРеквизитаСправочника) Тогда
					ТаблицаРеквизитовНоваяСтрока = ЭтотОбъект[ИмяТаблицыРеквизитов].Добавить();
					ТаблицаРеквизитовНоваяСтрока.Значение = "ДополнительныйРеквизит_" + Выборка.Наименование;
					ТаблицаРеквизитовНоваяСтрока.Представление = Выборка.Наименование;
					ТаблицаРеквизитовНоваяСтрока.ТипыРеквизита = ОписаниеТиповРеквизита;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// ++ Харченко Д.И. №  - 10.09.2018 / 
	
	ЭтотОбъект[ИмяТаблицыРеквизитов].Сортировать("Представление");
	
	// -- Харченко Д.И. №  - 10.09.2018
КонецПроцедуры // CRM_ЗаполнитьТаблицуРеквизитовСправочника()

&НаСервере
// Процедура заполняет таблицы реквизитов справочников.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТаблицыРеквизитовСправочников()
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("Партнеры");
	//+вог
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("вогТорговыеТочки");
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("вогЮридическиеЛица");
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("вогРаспределительныеЦентры");
	//-вог
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("Пользователи");
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("КонтактныеЛицаПартнеров");
	
	// ++ VOG Солодов В.В. 10.09.2019 
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("вогКоммерческиеСоглашения");
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("ДоговорыКонтрагентов");
	// -- VOG Солодов В.В. 10.09.2019
	//++ VOG Иванов С.А. 11.10.2019 Task: 721
	CRM_ЗаполнитьТаблицуРеквизитовСправочника("БанковскиеСчета");
	//-- VOG Иванов С.А. 11.10.2019 Task: 721
КонецПроцедуры // CRM_ЗаполнитьСпискиРеквизитовСправочников()	
	
&НаСервере
// Процедура заполняет тип вопроса.
//
// Параметры:
//	Нет.
//
Процедура CRM_УстановитьТипВопросаПоРеквизиту()
	ИмяТаблицыРеквизитов = "CRM_ТаблицаРеквизитов" + Объект.CRM_ИмяСправочника;
	МассивСтрокРеквизита = ЭтотОбъект[ИмяТаблицыРеквизитов].НайтиСтроки(Новый Структура("Значение", Объект.CRM_ИмяРеквизита));
	Если МассивСтрокРеквизита.Количество() > 0 Тогда
		СтрокаРеквизита = МассивСтрокРеквизита[0];
		ОписаниеТиповРеквизита = СтрокаРеквизита.ТипыРеквизита;
		МассивТипов = ОписаниеТиповРеквизита.Типы();
		ОписаниеТиповОтветовНаВопросы = РеквизитФормыВЗначение("Объект").Метаданные().Тип;
		ТипВыбранногоРеквизита = Неопределено;
		Для Каждого ТипРеквизитаСправочника Из МассивТипов Цикл
			Если ОписаниеТиповОтветовНаВопросы.СодержитТип(ТипРеквизитаСправочника) Тогда
				ТипВыбранногоРеквизита  = ТипРеквизитаСправочника;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТипВыбранногоРеквизита) Тогда
			Если ТипВыбранногоРеквизита = Тип("Дата") Тогда
				ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Дата;
			ИначеЕсли ТипВыбранногоРеквизита = Тип("Строка") Тогда
				Если ЗначениеЗаполнено(СтрокаРеквизита.ВидКонтактнойИнформации) Тогда
					ТипОтвета = Перечисления.ТипыОтветовНаВопрос.CRM_ВидКонтактнойИнформации;
					Объект.CRM_ВидКонтактнойИнформации = СтрокаРеквизита.ВидКонтактнойИнформации;
				Иначе	
					ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Строка;
					Если ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина = 0 Тогда
						ДлинаСтроки = 250;	
					Иначе
						ДлинаСтроки = ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина;	
					КонецЕсли;					
				КонецЕсли;	
			ИначеЕсли ТипВыбранногоРеквизита = Тип("Число") Тогда
				ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Число;
				Объект.Длина = ОписаниеТиповРеквизита.КвалификаторыЧисла.Разрядность;
				Объект.Точность = ОписаниеТиповРеквизита.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			ИначеЕсли ТипВыбранногоРеквизита = Тип("Булево") Тогда
				ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево;		 
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипВыбранногоРеквизита);
				ТипОтвета = Новый ОписаниеТипов(МассивТипов);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
		
	// ++ Тищенко В.В. 23.01.2019
	// Проверка на дубль контактной информации	
	//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"вогПроверкаНаДубль","Видимость",ТипОтвета = Перечисления.ТипыОтветовНаВопрос.CRM_ВидКонтактнойИнформации);
	// -- Тищенко В.В. 
		
КонецПроцедуры // CRM_УстановитьТипВопросаПоРеквизиту()

&НаКлиентеНаСервереБезКонтекста
// Процедура заполняет список выбора реквизитов по виду справочника.
//
// Параметры:
//	Приемник	- СписокЗначений	- Источник
//	Источник	- ТаблицаЗначений	- Приемник
//
Процедура CRM_ЗаполнитьСписокВыбораРеквизитовПоВидуСправочника(Приемник, Источник)
	Приемник.Очистить();
	Для Каждого СтрокаИсточник Из Источник Цикл
		ЭлементПриемник = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, СтрокаИсточник);		
	КонецЦикла;
КонецПроцедуры // CRM_ЗаполнитьСписокВыбораРеквизитовПоВидуСправочника()

&НаКлиенте
// Процедура управляет доступностью элементов формы.
//
// Параметры:
//	Нет.
//
Процедура CRM_УправлениеДоступностьюЭлементовФормы()
	ЭтоПроизвольныйВопрос = ПустаяСтрока(Объект.CRM_ИмяСправочника);
	Элементы.ТипОтвета.Доступность		= ЭтоПроизвольныйВопрос;
	Элементы.Длина.Доступность			= ЭтоПроизвольныйВопрос;
	Элементы.Точность.Доступность		= ЭтоПроизвольныйВопрос;
	Элементы.ДлинаСтроки.Доступность	= ЭтоПроизвольныйВопрос;
	Элементы.CRM_ВидКонтактнойИнформации.Доступность		= ЭтоПроизвольныйВопрос;
	Элементы.CRM_ИмяРеквизитаСправочника.Доступность	= НЕ ЭтоПроизвольныйВопрос;
КонецПроцедуры // CRM_УправлениеДоступностьюЭлементовФормы()

#КонецОбласти

#Область ПроцедурыИФункцииОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзмении" элемента формы "CRM_ВидВопроса".
//
// Параметры:
//	Элемент	- ЭлементФормы	- Элемент формы.
//
Процедура CRM_ВидВопросаПриИзменении(Элемент)
	Объект.CRM_ИмяРеквизита = "";
	Если ПустаяСтрока(Объект.CRM_ИмяСправочника) Тогда
		Элементы.CRM_ИмяРеквизитаСправочника.СписокВыбора.Очистить();
	Иначе
		// Заполним, список реквизитов справочника.
		ИмяТаблицыРеквизитов = "CRM_ТаблицаРеквизитов" + Объект.CRM_ИмяСправочника;
		CRM_ЗаполнитьСписокВыбораРеквизитовПоВидуСправочника(Элементы.CRM_ИмяРеквизитаСправочника.СписокВыбора, ЭтотОбъект[ИмяТаблицыРеквизитов]);
	КонецЕсли;
	CRM_УправлениеДоступностьюЭлементовФормы();
КонецПроцедуры // CRM_ВидВопросаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзмении" элемента формы "CRM_ИмяРеквизитаСправочника".
//
// Параметры:
//	Элемент	- ЭлементФормы	- Элемент формы.
//
Процедура CRM_ИмяРеквизитаСправочникаПриИзменении(Элемент)
	CRM_УстановитьТипВопросаПоРеквизиту();
	ТипОтветаПриИзменении(Элементы.ТипОтвета);
КонецПроцедуры

// -CRM

// ++ Солодов В.В. 13.02.2019
&НаКлиенте
Процедура ОбработчикПриИзмененииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ИмяМакетаСправки = "Справочники.вогВопросы.ПолучитьМакет(""СправкаОбработчикСобытия"")";
	
	ПараметрыФормыОткрытия = Новый Структура();
	ПараметрыФормыОткрытия.Вставить("ТекстОбработки", 	Объект[Элемент.Имя]);
	ПараметрыФормыОткрытия.Вставить("Заголовок", 		"Обработчик события ""При изменении""");
	ПараметрыФормыОткрытия.Вставить("ИмяМакетаСправки", ИмяМакетаСправки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПриИзмененииВыборЗавершение", ЭтотОбъект, Элемент);
	
	ОткрытьФорму("Справочник.CRM_ТочкиМаршрутов.Форма.ФормаРедактированияТекста", 
		ПараметрыФормыОткрытия, 
		ЭтотОбъект,
		,
		,
		, 
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПриИзмененииВыборЗавершение(Результат, Элемент) экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство("Обработчик", Объект[Элемент.Имя]);
		Иначе 
			Объект[Элемент.Имя] = Результат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачалоВыбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ИмяМакетаСправки = "Справочники.вогВопросы.ПолучитьМакет(""СправкаОбработчикСобытия"")";
	
	ПараметрыФормыОткрытия = Новый Структура();
	ПараметрыФормыОткрытия.Вставить("ТекстОбработки", 	Объект[Элемент.Имя]);
	ПараметрыФормыОткрытия.Вставить("Заголовок", 		"Обработчик события ""При изменении""");
	ПараметрыФормыОткрытия.Вставить("ИмяМакетаСправки", ИмяМакетаСправки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПриИзмененииВыборЗавершение", ЭтотОбъект, Элемент);
	
	ОткрытьФорму("Справочник.CRM_ТочкиМаршрутов.Форма.ФормаРедактированияТекста", 
		ПараметрыФормыОткрытия, 
		ЭтотОбъект,
		,
		,
		, 
		ОписаниеОповещения);

КонецПроцедуры
// -- Солодов В.В.

// ++ VOG Солодов В.В. 15.11.2019 task 888
&НаКлиенте
Процедура ОтветДляОчисткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьОтветДляОчисткиПоТипуОтвета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчищаемыеПоляПолеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОчищаемыеПоля.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Поле) = Тип("СправочникСсылка.вогВопросы") Тогда
		ТекущиеДанные.ЭтоВопрос = Истина;
	Иначе
		ТекущиеДанные.ЭтоВопрос = Ложь;
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 15.11.2019

#КонецОбласти

// ++ VOG Солодов В.В. 18.11.2019 task 888
&НаКлиенте
Процедура УстановитьОтветДляОчисткиПоТипуОтвета()
	
	Если ТипЗнч(ТипОтвета) = Тип("ОписаниеТипов") Тогда
		Объект.ОтветДляОчистки = ТипОтвета.ПривестиЗначение(Объект.ОтветДляОчистки);
	Иначе
		
		Если ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Число") Тогда
			Объект.ОтветДляОчистки = 0;
		ИначеЕсли ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Булево") Тогда
			Объект.ОтветДляОчистки = Ложь;
		ИначеЕсли ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Дата") Тогда
			Объект.ОтветДляОчистки = Дата(1,1,1);
		ИначеЕсли ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Строка")
			Или ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Текст") Тогда
			Объект.ОтветДляОчистки = "";
		ИначеЕсли ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.CRM_ВидКонтактнойИнформации") Тогда
			Объект.ОтветДляОчистки = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
		Иначе
			Объект.ОтветДляОчистки = ПредопределенноеЗначение("Справочник.ВариантыОтветовАнкет.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 18.11.2019

#КонецОбласти
