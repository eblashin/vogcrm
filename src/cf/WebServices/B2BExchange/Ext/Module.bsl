
Функция ТестПодключения()
	Возврат Истина;	
КонецФункции

Функция ПараметрыИзJSON(СтрокаПараметровJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаПараметровJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON);
КонецФункции

Функция ПараметрыВJSON(Параметы) 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(ЗаписьJSON, Параметы);
		Возврат ЗаписьJSON.Закрыть();
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

Функция GetBSU(BSUCode)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураБСУ = Новый Структура;
	СтруктураБСУ.Вставить("Вид");
	СтруктураБСУ.Вставить("Наименование");
	СтруктураБСУ.Вставить("ЕдиницаПродажи");
	СтруктураБСУ.Вставить("Ректификация");
	СтруктураБСУ.Вставить("ВидПоверхности");
	СтруктураБСУ.Вставить("Материал");
	СтруктураБСУ.Вставить("Цвет");
	СтруктураБСУ.Вставить("ТипИспользования");
	
	
	БСУ = Справочники.вогНоменклатурныеПозиции.НайтиПоКоду(BSUCode);
	Если ЗначениеЗаполнено(БСУ) тогда
		СтруктураБСУ.Вид = СокрЛП(БСУ.НаправлениеДеятельности);
		СтруктураБСУ.Наименование = СокрЛП(БСУ.Наименование);
		СтруктураБСУ.ЕдиницаПродажи = СокрЛП(БСУ.ЕдиницаПродажиПлитка);
		СтруктураБСУ.Ректификация = БСУ.РектификацияПлитка;
		СтруктураБСУ.ВидПоверхности = СокрЛП(БСУ.ВидыПоверхностиПлитка);
		СтруктураБСУ.Материал = СокрЛП(БСУ.МатериалПлитка);
		СтруктураБСУ.Цвет  = СокрЛП(БСУ.Цвет);
		СтруктураБСУ.ТипИспользования = СокрЛП(БСУ.ТипИспользования);
	
	КонецЕсли;
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,СтруктураБСУ);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция GetSKUInfo(SKUCode)
	
	Данные = "";
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Структура = Новый Структура;
	Структура.Вставить("Вид");
	Структура.Вставить("Артикул");
	Структура.Вставить("BSU");
	Структура.Вставить("Наименование");
	Структура.Вставить("НаименованиеПолное");
	Структура.Вставить("Производитель");
	Структура.Вставить("ЦветПроизводителя");
	Структура.Вставить("ЕдиницыИзмерения");
	Структура.Вставить("Картинка");
	
	Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",SKUCode);
	Если ЗначениеЗаполнено(Номенклатура) тогда
		Структура.Наименование = СокрЛП(Номенклатура.Наименование);
		Структура.НаименованиеПолное = СокрЛП(Номенклатура.НаименованиеПолное);
	    Структура.Вид = СокрЛП(Номенклатура.НаправлениеДеятельности);
		Структура.Производитель = СокрЛП(Номенклатура.вогПроизводитель);
		Структура.ЦветПроизводителя = СокрЛП(Номенклатура.ЦветПроизводителя);
		Структура.BSU = Номенклатура.НоменклатурнаяПозиция.Код;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Код КАК Код,
		               |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Наименование КАК Наименование,
		               |	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
		               |	ЕдиницыИзмерения.Длина КАК Длина,
		               |	ЕдиницыИзмерения.Ширина КАК Ширина,
		               |	ЕдиницыИзмерения.Высота КАК Высота,
		               |	ЕдиницыИзмерения.Вес КАК Вес,
		               |	ЕдиницыИзмерения.Объем КАК Объем
		               |ИЗ
		               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |ГДЕ
		               |	ЕдиницыИзмерения.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец",Номенклатура);
		тзЕИ = Запрос.Выполнить().Выгрузить();
		Структура.ЕдиницыИзмерения = тзЕИ;
		Структура.Картинка  = ПолучитьИзВременногоХранилища(РаботаСФайлами.ДанныеФайла(Номенклатура.ФайлКартинки).СсылкаНаДвоичныеДанныеФайла);
	КонецЕсли;
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Структура);
	
	Возврат ЗаписьJSON.Закрыть();
	
	
КонецФункции

Функция GetCatalogSKU()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Номенклатура.Артикул КАК SKU,
	               |	Номенклатура.НоменклатурнаяПозиция.Код КАК BSU
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	НЕ Номенклатура.ПометкаУдаления";
	ТЗ = Запрос.Выполнить().Выгрузить();
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,ТЗ);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция GetObjInfo(Parameters)
	СтруктураПараметров	= ПараметрыИзJSON(Parameters);
	
	Если СтруктураПараметров.Режим = "СписокСкановДоговора" тогда
		
		МассивРезультат = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.вогИдентификаторПлитка = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", СтруктураПараметров.Клиент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() тогда
			Договор = Выборка.Ссылка;
		Иначе
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл КАК ПрисоединенныйФайл
			|ИЗ
			|	РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
			|ГДЕ
			|	вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.Наименование = ""Скан""
			|	И вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл.ВладелецФайла = &ВладелецФайла";
		
		Запрос.УстановитьПараметр("ВладелецФайла", Договор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураСтроки	= Новый Структура("Справочник, УИД, Расширение, Имя", "ДоговорыКонтрагентовПрисоединенныеФайлы",СокрЛП(ВыборкаДетальныеЗаписи.ПрисоединенныйФайл.УникальныйИдентификатор()),ВыборкаДетальныеЗаписи.ПрисоединенныйФайл.Расширение,ВыборкаДетальныеЗаписи.ПрисоединенныйФайл.Наименование);
			МассивРезультат.Добавить(СтруктураСтроки);
		КонецЦикла;
	
		Возврат ПараметрыВJSON(МассивРезультат);
		
	ИначеЕсли СтруктураПараметров.Режим = "ИзменениеТорговойМарки" тогда
		
		Организация = XMLЗначение(Тип("СправочникСсылка.Организации"), СтруктураПараметров.Организация);
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);
		
		ИсполнительПоручения = ПолучитьИсполнителяПоручения(Организация, Клиент);
		
		Если ИсполнительПоручения = Неопределено тогда
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,"Не найден подходящий менеджер для поручения."));
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;	
		
		НачатьТранзакцию();
		Попытка
		
			Ответственный	= ИсполнительПоручения;
			Срок			= ТекущаяДата() + 3600;
			Подразделение	= ИсполнительПоручения.Подразделение;
			Трудоемкость	= Неопределено;		
		
			СтруктураРеквизитов = Новый Структура("Дата, Автор, Постановщик, Ответственный, Предмет, Тема, Подразделение, Организация, Срок, Задача, РезультатЗадачи, КомментарийЗадачи, Трудоемкость");
												
			СтруктураРеквизитов.Автор 			= Пользователи.ТекущийПользователь();
			СтруктураРеквизитов.Постановщик 	= Пользователи.ТекущийПользователь();
			СтруктураРеквизитов.Ответственный	= Ответственный;
			СтруктураРеквизитов.Дата 			= ТекущаяДата();
			СтруктураРеквизитов.Предмет 		= Клиент;
			СтруктураРеквизитов.Тема 			= "Изменение торговой марки.";
			СтруктураРеквизитов.Подразделение	= Подразделение;
			СтруктураРеквизитов.Организация		= Подразделение.Организация;
			СтруктураРеквизитов.Срок 			= Срок;
			СтруктураРеквизитов.Задача 			= "Согласовать изменение торговой марки.";
			СтруктураРеквизитов.РезультатЗадачи	= "Новая торговая марка согласована.";
			СтруктураРеквизитов.КомментарийЗадачи = "Требуется согласовать изменение торговой марки. Клиент "+СокрЛП(Клиент)+". Новая торговая марка: "+СокрЛП(СтруктураПараметров.НоваяМарка);
			СтруктураРеквизитов.Трудоемкость 	= Трудоемкость;			
			
			СозданныйОбъект = ЗапуститьБизнесПроцесс(СтруктураРеквизитов);		
			
			Если СозданныйОбъект.Результат = Ложь тогда
				
				ОтменитьТранзакцию();
				
				МассивРезультат = Новый Массив;
				МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,СозданныйОбъект.ОписаниеОшибки));
		
				Возврат ПараметрыВJSON(МассивРезультат);
				
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,ОписаниеОшибки()));
		
			Возврат ПараметрыВJSON(МассивРезультат);
			
		КонецПопытки;	
		
		МассивРезультат = Новый Массив;
		МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Истина,"Запрос на доступ отправлен."));
		
		Возврат ПараметрыВJSON(МассивРезультат);
		
	ИначеЕсли СтруктураПараметров.Режим = "СогласованиеДоступаКФТП" тогда
		
		Организация = XMLЗначение(Тип("СправочникСсылка.Организации"), СтруктураПараметров.Организация);
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	вогТорговыеТочки.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
			|ГДЕ
			|	вогТорговыеТочки.Код = &Код";
		
		Запрос.УстановитьПараметр("Код", СтруктураПараметров.КодТТ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 тогда
			Выборка.Следующий();
			ТТ = Выборка.Ссылка;
		Иначе
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,"Не найдена торговая точка."));
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;
		
		ИсполнительПоручения = ПолучитьИсполнителяПоручения(Организация, Клиент);
		
		Если ИсполнительПоручения = Неопределено тогда
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,"Не найден подходящий менеджер для поручения."));
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;	
		
		НачатьТранзакцию();
		Попытка
		
			Ответственный	= ИсполнительПоручения;
			Срок			= ТекущаяДата() + 3600;
			Подразделение	= ИсполнительПоручения.Подразделение;
			Трудоемкость	= Неопределено;		
		
			СтруктураРеквизитов = Новый Структура("Дата, Автор, Постановщик, Ответственный, Предмет, Тема, Подразделение, Организация, Срок, Задача, РезультатЗадачи, КомментарийЗадачи, Трудоемкость");
												
			СтруктураРеквизитов.Автор 			= Пользователи.ТекущийПользователь();
			СтруктураРеквизитов.Постановщик 	= Пользователи.ТекущийПользователь();
			СтруктураРеквизитов.Ответственный	= Ответственный;
			СтруктураРеквизитов.Дата 			= ТекущаяДата();
			СтруктураРеквизитов.Предмет 		= ТТ;
			СтруктураРеквизитов.Тема 			= "Предоставление доступа к каталогу цен.";
			СтруктураРеквизитов.Подразделение	= Подразделение;
			СтруктураРеквизитов.Организация		= Подразделение.Организация;
			СтруктураРеквизитов.Срок 			= Срок;
			СтруктураРеквизитов.Задача 			= "Предоставить доступ к каталогу цен.";
			СтруктураРеквизитов.РезультатЗадачи	= Справочники.ПунктыЧекЛистовЗадач.НайтиПоКоду("000000033");
			//СтруктураРеквизитов.РезультатЗадачи	= "Доступ предоставлен.";			
			СтруктураРеквизитов.КомментарийЗадачи = "Требуется предоставить доступ к каталогу цен. Клиент "+СокрЛП(Клиент)+". Торговая точка: "+СокрЛП(ТТ);
			СтруктураРеквизитов.Трудоемкость 	= Трудоемкость;
			
			СозданныйОбъект = ЗапуститьБизнесПроцесс(СтруктураРеквизитов);		
			
			Если СозданныйОбъект.Результат = Ложь тогда
				
				ОтменитьТранзакцию();
				
				МассивРезультат = Новый Массив;
				МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,СозданныйОбъект.ОписаниеОшибки));
		
				Возврат ПараметрыВJSON(МассивРезультат);
				
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,ОписаниеОшибки()));
		
			Возврат ПараметрыВJSON(МассивРезультат);
			
		КонецПопытки;	
		
		МассивРезультат = Новый Массив;
		МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Истина,"Запрос на доступ отправлен."));
		
		Возврат ПараметрыВJSON(МассивРезультат);
		
	ИначеЕсли СтруктураПараметров.Режим = "СозданиеИнтернетМагазина" тогда
		
		Организация = XMLЗначение(Тип("СправочникСсылка.Организации"), СтруктураПараметров.Организация);
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);		
		
		ИсполнительПоручения = ПолучитьИсполнителяПоручения(Организация, Клиент);
		
		Если ИсполнительПоручения = Неопределено тогда
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,"Не найден подходящий менеджер для поручения."));
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;	
		
		НачатьТранзакцию();
		Попытка
		
			Ответственный	= ИсполнительПоручения;
			Срок			= ТекущаяДата() + 3600;
			Подразделение	= ИсполнительПоручения.Подразделение;
			Трудоемкость	= Неопределено;		
		
			СтруктураРеквизитов = Новый Структура("Дата, Автор, Постановщик, Ответственный, Предмет, Тема, Подразделение, Организация, Срок, Задача, РезультатЗадачи, КомментарийЗадачи, Трудоемкость");
												
			СтруктураРеквизитов.Автор 			= Пользователи.ТекущийПользователь();
			СтруктураРеквизитов.Постановщик 	= Пользователи.ТекущийПользователь();
			СтруктураРеквизитов.Ответственный	= Ответственный;
			СтруктураРеквизитов.Дата 			= ТекущаяДата();
			СтруктураРеквизитов.Предмет 		= Клиент;
			СтруктураРеквизитов.Тема 			= "Согласовать интернет-магазин";
			СтруктураРеквизитов.Подразделение	= Подразделение;
			СтруктураРеквизитов.Организация		= Подразделение.Организация;
			СтруктураРеквизитов.Срок 			= Срок;
			СтруктураРеквизитов.Задача 			= "Согласовать новый интернет-магазин";
			СтруктураРеквизитов.РезультатЗадачи	= "Интернет-магазин согласован";
			СтруктураРеквизитов.КомментарийЗадачи = "Требуется согласовать интернет-магазин по клиенту: "+СокрЛП(Клиент)+". Наименование интернет-магазина: "+СтруктураПараметров.Наименование+". URL: "+СтруктураПараметров.Адрес;
			СтруктураРеквизитов.Трудоемкость 	= Трудоемкость;
			
			СозданныйОбъект = ЗапуститьБизнесПроцесс(СтруктураРеквизитов);		
			
			Если СозданныйОбъект.Результат = Ложь тогда
				
				ОтменитьТранзакцию();
				
				МассивРезультат = Новый Массив;
				МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,СозданныйОбъект.ОписаниеОшибки));
		
				Возврат ПараметрыВJSON(МассивРезультат);
				
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,ОписаниеОшибки()));
		
			Возврат ПараметрыВJSON(МассивРезультат);
			
		КонецПопытки;	
		
		МассивРезультат = Новый Массив;
		МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Истина,"Поручение успешно создано."));
		
		Возврат ПараметрыВJSON(МассивРезультат);
		
	ИначеЕсли СтруктураПараметров.Режим = "СозданиеЮрЛица" тогда
		
		Организация = XMLЗначение(Тип("СправочникСсылка.Организации"), СтруктураПараметров.Организация);
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);		
		
		ИсполнительПоручения = ПолучитьИсполнителяПоручения(Организация, Клиент);
		
		Если ИсполнительПоручения = Неопределено тогда
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,"Не найден подходящий менеджер для поручения."));
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;	
		
		МассивПодразделений = ПолучитьПодразделенияЮрЛица(Организация, Клиент);
		
		НовыйОбъект = Справочники.вогЮридическиеЛица.СоздатьЭлемент();
		НовыйОбъект.Наименование = СтруктураПараметров.Наименование;
		НовыйОбъект.НаименованиеПолное = СтруктураПараметров.ПолноеНаименование;
		НовыйОбъект.Партнер = Клиент;
		НовыйОбъект.CRM_ИНН = СтруктураПараметров.ИНН;
		НовыйОбъект.CRM_КПП = СтруктураПараметров.КПП;
		НовыйОбъект.CRM_ОГРН = СтруктураПараметров.ОГРН;
		НовыйОбъект.КодПоОКПО = СтруктураПараметров.КодПоООКПО;		
		НовыйОбъект.ОрганизационноПравоваяФорма = Справочники.вогОрганизационноПравовыеФормы.НайтиПоНаименованию(СтруктураПараметров.ОрганизационноПравоваяФорма);
		СтрокаОрганизация = НовыйОбъект.Организации.Добавить();
		СтрокаОрганизация.Организация = Организация;
		Для Каждого Подразделение из МассивПодразделений цикл
			СтрокаПодразделение = НовыйОбъект.Подразделения.Добавить();
			СтрокаПодразделение.Подразделение = Подразделение;
		КонецЦикла;	
		
		Если СокрЛП(СтруктураПараметров.ЮридическийАдрес) <> "" тогда
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйОбъект,СтруктураПараметров.ЮридическийАдрес,Справочники.ВидыКонтактнойИнформации.ЮрАдресЮридическогоЛица);
		КонецЕсли;	
		
		Если СокрЛП(СтруктураПараметров.АдресДляКорреспонденции) <> "" тогда
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйОбъект,СтруктураПараметров.АдресДляКорреспонденции,Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес для корреспонденции",,Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Контактная информация справочника ""Юридические лица""")));
		КонецЕсли;	
		
		Если СокрЛП(СтруктураПараметров.АдресДляПервичнойДокументации) <> "" тогда
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйОбъект,СтруктураПараметров.АдресДляПервичнойДокументации,Справочники.ВидыКонтактнойИнформации.АдресЮридическогоЛица);
		КонецЕсли;	
	
		НачатьТранзакцию();
		Попытка
		
			НовыйОбъект.Записать();		
		
			Ответственный	= ИсполнительПоручения;
			Срок			= ТекущаяДата() + 3600;
			Подразделение	= ИсполнительПоручения.Подразделение;
			Трудоемкость	= Неопределено;		
		
			СтруктураРеквизитов = Новый Структура("Дата, Автор, Постановщик, Ответственный, Предмет, Тема, Подразделение, Организация, Срок, Задача, РезультатЗадачи, КомментарийЗадачи, Трудоемкость");
												
			СтруктураРеквизитов.Автор 			= Пользователи.ТекущийПользователь();
			СтруктураРеквизитов.Постановщик 	= Пользователи.ТекущийПользователь();
			СтруктураРеквизитов.Ответственный	= Ответственный;
			СтруктураРеквизитов.Дата 			= ТекущаяДата();
			СтруктураРеквизитов.Предмет 		= НовыйОбъект.Ссылка;
			СтруктураРеквизитов.Тема 			= "Согласовать юр.лицо";
			СтруктураРеквизитов.Подразделение	= Подразделение;
			СтруктураРеквизитов.Организация		= Подразделение.Организация;
			СтруктураРеквизитов.Срок 			= Срок;
			СтруктураРеквизитов.Задача 			= "Согласовать юр.лицо";
			СтруктураРеквизитов.РезультатЗадачи	= "Юр.лицо согласовано";
			СтруктураРеквизитов.КомментарийЗадачи = "Требуется согласовать юр.лицо "+СокрЛП(НовыйОбъект.Ссылка);
			СтруктураРеквизитов.Трудоемкость 	= Трудоемкость;
			
			СозданныйОбъект = ЗапуститьБизнесПроцесс(СтруктураРеквизитов);		
			
			Если СозданныйОбъект.Результат = Ложь тогда
				
				ОтменитьТранзакцию();
				
				МассивРезультат = Новый Массив;
				МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,СозданныйОбъект.ОписаниеОшибки));
		
				Возврат ПараметрыВJSON(МассивРезультат);
				
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МассивРезультат = Новый Массив;
			МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Ложь,ОписаниеОшибки()));
		
			Возврат ПараметрыВJSON(МассивРезультат);
			
		КонецПопытки;	
			
		Попытка
			КлючОбсуждения	= вогСистемаВзаимодействийСервер.СоздатьНовоеОбсуждениеПоОбъекту(НовыйОбъект.Ссылка);	
			ИдентификаторАвтора	= СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИсполнительПоручения.ИдентификаторПользователяИБ);	
			ОбъектСообщение = СистемаВзаимодействия.СоздатьСообщение(КлючОбсуждения);
			ОбъектСообщение.Автор = ИдентификаторАвтора;
			ОбъектСообщение.Текст = "Загружено из b2b новое юр.лицо "+СокрЛП(НовыйОбъект.Ссылка)+". по клиенту "+СокрЛП(Клиент)+". Требуется отправить его на согласование.";
			ОбъектСообщение.Получатели.Добавить(ИдентификаторАвтора);
			ОбъектСообщение.Записать();			
		Исключение
		КонецПопытки;
		
		МассивРезультат = Новый Массив;
		МассивРезультат.Добавить(Новый Структура("Результат,Комментарий",Истина,"Поручение успешно создано."));
		
		Возврат ПараметрыВJSON(МассивРезультат);
		
	ИначеЕсли СтруктураПараметров.Режим = "ТорговыеТочкиКлиента" тогда
		
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	вогТорговыеТочки.Ссылка КАК Ссылка,
			|	вогТорговыеТочки.Наименование КАК Наименование,
			|	вогТорговыеТочки.МестоположениеНаРынке КАК Расположение,
			|	вогТорговыеТочки.Вывеска КАК Вывеска,
			|	""Собственная"" КАК Принадлежность
			|ИЗ
			|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
			|ГДЕ
			|	вогТорговыеТочки.Партнер = &Клиент
			|	И вогТорговыеТочки.ПометкаУдаления = ЛОЖЬ
			|	И вогТорговыеТочки.Вид В(&СписокВидовТТ)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	вогСвязиТТСТТДистрибутором.ТорговаяТочка,
			|	вогСвязиТТСТТДистрибутором.ТорговаяТочка.Наименование,
			|	вогСвязиТТСТТДистрибутором.ТорговаяТочка.МестоположениеНаРынке,
			|	вогСвязиТТСТТДистрибутором.ТорговаяТочка.Вывеска,
			|	""Привлеченная""
			|ИЗ
			|	РегистрСведений.вогСвязиТТСТТДистрибутором КАК вогСвязиТТСТТДистрибутором
			|ГДЕ
			|	вогСвязиТТСТТДистрибутором.ТорговаяТочкаДистрибутор.Партнер = &Клиент
			|	И вогСвязиТТСТТДистрибутором.ТорговаяТочка.ПометкаУдаления = ЛОЖЬ";
		
		СписокВидовТТ = Новый Массив;
		СписокВидовТТ.Добавить(Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		СписокВидовТТ.Добавить(Справочники.вогВидыТорговыхТочек.ТРТД);
				
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("СписокВидовТТ", СписокВидовТТ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		МассивРезультат = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки	= Новый Структура("Наименование, Расположение, Вывеска, Принадлежность, Статус");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки,Выборка);
			СвойствоСтатусРаботы 	= ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Статус ТТ");
			Статус 	= ПолучитьЗначениеКлассификатора(Выборка.Ссылка,СвойствоСтатусРаботы);			
			СтруктураСтроки.Статус = СокрЛП(Статус);
			МассивРезультат.Добавить(СтруктураСтроки);
		КонецЦикла;		
		
		Возврат ПараметрыВJSON(МассивРезультат);	
	
	ИначеЕсли СтруктураПараметров.Режим = "ИнтернетМагазиныКлиента" тогда
		
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);
		
		Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//	|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК ИнтернетМагазин,
		//	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Наименование КАК НаименованиеТТ,
		//	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Код КАК КодТТ,
		//	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка КАК Ссылка
		//	|ИЗ
		//	|	Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
		//	|ГДЕ
		//	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Вид = &ВидТТ
		//	|	И вогТорговыеТочкиКонтактнаяИнформация.Вид = &ВидИнформации
		//	|	И вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Партнер = &Клиент";
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК ИнтернетМагазин,
			|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Наименование КАК НаименованиеТТ,
			|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Код КАК КодТТ,
			|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка КАК Ссылка,
			|	вогТорговыеТочкиПодразделения.Подразделение.Организация КАК Организация
			|ИЗ
			|	Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.Подразделения КАК вогТорговыеТочкиПодразделения
			|		ПО вогТорговыеТочкиКонтактнаяИнформация.Ссылка = вогТорговыеТочкиПодразделения.Ссылка
			|ГДЕ
			|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Вид = &ВидТТ
			|	И вогТорговыеТочкиКонтактнаяИнформация.Вид = &ВидИнформации
			|	И вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Партнер = &Клиент";		
		
		Запрос.УстановитьПараметр("ВидИнформации", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("f4e67328-cc8c-11e8-a684-005056bc3fe8")));
		Запрос.УстановитьПараметр("ВидТТ", Справочники.вогВидыТорговыхТочек.ИнтернетМагазин);
		Запрос.УстановитьПараметр("Клиент", Клиент);
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//	|	ПартнерыКонтактнаяИнформация.Представление КАК ИнтернетМагазин
		//	|ИЗ
		//	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		//	|ГДЕ
		//	|	ПартнерыКонтактнаяИнформация.Ссылка = &Клиент
		//	|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
		//
		//Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("a50b958d-d39e-11e8-a684-005056bc3fe8")));
		//Запрос.УстановитьПараметр("Клиент", Клиент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		МассивРезультат = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			СвойствоСтатусРаботы 	= ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Статус ТТ");
			Статус 	= ПолучитьЗначениеКлассификатора(Выборка.Ссылка,СвойствоСтатусРаботы);			

			МассивРезультат.Добавить(Новый Структура("Значение, НаименованиеТТ, КодТТ, Организация, Статус",СокрЛП(Выборка.ИнтернетМагазин),СокрЛП(Выборка.НаименованиеТТ),СокрЛП(Выборка.КодТТ),XMLСтрока(Выборка.Организация),СокрЛП(Статус)));
		КонецЦикла;		
		
		Возврат ПараметрыВJSON(МассивРезультат);	
	
	ИначеЕсли СтруктураПараметров.Режим = "ТорговыеМаркиКлиента" тогда
		
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК ТорговаяМарка
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
			|ГДЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Клиент
			|	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатора";
		
		Запрос.УстановитьПараметр("ЗначениеКлассификатора", Справочники.CRM_ЗначенияКлассификаторов.НайтиПоНаименованию("Торговая марка"));
		Запрос.УстановитьПараметр("Клиент", Клиент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		МассивРезультат = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			МассивРезультат.Добавить(СокрЛП(Выборка.ТорговаяМарка));
		КонецЦикла;		
		
		Возврат ПараметрыВJSON(МассивРезультат);	
			
	ИначеЕсли СтруктураПараметров.Режим = "СтатусыКонтрагентов" тогда
		
		МассивЮрЛиц = Новый Массив;
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ТаблицаРезультат.Колонки.Добавить("КонтрагентИД");
		ТаблицаРезультат.Колонки.Добавить("ЮрЛицо");
		ТаблицаРезультат.Колонки.Добавить("Статус");
		
		Для каждого КонтрагентИД из СтруктураПараметров.Контрагенты цикл
			ЮрЛицо = XMLЗначение(Тип("СправочникСсылка.вогЮридическиеЛица"), КонтрагентИД);
			Если Лев(ЮрЛицо,18) <> "<Объект не найден>" тогда
				МассивЮрЛиц.Добавить(ЮрЛицо);
				СтрокаТаблицы = ТаблицаРезультат.Добавить();
				СтрокаТаблицы.КонтрагентИД = КонтрагентИД;
				СтрокаТаблицы.ЮрЛицо = ЮрЛицо;
			Иначе
				СтрокаТаблицы = ТаблицаРезультат.Добавить();
				СтрокаТаблицы.КонтрагентИД = КонтрагентИД;
				СтрокаТаблицы.ЮрЛицо = Неопределено;
			КонецЕсли;	
		КонецЦикла;	
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК ЮрЛицо,
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК Статус
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
			|ГДЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект В(&СписокЮрЛиц)
			|	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("СписокЮрЛиц", МассивЮрЛиц);
		Запрос.УстановитьПараметр("Владелец", ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Статус юридического лица"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТЗ = РезультатЗапроса.Выгрузить();
		
		МассивРезультат = Новый Массив;
		
		Для каждого СтрокаТаблицаРезультат из ТаблицаРезультат цикл
			Если ЗначениеЗаполнено(СтрокаТаблицаРезультат.ЮрЛицо) тогда
				СтрокаТЗ = ТЗ.Найти(СтрокаТаблицаРезультат.ЮрЛицо,"ЮрЛицо");
				Если СтрокаТЗ <> Неопределено тогда
					СтрокаТаблицаРезультат.Статус = СокрЛП(СтрокаТЗ.Статус);
				Иначе
					СтрокаТаблицаРезультат.Статус = "Статус не заполнен";
				КонецЕсли;					
			Иначе
				СтрокаТаблицаРезультат.Статус = "Контрагент отсутствует в CRM";
			КонецЕсли;				
			
			МассивРезультат.Добавить(Новый Структура("КонтрагентИД, Статус", СтрокаТаблицаРезультат.КонтрагентИД, СтрокаТаблицаРезультат.Статус));
			
		КонецЦикла;	
		
		Возврат ПараметрыВJSON(МассивРезультат);
		
	ИначеЕсли СтруктураПараметров.Режим = "ДанныеДоговора" тогда
		
		МассивРезультат = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.вогИдентификаторПлитка = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", СтруктураПараметров.Клиент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() тогда
			Договор = Выборка.Ссылка;
		Иначе
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;
		
		КоммерческоеСоглашение = ПолучитьКоммерческиеСоглашения(Договор, Справочники.НаправленияДеятельности.Плитка);
		
		Если ЗначениеЗаполнено(КоммерческоеСоглашение) тогда
			Если КоммерческоеСоглашение.ПолныйАвансовыйПлатежНаВесьТовар = Истина тогда
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Авансовый платеж за весь поставленный товар в размере 100%","");
				МассивРезультат.Добавить(СтруктураСтроки);
			ИначеЕсли КоммерческоеСоглашение.РазмерАвансаЗаПартиюТовара <> 0 тогда
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Частичная оплата и отсрочка на неоплаченную часть товара","");
				МассивРезультат.Добавить(СтруктураСтроки);				
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Размер аванса за партию товара, %:",СокрЛП(КоммерческоеСоглашение.РазмерАвансаЗаПартиюТовара));
				МассивРезультат.Добавить(СтруктураСтроки);				
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Отсрочка платежа на неоплаченную часть товара, дни:",СокрЛП(КоммерческоеСоглашение.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара));
				МассивРезультат.Добавить(СтруктураСтроки);
			ИначеЕсли КоммерческоеСоглашение.ОтсрочкаПлатежаНаВесьТовар <> 0 тогда
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Отсрочка оплаты на весь поставляемый товар","");
				МассивРезультат.Добавить(СтруктураСтроки);
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Отсрочка оплаты (от даты отгрузки), дни:",СокрЛП(КоммерческоеСоглашение.ОтсрочкаПлатежаНаВесьТовар));
				МассивРезультат.Добавить(СтруктураСтроки);
				Если КоммерческоеСоглашение.ОтсрочкаОплатыПриОткрытииНовогоМагазина <> 0 тогда
					СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Дополнительная отсрочка сверх основной при открытии нового магазина:",СокрЛП(КоммерческоеСоглашение.ОтсрочкаОплатыПриОткрытииНовогоМагазина));
					МассивРезультат.Добавить(СтруктураСтроки);
				КонецЕсли;	
				Если КоммерческоеСоглашение.ОтсрочкаОплатыПриОткрытииНовогоМагазина <> 0 тогда
					СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Дополнительная отсрочка сверх основной при заказе нового товара:",СокрЛП(КоммерческоеСоглашение.ОтсрочкаОплатыПриЗаказеНовогоТовара));
					МассивРезультат.Добавить(СтруктураСтроки);
				КонецЕсли;	
			ИначеЕсли ЗначениеЗаполнено(КоммерческоеСоглашение.СрокиОтчетаОПродажах) тогда
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Оплата после реализации товара третьим лицам","");
				МассивРезультат.Добавить(СтруктураСтроки);
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Покупатель оплачивает товар в течении, календ. дни (с момента реализации):",СокрЛП(КоммерческоеСоглашение.СрокОплатыТовара));
				МассивРезультат.Добавить(СтруктураСтроки);
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Максимальное количество календ.дней отсрочки:",СокрЛП(КоммерческоеСоглашение.МаксимумДнейОтсрочки));
				МассивРезультат.Добавить(СтруктураСтроки);
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияОплаты", "Срок предоставления отчета о продажах:",СокрЛП(КоммерческоеСоглашение.СрокиОтчетаОПродажах));
				МассивРезультат.Добавить(СтруктураСтроки);
			КонецЕсли;
			Если КоммерческоеСоглашение.ЕстьВозвратТовара = Ложь тогда
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияВозврата", "Предполагается возврат товара надлежащего качества:","Нет");
				МассивРезультат.Добавить(СтруктураСтроки);
			Иначе
				СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияВозврата", "Предполагается возврат товара надлежащего качества:","Да");
				МассивРезультат.Добавить(СтруктураСтроки);
				Если КоммерческоеСоглашение.ПроцентРеализованногоТовара <> 0 тогда
					СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияВозврата", "Возврат предоставляется, если Покупатель продал менее указанного % от объема поставленного товара:",СокрЛП(КоммерческоеСоглашение.ПроцентРеализованногоТовара));
					МассивРезультат.Добавить(СтруктураСтроки);
				КонецЕсли;	
				Если КоммерческоеСоглашение.СрокРеализацииУказанногоПроцентаПоставленногоТовара <> 0 тогда
					СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияВозврата", "С даты поставки товара прошло не менее, дни:",СокрЛП(КоммерческоеСоглашение.СрокРеализацииУказанногоПроцентаПоставленногоТовара));
					МассивРезультат.Добавить(СтруктураСтроки);
				КонецЕсли;	
				Если КоммерческоеСоглашение.РазмерСкидкиНаТоварПодлежащийВозврату <> 0 тогда
					СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияВозврата", "Вместо возврата можеть быть предложена скидка,% (от партии):",СокрЛП(КоммерческоеСоглашение.РазмерСкидкиНаТоварПодлежащийВозврату));
					МассивРезультат.Добавить(СтруктураСтроки);
				КонецЕсли;
				Если КоммерческоеСоглашение.ПоставщикПроизводитВозвратНеликвидногоТовара = Истина тогда
					СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияВозврата", "ВОГ производит возврат товара","");
					МассивРезультат.Добавить(СтруктураСтроки);
				КонецЕсли;				
			КонецЕсли;
			Для каждого СтрокаТТ из КоммерческоеСоглашение.АдресаДоставки цикл
				ТаблицаРеквизитов = ПолучитьРеквизитыТТ(СтрокаТТ.ВладелецАдреса);
				Если ТаблицаРеквизитов.Количество() > 0 тогда
					СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияДоставки", СокрЛП(СтрокаТТ.ВладелецАдреса),"Заголовок");
					МассивРезультат.Добавить(СтруктураСтроки);
					Для каждого СтрокаТЗ из ТаблицаРеквизитов цикл
						СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияДоставки", СтрокаТЗ.Наименование, СокрЛП(СтрокаТЗ.Значение));
						МассивРезультат.Добавить(СтруктураСтроки);
					КонецЦикла;					
				КонецЕсли;				
			КонецЦикла;			
			СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияПодачиПретензии", "Срок подачи претензии: 3 дня для приемки по количеству товара (по внутритарному количеству прибывшей партии) и по ассортименту (пересортица) с момента принятия товара на склад. 5 дней для приемки товара по качеству (внутритарному содержимому партии товара) производится в течении 5 (пяти) рабочих дней с момента принятия товара на склад.","");
			МассивРезультат.Добавить(СтруктураСтроки);
			СтруктураСтроки = Новый Структура("ВидУсловий, ЗаголовокПоля, ЗначениеПоля", "УсловияПодачиПретензии", "Срок ответа на претензию равен 14 дням.","");
			МассивРезультат.Добавить(СтруктураСтроки);
			
		Иначе
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;	
		
		Возврат ПараметрыВJSON(МассивРезультат);
		
	// ++ VOG Солодов В.В. 01.09.2021 DEV-890
	// ++ Возврат к версии хранилища 4638
	ИначеЕсли СтруктураПараметров.Режим = "ДанныеДоговораДляГлавной" тогда
		
		МассивРезультат = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.вогИдентификаторПлитка = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", СтруктураПараметров.Клиент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() тогда
			Договор = Выборка.Ссылка;
		Иначе
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;
		
		КоммерческоеСоглашение = ПолучитьКоммерческиеСоглашения(Договор, Справочники.НаправленияДеятельности.Плитка);
		
		Если ЗначениеЗаполнено(КоммерческоеСоглашение) тогда
			СтруктураВозврата = Новый Структура("УсловияОплаты, УсловияВозврата, УсловияДоставки, УсловияПодачиПретензии");
			
			Если КоммерческоеСоглашение.ПолныйАвансовыйПлатежНаВесьТовар = Истина тогда
				СтруктураВозврата.УсловияОплаты = "Аванс 100%";				
			ИначеЕсли КоммерческоеСоглашение.РазмерАвансаЗаПартиюТовара <> 0 тогда
				СтруктураВозврата.УсловияОплаты =  "Аванс "+ СокрЛП(КоммерческоеСоглашение.РазмерАвансаЗаПартиюТовара)+"%";				
			ИначеЕсли КоммерческоеСоглашение.ОтсрочкаПлатежаНаВесьТовар <> 0 тогда
				СтруктураВозврата.УсловияОплаты = "Отсрочка оплаты на весь товар";
			ИначеЕсли ЗначениеЗаполнено(КоммерческоеСоглашение.СрокиОтчетаОПродажах) тогда
				СтруктураВозврата.УсловияОплаты =  "Оплата после реализации";				
			КонецЕсли;
			
			СтруктураВозврата.УсловияВозврата = "ненадлежащего качества 14 дней";
			
			МассивУсловийДоставки = Новый Массив;
			Для каждого СтрокаТТ из КоммерческоеСоглашение.АдресаДоставки цикл
				ТаблицаРеквизитов = ПолучитьРеквизитыТТ(СтрокаТТ.ВладелецАдреса);
				Если ТаблицаРеквизитов.Количество() > 0 тогда
					СтруктураДоставки = Новый Структура("Владелец, Адреса");
					СтруктураДоставки.Владелец = СокрЛП(СтрокаТТ.ВладелецАдреса);
					МассивАдресов = Новый Массив;					
					Для каждого СтрокаТЗ из ТаблицаРеквизитов цикл
						МассивАдресов.Добавить(СтрокаТЗ.Наименование + СокрЛП(СтрокаТЗ.Значение));						
					КонецЦикла;
					СтруктураДоставки.Адреса = МассивАдресов;
				КонецЕсли;				
			КонецЦикла;			
			
			СтруктураВозврата.УсловияПодачиПретензии = "Срок подачи: 3 дня по количеству, 5 дней по качеству. Срок ответа 14 дней.";
			
			МассивРезультат.Добавить(СтруктураВозврата);
			
		Иначе
			Возврат ПараметрыВJSON(МассивРезультат);
		КонецЕсли;	
		
		Возврат ПараметрыВJSON(МассивРезультат);
		
	ИначеЕсли СтруктураПараметров.Режим = "КонтактыДляГлавной" тогда
		
		Организация = XMLЗначение(Тип("СправочникСсылка.Организации"), СтруктураПараметров.Организация);
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		// ++ VOG Солодов В.В. 15.10.2021 DEV-957
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вогМенеджерыОбъектов.Менеджер КАК Менеджер,
		|	ЕСТЬNULL(ПользователиКонтактнаяИнформация.НомерТелефона, """") КАК ДобНомер
		|ИЗ
		|	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО (вогМенеджерыОбъектов.Менеджер = ПользователиКонтактнаяИнформация.Ссылка)
		|			И (ПользователиКонтактнаяИнформация.Вид = &ВидКИ)
		|ГДЕ
		|	вогМенеджерыОбъектов.НаправлениеДеятельности = &НаправлениеДеятельности
		|	И вогМенеджерыОбъектов.Роль = &Роль
		|	И вогМенеджерыОбъектов.Владелец.Партнер = &Партнер
		|	И вогМенеджерыОбъектов.Подразделение.Организация = &Организация
		|	И вогМенеджерыОбъектов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
		Запрос.УстановитьПараметр("ВидКИ", Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий);
		// До изменения
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ	
		//|	вогМенеджерыОбъектов.Менеджер КАК Менеджер
		//|ИЗ
		//|	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		//|ГДЕ
		//|	вогМенеджерыОбъектов.НаправлениеДеятельности = &НаправлениеДеятельности
		//|	И вогМенеджерыОбъектов.Роль = &Роль
		//|	И вогМенеджерыОбъектов.Владелец.Партнер = &Партнер
		//|	И вогМенеджерыОбъектов.Подразделение.Организация = &Организация
		//|	И вогМенеджерыОбъектов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		// -- VOG Солодов В.В. 15.10.2021 DEV-957
		
		Запрос.УстановитьПараметр("НаправлениеДеятельности", Справочники.НаправленияДеятельности.Плитка);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Партнер", Клиент);
		
		Запрос.УстановитьПараметр("Роль", Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
		Выборка = Запрос.Выполнить().Выбрать();		
		Если Выборка.Следующий() тогда
			Менеджер = СокрЛП(Выборка.Менеджер);
			МенеджерДобНомер = СокрЛП(Выборка.ДобНомер); // VOG Солодов В.В. 15.10.2021 DEV-957
		Иначе
			Менеджер = "";
			МенеджерДобНомер = ""; // VOG Солодов В.В. 15.10.2021 DEV-957
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Роль", Справочники.РолиКонтактныхЛицПартнеров.Координатор);
		Выборка = Запрос.Выполнить().Выбрать();		
		Если Выборка.Следующий() тогда
			Координатор = СокрЛП(Выборка.Менеджер);
		Иначе
			Координатор = "";
		КонецЕсли;
		
		Телефон = "";
		ЭлектроннаяПочта = "";
		АдресОфиса = "";
		НаКарте = "";		
		
		Если ЗначениеЗаполнено(Организация) тогда
			Для каждого Контакт из Организация.КонтактнаяИнформация цикл
				Если Контакт.ВидДляСписка.Наименование = "Телефон" тогда
					Телефон = Контакт.Представление;
				КонецЕсли;	
				Если Контакт.ВидДляСписка.Наименование = "Юридический адрес" тогда
					АдресОфиса = Контакт.Представление;
				КонецЕсли;	
				Если Контакт.ВидДляСписка.Наименование = "Адрес для приемка заказов (плитка)" тогда
					ЭлектроннаяПочта = Контакт.Представление;
				КонецЕсли;	
			КонецЦикла;			
		КонецЕсли;	
		
		МассивРезультат = Новый Массив;
		
		// ++ VOG Солодов В.В. 15.10.2021 DEV-957
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Менеджер", 			Менеджер);
		СтруктураВозврата.Вставить("Координатор", 		Координатор);
		Если Не ПустаяСтрока(МенеджерДобНомер) Тогда
			СтруктураВозврата.Вставить("Телефон", 		СтрШаблон("%1 доб. %2", Телефон, МенеджерДобНомер));
		Иначе
			СтруктураВозврата.Вставить("Телефон", 		Телефон);
		КонецЕсли;
		СтруктураВозврата.Вставить("ЭлектроннаяПочта", 	ЭлектроннаяПочта);
		СтруктураВозврата.Вставить("АдресОфиса", 		АдресОфиса);
		СтруктураВозврата.Вставить("НаКарте", 			НаКарте);
		// До изменения
		//СтруктураВозврата = Новый Структура("Менеджер, Координатор, Телефон, ЭлектроннаяПочта, АдресОфиса, НаКарте",Менеджер,Координатор,Телефон,ЭлектроннаяПочта,АдресОфиса,НаКарте);
		// -- VOG Солодов В.В. 15.10.2021 DEV-957
		МассивРезультат.Добавить(СтруктураВозврата);
		
		Возврат ПараметрыВJSON(МассивРезультат);		
		
	// -- Возврат к версии хранилища 4638
	Иначе
		Возврат ПараметрыВJSON(Новый Массив);
	// -- VOG Солодов В.В. 01.09.2021 DEV-890
		
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьРеквизитыТТ(ТорговаяТочка)
	
	МассивНаименований = Новый Массив;
	МассивНаименований.Добавить("Время и дни приемки товара");
	МассивНаименований.Добавить("Комментарий по приемке товара");
	МассивНаименований.Добавить("Поставок за период");
	МассивНаименований.Добавить("Количество раз");
	МассивНаименований.Добавить("Комментарий по доставке");
	МассивНаименований.Добавить("Минимальная стоимость товара в рейсе, руб.");	
	
	МассивРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Наименование КАК Наименование,
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК Значение
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект
		|	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Наименование В(&Наименование)
		|	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика";
	
	Запрос.УстановитьПараметр("Объект", ТорговаяТочка);
	Запрос.УстановитьПараметр("Наименование", МассивНаименований);
	Запрос.УстановитьПараметр("Аналитика", Справочники.НаправленияДеятельности.Плитка);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции	

Функция ПолучитьЗначениеКлассификатора(Ссылка,Классификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Классификаторы
	|ИЗ
	|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
	|ГДЕ
	|	CRM_ЗначенияКлассификаторов.Владелец = &ЗначениеКлассификатора
	|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Классификаторы.Ссылка КАК Классификатор,
	|	ВЫБОР
	|		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
	|			ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|		ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец
	|	КОНЕЦ КАК ИмяКлассификатора,
	|	ВЫБОР
	|		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
	|			ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
	|		ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|	КОНЕЦ КАК Результат
	|ИЗ
	|	Классификаторы КАК Классификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО Классификаторы.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект");
	Запрос.УстановитьПараметр("ЗначениеКлассификатора",Классификатор);
	Запрос.УстановитьПараметр("Объект",Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоммерческиеСоглашения(ДоговорСсылка, НаправлениеДеятельности = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	вогЮридическиеЛица.Партнер КАК Партнер,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ВТ_Договора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &ДоговорСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	1 КАК Приоритет,
	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Договора.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия
	|ПОМЕСТИТЬ ВТ_Соглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (НЕ вогКоммерческиеСоглашения.Статус В (&СписокСтатусовДляИсключения))
	|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НаправлениеДеятельности = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогКоммерческиеСоглашения.Ссылка,
	|	2,
	|	ВТ_Договора.ДатаДоговора,
	|	ВТ_Договора.НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо,
	|	ВТ_Договора.Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	|			И (НЕ вогКоммерческиеСоглашения.Статус В (&СписокСтатусовДляИсключения))
	|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НаправлениеДеятельности = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_Соглашения.Ссылка КАК Соглашение,
	|	ВТ_Соглашения.Договор КАК Договор,
	|	ВТ_Соглашения.Ссылка.вогВерсия КАК Версия,
	|	ВТ_Соглашения.Приоритет КАК Приоритет,
	|	ВТ_Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия
	|ИЗ
	|	ВТ_Соглашения КАК ВТ_Соглашения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Соглашения.Приоритет,
	|	ДатаНачалаДействия УБЫВ";
	
	СписокСтатусовДляИсключения = Новый Массив;
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт);
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован);
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом);
	
	Запрос.УстановитьПараметр("ДоговорСсылка", ДоговорСсылка);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДеятельности);	
	Запрос.УстановитьПараметр("СписокСтатусовДляИсключения", СписокСтатусовДляИсключения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Соглашение;
	Иначе
		Возврат Справочники.вогКоммерческиеСоглашения.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

Функция GetFile(Parameters)
	
	СтруктураПараметров	= ПараметрыИзJSON(Parameters);	
	СправочникФайл = XMLЗначение(Тип("СправочникСсылка."+СтруктураПараметров.Справочник), СтруктураПараметров.УИД);
	ДДФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СправочникФайл);
	ХранилищеЗначения = Новый ХранилищеЗначения(ДДФайла, Новый СжатиеДанных(9));
	Возврат ХранилищеЗначения;
	
КонецФункции

Функция AddFile(Parameters, File)
	
	СтруктураПараметров	= ПараметрыИзJSON(Parameters);
	
	Если СтруктураПараметров.Режим = "ЛоготипКлиента" тогда
		
		ВидФайла = Справочники.вогВидыПрисоединенныхФайлов.НайтиПоНаименованию("Логотип");
		
		Клиент = XMLЗначение(Тип("СправочникСсылка.Партнеры"), СтруктураПараметров.Клиент);		
		ДвоичныеДанные = File.Получить();
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", Клиент);
		ПараметрыФайла.Вставить("Автор", Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураПараметров.ИмяФайла);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтруктураПараметров.РасширениеБезТочки);
		ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
		МенеджерЗаписи = РегистрыСведений.вогПрисоедниненныеФайлыОбъектовПоВидам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайл;
		МенеджерЗаписи.ВидФайла = ВидФайла;
		МенеджерЗаписи.Записать(Истина);
		
		МассивРезультат = Новый Массив;
		
		Возврат ПараметрыВJSON(МассивРезультат);
		
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьПодразделенияЮрЛица(Организация, Клиент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	вогМенеджерыОбъектов.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
	|ГДЕ
	|	вогМенеджерыОбъектов.НаправлениеДеятельности = &НаправлениеДеятельности
	|	И вогМенеджерыОбъектов.Роль = &Роль
	|	И вогМенеджерыОбъектов.Владелец.Партнер = &Партнер
	|	И вогМенеджерыОбъектов.Подразделение.Организация = &Организация
	|	И вогМенеджерыОбъектов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Справочники.НаправленияДеятельности.Плитка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер", Клиент);
	Запрос.УстановитьПараметр("Роль", Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивРезультат = Новый Массив;
	Пока Выборка.Следующий() цикл
		МассивРезультат.Добавить(Выборка.Подразделение);
	КонецЦикла;	
	
	Возврат МассивРезультат;
	
КонецФункции

Функция ПолучитьИсполнителяПоручения(Организация, Клиент)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ	
	|	вогМенеджерыОбъектов.Менеджер КАК Менеджер
	|ИЗ
	|	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
	|ГДЕ
	|	вогМенеджерыОбъектов.НаправлениеДеятельности = &НаправлениеДеятельности
	|	И вогМенеджерыОбъектов.Роль = &Роль
	|	И вогМенеджерыОбъектов.Владелец.Партнер = &Партнер
	|	И вогМенеджерыОбъектов.Подразделение.Организация = &Организация
	|	И вогМенеджерыОбъектов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Справочники.НаправленияДеятельности.Плитка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер", Клиент);
	Запрос.УстановитьПараметр("Роль", Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Выборка.Количество() = 1 тогда
		
		Выборка.Следующий();
		Возврат Выборка.Менеджер;
		
	Иначе
		
		Выборка.Следующий();
		РольРТН = Справочники.РолиИсполнителей.НайтиПоКоду("000000004");
		СтруктураПараметров = Новый Структура("Подразделение",Выборка.Менеджер.Подразделение);
		РТН = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиСАдресацией(РольРТН, СтруктураПараметров);
		
		Для каждого ЭлементСписка из РТН цикл
			Возврат ЭлементСписка.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ЗапуститьБизнесПроцесс(СтруктураРеквизитов)
	
	КартаМаршрута 	= Справочники.CRM_КартыМаршрутов.ПоручениеНовое;
	СтартБП 		= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("aa4bc76a-0ea9-11eb-8f2a-005056bcd3e3"));
	
	БПОбъект 						= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	БПОбъект.ТочкаСтарта 			= СтартБП;
	БПОбъект.Автор 					= СтруктураРеквизитов.Автор;
	БПОбъект.Дата 					= СтруктураРеквизитов.Дата;
	БПОбъект.Наименование			= СтруктураРеквизитов.Тема;
	БПОбъект.Организация			= СтруктураРеквизитов.Организация;
	БПОбъект.Подразделение			= СтруктураРеквизитов.Подразделение;
	БПОбъект.Важность				= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	
	БПОбъект.Ответственный 			= СтруктураРеквизитов.Автор;
	БПОбъект.КартаМаршрута 			= КартаМаршрута;	
	БПОбъект.ДатаСтарта 			= СтруктураРеквизитов.Дата;
	БПОбъект.вогДолжностнаяПозиция 		= БПОбъект.Автор.CRM_ДолжностнаяПозиция;
	БПОбъект.НомерВерсииКартыМаршрута	= БПОбъект.КартаМаршрута.НомерВерсии;
	БПОбъект.Состояние 					= Перечисления.СостоянияБизнесПроцессов.Активен;
	
	БПОбъект.вогНаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка;
	
	СтрокаПредмет 						= БПОбъект.вогПредметы.Добавить();
	СтрокаПредмет.Предмет 				= СтруктураРеквизитов.Предмет;
	СтрокаПредмет.ИдентификаторСтроки 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
	
	ТЗИсполнители = Новый ТаблицаЗначений;
	ТЗИсполнители.Колонки.Добавить("Исполнитель");
	ТЗИсполнители.Колонки.Добавить("Срок");
	
	ТЗНаблюдатели 	= Новый ТаблицаЗначений;
	
	ТЗКонтролеры 	= Новый ТаблицаЗначений;
	ТЗКонтролеры.Колонки.Добавить("Приоритет");
	
	ТЗСонаблюдатели = Новый ТаблицаЗначений;
	
	СтрокаИсполнитель 				= ТЗИсполнители.Добавить();
	СтрокаИсполнитель.Исполнитель 	= "Общий срок";
	СтрокаИсполнитель.Срок 			= СтруктураРеквизитов.Срок;		
	СтрокаИсполнитель 				= ТЗИсполнители.Добавить();
	СтрокаИсполнитель.Исполнитель 	= СтруктураРеквизитов.Ответственный;
	СтрокаИсполнитель.Срок 			= СтруктураРеквизитов.Срок;
	
	ТаблицаЧекЛист = Новый ТаблицаЗначений;
	ТаблицаЧекЛист.Колонки.Добавить("Пункт");
	ТаблицаЧекЛист.Колонки.Добавить("Результат");
	ТаблицаЧекЛист.Колонки.Добавить("Приложения");
	ТаблицаЧекЛист.Колонки.Добавить("Идентификатор");
	ТаблицаЧекЛист.Колонки.Добавить("НомерСтроки");
	ТаблицаЧекЛист.Колонки.Добавить("Комментарий");
	ТаблицаЧекЛист.Колонки.Добавить("Трудоемкость");
	ТаблицаЧекЛист.Колонки.Добавить("ТиповаяЗадача");
	ТаблицаЧекЛист.Колонки.Добавить("Набор");
	ТаблицаЧекЛист.Колонки.Добавить("ПринадлежностьОбъекту");
	СтрокаЧекЛист = ТаблицаЧекЛист.Добавить();
	СтрокаЧекЛист.Пункт 		= СтруктураРеквизитов.Задача;
	СтрокаЧекЛист.Результат 	= СтруктураРеквизитов.РезультатЗадачи;
	СтрокаЧекЛист.Идентификатор = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
	СтрокаЧекЛист.НомерСтроки 	= 1;
	СтрокаЧекЛист.Комментарий 	= СтруктураРеквизитов.КомментарийЗадачи;	
	СтрокаЧекЛист.Трудоемкость 	= СтруктураРеквизитов.Трудоемкость;
	
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Приложение");
	ТЗРезультат.Колонки.Добавить("ТипПриложения");
	ТЗРезультат.Колонки.Добавить("НомерСтроки");
	ТЗРезультат.Колонки.Добавить("Ссылка");
	
	СтрокаРезультат = ТЗРезультат.Добавить();
	СтрокаРезультат.НомерСтроки		= 1;
	СтрокаРезультат.Приложение		= СтруктураРеквизитов.РезультатЗадачи.Приложения[0].Приложение;
	СтрокаРезультат.ТипПриложения	= СтруктураРеквизитов.РезультатЗадачи.ОписаниеЗадачи;
	СтрокаРезультат.Ссылка			= СтруктураРеквизитов.РезультатЗадачи;

	СтрокаЧекЛист.Приложения		= ПоместитьВоВременноеХранилище(ТЗРезультат, Новый УникальныйИдентификатор);
	
	БПОбъект.вогХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(СформироватьСтруктуруОтборов(ТЗИсполнители));
	
	Попытка
		БПОбъект.Записать();
		ЗаписатьНаборыЭтаповИсполнителей(БПОбъект, ТЗИсполнители, ТЗКонтролеры);
		СохранитьСписокСотрудников(БПОбъект, ТЗИсполнители, ТЗНаблюдатели, ТЗКонтролеры, ТЗСонаблюдатели);
		БПОбъект.мИсполнители = СформироватьТаблицуИсполнителейЗадач(БПОбъект, ТЗИсполнители, ТЗКонтролеры);
		БПОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСохранитьНастройкиЭтапов", 		Истина);
		БПОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСохранитьИсполнителейЭтапов", 	Истина);
		БПОбъект.Записать();
		БПОбъект.Старт();
		ЗаписатьНаборыЭтаповИсполнителей(БПОбъект, ТЗИсполнители, ТЗКонтролеры);
		АдресТаблицы =  ПодготовитьПредварительнуюТаблицуЗадач(БПОбъект, Истина, ТЗИсполнители, ТаблицаЧекЛист);
		СохранитьСписокЗадач(БПОбъект, ТаблицаЧекЛист, АдресТаблицы, ТЗРезультат);		
		Возврат Новый Структура("Результат, Ссылка, ОписаниеОшибки", Истина, БПОбъект.Ссылка, "");
	Исключение
		Возврат Новый Структура("Результат, Ссылка, ОписаниеОшибки", Ложь, Неопределено, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

Процедура ЗаписатьНаборыЭтаповИсполнителей(Знач ТекущийОбъект, ТаблицаИсполнители, ТаблицаКонтролеры)
	
	ТЗ_Исполнители = ТаблицаИсполнители.Скопировать();
	
	ТЗ_Контролеры = ТаблицаКонтролеры.Скопировать();
	ТЗ_Контролеры.Сортировать("Приоритет");
	
	Для Каждого СтрокаТабличнойЧасти Из ТЗ_Контролеры Цикл
		
		НоваяСтрока = ТЗ_Исполнители.Добавить();
		НоваяСтрока.Исполнитель = СтрокаТабличнойЧасти.Контролер;
		НоваяСтрока.Срок = СтрокаТабличнойЧасти.Срок;
		
	КонецЦикла;
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборЭтапов.Прочитать();
	
	Если НаборЭтапов.Количество() > 0 Тогда
		
		Для Индекс = 2 По 4 Цикл
			
			Если Индекс <= НаборЭтапов.Количество() - 1 Тогда
				
				СтрокаЭтапа = НаборЭтапов[Индекс];
				СтрокаЭтапа.Используется = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТЗ_Исполнители Цикл
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Исполнитель) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборИсполнителей.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
		НаборИсполнителей.Отбор.Исполнитель.Установить(СтрокаТабличнойЧасти.Исполнитель);
		НаборИсполнителей.Прочитать();
		
		ТекущаяЗадача 	= ПолучитьТекущуюЗадачу(ТекущийОбъект.Ссылка, СтрокаТабличнойЧасти.Исполнитель);
		НоваяДатаЗадачи = Неопределено;
		
		Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Исполнитель) Тогда
				Исполнитель = СтрокаТабличнойЧасти.Исполнитель;
			Иначе
				Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан;
			КонецЕсли;
			
			Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда		// точка действия "Выполнить"
				
				СтрокаНабора.Исполнитель 				= Исполнитель;
				
				НаборЭтапов[1].ДатаВыполнения 			= СтрокаТабличнойЧасти.Срок;
				НаборЭтапов[1].ВариантВыполнения 		= ТЗ_Контролеры.Количество() > 0;
				НаборЭтапов[1].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(
					НаборЭтапов[1].ТочкаМаршрута,
					НаборЭтапов[1].ВариантВыполнения,
					ТекущийОбъект.НомерВерсииКартыМаршрута);
				
				Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
					НоваяДатаЗадачи = СтрокаТабличнойЧасти.Срок;
				КонецЕсли;
				
			ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[2].ТочкаМаршрута Тогда	// точка действия "Проверить 1"
				
				СтрокаНабора.Исполнитель 				= Исполнитель;
				
				НаборЭтапов[2].ДатаВыполнения 			= СтрокаТабличнойЧасти.Срок;
				НаборЭтапов[2].Используется				= ТЗ_Контролеры.Количество() > 0;
				
				Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
					НоваяДатаЗадачи = СтрокаТабличнойЧасти.Срок;
				КонецЕсли;
				
			ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[3].ТочкаМаршрута Тогда	// точка действия "Проверить 2"
				
				СтрокаНабора.Исполнитель 				= Исполнитель;
				
				НаборЭтапов[3].ДатаВыполнения 			= СтрокаТабличнойЧасти.Срок;
				НаборЭтапов[3].Используется				= ТЗ_Контролеры.Количество() > 1;
				
				Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
					НоваяДатаЗадачи = СтрокаТабличнойЧасти.Срок;
				КонецЕсли;
				
			ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[4].ТочкаМаршрута Тогда	// точка действия "Проверить 3"
				
				СтрокаНабора.Исполнитель 				= Исполнитель;
				
				НаборЭтапов[4].ДатаВыполнения 			= СтрокаТабличнойЧасти.Срок;
				НаборЭтапов[4].Используется				= ТЗ_Контролеры.Количество() > 2;
				
				Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
					НоваяДатаЗадачи = СтрокаТабличнойЧасти.Срок;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекущаяЗадача) И ЗначениеЗаполнено(НоваяДатаЗадачи) И ТекущаяЗадача.СрокИсполнения <> НоваяДатаЗадачи Тогда
			ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.СрокИсполнения = НоваяДатаЗадачи;
			ЗадачаОбъект.Записать();
		КонецЕсли;
		
		НаборИсполнителей.Записать();
		
	КонецЦикла;
	
	НаборЭтапов.Записать();

КонецПроцедуры

Функция ПолучитьТекущуюЗадачу(БП,Исполнитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", 	БП.Ссылка);
	Запрос.УстановитьПараметр("Исполнитель", 	Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьСписокСотрудников(Знач ТекущийОбъект, ТаблицаИсполнители, ТаблицаНаблюдатели, ТаблицаКонтролеры, ТаблицаСоисполнители)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписейИсполнителиПоручения = РегистрыСведений.вогСписокИсполнителейПоручения.СоздатьНаборЗаписей();
	НаборЗаписейИсполнителиПоручения.Отбор.БизнесПроцесс.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписейИсполнителиПоручения.Прочитать();
	НаборЗаписейИсполнителиПоручения.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаИсполнители Цикл
		
		Если Не ТипЗнч(СтрокаТабличнойЧасти.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись 				= НаборЗаписейИсполнителиПоручения.Добавить();
		НоваяЗапись.БизнесПроцесс 	= ТекущийОбъект.Ссылка;
		НоваяЗапись.Исполнитель		= СтрокаТабличнойЧасти.Исполнитель;
		
		НоваяЗапись.СрокИсполнения	= СтрокаТабличнойЧасти.Срок;
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКонтролеры Цикл
		
		НоваяЗапись 				= НаборЗаписейИсполнителиПоручения.Добавить();
		НоваяЗапись.БизнесПроцесс 	= ТекущийОбъект.Ссылка;
		НоваяЗапись.Исполнитель		= СтрокаТабличнойЧасти.Контролер;
		НоваяЗапись.СрокИсполнения	= СтрокаТабличнойЧасти.Срок;
		НоваяЗапись.Приоритет		= СтрокаТабличнойЧасти.Приоритет;
		НоваяЗапись.Контролер 		= Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаСоисполнители Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Соисполнитель) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись 				= НаборЗаписейИсполнителиПоручения.Добавить();
		НоваяЗапись.БизнесПроцесс 	= ТекущийОбъект.Ссылка;
		НоваяЗапись.Исполнитель		= СтрокаТабличнойЧасти.Соисполнитель;
		НоваяЗапись.Соисполнитель 	= Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаНаблюдатели Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Наблюдатель) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись 				= НаборЗаписейИсполнителиПоручения.Добавить();
		НоваяЗапись.БизнесПроцесс 	= ТекущийОбъект.Ссылка;
		НоваяЗапись.Исполнитель		= СтрокаТабличнойЧасти.Наблюдатель;
		НоваяЗапись.Наблюдатель 	= Истина;
		
	КонецЦикла;
	
	НаборЗаписейИсполнителиПоручения.Записать();

КонецПроцедуры

Процедура СохранитьСписокЗадач(Знач ТекущийОбъект, ТаблицаЧекЛист, АдресТаблицыПредметовПоИсполнителям, ТЗРезультат)
	
	НаборЗаписейЗадачиПоручений = РегистрыСведений.вогЗадачиПоручений.СоздатьНаборЗаписей();
	НаборЗаписейЗадачиПоручений.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписейЗадачиПоручений.Прочитать();
	НаборЗаписейЗадачиПоручений.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
		
		НоваяЗапись = НаборЗаписейЗадачиПоручений.Добавить();
		НоваяЗапись.Объект 			= ТекущийОбъект.Ссылка;
		НоваяЗапись.Идентификатор 	= Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.Идентификатор, "_", "-"));
		НоваяЗапись.Порядок 		= СтрокаТабличнойЧасти.НомерСтроки;
		НоваяЗапись.Пункт 			= СтрокаТабличнойЧасти.Пункт;
		НоваяЗапись.Комментарий 	= Новый ХранилищеЗначения(СтрокаТабличнойЧасти.Комментарий);
		Если ЭтоАдресВременногоХранилища(СтрокаТабличнойЧасти.Приложения) Тогда
			НоваяЗапись.Результат 		= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТабличнойЧасти.Приложения));
		КонецЕсли;
		НоваяЗапись.Трудоемкость 	= СтрокаТабличнойЧасти.Трудоемкость;
		
	КонецЦикла;
	
	НаборЗаписейЗадачиПоручений.Записать();
	
	Если Не ЭтоАдресВременногоХранилища(АдресТаблицыПредметовПоИсполнителям) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаЗадачи = ПолучитьИзВременногоХранилища(АдресТаблицыПредметовПоИсполнителям);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗадачи.Идентификатор КАК Идентификатор,
	|	ВременнаяТаблицаЗадачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВременнаяТаблицаЗадачи.Порядок КАК Порядок,
	|	ВременнаяТаблицаЗадачи.Пункт КАК Пункт,
	|	ВременнаяТаблицаЗадачи.Результат КАК Результат,
	|	ВременнаяТаблицаЗадачи.Комментарий КАК Комментарий,
	|	ВременнаяТаблицаЗадачи.Трудоемкость КАК Трудоемкость,
	|	ВременнаяТаблицаЗадачи.Предмет КАК Предмет,
	|	ВременнаяТаблицаЗадачи.Исполнитель КАК Исполнитель,
	|	ВременнаяТаблицаЗадачи.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВременнаяТаблицаЗадачи.НаборЗадач КАК НаборЗадач
	|ПОМЕСТИТЬ ВТ_ЗадачиПоПредметам
	|ИЗ
	|	&ВременнаяТаблицаЗадачи КАК ВременнаяТаблицаЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Объект,
	|	ВТ_ЗадачиПоПредметам.Идентификатор КАК Идентификатор,
	|	ВТ_ЗадачиПоПредметам.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВТ_ЗадачиПоПредметам.Порядок КАК Порядок,
	|	ВТ_ЗадачиПоПредметам.Пункт КАК Пункт,
	|	ВТ_ЗадачиПоПредметам.Результат КАК Результат,
	|	ВТ_ЗадачиПоПредметам.Комментарий КАК Комментарий,
	|	ВТ_ЗадачиПоПредметам.Трудоемкость КАК Трудоемкость,
	|	ВТ_ЗадачиПоПредметам.Предмет КАК Предмет,
	|	ВТ_ЗадачиПоПредметам.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВТ_ЗадачиПоПредметам.НаборЗадач КАК НаборЗадач
	|ПОМЕСТИТЬ ВТ_ЗадачиПроцесса
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
	|		ПО ЗадачаИсполнителя.Исполнитель = ВТ_ЗадачиПоПредметам.Исполнитель
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ЗадачиПроцесса.Объект КАК Объект,
	|	ВТ_ЗадачиПроцесса.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(вогЗадачиПоручений.ИдентификаторЗадачи, ВТ_ЗадачиПроцесса.ИдентификаторЗадачи) КАК ИдентификаторЗадачи,
	|	ВТ_ЗадачиПроцесса.Порядок КАК Порядок,
	|	ВТ_ЗадачиПроцесса.Пункт КАК Пункт,
	|	ВТ_ЗадачиПроцесса.Результат КАК Результат,
	|	ВТ_ЗадачиПроцесса.Комментарий КАК Комментарий,
	|	ВТ_ЗадачиПроцесса.Трудоемкость КАК Трудоемкость,
	|	ВТ_ЗадачиПроцесса.Предмет КАК Предмет,
	|	ВТ_ЗадачиПроцесса.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВТ_ЗадачиПроцесса.НаборЗадач КАК НаборЗадач
	|ПОМЕСТИТЬ ВТ_ЗадачиПоручений
	|ИЗ
	|	ВТ_ЗадачиПроцесса КАК ВТ_ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
	|		ПО ВТ_ЗадачиПроцесса.Объект = вогЗадачиПоручений.Объект
	|			И ВТ_ЗадачиПроцесса.Идентификатор = вогЗадачиПоручений.Идентификатор
	|			И ВТ_ЗадачиПроцесса.Предмет = вогЗадачиПоручений.Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗадачиПоручений.Объект КАК Объект,
	|	ЕСТЬNULL(вогРезультатыВыполненияЗадачПоручений.Идентификатор, ВТ_ЗадачиПоручений.Идентификатор) КАК Идентификатор,
	|	ЕСТЬNULL(вогРезультатыВыполненияЗадачПоручений.ИдентификаторЗадачи, ВТ_ЗадачиПоручений.ИдентификаторЗадачи) КАК ИдентификаторЗадачи,
	|	ВТ_ЗадачиПоручений.Порядок КАК Порядок,
	|	ВТ_ЗадачиПоручений.Пункт КАК Пункт,
	|	ВТ_ЗадачиПоручений.Результат КАК Результат,
	|	ВТ_ЗадачиПоручений.Комментарий КАК Комментарий,
	|	ВТ_ЗадачиПоручений.Трудоемкость КАК Трудоемкость,
	|	ВТ_ЗадачиПоручений.Предмет КАК Предмет,
	|	ВТ_ЗадачиПоручений.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВТ_ЗадачиПоручений.НаборЗадач КАК НаборЗадач
	|ИЗ
	|	ВТ_ЗадачиПоручений КАК ВТ_ЗадачиПоручений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогРезультатыВыполненияЗадачПоручений КАК вогРезультатыВыполненияЗадачПоручений
	|		ПО ВТ_ЗадачиПоручений.Объект = вогРезультатыВыполненияЗадачПоручений.Объект
	|			И ВТ_ЗадачиПоручений.Идентификатор = вогРезультатыВыполненияЗадачПоручений.Идентификатор
	|			И ВТ_ЗадачиПоручений.Предмет = вогРезультатыВыполненияЗадачПоручений.Предмет
	|ИТОГИ ПО
	|	Объект,
	|	Предмет";
	
	Запрос.УстановитьПараметр("ВременнаяТаблицаЗадачи", ВременнаяТаблицаЗадачи);
	Запрос.УстановитьПараметр("БизнесПроцесс", 			ТекущийОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбъект = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъект.Следующий() Цикл
		
		ЗадачаОбъект = ВыборкаОбъект.Объект.ПолучитьОбъект();
		ЗадачаОбъект.вогПредметы.Очистить();
		
		ЗадачаОбъект.CRM_ВариантВыполнения = 0;
		
		НаборЗаписейЗадачиПоручения = РегистрыСведений.вогЗадачиПоручений.СоздатьНаборЗаписей();
		НаборЗаписейЗадачиПоручения.Отбор.Объект.Установить(ВыборкаОбъект.Объект);
		НаборЗаписейЗадачиПоручения.Прочитать();
		НаборЗаписейЗадачиПоручения.Очистить();
		
		ВыборкаПредмет = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПредмет.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаПредмет.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Идентификатор)
					И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторЗадачи) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись = НаборЗаписейЗадачиПоручения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
				
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(ВыборкаПредмет.Предмет) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПредмет = ЗадачаОбъект.вогПредметы.Добавить();
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Предмет", ВыборкаПредмет.Предмет);
			
			НайденныеСтроки = ТекущийОбъект.вогПредметы.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаПредмет, СтрокаТабличнойЧасти,, "НомерСтроки");
			КонецЦикла;
			
		КонецЦикла;
		
		НаборЗаписейЗадачиПоручения.Записать();		
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуИсполнителейЗадач(ТекущийОбъект, ТаблицаИсполнители, ТаблицаКонтролеры)
	
	ТаблицаНаборИсполнители = Новый ТаблицаЗначений;
	ТаблицаНаборИсполнители.Колонки.Добавить("Исполнитель");
	ТаблицаНаборИсполнители.Колонки.Добавить("ТочкаМаршрута");
	ТаблицаНаборИсполнители.Колонки.Добавить("ДатаВыполнения");
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(ТекущийОбъект.КартаМаршрута);
	НаборЭтапов.Прочитать();
	
	Для Индекс = 1 По ТаблицаИсполнители.Количество() - 1 Цикл
		
		СтрокаТабличнойЧасти = ТаблицаИсполнители.Получить(Индекс);
		
		НоваяСтрока 				= ТаблицаНаборИсполнители.Добавить();
		НоваяСтрока.Исполнитель 	= СтрокаТабличнойЧасти.Исполнитель;
		НоваяСтрока.ТочкаМаршрута 	= НаборЭтапов[1].ТочкаМаршрута;
		НоваяСтрока.ДатаВыполнения 	= СтрокаТабличнойЧасти.Срок;
		
	КонецЦикла;
	
	ИндексТочки = 2;
	
	Для Индекс = 0 По ТаблицаКонтролеры.Количество() - 1 Цикл
		
		СтрокаТабличнойЧасти = ТаблицаКонтролеры.Получить(Индекс);
		
		НоваяСтрока 				= ТаблицаНаборИсполнители.Добавить();
		НоваяСтрока.Исполнитель 	= СтрокаТабличнойЧасти.Контролер;
		НоваяСтрока.ТочкаМаршрута 	= НаборЭтапов[ИндексТочки].ТочкаМаршрута;
		НоваяСтрока.ДатаВыполнения 	= СтрокаТабличнойЧасти.Срок;
		
		ИндексТочки = ИндексТочки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаНаборИсполнители;
	
КонецФункции

Функция ПодготовитьПредварительнуюТаблицуЗадач(ТекущийОбъект, ВыводитьСообщениеОбОшибке, ТаблицаИсполнители, ТаблицаЧекЛист)
	
	Отказ = Ложь;
	
	ОбщийСписокЗадач = Ложь;
	
	ВременнаяТаблицаПредметы = ТекущийОбъект.вогПредметы.Выгрузить(, "Предмет");
	
	Если ВременнаяТаблицаПредметы.Количество() = 0 Тогда
		ОбщийСписокЗадач = Истина;
	КонецЕсли;
	
	СоответствиеИсполнителейПредметам = Новый Соответствие;
	
	Для Каждого СтрокаИсполнение Из ТаблицаИсполнители Цикл
		
		Если ТипЗнч(СтрокаИсполнение.Исполнитель) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДоступныхПредметов = Новый Массив;
		
		Если ОбщийСписокЗадач Тогда
			МассивДоступныхПредметов.Добавить(Неопределено);
		Иначе
			
			СоответствиеТипов = Новый Соответствие;
			
			Для Каждого СтрокаПредмет Из ВременнаяТаблицаПредметы Цикл
				
				ТипПредмета = ТипЗнч(СтрокаПредмет.Предмет);
				ЭлементСоответствия = СоответствиеТипов.Получить(ТипПредмета);
				
				Если ЭлементСоответствия = Неопределено Тогда
					
					МассивПредметов = Новый Массив;
					МассивПредметов.Добавить(СтрокаПредмет.Предмет);
					
					СоответствиеТипов.Вставить(ТипПредмета, МассивПредметов);
					
				Иначе
					
					ЭлементСоответствия.Добавить(СтрокаПредмет.Предмет);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из СоответствиеТипов Цикл
				
				ДоступныеПредеметы = вогБизнесПроцессыИЗадачиСервер.ОбъектыДоступныеПользователю(
					СтрокаИсполнение.Исполнитель, КлючИЗначение.Значение);
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДоступныхПредметов, ДоступныеПредеметы, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ОбщийСписокЗадач И МассивДоступныхПредметов.Количество() = 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Для исполнителя %1 не доступно ни одного предмета.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаИсполнение.Исполнитель);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			Прервать;
			
		КонецЕсли;
		
		СоответствиеИсполнителейПредметам.Вставить(СтрокаИсполнение.Исполнитель, МассивДоступныхПредметов);
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВременнаяТаблицаЗадачи = Новый ТаблицаЗначений;
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Идентификатор", 		вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаИдентификатор());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("ИдентификаторЗадачи", 	вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаИдентификатор());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Порядок", 				ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Пункт", 				ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Результат", 			вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаХранилище());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Комментарий", 			вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаХранилище());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Трудоемкость", 		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Предмет", 				вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаПредмет());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Исполнитель", 			вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаИсполнитель());
	
	ВременнаяТаблицаЗадачи.Колонки.Добавить("ТиповаяЗадача", 		ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("НаборЗадач", 			ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	
	Для Каждого КлючИЗначение Из СоответствиеИсполнителейПредметам Цикл
		
		Исполнитель = КлючИЗначение.Ключ;
		
		Для Каждого Предмет Из КлючИЗначение.Значение Цикл
			
			ТипПредмета = ТипЗнч(Предмет);
			
			Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
				
				ПустойПредмет 	= Ложь;
				АдресПриложений = СтрокаТабличнойЧасти.Приложения;
				
				Если Не Предмет = Неопределено
					И Не СтрокаТабличнойЧасти.ПринадлежностьОбъекту = Неопределено
					И Не ТипЗнч(СтрокаТабличнойЧасти.ПринадлежностьОбъекту) = ТипПредмета Тогда
					
					ПустойПредмет = Истина;
					
				ИначеЕсли Не Предмет = Неопределено
					И СтрокаТабличнойЧасти.ПринадлежностьОбъекту = Неопределено Тогда
					
					СкорректироватьСписокПриложенийПоТипуПредмета(Предмет, АдресПриложений, ПустойПредмет);
					
				КонецЕсли;
				
				НоваяСтрока = ВременнаяТаблицаЗадачи.Добавить();
				
				Если Не ПустойПредмет Тогда
					
					Идентификатор 	= Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.Идентификатор, "_", "-"));
					
					НоваяСтрока.Идентификатор 		= Идентификатор;
					НоваяСтрока.ИдентификаторЗадачи = Новый УникальныйИдентификатор();
					НоваяСтрока.Порядок 			= СтрокаТабличнойЧасти.НомерСтроки;
					НоваяСтрока.Пункт 				= СтрокаТабличнойЧасти.Пункт;
					Если ЭтоАдресВременногоХранилища(АдресПриложений) Тогда
						Результат 		= ПолучитьИзВременногоХранилища(АдресПриложений);
						НоваяСтрока.Результат 			= Новый ХранилищеЗначения(Результат);
					КонецЕсли;
					НоваяСтрока.Комментарий 		= Новый ХранилищеЗначения(СтрокаТабличнойЧасти.Комментарий);
					НоваяСтрока.Трудоемкость 		= СтрокаТабличнойЧасти.Трудоемкость;
					НоваяСтрока.ТиповаяЗадача 		= СтрокаТабличнойЧасти.ТиповаяЗадача;
					НоваяСтрока.НаборЗадач 			= СтрокаТабличнойЧасти.Набор;
					
				КонецЕсли;
				
				НоваяСтрока.Предмет 			= Предмет;
				НоваяСтрока.Исполнитель 		= Исполнитель;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВременнаяТаблицаЗадачи.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Указанные задачи не соответствуют предметам.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	АдресТаблицыПредметовПоИсполнителям = ПоместитьВоВременноеХранилище(ВременнаяТаблицаЗадачи, Новый УникальныйИдентификатор);
	
	Возврат АдресТаблицыПредметовПоИсполнителям;
	
КонецФункции

Процедура СкорректироватьСписокПриложенийПоТипуПредмета(Предмет, АдресПриложений, ПустойПредмет)
	
	Если ЭтоАдресВременногоХранилища(АдресПриложений) Тогда
		
		ТипПредмета 		= ТипЗнч(Предмет);
		ТаблицаПриложений 	= ПолучитьИзВременногоХранилища(АдресПриложений);
		
		Если ТипЗнч(ТаблицаПриложений) = Тип("ТаблицаЗначений") Тогда
			
			ТаблицаРезультат 	= ТаблицаПриложений.СкопироватьКолонки();
			
			Для Каждого СтрокаТабличнойЧасти Из ТаблицаПриложений Цикл
				
				ДобавитьСтроку 	= Истина;
				ТипПриложения 	= ТипЗнч(СтрокаТабличнойЧасти.Приложение);
				
				Если ТипПриложения = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
					
					Если Метаданные.ПланыВидовХарактеристик.вогВариантыОпросов.Тип.СодержитТип(ТипПредмета)
						И вогБизнесПроцессыИЗадачиСервер.ПредметуДоступныВариантыОпроса(Предмет) Тогда
						
						ПолноеИмяОбъектаМетаданных = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипПредмета);
						РезультатЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Приложение, "ТипыРеспондента");
						
						ТипыРеспондента = РезультатЗапроса.Выгрузить();
						
						ПараметрыОтбораСтрок = Новый Структура;
						ПараметрыОтбораСтрок.Вставить("ТипРеспондента", ПолноеИмяОбъектаМетаданных);
						
						ДобавитьСтроку = (ТипыРеспондента.НайтиСтроки(ПараметрыОтбораСтрок).Количество() > 0);
						
					Иначе
						ДобавитьСтроку = Ложь;
					КонецЕсли;
					
				ИначеЕсли ТипПриложения = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
					
					Если Не ТипПредмета = Тип("СправочникСсылка.Партнеры")
						И Не ТипПредмета = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
						ДобавитьСтроку 	= Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ДобавитьСтроку Тогда
					НоваяСтрока = ТаблицаРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаРезультат.Количество() = 0 Тогда
				ПустойПредмет = Истина;
			КонецЕсли;
			
			АдресПриложений = ПоместитьВоВременноеХранилище(ТаблицаРезультат, Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруОтборов(ТаблицаИсполнители)
	
	МассивИсполнителей = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаИсполнители Цикл
		Если СтрокаТабличнойЧасти.Исполнитель = "Общий срок" Тогда
			Продолжить;
		КонецЕсли;
		МассивИсполнителей.Добавить(СтрокаТабличнойЧасти.Исполнитель);
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивИсполнителей", МассивИсполнителей);
	
	//ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
	//
	СоответствиеОтборов 	= Новый Соответствие;
	//
	//Если ЭлементыКорня.Количество() > 0 Тогда
	//	
	//	Для Каждого СтрокаЭлемента Из ЭлементыКорня Цикл
	//		
	//		СтруктураДанных = Новый Структура;
	//		СтруктураДанных.Вставить("Настройка", 		СтрокаЭлемента.Настройка);
	//		СтруктураДанных.Вставить("Использование", 	СтрокаЭлемента.Использование);
	//		
	//		ПодготовитьОтборКомпоновкиДляРедактирования(СтрокаЭлемента.Настройка, СтруктураДанных);
	//		
	//		СоответствиеОтборов.Вставить(Новый УникальныйИдентификатор, СтруктураДанных);
	//		
	//	КонецЦикла;
	//	
	//ИначеЕсли ЗначениеЗаполнено(ВидИсполнителя) Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Настройка", 				Справочники.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.Автору);
		СтруктураДанных.Вставить("Использование", 			Истина);
		СтруктураДанных.Вставить("ОтборКомпоновкиДанных", 	Новый ОтборКомпоновкиДанных);
		
		СоответствиеОтборов.Вставить(Новый УникальныйИдентификатор, СтруктураДанных);
	//	
	//КонецЕсли;
	//
	СтруктураВозврата.Вставить("СоответствиеОтборов", СоответствиеОтборов);
	
	Возврат СтруктураВозврата;
	
КонецФункции